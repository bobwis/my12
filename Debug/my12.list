
my12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00024734  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001b8a0  08024938  08024938  00034938  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080401d8  080401d8  00060680  2**0
                  CONTENTS
  4 .ARM          00000008  080401d8  080401d8  000501d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080401e0  080401e0  00060680  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080401e0  080401e0  000501e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080401e4  080401e4  000501e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000680  20000000  080401e8  00060000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003f584  20000680  08040868  00060680  2**3
                  ALLOC
 10 ._user_heap_stack 00040004  2003fc04  08040868  0006fc04  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00060680  2**0
                  CONTENTS, READONLY
 12 .debug_info   0009dfc3  00000000  00000000  000606ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00012006  00000000  00000000  000fe671  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000392a5  00000000  00000000  00110677  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000034b8  00000000  00000000  00149920  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00006aa8  00000000  00000000  0014cdd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000477cb  00000000  00000000  00153880  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0005641c  00000000  00000000  0019b04b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00138e0c  00000000  00000000  001f1467  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0032a273  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000c918  00000000  00000000  0032a2f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000680 	.word	0x20000680
 800021c:	00000000 	.word	0x00000000
 8000220:	0802491c 	.word	0x0802491c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000684 	.word	0x20000684
 800023c:	0802491c 	.word	0x0802491c

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295
 800032e:	f000 b9bd 	b.w	80006ac <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b972 	b.w	80006ac <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9e08      	ldr	r6, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	4688      	mov	r8, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d14b      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003ee:	428a      	cmp	r2, r1
 80003f0:	4615      	mov	r5, r2
 80003f2:	d967      	bls.n	80004c4 <__udivmoddi4+0xe4>
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0720 	rsb	r7, r2, #32
 80003fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000402:	fa20 f707 	lsr.w	r7, r0, r7
 8000406:	4095      	lsls	r5, r2
 8000408:	ea47 0803 	orr.w	r8, r7, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fbb8 f7fe 	udiv	r7, r8, lr
 8000418:	fa1f fc85 	uxth.w	ip, r5
 800041c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000420:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000424:	fb07 f10c 	mul.w	r1, r7, ip
 8000428:	4299      	cmp	r1, r3
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x60>
 800042c:	18eb      	adds	r3, r5, r3
 800042e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000432:	f080 811b 	bcs.w	800066c <__udivmoddi4+0x28c>
 8000436:	4299      	cmp	r1, r3
 8000438:	f240 8118 	bls.w	800066c <__udivmoddi4+0x28c>
 800043c:	3f02      	subs	r7, #2
 800043e:	442b      	add	r3, r5
 8000440:	1a5b      	subs	r3, r3, r1
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb3 f0fe 	udiv	r0, r3, lr
 8000448:	fb0e 3310 	mls	r3, lr, r0, r3
 800044c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000450:	fb00 fc0c 	mul.w	ip, r0, ip
 8000454:	45a4      	cmp	ip, r4
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x8c>
 8000458:	192c      	adds	r4, r5, r4
 800045a:	f100 33ff 	add.w	r3, r0, #4294967295
 800045e:	f080 8107 	bcs.w	8000670 <__udivmoddi4+0x290>
 8000462:	45a4      	cmp	ip, r4
 8000464:	f240 8104 	bls.w	8000670 <__udivmoddi4+0x290>
 8000468:	3802      	subs	r0, #2
 800046a:	442c      	add	r4, r5
 800046c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000470:	eba4 040c 	sub.w	r4, r4, ip
 8000474:	2700      	movs	r7, #0
 8000476:	b11e      	cbz	r6, 8000480 <__udivmoddi4+0xa0>
 8000478:	40d4      	lsrs	r4, r2
 800047a:	2300      	movs	r3, #0
 800047c:	e9c6 4300 	strd	r4, r3, [r6]
 8000480:	4639      	mov	r1, r7
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d909      	bls.n	800049e <__udivmoddi4+0xbe>
 800048a:	2e00      	cmp	r6, #0
 800048c:	f000 80eb 	beq.w	8000666 <__udivmoddi4+0x286>
 8000490:	2700      	movs	r7, #0
 8000492:	e9c6 0100 	strd	r0, r1, [r6]
 8000496:	4638      	mov	r0, r7
 8000498:	4639      	mov	r1, r7
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	fab3 f783 	clz	r7, r3
 80004a2:	2f00      	cmp	r7, #0
 80004a4:	d147      	bne.n	8000536 <__udivmoddi4+0x156>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d302      	bcc.n	80004b0 <__udivmoddi4+0xd0>
 80004aa:	4282      	cmp	r2, r0
 80004ac:	f200 80fa 	bhi.w	80006a4 <__udivmoddi4+0x2c4>
 80004b0:	1a84      	subs	r4, r0, r2
 80004b2:	eb61 0303 	sbc.w	r3, r1, r3
 80004b6:	2001      	movs	r0, #1
 80004b8:	4698      	mov	r8, r3
 80004ba:	2e00      	cmp	r6, #0
 80004bc:	d0e0      	beq.n	8000480 <__udivmoddi4+0xa0>
 80004be:	e9c6 4800 	strd	r4, r8, [r6]
 80004c2:	e7dd      	b.n	8000480 <__udivmoddi4+0xa0>
 80004c4:	b902      	cbnz	r2, 80004c8 <__udivmoddi4+0xe8>
 80004c6:	deff      	udf	#255	; 0xff
 80004c8:	fab2 f282 	clz	r2, r2
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f040 808f 	bne.w	80005f0 <__udivmoddi4+0x210>
 80004d2:	1b49      	subs	r1, r1, r5
 80004d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d8:	fa1f f885 	uxth.w	r8, r5
 80004dc:	2701      	movs	r7, #1
 80004de:	fbb1 fcfe 	udiv	ip, r1, lr
 80004e2:	0c23      	lsrs	r3, r4, #16
 80004e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004ec:	fb08 f10c 	mul.w	r1, r8, ip
 80004f0:	4299      	cmp	r1, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x124>
 80004f4:	18eb      	adds	r3, r5, r3
 80004f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x122>
 80004fc:	4299      	cmp	r1, r3
 80004fe:	f200 80cd 	bhi.w	800069c <__udivmoddi4+0x2bc>
 8000502:	4684      	mov	ip, r0
 8000504:	1a59      	subs	r1, r3, r1
 8000506:	b2a3      	uxth	r3, r4
 8000508:	fbb1 f0fe 	udiv	r0, r1, lr
 800050c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000510:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000514:	fb08 f800 	mul.w	r8, r8, r0
 8000518:	45a0      	cmp	r8, r4
 800051a:	d907      	bls.n	800052c <__udivmoddi4+0x14c>
 800051c:	192c      	adds	r4, r5, r4
 800051e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000522:	d202      	bcs.n	800052a <__udivmoddi4+0x14a>
 8000524:	45a0      	cmp	r8, r4
 8000526:	f200 80b6 	bhi.w	8000696 <__udivmoddi4+0x2b6>
 800052a:	4618      	mov	r0, r3
 800052c:	eba4 0408 	sub.w	r4, r4, r8
 8000530:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000534:	e79f      	b.n	8000476 <__udivmoddi4+0x96>
 8000536:	f1c7 0c20 	rsb	ip, r7, #32
 800053a:	40bb      	lsls	r3, r7
 800053c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000540:	ea4e 0e03 	orr.w	lr, lr, r3
 8000544:	fa01 f407 	lsl.w	r4, r1, r7
 8000548:	fa20 f50c 	lsr.w	r5, r0, ip
 800054c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000550:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000554:	4325      	orrs	r5, r4
 8000556:	fbb3 f9f8 	udiv	r9, r3, r8
 800055a:	0c2c      	lsrs	r4, r5, #16
 800055c:	fb08 3319 	mls	r3, r8, r9, r3
 8000560:	fa1f fa8e 	uxth.w	sl, lr
 8000564:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000568:	fb09 f40a 	mul.w	r4, r9, sl
 800056c:	429c      	cmp	r4, r3
 800056e:	fa02 f207 	lsl.w	r2, r2, r7
 8000572:	fa00 f107 	lsl.w	r1, r0, r7
 8000576:	d90b      	bls.n	8000590 <__udivmoddi4+0x1b0>
 8000578:	eb1e 0303 	adds.w	r3, lr, r3
 800057c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000580:	f080 8087 	bcs.w	8000692 <__udivmoddi4+0x2b2>
 8000584:	429c      	cmp	r4, r3
 8000586:	f240 8084 	bls.w	8000692 <__udivmoddi4+0x2b2>
 800058a:	f1a9 0902 	sub.w	r9, r9, #2
 800058e:	4473      	add	r3, lr
 8000590:	1b1b      	subs	r3, r3, r4
 8000592:	b2ad      	uxth	r5, r5
 8000594:	fbb3 f0f8 	udiv	r0, r3, r8
 8000598:	fb08 3310 	mls	r3, r8, r0, r3
 800059c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80005a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80005a4:	45a2      	cmp	sl, r4
 80005a6:	d908      	bls.n	80005ba <__udivmoddi4+0x1da>
 80005a8:	eb1e 0404 	adds.w	r4, lr, r4
 80005ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80005b0:	d26b      	bcs.n	800068a <__udivmoddi4+0x2aa>
 80005b2:	45a2      	cmp	sl, r4
 80005b4:	d969      	bls.n	800068a <__udivmoddi4+0x2aa>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4474      	add	r4, lr
 80005ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005be:	fba0 8902 	umull	r8, r9, r0, r2
 80005c2:	eba4 040a 	sub.w	r4, r4, sl
 80005c6:	454c      	cmp	r4, r9
 80005c8:	46c2      	mov	sl, r8
 80005ca:	464b      	mov	r3, r9
 80005cc:	d354      	bcc.n	8000678 <__udivmoddi4+0x298>
 80005ce:	d051      	beq.n	8000674 <__udivmoddi4+0x294>
 80005d0:	2e00      	cmp	r6, #0
 80005d2:	d069      	beq.n	80006a8 <__udivmoddi4+0x2c8>
 80005d4:	ebb1 050a 	subs.w	r5, r1, sl
 80005d8:	eb64 0403 	sbc.w	r4, r4, r3
 80005dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005e0:	40fd      	lsrs	r5, r7
 80005e2:	40fc      	lsrs	r4, r7
 80005e4:	ea4c 0505 	orr.w	r5, ip, r5
 80005e8:	e9c6 5400 	strd	r5, r4, [r6]
 80005ec:	2700      	movs	r7, #0
 80005ee:	e747      	b.n	8000480 <__udivmoddi4+0xa0>
 80005f0:	f1c2 0320 	rsb	r3, r2, #32
 80005f4:	fa20 f703 	lsr.w	r7, r0, r3
 80005f8:	4095      	lsls	r5, r2
 80005fa:	fa01 f002 	lsl.w	r0, r1, r2
 80005fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000602:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000606:	4338      	orrs	r0, r7
 8000608:	0c01      	lsrs	r1, r0, #16
 800060a:	fbb3 f7fe 	udiv	r7, r3, lr
 800060e:	fa1f f885 	uxth.w	r8, r5
 8000612:	fb0e 3317 	mls	r3, lr, r7, r3
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb07 f308 	mul.w	r3, r7, r8
 800061e:	428b      	cmp	r3, r1
 8000620:	fa04 f402 	lsl.w	r4, r4, r2
 8000624:	d907      	bls.n	8000636 <__udivmoddi4+0x256>
 8000626:	1869      	adds	r1, r5, r1
 8000628:	f107 3cff 	add.w	ip, r7, #4294967295
 800062c:	d22f      	bcs.n	800068e <__udivmoddi4+0x2ae>
 800062e:	428b      	cmp	r3, r1
 8000630:	d92d      	bls.n	800068e <__udivmoddi4+0x2ae>
 8000632:	3f02      	subs	r7, #2
 8000634:	4429      	add	r1, r5
 8000636:	1acb      	subs	r3, r1, r3
 8000638:	b281      	uxth	r1, r0
 800063a:	fbb3 f0fe 	udiv	r0, r3, lr
 800063e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000642:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000646:	fb00 f308 	mul.w	r3, r0, r8
 800064a:	428b      	cmp	r3, r1
 800064c:	d907      	bls.n	800065e <__udivmoddi4+0x27e>
 800064e:	1869      	adds	r1, r5, r1
 8000650:	f100 3cff 	add.w	ip, r0, #4294967295
 8000654:	d217      	bcs.n	8000686 <__udivmoddi4+0x2a6>
 8000656:	428b      	cmp	r3, r1
 8000658:	d915      	bls.n	8000686 <__udivmoddi4+0x2a6>
 800065a:	3802      	subs	r0, #2
 800065c:	4429      	add	r1, r5
 800065e:	1ac9      	subs	r1, r1, r3
 8000660:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000664:	e73b      	b.n	80004de <__udivmoddi4+0xfe>
 8000666:	4637      	mov	r7, r6
 8000668:	4630      	mov	r0, r6
 800066a:	e709      	b.n	8000480 <__udivmoddi4+0xa0>
 800066c:	4607      	mov	r7, r0
 800066e:	e6e7      	b.n	8000440 <__udivmoddi4+0x60>
 8000670:	4618      	mov	r0, r3
 8000672:	e6fb      	b.n	800046c <__udivmoddi4+0x8c>
 8000674:	4541      	cmp	r1, r8
 8000676:	d2ab      	bcs.n	80005d0 <__udivmoddi4+0x1f0>
 8000678:	ebb8 0a02 	subs.w	sl, r8, r2
 800067c:	eb69 020e 	sbc.w	r2, r9, lr
 8000680:	3801      	subs	r0, #1
 8000682:	4613      	mov	r3, r2
 8000684:	e7a4      	b.n	80005d0 <__udivmoddi4+0x1f0>
 8000686:	4660      	mov	r0, ip
 8000688:	e7e9      	b.n	800065e <__udivmoddi4+0x27e>
 800068a:	4618      	mov	r0, r3
 800068c:	e795      	b.n	80005ba <__udivmoddi4+0x1da>
 800068e:	4667      	mov	r7, ip
 8000690:	e7d1      	b.n	8000636 <__udivmoddi4+0x256>
 8000692:	4681      	mov	r9, r0
 8000694:	e77c      	b.n	8000590 <__udivmoddi4+0x1b0>
 8000696:	3802      	subs	r0, #2
 8000698:	442c      	add	r4, r5
 800069a:	e747      	b.n	800052c <__udivmoddi4+0x14c>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	442b      	add	r3, r5
 80006a2:	e72f      	b.n	8000504 <__udivmoddi4+0x124>
 80006a4:	4638      	mov	r0, r7
 80006a6:	e708      	b.n	80004ba <__udivmoddi4+0xda>
 80006a8:	4637      	mov	r7, r6
 80006aa:	e6e9      	b.n	8000480 <__udivmoddi4+0xa0>

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <ADC_MultiModeDMAConvM0Cplt>:
// handle the highest priority interrupt to capture the true DMA conversion complete time (below RTOSOS level)
extern TIM_HandleTypeDef htim5;
void ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)	// adc conversion done (DMA complete)
{

	timestamp = TIM2->CNT;			// real time
 80006b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
//	HAL_TIM_Base_Start_IT(&htim5);
}

// these two are the real DMA Conversion complete interrupts
void ADC_MultiModeDMAConvM0Cplt(ADC_HandleTypeDef *hadc) {
	dmabufno = 0;
 80006b4:	4a07      	ldr	r2, [pc, #28]	; (80006d4 <ADC_MultiModeDMAConvM0Cplt+0x24>)
 80006b6:	2100      	movs	r1, #0
	timestamp = TIM2->CNT;			// real time
 80006b8:	4807      	ldr	r0, [pc, #28]	; (80006d8 <ADC_MultiModeDMAConvM0Cplt+0x28>)
void ADC_MultiModeDMAConvM0Cplt(ADC_HandleTypeDef *hadc) {
 80006ba:	b410      	push	{r4}
	dmabufno = 0;
 80006bc:	6011      	str	r1, [r2, #0]
	TIM5->DIER = 0x01;
 80006be:	2101      	movs	r1, #1
	timestamp = TIM2->CNT;			// real time
 80006c0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006c2:	2219      	movs	r2, #25
	timestamp = TIM2->CNT;			// real time
 80006c4:	6004      	str	r4, [r0, #0]
	TIM5->DIER = 0x01;
 80006c6:	f8c3 1c0c 	str.w	r1, [r3, #3084]	; 0xc0c
	ADC_ConvCpltCallback(hadc);
}
 80006ca:	f85d 4b04 	ldr.w	r4, [sp], #4
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006ce:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
}
 80006d2:	4770      	bx	lr
 80006d4:	200006a8 	.word	0x200006a8
 80006d8:	2002a820 	.word	0x2002a820

080006dc <ADC_MultiModeDMAConvM1Cplt>:
	timestamp = TIM2->CNT;			// real time
 80006dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

void ADC_MultiModeDMAConvM1Cplt(ADC_HandleTypeDef *hadc) {

	dmabufno = 1;
 80006e0:	4907      	ldr	r1, [pc, #28]	; (8000700 <ADC_MultiModeDMAConvM1Cplt+0x24>)
 80006e2:	2201      	movs	r2, #1
	timestamp = TIM2->CNT;			// real time
 80006e4:	4807      	ldr	r0, [pc, #28]	; (8000704 <ADC_MultiModeDMAConvM1Cplt+0x28>)
void ADC_MultiModeDMAConvM1Cplt(ADC_HandleTypeDef *hadc) {
 80006e6:	b410      	push	{r4}
	timestamp = TIM2->CNT;			// real time
 80006e8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	dmabufno = 1;
 80006ea:	600a      	str	r2, [r1, #0]
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006ec:	2119      	movs	r1, #25
	timestamp = TIM2->CNT;			// real time
 80006ee:	6004      	str	r4, [r0, #0]
	TIM5->DIER = 0x01;
 80006f0:	f8c3 2c0c 	str.w	r2, [r3, #3084]	; 0xc0c
	ADC_ConvCpltCallback(hadc);
}
 80006f4:	f85d 4b04 	ldr.w	r4, [sp], #4
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006f8:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
}
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	200006a8 	.word	0x200006a8
 8000704:	2002a820 	.word	0x2002a820

08000708 <ADC_MultiModeDMAError>:
void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma) {
 8000708:	b510      	push	{r4, lr}
	hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800070a:	2340      	movs	r3, #64	; 0x40
	ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;
 800070c:	6b84      	ldr	r4, [r0, #56]	; 0x38
	printf("Multi-mode DMA Error\n");
 800070e:	4806      	ldr	r0, [pc, #24]	; (8000728 <ADC_MultiModeDMAError+0x20>)
	hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8000710:	6423      	str	r3, [r4, #64]	; 0x40
	hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8000712:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000714:	f043 0304 	orr.w	r3, r3, #4
 8000718:	6463      	str	r3, [r4, #68]	; 0x44
	printf("Multi-mode DMA Error\n");
 800071a:	f020 fad5 	bl	8020cc8 <puts>
	HAL_ADC_ErrorCallback(hadc);
 800071e:	4620      	mov	r0, r4
}
 8000720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_ADC_ErrorCallback(hadc);
 8000724:	f005 ba58 	b.w	8005bd8 <HAL_ADC_ErrorCallback>
 8000728:	08024afc 	.word	0x08024afc

0800072c <HAL_ADCEx_MultiModeStart_DBDMA>:
		uint32_t Length) {
 800072c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072e:	4604      	mov	r4, r0
 8000730:	4616      	mov	r6, r2
 8000732:	b085      	sub	sp, #20
	__IO uint32_t counter = 0;
 8000734:	2000      	movs	r0, #0
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8000736:	69a2      	ldr	r2, [r4, #24]
		uint32_t Length) {
 8000738:	460d      	mov	r5, r1
 800073a:	461f      	mov	r7, r3
	__IO uint32_t counter = 0;
 800073c:	9003      	str	r0, [sp, #12]
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800073e:	2a01      	cmp	r2, #1
 8000740:	d903      	bls.n	800074a <HAL_ADCEx_MultiModeStart_DBDMA+0x1e>
 8000742:	2199      	movs	r1, #153	; 0x99
 8000744:	4844      	ldr	r0, [pc, #272]	; (8000858 <HAL_ADCEx_MultiModeStart_DBDMA+0x12c>)
 8000746:	f002 fc5f 	bl	8003008 <assert_failed>
	assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 800074a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800074c:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 8000750:	d17c      	bne.n	800084c <HAL_ADCEx_MultiModeStart_DBDMA+0x120>
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8000752:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8000756:	2b01      	cmp	r3, #1
 8000758:	d903      	bls.n	8000762 <HAL_ADCEx_MultiModeStart_DBDMA+0x36>
 800075a:	219b      	movs	r1, #155	; 0x9b
 800075c:	483e      	ldr	r0, [pc, #248]	; (8000858 <HAL_ADCEx_MultiModeStart_DBDMA+0x12c>)
 800075e:	f002 fc53 	bl	8003008 <assert_failed>
	__HAL_LOCK(hadc);
 8000762:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000766:	2b01      	cmp	r3, #1
 8000768:	d06d      	beq.n	8000846 <HAL_ADCEx_MultiModeStart_DBDMA+0x11a>
	if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON) {
 800076a:	6822      	ldr	r2, [r4, #0]
	__HAL_LOCK(hadc);
 800076c:	2101      	movs	r1, #1
	if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON) {
 800076e:	6893      	ldr	r3, [r2, #8]
	__HAL_LOCK(hadc);
 8000770:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
	if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON) {
 8000774:	07d8      	lsls	r0, r3, #31
 8000776:	d414      	bmi.n	80007a2 <HAL_ADCEx_MultiModeStart_DBDMA+0x76>
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000778:	4b38      	ldr	r3, [pc, #224]	; (800085c <HAL_ADCEx_MultiModeStart_DBDMA+0x130>)
 800077a:	4839      	ldr	r0, [pc, #228]	; (8000860 <HAL_ADCEx_MultiModeStart_DBDMA+0x134>)
 800077c:	681b      	ldr	r3, [r3, #0]
		__HAL_ADC_ENABLE(hadc);
 800077e:	6891      	ldr	r1, [r2, #8]
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000780:	fba0 0303 	umull	r0, r3, r0, r3
		__HAL_ADC_ENABLE(hadc);
 8000784:	f041 0101 	orr.w	r1, r1, #1
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000788:	0c9b      	lsrs	r3, r3, #18
		__HAL_ADC_ENABLE(hadc);
 800078a:	6091      	str	r1, [r2, #8]
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800078c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000790:	9303      	str	r3, [sp, #12]
		while (counter != 0) {
 8000792:	9b03      	ldr	r3, [sp, #12]
 8000794:	b12b      	cbz	r3, 80007a2 <HAL_ADCEx_MultiModeStart_DBDMA+0x76>
			counter--;
 8000796:	9b03      	ldr	r3, [sp, #12]
 8000798:	3b01      	subs	r3, #1
 800079a:	9303      	str	r3, [sp, #12]
		while (counter != 0) {
 800079c:	9b03      	ldr	r3, [sp, #12]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d1f9      	bne.n	8000796 <HAL_ADCEx_MultiModeStart_DBDMA+0x6a>
	if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON)) {
 80007a2:	6893      	ldr	r3, [r2, #8]
 80007a4:	07d9      	lsls	r1, r3, #31
 80007a6:	d545      	bpl.n	8000834 <HAL_ADCEx_MultiModeStart_DBDMA+0x108>
		ADC_STATE_CLR_SET(hadc->State,
 80007a8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80007aa:	4b2e      	ldr	r3, [pc, #184]	; (8000864 <HAL_ADCEx_MultiModeStart_DBDMA+0x138>)
 80007ac:	400b      	ands	r3, r1
 80007ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007b2:	6423      	str	r3, [r4, #64]	; 0x40
		if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET) {
 80007b4:	6853      	ldr	r3, [r2, #4]
 80007b6:	055b      	lsls	r3, r3, #21
 80007b8:	d505      	bpl.n	80007c6 <HAL_ADCEx_MultiModeStart_DBDMA+0x9a>
			ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80007ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007c4:	6423      	str	r3, [r4, #64]	; 0x40
		if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY)) {
 80007c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007c8:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 80007cc:	d039      	beq.n	8000842 <HAL_ADCEx_MultiModeStart_DBDMA+0x116>
			CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80007ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80007d0:	f023 0306 	bic.w	r3, r3, #6
 80007d4:	6463      	str	r3, [r4, #68]	; 0x44
		hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvM0Cplt;
 80007d6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
		__HAL_UNLOCK(hadc);
 80007d8:	2300      	movs	r3, #0
		hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvM0Cplt;
 80007da:	f8df c098 	ldr.w	ip, [pc, #152]	; 8000874 <HAL_ADCEx_MultiModeStart_DBDMA+0x148>
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80007de:	f06f 0102 	mvn.w	r1, #2
		__HAL_UNLOCK(hadc);
 80007e2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		hadc->DMA_Handle->XferM1HalfCpltCallback = NULL;
 80007e6:	6483      	str	r3, [r0, #72]	; 0x48
		hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvM0Cplt;
 80007e8:	e9c0 c30f 	strd	ip, r3, [r0, #60]	; 0x3c
		hadc->DMA_Handle->XferErrorCallback = ADC_MultiModeDMAError;
 80007ec:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <HAL_ADCEx_MultiModeStart_DBDMA+0x13c>)
		hadc->DMA_Handle->XferM1CpltCallback = ADC_MultiModeDMAConvM1Cplt;
 80007ee:	f8df c088 	ldr.w	ip, [pc, #136]	; 8000878 <HAL_ADCEx_MultiModeStart_DBDMA+0x14c>
		hadc->DMA_Handle->XferErrorCallback = ADC_MultiModeDMAError;
 80007f2:	64c3      	str	r3, [r0, #76]	; 0x4c
		hadc->DMA_Handle->XferM1CpltCallback = ADC_MultiModeDMAConvM1Cplt;
 80007f4:	f8c0 c044 	str.w	ip, [r0, #68]	; 0x44
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80007f8:	6011      	str	r1, [r2, #0]
		__HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80007fa:	6853      	ldr	r3, [r2, #4]
		if (hadc->Init.DMAContinuousRequests != DISABLE) {
 80007fc:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
		__HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000800:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000804:	6053      	str	r3, [r2, #4]
			ADC->CCR |= ADC_CCR_DDS;
 8000806:	4a19      	ldr	r2, [pc, #100]	; (800086c <HAL_ADCEx_MultiModeStart_DBDMA+0x140>)
 8000808:	6853      	ldr	r3, [r2, #4]
		if (hadc->Init.DMAContinuousRequests != DISABLE) {
 800080a:	b1b1      	cbz	r1, 800083a <HAL_ADCEx_MultiModeStart_DBDMA+0x10e>
			ADC->CCR |= ADC_CCR_DDS;
 800080c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000810:	6053      	str	r3, [r2, #4]
		HAL_DMAEx_MultiBufferStart_IT(hadc->DMA_Handle, (uint32_t) &ADC->CDR, (uint32_t) pData, (uint32_t) pData2,
 8000812:	4633      	mov	r3, r6
 8000814:	9700      	str	r7, [sp, #0]
 8000816:	462a      	mov	r2, r5
 8000818:	4915      	ldr	r1, [pc, #84]	; (8000870 <HAL_ADCEx_MultiModeStart_DBDMA+0x144>)
 800081a:	f006 faf3 	bl	8006e04 <HAL_DMAEx_MultiBufferStart_IT>
		if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) {
 800081e:	6823      	ldr	r3, [r4, #0]
 8000820:	6898      	ldr	r0, [r3, #8]
 8000822:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8000826:	d105      	bne.n	8000834 <HAL_ADCEx_MultiModeStart_DBDMA+0x108>
			hadc->Instance->CR2 |= (uint32_t) ADC_CR2_SWSTART;
 8000828:	689a      	ldr	r2, [r3, #8]
 800082a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800082e:	609a      	str	r2, [r3, #8]
}
 8000830:	b005      	add	sp, #20
 8000832:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return HAL_OK;
 8000834:	2000      	movs	r0, #0
}
 8000836:	b005      	add	sp, #20
 8000838:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ADC->CCR &= ~ADC_CCR_DDS;
 800083a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800083e:	6053      	str	r3, [r2, #4]
 8000840:	e7e7      	b.n	8000812 <HAL_ADCEx_MultiModeStart_DBDMA+0xe6>
			ADC_CLEAR_ERRORCODE(hadc);
 8000842:	6463      	str	r3, [r4, #68]	; 0x44
 8000844:	e7c7      	b.n	80007d6 <HAL_ADCEx_MultiModeStart_DBDMA+0xaa>
	__HAL_LOCK(hadc);
 8000846:	2002      	movs	r0, #2
}
 8000848:	b005      	add	sp, #20
 800084a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 800084c:	219a      	movs	r1, #154	; 0x9a
 800084e:	4802      	ldr	r0, [pc, #8]	; (8000858 <HAL_ADCEx_MultiModeStart_DBDMA+0x12c>)
 8000850:	f002 fbda 	bl	8003008 <assert_failed>
 8000854:	e77d      	b.n	8000752 <HAL_ADCEx_MultiModeStart_DBDMA+0x26>
 8000856:	bf00      	nop
 8000858:	08024b14 	.word	0x08024b14
 800085c:	20000244 	.word	0x20000244
 8000860:	431bde83 	.word	0x431bde83
 8000864:	fffff8fe 	.word	0xfffff8fe
 8000868:	08000709 	.word	0x08000709
 800086c:	40012300 	.word	0x40012300
 8000870:	40012308 	.word	0x40012308
 8000874:	080006b1 	.word	0x080006b1
 8000878:	080006dd 	.word	0x080006dd

0800087c <ADC_Conv_complete>:
	if (dmabufno == 1) {		// second buffer is ready
 800087c:	4b74      	ldr	r3, [pc, #464]	; (8000a50 <ADC_Conv_complete+0x1d4>)
	(*buf)[3] = timestamp;		// this may not get set until now
 800087e:	4975      	ldr	r1, [pc, #468]	; (8000a54 <ADC_Conv_complete+0x1d8>)
	if (dmabufno == 1) {		// second buffer is ready
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a75      	ldr	r2, [pc, #468]	; (8000a58 <ADC_Conv_complete+0x1dc>)
 8000884:	2b01      	cmp	r3, #1
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 8000886:	4b75      	ldr	r3, [pc, #468]	; (8000a5c <ADC_Conv_complete+0x1e0>)
 8000888:	6812      	ldr	r2, [r2, #0]
ADC_Conv_complete() {
 800088a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 800088e:	4e74      	ldr	r6, [pc, #464]	; (8000a60 <ADC_Conv_complete+0x1e4>)
ADC_Conv_complete() {
 8000890:	b087      	sub	sp, #28
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 8000892:	781b      	ldrb	r3, [r3, #0]
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 8000894:	bf08      	it	eq
 8000896:	f502 62b8 	addeq.w	r2, r2, #1472	; 0x5c0
	(*buf)[3] = timestamp;		// this may not get set until now
 800089a:	680d      	ldr	r5, [r1, #0]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 800089c:	4c71      	ldr	r4, [pc, #452]	; (8000a64 <ADC_Conv_complete+0x1e8>)
 800089e:	f8b6 005c 	ldrh.w	r0, [r6, #92]	; 0x5c
 80008a2:	4971      	ldr	r1, [pc, #452]	; (8000a68 <ADC_Conv_complete+0x1ec>)
 80008a4:	9305      	str	r3, [sp, #20]
 80008a6:	021b      	lsls	r3, r3, #8
	if (sigsend) {		// oops overrun
 80008a8:	f8df b208 	ldr.w	fp, [pc, #520]	; 8000ab4 <ADC_Conv_complete+0x238>
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008ac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80008b0:	7808      	ldrb	r0, [r1, #0]
 80008b2:	7821      	ldrb	r1, [r4, #0]
 80008b4:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
	(*buf)[3] = timestamp;		// this may not get set until now
 80008b8:	60d5      	str	r5, [r2, #12]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008ba:	f001 0003 	and.w	r0, r1, #3
 80008be:	3101      	adds	r1, #1
 80008c0:	4303      	orrs	r3, r0
 80008c2:	7021      	strb	r1, [r4, #0]
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;
 80008c4:	f8d6 008c 	ldr.w	r0, [r6, #140]	; 0x8c
	if (sigsend) {		// oops overrun
 80008c8:	f8db 1000 	ldr.w	r1, [fp]
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;
 80008cc:	e9c2 3001 	strd	r3, r0, [r2, #4]
	if (sigsend) {		// oops overrun
 80008d0:	b129      	cbz	r1, 80008de <ADC_Conv_complete+0x62>
		statuspkt.adcudpover++;		// debug adc overruning the udp railgun
 80008d2:	6fb3      	ldr	r3, [r6, #120]	; 0x78
		sigsend = 0;		// cancel previous signal
 80008d4:	2100      	movs	r1, #0
		statuspkt.adcudpover++;		// debug adc overruning the udp railgun
 80008d6:	3301      	adds	r3, #1
 80008d8:	67b3      	str	r3, [r6, #120]	; 0x78
		sigsend = 0;		// cancel previous signal
 80008da:	f8cb 1000 	str.w	r1, [fp]
 80008de:	f102 0c0e 	add.w	ip, r2, #14
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 80008e2:	4b62      	ldr	r3, [pc, #392]	; (8000a6c <ADC_Conv_complete+0x1f0>)
 80008e4:	4a62      	ldr	r2, [pc, #392]	; (8000a70 <ADC_Conv_complete+0x1f4>)
 80008e6:	2600      	movs	r6, #0
 80008e8:	881b      	ldrh	r3, [r3, #0]
 80008ea:	f8d2 e000 	ldr.w	lr, [r2]
 80008ee:	4a61      	ldr	r2, [pc, #388]	; (8000a74 <ADC_Conv_complete+0x1f8>)
 80008f0:	4961      	ldr	r1, [pc, #388]	; (8000a78 <ADC_Conv_complete+0x1fc>)
 80008f2:	6814      	ldr	r4, [r2, #0]
 80008f4:	4861      	ldr	r0, [pc, #388]	; (8000a7c <ADC_Conv_complete+0x200>)
 80008f6:	4a62      	ldr	r2, [pc, #392]	; (8000a80 <ADC_Conv_complete+0x204>)
 80008f8:	9303      	str	r3, [sp, #12]
 80008fa:	4b62      	ldr	r3, [pc, #392]	; (8000a84 <ADC_Conv_complete+0x208>)
 80008fc:	8809      	ldrh	r1, [r1, #0]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	6812      	ldr	r2, [r2, #0]
 8000902:	f9b0 0000 	ldrsh.w	r0, [r0]
 8000906:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 8000ab8 <ADC_Conv_complete+0x23c>
 800090a:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 8000abc <ADC_Conv_complete+0x240>
 800090e:	9604      	str	r6, [sp, #16]
 8000910:	9102      	str	r1, [sp, #8]
 8000912:	9301      	str	r3, [sp, #4]
		wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 8000914:	f006 011f 	and.w	r1, r6, #31
		thissamp = (*adcbuf16)[i];
 8000918:	f83c 3f02 	ldrh.w	r3, [ip, #2]!
		lastmeanwindiff = abs(meanwindiff);
 800091c:	ea80 78e0 	eor.w	r8, r0, r0, asr #31
 8000920:	3601      	adds	r6, #1
		wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 8000922:	f83a 5011 	ldrh.w	r5, [sl, r1, lsl #1]
 8000926:	441c      	add	r4, r3
		lastmeanwindiff = abs(meanwindiff);
 8000928:	eba8 78e0 	sub.w	r8, r8, r0, asr #31
		wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 800092c:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
		wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 8000930:	1b64      	subs	r4, r4, r5
		lastsamp[j] = thissamp;			// save last samples
 8000932:	f82a 3011 	strh.w	r3, [sl, r1, lsl #1]
		wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 8000936:	1a12      	subs	r2, r2, r0
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 8000938:	9803      	ldr	r0, [sp, #12]
		adcbgbaseacc += thissamp; // accumulator used to find avg level of signal over long time (for base)
 800093a:	449e      	add	lr, r3
		if (sigsend)
 800093c:	f8db 7000 	ldr.w	r7, [fp]
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 8000940:	eb08 0500 	add.w	r5, r8, r0
		thiswindiff = abs(thissamp - winmean);			// find difference from window mean
 8000944:	f344 104f 	sbfx	r0, r4, #5, #16
 8000948:	1a18      	subs	r0, r3, r0
 800094a:	2800      	cmp	r0, #0
 800094c:	bfb8      	it	lt
 800094e:	4240      	neglt	r0, r0
		wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 8000950:	4402      	add	r2, r0
		meanwindiff = wdacc >> (WINSHIFT); // sliding mean of window differences
 8000952:	f342 104f 	sbfx	r0, r2, #5, #16
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 8000956:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
		windiff[j] = meanwindiff;	// store latest window mean of differences
 800095a:	f849 0021 	str.w	r0, [r9, r1, lsl #2]
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 800095e:	9902      	ldr	r1, [sp, #8]
 8000960:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 8000964:	1859      	adds	r1, r3, r1
 8000966:	42a9      	cmp	r1, r5
 8000968:	dd04      	ble.n	8000974 <ADC_Conv_complete+0xf8>
			pretrigcnt++;
 800096a:	9901      	ldr	r1, [sp, #4]
 800096c:	3101      	adds	r1, #1
 800096e:	9101      	str	r1, [sp, #4]
 8000970:	2101      	movs	r1, #1
 8000972:	9104      	str	r1, [sp, #16]
		if (abs(meanwindiff) > (lastmeanwindiff + trigthresh)) { // if new mean diff > last mean diff +1
 8000974:	42ab      	cmp	r3, r5
 8000976:	dd03      	ble.n	8000980 <ADC_Conv_complete+0x104>
 8000978:	b917      	cbnz	r7, 8000980 <ADC_Conv_complete+0x104>
			sigsend = 1; // the real trigger
 800097a:	2301      	movs	r3, #1
 800097c:	f8cb 3000 	str.w	r3, [fp]
	for (i = 0; i < (ADCBUFSIZE >> 1); i++) {	// 2 // scan the buffer content
 8000980:	f5b6 7f36 	cmp.w	r6, #728	; 0x2d8
 8000984:	d1c6      	bne.n	8000914 <ADC_Conv_complete+0x98>
 8000986:	9b04      	ldr	r3, [sp, #16]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d15c      	bne.n	8000a46 <ADC_Conv_complete+0x1ca>
 800098c:	4d39      	ldr	r5, [pc, #228]	; (8000a74 <ADC_Conv_complete+0x1f8>)
 800098e:	4938      	ldr	r1, [pc, #224]	; (8000a70 <ADC_Conv_complete+0x1f4>)
 8000990:	602c      	str	r4, [r5, #0]
 8000992:	4d3b      	ldr	r5, [pc, #236]	; (8000a80 <ADC_Conv_complete+0x204>)
 8000994:	4b3c      	ldr	r3, [pc, #240]	; (8000a88 <ADC_Conv_complete+0x20c>)
 8000996:	f8c1 e000 	str.w	lr, [r1]
 800099a:	602a      	str	r2, [r5, #0]
 800099c:	493b      	ldr	r1, [pc, #236]	; (8000a8c <ADC_Conv_complete+0x210>)
 800099e:	4a37      	ldr	r2, [pc, #220]	; (8000a7c <ADC_Conv_complete+0x200>)
	if (sigsend) {
 80009a0:	f8db 4000 	ldr.w	r4, [fp]
		lastmeanwindiff = abs(meanwindiff);
 80009a4:	f8a3 8000 	strh.w	r8, [r3]
 80009a8:	8010      	strh	r0, [r2, #0]
 80009aa:	680b      	ldr	r3, [r1, #0]
	if (sigsend) {
 80009ac:	b334      	cbz	r4, 80009fc <ADC_Conv_complete+0x180>
		if (sigprev == 0) {		// no trigger last time, so this is a new event
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d02b      	beq.n	8000a0a <ADC_Conv_complete+0x18e>
		statuspkt.trigcount++;	//  no of triggered packets detected
 80009b2:	4c2b      	ldr	r4, [pc, #172]	; (8000a60 <ADC_Conv_complete+0x1e4>)
		sigprev = 1;	// remember this trigger for next packet
 80009b4:	2001      	movs	r0, #1
		ledhang = 15;		// 15 x 10ms in Idle proc
 80009b6:	4a36      	ldr	r2, [pc, #216]	; (8000a90 <ADC_Conv_complete+0x214>)
		statuspkt.trigcount++;	//  no of triggered packets detected
 80009b8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
		sigprev = 1;	// remember this trigger for next packet
 80009ba:	6008      	str	r0, [r1, #0]
		ledhang = 15;		// 15 x 10ms in Idle proc
 80009bc:	210f      	movs	r1, #15
		statuspkt.trigcount++;	//  no of triggered packets detected
 80009be:	4403      	add	r3, r0
		ledhang = 15;		// 15 x 10ms in Idle proc
 80009c0:	6011      	str	r1, [r2, #0]
		statuspkt.trigcount++;	//  no of triggered packets detected
 80009c2:	67e3      	str	r3, [r4, #124]	; 0x7c
	if (++samplecnt == 2048) {		// 2k adc bufffers sampled approx 0.5 sec
 80009c4:	4a33      	ldr	r2, [pc, #204]	; (8000a94 <ADC_Conv_complete+0x218>)
 80009c6:	6813      	ldr	r3, [r2, #0]
 80009c8:	3301      	adds	r3, #1
 80009ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80009ce:	6013      	str	r3, [r2, #0]
 80009d0:	d10b      	bne.n	80009ea <ADC_Conv_complete+0x16e>
		globaladcavg = (adcbgbaseacc / (ADCBUFSIZE / 2)) >> 11;
 80009d2:	4c27      	ldr	r4, [pc, #156]	; (8000a70 <ADC_Conv_complete+0x1f4>)
		adcbgbaseacc = 0;
 80009d4:	2100      	movs	r1, #0
		globaladcavg = (adcbgbaseacc / (ADCBUFSIZE / 2)) >> 11;
 80009d6:	4830      	ldr	r0, [pc, #192]	; (8000a98 <ADC_Conv_complete+0x21c>)
 80009d8:	6823      	ldr	r3, [r4, #0]
		samplecnt = 0;
 80009da:	6011      	str	r1, [r2, #0]
		globaladcavg = (adcbgbaseacc / (ADCBUFSIZE / 2)) >> 11;
 80009dc:	08db      	lsrs	r3, r3, #3
		adcbgbaseacc = 0;
 80009de:	6021      	str	r1, [r4, #0]
		globaladcavg = (adcbgbaseacc / (ADCBUFSIZE / 2)) >> 11;
 80009e0:	fba0 2303 	umull	r2, r3, r0, r3
 80009e4:	4a2d      	ldr	r2, [pc, #180]	; (8000a9c <ADC_Conv_complete+0x220>)
 80009e6:	0b9b      	lsrs	r3, r3, #14
 80009e8:	6013      	str	r3, [r2, #0]
	if (xTaskToNotify == NULL) {
 80009ea:	4b2d      	ldr	r3, [pc, #180]	; (8000aa0 <ADC_Conv_complete+0x224>)
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	b322      	cbz	r2, 8000a3a <ADC_Conv_complete+0x1be>
	} else if (sigsend) {
 80009f0:	f8db 2000 	ldr.w	r2, [fp]
 80009f4:	b972      	cbnz	r2, 8000a14 <ADC_Conv_complete+0x198>
}
 80009f6:	b007      	add	sp, #28
 80009f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (sigprev) {		// but there was a trigger the last packet
 80009fc:	b113      	cbz	r3, 8000a04 <ADC_Conv_complete+0x188>
			sendendstatus = 1;		// so tell udpstream to send the end of sequence status packet
 80009fe:	4b29      	ldr	r3, [pc, #164]	; (8000aa4 <ADC_Conv_complete+0x228>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	701a      	strb	r2, [r3, #0]
		sigprev = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	600b      	str	r3, [r1, #0]
 8000a08:	e7dc      	b.n	80009c4 <ADC_Conv_complete+0x148>
			++adcbatchid; // start a new adc batch number
 8000a0a:	9b05      	ldr	r3, [sp, #20]
 8000a0c:	4a13      	ldr	r2, [pc, #76]	; (8000a5c <ADC_Conv_complete+0x1e0>)
 8000a0e:	3301      	adds	r3, #1
 8000a10:	7013      	strb	r3, [r2, #0]
 8000a12:	e7ce      	b.n	80009b2 <ADC_Conv_complete+0x136>
		vTaskNotifyGiveFromISR(xTaskToNotify, &xHigherPriorityTaskWoken);
 8000a14:	4c24      	ldr	r4, [pc, #144]	; (8000aa8 <ADC_Conv_complete+0x22c>)
 8000a16:	6818      	ldr	r0, [r3, #0]
 8000a18:	4621      	mov	r1, r4
 8000a1a:	f012 f89d 	bl	8012b58 <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000a1e:	6823      	ldr	r3, [r4, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d0e8      	beq.n	80009f6 <ADC_Conv_complete+0x17a>
 8000a24:	4b21      	ldr	r3, [pc, #132]	; (8000aac <ADC_Conv_complete+0x230>)
 8000a26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	f3bf 8f4f 	dsb	sy
 8000a30:	f3bf 8f6f 	isb	sy
}
 8000a34:	b007      	add	sp, #28
 8000a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		printf("Notify task null\n");
 8000a3a:	481d      	ldr	r0, [pc, #116]	; (8000ab0 <ADC_Conv_complete+0x234>)
}
 8000a3c:	b007      	add	sp, #28
 8000a3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printf("Notify task null\n");
 8000a42:	f020 b941 	b.w	8020cc8 <puts>
 8000a46:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <ADC_Conv_complete+0x208>)
 8000a48:	9901      	ldr	r1, [sp, #4]
 8000a4a:	6019      	str	r1, [r3, #0]
 8000a4c:	e79e      	b.n	800098c <ADC_Conv_complete+0x110>
 8000a4e:	bf00      	nop
 8000a50:	200006a8 	.word	0x200006a8
 8000a54:	2002a820 	.word	0x2002a820
 8000a58:	2002a834 	.word	0x2002a834
 8000a5c:	2000069c 	.word	0x2000069c
 8000a60:	2002a784 	.word	0x2002a784
 8000a64:	200006a4 	.word	0x200006a4
 8000a68:	20000708 	.word	0x20000708
 8000a6c:	20000002 	.word	0x20000002
 8000a70:	200006a0 	.word	0x200006a0
 8000a74:	200007a0 	.word	0x200007a0
 8000a78:	20000000 	.word	0x20000000
 8000a7c:	20000700 	.word	0x20000700
 8000a80:	2000071c 	.word	0x2000071c
 8000a84:	20000704 	.word	0x20000704
 8000a88:	200006b8 	.word	0x200006b8
 8000a8c:	20000714 	.word	0x20000714
 8000a90:	200006fc 	.word	0x200006fc
 8000a94:	2000070c 	.word	0x2000070c
 8000a98:	16816817 	.word	0x16816817
 8000a9c:	200006ac 	.word	0x200006ac
 8000aa0:	200007a8 	.word	0x200007a8
 8000aa4:	20000710 	.word	0x20000710
 8000aa8:	200007a4 	.word	0x200007a4
 8000aac:	e000ed04 	.word	0xe000ed04
 8000ab0:	08024ae8 	.word	0x08024ae8
 8000ab4:	20000718 	.word	0x20000718
 8000ab8:	200006bc 	.word	0x200006bc
 8000abc:	20000720 	.word	0x20000720

08000ac0 <startadc>:

void startadc() {
 8000ac0:	b538      	push	{r3, r4, r5, lr}
//	uint16_t *adcbufdum1, *adcbufdum2;		// debug
//	adcbufdum1 = pvPortMalloc(UDPBUFSIZE);	//  dummy buffer
//	adcbufdum2 = pvPortMalloc(UDPBUFSIZE);	//  dummy buffer

	statuspkt.clktrim = 108000000;
	statuspkt.adcpktssent = 0;
 8000ac2:	2200      	movs	r2, #0
	statuspkt.clktrim = 108000000;
 8000ac4:	4b2b      	ldr	r3, [pc, #172]	; (8000b74 <startadc+0xb4>)
 8000ac6:	492c      	ldr	r1, [pc, #176]	; (8000b78 <startadc+0xb8>)

	printf("Starting ADC DMA\n");
 8000ac8:	482c      	ldr	r0, [pc, #176]	; (8000b7c <startadc+0xbc>)
	statuspkt.clktrim = 108000000;
 8000aca:	6599      	str	r1, [r3, #88]	; 0x58
	osDelay(100);
// get some heap for the ADC stream DMA buffer 1
	pktbuf = pvPortMalloc(UDPBUFSIZE * 2);	// two buffers concatenated
 8000acc:	4c2c      	ldr	r4, [pc, #176]	; (8000b80 <startadc+0xc0>)
	statuspkt.adcpktssent = 0;
 8000ace:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	printf("Starting ADC DMA\n");
 8000ad2:	f020 f8f9 	bl	8020cc8 <puts>
	osDelay(100);
 8000ad6:	2064      	movs	r0, #100	; 0x64
 8000ad8:	f010 fafe 	bl	80110d8 <osDelay>
	pktbuf = pvPortMalloc(UDPBUFSIZE * 2);	// two buffers concatenated
 8000adc:	f44f 6038 	mov.w	r0, #2944	; 0xb80
 8000ae0:	f012 fd18 	bl	8013514 <pvPortMalloc>
 8000ae4:	6020      	str	r0, [r4, #0]
	if (pktbuf == NULL) {
 8000ae6:	2800      	cmp	r0, #0
 8000ae8:	d03f      	beq.n	8000b6a <startadc+0xaa>
		printf("pvPortMalloc returned nil for pktbuf\n");
		for (;;)
			;
	}
	if (((uint32_t) pktbuf & 3) > 0) {
 8000aea:	0783      	lsls	r3, r0, #30
 8000aec:	d003      	beq.n	8000af6 <startadc+0x36>
		printf("******** pvPortMalloc not on word boundary *********\n");
 8000aee:	4825      	ldr	r0, [pc, #148]	; (8000b84 <startadc+0xc4>)
 8000af0:	f020 f8ea 	bl	8020cc8 <puts>
 8000af4:	6820      	ldr	r0, [r4, #0]
 8000af6:	1f03      	subs	r3, r0, #4
 8000af8:	f200 51bc 	addw	r1, r0, #1468	; 0x5bc

//	printf("(&(*pktbuf)[0])=0x%x ", &((*pktbuf)[0]));
//	printf("(&(*pktbuf)[UDPBUFSIZE / 4])=0x%x\n", &((*pktbuf)[UDPBUFSIZE / 4]));

	for (i = 0; i < UDPBUFSIZE / 4; i++) {	// fill buffers, 4 bytes at a time
		(*pktbuf)[i] = 0x55555555;
 8000afc:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8000b00:	f843 2f04 	str.w	r2, [r3, #4]!
	for (i = 0; i < UDPBUFSIZE / 4; i++) {	// fill buffers, 4 bytes at a time
 8000b04:	428b      	cmp	r3, r1
 8000b06:	d1fb      	bne.n	8000b00 <startadc+0x40>
 8000b08:	f600 317c 	addw	r1, r0, #2940	; 0xb7c
	}
	for (i = UDPBUFSIZE / 4; i < UDPBUFSIZE / 2; i++) {	// fill buffers, 4 bytes at a time
		(*pktbuf)[i] = 0xaaaaaaaa;
 8000b0c:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000b10:	f843 2f04 	str.w	r2, [r3, #4]!
	for (i = UDPBUFSIZE / 4; i < UDPBUFSIZE / 2; i++) {	// fill buffers, 4 bytes at a time
 8000b14:	4299      	cmp	r1, r3
 8000b16:	d1fb      	bne.n	8000b10 <startadc+0x50>
	}

	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
 8000b18:	f100 0210 	add.w	r2, r0, #16
	adcbuf2 = &(*pktbuf)[(ADCBUFHEAD / 4) + (ADCBUFSIZE / 4) + (ADCBUFHEAD / 4)];	// leave room in start of 2nd buffer
 8000b1c:	f500 64ba 	add.w	r4, r0, #1488	; 0x5d0
	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
 8000b20:	4819      	ldr	r0, [pc, #100]	; (8000b88 <startadc+0xc8>)

	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b22:	f44f 7336 	mov.w	r3, #728	; 0x2d8
	adcbuf2 = &(*pktbuf)[(ADCBUFHEAD / 4) + (ADCBUFSIZE / 4) + (ADCBUFHEAD / 4)];	// leave room in start of 2nd buffer
 8000b26:	4d19      	ldr	r5, [pc, #100]	; (8000b8c <startadc+0xcc>)
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b28:	4611      	mov	r1, r2
	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
 8000b2a:	6002      	str	r2, [r0, #0]
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b2c:	4622      	mov	r2, r4
 8000b2e:	4818      	ldr	r0, [pc, #96]	; (8000b90 <startadc+0xd0>)
	adcbuf2 = &(*pktbuf)[(ADCBUFHEAD / 4) + (ADCBUFSIZE / 4) + (ADCBUFHEAD / 4)];	// leave room in start of 2nd buffer
 8000b30:	602c      	str	r4, [r5, #0]
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b32:	f7ff fdfb 	bl	800072c <HAL_ADCEx_MultiModeStart_DBDMA>
 8000b36:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <startadc+0xd4>)
 8000b38:	7018      	strb	r0, [r3, #0]

//	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbufdum1, adcbufdum2, (ADCBUFSIZE / 4));		// DEBUG
//		printf("ADC_MM_Start returned %u\r\n", adcstat);

	if (HAL_ADC_Start(&hadc3) != HAL_OK)
 8000b3a:	4817      	ldr	r0, [pc, #92]	; (8000b98 <startadc+0xd8>)
 8000b3c:	f004 ffae 	bl	8005a9c <HAL_ADC_Start>
 8000b40:	b110      	cbz	r0, 8000b48 <startadc+0x88>
		printf("ADC3 failed start\r\n");
 8000b42:	4816      	ldr	r0, [pc, #88]	; (8000b9c <startadc+0xdc>)
 8000b44:	f020 f8c0 	bl	8020cc8 <puts>
	if (HAL_ADC_Start(&hadc2) != HAL_OK)
 8000b48:	4815      	ldr	r0, [pc, #84]	; (8000ba0 <startadc+0xe0>)
 8000b4a:	f004 ffa7 	bl	8005a9c <HAL_ADC_Start>
 8000b4e:	b110      	cbz	r0, 8000b56 <startadc+0x96>
		printf("ADC2 failed start\r\n");
 8000b50:	4814      	ldr	r0, [pc, #80]	; (8000ba4 <startadc+0xe4>)
 8000b52:	f020 f8b9 	bl	8020cc8 <puts>
	if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8000b56:	480e      	ldr	r0, [pc, #56]	; (8000b90 <startadc+0xd0>)
 8000b58:	f004 ffa0 	bl	8005a9c <HAL_ADC_Start>
 8000b5c:	b900      	cbnz	r0, 8000b60 <startadc+0xa0>
//			HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);		// red led on

			//	myhexDump ("INITBUFF1---------------------------------------", *adcbuf1, ADCBUFLEN*2);
		}
#endif
}
 8000b5e:	bd38      	pop	{r3, r4, r5, pc}
		printf("ADC1 failed start\r\n");
 8000b60:	4811      	ldr	r0, [pc, #68]	; (8000ba8 <startadc+0xe8>)
}
 8000b62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		printf("ADC1 failed start\r\n");
 8000b66:	f020 b8af 	b.w	8020cc8 <puts>
		printf("pvPortMalloc returned nil for pktbuf\n");
 8000b6a:	4810      	ldr	r0, [pc, #64]	; (8000bac <startadc+0xec>)
 8000b6c:	f020 f8ac 	bl	8020cc8 <puts>
 8000b70:	e7fe      	b.n	8000b70 <startadc+0xb0>
 8000b72:	bf00      	nop
 8000b74:	2002a784 	.word	0x2002a784
 8000b78:	066ff300 	.word	0x066ff300
 8000b7c:	08024b2c 	.word	0x08024b2c
 8000b80:	2002a834 	.word	0x2002a834
 8000b84:	08024b68 	.word	0x08024b68
 8000b88:	2002a838 	.word	0x2002a838
 8000b8c:	2002a82c 	.word	0x2002a82c
 8000b90:	2002ae34 	.word	0x2002ae34
 8000b94:	2002a83c 	.word	0x2002a83c
 8000b98:	2002ae7c 	.word	0x2002ae7c
 8000b9c:	08024ba0 	.word	0x08024ba0
 8000ba0:	2002aaf0 	.word	0x2002aaf0
 8000ba4:	08024bb4 	.word	0x08024bb4
 8000ba8:	08024bc8 	.word	0x08024bc8
 8000bac:	08024b40 	.word	0x08024b40

08000bb0 <vApplicationIdleHook>:
	 specified, or call vTaskDelay()). If the application makes use of the
	 vTaskDelete() API function (as this demo application does) then it is also
	 important that vApplicationIdleHook() is permitted to return to its calling
	 function, because it is the responsibility of the idle task to clean up
	 memory allocated by the kernel to any task that has since been deleted. */
}
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <vApplicationStackOverflowHook>:
/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName) {
	/* Run time stack overflow checking is performed if
	 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
	 called if a stack overflow is detected. */
}
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <vApplicationMallocFailedHook>:
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000bbc:	b430      	push	{r4, r5}
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000bbe:	f44f 7380 	mov.w	r3, #256	; 0x100
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000bc2:	4d03      	ldr	r5, [pc, #12]	; (8000bd0 <vApplicationGetIdleTaskMemory+0x14>)
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000bc4:	4c03      	ldr	r4, [pc, #12]	; (8000bd4 <vApplicationGetIdleTaskMemory+0x18>)
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000bc6:	6005      	str	r5, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000bc8:	600c      	str	r4, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000bca:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8000bcc:	bc30      	pop	{r4, r5}
 8000bce:	4770      	bx	lr
 8000bd0:	20000bac 	.word	0x20000bac
 8000bd4:	200007ac 	.word	0x200007ac

08000bd8 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000bd8:	b430      	push	{r4, r5}
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000bda:	f44f 7300 	mov.w	r3, #512	; 0x200
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000bde:	4d03      	ldr	r5, [pc, #12]	; (8000bec <vApplicationGetTimerTaskMemory+0x14>)
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000be0:	4c03      	ldr	r4, [pc, #12]	; (8000bf0 <vApplicationGetTimerTaskMemory+0x18>)
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000be2:	6005      	str	r5, [r0, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000be4:	600c      	str	r4, [r1, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000be6:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8000be8:	bc30      	pop	{r4, r5}
 8000bea:	4770      	bx	lr
 8000bec:	20001400 	.word	0x20001400
 8000bf0:	20000c00 	.word	0x20000c00

08000bf4 <hc_sent>:
// lwip calls this function when the remote host has successfully received data (ack)
static err_t hc_sent(void *arg, struct tcp_pcb *pcb, u16_t len) {
	struct hc_state *state = arg;

	// Reset connection timeout
	state->ConnectionTimeout = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	7483      	strb	r3, [r0, #18]

	return (ERR_OK);
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	4770      	bx	lr

08000bfc <hc_recv>:
	if ((err == ERR_OK) && (p != NULL)) {
 8000bfc:	fab3 f383 	clz	r3, r3
err_t hc_recv(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err) {
 8000c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if ((err == ERR_OK) && (p != NULL)) {
 8000c04:	095b      	lsrs	r3, r3, #5
err_t hc_recv(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err) {
 8000c06:	b083      	sub	sp, #12
 8000c08:	4604      	mov	r4, r0
 8000c0a:	460e      	mov	r6, r1
	if ((err == ERR_OK) && (p != NULL)) {
 8000c0c:	4617      	mov	r7, r2
 8000c0e:	b102      	cbz	r2, 8000c12 <hc_recv+0x16>
 8000c10:	bb9b      	cbnz	r3, 8000c7a <hc_recv+0x7e>
	else if ((err == ERR_OK) && (p == NULL)) {
 8000c12:	bb47      	cbnz	r7, 8000c66 <hc_recv+0x6a>
 8000c14:	b33b      	cbz	r3, 8000c66 <hc_recv+0x6a>
		for (i = 0; i < state->Len; i++) {
 8000c16:	8a23      	ldrh	r3, [r4, #16]
 8000c18:	6967      	ldr	r7, [r4, #20]
 8000c1a:	f894 8000 	ldrb.w	r8, [r4]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	f000 8095 	beq.w	8000d4e <hc_recv+0x152>
 8000c24:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8000c28:	2200      	movs	r2, #0
	hc_errormsg errormsg = GEN_ERROR;
 8000c2a:	2504      	movs	r5, #4
			if (errormsg == GEN_ERROR) {
 8000c2c:	2d04      	cmp	r5, #4
 8000c2e:	f819 0002 	ldrb.w	r0, [r9, r2]
 8000c32:	f102 0101 	add.w	r1, r2, #1
 8000c36:	d052      	beq.n	8000cde <hc_recv+0xe2>
				if ((*(state->RecvData + i) == '\r') && (*(state->RecvData + ++i) == '\n')
 8000c38:	280d      	cmp	r0, #13
 8000c3a:	d018      	beq.n	8000c6e <hc_recv+0x72>
 8000c3c:	460a      	mov	r2, r1
		for (i = 0; i < state->Len; i++) {
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	dcf4      	bgt.n	8000c2c <hc_recv+0x30>
	char *page = NULL;
 8000c42:	f04f 0a00 	mov.w	sl, #0
		if (errormsg == OK) {
 8000c46:	2d00      	cmp	r5, #0
 8000c48:	d163      	bne.n	8000d12 <hc_recv+0x116>
			(*state->ReturnPage)(state->Num, OK, page, state->Len);
 8000c4a:	4652      	mov	r2, sl
 8000c4c:	4629      	mov	r1, r5
 8000c4e:	4640      	mov	r0, r8
 8000c50:	47b8      	blx	r7
	if (pcb != NULL) {
 8000c52:	b116      	cbz	r6, 8000c5a <hc_recv+0x5e>
		tcp_close(pcb);
 8000c54:	4630      	mov	r0, r6
 8000c56:	f017 fb3d 	bl	80182d4 <tcp_close>
		free(state->RecvData);
 8000c5a:	68e0      	ldr	r0, [r4, #12]
 8000c5c:	f01e ffde 	bl	801fc1c <free>
		free(state);
 8000c60:	4620      	mov	r0, r4
 8000c62:	f01e ffdb 	bl	801fc1c <free>
}
 8000c66:	2000      	movs	r0, #0
 8000c68:	b003      	add	sp, #12
 8000c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if ((*(state->RecvData + i) == '\r') && (*(state->RecvData + ++i) == '\n')
 8000c6e:	f819 0001 	ldrb.w	r0, [r9, r1]
 8000c72:	280a      	cmp	r0, #10
 8000c74:	d045      	beq.n	8000d02 <hc_recv+0x106>
 8000c76:	1c4a      	adds	r2, r1, #1
 8000c78:	e7e1      	b.n	8000c3e <hc_recv+0x42>
		tcp_recved(pcb, p->tot_len);
 8000c7a:	4608      	mov	r0, r1
 8000c7c:	8911      	ldrh	r1, [r2, #8]
 8000c7e:	f016 fc37 	bl	80174f0 <tcp_recved>
 8000c82:	463d      	mov	r5, r7
 8000c84:	8a21      	ldrh	r1, [r4, #16]
			state->RecvData[temp_p->len + state->Len] = '\0';
 8000c86:	2600      	movs	r6, #0
			state->RecvData = realloc(state->RecvData, temp_p->len + state->Len + 1);
 8000c88:	896b      	ldrh	r3, [r5, #10]
 8000c8a:	68e0      	ldr	r0, [r4, #12]
 8000c8c:	4419      	add	r1, r3
 8000c8e:	3101      	adds	r1, #1
 8000c90:	f020 f856 	bl	8020d40 <realloc>
 8000c94:	60e0      	str	r0, [r4, #12]
			if (state->RecvData == NULL) {
 8000c96:	2800      	cmp	r0, #0
 8000c98:	d04a      	beq.n	8000d30 <hc_recv+0x134>
			strncpy(state->RecvData + state->Len, temp_p->payload, temp_p->len);
 8000c9a:	8a23      	ldrh	r3, [r4, #16]
 8000c9c:	896a      	ldrh	r2, [r5, #10]
 8000c9e:	6869      	ldr	r1, [r5, #4]
 8000ca0:	4418      	add	r0, r3
 8000ca2:	f020 ff17 	bl	8021ad4 <strncpy>
			state->RecvData[temp_p->len + state->Len] = '\0';
 8000ca6:	8969      	ldrh	r1, [r5, #10]
 8000ca8:	68e3      	ldr	r3, [r4, #12]
 8000caa:	8a22      	ldrh	r2, [r4, #16]
 8000cac:	440b      	add	r3, r1
 8000cae:	549e      	strb	r6, [r3, r2]
			state->Len += temp_p->len;
 8000cb0:	896b      	ldrh	r3, [r5, #10]
 8000cb2:	8a21      	ldrh	r1, [r4, #16]
			temp_p = temp_p->next;
 8000cb4:	682d      	ldr	r5, [r5, #0]
			state->Len += temp_p->len;
 8000cb6:	4419      	add	r1, r3
 8000cb8:	b289      	uxth	r1, r1
 8000cba:	8221      	strh	r1, [r4, #16]
		while (temp_p != NULL) {
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d1e3      	bne.n	8000c88 <hc_recv+0x8c>
			temp_p = p->next;
 8000cc0:	683c      	ldr	r4, [r7, #0]
			pbuf_free_callback(p);
 8000cc2:	4638      	mov	r0, r7
 8000cc4:	f012 fe3e 	bl	8013944 <pbuf_free_callback>
		while (p != NULL) {
 8000cc8:	4627      	mov	r7, r4
 8000cca:	2c00      	cmp	r4, #0
 8000ccc:	d0cb      	beq.n	8000c66 <hc_recv+0x6a>
			temp_p = p->next;
 8000cce:	683c      	ldr	r4, [r7, #0]
			pbuf_free_callback(p);
 8000cd0:	4638      	mov	r0, r7
 8000cd2:	f012 fe37 	bl	8013944 <pbuf_free_callback>
		while (p != NULL) {
 8000cd6:	4627      	mov	r7, r4
 8000cd8:	2c00      	cmp	r4, #0
 8000cda:	d1f1      	bne.n	8000cc0 <hc_recv+0xc4>
 8000cdc:	e7c3      	b.n	8000c66 <hc_recv+0x6a>
				if ((*(state->RecvData + i) == '2') && (*(state->RecvData + ++i) == '0')
 8000cde:	2832      	cmp	r0, #50	; 0x32
 8000ce0:	d009      	beq.n	8000cf6 <hc_recv+0xfa>
				if (*(state->RecvData + i) == '\n')
 8000ce2:	280a      	cmp	r0, #10
 8000ce4:	d1aa      	bne.n	8000c3c <hc_recv+0x40>
		for (i = 0; i < state->Len; i++) {
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	dd12      	ble.n	8000d10 <hc_recv+0x114>
 8000cea:	f819 0001 	ldrb.w	r0, [r9, r1]
 8000cee:	460a      	mov	r2, r1
					errormsg = NOT_FOUND;
 8000cf0:	2503      	movs	r5, #3
		for (i = 0; i < state->Len; i++) {
 8000cf2:	3101      	adds	r1, #1
 8000cf4:	e7a0      	b.n	8000c38 <hc_recv+0x3c>
				if ((*(state->RecvData + i) == '2') && (*(state->RecvData + ++i) == '0')
 8000cf6:	f819 0001 	ldrb.w	r0, [r9, r1]
 8000cfa:	2830      	cmp	r0, #48	; 0x30
 8000cfc:	d00f      	beq.n	8000d1e <hc_recv+0x122>
 8000cfe:	1c91      	adds	r1, r2, #2
 8000d00:	e7ef      	b.n	8000ce2 <hc_recv+0xe6>
						&& (*(state->RecvData + ++i) == '\r') && (*(state->RecvData + ++i) == '\n')) {
 8000d02:	eb09 0102 	add.w	r1, r9, r2
 8000d06:	7888      	ldrb	r0, [r1, #2]
 8000d08:	280d      	cmp	r0, #13
 8000d0a:	d01b      	beq.n	8000d44 <hc_recv+0x148>
 8000d0c:	3203      	adds	r2, #3
 8000d0e:	e796      	b.n	8000c3e <hc_recv+0x42>
					errormsg = NOT_FOUND;
 8000d10:	2503      	movs	r5, #3
			(*state->ReturnPage)(state->Num, errormsg, NULL, 0);
 8000d12:	2300      	movs	r3, #0
 8000d14:	4629      	mov	r1, r5
 8000d16:	4640      	mov	r0, r8
 8000d18:	461a      	mov	r2, r3
 8000d1a:	47b8      	blx	r7
 8000d1c:	e799      	b.n	8000c52 <hc_recv+0x56>
						&& (*(state->RecvData + ++i) == '0'))
 8000d1e:	eb09 0002 	add.w	r0, r9, r2
 8000d22:	1cd1      	adds	r1, r2, #3
 8000d24:	7880      	ldrb	r0, [r0, #2]
 8000d26:	2830      	cmp	r0, #48	; 0x30
 8000d28:	d1db      	bne.n	8000ce2 <hc_recv+0xe6>
 8000d2a:	460a      	mov	r2, r1
					errormsg = OK;
 8000d2c:	2500      	movs	r5, #0
 8000d2e:	e786      	b.n	8000c3e <hc_recv+0x42>
				(*state->ReturnPage)(state->Num, OUT_MEM, NULL, 0);
 8000d30:	4603      	mov	r3, r0
 8000d32:	6965      	ldr	r5, [r4, #20]
 8000d34:	7820      	ldrb	r0, [r4, #0]
 8000d36:	2101      	movs	r1, #1
 8000d38:	461a      	mov	r2, r3
 8000d3a:	47a8      	blx	r5
}
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	b003      	add	sp, #12
 8000d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						&& (*(state->RecvData + ++i) == '\r') && (*(state->RecvData + ++i) == '\n')) {
 8000d44:	78c9      	ldrb	r1, [r1, #3]
 8000d46:	290a      	cmp	r1, #10
 8000d48:	d003      	beq.n	8000d52 <hc_recv+0x156>
 8000d4a:	3204      	adds	r2, #4
 8000d4c:	e777      	b.n	8000c3e <hc_recv+0x42>
	hc_errormsg errormsg = GEN_ERROR;
 8000d4e:	2504      	movs	r5, #4
 8000d50:	e7df      	b.n	8000d12 <hc_recv+0x116>
					i++;
 8000d52:	3204      	adds	r2, #4
 8000d54:	9301      	str	r3, [sp, #4]
					page = malloc(strlen(state->RecvData + i));
 8000d56:	4491      	add	r9, r2
 8000d58:	4648      	mov	r0, r9
 8000d5a:	f7ff fa7b 	bl	8000254 <strlen>
 8000d5e:	4683      	mov	fp, r0
 8000d60:	f01e ff54 	bl	801fc0c <malloc>
					strcpy(page, state->RecvData + i);
 8000d64:	4649      	mov	r1, r9
 8000d66:	f10b 0201 	add.w	r2, fp, #1
					page = malloc(strlen(state->RecvData + i));
 8000d6a:	4682      	mov	sl, r0
					strcpy(page, state->RecvData + i);
 8000d6c:	f01e ff7f 	bl	801fc6e <memcpy>
					break;
 8000d70:	9b01      	ldr	r3, [sp, #4]
		if (errormsg == OK) {
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	f43f af69 	beq.w	8000c4a <hc_recv+0x4e>
 8000d78:	e7cb      	b.n	8000d12 <hc_recv+0x116>
 8000d7a:	bf00      	nop

08000d7c <hc_error>:
	(*state->ReturnPage)(state->Num, GEN_ERROR, NULL, 0);
 8000d7c:	2300      	movs	r3, #0
static void hc_error(void *arg, err_t err) {
 8000d7e:	b570      	push	{r4, r5, r6, lr}
 8000d80:	4604      	mov	r4, r0
	(*state->ReturnPage)(state->Num, GEN_ERROR, NULL, 0);
 8000d82:	461a      	mov	r2, r3
static void hc_error(void *arg, err_t err) {
 8000d84:	460d      	mov	r5, r1
	(*state->ReturnPage)(state->Num, GEN_ERROR, NULL, 0);
 8000d86:	6946      	ldr	r6, [r0, #20]
 8000d88:	2104      	movs	r1, #4
 8000d8a:	7800      	ldrb	r0, [r0, #0]
 8000d8c:	47b0      	blx	r6
	free(state->RecvData);
 8000d8e:	68e0      	ldr	r0, [r4, #12]
 8000d90:	f01e ff44 	bl	801fc1c <free>
	free(state->PostVars);
 8000d94:	68a0      	ldr	r0, [r4, #8]
 8000d96:	f01e ff41 	bl	801fc1c <free>
	free(state->Page);
 8000d9a:	6860      	ldr	r0, [r4, #4]
 8000d9c:	f01e ff3e 	bl	801fc1c <free>
	free(state);
 8000da0:	4620      	mov	r0, r4
 8000da2:	f01e ff3b 	bl	801fc1c <free>
	printf("hc_error: err=%d\n", err);
 8000da6:	4629      	mov	r1, r5
 8000da8:	4802      	ldr	r0, [pc, #8]	; (8000db4 <hc_error+0x38>)
}
 8000daa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	printf("hc_error: err=%d\n", err);
 8000dae:	f01f bf03 	b.w	8020bb8 <iprintf>
 8000db2:	bf00      	nop
 8000db4:	08024c58 	.word	0x08024c58

08000db8 <hc_poll>:
static err_t hc_poll(void *arg, struct tcp_pcb *pcb) {
 8000db8:	b538      	push	{r3, r4, r5, lr}
	state->ConnectionTimeout++;
 8000dba:	7c83      	ldrb	r3, [r0, #18]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	b2db      	uxtb	r3, r3
	if (state->ConnectionTimeout > 20) {
 8000dc0:	2b14      	cmp	r3, #20
	state->ConnectionTimeout++;
 8000dc2:	7483      	strb	r3, [r0, #18]
	if (state->ConnectionTimeout > 20) {
 8000dc4:	d909      	bls.n	8000dda <hc_poll+0x22>
 8000dc6:	4604      	mov	r4, r0
		tcp_abort(pcb);
 8000dc8:	4608      	mov	r0, r1
 8000dca:	f017 f86d 	bl	8017ea8 <tcp_abort>
		(*state->ReturnPage)(state->Num, TIMEOUT, NULL, 0);
 8000dce:	2300      	movs	r3, #0
 8000dd0:	6965      	ldr	r5, [r4, #20]
 8000dd2:	2102      	movs	r1, #2
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	7820      	ldrb	r0, [r4, #0]
 8000dd8:	47a8      	blx	r5
}
 8000dda:	2000      	movs	r0, #0
 8000ddc:	bd38      	pop	{r3, r4, r5, pc}
 8000dde:	bf00      	nop

08000de0 <hc_connected>:

// lwip calls this function when the connection is established
static err_t hc_connected(void *arg, struct tcp_pcb *pcb, err_t err) {
 8000de0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000de4:	4604      	mov	r4, r0
 8000de6:	b083      	sub	sp, #12
 8000de8:	460d      	mov	r5, r1
	struct hc_state *state = arg;
	char *headers;

	// error?
	if (err != ERR_OK) {
 8000dea:	b19a      	cbz	r2, 8000e14 <hc_connected+0x34>
	if (pcb != NULL) {
 8000dec:	b111      	cbz	r1, 8000df4 <hc_connected+0x14>
		tcp_close(pcb);
 8000dee:	4608      	mov	r0, r1
 8000df0:	f017 fa70 	bl	80182d4 <tcp_close>
		hc_clearpcb(pcb);

		// Call return function
		(*state->ReturnPage)(state->Num, GEN_ERROR, NULL, 0);
 8000df4:	2300      	movs	r3, #0
 8000df6:	2104      	movs	r1, #4
 8000df8:	7820      	ldrb	r0, [r4, #0]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	6965      	ldr	r5, [r4, #20]
 8000dfe:	47a8      	blx	r5

		// Free wc state
		free(state->RecvData);
 8000e00:	68e0      	ldr	r0, [r4, #12]
 8000e02:	f01e ff0b 	bl	801fc1c <free>
		free(state);
 8000e06:	4620      	mov	r0, r4
 8000e08:	f01e ff08 	bl	801fc1c <free>
	free(headers);
	free(state->PostVars);			// postvars are send, so we don't need them anymore
	free(state->Page);		    	        // page is requested, so we don't need it anymore

	return (ERR_OK);
}
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	b003      	add	sp, #12
 8000e10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (state->PostVars == NULL) {
 8000e14:	e9d0 8701 	ldrd	r8, r7, [r0, #4]
 8000e18:	4640      	mov	r0, r8
 8000e1a:	f7ff fa1b 	bl	8000254 <strlen>
 8000e1e:	4606      	mov	r6, r0
 8000e20:	2f00      	cmp	r7, #0
 8000e22:	d039      	beq.n	8000e98 <hc_connected+0xb8>
		headers = malloc(91 + strlen(state->PostVars) + strlen(state->Page) + 10);
 8000e24:	4638      	mov	r0, r7
 8000e26:	f7ff fa15 	bl	8000254 <strlen>
 8000e2a:	4681      	mov	r9, r0
 8000e2c:	f106 0065 	add.w	r0, r6, #101	; 0x65
 8000e30:	4448      	add	r0, r9
 8000e32:	f01e feeb 	bl	801fc0c <malloc>
		sprintf(headers,
 8000e36:	464b      	mov	r3, r9
 8000e38:	9700      	str	r7, [sp, #0]
 8000e3a:	4642      	mov	r2, r8
 8000e3c:	491b      	ldr	r1, [pc, #108]	; (8000eac <hc_connected+0xcc>)
		headers = malloc(91 + strlen(state->PostVars) + strlen(state->Page) + 10);
 8000e3e:	4606      	mov	r6, r0
		sprintf(headers,
 8000e40:	f020 f812 	bl	8020e68 <siprintf>
	tcp_recv(pcb, hc_recv);
 8000e44:	491a      	ldr	r1, [pc, #104]	; (8000eb0 <hc_connected+0xd0>)
 8000e46:	4628      	mov	r0, r5
 8000e48:	f016 fbe4 	bl	8017614 <tcp_recv>
	tcp_err(pcb, hc_error);
 8000e4c:	4919      	ldr	r1, [pc, #100]	; (8000eb4 <hc_connected+0xd4>)
 8000e4e:	4628      	mov	r0, r5
 8000e50:	f016 fc18 	bl	8017684 <tcp_err>
	tcp_poll(pcb, hc_poll, 10);
 8000e54:	220a      	movs	r2, #10
 8000e56:	4918      	ldr	r1, [pc, #96]	; (8000eb8 <hc_connected+0xd8>)
 8000e58:	4628      	mov	r0, r5
 8000e5a:	f016 fc35 	bl	80176c8 <tcp_poll>
	tcp_sent(pcb, hc_sent);
 8000e5e:	4917      	ldr	r1, [pc, #92]	; (8000ebc <hc_connected+0xdc>)
 8000e60:	4628      	mov	r0, r5
 8000e62:	f016 fbf3 	bl	801764c <tcp_sent>
	tcp_write(pcb, headers, strlen(headers), 1);
 8000e66:	4630      	mov	r0, r6
 8000e68:	f7ff f9f4 	bl	8000254 <strlen>
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	4602      	mov	r2, r0
 8000e70:	4631      	mov	r1, r6
 8000e72:	4628      	mov	r0, r5
 8000e74:	f019 faf4 	bl	801a460 <tcp_write>
	tcp_output(pcb);
 8000e78:	4628      	mov	r0, r5
 8000e7a:	f01a f91b 	bl	801b0b4 <tcp_output>
	free(headers);
 8000e7e:	4630      	mov	r0, r6
 8000e80:	f01e fecc 	bl	801fc1c <free>
	free(state->PostVars);			// postvars are send, so we don't need them anymore
 8000e84:	68a0      	ldr	r0, [r4, #8]
 8000e86:	f01e fec9 	bl	801fc1c <free>
	free(state->Page);		    	        // page is requested, so we don't need it anymore
 8000e8a:	6860      	ldr	r0, [r4, #4]
 8000e8c:	f01e fec6 	bl	801fc1c <free>
}
 8000e90:	2000      	movs	r0, #0
 8000e92:	b003      	add	sp, #12
 8000e94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		headers = malloc(19 + strlen(state->Page));
 8000e98:	3013      	adds	r0, #19
 8000e9a:	f01e feb7 	bl	801fc0c <malloc>
		sprintf(headers, "GET /%s HTTP/1.0\r\n\r\n", state->Page);
 8000e9e:	4642      	mov	r2, r8
 8000ea0:	4907      	ldr	r1, [pc, #28]	; (8000ec0 <hc_connected+0xe0>)
		headers = malloc(19 + strlen(state->Page));
 8000ea2:	4606      	mov	r6, r0
		sprintf(headers, "GET /%s HTTP/1.0\r\n\r\n", state->Page);
 8000ea4:	f01f ffe0 	bl	8020e68 <siprintf>
 8000ea8:	e7cc      	b.n	8000e44 <hc_connected+0x64>
 8000eaa:	bf00      	nop
 8000eac:	08024bf4 	.word	0x08024bf4
 8000eb0:	08000bfd 	.word	0x08000bfd
 8000eb4:	08000d7d 	.word	0x08000d7d
 8000eb8:	08000db9 	.word	0x08000db9
 8000ebc:	08000bf5 	.word	0x08000bf5
 8000ec0:	08024bdc 	.word	0x08024bdc

08000ec4 <hc_open>:

// Public function for request a webpage (REMOTEIP, ...
int hc_open(ip_addr_t remoteIP, char *Page, char *PostVars, void (*returnpage)(u8_t, hc_errormsg, char*, u16_t)) {
 8000ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ec8:	b084      	sub	sp, #16
 8000eca:	460f      	mov	r7, r1
 8000ecc:	4616      	mov	r6, r2
 8000ece:	4699      	mov	r9, r3
 8000ed0:	9001      	str	r0, [sp, #4]
	// local port
	u16_t port = 8080;
	volatile err_t err;

	// Get a place for a new webclient state in the memory
	state = malloc(sizeof(struct hc_state));
 8000ed2:	2018      	movs	r0, #24
 8000ed4:	f01e fe9a 	bl	801fc0c <malloc>
 8000ed8:	4604      	mov	r4, r0

	// Create a new PCB (PROTOCOL CONTROL BLOCK)
	pcb = tcp_new();
 8000eda:	f017 f925 	bl	8018128 <tcp_new>
	if (pcb == NULL || state == NULL) {
 8000ede:	2800      	cmp	r0, #0
 8000ee0:	d074      	beq.n	8000fcc <hc_open+0x108>
 8000ee2:	fab4 f184 	clz	r1, r4
 8000ee6:	0949      	lsrs	r1, r1, #5
 8000ee8:	2900      	cmp	r1, #0
 8000eea:	d16f      	bne.n	8000fcc <hc_open+0x108>
			;
		return 0;
	}

	// Define webclient state vars
	num++;
 8000eec:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8000ff4 <hc_open+0x130>
 8000ef0:	4605      	mov	r5, r0
	state->Num = num;
	state->RecvData = NULL;
 8000ef2:	60e1      	str	r1, [r4, #12]
	num++;
 8000ef4:	f898 2000 	ldrb.w	r2, [r8]
	state->ConnectionTimeout = 0;
 8000ef8:	74a1      	strb	r1, [r4, #18]
	num++;
 8000efa:	3201      	adds	r2, #1
	state->Len = 0;
 8000efc:	8221      	strh	r1, [r4, #16]
	state->ReturnPage = returnpage;
 8000efe:	f8c4 9014 	str.w	r9, [r4, #20]
	num++;
 8000f02:	b2d3      	uxtb	r3, r2
 8000f04:	f888 3000 	strb.w	r3, [r8]
	state->Num = num;
 8000f08:	7023      	strb	r3, [r4, #0]

	// Make place for PostVars & Page
	if (PostVars != NULL)
 8000f0a:	2e00      	cmp	r6, #0
 8000f0c:	d05b      	beq.n	8000fc6 <hc_open+0x102>
		state->PostVars = malloc(strlen(PostVars) + 1);
 8000f0e:	4630      	mov	r0, r6
 8000f10:	f7ff f9a0 	bl	8000254 <strlen>
 8000f14:	3001      	adds	r0, #1
 8000f16:	f01e fe79 	bl	801fc0c <malloc>
 8000f1a:	4681      	mov	r9, r0
 8000f1c:	60a0      	str	r0, [r4, #8]
	state->Page = malloc(strlen(Page) + 1);
 8000f1e:	4638      	mov	r0, r7
 8000f20:	f7ff f998 	bl	8000254 <strlen>
 8000f24:	f100 0a01 	add.w	sl, r0, #1
 8000f28:	4650      	mov	r0, sl
 8000f2a:	f01e fe6f 	bl	801fc0c <malloc>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	6060      	str	r0, [r4, #4]

	// Check for "out of memory"
	if (state->Page == NULL || (state->PostVars == NULL && PostVars != NULL)) {
 8000f32:	2800      	cmp	r0, #0
 8000f34:	d037      	beq.n	8000fa6 <hc_open+0xe2>
 8000f36:	f1b9 0f00 	cmp.w	r9, #0
 8000f3a:	d032      	beq.n	8000fa2 <hc_open+0xde>
		printf("httpclient: no pcb memory\n");
#endif
		return 0;
	}
	// Place allocated copy data
	strcpy(state->Page, Page);
 8000f3c:	4652      	mov	r2, sl
 8000f3e:	4639      	mov	r1, r7
 8000f40:	f01e fe95 	bl	801fc6e <memcpy>
	if (PostVars != NULL)
 8000f44:	b356      	cbz	r6, 8000f9c <hc_open+0xd8>
		strcpy(state->PostVars, PostVars);
 8000f46:	4631      	mov	r1, r6
 8000f48:	4648      	mov	r0, r9
 8000f4a:	f020 f832 	bl	8020fb2 <strcpy>
int hc_open(ip_addr_t remoteIP, char *Page, char *PostVars, void (*returnpage)(u8_t, hc_errormsg, char*, u16_t)) {
 8000f4e:	f641 7690 	movw	r6, #8080	; 0x1f90
	else
		state->PostVars = NULL;

	// Bind to local IP & local port
	while (tcp_bind(pcb, IP_ADDR_ANY, port) != ERR_OK) {
 8000f52:	4f24      	ldr	r7, [pc, #144]	; (8000fe4 <hc_open+0x120>)
 8000f54:	e000      	b.n	8000f58 <hc_open+0x94>
		// Local port in use, use port+1
		port++;
 8000f56:	b2b6      	uxth	r6, r6
	while (tcp_bind(pcb, IP_ADDR_ANY, port) != ERR_OK) {
 8000f58:	4632      	mov	r2, r6
 8000f5a:	4639      	mov	r1, r7
 8000f5c:	4628      	mov	r0, r5
		port++;
 8000f5e:	3601      	adds	r6, #1
	while (tcp_bind(pcb, IP_ADDR_ANY, port) != ERR_OK) {
 8000f60:	f016 f9bc 	bl	80172dc <tcp_bind>
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d1f6      	bne.n	8000f56 <hc_open+0x92>
	}

	// Use conn -> argument(s)
	tcp_arg(pcb, state);
 8000f68:	4621      	mov	r1, r4
 8000f6a:	4628      	mov	r0, r5
 8000f6c:	f016 fb4e 	bl	801760c <tcp_arg>

	// Open connect (SEND SYN)
	err = tcp_connect(pcb, &remoteIP, 8080, hc_connected);
 8000f70:	4b1d      	ldr	r3, [pc, #116]	; (8000fe8 <hc_open+0x124>)
 8000f72:	4628      	mov	r0, r5
 8000f74:	f641 7290 	movw	r2, #8080	; 0x1f90
 8000f78:	a901      	add	r1, sp, #4
 8000f7a:	f017 facb 	bl	8018514 <tcp_connect>
 8000f7e:	b240      	sxtb	r0, r0
 8000f80:	f88d 000f 	strb.w	r0, [sp, #15]

	if (err != ERR_OK) {
 8000f84:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8000f88:	bb23      	cbnz	r3, 8000fd4 <hc_open+0x110>
		printf("hc_open failed with %d\n", err);
	}
	return num;
 8000f8a:	f898 0000 	ldrb.w	r0, [r8]
}
 8000f8e:	b004      	add	sp, #16
 8000f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	strcpy(state->Page, Page);
 8000f94:	4652      	mov	r2, sl
 8000f96:	4639      	mov	r1, r7
 8000f98:	f01e fe69 	bl	801fc6e <memcpy>
		state->PostVars = NULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60a3      	str	r3, [r4, #8]
 8000fa0:	e7d5      	b.n	8000f4e <hc_open+0x8a>
	if (state->Page == NULL || (state->PostVars == NULL && PostVars != NULL)) {
 8000fa2:	2e00      	cmp	r6, #0
 8000fa4:	d0f6      	beq.n	8000f94 <hc_open+0xd0>
		free(state->Page);
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f01e fe38 	bl	801fc1c <free>
		free(state->PostVars);
 8000fac:	4648      	mov	r0, r9
 8000fae:	f01e fe35 	bl	801fc1c <free>
		free(state);
 8000fb2:	4620      	mov	r0, r4
 8000fb4:	f01e fe32 	bl	801fc1c <free>
		tcp_close(pcb);
 8000fb8:	4628      	mov	r0, r5
 8000fba:	f017 f98b 	bl	80182d4 <tcp_close>
		return 0;
 8000fbe:	2000      	movs	r0, #0
}
 8000fc0:	b004      	add	sp, #16
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8000fca:	e7a8      	b.n	8000f1e <hc_open+0x5a>
		printf("hc_open: Not enough memory for pcb or state\n");
 8000fcc:	4807      	ldr	r0, [pc, #28]	; (8000fec <hc_open+0x128>)
 8000fce:	f01f fe7b 	bl	8020cc8 <puts>
 8000fd2:	e7fe      	b.n	8000fd2 <hc_open+0x10e>
		printf("hc_open failed with %d\n", err);
 8000fd4:	f89d 100f 	ldrb.w	r1, [sp, #15]
 8000fd8:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <hc_open+0x12c>)
 8000fda:	b249      	sxtb	r1, r1
 8000fdc:	f01f fdec 	bl	8020bb8 <iprintf>
 8000fe0:	e7d3      	b.n	8000f8a <hc_open+0xc6>
 8000fe2:	bf00      	nop
 8000fe4:	0803f8a8 	.word	0x0803f8a8
 8000fe8:	08000de1 	.word	0x08000de1
 8000fec:	08024c6c 	.word	0x08024c6c
 8000ff0:	08024c98 	.word	0x08024c98
 8000ff4:	20001454 	.word	0x20001454

08000ff8 <wait_armtx>:
}

// wait for Tx DMA to complete - timeout if error
// then re-arm the wait flag
// returns -1 on timeout, 0 on okay
int wait_armtx(void) {
 8000ff8:	b510      	push	{r4, lr}
	volatile int timeoutcnt;

	timeoutcnt = 0;
 8000ffa:	2300      	movs	r3, #0
int wait_armtx(void) {
 8000ffc:	b082      	sub	sp, #8
	timeoutcnt = 0;
 8000ffe:	9301      	str	r3, [sp, #4]
	while (timeoutcnt < 50) {
 8001000:	9b01      	ldr	r3, [sp, #4]
 8001002:	2b31      	cmp	r3, #49	; 0x31
 8001004:	dc10      	bgt.n	8001028 <wait_armtx+0x30>
		if (txdmadone == 1)		// its ready
 8001006:	4c10      	ldr	r4, [pc, #64]	; (8001048 <wait_armtx+0x50>)
 8001008:	6823      	ldr	r3, [r4, #0]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d103      	bne.n	8001016 <wait_armtx+0x1e>
 800100e:	e00b      	b.n	8001028 <wait_armtx+0x30>
 8001010:	6823      	ldr	r3, [r4, #0]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d008      	beq.n	8001028 <wait_armtx+0x30>
			break;
//		printf("UART5 Wait Tx %d\n", timeoutcnt);
		timeoutcnt++;
 8001016:	9b01      	ldr	r3, [sp, #4]
			volatile int busywait;
			for (busywait = 0; busywait < 100000; busywait++)
				;
		}
#endif
		osDelay(1);		// wait 1ms +
 8001018:	2001      	movs	r0, #1
		timeoutcnt++;
 800101a:	4403      	add	r3, r0
 800101c:	9301      	str	r3, [sp, #4]
		osDelay(1);		// wait 1ms +
 800101e:	f010 f85b 	bl	80110d8 <osDelay>
	while (timeoutcnt < 50) {
 8001022:	9b01      	ldr	r3, [sp, #4]
 8001024:	2b31      	cmp	r3, #49	; 0x31
 8001026:	ddf3      	ble.n	8001010 <wait_armtx+0x18>
	}

	if (timeoutcnt >= 50) {
 8001028:	9b01      	ldr	r3, [sp, #4]
 800102a:	2b31      	cmp	r3, #49	; 0x31
 800102c:	dc02      	bgt.n	8001034 <wait_armtx+0x3c>
		txdmadone = 1;	// re-arm the flag even though we have a problem
		return (-1);
	}
//	printf("UART5 Tx ARMED\n");

	return (0);
 800102e:	2000      	movs	r0, #0
}
 8001030:	b002      	add	sp, #8
 8001032:	bd10      	pop	{r4, pc}
		printf("UART5 Tx timeout\n");
 8001034:	4805      	ldr	r0, [pc, #20]	; (800104c <wait_armtx+0x54>)
 8001036:	f01f fe47 	bl	8020cc8 <puts>
		txdmadone = 1;	// re-arm the flag even though we have a problem
 800103a:	4b03      	ldr	r3, [pc, #12]	; (8001048 <wait_armtx+0x50>)
 800103c:	2201      	movs	r2, #1
 800103e:	f04f 30ff 	mov.w	r0, #4294967295
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	e7f4      	b.n	8001030 <wait_armtx+0x38>
 8001046:	bf00      	nop
 8001048:	200015e8 	.word	0x200015e8
 800104c:	0802504c 	.word	0x0802504c

08001050 <uart5_rxdone>:

// UART 5 Rx DMA complete
void uart5_rxdone() {

//	printf("UART5 Rx Complete\n");
}
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <HAL_UART_TxCpltCallback>:

// Transmit completed callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
	volatile uint32_t reg;

	if (huart->Instance == UART5) {
 8001054:	6802      	ldr	r2, [r0, #0]
 8001056:	4b03      	ldr	r3, [pc, #12]	; (8001064 <HAL_UART_TxCpltCallback+0x10>)
 8001058:	429a      	cmp	r2, r3
 800105a:	d102      	bne.n	8001062 <HAL_UART_TxCpltCallback+0xe>
			else
				printf("HAL_UART_TxCpltCallback, TXE busy\n");
		}

#endif
		txdmadone = 1;		// its finished transmission
 800105c:	4b02      	ldr	r3, [pc, #8]	; (8001068 <HAL_UART_TxCpltCallback+0x14>)
 800105e:	2201      	movs	r2, #1
 8001060:	601a      	str	r2, [r3, #0]
	}
}
 8001062:	4770      	bx	lr
 8001064:	40005000 	.word	0x40005000
 8001068:	200015e8 	.word	0x200015e8

0800106c <lcd_uart_init>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////

void lcd_uart_init(int baud) {
 800106c:	b570      	push	{r4, r5, r6, lr}
 800106e:	4606      	mov	r6, r0
#if 0
	HAL_UART_DMAStop(&huart5);
	HAL_UARTEx_DisableStopMode(&huart5);
#endif
#if 1
	HAL_UART_Abort(&huart5);
 8001070:	4c1b      	ldr	r4, [pc, #108]	; (80010e0 <lcd_uart_init+0x74>)
void lcd_uart_init(int baud) {
 8001072:	b082      	sub	sp, #8
	printf("lcd_uart_init: LCD %d ***\n", baud);
 8001074:	481b      	ldr	r0, [pc, #108]	; (80010e4 <lcd_uart_init+0x78>)
 8001076:	4631      	mov	r1, r6
	lcdrxoutidx = 0;		// buffer consumer index
 8001078:	2500      	movs	r5, #0
	printf("lcd_uart_init: LCD %d ***\n", baud);
 800107a:	f01f fd9d 	bl	8020bb8 <iprintf>
	lcdrxoutidx = 0;		// buffer consumer index
 800107e:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <lcd_uart_init+0x7c>)
	HAL_UART_Abort(&huart5);
 8001080:	4620      	mov	r0, r4
	lcdrxoutidx = 0;		// buffer consumer index
 8001082:	601d      	str	r5, [r3, #0]
	HAL_UART_Abort(&huart5);
 8001084:	f00d fa2a 	bl	800e4dc <HAL_UART_Abort>
	HAL_UART_DeInit(&huart5);
 8001088:	4620      	mov	r0, r4
 800108a:	f00d f917 	bl	800e2bc <HAL_UART_DeInit>
#endif
	huart5.Instance = UART5;
 800108e:	4a17      	ldr	r2, [pc, #92]	; (80010ec <lcd_uart_init+0x80>)
	huart5.Init.BaudRate = baud;
#if 1
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
	huart5.Init.StopBits = UART_STOPBITS_1;
	huart5.Init.Parity = UART_PARITY_NONE;
	huart5.Init.Mode = UART_MODE_TX_RX;
 8001090:	230c      	movs	r3, #12
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
#endif
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8001092:	4620      	mov	r0, r4
	huart5.Instance = UART5;
 8001094:	6022      	str	r2, [r4, #0]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8001096:	6163      	str	r3, [r4, #20]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001098:	e9c4 6501 	strd	r6, r5, [r4, #4]
	huart5.Init.Parity = UART_PARITY_NONE;
 800109c:	e9c4 5503 	strd	r5, r5, [r4, #12]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a0:	e9c4 5506 	strd	r5, r5, [r4, #24]
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010a4:	e9c4 5508 	strd	r5, r5, [r4, #32]
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 80010a8:	f00d ff6c 	bl	800ef84 <HAL_UART_Init>
 80010ac:	b998      	cbnz	r0, 80010d6 <lcd_uart_init+0x6a>
		printf("lcd_init: Failed to change UART5 baud to %d\n", baud);
	}

#if 1
	stat = HAL_UART_Receive_DMA(&huart5, dmarxbuffer, DMARXBUFSIZE);	// start Rx cyclic DMA
 80010ae:	2280      	movs	r2, #128	; 0x80
 80010b0:	490f      	ldr	r1, [pc, #60]	; (80010f0 <lcd_uart_init+0x84>)
 80010b2:	480b      	ldr	r0, [pc, #44]	; (80010e0 <lcd_uart_init+0x74>)
 80010b4:	f00d f9b0 	bl	800e418 <HAL_UART_Receive_DMA>
 80010b8:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {
 80010bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80010c0:	b90b      	cbnz	r3, 80010c6 <lcd_uart_init+0x5a>
		printf("lcd_init: 1 Err HAL_UART_Receive_DMA uart5 %d\n", stat);
	}
#endif
}
 80010c2:	b002      	add	sp, #8
 80010c4:	bd70      	pop	{r4, r5, r6, pc}
		printf("lcd_init: 1 Err HAL_UART_Receive_DMA uart5 %d\n", stat);
 80010c6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80010ca:	480a      	ldr	r0, [pc, #40]	; (80010f4 <lcd_uart_init+0x88>)
}
 80010cc:	b002      	add	sp, #8
 80010ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printf("lcd_init: 1 Err HAL_UART_Receive_DMA uart5 %d\n", stat);
 80010d2:	f01f bd71 	b.w	8020bb8 <iprintf>
		printf("lcd_init: Failed to change UART5 baud to %d\n", baud);
 80010d6:	4631      	mov	r1, r6
 80010d8:	4807      	ldr	r0, [pc, #28]	; (80010f8 <lcd_uart_init+0x8c>)
 80010da:	f01f fd6d 	bl	8020bb8 <iprintf>
 80010de:	e7e6      	b.n	80010ae <lcd_uart_init+0x42>
 80010e0:	2002adb4 	.word	0x2002adb4
 80010e4:	08024ef0 	.word	0x08024ef0
 80010e8:	200015d0 	.word	0x200015d0
 80010ec:	40005000 	.word	0x40005000
 80010f0:	2000149c 	.word	0x2000149c
 80010f4:	08024f3c 	.word	0x08024f3c
 80010f8:	08024f0c 	.word	0x08024f0c

080010fc <lcd_init>:

void lcd_init() {
 80010fc:	b570      	push	{r4, r5, r6, lr}
	volatile HAL_StatusTypeDef stat;

	const unsigned char lcd_reset[] = { "rest\xff\xff\xff" };
	const unsigned char lcd_fast[] = { "baud=230400\xff\xff\xff" };
 80010fe:	4b2b      	ldr	r3, [pc, #172]	; (80011ac <lcd_init+0xb0>)
void lcd_init() {
 8001100:	b086      	sub	sp, #24
	const unsigned char lcd_slow[] = { "baud=9600\xff\xff\xff" };
	int page;

	txdmadone = 0;	// TX is NOT free
 8001102:	4c2b      	ldr	r4, [pc, #172]	; (80011b0 <lcd_init+0xb4>)
 8001104:	2600      	movs	r6, #0
	const unsigned char lcd_fast[] = { "baud=230400\xff\xff\xff" };
 8001106:	ad02      	add	r5, sp, #8
	txdmadone = 0;	// TX is NOT free
 8001108:	6026      	str	r6, [r4, #0]
	const unsigned char lcd_fast[] = { "baud=230400\xff\xff\xff" };
 800110a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800110c:	c507      	stmia	r5!, {r0, r1, r2}
 800110e:	0c1a      	lsrs	r2, r3, #16
 8001110:	f825 3b02 	strh.w	r3, [r5], #2

	txdmadone = 0;	// TX is NOT free
	osDelay(600);
#endif

	stat = HAL_UART_Transmit_DMA(&huart5, lcd_fast, sizeof(lcd_fast) - 1);		// if leading nulls on tx line
 8001114:	a902      	add	r1, sp, #8
 8001116:	4827      	ldr	r0, [pc, #156]	; (80011b4 <lcd_init+0xb8>)
	const unsigned char lcd_fast[] = { "baud=230400\xff\xff\xff" };
 8001118:	702a      	strb	r2, [r5, #0]
	stat = HAL_UART_Transmit_DMA(&huart5, lcd_fast, sizeof(lcd_fast) - 1);		// if leading nulls on tx line
 800111a:	220e      	movs	r2, #14
 800111c:	f00d f92a 	bl	800e374 <HAL_UART_Transmit_DMA>
 8001120:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {														// this cmd will be rejected
 8001124:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d132      	bne.n	8001192 <lcd_init+0x96>
		printf("lcd_init: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
	}
	while (!(txdmadone)) {
 800112c:	6823      	ldr	r3, [r4, #0]
 800112e:	b94b      	cbnz	r3, 8001144 <lcd_init+0x48>
		printf("lcd_init: waiting for txdmadone\n");
 8001130:	4d21      	ldr	r5, [pc, #132]	; (80011b8 <lcd_init+0xbc>)
 8001132:	4628      	mov	r0, r5
 8001134:	f01f fdc8 	bl	8020cc8 <puts>
		osDelay(1);		// wait for comms to complete
 8001138:	2001      	movs	r0, #1
 800113a:	f00f ffcd 	bl	80110d8 <osDelay>
	while (!(txdmadone)) {
 800113e:	6823      	ldr	r3, [r4, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d0f6      	beq.n	8001132 <lcd_init+0x36>
	}
	txdmadone = 0;	// TX is NOT free
 8001144:	2300      	movs	r3, #0
	osDelay(20);
 8001146:	2014      	movs	r0, #20
	txdmadone = 0;	// TX is NOT free
 8001148:	6023      	str	r3, [r4, #0]
	osDelay(20);
 800114a:	f00f ffc5 	bl	80110d8 <osDelay>

	stat = HAL_UART_Transmit_DMA(&huart5, lcd_fast, sizeof(lcd_fast) - 1);
 800114e:	a902      	add	r1, sp, #8
 8001150:	220e      	movs	r2, #14
 8001152:	4818      	ldr	r0, [pc, #96]	; (80011b4 <lcd_init+0xb8>)
 8001154:	f00d f90e 	bl	800e374 <HAL_UART_Transmit_DMA>
 8001158:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {
 800115c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001160:	b9eb      	cbnz	r3, 800119e <lcd_init+0xa2>
		printf("lcd_init: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
	}
	while (!(txdmadone)) {
 8001162:	6823      	ldr	r3, [r4, #0]
 8001164:	b94b      	cbnz	r3, 800117a <lcd_init+0x7e>
		printf("lcd_init: waiting for txdmadone\n");
 8001166:	4d14      	ldr	r5, [pc, #80]	; (80011b8 <lcd_init+0xbc>)
 8001168:	4628      	mov	r0, r5
 800116a:	f01f fdad 	bl	8020cc8 <puts>
		osDelay(1);		// wait for comms to complete
 800116e:	2001      	movs	r0, #1
 8001170:	f00f ffb2 	bl	80110d8 <osDelay>
	while (!(txdmadone)) {
 8001174:	6823      	ldr	r3, [r4, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d0f6      	beq.n	8001168 <lcd_init+0x6c>
	}
	lastday = 0;		// the last date shown on the LCD - trigger a refresh
 800117a:	4910      	ldr	r1, [pc, #64]	; (80011bc <lcd_init+0xc0>)
	lastsec = -1;	// the last second shown on the lcd
 800117c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001180:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <lcd_init+0xc4>)
	lastday = 0;		// the last date shown on the LCD - trigger a refresh
 8001182:	2400      	movs	r4, #0
	osDelay(20);
 8001184:	2014      	movs	r0, #20
	lastday = 0;		// the last date shown on the LCD - trigger a refresh
 8001186:	600c      	str	r4, [r1, #0]
	lastsec = -1;	// the last second shown on the lcd
 8001188:	801a      	strh	r2, [r3, #0]
	osDelay(20);
 800118a:	f00f ffa5 	bl	80110d8 <osDelay>
}
 800118e:	b006      	add	sp, #24
 8001190:	bd70      	pop	{r4, r5, r6, pc}
		printf("lcd_init: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 8001192:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8001196:	480b      	ldr	r0, [pc, #44]	; (80011c4 <lcd_init+0xc8>)
 8001198:	f01f fd0e 	bl	8020bb8 <iprintf>
 800119c:	e7c6      	b.n	800112c <lcd_init+0x30>
		printf("lcd_init: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 800119e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80011a2:	4808      	ldr	r0, [pc, #32]	; (80011c4 <lcd_init+0xc8>)
 80011a4:	f01f fd08 	bl	8020bb8 <iprintf>
 80011a8:	e7db      	b.n	8001162 <lcd_init+0x66>
 80011aa:	bf00      	nop
 80011ac:	08024e58 	.word	0x08024e58
 80011b0:	200015e8 	.word	0x200015e8
 80011b4:	2002adb4 	.word	0x2002adb4
 80011b8:	08024e38 	.word	0x08024e38
 80011bc:	20001540 	.word	0x20001540
 80011c0:	20000008 	.word	0x20000008
 80011c4:	08024e08 	.word	0x08024e08

080011c8 <lcd_puts>:
	}
	return (stat);
}

// put a null terminated string
int lcd_puts(char *str) {
 80011c8:	b530      	push	{r4, r5, lr}
 80011ca:	b083      	sub	sp, #12
 80011cc:	4604      	mov	r4, r0
	HAL_StatusTypeDef stat;
	volatile int i;
	static char buffer[64];
	uint32_t reg;

	wait_armtx();			// dma still using buffer
 80011ce:	f7ff ff13 	bl	8000ff8 <wait_armtx>
	i = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	4811      	ldr	r0, [pc, #68]	; (800121c <lcd_puts+0x54>)
 80011d6:	9301      	str	r3, [sp, #4]
	while (str[i] != '\0') {
 80011d8:	9b01      	ldr	r3, [sp, #4]
 80011da:	5ce3      	ldrb	r3, [r4, r3]
 80011dc:	b153      	cbz	r3, 80011f4 <lcd_puts+0x2c>
		buffer[i] = str[i];
 80011de:	9901      	ldr	r1, [sp, #4]
 80011e0:	9a01      	ldr	r2, [sp, #4]
		i++;
 80011e2:	9b01      	ldr	r3, [sp, #4]
		buffer[i] = str[i];
 80011e4:	5c61      	ldrb	r1, [r4, r1]
		i++;
 80011e6:	3301      	adds	r3, #1
		buffer[i] = str[i];
 80011e8:	5481      	strb	r1, [r0, r2]
		i++;
 80011ea:	9301      	str	r3, [sp, #4]
	while (str[i] != '\0') {
 80011ec:	9b01      	ldr	r3, [sp, #4]
 80011ee:	5ce3      	ldrb	r3, [r4, r3]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d1f4      	bne.n	80011de <lcd_puts+0x16>
	}
	buffer[i] = '\0';
 80011f4:	9d01      	ldr	r5, [sp, #4]
 80011f6:	2300      	movs	r3, #0
//	printf("lcd_puts: %s\n",buffer);

	txdmadone = 0;	// TX in progress
//	printf("lcd_puts: len=%d, [%s]\n", i, str);

	stat = HAL_UART_Transmit_DMA(&huart5, buffer, i);
 80011f8:	9a01      	ldr	r2, [sp, #4]
	txdmadone = 0;	// TX in progress
 80011fa:	4c09      	ldr	r4, [pc, #36]	; (8001220 <lcd_puts+0x58>)
	buffer[i] = '\0';
 80011fc:	5543      	strb	r3, [r0, r5]
	stat = HAL_UART_Transmit_DMA(&huart5, buffer, i);
 80011fe:	b292      	uxth	r2, r2
 8001200:	4906      	ldr	r1, [pc, #24]	; (800121c <lcd_puts+0x54>)
 8001202:	4808      	ldr	r0, [pc, #32]	; (8001224 <lcd_puts+0x5c>)
	txdmadone = 0;	// TX in progress
 8001204:	6023      	str	r3, [r4, #0]
	stat = HAL_UART_Transmit_DMA(&huart5, buffer, i);
 8001206:	f00d f8b5 	bl	800e374 <HAL_UART_Transmit_DMA>
	if (stat != HAL_OK) {
 800120a:	4604      	mov	r4, r0
 800120c:	b118      	cbz	r0, 8001216 <lcd_puts+0x4e>
		printf("lcd_puts: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 800120e:	4601      	mov	r1, r0
 8001210:	4805      	ldr	r0, [pc, #20]	; (8001228 <lcd_puts+0x60>)
 8001212:	f01f fcd1 	bl	8020bb8 <iprintf>
	}
	return (stat);
}
 8001216:	4620      	mov	r0, r4
 8001218:	b003      	add	sp, #12
 800121a:	bd30      	pop	{r4, r5, pc}
 800121c:	20001458 	.word	0x20001458
 8001220:	200015e8 	.word	0x200015e8
 8001224:	2002adb4 	.word	0x2002adb4
 8001228:	08024e7c 	.word	0x08024e7c

0800122c <lcd_rxdma>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////

// get Rx chars if available - non blocking using DMA
// copies all dma rx'd chars into the lcd rx buffer
int lcd_rxdma() {
 800122c:	b530      	push	{r4, r5, lr}
	HAL_StatusTypeDef stat;
	volatile int count = 0;
 800122e:	2300      	movs	r3, #0
int lcd_rxdma() {
 8001230:	b083      	sub	sp, #12
	volatile int dmaindex = 0;

	dmaindex = DMARXBUFSIZE - DMA1_Stream0->NDTR;  // next index position the DMA will fill
 8001232:	4a17      	ldr	r2, [pc, #92]	; (8001290 <lcd_rxdma+0x64>)
	volatile int count = 0;
 8001234:	9300      	str	r3, [sp, #0]
	volatile int dmaindex = 0;
 8001236:	9301      	str	r3, [sp, #4]
	dmaindex = DMARXBUFSIZE - DMA1_Stream0->NDTR;  // next index position the DMA will fill
 8001238:	6853      	ldr	r3, [r2, #4]
 800123a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800123e:	9301      	str	r3, [sp, #4]
	if (dmaindex == 128) {
 8001240:	9a01      	ldr	r2, [sp, #4]
 8001242:	2a80      	cmp	r2, #128	; 0x80
 8001244:	d016      	beq.n	8001274 <lcd_rxdma+0x48>
		}
#endif
		dmaindex = 0;	// DMA count-to-go had zero
	}

	while (dmaindex != lcdrxoutidx) {		// dma in index has moved on from lcd rx out index
 8001246:	4d13      	ldr	r5, [pc, #76]	; (8001294 <lcd_rxdma+0x68>)
 8001248:	9a01      	ldr	r2, [sp, #4]
 800124a:	682b      	ldr	r3, [r5, #0]
 800124c:	4293      	cmp	r3, r2
 800124e:	d00e      	beq.n	800126e <lcd_rxdma+0x42>
 8001250:	4c11      	ldr	r4, [pc, #68]	; (8001298 <lcd_rxdma+0x6c>)
 8001252:	4812      	ldr	r0, [pc, #72]	; (800129c <lcd_rxdma+0x70>)
#if 0
		osDelay(10);
		printf("0x%02x ", dmarxbuffer[lcdrxoutidx]);
#endif
		lcdrxbuffer[lcdrxoutidx] = dmarxbuffer[lcdrxoutidx];	// copy the next char to lcd rx buffer
 8001254:	5cc1      	ldrb	r1, [r0, r3]
		count++;
 8001256:	9a00      	ldr	r2, [sp, #0]
		lcdrxbuffer[lcdrxoutidx] = dmarxbuffer[lcdrxoutidx];	// copy the next char to lcd rx buffer
 8001258:	54e1      	strb	r1, [r4, r3]
	if (++index >= limit)
 800125a:	3301      	adds	r3, #1
		count++;
 800125c:	3201      	adds	r2, #1
		return (0);
 800125e:	2b80      	cmp	r3, #128	; 0x80
		count++;
 8001260:	9200      	str	r2, [sp, #0]
		return (0);
 8001262:	bfa8      	it	ge
 8001264:	2300      	movge	r3, #0
	while (dmaindex != lcdrxoutidx) {		// dma in index has moved on from lcd rx out index
 8001266:	9a01      	ldr	r2, [sp, #4]
 8001268:	429a      	cmp	r2, r3
 800126a:	d1f3      	bne.n	8001254 <lcd_rxdma+0x28>
 800126c:	602b      	str	r3, [r5, #0]
	}
#if 0
	if (count > 0)
		printf("\n");
#endif
	return (count);
 800126e:	9800      	ldr	r0, [sp, #0]
}
 8001270:	b003      	add	sp, #12
 8001272:	bd30      	pop	{r4, r5, pc}
		stat = HAL_UART_Receive_DMA(&huart5, dmarxbuffer, DMARXBUFSIZE);	// restart Rx cyclic DMA
 8001274:	4909      	ldr	r1, [pc, #36]	; (800129c <lcd_rxdma+0x70>)
 8001276:	480a      	ldr	r0, [pc, #40]	; (80012a0 <lcd_rxdma+0x74>)
 8001278:	f00d f8ce 	bl	800e418 <HAL_UART_Receive_DMA>
		if (stat != HAL_OK) {
 800127c:	b910      	cbnz	r0, 8001284 <lcd_rxdma+0x58>
		dmaindex = 0;	// DMA count-to-go had zero
 800127e:	2300      	movs	r3, #0
 8001280:	9301      	str	r3, [sp, #4]
 8001282:	e7e0      	b.n	8001246 <lcd_rxdma+0x1a>
			printf("lcd_rxdma: Err HAL_UART_Receive_DMA uart5 %d\n", stat);
 8001284:	4601      	mov	r1, r0
 8001286:	4807      	ldr	r0, [pc, #28]	; (80012a4 <lcd_rxdma+0x78>)
 8001288:	f01f fc96 	bl	8020bb8 <iprintf>
 800128c:	e7f7      	b.n	800127e <lcd_rxdma+0x52>
 800128e:	bf00      	nop
 8001290:	40026010 	.word	0x40026010
 8001294:	200015d0 	.word	0x200015d0
 8001298:	20001550 	.word	0x20001550
 800129c:	2000149c 	.word	0x2000149c
 80012a0:	2002adb4 	.word	0x2002adb4
 80012a4:	08024eac 	.word	0x08024eac

080012a8 <writelcdcmd>:
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////

// send a var string to the LCD (len max 255)
// terminate with three 0xff's
int writelcdcmd(char *str) {
 80012a8:	b500      	push	{lr}
 80012aa:	b091      	sub	sp, #68	; 0x44
	char i = 0;
	char pkt[64];  //  __attribute__ ((aligned (16)));

	strcpy(pkt, str);
 80012ac:	4601      	mov	r1, r0
 80012ae:	4668      	mov	r0, sp
 80012b0:	f01f fe69 	bl	8020f86 <stpcpy>
	strcat(pkt, "\xff\xff\xff");
 80012b4:	4a05      	ldr	r2, [pc, #20]	; (80012cc <writelcdcmd+0x24>)
	strcpy(pkt, str);
 80012b6:	4603      	mov	r3, r0
	strcat(pkt, "\xff\xff\xff");
 80012b8:	6810      	ldr	r0, [r2, #0]
 80012ba:	6018      	str	r0, [r3, #0]
	lcd_puts(pkt);
 80012bc:	4668      	mov	r0, sp
 80012be:	f7ff ff83 	bl	80011c8 <lcd_puts>
	return (0);
}
 80012c2:	2000      	movs	r0, #0
 80012c4:	b011      	add	sp, #68	; 0x44
 80012c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80012ca:	bf00      	nop
 80012cc:	08025060 	.word	0x08025060

080012d0 <setlcdtext>:

// send some text to a lcd text object
int setlcdtext(char id[], char string[]) {
 80012d0:	b510      	push	{r4, lr}
 80012d2:	b092      	sub	sp, #72	; 0x48
	int i;
	char str[64];
	volatile int result = 0;
 80012d4:	2400      	movs	r4, #0

	sprintf(str, "%s=\"%s\"", id, string);
 80012d6:	460b      	mov	r3, r1
 80012d8:	4602      	mov	r2, r0
 80012da:	490a      	ldr	r1, [pc, #40]	; (8001304 <setlcdtext+0x34>)
 80012dc:	a802      	add	r0, sp, #8
	volatile int result = 0;
 80012de:	9401      	str	r4, [sp, #4]
	sprintf(str, "%s=\"%s\"", id, string);
 80012e0:	f01f fdc2 	bl	8020e68 <siprintf>
//	printf("setcdtext: %s\n",str);
	result = writelcdcmd(str);
 80012e4:	a802      	add	r0, sp, #8
 80012e6:	f7ff ffdf 	bl	80012a8 <writelcdcmd>
 80012ea:	9001      	str	r0, [sp, #4]
//	osDelay(50);
	if (result == -1) {
 80012ec:	9b01      	ldr	r3, [sp, #4]
 80012ee:	3301      	adds	r3, #1
 80012f0:	d002      	beq.n	80012f8 <setlcdtext+0x28>
		printf("setlcdtext: Cmd failed\n\r");
	}
	return (result);
 80012f2:	9801      	ldr	r0, [sp, #4]
}
 80012f4:	b012      	add	sp, #72	; 0x48
 80012f6:	bd10      	pop	{r4, pc}
		printf("setlcdtext: Cmd failed\n\r");
 80012f8:	4803      	ldr	r0, [pc, #12]	; (8001308 <setlcdtext+0x38>)
 80012fa:	f01f fc5d 	bl	8020bb8 <iprintf>
	return (result);
 80012fe:	9801      	ldr	r0, [sp, #4]
}
 8001300:	b012      	add	sp, #72	; 0x48
 8001302:	bd10      	pop	{r4, pc}
 8001304:	08025028 	.word	0x08025028
 8001308:	08025030 	.word	0x08025030

0800130c <setlcdbin>:

// send some numbers to a lcd obj.val object, param is binary long number
int setlcdbin(char *id, unsigned long value) {
 800130c:	b500      	push	{lr}
 800130e:	b08b      	sub	sp, #44	; 0x2c
	char buffer[32];
	volatile int result;

	sprintf(buffer, "%s=%lu", id, value);
 8001310:	460b      	mov	r3, r1
 8001312:	4602      	mov	r2, r0
 8001314:	490a      	ldr	r1, [pc, #40]	; (8001340 <setlcdbin+0x34>)
 8001316:	a802      	add	r0, sp, #8
 8001318:	f01f fda6 	bl	8020e68 <siprintf>
	result = writelcdcmd(buffer);
 800131c:	a802      	add	r0, sp, #8
 800131e:	f7ff ffc3 	bl	80012a8 <writelcdcmd>
 8001322:	9001      	str	r0, [sp, #4]
	if (result == -1) {		// wait for response
 8001324:	9b01      	ldr	r3, [sp, #4]
 8001326:	3301      	adds	r3, #1
 8001328:	d003      	beq.n	8001332 <setlcdbin+0x26>
		printf("setlcdbin: Cmd failed\n\r");
	}
	return (result);
 800132a:	9801      	ldr	r0, [sp, #4]
}
 800132c:	b00b      	add	sp, #44	; 0x2c
 800132e:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("setlcdbin: Cmd failed\n\r");
 8001332:	4804      	ldr	r0, [pc, #16]	; (8001344 <setlcdbin+0x38>)
 8001334:	f01f fc40 	bl	8020bb8 <iprintf>
	return (result);
 8001338:	9801      	ldr	r0, [sp, #4]
}
 800133a:	b00b      	add	sp, #44	; 0x2c
 800133c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001340:	08025004 	.word	0x08025004
 8001344:	0802500c 	.word	0x0802500c

08001348 <isnexpkt>:
}

// Check if this is an LCD packet
// try to get a single message packet from the LCD
// returns packet and end index (or 0 or -1)
int isnexpkt(unsigned char buffer[], uint8_t size) {
 8001348:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (lastidx != lcdrxoutidx) {		// something there
 800134a:	4a2e      	ldr	r2, [pc, #184]	; (8001404 <isnexpkt+0xbc>)
int isnexpkt(unsigned char buffer[], uint8_t size) {
 800134c:	b083      	sub	sp, #12
	if (lastidx != lcdrxoutidx) {		// something there
 800134e:	4d2e      	ldr	r5, [pc, #184]	; (8001408 <isnexpkt+0xc0>)
 8001350:	6812      	ldr	r2, [r2, #0]
 8001352:	682b      	ldr	r3, [r5, #0]
 8001354:	4293      	cmp	r3, r2
 8001356:	d053      	beq.n	8001400 <isnexpkt+0xb8>
	if (++index >= limit)
 8001358:	1c5a      	adds	r2, r3, #1
			printf("rawch=0x%02x %c\n", rawchar, rawchar);
		else
			printf("rawch=0x%02x\n", rawchar);
#endif
		ch = rawchar & 0xff;
		buffer[i++] = ch;
 800135a:	4c2c      	ldr	r4, [pc, #176]	; (800140c <isnexpkt+0xc4>)
		ch = lcdrxbuffer[lastidx];
 800135c:	4f2c      	ldr	r7, [pc, #176]	; (8001410 <isnexpkt+0xc8>)
		rxtimeout = 100;
 800135e:	f04f 0c64 	mov.w	ip, #100	; 0x64
		return (0);
 8001362:	2a80      	cmp	r2, #128	; 0x80
		buffer[i++] = ch;
 8001364:	7826      	ldrb	r6, [r4, #0]
		ch = lcdrxbuffer[lastidx];
 8001366:	5cff      	ldrb	r7, [r7, r3]
		return (0);
 8001368:	bfa8      	it	ge
 800136a:	2200      	movge	r2, #0
		buffer[i++] = ch;
 800136c:	1c73      	adds	r3, r6, #1
		ch = rawchar & 0xff;
 800136e:	f88d 7007 	strb.w	r7, [sp, #7]
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 8001372:	602a      	str	r2, [r5, #0]
		buffer[i++] = ch;
 8001374:	b2db      	uxtb	r3, r3
 8001376:	f89d 7007 	ldrb.w	r7, [sp, #7]
		if (ch == 0xff) {
 800137a:	f89d 5007 	ldrb.w	r5, [sp, #7]
		rxtimeout = 100;
 800137e:	4a25      	ldr	r2, [pc, #148]	; (8001414 <isnexpkt+0xcc>)
		if (ch == 0xff) {
 8001380:	2dff      	cmp	r5, #255	; 0xff
		buffer[i++] = ch;
 8001382:	7023      	strb	r3, [r4, #0]
		rxtimeout = 100;
 8001384:	f8c2 c000 	str.w	ip, [r2]
		buffer[i++] = ch;
 8001388:	5587      	strb	r7, [r0, r6]
		if (ch == 0xff) {
 800138a:	d022      	beq.n	80013d2 <isnexpkt+0x8a>
				i = 0;
				termcnt = 0;
				return (index);
			}
		} else {
			retcode = ch;	// remember ch prior to 0xff 0xff 0xff
 800138c:	f89d c007 	ldrb.w	ip, [sp, #7]
			termcnt = 0;
 8001390:	2600      	movs	r6, #0
			retcode = ch;	// remember ch prior to 0xff 0xff 0xff
 8001392:	4f21      	ldr	r7, [pc, #132]	; (8001418 <isnexpkt+0xd0>)
			termcnt = 0;
 8001394:	4d21      	ldr	r5, [pc, #132]	; (800141c <isnexpkt+0xd4>)
			retcode = ch;	// remember ch prior to 0xff 0xff 0xff
 8001396:	f887 c000 	strb.w	ip, [r7]
			termcnt = 0;
 800139a:	702e      	strb	r6, [r5, #0]
		}

		if (i == size) { // overrun
 800139c:	428b      	cmp	r3, r1
 800139e:	d102      	bne.n	80013a6 <isnexpkt+0x5e>
			i = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	7023      	strb	r3, [r4, #0]
			termcnt = 0;
 80013a4:	702b      	strb	r3, [r5, #0]
		}
	}
	if (rxtimeout > 0)
 80013a6:	6813      	ldr	r3, [r2, #0]
 80013a8:	bb13      	cbnz	r3, 80013f0 <isnexpkt+0xa8>
		rxtimeout--;
	if (rxtimeout == 0) {
		termcnt = 0;
 80013aa:	2200      	movs	r2, #0
 80013ac:	4b1b      	ldr	r3, [pc, #108]	; (800141c <isnexpkt+0xd4>)
		for (i = 0; i < size; buffer[i++] = 0)
 80013ae:	4c17      	ldr	r4, [pc, #92]	; (800140c <isnexpkt+0xc4>)
		termcnt = 0;
 80013b0:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < size; buffer[i++] = 0)
 80013b2:	7022      	strb	r2, [r4, #0]
 80013b4:	b139      	cbz	r1, 80013c6 <isnexpkt+0x7e>
 80013b6:	3901      	subs	r1, #1
 80013b8:	1e43      	subs	r3, r0, #1
 80013ba:	fa50 f081 	uxtab	r0, r0, r1
 80013be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80013c2:	4298      	cmp	r0, r3
 80013c4:	d1fb      	bne.n	80013be <isnexpkt+0x76>
			;
		i = 0;
 80013c6:	2300      	movs	r3, #0
		return (-1);
 80013c8:	f04f 30ff 	mov.w	r0, #4294967295
		i = 0;
 80013cc:	7023      	strb	r3, [r4, #0]
	}
	return (-2);  // no char available
}
 80013ce:	b003      	add	sp, #12
 80013d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			termcnt++;
 80013d2:	4d12      	ldr	r5, [pc, #72]	; (800141c <isnexpkt+0xd4>)
 80013d4:	782e      	ldrb	r6, [r5, #0]
 80013d6:	3601      	adds	r6, #1
 80013d8:	b2f6      	uxtb	r6, r6
			if (termcnt == 3) {
 80013da:	2e03      	cmp	r6, #3
			termcnt++;
 80013dc:	702e      	strb	r6, [r5, #0]
			if (termcnt == 3) {
 80013de:	d1dd      	bne.n	800139c <isnexpkt+0x54>
				printf(" # ");		// found terminator
 80013e0:	480f      	ldr	r0, [pc, #60]	; (8001420 <isnexpkt+0xd8>)
 80013e2:	f01f fbe9 	bl	8020bb8 <iprintf>
				i = 0;
 80013e6:	2300      	movs	r3, #0
				index = i;
 80013e8:	7820      	ldrb	r0, [r4, #0]
				termcnt = 0;
 80013ea:	702b      	strb	r3, [r5, #0]
				i = 0;
 80013ec:	7023      	strb	r3, [r4, #0]
				return (index);
 80013ee:	e7ee      	b.n	80013ce <isnexpkt+0x86>
		rxtimeout--;
 80013f0:	3b01      	subs	r3, #1
 80013f2:	6013      	str	r3, [r2, #0]
	if (rxtimeout == 0) {
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d0d8      	beq.n	80013aa <isnexpkt+0x62>
	return (-2);  // no char available
 80013f8:	f06f 0001 	mvn.w	r0, #1
}
 80013fc:	b003      	add	sp, #12
 80013fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001400:	4a04      	ldr	r2, [pc, #16]	; (8001414 <isnexpkt+0xcc>)
 8001402:	e7d0      	b.n	80013a6 <isnexpkt+0x5e>
 8001404:	200015d0 	.word	0x200015d0
 8001408:	20001544 	.word	0x20001544
 800140c:	2000153c 	.word	0x2000153c
 8001410:	20001550 	.word	0x20001550
 8001414:	200015e0 	.word	0x200015e0
 8001418:	200015dc 	.word	0x200015dc
 800141c:	200015e4 	.word	0x200015e4
 8001420:	08024cb0 	.word	0x08024cb0

08001424 <lcd_time>:
//////////////////////////////////////////////////////////////

// send the time to t0.txt
void lcd_time() {

	localepochtime = epochtime + (time_t) (10 * 60 * 60);		// add ten hours
 8001424:	4b13      	ldr	r3, [pc, #76]	; (8001474 <lcd_time+0x50>)
 8001426:	4914      	ldr	r1, [pc, #80]	; (8001478 <lcd_time+0x54>)
void lcd_time() {
 8001428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	localepochtime = epochtime + (time_t) (10 * 60 * 60);		// add ten hours
 800142c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001430:	f648 44a0 	movw	r4, #36000	; 0x8ca0
 8001434:	2500      	movs	r5, #0
	timeinfo = *localtime(&localepochtime);
 8001436:	4608      	mov	r0, r1
	strftime(buffer, sizeof(buffer), "%H:%M:%S", &timeinfo);
 8001438:	4e10      	ldr	r6, [pc, #64]	; (800147c <lcd_time+0x58>)
	localepochtime = epochtime + (time_t) (10 * 60 * 60);		// add ten hours
 800143a:	1917      	adds	r7, r2, r4
 800143c:	eb43 0805 	adc.w	r8, r3, r5
 8001440:	e9c1 7800 	strd	r7, r8, [r1]
	timeinfo = *localtime(&localepochtime);
 8001444:	f01e fad2 	bl	801f9ec <localtime>
 8001448:	4f0d      	ldr	r7, [pc, #52]	; (8001480 <lcd_time+0x5c>)
 800144a:	4605      	mov	r5, r0
 800144c:	463c      	mov	r4, r7
 800144e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001450:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001452:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001454:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001456:	682d      	ldr	r5, [r5, #0]
	strftime(buffer, sizeof(buffer), "%H:%M:%S", &timeinfo);
 8001458:	463b      	mov	r3, r7
 800145a:	4630      	mov	r0, r6
 800145c:	2128      	movs	r1, #40	; 0x28
 800145e:	4a09      	ldr	r2, [pc, #36]	; (8001484 <lcd_time+0x60>)
	timeinfo = *localtime(&localepochtime);
 8001460:	6025      	str	r5, [r4, #0]
	strftime(buffer, sizeof(buffer), "%H:%M:%S", &timeinfo);
 8001462:	f020 fb13 	bl	8021a8c <strftime>
	setlcdtext("t0.txt", buffer);
 8001466:	4631      	mov	r1, r6
 8001468:	4807      	ldr	r0, [pc, #28]	; (8001488 <lcd_time+0x64>)
}
 800146a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	setlcdtext("t0.txt", buffer);
 800146e:	f7ff bf2f 	b.w	80012d0 <setlcdtext>
 8001472:	bf00      	nop
 8001474:	2002b3d0 	.word	0x2002b3d0
 8001478:	2002a890 	.word	0x2002a890
 800147c:	2002a864 	.word	0x2002a864
 8001480:	2002a840 	.word	0x2002a840
 8001484:	08024edc 	.word	0x08024edc
 8001488:	08024ee8 	.word	0x08024ee8

0800148c <lcd_date>:

// send the date to t1.txt (assumes timeinfo is current)
void lcd_date() {

	lastday = timeinfo.tm_yday;
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <lcd_date+0x24>)
	strftime(buffer, sizeof(buffer), "%a %e %h %Y ", &timeinfo);
 800148e:	2128      	movs	r1, #40	; 0x28
 8001490:	4a08      	ldr	r2, [pc, #32]	; (80014b4 <lcd_date+0x28>)
void lcd_date() {
 8001492:	b570      	push	{r4, r5, r6, lr}
	strftime(buffer, sizeof(buffer), "%a %e %h %Y ", &timeinfo);
 8001494:	4c08      	ldr	r4, [pc, #32]	; (80014b8 <lcd_date+0x2c>)
	lastday = timeinfo.tm_yday;
 8001496:	69de      	ldr	r6, [r3, #28]
 8001498:	4d08      	ldr	r5, [pc, #32]	; (80014bc <lcd_date+0x30>)
	strftime(buffer, sizeof(buffer), "%a %e %h %Y ", &timeinfo);
 800149a:	4620      	mov	r0, r4
	lastday = timeinfo.tm_yday;
 800149c:	602e      	str	r6, [r5, #0]
	strftime(buffer, sizeof(buffer), "%a %e %h %Y ", &timeinfo);
 800149e:	f020 faf5 	bl	8021a8c <strftime>
	setlcdtext("t1.txt", buffer);
 80014a2:	4621      	mov	r1, r4
 80014a4:	4806      	ldr	r0, [pc, #24]	; (80014c0 <lcd_date+0x34>)
}
 80014a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	setlcdtext("t1.txt", buffer);
 80014aa:	f7ff bf11 	b.w	80012d0 <setlcdtext>
 80014ae:	bf00      	nop
 80014b0:	2002a840 	.word	0x2002a840
 80014b4:	08024cb4 	.word	0x08024cb4
 80014b8:	2002a864 	.word	0x2002a864
 80014bc:	20001540 	.word	0x20001540
 80014c0:	08024cc4 	.word	0x08024cc4

080014c4 <lcd_pagechange.part.1>:
	switch (newpage) {
 80014c4:	b128      	cbz	r0, 80014d2 <lcd_pagechange.part.1+0xe>
 80014c6:	2801      	cmp	r0, #1
 80014c8:	d100      	bne.n	80014cc <lcd_pagechange.part.1+0x8>
}
 80014ca:	4770      	bx	lr
		printf("Unknown page number\n");
 80014cc:	4804      	ldr	r0, [pc, #16]	; (80014e0 <lcd_pagechange.part.1+0x1c>)
 80014ce:	f01f bbfb 	b.w	8020cc8 <puts>
lcd_pagechange(uint8_t newpage) {
 80014d2:	b508      	push	{r3, lr}
		lcd_time();
 80014d4:	f7ff ffa6 	bl	8001424 <lcd_time>
		lcd_date();
 80014d8:	f7ff ffd8 	bl	800148c <lcd_date>
}
 80014dc:	bd08      	pop	{r3, pc}
 80014de:	bf00      	nop
 80014e0:	08024e68 	.word	0x08024e68

080014e4 <lcd_event_process>:
int lcd_event_process(void) {
 80014e4:	b570      	push	{r4, r5, r6, lr}
	result = isnexpkt(eventbuffer, sizeof(eventbuffer));
 80014e6:	4c44      	ldr	r4, [pc, #272]	; (80015f8 <lcd_event_process+0x114>)
int lcd_event_process(void) {
 80014e8:	b082      	sub	sp, #8
	result = isnexpkt(eventbuffer, sizeof(eventbuffer));
 80014ea:	2120      	movs	r1, #32
 80014ec:	4620      	mov	r0, r4
 80014ee:	f7ff ff2b 	bl	8001348 <isnexpkt>
 80014f2:	9000      	str	r0, [sp, #0]
	if (result <= 0) {
 80014f4:	9b00      	ldr	r3, [sp, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	dd3b      	ble.n	8001572 <lcd_event_process+0x8e>
		if ((eventbuffer[0] >= NEX_SINV) && (eventbuffer[0] <= NEX_SLEN)) {	// a status code packet - eg error
 80014fa:	7823      	ldrb	r3, [r4, #0]
 80014fc:	2b23      	cmp	r3, #35	; 0x23
 80014fe:	d925      	bls.n	800154c <lcd_event_process+0x68>
			switch (eventbuffer[0]) {
 8001500:	2b65      	cmp	r3, #101	; 0x65
 8001502:	d053      	beq.n	80015ac <lcd_event_process+0xc8>
 8001504:	2b66      	cmp	r3, #102	; 0x66
 8001506:	d038      	beq.n	800157a <lcd_event_process+0x96>
				printf("lcd_event_process: unknown response received\n");
 8001508:	483c      	ldr	r0, [pc, #240]	; (80015fc <lcd_event_process+0x118>)
 800150a:	f01f fbdd 	bl	8020cc8 <puts>
				i = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	9301      	str	r3, [sp, #4]
				while ((eventbuffer[i] != 0xff) && (i < sizeof(eventbuffer))) {
 8001512:	9b01      	ldr	r3, [sp, #4]
 8001514:	5ce3      	ldrb	r3, [r4, r3]
 8001516:	2bff      	cmp	r3, #255	; 0xff
 8001518:	d012      	beq.n	8001540 <lcd_event_process+0x5c>
 800151a:	9b01      	ldr	r3, [sp, #4]
 800151c:	2b1f      	cmp	r3, #31
 800151e:	d80f      	bhi.n	8001540 <lcd_event_process+0x5c>
					printf(" 0x%02x", eventbuffer[i++]);
 8001520:	4e37      	ldr	r6, [pc, #220]	; (8001600 <lcd_event_process+0x11c>)
 8001522:	e002      	b.n	800152a <lcd_event_process+0x46>
				while ((eventbuffer[i] != 0xff) && (i < sizeof(eventbuffer))) {
 8001524:	9b01      	ldr	r3, [sp, #4]
 8001526:	2b1f      	cmp	r3, #31
 8001528:	d80a      	bhi.n	8001540 <lcd_event_process+0x5c>
					printf(" 0x%02x", eventbuffer[i++]);
 800152a:	9b01      	ldr	r3, [sp, #4]
 800152c:	4630      	mov	r0, r6
 800152e:	1c5a      	adds	r2, r3, #1
 8001530:	5ce1      	ldrb	r1, [r4, r3]
 8001532:	9201      	str	r2, [sp, #4]
 8001534:	f01f fb40 	bl	8020bb8 <iprintf>
				while ((eventbuffer[i] != 0xff) && (i < sizeof(eventbuffer))) {
 8001538:	9b01      	ldr	r3, [sp, #4]
 800153a:	5ce3      	ldrb	r3, [r4, r3]
 800153c:	2bff      	cmp	r3, #255	; 0xff
 800153e:	d1f1      	bne.n	8001524 <lcd_event_process+0x40>
				printf("\n");
 8001540:	200a      	movs	r0, #10
 8001542:	f01f fb51 	bl	8020be8 <putchar>
}
 8001546:	4628      	mov	r0, r5
 8001548:	b002      	add	sp, #8
 800154a:	bd70      	pop	{r4, r5, r6, pc}
			lcdstatus = eventbuffer[0];
 800154c:	4a2d      	ldr	r2, [pc, #180]	; (8001604 <lcd_event_process+0x120>)
			if (eventbuffer[0] != NEX_SOK) {		// returned status from instruction was not OK
 800154e:	2b01      	cmp	r3, #1
			lcdstatus = eventbuffer[0];
 8001550:	7013      	strb	r3, [r2, #0]
			if (eventbuffer[0] != NEX_SOK) {		// returned status from instruction was not OK
 8001552:	d0f8      	beq.n	8001546 <lcd_event_process+0x62>
				printf("Nextion sent: ");
 8001554:	482c      	ldr	r0, [pc, #176]	; (8001608 <lcd_event_process+0x124>)
 8001556:	f01f fb2f 	bl	8020bb8 <iprintf>
				switch (eventbuffer[0]) {
 800155a:	7821      	ldrb	r1, [r4, #0]
 800155c:	f1a1 031a 	sub.w	r3, r1, #26
 8001560:	2b09      	cmp	r3, #9
 8001562:	d845      	bhi.n	80015f0 <lcd_event_process+0x10c>
 8001564:	e8df f003 	tbb	[pc, r3]
 8001568:	443c4440 	.word	0x443c4440
 800156c:	44344438 	.word	0x44344438
 8001570:	3044      	.short	0x3044
		return (result);		// 0 = nothing found, -1 = timeout
 8001572:	9d00      	ldr	r5, [sp, #0]
}
 8001574:	4628      	mov	r0, r5
 8001576:	b002      	add	sp, #8
 8001578:	bd70      	pop	{r4, r5, r6, pc}
				printf("lcd_event_process: Got Page event, OldPage=%d, NewPage=%d\n", lcd_currentpage,eventbuffer[1]);
 800157a:	4e24      	ldr	r6, [pc, #144]	; (800160c <lcd_event_process+0x128>)
 800157c:	7862      	ldrb	r2, [r4, #1]
 800157e:	7831      	ldrb	r1, [r6, #0]
 8001580:	4823      	ldr	r0, [pc, #140]	; (8001610 <lcd_event_process+0x12c>)
 8001582:	f01f fb19 	bl	8020bb8 <iprintf>
	dimtimer = DIMTIME;
 8001586:	4b23      	ldr	r3, [pc, #140]	; (8001614 <lcd_event_process+0x130>)
 8001588:	f64e 2260 	movw	r2, #60000	; 0xea60
	setlcdbin("dim",level);
 800158c:	2164      	movs	r1, #100	; 0x64
 800158e:	4822      	ldr	r0, [pc, #136]	; (8001618 <lcd_event_process+0x134>)
	dimtimer = DIMTIME;
 8001590:	601a      	str	r2, [r3, #0]
	setlcdbin("dim",level);
 8001592:	f7ff febb 	bl	800130c <setlcdbin>
				lcd_currentpage = lcd_pagechange(eventbuffer[1]);
 8001596:	7860      	ldrb	r0, [r4, #1]
	if (lcd_currentpage == newpage)
 8001598:	7833      	ldrb	r3, [r6, #0]
 800159a:	4298      	cmp	r0, r3
 800159c:	d001      	beq.n	80015a2 <lcd_event_process+0xbe>
 800159e:	f7ff ff91 	bl	80014c4 <lcd_pagechange.part.1>
				lcd_currentpage = lcd_pagechange(eventbuffer[1]);
 80015a2:	b2c0      	uxtb	r0, r0
 80015a4:	7030      	strb	r0, [r6, #0]
}
 80015a6:	4628      	mov	r0, r5
 80015a8:	b002      	add	sp, #8
 80015aa:	bd70      	pop	{r4, r5, r6, pc}
				printf("lcd_event_process: Got Touch event\n");
 80015ac:	481b      	ldr	r0, [pc, #108]	; (800161c <lcd_event_process+0x138>)
 80015ae:	f01f fb8b 	bl	8020cc8 <puts>
	dimtimer = DIMTIME;
 80015b2:	4b18      	ldr	r3, [pc, #96]	; (8001614 <lcd_event_process+0x130>)
 80015b4:	f64e 2260 	movw	r2, #60000	; 0xea60
	setlcdbin("dim",level);
 80015b8:	2164      	movs	r1, #100	; 0x64
 80015ba:	4817      	ldr	r0, [pc, #92]	; (8001618 <lcd_event_process+0x134>)
	dimtimer = DIMTIME;
 80015bc:	601a      	str	r2, [r3, #0]
	setlcdbin("dim",level);
 80015be:	f7ff fea5 	bl	800130c <setlcdbin>
}
 80015c2:	4628      	mov	r0, r5
 80015c4:	b002      	add	sp, #8
 80015c6:	bd70      	pop	{r4, r5, r6, pc}
					printf("Variable name too long\n");
 80015c8:	4815      	ldr	r0, [pc, #84]	; (8001620 <lcd_event_process+0x13c>)
 80015ca:	f01f fb7d 	bl	8020cc8 <puts>
 80015ce:	e7ba      	b.n	8001546 <lcd_event_process+0x62>
					printf("Invalid Escape Char\n");
 80015d0:	4814      	ldr	r0, [pc, #80]	; (8001624 <lcd_event_process+0x140>)
 80015d2:	f01f fb79 	bl	8020cc8 <puts>
 80015d6:	e7b6      	b.n	8001546 <lcd_event_process+0x62>
					printf("Invalid number of parameters\n");
 80015d8:	4813      	ldr	r0, [pc, #76]	; (8001628 <lcd_event_process+0x144>)
 80015da:	f01f fb75 	bl	8020cc8 <puts>
 80015de:	e7b2      	b.n	8001546 <lcd_event_process+0x62>
					printf("Attribute assignment failed\n");
 80015e0:	4812      	ldr	r0, [pc, #72]	; (800162c <lcd_event_process+0x148>)
 80015e2:	f01f fb71 	bl	8020cc8 <puts>
 80015e6:	e7ae      	b.n	8001546 <lcd_event_process+0x62>
					printf("Invalid variable\n");
 80015e8:	4811      	ldr	r0, [pc, #68]	; (8001630 <lcd_event_process+0x14c>)
 80015ea:	f01f fb6d 	bl	8020cc8 <puts>
 80015ee:	e7aa      	b.n	8001546 <lcd_event_process+0x62>
					printf("Error status 0x%02x\n\r", eventbuffer[0]);
 80015f0:	4810      	ldr	r0, [pc, #64]	; (8001634 <lcd_event_process+0x150>)
 80015f2:	f01f fae1 	bl	8020bb8 <iprintf>
 80015f6:	e7a6      	b.n	8001546 <lcd_event_process+0x62>
 80015f8:	2000151c 	.word	0x2000151c
 80015fc:	08024dd0 	.word	0x08024dd0
 8001600:	08024e00 	.word	0x08024e00
 8001604:	200015d4 	.word	0x200015d4
 8001608:	08024ccc 	.word	0x08024ccc
 800160c:	20001548 	.word	0x20001548
 8001610:	08024d94 	.word	0x08024d94
 8001614:	20000004 	.word	0x20000004
 8001618:	08025024 	.word	0x08025024
 800161c:	08024d70 	.word	0x08024d70
 8001620:	08024cf0 	.word	0x08024cf0
 8001624:	08024d28 	.word	0x08024d28
 8001628:	08024d08 	.word	0x08024d08
 800162c:	08024d3c 	.word	0x08024d3c
 8001630:	08024cdc 	.word	0x08024cdc
 8001634:	08024d58 	.word	0x08024d58

08001638 <processnex>:
void processnex() {		// process Nextion - called at regular intervals
 8001638:	b570      	push	{r4, r5, r6, lr}
	switch (lcduart_error) {
 800163a:	4d38      	ldr	r5, [pc, #224]	; (800171c <processnex+0xe4>)
void processnex() {		// process Nextion - called at regular intervals
 800163c:	b082      	sub	sp, #8
	switch (lcduart_error) {
 800163e:	682b      	ldr	r3, [r5, #0]
 8001640:	2b08      	cmp	r3, #8
 8001642:	d826      	bhi.n	8001692 <processnex+0x5a>
 8001644:	e8df f003 	tbb	[pc, r3]
 8001648:	25052508 	.word	0x25052508
 800164c:	2525253f 	.word	0x2525253f
 8001650:	22          	.byte	0x22
 8001651:	00          	.byte	0x00
		printf("LCD UART NOISE\n");
 8001652:	4833      	ldr	r0, [pc, #204]	; (8001720 <processnex+0xe8>)
 8001654:	f01f fb38 	bl	8020cc8 <puts>
 8001658:	4c32      	ldr	r4, [pc, #200]	; (8001724 <processnex+0xec>)
	lcduart_error = 0;
 800165a:	2600      	movs	r6, #0
 800165c:	602e      	str	r6, [r5, #0]
	if (lcd_initflag == 1) {		// full init
 800165e:	6823      	ldr	r3, [r4, #0]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d020      	beq.n	80016a6 <processnex+0x6e>
	if (lcd_initflag == 2) {	// wait after giving cmd for lcd to change speed
 8001664:	6823      	ldr	r3, [r4, #0]
 8001666:	2b02      	cmp	r3, #2
 8001668:	d04b      	beq.n	8001702 <processnex+0xca>
	if (lcd_initflag == 3) {	// uart only
 800166a:	6823      	ldr	r3, [r4, #0]
 800166c:	2b03      	cmp	r3, #3
 800166e:	d031      	beq.n	80016d4 <processnex+0x9c>
	if (dimtimer > 0) {
 8001670:	4c2d      	ldr	r4, [pc, #180]	; (8001728 <processnex+0xf0>)
	lcd_rxdma();		// get any new characters received
 8001672:	f7ff fddb 	bl	800122c <lcd_rxdma>
	result = lcd_event_process();	// this can trigger the lcd_reinit flag
 8001676:	f7ff ff35 	bl	80014e4 <lcd_event_process>
 800167a:	9001      	str	r0, [sp, #4]
	if (dimtimer > 0) {
 800167c:	6823      	ldr	r3, [r4, #0]
 800167e:	b11b      	cbz	r3, 8001688 <processnex+0x50>
		dimtimer--;
 8001680:	3b01      	subs	r3, #1
 8001682:	6023      	str	r3, [r4, #0]
		if (dimtimer == 0) {
 8001684:	2b00      	cmp	r3, #0
 8001686:	d02f      	beq.n	80016e8 <processnex+0xb0>
}
 8001688:	b002      	add	sp, #8
 800168a:	bd70      	pop	{r4, r5, r6, pc}
		printf("LCD UART OVERRUN\n");
 800168c:	4827      	ldr	r0, [pc, #156]	; (800172c <processnex+0xf4>)
 800168e:	f01f fb1b 	bl	8020cc8 <puts>
 8001692:	4c24      	ldr	r4, [pc, #144]	; (8001724 <processnex+0xec>)
	lcduart_error = 0;
 8001694:	2600      	movs	r6, #0
		printf("LCD UART_Err %0lx, ", lcduart_error);
 8001696:	6829      	ldr	r1, [r5, #0]
 8001698:	4825      	ldr	r0, [pc, #148]	; (8001730 <processnex+0xf8>)
 800169a:	f01f fa8d 	bl	8020bb8 <iprintf>
	lcduart_error = 0;
 800169e:	602e      	str	r6, [r5, #0]
	if (lcd_initflag == 1) {		// full init
 80016a0:	6823      	ldr	r3, [r4, #0]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d1de      	bne.n	8001664 <processnex+0x2c>
		printf("calling lcd_init (9600)\n");
 80016a6:	4823      	ldr	r0, [pc, #140]	; (8001734 <processnex+0xfc>)
 80016a8:	f01f fb0e 	bl	8020cc8 <puts>
		lcd_uart_init(9600);
 80016ac:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 80016b0:	f7ff fcdc 	bl	800106c <lcd_uart_init>
		lcd_init();		// has 100 + 100 ms pause
 80016b4:	f7ff fd22 	bl	80010fc <lcd_init>
		delay = 100;
 80016b8:	4a1f      	ldr	r2, [pc, #124]	; (8001738 <processnex+0x100>)
 80016ba:	2164      	movs	r1, #100	; 0x64
		lcd_initflag = 2;		// request wait for lcd to process baud speedup command
 80016bc:	2302      	movs	r3, #2
		delay = 100;
 80016be:	6011      	str	r1, [r2, #0]
		lcd_initflag = 2;		// request wait for lcd to process baud speedup command
 80016c0:	6023      	str	r3, [r4, #0]
}
 80016c2:	b002      	add	sp, #8
 80016c4:	bd70      	pop	{r4, r5, r6, pc}
		printf("LCD UART FRAMING\n");
 80016c6:	481d      	ldr	r0, [pc, #116]	; (800173c <processnex+0x104>)
 80016c8:	f01f fafe 	bl	8020cc8 <puts>
		lcd_initflag = 1;		// assume display has dropped back to 9600
 80016cc:	4c15      	ldr	r4, [pc, #84]	; (8001724 <processnex+0xec>)
 80016ce:	2301      	movs	r3, #1
 80016d0:	6023      	str	r3, [r4, #0]
		break;
 80016d2:	e7c2      	b.n	800165a <processnex+0x22>
		printf("calling lcd_uart_init(230400)\n");
 80016d4:	481a      	ldr	r0, [pc, #104]	; (8001740 <processnex+0x108>)
 80016d6:	f01f faf7 	bl	8020cc8 <puts>
		lcd_uart_init(230400);
 80016da:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 80016de:	f7ff fcc5 	bl	800106c <lcd_uart_init>
		lcd_initflag = 0;		// done
 80016e2:	6026      	str	r6, [r4, #0]
}
 80016e4:	b002      	add	sp, #8
 80016e6:	bd70      	pop	{r4, r5, r6, pc}
			printf("Auto Dimming now\n");
 80016e8:	4816      	ldr	r0, [pc, #88]	; (8001744 <processnex+0x10c>)
 80016ea:	f01f faed 	bl	8020cc8 <puts>
	dimtimer = DIMTIME;
 80016ee:	f64e 2360 	movw	r3, #60000	; 0xea60
	setlcdbin("dim",level);
 80016f2:	2114      	movs	r1, #20
 80016f4:	4814      	ldr	r0, [pc, #80]	; (8001748 <processnex+0x110>)
	dimtimer = DIMTIME;
 80016f6:	6023      	str	r3, [r4, #0]
}
 80016f8:	b002      	add	sp, #8
 80016fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	setlcdbin("dim",level);
 80016fe:	f7ff be05 	b.w	800130c <setlcdbin>
		osDelay(1);
 8001702:	2001      	movs	r0, #1
 8001704:	f00f fce8 	bl	80110d8 <osDelay>
		if (delay) {
 8001708:	4a0b      	ldr	r2, [pc, #44]	; (8001738 <processnex+0x100>)
 800170a:	6813      	ldr	r3, [r2, #0]
 800170c:	b113      	cbz	r3, 8001714 <processnex+0xdc>
			delay--;
 800170e:	3b01      	subs	r3, #1
 8001710:	6013      	str	r3, [r2, #0]
 8001712:	e7b9      	b.n	8001688 <processnex+0x50>
			lcd_initflag = 3;
 8001714:	2303      	movs	r3, #3
 8001716:	6023      	str	r3, [r4, #0]
 8001718:	e7b6      	b.n	8001688 <processnex+0x50>
 800171a:	bf00      	nop
 800171c:	200015d8 	.word	0x200015d8
 8001720:	08024f6c 	.word	0x08024f6c
 8001724:	2000154c 	.word	0x2000154c
 8001728:	20000004 	.word	0x20000004
 800172c:	08024f90 	.word	0x08024f90
 8001730:	08024fa4 	.word	0x08024fa4
 8001734:	08024fb8 	.word	0x08024fb8
 8001738:	20001498 	.word	0x20001498
 800173c:	08024f7c 	.word	0x08024f7c
 8001740:	08024fd0 	.word	0x08024fd0
 8001744:	08024ff0 	.word	0x08024ff0
 8001748:	08025024 	.word	0x08025024

0800174c <netif_status_callbk_fn>:
	}
}

void netif_status_callbk_fn(struct netif *netif) {

	printf("netif_status changed\n");
 800174c:	4801      	ldr	r0, [pc, #4]	; (8001754 <netif_status_callbk_fn+0x8>)
 800174e:	f01f babb 	b.w	8020cc8 <puts>
 8001752:	bf00      	nop
 8001754:	080255e8 	.word	0x080255e8

08001758 <Callback01>:
}

/* Callback01 function */
void Callback01(void const *argument) {
	/* USER CODE BEGIN Callback01 */
	printf("Callback01\n");
 8001758:	4801      	ldr	r0, [pc, #4]	; (8001760 <Callback01+0x8>)
 800175a:	f01f bab5 	b.w	8020cc8 <puts>
 800175e:	bf00      	nop
 8001760:	08025064 	.word	0x08025064

08001764 <StarLPTask>:
void StarLPTask(void const *argument) {
 8001764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char str[32] = { "empty" };
 8001768:	2300      	movs	r3, #0
void StarLPTask(void const *argument) {
 800176a:	b091      	sub	sp, #68	; 0x44
	statuspkt.adcudpover = 0;		// debug use count overruns
 800176c:	49a3      	ldr	r1, [pc, #652]	; (80019fc <StarLPTask+0x298>)
	char str[32] = { "empty" };
 800176e:	4aa4      	ldr	r2, [pc, #656]	; (8001a00 <StarLPTask+0x29c>)
	while (main_init_done == 0)	// wait from main to complete the initilisation
 8001770:	4ca4      	ldr	r4, [pc, #656]	; (8001a04 <StarLPTask+0x2a0>)
	statuspkt.adcudpover = 0;		// debug use count overruns
 8001772:	678b      	str	r3, [r1, #120]	; 0x78
	char str[32] = { "empty" };
 8001774:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
	statuspkt.trigcount = 0;		// debug use adc trigger count
 8001778:	67cb      	str	r3, [r1, #124]	; 0x7c
	char str[32] = { "empty" };
 800177a:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
 800177e:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	char str[32] = { "empty" };
 8001782:	f8cd 302e 	str.w	r3, [sp, #46]	; 0x2e
 8001786:	f8cd 3032 	str.w	r3, [sp, #50]	; 0x32
 800178a:	f8cd 3036 	str.w	r3, [sp, #54]	; 0x36
 800178e:	f8cd 303a 	str.w	r3, [sp, #58]	; 0x3a
 8001792:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
	while (main_init_done == 0)	// wait from main to complete the initilisation
 8001796:	6823      	ldr	r3, [r4, #0]
	char str[32] = { "empty" };
 8001798:	e892 0003 	ldmia.w	r2, {r0, r1}
 800179c:	9008      	str	r0, [sp, #32]
 800179e:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
	while (main_init_done == 0)	// wait from main to complete the initilisation
 80017a2:	b92b      	cbnz	r3, 80017b0 <StarLPTask+0x4c>
		osDelay(100);
 80017a4:	2064      	movs	r0, #100	; 0x64
 80017a6:	f00f fc97 	bl	80110d8 <osDelay>
	while (main_init_done == 0)	// wait from main to complete the initilisation
 80017aa:	6823      	ldr	r3, [r4, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d0f9      	beq.n	80017a4 <StarLPTask+0x40>
	STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], statuspkt.uid, statuspkt.majorversion, statuspkt.minorversion,
 80017b0:	4992      	ldr	r1, [pc, #584]	; (80019fc <StarLPTask+0x298>)
	lcd_initflag = 1;		// request LCD init
 80017b2:	f04f 0801 	mov.w	r8, #1
 80017b6:	4a94      	ldr	r2, [pc, #592]	; (8001a08 <StarLPTask+0x2a4>)
	uint16_t onesectimer = 0;
 80017b8:	2700      	movs	r7, #0
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 80017ba:	4d94      	ldr	r5, [pc, #592]	; (8001a0c <StarLPTask+0x2a8>)
 80017bc:	f10d 0a20 	add.w	sl, sp, #32
	lcd_initflag = 1;		// request LCD init
 80017c0:	f8c2 8000 	str.w	r8, [r2]
	uint16_t tenmstimer = 0;
 80017c4:	463c      	mov	r4, r7
	STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], statuspkt.uid, statuspkt.majorversion, statuspkt.minorversion,
 80017c6:	f8b1 905c 	ldrh.w	r9, [r1, #92]	; 0x5c
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 80017ca:	4891      	ldr	r0, [pc, #580]	; (8001a10 <StarLPTask+0x2ac>)
	STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], statuspkt.uid, statuspkt.majorversion, statuspkt.minorversion,
 80017cc:	f891 e070 	ldrb.w	lr, [r1, #112]	; 0x70
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 80017d0:	4b90      	ldr	r3, [pc, #576]	; (8001a14 <StarLPTask+0x2b0>)
	STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], statuspkt.uid, statuspkt.majorversion, statuspkt.minorversion,
 80017d2:	f891 c071 	ldrb.w	ip, [r1, #113]	; 0x71
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 80017d6:	4a90      	ldr	r2, [pc, #576]	; (8001a18 <StarLPTask+0x2b4>)
 80017d8:	4990      	ldr	r1, [pc, #576]	; (8001a1c <StarLPTask+0x2b8>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6812      	ldr	r2, [r2, #0]
 80017de:	f8cd c00c 	str.w	ip, [sp, #12]
 80017e2:	f8df b2c4 	ldr.w	fp, [pc, #708]	; 8001aa8 <StarLPTask+0x344>
 80017e6:	e9cd 9e01 	strd	r9, lr, [sp, #4]
 80017ea:	e9cd 0504 	strd	r0, r5, [sp, #16]
 80017ee:	6808      	ldr	r0, [r1, #0]
 80017f0:	498b      	ldr	r1, [pc, #556]	; (8001a20 <StarLPTask+0x2bc>)
 80017f2:	9000      	str	r0, [sp, #0]
 80017f4:	488b      	ldr	r0, [pc, #556]	; (8001a24 <StarLPTask+0x2c0>)
 80017f6:	f01f fb37 	bl	8020e68 <siprintf>
	HAL_TIM_Base_Start(&htim7);	// start audio synth sampling interval timer
 80017fa:	488b      	ldr	r0, [pc, #556]	; (8001a28 <StarLPTask+0x2c4>)
 80017fc:	f00a fba8 	bl	800bf50 <HAL_TIM_Base_Start>
 8001800:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 8001aac <StarLPTask+0x348>
	lptask_init_done = 1;		// this lp task has done its initialisation
 8001804:	4b89      	ldr	r3, [pc, #548]	; (8001a2c <StarLPTask+0x2c8>)
 8001806:	4d8a      	ldr	r5, [pc, #552]	; (8001a30 <StarLPTask+0x2cc>)
 8001808:	f8c3 8000 	str.w	r8, [r3]
		HAL_IWDG_Refresh(&hiwdg);							// refresh the hardware watchdog reset system timer
 800180c:	4889      	ldr	r0, [pc, #548]	; (8001a34 <StarLPTask+0x2d0>)
		tenmstimer++;
 800180e:	3401      	adds	r4, #1
		HAL_IWDG_Refresh(&hiwdg);							// refresh the hardware watchdog reset system timer
 8001810:	f007 fdb6 	bl	8009380 <HAL_IWDG_Refresh>
		osDelay(10);		// 10mSec
 8001814:	200a      	movs	r0, #10
 8001816:	f00f fc5f 	bl	80110d8 <osDelay>
		globaladcnoise = abs(meanwindiff);
 800181a:	4b87      	ldr	r3, [pc, #540]	; (8001a38 <StarLPTask+0x2d4>)
		if (ledhang) {	// trigger led
 800181c:	4a87      	ldr	r2, [pc, #540]	; (8001a3c <StarLPTask+0x2d8>)
		tenmstimer++;
 800181e:	b2a4      	uxth	r4, r4
		globaladcnoise = abs(meanwindiff);
 8001820:	f9b3 3000 	ldrsh.w	r3, [r3]
		if (ledhang) {	// trigger led
 8001824:	4616      	mov	r6, r2
 8001826:	6812      	ldr	r2, [r2, #0]
		globaladcnoise = abs(meanwindiff);
 8001828:	2b00      	cmp	r3, #0
 800182a:	bfb8      	it	lt
 800182c:	425b      	neglt	r3, r3
		pretrigthresh = 4 + (globaladcnoise >> 7);		// set the pretrigger level
 800182e:	09d9      	lsrs	r1, r3, #7
		globaladcnoise = abs(meanwindiff);
 8001830:	f8cb 3000 	str.w	r3, [fp]
		pretrigthresh = 4 + (globaladcnoise >> 7);		// set the pretrigger level
 8001834:	1d0b      	adds	r3, r1, #4
 8001836:	4982      	ldr	r1, [pc, #520]	; (8001a40 <StarLPTask+0x2dc>)
 8001838:	800b      	strh	r3, [r1, #0]
		if (ledhang) {	// trigger led
 800183a:	2a00      	cmp	r2, #0
 800183c:	f000 80c1 	beq.w	80019c2 <StarLPTask+0x25e>
			ledhang--;
 8001840:	1e53      	subs	r3, r2, #1
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 8001842:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001846:	2201      	movs	r2, #1
 8001848:	487e      	ldr	r0, [pc, #504]	; (8001a44 <StarLPTask+0x2e0>)
			ledhang--;
 800184a:	6033      	str	r3, [r6, #0]
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 800184c:	f007 f8fa 	bl	8008a44 <HAL_GPIO_WritePin>
		if (trigs != statuspkt.trigcount) {		// another tigger(s) has occured
 8001850:	4b6a      	ldr	r3, [pc, #424]	; (80019fc <StarLPTask+0x298>)
 8001852:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001854:	f8d9 3000 	ldr.w	r3, [r9]
 8001858:	429a      	cmp	r2, r3
 800185a:	f040 80be 	bne.w	80019da <StarLPTask+0x276>
		processnex();		// process Nextion
 800185e:	f7ff feeb 	bl	8001638 <processnex>
		if ((tenmstimer + 3) % 10 == 0) {
 8001862:	1ce2      	adds	r2, r4, #3
 8001864:	4b78      	ldr	r3, [pc, #480]	; (8001a48 <StarLPTask+0x2e4>)
 8001866:	fba3 1302 	umull	r1, r3, r3, r2
 800186a:	08db      	lsrs	r3, r3, #3
 800186c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001870:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8001874:	d115      	bne.n	80018a2 <StarLPTask+0x13e>
			if (statuspkt.trigcount > (25 + jabtrigcnt)) { // spamming: > 25 packets sent in about 100mS
 8001876:	4b75      	ldr	r3, [pc, #468]	; (8001a4c <StarLPTask+0x2e8>)
 8001878:	4a60      	ldr	r2, [pc, #384]	; (80019fc <StarLPTask+0x298>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
 800187e:	f103 0219 	add.w	r2, r3, #25
 8001882:	4291      	cmp	r1, r2
 8001884:	f200 814e 	bhi.w	8001b24 <StarLPTask+0x3c0>
				if (jabbertimeout) {
 8001888:	4a71      	ldr	r2, [pc, #452]	; (8001a50 <StarLPTask+0x2ec>)
 800188a:	6813      	ldr	r3, [r2, #0]
 800188c:	b10b      	cbz	r3, 8001892 <StarLPTask+0x12e>
					jabbertimeout--;		// de-arm count
 800188e:	3b01      	subs	r3, #1
 8001890:	6013      	str	r3, [r2, #0]
				jabtrigcnt = statuspkt.trigcount;
 8001892:	4b5a      	ldr	r3, [pc, #360]	; (80019fc <StarLPTask+0x298>)
 8001894:	4a6d      	ldr	r2, [pc, #436]	; (8001a4c <StarLPTask+0x2e8>)
 8001896:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001898:	6013      	str	r3, [r2, #0]
			if (gainchanged == 0) {		// gain not just changed
 800189a:	9b07      	ldr	r3, [sp, #28]
 800189c:	2b00      	cmp	r3, #0
 800189e:	f000 8158 	beq.w	8001b52 <StarLPTask+0x3ee>
		if ((!(lcd_initflag)) && (lastsec != onesectimer) && (lcd_currentpage == 0)) {
 80018a2:	4b59      	ldr	r3, [pc, #356]	; (8001a08 <StarLPTask+0x2a4>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	b943      	cbnz	r3, 80018ba <StarLPTask+0x156>
 80018a8:	4b6a      	ldr	r3, [pc, #424]	; (8001a54 <StarLPTask+0x2f0>)
 80018aa:	881b      	ldrh	r3, [r3, #0]
 80018ac:	42bb      	cmp	r3, r7
 80018ae:	d004      	beq.n	80018ba <StarLPTask+0x156>
 80018b0:	4b69      	ldr	r3, [pc, #420]	; (8001a58 <StarLPTask+0x2f4>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f000 81f4 	beq.w	8001ca2 <StarLPTask+0x53e>
		if ((tenmstimer + 11) % 100 == 0) {		// every second
 80018ba:	f104 020b 	add.w	r2, r4, #11
 80018be:	4b67      	ldr	r3, [pc, #412]	; (8001a5c <StarLPTask+0x2f8>)
 80018c0:	2164      	movs	r1, #100	; 0x64
 80018c2:	fba3 0302 	umull	r0, r3, r3, r2
 80018c6:	095b      	lsrs	r3, r3, #5
 80018c8:	fb01 2313 	mls	r3, r1, r3, r2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f000 8155 	beq.w	8001b7c <StarLPTask+0x418>
		if ((tenmstimer + 27) % 1000 == 0) {		// every 10 seconds
 80018d2:	f104 021b 	add.w	r2, r4, #27
 80018d6:	4b62      	ldr	r3, [pc, #392]	; (8001a60 <StarLPTask+0x2fc>)
 80018d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80018dc:	fba3 0302 	umull	r0, r3, r3, r2
 80018e0:	099b      	lsrs	r3, r3, #6
 80018e2:	fb01 2313 	mls	r3, r1, r3, r2
 80018e6:	b9c3      	cbnz	r3, 800191a <StarLPTask+0x1b6>
			if (agc) {
 80018e8:	4a5e      	ldr	r2, [pc, #376]	; (8001a64 <StarLPTask+0x300>)
 80018ea:	8812      	ldrh	r2, [r2, #0]
 80018ec:	2a00      	cmp	r2, #0
 80018ee:	f000 8117 	beq.w	8001b20 <StarLPTask+0x3bc>
				trigsin10sec = trigs - prevtrigs;
 80018f2:	4a5d      	ldr	r2, [pc, #372]	; (8001a68 <StarLPTask+0x304>)
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 80018f4:	485d      	ldr	r0, [pc, #372]	; (8001a6c <StarLPTask+0x308>)
				trigsin10sec = trigs - prevtrigs;
 80018f6:	f8d9 1000 	ldr.w	r1, [r9]
 80018fa:	6812      	ldr	r2, [r2, #0]
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 80018fc:	8800      	ldrh	r0, [r0, #0]
				trigsin10sec = trigs - prevtrigs;
 80018fe:	1a8a      	subs	r2, r1, r2
 8001900:	4e5b      	ldr	r6, [pc, #364]	; (8001a70 <StarLPTask+0x30c>)
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 8001902:	2805      	cmp	r0, #5
				trigsin10sec = trigs - prevtrigs;
 8001904:	6032      	str	r2, [r6, #0]
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 8001906:	d802      	bhi.n	800190e <StarLPTask+0x1aa>
					if (trigsin10sec < MINTRIGS10S)
 8001908:	2a01      	cmp	r2, #1
 800190a:	f240 8233 	bls.w	8001d74 <StarLPTask+0x610>
				if (trigsin10sec > MAXTRIGS10S)
 800190e:	2a0a      	cmp	r2, #10
 8001910:	f200 8204 	bhi.w	8001d1c <StarLPTask+0x5b8>
				prevtrigs = trigs;
 8001914:	4a54      	ldr	r2, [pc, #336]	; (8001a68 <StarLPTask+0x304>)
			gainchanged = 0;
 8001916:	9307      	str	r3, [sp, #28]
				prevtrigs = trigs;
 8001918:	6011      	str	r1, [r2, #0]
		if ((tenmstimer + 44) > 3000) {		// reset timer after 30 seconds
 800191a:	f640 338c 	movw	r3, #2956	; 0xb8c
 800191e:	429c      	cmp	r4, r3
 8001920:	d947      	bls.n	80019b2 <StarLPTask+0x24e>
			if (gpsgood == 0) {	// gps is not talking to us
 8001922:	4b54      	ldr	r3, [pc, #336]	; (8001a74 <StarLPTask+0x310>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 81ac 	beq.w	8001c84 <StarLPTask+0x520>
			if (psensor == MPL115A2) {
 800192c:	4b52      	ldr	r3, [pc, #328]	; (8001a78 <StarLPTask+0x314>)
			gpsgood = 0;			// reset the good flag
 800192e:	2200      	movs	r2, #0
 8001930:	4950      	ldr	r1, [pc, #320]	; (8001a74 <StarLPTask+0x310>)
			if (psensor == MPL115A2) {
 8001932:	681b      	ldr	r3, [r3, #0]
			gpsgood = 0;			// reset the good flag
 8001934:	600a      	str	r2, [r1, #0]
			if (psensor == MPL115A2) {
 8001936:	2b01      	cmp	r3, #1
 8001938:	f000 81e7 	beq.w	8001d0a <StarLPTask+0x5a6>
			} else if (psensor == MPL3115A2) {
 800193c:	2b02      	cmp	r3, #2
 800193e:	f000 8205 	beq.w	8001d4c <StarLPTask+0x5e8>
			printf("ID:%lu/(%d) %d:%d:%d:%d ", statuspkt.uid, BUILDNO, myip & 0xFF, (myip & 0xFF00) >> 8,
 8001942:	4b4e      	ldr	r3, [pc, #312]	; (8001a7c <StarLPTask+0x318>)
 8001944:	f242 7218 	movw	r2, #10008	; 0x2718
 8001948:	492c      	ldr	r1, [pc, #176]	; (80019fc <StarLPTask+0x298>)
			tenmstimer = 0;
 800194a:	2400      	movs	r4, #0
			printf("ID:%lu/(%d) %d:%d:%d:%d ", statuspkt.uid, BUILDNO, myip & 0xFF, (myip & 0xFF00) >> 8,
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f8b1 105c 	ldrh.w	r1, [r1, #92]	; 0x5c
 8001952:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8001956:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 800195a:	f3c3 2007 	ubfx	r0, r3, #8, #8
 800195e:	b2db      	uxtb	r3, r3
 8001960:	f8cd e008 	str.w	lr, [sp, #8]
 8001964:	e9cd 0c00 	strd	r0, ip, [sp]
 8001968:	4845      	ldr	r0, [pc, #276]	; (8001a80 <StarLPTask+0x31c>)
 800196a:	f01f f925 	bl	8020bb8 <iprintf>
			printf("triggers:%04d, gain:%d, noise:%03d, thresh:%02d, press:%03d.%04d, temp:%02d.%03d, time:%s\n", trigs,
 800196e:	4b45      	ldr	r3, [pc, #276]	; (8001a84 <StarLPTask+0x320>)
 8001970:	493b      	ldr	r1, [pc, #236]	; (8001a60 <StarLPTask+0x2fc>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	f8db 3000 	ldr.w	r3, [fp]
 8001978:	fba1 1202 	umull	r1, r2, r1, r2
 800197c:	4942      	ldr	r1, [pc, #264]	; (8001a88 <StarLPTask+0x324>)
 800197e:	0990      	lsrs	r0, r2, #6
 8001980:	4a42      	ldr	r2, [pc, #264]	; (8001a8c <StarLPTask+0x328>)
 8001982:	f8b1 e000 	ldrh.w	lr, [r1]
 8001986:	6812      	ldr	r2, [r2, #0]
 8001988:	f8d9 1000 	ldr.w	r1, [r9]
 800198c:	4616      	mov	r6, r2
 800198e:	9004      	str	r0, [sp, #16]
 8001990:	4a3f      	ldr	r2, [pc, #252]	; (8001a90 <StarLPTask+0x32c>)
 8001992:	9603      	str	r6, [sp, #12]
 8001994:	483f      	ldr	r0, [pc, #252]	; (8001a94 <StarLPTask+0x330>)
 8001996:	4e40      	ldr	r6, [pc, #256]	; (8001a98 <StarLPTask+0x334>)
 8001998:	9205      	str	r2, [sp, #20]
 800199a:	f00e 0207 	and.w	r2, lr, #7
 800199e:	6800      	ldr	r0, [r0, #0]
 80019a0:	6836      	ldr	r6, [r6, #0]
 80019a2:	e9cd 6001 	strd	r6, r0, [sp, #4]
 80019a6:	4831      	ldr	r0, [pc, #196]	; (8001a6c <StarLPTask+0x308>)
 80019a8:	8800      	ldrh	r0, [r0, #0]
 80019aa:	9000      	str	r0, [sp, #0]
 80019ac:	483b      	ldr	r0, [pc, #236]	; (8001a9c <StarLPTask+0x338>)
 80019ae:	f01f f903 	bl	8020bb8 <iprintf>
		if (onesectimer > 900) {			// 15 mins
 80019b2:	f5b7 7f61 	cmp.w	r7, #900	; 0x384
 80019b6:	f67f af29 	bls.w	800180c <StarLPTask+0xa8>
			requestapisn();	//update s/n and udp target (reboot on fail)
 80019ba:	f003 fe79 	bl	80056b0 <requestapisn>
			onesectimer = 0;
 80019be:	2700      	movs	r7, #0
 80019c0:	e724      	b.n	800180c <StarLPTask+0xa8>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_RESET);	// Splat D5 led off
 80019c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019c6:	481f      	ldr	r0, [pc, #124]	; (8001a44 <StarLPTask+0x2e0>)
 80019c8:	f007 f83c 	bl	8008a44 <HAL_GPIO_WritePin>
		if (trigs != statuspkt.trigcount) {		// another tigger(s) has occured
 80019cc:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <StarLPTask+0x298>)
 80019ce:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80019d0:	f8d9 3000 	ldr.w	r3, [r9]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	f43f af42 	beq.w	800185e <StarLPTask+0xfa>
			trigs = statuspkt.trigcount;
 80019da:	4b08      	ldr	r3, [pc, #32]	; (80019fc <StarLPTask+0x298>)
			HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, phaser_wav, sizeof(phaser_wav),
 80019dc:	2108      	movs	r1, #8
 80019de:	4a30      	ldr	r2, [pc, #192]	; (8001aa0 <StarLPTask+0x33c>)
			trigs = statuspkt.trigcount;
 80019e0:	f8d3 c07c 	ldr.w	ip, [r3, #124]	; 0x7c
			HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, phaser_wav, sizeof(phaser_wav),
 80019e4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80019e8:	9100      	str	r1, [sp, #0]
 80019ea:	2100      	movs	r1, #0
 80019ec:	482d      	ldr	r0, [pc, #180]	; (8001aa4 <StarLPTask+0x340>)
			trigs = statuspkt.trigcount;
 80019ee:	f8c9 c000 	str.w	ip, [r9]
			HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, phaser_wav, sizeof(phaser_wav),
 80019f2:	f004 fc6d 	bl	80062d0 <HAL_DAC_Start_DMA>
				printf("sem wait 1a\n");
 80019f6:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8001ab0 <StarLPTask+0x34c>
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 1) == pdTRUE)) {// take the ssi generation semaphore (portMAX_DELAY == infinite)
 80019fa:	e05d      	b.n	8001ab8 <StarLPTask+0x354>
 80019fc:	2002a784 	.word	0x2002a784
 8001a00:	08024938 	.word	0x08024938
 8001a04:	2000163c 	.word	0x2000163c
 8001a08:	2000154c 	.word	0x2000154c
 8001a0c:	2002b488 	.word	0x2002b488
 8001a10:	2002b4a0 	.word	0x2002b4a0
 8001a14:	1ff0f424 	.word	0x1ff0f424
 8001a18:	1ff0f420 	.word	0x1ff0f420
 8001a1c:	1ff0f428 	.word	0x1ff0f428
 8001a20:	08025100 	.word	0x08025100
 8001a24:	2000007c 	.word	0x2000007c
 8001a28:	2002b2ac 	.word	0x2002b2ac
 8001a2c:	20001638 	.word	0x20001638
 8001a30:	2002afb0 	.word	0x2002afb0
 8001a34:	2002ab88 	.word	0x2002ab88
 8001a38:	20000700 	.word	0x20000700
 8001a3c:	200006fc 	.word	0x200006fc
 8001a40:	20000000 	.word	0x20000000
 8001a44:	40020c00 	.word	0x40020c00
 8001a48:	cccccccd 	.word	0xcccccccd
 8001a4c:	2000162c 	.word	0x2000162c
 8001a50:	200006b4 	.word	0x200006b4
 8001a54:	20000008 	.word	0x20000008
 8001a58:	20001548 	.word	0x20001548
 8001a5c:	51eb851f 	.word	0x51eb851f
 8001a60:	10624dd3 	.word	0x10624dd3
 8001a64:	2000000a 	.word	0x2000000a
 8001a68:	20001640 	.word	0x20001640
 8001a6c:	20000002 	.word	0x20000002
 8001a70:	20001650 	.word	0x20001650
 8001a74:	20001658 	.word	0x20001658
 8001a78:	2000168c 	.word	0x2000168c
 8001a7c:	2002ac0c 	.word	0x2002ac0c
 8001a80:	0802531c 	.word	0x0802531c
 8001a84:	2002b438 	.word	0x2002b438
 8001a88:	2000023e 	.word	0x2000023e
 8001a8c:	2002b43c 	.word	0x2002b43c
 8001a90:	2000004c 	.word	0x2000004c
 8001a94:	2002b444 	.word	0x2002b444
 8001a98:	2002b440 	.word	0x2002b440
 8001a9c:	08025338 	.word	0x08025338
 8001aa0:	08025600 	.word	0x08025600
 8001aa4:	2002aed4 	.word	0x2002aed4
 8001aa8:	200006b0 	.word	0x200006b0
 8001aac:	2000164c 	.word	0x2000164c
 8001ab0:	08025148 	.word	0x08025148
				printf("sem wait 1a\n");
 8001ab4:	f01f f908 	bl	8020cc8 <puts>
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 1) == pdTRUE)) {// take the ssi generation semaphore (portMAX_DELAY == infinite)
 8001ab8:	2101      	movs	r1, #1
 8001aba:	6828      	ldr	r0, [r5, #0]
 8001abc:	f010 f8a8 	bl	8011c10 <xQueueSemaphoreTake>
 8001ac0:	2801      	cmp	r0, #1
				printf("sem wait 1a\n");
 8001ac2:	4640      	mov	r0, r8
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 1) == pdTRUE)) {// take the ssi generation semaphore (portMAX_DELAY == infinite)
 8001ac4:	d1f6      	bne.n	8001ab4 <StarLPTask+0x350>
			strcpy(str, ctime(&epochtime));		// ctime
 8001ac6:	48b0      	ldr	r0, [pc, #704]	; (8001d88 <StarLPTask+0x624>)
 8001ac8:	f01d ff64 	bl	801f994 <ctime>
 8001acc:	4601      	mov	r1, r0
 8001ace:	4650      	mov	r0, sl
 8001ad0:	f01f fa59 	bl	8020f86 <stpcpy>
			n = 0;
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	eba0 000a 	sub.w	r0, r0, sl
 8001ada:	46d4      	mov	ip, sl
			i = 0;
 8001adc:	460b      	mov	r3, r1
			while (i < strlen(str)) {
 8001ade:	4283      	cmp	r3, r0
				i++;
 8001ae0:	f103 0301 	add.w	r3, r3, #1
			while (i < strlen(str)) {
 8001ae4:	d20d      	bcs.n	8001b02 <StarLPTask+0x39e>
				if ((str[i] != '\n') && (str[i] != '\r'))
 8001ae6:	f81c 2b01 	ldrb.w	r2, [ip], #1
 8001aea:	2a0a      	cmp	r2, #10
 8001aec:	d0f7      	beq.n	8001ade <StarLPTask+0x37a>
 8001aee:	2a0d      	cmp	r2, #13
 8001af0:	d0f5      	beq.n	8001ade <StarLPTask+0x37a>
					trigtimestr[n++] = str[i];
 8001af2:	4ea6      	ldr	r6, [pc, #664]	; (8001d8c <StarLPTask+0x628>)
			while (i < strlen(str)) {
 8001af4:	4283      	cmp	r3, r0
				i++;
 8001af6:	f103 0301 	add.w	r3, r3, #1
					trigtimestr[n++] = str[i];
 8001afa:	5472      	strb	r2, [r6, r1]
 8001afc:	f101 0101 	add.w	r1, r1, #1
			while (i < strlen(str)) {
 8001b00:	d3f1      	bcc.n	8001ae6 <StarLPTask+0x382>
			trigtimestr[n] = '\0';
 8001b02:	2300      	movs	r3, #0
 8001b04:	4ea1      	ldr	r6, [pc, #644]	; (8001d8c <StarLPTask+0x628>)
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 8001b06:	6828      	ldr	r0, [r5, #0]
			trigtimestr[n] = '\0';
 8001b08:	5473      	strb	r3, [r6, r1]
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f00f fdf9 	bl	8011704 <xQueueGenericSend>
 8001b12:	2801      	cmp	r0, #1
 8001b14:	f43f aea3 	beq.w	800185e <StarLPTask+0xfa>
				printf("semaphore 1a release failed\n");
 8001b18:	489d      	ldr	r0, [pc, #628]	; (8001d90 <StarLPTask+0x62c>)
 8001b1a:	f01f f8d5 	bl	8020cc8 <puts>
 8001b1e:	e69e      	b.n	800185e <StarLPTask+0xfa>
			gainchanged = 0;
 8001b20:	9207      	str	r2, [sp, #28]
 8001b22:	e6fa      	b.n	800191a <StarLPTask+0x1b6>
				statuspkt.jabcnt++;
 8001b24:	4e9b      	ldr	r6, [pc, #620]	; (8001d94 <StarLPTask+0x630>)
				jabbertimeout = 1;		// 100mS seconds pause
 8001b26:	2101      	movs	r1, #1
 8001b28:	489b      	ldr	r0, [pc, #620]	; (8001d98 <StarLPTask+0x634>)
				statuspkt.jabcnt++;
 8001b2a:	f8b6 2086 	ldrh.w	r2, [r6, #134]	; 0x86
				jabbertimeout = 1;		// 100mS seconds pause
 8001b2e:	6001      	str	r1, [r0, #0]
				statuspkt.jabcnt++;
 8001b30:	440a      	add	r2, r1
				printf("Jabbering: %d\n", statuspkt.trigcount - jabtrigcnt);
 8001b32:	489a      	ldr	r0, [pc, #616]	; (8001d9c <StarLPTask+0x638>)
				statuspkt.jabcnt++;
 8001b34:	b292      	uxth	r2, r2
 8001b36:	f8a6 2086 	strh.w	r2, [r6, #134]	; 0x86
				printf("Jabbering: %d\n", statuspkt.trigcount - jabtrigcnt);
 8001b3a:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 8001b3c:	1ac9      	subs	r1, r1, r3
 8001b3e:	f01f f83b 	bl	8020bb8 <iprintf>
				if (agc) {
 8001b42:	4b97      	ldr	r3, [pc, #604]	; (8001da0 <StarLPTask+0x63c>)
 8001b44:	881b      	ldrh	r3, [r3, #0]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f040 8109 	bne.w	8001d5e <StarLPTask+0x5fa>
				jabtrigcnt = statuspkt.trigcount;
 8001b4c:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
 8001b4e:	4a95      	ldr	r2, [pc, #596]	; (8001da4 <StarLPTask+0x640>)
 8001b50:	6013      	str	r3, [r2, #0]
				n = pretrigcnt - lastpretrigcnt;		// count pretriggers
 8001b52:	4b95      	ldr	r3, [pc, #596]	; (8001da8 <StarLPTask+0x644>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	4b95      	ldr	r3, [pc, #596]	; (8001dac <StarLPTask+0x648>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	1ad3      	subs	r3, r2, r3
				if (n > 5) {				// too many triggers in 100mS
 8001b5c:	2b05      	cmp	r3, #5
 8001b5e:	f340 8095 	ble.w	8001c8c <StarLPTask+0x528>
					if (trigthresh < 4095)
 8001b62:	4893      	ldr	r0, [pc, #588]	; (8001db0 <StarLPTask+0x64c>)
 8001b64:	f640 71fe 	movw	r1, #4094	; 0xffe
 8001b68:	8803      	ldrh	r3, [r0, #0]
 8001b6a:	428b      	cmp	r3, r1
 8001b6c:	d801      	bhi.n	8001b72 <StarLPTask+0x40e>
						trigthresh++;
 8001b6e:	3301      	adds	r3, #1
 8001b70:	8003      	strh	r3, [r0, #0]
				lastpretrigcnt = pretrigcnt;	// (dont worry about 2^32 wrap)
 8001b72:	2300      	movs	r3, #0
 8001b74:	9307      	str	r3, [sp, #28]
 8001b76:	4b8d      	ldr	r3, [pc, #564]	; (8001dac <StarLPTask+0x648>)
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	e692      	b.n	80018a2 <StarLPTask+0x13e>
			HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 8001b7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b80:	488c      	ldr	r0, [pc, #560]	; (8001db4 <StarLPTask+0x650>)
 8001b82:	f006 ff79 	bl	8008a78 <HAL_GPIO_TogglePin>
				printf("sem wait 1b\n");
 8001b86:	f8df 8298 	ldr.w	r8, [pc, #664]	; 8001e20 <StarLPTask+0x6bc>
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 1) == pdTRUE)) {// take the ssi generation semaphore (portMAX_DELAY == infinite)
 8001b8a:	e001      	b.n	8001b90 <StarLPTask+0x42c>
				printf("sem wait 1b\n");
 8001b8c:	f01f f89c 	bl	8020cc8 <puts>
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 1) == pdTRUE)) {// take the ssi generation semaphore (portMAX_DELAY == infinite)
 8001b90:	2101      	movs	r1, #1
 8001b92:	6828      	ldr	r0, [r5, #0]
 8001b94:	f010 f83c 	bl	8011c10 <xQueueSemaphoreTake>
 8001b98:	2801      	cmp	r0, #1
				printf("sem wait 1b\n");
 8001b9a:	4640      	mov	r0, r8
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 1) == pdTRUE)) {// take the ssi generation semaphore (portMAX_DELAY == infinite)
 8001b9c:	d1f6      	bne.n	8001b8c <StarLPTask+0x428>
			strcpy(str, ctime(&epochtime));
 8001b9e:	487a      	ldr	r0, [pc, #488]	; (8001d88 <StarLPTask+0x624>)
 8001ba0:	f01d fef8 	bl	801f994 <ctime>
 8001ba4:	4601      	mov	r1, r0
 8001ba6:	4650      	mov	r0, sl
			sprintf(statstr,
 8001ba8:	4e81      	ldr	r6, [pc, #516]	; (8001db0 <StarLPTask+0x64c>)
			strcpy(str, ctime(&epochtime));
 8001baa:	f01f f9ec 	bl	8020f86 <stpcpy>
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 8001bae:	ab10      	add	r3, sp, #64	; 0x40
 8001bb0:	eba0 000a 	sub.w	r0, r0, sl
 8001bb4:	f04f 0c00 	mov.w	ip, #0
			sprintf(nowtimestr, "\"%s\"", str);
 8001bb8:	4652      	mov	r2, sl
 8001bba:	497f      	ldr	r1, [pc, #508]	; (8001db8 <StarLPTask+0x654>)
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 8001bbc:	4403      	add	r3, r0
			sprintf(nowtimestr, "\"%s\"", str);
 8001bbe:	487f      	ldr	r0, [pc, #508]	; (8001dbc <StarLPTask+0x658>)
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 8001bc0:	f803 cc21 	strb.w	ip, [r3, #-33]
			sprintf(nowtimestr, "\"%s\"", str);
 8001bc4:	f01f f950 	bl	8020e68 <siprintf>
			sprintf(tempstr, "%d.%d", temperature, tempfrac);
 8001bc8:	4b7d      	ldr	r3, [pc, #500]	; (8001dc0 <StarLPTask+0x65c>)
 8001bca:	4a7e      	ldr	r2, [pc, #504]	; (8001dc4 <StarLPTask+0x660>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6812      	ldr	r2, [r2, #0]
 8001bd0:	497d      	ldr	r1, [pc, #500]	; (8001dc8 <StarLPTask+0x664>)
 8001bd2:	487e      	ldr	r0, [pc, #504]	; (8001dcc <StarLPTask+0x668>)
 8001bd4:	f01f f948 	bl	8020e68 <siprintf>
			sprintf(pressstr, "%d.%d", pressure, pressfrac);
 8001bd8:	4b7d      	ldr	r3, [pc, #500]	; (8001dd0 <StarLPTask+0x66c>)
 8001bda:	4a7e      	ldr	r2, [pc, #504]	; (8001dd4 <StarLPTask+0x670>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	6812      	ldr	r2, [r2, #0]
 8001be0:	4979      	ldr	r1, [pc, #484]	; (8001dc8 <StarLPTask+0x664>)
 8001be2:	487d      	ldr	r0, [pc, #500]	; (8001dd8 <StarLPTask+0x674>)
 8001be4:	f01f f940 	bl	8020e68 <siprintf>
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 8001be8:	4b7c      	ldr	r3, [pc, #496]	; (8001ddc <StarLPTask+0x678>)
			sprintf(statstr,
 8001bea:	4a7d      	ldr	r2, [pc, #500]	; (8001de0 <StarLPTask+0x67c>)
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 8001bec:	f9b3 3000 	ldrsh.w	r3, [r3]
			sprintf(statstr,
 8001bf0:	6811      	ldr	r1, [r2, #0]
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 8001bf2:	2b00      	cmp	r3, #0
			sprintf(statstr,
 8001bf4:	4867      	ldr	r0, [pc, #412]	; (8001d94 <StarLPTask+0x630>)
 8001bf6:	f8b6 c000 	ldrh.w	ip, [r6]
 8001bfa:	f3c1 010b 	ubfx	r1, r1, #0, #12
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 8001bfe:	bfb8      	it	lt
 8001c00:	425b      	neglt	r3, r3
			sprintf(statstr,
 8001c02:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8001c04:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8001c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c0a:	f8cd c00c 	str.w	ip, [sp, #12]
 8001c0e:	9000      	str	r0, [sp, #0]
 8001c10:	4874      	ldr	r0, [pc, #464]	; (8001de4 <StarLPTask+0x680>)
 8001c12:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8001c16:	4b5d      	ldr	r3, [pc, #372]	; (8001d8c <StarLPTask+0x628>)
 8001c18:	4973      	ldr	r1, [pc, #460]	; (8001de8 <StarLPTask+0x684>)
 8001c1a:	f01f f925 	bl	8020e68 <siprintf>
			if (gpslocked) {
 8001c1e:	4b73      	ldr	r3, [pc, #460]	; (8001dec <StarLPTask+0x688>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d05e      	beq.n	8001ce4 <StarLPTask+0x580>
				sprintf(gpsstr, "\"Locked: %d Sats<br>Lon: %d<br>Lat: %d\"", statuspkt.NavPvt.numSV,
 8001c26:	485b      	ldr	r0, [pc, #364]	; (8001d94 <StarLPTask+0x630>)
 8001c28:	4971      	ldr	r1, [pc, #452]	; (8001df0 <StarLPTask+0x68c>)
 8001c2a:	7ec2      	ldrb	r2, [r0, #27]
 8001c2c:	69c3      	ldr	r3, [r0, #28]
 8001c2e:	6a00      	ldr	r0, [r0, #32]
 8001c30:	9000      	str	r0, [sp, #0]
 8001c32:	4870      	ldr	r0, [pc, #448]	; (8001df4 <StarLPTask+0x690>)
 8001c34:	f01f f918 	bl	8020e68 <siprintf>
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 8001c38:	2300      	movs	r3, #0
 8001c3a:	6828      	ldr	r0, [r5, #0]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4619      	mov	r1, r3
 8001c40:	f00f fd60 	bl	8011704 <xQueueGenericSend>
 8001c44:	2801      	cmp	r0, #1
 8001c46:	d002      	beq.n	8001c4e <StarLPTask+0x4ea>
				printf("semaphore 1b release failed\n");
 8001c48:	486b      	ldr	r0, [pc, #428]	; (8001df8 <StarLPTask+0x694>)
 8001c4a:	f01f f83d 	bl	8020cc8 <puts>
			onesectimer++;
 8001c4e:	3701      	adds	r7, #1
				printf("sem wait 1c\n");
 8001c50:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 8001e24 <StarLPTask+0x6c0>
			onesectimer++;
 8001c54:	b2bf      	uxth	r7, r7
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 25) == pdTRUE)) {// give the ssi generation semaphore (portMAX_DELAY == infinite)
 8001c56:	e001      	b.n	8001c5c <StarLPTask+0x4f8>
				printf("sem wait 1c\n");
 8001c58:	f01f f836 	bl	8020cc8 <puts>
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 25) == pdTRUE)) {// give the ssi generation semaphore (portMAX_DELAY == infinite)
 8001c5c:	2119      	movs	r1, #25
 8001c5e:	6828      	ldr	r0, [r5, #0]
 8001c60:	f00f ffd6 	bl	8011c10 <xQueueSemaphoreTake>
 8001c64:	2801      	cmp	r0, #1
				printf("sem wait 1c\n");
 8001c66:	4640      	mov	r0, r8
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 25) == pdTRUE)) {// give the ssi generation semaphore (portMAX_DELAY == infinite)
 8001c68:	d1f6      	bne.n	8001c58 <StarLPTask+0x4f4>
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {	// give the ssi generation semaphore
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	6828      	ldr	r0, [r5, #0]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	4619      	mov	r1, r3
 8001c72:	f00f fd47 	bl	8011704 <xQueueGenericSend>
 8001c76:	2801      	cmp	r0, #1
 8001c78:	f43f ae2b 	beq.w	80018d2 <StarLPTask+0x16e>
				printf("semaphore 1c release failed\n");
 8001c7c:	485f      	ldr	r0, [pc, #380]	; (8001dfc <StarLPTask+0x698>)
 8001c7e:	f01f f823 	bl	8020cc8 <puts>
 8001c82:	e626      	b.n	80018d2 <StarLPTask+0x16e>
				printf("GPS serial comms problem?\n");
 8001c84:	485e      	ldr	r0, [pc, #376]	; (8001e00 <StarLPTask+0x69c>)
 8001c86:	f01f f81f 	bl	8020cc8 <puts>
 8001c8a:	e64f      	b.n	800192c <StarLPTask+0x1c8>
				if (n == 0) {		// no triggers in last 100mS
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f47f af70 	bne.w	8001b72 <StarLPTask+0x40e>
					if (trigthresh > MINTRIGTHRES)	// dont permit trigthresh < minimum
 8001c92:	4947      	ldr	r1, [pc, #284]	; (8001db0 <StarLPTask+0x64c>)
 8001c94:	880b      	ldrh	r3, [r1, #0]
 8001c96:	2b03      	cmp	r3, #3
 8001c98:	f67f af6b 	bls.w	8001b72 <StarLPTask+0x40e>
						trigthresh--;
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	800b      	strh	r3, [r1, #0]
 8001ca0:	e767      	b.n	8001b72 <StarLPTask+0x40e>
			timeinfo = *localtime(&localepochtime);
 8001ca2:	4858      	ldr	r0, [pc, #352]	; (8001e04 <StarLPTask+0x6a0>)
 8001ca4:	f01d fea2 	bl	801f9ec <localtime>
 8001ca8:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8001e28 <StarLPTask+0x6c4>
 8001cac:	4686      	mov	lr, r0
 8001cae:	46c4      	mov	ip, r8
 8001cb0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001cb4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001cb8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001cbc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
			lastsec = onesectimer;
 8001cc0:	4a51      	ldr	r2, [pc, #324]	; (8001e08 <StarLPTask+0x6a4>)
			timeinfo = *localtime(&localepochtime);
 8001cc2:	f8de 3000 	ldr.w	r3, [lr]
			lastsec = onesectimer;
 8001cc6:	8017      	strh	r7, [r2, #0]
			timeinfo = *localtime(&localepochtime);
 8001cc8:	f8cc 3000 	str.w	r3, [ip]
			lcd_time();
 8001ccc:	f7ff fbaa 	bl	8001424 <lcd_time>
			if (timeinfo.tm_yday != lastday ) {
 8001cd0:	4b4e      	ldr	r3, [pc, #312]	; (8001e0c <StarLPTask+0x6a8>)
 8001cd2:	f8d8 201c 	ldr.w	r2, [r8, #28]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	f43f adee 	beq.w	80018ba <StarLPTask+0x156>
				lcd_date();
 8001cde:	f7ff fbd5 	bl	800148c <lcd_date>
 8001ce2:	e5ea      	b.n	80018ba <StarLPTask+0x156>
				strcpy(gpsstr, "\"<font color=red>**Lost GPS**<\/font>\"");
 8001ce4:	f8df c144 	ldr.w	ip, [pc, #324]	; 8001e2c <StarLPTask+0x6c8>
 8001ce8:	f8df e108 	ldr.w	lr, [pc, #264]	; 8001df4 <StarLPTask+0x690>
 8001cec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001cf0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8001cf4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001cf8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8001cfc:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8001d00:	f8ce 0000 	str.w	r0, [lr]
 8001d04:	f8ae 1004 	strh.w	r1, [lr, #4]
 8001d08:	e796      	b.n	8001c38 <StarLPTask+0x4d4>
				if (getpressure115() != HAL_OK) {
 8001d0a:	f001 fc81 	bl	8003610 <getpressure115>
 8001d0e:	2800      	cmp	r0, #0
 8001d10:	f43f ae17 	beq.w	8001942 <StarLPTask+0x1de>
					printf("MPL115A2 error\n\r");
 8001d14:	483e      	ldr	r0, [pc, #248]	; (8001e10 <StarLPTask+0x6ac>)
 8001d16:	f01e ff4f 	bl	8020bb8 <iprintf>
 8001d1a:	e612      	b.n	8001942 <StarLPTask+0x1de>
					gainchanged = bumppga(-1);
 8001d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d20:	f001 fc32 	bl	8003588 <bumppga>
 8001d24:	b203      	sxth	r3, r0
 8001d26:	9307      	str	r3, [sp, #28]
				prevtrigs = trigs;
 8001d28:	f8d9 3000 	ldr.w	r3, [r9]
 8001d2c:	4a39      	ldr	r2, [pc, #228]	; (8001e14 <StarLPTask+0x6b0>)
 8001d2e:	6013      	str	r3, [r2, #0]
				if (gainchanged > 0) {	// increased gain
 8001d30:	9b07      	ldr	r3, [sp, #28]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f77f adf1 	ble.w	800191a <StarLPTask+0x1b6>
					if (trigthresh < (4095 - 10))
 8001d38:	491d      	ldr	r1, [pc, #116]	; (8001db0 <StarLPTask+0x64c>)
 8001d3a:	f640 72f4 	movw	r2, #4084	; 0xff4
 8001d3e:	880b      	ldrh	r3, [r1, #0]
 8001d40:	4293      	cmp	r3, r2
 8001d42:	f63f adea 	bhi.w	800191a <StarLPTask+0x1b6>
						trigthresh += 5;
 8001d46:	3305      	adds	r3, #5
 8001d48:	800b      	strh	r3, [r1, #0]
 8001d4a:	e5e6      	b.n	800191a <StarLPTask+0x1b6>
				if (getpressure3115() != HAL_OK) {
 8001d4c:	f001 fdf2 	bl	8003934 <getpressure3115>
 8001d50:	2800      	cmp	r0, #0
 8001d52:	f43f adf6 	beq.w	8001942 <StarLPTask+0x1de>
					printf("MPL3115A2 error\n\r");
 8001d56:	4830      	ldr	r0, [pc, #192]	; (8001e18 <StarLPTask+0x6b4>)
 8001d58:	f01e ff2e 	bl	8020bb8 <iprintf>
 8001d5c:	e5f1      	b.n	8001942 <StarLPTask+0x1de>
					gainchanged = bumppga(-1);	// decrease gain
 8001d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8001d62:	f001 fc11 	bl	8003588 <bumppga>
				jabtrigcnt = statuspkt.trigcount;
 8001d66:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <StarLPTask+0x630>)
					gainchanged = bumppga(-1);	// decrease gain
 8001d68:	b202      	sxth	r2, r0
				jabtrigcnt = statuspkt.trigcount;
 8001d6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
					gainchanged = bumppga(-1);	// decrease gain
 8001d6c:	9207      	str	r2, [sp, #28]
				jabtrigcnt = statuspkt.trigcount;
 8001d6e:	4a0d      	ldr	r2, [pc, #52]	; (8001da4 <StarLPTask+0x640>)
 8001d70:	6013      	str	r3, [r2, #0]
 8001d72:	e592      	b.n	800189a <StarLPTask+0x136>
						gainchanged = bumppga(1);
 8001d74:	2001      	movs	r0, #1
 8001d76:	f001 fc07 	bl	8003588 <bumppga>
				if (trigsin10sec > MAXTRIGS10S)
 8001d7a:	4b28      	ldr	r3, [pc, #160]	; (8001e1c <StarLPTask+0x6b8>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2b0a      	cmp	r3, #10
 8001d80:	d8cc      	bhi.n	8001d1c <StarLPTask+0x5b8>
						gainchanged = bumppga(1);
 8001d82:	b203      	sxth	r3, r0
 8001d84:	9307      	str	r3, [sp, #28]
 8001d86:	e7cf      	b.n	8001d28 <StarLPTask+0x5c4>
 8001d88:	2002b3d0 	.word	0x2002b3d0
 8001d8c:	20000210 	.word	0x20000210
 8001d90:	08025154 	.word	0x08025154
 8001d94:	2002a784 	.word	0x2002a784
 8001d98:	200006b4 	.word	0x200006b4
 8001d9c:	08025170 	.word	0x08025170
 8001da0:	2000000a 	.word	0x2000000a
 8001da4:	2000162c 	.word	0x2000162c
 8001da8:	20000704 	.word	0x20000704
 8001dac:	20001634 	.word	0x20001634
 8001db0:	20000002 	.word	0x20000002
 8001db4:	40020c00 	.word	0x40020c00
 8001db8:	0802518c 	.word	0x0802518c
 8001dbc:	2000004c 	.word	0x2000004c
 8001dc0:	2002b438 	.word	0x2002b438
 8001dc4:	2002b43c 	.word	0x2002b43c
 8001dc8:	08025194 	.word	0x08025194
 8001dcc:	20000204 	.word	0x20000204
 8001dd0:	2002b444 	.word	0x2002b444
 8001dd4:	2002b440 	.word	0x2002b440
 8001dd8:	2000006c 	.word	0x2000006c
 8001ddc:	20000700 	.word	0x20000700
 8001de0:	200006ac 	.word	0x200006ac
 8001de4:	200000fc 	.word	0x200000fc
 8001de8:	0802519c 	.word	0x0802519c
 8001dec:	2000169d 	.word	0x2000169d
 8001df0:	08025244 	.word	0x08025244
 8001df4:	2000000c 	.word	0x2000000c
 8001df8:	08025294 	.word	0x08025294
 8001dfc:	080252bc 	.word	0x080252bc
 8001e00:	080252d8 	.word	0x080252d8
 8001e04:	2002a890 	.word	0x2002a890
 8001e08:	20000008 	.word	0x20000008
 8001e0c:	20001540 	.word	0x20001540
 8001e10:	080252f4 	.word	0x080252f4
 8001e14:	20001640 	.word	0x20001640
 8001e18:	08025308 	.word	0x08025308
 8001e1c:	20001650 	.word	0x20001650
 8001e20:	08025180 	.word	0x08025180
 8001e24:	080252b0 	.word	0x080252b0
 8001e28:	2002a840 	.word	0x2002a840
 8001e2c:	0802526c 	.word	0x0802526c

08001e30 <_write>:
	if (file == 1) {
 8001e30:	2801      	cmp	r0, #1
int _write(int file, char *ptr, int len) {
 8001e32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e34:	460c      	mov	r4, r1
 8001e36:	4617      	mov	r7, r2
	if (file == 1) {
 8001e38:	d00e      	beq.n	8001e58 <_write+0x28>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001e3a:	2a00      	cmp	r2, #0
 8001e3c:	dd0a      	ble.n	8001e54 <_write+0x24>
 8001e3e:	188e      	adds	r6, r1, r2
			HAL_UART_Transmit(&huart5, (uint8_t*) *ptr++, 1, 10);
 8001e40:	4d0b      	ldr	r5, [pc, #44]	; (8001e70 <_write+0x40>)
 8001e42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e46:	230a      	movs	r3, #10
 8001e48:	2201      	movs	r2, #1
 8001e4a:	4628      	mov	r0, r5
 8001e4c:	f00c fff8 	bl	800ee40 <HAL_UART_Transmit>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001e50:	42b4      	cmp	r4, r6
 8001e52:	d1f6      	bne.n	8001e42 <_write+0x12>
}
 8001e54:	4638      	mov	r0, r7
 8001e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001e58:	2a00      	cmp	r2, #0
 8001e5a:	ddfb      	ble.n	8001e54 <_write+0x24>
 8001e5c:	188d      	adds	r5, r1, r2
			__io_putchar(*ptr++);
 8001e5e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001e62:	f001 f8d3 	bl	800300c <__io_putchar>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001e66:	42ac      	cmp	r4, r5
 8001e68:	d1f9      	bne.n	8001e5e <_write+0x2e>
}
 8001e6a:	4638      	mov	r0, r7
 8001e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	2002adb4 	.word	0x2002adb4

08001e74 <rebootme>:
void rebootme() {
 8001e74:	b508      	push	{r3, lr}
		osDelay(2000);
 8001e76:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001e7a:	f00f f92d 	bl	80110d8 <osDelay>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001e7e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001e82:	4905      	ldr	r1, [pc, #20]	; (8001e98 <rebootme+0x24>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001e84:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <rebootme+0x28>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001e86:	68ca      	ldr	r2, [r1, #12]
 8001e88:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	60cb      	str	r3, [r1, #12]
 8001e90:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001e94:	bf00      	nop
 8001e96:	e7fd      	b.n	8001e94 <rebootme+0x20>
 8001e98:	e000ed00 	.word	0xe000ed00
 8001e9c:	05fa0004 	.word	0x05fa0004

08001ea0 <netif_link_callbk_fn>:
	if (netif->flags & NETIF_FLAG_LINK_UP) {
 8001ea0:	f890 1035 	ldrb.w	r1, [r0, #53]	; 0x35
 8001ea4:	074a      	lsls	r2, r1, #29
 8001ea6:	d409      	bmi.n	8001ebc <netif_link_callbk_fn+0x1c>
void netif_link_callbk_fn(struct netif *netif) {
 8001ea8:	b510      	push	{r4, lr}
 8001eaa:	4604      	mov	r4, r0
		printf("netif_link DOWN, flags=0x%02x\n", netif->flags);
 8001eac:	4807      	ldr	r0, [pc, #28]	; (8001ecc <netif_link_callbk_fn+0x2c>)
 8001eae:	f01e fe83 	bl	8020bb8 <iprintf>
		if (!(netif_is_link_up(netif))) {
 8001eb2:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001eb6:	075b      	lsls	r3, r3, #29
 8001eb8:	d503      	bpl.n	8001ec2 <netif_link_callbk_fn+0x22>
}
 8001eba:	bd10      	pop	{r4, pc}
		printf("netif_link UP, flags=0x%02x\n", netif->flags);
 8001ebc:	4804      	ldr	r0, [pc, #16]	; (8001ed0 <netif_link_callbk_fn+0x30>)
 8001ebe:	f01e be7b 	b.w	8020bb8 <iprintf>
			printf("LAN interface appears disconnected, rebooting...\n");
 8001ec2:	4804      	ldr	r0, [pc, #16]	; (8001ed4 <netif_link_callbk_fn+0x34>)
 8001ec4:	f01e ff00 	bl	8020cc8 <puts>
			rebootme();
 8001ec8:	f7ff ffd4 	bl	8001e74 <rebootme>
 8001ecc:	08025594 	.word	0x08025594
 8001ed0:	08025574 	.word	0x08025574
 8001ed4:	080255b4 	.word	0x080255b4

08001ed8 <HAL_DAC_ConvCpltCallbackCh1>:
	HAL_DAC_Stop_DMA(hdac, DAC_CHANNEL_1);
 8001ed8:	2100      	movs	r1, #0
 8001eda:	f004 ba81 	b.w	80063e0 <HAL_DAC_Stop_DMA>
 8001ede:	bf00      	nop

08001ee0 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) { // every second 1 pps (on external signal)
 8001ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (htim->Instance == TIM2) {
 8001ee2:	6803      	ldr	r3, [r0, #0]
 8001ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ee8:	d008      	beq.n	8001efc <HAL_TIM_IC_CaptureCallback+0x1c>
	} else if (htim->Instance == TIM4) {
 8001eea:	4a18      	ldr	r2, [pc, #96]	; (8001f4c <HAL_TIM_IC_CaptureCallback+0x6c>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d000      	beq.n	8001ef2 <HAL_TIM_IC_CaptureCallback+0x12>
}
 8001ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("Timer4 callback\n");
 8001ef2:	4817      	ldr	r0, [pc, #92]	; (8001f50 <HAL_TIM_IC_CaptureCallback+0x70>)
}
 8001ef4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		printf("Timer4 callback\n");
 8001ef8:	f01e bee6 	b.w	8020cc8 <puts>
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8001efc:	4c15      	ldr	r4, [pc, #84]	; (8001f54 <HAL_TIM_IC_CaptureCallback+0x74>)
		HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 8001efe:	f44f 6100 	mov.w	r1, #2048	; 0x800
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8001f02:	4b15      	ldr	r3, [pc, #84]	; (8001f58 <HAL_TIM_IC_CaptureCallback+0x78>)
 8001f04:	7ba2      	ldrb	r2, [r4, #14]
 8001f06:	4d15      	ldr	r5, [pc, #84]	; (8001f5c <HAL_TIM_IC_CaptureCallback+0x7c>)
 8001f08:	3201      	adds	r2, #1
		HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 8001f0a:	4815      	ldr	r0, [pc, #84]	; (8001f60 <HAL_TIM_IC_CaptureCallback+0x80>)
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8001f0c:	fba3 6302 	umull	r6, r3, r3, r2
		diff = lastcap;
 8001f10:	4e14      	ldr	r6, [pc, #80]	; (8001f64 <HAL_TIM_IC_CaptureCallback+0x84>)
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8001f12:	095b      	lsrs	r3, r3, #5
 8001f14:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8001f18:	eba2 0383 	sub.w	r3, r2, r3, lsl #2
 8001f1c:	702b      	strb	r3, [r5, #0]
		HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 8001f1e:	f006 fdab 	bl	8008a78 <HAL_GPIO_TogglePin>
 8001f22:	4d11      	ldr	r5, [pc, #68]	; (8001f68 <HAL_TIM_IC_CaptureCallback+0x88>)
	uint32_t sum = 0;
 8001f24:	2100      	movs	r1, #0
		diff = lastcap;
 8001f26:	6837      	ldr	r7, [r6, #0]
 8001f28:	462b      	mov	r3, r5
 8001f2a:	f105 003c 	add.w	r0, r5, #60	; 0x3c
		data[i] = data[i + 1];		// old data is low index
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	f843 2b04 	str.w	r2, [r3], #4
	for (i = 0; i < 15; i++) {
 8001f34:	4283      	cmp	r3, r0
		sum += data[i];
 8001f36:	4411      	add	r1, r2
	for (i = 0; i < 15; i++) {
 8001f38:	d1f9      	bne.n	8001f2e <HAL_TIM_IC_CaptureCallback+0x4e>
	sum += new;
 8001f3a:	4439      	add	r1, r7
		lastcap = t2cap[0];			// dma has populated t2cap from Channel 3 trigger on Timer 2
 8001f3c:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <HAL_TIM_IC_CaptureCallback+0x8c>)
	data[15] = new;		// new data at the end
 8001f3e:	63ef      	str	r7, [r5, #60]	; 0x3c
	return (sum >> 4);
 8001f40:	0909      	lsrs	r1, r1, #4
		lastcap = t2cap[0];			// dma has populated t2cap from Channel 3 trigger on Timer 2
 8001f42:	681b      	ldr	r3, [r3, #0]
		statuspkt.clktrim = movavg(diff);
 8001f44:	65a1      	str	r1, [r4, #88]	; 0x58
		lastcap = t2cap[0];			// dma has populated t2cap from Channel 3 trigger on Timer 2
 8001f46:	6033      	str	r3, [r6, #0]
}
 8001f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40000800 	.word	0x40000800
 8001f50:	08025088 	.word	0x08025088
 8001f54:	2002a784 	.word	0x2002a784
 8001f58:	88888889 	.word	0x88888889
 8001f5c:	20000708 	.word	0x20000708
 8001f60:	40020c00 	.word	0x40020c00
 8001f64:	20001630 	.word	0x20001630
 8001f68:	200015ec 	.word	0x200015ec
 8001f6c:	2002a830 	.word	0x2002a830

08001f70 <HAL_TIM_PeriodElapsedCallback>:
	/* USER CODE BEGIN Callback 0 */
	static int counter = 0;

#ifdef configGENERATE_RUN_TIME_STATS

	if (htim->Instance == TIM14) {				// TIM14 used for RTOS profiling
 8001f70:	6803      	ldr	r3, [r0, #0]
 8001f72:	4a25      	ldr	r2, [pc, #148]	; (8002008 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d011      	beq.n	8001f9c <HAL_TIM_PeriodElapsedCallback+0x2c>
		rtos_debug_timer++;
		return;
	}
#endif

	if (htim->Instance == TIM5) {// TIM5 interrupt is used as hook to run ADC_Conv_complete() at a lower IRQ  priority than dmacomplete
 8001f78:	4a24      	ldr	r2, [pc, #144]	; (800200c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d02e      	beq.n	8001fdc <HAL_TIM_PeriodElapsedCallback+0x6c>
//		printf("T5\n");
		ADC_Conv_complete();			// It is a one-shot
		return;
	}

	if (htim->Instance == TIM2) {
 8001f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f82:	d02d      	beq.n	8001fe0 <HAL_TIM_PeriodElapsedCallback+0x70>
		printf("T2P PeriodElapsedCallback %lu %lu\n", t2cap[0], statuspkt.clktrim);
		return;
	}
	if (htim->Instance == TIM3) {
 8001f84:	4a22      	ldr	r2, [pc, #136]	; (8002010 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d00d      	beq.n	8001fa6 <HAL_TIM_PeriodElapsedCallback+0x36>
		printf("T3 PeriodElapsedCallback\n");
		return;
	}

	if (htim->Instance == TIM6) { // 1 second (internally timed, not compensated by GPS)
 8001f8a:	4a22      	ldr	r2, [pc, #136]	; (8002014 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d00d      	beq.n	8001fac <HAL_TIM_PeriodElapsedCallback+0x3c>
		}
		return;
	}

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM12) {
 8001f90:	4a21      	ldr	r2, [pc, #132]	; (8002018 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d02b      	beq.n	8001fee <HAL_TIM_PeriodElapsedCallback+0x7e>
		HAL_IncTick();
	}
	/* USER CODE BEGIN Callback 1 */
	else {
		printf("Unknown Timer Period Elapsed callback\n");
 8001f96:	4821      	ldr	r0, [pc, #132]	; (800201c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001f98:	f01e be96 	b.w	8020cc8 <puts>
		rtos_debug_timer++;
 8001f9c:	4a20      	ldr	r2, [pc, #128]	; (8002020 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001f9e:	6813      	ldr	r3, [r2, #0]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	6013      	str	r3, [r2, #0]
 8001fa4:	4770      	bx	lr
		printf("T3 PeriodElapsedCallback\n");
 8001fa6:	481f      	ldr	r0, [pc, #124]	; (8002024 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001fa8:	f01e be8e 	b.w	8020cc8 <puts>
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001fac:	b510      	push	{r4, lr}
		t1sec++;
 8001fae:	491e      	ldr	r1, [pc, #120]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0xb8>)
		statuspkt.sysuptime++;
 8001fb0:	4c1e      	ldr	r4, [pc, #120]	; (800202c <HAL_TIM_PeriodElapsedCallback+0xbc>)
		t1sec++;
 8001fb2:	680a      	ldr	r2, [r1, #0]
		statuspkt.sysuptime++;
 8001fb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
		if (netup)
 8001fb6:	481e      	ldr	r0, [pc, #120]	; (8002030 <HAL_TIM_PeriodElapsedCallback+0xc0>)
		t1sec++;
 8001fb8:	3201      	adds	r2, #1
		statuspkt.sysuptime++;
 8001fba:	3301      	adds	r3, #1
		if (netup)
 8001fbc:	7800      	ldrb	r0, [r0, #0]
		t1sec++;
 8001fbe:	600a      	str	r2, [r1, #0]
		statuspkt.sysuptime++;
 8001fc0:	6663      	str	r3, [r4, #100]	; 0x64
		if (netup)
 8001fc2:	b110      	cbz	r0, 8001fca <HAL_TIM_PeriodElapsedCallback+0x5a>
			statuspkt.netuptime++;
 8001fc4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	66a3      	str	r3, [r4, #104]	; 0x68
		if (gpslocked) {
 8001fca:	4b1a      	ldr	r3, [pc, #104]	; (8002034 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	b983      	cbnz	r3, 8001ff2 <HAL_TIM_PeriodElapsedCallback+0x82>
			epochvalid = 0;
 8001fd0:	4a19      	ldr	r2, [pc, #100]	; (8002038 <HAL_TIM_PeriodElapsedCallback+0xc8>)
			statuspkt.gpsuptime = 0;	// gps uptime is zero
 8001fd2:	66e3      	str	r3, [r4, #108]	; 0x6c
			epochvalid = 0;
 8001fd4:	7013      	strb	r3, [r2, #0]
			statuspkt.epochsecs = 0;	// make epoch time obviously wrong
 8001fd6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	}
	/* USER CODE END Callback 1 */
}
 8001fda:	bd10      	pop	{r4, pc}
		ADC_Conv_complete();			// It is a one-shot
 8001fdc:	f7fe bc4e 	b.w	800087c <ADC_Conv_complete>
		printf("T2P PeriodElapsedCallback %lu %lu\n", t2cap[0], statuspkt.clktrim);
 8001fe0:	4a12      	ldr	r2, [pc, #72]	; (800202c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001fe2:	4b16      	ldr	r3, [pc, #88]	; (800203c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001fe4:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001fe6:	6819      	ldr	r1, [r3, #0]
 8001fe8:	4815      	ldr	r0, [pc, #84]	; (8002040 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001fea:	f01e bde5 	b.w	8020bb8 <iprintf>
		HAL_IncTick();
 8001fee:	f003 bba9 	b.w	8005744 <HAL_IncTick>
			statuspkt.gpsuptime++;
 8001ff2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	66e3      	str	r3, [r4, #108]	; 0x6c
				statuspkt.epochsecs = calcepoch32();
 8001ff8:	f001 f826 	bl	8003048 <calcepoch32>
				epochvalid = 1;
 8001ffc:	4b0e      	ldr	r3, [pc, #56]	; (8002038 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001ffe:	2201      	movs	r2, #1
				statuspkt.epochsecs = calcepoch32();
 8002000:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
				epochvalid = 1;
 8002004:	701a      	strb	r2, [r3, #0]
}
 8002006:	bd10      	pop	{r4, pc}
 8002008:	40002000 	.word	0x40002000
 800200c:	40000c00 	.word	0x40000c00
 8002010:	40000400 	.word	0x40000400
 8002014:	40001000 	.word	0x40001000
 8002018:	40001800 	.word	0x40001800
 800201c:	080250d8 	.word	0x080250d8
 8002020:	20001644 	.word	0x20001644
 8002024:	080250bc 	.word	0x080250bc
 8002028:	20001648 	.word	0x20001648
 800202c:	2002a784 	.word	0x2002a784
 8002030:	20000702 	.word	0x20000702
 8002034:	2000169d 	.word	0x2000169d
 8002038:	2000169c 	.word	0x2000169c
 800203c:	2002a830 	.word	0x2002a830
 8002040:	08025098 	.word	0x08025098

08002044 <Error_Handler>:
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
		printf("HAL error (main.c 2343)\n");
 8002044:	4c02      	ldr	r4, [pc, #8]	; (8002050 <Error_Handler+0xc>)
void Error_Handler(void) {
 8002046:	b508      	push	{r3, lr}
		printf("HAL error (main.c 2343)\n");
 8002048:	4620      	mov	r0, r4
 800204a:	f01e fe3d 	bl	8020cc8 <puts>
 800204e:	e7fb      	b.n	8002048 <Error_Handler+0x4>
 8002050:	08025070 	.word	0x08025070

08002054 <SystemClock_Config>:
void SystemClock_Config(void) {
 8002054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002056:	b0b9      	sub	sp, #228	; 0xe4
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002058:	2234      	movs	r2, #52	; 0x34
 800205a:	2100      	movs	r1, #0
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800205c:	f44f 3680 	mov.w	r6, #65536	; 0x10000
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002060:	a807      	add	r0, sp, #28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002062:	2402      	movs	r4, #2
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002064:	f01d fe27 	bl	801fcb6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002068:	2300      	movs	r3, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 800206a:	2290      	movs	r2, #144	; 0x90
 800206c:	a814      	add	r0, sp, #80	; 0x50
 800206e:	4619      	mov	r1, r3
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002070:	9306      	str	r3, [sp, #24]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 8002072:	2709      	movs	r7, #9
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002074:	2501      	movs	r5, #1
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002076:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800207a:	e9cd 3304 	strd	r3, r3, [sp, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 800207e:	f01d fe1a 	bl	801fcb6 <memset>
	HAL_PWR_EnableBkUpAccess();
 8002082:	f007 ffbb 	bl	8009ffc <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_PWR_CLK_ENABLE();
 8002086:	4a2c      	ldr	r2, [pc, #176]	; (8002138 <SystemClock_Config+0xe4>)
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002088:	4b2c      	ldr	r3, [pc, #176]	; (800213c <SystemClock_Config+0xe8>)
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800208a:	a807      	add	r0, sp, #28
	__HAL_RCC_PWR_CLK_ENABLE();
 800208c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800208e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002092:	6411      	str	r1, [r2, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 4;
 8002094:	2104      	movs	r1, #4
	__HAL_RCC_PWR_CLK_ENABLE();
 8002096:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002098:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800209c:	9200      	str	r2, [sp, #0]
 800209e:	9a00      	ldr	r2, [sp, #0]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80020a6:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.PLL.PLLN = 216;
 80020a8:	22d8      	movs	r2, #216	; 0xd8
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020aa:	681b      	ldr	r3, [r3, #0]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020ac:	9608      	str	r6, [sp, #32]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020ae:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 80020b6:	9707      	str	r7, [sp, #28]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80020b8:	950c      	str	r5, [sp, #48]	; 0x30
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020ba:	9301      	str	r3, [sp, #4]
 80020bc:	9b01      	ldr	r3, [sp, #4]
	RCC_OscInitStruct.PLL.PLLQ = 6;
 80020be:	2306      	movs	r3, #6
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020c0:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020c2:	9411      	str	r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 216;
 80020c4:	9210      	str	r2, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLQ = 6;
 80020c6:	9312      	str	r3, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLM = 4;
 80020c8:	e9cd 610e 	strd	r6, r1, [sp, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80020cc:	f007 ffda 	bl	800a084 <HAL_RCC_OscConfig>
 80020d0:	bb78      	cbnz	r0, 8002132 <SystemClock_Config+0xde>
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 80020d2:	f007 ff9b 	bl	800a00c <HAL_PWREx_EnableOverDrive>
 80020d6:	4603      	mov	r3, r0
 80020d8:	bb58      	cbnz	r0, 8002132 <SystemClock_Config+0xde>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020da:	210f      	movs	r1, #15
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80020dc:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020e0:	9304      	str	r3, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80020e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020e6:	9102      	str	r1, [sp, #8]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 80020e8:	a802      	add	r0, sp, #8
 80020ea:	2107      	movs	r1, #7
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020ec:	9403      	str	r4, [sp, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80020ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 80020f2:	f008 fa9f 	bl	800a634 <HAL_RCC_ClockConfig>
 80020f6:	4603      	mov	r3, r0
 80020f8:	b9d8      	cbnz	r0, 8002132 <SystemClock_Config+0xde>
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_USART6
 80020fa:	4f11      	ldr	r7, [pc, #68]	; (8002140 <SystemClock_Config+0xec>)
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80020fc:	26c0      	movs	r6, #192	; 0xc0
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80020fe:	2103      	movs	r1, #3
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8002100:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8002104:	a814      	add	r0, sp, #80	; 0x50
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 8002106:	951e      	str	r5, [sp, #120]	; 0x78
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8002108:	931f      	str	r3, [sp, #124]	; 0x7c
	PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 800210a:	9330      	str	r3, [sp, #192]	; 0xc0
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_USART6
 800210c:	9714      	str	r7, [sp, #80]	; 0x50
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800210e:	9619      	str	r6, [sp, #100]	; 0x64
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8002110:	911c      	str	r1, [sp, #112]	; 0x70
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8002112:	9233      	str	r2, [sp, #204]	; 0xcc
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8002114:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002118:	e9cd 3326 	strd	r3, r3, [sp, #152]	; 0x98
	PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800211c:	e9cd 3328 	strd	r3, r3, [sp, #160]	; 0xa0
	PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8002120:	e9cd 332a 	strd	r3, r3, [sp, #168]	; 0xa8
	PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002124:	e9cd 332d 	strd	r3, r3, [sp, #180]	; 0xb4
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8002128:	f008 fbec 	bl	800a904 <HAL_RCCEx_PeriphCLKConfig>
 800212c:	b908      	cbnz	r0, 8002132 <SystemClock_Config+0xde>
}
 800212e:	b039      	add	sp, #228	; 0xe4
 8002130:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Error_Handler();
 8002132:	f7ff ff87 	bl	8002044 <Error_Handler>
 8002136:	bf00      	nop
 8002138:	40023800 	.word	0x40023800
 800213c:	40007000 	.word	0x40007000
 8002140:	0022df80 	.word	0x0022df80

08002144 <main>:
int main(void) {
 8002144:	b580      	push	{r7, lr}
 8002146:	b0dc      	sub	sp, #368	; 0x170
 8002148:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800214c:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002150:	4bb5      	ldr	r3, [pc, #724]	; (8002428 <main+0x2e4>)
 8002152:	2400      	movs	r4, #0
 8002154:	f8c3 4250 	str.w	r4, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002158:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800215c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002160:	695a      	ldr	r2, [r3, #20]
 8002162:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002166:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002168:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800216c:	f3bf 8f6f 	isb	sy
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8002170:	4dae      	ldr	r5, [pc, #696]	; (800242c <main+0x2e8>)
	HAL_Init();
 8002172:	f003 fad5 	bl	8005720 <HAL_Init>
	SystemClock_Config();
 8002176:	f7ff ff6d 	bl	8002054 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800217a:	9455      	str	r4, [sp, #340]	; 0x154
 800217c:	9456      	str	r4, [sp, #344]	; 0x158
	HAL_GPIO_WritePin(probe1_GPIO_Port, probe1_Pin, GPIO_PIN_RESET);
 800217e:	f44f 7100 	mov.w	r1, #512	; 0x200
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002182:	9457      	str	r4, [sp, #348]	; 0x15c
	HAL_GPIO_WritePin(probe1_GPIO_Port, probe1_Pin, GPIO_PIN_RESET);
 8002184:	4622      	mov	r2, r4
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002186:	9458      	str	r4, [sp, #352]	; 0x160
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002188:	2601      	movs	r6, #1
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800218a:	9459      	str	r4, [sp, #356]	; 0x164
	GPIO_InitStruct.Pin = probe1_Pin;
 800218c:	4689      	mov	r9, r1
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800218e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002190:	f04f 0802 	mov.w	r8, #2
	HAL_GPIO_WritePin(probe1_GPIO_Port, probe1_Pin, GPIO_PIN_RESET);
 8002194:	48a6      	ldr	r0, [pc, #664]	; (8002430 <main+0x2ec>)
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002196:	2703      	movs	r7, #3
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8002198:	f043 0310 	orr.w	r3, r3, #16
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800219c:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 8002458 <main+0x314>
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80021a0:	632b      	str	r3, [r5, #48]	; 0x30
 80021a2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80021a4:	f003 0310 	and.w	r3, r3, #16
 80021a8:	9303      	str	r3, [sp, #12]
 80021aa:	9b03      	ldr	r3, [sp, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80021ac:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80021ae:	f043 0304 	orr.w	r3, r3, #4
 80021b2:	632b      	str	r3, [r5, #48]	; 0x30
 80021b4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80021b6:	f003 0304 	and.w	r3, r3, #4
 80021ba:	9304      	str	r3, [sp, #16]
 80021bc:	9b04      	ldr	r3, [sp, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80021be:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80021c0:	f043 0320 	orr.w	r3, r3, #32
 80021c4:	632b      	str	r3, [r5, #48]	; 0x30
 80021c6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80021c8:	f003 0320 	and.w	r3, r3, #32
 80021cc:	9305      	str	r3, [sp, #20]
 80021ce:	9b05      	ldr	r3, [sp, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80021d0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80021d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021d6:	632b      	str	r3, [r5, #48]	; 0x30
 80021d8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80021da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021de:	9306      	str	r3, [sp, #24]
 80021e0:	9b06      	ldr	r3, [sp, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80021e2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	632b      	str	r3, [r5, #48]	; 0x30
 80021ea:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	9307      	str	r3, [sp, #28]
 80021f2:	9b07      	ldr	r3, [sp, #28]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80021f4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80021f6:	f043 0302 	orr.w	r3, r3, #2
 80021fa:	632b      	str	r3, [r5, #48]	; 0x30
 80021fc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	9308      	str	r3, [sp, #32]
 8002204:	9b08      	ldr	r3, [sp, #32]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8002206:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002208:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800220c:	632b      	str	r3, [r5, #48]	; 0x30
 800220e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002214:	9309      	str	r3, [sp, #36]	; 0x24
 8002216:	9b09      	ldr	r3, [sp, #36]	; 0x24
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002218:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800221a:	f043 0308 	orr.w	r3, r3, #8
 800221e:	632b      	str	r3, [r5, #48]	; 0x30
 8002220:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002222:	f003 0308 	and.w	r3, r3, #8
 8002226:	930a      	str	r3, [sp, #40]	; 0x28
 8002228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	HAL_GPIO_WritePin(probe1_GPIO_Port, probe1_Pin, GPIO_PIN_RESET);
 800222a:	f006 fc0b 	bl	8008a44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | GPIO_PIN_11 | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 800222e:	4622      	mov	r2, r4
 8002230:	f644 0181 	movw	r1, #18561	; 0x4881
 8002234:	487f      	ldr	r0, [pc, #508]	; (8002434 <main+0x2f0>)
 8002236:	f006 fc05 	bl	8008a44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, XBEE_DTR_Pin | GPIO_PIN_12 | LP_FILT_Pin | XBEE_RST_Pin | GPIO_PIN_0, GPIO_PIN_RESET);
 800223a:	4622      	mov	r2, r4
 800223c:	f24d 4101 	movw	r1, #54273	; 0xd401
 8002240:	487d      	ldr	r0, [pc, #500]	; (8002438 <main+0x2f4>)
 8002242:	f006 fbff 	bl	8008a44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED_D1_Pin | LED_D2_Pin | LED_D3_Pin | LED_D4_Pin | LED_D5_Pin, GPIO_PIN_SET);
 8002246:	4632      	mov	r2, r6
 8002248:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 800224c:	487b      	ldr	r0, [pc, #492]	; (800243c <main+0x2f8>)
 800224e:	f006 fbf9 	bl	8008a44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin | USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002252:	4622      	mov	r2, r4
 8002254:	2144      	movs	r1, #68	; 0x44
 8002256:	487a      	ldr	r0, [pc, #488]	; (8002440 <main+0x2fc>)
 8002258:	f006 fbf4 	bl	8008a44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(probe2_GPIO_Port, probe2_Pin, GPIO_PIN_RESET);
 800225c:	4622      	mov	r2, r4
 800225e:	4641      	mov	r1, r8
 8002260:	4876      	ldr	r0, [pc, #472]	; (800243c <main+0x2f8>)
 8002262:	f006 fbef 	bl	8008a44 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_13 | GPIO_PIN_1;
 8002266:	f642 138a 	movw	r3, #10634	; 0x298a
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800226a:	a955      	add	r1, sp, #340	; 0x154
 800226c:	4872      	ldr	r0, [pc, #456]	; (8002438 <main+0x2f4>)
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_13 | GPIO_PIN_1;
 800226e:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002270:	9457      	str	r4, [sp, #348]	; 0x15c
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002272:	9756      	str	r7, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002274:	f006 f936 	bl	80084e4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002278:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800227c:	a955      	add	r1, sp, #340	; 0x154
 800227e:	4871      	ldr	r0, [pc, #452]	; (8002444 <main+0x300>)
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002280:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002282:	9457      	str	r4, [sp, #348]	; 0x15c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002284:	f8cd a158 	str.w	sl, [sp, #344]	; 0x158
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002288:	f006 f92c 	bl	80084e4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12
 800228c:	f643 433c 	movw	r3, #15420	; 0x3c3c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002290:	a955      	add	r1, sp, #340	; 0x154
 8002292:	4867      	ldr	r0, [pc, #412]	; (8002430 <main+0x2ec>)
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12
 8002294:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002296:	9756      	str	r7, [sp, #344]	; 0x158
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002298:	9457      	str	r4, [sp, #348]	; 0x15c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800229a:	f006 f923 	bl	80084e4 <HAL_GPIO_Init>
	HAL_GPIO_Init(probe1_GPIO_Port, &GPIO_InitStruct);
 800229e:	a955      	add	r1, sp, #340	; 0x154
 80022a0:	4863      	ldr	r0, [pc, #396]	; (8002430 <main+0x2ec>)
	GPIO_InitStruct.Pin = probe1_Pin;
 80022a2:	f8cd 9154 	str.w	r9, [sp, #340]	; 0x154
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022a6:	9656      	str	r6, [sp, #344]	; 0x158
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022a8:	9657      	str	r6, [sp, #348]	; 0x15c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022aa:	f8cd 8160 	str.w	r8, [sp, #352]	; 0x160
	HAL_GPIO_Init(probe1_GPIO_Port, &GPIO_InitStruct);
 80022ae:	f006 f919 	bl	80084e4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_8 | GPIO_PIN_9;
 80022b2:	f240 3301 	movw	r3, #769	; 0x301
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022b6:	a955      	add	r1, sp, #340	; 0x154
 80022b8:	4862      	ldr	r0, [pc, #392]	; (8002444 <main+0x300>)
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_8 | GPIO_PIN_9;
 80022ba:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022bc:	9756      	str	r7, [sp, #344]	; 0x158
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022be:	9457      	str	r4, [sp, #348]	; 0x15c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022c0:	f006 f910 	bl	80084e4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LD1_Pin | GPIO_PIN_11 | LD3_Pin | LD2_Pin;
 80022c4:	f644 0381 	movw	r3, #18561	; 0x4881
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c8:	a955      	add	r1, sp, #340	; 0x154
 80022ca:	485a      	ldr	r0, [pc, #360]	; (8002434 <main+0x2f0>)
	GPIO_InitStruct.Pin = LD1_Pin | GPIO_PIN_11 | LD3_Pin | LD2_Pin;
 80022cc:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ce:	9656      	str	r6, [sp, #344]	; 0x158
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d0:	9457      	str	r4, [sp, #348]	; 0x15c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d2:	9458      	str	r4, [sp, #352]	; 0x160
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d4:	f006 f906 	bl	80084e4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_5;
 80022d8:	2322      	movs	r3, #34	; 0x22
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022da:	a955      	add	r1, sp, #340	; 0x154
 80022dc:	4855      	ldr	r0, [pc, #340]	; (8002434 <main+0x2f0>)
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_5;
 80022de:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022e0:	9756      	str	r7, [sp, #344]	; 0x158
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e2:	9457      	str	r4, [sp, #348]	; 0x15c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e4:	f006 f8fe 	bl	80084e4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_10 | GPIO_PIN_12
 80022e8:	f24d 433b 	movw	r3, #54331	; 0xd43b
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022ec:	a955      	add	r1, sp, #340	; 0x154
 80022ee:	4854      	ldr	r0, [pc, #336]	; (8002440 <main+0x2fc>)
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_10 | GPIO_PIN_12
 80022f0:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022f2:	9756      	str	r7, [sp, #344]	; 0x158
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f4:	9457      	str	r4, [sp, #348]	; 0x15c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022f6:	f006 f8f5 	bl	80084e4 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022fa:	a955      	add	r1, sp, #340	; 0x154
 80022fc:	484e      	ldr	r0, [pc, #312]	; (8002438 <main+0x2f4>)
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 80022fe:	f8cd 9154 	str.w	r9, [sp, #340]	; 0x154
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002302:	f8cd a158 	str.w	sl, [sp, #344]	; 0x158
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	9457      	str	r4, [sp, #348]	; 0x15c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002308:	f006 f8ec 	bl	80084e4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = XBEE_DTR_Pin | GPIO_PIN_12 | LP_FILT_Pin | XBEE_RST_Pin | GPIO_PIN_0;
 800230c:	f24d 4301 	movw	r3, #54273	; 0xd401
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002310:	a955      	add	r1, sp, #340	; 0x154
 8002312:	4849      	ldr	r0, [pc, #292]	; (8002438 <main+0x2f4>)
	GPIO_InitStruct.Pin = XBEE_DTR_Pin | GPIO_PIN_12 | LP_FILT_Pin | XBEE_RST_Pin | GPIO_PIN_0;
 8002314:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002316:	9656      	str	r6, [sp, #344]	; 0x158
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002318:	9457      	str	r4, [sp, #348]	; 0x15c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231a:	9458      	str	r4, [sp, #352]	; 0x160
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800231c:	f006 f8e2 	bl	80084e4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_7;
 8002320:	f240 4385 	movw	r3, #1157	; 0x485
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002324:	a955      	add	r1, sp, #340	; 0x154
 8002326:	4845      	ldr	r0, [pc, #276]	; (800243c <main+0x2f8>)
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_7;
 8002328:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800232a:	9756      	str	r7, [sp, #344]	; 0x158
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232c:	9457      	str	r4, [sp, #348]	; 0x15c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800232e:	f006 f8d9 	bl	80084e4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED_D1_Pin | LED_D2_Pin | LED_D3_Pin | LED_D4_Pin | LED_D5_Pin;
 8002332:	f44f 4378 	mov.w	r3, #63488	; 0xf800
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002336:	a955      	add	r1, sp, #340	; 0x154
 8002338:	4840      	ldr	r0, [pc, #256]	; (800243c <main+0x2f8>)
	GPIO_InitStruct.Pin = LED_D1_Pin | LED_D2_Pin | LED_D3_Pin | LED_D4_Pin | LED_D5_Pin;
 800233a:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800233c:	9656      	str	r6, [sp, #344]	; 0x158
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233e:	9457      	str	r4, [sp, #348]	; 0x15c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002340:	9458      	str	r4, [sp, #352]	; 0x160
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002342:	f006 f8cf 	bl	80084e4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = CS_PGA_Pin | USB_PowerSwitchOn_Pin;
 8002346:	2344      	movs	r3, #68	; 0x44
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002348:	a955      	add	r1, sp, #340	; 0x154
 800234a:	483d      	ldr	r0, [pc, #244]	; (8002440 <main+0x2fc>)
	GPIO_InitStruct.Pin = CS_PGA_Pin | USB_PowerSwitchOn_Pin;
 800234c:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800234e:	9656      	str	r6, [sp, #344]	; 0x158
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002350:	9457      	str	r4, [sp, #348]	; 0x15c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002352:	9458      	str	r4, [sp, #352]	; 0x160
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002354:	f006 f8c6 	bl	80084e4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002358:	2380      	movs	r3, #128	; 0x80
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800235a:	a955      	add	r1, sp, #340	; 0x154
 800235c:	4838      	ldr	r0, [pc, #224]	; (8002440 <main+0x2fc>)
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800235e:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002360:	9456      	str	r4, [sp, #344]	; 0x158
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	9457      	str	r4, [sp, #348]	; 0x15c
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002364:	f006 f8be 	bl	80084e4 <HAL_GPIO_Init>
	HAL_GPIO_Init(probe2_GPIO_Port, &GPIO_InitStruct);
 8002368:	a955      	add	r1, sp, #340	; 0x154
 800236a:	4834      	ldr	r0, [pc, #208]	; (800243c <main+0x2f8>)
	GPIO_InitStruct.Pin = probe2_Pin;
 800236c:	f8cd 8154 	str.w	r8, [sp, #340]	; 0x154
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002370:	9656      	str	r6, [sp, #344]	; 0x158
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002372:	9657      	str	r6, [sp, #348]	; 0x15c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002374:	f8cd 8160 	str.w	r8, [sp, #352]	; 0x160
	HAL_GPIO_Init(probe2_GPIO_Port, &GPIO_InitStruct);
 8002378:	f006 f8b4 	bl	80084e4 <HAL_GPIO_Init>
	__HAL_RCC_DMA1_CLK_ENABLE();
 800237c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800237e:	4622      	mov	r2, r4
 8002380:	4621      	mov	r1, r4
 8002382:	200b      	movs	r0, #11
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002384:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002388:	632b      	str	r3, [r5, #48]	; 0x30
 800238a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800238c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002390:	9301      	str	r3, [sp, #4]
 8002392:	9b01      	ldr	r3, [sp, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 8002394:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002396:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800239a:	632b      	str	r3, [r5, #48]	; 0x30
 800239c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800239e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023a2:	9302      	str	r3, [sp, #8]
 80023a4:	9b02      	ldr	r3, [sp, #8]
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80023a6:	f003 fe39 	bl	800601c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80023aa:	200b      	movs	r0, #11
 80023ac:	f003 fe7c 	bl	80060a8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 6, 0);
 80023b0:	4622      	mov	r2, r4
 80023b2:	2106      	movs	r1, #6
 80023b4:	200c      	movs	r0, #12
 80023b6:	f003 fe31 	bl	800601c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80023ba:	200c      	movs	r0, #12
 80023bc:	f003 fe74 	bl	80060a8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 6, 0);
 80023c0:	4622      	mov	r2, r4
 80023c2:	2106      	movs	r1, #6
 80023c4:	2010      	movs	r0, #16
 80023c6:	f003 fe29 	bl	800601c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80023ca:	2010      	movs	r0, #16
 80023cc:	f003 fe6c 	bl	80060a8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80023d0:	4622      	mov	r2, r4
 80023d2:	4621      	mov	r1, r4
 80023d4:	202f      	movs	r0, #47	; 0x2f
 80023d6:	f003 fe21 	bl	800601c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80023da:	202f      	movs	r0, #47	; 0x2f
 80023dc:	f003 fe64 	bl	80060a8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 6, 0);
 80023e0:	4622      	mov	r2, r4
 80023e2:	2106      	movs	r1, #6
 80023e4:	2039      	movs	r0, #57	; 0x39
 80023e6:	f003 fe19 	bl	800601c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80023ea:	2039      	movs	r0, #57	; 0x39
 80023ec:	f003 fe5c 	bl	80060a8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 2, 0);
 80023f0:	4622      	mov	r2, r4
 80023f2:	4641      	mov	r1, r8
 80023f4:	203c      	movs	r0, #60	; 0x3c
 80023f6:	f003 fe11 	bl	800601c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80023fa:	203c      	movs	r0, #60	; 0x3c
 80023fc:	f003 fe54 	bl	80060a8 <HAL_NVIC_EnableIRQ>
	hmdios.Instance = MDIOS;
 8002400:	4b11      	ldr	r3, [pc, #68]	; (8002448 <main+0x304>)
 8002402:	4a12      	ldr	r2, [pc, #72]	; (800244c <main+0x308>)
	if (HAL_MDIOS_Init(&hmdios) != HAL_OK) {
 8002404:	4618      	mov	r0, r3
	hmdios.Instance = MDIOS;
 8002406:	601a      	str	r2, [r3, #0]
	hmdios.Init.PreambleCheck = MDIOS_PREAMBLE_CHECK_ENABLE;
 8002408:	e9c3 4401 	strd	r4, r4, [r3, #4]
	if (HAL_MDIOS_Init(&hmdios) != HAL_OK) {
 800240c:	f006 ffbe 	bl	800938c <HAL_MDIOS_Init>
 8002410:	2800      	cmp	r0, #0
 8002412:	f040 8490 	bne.w	8002d36 <main+0xbf2>
 8002416:	4603      	mov	r3, r0
	huart2.Instance = USART2;
 8002418:	4c0d      	ldr	r4, [pc, #52]	; (8002450 <main+0x30c>)
	huart2.Init.BaudRate = 115200;
 800241a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
	huart2.Instance = USART2;
 800241e:	490d      	ldr	r1, [pc, #52]	; (8002454 <main+0x310>)
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002420:	250c      	movs	r5, #12
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002422:	60a0      	str	r0, [r4, #8]
 8002424:	e01a      	b.n	800245c <main+0x318>
 8002426:	bf00      	nop
 8002428:	e000ed00 	.word	0xe000ed00
 800242c:	40023800 	.word	0x40023800
 8002430:	40021400 	.word	0x40021400
 8002434:	40020400 	.word	0x40020400
 8002438:	40021000 	.word	0x40021000
 800243c:	40020c00 	.word	0x40020c00
 8002440:	40021800 	.word	0x40021800
 8002444:	40020800 	.word	0x40020800
 8002448:	2002aec4 	.word	0x2002aec4
 800244c:	40017800 	.word	0x40017800
 8002450:	2002b18c 	.word	0x2002b18c
 8002454:	40004400 	.word	0x40004400
 8002458:	10110000 	.word	0x10110000
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 800245c:	4620      	mov	r0, r4
	huart2.Init.Mode = UART_MODE_TX_RX;
 800245e:	6165      	str	r5, [r4, #20]
	huart2.Init.BaudRate = 115200;
 8002460:	e9c4 1200 	strd	r1, r2, [r4]
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8002464:	461a      	mov	r2, r3
 8002466:	4619      	mov	r1, r3
	huart2.Init.Parity = UART_PARITY_NONE;
 8002468:	e9c4 3303 	strd	r3, r3, [r4, #12]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800246c:	e9c4 3306 	strd	r3, r3, [r4, #24]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002470:	e9c4 3308 	strd	r3, r3, [r4, #32]
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8002474:	f00c fe5c 	bl	800f130 <HAL_RS485Ex_Init>
 8002478:	4603      	mov	r3, r0
 800247a:	2800      	cmp	r0, #0
 800247c:	f040 845b 	bne.w	8002d36 <main+0xbf2>
	hadc1.Instance = ADC1;
 8002480:	4caf      	ldr	r4, [pc, #700]	; (8002740 <main+0x5fc>)
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002482:	f44f 3580 	mov.w	r5, #65536	; 0x10000
	hadc1.Instance = ADC1;
 8002486:	49af      	ldr	r1, [pc, #700]	; (8002744 <main+0x600>)
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002488:	4aaf      	ldr	r2, [pc, #700]	; (8002748 <main+0x604>)
	ADC_MultiModeTypeDef multimode = { 0 };
 800248a:	9022      	str	r0, [sp, #136]	; 0x88
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800248c:	4620      	mov	r0, r4
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800248e:	9345      	str	r3, [sp, #276]	; 0x114
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002490:	60a3      	str	r3, [r4, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002492:	6123      	str	r3, [r4, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8002494:	61a6      	str	r6, [r4, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002496:	f884 3020 	strb.w	r3, [r4, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800249a:	62e3      	str	r3, [r4, #44]	; 0x2c
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800249c:	60e3      	str	r3, [r4, #12]
	hadc1.Init.NbrOfConversion = 1;
 800249e:	61e6      	str	r6, [r4, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 80024a0:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80024a4:	6163      	str	r3, [r4, #20]
	hadc1.Instance = ADC1;
 80024a6:	6021      	str	r1, [r4, #0]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80024a8:	62a2      	str	r2, [r4, #40]	; 0x28
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80024aa:	6065      	str	r5, [r4, #4]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80024ac:	9346      	str	r3, [sp, #280]	; 0x118
 80024ae:	9347      	str	r3, [sp, #284]	; 0x11c
 80024b0:	9348      	str	r3, [sp, #288]	; 0x120
	ADC_MultiModeTypeDef multimode = { 0 };
 80024b2:	e9cd 3323 	strd	r3, r3, [sp, #140]	; 0x8c
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80024b6:	f003 f969 	bl	800578c <HAL_ADC_Init>
 80024ba:	2800      	cmp	r0, #0
 80024bc:	f040 843b 	bne.w	8002d36 <main+0xbf2>
	multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 80024c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	multimode.Mode = ADC_TRIPLEMODE_INTERL;
 80024c4:	2217      	movs	r2, #23
	multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 80024c6:	9024      	str	r0, [sp, #144]	; 0x90
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 80024c8:	a922      	add	r1, sp, #136	; 0x88
 80024ca:	4620      	mov	r0, r4
	multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 80024cc:	9323      	str	r3, [sp, #140]	; 0x8c
	multimode.Mode = ADC_TRIPLEMODE_INTERL;
 80024ce:	9222      	str	r2, [sp, #136]	; 0x88
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 80024d0:	f003 fd26 	bl	8005f20 <HAL_ADCEx_MultiModeConfigChannel>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2800      	cmp	r0, #0
 80024d8:	f040 842d 	bne.w	8002d36 <main+0xbf2>
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80024dc:	4620      	mov	r0, r4
 80024de:	a945      	add	r1, sp, #276	; 0x114
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80024e0:	9347      	str	r3, [sp, #284]	; 0x11c
	sConfig.Channel = ADC_CHANNEL_3;
 80024e2:	9745      	str	r7, [sp, #276]	; 0x114
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80024e4:	9646      	str	r6, [sp, #280]	; 0x118
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80024e6:	f003 fc2f 	bl	8005d48 <HAL_ADC_ConfigChannel>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2800      	cmp	r0, #0
 80024ee:	f040 8422 	bne.w	8002d36 <main+0xbf2>
	hadc2.Instance = ADC2;
 80024f2:	4c96      	ldr	r4, [pc, #600]	; (800274c <main+0x608>)
 80024f4:	4a96      	ldr	r2, [pc, #600]	; (8002750 <main+0x60c>)
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 80024f6:	4620      	mov	r0, r4
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80024f8:	9341      	str	r3, [sp, #260]	; 0x104
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80024fa:	6123      	str	r3, [r4, #16]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 80024fc:	f884 3020 	strb.w	r3, [r4, #32]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002500:	60e3      	str	r3, [r4, #12]
	hadc2.Init.DMAContinuousRequests = DISABLE;
 8002502:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002506:	6163      	str	r3, [r4, #20]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002508:	9342      	str	r3, [sp, #264]	; 0x108
 800250a:	9343      	str	r3, [sp, #268]	; 0x10c
 800250c:	9344      	str	r3, [sp, #272]	; 0x110
	hadc2.Init.ContinuousConvMode = ENABLE;
 800250e:	61a6      	str	r6, [r4, #24]
	hadc2.Init.NbrOfConversion = 1;
 8002510:	61e6      	str	r6, [r4, #28]
	hadc2.Instance = ADC2;
 8002512:	6022      	str	r2, [r4, #0]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002514:	e9c4 5301 	strd	r5, r3, [r4, #4]
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8002518:	f003 f938 	bl	800578c <HAL_ADC_Init>
 800251c:	4603      	mov	r3, r0
 800251e:	2800      	cmp	r0, #0
 8002520:	f040 8409 	bne.w	8002d36 <main+0xbf2>
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8002524:	4620      	mov	r0, r4
 8002526:	a941      	add	r1, sp, #260	; 0x104
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002528:	9343      	str	r3, [sp, #268]	; 0x10c
	sConfig.Channel = ADC_CHANNEL_3;
 800252a:	9741      	str	r7, [sp, #260]	; 0x104
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800252c:	9642      	str	r6, [sp, #264]	; 0x108
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 800252e:	f003 fc0b 	bl	8005d48 <HAL_ADC_ConfigChannel>
 8002532:	4603      	mov	r3, r0
 8002534:	2800      	cmp	r0, #0
 8002536:	f040 83fe 	bne.w	8002d36 <main+0xbf2>
	hadc3.Instance = ADC3;
 800253a:	4c86      	ldr	r4, [pc, #536]	; (8002754 <main+0x610>)
 800253c:	4a86      	ldr	r2, [pc, #536]	; (8002758 <main+0x614>)
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800253e:	903d      	str	r0, [sp, #244]	; 0xf4
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 8002540:	4620      	mov	r0, r4
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002542:	6123      	str	r3, [r4, #16]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002544:	f884 3020 	strb.w	r3, [r4, #32]
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002548:	60e3      	str	r3, [r4, #12]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 800254a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800254e:	6163      	str	r3, [r4, #20]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002550:	9340      	str	r3, [sp, #256]	; 0x100
	hadc3.Init.ContinuousConvMode = ENABLE;
 8002552:	61a6      	str	r6, [r4, #24]
	hadc3.Init.NbrOfConversion = 1;
 8002554:	61e6      	str	r6, [r4, #28]
	hadc3.Instance = ADC3;
 8002556:	6022      	str	r2, [r4, #0]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002558:	e9c4 5301 	strd	r5, r3, [r4, #4]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800255c:	e9cd 333e 	strd	r3, r3, [sp, #248]	; 0xf8
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 8002560:	f003 f914 	bl	800578c <HAL_ADC_Init>
 8002564:	4603      	mov	r3, r0
 8002566:	2800      	cmp	r0, #0
 8002568:	f040 83e5 	bne.w	8002d36 <main+0xbf2>
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 800256c:	4620      	mov	r0, r4
 800256e:	a93d      	add	r1, sp, #244	; 0xf4
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002570:	933f      	str	r3, [sp, #252]	; 0xfc
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002572:	e9cd 763d 	strd	r7, r6, [sp, #244]	; 0xf4
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8002576:	f003 fbe7 	bl	8005d48 <HAL_ADC_ConfigChannel>
 800257a:	2800      	cmp	r0, #0
 800257c:	f040 83db 	bne.w	8002d36 <main+0xbf2>
	hrng.Instance = RNG;
 8002580:	4b76      	ldr	r3, [pc, #472]	; (800275c <main+0x618>)
 8002582:	4a77      	ldr	r2, [pc, #476]	; (8002760 <main+0x61c>)
	if (HAL_RNG_Init(&hrng) != HAL_OK) {
 8002584:	4618      	mov	r0, r3
	hrng.Instance = RNG;
 8002586:	601a      	str	r2, [r3, #0]
	if (HAL_RNG_Init(&hrng) != HAL_OK) {
 8002588:	f008 fe9c 	bl	800b2c4 <HAL_RNG_Init>
 800258c:	2800      	cmp	r0, #0
 800258e:	f040 83d2 	bne.w	8002d36 <main+0xbf2>
	htim6.Instance = TIM6;
 8002592:	4c74      	ldr	r4, [pc, #464]	; (8002764 <main+0x620>)
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002594:	2300      	movs	r3, #0
	htim6.Instance = TIM6;
 8002596:	4a74      	ldr	r2, [pc, #464]	; (8002768 <main+0x624>)
	htim6.Init.Prescaler = 10800;
 8002598:	f642 2730 	movw	r7, #10800	; 0x2a30
	htim6.Init.Period = 10000;
 800259c:	f242 7510 	movw	r5, #10000	; 0x2710
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025a0:	2680      	movs	r6, #128	; 0x80
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 80025a2:	4620      	mov	r0, r4
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025a4:	60a3      	str	r3, [r4, #8]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80025a6:	9321      	str	r3, [sp, #132]	; 0x84
	htim6.Init.Period = 10000;
 80025a8:	60e5      	str	r5, [r4, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025aa:	61a6      	str	r6, [r4, #24]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80025ac:	e9cd 331f 	strd	r3, r3, [sp, #124]	; 0x7c
	htim6.Init.Prescaler = 10800;
 80025b0:	e9c4 2700 	strd	r2, r7, [r4]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 80025b4:	f00a fac2 	bl	800cb3c <HAL_TIM_Base_Init>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2800      	cmp	r0, #0
 80025bc:	f040 83bb 	bne.w	8002d36 <main+0xbf2>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80025c0:	2210      	movs	r2, #16
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK) {
 80025c2:	a91f      	add	r1, sp, #124	; 0x7c
 80025c4:	4620      	mov	r0, r4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025c6:	9321      	str	r3, [sp, #132]	; 0x84
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80025c8:	921f      	str	r2, [sp, #124]	; 0x7c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK) {
 80025ca:	f00b fd85 	bl	800e0d8 <HAL_TIMEx_MasterConfigSynchronization>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2800      	cmp	r0, #0
 80025d2:	f040 83b0 	bne.w	8002d36 <main+0xbf2>
	htim3.Instance = TIM3;
 80025d6:	4c65      	ldr	r4, [pc, #404]	; (800276c <main+0x628>)
 80025d8:	4a65      	ldr	r2, [pc, #404]	; (8002770 <main+0x62c>)
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80025da:	9039      	str	r0, [sp, #228]	; 0xe4
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80025dc:	9055      	str	r0, [sp, #340]	; 0x154
 80025de:	9056      	str	r0, [sp, #344]	; 0x158
 80025e0:	9057      	str	r0, [sp, #348]	; 0x15c
 80025e2:	9058      	str	r0, [sp, #352]	; 0x160
 80025e4:	9059      	str	r0, [sp, #356]	; 0x164
 80025e6:	905a      	str	r0, [sp, #360]	; 0x168
 80025e8:	905b      	str	r0, [sp, #364]	; 0x16c
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80025ea:	4620      	mov	r0, r4
	htim3.Init.Prescaler = 10800;
 80025ec:	6067      	str	r7, [r4, #4]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025ee:	6123      	str	r3, [r4, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025f0:	61a6      	str	r6, [r4, #24]
	htim3.Instance = TIM3;
 80025f2:	6022      	str	r2, [r4, #0]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80025f4:	933c      	str	r3, [sp, #240]	; 0xf0
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80025f6:	931e      	str	r3, [sp, #120]	; 0x78
	htim3.Init.Period = 10000;
 80025f8:	e9c4 3502 	strd	r3, r5, [r4, #8]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80025fc:	e9cd 333a 	strd	r3, r3, [sp, #232]	; 0xe8
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002600:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8002604:	f00a fa9a 	bl	800cb3c <HAL_TIM_Base_Init>
 8002608:	2800      	cmp	r0, #0
 800260a:	f040 8394 	bne.w	8002d36 <main+0xbf2>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800260e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8002612:	a939      	add	r1, sp, #228	; 0xe4
 8002614:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002616:	9339      	str	r3, [sp, #228]	; 0xe4
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8002618:	f009 fda2 	bl	800c160 <HAL_TIM_ConfigClockSource>
 800261c:	2800      	cmp	r0, #0
 800261e:	f040 838a 	bne.w	8002d36 <main+0xbf2>
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8002622:	4620      	mov	r0, r4
 8002624:	f00a fc06 	bl	800ce34 <HAL_TIM_PWM_Init>
 8002628:	2800      	cmp	r0, #0
 800262a:	f040 8384 	bne.w	8002d36 <main+0xbf2>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800262e:	901c      	str	r0, [sp, #112]	; 0x70
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8002630:	a91c      	add	r1, sp, #112	; 0x70
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002632:	901e      	str	r0, [sp, #120]	; 0x78
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8002634:	4620      	mov	r0, r4
 8002636:	f00b fd4f 	bl	800e0d8 <HAL_TIMEx_MasterConfigSynchronization>
 800263a:	2800      	cmp	r0, #0
 800263c:	f040 837b 	bne.w	8002d36 <main+0xbf2>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002640:	2560      	movs	r5, #96	; 0x60
	sConfigOC.Pulse = 10;
 8002642:	230a      	movs	r3, #10
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002644:	9057      	str	r0, [sp, #348]	; 0x15c
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8002646:	2204      	movs	r2, #4
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002648:	9059      	str	r0, [sp, #356]	; 0x164
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 800264a:	a955      	add	r1, sp, #340	; 0x154
 800264c:	4620      	mov	r0, r4
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800264e:	9555      	str	r5, [sp, #340]	; 0x154
	sConfigOC.Pulse = 10;
 8002650:	9356      	str	r3, [sp, #344]	; 0x158
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8002652:	f00a ff51 	bl	800d4f8 <HAL_TIM_PWM_ConfigChannel>
 8002656:	4605      	mov	r5, r0
 8002658:	2800      	cmp	r0, #0
 800265a:	f040 836c 	bne.w	8002d36 <main+0xbf2>
	HAL_TIM_MspPostInit(&htim3);
 800265e:	4620      	mov	r0, r4
	htim7.Instance = TIM7;
 8002660:	4c44      	ldr	r4, [pc, #272]	; (8002774 <main+0x630>)
	HAL_TIM_MspPostInit(&htim3);
 8002662:	f001 fed9 	bl	8004418 <HAL_TIM_MspPostInit>
	htim7.Init.Period = 9600;
 8002666:	f44f 5316 	mov.w	r3, #9600	; 0x2580
	htim7.Instance = TIM7;
 800266a:	4a43      	ldr	r2, [pc, #268]	; (8002778 <main+0x634>)
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 800266c:	4620      	mov	r0, r4
	htim7.Init.Period = 9600;
 800266e:	60e3      	str	r3, [r4, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002670:	61a6      	str	r6, [r4, #24]
	htim7.Instance = TIM7;
 8002672:	6022      	str	r2, [r4, #0]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002674:	951b      	str	r5, [sp, #108]	; 0x6c
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002676:	e9c4 5501 	strd	r5, r5, [r4, #4]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800267a:	e9cd 5519 	strd	r5, r5, [sp, #100]	; 0x64
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 800267e:	f00a fa5d 	bl	800cb3c <HAL_TIM_Base_Init>
 8002682:	4603      	mov	r3, r0
 8002684:	2800      	cmp	r0, #0
 8002686:	f040 8356 	bne.w	8002d36 <main+0xbf2>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800268a:	2220      	movs	r2, #32
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK) {
 800268c:	4620      	mov	r0, r4
 800268e:	a919      	add	r1, sp, #100	; 0x64
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002690:	931b      	str	r3, [sp, #108]	; 0x6c
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002692:	9219      	str	r2, [sp, #100]	; 0x64
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK) {
 8002694:	f00b fd20 	bl	800e0d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002698:	4603      	mov	r3, r0
 800269a:	2800      	cmp	r0, #0
 800269c:	f040 834b 	bne.w	8002d36 <main+0xbf2>
	htim1.Instance = TIM1;
 80026a0:	4a36      	ldr	r2, [pc, #216]	; (800277c <main+0x638>)
	htim1.Init.Period = 65535;
 80026a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
	htim1.Instance = TIM1;
 80026a6:	4836      	ldr	r0, [pc, #216]	; (8002780 <main+0x63c>)
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80026a8:	9335      	str	r3, [sp, #212]	; 0xd4
	htim1.Instance = TIM1;
 80026aa:	6010      	str	r0, [r2, #0]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80026ac:	4610      	mov	r0, r2
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026ae:	6193      	str	r3, [r2, #24]
	htim1.Init.Period = 65535;
 80026b0:	60d1      	str	r1, [r2, #12]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80026b2:	9338      	str	r3, [sp, #224]	; 0xe0
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80026b4:	9318      	str	r3, [sp, #96]	; 0x60
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026b6:	e9c2 3301 	strd	r3, r3, [r2, #4]
	htim1.Init.RepetitionCounter = 0;
 80026ba:	e9c2 3304 	strd	r3, r3, [r2, #16]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80026be:	e9cd 3336 	strd	r3, r3, [sp, #216]	; 0xd8
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80026c2:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80026c6:	f00a fa39 	bl	800cb3c <HAL_TIM_Base_Init>
 80026ca:	2800      	cmp	r0, #0
 80026cc:	f040 8333 	bne.w	8002d36 <main+0xbf2>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026d0:	f44f 5780 	mov.w	r7, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80026d4:	a935      	add	r1, sp, #212	; 0xd4
 80026d6:	4829      	ldr	r0, [pc, #164]	; (800277c <main+0x638>)
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026d8:	9735      	str	r7, [sp, #212]	; 0xd4
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80026da:	f009 fd41 	bl	800c160 <HAL_TIM_ConfigClockSource>
 80026de:	2800      	cmp	r0, #0
 80026e0:	f040 8329 	bne.w	8002d36 <main+0xbf2>
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026e4:	9018      	str	r0, [sp, #96]	; 0x60
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 80026e6:	a916      	add	r1, sp, #88	; 0x58
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80026e8:	e9cd 0016 	strd	r0, r0, [sp, #88]	; 0x58
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 80026ec:	4823      	ldr	r0, [pc, #140]	; (800277c <main+0x638>)
 80026ee:	f00b fcf3 	bl	800e0d8 <HAL_TIMEx_MasterConfigSynchronization>
 80026f2:	4602      	mov	r2, r0
 80026f4:	2800      	cmp	r0, #0
 80026f6:	f040 831e 	bne.w	8002d36 <main+0xbf2>
	hcrc.Instance = CRC;
 80026fa:	4b22      	ldr	r3, [pc, #136]	; (8002784 <main+0x640>)
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80026fc:	2501      	movs	r5, #1
	hcrc.Instance = CRC;
 80026fe:	4922      	ldr	r1, [pc, #136]	; (8002788 <main+0x644>)
 8002700:	8098      	strh	r0, [r3, #4]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 8002702:	4618      	mov	r0, r3
	hcrc.Instance = CRC;
 8002704:	6019      	str	r1, [r3, #0]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002706:	621d      	str	r5, [r3, #32]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8002708:	e9c3 2205 	strd	r2, r2, [r3, #20]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 800270c:	f003 fcfa 	bl	8006104 <HAL_CRC_Init>
 8002710:	4603      	mov	r3, r0
 8002712:	2800      	cmp	r0, #0
 8002714:	f040 830f 	bne.w	8002d36 <main+0xbf2>
	htim2.Instance = TIM2;
 8002718:	4c1c      	ldr	r4, [pc, #112]	; (800278c <main+0x648>)
 800271a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	htim2.Init.Period = 4000000000;
 800271e:	4a1c      	ldr	r2, [pc, #112]	; (8002790 <main+0x64c>)
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8002720:	ae49      	add	r6, sp, #292	; 0x124
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002722:	902d      	str	r0, [sp, #180]	; 0xb4
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8002724:	9049      	str	r0, [sp, #292]	; 0x124
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8002726:	4620      	mov	r0, r4
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8002728:	9331      	str	r3, [sp, #196]	; 0xc4
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800272a:	6123      	str	r3, [r4, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800272c:	61a3      	str	r3, [r4, #24]
	htim2.Instance = TIM2;
 800272e:	6021      	str	r1, [r4, #0]
	htim2.Init.Period = 4000000000;
 8002730:	60e2      	str	r2, [r4, #12]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002732:	9330      	str	r3, [sp, #192]	; 0xc0
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8002734:	934a      	str	r3, [sp, #296]	; 0x128
 8002736:	934b      	str	r3, [sp, #300]	; 0x12c
 8002738:	934c      	str	r3, [sp, #304]	; 0x130
 800273a:	934d      	str	r3, [sp, #308]	; 0x134
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800273c:	9315      	str	r3, [sp, #84]	; 0x54
 800273e:	e029      	b.n	8002794 <main+0x650>
 8002740:	2002ae34 	.word	0x2002ae34
 8002744:	40012000 	.word	0x40012000
 8002748:	0f000001 	.word	0x0f000001
 800274c:	2002aaf0 	.word	0x2002aaf0
 8002750:	40012100 	.word	0x40012100
 8002754:	2002ae7c 	.word	0x2002ae7c
 8002758:	40012200 	.word	0x40012200
 800275c:	2002b038 	.word	0x2002b038
 8002760:	50060800 	.word	0x50060800
 8002764:	2002afb4 	.word	0x2002afb4
 8002768:	40001000 	.word	0x40001000
 800276c:	2002acb0 	.word	0x2002acb0
 8002770:	40000400 	.word	0x40000400
 8002774:	2002b2ac 	.word	0x2002b2ac
 8002778:	40001400 	.word	0x40001400
 800277c:	2002aff4 	.word	0x2002aff4
 8002780:	40010000 	.word	0x40010000
 8002784:	2002ab98 	.word	0x2002ab98
 8002788:	40023000 	.word	0x40023000
 800278c:	2002b14c 	.word	0x2002b14c
 8002790:	ee6b2800 	.word	0xee6b2800
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8002794:	9334      	str	r3, [sp, #208]	; 0xd0
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002796:	e9c4 3301 	strd	r3, r3, [r4, #4]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800279a:	e9cd 332e 	strd	r3, r3, [sp, #184]	; 0xb8
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800279e:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 80027a2:	e9cd 3332 	strd	r3, r3, [sp, #200]	; 0xc8
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80027a6:	f00a f9c9 	bl	800cb3c <HAL_TIM_Base_Init>
 80027aa:	2800      	cmp	r0, #0
 80027ac:	f040 82c3 	bne.w	8002d36 <main+0xbf2>
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80027b0:	a92d      	add	r1, sp, #180	; 0xb4
 80027b2:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027b4:	972d      	str	r7, [sp, #180]	; 0xb4
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80027b6:	f009 fcd3 	bl	800c160 <HAL_TIM_ConfigClockSource>
 80027ba:	2800      	cmp	r0, #0
 80027bc:	f040 82bb 	bne.w	8002d36 <main+0xbf2>
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 80027c0:	4620      	mov	r0, r4
 80027c2:	f00a fbf5 	bl	800cfb0 <HAL_TIM_IC_Init>
 80027c6:	2800      	cmp	r0, #0
 80027c8:	f040 82b5 	bne.w	8002d36 <main+0xbf2>
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80027cc:	2704      	movs	r7, #4
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80027ce:	2350      	movs	r3, #80	; 0x50
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80027d0:	904b      	str	r0, [sp, #300]	; 0x12c
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 80027d2:	4631      	mov	r1, r6
	sSlaveConfig.TriggerFilter = 0;
 80027d4:	904d      	str	r0, [sp, #308]	; 0x134
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 80027d6:	4620      	mov	r0, r4
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80027d8:	9749      	str	r7, [sp, #292]	; 0x124
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80027da:	934a      	str	r3, [sp, #296]	; 0x128
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 80027dc:	f009 ff90 	bl	800c700 <HAL_TIM_SlaveConfigSynchro>
 80027e0:	2800      	cmp	r0, #0
 80027e2:	f040 82a8 	bne.w	8002d36 <main+0xbf2>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027e6:	9013      	str	r0, [sp, #76]	; 0x4c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 80027e8:	a913      	add	r1, sp, #76	; 0x4c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027ea:	9015      	str	r0, [sp, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 80027ec:	4620      	mov	r0, r4
 80027ee:	f00b fc73 	bl	800e0d8 <HAL_TIMEx_MasterConfigSynchronization>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2800      	cmp	r0, #0
 80027f6:	f040 829e 	bne.w	8002d36 <main+0xbf2>
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 80027fa:	4602      	mov	r2, r0
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80027fc:	9031      	str	r0, [sp, #196]	; 0xc4
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 80027fe:	a931      	add	r1, sp, #196	; 0xc4
 8002800:	4620      	mov	r0, r4
	sConfigIC.ICFilter = 0;
 8002802:	9334      	str	r3, [sp, #208]	; 0xd0
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002804:	e9cd 5332 	strd	r5, r3, [sp, #200]	; 0xc8
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8002808:	f00b f8a0 	bl	800d94c <HAL_TIM_IC_ConfigChannel>
 800280c:	2800      	cmp	r0, #0
 800280e:	f040 8292 	bne.w	8002d36 <main+0xbf2>
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002812:	2302      	movs	r3, #2
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8002814:	463a      	mov	r2, r7
 8002816:	4620      	mov	r0, r4
 8002818:	a931      	add	r1, sp, #196	; 0xc4
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800281a:	9332      	str	r3, [sp, #200]	; 0xc8
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 800281c:	f00b f896 	bl	800d94c <HAL_TIM_IC_ConfigChannel>
 8002820:	2800      	cmp	r0, #0
 8002822:	f040 8288 	bne.w	8002d36 <main+0xbf2>
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK) {
 8002826:	a931      	add	r1, sp, #196	; 0xc4
 8002828:	2208      	movs	r2, #8
 800282a:	4620      	mov	r0, r4
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800282c:	9532      	str	r5, [sp, #200]	; 0xc8
 800282e:	46a9      	mov	r9, r5
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK) {
 8002830:	f00b f88c 	bl	800d94c <HAL_TIM_IC_ConfigChannel>
 8002834:	4603      	mov	r3, r0
 8002836:	2800      	cmp	r0, #0
 8002838:	f040 827d 	bne.w	8002d36 <main+0xbf2>
	huart6.Instance = USART6;
 800283c:	4cc4      	ldr	r4, [pc, #784]	; (8002b50 <main+0xa0c>)
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT | UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 800283e:	2130      	movs	r1, #48	; 0x30
	huart6.Instance = USART6;
 8002840:	48c4      	ldr	r0, [pc, #784]	; (8002b54 <main+0xa10>)
	huart6.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8002842:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	huart6.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8002846:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
	huart6.Init.BaudRate = 9600;
 800284a:	f44f 5716 	mov.w	r7, #9600	; 0x2580
	huart6.Init.Mode = UART_MODE_TX_RX;
 800284e:	250c      	movs	r5, #12
	huart6.Instance = USART6;
 8002850:	6020      	str	r0, [r4, #0]
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT | UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8002852:	6261      	str	r1, [r4, #36]	; 0x24
	if (HAL_RS485Ex_Init(&huart6, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8002854:	4620      	mov	r0, r4
	huart6.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8002856:	63a2      	str	r2, [r4, #56]	; 0x38
	if (HAL_RS485Ex_Init(&huart6, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8002858:	4619      	mov	r1, r3
 800285a:	461a      	mov	r2, r3
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800285c:	60a3      	str	r3, [r4, #8]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800285e:	6223      	str	r3, [r4, #32]
	huart6.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8002860:	f8c4 c03c 	str.w	ip, [r4, #60]	; 0x3c
	huart6.Init.BaudRate = 9600;
 8002864:	6067      	str	r7, [r4, #4]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8002866:	6165      	str	r5, [r4, #20]
	huart6.Init.Parity = UART_PARITY_NONE;
 8002868:	e9c4 3303 	strd	r3, r3, [r4, #12]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800286c:	e9c4 3306 	strd	r3, r3, [r4, #24]
	if (HAL_RS485Ex_Init(&huart6, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8002870:	f00c fc5e 	bl	800f130 <HAL_RS485Ex_Init>
 8002874:	4603      	mov	r3, r0
 8002876:	2800      	cmp	r0, #0
 8002878:	f040 825d 	bne.w	8002d36 <main+0xbf2>
	hdac.Instance = DAC;
 800287c:	4cb6      	ldr	r4, [pc, #728]	; (8002b58 <main+0xa14>)
 800287e:	4ab7      	ldr	r2, [pc, #732]	; (8002b5c <main+0xa18>)
	if (HAL_DAC_Init(&hdac) != HAL_OK) {
 8002880:	4620      	mov	r0, r4
	DAC_ChannelConfTypeDef sConfig = { 0 };
 8002882:	930b      	str	r3, [sp, #44]	; 0x2c
 8002884:	930c      	str	r3, [sp, #48]	; 0x30
	hdac.Instance = DAC;
 8002886:	6022      	str	r2, [r4, #0]
	if (HAL_DAC_Init(&hdac) != HAL_OK) {
 8002888:	f003 fcfe 	bl	8006288 <HAL_DAC_Init>
 800288c:	4603      	mov	r3, r0
 800288e:	2800      	cmp	r0, #0
 8002890:	f040 8251 	bne.w	8002d36 <main+0xbf2>
	sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 8002894:	f04f 0c14 	mov.w	ip, #20
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8002898:	4620      	mov	r0, r4
 800289a:	461a      	mov	r2, r3
 800289c:	a90b      	add	r1, sp, #44	; 0x2c
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800289e:	930c      	str	r3, [sp, #48]	; 0x30
	sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 80028a0:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 80028a4:	f003 fe24 	bl	80064f0 <HAL_DAC_ConfigChannel>
 80028a8:	4680      	mov	r8, r0
 80028aa:	2800      	cmp	r0, #0
 80028ac:	f040 8243 	bne.w	8002d36 <main+0xbf2>
	hi2c1.Instance = I2C1;
 80028b0:	4cab      	ldr	r4, [pc, #684]	; (8002b60 <main+0xa1c>)
	MX_FATFS_Init();
 80028b2:	f00d fa2f 	bl	800fd14 <MX_FATFS_Init>
	hi2c1.Instance = I2C1;
 80028b6:	4aab      	ldr	r2, [pc, #684]	; (8002b64 <main+0xa20>)
	hi2c1.Init.Timing = 0x20404768;
 80028b8:	4bab      	ldr	r3, [pc, #684]	; (8002b68 <main+0xa24>)
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80028ba:	4620      	mov	r0, r4
	hi2c1.Init.OwnAddress1 = 0;
 80028bc:	f8c4 8008 	str.w	r8, [r4, #8]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028c0:	e9c4 9803 	strd	r9, r8, [r4, #12]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80028c4:	e9c4 8805 	strd	r8, r8, [r4, #20]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028c8:	e9c4 8807 	strd	r8, r8, [r4, #28]
	hi2c1.Init.Timing = 0x20404768;
 80028cc:	e9c4 2300 	strd	r2, r3, [r4]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80028d0:	f006 fa50 	bl	8008d74 <HAL_I2C_Init>
 80028d4:	4601      	mov	r1, r0
 80028d6:	2800      	cmp	r0, #0
 80028d8:	f040 822d 	bne.w	8002d36 <main+0xbf2>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 80028dc:	4620      	mov	r0, r4
 80028de:	f006 fcad 	bl	800923c <HAL_I2CEx_ConfigAnalogFilter>
 80028e2:	4601      	mov	r1, r0
 80028e4:	2800      	cmp	r0, #0
 80028e6:	f040 8226 	bne.w	8002d36 <main+0xbf2>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80028ea:	4620      	mov	r0, r4
 80028ec:	f006 fcf8 	bl	80092e0 <HAL_I2CEx_ConfigDigitalFilter>
 80028f0:	2800      	cmp	r0, #0
 80028f2:	f040 8220 	bne.w	8002d36 <main+0xbf2>
	huart4.Instance = UART4;
 80028f6:	4b9d      	ldr	r3, [pc, #628]	; (8002b6c <main+0xa28>)
	huart4.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80028f8:	f44f 7240 	mov.w	r2, #768	; 0x300
	huart4.Instance = UART4;
 80028fc:	499c      	ldr	r1, [pc, #624]	; (8002b70 <main+0xa2c>)
	huart4.Init.BaudRate = 115200;
 80028fe:	f44f 38e1 	mov.w	r8, #115200	; 0x1c200
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002902:	6258      	str	r0, [r3, #36]	; 0x24
	huart4.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002904:	619a      	str	r2, [r3, #24]
	huart4.Instance = UART4;
 8002906:	6019      	str	r1, [r3, #0]
	huart4.Init.BaudRate = 115200;
 8002908:	f8c3 8004 	str.w	r8, [r3, #4]
	huart4.Init.StopBits = UART_STOPBITS_1;
 800290c:	e9c3 0002 	strd	r0, r0, [r3, #8]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8002910:	e9c3 0504 	strd	r0, r5, [r3, #16]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002914:	e9c3 0007 	strd	r0, r0, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 8002918:	4618      	mov	r0, r3
 800291a:	f00c fb33 	bl	800ef84 <HAL_UART_Init>
 800291e:	4602      	mov	r2, r0
 8002920:	2800      	cmp	r0, #0
 8002922:	f040 8208 	bne.w	8002d36 <main+0xbf2>
	huart5.Instance = UART5;
 8002926:	4b93      	ldr	r3, [pc, #588]	; (8002b74 <main+0xa30>)
 8002928:	4993      	ldr	r1, [pc, #588]	; (8002b78 <main+0xa34>)
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 800292a:	4618      	mov	r0, r3
	huart5.Init.BaudRate = 9600;
 800292c:	605f      	str	r7, [r3, #4]
	huart5.Instance = UART5;
 800292e:	6019      	str	r1, [r3, #0]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8002930:	e9c3 2202 	strd	r2, r2, [r3, #8]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8002934:	e9c3 2504 	strd	r2, r5, [r3, #16]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002938:	e9c3 2206 	strd	r2, r2, [r3, #24]
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800293c:	e9c3 2208 	strd	r2, r2, [r3, #32]
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8002940:	f00c fb20 	bl	800ef84 <HAL_UART_Init>
 8002944:	4603      	mov	r3, r0
 8002946:	2800      	cmp	r0, #0
 8002948:	f040 81f5 	bne.w	8002d36 <main+0xbf2>
	huart7.Instance = UART7;
 800294c:	4c8b      	ldr	r4, [pc, #556]	; (8002b7c <main+0xa38>)
	if (HAL_RS485Ex_Init(&huart7, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 800294e:	461a      	mov	r2, r3
	huart7.Instance = UART7;
 8002950:	4f8b      	ldr	r7, [pc, #556]	; (8002b80 <main+0xa3c>)
	if (HAL_RS485Ex_Init(&huart7, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8002952:	4619      	mov	r1, r3
 8002954:	4620      	mov	r0, r4
	huart7.Init.BaudRate = 115200;
 8002956:	f8c4 8004 	str.w	r8, [r4, #4]
	huart7.Instance = UART7;
 800295a:	6027      	str	r7, [r4, #0]
	huart7.Init.StopBits = UART_STOPBITS_1;
 800295c:	e9c4 3302 	strd	r3, r3, [r4, #8]
	huart7.Init.Mode = UART_MODE_TX_RX;
 8002960:	e9c4 3504 	strd	r3, r5, [r4, #16]
	huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002964:	e9c4 3306 	strd	r3, r3, [r4, #24]
	huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002968:	e9c4 3308 	strd	r3, r3, [r4, #32]
	if (HAL_RS485Ex_Init(&huart7, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 800296c:	f00c fbe0 	bl	800f130 <HAL_RS485Ex_Init>
 8002970:	2800      	cmp	r0, #0
 8002972:	f040 81e0 	bne.w	8002d36 <main+0xbf2>
	huart3.Instance = USART3;
 8002976:	4b83      	ldr	r3, [pc, #524]	; (8002b84 <main+0xa40>)
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002978:	2400      	movs	r4, #0
	huart3.Instance = USART3;
 800297a:	4883      	ldr	r0, [pc, #524]	; (8002b88 <main+0xa44>)
	if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK) {
 800297c:	4622      	mov	r2, r4
 800297e:	4621      	mov	r1, r4
	huart3.Instance = USART3;
 8002980:	6018      	str	r0, [r3, #0]
	if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK) {
 8002982:	4618      	mov	r0, r3
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002984:	609c      	str	r4, [r3, #8]
	huart3.Init.BaudRate = 115200;
 8002986:	f8c3 8004 	str.w	r8, [r3, #4]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800298a:	615d      	str	r5, [r3, #20]
	huart3.Init.Parity = UART_PARITY_NONE;
 800298c:	e9c3 4403 	strd	r4, r4, [r3, #12]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002990:	e9c3 4406 	strd	r4, r4, [r3, #24]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002994:	e9c3 4408 	strd	r4, r4, [r3, #32]
	if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK) {
 8002998:	f00c fb76 	bl	800f088 <HAL_MultiProcessor_Init>
 800299c:	2800      	cmp	r0, #0
 800299e:	f040 81ca 	bne.w	8002d36 <main+0xbf2>
	hspi4.Instance = SPI4;
 80029a2:	4b7a      	ldr	r3, [pc, #488]	; (8002b8c <main+0xa48>)
	hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80029a4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	hspi4.Instance = SPI4;
 80029a8:	4979      	ldr	r1, [pc, #484]	; (8002b90 <main+0xa4c>)
	hspi4.Init.Mode = SPI_MODE_MASTER;
 80029aa:	f44f 7582 	mov.w	r5, #260	; 0x104
	hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 80029ae:	f44f 7940 	mov.w	r9, #768	; 0x300
	hspi4.Init.CRCPolynomial = 7;
 80029b2:	2707      	movs	r7, #7
	hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80029b4:	2408      	movs	r4, #8
	hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80029b6:	6098      	str	r0, [r3, #8]
	hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80029b8:	6318      	str	r0, [r3, #48]	; 0x30
	hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80029ba:	619a      	str	r2, [r3, #24]
	hspi4.Instance = SPI4;
 80029bc:	6019      	str	r1, [r3, #0]
	hspi4.Init.Mode = SPI_MODE_MASTER;
 80029be:	605d      	str	r5, [r3, #4]
	hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 80029c0:	f8c3 900c 	str.w	r9, [r3, #12]
	hspi4.Init.CRCPolynomial = 7;
 80029c4:	62df      	str	r7, [r3, #44]	; 0x2c
	hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80029c6:	635c      	str	r4, [r3, #52]	; 0x34
	hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029c8:	e9c3 0004 	strd	r0, r0, [r3, #16]
	hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029cc:	e9c3 0007 	strd	r0, r0, [r3, #28]
	hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029d0:	e9c3 0009 	strd	r0, r0, [r3, #36]	; 0x24
	if (HAL_SPI_Init(&hspi4) != HAL_OK) {
 80029d4:	4618      	mov	r0, r3
 80029d6:	f008 fd1b 	bl	800b410 <HAL_SPI_Init>
 80029da:	4602      	mov	r2, r0
 80029dc:	2800      	cmp	r0, #0
 80029de:	f040 81aa 	bne.w	8002d36 <main+0xbf2>
	hspi3.Instance = SPI3;
 80029e2:	4b6c      	ldr	r3, [pc, #432]	; (8002b94 <main+0xa50>)
	hspi3.Init.NSS = SPI_NSS_SOFT;
 80029e4:	f44f 7800 	mov.w	r8, #512	; 0x200
	hspi3.Instance = SPI3;
 80029e8:	496b      	ldr	r1, [pc, #428]	; (8002b98 <main+0xa54>)
	hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80029ea:	f8c3 900c 	str.w	r9, [r3, #12]
	hspi3.Instance = SPI3;
 80029ee:	6019      	str	r1, [r3, #0]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 80029f0:	f8c3 8018 	str.w	r8, [r3, #24]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80029f4:	e9c3 0001 	strd	r0, r0, [r3, #4]
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 80029f8:	4618      	mov	r0, r3
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029fa:	e9c3 2204 	strd	r2, r2, [r3, #16]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80029fe:	e9c3 2208 	strd	r2, r2, [r3, #32]
	hspi3.Init.CRCPolynomial = 7;
 8002a02:	e9c3 270a 	strd	r2, r7, [r3, #40]	; 0x28
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002a06:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8002a0a:	f008 fd01 	bl	800b410 <HAL_SPI_Init>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	2800      	cmp	r0, #0
 8002a12:	f040 8190 	bne.w	8002d36 <main+0xbf2>
	hspi2.Instance = SPI2;
 8002a16:	4b61      	ldr	r3, [pc, #388]	; (8002b9c <main+0xa58>)
	hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8002a18:	f44f 6c70 	mov.w	ip, #3840	; 0xf00
	hspi2.Instance = SPI2;
 8002a1c:	f8df e198 	ldr.w	lr, [pc, #408]	; 8002bb8 <main+0xa74>
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002a20:	2138      	movs	r1, #56	; 0x38
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8002a22:	f8c3 8018 	str.w	r8, [r3, #24]
	hspi2.Instance = SPI2;
 8002a26:	f8c3 e000 	str.w	lr, [r3]
	hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8002a2a:	f8c3 c00c 	str.w	ip, [r3, #12]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002a2e:	61d9      	str	r1, [r3, #28]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002a30:	e9c3 5001 	strd	r5, r0, [r3, #4]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a34:	e9c3 0004 	strd	r0, r0, [r3, #16]
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8002a38:	4618      	mov	r0, r3
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a3a:	e9c3 2208 	strd	r2, r2, [r3, #32]
	hspi2.Init.CRCPolynomial = 7;
 8002a3e:	e9c3 270a 	strd	r2, r7, [r3, #40]	; 0x28
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a42:	e9c3 240c 	strd	r2, r4, [r3, #48]	; 0x30
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8002a46:	f008 fce3 	bl	800b410 <HAL_SPI_Init>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2800      	cmp	r0, #0
 8002a4e:	f040 8172 	bne.w	8002d36 <main+0xbf2>
	hi2c4.Instance = I2C4;
 8002a52:	4c53      	ldr	r4, [pc, #332]	; (8002ba0 <main+0xa5c>)
	hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a54:	2501      	movs	r5, #1
	hi2c4.Instance = I2C4;
 8002a56:	4a53      	ldr	r2, [pc, #332]	; (8002ba4 <main+0xa60>)
	hi2c4.Init.Timing = 0x20404768;
 8002a58:	4f43      	ldr	r7, [pc, #268]	; (8002b68 <main+0xa24>)
	if (HAL_I2C_Init(&hi2c4) != HAL_OK) {
 8002a5a:	4620      	mov	r0, r4
	hi2c4.Init.OwnAddress1 = 0;
 8002a5c:	60a3      	str	r3, [r4, #8]
	hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a5e:	6223      	str	r3, [r4, #32]
	hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a60:	60e5      	str	r5, [r4, #12]
	hi2c4.Init.OwnAddress2 = 0;
 8002a62:	e9c4 3304 	strd	r3, r3, [r4, #16]
	hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a66:	e9c4 3306 	strd	r3, r3, [r4, #24]
	hi2c4.Init.Timing = 0x20404768;
 8002a6a:	e9c4 2700 	strd	r2, r7, [r4]
	if (HAL_I2C_Init(&hi2c4) != HAL_OK) {
 8002a6e:	f006 f981 	bl	8008d74 <HAL_I2C_Init>
 8002a72:	4601      	mov	r1, r0
 8002a74:	2800      	cmp	r0, #0
 8002a76:	f040 815e 	bne.w	8002d36 <main+0xbf2>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8002a7a:	4620      	mov	r0, r4
 8002a7c:	f006 fbde 	bl	800923c <HAL_I2CEx_ConfigAnalogFilter>
 8002a80:	4601      	mov	r1, r0
 8002a82:	2800      	cmp	r0, #0
 8002a84:	f040 8157 	bne.w	8002d36 <main+0xbf2>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK) {
 8002a88:	4620      	mov	r0, r4
 8002a8a:	f006 fc29 	bl	80092e0 <HAL_I2CEx_ConfigDigitalFilter>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2800      	cmp	r0, #0
 8002a92:	f040 8150 	bne.w	8002d36 <main+0xbf2>
	hi2c2.Instance = I2C2;
 8002a96:	4c44      	ldr	r4, [pc, #272]	; (8002ba8 <main+0xa64>)
 8002a98:	4a44      	ldr	r2, [pc, #272]	; (8002bac <main+0xa68>)
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8002a9a:	4620      	mov	r0, r4
	hi2c2.Init.Timing = 0x20404768;
 8002a9c:	6067      	str	r7, [r4, #4]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a9e:	6223      	str	r3, [r4, #32]
	hi2c2.Instance = I2C2;
 8002aa0:	6022      	str	r2, [r4, #0]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002aa2:	e9c4 3502 	strd	r3, r5, [r4, #8]
	hi2c2.Init.OwnAddress2 = 0;
 8002aa6:	e9c4 3304 	strd	r3, r3, [r4, #16]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002aaa:	e9c4 3306 	strd	r3, r3, [r4, #24]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8002aae:	f006 f961 	bl	8008d74 <HAL_I2C_Init>
 8002ab2:	4601      	mov	r1, r0
 8002ab4:	2800      	cmp	r0, #0
 8002ab6:	f040 813e 	bne.w	8002d36 <main+0xbf2>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8002aba:	4620      	mov	r0, r4
 8002abc:	f006 fbbe 	bl	800923c <HAL_I2CEx_ConfigAnalogFilter>
 8002ac0:	4601      	mov	r1, r0
 8002ac2:	2800      	cmp	r0, #0
 8002ac4:	f040 8137 	bne.w	8002d36 <main+0xbf2>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8002ac8:	4620      	mov	r0, r4
 8002aca:	f006 fc09 	bl	80092e0 <HAL_I2CEx_ConfigDigitalFilter>
 8002ace:	2800      	cmp	r0, #0
 8002ad0:	f040 8131 	bne.w	8002d36 <main+0xbf2>
	htim4.Instance = TIM4;
 8002ad4:	4c36      	ldr	r4, [pc, #216]	; (8002bb0 <main+0xa6c>)
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002ad6:	2300      	movs	r3, #0
	htim4.Init.Period = 1100;
 8002ad8:	f240 424c 	movw	r2, #1100	; 0x44c
	htim4.Instance = TIM4;
 8002adc:	4935      	ldr	r1, [pc, #212]	; (8002bb4 <main+0xa70>)
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ade:	2780      	movs	r7, #128	; 0x80
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8002ae0:	4620      	mov	r0, r4
	htim4.Instance = TIM4;
 8002ae2:	6021      	str	r1, [r4, #0]
	htim4.Init.Period = 1100;
 8002ae4:	60e2      	str	r2, [r4, #12]
	htim4.Init.Prescaler = 0;
 8002ae6:	6063      	str	r3, [r4, #4]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002ae8:	9329      	str	r3, [sp, #164]	; 0xa4
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002aea:	934e      	str	r3, [sp, #312]	; 0x138
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aec:	60a3      	str	r3, [r4, #8]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aee:	6123      	str	r3, [r4, #16]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002af0:	932c      	str	r3, [sp, #176]	; 0xb0
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002af2:	9312      	str	r3, [sp, #72]	; 0x48
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002af4:	934f      	str	r3, [sp, #316]	; 0x13c
 8002af6:	9350      	str	r3, [sp, #320]	; 0x140
 8002af8:	9351      	str	r3, [sp, #324]	; 0x144
 8002afa:	9352      	str	r3, [sp, #328]	; 0x148
 8002afc:	9353      	str	r3, [sp, #332]	; 0x14c
 8002afe:	9354      	str	r3, [sp, #336]	; 0x150
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b00:	61a7      	str	r7, [r4, #24]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002b02:	e9cd 332a 	strd	r3, r3, [sp, #168]	; 0xa8
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002b06:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8002b0a:	f00a f817 	bl	800cb3c <HAL_TIM_Base_Init>
 8002b0e:	2800      	cmp	r0, #0
 8002b10:	f040 8111 	bne.w	8002d36 <main+0xbf2>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b14:	f44f 5880 	mov.w	r8, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8002b18:	a929      	add	r1, sp, #164	; 0xa4
 8002b1a:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b1c:	f8cd 80a4 	str.w	r8, [sp, #164]	; 0xa4
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8002b20:	f009 fb1e 	bl	800c160 <HAL_TIM_ConfigClockSource>
 8002b24:	2800      	cmp	r0, #0
 8002b26:	f040 8106 	bne.w	8002d36 <main+0xbf2>
	if (HAL_TIM_OC_Init(&htim4) != HAL_OK) {
 8002b2a:	4620      	mov	r0, r4
 8002b2c:	f00a f8c4 	bl	800ccb8 <HAL_TIM_OC_Init>
 8002b30:	2800      	cmp	r0, #0
 8002b32:	f040 8100 	bne.w	8002d36 <main+0xbf2>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 8002b36:	2530      	movs	r5, #48	; 0x30
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b38:	9012      	str	r0, [sp, #72]	; 0x48
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 8002b3a:	a910      	add	r1, sp, #64	; 0x40
 8002b3c:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 8002b3e:	9510      	str	r5, [sp, #64]	; 0x40
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 8002b40:	f00b faca 	bl	800e0d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2800      	cmp	r0, #0
 8002b48:	f040 80f5 	bne.w	8002d36 <main+0xbf2>
 8002b4c:	e036      	b.n	8002bbc <main+0xa78>
 8002b4e:	bf00      	nop
 8002b50:	2002b048 	.word	0x2002b048
 8002b54:	40011400 	.word	0x40011400
 8002b58:	2002aed4 	.word	0x2002aed4
 8002b5c:	40007400 	.word	0x40007400
 8002b60:	2002ab38 	.word	0x2002ab38
 8002b64:	40005400 	.word	0x40005400
 8002b68:	20404768 	.word	0x20404768
 8002b6c:	2002b0c8 	.word	0x2002b0c8
 8002b70:	40004c00 	.word	0x40004c00
 8002b74:	2002adb4 	.word	0x2002adb4
 8002b78:	40005000 	.word	0x40005000
 8002b7c:	2002a9b0 	.word	0x2002a9b0
 8002b80:	40007800 	.word	0x40007800
 8002b84:	2002aa70 	.word	0x2002aa70
 8002b88:	40004800 	.word	0x40004800
 8002b8c:	2002aeec 	.word	0x2002aeec
 8002b90:	40013400 	.word	0x40013400
 8002b94:	2002acf0 	.word	0x2002acf0
 8002b98:	40003c00 	.word	0x40003c00
 8002b9c:	2002a94c 	.word	0x2002a94c
 8002ba0:	2002a8a0 	.word	0x2002a8a0
 8002ba4:	40006000 	.word	0x40006000
 8002ba8:	2002abbc 	.word	0x2002abbc
 8002bac:	40005800 	.word	0x40005800
 8002bb0:	2002aa30 	.word	0x2002aa30
 8002bb4:	40000800 	.word	0x40000800
 8002bb8:	40003800 	.word	0x40003800
	sConfigOC.Pulse = 550;
 8002bbc:	f240 2c26 	movw	ip, #550	; 0x226
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bc0:	9050      	str	r0, [sp, #320]	; 0x140
	if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8002bc2:	2208      	movs	r2, #8
 8002bc4:	a94e      	add	r1, sp, #312	; 0x138
 8002bc6:	4620      	mov	r0, r4
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8002bc8:	954e      	str	r5, [sp, #312]	; 0x138
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bca:	9352      	str	r3, [sp, #328]	; 0x148
	sConfigOC.Pulse = 550;
 8002bcc:	f8cd c13c 	str.w	ip, [sp, #316]	; 0x13c
	if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8002bd0:	f00a fb12 	bl	800d1f8 <HAL_TIM_OC_ConfigChannel>
 8002bd4:	4605      	mov	r5, r0
 8002bd6:	2800      	cmp	r0, #0
 8002bd8:	f040 80ad 	bne.w	8002d36 <main+0xbf2>
	HAL_TIM_MspPostInit(&htim4);
 8002bdc:	4620      	mov	r0, r4
 8002bde:	f001 fc1b 	bl	8004418 <HAL_TIM_MspPostInit>
	htim14.Instance = TIM14;
 8002be2:	4b56      	ldr	r3, [pc, #344]	; (8002d3c <main+0xbf8>)
 8002be4:	4956      	ldr	r1, [pc, #344]	; (8002d40 <main+0xbfc>)
	htim14.Init.Period = 10800;
 8002be6:	f642 2230 	movw	r2, #10800	; 0x2a30
	if (HAL_TIM_Base_Init(&htim14) != HAL_OK) {
 8002bea:	4618      	mov	r0, r3
	htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bec:	611d      	str	r5, [r3, #16]
	htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002bee:	619f      	str	r7, [r3, #24]
	htim14.Instance = TIM14;
 8002bf0:	6019      	str	r1, [r3, #0]
	htim14.Init.Period = 10800;
 8002bf2:	60da      	str	r2, [r3, #12]
	htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bf4:	e9c3 5501 	strd	r5, r5, [r3, #4]
	if (HAL_TIM_Base_Init(&htim14) != HAL_OK) {
 8002bf8:	f009 ffa0 	bl	800cb3c <HAL_TIM_Base_Init>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2800      	cmp	r0, #0
 8002c00:	f040 8099 	bne.w	8002d36 <main+0xbf2>
	htim5.Instance = TIM5;
 8002c04:	4c4f      	ldr	r4, [pc, #316]	; (8002d44 <main+0xc00>)
	htim5.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002c06:	2110      	movs	r1, #16
	htim5.Init.Period = 4;
 8002c08:	2204      	movs	r2, #4
	htim5.Instance = TIM5;
 8002c0a:	4f4f      	ldr	r7, [pc, #316]	; (8002d48 <main+0xc04>)
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002c0c:	9025      	str	r0, [sp, #148]	; 0x94
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8002c0e:	4620      	mov	r0, r4
	htim5.Init.Prescaler = 0;
 8002c10:	6063      	str	r3, [r4, #4]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c12:	6123      	str	r3, [r4, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c14:	61a3      	str	r3, [r4, #24]
	htim5.Instance = TIM5;
 8002c16:	6027      	str	r7, [r4, #0]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002c18:	9328      	str	r3, [sp, #160]	; 0xa0
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002c1a:	930f      	str	r3, [sp, #60]	; 0x3c
	htim5.Init.Period = 4;
 8002c1c:	e9c4 1202 	strd	r1, r2, [r4, #8]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002c20:	e9cd 3326 	strd	r3, r3, [sp, #152]	; 0x98
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002c24:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8002c28:	f009 ff88 	bl	800cb3c <HAL_TIM_Base_Init>
 8002c2c:	2800      	cmp	r0, #0
 8002c2e:	f040 8082 	bne.w	8002d36 <main+0xbf2>
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8002c32:	a925      	add	r1, sp, #148	; 0x94
 8002c34:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c36:	f8cd 8094 	str.w	r8, [sp, #148]	; 0x94
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8002c3a:	f009 fa91 	bl	800c160 <HAL_TIM_ConfigClockSource>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2800      	cmp	r0, #0
 8002c42:	d178      	bne.n	8002d36 <main+0xbf2>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK) {
 8002c44:	4620      	mov	r0, r4
 8002c46:	a90d      	add	r1, sp, #52	; 0x34
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c48:	930d      	str	r3, [sp, #52]	; 0x34
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c4a:	930f      	str	r3, [sp, #60]	; 0x3c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK) {
 8002c4c:	f00b fa44 	bl	800e0d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002c50:	4605      	mov	r5, r0
 8002c52:	2800      	cmp	r0, #0
 8002c54:	d16f      	bne.n	8002d36 <main+0xbf2>
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 8002c56:	683b      	ldr	r3, [r7, #0]
	HAL_NVIC_SetPriority(USART2_IRQn, 7, 0);
 8002c58:	4602      	mov	r2, r0
 8002c5a:	2107      	movs	r1, #7
 8002c5c:	2026      	movs	r0, #38	; 0x26
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 8002c5e:	f043 0308 	orr.w	r3, r3, #8
	ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 8002c62:	4c3a      	ldr	r4, [pc, #232]	; (8002d4c <main+0xc08>)
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 8002c64:	603b      	str	r3, [r7, #0]
	HAL_NVIC_SetPriority(USART2_IRQn, 7, 0);
 8002c66:	f003 f9d9 	bl	800601c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002c6a:	2026      	movs	r0, #38	; 0x26
 8002c6c:	f003 fa1c 	bl	80060a8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART6_IRQn, 6, 0);
 8002c70:	462a      	mov	r2, r5
 8002c72:	2106      	movs	r1, #6
 8002c74:	2047      	movs	r0, #71	; 0x47
 8002c76:	f003 f9d1 	bl	800601c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002c7a:	2047      	movs	r0, #71	; 0x47
 8002c7c:	f003 fa14 	bl	80060a8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(ADC_IRQn, 6, 0);
 8002c80:	462a      	mov	r2, r5
 8002c82:	2106      	movs	r1, #6
 8002c84:	2012      	movs	r0, #18
 8002c86:	f003 f9c9 	bl	800601c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002c8a:	2012      	movs	r0, #18
 8002c8c:	f003 fa0c 	bl	80060a8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 8002c90:	462a      	mov	r2, r5
 8002c92:	2106      	movs	r1, #6
 8002c94:	2028      	movs	r0, #40	; 0x28
 8002c96:	f003 f9c1 	bl	800601c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002c9a:	2028      	movs	r0, #40	; 0x28
 8002c9c:	f003 fa04 	bl	80060a8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 1, 0);
 8002ca0:	462a      	mov	r2, r5
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	202d      	movs	r0, #45	; 0x2d
 8002ca6:	f003 f9b9 	bl	800601c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002caa:	202d      	movs	r0, #45	; 0x2d
 8002cac:	f003 f9fc 	bl	80060a8 <HAL_NVIC_EnableIRQ>
	myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8002cb0:	a83d      	add	r0, sp, #244	; 0xf4
	osMutexDef(myMutex01);
 8002cb2:	e9cd 553d 	strd	r5, r5, [sp, #244]	; 0xf4
	myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8002cb6:	f00e fa35 	bl	8011124 <osMutexCreate>
 8002cba:	4b25      	ldr	r3, [pc, #148]	; (8002d50 <main+0xc0c>)
	ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 8002cbc:	2101      	movs	r1, #1
	osSemaphoreDef(ssicontent);
 8002cbe:	9541      	str	r5, [sp, #260]	; 0x104
	myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8002cc0:	6018      	str	r0, [r3, #0]
	ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 8002cc2:	a841      	add	r0, sp, #260	; 0x104
	osSemaphoreDef(ssicontent);
 8002cc4:	9542      	str	r5, [sp, #264]	; 0x108
	ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 8002cc6:	f00e fa89 	bl	80111dc <osSemaphoreCreate>
	osTimerDef(myTimer01, Callback01);
 8002cca:	4b22      	ldr	r3, [pc, #136]	; (8002d54 <main+0xc10>)
	myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8002ccc:	462a      	mov	r2, r5
	ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 8002cce:	6020      	str	r0, [r4, #0]
	myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	a845      	add	r0, sp, #276	; 0x114
	osMessageQDef(myQueue01, 256, uint16_t);
 8002cd4:	4c20      	ldr	r4, [pc, #128]	; (8002d58 <main+0xc14>)
	osTimerDef(myTimer01, Callback01);
 8002cd6:	9345      	str	r3, [sp, #276]	; 0x114
 8002cd8:	9546      	str	r5, [sp, #280]	; 0x118
	myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8002cda:	f00e fa05 	bl	80110e8 <osTimerCreate>
 8002cde:	4b1f      	ldr	r3, [pc, #124]	; (8002d5c <main+0xc18>)
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 8002ce0:	f104 0710 	add.w	r7, r4, #16
	myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8002ce4:	6018      	str	r0, [r3, #0]
	osMessageQDef(myQueue01, 256, uint16_t);
 8002ce6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002cea:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8002cee:	4630      	mov	r0, r6
 8002cf0:	4629      	mov	r1, r5
 8002cf2:	f00e facb 	bl	801128c <osMessageCreate>
 8002cf6:	4b1a      	ldr	r3, [pc, #104]	; (8002d60 <main+0xc1c>)
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 8002cf8:	ae4e      	add	r6, sp, #312	; 0x138
	osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 2048);
 8002cfa:	342c      	adds	r4, #44	; 0x2c
	myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8002cfc:	6018      	str	r0, [r3, #0]
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 8002cfe:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8002d00:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002d02:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8002d06:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002d0a:	4629      	mov	r1, r5
 8002d0c:	a84e      	add	r0, sp, #312	; 0x138
 8002d0e:	f00e f9b9 	bl	8011084 <osThreadCreate>
 8002d12:	4b14      	ldr	r3, [pc, #80]	; (8002d64 <main+0xc20>)
	osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 2048);
 8002d14:	ae55      	add	r6, sp, #340	; 0x154
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002d16:	6018      	str	r0, [r3, #0]
	osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 2048);
 8002d18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d1a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002d1c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002d20:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	LPTaskHandle = osThreadCreate(osThread(LPTask), NULL);
 8002d24:	4629      	mov	r1, r5
 8002d26:	a855      	add	r0, sp, #340	; 0x154
 8002d28:	f00e f9ac 	bl	8011084 <osThreadCreate>
 8002d2c:	4b0e      	ldr	r3, [pc, #56]	; (8002d68 <main+0xc24>)
 8002d2e:	6018      	str	r0, [r3, #0]
	osKernelStart();
 8002d30:	f00e f99a 	bl	8011068 <osKernelStart>
 8002d34:	e7fe      	b.n	8002d34 <main+0xbf0>
		Error_Handler();
 8002d36:	f7ff f985 	bl	8002044 <Error_Handler>
 8002d3a:	bf00      	nop
 8002d3c:	2002b26c 	.word	0x2002b26c
 8002d40:	40002000 	.word	0x40002000
 8002d44:	2002ac10 	.word	0x2002ac10
 8002d48:	40000c00 	.word	0x40000c00
 8002d4c:	2002afb0 	.word	0x2002afb0
 8002d50:	2002b2ec 	.word	0x2002b2ec
 8002d54:	08001759 	.word	0x08001759
 8002d58:	08024958 	.word	0x08024958
 8002d5c:	2002b034 	.word	0x2002b034
 8002d60:	2002b148 	.word	0x2002b148
 8002d64:	2002a89c 	.word	0x2002a89c
 8002d68:	2002ab84 	.word	0x2002ab84

08002d6c <StartDefaultTask>:
void StartDefaultTask(void const *argument) {
 8002d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d6e:	b085      	sub	sp, #20
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, Build=%d\n", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2],
 8002d70:	f242 7618 	movw	r6, #10008	; 0x2718
	MX_USB_DEVICE_Init();
 8002d74:	f01c fb90 	bl	801f498 <MX_USB_DEVICE_Init>
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, Build=%d\n", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2],
 8002d78:	250b      	movs	r5, #11
	MX_LWIP_Init();
 8002d7a:	f00c ffef 	bl	800fd5c <MX_LWIP_Init>
	printf("\n\n-------------------------------------------------------------------\n");
 8002d7e:	487d      	ldr	r0, [pc, #500]	; (8002f74 <StartDefaultTask+0x208>)
 8002d80:	f01d ffa2 	bl	8020cc8 <puts>
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, Build=%d\n", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2],
 8002d84:	2400      	movs	r4, #0
 8002d86:	4b7c      	ldr	r3, [pc, #496]	; (8002f78 <StartDefaultTask+0x20c>)
 8002d88:	4a7c      	ldr	r2, [pc, #496]	; (8002f7c <StartDefaultTask+0x210>)
 8002d8a:	497d      	ldr	r1, [pc, #500]	; (8002f80 <StartDefaultTask+0x214>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	6812      	ldr	r2, [r2, #0]
 8002d90:	6809      	ldr	r1, [r1, #0]
 8002d92:	487c      	ldr	r0, [pc, #496]	; (8002f84 <StartDefaultTask+0x218>)
 8002d94:	9400      	str	r4, [sp, #0]
 8002d96:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8002d9a:	f01d ff0d 	bl	8020bb8 <iprintf>
	if (!(netif_is_link_up(&gnetif))) {
 8002d9e:	4b7a      	ldr	r3, [pc, #488]	; (8002f88 <StartDefaultTask+0x21c>)
 8002da0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002da4:	075b      	lsls	r3, r3, #29
 8002da6:	d41d      	bmi.n	8002de4 <StartDefaultTask+0x78>
		printf("LAN interface appears disconnected\n\r");
 8002da8:	4878      	ldr	r0, [pc, #480]	; (8002f8c <StartDefaultTask+0x220>)
 8002daa:	2432      	movs	r4, #50	; 0x32
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 8002dac:	4d78      	ldr	r5, [pc, #480]	; (8002f90 <StartDefaultTask+0x224>)
		printf("LAN interface appears disconnected\n\r");
 8002dae:	f01d ff03 	bl	8020bb8 <iprintf>
			osDelay(50);
 8002db2:	2032      	movs	r0, #50	; 0x32
 8002db4:	f00e f990 	bl	80110d8 <osDelay>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 8002db8:	2201      	movs	r2, #1
 8002dba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002dbe:	4628      	mov	r0, r5
 8002dc0:	f005 fe40 	bl	8008a44 <HAL_GPIO_WritePin>
			osDelay(50);
 8002dc4:	2032      	movs	r0, #50	; 0x32
 8002dc6:	f00e f987 	bl	80110d8 <osDelay>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_RESET);	// Splat D5 led off
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002dd0:	4628      	mov	r0, r5
 8002dd2:	f005 fe37 	bl	8008a44 <HAL_GPIO_WritePin>
		for (i = 0; i < 50; i++) {
 8002dd6:	3c01      	subs	r4, #1
 8002dd8:	d1eb      	bne.n	8002db2 <StartDefaultTask+0x46>
		printf("************* REBOOTING **************\n");
 8002dda:	486e      	ldr	r0, [pc, #440]	; (8002f94 <StartDefaultTask+0x228>)
 8002ddc:	f01d ff74 	bl	8020cc8 <puts>
		rebootme();
 8002de0:	f7ff f848 	bl	8001e74 <rebootme>
	netif = netif_default;
 8002de4:	4b6c      	ldr	r3, [pc, #432]	; (8002f98 <StartDefaultTask+0x22c>)
	globalfreeze = 0;		// Allow UDP streaming
 8002de6:	4a6d      	ldr	r2, [pc, #436]	; (8002f9c <StartDefaultTask+0x230>)
	netif = netif_default;
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4f6d      	ldr	r7, [pc, #436]	; (8002fa0 <StartDefaultTask+0x234>)
	netif_set_link_callback(netif, netif_link_callbk_fn);
 8002dec:	4618      	mov	r0, r3
 8002dee:	496d      	ldr	r1, [pc, #436]	; (8002fa4 <StartDefaultTask+0x238>)
	netif = netif_default;
 8002df0:	603b      	str	r3, [r7, #0]
	globalfreeze = 0;		// Allow UDP streaming
 8002df2:	6014      	str	r4, [r2, #0]
	netif_set_link_callback(netif, netif_link_callbk_fn);
 8002df4:	f013 fc9e 	bl	8016734 <netif_set_link_callback>
	netif_set_status_callback(netif, netif_status_callbk_fn);
 8002df8:	6838      	ldr	r0, [r7, #0]
 8002dfa:	496b      	ldr	r1, [pc, #428]	; (8002fa8 <StartDefaultTask+0x23c>)
 8002dfc:	f013 fc56 	bl	80166ac <netif_set_status_callback>
	statuspkt.uid = BUILDNO;		// 16 bits
 8002e00:	4b6a      	ldr	r3, [pc, #424]	; (8002fac <StartDefaultTask+0x240>)
	statuspkt.adctrigoff = TRIG_THRES;
 8002e02:	2264      	movs	r2, #100	; 0x64
	t2cap[0] = 44444444;
 8002e04:	496a      	ldr	r1, [pc, #424]	; (8002fb0 <StartDefaultTask+0x244>)
	statuspkt.uid = BUILDNO;		// 16 bits
 8002e06:	f8a3 605c 	strh.w	r6, [r3, #92]	; 0x5c
	statuspkt.majorversion = MAJORVERSION;
 8002e0a:	f883 4070 	strb.w	r4, [r3, #112]	; 0x70
	statuspkt.minorversion = MINORVERSION;
 8002e0e:	f883 5071 	strb.w	r5, [r3, #113]	; 0x71
	statuspkt.udppknum = 0;
 8002e12:	601c      	str	r4, [r3, #0]
	statuspkt.sysuptime = 0;
 8002e14:	665c      	str	r4, [r3, #100]	; 0x64
	statuspkt.netuptime = 0;
 8002e16:	669c      	str	r4, [r3, #104]	; 0x68
	statuspkt.gpsuptime = 0;
 8002e18:	66dc      	str	r4, [r3, #108]	; 0x6c
	statuspkt.adcpktssent = 0;
 8002e1a:	f8a3 405e 	strh.w	r4, [r3, #94]	; 0x5e
	statuspkt.adctrigoff = TRIG_THRES;
 8002e1e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	statuspkt.adcudpover = 0;		// debug use count overruns
 8002e22:	679c      	str	r4, [r3, #120]	; 0x78
	statuspkt.trigcount = 0;		// debug use adc trigger count
 8002e24:	67dc      	str	r4, [r3, #124]	; 0x7c
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
 8002e26:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
	statuspkt.bconf = 0;
 8002e2a:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
	statuspkt.bconf |= 0x01;	// splat board version 1
 8002e2e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
	t2cap[0] = 44444444;
 8002e32:	4860      	ldr	r0, [pc, #384]	; (8002fb4 <StartDefaultTask+0x248>)
	statuspkt.bconf |= 0x01;	// splat board version 1
 8002e34:	f042 0201 	orr.w	r2, r2, #1
	t2cap[0] = 44444444;
 8002e38:	6008      	str	r0, [r1, #0]
	statuspkt.bconf |= 0x01;	// splat board version 1
 8002e3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	stat = setupneo();
 8002e3e:	f000 fa0d 	bl	800325c <setupneo>
	if (stat != HAL_OK) {
 8002e42:	2800      	cmp	r0, #0
 8002e44:	f040 8092 	bne.w	8002f6c <StartDefaultTask+0x200>
	initsplat();
 8002e48:	f000 fe98 	bl	8003b7c <initsplat>
	printf("Setting up timers\n");
 8002e4c:	485a      	ldr	r0, [pc, #360]	; (8002fb8 <StartDefaultTask+0x24c>)
 8002e4e:	f01d ff3b 	bl	8020cc8 <puts>
	if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {	// give the ssi generation semaphore
 8002e52:	2300      	movs	r3, #0
 8002e54:	4a59      	ldr	r2, [pc, #356]	; (8002fbc <StartDefaultTask+0x250>)
 8002e56:	4619      	mov	r1, r3
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);		// precision uS timer
 8002e58:	4c59      	ldr	r4, [pc, #356]	; (8002fc0 <StartDefaultTask+0x254>)
	if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {	// give the ssi generation semaphore
 8002e5a:	6810      	ldr	r0, [r2, #0]
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	f00e fc51 	bl	8011704 <xQueueGenericSend>
	HAL_TIM_Base_Start_IT(&htim6);		// basic packet timestamp 32 bits
 8002e62:	4858      	ldr	r0, [pc, #352]	; (8002fc4 <StartDefaultTask+0x258>)
 8002e64:	f009 f8f6 	bl	800c054 <HAL_TIM_Base_Start_IT>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);		// precision uS timer
 8002e68:	2200      	movs	r2, #0
 8002e6a:	6820      	ldr	r0, [r4, #0]
 8002e6c:	4611      	mov	r1, r2
 8002e6e:	f00a fedd 	bl	800dc2c <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);		// precision uS timer
 8002e72:	6820      	ldr	r0, [r4, #0]
 8002e74:	2200      	movs	r2, #0
 8002e76:	2104      	movs	r1, #4
 8002e78:	f00a fed8 	bl	800dc2c <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_4, TIM_CCx_DISABLE);		// precision uS timer
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	6820      	ldr	r0, [r4, #0]
 8002e80:	210c      	movs	r1, #12
 8002e82:	f00a fed3 	bl	800dc2c <TIM_CCxChannelCmd>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);		// precision uS timer
 8002e86:	2100      	movs	r1, #0
 8002e88:	4620      	mov	r0, r4
 8002e8a:	f00b f857 	bl	800df3c <HAL_TIM_IC_Stop_DMA>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_2);		// precision uS timer
 8002e8e:	2104      	movs	r1, #4
 8002e90:	4620      	mov	r0, r4
 8002e92:	f00b f853 	bl	800df3c <HAL_TIM_IC_Stop_DMA>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_4);		// precision uS timer
 8002e96:	210c      	movs	r1, #12
 8002e98:	4620      	mov	r0, r4
 8002e9a:	f00b f84f 	bl	800df3c <HAL_TIM_IC_Stop_DMA>
	if ((err = HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_3, t2cap, (sizeof(t2cap) / 4))) != HAL_OK) {
 8002e9e:	4620      	mov	r0, r4
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	4a43      	ldr	r2, [pc, #268]	; (8002fb0 <StartDefaultTask+0x244>)
 8002ea4:	2108      	movs	r1, #8
 8002ea6:	f00a ff1f 	bl	800dce8 <HAL_TIM_IC_Start_DMA>
 8002eaa:	4605      	mov	r5, r0
 8002eac:	2800      	cmp	r0, #0
 8002eae:	d157      	bne.n	8002f60 <StartDefaultTask+0x1f4>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);	// capture precision timer
 8002eb0:	6820      	ldr	r0, [r4, #0]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	2108      	movs	r1, #8
	myip = ip.addr;
 8002eb6:	4c44      	ldr	r4, [pc, #272]	; (8002fc8 <StartDefaultTask+0x25c>)
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);	// capture precision timer
 8002eb8:	f00a feb8 	bl	800dc2c <TIM_CCxChannelCmd>
	dhcp = netif_dhcp_data(netif);		// do not call this too early
 8002ebc:	683b      	ldr	r3, [r7, #0]
	printf("*****************************************\n");
 8002ebe:	4843      	ldr	r0, [pc, #268]	; (8002fcc <StartDefaultTask+0x260>)
	ip = dhcp->offered_ip_addr;
 8002ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	uip = locateudp();
 8002ec2:	4e43      	ldr	r6, [pc, #268]	; (8002fd0 <StartDefaultTask+0x264>)
	myip = ip.addr;
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	6023      	str	r3, [r4, #0]
	printf("*****************************************\n");
 8002ec8:	f01d fefe 	bl	8020cc8 <puts>
	printf("This unit's IP address is %d:%d:%d:%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 8002ecc:	6821      	ldr	r1, [r4, #0]
 8002ece:	4841      	ldr	r0, [pc, #260]	; (8002fd4 <StartDefaultTask+0x268>)
 8002ed0:	0e0a      	lsrs	r2, r1, #24
 8002ed2:	f3c1 4307 	ubfx	r3, r1, #16, #8
	while (lptask_init_done == 0)
 8002ed6:	4c40      	ldr	r4, [pc, #256]	; (8002fd8 <StartDefaultTask+0x26c>)
	printf("This unit's IP address is %d:%d:%d:%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 8002ed8:	9200      	str	r2, [sp, #0]
 8002eda:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8002ede:	b2c9      	uxtb	r1, r1
 8002ee0:	f01d fe6a 	bl	8020bb8 <iprintf>
	printf("*****************************************\n");
 8002ee4:	4839      	ldr	r0, [pc, #228]	; (8002fcc <StartDefaultTask+0x260>)
 8002ee6:	f01d feef 	bl	8020cc8 <puts>
	initialapisn();	// get initial s/n and UDP target; reboots if fails
 8002eea:	f002 fbb1 	bl	8005650 <initialapisn>
	osDelay(1000);
 8002eee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ef2:	f00e f8f1 	bl	80110d8 <osDelay>
	printf("Starting httpd web server\n");
 8002ef6:	4839      	ldr	r0, [pc, #228]	; (8002fdc <StartDefaultTask+0x270>)
 8002ef8:	f01d fee6 	bl	8020cc8 <puts>
	httpd_init();		// start the www server
 8002efc:	f011 fe16 	bl	8014b2c <httpd_init>
	init_httpd_ssi();	// set up the embedded tag handler
 8002f00:	f002 fb52 	bl	80055a8 <init_httpd_ssi>
	printf("Warming up the sonic phaser\n");
 8002f04:	4836      	ldr	r0, [pc, #216]	; (8002fe0 <StartDefaultTask+0x274>)
 8002f06:	f01d fedf 	bl	8020cc8 <puts>
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, phaser_wav, sizeof(phaser_wav),
 8002f0a:	2208      	movs	r2, #8
 8002f0c:	4629      	mov	r1, r5
 8002f0e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002f12:	9200      	str	r2, [sp, #0]
 8002f14:	4833      	ldr	r0, [pc, #204]	; (8002fe4 <StartDefaultTask+0x278>)
 8002f16:	4a34      	ldr	r2, [pc, #208]	; (8002fe8 <StartDefaultTask+0x27c>)
 8002f18:	f003 f9da 	bl	80062d0 <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(&htim7);		// fast interval DAC timer sample rate
 8002f1c:	4833      	ldr	r0, [pc, #204]	; (8002fec <StartDefaultTask+0x280>)
 8002f1e:	f009 f817 	bl	800bf50 <HAL_TIM_Base_Start>
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 8002f22:	f00f fcab 	bl	801287c <xTaskGetCurrentTaskHandle>
 8002f26:	4b32      	ldr	r3, [pc, #200]	; (8002ff0 <StartDefaultTask+0x284>)
 8002f28:	6018      	str	r0, [r3, #0]
	uip = locateudp();
 8002f2a:	f001 ff91 	bl	8004e50 <locateudp>
	main_init_done = 1; // let lptask now main has initialised
 8002f2e:	4b31      	ldr	r3, [pc, #196]	; (8002ff4 <StartDefaultTask+0x288>)
 8002f30:	2201      	movs	r2, #1
	uip = locateudp();
 8002f32:	6030      	str	r0, [r6, #0]
	printf("Waiting for lptask to start\n");
 8002f34:	4830      	ldr	r0, [pc, #192]	; (8002ff8 <StartDefaultTask+0x28c>)
	main_init_done = 1; // let lptask now main has initialised
 8002f36:	601a      	str	r2, [r3, #0]
	printf("Waiting for lptask to start\n");
 8002f38:	f01d fec6 	bl	8020cc8 <puts>
	while (lptask_init_done == 0)
 8002f3c:	6823      	ldr	r3, [r4, #0]
 8002f3e:	b92b      	cbnz	r3, 8002f4c <StartDefaultTask+0x1e0>
		osDelay(100); // hold off starting udp railgun until LPtask has initalised
 8002f40:	2064      	movs	r0, #100	; 0x64
 8002f42:	f00e f8c9 	bl	80110d8 <osDelay>
	while (lptask_init_done == 0)
 8002f46:	6823      	ldr	r3, [r4, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0f9      	beq.n	8002f40 <StartDefaultTask+0x1d4>
	startadc();		// start the ADC DMA loop
 8002f4c:	f7fd fdb8 	bl	8000ac0 <startadc>
		startudp(uip);		// should never return
 8002f50:	6830      	ldr	r0, [r6, #0]
 8002f52:	f001 ffb1 	bl	8004eb8 <startudp>
		printf("UDP stream exited!!!\n\r");
 8002f56:	4829      	ldr	r0, [pc, #164]	; (8002ffc <StartDefaultTask+0x290>)
 8002f58:	f01d fe2e 	bl	8020bb8 <iprintf>
		rebootme();
 8002f5c:	f7fe ff8a 	bl	8001e74 <rebootme>
		printf("TIM_Base_Start_DMA err %i", err);
 8002f60:	4601      	mov	r1, r0
 8002f62:	4827      	ldr	r0, [pc, #156]	; (8003000 <StartDefaultTask+0x294>)
 8002f64:	f01d fe28 	bl	8020bb8 <iprintf>
		Error_Handler();
 8002f68:	f7ff f86c 	bl	8002044 <Error_Handler>
		printf("Neo7 setup returned HAL error\n\r");	// but don't reboot
 8002f6c:	4825      	ldr	r0, [pc, #148]	; (8003004 <StartDefaultTask+0x298>)
 8002f6e:	f01d fe23 	bl	8020bb8 <iprintf>
 8002f72:	e769      	b.n	8002e48 <StartDefaultTask+0xdc>
 8002f74:	08025394 	.word	0x08025394
 8002f78:	1ff0f428 	.word	0x1ff0f428
 8002f7c:	1ff0f424 	.word	0x1ff0f424
 8002f80:	1ff0f420 	.word	0x1ff0f420
 8002f84:	080253dc 	.word	0x080253dc
 8002f88:	2002b960 	.word	0x2002b960
 8002f8c:	08025414 	.word	0x08025414
 8002f90:	40020c00 	.word	0x40020c00
 8002f94:	0802543c 	.word	0x0802543c
 8002f98:	2003e1c4 	.word	0x2003e1c4
 8002f9c:	2002b498 	.word	0x2002b498
 8002fa0:	2002a898 	.word	0x2002a898
 8002fa4:	08001ea1 	.word	0x08001ea1
 8002fa8:	0800174d 	.word	0x0800174d
 8002fac:	2002a784 	.word	0x2002a784
 8002fb0:	2002a830 	.word	0x2002a830
 8002fb4:	02a62b1c 	.word	0x02a62b1c
 8002fb8:	08025484 	.word	0x08025484
 8002fbc:	2002afb0 	.word	0x2002afb0
 8002fc0:	2002b14c 	.word	0x2002b14c
 8002fc4:	2002afb4 	.word	0x2002afb4
 8002fc8:	2002ac0c 	.word	0x2002ac0c
 8002fcc:	080254b4 	.word	0x080254b4
 8002fd0:	2002ac08 	.word	0x2002ac08
 8002fd4:	080254e0 	.word	0x080254e0
 8002fd8:	20001638 	.word	0x20001638
 8002fdc:	08025508 	.word	0x08025508
 8002fe0:	08025524 	.word	0x08025524
 8002fe4:	2002aed4 	.word	0x2002aed4
 8002fe8:	08025600 	.word	0x08025600
 8002fec:	2002b2ac 	.word	0x2002b2ac
 8002ff0:	200007a8 	.word	0x200007a8
 8002ff4:	2000163c 	.word	0x2000163c
 8002ff8:	08025540 	.word	0x08025540
 8002ffc:	0802555c 	.word	0x0802555c
 8003000:	08025498 	.word	0x08025498
 8003004:	08025464 	.word	0x08025464

08003008 <assert_failed>:
void assert_failed(uint8_t *file, uint32_t line) {
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop

0800300c <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 800300c:	b500      	push	{lr}
	/* Place your implementation of fputc here */
	/* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
	{
		if (ch == '\n')
 800300e:	280a      	cmp	r0, #10
PUTCHAR_PROTOTYPE {
 8003010:	b083      	sub	sp, #12
 8003012:	9001      	str	r0, [sp, #4]
		if (ch == '\n')
 8003014:	d009      	beq.n	800302a <__io_putchar+0x1e>
			HAL_UART_Transmit(&huart2, "\r\n", 2, 10);
		else
		HAL_UART_Transmit(&huart2, &ch, 1, 10);
 8003016:	230a      	movs	r3, #10
 8003018:	2201      	movs	r2, #1
 800301a:	a901      	add	r1, sp, #4
 800301c:	4808      	ldr	r0, [pc, #32]	; (8003040 <__io_putchar+0x34>)
 800301e:	f00b ff0f 	bl	800ee40 <HAL_UART_Transmit>

	return ch;
	}
}
 8003022:	9801      	ldr	r0, [sp, #4]
 8003024:	b003      	add	sp, #12
 8003026:	f85d fb04 	ldr.w	pc, [sp], #4
 800302a:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart2, "\r\n", 2, 10);
 800302c:	2202      	movs	r2, #2
 800302e:	4905      	ldr	r1, [pc, #20]	; (8003044 <__io_putchar+0x38>)
 8003030:	4803      	ldr	r0, [pc, #12]	; (8003040 <__io_putchar+0x34>)
 8003032:	f00b ff05 	bl	800ee40 <HAL_UART_Transmit>
}
 8003036:	9801      	ldr	r0, [sp, #4]
 8003038:	b003      	add	sp, #12
 800303a:	f85d fb04 	ldr.w	pc, [sp], #4
 800303e:	bf00      	nop
 8003040:	2002b18c 	.word	0x2002b18c
 8003044:	08025d14 	.word	0x08025d14

08003048 <calcepoch32>:
}
#endif

#if 1	// new version below
struct tm* getgpstime() {
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8003048:	4a0f      	ldr	r2, [pc, #60]	; (8003088 <calcepoch32+0x40>)
	return (&now);
}

// calculate epoch seconds from 1970 to now using GPS date time fields (32 bit unsigned, not 64 bit time_t as used by the library)
// the number of seconds that have elapsed since January 1, 1970 (midnight UTC/GMT), not counting leap seconds
uint32_t calcepoch32() {
 800304a:	b538      	push	{r3, r4, r5, lr}
	now.tm_year = statuspkt.NavPvt.year - 1900;
 800304c:	8914      	ldrh	r4, [r2, #8]
	now.tm_isdst = -1;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
 800304e:	f04f 35ff 	mov.w	r5, #4294967295
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 8003052:	7a91      	ldrb	r1, [r2, #10]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8003054:	4b0d      	ldr	r3, [pc, #52]	; (800308c <calcepoch32+0x44>)
 8003056:	f2a4 746c 	subw	r4, r4, #1900	; 0x76c
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 800305a:	4429      	add	r1, r5
	now.tm_isdst = -1;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
 800305c:	621d      	str	r5, [r3, #32]

	epochtime = mktime(getgpstime());
 800305e:	4618      	mov	r0, r3
	now.tm_mday = statuspkt.NavPvt.day;          // Day of the month
 8003060:	7ad5      	ldrb	r5, [r2, #11]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8003062:	615c      	str	r4, [r3, #20]
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 8003064:	6119      	str	r1, [r3, #16]
	now.tm_hour = statuspkt.NavPvt.hour;
 8003066:	7b14      	ldrb	r4, [r2, #12]
	now.tm_min = statuspkt.NavPvt.min;
 8003068:	7b51      	ldrb	r1, [r2, #13]
	now.tm_sec = statuspkt.NavPvt.sec;
 800306a:	7b92      	ldrb	r2, [r2, #14]
	now.tm_hour = statuspkt.NavPvt.hour;
 800306c:	e9c3 4502 	strd	r4, r5, [r3, #8]
	now.tm_sec = statuspkt.NavPvt.sec;
 8003070:	e9c3 2100 	strd	r2, r1, [r3]
	epochtime = mktime(getgpstime());
 8003074:	f01c ff02 	bl	801fe7c <mktime>
 8003078:	4b05      	ldr	r3, [pc, #20]	; (8003090 <calcepoch32+0x48>)
 800307a:	4602      	mov	r2, r0
	return (uint32_t) (epochtime + (time_t) (10 * 60 * 60));		// add ten hours
#else
    return (uint32_t)(epochtime);
#endif

}
 800307c:	f648 40a0 	movw	r0, #36000	; 0x8ca0
	epochtime = mktime(getgpstime());
 8003080:	e9c3 2100 	strd	r2, r1, [r3]
}
 8003084:	4410      	add	r0, r2
 8003086:	bd38      	pop	{r3, r4, r5, pc}
 8003088:	2002a784 	.word	0x2002a784
 800308c:	2002b350 	.word	0x2002b350
 8003090:	2002b3d0 	.word	0x2002b3d0

08003094 <disableNmea>:

	sendPacket(packet, sizeof(packet));
}

// Function, sending set of packets to the receiver to disable NMEA messages
void disableNmea() {
 8003094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// Array of two bytes for CFG-MSG packets payload
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 8003098:	4c20      	ldr	r4, [pc, #128]	; (800311c <disableNmea+0x88>)
void disableNmea() {
 800309a:	b08e      	sub	sp, #56	; 0x38
	HAL_UART_Transmit(&huart6, packet, len, 100);
 800309c:	4f20      	ldr	r7, [pc, #128]	; (8003120 <disableNmea+0x8c>)
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 800309e:	ae04      	add	r6, sp, #16
 80030a0:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80030a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030a6:	4635      	mov	r5, r6
 80030a8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80030aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030ac:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80030ae:	e894 0003 	ldmia.w	r4, {r0, r1}
			{ 0xF0, 0x06 }, { 0xF0, 0x02 }, { 0xF0, 0x07 }, { 0xF0, 0x03 }, { 0xF0, 0x04 }, { 0xF0, 0x0E },
			{ 0xF0, 0x0F }, { 0xF0, 0x05 }, { 0xF0, 0x08 }, { 0xF1, 0x00 }, { 0xF1, 0x01 }, { 0xF1, 0x03 },
			{ 0xF1, 0x04 }, { 0xF1, 0x05 }, { 0xF1, 0x06 }, };

	// CFG-MSG packet buffer
	byte packet[] = { 0xB5, // sync char 1
 80030b2:	f104 0208 	add.w	r2, r4, #8
 80030b6:	ab01      	add	r3, sp, #4
 80030b8:	f10d 040d 	add.w	r4, sp, #13
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 80030bc:	e886 0003 	stmia.w	r6, {r0, r1}
	byte packet[] = { 0xB5, // sync char 1
 80030c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80030c2:	0c16      	lsrs	r6, r2, #16
 80030c4:	c303      	stmia	r3!, {r0, r1}
 80030c6:	f823 2b02 	strh.w	r2, [r3], #2
 80030ca:	701e      	strb	r6, [r3, #0]
		for (byte j = 0; j < sizeof(*messages); j++) {
			packet[payloadOffset + j] = messages[i][j];
		}

		// Set checksum bytes to the null
		packet[packetSize - 2] = 0x00;
 80030cc:	2600      	movs	r6, #0
		packet[packetSize - 1] = 0x00;
 80030ce:	2200      	movs	r2, #0
			packet[payloadOffset + j] = messages[i][j];
 80030d0:	f895 c000 	ldrb.w	ip, [r5]
 80030d4:	7868      	ldrb	r0, [r5, #1]
 80030d6:	f10d 0106 	add.w	r1, sp, #6
		packet[packetSize - 1] = 0x00;
 80030da:	4613      	mov	r3, r2
		packet[packetSize - 2] = 0x00;
 80030dc:	f88d 600d 	strb.w	r6, [sp, #13]
		packet[packetSize - 1] = 0x00;
 80030e0:	f88d 600e 	strb.w	r6, [sp, #14]
			packet[payloadOffset + j] = messages[i][j];
 80030e4:	f88d c00a 	strb.w	ip, [sp, #10]
 80030e8:	f88d 000b 	strb.w	r0, [sp, #11]

		// Calculate checksum over the packet buffer excluding sync (first two)
		// and checksum chars (last two)
		for (byte j = 0; j < packetSize - 4; j++) {
			packet[packetSize - 2] += packet[2 + j];
 80030ec:	f811 0b01 	ldrb.w	r0, [r1], #1
 80030f0:	4403      	add	r3, r0
		for (byte j = 0; j < packetSize - 4; j++) {
 80030f2:	428c      	cmp	r4, r1
			packet[packetSize - 2] += packet[2 + j];
 80030f4:	b2db      	uxtb	r3, r3
			packet[packetSize - 1] += packet[packetSize - 2];
 80030f6:	441a      	add	r2, r3
			packet[packetSize - 2] += packet[2 + j];
 80030f8:	f88d 300d 	strb.w	r3, [sp, #13]
			packet[packetSize - 1] += packet[packetSize - 2];
 80030fc:	b2d2      	uxtb	r2, r2
 80030fe:	f88d 200e 	strb.w	r2, [sp, #14]
		for (byte j = 0; j < packetSize - 4; j++) {
 8003102:	d1f3      	bne.n	80030ec <disableNmea+0x58>
 8003104:	3502      	adds	r5, #2
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8003106:	2364      	movs	r3, #100	; 0x64
 8003108:	220b      	movs	r2, #11
 800310a:	a901      	add	r1, sp, #4
 800310c:	4638      	mov	r0, r7
 800310e:	f00b fe97 	bl	800ee40 <HAL_UART_Transmit>
	for (byte i = 0; i < sizeof(messages) / sizeof(*messages); i++) {
 8003112:	45a8      	cmp	r8, r5
 8003114:	d1db      	bne.n	80030ce <disableNmea+0x3a>
		}

		sendPacket(packet, packetSize);
	}
}
 8003116:	b00e      	add	sp, #56	; 0x38
 8003118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800311c:	080249b8 	.word	0x080249b8
 8003120:	2002b048 	.word	0x2002b048

08003124 <changeFrequency>:
	sendPacket(packet, sizeof(packet));
}

// Function, sending packet to the receiver to change frequency to 100 ms
#define SEC 1
void changeFrequency() {
 8003124:	b510      	push	{r4, lr}
	// CFG-RATE packet
	byte packet[] = { 0xB5, // sync char 1
 8003126:	4b07      	ldr	r3, [pc, #28]	; (8003144 <changeFrequency+0x20>)
void changeFrequency() {
 8003128:	b084      	sub	sp, #16
	byte packet[] = { 0xB5, // sync char 1
 800312a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800312c:	466c      	mov	r4, sp
 800312e:	c407      	stmia	r4!, {r0, r1, r2}
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8003130:	220e      	movs	r2, #14
	byte packet[] = { 0xB5, // sync char 1
 8003132:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8003134:	4669      	mov	r1, sp
 8003136:	2364      	movs	r3, #100	; 0x64
 8003138:	4803      	ldr	r0, [pc, #12]	; (8003148 <changeFrequency+0x24>)
 800313a:	f00b fe81 	bl	800ee40 <HAL_UART_Transmit>
			0x01, // CK_A
			0x39, // CK_B
#endif
			};
	sendPacket(packet, sizeof(packet));
}
 800313e:	b004      	add	sp, #16
 8003140:	bd10      	pop	{r4, pc}
 8003142:	bf00      	nop
 8003144:	08024a08 	.word	0x08024a08
 8003148:	2002b048 	.word	0x2002b048

0800314c <disableUnnecessaryChannels>:

// Function, sending packet to the receiver to disable unnecessary channels
void disableUnnecessaryChannels() {
 800314c:	b530      	push	{r4, r5, lr}
	// CFG-GNSS packet
	byte packet[] = { 0xB5, // sync char 1
 800314e:	4d09      	ldr	r5, [pc, #36]	; (8003174 <disableUnnecessaryChannels+0x28>)
void disableUnnecessaryChannels() {
 8003150:	b08d      	sub	sp, #52	; 0x34
	byte packet[] = { 0xB5, // sync char 1
 8003152:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003154:	ac01      	add	r4, sp, #4
 8003156:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003158:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800315a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800315c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8003160:	2364      	movs	r3, #100	; 0x64
	byte packet[] = { 0xB5, // sync char 1
 8003162:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8003166:	222c      	movs	r2, #44	; 0x2c
 8003168:	a901      	add	r1, sp, #4
 800316a:	4803      	ldr	r0, [pc, #12]	; (8003178 <disableUnnecessaryChannels+0x2c>)
 800316c:	f00b fe68 	bl	800ee40 <HAL_UART_Transmit>
			0xA4, // CK_A
			0x25, // CK_B
			};

	sendPacket(packet, sizeof(packet));
}
 8003170:	b00d      	add	sp, #52	; 0x34
 8003172:	bd30      	pop	{r4, r5, pc}
 8003174:	08024a18 	.word	0x08024a18
 8003178:	2002b048 	.word	0x2002b048

0800317c <enableNavPvt>:

// Function, sending packet to the receiver to enable NAV-PVT messages
void enableNavPvt() {
 800317c:	b530      	push	{r4, r5, lr}
	// CFG-MSG packet
	byte packet[] = { 0xB5, // sync char 1
 800317e:	4a08      	ldr	r2, [pc, #32]	; (80031a0 <enableNavPvt+0x24>)
void enableNavPvt() {
 8003180:	b085      	sub	sp, #20
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8003182:	2364      	movs	r3, #100	; 0x64
	byte packet[] = { 0xB5, // sync char 1
 8003184:	ac01      	add	r4, sp, #4
 8003186:	ca07      	ldmia	r2, {r0, r1, r2}
 8003188:	c403      	stmia	r4!, {r0, r1}
 800318a:	0c15      	lsrs	r5, r2, #16
 800318c:	f824 2b02 	strh.w	r2, [r4], #2
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8003190:	a901      	add	r1, sp, #4
 8003192:	220b      	movs	r2, #11
 8003194:	4803      	ldr	r0, [pc, #12]	; (80031a4 <enableNavPvt+0x28>)
	byte packet[] = { 0xB5, // sync char 1
 8003196:	7025      	strb	r5, [r4, #0]
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8003198:	f00b fe52 	bl	800ee40 <HAL_UART_Transmit>
			0x13, // CK_A
			0x51, // CK_B
			};

	sendPacket(packet, sizeof(packet));
}
 800319c:	b005      	add	sp, #20
 800319e:	bd30      	pop	{r4, r5, pc}
 80031a0:	08024a44 	.word	0x08024a44
 80031a4:	2002b048 	.word	0x2002b048

080031a8 <enableNaTP5>:

// Function, to set time pulse2 to interval of 1pps
// pulse only running when GPS locked to UTC
void enableNaTP5() {
 80031a8:	b530      	push	{r4, r5, lr}
	// CFG-MSG packet
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 80031aa:	4d09      	ldr	r5, [pc, #36]	; (80031d0 <enableNaTP5+0x28>)
void enableNaTP5() {
 80031ac:	b08b      	sub	sp, #44	; 0x2c
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 80031ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031b0:	466c      	mov	r4, sp
 80031b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031b8:	e895 0003 	ldmia.w	r5, {r0, r1}
	HAL_UART_Transmit(&huart6, packet, len, 100);
 80031bc:	2364      	movs	r3, #100	; 0x64
 80031be:	2228      	movs	r2, #40	; 0x28
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 80031c0:	e884 0003 	stmia.w	r4, {r0, r1}
	HAL_UART_Transmit(&huart6, packet, len, 100);
 80031c4:	4669      	mov	r1, sp
 80031c6:	4803      	ldr	r0, [pc, #12]	; (80031d4 <enableNaTP5+0x2c>)
 80031c8:	f00b fe3a 	bl	800ee40 <HAL_UART_Transmit>
			0x0F, 0x00, 0x40, 0x42, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x86, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xF7, 0x00, 0x00, 0x00, 0xC9, 0x97 };

	sendPacket(packet, sizeof(packet));
}
 80031cc:	b00b      	add	sp, #44	; 0x2c
 80031ce:	bd30      	pop	{r4, r5, pc}
 80031d0:	08024a50 	.word	0x08024a50
 80031d4:	2002b048 	.word	0x2002b048

080031d8 <IsPacketReady>:
	}
	return ((CK_A == PACKETstore[90]) && (CK_B == PACKETstore[91]));
}

// start/complete filling in the current packet
int IsPacketReady(unsigned char c) {
 80031d8:	b470      	push	{r4, r5, r6}
	// get current position in packet
	unsigned char p = UbxGpsv.carriagePosition;
 80031da:	4d1c      	ldr	r5, [pc, #112]	; (800324c <IsPacketReady+0x74>)
 80031dc:	78eb      	ldrb	r3, [r5, #3]
	if (p < 4)     // this looks for PVT messages
 80031de:	2b03      	cmp	r3, #3
 80031e0:	d809      	bhi.n	80031f6 <IsPacketReady+0x1e>
			{
		// are we starting a packet?
		if (c == UBXGPS_HEADER[p]) {
 80031e2:	4a1b      	ldr	r2, [pc, #108]	; (8003250 <IsPacketReady+0x78>)
 80031e4:	4619      	mov	r1, r3
 80031e6:	5cd2      	ldrb	r2, [r2, r3]
 80031e8:	4282      	cmp	r2, r0
 80031ea:	d00e      	beq.n	800320a <IsPacketReady+0x32>
			PACKETstore[p++] = c;
		} else {
			p = 0;
 80031ec:	2300      	movs	r3, #0
				}
			}
		}
	}
	UbxGpsv.carriagePosition = p;
	return false;
 80031ee:	2000      	movs	r0, #0
	UbxGpsv.carriagePosition = p;
 80031f0:	70eb      	strb	r3, [r5, #3]
}
 80031f2:	bc70      	pop	{r4, r5, r6}
 80031f4:	4770      	bx	lr
		if (p < (2 + 4 + 84 + 2)) {
 80031f6:	2b5b      	cmp	r3, #91	; 0x5b
 80031f8:	d8f9      	bhi.n	80031ee <IsPacketReady+0x16>
			PACKETstore[p++] = c;
 80031fa:	1c5a      	adds	r2, r3, #1
 80031fc:	4e15      	ldr	r6, [pc, #84]	; (8003254 <IsPacketReady+0x7c>)
 80031fe:	b2d2      	uxtb	r2, r2
 8003200:	54f0      	strb	r0, [r6, r3]
			if (p == (2 + 4 + 84 + 2)) {
 8003202:	2a5c      	cmp	r2, #92	; 0x5c
 8003204:	d006      	beq.n	8003214 <IsPacketReady+0x3c>
 8003206:	4613      	mov	r3, r2
 8003208:	e7f1      	b.n	80031ee <IsPacketReady+0x16>
			PACKETstore[p++] = c;
 800320a:	3301      	adds	r3, #1
 800320c:	4811      	ldr	r0, [pc, #68]	; (8003254 <IsPacketReady+0x7c>)
 800320e:	b2db      	uxtb	r3, r3
 8003210:	5442      	strb	r2, [r0, r1]
 8003212:	e7ec      	b.n	80031ee <IsPacketReady+0x16>
				UbxGpsv.carriagePosition = p;
 8003214:	2300      	movs	r3, #0
 8003216:	1c71      	adds	r1, r6, #1
 8003218:	f106 0459 	add.w	r4, r6, #89	; 0x59
	unsigned char CK_B = 0;
 800321c:	461a      	mov	r2, r3
				UbxGpsv.carriagePosition = p;
 800321e:	70eb      	strb	r3, [r5, #3]
		CK_A = CK_A + PACKETstore[i];
 8003220:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8003224:	4403      	add	r3, r0
	for (int i = 2; i < (2 + 4 + 84); i++)		// skip sync bytes
 8003226:	428c      	cmp	r4, r1
		CK_A = CK_A + PACKETstore[i];
 8003228:	b2db      	uxtb	r3, r3
		CK_B = CK_B + CK_A;
 800322a:	441a      	add	r2, r3
 800322c:	b2d2      	uxtb	r2, r2
	for (int i = 2; i < (2 + 4 + 84); i++)		// skip sync bytes
 800322e:	d1f7      	bne.n	8003220 <IsPacketReady+0x48>
	return ((CK_A == PACKETstore[90]) && (CK_B == PACKETstore[91]));
 8003230:	f896 105a 	ldrb.w	r1, [r6, #90]	; 0x5a
 8003234:	4299      	cmp	r1, r3
 8003236:	d1d9      	bne.n	80031ec <IsPacketReady+0x14>
 8003238:	f896 305b 	ldrb.w	r3, [r6, #91]	; 0x5b
 800323c:	4293      	cmp	r3, r2
 800323e:	d1d5      	bne.n	80031ec <IsPacketReady+0x14>
					gpsgood = 1;
 8003240:	2301      	movs	r3, #1
 8003242:	4a05      	ldr	r2, [pc, #20]	; (8003258 <IsPacketReady+0x80>)
					return true;
 8003244:	4618      	mov	r0, r3
					gpsgood = 1;
 8003246:	6013      	str	r3, [r2, #0]
					return true;
 8003248:	e7d3      	b.n	80031f2 <IsPacketReady+0x1a>
 800324a:	bf00      	nop
 800324c:	20000230 	.word	0x20000230
 8003250:	08025d50 	.word	0x08025d50
 8003254:	2002b3dc 	.word	0x2002b3dc
 8003258:	20001658 	.word	0x20001658

0800325c <setupneo>:
		printf("0x%02x ", data);
	}
}

// init neo7
HAL_StatusTypeDef setupneo() {
 800325c:	b510      	push	{r4, lr}
	HAL_StatusTypeDef stat;

	// Disabling NMEA messages by sending appropriate packets
//		printf("Disabling NMEA messages...\n\r");
	disableNmea();
 800325e:	f7ff ff19 	bl	8003094 <disableNmea>
	 * @param Size: amount of data to be received.
	 * @note   When the UART parity is enabled (PCE = 1), the received data contain
	 *         the parity bit (MSB position).
	 * @retval HAL status
	 */
	stat = HAL_UART_Receive_DMA(&huart6, rxdatabuf, 1);
 8003262:	2201      	movs	r2, #1
 8003264:	4912      	ldr	r1, [pc, #72]	; (80032b0 <setupneo+0x54>)
 8003266:	4813      	ldr	r0, [pc, #76]	; (80032b4 <setupneo+0x58>)
 8003268:	f00b f8d6 	bl	800e418 <HAL_UART_Receive_DMA>

	if (stat != HAL_OK) {
 800326c:	4604      	mov	r4, r0
 800326e:	b9d0      	cbnz	r0, 80032a6 <setupneo+0x4a>
		printf("Err HAL_UART_Receive_IT usart6\n");
		return (stat);
	}

	// 	Set reporting frequency to 1 Sec
	printf("NEO: Changing receiving frequency to 1 Sec...\n\r");
 8003270:	4811      	ldr	r0, [pc, #68]	; (80032b8 <setupneo+0x5c>)
 8003272:	f01d fca1 	bl	8020bb8 <iprintf>

	changeFrequency();
 8003276:	f7ff ff55 	bl	8003124 <changeFrequency>
	//rx();		// debugging

	// Disabling unnecessary channels like SBAS or QZSS
	printf("NEO: Disabling unnecessary channels...\r\n");
 800327a:	4810      	ldr	r0, [pc, #64]	; (80032bc <setupneo+0x60>)
 800327c:	f01d fd24 	bl	8020cc8 <puts>
	disableUnnecessaryChannels();
 8003280:	f7ff ff64 	bl	800314c <disableUnnecessaryChannels>

	// Enabling NAV-PVT messages
	printf("NEO: Enabling NAV-PVT messages...\n\r");
 8003284:	480e      	ldr	r0, [pc, #56]	; (80032c0 <setupneo+0x64>)
 8003286:	f01d fc97 	bl	8020bb8 <iprintf>
	enableNavPvt();
 800328a:	f7ff ff77 	bl	800317c <enableNavPvt>
	osDelay(100);
 800328e:	2064      	movs	r0, #100	; 0x64
 8003290:	f00d ff22 	bl	80110d8 <osDelay>
// Enable Time pulse
	enableNaTP5();
 8003294:	f7ff ff88 	bl	80031a8 <enableNaTP5>
	statuspkt.NavPvt.flags = 0;		// make sure gps not showing as locked
 8003298:	4b0a      	ldr	r3, [pc, #40]	; (80032c4 <setupneo+0x68>)
	printf("NEO: Auto-configuration is complete\n\r");
 800329a:	480b      	ldr	r0, [pc, #44]	; (80032c8 <setupneo+0x6c>)
	statuspkt.NavPvt.flags = 0;		// make sure gps not showing as locked
 800329c:	765c      	strb	r4, [r3, #25]
	printf("NEO: Auto-configuration is complete\n\r");
 800329e:	f01d fc8b 	bl	8020bb8 <iprintf>

//		fastdelay_ms(100); // Little delay before flushing
	return (stat);
}
 80032a2:	4620      	mov	r0, r4
 80032a4:	bd10      	pop	{r4, pc}
		printf("Err HAL_UART_Receive_IT usart6\n");
 80032a6:	4809      	ldr	r0, [pc, #36]	; (80032cc <setupneo+0x70>)
 80032a8:	f01d fd0e 	bl	8020cc8 <puts>
}
 80032ac:	4620      	mov	r0, r4
 80032ae:	bd10      	pop	{r4, pc}
 80032b0:	2000165c 	.word	0x2000165c
 80032b4:	2002b048 	.word	0x2002b048
 80032b8:	08025d74 	.word	0x08025d74
 80032bc:	08025da4 	.word	0x08025da4
 80032c0:	08025dcc 	.word	0x08025dcc
 80032c4:	2002a784 	.word	0x2002a784
 80032c8:	08025df0 	.word	0x08025df0
 80032cc:	08025d54 	.word	0x08025d54

080032d0 <HAL_UART_RxCpltCallback>:
	const unsigned char offset = 6;
//	unsigned char data;
//	HAL_StatusTypeDef stat;

//	printf("UART6 RxCpl");
	if (huart->Instance == USART6) { //our UART
 80032d0:	6803      	ldr	r3, [r0, #0]
 80032d2:	4a18      	ldr	r2, [pc, #96]	; (8003334 <HAL_UART_RxCpltCallback+0x64>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d007      	beq.n	80032e8 <HAL_UART_RxCpltCallback+0x18>
		if (stat != HAL_OK) {
			printf("Err HAL_UART_Receive_IT usart6\n");
		}
#endif
	} else {
		if (huart->Instance == UART5) {
 80032d8:	4a17      	ldr	r2, [pc, #92]	; (8003338 <HAL_UART_RxCpltCallback+0x68>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d002      	beq.n	80032e4 <HAL_UART_RxCpltCallback+0x14>
			uart5_rxdone();
		} else
			printf("USART unknown uart int\n");
 80032de:	4817      	ldr	r0, [pc, #92]	; (800333c <HAL_UART_RxCpltCallback+0x6c>)
 80032e0:	f01d bcf2 	b.w	8020cc8 <puts>
			uart5_rxdone();
 80032e4:	f7fd beb4 	b.w	8001050 <uart5_rxdone>
		data = rxdatabuf[0];
 80032e8:	4b15      	ldr	r3, [pc, #84]	; (8003340 <HAL_UART_RxCpltCallback+0x70>)
		flag = 1;
 80032ea:	2101      	movs	r1, #1
 80032ec:	4a15      	ldr	r2, [pc, #84]	; (8003344 <HAL_UART_RxCpltCallback+0x74>)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80032ee:	b510      	push	{r4, lr}
		data = rxdatabuf[0];
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	4c15      	ldr	r4, [pc, #84]	; (8003348 <HAL_UART_RxCpltCallback+0x78>)
		if (IsPacketReady(data)) {
 80032f4:	4618      	mov	r0, r3
		flag = 1;
 80032f6:	6011      	str	r1, [r2, #0]
		data = rxdatabuf[0];
 80032f8:	7023      	strb	r3, [r4, #0]
		if (IsPacketReady(data)) {
 80032fa:	f7ff ff6d 	bl	80031d8 <IsPacketReady>
 80032fe:	b180      	cbz	r0, 8003322 <HAL_UART_RxCpltCallback+0x52>
 8003300:	4b12      	ldr	r3, [pc, #72]	; (800334c <HAL_UART_RxCpltCallback+0x7c>)
 8003302:	4a13      	ldr	r2, [pc, #76]	; (8003350 <HAL_UART_RxCpltCallback+0x80>)
 8003304:	f103 004e 	add.w	r0, r3, #78	; 0x4e
				*((char*) (&(statuspkt.NavPvt)) + (i - offset)) = PACKETstore[i]; // copy into global struct
 8003308:	f813 1f01 	ldrb.w	r1, [r3, #1]!
			for (unsigned int i = offset; i < sizeof(statuspkt.NavPvt); i++) {
 800330c:	4283      	cmp	r3, r0
				*((char*) (&(statuspkt.NavPvt)) + (i - offset)) = PACKETstore[i]; // copy into global struct
 800330e:	f802 1f01 	strb.w	r1, [r2, #1]!
			for (unsigned int i = offset; i < sizeof(statuspkt.NavPvt); i++) {
 8003312:	d1f9      	bne.n	8003308 <HAL_UART_RxCpltCallback+0x38>
			if (statuspkt.NavPvt.flags & 1) { // locked
 8003314:	4c0f      	ldr	r4, [pc, #60]	; (8003354 <HAL_UART_RxCpltCallback+0x84>)
 8003316:	7e63      	ldrb	r3, [r4, #25]
 8003318:	f013 0301 	ands.w	r3, r3, #1
 800331c:	d102      	bne.n	8003324 <HAL_UART_RxCpltCallback+0x54>
				gpslocked = 0;
 800331e:	4a0e      	ldr	r2, [pc, #56]	; (8003358 <HAL_UART_RxCpltCallback+0x88>)
 8003320:	7013      	strb	r3, [r2, #0]
	}
}
 8003322:	bd10      	pop	{r4, pc}
				statuspkt.epochsecs = calcepoch32(); // should not be needed if our 1 sec timer was accurate, also dbg desyncs this
 8003324:	f7ff fe90 	bl	8003048 <calcepoch32>
				gpslocked = 1;
 8003328:	4b0b      	ldr	r3, [pc, #44]	; (8003358 <HAL_UART_RxCpltCallback+0x88>)
 800332a:	2201      	movs	r2, #1
				statuspkt.epochsecs = calcepoch32(); // should not be needed if our 1 sec timer was accurate, also dbg desyncs this
 800332c:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
				gpslocked = 1;
 8003330:	701a      	strb	r2, [r3, #0]
}
 8003332:	bd10      	pop	{r4, pc}
 8003334:	40011400 	.word	0x40011400
 8003338:	40005000 	.word	0x40005000
 800333c:	08025d38 	.word	0x08025d38
 8003340:	2000165c 	.word	0x2000165c
 8003344:	20001654 	.word	0x20001654
 8003348:	2002b3d8 	.word	0x2002b3d8
 800334c:	2002b3e1 	.word	0x2002b3e1
 8003350:	2002a787 	.word	0x2002a787
 8003354:	2002a784 	.word	0x2002a784
 8003358:	2000169d 	.word	0x2000169d

0800335c <HAL_UART_ErrorCallback>:
	HAL_StatusTypeDef stat;
	uint8_t ch;
	volatile uint32_t reg;

	// whatever the error try to clear it blindly
	__HAL_UART_CLEAR_FEFLAG(huart);
 800335c:	6803      	ldr	r3, [r0, #0]
	__HAL_UART_CLEAR_NEFLAG(huart);
	__HAL_UART_CLEAR_OREFLAG(huart);
 800335e:	2208      	movs	r2, #8
	__HAL_UART_CLEAR_PEFLAG(huart);

	if (huart->Instance == USART6) { 		// GPS  UART
 8003360:	4917      	ldr	r1, [pc, #92]	; (80033c0 <HAL_UART_ErrorCallback+0x64>)
HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003362:	b470      	push	{r4, r5, r6}
	if (huart->Instance == USART6) { 		// GPS  UART
 8003364:	428b      	cmp	r3, r1
	__HAL_UART_CLEAR_FEFLAG(huart);
 8003366:	f04f 0602 	mov.w	r6, #2
	__HAL_UART_CLEAR_NEFLAG(huart);
 800336a:	f04f 0504 	mov.w	r5, #4
	__HAL_UART_CLEAR_PEFLAG(huart);
 800336e:	f04f 0401 	mov.w	r4, #1
	__HAL_UART_CLEAR_FEFLAG(huart);
 8003372:	621e      	str	r6, [r3, #32]
	__HAL_UART_CLEAR_NEFLAG(huart);
 8003374:	621d      	str	r5, [r3, #32]
	__HAL_UART_CLEAR_OREFLAG(huart);
 8003376:	621a      	str	r2, [r3, #32]
	__HAL_UART_CLEAR_PEFLAG(huart);
 8003378:	621c      	str	r4, [r3, #32]
	if (huart->Instance == USART6) { 		// GPS  UART
 800337a:	d01c      	beq.n	80033b6 <HAL_UART_ErrorCallback+0x5a>
		printf("GPS UART_Err Callback %0lx, ", huart->ErrorCode);
		return;
	}

	if (huart->Instance == UART5) { 			//LCD UART
 800337c:	4911      	ldr	r1, [pc, #68]	; (80033c4 <HAL_UART_ErrorCallback+0x68>)
 800337e:	428b      	cmp	r3, r1
 8003380:	d001      	beq.n	8003386 <HAL_UART_ErrorCallback+0x2a>
#define  HAL_UART_ERROR_NE         ((uint32_t)0x00000002U)    /*!< Noise error         */
#define  HAL_UART_ERROR_FE         ((uint32_t)0x00000004U)    /*!< frame error         */
#define  HAL_UART_ERROR_ORE        ((uint32_t)0x00000008U)    /*!< Overrun error       */
#define  HAL_UART_ERROR_DMA        ((uint32_t)0x00000010U)    /*!< DMA transfer error  */
#endif
}
 8003382:	bc70      	pop	{r4, r5, r6}
 8003384:	4770      	bx	lr
		if (!(lcd_initflag)) {
 8003386:	4910      	ldr	r1, [pc, #64]	; (80033c8 <HAL_UART_ErrorCallback+0x6c>)
 8003388:	6809      	ldr	r1, [r1, #0]
 800338a:	2900      	cmp	r1, #0
 800338c:	d1f9      	bne.n	8003382 <HAL_UART_ErrorCallback+0x26>
		lcduart_error = huart->ErrorCode;
 800338e:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8003390:	490e      	ldr	r1, [pc, #56]	; (80033cc <HAL_UART_ErrorCallback+0x70>)
 8003392:	6008      	str	r0, [r1, #0]
		if (UART5->ISR & USART_ISR_ORE) // Overrun Error
 8003394:	69d9      	ldr	r1, [r3, #28]
 8003396:	0708      	lsls	r0, r1, #28
 8003398:	d500      	bpl.n	800339c <HAL_UART_ErrorCallback+0x40>
			UART5->ICR = USART_ICR_ORECF;
 800339a:	621a      	str	r2, [r3, #32]
		if (UART5->ISR & USART_ISR_NE) // Noise Error
 800339c:	4b09      	ldr	r3, [pc, #36]	; (80033c4 <HAL_UART_ErrorCallback+0x68>)
 800339e:	69da      	ldr	r2, [r3, #28]
 80033a0:	0751      	lsls	r1, r2, #29
 80033a2:	d501      	bpl.n	80033a8 <HAL_UART_ErrorCallback+0x4c>
			UART5->ICR = USART_ICR_NCF;
 80033a4:	2204      	movs	r2, #4
 80033a6:	621a      	str	r2, [r3, #32]
		if (UART5->ISR & USART_ISR_FE) // Framing Error
 80033a8:	4b06      	ldr	r3, [pc, #24]	; (80033c4 <HAL_UART_ErrorCallback+0x68>)
 80033aa:	69da      	ldr	r2, [r3, #28]
 80033ac:	0792      	lsls	r2, r2, #30
 80033ae:	d5e8      	bpl.n	8003382 <HAL_UART_ErrorCallback+0x26>
			UART5->ICR = USART_ICR_FECF;
 80033b0:	2202      	movs	r2, #2
 80033b2:	621a      	str	r2, [r3, #32]
 80033b4:	e7e5      	b.n	8003382 <HAL_UART_ErrorCallback+0x26>
		printf("GPS UART_Err Callback %0lx, ", huart->ErrorCode);
 80033b6:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
 80033b8:	4805      	ldr	r0, [pc, #20]	; (80033d0 <HAL_UART_ErrorCallback+0x74>)
}
 80033ba:	bc70      	pop	{r4, r5, r6}
		printf("GPS UART_Err Callback %0lx, ", huart->ErrorCode);
 80033bc:	f01d bbfc 	b.w	8020bb8 <iprintf>
 80033c0:	40011400 	.word	0x40011400
 80033c4:	40005000 	.word	0x40005000
 80033c8:	2000154c 	.word	0x2000154c
 80033cc:	200015d8 	.word	0x200015d8
 80033d0:	08025d18 	.word	0x08025d18

080033d4 <cycleleds>:
//////////////////////////////////////////////
//
// Initialise and test the LEDS by cycling them
//
//////////////////////////////////////////////
void cycleleds(void) {
 80033d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033d6:	b085      	sub	sp, #20
	const uint16_t pattern[] = {
 80033d8:	4a1b      	ldr	r2, [pc, #108]	; (8003448 <cycleleds+0x74>)
	LED_D1_Pin | LED_D2_Pin | LED_D3_Pin | LED_D4_Pin | LED_D5_Pin };

	int i;

	for (i = 0; i < 5; i++) {
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 80033da:	4c1c      	ldr	r4, [pc, #112]	; (800344c <cycleleds+0x78>)
 80033dc:	ae01      	add	r6, sp, #4
 80033de:	f10d 070e 	add.w	r7, sp, #14
	const uint16_t pattern[] = {
 80033e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80033e4:	4633      	mov	r3, r6
 80033e6:	4635      	mov	r5, r6
 80033e8:	c303      	stmia	r3!, {r0, r1}
 80033ea:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 80033ec:	f835 1b02 	ldrh.w	r1, [r5], #2
 80033f0:	2200      	movs	r2, #0
 80033f2:	4620      	mov	r0, r4
 80033f4:	f005 fb26 	bl	8008a44 <HAL_GPIO_WritePin>
		osDelay(140);
 80033f8:	208c      	movs	r0, #140	; 0x8c
 80033fa:	f00d fe6d 	bl	80110d8 <osDelay>
	for (i = 0; i < 5; i++) {
 80033fe:	42bd      	cmp	r5, r7
 8003400:	d1f4      	bne.n	80033ec <cycleleds+0x18>
	}
	osDelay(600);
 8003402:	f44f 7016 	mov.w	r0, #600	; 0x258
 8003406:	4634      	mov	r4, r6
	for (i = 0; i < 5; i++) {
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_SET);
 8003408:	4f10      	ldr	r7, [pc, #64]	; (800344c <cycleleds+0x78>)
	osDelay(600);
 800340a:	f00d fe65 	bl	80110d8 <osDelay>
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_SET);
 800340e:	f834 1b02 	ldrh.w	r1, [r4], #2
 8003412:	2201      	movs	r2, #1
 8003414:	4638      	mov	r0, r7
 8003416:	f005 fb15 	bl	8008a44 <HAL_GPIO_WritePin>
		osDelay(140);
 800341a:	208c      	movs	r0, #140	; 0x8c
 800341c:	f00d fe5c 	bl	80110d8 <osDelay>
	for (i = 0; i < 5; i++) {
 8003420:	42ac      	cmp	r4, r5
 8003422:	d1f4      	bne.n	800340e <cycleleds+0x3a>
	}
	osDelay(500);
 8003424:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
	for (i = 0; i < 5; i++) {
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 8003428:	4d08      	ldr	r5, [pc, #32]	; (800344c <cycleleds+0x78>)
	osDelay(500);
 800342a:	f00d fe55 	bl	80110d8 <osDelay>
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 800342e:	f836 1b02 	ldrh.w	r1, [r6], #2
 8003432:	2200      	movs	r2, #0
 8003434:	4628      	mov	r0, r5
 8003436:	f005 fb05 	bl	8008a44 <HAL_GPIO_WritePin>
		osDelay(140);
 800343a:	208c      	movs	r0, #140	; 0x8c
 800343c:	f00d fe4c 	bl	80110d8 <osDelay>
	for (i = 0; i < 5; i++) {
 8003440:	42b4      	cmp	r4, r6
 8003442:	d1f4      	bne.n	800342e <cycleleds+0x5a>
	}
}
 8003444:	b005      	add	sp, #20
 8003446:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003448:	08024a78 	.word	0x08024a78
 800344c:	40020c00 	.word	0x40020c00

08003450 <setpgagain>:
//////////////////////////////////////////////
//
// Set the Programmable Gain Amplifier GAIN
//
//////////////////////////////////////////////
void setpgagain(int gain) {
 8003450:	b538      	push	{r3, r4, r5, lr}
 8003452:	4604      	mov	r4, r0
	osDelay(5);
 8003454:	2005      	movs	r0, #5
 8003456:	f00d fe3f 	bl	80110d8 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 800345a:	2201      	movs	r2, #1
 800345c:	2104      	movs	r1, #4
 800345e:	4814      	ldr	r0, [pc, #80]	; (80034b0 <setpgagain+0x60>)
 8003460:	f005 faf0 	bl	8008a44 <HAL_GPIO_WritePin>
	osDelay(5);
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
	osDelay(5);
	pgagain = 0x4000 | (gain & 0x07);
 8003464:	f004 0407 	and.w	r4, r4, #7
	osDelay(5);
 8003468:	2005      	movs	r0, #5
	pgagain = 0x4000 | (gain & 0x07);
 800346a:	4d12      	ldr	r5, [pc, #72]	; (80034b4 <setpgagain+0x64>)
	osDelay(5);
 800346c:	f00d fe34 	bl	80110d8 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 8003470:	2200      	movs	r2, #0
 8003472:	2104      	movs	r1, #4
 8003474:	480e      	ldr	r0, [pc, #56]	; (80034b0 <setpgagain+0x60>)
 8003476:	f005 fae5 	bl	8008a44 <HAL_GPIO_WritePin>
	pgagain = 0x4000 | (gain & 0x07);
 800347a:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
	osDelay(5);
 800347e:	2005      	movs	r0, #5
 8003480:	f00d fe2a 	bl	80110d8 <osDelay>
	if (HAL_SPI_Transmit(&hspi2, &pgagain, 1, 1000) != HAL_OK) {	// select gain
 8003484:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003488:	2201      	movs	r2, #1
 800348a:	4629      	mov	r1, r5
 800348c:	480a      	ldr	r0, [pc, #40]	; (80034b8 <setpgagain+0x68>)
	pgagain = 0x4000 | (gain & 0x07);
 800348e:	802c      	strh	r4, [r5, #0]
	if (HAL_SPI_Transmit(&hspi2, &pgagain, 1, 1000) != HAL_OK) {	// select gain
 8003490:	f008 f8f8 	bl	800b684 <HAL_SPI_Transmit>
 8003494:	b110      	cbz	r0, 800349c <setpgagain+0x4c>
		printf("setpgagain: SPI Error\n");
 8003496:	4809      	ldr	r0, [pc, #36]	; (80034bc <setpgagain+0x6c>)
 8003498:	f01d fc16 	bl	8020cc8 <puts>
	}
	osDelay(5);
 800349c:	2005      	movs	r0, #5
 800349e:	f00d fe1b 	bl	80110d8 <osDelay>
//printf("PGA Gain set to %d\n",pgagain & 7);
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 80034a2:	2201      	movs	r2, #1
 80034a4:	2104      	movs	r1, #4
 80034a6:	4802      	ldr	r0, [pc, #8]	; (80034b0 <setpgagain+0x60>)
}
 80034a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 80034ac:	f005 baca 	b.w	8008a44 <HAL_GPIO_WritePin>
 80034b0:	40021800 	.word	0x40021800
 80034b4:	2000023e 	.word	0x2000023e
 80034b8:	2002a94c 	.word	0x2002a94c
 80034bc:	080260a8 	.word	0x080260a8

080034c0 <initpga>:
//////////////////////////////////////////////
//
// Initialise the Programmable Gain Amplifier MCP6S93
//
//////////////////////////////////////////////
int initpga() {
 80034c0:	b510      	push	{r4, lr}
	// init spi based single ended PG Amp
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 80034c2:	2201      	movs	r2, #1
int initpga() {
 80034c4:	b084      	sub	sp, #16
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 80034c6:	2104      	movs	r1, #4
 80034c8:	482b      	ldr	r0, [pc, #172]	; (8003578 <initpga+0xb8>)
 80034ca:	f005 fabb 	bl	8008a44 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// reset the PGA seq
 80034ce:	2200      	movs	r2, #0
 80034d0:	2104      	movs	r1, #4
 80034d2:	4829      	ldr	r0, [pc, #164]	; (8003578 <initpga+0xb8>)
 80034d4:	f005 fab6 	bl	8008a44 <HAL_GPIO_WritePin>
	osDelay(50);
 80034d8:	2032      	movs	r0, #50	; 0x32
 80034da:	f00d fdfd 	bl	80110d8 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 80034de:	2201      	movs	r2, #1
 80034e0:	2104      	movs	r1, #4
 80034e2:	4825      	ldr	r0, [pc, #148]	; (8003578 <initpga+0xb8>)
 80034e4:	f005 faae 	bl	8008a44 <HAL_GPIO_WritePin>
	osDelay(50);
 80034e8:	2032      	movs	r0, #50	; 0x32
 80034ea:	f00d fdf5 	bl	80110d8 <osDelay>

	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 80034ee:	2200      	movs	r2, #0
 80034f0:	2104      	movs	r1, #4
 80034f2:	4821      	ldr	r0, [pc, #132]	; (8003578 <initpga+0xb8>)
 80034f4:	f005 faa6 	bl	8008a44 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(&hspi2, (uint16_t[] ) { 0 }, 1, 1000) != HAL_OK) {	// nop cmd
 80034f8:	2400      	movs	r4, #0
 80034fa:	a904      	add	r1, sp, #16
 80034fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003500:	2201      	movs	r2, #1
 8003502:	481e      	ldr	r0, [pc, #120]	; (800357c <initpga+0xbc>)
 8003504:	f821 4d0c 	strh.w	r4, [r1, #-12]!
 8003508:	f008 f8bc 	bl	800b684 <HAL_SPI_Transmit>
 800350c:	bb70      	cbnz	r0, 800356c <initpga+0xac>
		printf("initpga: SPI error 2\n\r");
		return (1);
	}
	{
		volatile int dly;
		for (dly = 0; dly < 50; dly++)
 800350e:	9002      	str	r0, [sp, #8]
 8003510:	9b02      	ldr	r3, [sp, #8]
 8003512:	2b31      	cmp	r3, #49	; 0x31
 8003514:	dc05      	bgt.n	8003522 <initpga+0x62>
 8003516:	9b02      	ldr	r3, [sp, #8]
 8003518:	3301      	adds	r3, #1
 800351a:	9302      	str	r3, [sp, #8]
 800351c:	9b02      	ldr	r3, [sp, #8]
 800351e:	2b31      	cmp	r3, #49	; 0x31
 8003520:	ddf9      	ble.n	8003516 <initpga+0x56>
			;
	}
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PG
 8003522:	2201      	movs	r2, #1
 8003524:	2104      	movs	r1, #4
 8003526:	4814      	ldr	r0, [pc, #80]	; (8003578 <initpga+0xb8>)
 8003528:	f005 fa8c 	bl	8008a44 <HAL_GPIO_WritePin>
	osDelay(50);
 800352c:	2032      	movs	r0, #50	; 0x32
 800352e:	f00d fdd3 	bl	80110d8 <osDelay>

	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 8003532:	2200      	movs	r2, #0
 8003534:	2104      	movs	r1, #4
 8003536:	4810      	ldr	r0, [pc, #64]	; (8003578 <initpga+0xb8>)
 8003538:	f005 fa84 	bl	8008a44 <HAL_GPIO_WritePin>
	//osDelay(5);
	if (HAL_SPI_Transmit(&hspi2, &spicmdchan[0], 1, 1000) != HAL_OK) {	// set the channel to ch1
 800353c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003540:	2201      	movs	r2, #1
 8003542:	490f      	ldr	r1, [pc, #60]	; (8003580 <initpga+0xc0>)
 8003544:	480d      	ldr	r0, [pc, #52]	; (800357c <initpga+0xbc>)
 8003546:	f008 f89d 	bl	800b684 <HAL_SPI_Transmit>
 800354a:	b978      	cbnz	r0, 800356c <initpga+0xac>
		printf("initpga: SPI error 2\n\r");
		return (1);
	}
	{
		volatile int dly;
		for (dly = 0; dly < 50; dly++)
 800354c:	9003      	str	r0, [sp, #12]
 800354e:	9b03      	ldr	r3, [sp, #12]
 8003550:	2b31      	cmp	r3, #49	; 0x31
 8003552:	dc05      	bgt.n	8003560 <initpga+0xa0>
 8003554:	9b03      	ldr	r3, [sp, #12]
 8003556:	3301      	adds	r3, #1
 8003558:	9303      	str	r3, [sp, #12]
 800355a:	9b03      	ldr	r3, [sp, #12]
 800355c:	2b31      	cmp	r3, #49	; 0x31
 800355e:	ddf9      	ble.n	8003554 <initpga+0x94>
			;
	}
	setpgagain(1);			// 1 == gain of 2x
 8003560:	2001      	movs	r0, #1
 8003562:	f7ff ff75 	bl	8003450 <setpgagain>
	return (0);
 8003566:	2000      	movs	r0, #0
}
 8003568:	b004      	add	sp, #16
 800356a:	bd10      	pop	{r4, pc}
		printf("initpga: SPI error 2\n\r");
 800356c:	4805      	ldr	r0, [pc, #20]	; (8003584 <initpga+0xc4>)
 800356e:	f01d fb23 	bl	8020bb8 <iprintf>
		return (1);
 8003572:	2001      	movs	r0, #1
}
 8003574:	b004      	add	sp, #16
 8003576:	bd10      	pop	{r4, pc}
 8003578:	40021800 	.word	0x40021800
 800357c:	2002a94c 	.word	0x2002a94c
 8003580:	080260c0 	.word	0x080260c0
 8003584:	08025ecc 	.word	0x08025ecc

08003588 <bumppga>:

// bump the pga by one step
int bumppga(int i) {
	volatile int gain;

	gain = pgagain & 0x7;
 8003588:	4b11      	ldr	r3, [pc, #68]	; (80035d0 <bumppga+0x48>)
 800358a:	881b      	ldrh	r3, [r3, #0]
int bumppga(int i) {
 800358c:	b510      	push	{r4, lr}
	gain = pgagain & 0x7;
 800358e:	f003 0307 	and.w	r3, r3, #7
int bumppga(int i) {
 8003592:	b082      	sub	sp, #8
	if (!(((gain <= 0) && (i < 0)) || ((gain >= 7) && (i > 0)))) {	// there is room to change
 8003594:	1e04      	subs	r4, r0, #0
	gain = pgagain & 0x7;
 8003596:	9301      	str	r3, [sp, #4]
	if (!(((gain <= 0) && (i < 0)) || ((gain >= 7) && (i > 0)))) {	// there is room to change
 8003598:	9b01      	ldr	r3, [sp, #4]
 800359a:	da04      	bge.n	80035a6 <bumppga+0x1e>
 800359c:	2b00      	cmp	r3, #0
 800359e:	bfd4      	ite	le
 80035a0:	2300      	movle	r3, #0
 80035a2:	2301      	movgt	r3, #1
 80035a4:	b13b      	cbz	r3, 80035b6 <bumppga+0x2e>
 80035a6:	2c00      	cmp	r4, #0
 80035a8:	9b01      	ldr	r3, [sp, #4]
 80035aa:	dd07      	ble.n	80035bc <bumppga+0x34>
 80035ac:	2b06      	cmp	r3, #6
 80035ae:	bfcc      	ite	gt
 80035b0:	2300      	movgt	r3, #0
 80035b2:	2301      	movle	r3, #1
 80035b4:	b913      	cbnz	r3, 80035bc <bumppga+0x34>
		gain = gain + i;
		setpgagain(gain);
		return(i);
	}
return(0);
 80035b6:	4618      	mov	r0, r3
}
 80035b8:	b002      	add	sp, #8
 80035ba:	bd10      	pop	{r4, pc}
		gain = gain + i;
 80035bc:	9b01      	ldr	r3, [sp, #4]
 80035be:	4423      	add	r3, r4
 80035c0:	9301      	str	r3, [sp, #4]
		setpgagain(gain);
 80035c2:	9801      	ldr	r0, [sp, #4]
 80035c4:	f7ff ff44 	bl	8003450 <setpgagain>
		return(i);
 80035c8:	4620      	mov	r0, r4
}
 80035ca:	b002      	add	sp, #8
 80035cc:	bd10      	pop	{r4, pc}
 80035ce:	bf00      	nop
 80035d0:	2000023e 	.word	0x2000023e

080035d4 <initdualmux>:
//////////////////////////////////////////////
//
// Initialise the dual mux ADG729
//
//////////////////////////////////////////////
void initdualmux(void) {
 80035d4:	b500      	push	{lr}
	//HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)

	if (HAL_I2C_Master_Transmit(&hi2c1, 0x44 << 1, &muxdat[0], 1, 1000) != HAL_OK) {	// RF dual MUX
 80035d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
void initdualmux(void) {
 80035da:	b083      	sub	sp, #12
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x44 << 1, &muxdat[0], 1, 1000) != HAL_OK) {	// RF dual MUX
 80035dc:	2301      	movs	r3, #1
 80035de:	4a08      	ldr	r2, [pc, #32]	; (8003600 <initdualmux+0x2c>)
 80035e0:	9000      	str	r0, [sp, #0]
 80035e2:	2188      	movs	r1, #136	; 0x88
 80035e4:	4807      	ldr	r0, [pc, #28]	; (8003604 <initdualmux+0x30>)
 80035e6:	f005 fca9 	bl	8008f3c <HAL_I2C_Master_Transmit>
 80035ea:	b910      	cbnz	r0, 80035f2 <initdualmux+0x1e>
		printf("I2C HAL returned error 1\n\r");
	}
}
 80035ec:	b003      	add	sp, #12
 80035ee:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("I2C HAL returned error 1\n\r");
 80035f2:	4805      	ldr	r0, [pc, #20]	; (8003608 <initdualmux+0x34>)
}
 80035f4:	b003      	add	sp, #12
 80035f6:	f85d eb04 	ldr.w	lr, [sp], #4
		printf("I2C HAL returned error 1\n\r");
 80035fa:	f01d badd 	b.w	8020bb8 <iprintf>
 80035fe:	bf00      	nop
 8003600:	2000023c 	.word	0x2000023c
 8003604:	2002ab38 	.word	0x2002ab38
 8003608:	08025eb0 	.word	0x08025eb0
 800360c:	00000000 	.word	0x00000000

08003610 <getpressure115>:

// MPL115 low precision pressure sensor, uses floating point, crashes!!
HAL_StatusTypeDef getpressure115(void) {
 8003610:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003614:	ed2d 8b02 	vpush	{d8}
 8003618:	b091      	sub	sp, #68	; 0x44
	HAL_StatusTypeDef result;
	volatile double ffrac, p, t, n;
	uint16_t pr, tr;
	uint8_t testdat[8];

	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 800361a:	2112      	movs	r1, #18
 800361c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8003620:	2302      	movs	r3, #2
 8003622:	aa10      	add	r2, sp, #64	; 0x40
 8003624:	4878      	ldr	r0, [pc, #480]	; (8003808 <getpressure115+0x1f8>)
 8003626:	f822 1d2c 	strh.w	r1, [r2, #-44]!
 800362a:	21c0      	movs	r1, #192	; 0xc0
 800362c:	9500      	str	r5, [sp, #0]
 800362e:	f005 fc85 	bl	8008f3c <HAL_I2C_Master_Transmit>
	// CMD Start Conversion
	if (result != HAL_OK) {
 8003632:	4607      	mov	r7, r0
 8003634:	2800      	cmp	r0, #0
 8003636:	f040 80c4 	bne.w	80037c2 <getpressure115+0x1b2>
		return (result);
	}

	osDelay(4);		// conversion time max 3mS

	for (i = 0; i < 4; i++) {
 800363a:	4604      	mov	r4, r0
	osDelay(4);		// conversion time max 3mS
 800363c:	2004      	movs	r0, #4
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);		// rd pressure and temp regs
 800363e:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8003808 <getpressure115+0x1f8>
		if (result != HAL_OK) {
			printf("I2C MPL115 HAL returned error %d\n\r", result);
 8003642:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 8003834 <getpressure115+0x224>
	osDelay(4);		// conversion time max 3mS
 8003646:	f00d fd47 	bl	80110d8 <osDelay>
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);		// rd pressure and temp regs
 800364a:	aa0e      	add	r2, sp, #56	; 0x38
 800364c:	2301      	movs	r3, #1
 800364e:	9502      	str	r5, [sp, #8]
 8003650:	4640      	mov	r0, r8
 8003652:	1911      	adds	r1, r2, r4
 8003654:	b2a2      	uxth	r2, r4
 8003656:	e9cd 1300 	strd	r1, r3, [sp]
 800365a:	21c1      	movs	r1, #193	; 0xc1
 800365c:	f005 fd14 	bl	8009088 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 8003660:	4606      	mov	r6, r0
 8003662:	2800      	cmp	r0, #0
 8003664:	f040 809f 	bne.w	80037a6 <getpressure115+0x196>
	for (i = 0; i < 4; i++) {
 8003668:	3401      	adds	r4, #1
 800366a:	2c04      	cmp	r4, #4
 800366c:	d1ed      	bne.n	800364a <getpressure115+0x3a>
	}
	printf("\n");
#endif

	pr = (data[0] * 256 + data[1]) >> 6;
	tr = (data[2] * 256 + data[3]) >> 6;
 800366e:	f89d 403a 	ldrb.w	r4, [sp, #58]	; 0x3a
//	printf("Comp: Press = %f\n", p);

	p = (p * ((115.0 - 50.0) / 1023.0)) + 50.0;
//	printf("kPA Press = %f\n", p);

	ffrac = modf(p, &n);
 8003672:	a80c      	add	r0, sp, #48	; 0x30
	pr = (data[0] * 256 + data[1]) >> 6;
 8003674:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
	tr = (data[2] * 256 + data[3]) >> 6;
 8003678:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
	pr = (data[0] * 256 + data[1]) >> 6;
 800367c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
	tr = (data[2] * 256 + data[3]) >> 6;
 8003680:	eb02 2204 	add.w	r2, r2, r4, lsl #8
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8003684:	4c61      	ldr	r4, [pc, #388]	; (800380c <getpressure115+0x1fc>)
	pr = (data[0] * 256 + data[1]) >> 6;
 8003686:	eb03 2301 	add.w	r3, r3, r1, lsl #8
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 800368a:	4961      	ldr	r1, [pc, #388]	; (8003810 <getpressure115+0x200>)
	tr = (data[2] * 256 + data[3]) >> 6;
 800368c:	1192      	asrs	r2, r2, #6
	temperature = t;
	tempfrac = (t - temperature) * 100;

//	printf("\ntemperature1 = %d.%d  ", temperature, tempfrac);
//	printf("\ntemperature2 = %f  ", t);
	tempfrac = tempfrac * 100;	// now 10,000
 800368e:	4d61      	ldr	r5, [pc, #388]	; (8003814 <getpressure115+0x204>)
	pr = (data[0] * 256 + data[1]) >> 6;
 8003690:	099b      	lsrs	r3, r3, #6
	tr = (data[2] * 256 + data[3]) >> 6;
 8003692:	ee08 2a10 	vmov	s16, r2
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8003696:	4a60      	ldr	r2, [pc, #384]	; (8003818 <getpressure115+0x208>)
	p = pr;
 8003698:	ee07 3a90 	vmov	s15, r3
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 800369c:	4b5f      	ldr	r3, [pc, #380]	; (800381c <getpressure115+0x20c>)
	t = tr;
 800369e:	eeb8 6b48 	vcvt.f64.u32	d6, s16
	p = pr;
 80036a2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
	t = tr;
 80036a6:	ed8d 6b0a 	vstr	d6, [sp, #40]	; 0x28
	p = pr;
 80036aa:	ed8d 7b08 	vstr	d7, [sp, #32]
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 80036ae:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80036b2:	ed94 4b00 	vldr	d4, [r4]
 80036b6:	ed91 5b00 	vldr	d5, [r1]
 80036ba:	ed9d 1b08 	vldr	d1, [sp, #32]
 80036be:	ed92 7b00 	vldr	d7, [r2]
 80036c2:	eea4 5b06 	vfma.f64	d5, d4, d6
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 80036c6:	4c56      	ldr	r4, [pc, #344]	; (8003820 <getpressure115+0x210>)
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 80036c8:	ed9d 3b0a 	vldr	d3, [sp, #40]	; 0x28
 80036cc:	ed93 2b00 	vldr	d2, [r3]
	p = (p * ((115.0 - 50.0) / 1023.0)) + 50.0;
 80036d0:	ed9f 4b41 	vldr	d4, [pc, #260]	; 80037d8 <getpressure115+0x1c8>
 80036d4:	ed9f 6b42 	vldr	d6, [pc, #264]	; 80037e0 <getpressure115+0x1d0>
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 80036d8:	eea5 7b01 	vfma.f64	d7, d5, d1
 80036dc:	eea2 7b03 	vfma.f64	d7, d2, d3
 80036e0:	ed8d 7b08 	vstr	d7, [sp, #32]
	p = (p * ((115.0 - 50.0) / 1023.0)) + 50.0;
 80036e4:	ed9d 7b08 	vldr	d7, [sp, #32]
 80036e8:	eea7 6b04 	vfma.f64	d6, d7, d4
 80036ec:	ed8d 6b08 	vstr	d6, [sp, #32]
	ffrac = modf(p, &n);
 80036f0:	ed9d 0b08 	vldr	d0, [sp, #32]
 80036f4:	f01d fb2c 	bl	8020d50 <modf>
	t = tr * -0.1706 + 112.27; //C
 80036f8:	eeb8 7bc8 	vcvt.f64.s32	d7, s16

				printf("myt 0x%x, %d, t=%f, myf=%f\n\r",myt,myt,t,myf);

			}
#endif
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80036fc:	eeb3 8b00 	vmov.f64	d8, #48	; 0x41800000  16.0
	tempfrac = tempfrac * 100;	// now 10,000
 8003700:	2264      	movs	r2, #100	; 0x64
	temperature = t;
 8003702:	4b48      	ldr	r3, [pc, #288]	; (8003824 <getpressure115+0x214>)
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8003704:	4848      	ldr	r0, [pc, #288]	; (8003828 <getpressure115+0x218>)
	pressure = (uint32_t) n;
 8003706:	4949      	ldr	r1, [pc, #292]	; (800382c <getpressure115+0x21c>)
	t = tr * -0.1706 + 112.27; //C
 8003708:	ed9f 5b37 	vldr	d5, [pc, #220]	; 80037e8 <getpressure115+0x1d8>
 800370c:	ed9f 6b38 	vldr	d6, [pc, #224]	; 80037f0 <getpressure115+0x1e0>
	ffrac = modf(p, &n);
 8003710:	ed8d 0b06 	vstr	d0, [sp, #24]
	pressure = (uint32_t) n;
 8003714:	ed9d 3b0c 	vldr	d3, [sp, #48]	; 0x30
	t = tr * -0.1706 + 112.27; //C
 8003718:	eea7 6b05 	vfma.f64	d6, d7, d5
	pressure = (uint32_t) n;
 800371c:	eebc 3bc3 	vcvt.u32.f64	s6, d3
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 8003720:	ed9d 4b06 	vldr	d4, [sp, #24]
 8003724:	ed9f 0b34 	vldr	d0, [pc, #208]	; 80037f8 <getpressure115+0x1e8>
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8003728:	ed9f 1b35 	vldr	d1, [pc, #212]	; 8003800 <getpressure115+0x1f0>
	pressure = (uint32_t) n;
 800372c:	ed81 3a00 	vstr	s6, [r1]
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 8003730:	ee24 4b00 	vmul.f64	d4, d4, d0
	t = tr * -0.1706 + 112.27; //C
 8003734:	ed8d 6b0a 	vstr	d6, [sp, #40]	; 0x28
	temperature = t;
 8003738:	ed9d 2b0a 	vldr	d2, [sp, #40]	; 0x28
	tempfrac = (t - temperature) * 100;
 800373c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8003740:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
	temperature = t;
 8003744:	eebc 2bc2 	vcvt.u32.f64	s4, d2
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 8003748:	eebc 4bc4 	vcvt.u32.f64	s8, d4
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 800374c:	ee26 6b08 	vmul.f64	d6, d6, d8
	temperature = t;
 8003750:	ed83 2a00 	vstr	s4, [r3]
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 8003754:	ed84 4a00 	vstr	s8, [r4]
	tempfrac = (t - temperature) * 100;
 8003758:	eeb8 7b42 	vcvt.f64.u32	d7, s4
 800375c:	ee35 5b47 	vsub.f64	d5, d5, d7
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8003760:	feb8 6b46 	vrinta.f64	d6, d6
 8003764:	eefc 6bc6 	vcvt.u32.f64	s13, d6
	tempfrac = (t - temperature) * 100;
 8003768:	ee25 5b00 	vmul.f64	d5, d5, d0
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 800376c:	ee16 3a90 	vmov	r3, s13
 8003770:	ed9d 7b08 	vldr	d7, [sp, #32]
	tempfrac = (t - temperature) * 100;
 8003774:	eebc 5bc5 	vcvt.u32.f64	s10, d5
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8003778:	ee27 7b01 	vmul.f64	d7, d7, d1
	tempfrac = tempfrac * 100;	// now 10,000
 800377c:	ee15 6a10 	vmov	r6, s10
 8003780:	fb02 f206 	mul.w	r2, r2, r6
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8003784:	feb8 7b47 	vrinta.f64	d7, d7
 8003788:	eebc 7bc7 	vcvt.u32.f64	s14, d7
	tempfrac = tempfrac * 100;	// now 10,000
 800378c:	602a      	str	r2, [r5, #0]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 800378e:	ee17 2a10 	vmov	r2, s14
 8003792:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
 8003796:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
//	printf("statuspkt.temppress temp=%f, press=%f\n\r", (float) ((statuspkt.temppress >> 20)) / 16.0,
//			(float) ((statuspkt.temppress & 0x000FFFFF) / 4000.0));
	return (HAL_OK);
}
 800379a:	4638      	mov	r0, r7
 800379c:	b011      	add	sp, #68	; 0x44
 800379e:	ecbd 8b02 	vpop	{d8}
 80037a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			printf("I2C MPL115 HAL returned error %d\n\r", result);
 80037a6:	4601      	mov	r1, r0
 80037a8:	4648      	mov	r0, r9
 80037aa:	f01d fa05 	bl	8020bb8 <iprintf>
			if (i == 3)
 80037ae:	2c03      	cmp	r4, #3
 80037b0:	f47f af5a 	bne.w	8003668 <getpressure115+0x58>
 80037b4:	4637      	mov	r7, r6
}
 80037b6:	4638      	mov	r0, r7
 80037b8:	b011      	add	sp, #68	; 0x44
 80037ba:	ecbd 8b02 	vpop	{d8}
 80037be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		printf("I2C MPL115 HAL returned error 7\n\r");
 80037c2:	481b      	ldr	r0, [pc, #108]	; (8003830 <getpressure115+0x220>)
 80037c4:	f01d f9f8 	bl	8020bb8 <iprintf>
}
 80037c8:	4638      	mov	r0, r7
 80037ca:	b011      	add	sp, #68	; 0x44
 80037cc:	ecbd 8b02 	vpop	{d8}
 80037d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80037d4:	f3af 8000 	nop.w
 80037d8:	04411044 	.word	0x04411044
 80037dc:	3fb04411 	.word	0x3fb04411
 80037e0:	00000000 	.word	0x00000000
 80037e4:	40490000 	.word	0x40490000
 80037e8:	86594af5 	.word	0x86594af5
 80037ec:	bfc5d638 	.word	0xbfc5d638
 80037f0:	ae147ae1 	.word	0xae147ae1
 80037f4:	405c1147 	.word	0x405c1147
 80037f8:	00000000 	.word	0x00000000
 80037fc:	40590000 	.word	0x40590000
 8003800:	00000000 	.word	0x00000000
 8003804:	40af4000 	.word	0x40af4000
 8003808:	2002ab38 	.word	0x2002ab38
 800380c:	20001680 	.word	0x20001680
 8003810:	20001670 	.word	0x20001670
 8003814:	2002b438 	.word	0x2002b438
 8003818:	20001668 	.word	0x20001668
 800381c:	20001678 	.word	0x20001678
 8003820:	2002b444 	.word	0x2002b444
 8003824:	2002b43c 	.word	0x2002b43c
 8003828:	2002a784 	.word	0x2002a784
 800382c:	2002b440 	.word	0x2002b440
 8003830:	08025e18 	.word	0x08025e18
 8003834:	08025e3c 	.word	0x08025e3c

08003838 <initpressure115>:

// the cheap pressure sensor
HAL_StatusTypeDef initpressure115(void) {
 8003838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const uint8_t testcoef[] = {0x3E, 0xCE, 0xb3, 0xF9, 0xC5, 0x17, 0x33, 0xC8};
#endif
	int i;

	for (i = 0; i < 8; i++)
		data[i] = 0x5A;
 800383c:	f04f 335a 	mov.w	r3, #1515870810	; 0x5a5a5a5a
HAL_StatusTypeDef initpressure115(void) {
 8003840:	b086      	sub	sp, #24

//	if (HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x04 }, 1, 1000) != HAL_OK) {	// CMD Read �Coefficient data byte 1 High byte� = 0x04
//		printf("I2C 115 HAL returned error 5\n\r");
//	}

	for (i = 0; i < 8; i++) {
 8003842:	2400      	movs	r4, #0
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 8003844:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 8003848:	2701      	movs	r7, #1
 800384a:	4e33      	ldr	r6, [pc, #204]	; (8003918 <initpressure115+0xe0>)
		data[i] = 0x5A;
 800384c:	e9cd 3304 	strd	r3, r3, [sp, #16]
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 8003850:	ab04      	add	r3, sp, #16
 8003852:	1d22      	adds	r2, r4, #4
 8003854:	21c0      	movs	r1, #192	; 0xc0
 8003856:	4630      	mov	r0, r6
 8003858:	4423      	add	r3, r4
 800385a:	b292      	uxth	r2, r2
 800385c:	3401      	adds	r4, #1
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	2301      	movs	r3, #1
 8003862:	e9cd 7801 	strd	r7, r8, [sp, #4]
 8003866:	f005 fc0f 	bl	8009088 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 800386a:	4605      	mov	r5, r0
 800386c:	2800      	cmp	r0, #0
 800386e:	d142      	bne.n	80038f6 <initpressure115+0xbe>
	for (i = 0; i < 8; i++) {
 8003870:	2c08      	cmp	r4, #8
 8003872:	d1ed      	bne.n	8003850 <initpressure115+0x18>
	for (i = 0; i < 8; i++) {
		printf(" %x", data[i]);
	}
#endif

	if (data[0] == 0x5a) {
 8003874:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8003878:	2c5a      	cmp	r4, #90	; 0x5a
 800387a:	d044      	beq.n	8003906 <initpressure115+0xce>
		printf("Splat1-2 MPL115A2 I2C not present?\n\r");
		return (HAL_ERROR);		// expected a changed reading - is device present?
	}

	a0co = (data[0] << 8) | data[1];
	b1co = (data[2] << 8) | data[3];
 800387c:	f89d 2012 	ldrb.w	r2, [sp, #18]
	b2co = (data[4] << 8) | data[5];
 8003880:	f89d 3014 	ldrb.w	r3, [sp, #20]
	b1co = (data[2] << 8) | data[3];
 8003884:	f89d 0013 	ldrb.w	r0, [sp, #19]
	b2co = (data[4] << 8) | data[5];
 8003888:	f89d 1015 	ldrb.w	r1, [sp, #21]
	c12co = (data[6] << 8) | data[7];
 800388c:	f89d 6016 	ldrb.w	r6, [sp, #22]
	b1co = (data[2] << 8) | data[3];
 8003890:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
	b2co = (data[4] << 8) | data[5];
 8003894:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
	c12co = (data[6] << 8) | data[7];
 8003898:	f89d 2017 	ldrb.w	r2, [sp, #23]
	a0co = (data[0] << 8) | data[1];
 800389c:	f89d 3011 	ldrb.w	r3, [sp, #17]
	b1co = (data[2] << 8) | data[3];
 80038a0:	b200      	sxth	r0, r0
	c12co = (data[6] << 8) | data[7];
 80038a2:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
	a0co = (data[0] << 8) | data[1];
 80038a6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
//a0co = 0x3ECE ; b1co = 0xB3F9; b2co = 0xC517; c12co = 0x33C8;  // force fixed coeficients

//	printf("\na0co=%hx, b1co=%hx, b2co=%hx, c12co=%hx\n", a0co, b1co, b2co, c12co);

	a0 = (double) a0co / 8;
	b1 = (double) b1co / 8192;
 80038aa:	ee04 0a10 	vmov	s8, r0
 80038ae:	eeba 4be9 	vcvt.f64.s32	d4, d4, #13
	b2co = (data[4] << 8) | data[5];
 80038b2:	b209      	sxth	r1, r1
	b2 = (double) b2co / 16384;
	c12 = (double) c12co;
 80038b4:	f342 028d 	sbfx	r2, r2, #2, #14
	a0 = (double) a0co / 8;
 80038b8:	b21b      	sxth	r3, r3
	b1 = (double) b1co / 8192;
 80038ba:	4818      	ldr	r0, [pc, #96]	; (800391c <initpressure115+0xe4>)
	b2 = (double) b2co / 16384;
 80038bc:	ee05 1a10 	vmov	s10, r1
 80038c0:	eeba 5bc9 	vcvt.f64.s32	d5, d5, #14
 80038c4:	4916      	ldr	r1, [pc, #88]	; (8003920 <initpressure115+0xe8>)
	c12 /= (double) 4194304.0;
 80038c6:	ee06 2a10 	vmov	s12, r2
 80038ca:	eeba 6bc5 	vcvt.f64.s32	d6, d6, #22
 80038ce:	4a15      	ldr	r2, [pc, #84]	; (8003924 <initpressure115+0xec>)
	a0 = (double) a0co / 8;
 80038d0:	ee07 3a10 	vmov	s14, r3
 80038d4:	eeba 7bee 	vcvt.f64.s32	d7, d7, #3
 80038d8:	4b13      	ldr	r3, [pc, #76]	; (8003928 <initpressure115+0xf0>)
	b1 = (double) b1co / 8192;
 80038da:	ed80 4b00 	vstr	d4, [r0]
	b2 = (double) b2co / 16384;
 80038de:	ed81 5b00 	vstr	d5, [r1]
	c12 /= (double) 4194304.0;
 80038e2:	ed82 6b00 	vstr	d6, [r2]
	a0 = (double) a0co / 8;
 80038e6:	ed83 7b00 	vstr	d7, [r3]

//	printf("a0=%f, b1=%f, b2=%f, c12=%f\n", a0, b1, b2, c12);
	getpressure115();
 80038ea:	f7ff fe91 	bl	8003610 <getpressure115>
	return (HAL_OK);
}
 80038ee:	4628      	mov	r0, r5
 80038f0:	b006      	add	sp, #24
 80038f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			printf("Splat1-2 MPL115A2 I2C HAL returned error %d\n\r", result);
 80038f6:	4601      	mov	r1, r0
 80038f8:	480c      	ldr	r0, [pc, #48]	; (800392c <initpressure115+0xf4>)
 80038fa:	f01d f95d 	bl	8020bb8 <iprintf>
}
 80038fe:	4628      	mov	r0, r5
 8003900:	b006      	add	sp, #24
 8003902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return (HAL_ERROR);		// expected a changed reading - is device present?
 8003906:	2501      	movs	r5, #1
		printf("Splat1-2 MPL115A2 I2C not present?\n\r");
 8003908:	4809      	ldr	r0, [pc, #36]	; (8003930 <initpressure115+0xf8>)
 800390a:	f01d f955 	bl	8020bb8 <iprintf>
}
 800390e:	4628      	mov	r0, r5
 8003910:	b006      	add	sp, #24
 8003912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003916:	bf00      	nop
 8003918:	2002ab38 	.word	0x2002ab38
 800391c:	20001670 	.word	0x20001670
 8003920:	20001678 	.word	0x20001678
 8003924:	20001680 	.word	0x20001680
 8003928:	20001668 	.word	0x20001668
 800392c:	08025ee4 	.word	0x08025ee4
 8003930:	08025f14 	.word	0x08025f14

08003934 <getpressure3115>:
//////////////////////////////////////////////
//
// get the pressure and put in globals Sensor MPL3115A2
//
//////////////////////////////////////////////
HAL_StatusTypeDef getpressure3115(void) {
 8003934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003938:	b08c      	sub	sp, #48	; 0x30
	HAL_StatusTypeDef result;
	volatile uint32_t p, t;
//	double ffp, ffn, ffrac;
	volatile uint32_t ifp, ifn, ifrac;

	data[0] = 0x55;
 800393a:	2355      	movs	r3, #85	; 0x55
	for (trys = 0; trys < 4; trys++) {
 800393c:	2500      	movs	r5, #0
		osDelay(10);
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0, 1, &data[0], 1, 1000); // rd status reg pressure sense
 800393e:	4f48      	ldr	r7, [pc, #288]	; (8003a60 <getpressure3115+0x12c>)
	data[0] = 0x55;
 8003940:	ae0c      	add	r6, sp, #48	; 0x30
		if (result != HAL_OK) {
			printf("Splat1-1 I2C HAL returned error %d\n\r", result);
 8003942:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8003a80 <getpressure3115+0x14c>
	data[0] = 0x55;
 8003946:	f806 3d10 	strb.w	r3, [r6, #-16]!
		osDelay(10);
 800394a:	200a      	movs	r0, #10
 800394c:	f00d fbc4 	bl	80110d8 <osDelay>
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8003950:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003954:	2301      	movs	r3, #1
 8003956:	9600      	str	r6, [sp, #0]
 8003958:	9202      	str	r2, [sp, #8]
 800395a:	21c0      	movs	r1, #192	; 0xc0
 800395c:	2200      	movs	r2, #0
 800395e:	9301      	str	r3, [sp, #4]
 8003960:	4638      	mov	r0, r7
 8003962:	f005 fb91 	bl	8009088 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 8003966:	4604      	mov	r4, r0
 8003968:	2800      	cmp	r0, #0
 800396a:	d167      	bne.n	8003a3c <getpressure3115+0x108>
			if (trys == 3)
				return (result);
		} // no HAL error
		if (data[0] & 0x08)
 800396c:	f89d 3020 	ldrb.w	r3, [sp, #32]
	for (trys = 0; trys < 4; trys++) {
 8003970:	3501      	adds	r5, #1
		if (data[0] & 0x08)
 8003972:	071b      	lsls	r3, r3, #28
 8003974:	d401      	bmi.n	800397a <getpressure3115+0x46>
	for (trys = 0; trys < 4; trys++) {
 8003976:	2d04      	cmp	r5, #4
 8003978:	d1e7      	bne.n	800394a <getpressure3115+0x16>
 800397a:	2501      	movs	r5, #1
 800397c:	af0a      	add	r7, sp, #40	; 0x28
			break;		// data is ready
	} // for
//		printf("Press stat: 0x%0x\n", data[0]);

	for (i = 1; i < 6; i++) {
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i, 1, &data[0], 1, 1000); // rd status reg pressure sense
 800397e:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
 8003982:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 8003a60 <getpressure3115+0x12c>
 8003986:	46a8      	mov	r8, r5
 8003988:	2301      	movs	r3, #1
 800398a:	b2aa      	uxth	r2, r5
 800398c:	f8cd a008 	str.w	sl, [sp, #8]
 8003990:	21c0      	movs	r1, #192	; 0xc0
 8003992:	f8cd 8004 	str.w	r8, [sp, #4]
 8003996:	4648      	mov	r0, r9
 8003998:	9600      	str	r6, [sp, #0]
	for (i = 1; i < 6; i++) {
 800399a:	441d      	add	r5, r3
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i, 1, &data[0], 1, 1000); // rd status reg pressure sense
 800399c:	f005 fb74 	bl	8009088 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 80039a0:	4604      	mov	r4, r0
 80039a2:	2800      	cmp	r0, #0
 80039a4:	d154      	bne.n	8003a50 <getpressure3115+0x11c>
			printf("Splat1-2 I2C HAL returned error %d\n\r", result);
			return (result);
		}
		dataout[i - 1] = data[0];
 80039a6:	f89d 3020 	ldrb.w	r3, [sp, #32]
	for (i = 1; i < 6; i++) {
 80039aa:	2d06      	cmp	r5, #6
		dataout[i - 1] = data[0];
 80039ac:	f807 3b01 	strb.w	r3, [r7], #1
	for (i = 1; i < 6; i++) {
 80039b0:	d1ea      	bne.n	8003988 <getpressure3115+0x54>
//				printf("[0x%02x] ", data[0]);
	}  // for

	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 80039b2:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29

#endif

	// convert quarterpascals to kilopascals
	ifn = p / 4000;		// kilopascals
	ifrac = (p % 4000);		// fractions of a kilopascal
 80039b6:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 80039ba:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28

	pressure = ifn;
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52

	temperature = t >> 4;
	tempfrac = (t & 0x0F) * 625 * 100;
 80039be:	f24f 4124 	movw	r1, #62500	; 0xf424
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 80039c2:	0212      	lsls	r2, r2, #8
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 80039c4:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80039c8:	f89d 602b 	ldrb.w	r6, [sp, #43]	; 0x2b
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 80039cc:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 80039d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 80039d4:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 80039d8:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
	pressure = ifn;
 80039dc:	4e21      	ldr	r6, [pc, #132]	; (8003a64 <getpressure3115+0x130>)
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 80039de:	432a      	orrs	r2, r5
	statuspkt.temppress = t << 20 | p;								// update status packet
 80039e0:	4d21      	ldr	r5, [pc, #132]	; (8003a68 <getpressure3115+0x134>)
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 80039e2:	111b      	asrs	r3, r3, #4
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 80039e4:	0912      	lsrs	r2, r2, #4
 80039e6:	9204      	str	r2, [sp, #16]
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 80039e8:	9305      	str	r3, [sp, #20]
	statuspkt.temppress = t << 20 | p;								// update status packet
 80039ea:	9b05      	ldr	r3, [sp, #20]
 80039ec:	9a04      	ldr	r2, [sp, #16]
 80039ee:	ea42 5203 	orr.w	r2, r2, r3, lsl #20
	ifn = p / 4000;		// kilopascals
 80039f2:	4b1e      	ldr	r3, [pc, #120]	; (8003a6c <getpressure3115+0x138>)
	statuspkt.temppress = t << 20 | p;								// update status packet
 80039f4:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
	ifn = p / 4000;		// kilopascals
 80039f8:	9a04      	ldr	r2, [sp, #16]
 80039fa:	fba3 5202 	umull	r5, r2, r3, r2
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52
 80039fe:	4d1c      	ldr	r5, [pc, #112]	; (8003a70 <getpressure3115+0x13c>)
	ifn = p / 4000;		// kilopascals
 8003a00:	0a12      	lsrs	r2, r2, #8
 8003a02:	9206      	str	r2, [sp, #24]
	ifrac = (p % 4000);		// fractions of a kilopascal
 8003a04:	9a04      	ldr	r2, [sp, #16]
 8003a06:	fba3 7302 	umull	r7, r3, r3, r2
	temperature = t >> 4;
 8003a0a:	4f1a      	ldr	r7, [pc, #104]	; (8003a74 <getpressure3115+0x140>)
	ifrac = (p % 4000);		// fractions of a kilopascal
 8003a0c:	0a1b      	lsrs	r3, r3, #8
 8003a0e:	fb00 2313 	mls	r3, r0, r3, r2
 8003a12:	9307      	str	r3, [sp, #28]
	pressure = ifn;
 8003a14:	f8dd c018 	ldr.w	ip, [sp, #24]
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52
 8003a18:	9807      	ldr	r0, [sp, #28]
	temperature = t >> 4;
 8003a1a:	9b05      	ldr	r3, [sp, #20]
	tempfrac = (t & 0x0F) * 625 * 100;
 8003a1c:	9a05      	ldr	r2, [sp, #20]
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52
 8003a1e:	6028      	str	r0, [r5, #0]
	temperature = t >> 4;
 8003a20:	091b      	lsrs	r3, r3, #4
	tempfrac = (t & 0x0F) * 625 * 100;
 8003a22:	f002 020f 	and.w	r2, r2, #15
 8003a26:	4814      	ldr	r0, [pc, #80]	; (8003a78 <getpressure3115+0x144>)
	pressure = ifn;
 8003a28:	f8c6 c000 	str.w	ip, [r6]
	tempfrac = (t & 0x0F) * 625 * 100;
 8003a2c:	fb01 f102 	mul.w	r1, r1, r2
	temperature = t >> 4;
 8003a30:	603b      	str	r3, [r7, #0]
	tempfrac = (t & 0x0F) * 625 * 100;
 8003a32:	6001      	str	r1, [r0, #0]
			(float) ((statuspkt.temppress & 0x000FFFFF) / 4000.0));
	}
#endif

	return (result);
}
 8003a34:	4620      	mov	r0, r4
 8003a36:	b00c      	add	sp, #48	; 0x30
 8003a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-1 I2C HAL returned error %d\n\r", result);
 8003a3c:	4601      	mov	r1, r0
 8003a3e:	4640      	mov	r0, r8
 8003a40:	f01d f8ba 	bl	8020bb8 <iprintf>
			if (trys == 3)
 8003a44:	2d03      	cmp	r5, #3
 8003a46:	d191      	bne.n	800396c <getpressure3115+0x38>
}
 8003a48:	4620      	mov	r0, r4
 8003a4a:	b00c      	add	sp, #48	; 0x30
 8003a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-2 I2C HAL returned error %d\n\r", result);
 8003a50:	4601      	mov	r1, r0
 8003a52:	480a      	ldr	r0, [pc, #40]	; (8003a7c <getpressure3115+0x148>)
 8003a54:	f01d f8b0 	bl	8020bb8 <iprintf>
}
 8003a58:	4620      	mov	r0, r4
 8003a5a:	b00c      	add	sp, #48	; 0x30
 8003a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a60:	2002ab38 	.word	0x2002ab38
 8003a64:	2002b440 	.word	0x2002b440
 8003a68:	2002a784 	.word	0x2002a784
 8003a6c:	10624dd3 	.word	0x10624dd3
 8003a70:	2002b444 	.word	0x2002b444
 8003a74:	2002b43c 	.word	0x2002b43c
 8003a78:	2002b438 	.word	0x2002b438
 8003a7c:	08025e88 	.word	0x08025e88
 8003a80:	08025e60 	.word	0x08025e60

08003a84 <initpressure3115>:

HAL_StatusTypeDef initpressure3115(void)	// returns 1 on bad MPL3115, 0 on good.
{
 8003a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a86:	b08b      	sub	sp, #44	; 0x2c
	int i, step;
	uint8_t data[8];
	HAL_StatusTypeDef result;

	result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0x0c, 1, &data[0], 1, 1000); // rd who am i register
 8003a88:	2501      	movs	r5, #1
 8003a8a:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8003a8e:	220c      	movs	r2, #12
 8003a90:	a808      	add	r0, sp, #32
 8003a92:	462b      	mov	r3, r5
 8003a94:	9602      	str	r6, [sp, #8]
 8003a96:	21c0      	movs	r1, #192	; 0xc0
 8003a98:	9000      	str	r0, [sp, #0]
 8003a9a:	9501      	str	r5, [sp, #4]
 8003a9c:	482f      	ldr	r0, [pc, #188]	; (8003b5c <initpressure3115+0xd8>)
 8003a9e:	f005 faf3 	bl	8009088 <HAL_I2C_Mem_Read>
	if (result != HAL_OK) {
 8003aa2:	b938      	cbnz	r0, 8003ab4 <initpressure3115+0x30>
		printf("I2C HAL returned error 1\n\r");
		return (result);
	}
	if (data[0] != 0xc4)		// not the default MPL3115 ID
 8003aa4:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8003aa8:	2bc4      	cmp	r3, #196	; 0xc4
 8003aaa:	d00a      	beq.n	8003ac2 <initpressure3115+0x3e>
		return (HAL_ERROR);
 8003aac:	462c      	mov	r4, r5
	if (result != HAL_OK) {
		printf("MPL3115A2 getpressure failed\n\r");
	}

	return (result);
}
 8003aae:	4620      	mov	r0, r4
 8003ab0:	b00b      	add	sp, #44	; 0x2c
 8003ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ab4:	4604      	mov	r4, r0
		printf("I2C HAL returned error 1\n\r");
 8003ab6:	482a      	ldr	r0, [pc, #168]	; (8003b60 <initpressure3115+0xdc>)
 8003ab8:	f01d f87e 	bl	8020bb8 <iprintf>
}
 8003abc:	4620      	mov	r0, r4
 8003abe:	b00b      	add	sp, #44	; 0x2c
 8003ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x26, 0x38 }, 2, 1000);
 8003ac2:	4f28      	ldr	r7, [pc, #160]	; (8003b64 <initpressure3115+0xe0>)
 8003ac4:	aa0a      	add	r2, sp, #40	; 0x28
 8003ac6:	9600      	str	r6, [sp, #0]
 8003ac8:	2302      	movs	r3, #2
 8003aca:	89bc      	ldrh	r4, [r7, #12]
 8003acc:	21c0      	movs	r1, #192	; 0xc0
 8003ace:	4823      	ldr	r0, [pc, #140]	; (8003b5c <initpressure3115+0xd8>)
 8003ad0:	f822 4d14 	strh.w	r4, [r2, #-20]!
 8003ad4:	f005 fa32 	bl	8008f3c <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8003ad8:	4604      	mov	r4, r0
 8003ada:	bb78      	cbnz	r0, 8003b3c <initpressure3115+0xb8>
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x13, 0x07 }, 2, 1000); // enbl data flags pressure sense
 8003adc:	8a39      	ldrh	r1, [r7, #16]
 8003ade:	aa0a      	add	r2, sp, #40	; 0x28
 8003ae0:	9600      	str	r6, [sp, #0]
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	f822 1d10 	strh.w	r1, [r2, #-16]!
 8003ae8:	21c0      	movs	r1, #192	; 0xc0
 8003aea:	481c      	ldr	r0, [pc, #112]	; (8003b5c <initpressure3115+0xd8>)
 8003aec:	f005 fa26 	bl	8008f3c <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8003af0:	4604      	mov	r4, r0
 8003af2:	bb38      	cbnz	r0, 8003b44 <initpressure3115+0xc0>
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x26, 0x39 }, 2, 1000); // set active pressure sense
 8003af4:	8ab9      	ldrh	r1, [r7, #20]
 8003af6:	aa0a      	add	r2, sp, #40	; 0x28
 8003af8:	9600      	str	r6, [sp, #0]
 8003afa:	2302      	movs	r3, #2
 8003afc:	f822 1d0c 	strh.w	r1, [r2, #-12]!
 8003b00:	21c0      	movs	r1, #192	; 0xc0
 8003b02:	4816      	ldr	r0, [pc, #88]	; (8003b5c <initpressure3115+0xd8>)
 8003b04:	f005 fa1a 	bl	8008f3c <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8003b08:	4604      	mov	r4, r0
 8003b0a:	b9f8      	cbnz	r0, 8003b4c <initpressure3115+0xc8>
	osDelay(100);	// allow chip to start up sampling
 8003b0c:	2064      	movs	r0, #100	; 0x64
 8003b0e:	f00d fae3 	bl	80110d8 <osDelay>
	result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 1, 1, &data[0], 1, 1000); // rd msb of press reg to clear ready flags in SR
 8003b12:	aa08      	add	r2, sp, #32
 8003b14:	462b      	mov	r3, r5
 8003b16:	21c0      	movs	r1, #192	; 0xc0
 8003b18:	9200      	str	r2, [sp, #0]
 8003b1a:	462a      	mov	r2, r5
 8003b1c:	480f      	ldr	r0, [pc, #60]	; (8003b5c <initpressure3115+0xd8>)
 8003b1e:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8003b22:	f005 fab1 	bl	8009088 <HAL_I2C_Mem_Read>
	if (result != HAL_OK) {
 8003b26:	4604      	mov	r4, r0
 8003b28:	b9a0      	cbnz	r0, 8003b54 <initpressure3115+0xd0>
	result = getpressure3115();
 8003b2a:	f7ff ff03 	bl	8003934 <getpressure3115>
	if (result != HAL_OK) {
 8003b2e:	4604      	mov	r4, r0
 8003b30:	2800      	cmp	r0, #0
 8003b32:	d0bc      	beq.n	8003aae <initpressure3115+0x2a>
		printf("MPL3115A2 getpressure failed\n\r");
 8003b34:	480c      	ldr	r0, [pc, #48]	; (8003b68 <initpressure3115+0xe4>)
 8003b36:	f01d f83f 	bl	8020bb8 <iprintf>
 8003b3a:	e7b8      	b.n	8003aae <initpressure3115+0x2a>
		printf("I2C HAL returned error 2b\n\r");
 8003b3c:	480b      	ldr	r0, [pc, #44]	; (8003b6c <initpressure3115+0xe8>)
 8003b3e:	f01d f83b 	bl	8020bb8 <iprintf>
		return (result);
 8003b42:	e7b4      	b.n	8003aae <initpressure3115+0x2a>
		printf("I2C HAL returned error 3\n\r");
 8003b44:	480a      	ldr	r0, [pc, #40]	; (8003b70 <initpressure3115+0xec>)
 8003b46:	f01d f837 	bl	8020bb8 <iprintf>
		return (result);
 8003b4a:	e7b0      	b.n	8003aae <initpressure3115+0x2a>
		printf("I2C HAL returned error 4\n\r");
 8003b4c:	4809      	ldr	r0, [pc, #36]	; (8003b74 <initpressure3115+0xf0>)
 8003b4e:	f01d f833 	bl	8020bb8 <iprintf>
		return (result);
 8003b52:	e7ac      	b.n	8003aae <initpressure3115+0x2a>
		printf("I2C HAL returned error 5\n\r");
 8003b54:	4808      	ldr	r0, [pc, #32]	; (8003b78 <initpressure3115+0xf4>)
 8003b56:	f01d f82f 	bl	8020bb8 <iprintf>
		return (result);
 8003b5a:	e7a8      	b.n	8003aae <initpressure3115+0x2a>
 8003b5c:	2002ab38 	.word	0x2002ab38
 8003b60:	08025eb0 	.word	0x08025eb0
 8003b64:	08024a78 	.word	0x08024a78
 8003b68:	08025fac 	.word	0x08025fac
 8003b6c:	08025f3c 	.word	0x08025f3c
 8003b70:	08025f58 	.word	0x08025f58
 8003b74:	08025f74 	.word	0x08025f74
 8003b78:	08025f90 	.word	0x08025f90

08003b7c <initsplat>:
//////////////////////////////////////////////
//
// Initialise the splat board
//
//////////////////////////////////////////////
void initsplat(void) {
 8003b7c:	b510      	push	{r4, lr}
	int i, j, k;

	cycleleds();
 8003b7e:	f7ff fc29 	bl	80033d4 <cycleleds>
	osDelay(500);
 8003b82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003b86:	f00d faa7 	bl	80110d8 <osDelay>
	printf("Initsplat: LED cycle\n");
 8003b8a:	4827      	ldr	r0, [pc, #156]	; (8003c28 <initsplat+0xac>)
 8003b8c:	f01d f89c 	bl	8020cc8 <puts>

	printf("Initsplat: Dual Mux\n\r");
 8003b90:	4826      	ldr	r0, [pc, #152]	; (8003c2c <initsplat+0xb0>)
 8003b92:	f01d f811 	bl	8020bb8 <iprintf>
	printf("Initsplat: Programmable Gain Amp\n");
	initpga();

	osDelay(500);
	printf("initsplat: Pressure sensor\n\r");
	psensor = PNONE;
 8003b96:	4c26      	ldr	r4, [pc, #152]	; (8003c30 <initsplat+0xb4>)
	initdualmux();
 8003b98:	f7ff fd1c 	bl	80035d4 <initdualmux>
	osDelay(500);
 8003b9c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003ba0:	f00d fa9a 	bl	80110d8 <osDelay>
	printf("Initsplat: Programmable Gain Amp\n");
 8003ba4:	4823      	ldr	r0, [pc, #140]	; (8003c34 <initsplat+0xb8>)
 8003ba6:	f01d f88f 	bl	8020cc8 <puts>
	initpga();
 8003baa:	f7ff fc89 	bl	80034c0 <initpga>
	osDelay(500);
 8003bae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003bb2:	f00d fa91 	bl	80110d8 <osDelay>
	printf("initsplat: Pressure sensor\n\r");
 8003bb6:	4820      	ldr	r0, [pc, #128]	; (8003c38 <initsplat+0xbc>)
 8003bb8:	f01c fffe 	bl	8020bb8 <iprintf>
	psensor = PNONE;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	6023      	str	r3, [r4, #0]
	if (initpressure3115() == HAL_OK) {	// non zero result means MPL3115 nogood
 8003bc0:	f7ff ff60 	bl	8003a84 <initpressure3115>
 8003bc4:	b1e8      	cbz	r0, 8003c02 <initsplat+0x86>
		printf("MPL3115A2 pressure sensor present\n\r");
		psensor = MPL3115A2;
		statuspkt.bconf |= (MPL3115A2<<3);
	} else {
		if (initpressure115() == HAL_OK) {
 8003bc6:	f7ff fe37 	bl	8003838 <initpressure115>
 8003bca:	b140      	cbz	r0, 8003bde <initsplat+0x62>
			printf("MPL115A2 pressure sensor present\n\r");
			psensor = MPL115A2;		// assume MPL115 fitted instead
			statuspkt.bconf |= (MPL115A2<<3);
		} else {
			printf("NO pressure sensor present\n\r");
 8003bcc:	481b      	ldr	r0, [pc, #108]	; (8003c3c <initsplat+0xc0>)
 8003bce:	f01c fff3 	bl	8020bb8 <iprintf>
		}
	}
	osDelay(500);
 8003bd2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
 8003bd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osDelay(500);
 8003bda:	f00d ba7d 	b.w	80110d8 <osDelay>
			printf("MPL115A2 pressure sensor present\n\r");
 8003bde:	4818      	ldr	r0, [pc, #96]	; (8003c40 <initsplat+0xc4>)
 8003be0:	f01c ffea 	bl	8020bb8 <iprintf>
			statuspkt.bconf |= (MPL115A2<<3);
 8003be4:	4a17      	ldr	r2, [pc, #92]	; (8003c44 <initsplat+0xc8>)
			psensor = MPL115A2;		// assume MPL115 fitted instead
 8003be6:	2101      	movs	r1, #1
	osDelay(500);
 8003be8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
			statuspkt.bconf |= (MPL115A2<<3);
 8003bec:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
			psensor = MPL115A2;		// assume MPL115 fitted instead
 8003bf0:	6021      	str	r1, [r4, #0]
			statuspkt.bconf |= (MPL115A2<<3);
 8003bf2:	f043 0308 	orr.w	r3, r3, #8
}
 8003bf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			statuspkt.bconf |= (MPL115A2<<3);
 8003bfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	osDelay(500);
 8003bfe:	f00d ba6b 	b.w	80110d8 <osDelay>
		printf("MPL3115A2 pressure sensor present\n\r");
 8003c02:	4811      	ldr	r0, [pc, #68]	; (8003c48 <initsplat+0xcc>)
 8003c04:	f01c ffd8 	bl	8020bb8 <iprintf>
		statuspkt.bconf |= (MPL3115A2<<3);
 8003c08:	4a0e      	ldr	r2, [pc, #56]	; (8003c44 <initsplat+0xc8>)
		psensor = MPL3115A2;
 8003c0a:	2102      	movs	r1, #2
	osDelay(500);
 8003c0c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
		statuspkt.bconf |= (MPL3115A2<<3);
 8003c10:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
		psensor = MPL3115A2;
 8003c14:	6021      	str	r1, [r4, #0]
		statuspkt.bconf |= (MPL3115A2<<3);
 8003c16:	f043 0310 	orr.w	r3, r3, #16
}
 8003c1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		statuspkt.bconf |= (MPL3115A2<<3);
 8003c1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	osDelay(500);
 8003c22:	f00d ba59 	b.w	80110d8 <osDelay>
 8003c26:	bf00      	nop
 8003c28:	08025fcc 	.word	0x08025fcc
 8003c2c:	08025fe4 	.word	0x08025fe4
 8003c30:	2000168c 	.word	0x2000168c
 8003c34:	08025ffc 	.word	0x08025ffc
 8003c38:	08026020 	.word	0x08026020
 8003c3c:	08026088 	.word	0x08026088
 8003c40:	08026064 	.word	0x08026064
 8003c44:	2002a784 	.word	0x2002a784
 8003c48:	08026040 	.word	0x08026040

08003c4c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003c4c:	4b16      	ldr	r3, [pc, #88]	; (8003ca8 <HAL_MspInit+0x5c>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003c4e:	2200      	movs	r2, #0
 8003c50:	210f      	movs	r1, #15
 8003c52:	f06f 0001 	mvn.w	r0, #1
{
 8003c56:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c58:	6c1c      	ldr	r4, [r3, #64]	; 0x40
{
 8003c5a:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c5c:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8003c60:	641c      	str	r4, [r3, #64]	; 0x40
 8003c62:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8003c64:	f004 5480 	and.w	r4, r4, #268435456	; 0x10000000
 8003c68:	9400      	str	r4, [sp, #0]
 8003c6a:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c6c:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8003c6e:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8003c72:	645c      	str	r4, [r3, #68]	; 0x44
 8003c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c7a:	9301      	str	r3, [sp, #4]
 8003c7c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003c7e:	f002 f9cd 	bl	800601c <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 6, 0);
 8003c82:	2200      	movs	r2, #0
 8003c84:	2106      	movs	r1, #6
 8003c86:	2005      	movs	r0, #5
 8003c88:	f002 f9c8 	bl	800601c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003c8c:	2005      	movs	r0, #5
 8003c8e:	f002 fa0b 	bl	80060a8 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 6, 0);
 8003c92:	2200      	movs	r2, #0
 8003c94:	2106      	movs	r1, #6
 8003c96:	2051      	movs	r0, #81	; 0x51
 8003c98:	f002 f9c0 	bl	800601c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8003c9c:	2051      	movs	r0, #81	; 0x51

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c9e:	b002      	add	sp, #8
 8003ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8003ca4:	f002 ba00 	b.w	80060a8 <HAL_NVIC_EnableIRQ>
 8003ca8:	40023800 	.word	0x40023800

08003cac <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8003cac:	4a48      	ldr	r2, [pc, #288]	; (8003dd0 <HAL_ADC_MspInit+0x124>)
 8003cae:	6803      	ldr	r3, [r0, #0]
{
 8003cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hadc->Instance==ADC1)
 8003cb2:	4293      	cmp	r3, r2
{
 8003cb4:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cb6:	f04f 0400 	mov.w	r4, #0
 8003cba:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8003cbe:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8003cc2:	940b      	str	r4, [sp, #44]	; 0x2c
  if(hadc->Instance==ADC1)
 8003cc4:	d007      	beq.n	8003cd6 <HAL_ADC_MspInit+0x2a>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8003cc6:	4a43      	ldr	r2, [pc, #268]	; (8003dd4 <HAL_ADC_MspInit+0x128>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d063      	beq.n	8003d94 <HAL_ADC_MspInit+0xe8>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 8003ccc:	4a42      	ldr	r2, [pc, #264]	; (8003dd8 <HAL_ADC_MspInit+0x12c>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d043      	beq.n	8003d5a <HAL_ADC_MspInit+0xae>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003cd2:	b00d      	add	sp, #52	; 0x34
 8003cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003cd6:	4b41      	ldr	r3, [pc, #260]	; (8003ddc <HAL_ADC_MspInit+0x130>)
 8003cd8:	4606      	mov	r6, r0
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003cda:	2008      	movs	r0, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003cdc:	2703      	movs	r7, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003cde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ce0:	a907      	add	r1, sp, #28
    hdma_adc1.Instance = DMA2_Stream4;
 8003ce2:	4d3f      	ldr	r5, [pc, #252]	; (8003de0 <HAL_ADC_MspInit+0x134>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003ce4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ce8:	645a      	str	r2, [r3, #68]	; 0x44
 8003cea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cec:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8003cf0:	9201      	str	r2, [sp, #4]
 8003cf2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cf6:	f042 0201 	orr.w	r2, r2, #1
 8003cfa:	631a      	str	r2, [r3, #48]	; 0x30
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003cfe:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d00:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d04:	4837      	ldr	r0, [pc, #220]	; (8003de4 <HAL_ADC_MspInit+0x138>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d06:	9708      	str	r7, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d08:	9302      	str	r3, [sp, #8]
 8003d0a:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d0c:	f004 fbea 	bl	80084e4 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream4;
 8003d10:	4a35      	ldr	r2, [pc, #212]	; (8003de8 <HAL_ADC_MspInit+0x13c>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003d12:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003d16:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003d1a:	f44f 6c00 	mov.w	ip, #2048	; 0x800
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003d1e:	62af      	str	r7, [r5, #40]	; 0x28
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8003d20:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003d24:	f44f 7780 	mov.w	r7, #256	; 0x100
    hdma_adc1.Instance = DMA2_Stream4;
 8003d28:	602a      	str	r2, [r5, #0]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003d2a:	612b      	str	r3, [r5, #16]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003d2c:	2204      	movs	r2, #4
    hdma_adc1.Init.MemBurst = DMA_MBURST_INC4;
 8003d2e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003d32:	606c      	str	r4, [r5, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d34:	60ac      	str	r4, [r5, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d36:	60ec      	str	r4, [r5, #12]
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003d38:	632c      	str	r4, [r5, #48]	; 0x30
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003d3a:	626a      	str	r2, [r5, #36]	; 0x24
    hdma_adc1.Init.MemBurst = DMA_MBURST_INC4;
 8003d3c:	62eb      	str	r3, [r5, #44]	; 0x2c
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003d3e:	e9c5 c005 	strd	ip, r0, [r5, #20]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003d42:	4628      	mov	r0, r5
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8003d44:	e9c5 7107 	strd	r7, r1, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003d48:	f002 fc54 	bl	80065f4 <HAL_DMA_Init>
 8003d4c:	b108      	cbz	r0, 8003d52 <HAL_ADC_MspInit+0xa6>
      Error_Handler();
 8003d4e:	f7fe f979 	bl	8002044 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003d52:	63b5      	str	r5, [r6, #56]	; 0x38
 8003d54:	63ae      	str	r6, [r5, #56]	; 0x38
}
 8003d56:	b00d      	add	sp, #52	; 0x34
 8003d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003d5a:	4b20      	ldr	r3, [pc, #128]	; (8003ddc <HAL_ADC_MspInit+0x130>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003d5c:	2508      	movs	r5, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d5e:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d60:	a907      	add	r1, sp, #28
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003d62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d64:	481f      	ldr	r0, [pc, #124]	; (8003de4 <HAL_ADC_MspInit+0x138>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003d66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d6a:	645a      	str	r2, [r3, #68]	; 0x44
 8003d6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d6e:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8003d72:	9205      	str	r2, [sp, #20]
 8003d74:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d78:	f042 0201 	orr.w	r2, r2, #1
 8003d7c:	631a      	str	r2, [r3, #48]	; 0x30
 8003d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003d80:	9507      	str	r5, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d82:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d86:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d88:	9306      	str	r3, [sp, #24]
 8003d8a:	9b06      	ldr	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d8c:	f004 fbaa 	bl	80084e4 <HAL_GPIO_Init>
}
 8003d90:	b00d      	add	sp, #52	; 0x34
 8003d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003d94:	4b11      	ldr	r3, [pc, #68]	; (8003ddc <HAL_ADC_MspInit+0x130>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003d96:	2508      	movs	r5, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d98:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d9a:	a907      	add	r1, sp, #28
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003d9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d9e:	4811      	ldr	r0, [pc, #68]	; (8003de4 <HAL_ADC_MspInit+0x138>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003da0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003da4:	645a      	str	r2, [r3, #68]	; 0x44
 8003da6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003da8:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003dac:	9203      	str	r2, [sp, #12]
 8003dae:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003db0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003db2:	f042 0201 	orr.w	r2, r2, #1
 8003db6:	631a      	str	r2, [r3, #48]	; 0x30
 8003db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003dba:	9507      	str	r5, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dbc:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003dc0:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dc2:	9304      	str	r3, [sp, #16]
 8003dc4:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dc6:	f004 fb8d 	bl	80084e4 <HAL_GPIO_Init>
}
 8003dca:	b00d      	add	sp, #52	; 0x34
 8003dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	40012000 	.word	0x40012000
 8003dd4:	40012100 	.word	0x40012100
 8003dd8:	40012200 	.word	0x40012200
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	2002af50 	.word	0x2002af50
 8003de4:	40020000 	.word	0x40020000
 8003de8:	40026470 	.word	0x40026470

08003dec <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8003dec:	6802      	ldr	r2, [r0, #0]
 8003dee:	4b09      	ldr	r3, [pc, #36]	; (8003e14 <HAL_CRC_MspInit+0x28>)
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d000      	beq.n	8003df6 <HAL_CRC_MspInit+0xa>
 8003df4:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003df6:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 8003dfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
{
 8003dfe:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 8003e00:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e04:	631a      	str	r2, [r3, #48]	; 0x30
 8003e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e0c:	9301      	str	r3, [sp, #4]
 8003e0e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003e10:	b002      	add	sp, #8
 8003e12:	4770      	bx	lr
 8003e14:	40023000 	.word	0x40023000

08003e18 <HAL_DAC_MspInit>:
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC)
 8003e18:	4b2b      	ldr	r3, [pc, #172]	; (8003ec8 <HAL_DAC_MspInit+0xb0>)
 8003e1a:	6802      	ldr	r2, [r0, #0]
{
 8003e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hdac->Instance==DAC)
 8003e1e:	429a      	cmp	r2, r3
{
 8003e20:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e22:	f04f 0400 	mov.w	r4, #0
 8003e26:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003e2a:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8003e2e:	9407      	str	r4, [sp, #28]
  if(hdac->Instance==DAC)
 8003e30:	d001      	beq.n	8003e36 <HAL_DAC_MspInit+0x1e>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003e32:	b009      	add	sp, #36	; 0x24
 8003e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_DAC_CLK_ENABLE();
 8003e36:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8003e3a:	4606      	mov	r6, r0
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003e3c:	2010      	movs	r0, #16
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e3e:	2503      	movs	r5, #3
    __HAL_RCC_DAC_CLK_ENABLE();
 8003e40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e42:	a903      	add	r1, sp, #12
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8003e44:	f44f 6780 	mov.w	r7, #1024	; 0x400
    __HAL_RCC_DAC_CLK_ENABLE();
 8003e48:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003e4c:	641a      	str	r2, [r3, #64]	; 0x40
 8003e4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e50:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8003e54:	9201      	str	r2, [sp, #4]
 8003e56:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e5a:	f042 0201 	orr.w	r2, r2, #1
 8003e5e:	631a      	str	r2, [r3, #48]	; 0x30
 8003e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003e62:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e64:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e68:	4818      	ldr	r0, [pc, #96]	; (8003ecc <HAL_DAC_MspInit+0xb4>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e6a:	9504      	str	r5, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e6c:	9302      	str	r3, [sp, #8]
    hdma_dac1.Instance = DMA1_Stream5;
 8003e6e:	4d18      	ldr	r5, [pc, #96]	; (8003ed0 <HAL_DAC_MspInit+0xb8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e70:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e72:	f004 fb37 	bl	80084e4 <HAL_GPIO_Init>
    hdma_dac1.Instance = DMA1_Stream5;
 8003e76:	4b17      	ldr	r3, [pc, #92]	; (8003ed4 <HAL_DAC_MspInit+0xbc>)
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e78:	2040      	movs	r0, #64	; 0x40
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8003e7a:	f04f 6c60 	mov.w	ip, #234881024	; 0xe000000
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003e7e:	2104      	movs	r1, #4
    hdma_dac1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_3QUARTERSFULL;
 8003e80:	2202      	movs	r2, #2
    hdma_dac1.Instance = DMA1_Stream5;
 8003e82:	602b      	str	r3, [r5, #0]
    hdma_dac1.Init.MemBurst = DMA_MBURST_INC4;
 8003e84:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e88:	60ec      	str	r4, [r5, #12]
    hdma_dac1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003e8a:	632c      	str	r4, [r5, #48]	; 0x30
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8003e8c:	612f      	str	r7, [r5, #16]
    hdma_dac1.Init.MemBurst = DMA_MBURST_INC4;
 8003e8e:	62eb      	str	r3, [r5, #44]	; 0x2c
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e90:	e9c5 c001 	strd	ip, r0, [r5, #4]
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8003e94:	4628      	mov	r0, r5
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e96:	e9c5 4405 	strd	r4, r4, [r5, #20]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8003e9a:	e9c5 4407 	strd	r4, r4, [r5, #28]
    hdma_dac1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_3QUARTERSFULL;
 8003e9e:	e9c5 1209 	strd	r1, r2, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8003ea2:	f002 fba7 	bl	80065f4 <HAL_DMA_Init>
 8003ea6:	b958      	cbnz	r0, 8003ec0 <HAL_DAC_MspInit+0xa8>
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8003ea8:	60b5      	str	r5, [r6, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8003eaa:	2200      	movs	r2, #0
 8003eac:	2106      	movs	r1, #6
 8003eae:	2036      	movs	r0, #54	; 0x36
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8003eb0:	63ae      	str	r6, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8003eb2:	f002 f8b3 	bl	800601c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003eb6:	2036      	movs	r0, #54	; 0x36
 8003eb8:	f002 f8f6 	bl	80060a8 <HAL_NVIC_EnableIRQ>
}
 8003ebc:	b009      	add	sp, #36	; 0x24
 8003ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8003ec0:	f7fe f8c0 	bl	8002044 <Error_Handler>
 8003ec4:	e7f0      	b.n	8003ea8 <HAL_DAC_MspInit+0x90>
 8003ec6:	bf00      	nop
 8003ec8:	40007400 	.word	0x40007400
 8003ecc:	40020000 	.word	0x40020000
 8003ed0:	2002ad54 	.word	0x2002ad54
 8003ed4:	40026088 	.word	0x40026088

08003ed8 <HAL_I2C_MspInit>:
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C1)
 8003ed8:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eda:	2300      	movs	r3, #0
  if(hi2c->Instance==I2C1)
 8003edc:	493d      	ldr	r1, [pc, #244]	; (8003fd4 <HAL_I2C_MspInit+0xfc>)
{
 8003ede:	b570      	push	{r4, r5, r6, lr}
  if(hi2c->Instance==I2C1)
 8003ee0:	428a      	cmp	r2, r1
{
 8003ee2:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ee4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003ee8:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 8003eec:	930b      	str	r3, [sp, #44]	; 0x2c
  if(hi2c->Instance==I2C1)
 8003eee:	d007      	beq.n	8003f00 <HAL_I2C_MspInit+0x28>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 8003ef0:	4b39      	ldr	r3, [pc, #228]	; (8003fd8 <HAL_I2C_MspInit+0x100>)
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d04c      	beq.n	8003f90 <HAL_I2C_MspInit+0xb8>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
  else if(hi2c->Instance==I2C4)
 8003ef6:	4b39      	ldr	r3, [pc, #228]	; (8003fdc <HAL_I2C_MspInit+0x104>)
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d025      	beq.n	8003f48 <HAL_I2C_MspInit+0x70>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8003efc:	b00c      	add	sp, #48	; 0x30
 8003efe:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f00:	4c37      	ldr	r4, [pc, #220]	; (8003fe0 <HAL_I2C_MspInit+0x108>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f02:	2212      	movs	r2, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f04:	2001      	movs	r0, #1
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8003f06:	f44f 7610 	mov.w	r6, #576	; 0x240
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f0a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f0c:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f0e:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f10:	f043 0302 	orr.w	r3, r3, #2
 8003f14:	6323      	str	r3, [r4, #48]	; 0x30
 8003f16:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f18:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003f1a:	2204      	movs	r2, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f1c:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f20:	9009      	str	r0, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f22:	4830      	ldr	r0, [pc, #192]	; (8003fe4 <HAL_I2C_MspInit+0x10c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f24:	9301      	str	r3, [sp, #4]
 8003f26:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8003f28:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003f2a:	e9cd 520a 	strd	r5, r2, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f2e:	f004 fad9 	bl	80084e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003f32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f38:	6423      	str	r3, [r4, #64]	; 0x40
 8003f3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f40:	9302      	str	r3, [sp, #8]
 8003f42:	9b02      	ldr	r3, [sp, #8]
}
 8003f44:	b00c      	add	sp, #48	; 0x30
 8003f46:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003f48:	4c25      	ldr	r4, [pc, #148]	; (8003fe0 <HAL_I2C_MspInit+0x108>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f4a:	2212      	movs	r2, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f4c:	2001      	movs	r0, #1
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003f4e:	f44f 4640 	mov.w	r6, #49152	; 0xc000
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003f52:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f54:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003f56:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003f58:	f043 0320 	orr.w	r3, r3, #32
 8003f5c:	6323      	str	r3, [r4, #48]	; 0x30
 8003f5e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f60:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8003f62:	2204      	movs	r2, #4
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003f64:	f003 0320 	and.w	r3, r3, #32
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f68:	9009      	str	r0, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003f6a:	481f      	ldr	r0, [pc, #124]	; (8003fe8 <HAL_I2C_MspInit+0x110>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003f6c:	9305      	str	r3, [sp, #20]
 8003f6e:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003f70:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8003f72:	e9cd 520a 	strd	r5, r2, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003f76:	f004 fab5 	bl	80084e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8003f7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f80:	6423      	str	r3, [r4, #64]	; 0x40
 8003f82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f88:	9306      	str	r3, [sp, #24]
 8003f8a:	9b06      	ldr	r3, [sp, #24]
}
 8003f8c:	b00c      	add	sp, #48	; 0x30
 8003f8e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003f90:	4c13      	ldr	r4, [pc, #76]	; (8003fe0 <HAL_I2C_MspInit+0x108>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f92:	2012      	movs	r0, #18
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003f94:	2203      	movs	r2, #3
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f96:	2601      	movs	r6, #1
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003f98:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003f9a:	2504      	movs	r5, #4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003f9c:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003f9e:	f043 0320 	orr.w	r3, r3, #32
 8003fa2:	6323      	str	r3, [r4, #48]	; 0x30
 8003fa4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003fa6:	9008      	str	r0, [sp, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003fa8:	f003 0320 	and.w	r3, r3, #32
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003fac:	480e      	ldr	r0, [pc, #56]	; (8003fe8 <HAL_I2C_MspInit+0x110>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003fae:	9207      	str	r2, [sp, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003fb0:	9303      	str	r3, [sp, #12]
 8003fb2:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fb4:	920a      	str	r2, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fb6:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003fb8:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003fba:	f004 fa93 	bl	80084e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003fbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003fc0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003fc4:	6423      	str	r3, [r4, #64]	; 0x40
 8003fc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003fc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fcc:	9304      	str	r3, [sp, #16]
 8003fce:	9b04      	ldr	r3, [sp, #16]
}
 8003fd0:	b00c      	add	sp, #48	; 0x30
 8003fd2:	bd70      	pop	{r4, r5, r6, pc}
 8003fd4:	40005400 	.word	0x40005400
 8003fd8:	40005800 	.word	0x40005800
 8003fdc:	40006000 	.word	0x40006000
 8003fe0:	40023800 	.word	0x40023800
 8003fe4:	40020400 	.word	0x40020400
 8003fe8:	40021400 	.word	0x40021400

08003fec <HAL_MDIOS_MspInit>:
* @retval None
*/
void HAL_MDIOS_MspInit(MDIOS_HandleTypeDef* hmdios)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hmdios->Instance==MDIOS)
 8003fec:	6802      	ldr	r2, [r0, #0]
 8003fee:	4b1c      	ldr	r3, [pc, #112]	; (8004060 <HAL_MDIOS_MspInit+0x74>)
{
 8003ff0:	b570      	push	{r4, r5, r6, lr}
  if(hmdios->Instance==MDIOS)
 8003ff2:	429a      	cmp	r2, r3
{
 8003ff4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ff6:	f04f 0400 	mov.w	r4, #0
 8003ffa:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003ffe:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8004002:	9407      	str	r4, [sp, #28]
  if(hmdios->Instance==MDIOS)
 8004004:	d001      	beq.n	800400a <HAL_MDIOS_MspInit+0x1e>
  /* USER CODE BEGIN MDIOS_MspInit 1 */

  /* USER CODE END MDIOS_MspInit 1 */
  }

}
 8004006:	b008      	add	sp, #32
 8004008:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_MDIO_CLK_ENABLE();
 800400a:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800400e:	2002      	movs	r0, #2
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 8004010:	f44f 6688 	mov.w	r6, #1088	; 0x440
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004014:	2503      	movs	r5, #3
    __HAL_RCC_MDIO_CLK_ENABLE();
 8004016:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004018:	a903      	add	r1, sp, #12
    __HAL_RCC_MDIO_CLK_ENABLE();
 800401a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800401e:	645a      	str	r2, [r3, #68]	; 0x44
 8004020:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004022:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004026:	9201      	str	r2, [sp, #4]
 8004028:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800402a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800402c:	f042 0201 	orr.w	r2, r2, #1
 8004030:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF12_MDIOS;
 8004032:	220c      	movs	r2, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004036:	9004      	str	r0, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004038:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800403c:	4809      	ldr	r0, [pc, #36]	; (8004064 <HAL_MDIOS_MspInit+0x78>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 800403e:	9603      	str	r6, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004040:	9302      	str	r3, [sp, #8]
 8004042:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF12_MDIOS;
 8004044:	e9cd 5206 	strd	r5, r2, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004048:	f004 fa4c 	bl	80084e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(MDIOS_IRQn, 6, 0);
 800404c:	4622      	mov	r2, r4
 800404e:	2106      	movs	r1, #6
 8004050:	206d      	movs	r0, #109	; 0x6d
 8004052:	f001 ffe3 	bl	800601c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(MDIOS_IRQn);
 8004056:	206d      	movs	r0, #109	; 0x6d
 8004058:	f002 f826 	bl	80060a8 <HAL_NVIC_EnableIRQ>
}
 800405c:	b008      	add	sp, #32
 800405e:	bd70      	pop	{r4, r5, r6, pc}
 8004060:	40017800 	.word	0x40017800
 8004064:	40020000 	.word	0x40020000

08004068 <HAL_RNG_MspInit>:
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
  if(hrng->Instance==RNG)
 8004068:	6802      	ldr	r2, [r0, #0]
 800406a:	4b08      	ldr	r3, [pc, #32]	; (800408c <HAL_RNG_MspInit+0x24>)
 800406c:	429a      	cmp	r2, r3
 800406e:	d000      	beq.n	8004072 <HAL_RNG_MspInit+0xa>
 8004070:	4770      	bx	lr
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8004072:	4b07      	ldr	r3, [pc, #28]	; (8004090 <HAL_RNG_MspInit+0x28>)
{
 8004074:	b082      	sub	sp, #8
    __HAL_RCC_RNG_CLK_ENABLE();
 8004076:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004078:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800407c:	635a      	str	r2, [r3, #52]	; 0x34
 800407e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004084:	9301      	str	r3, [sp, #4]
 8004086:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8004088:	b002      	add	sp, #8
 800408a:	4770      	bx	lr
 800408c:	50060800 	.word	0x50060800
 8004090:	40023800 	.word	0x40023800

08004094 <HAL_SPI_MspInit>:
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI2)
 8004094:	6803      	ldr	r3, [r0, #0]
 8004096:	4a56      	ldr	r2, [pc, #344]	; (80041f0 <HAL_SPI_MspInit+0x15c>)
{
 8004098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(hspi->Instance==SPI2)
 800409c:	4293      	cmp	r3, r2
{
 800409e:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040a0:	f04f 0400 	mov.w	r4, #0
 80040a4:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 80040a8:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 80040ac:	940d      	str	r4, [sp, #52]	; 0x34
  if(hspi->Instance==SPI2)
 80040ae:	d008      	beq.n	80040c2 <HAL_SPI_MspInit+0x2e>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(hspi->Instance==SPI3)
 80040b0:	4a50      	ldr	r2, [pc, #320]	; (80041f4 <HAL_SPI_MspInit+0x160>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d05c      	beq.n	8004170 <HAL_SPI_MspInit+0xdc>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
  else if(hspi->Instance==SPI4)
 80040b6:	4a50      	ldr	r2, [pc, #320]	; (80041f8 <HAL_SPI_MspInit+0x164>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d037      	beq.n	800412c <HAL_SPI_MspInit+0x98>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80040bc:	b00e      	add	sp, #56	; 0x38
 80040be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 80040c2:	4b4e      	ldr	r3, [pc, #312]	; (80041fc <HAL_SPI_MspInit+0x168>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80040c4:	200c      	movs	r0, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040c6:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80040c8:	2601      	movs	r6, #1
    __HAL_RCC_SPI2_CLK_ENABLE();
 80040ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80040cc:	2505      	movs	r5, #5
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040ce:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_SPI2_CLK_ENABLE();
 80040d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040d4:	641a      	str	r2, [r3, #64]	; 0x40
 80040d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040d8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80040dc:	9201      	str	r2, [sp, #4]
 80040de:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040e2:	f042 0204 	orr.w	r2, r2, #4
 80040e6:	631a      	str	r2, [r3, #48]	; 0x30
 80040e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040ea:	f002 0204 	and.w	r2, r2, #4
 80040ee:	9202      	str	r2, [sp, #8]
 80040f0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80040f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040f4:	f042 0208 	orr.w	r2, r2, #8
 80040f8:	631a      	str	r2, [r3, #48]	; 0x30
 80040fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80040fc:	9009      	str	r0, [sp, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80040fe:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004102:	483f      	ldr	r0, [pc, #252]	; (8004200 <HAL_SPI_MspInit+0x16c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004104:	970a      	str	r7, [sp, #40]	; 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004106:	9303      	str	r3, [sp, #12]
 8004108:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800410a:	e9cd 650c 	strd	r6, r5, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800410e:	f004 f9e9 	bl	80084e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004112:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004114:	a909      	add	r1, sp, #36	; 0x24
 8004116:	483b      	ldr	r0, [pc, #236]	; (8004204 <HAL_SPI_MspInit+0x170>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004118:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800411a:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800411c:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800411e:	e9cd 650c 	strd	r6, r5, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004122:	f004 f9df 	bl	80084e4 <HAL_GPIO_Init>
}
 8004126:	b00e      	add	sp, #56	; 0x38
 8004128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_SPI4_CLK_ENABLE();
 800412c:	4b33      	ldr	r3, [pc, #204]	; (80041fc <HAL_SPI_MspInit+0x168>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800412e:	2074      	movs	r0, #116	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004130:	2602      	movs	r6, #2
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004132:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_SPI4_CLK_ENABLE();
 8004134:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004136:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8004138:	2405      	movs	r4, #5
    __HAL_RCC_SPI4_CLK_ENABLE();
 800413a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800413e:	645a      	str	r2, [r3, #68]	; 0x44
 8004140:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004142:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004146:	9207      	str	r2, [sp, #28]
 8004148:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800414a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800414c:	f042 0210 	orr.w	r2, r2, #16
 8004150:	631a      	str	r2, [r3, #48]	; 0x30
 8004152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8004154:	9009      	str	r0, [sp, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004156:	f003 0310 	and.w	r3, r3, #16
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800415a:	482b      	ldr	r0, [pc, #172]	; (8004208 <HAL_SPI_MspInit+0x174>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800415c:	960a      	str	r6, [sp, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800415e:	9308      	str	r3, [sp, #32]
 8004160:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8004162:	e9cd 540c 	strd	r5, r4, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004166:	f004 f9bd 	bl	80084e4 <HAL_GPIO_Init>
}
 800416a:	b00e      	add	sp, #56	; 0x38
 800416c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004170:	4b22      	ldr	r3, [pc, #136]	; (80041fc <HAL_SPI_MspInit+0x168>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004172:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004174:	2004      	movs	r0, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004176:	2503      	movs	r5, #3
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004178:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800417a:	2707      	movs	r7, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800417c:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800417e:	f04f 0806 	mov.w	r8, #6
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004182:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004186:	641a      	str	r2, [r3, #64]	; 0x40
 8004188:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800418a:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800418e:	9204      	str	r2, [sp, #16]
 8004190:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004192:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004194:	4332      	orrs	r2, r6
 8004196:	631a      	str	r2, [r3, #48]	; 0x30
 8004198:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800419a:	4032      	ands	r2, r6
 800419c:	9205      	str	r2, [sp, #20]
 800419e:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041a2:	4302      	orrs	r2, r0
 80041a4:	631a      	str	r2, [r3, #48]	; 0x30
 80041a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80041a8:	9009      	str	r0, [sp, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041aa:	4003      	ands	r3, r0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041ac:	4817      	ldr	r0, [pc, #92]	; (800420c <HAL_SPI_MspInit+0x178>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041ae:	960a      	str	r6, [sp, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041b0:	9306      	str	r3, [sp, #24]
 80041b2:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041b4:	950c      	str	r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80041b6:	970d      	str	r7, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041b8:	f004 f994 	bl	80084e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80041bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041c0:	a909      	add	r1, sp, #36	; 0x24
 80041c2:	480f      	ldr	r0, [pc, #60]	; (8004200 <HAL_SPI_MspInit+0x16c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80041c4:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041c6:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80041c8:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041cc:	e9cd 450b 	strd	r4, r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041d0:	f004 f988 	bl	80084e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80041d4:	2310      	movs	r3, #16
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041d6:	a909      	add	r1, sp, #36	; 0x24
 80041d8:	480c      	ldr	r0, [pc, #48]	; (800420c <HAL_SPI_MspInit+0x178>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041da:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041dc:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80041de:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80041e0:	e9cd 580c 	strd	r5, r8, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041e4:	f004 f97e 	bl	80084e4 <HAL_GPIO_Init>
}
 80041e8:	b00e      	add	sp, #56	; 0x38
 80041ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041ee:	bf00      	nop
 80041f0:	40003800 	.word	0x40003800
 80041f4:	40003c00 	.word	0x40003c00
 80041f8:	40013400 	.word	0x40013400
 80041fc:	40023800 	.word	0x40023800
 8004200:	40020800 	.word	0x40020800
 8004204:	40020c00 	.word	0x40020c00
 8004208:	40021000 	.word	0x40021000
 800420c:	40020400 	.word	0x40020400

08004210 <HAL_TIM_Base_MspInit>:
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 8004210:	4a75      	ldr	r2, [pc, #468]	; (80043e8 <HAL_TIM_Base_MspInit+0x1d8>)
 8004212:	6803      	ldr	r3, [r0, #0]
{
 8004214:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(htim_base->Instance==TIM1)
 8004218:	4293      	cmp	r3, r2
{
 800421a:	b091      	sub	sp, #68	; 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800421c:	f04f 0400 	mov.w	r4, #0
 8004220:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8004224:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 8004228:	940f      	str	r4, [sp, #60]	; 0x3c
  if(htim_base->Instance==TIM1)
 800422a:	d023      	beq.n	8004274 <HAL_TIM_Base_MspInit+0x64>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 800422c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004230:	4605      	mov	r5, r0
 8004232:	d044      	beq.n	80042be <HAL_TIM_Base_MspInit+0xae>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8004234:	4a6d      	ldr	r2, [pc, #436]	; (80043ec <HAL_TIM_Base_MspInit+0x1dc>)
 8004236:	4293      	cmp	r3, r2
 8004238:	f000 809d 	beq.w	8004376 <HAL_TIM_Base_MspInit+0x166>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 800423c:	4a6c      	ldr	r2, [pc, #432]	; (80043f0 <HAL_TIM_Base_MspInit+0x1e0>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d025      	beq.n	800428e <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(htim_base->Instance==TIM5)
 8004242:	4a6c      	ldr	r2, [pc, #432]	; (80043f4 <HAL_TIM_Base_MspInit+0x1e4>)
 8004244:	4293      	cmp	r3, r2
 8004246:	f000 80a9 	beq.w	800439c <HAL_TIM_Base_MspInit+0x18c>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 800424a:	4a6b      	ldr	r2, [pc, #428]	; (80043f8 <HAL_TIM_Base_MspInit+0x1e8>)
 800424c:	4293      	cmp	r3, r2
 800424e:	f000 80b8 	beq.w	80043c2 <HAL_TIM_Base_MspInit+0x1b2>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 8004252:	4a6a      	ldr	r2, [pc, #424]	; (80043fc <HAL_TIM_Base_MspInit+0x1ec>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d027      	beq.n	80042a8 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
  else if(htim_base->Instance==TIM14)
 8004258:	4a69      	ldr	r2, [pc, #420]	; (8004400 <HAL_TIM_Base_MspInit+0x1f0>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d114      	bne.n	8004288 <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800425e:	4b69      	ldr	r3, [pc, #420]	; (8004404 <HAL_TIM_Base_MspInit+0x1f4>)
 8004260:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004262:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004266:	641a      	str	r2, [r3, #64]	; 0x40
 8004268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800426e:	930a      	str	r3, [sp, #40]	; 0x28
 8004270:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8004272:	e009      	b.n	8004288 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004274:	4b63      	ldr	r3, [pc, #396]	; (8004404 <HAL_TIM_Base_MspInit+0x1f4>)
 8004276:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004278:	f042 0201 	orr.w	r2, r2, #1
 800427c:	645a      	str	r2, [r3, #68]	; 0x44
 800427e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004280:	f003 0301 	and.w	r3, r3, #1
 8004284:	9301      	str	r3, [sp, #4]
 8004286:	9b01      	ldr	r3, [sp, #4]
}
 8004288:	b011      	add	sp, #68	; 0x44
 800428a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM4_CLK_ENABLE();
 800428e:	4b5d      	ldr	r3, [pc, #372]	; (8004404 <HAL_TIM_Base_MspInit+0x1f4>)
 8004290:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004292:	f042 0204 	orr.w	r2, r2, #4
 8004296:	641a      	str	r2, [r3, #64]	; 0x40
 8004298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429a:	f003 0304 	and.w	r3, r3, #4
 800429e:	9306      	str	r3, [sp, #24]
 80042a0:	9b06      	ldr	r3, [sp, #24]
}
 80042a2:	b011      	add	sp, #68	; 0x44
 80042a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM7_CLK_ENABLE();
 80042a8:	4b56      	ldr	r3, [pc, #344]	; (8004404 <HAL_TIM_Base_MspInit+0x1f4>)
 80042aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042ac:	f042 0220 	orr.w	r2, r2, #32
 80042b0:	641a      	str	r2, [r3, #64]	; 0x40
 80042b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b4:	f003 0320 	and.w	r3, r3, #32
 80042b8:	9309      	str	r3, [sp, #36]	; 0x24
 80042ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042bc:	e7e4      	b.n	8004288 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80042be:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80042c2:	2701      	movs	r7, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042c4:	f04f 0802 	mov.w	r8, #2
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80042c8:	2020      	movs	r0, #32
    __HAL_RCC_TIM2_CLK_ENABLE();
 80042ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042cc:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80042ce:	f44f 6980 	mov.w	r9, #1024	; 0x400
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 80042d2:	4e4d      	ldr	r6, [pc, #308]	; (8004408 <HAL_TIM_Base_MspInit+0x1f8>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 80042d4:	433a      	orrs	r2, r7
 80042d6:	641a      	str	r2, [r3, #64]	; 0x40
 80042d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042da:	403a      	ands	r2, r7
 80042dc:	9202      	str	r2, [sp, #8]
 80042de:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042e2:	433a      	orrs	r2, r7
 80042e4:	631a      	str	r2, [r3, #48]	; 0x30
 80042e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042e8:	403a      	ands	r2, r7
 80042ea:	9203      	str	r2, [sp, #12]
 80042ec:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042f0:	ea42 0208 	orr.w	r2, r2, r8
 80042f4:	631a      	str	r2, [r3, #48]	; 0x30
 80042f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80042f8:	900b      	str	r0, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042fa:	ea03 0308 	and.w	r3, r3, r8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042fe:	4843      	ldr	r0, [pc, #268]	; (800440c <HAL_TIM_Base_MspInit+0x1fc>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004300:	970f      	str	r7, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004302:	9304      	str	r3, [sp, #16]
 8004304:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004306:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800430a:	f004 f8eb 	bl	80084e4 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800430e:	a90b      	add	r1, sp, #44	; 0x2c
 8004310:	483f      	ldr	r0, [pc, #252]	; (8004410 <HAL_TIM_Base_MspInit+0x200>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004312:	970f      	str	r7, [sp, #60]	; 0x3c
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 8004314:	f04f 67c0 	mov.w	r7, #100663296	; 0x6000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004318:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800431c:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004320:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004324:	f004 f8de 	bl	80084e4 <HAL_GPIO_Init>
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 8004328:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 8004414 <HAL_TIM_Base_MspInit+0x204>
    hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800432c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004330:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_tim2_up_ch3.Init.Mode = DMA_CIRCULAR;
 8004334:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 8004338:	4630      	mov	r0, r6
    hdma_tim2_up_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800433a:	f8c6 9010 	str.w	r9, [r6, #16]
    hdma_tim2_up_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800433e:	60b4      	str	r4, [r6, #8]
    hdma_tim2_up_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8004340:	60f4      	str	r4, [r6, #12]
    hdma_tim2_up_ch3.Init.Mode = DMA_CIRCULAR;
 8004342:	61f3      	str	r3, [r6, #28]
    hdma_tim2_up_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004344:	e9c6 4408 	strd	r4, r4, [r6, #32]
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 8004348:	e9c6 c700 	strd	ip, r7, [r6]
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800434c:	e9c6 1205 	strd	r1, r2, [r6, #20]
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 8004350:	f002 f950 	bl	80065f4 <HAL_DMA_Init>
 8004354:	b108      	cbz	r0, 800435a <HAL_TIM_Base_MspInit+0x14a>
      Error_Handler();
 8004356:	f7fd fe75 	bl	8002044 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up_ch3);
 800435a:	622e      	str	r6, [r5, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 800435c:	2200      	movs	r2, #0
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_up_ch3);
 800435e:	62ee      	str	r6, [r5, #44]	; 0x2c
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8004360:	2106      	movs	r1, #6
 8004362:	201c      	movs	r0, #28
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_up_ch3);
 8004364:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8004366:	f001 fe59 	bl	800601c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800436a:	201c      	movs	r0, #28
 800436c:	f001 fe9c 	bl	80060a8 <HAL_NVIC_EnableIRQ>
}
 8004370:	b011      	add	sp, #68	; 0x44
 8004372:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004376:	4b23      	ldr	r3, [pc, #140]	; (8004404 <HAL_TIM_Base_MspInit+0x1f4>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8004378:	4622      	mov	r2, r4
 800437a:	2106      	movs	r1, #6
 800437c:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 800437e:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8004380:	f044 0402 	orr.w	r4, r4, #2
 8004384:	641c      	str	r4, [r3, #64]	; 0x40
 8004386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	9305      	str	r3, [sp, #20]
 800438e:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8004390:	f001 fe44 	bl	800601c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004394:	201d      	movs	r0, #29
 8004396:	f001 fe87 	bl	80060a8 <HAL_NVIC_EnableIRQ>
 800439a:	e775      	b.n	8004288 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800439c:	4b19      	ldr	r3, [pc, #100]	; (8004404 <HAL_TIM_Base_MspInit+0x1f4>)
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 800439e:	4622      	mov	r2, r4
 80043a0:	2105      	movs	r1, #5
 80043a2:	2032      	movs	r0, #50	; 0x32
    __HAL_RCC_TIM5_CLK_ENABLE();
 80043a4:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 80043a6:	f044 0408 	orr.w	r4, r4, #8
 80043aa:	641c      	str	r4, [r3, #64]	; 0x40
 80043ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ae:	f003 0308 	and.w	r3, r3, #8
 80043b2:	9307      	str	r3, [sp, #28]
 80043b4:	9b07      	ldr	r3, [sp, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 80043b6:	f001 fe31 	bl	800601c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80043ba:	2032      	movs	r0, #50	; 0x32
 80043bc:	f001 fe74 	bl	80060a8 <HAL_NVIC_EnableIRQ>
 80043c0:	e762      	b.n	8004288 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80043c2:	4b10      	ldr	r3, [pc, #64]	; (8004404 <HAL_TIM_Base_MspInit+0x1f4>)
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 80043c4:	4622      	mov	r2, r4
 80043c6:	2106      	movs	r1, #6
 80043c8:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 80043ca:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 80043cc:	f044 0410 	orr.w	r4, r4, #16
 80043d0:	641c      	str	r4, [r3, #64]	; 0x40
 80043d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d4:	f003 0310 	and.w	r3, r3, #16
 80043d8:	9308      	str	r3, [sp, #32]
 80043da:	9b08      	ldr	r3, [sp, #32]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 80043dc:	f001 fe1e 	bl	800601c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80043e0:	2036      	movs	r0, #54	; 0x36
 80043e2:	f001 fe61 	bl	80060a8 <HAL_NVIC_EnableIRQ>
 80043e6:	e74f      	b.n	8004288 <HAL_TIM_Base_MspInit+0x78>
 80043e8:	40010000 	.word	0x40010000
 80043ec:	40000400 	.word	0x40000400
 80043f0:	40000800 	.word	0x40000800
 80043f4:	40000c00 	.word	0x40000c00
 80043f8:	40001000 	.word	0x40001000
 80043fc:	40001400 	.word	0x40001400
 8004400:	40002000 	.word	0x40002000
 8004404:	40023800 	.word	0x40023800
 8004408:	2002ac50 	.word	0x2002ac50
 800440c:	40020000 	.word	0x40020000
 8004410:	40020400 	.word	0x40020400
 8004414:	40026028 	.word	0x40026028

08004418 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM3)
 8004418:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800441a:	2300      	movs	r3, #0
  if(htim->Instance==TIM3)
 800441c:	491c      	ldr	r1, [pc, #112]	; (8004490 <HAL_TIM_MspPostInit+0x78>)
{
 800441e:	b530      	push	{r4, r5, lr}
  if(htim->Instance==TIM3)
 8004420:	428a      	cmp	r2, r1
{
 8004422:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004424:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8004428:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800442c:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM3)
 800442e:	d019      	beq.n	8004464 <HAL_TIM_MspPostInit+0x4c>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(htim->Instance==TIM4)
 8004430:	4b18      	ldr	r3, [pc, #96]	; (8004494 <HAL_TIM_MspPostInit+0x7c>)
 8004432:	429a      	cmp	r2, r3
 8004434:	d001      	beq.n	800443a <HAL_TIM_MspPostInit+0x22>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004436:	b009      	add	sp, #36	; 0x24
 8004438:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800443a:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800443e:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004440:	f44f 7580 	mov.w	r5, #256	; 0x100
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004444:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004446:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004448:	4813      	ldr	r0, [pc, #76]	; (8004498 <HAL_TIM_MspPostInit+0x80>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800444a:	4322      	orrs	r2, r4
 800444c:	631a      	str	r2, [r3, #48]	; 0x30
 800444e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004450:	9503      	str	r5, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004452:	4023      	ands	r3, r4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004454:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004456:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004458:	9302      	str	r3, [sp, #8]
 800445a:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800445c:	f004 f842 	bl	80084e4 <HAL_GPIO_Init>
}
 8004460:	b009      	add	sp, #36	; 0x24
 8004462:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004464:	4b0d      	ldr	r3, [pc, #52]	; (800449c <HAL_TIM_MspPostInit+0x84>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004466:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004468:	2580      	movs	r5, #128	; 0x80
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800446a:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800446c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800446e:	480c      	ldr	r0, [pc, #48]	; (80044a0 <HAL_TIM_MspPostInit+0x88>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004470:	f042 0204 	orr.w	r2, r2, #4
 8004474:	631a      	str	r2, [r3, #48]	; 0x30
 8004476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004478:	9503      	str	r5, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800447a:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800447e:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004480:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004482:	9301      	str	r3, [sp, #4]
 8004484:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004486:	f004 f82d 	bl	80084e4 <HAL_GPIO_Init>
}
 800448a:	b009      	add	sp, #36	; 0x24
 800448c:	bd30      	pop	{r4, r5, pc}
 800448e:	bf00      	nop
 8004490:	40000400 	.word	0x40000400
 8004494:	40000800 	.word	0x40000800
 8004498:	40020400 	.word	0x40020400
 800449c:	40023800 	.word	0x40023800
 80044a0:	40020800 	.word	0x40020800

080044a4 <HAL_UART_MspInit>:
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==UART4)
 80044a4:	4aa3      	ldr	r2, [pc, #652]	; (8004734 <HAL_UART_MspInit+0x290>)
 80044a6:	6803      	ldr	r3, [r0, #0]
{
 80044a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(huart->Instance==UART4)
 80044ac:	4293      	cmp	r3, r2
{
 80044ae:	b096      	sub	sp, #88	; 0x58
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044b0:	f04f 0400 	mov.w	r4, #0
 80044b4:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
 80044b8:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
 80044bc:	9415      	str	r4, [sp, #84]	; 0x54
  if(huart->Instance==UART4)
 80044be:	d036      	beq.n	800452e <HAL_UART_MspInit+0x8a>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(huart->Instance==UART5)
 80044c0:	4a9d      	ldr	r2, [pc, #628]	; (8004738 <HAL_UART_MspInit+0x294>)
 80044c2:	4605      	mov	r5, r0
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d07b      	beq.n	80045c0 <HAL_UART_MspInit+0x11c>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
  else if(huart->Instance==UART7)
 80044c8:	4a9c      	ldr	r2, [pc, #624]	; (800473c <HAL_UART_MspInit+0x298>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	f000 80ee 	beq.w	80046ac <HAL_UART_MspInit+0x208>

  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 80044d0:	4a9b      	ldr	r2, [pc, #620]	; (8004740 <HAL_UART_MspInit+0x29c>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	f000 810d 	beq.w	80046f2 <HAL_UART_MspInit+0x24e>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 80044d8:	4a9a      	ldr	r2, [pc, #616]	; (8004744 <HAL_UART_MspInit+0x2a0>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d006      	beq.n	80044ec <HAL_UART_MspInit+0x48>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 80044de:	4a9a      	ldr	r2, [pc, #616]	; (8004748 <HAL_UART_MspInit+0x2a4>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	f000 8147 	beq.w	8004774 <HAL_UART_MspInit+0x2d0>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80044e6:	b016      	add	sp, #88	; 0x58
 80044e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 80044ec:	4b97      	ldr	r3, [pc, #604]	; (800474c <HAL_UART_MspInit+0x2a8>)
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80044ee:	f44f 7040 	mov.w	r0, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044f2:	2612      	movs	r6, #18
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044f4:	2503      	movs	r5, #3
    __HAL_RCC_USART3_CLK_ENABLE();
 80044f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80044f8:	2407      	movs	r4, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044fa:	a911      	add	r1, sp, #68	; 0x44
    __HAL_RCC_USART3_CLK_ENABLE();
 80044fc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004500:	641a      	str	r2, [r3, #64]	; 0x40
 8004502:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004504:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8004508:	920c      	str	r2, [sp, #48]	; 0x30
 800450a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800450c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800450e:	f042 0208 	orr.w	r2, r2, #8
 8004512:	631a      	str	r2, [r3, #48]	; 0x30
 8004514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8004516:	9011      	str	r0, [sp, #68]	; 0x44
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004518:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800451c:	488c      	ldr	r0, [pc, #560]	; (8004750 <HAL_UART_MspInit+0x2ac>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800451e:	9612      	str	r6, [sp, #72]	; 0x48
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004520:	930d      	str	r3, [sp, #52]	; 0x34
 8004522:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004524:	e9cd 5414 	strd	r5, r4, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004528:	f003 ffdc 	bl	80084e4 <HAL_GPIO_Init>
 800452c:	e7db      	b.n	80044e6 <HAL_UART_MspInit+0x42>
    __HAL_RCC_UART4_CLK_ENABLE();
 800452e:	4b87      	ldr	r3, [pc, #540]	; (800474c <HAL_UART_MspInit+0x2a8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004530:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 8004532:	f248 0001 	movw	r0, #32769	; 0x8001
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004536:	2603      	movs	r6, #3
    __HAL_RCC_UART4_CLK_ENABLE();
 8004538:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800453a:	2508      	movs	r5, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800453c:	a911      	add	r1, sp, #68	; 0x44
    __HAL_RCC_UART4_CLK_ENABLE();
 800453e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004542:	641a      	str	r2, [r3, #64]	; 0x40
 8004544:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004546:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800454a:	9201      	str	r2, [sp, #4]
 800454c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800454e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004550:	f042 0201 	orr.w	r2, r2, #1
 8004554:	631a      	str	r2, [r3, #48]	; 0x30
 8004556:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004558:	f002 0201 	and.w	r2, r2, #1
 800455c:	9202      	str	r2, [sp, #8]
 800455e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004562:	433a      	orrs	r2, r7
 8004564:	631a      	str	r2, [r3, #48]	; 0x30
 8004566:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004568:	403a      	ands	r2, r7
 800456a:	9203      	str	r2, [sp, #12]
 800456c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800456e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004570:	f042 0204 	orr.w	r2, r2, #4
 8004574:	631a      	str	r2, [r3, #48]	; 0x30
 8004576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 8004578:	9011      	str	r0, [sp, #68]	; 0x44
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800457a:	f003 0304 	and.w	r3, r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800457e:	4875      	ldr	r0, [pc, #468]	; (8004754 <HAL_UART_MspInit+0x2b0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004580:	9712      	str	r7, [sp, #72]	; 0x48
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004582:	9304      	str	r3, [sp, #16]
 8004584:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004586:	e9cd 6514 	strd	r6, r5, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800458a:	f003 ffab 	bl	80084e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800458e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004592:	a911      	add	r1, sp, #68	; 0x44
 8004594:	4870      	ldr	r0, [pc, #448]	; (8004758 <HAL_UART_MspInit+0x2b4>)
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004596:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004598:	9712      	str	r7, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800459a:	9413      	str	r4, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800459c:	e9cd 6514 	strd	r6, r5, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045a0:	f003 ffa0 	bl	80084e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80045a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045a8:	a911      	add	r1, sp, #68	; 0x44
 80045aa:	486c      	ldr	r0, [pc, #432]	; (800475c <HAL_UART_MspInit+0x2b8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045ac:	9712      	str	r7, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ae:	9413      	str	r4, [sp, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80045b0:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80045b2:	e9cd 6514 	strd	r6, r5, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045b6:	f003 ff95 	bl	80084e4 <HAL_GPIO_Init>
}
 80045ba:	b016      	add	sp, #88	; 0x58
 80045bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_RCC_UART5_CLK_ENABLE();
 80045c0:	4b62      	ldr	r3, [pc, #392]	; (800474c <HAL_UART_MspInit+0x2a8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045c2:	f04f 0902 	mov.w	r9, #2
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80045c6:	2708      	movs	r7, #8
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80045c8:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
    __HAL_RCC_UART5_CLK_ENABLE();
 80045cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045ce:	f04f 0803 	mov.w	r8, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045d2:	a911      	add	r1, sp, #68	; 0x44
 80045d4:	4860      	ldr	r0, [pc, #384]	; (8004758 <HAL_UART_MspInit+0x2b4>)
    __HAL_RCC_UART5_CLK_ENABLE();
 80045d6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80045da:	4e61      	ldr	r6, [pc, #388]	; (8004760 <HAL_UART_MspInit+0x2bc>)
    __HAL_RCC_UART5_CLK_ENABLE();
 80045dc:	641a      	str	r2, [r3, #64]	; 0x40
 80045de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045e0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80045e4:	9205      	str	r2, [sp, #20]
 80045e6:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045ea:	ea42 0209 	orr.w	r2, r2, r9
 80045ee:	631a      	str	r2, [r3, #48]	; 0x30
 80045f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045f2:	ea02 0209 	and.w	r2, r2, r9
 80045f6:	9206      	str	r2, [sp, #24]
 80045f8:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045fc:	f042 0204 	orr.w	r2, r2, #4
 8004600:	631a      	str	r2, [r3, #48]	; 0x30
 8004602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004604:	9715      	str	r7, [sp, #84]	; 0x54
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004606:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800460a:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800460e:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004612:	9307      	str	r3, [sp, #28]
 8004614:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004616:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800461a:	f003 ff63 	bl	80084e4 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800461e:	a911      	add	r1, sp, #68	; 0x44
 8004620:	484e      	ldr	r0, [pc, #312]	; (800475c <HAL_UART_MspInit+0x2b8>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004622:	9413      	str	r4, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004624:	e9cd 8714 	strd	r8, r7, [sp, #80]	; 0x50
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004628:	e9cd a911 	strd	sl, r9, [sp, #68]	; 0x44
    hdma_uart5_rx.Instance = DMA1_Stream0;
 800462c:	4f4d      	ldr	r7, [pc, #308]	; (8004764 <HAL_UART_MspInit+0x2c0>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800462e:	f003 ff59 	bl	80084e4 <HAL_GPIO_Init>
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8004632:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004636:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 800463a:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800463e:	4630      	mov	r0, r6
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004640:	6132      	str	r2, [r6, #16]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8004642:	61f3      	str	r3, [r6, #28]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004644:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004648:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800464c:	e9c6 4408 	strd	r4, r4, [r6, #32]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8004650:	e9c6 7100 	strd	r7, r1, [r6]
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8004654:	f001 ffce 	bl	80065f4 <HAL_DMA_Init>
 8004658:	2800      	cmp	r0, #0
 800465a:	f040 80de 	bne.w	800481a <HAL_UART_MspInit+0x376>
    hdma_uart5_tx.Instance = DMA1_Stream7;
 800465e:	4c42      	ldr	r4, [pc, #264]	; (8004768 <HAL_UART_MspInit+0x2c4>)
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004660:	2300      	movs	r3, #0
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8004662:	4842      	ldr	r0, [pc, #264]	; (800476c <HAL_UART_MspInit+0x2c8>)
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8004664:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004668:	2140      	movs	r1, #64	; 0x40
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 800466a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart5_tx.Instance = DMA1_Stream7;
 800466e:	6020      	str	r0, [r4, #0]
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8004670:	4620      	mov	r0, r4
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8004672:	66ee      	str	r6, [r5, #108]	; 0x6c
 8004674:	63b5      	str	r5, [r6, #56]	; 0x38
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004676:	6263      	str	r3, [r4, #36]	; 0x24
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004678:	e9c4 7101 	strd	r7, r1, [r4, #4]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800467c:	e9c4 3203 	strd	r3, r2, [r4, #12]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004680:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004684:	e9c4 3307 	strd	r3, r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8004688:	f001 ffb4 	bl	80065f4 <HAL_DMA_Init>
 800468c:	b108      	cbz	r0, 8004692 <HAL_UART_MspInit+0x1ee>
      Error_Handler();
 800468e:	f7fd fcd9 	bl	8002044 <Error_Handler>
    HAL_NVIC_SetPriority(UART5_IRQn, 7, 0);
 8004692:	2200      	movs	r2, #0
 8004694:	2107      	movs	r1, #7
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8004696:	66ac      	str	r4, [r5, #104]	; 0x68
    HAL_NVIC_SetPriority(UART5_IRQn, 7, 0);
 8004698:	2035      	movs	r0, #53	; 0x35
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 800469a:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 7, 0);
 800469c:	f001 fcbe 	bl	800601c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80046a0:	2035      	movs	r0, #53	; 0x35
 80046a2:	f001 fd01 	bl	80060a8 <HAL_NVIC_EnableIRQ>
}
 80046a6:	b016      	add	sp, #88	; 0x58
 80046a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_RCC_UART7_CLK_ENABLE();
 80046ac:	4b27      	ldr	r3, [pc, #156]	; (800474c <HAL_UART_MspInit+0x2a8>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80046ae:	f44f 70e0 	mov.w	r0, #448	; 0x1c0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046b2:	2602      	movs	r6, #2
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80046b4:	a911      	add	r1, sp, #68	; 0x44
    __HAL_RCC_UART7_CLK_ENABLE();
 80046b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046b8:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80046ba:	2408      	movs	r4, #8
    __HAL_RCC_UART7_CLK_ENABLE();
 80046bc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80046c0:	641a      	str	r2, [r3, #64]	; 0x40
 80046c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046c4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80046c8:	9208      	str	r2, [sp, #32]
 80046ca:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80046cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046ce:	f042 0220 	orr.w	r2, r2, #32
 80046d2:	631a      	str	r2, [r3, #48]	; 0x30
 80046d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80046d6:	9011      	str	r0, [sp, #68]	; 0x44
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80046d8:	f003 0320 	and.w	r3, r3, #32
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80046dc:	4824      	ldr	r0, [pc, #144]	; (8004770 <HAL_UART_MspInit+0x2cc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046de:	9612      	str	r6, [sp, #72]	; 0x48
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80046e0:	9309      	str	r3, [sp, #36]	; 0x24
 80046e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80046e4:	e9cd 5414 	strd	r5, r4, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80046e8:	f003 fefc 	bl	80084e4 <HAL_GPIO_Init>
}
 80046ec:	b016      	add	sp, #88	; 0x58
 80046ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 80046f2:	4b16      	ldr	r3, [pc, #88]	; (800474c <HAL_UART_MspInit+0x2a8>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80046f4:	2070      	movs	r0, #112	; 0x70
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046f6:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046f8:	2503      	movs	r5, #3
    __HAL_RCC_USART2_CLK_ENABLE();
 80046fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80046fc:	2407      	movs	r4, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80046fe:	a911      	add	r1, sp, #68	; 0x44
    __HAL_RCC_USART2_CLK_ENABLE();
 8004700:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004704:	641a      	str	r2, [r3, #64]	; 0x40
 8004706:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004708:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800470c:	920a      	str	r2, [sp, #40]	; 0x28
 800470e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004710:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004712:	f042 0208 	orr.w	r2, r2, #8
 8004716:	631a      	str	r2, [r3, #48]	; 0x30
 8004718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800471a:	9011      	str	r0, [sp, #68]	; 0x44
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800471c:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004720:	480b      	ldr	r0, [pc, #44]	; (8004750 <HAL_UART_MspInit+0x2ac>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004722:	9612      	str	r6, [sp, #72]	; 0x48
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004724:	930b      	str	r3, [sp, #44]	; 0x2c
 8004726:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004728:	e9cd 5414 	strd	r5, r4, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800472c:	f003 feda 	bl	80084e4 <HAL_GPIO_Init>
 8004730:	e6d9      	b.n	80044e6 <HAL_UART_MspInit+0x42>
 8004732:	bf00      	nop
 8004734:	40004c00 	.word	0x40004c00
 8004738:	40005000 	.word	0x40005000
 800473c:	40007800 	.word	0x40007800
 8004740:	40004400 	.word	0x40004400
 8004744:	40004800 	.word	0x40004800
 8004748:	40011400 	.word	0x40011400
 800474c:	40023800 	.word	0x40023800
 8004750:	40020c00 	.word	0x40020c00
 8004754:	40020000 	.word	0x40020000
 8004758:	40020400 	.word	0x40020400
 800475c:	40020800 	.word	0x40020800
 8004760:	2002b20c 	.word	0x2002b20c
 8004764:	40026010 	.word	0x40026010
 8004768:	2002b2f0 	.word	0x2002b2f0
 800476c:	400260b8 	.word	0x400260b8
 8004770:	40021400 	.word	0x40021400
    __HAL_RCC_USART6_CLK_ENABLE();
 8004774:	4b2c      	ldr	r3, [pc, #176]	; (8004828 <HAL_UART_MspInit+0x384>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004776:	f44f 7040 	mov.w	r0, #768	; 0x300
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800477a:	2708      	movs	r7, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800477c:	f04f 0902 	mov.w	r9, #2
    __HAL_RCC_USART6_CLK_ENABLE();
 8004780:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004782:	f04f 0803 	mov.w	r8, #3
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004786:	a911      	add	r1, sp, #68	; 0x44
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8004788:	4e28      	ldr	r6, [pc, #160]	; (800482c <HAL_UART_MspInit+0x388>)
    __HAL_RCC_USART6_CLK_ENABLE();
 800478a:	f042 0220 	orr.w	r2, r2, #32
 800478e:	645a      	str	r2, [r3, #68]	; 0x44
 8004790:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004792:	f002 0220 	and.w	r2, r2, #32
 8004796:	920e      	str	r2, [sp, #56]	; 0x38
 8004798:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800479a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800479c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047a0:	631a      	str	r2, [r3, #48]	; 0x30
 80047a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047a4:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80047a8:	920f      	str	r2, [sp, #60]	; 0x3c
 80047aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80047ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047ae:	f042 0204 	orr.w	r2, r2, #4
 80047b2:	631a      	str	r2, [r3, #48]	; 0x30
 80047b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80047b6:	9011      	str	r0, [sp, #68]	; 0x44
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80047b8:	f003 0304 	and.w	r3, r3, #4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80047bc:	481c      	ldr	r0, [pc, #112]	; (8004830 <HAL_UART_MspInit+0x38c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047be:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80047c2:	9310      	str	r3, [sp, #64]	; 0x40
 80047c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80047c6:	e9cd 8714 	strd	r8, r7, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80047ca:	f003 fe8b 	bl	80084e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80047ce:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047d0:	a911      	add	r1, sp, #68	; 0x44
 80047d2:	4818      	ldr	r0, [pc, #96]	; (8004834 <HAL_UART_MspInit+0x390>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80047d4:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047d6:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047da:	9413      	str	r4, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80047dc:	e9cd 8714 	strd	r8, r7, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047e0:	f003 fe80 	bl	80084e4 <HAL_GPIO_Init>
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80047e4:	f04f 6720 	mov.w	r7, #167772160	; 0xa000000
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80047e8:	f8df c04c 	ldr.w	ip, [pc, #76]	; 8004838 <HAL_UART_MspInit+0x394>
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80047ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80047f0:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80047f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80047f8:	4630      	mov	r0, r6
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80047fa:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80047fc:	6131      	str	r1, [r6, #16]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80047fe:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004802:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8004806:	e9c6 c700 	strd	ip, r7, [r6]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800480a:	e9c6 2307 	strd	r2, r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800480e:	f001 fef1 	bl	80065f4 <HAL_DMA_Init>
 8004812:	b928      	cbnz	r0, 8004820 <HAL_UART_MspInit+0x37c>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8004814:	66ee      	str	r6, [r5, #108]	; 0x6c
 8004816:	63b5      	str	r5, [r6, #56]	; 0x38
}
 8004818:	e665      	b.n	80044e6 <HAL_UART_MspInit+0x42>
      Error_Handler();
 800481a:	f7fd fc13 	bl	8002044 <Error_Handler>
 800481e:	e71e      	b.n	800465e <HAL_UART_MspInit+0x1ba>
      Error_Handler();
 8004820:	f7fd fc10 	bl	8002044 <Error_Handler>
 8004824:	e7f6      	b.n	8004814 <HAL_UART_MspInit+0x370>
 8004826:	bf00      	nop
 8004828:	40023800 	.word	0x40023800
 800482c:	2002a8ec 	.word	0x2002a8ec
 8004830:	40021800 	.word	0x40021800
 8004834:	40020800 	.word	0x40020800
 8004838:	40026428 	.word	0x40026428

0800483c <HAL_UART_MspDeInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==UART4)
 800483c:	4a43      	ldr	r2, [pc, #268]	; (800494c <HAL_UART_MspDeInit+0x110>)
 800483e:	6803      	ldr	r3, [r0, #0]
 8004840:	4293      	cmp	r3, r2
{
 8004842:	b510      	push	{r4, lr}
  if(huart->Instance==UART4)
 8004844:	d01d      	beq.n	8004882 <HAL_UART_MspDeInit+0x46>

  /* USER CODE BEGIN UART4_MspDeInit 1 */

  /* USER CODE END UART4_MspDeInit 1 */
  }
  else if(huart->Instance==UART5)
 8004846:	4a42      	ldr	r2, [pc, #264]	; (8004950 <HAL_UART_MspDeInit+0x114>)
 8004848:	4604      	mov	r4, r0
 800484a:	4293      	cmp	r3, r2
 800484c:	d030      	beq.n	80048b0 <HAL_UART_MspDeInit+0x74>
    HAL_NVIC_DisableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspDeInit 1 */

  /* USER CODE END UART5_MspDeInit 1 */
  }
  else if(huart->Instance==UART7)
 800484e:	4a41      	ldr	r2, [pc, #260]	; (8004954 <HAL_UART_MspDeInit+0x118>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d048      	beq.n	80048e6 <HAL_UART_MspDeInit+0xaa>

  /* USER CODE BEGIN UART7_MspDeInit 1 */

  /* USER CODE END UART7_MspDeInit 1 */
  }
  else if(huart->Instance==USART2)
 8004854:	4a40      	ldr	r2, [pc, #256]	; (8004958 <HAL_UART_MspDeInit+0x11c>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d052      	beq.n	8004900 <HAL_UART_MspDeInit+0xc4>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
  else if(huart->Instance==USART3)
 800485a:	4a40      	ldr	r2, [pc, #256]	; (800495c <HAL_UART_MspDeInit+0x120>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d003      	beq.n	8004868 <HAL_UART_MspDeInit+0x2c>

  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
  else if(huart->Instance==USART6)
 8004860:	4a3f      	ldr	r2, [pc, #252]	; (8004960 <HAL_UART_MspDeInit+0x124>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d05b      	beq.n	800491e <HAL_UART_MspDeInit+0xe2>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 8004866:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART3_CLK_DISABLE();
 8004868:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
    HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);
 800486c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004870:	483c      	ldr	r0, [pc, #240]	; (8004964 <HAL_UART_MspDeInit+0x128>)
    __HAL_RCC_USART3_CLK_DISABLE();
 8004872:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004874:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
}
 8004878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_RCC_USART3_CLK_DISABLE();
 800487c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);
 800487e:	f003 bfd5 	b.w	800882c <HAL_GPIO_DeInit>
    __HAL_RCC_UART4_CLK_DISABLE();
 8004882:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_15);
 8004886:	f248 0101 	movw	r1, #32769	; 0x8001
 800488a:	4837      	ldr	r0, [pc, #220]	; (8004968 <HAL_UART_MspDeInit+0x12c>)
    __HAL_RCC_UART4_CLK_DISABLE();
 800488c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800488e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004892:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_15);
 8004894:	f003 ffca 	bl	800882c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_15);
 8004898:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800489c:	4833      	ldr	r0, [pc, #204]	; (800496c <HAL_UART_MspDeInit+0x130>)
 800489e:	f003 ffc5 	bl	800882c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_11);
 80048a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80048a6:	4832      	ldr	r0, [pc, #200]	; (8004970 <HAL_UART_MspDeInit+0x134>)
}
 80048a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_11);
 80048ac:	f003 bfbe 	b.w	800882c <HAL_GPIO_DeInit>
    __HAL_RCC_UART5_CLK_DISABLE();
 80048b0:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 80048b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80048b8:	482c      	ldr	r0, [pc, #176]	; (800496c <HAL_UART_MspDeInit+0x130>)
    __HAL_RCC_UART5_CLK_DISABLE();
 80048ba:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80048bc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80048c0:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 80048c2:	f003 ffb3 	bl	800882c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 80048c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80048ca:	4829      	ldr	r0, [pc, #164]	; (8004970 <HAL_UART_MspDeInit+0x134>)
 80048cc:	f003 ffae 	bl	800882c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 80048d0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80048d2:	f002 f855 	bl	8006980 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 80048d6:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80048d8:	f002 f852 	bl	8006980 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 80048dc:	2035      	movs	r0, #53	; 0x35
}
 80048de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 80048e2:	f001 bbf5 	b.w	80060d0 <HAL_NVIC_DisableIRQ>
    __HAL_RCC_UART7_CLK_DISABLE();
 80048e6:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8);
 80048ea:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80048ee:	4821      	ldr	r0, [pc, #132]	; (8004974 <HAL_UART_MspDeInit+0x138>)
    __HAL_RCC_UART7_CLK_DISABLE();
 80048f0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80048f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
}
 80048f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_RCC_UART7_CLK_DISABLE();
 80048fa:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8);
 80048fc:	f003 bf96 	b.w	800882c <HAL_GPIO_DeInit>
    __HAL_RCC_USART2_CLK_DISABLE();
 8004900:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 8004904:	4817      	ldr	r0, [pc, #92]	; (8004964 <HAL_UART_MspDeInit+0x128>)
 8004906:	2170      	movs	r1, #112	; 0x70
    __HAL_RCC_USART2_CLK_DISABLE();
 8004908:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800490a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800490e:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 8004910:	f003 ff8c 	bl	800882c <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8004914:	2026      	movs	r0, #38	; 0x26
}
 8004916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800491a:	f001 bbd9 	b.w	80060d0 <HAL_NVIC_DisableIRQ>
    __HAL_RCC_USART6_CLK_DISABLE();
 800491e:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_8|GPIO_PIN_9);
 8004922:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004926:	4814      	ldr	r0, [pc, #80]	; (8004978 <HAL_UART_MspDeInit+0x13c>)
    __HAL_RCC_USART6_CLK_DISABLE();
 8004928:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800492a:	f023 0320 	bic.w	r3, r3, #32
 800492e:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_8|GPIO_PIN_9);
 8004930:	f003 ff7c 	bl	800882c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6);
 8004934:	2140      	movs	r1, #64	; 0x40
 8004936:	480e      	ldr	r0, [pc, #56]	; (8004970 <HAL_UART_MspDeInit+0x134>)
 8004938:	f003 ff78 	bl	800882c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 800493c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800493e:	f002 f81f 	bl	8006980 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8004942:	2047      	movs	r0, #71	; 0x47
}
 8004944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8004948:	f001 bbc2 	b.w	80060d0 <HAL_NVIC_DisableIRQ>
 800494c:	40004c00 	.word	0x40004c00
 8004950:	40005000 	.word	0x40005000
 8004954:	40007800 	.word	0x40007800
 8004958:	40004400 	.word	0x40004400
 800495c:	40004800 	.word	0x40004800
 8004960:	40011400 	.word	0x40011400
 8004964:	40020c00 	.word	0x40020c00
 8004968:	40020000 	.word	0x40020000
 800496c:	40020400 	.word	0x40020400
 8004970:	40020800 	.word	0x40020800
 8004974:	40021400 	.word	0x40021400
 8004978:	40021800 	.word	0x40021800

0800497c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800497c:	b570      	push	{r4, r5, r6, lr}
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM12 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, TickPriority ,0);
 800497e:	4601      	mov	r1, r0
{
 8004980:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, TickPriority ,0);
 8004982:	2200      	movs	r2, #0
 8004984:	202b      	movs	r0, #43	; 0x2b
 8004986:	f001 fb49 	bl	800601c <HAL_NVIC_SetPriority>

  /* Enable the TIM12 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800498a:	202b      	movs	r0, #43	; 0x2b
 800498c:	f001 fb8c 	bl	80060a8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM12 clock */
  __HAL_RCC_TIM12_CLK_ENABLE();
 8004990:	4b15      	ldr	r3, [pc, #84]	; (80049e8 <HAL_InitTick+0x6c>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004992:	a901      	add	r1, sp, #4
 8004994:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM12_CLK_ENABLE();
 8004996:	6c1a      	ldr	r2, [r3, #64]	; 0x40

  /* Compute TIM12 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();

  /* Compute the prescaler value to have TIM12 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8004998:	4e14      	ldr	r6, [pc, #80]	; (80049ec <HAL_InitTick+0x70>)
  __HAL_RCC_TIM12_CLK_ENABLE();
 800499a:	f042 0240 	orr.w	r2, r2, #64	; 0x40

  /* Initialize TIM12 */
  htim12.Instance = TIM12;
 800499e:	4c14      	ldr	r4, [pc, #80]	; (80049f0 <HAL_InitTick+0x74>)
 80049a0:	4d14      	ldr	r5, [pc, #80]	; (80049f4 <HAL_InitTick+0x78>)
  __HAL_RCC_TIM12_CLK_ENABLE();
 80049a2:	641a      	str	r2, [r3, #64]	; 0x40
 80049a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049aa:	9302      	str	r3, [sp, #8]
 80049ac:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80049ae:	f005 ff87 	bl	800a8c0 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80049b2:	f005 ff65 	bl	800a880 <HAL_RCC_GetPCLK1Freq>
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim12.Init.Period = (1000000 / 1000) - 1;
  htim12.Init.Prescaler = uwPrescalerValue;
  htim12.Init.ClockDivision = 0;
 80049b6:	2200      	movs	r2, #0
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80049b8:	0043      	lsls	r3, r0, #1
  htim12.Init.Period = (1000000 / 1000) - 1;
 80049ba:	f240 31e7 	movw	r1, #999	; 0x3e7
  htim12.Instance = TIM12;
 80049be:	6025      	str	r5, [r4, #0]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80049c0:	fba6 0303 	umull	r0, r3, r6, r3
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim12) == HAL_OK)
 80049c4:	4620      	mov	r0, r4
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80049c6:	0c9b      	lsrs	r3, r3, #18
 80049c8:	3b01      	subs	r3, #1
  htim12.Init.ClockDivision = 0;
 80049ca:	e9c4 1203 	strd	r1, r2, [r4, #12]
  htim12.Init.Prescaler = uwPrescalerValue;
 80049ce:	e9c4 3201 	strd	r3, r2, [r4, #4]
  if(HAL_TIM_Base_Init(&htim12) == HAL_OK)
 80049d2:	f008 f8b3 	bl	800cb3c <HAL_TIM_Base_Init>
 80049d6:	b110      	cbz	r0, 80049de <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim12);
  }

  /* Return function status */
  return HAL_ERROR;
 80049d8:	2001      	movs	r0, #1
}
 80049da:	b008      	add	sp, #32
 80049dc:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_TIM_Base_Start_IT(&htim12);
 80049de:	4620      	mov	r0, r4
 80049e0:	f007 fb38 	bl	800c054 <HAL_TIM_Base_Start_IT>
}
 80049e4:	b008      	add	sp, #32
 80049e6:	bd70      	pop	{r4, r5, r6, pc}
 80049e8:	40023800 	.word	0x40023800
 80049ec:	431bde83 	.word	0x431bde83
 80049f0:	2002b448 	.word	0x2002b448
 80049f4:	40001800 	.word	0x40001800

080049f8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop

080049fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049fc:	e7fe      	b.n	80049fc <HardFault_Handler>
 80049fe:	bf00      	nop

08004a00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a00:	e7fe      	b.n	8004a00 <MemManage_Handler>
 8004a02:	bf00      	nop

08004a04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a04:	e7fe      	b.n	8004a04 <BusFault_Handler>
 8004a06:	bf00      	nop

08004a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a08:	e7fe      	b.n	8004a08 <UsageFault_Handler>
 8004a0a:	bf00      	nop

08004a0c <RCC_IRQHandler>:
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop

08004a10 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8004a10:	4801      	ldr	r0, [pc, #4]	; (8004a18 <DMA1_Stream0_IRQHandler+0x8>)
 8004a12:	f002 b91f 	b.w	8006c54 <HAL_DMA_IRQHandler>
 8004a16:	bf00      	nop
 8004a18:	2002b20c 	.word	0x2002b20c

08004a1c <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up_ch3);
 8004a1c:	4801      	ldr	r0, [pc, #4]	; (8004a24 <DMA1_Stream1_IRQHandler+0x8>)
 8004a1e:	f002 b919 	b.w	8006c54 <HAL_DMA_IRQHandler>
 8004a22:	bf00      	nop
 8004a24:	2002ac50 	.word	0x2002ac50

08004a28 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8004a28:	4801      	ldr	r0, [pc, #4]	; (8004a30 <DMA1_Stream5_IRQHandler+0x8>)
 8004a2a:	f002 b913 	b.w	8006c54 <HAL_DMA_IRQHandler>
 8004a2e:	bf00      	nop
 8004a30:	2002ad54 	.word	0x2002ad54

08004a34 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8004a34:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004a36:	4805      	ldr	r0, [pc, #20]	; (8004a4c <ADC_IRQHandler+0x18>)
 8004a38:	f001 f8d0 	bl	8005bdc <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8004a3c:	4804      	ldr	r0, [pc, #16]	; (8004a50 <ADC_IRQHandler+0x1c>)
 8004a3e:	f001 f8cd 	bl	8005bdc <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8004a42:	4804      	ldr	r0, [pc, #16]	; (8004a54 <ADC_IRQHandler+0x20>)
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8004a44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc3);
 8004a48:	f001 b8c8 	b.w	8005bdc <HAL_ADC_IRQHandler>
 8004a4c:	2002ae34 	.word	0x2002ae34
 8004a50:	2002aaf0 	.word	0x2002aaf0
 8004a54:	2002ae7c 	.word	0x2002ae7c

08004a58 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004a58:	4801      	ldr	r0, [pc, #4]	; (8004a60 <TIM2_IRQHandler+0x8>)
 8004a5a:	f007 bf3b 	b.w	800c8d4 <HAL_TIM_IRQHandler>
 8004a5e:	bf00      	nop
 8004a60:	2002b14c 	.word	0x2002b14c

08004a64 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004a64:	4801      	ldr	r0, [pc, #4]	; (8004a6c <TIM3_IRQHandler+0x8>)
 8004a66:	f007 bf35 	b.w	800c8d4 <HAL_TIM_IRQHandler>
 8004a6a:	bf00      	nop
 8004a6c:	2002acb0 	.word	0x2002acb0

08004a70 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004a70:	4801      	ldr	r0, [pc, #4]	; (8004a78 <USART2_IRQHandler+0x8>)
 8004a72:	f009 bdff 	b.w	800e674 <HAL_UART_IRQHandler>
 8004a76:	bf00      	nop
 8004a78:	2002b18c 	.word	0x2002b18c

08004a7c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004a7c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004a80:	f004 b810 	b.w	8008aa4 <HAL_GPIO_EXTI_IRQHandler>

08004a84 <TIM8_BRK_TIM12_IRQHandler>:
void TIM8_BRK_TIM12_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8004a84:	4801      	ldr	r0, [pc, #4]	; (8004a8c <TIM8_BRK_TIM12_IRQHandler+0x8>)
 8004a86:	f007 bf25 	b.w	800c8d4 <HAL_TIM_IRQHandler>
 8004a8a:	bf00      	nop
 8004a8c:	2002b448 	.word	0x2002b448

08004a90 <TIM8_TRG_COM_TIM14_IRQHandler>:
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8004a90:	4801      	ldr	r0, [pc, #4]	; (8004a98 <TIM8_TRG_COM_TIM14_IRQHandler+0x8>)
 8004a92:	f007 bf1f 	b.w	800c8d4 <HAL_TIM_IRQHandler>
 8004a96:	bf00      	nop
 8004a98:	2002b26c 	.word	0x2002b26c

08004a9c <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8004a9c:	4801      	ldr	r0, [pc, #4]	; (8004aa4 <DMA1_Stream7_IRQHandler+0x8>)
 8004a9e:	f002 b8d9 	b.w	8006c54 <HAL_DMA_IRQHandler>
 8004aa2:	bf00      	nop
 8004aa4:	2002b2f0 	.word	0x2002b2f0

08004aa8 <TIM5_IRQHandler>:
void TIM5_IRQHandler(void)
{
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004aa8:	4801      	ldr	r0, [pc, #4]	; (8004ab0 <TIM5_IRQHandler+0x8>)
 8004aaa:	f007 bf13 	b.w	800c8d4 <HAL_TIM_IRQHandler>
 8004aae:	bf00      	nop
 8004ab0:	2002ac10 	.word	0x2002ac10

08004ab4 <UART5_IRQHandler>:
void UART5_IRQHandler(void)
{
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8004ab4:	4801      	ldr	r0, [pc, #4]	; (8004abc <UART5_IRQHandler+0x8>)
 8004ab6:	f009 bddd 	b.w	800e674 <HAL_UART_IRQHandler>
 8004aba:	bf00      	nop
 8004abc:	2002adb4 	.word	0x2002adb4

08004ac0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004ac0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8004ac2:	4804      	ldr	r0, [pc, #16]	; (8004ad4 <TIM6_DAC_IRQHandler+0x14>)
 8004ac4:	f001 fce6 	bl	8006494 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8004ac8:	4803      	ldr	r0, [pc, #12]	; (8004ad8 <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004aca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 8004ace:	f007 bf01 	b.w	800c8d4 <HAL_TIM_IRQHandler>
 8004ad2:	bf00      	nop
 8004ad4:	2002aed4 	.word	0x2002aed4
 8004ad8:	2002afb4 	.word	0x2002afb4

08004adc <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8004adc:	4801      	ldr	r0, [pc, #4]	; (8004ae4 <DMA2_Stream1_IRQHandler+0x8>)
 8004ade:	f002 b8b9 	b.w	8006c54 <HAL_DMA_IRQHandler>
 8004ae2:	bf00      	nop
 8004ae4:	2002a8ec 	.word	0x2002a8ec

08004ae8 <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004ae8:	4801      	ldr	r0, [pc, #4]	; (8004af0 <DMA2_Stream4_IRQHandler+0x8>)
 8004aea:	f002 b8b3 	b.w	8006c54 <HAL_DMA_IRQHandler>
 8004aee:	bf00      	nop
 8004af0:	2002af50 	.word	0x2002af50

08004af4 <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8004af4:	4801      	ldr	r0, [pc, #4]	; (8004afc <ETH_IRQHandler+0x8>)
 8004af6:	f003 b801 	b.w	8007afc <HAL_ETH_IRQHandler>
 8004afa:	bf00      	nop
 8004afc:	2002d278 	.word	0x2002d278

08004b00 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004b00:	4801      	ldr	r0, [pc, #4]	; (8004b08 <OTG_FS_IRQHandler+0x8>)
 8004b02:	f004 bdad 	b.w	8009660 <HAL_PCD_IRQHandler>
 8004b06:	bf00      	nop
 8004b08:	2003f800 	.word	0x2003f800

08004b0c <USART6_IRQHandler>:
void USART6_IRQHandler(void)
{
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004b0c:	4801      	ldr	r0, [pc, #4]	; (8004b14 <USART6_IRQHandler+0x8>)
 8004b0e:	f009 bdb1 	b.w	800e674 <HAL_UART_IRQHandler>
 8004b12:	bf00      	nop
 8004b14:	2002b048 	.word	0x2002b048

08004b18 <FPU_IRQHandler>:
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop

08004b1c <MDIOS_IRQHandler>:
void MDIOS_IRQHandler(void)
{
  /* USER CODE BEGIN MDIOS_IRQn 0 */

  /* USER CODE END MDIOS_IRQn 0 */
  HAL_MDIOS_IRQHandler(&hmdios);
 8004b1c:	4801      	ldr	r0, [pc, #4]	; (8004b24 <MDIOS_IRQHandler+0x8>)
 8004b1e:	f004 bc89 	b.w	8009434 <HAL_MDIOS_IRQHandler>
 8004b22:	bf00      	nop
 8004b24:	2002aec4 	.word	0x2002aec4

08004b28 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8004b28:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004b2a:	1e16      	subs	r6, r2, #0
 8004b2c:	dd07      	ble.n	8004b3e <_read+0x16>
 8004b2e:	460c      	mov	r4, r1
 8004b30:	198d      	adds	r5, r1, r6
		*ptr++ = __io_getchar();
 8004b32:	f3af 8000 	nop.w
 8004b36:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004b3a:	42a5      	cmp	r5, r4
 8004b3c:	d1f9      	bne.n	8004b32 <_read+0xa>
	}

	return len;
}
 8004b3e:	4630      	mov	r0, r6
 8004b40:	bd70      	pop	{r4, r5, r6, pc}
 8004b42:	bf00      	nop

08004b44 <_close>:
	return len;
}

int _close(int file) {
	return -1;
}
 8004b44:	f04f 30ff 	mov.w	r0, #4294967295
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop

08004b4c <_fstat>:

int _fstat(int file, struct stat *st) {
	st->st_mode = S_IFCHR;
 8004b4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8004b50:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8004b52:	604b      	str	r3, [r1, #4]
}
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop

08004b58 <_isatty>:

int _isatty(int file) {
	return 1;
}
 8004b58:	2001      	movs	r0, #1
 8004b5a:	4770      	bx	lr

08004b5c <_lseek>:

int _lseek(int file, int ptr, int dir) {
	return 0;
}
 8004b5c:	2000      	movs	r0, #0
 8004b5e:	4770      	bx	lr

08004b60 <_sbrk>:
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
	const uint8_t *max_heap = (uint8_t*) stack_limit;
	uint8_t *prev_heap_end;

	/* Initalize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8004b60:	490d      	ldr	r1, [pc, #52]	; (8004b98 <_sbrk+0x38>)
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 8004b62:	4a0e      	ldr	r2, [pc, #56]	; (8004b9c <_sbrk+0x3c>)
	if (NULL == __sbrk_heap_end) {
 8004b64:	680b      	ldr	r3, [r1, #0]
void* _sbrk(ptrdiff_t incr) {
 8004b66:	b410      	push	{r4}
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 8004b68:	4c0d      	ldr	r4, [pc, #52]	; (8004ba0 <_sbrk+0x40>)
 8004b6a:	1b12      	subs	r2, r2, r4
	if (NULL == __sbrk_heap_end) {
 8004b6c:	b183      	cbz	r3, 8004b90 <_sbrk+0x30>
		__sbrk_heap_end = &_end;
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8004b6e:	4418      	add	r0, r3
 8004b70:	4290      	cmp	r0, r2
 8004b72:	d804      	bhi.n	8004b7e <_sbrk+0x1e>
		errno = ENOMEM;
		return (void*) -1;
	}

	prev_heap_end = __sbrk_heap_end;
	__sbrk_heap_end += incr;
 8004b74:	6008      	str	r0, [r1, #0]

	return (void*) prev_heap_end;
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b7c:	4770      	bx	lr
		errno = ENOMEM;
 8004b7e:	4a09      	ldr	r2, [pc, #36]	; (8004ba4 <_sbrk+0x44>)
 8004b80:	210c      	movs	r1, #12
		return (void*) -1;
 8004b82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b86:	f85d 4b04 	ldr.w	r4, [sp], #4
		errno = ENOMEM;
 8004b8a:	6011      	str	r1, [r2, #0]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	4770      	bx	lr
		__sbrk_heap_end = &_end;
 8004b90:	4c05      	ldr	r4, [pc, #20]	; (8004ba8 <_sbrk+0x48>)
 8004b92:	4623      	mov	r3, r4
 8004b94:	600c      	str	r4, [r1, #0]
 8004b96:	e7ea      	b.n	8004b6e <_sbrk+0xe>
 8004b98:	20001694 	.word	0x20001694
 8004b9c:	20080000 	.word	0x20080000
 8004ba0:	00010000 	.word	0x00010000
 8004ba4:	2003e328 	.word	0x2003e328
 8004ba8:	2003fc08 	.word	0x2003fc08

08004bac <SystemInit>:
 * @retval None
 */
void SystemInit(void) {
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004bac:	4a0f      	ldr	r2, [pc, #60]	; (8004bec <SystemInit+0x40>)
  #endif
	/* Reset the RCC clock configuration to the default reset state ------------*/
	/* Set HSION bit */
	RCC->CR |= (uint32_t) 0x00000001;
 8004bae:	4b10      	ldr	r3, [pc, #64]	; (8004bf0 <SystemInit+0x44>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004bb0:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;

	/* Reset HSEON, CSSON and PLLON bits */
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 8004bb4:	490f      	ldr	r1, [pc, #60]	; (8004bf4 <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004bb6:	f440 0070 	orr.w	r0, r0, #15728640	; 0xf00000
void SystemInit(void) {
 8004bba:	b470      	push	{r4, r5, r6}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004bbc:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
	RCC->CFGR = 0x00000000;
 8004bc0:	2400      	movs	r4, #0
	RCC->CR |= (uint32_t) 0x00000001;
 8004bc2:	6818      	ldr	r0, [r3, #0]

	/* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004bc4:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
	RCC->PLLCFGR = 0x24003010;
 8004bc8:	4e0b      	ldr	r6, [pc, #44]	; (8004bf8 <SystemInit+0x4c>)
	RCC->CR |= (uint32_t) 0x00000001;
 8004bca:	f040 0001 	orr.w	r0, r0, #1
 8004bce:	6018      	str	r0, [r3, #0]
	RCC->CFGR = 0x00000000;
 8004bd0:	609c      	str	r4, [r3, #8]
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 8004bd2:	6818      	ldr	r0, [r3, #0]
 8004bd4:	4001      	ands	r1, r0
 8004bd6:	6019      	str	r1, [r3, #0]
	RCC->PLLCFGR = 0x24003010;
 8004bd8:	605e      	str	r6, [r3, #4]
	RCC->CR &= (uint32_t) 0xFFFBFFFF;
 8004bda:	6819      	ldr	r1, [r3, #0]
 8004bdc:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8004be0:	6019      	str	r1, [r3, #0]
	RCC->CIR = 0x00000000;
 8004be2:	60dc      	str	r4, [r3, #12]
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004be4:	6095      	str	r5, [r2, #8]
#endif
}
 8004be6:	bc70      	pop	{r4, r5, r6}
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	e000ed00 	.word	0xe000ed00
 8004bf0:	40023800 	.word	0x40023800
 8004bf4:	fef6ffff 	.word	0xfef6ffff
 8004bf8:	24003010 	.word	0x24003010

08004bfc <dnsfound>:
}

// Delayed DNS lookup result callback

void dnsfound(const char *name, const ip_addr_t *ipaddr, void *callback_arg) {
	if (ipaddr->addr == NULL) {
 8004bfc:	680b      	ldr	r3, [r1, #0]
 8004bfe:	b113      	cbz	r3, 8004c06 <dnsfound+0xa>
		ip_ready = -1;
	} else
		ip_ready = ipaddr->addr;
 8004c00:	4a03      	ldr	r2, [pc, #12]	; (8004c10 <dnsfound+0x14>)
 8004c02:	6013      	str	r3, [r2, #0]
}
 8004c04:	4770      	bx	lr
		ip_ready = -1;
 8004c06:	4b02      	ldr	r3, [pc, #8]	; (8004c10 <dnsfound+0x14>)
 8004c08:	f04f 32ff 	mov.w	r2, #4294967295
 8004c0c:	601a      	str	r2, [r3, #0]
 8004c0e:	4770      	bx	lr
 8004c10:	200016a0 	.word	0x200016a0

08004c14 <myreboot>:
	printf("%s, ... rebooting\n", msg);
 8004c14:	4601      	mov	r1, r0
 8004c16:	480a      	ldr	r0, [pc, #40]	; (8004c40 <myreboot+0x2c>)
void myreboot(char *msg) {
 8004c18:	b508      	push	{r3, lr}
	printf("%s, ... rebooting\n", msg);
 8004c1a:	f01b ffcd 	bl	8020bb8 <iprintf>
	osDelay(2000);
 8004c1e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004c22:	f00c fa59 	bl	80110d8 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 8004c26:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004c2a:	4906      	ldr	r1, [pc, #24]	; (8004c44 <myreboot+0x30>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004c2c:	4b06      	ldr	r3, [pc, #24]	; (8004c48 <myreboot+0x34>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004c2e:	68ca      	ldr	r2, [r1, #12]
 8004c30:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004c34:	4313      	orrs	r3, r2
 8004c36:	60cb      	str	r3, [r1, #12]
 8004c38:	f3bf 8f4f 	dsb	sy
    __NOP();
 8004c3c:	bf00      	nop
 8004c3e:	e7fd      	b.n	8004c3c <myreboot+0x28>
 8004c40:	08026180 	.word	0x08026180
 8004c44:	e000ed00 	.word	0xe000ed00
 8004c48:	05fa0004 	.word	0x05fa0004

08004c4c <sendudp>:
/*inline*/err_t sendudp(struct udp_pcb *pcb, struct pbuf *ps, const ip_addr_t *dst_ip, u16_t dst_port) {
 8004c4c:	b500      	push	{lr}
 8004c4e:	b083      	sub	sp, #12
	err = udp_sendto(pcb, ps, &udpdestip, UDP_PORT_NO);
 8004c50:	f241 3388 	movw	r3, #5000	; 0x1388
 8004c54:	4a16      	ldr	r2, [pc, #88]	; (8004cb0 <sendudp+0x64>)
 8004c56:	f017 f8cb 	bl	801bdf0 <udp_sendto>
 8004c5a:	f88d 0007 	strb.w	r0, [sp, #7]
	if (err != ERR_OK) {
 8004c5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004c62:	b25b      	sxtb	r3, r3
 8004c64:	b93b      	cbnz	r3, 8004c76 <sendudp+0x2a>
		busycount = 0;
 8004c66:	4a13      	ldr	r2, [pc, #76]	; (8004cb4 <sendudp+0x68>)
 8004c68:	6013      	str	r3, [r2, #0]
	return (err);
 8004c6a:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8004c6e:	b240      	sxtb	r0, r0
 8004c70:	b003      	add	sp, #12
 8004c72:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("sendudp: err %i\n", err);
 8004c76:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8004c7a:	480f      	ldr	r0, [pc, #60]	; (8004cb8 <sendudp+0x6c>)
 8004c7c:	b249      	sxtb	r1, r1
 8004c7e:	f01b ff9b 	bl	8020bb8 <iprintf>
		vTaskDelay(100); //some delay!
 8004c82:	2064      	movs	r0, #100	; 0x64
 8004c84:	f00d fcaa 	bl	80125dc <vTaskDelay>
		if (err == ERR_MEM) {
 8004c88:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004c8c:	2bff      	cmp	r3, #255	; 0xff
 8004c8e:	d00c      	beq.n	8004caa <sendudp+0x5e>
		if (err == ERR_USE) {
 8004c90:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004c94:	2bf8      	cmp	r3, #248	; 0xf8
 8004c96:	d1e8      	bne.n	8004c6a <sendudp+0x1e>
			if (busycount++ > 10)
 8004c98:	4a06      	ldr	r2, [pc, #24]	; (8004cb4 <sendudp+0x68>)
 8004c9a:	6813      	ldr	r3, [r2, #0]
 8004c9c:	1c59      	adds	r1, r3, #1
 8004c9e:	2b0a      	cmp	r3, #10
 8004ca0:	6011      	str	r1, [r2, #0]
 8004ca2:	dde2      	ble.n	8004c6a <sendudp+0x1e>
				myreboot("sendudp: udp always busy");
 8004ca4:	4805      	ldr	r0, [pc, #20]	; (8004cbc <sendudp+0x70>)
 8004ca6:	f7ff ffb5 	bl	8004c14 <myreboot>
			myreboot("sendudp: out of mem");
 8004caa:	4805      	ldr	r0, [pc, #20]	; (8004cc0 <sendudp+0x74>)
 8004cac:	f7ff ffb2 	bl	8004c14 <myreboot>
 8004cb0:	2002b49c 	.word	0x2002b49c
 8004cb4:	20001698 	.word	0x20001698
 8004cb8:	08026194 	.word	0x08026194
 8004cbc:	080261bc 	.word	0x080261bc
 8004cc0:	080261a8 	.word	0x080261a8

08004cc4 <sendstatus>:
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 8004cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8004cc8:	4c25      	ldr	r4, [pc, #148]	; (8004d60 <sendstatus+0x9c>)
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 8004cca:	4617      	mov	r7, r2
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8004ccc:	4a25      	ldr	r2, [pc, #148]	; (8004d64 <sendstatus+0xa0>)
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 8004cce:	b082      	sub	sp, #8
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8004cd0:	f9b4 4000 	ldrsh.w	r4, [r4]
	err = sendudp(pcb, ps, &udpdestip, UDP_PORT_NO);
 8004cd4:	f241 3388 	movw	r3, #5000	; 0x1388
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8004cd8:	8815      	ldrh	r5, [r2, #0]
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8004cda:	ea84 7ee4 	eor.w	lr, r4, r4, asr #31
	statuspkt.adcbase = (globaladcavg & 0xfff);	// agc
 8004cde:	4e22      	ldr	r6, [pc, #136]	; (8004d68 <sendstatus+0xa4>)
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8004ce0:	4a22      	ldr	r2, [pc, #136]	; (8004d6c <sendstatus+0xa8>)
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8004ce2:	ebae 7ee4 	sub.w	lr, lr, r4, asr #31
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8004ce6:	1b64      	subs	r4, r4, r5
	statuspkt.adcbase = (globaladcavg & 0xfff);	// agc
 8004ce8:	f8d6 c000 	ldr.w	ip, [r6]
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8004cec:	2c00      	cmp	r4, #0
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8004cee:	4e20      	ldr	r6, [pc, #128]	; (8004d70 <sendstatus+0xac>)
 8004cf0:	f3ce 0e0b 	ubfx	lr, lr, #0, #12
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8004cf4:	8812      	ldrh	r2, [r2, #0]
 8004cf6:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8004d80 <sendstatus+0xbc>
 8004cfa:	bfb8      	it	lt
 8004cfc:	4264      	neglt	r4, r4
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8004cfe:	4d1d      	ldr	r5, [pc, #116]	; (8004d74 <sendstatus+0xb0>)
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8004d00:	0312      	lsls	r2, r2, #12
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8004d02:	f8a6 e072 	strh.w	lr, [r6, #114]	; 0x72
	statuspkt.adcbase = (globaladcavg & 0xfff);	// agc
 8004d06:	f3cc 0c0b 	ubfx	ip, ip, #0, #12
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8004d0a:	f8b8 e000 	ldrh.w	lr, [r8]
 8004d0e:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8004d12:	682d      	ldr	r5, [r5, #0]
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8004d14:	4474      	add	r4, lr
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8004d16:	f8df e06c 	ldr.w	lr, [pc, #108]	; 8004d84 <sendstatus+0xc0>
 8004d1a:	022d      	lsls	r5, r5, #8
	statuspkt.adcbase = (globaladcavg & 0xfff);	// agc
 8004d1c:	f8a6 c062 	strh.w	ip, [r6, #98]	; 0x62
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8004d20:	f89e e000 	ldrb.w	lr, [lr]
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8004d24:	4314      	orrs	r4, r2
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8004d26:	f8d6 c074 	ldr.w	ip, [r6, #116]	; 0x74
 8004d2a:	b2ad      	uxth	r5, r5
 8004d2c:	4a12      	ldr	r2, [pc, #72]	; (8004d78 <sendstatus+0xb4>)
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8004d2e:	b2a4      	uxth	r4, r4
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8004d30:	ea45 050e 	orr.w	r5, r5, lr
 8004d34:	ea0c 0202 	and.w	r2, ip, r2
	((uint8_t*) (ps->payload))[3] = stype; // timed status pkt type
 8004d38:	f8d1 c004 	ldr.w	ip, [r1, #4]
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8004d3c:	4315      	orrs	r5, r2
	err = sendudp(pcb, ps, &udpdestip, UDP_PORT_NO);
 8004d3e:	4a0f      	ldr	r2, [pc, #60]	; (8004d7c <sendstatus+0xb8>)
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8004d40:	6775      	str	r5, [r6, #116]	; 0x74
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8004d42:	f8a6 4060 	strh.w	r4, [r6, #96]	; 0x60
	((uint8_t*) (ps->payload))[3] = stype; // timed status pkt type
 8004d46:	f88c 0003 	strb.w	r0, [ip, #3]
	err = sendudp(pcb, ps, &udpdestip, UDP_PORT_NO);
 8004d4a:	4638      	mov	r0, r7
 8004d4c:	f7ff ff7e 	bl	8004c4c <sendudp>
 8004d50:	f88d 0007 	strb.w	r0, [sp, #7]
	statuspkt.udppknum++;
 8004d54:	6833      	ldr	r3, [r6, #0]
 8004d56:	3301      	adds	r3, #1
 8004d58:	6033      	str	r3, [r6, #0]
}
 8004d5a:	b002      	add	sp, #8
 8004d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d60:	20000700 	.word	0x20000700
 8004d64:	200006b8 	.word	0x200006b8
 8004d68:	200006ac 	.word	0x200006ac
 8004d6c:	2000023e 	.word	0x2000023e
 8004d70:	2002a784 	.word	0x2002a784
 8004d74:	200006b4 	.word	0x200006b4
 8004d78:	ffff0000 	.word	0xffff0000
 8004d7c:	2002b49c 	.word	0x2002b49c
 8004d80:	20000002 	.word	0x20000002
 8004d84:	2000069c 	.word	0x2000069c

08004d88 <sendtimedstatus>:
void sendtimedstatus(struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 8004d88:	b470      	push	{r4, r5, r6}
	if ((t1sec != talive) && (t1sec % STAT_TIME == 0)) { // this is a temporary mech to send timed status pkts...
 8004d8a:	4b0c      	ldr	r3, [pc, #48]	; (8004dbc <sendtimedstatus+0x34>)
 8004d8c:	4e0c      	ldr	r6, [pc, #48]	; (8004dc0 <sendtimedstatus+0x38>)
 8004d8e:	681d      	ldr	r5, [r3, #0]
 8004d90:	6834      	ldr	r4, [r6, #0]
 8004d92:	42a5      	cmp	r5, r4
 8004d94:	d008      	beq.n	8004da8 <sendtimedstatus+0x20>
 8004d96:	4c0b      	ldr	r4, [pc, #44]	; (8004dc4 <sendtimedstatus+0x3c>)
 8004d98:	fba4 3405 	umull	r3, r4, r4, r5
 8004d9c:	09a4      	lsrs	r4, r4, #6
 8004d9e:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8004da2:	ebb5 0fc4 	cmp.w	r5, r4, lsl #3
 8004da6:	d001      	beq.n	8004dac <sendtimedstatus+0x24>
}
 8004da8:	bc70      	pop	{r4, r5, r6}
 8004daa:	4770      	bx	lr
		sendstatus(TIMED, ps, pcb, batchid);
 8004dac:	4613      	mov	r3, r2
		talive = t1sec;
 8004dae:	6035      	str	r5, [r6, #0]
		sendstatus(TIMED, ps, pcb, batchid);
 8004db0:	460a      	mov	r2, r1
 8004db2:	4601      	mov	r1, r0
 8004db4:	2002      	movs	r0, #2
}
 8004db6:	bc70      	pop	{r4, r5, r6}
		sendstatus(TIMED, ps, pcb, batchid);
 8004db8:	f7ff bf84 	b.w	8004cc4 <sendstatus>
 8004dbc:	20001648 	.word	0x20001648
 8004dc0:	200016a4 	.word	0x200016a4
 8004dc4:	88888889 	.word	0x88888889

08004dc8 <dnslookup>:

// set destination server IP using DNS lookup
int dnslookup(char *name, struct ip4_addr *ip) {
 8004dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dca:	4605      	mov	r5, r0
 8004dcc:	460f      	mov	r7, r1
	int i, err = 0;

	printf("DNS Resolving %s ", name);
//	osDelay(500);
	ip_ready = 0;
 8004dce:	2400      	movs	r4, #0
	printf("DNS Resolving %s ", name);
 8004dd0:	4819      	ldr	r0, [pc, #100]	; (8004e38 <dnslookup+0x70>)
 8004dd2:	4629      	mov	r1, r5
	ip_ready = 0;
 8004dd4:	4e19      	ldr	r6, [pc, #100]	; (8004e3c <dnslookup+0x74>)
	printf("DNS Resolving %s ", name);
 8004dd6:	f01b feef 	bl	8020bb8 <iprintf>
	err = dns_gethostbyname(name, ip, dnsfound, 0);
 8004dda:	4628      	mov	r0, r5
 8004ddc:	4639      	mov	r1, r7
 8004dde:	4623      	mov	r3, r4
 8004de0:	4a17      	ldr	r2, [pc, #92]	; (8004e40 <dnslookup+0x78>)
	ip_ready = 0;
 8004de2:	6034      	str	r4, [r6, #0]
	err = dns_gethostbyname(name, ip, dnsfound, 0);
 8004de4:	f010 fc54 	bl	8015690 <dns_gethostbyname>
 8004de8:	4605      	mov	r5, r0

	switch (err) {
 8004dea:	3005      	adds	r0, #5
 8004dec:	d007      	beq.n	8004dfe <dnslookup+0x36>
 8004dee:	b90d      	cbnz	r5, 8004df4 <dnslookup+0x2c>
	default:
		printf("****** gethostbyname failed *****\n ");
		break;
	}
	return (err);
}
 8004df0:	4628      	mov	r0, r5
 8004df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("****** gethostbyname failed *****\n ");
 8004df4:	4813      	ldr	r0, [pc, #76]	; (8004e44 <dnslookup+0x7c>)
 8004df6:	f01b fedf 	bl	8020bb8 <iprintf>
}
 8004dfa:	4628      	mov	r0, r5
 8004dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("gethostbyname INPROGRESS");
 8004dfe:	4812      	ldr	r0, [pc, #72]	; (8004e48 <dnslookup+0x80>)
 8004e00:	2414      	movs	r4, #20
 8004e02:	f01b fed9 	bl	8020bb8 <iprintf>
 8004e06:	e001      	b.n	8004e0c <dnslookup+0x44>
		for (i = 0; i < 20; i++) {
 8004e08:	3c01      	subs	r4, #1
 8004e0a:	d0f3      	beq.n	8004df4 <dnslookup+0x2c>
			osDelay(1000);		// give it 20 seconds
 8004e0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e10:	f00c f962 	bl	80110d8 <osDelay>
			printf(".");
 8004e14:	202e      	movs	r0, #46	; 0x2e
 8004e16:	f01b fee7 	bl	8020be8 <putchar>
			if (ip_ready) {
 8004e1a:	6833      	ldr	r3, [r6, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d0f3      	beq.n	8004e08 <dnslookup+0x40>
				if (ip_ready == -1) {
 8004e20:	1c5a      	adds	r2, r3, #1
 8004e22:	d003      	beq.n	8004e2c <dnslookup+0x64>
				return (ERR_OK);
 8004e24:	2500      	movs	r5, #0
				ip->addr = ip_ready;
 8004e26:	603b      	str	r3, [r7, #0]
}
 8004e28:	4628      	mov	r0, r5
 8004e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					ip->addr = "127.0.0.1";	// safe ?
 8004e2c:	4b07      	ldr	r3, [pc, #28]	; (8004e4c <dnslookup+0x84>)
					return (ERR_TIMEOUT);	// not always timeout, but some error
 8004e2e:	f06f 0502 	mvn.w	r5, #2
					ip->addr = "127.0.0.1";	// safe ?
 8004e32:	603b      	str	r3, [r7, #0]
					return (ERR_TIMEOUT);	// not always timeout, but some error
 8004e34:	e7dc      	b.n	8004df0 <dnslookup+0x28>
 8004e36:	bf00      	nop
 8004e38:	080260dc 	.word	0x080260dc
 8004e3c:	200016a0 	.word	0x200016a0
 8004e40:	08004bfd 	.word	0x08004bfd
 8004e44:	08026118 	.word	0x08026118
 8004e48:	080260f0 	.word	0x080260f0
 8004e4c:	0802610c 	.word	0x0802610c

08004e50 <locateudp>:

uint32_t locateudp()		// called from LPtask every n seconds
{
 8004e50:	b530      	push	{r4, r5, lr}
	volatile err_t err;
	uint32_t ip = 0;

	printf("Finding %s for UDP streaming\n", udp_target);
 8004e52:	4913      	ldr	r1, [pc, #76]	; (8004ea0 <locateudp+0x50>)
{
 8004e54:	b085      	sub	sp, #20
	printf("Finding %s for UDP streaming\n", udp_target);
 8004e56:	4813      	ldr	r0, [pc, #76]	; (8004ea4 <locateudp+0x54>)
 8004e58:	f01b feae 	bl	8020bb8 <iprintf>
	err = dnslookup(udp_target, &udpdestip);
 8004e5c:	4912      	ldr	r1, [pc, #72]	; (8004ea8 <locateudp+0x58>)
 8004e5e:	4810      	ldr	r0, [pc, #64]	; (8004ea0 <locateudp+0x50>)
 8004e60:	f7ff ffb2 	bl	8004dc8 <dnslookup>
 8004e64:	b240      	sxtb	r0, r0
 8004e66:	f88d 000f 	strb.w	r0, [sp, #15]
	if (err)
 8004e6a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8004e6e:	b10b      	cbz	r3, 8004e74 <locateudp+0x24>
		rebootme();
 8004e70:	f7fd f800 	bl	8001e74 <rebootme>

	ip = udpdestip.addr;
 8004e74:	4b0c      	ldr	r3, [pc, #48]	; (8004ea8 <locateudp+0x58>)
	sprintf(udp_ips, "%lu.%lu.%lu.%lu", ip & 0xff, (ip & 0xff00) >> 8, (ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
 8004e76:	490d      	ldr	r1, [pc, #52]	; (8004eac <locateudp+0x5c>)
	ip = udpdestip.addr;
 8004e78:	681c      	ldr	r4, [r3, #0]
	sprintf(udp_ips, "%lu.%lu.%lu.%lu", ip & 0xff, (ip & 0xff00) >> 8, (ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
 8004e7a:	480d      	ldr	r0, [pc, #52]	; (8004eb0 <locateudp+0x60>)
 8004e7c:	0e22      	lsrs	r2, r4, #24
 8004e7e:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8004e82:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8004e86:	9201      	str	r2, [sp, #4]
 8004e88:	b2e2      	uxtb	r2, r4
 8004e8a:	9500      	str	r5, [sp, #0]
 8004e8c:	f01b ffec 	bl	8020e68 <siprintf>
	printf("\nUDP Target IP: %s\n", udp_ips);
 8004e90:	4907      	ldr	r1, [pc, #28]	; (8004eb0 <locateudp+0x60>)
 8004e92:	4808      	ldr	r0, [pc, #32]	; (8004eb4 <locateudp+0x64>)
 8004e94:	f01b fe90 	bl	8020bb8 <iprintf>
	return (ip);
}
 8004e98:	4620      	mov	r0, r4
 8004e9a:	b005      	add	sp, #20
 8004e9c:	bd30      	pop	{r4, r5, pc}
 8004e9e:	bf00      	nop
 8004ea0:	2002b4a0 	.word	0x2002b4a0
 8004ea4:	0802613c 	.word	0x0802613c
 8004ea8:	2002b49c 	.word	0x2002b49c
 8004eac:	0802615c 	.word	0x0802615c
 8004eb0:	2002b488 	.word	0x2002b488
 8004eb4:	0802616c 	.word	0x0802616c

08004eb8 <startudp>:

void startudp(uint32_t ip) {
 8004eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ebc:	b085      	sub	sp, #20
	volatile err_t err;
	int i;

//printf("Startudp:\n");
	/* Store the handle of the calling task. */
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 8004ebe:	f00d fcdd 	bl	801287c <xTaskGetCurrentTaskHandle>
 8004ec2:	4b68      	ldr	r3, [pc, #416]	; (8005064 <startudp+0x1ac>)
 8004ec4:	6018      	str	r0, [r3, #0]
	osDelay(1000);
 8004ec6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004eca:	f00c f905 	bl	80110d8 <osDelay>

	/* get new pcbs */
	pcb = udp_new();
 8004ece:	f017 f861 	bl	801bf94 <udp_new>
	if (pcb == NULL) {
 8004ed2:	2800      	cmp	r0, #0
 8004ed4:	f000 80b7 	beq.w	8005046 <startudp+0x18e>
			;
		return;
	}

	/* bind to any IP address on port UDP_PORT_NO */
	if (udp_bind(pcb, IP_ADDR_ANY, UDP_PORT_NO) != ERR_OK) {
 8004ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004edc:	4962      	ldr	r1, [pc, #392]	; (8005068 <startudp+0x1b0>)
 8004ede:	4607      	mov	r7, r0
 8004ee0:	f016 fdf6 	bl	801bad0 <udp_bind>
 8004ee4:	4681      	mov	r9, r0
 8004ee6:	b118      	cbz	r0, 8004ef0 <startudp+0x38>
		printf("startudp: udp_bind failed!\n");
 8004ee8:	4860      	ldr	r0, [pc, #384]	; (800506c <startudp+0x1b4>)
 8004eea:	f01b feed 	bl	8020cc8 <puts>
 8004eee:	e7fe      	b.n	8004eee <startudp+0x36>
			;
	}

//	udp_recv(pcb, myudp_recv, NULL);

	p1 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 8004ef0:	2241      	movs	r2, #65	; 0x41
 8004ef2:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
 8004ef6:	2036      	movs	r0, #54	; 0x36
 8004ef8:	f011 fd74 	bl	80169e4 <pbuf_alloc>

	if (p1 == NULL) {
 8004efc:	9000      	str	r0, [sp, #0]
 8004efe:	2800      	cmp	r0, #0
 8004f00:	f000 80a5 	beq.w	800504e <startudp+0x196>
		printf("startudp: p1 buf_alloc failed!\n");
		return;
	}
	p1->payload = &(*pktbuf)[0];
 8004f04:	4c5a      	ldr	r4, [pc, #360]	; (8005070 <startudp+0x1b8>)
//	p1->len = ADCBUFSIZE;

	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 8004f06:	2241      	movs	r2, #65	; 0x41
	p1->payload = &(*pktbuf)[0];
 8004f08:	9d00      	ldr	r5, [sp, #0]
	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 8004f0a:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
	p1->payload = &(*pktbuf)[0];
 8004f0e:	6823      	ldr	r3, [r4, #0]
	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 8004f10:	2036      	movs	r0, #54	; 0x36
	p1->payload = &(*pktbuf)[0];
 8004f12:	606b      	str	r3, [r5, #4]
	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 8004f14:	f011 fd66 	bl	80169e4 <pbuf_alloc>
	if (p2 == NULL) {
 8004f18:	9001      	str	r0, [sp, #4]
 8004f1a:	2800      	cmp	r0, #0
 8004f1c:	f000 809f 	beq.w	800505e <startudp+0x1a6>
		printf("startudp: p2 buf_alloc failed!\n");
		return;
	}
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 8004f20:	6823      	ldr	r3, [r4, #0]

//	p2->len = ADCBUFSIZE;

// trailing packet status packet
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 8004f22:	2201      	movs	r2, #1
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 8004f24:	9c01      	ldr	r4, [sp, #4]
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 8004f26:	219c      	movs	r1, #156	; 0x9c
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 8004f28:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 8004f2c:	2036      	movs	r0, #54	; 0x36
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 8004f2e:	6063      	str	r3, [r4, #4]
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 8004f30:	f011 fd58 	bl	80169e4 <pbuf_alloc>
	if (ps == NULL) {
 8004f34:	4680      	mov	r8, r0
 8004f36:	2800      	cmp	r0, #0
 8004f38:	f000 808f 	beq.w	800505a <startudp+0x1a2>
		printf("startudp: ps buf_alloc failed!\n");
		return;
	}
	ps->payload = &statuspkt;	// point at status / GPS data
 8004f3c:	4e4d      	ldr	r6, [pc, #308]	; (8005074 <startudp+0x1bc>)

	osDelay(5000);
 8004f3e:	f241 3088 	movw	r0, #5000	; 0x1388
 8004f42:	4d4d      	ldr	r5, [pc, #308]	; (8005078 <startudp+0x1c0>)
	ps->payload = &statuspkt;	// point at status / GPS data
 8004f44:	f8c8 6004 	str.w	r6, [r8, #4]
	osDelay(5000);
 8004f48:	f00c f8c6 	bl	80110d8 <osDelay>

	statuspkt.auxstatus1 = 0;
 8004f4c:	4648      	mov	r0, r9
	statuspkt.adcudpover = 0;		// debug use count overruns
	statuspkt.trigcount = 0;		// debug use adc trigger count
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
	statuspkt.telltale1 = 0xDEC0EDFE; //  0xFEEDC0DE marker at the end of each status packet
 8004f4e:	4b4b      	ldr	r3, [pc, #300]	; (800507c <startudp+0x1c4>)

	netup = 1; // this is incomplete - it should be set by the phys layer also
 8004f50:	2101      	movs	r1, #1
 8004f52:	4a4b      	ldr	r2, [pc, #300]	; (8005080 <startudp+0x1c8>)
	statuspkt.auxstatus1 = 0;
 8004f54:	f8c6 9074 	str.w	r9, [r6, #116]	; 0x74
	statuspkt.adcudpover = 0;		// debug use count overruns
 8004f58:	67b0      	str	r0, [r6, #120]	; 0x78
	statuspkt.trigcount = 0;		// debug use adc trigger count
 8004f5a:	67f0      	str	r0, [r6, #124]	; 0x7c
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
 8004f5c:	f8c6 0080 	str.w	r0, [r6, #128]	; 0x80
	printf("Arming UDP Railgun\nSystem ready and operating....\n");
 8004f60:	4848      	ldr	r0, [pc, #288]	; (8005084 <startudp+0x1cc>)
 8004f62:	4c49      	ldr	r4, [pc, #292]	; (8005088 <startudp+0x1d0>)
 8004f64:	f8df a148 	ldr.w	sl, [pc, #328]	; 80050b0 <startudp+0x1f8>
	netup = 1; // this is incomplete - it should be set by the phys layer also
 8004f68:	7011      	strb	r1, [r2, #0]
 8004f6a:	f8df 9148 	ldr.w	r9, [pc, #328]	; 80050b4 <startudp+0x1fc>
	statuspkt.telltale1 = 0xDEC0EDFE; //  0xFEEDC0DE marker at the end of each status packet
 8004f6e:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98
	printf("Arming UDP Railgun\nSystem ready and operating....\n");
 8004f72:	f01b fea9 	bl	8020cc8 <puts>
		/* Wait to be notified */
#ifdef TESTING
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET /*PB11*/);	// debug pin
#endif

		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 8004f76:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004f7a:	2001      	movs	r0, #1
 8004f7c:	f00d fdb8 	bl	8012af0 <ulTaskNotifyTake>
#ifdef TESTING
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET /*PB11*/);	// debug pin
#endif

		if (ulNotificationValue > 0) {		// we were notified
 8004f80:	2800      	cmp	r0, #0
 8004f82:	d059      	beq.n	8005038 <startudp+0x180>
			sigsend = 0;
 8004f84:	2200      	movs	r2, #0
			/* if we have a trigger, send a sample packet */
			if ((gpslocked) && (jabbertimeout == 0) && (!(globalfreeze))) { // only send if adc threshold was exceeded and GPS is locked
 8004f86:	7823      	ldrb	r3, [r4, #0]
			sigsend = 0;
 8004f88:	602a      	str	r2, [r5, #0]
			if ((gpslocked) && (jabbertimeout == 0) && (!(globalfreeze))) { // only send if adc threshold was exceeded and GPS is locked
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d0f3      	beq.n	8004f76 <startudp+0xbe>
 8004f8e:	f8da 3000 	ldr.w	r3, [sl]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1ef      	bne.n	8004f76 <startudp+0xbe>
 8004f96:	4b3d      	ldr	r3, [pc, #244]	; (800508c <startudp+0x1d4>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1eb      	bne.n	8004f76 <startudp+0xbe>

				//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET /*PB11*/);	// debug pin
				pd = (dmabufno) ? p2 : p1; // which dma buffer to send, dmabuf is last filled buffer, 0 or 1
 8004f9e:	4a3c      	ldr	r2, [pc, #240]	; (8005090 <startudp+0x1d8>)
 8004fa0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004fa4:	6812      	ldr	r2, [r2, #0]
 8004fa6:	2a00      	cmp	r2, #0
 8004fa8:	bf08      	it	eq
 8004faa:	4601      	moveq	r1, r0

				((uint8_t*) (pd->payload))[3] = 0;	// pkt type
 8004fac:	684a      	ldr	r2, [r1, #4]
				pd = (dmabufno) ? p2 : p1; // which dma buffer to send, dmabuf is last filled buffer, 0 or 1
 8004fae:	468b      	mov	fp, r1
				((uint8_t*) (pd->payload))[3] = 0;	// pkt type
 8004fb0:	70d3      	strb	r3, [r2, #3]
				((uint8_t*) (pd->payload))[0] = statuspkt.udppknum & 0xff;
 8004fb2:	6832      	ldr	r2, [r6, #0]
 8004fb4:	684b      	ldr	r3, [r1, #4]
 8004fb6:	701a      	strb	r2, [r3, #0]
				((uint8_t*) (pd->payload))[1] = (statuspkt.udppknum & 0xff00) >> 8;
 8004fb8:	6833      	ldr	r3, [r6, #0]
 8004fba:	684a      	ldr	r2, [r1, #4]
 8004fbc:	0a1b      	lsrs	r3, r3, #8
 8004fbe:	7053      	strb	r3, [r2, #1]
				((uint8_t*) (pd->payload))[2] = (statuspkt.udppknum & 0xff0000) >> 16;
 8004fc0:	6833      	ldr	r3, [r6, #0]
 8004fc2:	684a      	ldr	r2, [r1, #4]
 8004fc4:	0c1b      	lsrs	r3, r3, #16
 8004fc6:	7093      	strb	r3, [r2, #2]

				while (pd->ref != 1) {	// old packet not finished with yet
 8004fc8:	7b89      	ldrb	r1, [r1, #14]
 8004fca:	2901      	cmp	r1, #1
 8004fcc:	d006      	beq.n	8004fdc <startudp+0x124>
					printf("*******send sample failed p->ref = %d *******\n", pd->ref);
 8004fce:	4831      	ldr	r0, [pc, #196]	; (8005094 <startudp+0x1dc>)
 8004fd0:	f01b fdf2 	bl	8020bb8 <iprintf>
				while (pd->ref != 1) {	// old packet not finished with yet
 8004fd4:	f89b 100e 	ldrb.w	r1, [fp, #14]
 8004fd8:	2901      	cmp	r1, #1
 8004fda:	d1f8      	bne.n	8004fce <startudp+0x116>
				}

				err = sendudp(pcb, pd, &udpdestip, UDP_PORT_NO);		// send the sample packet
 8004fdc:	f241 3388 	movw	r3, #5000	; 0x1388
 8004fe0:	4a2d      	ldr	r2, [pc, #180]	; (8005098 <startudp+0x1e0>)
 8004fe2:	4659      	mov	r1, fp
 8004fe4:	4638      	mov	r0, r7
 8004fe6:	f7ff fe31 	bl	8004c4c <sendudp>
					printf("******* end sample status: ps->ref = %d *******\n", ps->ref);
					vTaskDelay(0); // but we need wait to update the data packet next, so wait
				}
#endif
				/* send end of sequence status packet if end of batch sequence */
				if (sendendstatus > 0) {
 8004fea:	4b2c      	ldr	r3, [pc, #176]	; (800509c <startudp+0x1e4>)
				err = sendudp(pcb, pd, &udpdestip, UDP_PORT_NO);		// send the sample packet
 8004fec:	f88d 000f 	strb.w	r0, [sp, #15]
				if (sendendstatus > 0) {
 8004ff0:	781a      	ldrb	r2, [r3, #0]
				statuspkt.udpsent++;	// debug no of sample packets set
 8004ff2:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	f8c6 3080 	str.w	r3, [r6, #128]	; 0x80
				statuspkt.adcpktssent++;	// UDP sample packet counter
 8004ffc:	f8b6 305e 	ldrh.w	r3, [r6, #94]	; 0x5e
 8005000:	3301      	adds	r3, #1
 8005002:	b29b      	uxth	r3, r3
 8005004:	f8a6 305e 	strh.w	r3, [r6, #94]	; 0x5e
				statuspkt.udppknum++;		// UDP packet number
 8005008:	6833      	ldr	r3, [r6, #0]
 800500a:	3301      	adds	r3, #1
 800500c:	6033      	str	r3, [r6, #0]
				if (sendendstatus > 0) {
 800500e:	2a00      	cmp	r2, #0
 8005010:	d0b1      	beq.n	8004f76 <startudp+0xbe>
//					if (jabbertimeout == 0)	// terminate curtailed sequence???
						sendstatus(ENDSEQ, ps, pcb, adcbatchid); // send end of seq status
 8005012:	f899 3000 	ldrb.w	r3, [r9]
 8005016:	463a      	mov	r2, r7
 8005018:	4641      	mov	r1, r8
 800501a:	2001      	movs	r0, #1
 800501c:	f7ff fe52 	bl	8004cc4 <sendstatus>
					sendendstatus = 0;	// cancel the flag
 8005020:	2300      	movs	r3, #0
 8005022:	4a1e      	ldr	r2, [pc, #120]	; (800509c <startudp+0x1e4>)
		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 8005024:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005028:	2001      	movs	r0, #1
					statuspkt.adcpktssent = 0;	// end of sequence so start again at 0
 800502a:	f8a6 305e 	strh.w	r3, [r6, #94]	; 0x5e
					sendendstatus = 0;	// cancel the flag
 800502e:	7013      	strb	r3, [r2, #0]
		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 8005030:	f00d fd5e 	bl	8012af0 <ulTaskNotifyTake>
		if (ulNotificationValue > 0) {		// we were notified
 8005034:	2800      	cmp	r0, #0
 8005036:	d1a5      	bne.n	8004f84 <startudp+0xcc>
		}
//			printf("ulNotificationValue = %d\n",ulNotificationValue );
		/* The transmission ended as expected. */
		else {
			/* The call to ulTaskNotifyTake() timed out. */
			sendtimedstatus(ps, pcb, adcbatchid);
 8005038:	f899 2000 	ldrb.w	r2, [r9]
 800503c:	4639      	mov	r1, r7
 800503e:	4640      	mov	r0, r8
 8005040:	f7ff fea2 	bl	8004d88 <sendtimedstatus>
 8005044:	e797      	b.n	8004f76 <startudp+0xbe>
		printf("startudp: udp_new failed!\n");
 8005046:	4816      	ldr	r0, [pc, #88]	; (80050a0 <startudp+0x1e8>)
 8005048:	f01b fe3e 	bl	8020cc8 <puts>
 800504c:	e7fe      	b.n	800504c <startudp+0x194>
		printf("startudp: p1 buf_alloc failed!\n");
 800504e:	4815      	ldr	r0, [pc, #84]	; (80050a4 <startudp+0x1ec>)
//			printf("ulNotificationValue = %d\n",ulNotificationValue );
		}

	} // forever while
}
 8005050:	b005      	add	sp, #20
 8005052:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printf("startudp: ps buf_alloc failed!\n");
 8005056:	f01b be37 	b.w	8020cc8 <puts>
 800505a:	4813      	ldr	r0, [pc, #76]	; (80050a8 <startudp+0x1f0>)
 800505c:	e7f8      	b.n	8005050 <startudp+0x198>
		printf("startudp: p2 buf_alloc failed!\n");
 800505e:	4813      	ldr	r0, [pc, #76]	; (80050ac <startudp+0x1f4>)
 8005060:	e7f6      	b.n	8005050 <startudp+0x198>
 8005062:	bf00      	nop
 8005064:	200007a8 	.word	0x200007a8
 8005068:	0803f8a8 	.word	0x0803f8a8
 800506c:	080261f4 	.word	0x080261f4
 8005070:	2002a834 	.word	0x2002a834
 8005074:	2002a784 	.word	0x2002a784
 8005078:	20000718 	.word	0x20000718
 800507c:	dec0edfe 	.word	0xdec0edfe
 8005080:	20000702 	.word	0x20000702
 8005084:	08026270 	.word	0x08026270
 8005088:	2000169d 	.word	0x2000169d
 800508c:	2002b498 	.word	0x2002b498
 8005090:	200006a8 	.word	0x200006a8
 8005094:	080262a4 	.word	0x080262a4
 8005098:	2002b49c 	.word	0x2002b49c
 800509c:	20000710 	.word	0x20000710
 80050a0:	080261d8 	.word	0x080261d8
 80050a4:	08026210 	.word	0x08026210
 80050a8:	08026250 	.word	0x08026250
 80050ac:	08026230 	.word	0x08026230
 80050b0:	200006b4 	.word	0x200006b4
 80050b4:	2000069c 	.word	0x2000069c

080050b8 <tag_callback>:
const char *tagname[] = { "temp", "pressure", "time", "led1", "sw1A", "sw1B", "sw1C", "sw1D", "sw2A", "sw2B", "sw2C",
		"sw2D", "butt1", "PG0", "PG1", "PG2", "RF1", "devid", "detinfo", "GPS", "AGC", (void*) NULL };
int i, j;

// the tag callback handler
tSSIHandler tag_callback(int index, char *newstring, int maxlen) {
 80050b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ba:	4606      	mov	r6, r0
 80050bc:	460f      	mov	r7, r1
//  LOCK_TCPIP_CORE();

	HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 80050be:	4854      	ldr	r0, [pc, #336]	; (8005210 <tag_callback+0x158>)
 80050c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80050c4:	f003 fcd8 	bl	8008a78 <HAL_GPIO_TogglePin>
 80050c8:	4c52      	ldr	r4, [pc, #328]	; (8005214 <tag_callback+0x15c>)
	} else {
		printf("semaphore take2 failed\n");
	}
#endif
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
		printf("sem wait 2\n");
 80050ca:	4d53      	ldr	r5, [pc, #332]	; (8005218 <tag_callback+0x160>)
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
 80050cc:	e001      	b.n	80050d2 <tag_callback+0x1a>
		printf("sem wait 2\n");
 80050ce:	f01b fdfb 	bl	8020cc8 <puts>
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
 80050d2:	2101      	movs	r1, #1
 80050d4:	6820      	ldr	r0, [r4, #0]
 80050d6:	f00c fd9b 	bl	8011c10 <xQueueSemaphoreTake>
 80050da:	4603      	mov	r3, r0
		printf("sem wait 2\n");
 80050dc:	4628      	mov	r0, r5
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d1f5      	bne.n	80050ce <tag_callback+0x16>
	}
	{
//		printf("sem2 wait done\n");
	}

	if ((index > 3) && (index < 12)) {		// omux array
 80050e2:	1f32      	subs	r2, r6, #4
 80050e4:	2a07      	cmp	r2, #7
 80050e6:	d819      	bhi.n	800511c <tag_callback+0x64>
		i = index - 4;		// 0 to 7
		i = (muxdat[0] & (1 << i));
 80050e8:	494c      	ldr	r1, [pc, #304]	; (800521c <tag_callback+0x164>)
 80050ea:	4093      	lsls	r3, r2
 80050ec:	4a4c      	ldr	r2, [pc, #304]	; (8005220 <tag_callback+0x168>)
 80050ee:	7809      	ldrb	r1, [r1, #0]
 80050f0:	400b      	ands	r3, r1
 80050f2:	6013      	str	r3, [r2, #0]
		if (i == 0)		// around the houses
 80050f4:	bb43      	cbnz	r3, 8005148 <tag_callback+0x90>
			strcpy(newstring, "0");
 80050f6:	4b4b      	ldr	r3, [pc, #300]	; (8005224 <tag_callback+0x16c>)
 80050f8:	881b      	ldrh	r3, [r3, #0]
 80050fa:	803b      	strh	r3, [r7, #0]
			break;
		}
//		sprintf(newstring,"index=%d",index);
//  UNLOCK_TCPIP_CORE();

	if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 80050fc:	2300      	movs	r3, #0
 80050fe:	6820      	ldr	r0, [r4, #0]
 8005100:	461a      	mov	r2, r3
 8005102:	4619      	mov	r1, r3
 8005104:	f00c fafe 	bl	8011704 <xQueueGenericSend>
 8005108:	2801      	cmp	r0, #1
 800510a:	d002      	beq.n	8005112 <tag_callback+0x5a>
		printf("semaphore give2 failed\n");		// expect this to fail as part of the normal setup
 800510c:	4846      	ldr	r0, [pc, #280]	; (8005228 <tag_callback+0x170>)
 800510e:	f01b fddb 	bl	8020cc8 <puts>
	}
	return (strlen(newstring));
 8005112:	4638      	mov	r0, r7
}
 8005114:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return (strlen(newstring));
 8005118:	f7fb b89c 	b.w	8000254 <strlen>
		switch (index) {
 800511c:	2e14      	cmp	r6, #20
 800511e:	d871      	bhi.n	8005204 <tag_callback+0x14c>
 8005120:	e8df f006 	tbb	[pc, r6]
 8005124:	0b6b5257 	.word	0x0b6b5257
 8005128:	70707070 	.word	0x70707070
 800512c:	70707070 	.word	0x70707070
 8005130:	323d5c67 	.word	0x323d5c67
 8005134:	161b2025 	.word	0x161b2025
 8005138:	48          	.byte	0x48
 8005139:	00          	.byte	0x00
			if (HAL_GPIO_ReadPin(GPIOD, LED_D4_Pin) == GPIO_PIN_SET)
 800513a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800513e:	4834      	ldr	r0, [pc, #208]	; (8005210 <tag_callback+0x158>)
 8005140:	f003 fc6e 	bl	8008a20 <HAL_GPIO_ReadPin>
 8005144:	2801      	cmp	r0, #1
 8005146:	d1d6      	bne.n	80050f6 <tag_callback+0x3e>
			strcpy(newstring, "1");
 8005148:	4b38      	ldr	r3, [pc, #224]	; (800522c <tag_callback+0x174>)
 800514a:	881b      	ldrh	r3, [r3, #0]
 800514c:	803b      	strh	r3, [r7, #0]
 800514e:	e7d5      	b.n	80050fc <tag_callback+0x44>
			strcpy(newstring, gpsstr);		// GPS Status
 8005150:	4937      	ldr	r1, [pc, #220]	; (8005230 <tag_callback+0x178>)
 8005152:	4638      	mov	r0, r7
 8005154:	f01b ff2d 	bl	8020fb2 <strcpy>
			break;
 8005158:	e7d0      	b.n	80050fc <tag_callback+0x44>
			strcpy(newstring, statstr);		// Detector Status
 800515a:	4936      	ldr	r1, [pc, #216]	; (8005234 <tag_callback+0x17c>)
 800515c:	4638      	mov	r0, r7
 800515e:	f01b ff28 	bl	8020fb2 <strcpy>
			break;
 8005162:	e7cb      	b.n	80050fc <tag_callback+0x44>
			strcpy(newstring, snstr);			// Detector ID
 8005164:	4934      	ldr	r1, [pc, #208]	; (8005238 <tag_callback+0x180>)
 8005166:	4638      	mov	r0, r7
 8005168:	f01b ff23 	bl	8020fb2 <strcpy>
			break;
 800516c:	e7c6      	b.n	80050fc <tag_callback+0x44>
			strcpy(newstring, (HAL_GPIO_ReadPin(GPIOE, LP_FILT_Pin) ? "0" : "1"));
 800516e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005172:	4832      	ldr	r0, [pc, #200]	; (800523c <tag_callback+0x184>)
 8005174:	f003 fc54 	bl	8008a20 <HAL_GPIO_ReadPin>
 8005178:	4b2a      	ldr	r3, [pc, #168]	; (8005224 <tag_callback+0x16c>)
 800517a:	4a2c      	ldr	r2, [pc, #176]	; (800522c <tag_callback+0x174>)
 800517c:	2800      	cmp	r0, #0
 800517e:	bf08      	it	eq
 8005180:	4613      	moveq	r3, r2
 8005182:	881b      	ldrh	r3, [r3, #0]
 8005184:	803b      	strh	r3, [r7, #0]
			break;
 8005186:	e7b9      	b.n	80050fc <tag_callback+0x44>
			strcpy(newstring, (pgagain & 4) ? "1" : "0");
 8005188:	4a2d      	ldr	r2, [pc, #180]	; (8005240 <tag_callback+0x188>)
 800518a:	4b28      	ldr	r3, [pc, #160]	; (800522c <tag_callback+0x174>)
 800518c:	8811      	ldrh	r1, [r2, #0]
 800518e:	4a25      	ldr	r2, [pc, #148]	; (8005224 <tag_callback+0x16c>)
 8005190:	f011 0f04 	tst.w	r1, #4
 8005194:	bf08      	it	eq
 8005196:	4613      	moveq	r3, r2
 8005198:	881b      	ldrh	r3, [r3, #0]
 800519a:	803b      	strh	r3, [r7, #0]
			break;
 800519c:	e7ae      	b.n	80050fc <tag_callback+0x44>
			strcpy(newstring, (pgagain & 2) ? "1" : "0");
 800519e:	4a28      	ldr	r2, [pc, #160]	; (8005240 <tag_callback+0x188>)
 80051a0:	4b22      	ldr	r3, [pc, #136]	; (800522c <tag_callback+0x174>)
 80051a2:	8811      	ldrh	r1, [r2, #0]
 80051a4:	4a1f      	ldr	r2, [pc, #124]	; (8005224 <tag_callback+0x16c>)
 80051a6:	f011 0f02 	tst.w	r1, #2
 80051aa:	bf08      	it	eq
 80051ac:	4613      	moveq	r3, r2
 80051ae:	881b      	ldrh	r3, [r3, #0]
 80051b0:	803b      	strh	r3, [r7, #0]
			break;
 80051b2:	e7a3      	b.n	80050fc <tag_callback+0x44>
			strcpy(newstring, (agc) ? "1" : "0");		// AGC Status
 80051b4:	4a23      	ldr	r2, [pc, #140]	; (8005244 <tag_callback+0x18c>)
 80051b6:	4b1d      	ldr	r3, [pc, #116]	; (800522c <tag_callback+0x174>)
 80051b8:	8811      	ldrh	r1, [r2, #0]
 80051ba:	4a1a      	ldr	r2, [pc, #104]	; (8005224 <tag_callback+0x16c>)
 80051bc:	2900      	cmp	r1, #0
 80051be:	bf08      	it	eq
 80051c0:	4613      	moveq	r3, r2
 80051c2:	881b      	ldrh	r3, [r3, #0]
 80051c4:	803b      	strh	r3, [r7, #0]
			break;
 80051c6:	e799      	b.n	80050fc <tag_callback+0x44>
			strcpy(newstring, pressstr);		// pressure
 80051c8:	491f      	ldr	r1, [pc, #124]	; (8005248 <tag_callback+0x190>)
 80051ca:	4638      	mov	r0, r7
 80051cc:	f01b fef1 	bl	8020fb2 <strcpy>
			break;
 80051d0:	e794      	b.n	80050fc <tag_callback+0x44>
			strcpy(newstring, tempstr);		// temperature
 80051d2:	491e      	ldr	r1, [pc, #120]	; (800524c <tag_callback+0x194>)
 80051d4:	4638      	mov	r0, r7
 80051d6:	f01b feec 	bl	8020fb2 <strcpy>
			break;
 80051da:	e78f      	b.n	80050fc <tag_callback+0x44>
			strcpy(newstring, (pgagain & 1) ? "1" : "0");
 80051dc:	4a18      	ldr	r2, [pc, #96]	; (8005240 <tag_callback+0x188>)
 80051de:	4b13      	ldr	r3, [pc, #76]	; (800522c <tag_callback+0x174>)
 80051e0:	8811      	ldrh	r1, [r2, #0]
 80051e2:	4a10      	ldr	r2, [pc, #64]	; (8005224 <tag_callback+0x16c>)
 80051e4:	f011 0f01 	tst.w	r1, #1
 80051e8:	bf08      	it	eq
 80051ea:	4613      	moveq	r3, r2
 80051ec:	881b      	ldrh	r3, [r3, #0]
 80051ee:	803b      	strh	r3, [r7, #0]
			break;
 80051f0:	e784      	b.n	80050fc <tag_callback+0x44>
			strcpy(newstring, "5");
 80051f2:	4b17      	ldr	r3, [pc, #92]	; (8005250 <tag_callback+0x198>)
 80051f4:	881b      	ldrh	r3, [r3, #0]
 80051f6:	803b      	strh	r3, [r7, #0]
			break;
 80051f8:	e780      	b.n	80050fc <tag_callback+0x44>
			strcpy(newstring, nowtimestr);
 80051fa:	4916      	ldr	r1, [pc, #88]	; (8005254 <tag_callback+0x19c>)
 80051fc:	4638      	mov	r0, r7
 80051fe:	f01b fed8 	bl	8020fb2 <strcpy>
			break;
 8005202:	e77b      	b.n	80050fc <tag_callback+0x44>
			sprintf(newstring, "\"ssi_handler: bad tag index %d\"", index);
 8005204:	4632      	mov	r2, r6
 8005206:	4914      	ldr	r1, [pc, #80]	; (8005258 <tag_callback+0x1a0>)
 8005208:	4638      	mov	r0, r7
 800520a:	f01b fe2d 	bl	8020e68 <siprintf>
			break;
 800520e:	e775      	b.n	80050fc <tag_callback+0x44>
 8005210:	40020c00 	.word	0x40020c00
 8005214:	2002afb0 	.word	0x2002afb0
 8005218:	08026628 	.word	0x08026628
 800521c:	2000023c 	.word	0x2000023c
 8005220:	2002b4e4 	.word	0x2002b4e4
 8005224:	0803f464 	.word	0x0803f464
 8005228:	08026654 	.word	0x08026654
 800522c:	08026114 	.word	0x08026114
 8005230:	2000000c 	.word	0x2000000c
 8005234:	200000fc 	.word	0x200000fc
 8005238:	2000007c 	.word	0x2000007c
 800523c:	40021000 	.word	0x40021000
 8005240:	2000023e 	.word	0x2000023e
 8005244:	2000000a 	.word	0x2000000a
 8005248:	2000006c 	.word	0x2000006c
 800524c:	20000204 	.word	0x20000204
 8005250:	0803d794 	.word	0x0803d794
 8005254:	2000004c 	.word	0x2000004c
 8005258:	08026634 	.word	0x08026634

0800525c <returnpage>:
/* ---------------------------------------------- */
// http client
/* ---------------------------------------------- */

// callback with the page
void returnpage(volatile u8_t Num, volatile hc_errormsg errorm, volatile char *content, volatile u16_t charcount) {
 800525c:	b5f0      	push	{r4, r5, r6, r7, lr}
	char *errormsg[] = { "OK", "OUT_MEM", "TIMEOUT", "NOT_FOUND", "GEN_ERROR" };
 800525e:	4d3b      	ldr	r5, [pc, #236]	; (800534c <returnpage+0xf0>)
void returnpage(volatile u8_t Num, volatile hc_errormsg errorm, volatile char *content, volatile u16_t charcount) {
 8005260:	b08d      	sub	sp, #52	; 0x34
 8005262:	4616      	mov	r6, r2
 8005264:	f88d 000f 	strb.w	r0, [sp, #15]
	char *errormsg[] = { "OK", "OUT_MEM", "TIMEOUT", "NOT_FOUND", "GEN_ERROR" };
 8005268:	ac07      	add	r4, sp, #28
void returnpage(volatile u8_t Num, volatile hc_errormsg errorm, volatile char *content, volatile u16_t charcount) {
 800526a:	f88d 100e 	strb.w	r1, [sp, #14]
 800526e:	f8ad 300c 	strh.w	r3, [sp, #12]
	volatile uint32_t sn;
	int nconv;
	volatile int p1, p2;

	if (errorm == 0) {
 8005272:	f89d 700e 	ldrb.w	r7, [sp, #14]
	char *errormsg[] = { "OK", "OUT_MEM", "TIMEOUT", "NOT_FOUND", "GEN_ERROR" };
 8005276:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005278:	682d      	ldr	r5, [r5, #0]
 800527a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800527c:	6025      	str	r5, [r4, #0]
	if (errorm == 0) {
 800527e:	b10f      	cbz	r7, 8005284 <returnpage+0x28>
			}
		} else {
			printf("returnpage: (error returned) Num=%d, errno=%d, error=%s\n", Num, errorm, errormsg[errorm]);
		}
	}
}
 8005280:	b00d      	add	sp, #52	; 0x34
 8005282:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nconv = sscanf(content, "%5u%48s%u%u", &sn, udp_target, &p1, &p2);
 8005284:	aa06      	add	r2, sp, #24
 8005286:	a905      	add	r1, sp, #20
 8005288:	4b31      	ldr	r3, [pc, #196]	; (8005350 <returnpage+0xf4>)
 800528a:	4630      	mov	r0, r6
 800528c:	9201      	str	r2, [sp, #4]
 800528e:	aa04      	add	r2, sp, #16
 8005290:	9100      	str	r1, [sp, #0]
 8005292:	4930      	ldr	r1, [pc, #192]	; (8005354 <returnpage+0xf8>)
 8005294:	f01b fe08 	bl	8020ea8 <siscanf>
		if (nconv != EOF) {
 8005298:	1c43      	adds	r3, r0, #1
 800529a:	d02a      	beq.n	80052f2 <returnpage+0x96>
			switch (nconv) {
 800529c:	1e43      	subs	r3, r0, #1
 800529e:	2b03      	cmp	r3, #3
 80052a0:	d836      	bhi.n	8005310 <returnpage+0xb4>
 80052a2:	e8df f003 	tbb	[pc, r3]
 80052a6:	0b15      	.short	0x0b15
 80052a8:	0202      	.short	0x0202
				if (p1 == 1) {		// reboot
 80052aa:	9b05      	ldr	r3, [sp, #20]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d043      	beq.n	8005338 <returnpage+0xdc>
				if (p1 == 2) {		// freeze the UDP streaming
 80052b0:	9b05      	ldr	r3, [sp, #20]
 80052b2:	2b02      	cmp	r3, #2
					globalfreeze = 1;
 80052b4:	4b28      	ldr	r3, [pc, #160]	; (8005358 <returnpage+0xfc>)
				if (p1 == 2) {		// freeze the UDP streaming
 80052b6:	d039      	beq.n	800532c <returnpage+0xd0>
					globalfreeze = 0;
 80052b8:	2200      	movs	r2, #0
 80052ba:	601a      	str	r2, [r3, #0]
				if (strlen(udp_target) < 7) {					// bad url or ip address
 80052bc:	4c24      	ldr	r4, [pc, #144]	; (8005350 <returnpage+0xf4>)
 80052be:	4620      	mov	r0, r4
 80052c0:	f7fa ffc8 	bl	8000254 <strlen>
 80052c4:	2806      	cmp	r0, #6
 80052c6:	d928      	bls.n	800531a <returnpage+0xbe>
				printf("Server -> Target UDP host: %s\n", udp_target);
 80052c8:	4921      	ldr	r1, [pc, #132]	; (8005350 <returnpage+0xf4>)
 80052ca:	4824      	ldr	r0, [pc, #144]	; (800535c <returnpage+0x100>)
 80052cc:	f01b fc74 	bl	8020bb8 <iprintf>
				if (statuspkt.uid != sn)
 80052d0:	4b23      	ldr	r3, [pc, #140]	; (8005360 <returnpage+0x104>)
 80052d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80052d6:	9904      	ldr	r1, [sp, #16]
 80052d8:	4291      	cmp	r1, r2
 80052da:	d0d1      	beq.n	8005280 <returnpage+0x24>
					statuspkt.uid = sn;
 80052dc:	9a04      	ldr	r2, [sp, #16]
					printf("Server -> Serial Number: %lu\n", statuspkt.uid);
 80052de:	4821      	ldr	r0, [pc, #132]	; (8005364 <returnpage+0x108>)
					statuspkt.uid = sn;
 80052e0:	b292      	uxth	r2, r2
 80052e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
					printf("Server -> Serial Number: %lu\n", statuspkt.uid);
 80052e6:	f8b3 105c 	ldrh.w	r1, [r3, #92]	; 0x5c
 80052ea:	f01b fc65 	bl	8020bb8 <iprintf>
}
 80052ee:	b00d      	add	sp, #52	; 0x34
 80052f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printf("returnpage: (error returned) Num=%d, errno=%d, error=%s\n", Num, errorm, errormsg[errorm]);
 80052f2:	f89d 100f 	ldrb.w	r1, [sp, #15]
 80052f6:	ac0c      	add	r4, sp, #48	; 0x30
 80052f8:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80052fc:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8005300:	4819      	ldr	r0, [pc, #100]	; (8005368 <returnpage+0x10c>)
 8005302:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005306:	f853 3c14 	ldr.w	r3, [r3, #-20]
 800530a:	f01b fc55 	bl	8020bb8 <iprintf>
}
 800530e:	e7b7      	b.n	8005280 <returnpage+0x24>
				printf("Wrong number of params from Server -> %d\n", nconv);
 8005310:	4601      	mov	r1, r0
 8005312:	4816      	ldr	r0, [pc, #88]	; (800536c <returnpage+0x110>)
 8005314:	f01b fc50 	bl	8020bb8 <iprintf>
				break;
 8005318:	e7b2      	b.n	8005280 <returnpage+0x24>
					strcpy(udp_target, SERVER_DESTINATION);		// default it
 800531a:	4d15      	ldr	r5, [pc, #84]	; (8005370 <returnpage+0x114>)
 800531c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800531e:	6020      	str	r0, [r4, #0]
 8005320:	6828      	ldr	r0, [r5, #0]
 8005322:	6061      	str	r1, [r4, #4]
 8005324:	6120      	str	r0, [r4, #16]
 8005326:	60a2      	str	r2, [r4, #8]
 8005328:	60e3      	str	r3, [r4, #12]
 800532a:	e7cd      	b.n	80052c8 <returnpage+0x6c>
					globalfreeze = 1;
 800532c:	2201      	movs	r2, #1
					printf("Server -> commands a streaming freeze\n");
 800532e:	4811      	ldr	r0, [pc, #68]	; (8005374 <returnpage+0x118>)
					globalfreeze = 1;
 8005330:	601a      	str	r2, [r3, #0]
					printf("Server -> commands a streaming freeze\n");
 8005332:	f01b fcc9 	bl	8020cc8 <puts>
 8005336:	e7c1      	b.n	80052bc <returnpage+0x60>
					printf("Server -> commands a reboot...\n");
 8005338:	480f      	ldr	r0, [pc, #60]	; (8005378 <returnpage+0x11c>)
 800533a:	f01b fcc5 	bl	8020cc8 <puts>
					osDelay(2000);
 800533e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005342:	f00b fec9 	bl	80110d8 <osDelay>
					rebootme();
 8005346:	f7fc fd95 	bl	8001e74 <rebootme>
 800534a:	e7b1      	b.n	80052b0 <returnpage+0x54>
 800534c:	08024a90 	.word	0x08024a90
 8005350:	2002b4a0 	.word	0x2002b4a0
 8005354:	08026460 	.word	0x08026460
 8005358:	2002b498 	.word	0x2002b498
 800535c:	080264c8 	.word	0x080264c8
 8005360:	2002a784 	.word	0x2002a784
 8005364:	080264e8 	.word	0x080264e8
 8005368:	08026534 	.word	0x08026534
 800536c:	08026508 	.word	0x08026508
 8005370:	080264b4 	.word	0x080264b4
 8005374:	0802648c 	.word	0x0802648c
 8005378:	0802646c 	.word	0x0802646c

0800537c <httpd_cgi_handler>:
		char **http_cgi_param_vals) {
 800537c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005380:	b085      	sub	sp, #20
 8005382:	4616      	mov	r6, r2
 8005384:	460c      	mov	r4, r1
	j = strtol(*http_cgi_params, &ptr, 10);		// allow two chars len for the number
 8005386:	6818      	ldr	r0, [r3, #0]
 8005388:	a903      	add	r1, sp, #12
 800538a:	220a      	movs	r2, #10
		char **http_cgi_param_vals) {
 800538c:	469a      	mov	sl, r3
 800538e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	j = strtol(*http_cgi_params, &ptr, 10);		// allow two chars len for the number
 8005390:	f01c fc42 	bl	8021c18 <strtol>
	printf("httpd_cgi_handler: uri=%s, count=%d j=%d\n", uri, count, j);
 8005394:	4632      	mov	r2, r6
 8005396:	4603      	mov	r3, r0
	j = strtol(*http_cgi_params, &ptr, 10);		// allow two chars len for the number
 8005398:	4605      	mov	r5, r0
	printf("httpd_cgi_handler: uri=%s, count=%d j=%d\n", uri, count, j);
 800539a:	4621      	mov	r1, r4
 800539c:	4869      	ldr	r0, [pc, #420]	; (8005544 <httpd_cgi_handler+0x1c8>)
 800539e:	f01b fc0b 	bl	8020bb8 <iprintf>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80053a2:	2e00      	cmp	r6, #0
 80053a4:	dd3c      	ble.n	8005420 <httpd_cgi_handler+0xa4>
 80053a6:	2400      	movs	r4, #0
			printf("Unknown id in cgi handler %s\n", *http_cgi_params);
 80053a8:	f8df b1c8 	ldr.w	fp, [pc, #456]	; 8005574 <httpd_cgi_handler+0x1f8>
 80053ac:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8005578 <httpd_cgi_handler+0x1fc>
 80053b0:	f1a5 010c 	sub.w	r1, r5, #12
 80053b4:	2201      	movs	r2, #1
		switch (j) {
 80053b6:	f1a5 030a 	sub.w	r3, r5, #10
			j -= 11;	// now offset 0
 80053ba:	f1a5 080b 	sub.w	r8, r5, #11
 80053be:	408a      	lsls	r2, r1
		switch (j) {
 80053c0:	2b0e      	cmp	r3, #14
 80053c2:	d830      	bhi.n	8005426 <httpd_cgi_handler+0xaa>
 80053c4:	e8df f003 	tbb	[pc, r3]
 80053c8:	080894a3 	.word	0x080894a3
 80053cc:	08080808 	.word	0x08080808
 80053d0:	4b5d0808 	.word	0x4b5d0808
 80053d4:	7f39      	.short	0x7f39
 80053d6:	6f          	.byte	0x6f
 80053d7:	00          	.byte	0x00
			if (((*http_cgi_param_vals)[i]) == '0') {
 80053d8:	6839      	ldr	r1, [r7, #0]
 80053da:	b252      	sxtb	r2, r2
 80053dc:	f999 3000 	ldrsb.w	r3, [r9]
			j -= 11;	// now offset 0
 80053e0:	4645      	mov	r5, r8
			if (((*http_cgi_param_vals)[i]) == '0') {
 80053e2:	5d08      	ldrb	r0, [r1, r4]
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 80053e4:	ea42 0103 	orr.w	r1, r2, r3
			if (((*http_cgi_param_vals)[i]) == '0') {
 80053e8:	2830      	cmp	r0, #48	; 0x30
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 80053ea:	4857      	ldr	r0, [pc, #348]	; (8005548 <httpd_cgi_handler+0x1cc>)
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 80053ec:	b2c9      	uxtb	r1, r1
				muxdat[0] = muxdat[0] & ~(1 << (j - 1));
 80053ee:	bf04      	itt	eq
 80053f0:	ea23 0202 	biceq.w	r2, r3, r2
 80053f4:	b2d1      	uxtbeq	r1, r2
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 80053f6:	4a55      	ldr	r2, [pc, #340]	; (800554c <httpd_cgi_handler+0x1d0>)
 80053f8:	f001 0302 	and.w	r3, r1, #2
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 80053fc:	f889 1000 	strb.w	r1, [r9]
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 8005400:	6013      	str	r3, [r2, #0]
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 8005402:	f01b fbd9 	bl	8020bb8 <iprintf>
			if (HAL_I2C_Master_Transmit(&hi2c1, 0x44 << 1, &muxdat[0], 1, 1000) != HAL_OK) {		// RF dual MUX
 8005406:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800540a:	2301      	movs	r3, #1
 800540c:	464a      	mov	r2, r9
 800540e:	2188      	movs	r1, #136	; 0x88
 8005410:	9000      	str	r0, [sp, #0]
 8005412:	484f      	ldr	r0, [pc, #316]	; (8005550 <httpd_cgi_handler+0x1d4>)
 8005414:	f003 fd92 	bl	8008f3c <HAL_I2C_Master_Transmit>
 8005418:	b958      	cbnz	r0, 8005432 <httpd_cgi_handler+0xb6>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 800541a:	3401      	adds	r4, #1
 800541c:	42a6      	cmp	r6, r4
 800541e:	d1c7      	bne.n	80053b0 <httpd_cgi_handler+0x34>
}
 8005420:	b005      	add	sp, #20
 8005422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			printf("Unknown id in cgi handler %s\n", *http_cgi_params);
 8005426:	f8da 1000 	ldr.w	r1, [sl]
 800542a:	4658      	mov	r0, fp
 800542c:	f01b fbc4 	bl	8020bb8 <iprintf>
			break;
 8005430:	e7f3      	b.n	800541a <httpd_cgi_handler+0x9e>
				printf("I2C HAL returned error 1\n\r");
 8005432:	4848      	ldr	r0, [pc, #288]	; (8005554 <httpd_cgi_handler+0x1d8>)
 8005434:	f01b fbc0 	bl	8020bb8 <iprintf>
 8005438:	e7ef      	b.n	800541a <httpd_cgi_handler+0x9e>
 800543a:	4d47      	ldr	r5, [pc, #284]	; (8005558 <httpd_cgi_handler+0x1dc>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~1 : pgagain | 1);
 800543c:	683a      	ldr	r2, [r7, #0]
 800543e:	882b      	ldrh	r3, [r5, #0]
 8005440:	5d12      	ldrb	r2, [r2, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8005442:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~1 : pgagain | 1);
 8005444:	f043 0001 	orr.w	r0, r3, #1
 8005448:	2a30      	cmp	r2, #48	; 0x30
 800544a:	bf08      	it	eq
 800544c:	f023 0001 	biceq.w	r0, r3, #1
			setpgagain(val);
 8005450:	f7fd fffe 	bl	8003450 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8005454:	42a6      	cmp	r6, r4
 8005456:	dcf1      	bgt.n	800543c <httpd_cgi_handler+0xc0>
}
 8005458:	b005      	add	sp, #20
 800545a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800545e:	4d3e      	ldr	r5, [pc, #248]	; (8005558 <httpd_cgi_handler+0x1dc>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~2 : pgagain | 2);
 8005460:	683a      	ldr	r2, [r7, #0]
 8005462:	882b      	ldrh	r3, [r5, #0]
 8005464:	5d12      	ldrb	r2, [r2, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8005466:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~2 : pgagain | 2);
 8005468:	f043 0002 	orr.w	r0, r3, #2
 800546c:	2a30      	cmp	r2, #48	; 0x30
 800546e:	bf08      	it	eq
 8005470:	f023 0002 	biceq.w	r0, r3, #2
			setpgagain(val);
 8005474:	f7fd ffec 	bl	8003450 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8005478:	42a6      	cmp	r6, r4
 800547a:	dcf1      	bgt.n	8005460 <httpd_cgi_handler+0xe4>
}
 800547c:	b005      	add	sp, #20
 800547e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005482:	4d35      	ldr	r5, [pc, #212]	; (8005558 <httpd_cgi_handler+0x1dc>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~4 : pgagain | 4);
 8005484:	683a      	ldr	r2, [r7, #0]
 8005486:	882b      	ldrh	r3, [r5, #0]
 8005488:	5d12      	ldrb	r2, [r2, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 800548a:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~4 : pgagain | 4);
 800548c:	f043 0004 	orr.w	r0, r3, #4
 8005490:	2a30      	cmp	r2, #48	; 0x30
 8005492:	bf08      	it	eq
 8005494:	f023 0004 	biceq.w	r0, r3, #4
			setpgagain(val);
 8005498:	f7fd ffda 	bl	8003450 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 800549c:	42a6      	cmp	r6, r4
 800549e:	dcf1      	bgt.n	8005484 <httpd_cgi_handler+0x108>
}
 80054a0:	b005      	add	sp, #20
 80054a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	1e62      	subs	r2, r4, #1
 80054aa:	492c      	ldr	r1, [pc, #176]	; (800555c <httpd_cgi_handler+0x1e0>)
 80054ac:	441a      	add	r2, r3
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 80054ae:	f812 3f01 	ldrb.w	r3, [r2, #1]!
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80054b2:	3401      	adds	r4, #1
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 80054b4:	3b30      	subs	r3, #48	; 0x30
 80054b6:	bf18      	it	ne
 80054b8:	2301      	movne	r3, #1
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80054ba:	42a6      	cmp	r6, r4
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 80054bc:	800b      	strh	r3, [r1, #0]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80054be:	dcf6      	bgt.n	80054ae <httpd_cgi_handler+0x132>
}
 80054c0:	b005      	add	sp, #20
 80054c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_SET);		// select RF Switches to bypass LP filter
 80054c6:	4d26      	ldr	r5, [pc, #152]	; (8005560 <httpd_cgi_handler+0x1e4>)
			if (((*http_cgi_param_vals)[i]) == '1')
 80054c8:	683b      	ldr	r3, [r7, #0]
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_SET);		// select RF Switches to bypass LP filter
 80054ca:	2201      	movs	r2, #1
 80054cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80054d0:	4628      	mov	r0, r5
			if (((*http_cgi_param_vals)[i]) == '1')
 80054d2:	5d1b      	ldrb	r3, [r3, r4]
 80054d4:	4414      	add	r4, r2
 80054d6:	2b31      	cmp	r3, #49	; 0x31
 80054d8:	d004      	beq.n	80054e4 <httpd_cgi_handler+0x168>
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_SET);		// select RF Switches to bypass LP filter
 80054da:	f003 fab3 	bl	8008a44 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80054de:	42a6      	cmp	r6, r4
 80054e0:	dcf2      	bgt.n	80054c8 <httpd_cgi_handler+0x14c>
 80054e2:	e79d      	b.n	8005420 <httpd_cgi_handler+0xa4>
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_RESET);// select RF Switches to LP filter (normal route)
 80054e4:	2200      	movs	r2, #0
 80054e6:	f003 faad 	bl	8008a44 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80054ea:	42a6      	cmp	r6, r4
 80054ec:	dcec      	bgt.n	80054c8 <httpd_cgi_handler+0x14c>
 80054ee:	e797      	b.n	8005420 <httpd_cgi_handler+0xa4>
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_SET);
 80054f0:	4d1c      	ldr	r5, [pc, #112]	; (8005564 <httpd_cgi_handler+0x1e8>)
			if (((*http_cgi_param_vals)[i]) == '0')
 80054f2:	683b      	ldr	r3, [r7, #0]
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_SET);
 80054f4:	2201      	movs	r2, #1
 80054f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80054fa:	4628      	mov	r0, r5
			if (((*http_cgi_param_vals)[i]) == '0')
 80054fc:	5d1b      	ldrb	r3, [r3, r4]
 80054fe:	4414      	add	r4, r2
 8005500:	2b30      	cmp	r3, #48	; 0x30
 8005502:	d018      	beq.n	8005536 <httpd_cgi_handler+0x1ba>
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_SET);
 8005504:	f003 fa9e 	bl	8008a44 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8005508:	42a6      	cmp	r6, r4
 800550a:	dcf2      	bgt.n	80054f2 <httpd_cgi_handler+0x176>
 800550c:	e788      	b.n	8005420 <httpd_cgi_handler+0xa4>
			printf("Reboot command from wwww\n");
 800550e:	4816      	ldr	r0, [pc, #88]	; (8005568 <httpd_cgi_handler+0x1ec>)
 8005510:	f01b fbda 	bl	8020cc8 <puts>
			osDelay(1000);
 8005514:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005518:	f00b fdde 	bl	80110d8 <osDelay>
 800551c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005520:	4912      	ldr	r1, [pc, #72]	; (800556c <httpd_cgi_handler+0x1f0>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005522:	4b13      	ldr	r3, [pc, #76]	; (8005570 <httpd_cgi_handler+0x1f4>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005524:	68ca      	ldr	r2, [r1, #12]
 8005526:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800552a:	4313      	orrs	r3, r2
 800552c:	60cb      	str	r3, [r1, #12]
 800552e:	f3bf 8f4f 	dsb	sy
    __NOP();
 8005532:	bf00      	nop
 8005534:	e7fd      	b.n	8005532 <httpd_cgi_handler+0x1b6>
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_RESET);
 8005536:	2200      	movs	r2, #0
 8005538:	f003 fa84 	bl	8008a44 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 800553c:	42a6      	cmp	r6, r4
 800553e:	dcd8      	bgt.n	80054f2 <httpd_cgi_handler+0x176>
 8005540:	e76e      	b.n	8005420 <httpd_cgi_handler+0xa4>
 8005542:	bf00      	nop
 8005544:	08026314 	.word	0x08026314
 8005548:	0802635c 	.word	0x0802635c
 800554c:	20001688 	.word	0x20001688
 8005550:	2002ab38 	.word	0x2002ab38
 8005554:	08025eb0 	.word	0x08025eb0
 8005558:	2000023e 	.word	0x2000023e
 800555c:	2000000a 	.word	0x2000000a
 8005560:	40021000 	.word	0x40021000
 8005564:	40020c00 	.word	0x40020c00
 8005568:	08026340 	.word	0x08026340
 800556c:	e000ed00 	.word	0xe000ed00
 8005570:	05fa0004 	.word	0x05fa0004
 8005574:	08026378 	.word	0x08026378
 8005578:	2000023c 	.word	0x2000023c

0800557c <httpd_post_receive_data>:
err_t httpd_post_receive_data(void *connection, struct pbuf *p) {
 800557c:	b508      	push	{r3, lr}
	printf("httpd_post_receive_data: \n");
 800557e:	4802      	ldr	r0, [pc, #8]	; (8005588 <httpd_post_receive_data+0xc>)
 8005580:	f01b fba2 	bl	8020cc8 <puts>
}
 8005584:	2000      	movs	r0, #0
 8005586:	bd08      	pop	{r3, pc}
 8005588:	080263c4 	.word	0x080263c4

0800558c <httpd_post_begin>:
		int content_len, char *response_uri, u16_t response_uri_len, u8_t *post_auto_wnd) {
 800558c:	b508      	push	{r3, lr}
	printf("httpd_post_begin: \n");
 800558e:	4802      	ldr	r0, [pc, #8]	; (8005598 <httpd_post_begin+0xc>)
 8005590:	f01b fb9a 	bl	8020cc8 <puts>
}
 8005594:	2000      	movs	r0, #0
 8005596:	bd08      	pop	{r3, pc}
 8005598:	08026398 	.word	0x08026398

0800559c <httpd_post_finished>:
	printf("httpd_post_finished: \n");
 800559c:	4801      	ldr	r0, [pc, #4]	; (80055a4 <httpd_post_finished+0x8>)
 800559e:	f01b bb93 	b.w	8020cc8 <puts>
 80055a2:	bf00      	nop
 80055a4:	080263ac 	.word	0x080263ac

080055a8 <init_httpd_ssi>:
	http_set_ssi_handler(tag_callback, tagname, 21);	// was 32
 80055a8:	4803      	ldr	r0, [pc, #12]	; (80055b8 <init_httpd_ssi+0x10>)
 80055aa:	2215      	movs	r2, #21
 80055ac:	4903      	ldr	r1, [pc, #12]	; (80055bc <init_httpd_ssi+0x14>)
init_httpd_ssi() {
 80055ae:	b508      	push	{r3, lr}
	http_set_ssi_handler(tag_callback, tagname, 21);	// was 32
 80055b0:	f00f fb04 	bl	8014bbc <http_set_ssi_handler>
}
 80055b4:	bd08      	pop	{r3, pc}
 80055b6:	bf00      	nop
 80055b8:	080050b9 	.word	0x080050b9
 80055bc:	20000248 	.word	0x20000248

080055c0 <httpclient>:

void httpclient(char Page[64]) {
 80055c0:	b570      	push	{r4, r5, r6, lr}
	uint32_t ip;
	int err;

	static char *Postvars = NULL;

	err = dnslookup(SERVER_DESTINATION, &remoteip);		// find serial number and udp target IP address
 80055c2:	4910      	ldr	r1, [pc, #64]	; (8005604 <httpclient+0x44>)
void httpclient(char Page[64]) {
 80055c4:	b084      	sub	sp, #16
 80055c6:	4605      	mov	r5, r0
	err = dnslookup(SERVER_DESTINATION, &remoteip);		// find serial number and udp target IP address
 80055c8:	480f      	ldr	r0, [pc, #60]	; (8005608 <httpclient+0x48>)
 80055ca:	f7ff fbfd 	bl	8004dc8 <dnslookup>
	if (err != ERR_OK)
 80055ce:	b108      	cbz	r0, 80055d4 <httpclient+0x14>
		rebootme();
 80055d0:	f7fc fc50 	bl	8001e74 <rebootme>
	ip = remoteip.addr;
 80055d4:	4c0b      	ldr	r4, [pc, #44]	; (8005604 <httpclient+0x44>)
	printf("\n%s Control Server IP: %lu.%lu.%lu.%lu\n", SERVER_DESTINATION, ip & 0xff, (ip & 0xff00) >> 8,
 80055d6:	490c      	ldr	r1, [pc, #48]	; (8005608 <httpclient+0x48>)
	ip = remoteip.addr;
 80055d8:	6822      	ldr	r2, [r4, #0]
	printf("\n%s Control Server IP: %lu.%lu.%lu.%lu\n", SERVER_DESTINATION, ip & 0xff, (ip & 0xff00) >> 8,
 80055da:	480c      	ldr	r0, [pc, #48]	; (800560c <httpclient+0x4c>)
 80055dc:	0e13      	lsrs	r3, r2, #24
 80055de:	f3c2 4607 	ubfx	r6, r2, #16, #8
 80055e2:	9301      	str	r3, [sp, #4]
 80055e4:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80055e8:	9600      	str	r6, [sp, #0]
 80055ea:	b2d2      	uxtb	r2, r2
 80055ec:	f01b fae4 	bl	8020bb8 <iprintf>
			(ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);

	result = hc_open(remoteip, Page, Postvars, returnpage);
 80055f0:	4629      	mov	r1, r5
 80055f2:	4b07      	ldr	r3, [pc, #28]	; (8005610 <httpclient+0x50>)
 80055f4:	2200      	movs	r2, #0
 80055f6:	6820      	ldr	r0, [r4, #0]
 80055f8:	f7fb fc64 	bl	8000ec4 <hc_open>
 80055fc:	9003      	str	r0, [sp, #12]
//	printf("result=%d\n", result);

}
 80055fe:	b004      	add	sp, #16
 8005600:	bd70      	pop	{r4, r5, r6, pc}
 8005602:	bf00      	nop
 8005604:	200016a8 	.word	0x200016a8
 8005608:	080264b4 	.word	0x080264b4
 800560c:	080262ec 	.word	0x080262ec
 8005610:	0800525d 	.word	0x0800525d

08005614 <apisn>:

void apisn() {
	sprintf(stmuid, "api/Device/%lx%lx%lx", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
 8005614:	4909      	ldr	r1, [pc, #36]	; (800563c <apisn+0x28>)
 8005616:	4b0a      	ldr	r3, [pc, #40]	; (8005640 <apisn+0x2c>)
 8005618:	6809      	ldr	r1, [r1, #0]
 800561a:	4a0a      	ldr	r2, [pc, #40]	; (8005644 <apisn+0x30>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	6812      	ldr	r2, [r2, #0]
void apisn() {
 8005620:	b510      	push	{r4, lr}
	sprintf(stmuid, "api/Device/%lx%lx%lx", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
 8005622:	4c09      	ldr	r4, [pc, #36]	; (8005648 <apisn+0x34>)
void apisn() {
 8005624:	b082      	sub	sp, #8
	sprintf(stmuid, "api/Device/%lx%lx%lx", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
 8005626:	4620      	mov	r0, r4
 8005628:	9100      	str	r1, [sp, #0]
 800562a:	4908      	ldr	r1, [pc, #32]	; (800564c <apisn+0x38>)
 800562c:	f01b fc1c 	bl	8020e68 <siprintf>
	httpclient(stmuid);		// get sn and targ
 8005630:	4620      	mov	r0, r4
}
 8005632:	b002      	add	sp, #8
 8005634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	httpclient(stmuid);		// get sn and targ
 8005638:	f7ff bfc2 	b.w	80055c0 <httpclient>
 800563c:	1ff0f428 	.word	0x1ff0f428
 8005640:	1ff0f424 	.word	0x1ff0f424
 8005644:	1ff0f420 	.word	0x1ff0f420
 8005648:	200016ac 	.word	0x200016ac
 800564c:	080262d4 	.word	0x080262d4

08005650 <initialapisn>:

// get the serial number and udp target for this device
// reboot if fails
void initialapisn() {
 8005650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	i = 1;
 8005654:	2401      	movs	r4, #1
 8005656:	4f13      	ldr	r7, [pc, #76]	; (80056a4 <initialapisn+0x54>)
	while (statuspkt.uid == BUILDNO)		// not yet found new S/N from server
 8005658:	f242 7618 	movw	r6, #10008	; 0x2718
	{
		printf("getting S/N and UDP target using http. Try=%d\n", i);
 800565c:	4d12      	ldr	r5, [pc, #72]	; (80056a8 <initialapisn+0x58>)
		apisn();
		osDelay(5000);

		i++;
		if (i > 10) {
			printf("************* ABORTED **************\n");
 800565e:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80056ac <initialapisn+0x5c>
	while (statuspkt.uid == BUILDNO)		// not yet found new S/N from server
 8005662:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
		printf("getting S/N and UDP target using http. Try=%d\n", i);
 8005666:	4621      	mov	r1, r4
 8005668:	4628      	mov	r0, r5
		i++;
 800566a:	3401      	adds	r4, #1
	while (statuspkt.uid == BUILDNO)		// not yet found new S/N from server
 800566c:	429e      	cmp	r6, r3
 800566e:	d116      	bne.n	800569e <initialapisn+0x4e>
		printf("getting S/N and UDP target using http. Try=%d\n", i);
 8005670:	f01b faa2 	bl	8020bb8 <iprintf>
		apisn();
 8005674:	f7ff ffce 	bl	8005614 <apisn>
		osDelay(5000);
 8005678:	f241 3088 	movw	r0, #5000	; 0x1388
 800567c:	f00b fd2c 	bl	80110d8 <osDelay>
		if (i > 10) {
 8005680:	2c0a      	cmp	r4, #10
 8005682:	ddee      	ble.n	8005662 <initialapisn+0x12>
			printf("************* ABORTED **************\n");
 8005684:	4640      	mov	r0, r8
 8005686:	f01b fb1f 	bl	8020cc8 <puts>
			rebootme();
 800568a:	f7fc fbf3 	bl	8001e74 <rebootme>
	while (statuspkt.uid == BUILDNO)		// not yet found new S/N from server
 800568e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
		printf("getting S/N and UDP target using http. Try=%d\n", i);
 8005692:	4621      	mov	r1, r4
 8005694:	4628      	mov	r0, r5
	while (statuspkt.uid == BUILDNO)		// not yet found new S/N from server
 8005696:	429e      	cmp	r6, r3
		i++;
 8005698:	f104 0401 	add.w	r4, r4, #1
	while (statuspkt.uid == BUILDNO)		// not yet found new S/N from server
 800569c:	d0e8      	beq.n	8005670 <initialapisn+0x20>
		}
	}
}
 800569e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056a2:	bf00      	nop
 80056a4:	2002a784 	.word	0x2002a784
 80056a8:	080263e0 	.word	0x080263e0
 80056ac:	08026410 	.word	0x08026410

080056b0 <requestapisn>:

void requestapisn() {
 80056b0:	b508      	push	{r3, lr}
	printf("updating S/N and UDP target using http\n");
 80056b2:	4804      	ldr	r0, [pc, #16]	; (80056c4 <requestapisn+0x14>)
 80056b4:	f01b fb08 	bl	8020cc8 <puts>
	httpclient(stmuid);		// get sn and targ
 80056b8:	4803      	ldr	r0, [pc, #12]	; (80056c8 <requestapisn+0x18>)
}
 80056ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	httpclient(stmuid);		// get sn and targ
 80056be:	f7ff bf7f 	b.w	80055c0 <httpclient>
 80056c2:	bf00      	nop
 80056c4:	08026438 	.word	0x08026438
 80056c8:	200016ac 	.word	0x200016ac

080056cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 ldr   sp, =_estack      /* set stack pointer */
 80056cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005704 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80056d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80056d2:	e003      	b.n	80056dc <LoopCopyDataInit>

080056d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80056d4:	4b0c      	ldr	r3, [pc, #48]	; (8005708 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80056d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80056d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80056da:	3104      	adds	r1, #4

080056dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80056dc:	480b      	ldr	r0, [pc, #44]	; (800570c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80056de:	4b0c      	ldr	r3, [pc, #48]	; (8005710 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80056e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80056e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80056e4:	d3f6      	bcc.n	80056d4 <CopyDataInit>
  ldr  r2, =_sbss
 80056e6:	4a0b      	ldr	r2, [pc, #44]	; (8005714 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80056e8:	e002      	b.n	80056f0 <LoopFillZerobss>

080056ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80056ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80056ec:	f842 3b04 	str.w	r3, [r2], #4

080056f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80056f0:	4b09      	ldr	r3, [pc, #36]	; (8005718 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80056f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80056f4:	d3f9      	bcc.n	80056ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80056f6:	f7ff fa59 	bl	8004bac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80056fa:	f01a f953 	bl	801f9a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80056fe:	f7fc fd21 	bl	8002144 <main>
  bx  lr    
 8005702:	4770      	bx	lr
 ldr   sp, =_estack      /* set stack pointer */
 8005704:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8005708:	080401e8 	.word	0x080401e8
  ldr  r0, =_sdata
 800570c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005710:	20000680 	.word	0x20000680
  ldr  r2, =_sbss
 8005714:	20000680 	.word	0x20000680
  ldr  r3, = _ebss
 8005718:	2003fc04 	.word	0x2003fc04

0800571c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800571c:	e7fe      	b.n	800571c <CAN1_RX0_IRQHandler>
	...

08005720 <HAL_Init>:
   __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005720:	4a07      	ldr	r2, [pc, #28]	; (8005740 <HAL_Init+0x20>)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005722:	2003      	movs	r0, #3
{
 8005724:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005726:	6813      	ldr	r3, [r2, #0]
 8005728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800572c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800572e:	f000 fc59 	bl	8005fe4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005732:	2000      	movs	r0, #0
 8005734:	f7ff f922 	bl	800497c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8005738:	f7fe fa88 	bl	8003c4c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 800573c:	2000      	movs	r0, #0
 800573e:	bd08      	pop	{r3, pc}
 8005740:	40023c00 	.word	0x40023c00

08005744 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8005744:	4a03      	ldr	r2, [pc, #12]	; (8005754 <HAL_IncTick+0x10>)
 8005746:	4b04      	ldr	r3, [pc, #16]	; (8005758 <HAL_IncTick+0x14>)
 8005748:	6811      	ldr	r1, [r2, #0]
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	440b      	add	r3, r1
 800574e:	6013      	str	r3, [r2, #0]
}
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	2002b4e8 	.word	0x2002b4e8
 8005758:	200002a0 	.word	0x200002a0

0800575c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800575c:	4b01      	ldr	r3, [pc, #4]	; (8005764 <HAL_GetTick+0x8>)
 800575e:	6818      	ldr	r0, [r3, #0]
}
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	2002b4e8 	.word	0x2002b4e8

08005768 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005768:	b538      	push	{r3, r4, r5, lr}
 800576a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800576c:	f7ff fff6 	bl	800575c <HAL_GetTick>
 8005770:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005772:	1c63      	adds	r3, r4, #1
 8005774:	d002      	beq.n	800577c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8005776:	4b04      	ldr	r3, [pc, #16]	; (8005788 <HAL_Delay+0x20>)
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800577c:	f7ff ffee 	bl	800575c <HAL_GetTick>
 8005780:	1b40      	subs	r0, r0, r5
 8005782:	42a0      	cmp	r0, r4
 8005784:	d3fa      	bcc.n	800577c <HAL_Delay+0x14>
  {
  }
}
 8005786:	bd38      	pop	{r3, r4, r5, pc}
 8005788:	200002a0 	.word	0x200002a0

0800578c <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800578c:	2800      	cmp	r0, #0
 800578e:	f000 813f 	beq.w	8005a10 <HAL_ADC_Init+0x284>
  {
    return HAL_ERROR;
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8005792:	49b2      	ldr	r1, [pc, #712]	; (8005a5c <HAL_ADC_Init+0x2d0>)
 8005794:	4ab2      	ldr	r2, [pc, #712]	; (8005a60 <HAL_ADC_Init+0x2d4>)
{
 8005796:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8005798:	6803      	ldr	r3, [r0, #0]
 800579a:	4604      	mov	r4, r0
 800579c:	428b      	cmp	r3, r1
 800579e:	bf18      	it	ne
 80057a0:	4293      	cmpne	r3, r2
 80057a2:	d004      	beq.n	80057ae <HAL_ADC_Init+0x22>
 80057a4:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80057a8:	4293      	cmp	r3, r2
 80057aa:	f040 8133 	bne.w	8005a14 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 80057ae:	6863      	ldr	r3, [r4, #4]
 80057b0:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 80057b4:	f040 8138 	bne.w	8005a28 <HAL_ADC_Init+0x29c>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80057b8:	68a3      	ldr	r3, [r4, #8]
 80057ba:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 80057be:	f040 813d 	bne.w	8005a3c <HAL_ADC_Init+0x2b0>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 80057c2:	6923      	ldr	r3, [r4, #16]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d861      	bhi.n	800588c <HAL_ADC_Init+0x100>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80057c8:	69a3      	ldr	r3, [r4, #24]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d858      	bhi.n	8005880 <HAL_ADC_Init+0xf4>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 80057ce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80057d0:	f022 7140 	bic.w	r1, r2, #50331648	; 0x3000000
 80057d4:	f022 7080 	bic.w	r0, r2, #16777216	; 0x1000000
 80057d8:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80057dc:	bf18      	it	ne
 80057de:	2900      	cmpne	r1, #0
 80057e0:	bf14      	ite	ne
 80057e2:	2301      	movne	r3, #1
 80057e4:	2300      	moveq	r3, #0
 80057e6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 80057ea:	bf0c      	ite	eq
 80057ec:	2300      	moveq	r3, #0
 80057ee:	f003 0301 	andne.w	r3, r3, #1
 80057f2:	f1b0 6f40 	cmp.w	r0, #201326592	; 0xc000000
 80057f6:	bf0c      	ite	eq
 80057f8:	2300      	moveq	r3, #0
 80057fa:	f003 0301 	andne.w	r3, r3, #1
 80057fe:	b123      	cbz	r3, 800580a <HAL_ADC_Init+0x7e>
 8005800:	f102 4271 	add.w	r2, r2, #4043309056	; 0xf1000000
 8005804:	2a01      	cmp	r2, #1
 8005806:	f200 8140 	bhi.w	8005a8a <HAL_ADC_Init+0x2fe>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 800580a:	68e3      	ldr	r3, [r4, #12]
 800580c:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8005810:	d159      	bne.n	80058c6 <HAL_ADC_Init+0x13a>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8005812:	69e3      	ldr	r3, [r4, #28]
 8005814:	3b01      	subs	r3, #1
 8005816:	2b0f      	cmp	r3, #15
 8005818:	d84b      	bhi.n	80058b2 <HAL_ADC_Init+0x126>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 800581a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800581e:	2b01      	cmp	r3, #1
 8005820:	d825      	bhi.n	800586e <HAL_ADC_Init+0xe2>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8005822:	6963      	ldr	r3, [r4, #20]
 8005824:	2b02      	cmp	r3, #2
 8005826:	d83a      	bhi.n	800589e <HAL_ADC_Init+0x112>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8005828:	f894 3020 	ldrb.w	r3, [r4, #32]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d814      	bhi.n	800585a <HAL_ADC_Init+0xce>

  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005830:	4b8c      	ldr	r3, [pc, #560]	; (8005a64 <HAL_ADC_Init+0x2d8>)
 8005832:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005834:	429a      	cmp	r2, r3
 8005836:	d004      	beq.n	8005842 <HAL_ADC_Init+0xb6>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8005838:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800583a:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 800583e:	f040 8119 	bne.w	8005a74 <HAL_ADC_Init+0x2e8>
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8005842:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8005844:	2d00      	cmp	r5, #0
 8005846:	f000 80d8 	beq.w	80059fa <HAL_ADC_Init+0x26e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800584a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800584c:	06db      	lsls	r3, r3, #27
 800584e:	d544      	bpl.n	80058da <HAL_ADC_Init+0x14e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005850:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 8005852:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8005854:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 8005858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800585a:	f240 1157 	movw	r1, #343	; 0x157
 800585e:	4882      	ldr	r0, [pc, #520]	; (8005a68 <HAL_ADC_Init+0x2dc>)
 8005860:	f7fd fbd2 	bl	8003008 <assert_failed>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005864:	4b7f      	ldr	r3, [pc, #508]	; (8005a64 <HAL_ADC_Init+0x2d8>)
 8005866:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005868:	429a      	cmp	r2, r3
 800586a:	d1e5      	bne.n	8005838 <HAL_ADC_Init+0xac>
 800586c:	e7e9      	b.n	8005842 <HAL_ADC_Init+0xb6>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 800586e:	f240 1155 	movw	r1, #341	; 0x155
 8005872:	487d      	ldr	r0, [pc, #500]	; (8005a68 <HAL_ADC_Init+0x2dc>)
 8005874:	f7fd fbc8 	bl	8003008 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8005878:	6963      	ldr	r3, [r4, #20]
 800587a:	2b02      	cmp	r3, #2
 800587c:	d9d4      	bls.n	8005828 <HAL_ADC_Init+0x9c>
 800587e:	e00e      	b.n	800589e <HAL_ADC_Init+0x112>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8005880:	f240 1151 	movw	r1, #337	; 0x151
 8005884:	4878      	ldr	r0, [pc, #480]	; (8005a68 <HAL_ADC_Init+0x2dc>)
 8005886:	f7fd fbbf 	bl	8003008 <assert_failed>
 800588a:	e7a0      	b.n	80057ce <HAL_ADC_Init+0x42>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 800588c:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8005890:	4875      	ldr	r0, [pc, #468]	; (8005a68 <HAL_ADC_Init+0x2dc>)
 8005892:	f7fd fbb9 	bl	8003008 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8005896:	69a3      	ldr	r3, [r4, #24]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d998      	bls.n	80057ce <HAL_ADC_Init+0x42>
 800589c:	e7f0      	b.n	8005880 <HAL_ADC_Init+0xf4>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 800589e:	f44f 71ab 	mov.w	r1, #342	; 0x156
 80058a2:	4871      	ldr	r0, [pc, #452]	; (8005a68 <HAL_ADC_Init+0x2dc>)
 80058a4:	f7fd fbb0 	bl	8003008 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80058a8:	f894 3020 	ldrb.w	r3, [r4, #32]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d9bf      	bls.n	8005830 <HAL_ADC_Init+0xa4>
 80058b0:	e7d3      	b.n	800585a <HAL_ADC_Init+0xce>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80058b2:	f44f 71aa 	mov.w	r1, #340	; 0x154
 80058b6:	486c      	ldr	r0, [pc, #432]	; (8005a68 <HAL_ADC_Init+0x2dc>)
 80058b8:	f7fd fba6 	bl	8003008 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80058bc:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d9ae      	bls.n	8005822 <HAL_ADC_Init+0x96>
 80058c4:	e7d3      	b.n	800586e <HAL_ADC_Init+0xe2>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 80058c6:	f240 1153 	movw	r1, #339	; 0x153
 80058ca:	4867      	ldr	r0, [pc, #412]	; (8005a68 <HAL_ADC_Init+0x2dc>)
 80058cc:	f7fd fb9c 	bl	8003008 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80058d0:	69e3      	ldr	r3, [r4, #28]
 80058d2:	3b01      	subs	r3, #1
 80058d4:	2b0f      	cmp	r3, #15
 80058d6:	d9a0      	bls.n	800581a <HAL_ADC_Init+0x8e>
 80058d8:	e7eb      	b.n	80058b2 <HAL_ADC_Init+0x126>
    ADC_STATE_CLR_SET(hadc->State,
 80058da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058dc:	4a63      	ldr	r2, [pc, #396]	; (8005a6c <HAL_ADC_Init+0x2e0>)
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80058de:	4964      	ldr	r1, [pc, #400]	; (8005a70 <HAL_ADC_Init+0x2e4>)
    ADC_STATE_CLR_SET(hadc->State,
 80058e0:	401a      	ands	r2, r3
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80058e2:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80058e4:	4d5f      	ldr	r5, [pc, #380]	; (8005a64 <HAL_ADC_Init+0x2d8>)
    ADC_STATE_CLR_SET(hadc->State,
 80058e6:	f042 0202 	orr.w	r2, r2, #2
 80058ea:	6422      	str	r2, [r4, #64]	; 0x40
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80058ec:	684a      	ldr	r2, [r1, #4]
 80058ee:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80058f2:	604a      	str	r2, [r1, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80058f4:	684a      	ldr	r2, [r1, #4]
 80058f6:	6860      	ldr	r0, [r4, #4]
 80058f8:	4302      	orrs	r2, r0
 80058fa:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80058fc:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80058fe:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005900:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005904:	f8d4 c008 	ldr.w	ip, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005908:	68e7      	ldr	r7, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800590a:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800590c:	6858      	ldr	r0, [r3, #4]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800590e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005910:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005914:	42ae      	cmp	r6, r5
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005916:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005918:	6858      	ldr	r0, [r3, #4]
 800591a:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 800591e:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005920:	6859      	ldr	r1, [r3, #4]
 8005922:	ea41 010c 	orr.w	r1, r1, ip
 8005926:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005928:	6899      	ldr	r1, [r3, #8]
 800592a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800592e:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005930:	689a      	ldr	r2, [r3, #8]
 8005932:	ea42 0207 	orr.w	r2, r2, r7
 8005936:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005938:	f000 8086 	beq.w	8005a48 <HAL_ADC_Init+0x2bc>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800593c:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800593e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005940:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8005944:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005946:	689a      	ldr	r2, [r3, #8]
 8005948:	4316      	orrs	r6, r2
 800594a:	609e      	str	r6, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800594c:	6899      	ldr	r1, [r3, #8]
 800594e:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8005952:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005954:	689a      	ldr	r2, [r3, #8]
 8005956:	4302      	orrs	r2, r0
 8005958:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800595a:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800595c:	69a5      	ldr	r5, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800595e:	f021 0102 	bic.w	r1, r1, #2
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005962:	f894 0020 	ldrb.w	r0, [r4, #32]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005966:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005968:	689a      	ldr	r2, [r3, #8]
 800596a:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 800596e:	609a      	str	r2, [r3, #8]
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005970:	2800      	cmp	r0, #0
 8005972:	f000 8085 	beq.w	8005a80 <HAL_ADC_Init+0x2f4>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8005976:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005978:	3a01      	subs	r2, #1
 800597a:	2a07      	cmp	r2, #7
 800597c:	d907      	bls.n	800598e <HAL_ADC_Init+0x202>
 800597e:	f44f 61ef 	mov.w	r1, #1912	; 0x778
 8005982:	4839      	ldr	r0, [pc, #228]	; (8005a68 <HAL_ADC_Init+0x2dc>)
 8005984:	f7fd fb40 	bl	8003008 <assert_failed>
 8005988:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800598a:	6823      	ldr	r3, [r4, #0]
 800598c:	3a01      	subs	r2, #1
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800598e:	6859      	ldr	r1, [r3, #4]
 8005990:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8005994:	6059      	str	r1, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005996:	6859      	ldr	r1, [r3, #4]
 8005998:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 800599c:	6059      	str	r1, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800599e:	6859      	ldr	r1, [r3, #4]
 80059a0:	ea41 3242 	orr.w	r2, r1, r2, lsl #13
 80059a4:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80059a6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    ADC_CLEAR_ERRORCODE(hadc);
 80059a8:	2600      	movs	r6, #0
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80059aa:	69e5      	ldr	r5, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80059ac:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80059b0:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80059b4:	1e6a      	subs	r2, r5, #1
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80059b6:	6967      	ldr	r7, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80059b8:	62d8      	str	r0, [r3, #44]	; 0x2c
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80059ba:	4630      	mov	r0, r6
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80059bc:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80059be:	ea45 5502 	orr.w	r5, r5, r2, lsl #20
 80059c2:	62dd      	str	r5, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80059c4:	689d      	ldr	r5, [r3, #8]
 80059c6:	f425 7500 	bic.w	r5, r5, #512	; 0x200
 80059ca:	609d      	str	r5, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80059cc:	6899      	ldr	r1, [r3, #8]
 80059ce:	ea41 214c 	orr.w	r1, r1, ip, lsl #9
 80059d2:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80059d4:	6899      	ldr	r1, [r3, #8]
 80059d6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80059da:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80059dc:	689a      	ldr	r2, [r3, #8]
 80059de:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 80059e2:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80059e4:	6466      	str	r6, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80059e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80059e8:	f023 0303 	bic.w	r3, r3, #3
 80059ec:	f043 0301 	orr.w	r3, r3, #1
 80059f0:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80059f2:	2300      	movs	r3, #0
 80059f4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80059f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 80059fa:	4620      	mov	r0, r4
 80059fc:	f7fe f956 	bl	8003cac <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8005a00:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005a02:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 8005a04:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005a08:	06db      	lsls	r3, r3, #27
 8005a0a:	f53f af21 	bmi.w	8005850 <HAL_ADC_Init+0xc4>
 8005a0e:	e764      	b.n	80058da <HAL_ADC_Init+0x14e>
    return HAL_ERROR;
 8005a10:	2001      	movs	r0, #1
}
 8005a12:	4770      	bx	lr
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8005a14:	f240 114d 	movw	r1, #333	; 0x14d
 8005a18:	4813      	ldr	r0, [pc, #76]	; (8005a68 <HAL_ADC_Init+0x2dc>)
 8005a1a:	f7fd faf5 	bl	8003008 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8005a1e:	6863      	ldr	r3, [r4, #4]
 8005a20:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8005a24:	f43f aec8 	beq.w	80057b8 <HAL_ADC_Init+0x2c>
 8005a28:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 8005a2c:	480e      	ldr	r0, [pc, #56]	; (8005a68 <HAL_ADC_Init+0x2dc>)
 8005a2e:	f7fd faeb 	bl	8003008 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8005a32:	68a3      	ldr	r3, [r4, #8]
 8005a34:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 8005a38:	f43f aec3 	beq.w	80057c2 <HAL_ADC_Init+0x36>
 8005a3c:	f240 114f 	movw	r1, #335	; 0x14f
 8005a40:	4809      	ldr	r0, [pc, #36]	; (8005a68 <HAL_ADC_Init+0x2dc>)
 8005a42:	f7fd fae1 	bl	8003008 <assert_failed>
 8005a46:	e6bc      	b.n	80057c2 <HAL_ADC_Init+0x36>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005a48:	689a      	ldr	r2, [r3, #8]
 8005a4a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005a4e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005a50:	689a      	ldr	r2, [r3, #8]
 8005a52:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005a56:	609a      	str	r2, [r3, #8]
 8005a58:	e77f      	b.n	800595a <HAL_ADC_Init+0x1ce>
 8005a5a:	bf00      	nop
 8005a5c:	40012000 	.word	0x40012000
 8005a60:	40012100 	.word	0x40012100
 8005a64:	0f000001 	.word	0x0f000001
 8005a68:	0802666c 	.word	0x0802666c
 8005a6c:	ffffeefd 	.word	0xffffeefd
 8005a70:	40012300 	.word	0x40012300
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8005a74:	f240 115b 	movw	r1, #347	; 0x15b
 8005a78:	4807      	ldr	r0, [pc, #28]	; (8005a98 <HAL_ADC_Init+0x30c>)
 8005a7a:	f7fd fac5 	bl	8003008 <assert_failed>
 8005a7e:	e6e0      	b.n	8005842 <HAL_ADC_Init+0xb6>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005a80:	685a      	ldr	r2, [r3, #4]
 8005a82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a86:	605a      	str	r2, [r3, #4]
 8005a88:	e78d      	b.n	80059a6 <HAL_ADC_Init+0x21a>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8005a8a:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8005a8e:	4802      	ldr	r0, [pc, #8]	; (8005a98 <HAL_ADC_Init+0x30c>)
 8005a90:	f7fd faba 	bl	8003008 <assert_failed>
 8005a94:	e6b9      	b.n	800580a <HAL_ADC_Init+0x7e>
 8005a96:	bf00      	nop
 8005a98:	0802666c 	.word	0x0802666c

08005a9c <HAL_ADC_Start>:
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8005a9c:	6983      	ldr	r3, [r0, #24]
  __IO uint32_t counter = 0;
 8005a9e:	2200      	movs	r2, #0
{
 8005aa0:	b510      	push	{r4, lr}
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8005aa2:	2b01      	cmp	r3, #1
{
 8005aa4:	b082      	sub	sp, #8
 8005aa6:	4604      	mov	r4, r0
  __IO uint32_t counter = 0;
 8005aa8:	9201      	str	r2, [sp, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8005aaa:	d904      	bls.n	8005ab6 <HAL_ADC_Start+0x1a>
 8005aac:	f240 21df 	movw	r1, #735	; 0x2df
 8005ab0:	4840      	ldr	r0, [pc, #256]	; (8005bb4 <HAL_ADC_Start+0x118>)
 8005ab2:	f7fd faa9 	bl	8003008 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 8005ab6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005ab8:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 8005abc:	d173      	bne.n	8005ba6 <HAL_ADC_Start+0x10a>
  __HAL_LOCK(hadc);
 8005abe:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d06c      	beq.n	8005ba0 <HAL_ADC_Start+0x104>
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005ac6:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(hadc);
 8005ac8:	2101      	movs	r1, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005aca:	6893      	ldr	r3, [r2, #8]
  __HAL_LOCK(hadc);
 8005acc:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005ad0:	07d9      	lsls	r1, r3, #31
 8005ad2:	d414      	bmi.n	8005afe <HAL_ADC_Start+0x62>
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8005ad4:	4b38      	ldr	r3, [pc, #224]	; (8005bb8 <HAL_ADC_Start+0x11c>)
 8005ad6:	4839      	ldr	r0, [pc, #228]	; (8005bbc <HAL_ADC_Start+0x120>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 8005ada:	6891      	ldr	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8005adc:	fba0 0303 	umull	r0, r3, r0, r3
    __HAL_ADC_ENABLE(hadc);
 8005ae0:	f041 0101 	orr.w	r1, r1, #1
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8005ae4:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 8005ae6:	6091      	str	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8005ae8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005aec:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 8005aee:	9b01      	ldr	r3, [sp, #4]
 8005af0:	b12b      	cbz	r3, 8005afe <HAL_ADC_Start+0x62>
      counter--;
 8005af2:	9b01      	ldr	r3, [sp, #4]
 8005af4:	3b01      	subs	r3, #1
 8005af6:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 8005af8:	9b01      	ldr	r3, [sp, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d1f9      	bne.n	8005af2 <HAL_ADC_Start+0x56>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005afe:	6893      	ldr	r3, [r2, #8]
 8005b00:	07db      	lsls	r3, r3, #31
 8005b02:	d524      	bpl.n	8005b4e <HAL_ADC_Start+0xb2>
    ADC_STATE_CLR_SET(hadc->State,
 8005b04:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005b06:	4b2e      	ldr	r3, [pc, #184]	; (8005bc0 <HAL_ADC_Start+0x124>)
 8005b08:	400b      	ands	r3, r1
 8005b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b0e:	6423      	str	r3, [r4, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005b10:	6853      	ldr	r3, [r2, #4]
 8005b12:	0558      	lsls	r0, r3, #21
 8005b14:	d505      	bpl.n	8005b22 <HAL_ADC_Start+0x86>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005b16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b18:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005b1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005b20:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005b22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b24:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 8005b28:	d026      	beq.n	8005b78 <HAL_ADC_Start+0xdc>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005b2a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005b2c:	f023 0306 	bic.w	r3, r3, #6
 8005b30:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005b32:	f06f 0122 	mvn.w	r1, #34	; 0x22
    __HAL_UNLOCK(hadc);
 8005b36:	2000      	movs	r0, #0
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8005b38:	4b22      	ldr	r3, [pc, #136]	; (8005bc4 <HAL_ADC_Start+0x128>)
    __HAL_UNLOCK(hadc);
 8005b3a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005b3e:	6011      	str	r1, [r2, #0]
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8005b40:	6859      	ldr	r1, [r3, #4]
 8005b42:	06c9      	lsls	r1, r1, #27
 8005b44:	d106      	bne.n	8005b54 <HAL_ADC_Start+0xb8>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005b46:	6890      	ldr	r0, [r2, #8]
 8005b48:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8005b4c:	d016      	beq.n	8005b7c <HAL_ADC_Start+0xe0>
  return HAL_OK;
 8005b4e:	2000      	movs	r0, #0
}
 8005b50:	b002      	add	sp, #8
 8005b52:	bd10      	pop	{r4, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005b54:	491c      	ldr	r1, [pc, #112]	; (8005bc8 <HAL_ADC_Start+0x12c>)
 8005b56:	428a      	cmp	r2, r1
 8005b58:	d016      	beq.n	8005b88 <HAL_ADC_Start+0xec>
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8005b5a:	685b      	ldr	r3, [r3, #4]
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005b5c:	06db      	lsls	r3, r3, #27
 8005b5e:	d4f6      	bmi.n	8005b4e <HAL_ADC_Start+0xb2>
 8005b60:	491a      	ldr	r1, [pc, #104]	; (8005bcc <HAL_ADC_Start+0x130>)
 8005b62:	428a      	cmp	r2, r1
 8005b64:	d1f3      	bne.n	8005b4e <HAL_ADC_Start+0xb2>
 8005b66:	6888      	ldr	r0, [r1, #8]
 8005b68:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8005b6c:	d1ef      	bne.n	8005b4e <HAL_ADC_Start+0xb2>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005b6e:	688b      	ldr	r3, [r1, #8]
 8005b70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b74:	608b      	str	r3, [r1, #8]
 8005b76:	e7eb      	b.n	8005b50 <HAL_ADC_Start+0xb4>
      ADC_CLEAR_ERRORCODE(hadc);
 8005b78:	6463      	str	r3, [r4, #68]	; 0x44
 8005b7a:	e7da      	b.n	8005b32 <HAL_ADC_Start+0x96>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005b7c:	6893      	ldr	r3, [r2, #8]
 8005b7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b82:	6093      	str	r3, [r2, #8]
}
 8005b84:	b002      	add	sp, #8
 8005b86:	bd10      	pop	{r4, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005b88:	6893      	ldr	r3, [r2, #8]
 8005b8a:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 8005b8e:	d103      	bne.n	8005b98 <HAL_ADC_Start+0xfc>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005b90:	6893      	ldr	r3, [r2, #8]
 8005b92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b96:	6093      	str	r3, [r2, #8]
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8005b98:	4b0a      	ldr	r3, [pc, #40]	; (8005bc4 <HAL_ADC_Start+0x128>)
  return HAL_OK;
 8005b9a:	2000      	movs	r0, #0
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	e7d7      	b.n	8005b50 <HAL_ADC_Start+0xb4>
  __HAL_LOCK(hadc);
 8005ba0:	2002      	movs	r0, #2
}
 8005ba2:	b002      	add	sp, #8
 8005ba4:	bd10      	pop	{r4, pc}
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 8005ba6:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8005baa:	4802      	ldr	r0, [pc, #8]	; (8005bb4 <HAL_ADC_Start+0x118>)
 8005bac:	f7fd fa2c 	bl	8003008 <assert_failed>
 8005bb0:	e785      	b.n	8005abe <HAL_ADC_Start+0x22>
 8005bb2:	bf00      	nop
 8005bb4:	0802666c 	.word	0x0802666c
 8005bb8:	20000244 	.word	0x20000244
 8005bbc:	431bde83 	.word	0x431bde83
 8005bc0:	fffff8fe 	.word	0xfffff8fe
 8005bc4:	40012300 	.word	0x40012300
 8005bc8:	40012000 	.word	0x40012000
 8005bcc:	40012200 	.word	0x40012200

08005bd0 <HAL_ADC_ConvCpltCallback>:
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop

08005bd4 <HAL_ADC_LevelOutOfWindowCallback>:
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop

08005bd8 <HAL_ADC_ErrorCallback>:
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop

08005bdc <HAL_ADC_IRQHandler>:
{
 8005bdc:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8005bde:	6983      	ldr	r3, [r0, #24]
{
 8005be0:	4604      	mov	r4, r0
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d904      	bls.n	8005bf0 <HAL_ADC_IRQHandler+0x14>
 8005be6:	f240 41a6 	movw	r1, #1190	; 0x4a6
 8005bea:	4856      	ldr	r0, [pc, #344]	; (8005d44 <HAL_ADC_IRQHandler+0x168>)
 8005bec:	f7fd fa0c 	bl	8003008 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8005bf0:	69e3      	ldr	r3, [r4, #28]
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	2b0f      	cmp	r3, #15
 8005bf6:	f200 808f 	bhi.w	8005d18 <HAL_ADC_IRQHandler+0x13c>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8005bfa:	6963      	ldr	r3, [r4, #20]
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	f200 8085 	bhi.w	8005d0c <HAL_ADC_IRQHandler+0x130>
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8005c02:	6823      	ldr	r3, [r4, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8005c06:	6859      	ldr	r1, [r3, #4]
  if(tmp1 && tmp2)
 8005c08:	0790      	lsls	r0, r2, #30
 8005c0a:	d513      	bpl.n	8005c34 <HAL_ADC_IRQHandler+0x58>
 8005c0c:	068a      	lsls	r2, r1, #26
 8005c0e:	d511      	bpl.n	8005c34 <HAL_ADC_IRQHandler+0x58>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005c10:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005c12:	06d5      	lsls	r5, r2, #27
 8005c14:	d403      	bmi.n	8005c1e <HAL_ADC_IRQHandler+0x42>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8005c16:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005c18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c1c:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005c1e:	689a      	ldr	r2, [r3, #8]
 8005c20:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8005c24:	d058      	beq.n	8005cd8 <HAL_ADC_IRQHandler+0xfc>
    HAL_ADC_ConvCpltCallback(hadc);
 8005c26:	4620      	mov	r0, r4
 8005c28:	f7ff ffd2 	bl	8005bd0 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005c2c:	6823      	ldr	r3, [r4, #0]
 8005c2e:	f06f 0212 	mvn.w	r2, #18
 8005c32:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8005c34:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8005c36:	6859      	ldr	r1, [r3, #4]
  if(tmp1 && tmp2)
 8005c38:	0752      	lsls	r2, r2, #29
 8005c3a:	d513      	bpl.n	8005c64 <HAL_ADC_IRQHandler+0x88>
 8005c3c:	060d      	lsls	r5, r1, #24
 8005c3e:	d511      	bpl.n	8005c64 <HAL_ADC_IRQHandler+0x88>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005c40:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005c42:	06d0      	lsls	r0, r2, #27
 8005c44:	d403      	bmi.n	8005c4e <HAL_ADC_IRQHandler+0x72>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005c46:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005c48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c4c:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005c4e:	689a      	ldr	r2, [r3, #8]
 8005c50:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8005c54:	d022      	beq.n	8005c9c <HAL_ADC_IRQHandler+0xc0>
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005c56:	4620      	mov	r0, r4
 8005c58:	f000 f960 	bl	8005f1c <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005c5c:	6823      	ldr	r3, [r4, #0]
 8005c5e:	f06f 020c 	mvn.w	r2, #12
 8005c62:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8005c64:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8005c66:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8005c68:	0650      	lsls	r0, r2, #25
 8005c6a:	d504      	bpl.n	8005c76 <HAL_ADC_IRQHandler+0x9a>
 8005c6c:	07ca      	lsls	r2, r1, #31
 8005c6e:	d502      	bpl.n	8005c76 <HAL_ADC_IRQHandler+0x9a>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	07d5      	lsls	r5, r2, #31
 8005c74:	d456      	bmi.n	8005d24 <HAL_ADC_IRQHandler+0x148>
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8005c76:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8005c78:	6859      	ldr	r1, [r3, #4]
  if(tmp1 && tmp2)
 8005c7a:	0690      	lsls	r0, r2, #26
 8005c7c:	d50d      	bpl.n	8005c9a <HAL_ADC_IRQHandler+0xbe>
 8005c7e:	014a      	lsls	r2, r1, #5
 8005c80:	d50b      	bpl.n	8005c9a <HAL_ADC_IRQHandler+0xbe>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005c82:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005c84:	f06f 0520 	mvn.w	r5, #32
      HAL_ADC_ErrorCallback(hadc);
 8005c88:	4620      	mov	r0, r4
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005c8a:	f042 0202 	orr.w	r2, r2, #2
 8005c8e:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005c90:	601d      	str	r5, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8005c92:	f7ff ffa1 	bl	8005bd8 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005c96:	6823      	ldr	r3, [r4, #0]
 8005c98:	601d      	str	r5, [r3, #0]
}
 8005c9a:	bd38      	pop	{r3, r4, r5, pc}
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8005c9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005c9e:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8005ca2:	d14b      	bne.n	8005d3c <HAL_ADC_IRQHandler+0x160>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005ca4:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8005ca6:	0552      	lsls	r2, r2, #21
 8005ca8:	d4d5      	bmi.n	8005c56 <HAL_ADC_IRQHandler+0x7a>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8005caa:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005cac:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8005cb0:	d1d1      	bne.n	8005c56 <HAL_ADC_IRQHandler+0x7a>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8005cb2:	69a2      	ldr	r2, [r4, #24]
 8005cb4:	2a00      	cmp	r2, #0
 8005cb6:	d1ce      	bne.n	8005c56 <HAL_ADC_IRQHandler+0x7a>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005cb8:	685a      	ldr	r2, [r3, #4]
 8005cba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cbe:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8005cc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005cc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cc6:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005cc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005cca:	05dd      	lsls	r5, r3, #23
 8005ccc:	d4c3      	bmi.n	8005c56 <HAL_ADC_IRQHandler+0x7a>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005cce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005cd0:	f043 0301 	orr.w	r3, r3, #1
 8005cd4:	6423      	str	r3, [r4, #64]	; 0x40
 8005cd6:	e7be      	b.n	8005c56 <HAL_ADC_IRQHandler+0x7a>
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005cd8:	69a2      	ldr	r2, [r4, #24]
 8005cda:	2a00      	cmp	r2, #0
 8005cdc:	d1a3      	bne.n	8005c26 <HAL_ADC_IRQHandler+0x4a>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005ce0:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8005ce4:	d002      	beq.n	8005cec <HAL_ADC_IRQHandler+0x110>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005ce6:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005ce8:	0550      	lsls	r0, r2, #21
 8005cea:	d49c      	bmi.n	8005c26 <HAL_ADC_IRQHandler+0x4a>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005cec:	685a      	ldr	r2, [r3, #4]
 8005cee:	f022 0220 	bic.w	r2, r2, #32
 8005cf2:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005cf4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005cf6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cfa:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005cfc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005cfe:	04d9      	lsls	r1, r3, #19
 8005d00:	d491      	bmi.n	8005c26 <HAL_ADC_IRQHandler+0x4a>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005d02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d04:	f043 0301 	orr.w	r3, r3, #1
 8005d08:	6423      	str	r3, [r4, #64]	; 0x40
 8005d0a:	e78c      	b.n	8005c26 <HAL_ADC_IRQHandler+0x4a>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8005d0c:	f44f 6195 	mov.w	r1, #1192	; 0x4a8
 8005d10:	480c      	ldr	r0, [pc, #48]	; (8005d44 <HAL_ADC_IRQHandler+0x168>)
 8005d12:	f7fd f979 	bl	8003008 <assert_failed>
 8005d16:	e774      	b.n	8005c02 <HAL_ADC_IRQHandler+0x26>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8005d18:	f240 41a7 	movw	r1, #1191	; 0x4a7
 8005d1c:	4809      	ldr	r0, [pc, #36]	; (8005d44 <HAL_ADC_IRQHandler+0x168>)
 8005d1e:	f7fd f973 	bl	8003008 <assert_failed>
 8005d22:	e76a      	b.n	8005bfa <HAL_ADC_IRQHandler+0x1e>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005d24:	6c23      	ldr	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005d26:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d2c:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005d2e:	f7ff ff51 	bl	8005bd4 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8005d32:	6823      	ldr	r3, [r4, #0]
 8005d34:	f06f 0201 	mvn.w	r2, #1
 8005d38:	601a      	str	r2, [r3, #0]
 8005d3a:	e79c      	b.n	8005c76 <HAL_ADC_IRQHandler+0x9a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8005d3c:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8005d3e:	0551      	lsls	r1, r2, #21
 8005d40:	d489      	bmi.n	8005c56 <HAL_ADC_IRQHandler+0x7a>
 8005d42:	e7af      	b.n	8005ca4 <HAL_ADC_IRQHandler+0xc8>
 8005d44:	0802666c 	.word	0x0802666c

08005d48 <HAL_ADC_ConfigChannel>:
{
 8005d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d4a:	460d      	mov	r5, r1
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8005d4c:	4a6e      	ldr	r2, [pc, #440]	; (8005f08 <HAL_ADC_ConfigChannel+0x1c0>)
{
 8005d4e:	b083      	sub	sp, #12
  __IO uint32_t counter = 0;
 8005d50:	2100      	movs	r1, #0
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8005d52:	682b      	ldr	r3, [r5, #0]
{
 8005d54:	4604      	mov	r4, r0
  __IO uint32_t counter = 0;
 8005d56:	9101      	str	r1, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	bf18      	it	ne
 8005d5c:	2b12      	cmpne	r3, #18
 8005d5e:	d902      	bls.n	8005d66 <HAL_ADC_ConfigChannel+0x1e>
 8005d60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d64:	d143      	bne.n	8005dee <HAL_ADC_ConfigChannel+0xa6>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8005d66:	686b      	ldr	r3, [r5, #4]
 8005d68:	3b01      	subs	r3, #1
 8005d6a:	2b0f      	cmp	r3, #15
 8005d6c:	d848      	bhi.n	8005e00 <HAL_ADC_ConfigChannel+0xb8>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8005d6e:	68ab      	ldr	r3, [r5, #8]
 8005d70:	2b07      	cmp	r3, #7
 8005d72:	d84d      	bhi.n	8005e10 <HAL_ADC_ConfigChannel+0xc8>
  __HAL_LOCK(hadc);
 8005d74:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d052      	beq.n	8005e22 <HAL_ADC_ConfigChannel+0xda>
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005d7c:	682f      	ldr	r7, [r5, #0]
  __HAL_LOCK(hadc);
 8005d7e:	2201      	movs	r2, #1
 8005d80:	6823      	ldr	r3, [r4, #0]
 8005d82:	fa1f fc87 	uxth.w	ip, r7
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005d86:	2f09      	cmp	r7, #9
  __HAL_LOCK(hadc);
 8005d88:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
 8005d8c:	eb0c 064c 	add.w	r6, ip, ip, lsl #1
 8005d90:	68aa      	ldr	r2, [r5, #8]
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005d92:	d949      	bls.n	8005e28 <HAL_ADC_ConfigChannel+0xe0>
 8005d94:	f1b7 4f00 	cmp.w	r7, #2147483648	; 0x80000000
 8005d98:	d046      	beq.n	8005e28 <HAL_ADC_ConfigChannel+0xe0>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005d9a:	3e1e      	subs	r6, #30
 8005d9c:	2007      	movs	r0, #7
 8005d9e:	68d9      	ldr	r1, [r3, #12]
 8005da0:	40b0      	lsls	r0, r6
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005da2:	f8df e164 	ldr.w	lr, [pc, #356]	; 8005f08 <HAL_ADC_ConfigChannel+0x1c0>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005da6:	ea21 0100 	bic.w	r1, r1, r0
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005daa:	4577      	cmp	r7, lr
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005dac:	60d9      	str	r1, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005dae:	f000 809c 	beq.w	8005eea <HAL_ADC_ConfigChannel+0x1a2>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005db2:	fa02 f606 	lsl.w	r6, r2, r6
 8005db6:	68da      	ldr	r2, [r3, #12]
 8005db8:	4316      	orrs	r6, r2
 8005dba:	60de      	str	r6, [r3, #12]
  if (sConfig->Rank < 7)
 8005dbc:	6869      	ldr	r1, [r5, #4]
 8005dbe:	2906      	cmp	r1, #6
 8005dc0:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8005dc4:	d841      	bhi.n	8005e4a <HAL_ADC_ConfigChannel+0x102>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005dc6:	3a05      	subs	r2, #5
 8005dc8:	201f      	movs	r0, #31
 8005dca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005dcc:	4090      	lsls	r0, r2
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005dce:	fa0c f202 	lsl.w	r2, ip, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005dd2:	ea21 0100 	bic.w	r1, r1, r0
 8005dd6:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005dd8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005dda:	430a      	orrs	r2, r1
 8005ddc:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005dde:	4a4b      	ldr	r2, [pc, #300]	; (8005f0c <HAL_ADC_ConfigChannel+0x1c4>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d044      	beq.n	8005e6e <HAL_ADC_ConfigChannel+0x126>
  __HAL_UNLOCK(hadc);
 8005de4:	2000      	movs	r0, #0
 8005de6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8005dea:	b003      	add	sp, #12
 8005dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8005dee:	f240 615d 	movw	r1, #1629	; 0x65d
 8005df2:	4847      	ldr	r0, [pc, #284]	; (8005f10 <HAL_ADC_ConfigChannel+0x1c8>)
 8005df4:	f7fd f908 	bl	8003008 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8005df8:	686b      	ldr	r3, [r5, #4]
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	2b0f      	cmp	r3, #15
 8005dfe:	d9b6      	bls.n	8005d6e <HAL_ADC_ConfigChannel+0x26>
 8005e00:	f240 615e 	movw	r1, #1630	; 0x65e
 8005e04:	4842      	ldr	r0, [pc, #264]	; (8005f10 <HAL_ADC_ConfigChannel+0x1c8>)
 8005e06:	f7fd f8ff 	bl	8003008 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8005e0a:	68ab      	ldr	r3, [r5, #8]
 8005e0c:	2b07      	cmp	r3, #7
 8005e0e:	d9b1      	bls.n	8005d74 <HAL_ADC_ConfigChannel+0x2c>
 8005e10:	f240 615f 	movw	r1, #1631	; 0x65f
 8005e14:	483e      	ldr	r0, [pc, #248]	; (8005f10 <HAL_ADC_ConfigChannel+0x1c8>)
 8005e16:	f7fd f8f7 	bl	8003008 <assert_failed>
  __HAL_LOCK(hadc);
 8005e1a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d1ac      	bne.n	8005d7c <HAL_ADC_ConfigChannel+0x34>
 8005e22:	2002      	movs	r0, #2
}
 8005e24:	b003      	add	sp, #12
 8005e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005e28:	2007      	movs	r0, #7
 8005e2a:	6919      	ldr	r1, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005e2c:	40b2      	lsls	r2, r6
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005e2e:	fa00 f606 	lsl.w	r6, r0, r6
 8005e32:	ea21 0606 	bic.w	r6, r1, r6
  if (sConfig->Rank < 7)
 8005e36:	6869      	ldr	r1, [r5, #4]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005e38:	611e      	str	r6, [r3, #16]
  if (sConfig->Rank < 7)
 8005e3a:	2906      	cmp	r1, #6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005e3c:	691e      	ldr	r6, [r3, #16]
 8005e3e:	ea46 0602 	orr.w	r6, r6, r2
 8005e42:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8005e46:	611e      	str	r6, [r3, #16]
  if (sConfig->Rank < 7)
 8005e48:	d9bd      	bls.n	8005dc6 <HAL_ADC_ConfigChannel+0x7e>
  else if (sConfig->Rank < 13)
 8005e4a:	290c      	cmp	r1, #12
 8005e4c:	d838      	bhi.n	8005ec0 <HAL_ADC_ConfigChannel+0x178>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005e4e:	f1a2 0023 	sub.w	r0, r2, #35	; 0x23
 8005e52:	251f      	movs	r5, #31
 8005e54:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005e56:	4085      	lsls	r5, r0
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005e58:	fa0c f200 	lsl.w	r2, ip, r0
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005e5c:	ea21 0105 	bic.w	r1, r1, r5
 8005e60:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005e62:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005e64:	4310      	orrs	r0, r2
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005e66:	4a29      	ldr	r2, [pc, #164]	; (8005f0c <HAL_ADC_ConfigChannel+0x1c4>)
 8005e68:	4293      	cmp	r3, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005e6a:	6318      	str	r0, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005e6c:	d1ba      	bne.n	8005de4 <HAL_ADC_ConfigChannel+0x9c>
 8005e6e:	f1b7 4f00 	cmp.w	r7, #2147483648	; 0x80000000
 8005e72:	d033      	beq.n	8005edc <HAL_ADC_ConfigChannel+0x194>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005e74:	2f12      	cmp	r7, #18
 8005e76:	d03d      	beq.n	8005ef4 <HAL_ADC_ConfigChannel+0x1ac>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005e78:	4b23      	ldr	r3, [pc, #140]	; (8005f08 <HAL_ADC_ConfigChannel+0x1c0>)
 8005e7a:	429f      	cmp	r7, r3
 8005e7c:	d140      	bne.n	8005f00 <HAL_ADC_ConfigChannel+0x1b8>
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005e7e:	4a25      	ldr	r2, [pc, #148]	; (8005f14 <HAL_ADC_ConfigChannel+0x1cc>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005e80:	4921      	ldr	r1, [pc, #132]	; (8005f08 <HAL_ADC_ConfigChannel+0x1c0>)
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005e82:	6853      	ldr	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005e84:	428f      	cmp	r7, r1
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005e86:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005e8a:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005e8c:	d1aa      	bne.n	8005de4 <HAL_ADC_ConfigChannel+0x9c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005e8e:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8005e92:	4b21      	ldr	r3, [pc, #132]	; (8005f18 <HAL_ADC_ConfigChannel+0x1d0>)
 8005e94:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f202 3283 	addw	r2, r2, #899	; 0x383
 8005e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea2:	0c9b      	lsrs	r3, r3, #18
 8005ea4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005ea8:	005b      	lsls	r3, r3, #1
 8005eaa:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8005eac:	9b01      	ldr	r3, [sp, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d098      	beq.n	8005de4 <HAL_ADC_ConfigChannel+0x9c>
        counter--;
 8005eb2:	9b01      	ldr	r3, [sp, #4]
 8005eb4:	3b01      	subs	r3, #1
 8005eb6:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8005eb8:	9b01      	ldr	r3, [sp, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1f9      	bne.n	8005eb2 <HAL_ADC_ConfigChannel+0x16a>
 8005ebe:	e791      	b.n	8005de4 <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005ec0:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 8005ec4:	251f      	movs	r5, #31
 8005ec6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005ec8:	408d      	lsls	r5, r1
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005eca:	fa0c f201 	lsl.w	r2, ip, r1
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005ece:	ea20 0005 	bic.w	r0, r0, r5
 8005ed2:	62d8      	str	r0, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005ed4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	62da      	str	r2, [r3, #44]	; 0x2c
 8005eda:	e780      	b.n	8005dde <HAL_ADC_ConfigChannel+0x96>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005edc:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8005ee0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005ee4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
 8005ee8:	e77c      	b.n	8005de4 <HAL_ADC_ConfigChannel+0x9c>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8005eea:	68de      	ldr	r6, [r3, #12]
 8005eec:	ea46 6602 	orr.w	r6, r6, r2, lsl #24
 8005ef0:	60de      	str	r6, [r3, #12]
 8005ef2:	e763      	b.n	8005dbc <HAL_ADC_ConfigChannel+0x74>
    ADC->CCR |= ADC_CCR_VBATE;
 8005ef4:	4a07      	ldr	r2, [pc, #28]	; (8005f14 <HAL_ADC_ConfigChannel+0x1cc>)
 8005ef6:	6853      	ldr	r3, [r2, #4]
 8005ef8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005efc:	6053      	str	r3, [r2, #4]
 8005efe:	e771      	b.n	8005de4 <HAL_ADC_ConfigChannel+0x9c>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005f00:	2f11      	cmp	r7, #17
 8005f02:	d0bc      	beq.n	8005e7e <HAL_ADC_ConfigChannel+0x136>
 8005f04:	e76e      	b.n	8005de4 <HAL_ADC_ConfigChannel+0x9c>
 8005f06:	bf00      	nop
 8005f08:	10000012 	.word	0x10000012
 8005f0c:	40012000 	.word	0x40012000
 8005f10:	0802666c 	.word	0x0802666c
 8005f14:	40012300 	.word	0x40012300
 8005f18:	20000244 	.word	0x20000244

08005f1c <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop

08005f20 <HAL_ADCEx_MultiModeConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
  /* Check the parameters */
  assert_param(IS_ADC_MODE(multimode->Mode));
 8005f20:	680a      	ldr	r2, [r1, #0]
 8005f22:	2a19      	cmp	r2, #25
{
 8005f24:	b570      	push	{r4, r5, r6, lr}
 8005f26:	460c      	mov	r4, r1
 8005f28:	4605      	mov	r5, r0
  assert_param(IS_ADC_MODE(multimode->Mode));
 8005f2a:	d93e      	bls.n	8005faa <HAL_ADCEx_MultiModeConfigChannel+0x8a>
 8005f2c:	f240 3193 	movw	r1, #915	; 0x393
 8005f30:	4829      	ldr	r0, [pc, #164]	; (8005fd8 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8005f32:	f7fd f869 	bl	8003008 <assert_failed>
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 8005f36:	6863      	ldr	r3, [r4, #4]
 8005f38:	f433 4340 	bics.w	r3, r3, #49152	; 0xc000
 8005f3c:	d13d      	bne.n	8005fba <HAL_ADCEx_MultiModeConfigChannel+0x9a>
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 8005f3e:	68a3      	ldr	r3, [r4, #8]
 8005f40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f48:	bf18      	it	ne
 8005f4a:	2b00      	cmpne	r3, #0
 8005f4c:	bf14      	ite	ne
 8005f4e:	2201      	movne	r2, #1
 8005f50:	2200      	moveq	r2, #0
 8005f52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f56:	bf0c      	ite	eq
 8005f58:	2200      	moveq	r2, #0
 8005f5a:	f002 0201 	andne.w	r2, r2, #1
 8005f5e:	b112      	cbz	r2, 8005f66 <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8005f60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f64:	d131      	bne.n	8005fca <HAL_ADCEx_MultiModeConfigChannel+0xaa>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005f66:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d02b      	beq.n	8005fc6 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
  
  /* Set ADC mode */
  ADC->CCR &= ~(ADC_CCR_MULTI);
 8005f6e:	4b1b      	ldr	r3, [pc, #108]	; (8005fdc <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
  /* Set delay between two sampling phases */
  ADC->CCR &= ~(ADC_CCR_DELAY);
  ADC->CCR |= multimode->TwoSamplingDelay;
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f70:	2100      	movs	r1, #0
  ADC->CCR &= ~(ADC_CCR_MULTI);
 8005f72:	685a      	ldr	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8005f74:	4608      	mov	r0, r1
  ADC->CCR &= ~(ADC_CCR_MULTI);
 8005f76:	f022 021f 	bic.w	r2, r2, #31
 8005f7a:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->Mode;
 8005f7c:	685a      	ldr	r2, [r3, #4]
 8005f7e:	6826      	ldr	r6, [r4, #0]
 8005f80:	4332      	orrs	r2, r6
 8005f82:	605a      	str	r2, [r3, #4]
  ADC->CCR &= ~(ADC_CCR_DMA);
 8005f84:	685a      	ldr	r2, [r3, #4]
 8005f86:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005f8a:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->DMAAccessMode;
 8005f8c:	685a      	ldr	r2, [r3, #4]
 8005f8e:	6866      	ldr	r6, [r4, #4]
 8005f90:	4332      	orrs	r2, r6
 8005f92:	605a      	str	r2, [r3, #4]
  ADC->CCR &= ~(ADC_CCR_DELAY);
 8005f94:	685a      	ldr	r2, [r3, #4]
 8005f96:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8005f9a:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->TwoSamplingDelay;
 8005f9c:	68a4      	ldr	r4, [r4, #8]
 8005f9e:	685a      	ldr	r2, [r3, #4]
 8005fa0:	4322      	orrs	r2, r4
 8005fa2:	605a      	str	r2, [r3, #4]
  __HAL_UNLOCK(hadc);
 8005fa4:	f885 103c 	strb.w	r1, [r5, #60]	; 0x3c
}
 8005fa8:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ADC_MODE(multimode->Mode));
 8005faa:	4b0d      	ldr	r3, [pc, #52]	; (8005fe0 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 8005fac:	40d3      	lsrs	r3, r2
 8005fae:	07db      	lsls	r3, r3, #31
 8005fb0:	d5bc      	bpl.n	8005f2c <HAL_ADCEx_MultiModeConfigChannel+0xc>
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 8005fb2:	6863      	ldr	r3, [r4, #4]
 8005fb4:	f433 4340 	bics.w	r3, r3, #49152	; 0xc000
 8005fb8:	d0c1      	beq.n	8005f3e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005fba:	f44f 7165 	mov.w	r1, #916	; 0x394
 8005fbe:	4806      	ldr	r0, [pc, #24]	; (8005fd8 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8005fc0:	f7fd f822 	bl	8003008 <assert_failed>
 8005fc4:	e7bb      	b.n	8005f3e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
  __HAL_LOCK(hadc);
 8005fc6:	2002      	movs	r0, #2
}
 8005fc8:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 8005fca:	f240 3195 	movw	r1, #917	; 0x395
 8005fce:	4802      	ldr	r0, [pc, #8]	; (8005fd8 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8005fd0:	f7fd f81a 	bl	8003008 <assert_failed>
 8005fd4:	e7c7      	b.n	8005f66 <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8005fd6:	bf00      	nop
 8005fd8:	080266a4 	.word	0x080266a4
 8005fdc:	40012300 	.word	0x40012300
 8005fe0:	02e602e7 	.word	0x02e602e7

08005fe4 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8005fe4:	1ec3      	subs	r3, r0, #3
 8005fe6:	2b04      	cmp	r3, #4
{
 8005fe8:	b510      	push	{r4, lr}
 8005fea:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8005fec:	d903      	bls.n	8005ff6 <HAL_NVIC_SetPriorityGrouping+0x12>
 8005fee:	2192      	movs	r1, #146	; 0x92
 8005ff0:	4807      	ldr	r0, [pc, #28]	; (8006010 <HAL_NVIC_SetPriorityGrouping+0x2c>)
 8005ff2:	f7fd f809 	bl	8003008 <assert_failed>
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ff6:	4907      	ldr	r1, [pc, #28]	; (8006014 <HAL_NVIC_SetPriorityGrouping+0x30>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005ff8:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ffc:	0224      	lsls	r4, r4, #8
 8005ffe:	4b06      	ldr	r3, [pc, #24]	; (8006018 <HAL_NVIC_SetPriorityGrouping+0x34>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006000:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006002:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006006:	4002      	ands	r2, r0
 8006008:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800600a:	431c      	orrs	r4, r3
  SCB->AIRCR =  reg_value;
 800600c:	60cc      	str	r4, [r1, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800600e:	bd10      	pop	{r4, pc}
 8006010:	080266e0 	.word	0x080266e0
 8006014:	e000ed00 	.word	0xe000ed00
 8006018:	05fa0000 	.word	0x05fa0000

0800601c <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800601c:	2a0f      	cmp	r2, #15
{ 
 800601e:	b570      	push	{r4, r5, r6, lr}
 8006020:	4616      	mov	r6, r2
 8006022:	4605      	mov	r5, r0
 8006024:	460c      	mov	r4, r1
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8006026:	d832      	bhi.n	800608e <HAL_NVIC_SetPriority+0x72>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8006028:	2c0f      	cmp	r4, #15
 800602a:	d82b      	bhi.n	8006084 <HAL_NVIC_SetPriority+0x68>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800602c:	4b1a      	ldr	r3, [pc, #104]	; (8006098 <HAL_NVIC_SetPriority+0x7c>)
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006034:	f1c3 0107 	rsb	r1, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006038:	1d1a      	adds	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800603a:	2904      	cmp	r1, #4
 800603c:	bf28      	it	cs
 800603e:	2104      	movcs	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006040:	2a06      	cmp	r2, #6
 8006042:	d917      	bls.n	8006074 <HAL_NVIC_SetPriority+0x58>
 8006044:	3b03      	subs	r3, #3
 8006046:	f04f 32ff 	mov.w	r2, #4294967295
 800604a:	409a      	lsls	r2, r3
 800604c:	ea26 0602 	bic.w	r6, r6, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006050:	f04f 32ff 	mov.w	r2, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8006054:	2d00      	cmp	r5, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006056:	fa02 f201 	lsl.w	r2, r2, r1
 800605a:	ea24 0202 	bic.w	r2, r4, r2
 800605e:	fa02 f203 	lsl.w	r2, r2, r3
 8006062:	ea42 0206 	orr.w	r2, r2, r6
 8006066:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800606a:	b2d2      	uxtb	r2, r2
  if ((int32_t)(IRQn) >= 0)
 800606c:	db05      	blt.n	800607a <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800606e:	4b0b      	ldr	r3, [pc, #44]	; (800609c <HAL_NVIC_SetPriority+0x80>)
 8006070:	555a      	strb	r2, [r3, r5]
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006072:	bd70      	pop	{r4, r5, r6, pc}
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006074:	2600      	movs	r6, #0
 8006076:	4633      	mov	r3, r6
 8006078:	e7ea      	b.n	8006050 <HAL_NVIC_SetPriority+0x34>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800607a:	f005 050f 	and.w	r5, r5, #15
 800607e:	4b08      	ldr	r3, [pc, #32]	; (80060a0 <HAL_NVIC_SetPriority+0x84>)
 8006080:	555a      	strb	r2, [r3, r5]
 8006082:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8006084:	21ab      	movs	r1, #171	; 0xab
 8006086:	4807      	ldr	r0, [pc, #28]	; (80060a4 <HAL_NVIC_SetPriority+0x88>)
 8006088:	f7fc ffbe 	bl	8003008 <assert_failed>
 800608c:	e7ce      	b.n	800602c <HAL_NVIC_SetPriority+0x10>
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800608e:	21aa      	movs	r1, #170	; 0xaa
 8006090:	4804      	ldr	r0, [pc, #16]	; (80060a4 <HAL_NVIC_SetPriority+0x88>)
 8006092:	f7fc ffb9 	bl	8003008 <assert_failed>
 8006096:	e7c7      	b.n	8006028 <HAL_NVIC_SetPriority+0xc>
 8006098:	e000ed00 	.word	0xe000ed00
 800609c:	e000e400 	.word	0xe000e400
 80060a0:	e000ed14 	.word	0xe000ed14
 80060a4:	080266e0 	.word	0x080266e0

080060a8 <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80060a8:	2800      	cmp	r0, #0
 80060aa:	db08      	blt.n	80060be <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80060ac:	f000 011f 	and.w	r1, r0, #31
 80060b0:	2301      	movs	r3, #1
 80060b2:	0940      	lsrs	r0, r0, #5
 80060b4:	4a04      	ldr	r2, [pc, #16]	; (80060c8 <HAL_NVIC_EnableIRQ+0x20>)
 80060b6:	408b      	lsls	r3, r1
 80060b8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80060bc:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80060be:	21be      	movs	r1, #190	; 0xbe
 80060c0:	4802      	ldr	r0, [pc, #8]	; (80060cc <HAL_NVIC_EnableIRQ+0x24>)
 80060c2:	f7fc bfa1 	b.w	8003008 <assert_failed>
 80060c6:	bf00      	nop
 80060c8:	e000e100 	.word	0xe000e100
 80060cc:	080266e0 	.word	0x080266e0

080060d0 <HAL_NVIC_DisableIRQ>:
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80060d0:	2800      	cmp	r0, #0
 80060d2:	db0e      	blt.n	80060f2 <HAL_NVIC_DisableIRQ+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80060d4:	0943      	lsrs	r3, r0, #5
 80060d6:	2201      	movs	r2, #1
 80060d8:	f000 001f 	and.w	r0, r0, #31
 80060dc:	4907      	ldr	r1, [pc, #28]	; (80060fc <HAL_NVIC_DisableIRQ+0x2c>)
 80060de:	3320      	adds	r3, #32
 80060e0:	fa02 f000 	lsl.w	r0, r2, r0
 80060e4:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 80060e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80060ec:	f3bf 8f6f 	isb	sy
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80060f0:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80060f2:	21ce      	movs	r1, #206	; 0xce
 80060f4:	4802      	ldr	r0, [pc, #8]	; (8006100 <HAL_NVIC_DisableIRQ+0x30>)
 80060f6:	f7fc bf87 	b.w	8003008 <assert_failed>
 80060fa:	bf00      	nop
 80060fc:	e000e100 	.word	0xe000e100
 8006100:	080266e0 	.word	0x080266e0

08006104 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006104:	2800      	cmp	r0, #0
 8006106:	d077      	beq.n	80061f8 <HAL_CRC_Init+0xf4>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8006108:	4b3c      	ldr	r3, [pc, #240]	; (80061fc <HAL_CRC_Init+0xf8>)
 800610a:	6802      	ldr	r2, [r0, #0]
 800610c:	429a      	cmp	r2, r3
{
 800610e:	b510      	push	{r4, lr}
 8006110:	4604      	mov	r4, r0
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8006112:	d003      	beq.n	800611c <HAL_CRC_Init+0x18>
 8006114:	2170      	movs	r1, #112	; 0x70
 8006116:	483a      	ldr	r0, [pc, #232]	; (8006200 <HAL_CRC_Init+0xfc>)
 8006118:	f7fc ff76 	bl	8003008 <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800611c:	7f63      	ldrb	r3, [r4, #29]
 800611e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006122:	2b00      	cmp	r3, #0
 8006124:	d045      	beq.n	80061b2 <HAL_CRC_Init+0xae>

  hcrc->State = HAL_CRC_STATE_BUSY;

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8006126:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8006128:	2202      	movs	r2, #2
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 800612a:	2b01      	cmp	r3, #1
  hcrc->State = HAL_CRC_STATE_BUSY;
 800612c:	7762      	strb	r2, [r4, #29]
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 800612e:	d830      	bhi.n	8006192 <HAL_CRC_Init+0x8e>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006130:	2b00      	cmp	r3, #0
 8006132:	d135      	bne.n	80061a0 <HAL_CRC_Init+0x9c>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006134:	6823      	ldr	r3, [r4, #0]
 8006136:	4a33      	ldr	r2, [pc, #204]	; (8006204 <HAL_CRC_Init+0x100>)
 8006138:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800613a:	689a      	ldr	r2, [r3, #8]
 800613c:	f022 0218 	bic.w	r2, r2, #24
 8006140:	609a      	str	r2, [r3, #8]
    }
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 8006142:	7962      	ldrb	r2, [r4, #5]
 8006144:	2a01      	cmp	r2, #1
 8006146:	d904      	bls.n	8006152 <HAL_CRC_Init+0x4e>
 8006148:	2190      	movs	r1, #144	; 0x90
 800614a:	482d      	ldr	r0, [pc, #180]	; (8006200 <HAL_CRC_Init+0xfc>)
 800614c:	f7fc ff5c 	bl	8003008 <assert_failed>
 8006150:	7962      	ldrb	r2, [r4, #5]
 8006152:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006154:	2a00      	cmp	r2, #0
 8006156:	d136      	bne.n	80061c6 <HAL_CRC_Init+0xc2>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006158:	f04f 32ff 	mov.w	r2, #4294967295
 800615c:	611a      	str	r2, [r3, #16]
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 800615e:	6962      	ldr	r2, [r4, #20]
 8006160:	f032 0160 	bics.w	r1, r2, #96	; 0x60
 8006164:	d135      	bne.n	80061d2 <HAL_CRC_Init+0xce>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006166:	6899      	ldr	r1, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8006168:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800616a:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 800616e:	4311      	orrs	r1, r2
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8006170:	f030 0280 	bics.w	r2, r0, #128	; 0x80
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006174:	6099      	str	r1, [r3, #8]
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8006176:	d138      	bne.n	80061ea <HAL_CRC_Init+0xe6>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006178:	689a      	ldr	r2, [r3, #8]

  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 800617a:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800617c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8006180:	3901      	subs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006182:	4302      	orrs	r2, r0
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8006184:	2902      	cmp	r1, #2
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006186:	609a      	str	r2, [r3, #8]
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8006188:	d82a      	bhi.n	80061e0 <HAL_CRC_Init+0xdc>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800618a:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 800618c:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 800618e:	7763      	strb	r3, [r4, #29]
}
 8006190:	bd10      	pop	{r4, pc}
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8006192:	217e      	movs	r1, #126	; 0x7e
 8006194:	481a      	ldr	r0, [pc, #104]	; (8006200 <HAL_CRC_Init+0xfc>)
 8006196:	f7fc ff37 	bl	8003008 <assert_failed>
 800619a:	7923      	ldrb	r3, [r4, #4]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800619c:	2b00      	cmp	r3, #0
 800619e:	d0c9      	beq.n	8006134 <HAL_CRC_Init+0x30>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80061a0:	68e2      	ldr	r2, [r4, #12]
 80061a2:	4620      	mov	r0, r4
 80061a4:	68a1      	ldr	r1, [r4, #8]
 80061a6:	f000 f82f 	bl	8006208 <HAL_CRCEx_Polynomial_Set>
 80061aa:	2800      	cmp	r0, #0
 80061ac:	d0c9      	beq.n	8006142 <HAL_CRC_Init+0x3e>
    return HAL_ERROR;
 80061ae:	2001      	movs	r0, #1
}
 80061b0:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 80061b2:	7722      	strb	r2, [r4, #28]
    HAL_CRC_MspInit(hcrc);
 80061b4:	4620      	mov	r0, r4
 80061b6:	f7fd fe19 	bl	8003dec <HAL_CRC_MspInit>
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 80061ba:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
 80061bc:	2202      	movs	r2, #2
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 80061be:	2b01      	cmp	r3, #1
  hcrc->State = HAL_CRC_STATE_BUSY;
 80061c0:	7762      	strb	r2, [r4, #29]
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 80061c2:	d9b5      	bls.n	8006130 <HAL_CRC_Init+0x2c>
 80061c4:	e7e5      	b.n	8006192 <HAL_CRC_Init+0x8e>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80061c6:	6922      	ldr	r2, [r4, #16]
 80061c8:	611a      	str	r2, [r3, #16]
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 80061ca:	6962      	ldr	r2, [r4, #20]
 80061cc:	f032 0160 	bics.w	r1, r2, #96	; 0x60
 80061d0:	d0c9      	beq.n	8006166 <HAL_CRC_Init+0x62>
 80061d2:	219c      	movs	r1, #156	; 0x9c
 80061d4:	480a      	ldr	r0, [pc, #40]	; (8006200 <HAL_CRC_Init+0xfc>)
 80061d6:	f7fc ff17 	bl	8003008 <assert_failed>
 80061da:	6823      	ldr	r3, [r4, #0]
 80061dc:	6962      	ldr	r2, [r4, #20]
 80061de:	e7c2      	b.n	8006166 <HAL_CRC_Init+0x62>
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 80061e0:	21a5      	movs	r1, #165	; 0xa5
 80061e2:	4807      	ldr	r0, [pc, #28]	; (8006200 <HAL_CRC_Init+0xfc>)
 80061e4:	f7fc ff10 	bl	8003008 <assert_failed>
 80061e8:	e7cf      	b.n	800618a <HAL_CRC_Init+0x86>
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 80061ea:	4805      	ldr	r0, [pc, #20]	; (8006200 <HAL_CRC_Init+0xfc>)
 80061ec:	21a0      	movs	r1, #160	; 0xa0
 80061ee:	f7fc ff0b 	bl	8003008 <assert_failed>
 80061f2:	6823      	ldr	r3, [r4, #0]
 80061f4:	69a0      	ldr	r0, [r4, #24]
 80061f6:	e7bf      	b.n	8006178 <HAL_CRC_Init+0x74>
    return HAL_ERROR;
 80061f8:	2001      	movs	r0, #1
}
 80061fa:	4770      	bx	lr
 80061fc:	40023000 	.word	0x40023000
 8006200:	0802671c 	.word	0x0802671c
 8006204:	04c11db7 	.word	0x04c11db7

08006208 <HAL_CRCEx_Polynomial_Set>:
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 8006208:	f032 0318 	bics.w	r3, r2, #24
{
 800620c:	b530      	push	{r4, r5, lr}
 800620e:	4605      	mov	r5, r0
 8006210:	b083      	sub	sp, #12
 8006212:	460c      	mov	r4, r1
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 8006214:	d005      	beq.n	8006222 <HAL_CRCEx_Polynomial_Set+0x1a>
 8006216:	215f      	movs	r1, #95	; 0x5f
 8006218:	481a      	ldr	r0, [pc, #104]	; (8006284 <HAL_CRCEx_Polynomial_Set+0x7c>)
 800621a:	9201      	str	r2, [sp, #4]
 800621c:	f7fc fef4 	bl	8003008 <assert_failed>
 8006220:	9a01      	ldr	r2, [sp, #4]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006222:	231e      	movs	r3, #30
 8006224:	e002      	b.n	800622c <HAL_CRCEx_Polynomial_Set+0x24>
 8006226:	f113 33ff 	adds.w	r3, r3, #4294967295
 800622a:	d320      	bcc.n	800626e <HAL_CRCEx_Polynomial_Set+0x66>
 800622c:	fa24 f103 	lsr.w	r1, r4, r3
 8006230:	07c9      	lsls	r1, r1, #31
 8006232:	d5f8      	bpl.n	8006226 <HAL_CRCEx_Polynomial_Set+0x1e>
  {
  }

  switch (PolyLength)
 8006234:	2a18      	cmp	r2, #24
 8006236:	d81c      	bhi.n	8006272 <HAL_CRCEx_Polynomial_Set+0x6a>
 8006238:	e8df f002 	tbb	[pc, r2]
 800623c:	1b1b1b0f 	.word	0x1b1b1b0f
 8006240:	1b1b1b1b 	.word	0x1b1b1b1b
 8006244:	1b1b1b21 	.word	0x1b1b1b21
 8006248:	1b1b1b1b 	.word	0x1b1b1b1b
 800624c:	1b1b1b0d 	.word	0x1b1b1b0d
 8006250:	1b1b1b1b 	.word	0x1b1b1b1b
 8006254:	1e          	.byte	0x1e
 8006255:	00          	.byte	0x00
      {
        status =   HAL_ERROR;
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8006256:	2b07      	cmp	r3, #7
 8006258:	d80b      	bhi.n	8006272 <HAL_CRCEx_Polynomial_Set+0x6a>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800625a:	6829      	ldr	r1, [r5, #0]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800625c:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, Pol);
 800625e:	614c      	str	r4, [r1, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006260:	688b      	ldr	r3, [r1, #8]
 8006262:	f023 0318 	bic.w	r3, r3, #24
 8006266:	431a      	orrs	r2, r3
 8006268:	608a      	str	r2, [r1, #8]
  }
  /* Return function status */
  return status;
}
 800626a:	b003      	add	sp, #12
 800626c:	bd30      	pop	{r4, r5, pc}
  switch (PolyLength)
 800626e:	2a00      	cmp	r2, #0
 8006270:	d0f3      	beq.n	800625a <HAL_CRCEx_Polynomial_Set+0x52>
      status =  HAL_ERROR;
 8006272:	2001      	movs	r0, #1
}
 8006274:	b003      	add	sp, #12
 8006276:	bd30      	pop	{r4, r5, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 8006278:	2b06      	cmp	r3, #6
 800627a:	d9ee      	bls.n	800625a <HAL_CRCEx_Polynomial_Set+0x52>
 800627c:	e7f9      	b.n	8006272 <HAL_CRCEx_Polynomial_Set+0x6a>
      if (msb >= HAL_CRC_LENGTH_16B)
 800627e:	2b0f      	cmp	r3, #15
 8006280:	d9eb      	bls.n	800625a <HAL_CRCEx_Polynomial_Set+0x52>
 8006282:	e7f6      	b.n	8006272 <HAL_CRCEx_Polynomial_Set+0x6a>
 8006284:	08026754 	.word	0x08026754

08006288 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
  /* Check DAC handle */
  if(hdac == NULL)
 8006288:	b1d8      	cbz	r0, 80062c2 <HAL_DAC_Init+0x3a>
  {
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 800628a:	4b0f      	ldr	r3, [pc, #60]	; (80062c8 <HAL_DAC_Init+0x40>)
 800628c:	6802      	ldr	r2, [r0, #0]
 800628e:	429a      	cmp	r2, r3
{ 
 8006290:	b510      	push	{r4, lr}
 8006292:	4604      	mov	r4, r0
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 8006294:	d004      	beq.n	80062a0 <HAL_DAC_Init+0x18>
 8006296:	f240 1113 	movw	r1, #275	; 0x113
 800629a:	480c      	ldr	r0, [pc, #48]	; (80062cc <HAL_DAC_Init+0x44>)
 800629c:	f7fc feb4 	bl	8003008 <assert_failed>
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80062a0:	7923      	ldrb	r3, [r4, #4]
 80062a2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80062a6:	b13b      	cbz	r3, 80062b8 <HAL_DAC_Init+0x30>
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80062a8:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 80062aa:	2102      	movs	r1, #2
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80062ac:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 80062ae:	7121      	strb	r1, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 80062b0:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80062b2:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 80062b4:	7122      	strb	r2, [r4, #4]
}
 80062b6:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED; 
 80062b8:	7162      	strb	r2, [r4, #5]
    HAL_DAC_MspInit(hdac);
 80062ba:	4620      	mov	r0, r4
 80062bc:	f7fd fdac 	bl	8003e18 <HAL_DAC_MspInit>
 80062c0:	e7f2      	b.n	80062a8 <HAL_DAC_Init+0x20>
     return HAL_ERROR;
 80062c2:	2001      	movs	r0, #1
}
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop
 80062c8:	40007400 	.word	0x40007400
 80062cc:	08026790 	.word	0x08026790

080062d0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 80062d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062d4:	4699      	mov	r9, r3
  uint32_t tmpreg = 0;
    
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 80062d6:	f031 0310 	bics.w	r3, r1, #16
{
 80062da:	460f      	mov	r7, r1
 80062dc:	4604      	mov	r4, r0
 80062de:	4690      	mov	r8, r2
 80062e0:	9e08      	ldr	r6, [sp, #32]
  assert_param(IS_DAC_CHANNEL(Channel));
 80062e2:	d156      	bne.n	8006392 <HAL_DAC_Start_DMA+0xc2>
  assert_param(IS_DAC_ALIGN(Alignment));
 80062e4:	f036 0304 	bics.w	r3, r6, #4
 80062e8:	d001      	beq.n	80062ee <HAL_DAC_Start_DMA+0x1e>
 80062ea:	2e08      	cmp	r6, #8
 80062ec:	d146      	bne.n	800637c <HAL_DAC_Start_DMA+0xac>
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80062ee:	7962      	ldrb	r2, [r4, #5]
 80062f0:	2a01      	cmp	r2, #1
 80062f2:	d04b      	beq.n	800638c <HAL_DAC_Start_DMA+0xbc>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80062f4:	2302      	movs	r3, #2
  __HAL_LOCK(hdac);
 80062f6:	2201      	movs	r2, #1
 80062f8:	6825      	ldr	r5, [r4, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 80062fa:	7123      	strb	r3, [r4, #4]
  __HAL_LOCK(hdac);
 80062fc:	7162      	strb	r2, [r4, #5]

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 80062fe:	682b      	ldr	r3, [r5, #0]
  if(Channel == DAC_CHANNEL_1)
 8006300:	b9cf      	cbnz	r7, 8006336 <HAL_DAC_Start_DMA+0x66>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8006302:	68a0      	ldr	r0, [r4, #8]
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8006304:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8006308:	4a2e      	ldr	r2, [pc, #184]	; (80063c4 <HAL_DAC_Start_DMA+0xf4>)
    
    /* Case of use of channel 1 */
    switch(Alignment)
 800630a:	2e04      	cmp	r6, #4
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800630c:	492e      	ldr	r1, [pc, #184]	; (80063c8 <HAL_DAC_Start_DMA+0xf8>)
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800630e:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8006310:	4a2e      	ldr	r2, [pc, #184]	; (80063cc <HAL_DAC_Start_DMA+0xfc>)
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8006312:	6401      	str	r1, [r0, #64]	; 0x40
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8006314:	64c2      	str	r2, [r0, #76]	; 0x4c
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8006316:	602b      	str	r3, [r5, #0]
    switch(Alignment)
 8006318:	d050      	beq.n	80063bc <HAL_DAC_Start_DMA+0xec>
 800631a:	2e08      	cmp	r6, #8
 800631c:	d04b      	beq.n	80063b6 <HAL_DAC_Start_DMA+0xe6>
 800631e:	2e00      	cmp	r6, #0
 8006320:	d03d      	beq.n	800639e <HAL_DAC_Start_DMA+0xce>
        break;
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 8006322:	2200      	movs	r2, #0
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8006324:	682e      	ldr	r6, [r5, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8006326:	464b      	mov	r3, r9
 8006328:	4641      	mov	r1, r8
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800632a:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
 800632e:	602e      	str	r6, [r5, #0]
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8006330:	f000 fbda 	bl	8006ae8 <HAL_DMA_Start_IT>
 8006334:	e017      	b.n	8006366 <HAL_DAC_Start_DMA+0x96>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8006336:	68e0      	ldr	r0, [r4, #12]
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 8006338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800633c:	4a24      	ldr	r2, [pc, #144]	; (80063d0 <HAL_DAC_Start_DMA+0x100>)
    switch(Alignment)
 800633e:	2e04      	cmp	r6, #4
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8006340:	4924      	ldr	r1, [pc, #144]	; (80063d4 <HAL_DAC_Start_DMA+0x104>)
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8006342:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8006344:	4a24      	ldr	r2, [pc, #144]	; (80063d8 <HAL_DAC_Start_DMA+0x108>)
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8006346:	6401      	str	r1, [r0, #64]	; 0x40
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8006348:	64c2      	str	r2, [r0, #76]	; 0x4c
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 800634a:	602b      	str	r3, [r5, #0]
    switch(Alignment)
 800634c:	d030      	beq.n	80063b0 <HAL_DAC_Start_DMA+0xe0>
 800634e:	2e08      	cmp	r6, #8
 8006350:	d02b      	beq.n	80063aa <HAL_DAC_Start_DMA+0xda>
 8006352:	b33e      	cbz	r6, 80063a4 <HAL_DAC_Start_DMA+0xd4>
  if(Channel == DAC_CHANNEL_1)
 8006354:	2200      	movs	r2, #0
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006356:	682e      	ldr	r6, [r5, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8006358:	464b      	mov	r3, r9
 800635a:	4641      	mov	r1, r8
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800635c:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8006360:	602e      	str	r6, [r5, #0]
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8006362:	f000 fbc1 	bl	8006ae8 <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8006366:	6822      	ldr	r2, [r4, #0]
 8006368:	2101      	movs	r1, #1
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800636a:	2300      	movs	r3, #0
  __HAL_DAC_ENABLE(hdac, Channel);
 800636c:	6815      	ldr	r5, [r2, #0]
 800636e:	40b9      	lsls	r1, r7
  
  /* Return function status */
  return HAL_OK;
 8006370:	4618      	mov	r0, r3
  __HAL_DAC_ENABLE(hdac, Channel);
 8006372:	4329      	orrs	r1, r5
 8006374:	6011      	str	r1, [r2, #0]
  __HAL_UNLOCK(hdac);
 8006376:	7163      	strb	r3, [r4, #5]
}
 8006378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_DAC_ALIGN(Alignment));
 800637c:	f240 210e 	movw	r1, #526	; 0x20e
 8006380:	4816      	ldr	r0, [pc, #88]	; (80063dc <HAL_DAC_Start_DMA+0x10c>)
 8006382:	f7fc fe41 	bl	8003008 <assert_failed>
  __HAL_LOCK(hdac);
 8006386:	7962      	ldrb	r2, [r4, #5]
 8006388:	2a01      	cmp	r2, #1
 800638a:	d1b3      	bne.n	80062f4 <HAL_DAC_Start_DMA+0x24>
 800638c:	2002      	movs	r0, #2
}
 800638e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 8006392:	f240 210d 	movw	r1, #525	; 0x20d
 8006396:	4811      	ldr	r0, [pc, #68]	; (80063dc <HAL_DAC_Start_DMA+0x10c>)
 8006398:	f7fc fe36 	bl	8003008 <assert_failed>
 800639c:	e7a2      	b.n	80062e4 <HAL_DAC_Start_DMA+0x14>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800639e:	f105 0208 	add.w	r2, r5, #8
        break;
 80063a2:	e7bf      	b.n	8006324 <HAL_DAC_Start_DMA+0x54>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80063a4:	f105 0214 	add.w	r2, r5, #20
        break;
 80063a8:	e7d5      	b.n	8006356 <HAL_DAC_Start_DMA+0x86>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80063aa:	f105 021c 	add.w	r2, r5, #28
        break;
 80063ae:	e7d2      	b.n	8006356 <HAL_DAC_Start_DMA+0x86>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80063b0:	f105 0218 	add.w	r2, r5, #24
        break;
 80063b4:	e7cf      	b.n	8006356 <HAL_DAC_Start_DMA+0x86>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80063b6:	f105 0210 	add.w	r2, r5, #16
        break;
 80063ba:	e7b3      	b.n	8006324 <HAL_DAC_Start_DMA+0x54>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80063bc:	f105 020c 	add.w	r2, r5, #12
        break;
 80063c0:	e7b0      	b.n	8006324 <HAL_DAC_Start_DMA+0x54>
 80063c2:	bf00      	nop
 80063c4:	08006455 	.word	0x08006455
 80063c8:	08006469 	.word	0x08006469
 80063cc:	08006479 	.word	0x08006479
 80063d0:	080065c1 	.word	0x080065c1
 80063d4:	080065d1 	.word	0x080065d1
 80063d8:	080065dd 	.word	0x080065dd
 80063dc:	08026790 	.word	0x08026790

080063e0 <HAL_DAC_Stop_DMA>:
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 80063e0:	f031 0310 	bics.w	r3, r1, #16
{
 80063e4:	b570      	push	{r4, r5, r6, lr}
 80063e6:	460c      	mov	r4, r1
 80063e8:	4605      	mov	r5, r0
  assert_param(IS_DAC_CHANNEL(Channel));
 80063ea:	d116      	bne.n	800641a <HAL_DAC_Stop_DMA+0x3a>
  
  /* Disable the selected DAC channel DMA request */
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 80063ec:	6803      	ldr	r3, [r0, #0]
 80063ee:	f44f 5680 	mov.w	r6, #4096	; 0x1000
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80063f2:	2201      	movs	r2, #1
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 80063f4:	6818      	ldr	r0, [r3, #0]
 80063f6:	408e      	lsls	r6, r1
  __HAL_DAC_DISABLE(hdac, Channel);
 80063f8:	fa02 f101 	lsl.w	r1, r2, r1
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 80063fc:	ea20 0006 	bic.w	r0, r0, r6
 8006400:	6018      	str	r0, [r3, #0]
  __HAL_DAC_DISABLE(hdac, Channel);
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	ea22 0201 	bic.w	r2, r2, r1
 8006408:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA Channel */
  /* Channel1 is used */
  if(Channel == DAC_CHANNEL_1)
 800640a:	b9cc      	cbnz	r4, 8006440 <HAL_DAC_Stop_DMA+0x60>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 800640c:	68a8      	ldr	r0, [r5, #8]
 800640e:	f000 fbc5 	bl	8006b9c <HAL_DMA_Abort>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
  }

  /* Check if DMA Channel effectively disabled */
  if(status != HAL_OK)
 8006412:	b9d0      	cbnz	r0, 800644a <HAL_DAC_Stop_DMA+0x6a>
    hdac->State = HAL_DAC_STATE_ERROR;      
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8006414:	2301      	movs	r3, #1
 8006416:	712b      	strb	r3, [r5, #4]
  }

  /* Return function status */
  return status;
}
 8006418:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 800641a:	f44f 7121 	mov.w	r1, #644	; 0x284
 800641e:	480c      	ldr	r0, [pc, #48]	; (8006450 <HAL_DAC_Stop_DMA+0x70>)
 8006420:	f7fc fdf2 	bl	8003008 <assert_failed>
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8006424:	682b      	ldr	r3, [r5, #0]
 8006426:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  __HAL_DAC_DISABLE(hdac, Channel);
 800642a:	2201      	movs	r2, #1
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 800642c:	6819      	ldr	r1, [r3, #0]
 800642e:	40a0      	lsls	r0, r4
  __HAL_DAC_DISABLE(hdac, Channel);
 8006430:	40a2      	lsls	r2, r4
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8006432:	ea21 0100 	bic.w	r1, r1, r0
 8006436:	6019      	str	r1, [r3, #0]
  __HAL_DAC_DISABLE(hdac, Channel);
 8006438:	681c      	ldr	r4, [r3, #0]
 800643a:	ea24 0402 	bic.w	r4, r4, r2
 800643e:	601c      	str	r4, [r3, #0]
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
 8006440:	68e8      	ldr	r0, [r5, #12]
 8006442:	f000 fbab 	bl	8006b9c <HAL_DMA_Abort>
  if(status != HAL_OK)
 8006446:	2800      	cmp	r0, #0
 8006448:	d0e4      	beq.n	8006414 <HAL_DAC_Stop_DMA+0x34>
    hdac->State = HAL_DAC_STATE_ERROR;      
 800644a:	2304      	movs	r3, #4
 800644c:	712b      	strb	r3, [r5, #4]
}
 800644e:	bd70      	pop	{r4, r5, r6, pc}
 8006450:	08026790 	.word	0x08026790

08006454 <DAC_DMAConvCpltCh1>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8006454:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006456:	6b84      	ldr	r4, [r0, #56]	; 0x38
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8006458:	4620      	mov	r0, r4
 800645a:	f7fb fd3d 	bl	8001ed8 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 800645e:	2301      	movs	r3, #1
 8006460:	7123      	strb	r3, [r4, #4]
}
 8006462:	bd10      	pop	{r4, pc}

08006464 <HAL_DAC_ConvHalfCpltCallbackCh1>:
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop

08006468 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8006468:	b508      	push	{r3, lr}
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 800646a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800646c:	f7ff fffa 	bl	8006464 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8006470:	bd08      	pop	{r3, pc}
 8006472:	bf00      	nop

08006474 <HAL_DAC_ErrorCallbackCh1>:
 8006474:	4770      	bx	lr
 8006476:	bf00      	nop

08006478 <DAC_DMAErrorCh1>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8006478:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800647a:	6b84      	ldr	r4, [r0, #56]	; 0x38
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800647c:	6923      	ldr	r3, [r4, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 800647e:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006480:	f043 0304 	orr.w	r3, r3, #4
 8006484:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8006486:	f7ff fff5 	bl	8006474 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 800648a:	2301      	movs	r3, #1
 800648c:	7123      	strb	r3, [r4, #4]
}
 800648e:	bd10      	pop	{r4, pc}

08006490 <HAL_DAC_DMAUnderrunCallbackCh1>:
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop

08006494 <HAL_DAC_IRQHandler>:
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8006494:	6803      	ldr	r3, [r0, #0]
 8006496:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006498:	0491      	lsls	r1, r2, #18
{
 800649a:	b510      	push	{r4, lr}
 800649c:	4604      	mov	r4, r0
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800649e:	d415      	bmi.n	80064cc <HAL_DAC_IRQHandler+0x38>
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80064a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064a2:	0092      	lsls	r2, r2, #2
 80064a4:	d400      	bmi.n	80064a8 <HAL_DAC_IRQHandler+0x14>
}
 80064a6:	bd10      	pop	{r4, pc}
    hdac->State = HAL_DAC_STATE_ERROR;
 80064a8:	2204      	movs	r2, #4
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 80064aa:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80064ae:	4620      	mov	r0, r4
    hdac->State = HAL_DAC_STATE_ERROR;
 80064b0:	7122      	strb	r2, [r4, #4]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 80064b2:	6922      	ldr	r2, [r4, #16]
 80064b4:	f042 0202 	orr.w	r2, r2, #2
 80064b8:	6122      	str	r2, [r4, #16]
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 80064ba:	6359      	str	r1, [r3, #52]	; 0x34
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
}
 80064c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 80064c6:	601a      	str	r2, [r3, #0]
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80064c8:	f000 b878 	b.w	80065bc <HAL_DACEx_DMAUnderrunCallbackCh2>
    hdac->State = HAL_DAC_STATE_ERROR;
 80064cc:	2204      	movs	r2, #4
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 80064ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    hdac->State = HAL_DAC_STATE_ERROR;
 80064d2:	7102      	strb	r2, [r0, #4]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 80064d4:	6902      	ldr	r2, [r0, #16]
 80064d6:	f042 0201 	orr.w	r2, r2, #1
 80064da:	6102      	str	r2, [r0, #16]
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 80064dc:	6359      	str	r1, [r3, #52]	; 0x34
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80064e4:	601a      	str	r2, [r3, #0]
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80064e6:	f7ff ffd3 	bl	8006490 <HAL_DAC_DMAUnderrunCallbackCh1>
 80064ea:	6823      	ldr	r3, [r4, #0]
 80064ec:	e7d8      	b.n	80064a0 <HAL_DAC_IRQHandler+0xc>
 80064ee:	bf00      	nop

080064f0 <HAL_DAC_ConfigChannel>:
{
 80064f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064f2:	460e      	mov	r6, r1
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 80064f4:	6809      	ldr	r1, [r1, #0]
{
 80064f6:	4604      	mov	r4, r0
 80064f8:	4615      	mov	r5, r2
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 80064fa:	f031 0304 	bics.w	r3, r1, #4
 80064fe:	f021 0008 	bic.w	r0, r1, #8
 8006502:	f021 0210 	bic.w	r2, r1, #16
 8006506:	bf14      	ite	ne
 8006508:	2301      	movne	r3, #1
 800650a:	2300      	moveq	r3, #0
 800650c:	2824      	cmp	r0, #36	; 0x24
 800650e:	bf0c      	ite	eq
 8006510:	2300      	moveq	r3, #0
 8006512:	f003 0301 	andne.w	r3, r3, #1
 8006516:	293c      	cmp	r1, #60	; 0x3c
 8006518:	bf0c      	ite	eq
 800651a:	2300      	moveq	r3, #0
 800651c:	f003 0301 	andne.w	r3, r3, #1
 8006520:	2a0c      	cmp	r2, #12
 8006522:	bf0c      	ite	eq
 8006524:	2300      	moveq	r3, #0
 8006526:	f003 0301 	andne.w	r3, r3, #1
 800652a:	b11b      	cbz	r3, 8006534 <HAL_DAC_ConfigChannel+0x44>
 800652c:	f021 0120 	bic.w	r1, r1, #32
 8006530:	2914      	cmp	r1, #20
 8006532:	d135      	bne.n	80065a0 <HAL_DAC_ConfigChannel+0xb0>
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 8006534:	6873      	ldr	r3, [r6, #4]
 8006536:	f033 0302 	bics.w	r3, r3, #2
 800653a:	d12b      	bne.n	8006594 <HAL_DAC_ConfigChannel+0xa4>
  assert_param(IS_DAC_CHANNEL(Channel));
 800653c:	f035 0310 	bics.w	r3, r5, #16
 8006540:	d11e      	bne.n	8006580 <HAL_DAC_ConfigChannel+0x90>
  __HAL_LOCK(hdac);
 8006542:	7963      	ldrb	r3, [r4, #5]
 8006544:	2b01      	cmp	r3, #1
 8006546:	d023      	beq.n	8006590 <HAL_DAC_ConfigChannel+0xa0>
  tmpreg1 = hdac->Instance->CR;
 8006548:	6821      	ldr	r1, [r4, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 800654a:	2702      	movs	r7, #2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800654c:	f640 70fe 	movw	r0, #4094	; 0xffe
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8006550:	e9d6 3200 	ldrd	r3, r2, [r6]
  hdac->State = HAL_DAC_STATE_BUSY;
 8006554:	7127      	strb	r7, [r4, #4]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8006556:	fa00 f605 	lsl.w	r6, r0, r5
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800655a:	4313      	orrs	r3, r2
  tmpreg1 = hdac->Instance->CR;
 800655c:	6808      	ldr	r0, [r1, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800655e:	22c0      	movs	r2, #192	; 0xc0
  hdac->State = HAL_DAC_STATE_READY;
 8006560:	2701      	movs	r7, #1
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8006562:	ea20 0006 	bic.w	r0, r0, r6
  tmpreg1 |= tmpreg2 << Channel;
 8006566:	40ab      	lsls	r3, r5
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8006568:	40aa      	lsls	r2, r5
  __HAL_UNLOCK(hdac);
 800656a:	2600      	movs	r6, #0
  tmpreg1 |= tmpreg2 << Channel;
 800656c:	4303      	orrs	r3, r0
  return HAL_OK;
 800656e:	4630      	mov	r0, r6
  hdac->Instance->CR = tmpreg1;
 8006570:	600b      	str	r3, [r1, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8006572:	680d      	ldr	r5, [r1, #0]
 8006574:	ea25 0502 	bic.w	r5, r5, r2
 8006578:	600d      	str	r5, [r1, #0]
  hdac->State = HAL_DAC_STATE_READY;
 800657a:	7127      	strb	r7, [r4, #4]
  __HAL_UNLOCK(hdac);
 800657c:	7166      	strb	r6, [r4, #5]
}
 800657e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 8006580:	f44f 7157 	mov.w	r1, #860	; 0x35c
 8006584:	4809      	ldr	r0, [pc, #36]	; (80065ac <HAL_DAC_ConfigChannel+0xbc>)
 8006586:	f7fc fd3f 	bl	8003008 <assert_failed>
  __HAL_LOCK(hdac);
 800658a:	7963      	ldrb	r3, [r4, #5]
 800658c:	2b01      	cmp	r3, #1
 800658e:	d1db      	bne.n	8006548 <HAL_DAC_ConfigChannel+0x58>
 8006590:	2002      	movs	r0, #2
}
 8006592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 8006594:	f240 315b 	movw	r1, #859	; 0x35b
 8006598:	4804      	ldr	r0, [pc, #16]	; (80065ac <HAL_DAC_ConfigChannel+0xbc>)
 800659a:	f7fc fd35 	bl	8003008 <assert_failed>
 800659e:	e7cd      	b.n	800653c <HAL_DAC_ConfigChannel+0x4c>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 80065a0:	f240 315a 	movw	r1, #858	; 0x35a
 80065a4:	4801      	ldr	r0, [pc, #4]	; (80065ac <HAL_DAC_ConfigChannel+0xbc>)
 80065a6:	f7fc fd2f 	bl	8003008 <assert_failed>
 80065aa:	e7c3      	b.n	8006534 <HAL_DAC_ConfigChannel+0x44>
 80065ac:	08026790 	.word	0x08026790

080065b0 <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop

080065b4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop

080065b8 <HAL_DACEx_ErrorCallbackCh2>:
 80065b8:	4770      	bx	lr
 80065ba:	bf00      	nop

080065bc <HAL_DACEx_DMAUnderrunCallbackCh2>:
 80065bc:	4770      	bx	lr
 80065be:	bf00      	nop

080065c0 <DAC_DMAConvCpltCh2>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80065c0:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80065c2:	6b84      	ldr	r4, [r0, #56]	; 0x38
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 80065c4:	4620      	mov	r0, r4
 80065c6:	f7ff fff3 	bl	80065b0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 80065ca:	2301      	movs	r3, #1
 80065cc:	7123      	strb	r3, [r4, #4]
}
 80065ce:	bd10      	pop	{r4, pc}

080065d0 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80065d0:	b508      	push	{r3, lr}
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 80065d2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80065d4:	f7ff ffee 	bl	80065b4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80065d8:	bd08      	pop	{r3, pc}
 80065da:	bf00      	nop

080065dc <DAC_DMAErrorCh2>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 80065dc:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80065de:	6b84      	ldr	r4, [r0, #56]	; 0x38
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80065e0:	6923      	ldr	r3, [r4, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 80065e2:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80065e4:	f043 0304 	orr.w	r3, r3, #4
 80065e8:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 80065ea:	f7ff ffe5 	bl	80065b8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 80065ee:	2301      	movs	r3, #1
 80065f0:	7123      	strb	r3, [r4, #4]
}
 80065f2:	bd10      	pop	{r4, pc}

080065f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80065f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065f6:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 80065f8:	f7ff f8b0 	bl	800575c <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80065fc:	2c00      	cmp	r4, #0
 80065fe:	f000 812b 	beq.w	8006858 <HAL_DMA_Init+0x264>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8006602:	6822      	ldr	r2, [r4, #0]
 8006604:	4605      	mov	r5, r0
 8006606:	4bbd      	ldr	r3, [pc, #756]	; (80068fc <HAL_DMA_Init+0x308>)
 8006608:	48bd      	ldr	r0, [pc, #756]	; (8006900 <HAL_DMA_Init+0x30c>)
 800660a:	49be      	ldr	r1, [pc, #760]	; (8006904 <HAL_DMA_Init+0x310>)
 800660c:	429a      	cmp	r2, r3
 800660e:	bf18      	it	ne
 8006610:	4282      	cmpne	r2, r0
 8006612:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8006616:	bf14      	ite	ne
 8006618:	2301      	movne	r3, #1
 800661a:	2300      	moveq	r3, #0
 800661c:	428a      	cmp	r2, r1
 800661e:	bf0c      	ite	eq
 8006620:	2300      	moveq	r3, #0
 8006622:	f003 0301 	andne.w	r3, r3, #1
 8006626:	3130      	adds	r1, #48	; 0x30
 8006628:	4282      	cmp	r2, r0
 800662a:	bf0c      	ite	eq
 800662c:	2300      	moveq	r3, #0
 800662e:	f003 0301 	andne.w	r3, r3, #1
 8006632:	3030      	adds	r0, #48	; 0x30
 8006634:	428a      	cmp	r2, r1
 8006636:	bf0c      	ite	eq
 8006638:	2300      	moveq	r3, #0
 800663a:	f003 0301 	andne.w	r3, r3, #1
 800663e:	3130      	adds	r1, #48	; 0x30
 8006640:	4282      	cmp	r2, r0
 8006642:	bf0c      	ite	eq
 8006644:	2300      	moveq	r3, #0
 8006646:	f003 0301 	andne.w	r3, r3, #1
 800664a:	3030      	adds	r0, #48	; 0x30
 800664c:	428a      	cmp	r2, r1
 800664e:	bf0c      	ite	eq
 8006650:	2300      	moveq	r3, #0
 8006652:	f003 0301 	andne.w	r3, r3, #1
 8006656:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800665a:	4282      	cmp	r2, r0
 800665c:	bf0c      	ite	eq
 800665e:	2300      	moveq	r3, #0
 8006660:	f003 0301 	andne.w	r3, r3, #1
 8006664:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8006668:	428a      	cmp	r2, r1
 800666a:	bf0c      	ite	eq
 800666c:	2300      	moveq	r3, #0
 800666e:	f003 0301 	andne.w	r3, r3, #1
 8006672:	3130      	adds	r1, #48	; 0x30
 8006674:	4282      	cmp	r2, r0
 8006676:	bf0c      	ite	eq
 8006678:	2300      	moveq	r3, #0
 800667a:	f003 0301 	andne.w	r3, r3, #1
 800667e:	3030      	adds	r0, #48	; 0x30
 8006680:	428a      	cmp	r2, r1
 8006682:	bf0c      	ite	eq
 8006684:	2300      	moveq	r3, #0
 8006686:	f003 0301 	andne.w	r3, r3, #1
 800668a:	3130      	adds	r1, #48	; 0x30
 800668c:	4282      	cmp	r2, r0
 800668e:	bf0c      	ite	eq
 8006690:	2300      	moveq	r3, #0
 8006692:	f003 0301 	andne.w	r3, r3, #1
 8006696:	3030      	adds	r0, #48	; 0x30
 8006698:	428a      	cmp	r2, r1
 800669a:	bf0c      	ite	eq
 800669c:	2300      	moveq	r3, #0
 800669e:	f003 0301 	andne.w	r3, r3, #1
 80066a2:	3130      	adds	r1, #48	; 0x30
 80066a4:	4282      	cmp	r2, r0
 80066a6:	bf0c      	ite	eq
 80066a8:	2300      	moveq	r3, #0
 80066aa:	f003 0301 	andne.w	r3, r3, #1
 80066ae:	428a      	cmp	r2, r1
 80066b0:	bf0c      	ite	eq
 80066b2:	2300      	moveq	r3, #0
 80066b4:	f003 0301 	andne.w	r3, r3, #1
 80066b8:	b11b      	cbz	r3, 80066c2 <HAL_DMA_Init+0xce>
 80066ba:	4b93      	ldr	r3, [pc, #588]	; (8006908 <HAL_DMA_Init+0x314>)
 80066bc:	429a      	cmp	r2, r3
 80066be:	f040 8140 	bne.w	8006942 <HAL_DMA_Init+0x34e>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80066c2:	6863      	ldr	r3, [r4, #4]
 80066c4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80066c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066cc:	bf18      	it	ne
 80066ce:	2b00      	cmpne	r3, #0
 80066d0:	bf14      	ite	ne
 80066d2:	2201      	movne	r2, #1
 80066d4:	2200      	moveq	r2, #0
 80066d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066da:	bf0c      	ite	eq
 80066dc:	2200      	moveq	r2, #0
 80066de:	f002 0201 	andne.w	r2, r2, #1
 80066e2:	b11a      	cbz	r2, 80066ec <HAL_DMA_Init+0xf8>
 80066e4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80066e8:	f040 8130 	bne.w	800694c <HAL_DMA_Init+0x358>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80066ec:	68a3      	ldr	r3, [r4, #8]
 80066ee:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 80066f2:	d002      	beq.n	80066fa <HAL_DMA_Init+0x106>
 80066f4:	2b80      	cmp	r3, #128	; 0x80
 80066f6:	f040 80b1 	bne.w	800685c <HAL_DMA_Init+0x268>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80066fa:	68e3      	ldr	r3, [r4, #12]
 80066fc:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8006700:	f040 8091 	bne.w	8006826 <HAL_DMA_Init+0x232>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8006704:	6923      	ldr	r3, [r4, #16]
 8006706:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800670a:	f040 8082 	bne.w	8006812 <HAL_DMA_Init+0x21e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800670e:	6963      	ldr	r3, [r4, #20]
 8006710:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8006714:	d003      	beq.n	800671e <HAL_DMA_Init+0x12a>
 8006716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800671a:	f040 80a9 	bne.w	8006870 <HAL_DMA_Init+0x27c>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800671e:	69a3      	ldr	r3, [r4, #24]
 8006720:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 8006724:	d003      	beq.n	800672e <HAL_DMA_Init+0x13a>
 8006726:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800672a:	f040 80ab 	bne.w	8006884 <HAL_DMA_Init+0x290>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800672e:	69e3      	ldr	r3, [r4, #28]
 8006730:	f033 0220 	bics.w	r2, r3, #32
 8006734:	d003      	beq.n	800673e <HAL_DMA_Init+0x14a>
 8006736:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800673a:	f040 80ad 	bne.w	8006898 <HAL_DMA_Init+0x2a4>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800673e:	6a23      	ldr	r3, [r4, #32]
 8006740:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8006744:	f040 80b1 	bne.w	80068aa <HAL_DMA_Init+0x2b6>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8006748:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800674a:	f033 0204 	bics.w	r2, r3, #4
 800674e:	d174      	bne.n	800683a <HAL_DMA_Init+0x246>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8006750:	2b00      	cmp	r3, #0
 8006752:	d14c      	bne.n	80067ee <HAL_DMA_Init+0x1fa>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006754:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006756:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8006758:	2100      	movs	r1, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 800675a:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 800675e:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 8006760:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8006764:	f022 0201 	bic.w	r2, r2, #1
 8006768:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800676a:	e005      	b.n	8006778 <HAL_DMA_Init+0x184>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800676c:	f7fe fff6 	bl	800575c <HAL_GetTick>
 8006770:	1b40      	subs	r0, r0, r5
 8006772:	2805      	cmp	r0, #5
 8006774:	d869      	bhi.n	800684a <HAL_DMA_Init+0x256>
 8006776:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	07d1      	lsls	r1, r2, #31
 800677c:	d4f6      	bmi.n	800676c <HAL_DMA_Init+0x178>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800677e:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8006782:	68e1      	ldr	r1, [r4, #12]
 8006784:	4302      	orrs	r2, r0
  tmp = hdma->Instance->CR;
 8006786:	681f      	ldr	r7, [r3, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006788:	e9d4 0504 	ldrd	r0, r5, [r4, #16]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800678c:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800678e:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;
 8006790:	6a20      	ldr	r0, [r4, #32]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006792:	e9d4 6106 	ldrd	r6, r1, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006796:	432a      	orrs	r2, r5
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006798:	4d5c      	ldr	r5, [pc, #368]	; (800690c <HAL_DMA_Init+0x318>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800679a:	4332      	orrs	r2, r6
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800679c:	403d      	ands	r5, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800679e:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80067a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hdma->Init.Mode                | hdma->Init.Priority;
 80067a2:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80067a4:	2904      	cmp	r1, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80067a6:	ea42 0205 	orr.w	r2, r2, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80067aa:	f000 8083 	beq.w	80068b4 <HAL_DMA_Init+0x2c0>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80067ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80067b0:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80067b2:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80067b6:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80067b8:	b2da      	uxtb	r2, r3
 80067ba:	4d55      	ldr	r5, [pc, #340]	; (8006910 <HAL_DMA_Init+0x31c>)
  hdma->Instance->FCR = tmp;
 80067bc:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80067be:	3a10      	subs	r2, #16
 80067c0:	4954      	ldr	r1, [pc, #336]	; (8006914 <HAL_DMA_Init+0x320>)
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80067c2:	4855      	ldr	r0, [pc, #340]	; (8006918 <HAL_DMA_Init+0x324>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80067c4:	fba5 5202 	umull	r5, r2, r5, r2
 80067c8:	4019      	ands	r1, r3
  hdma->State = HAL_DMA_STATE_READY;
 80067ca:	2501      	movs	r5, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80067cc:	0913      	lsrs	r3, r2, #4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80067ce:	2200      	movs	r2, #0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80067d0:	5cc0      	ldrb	r0, [r0, r3]
  
  if (stream_number > 3U)
 80067d2:	2b03      	cmp	r3, #3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80067d4:	f04f 033f 	mov.w	r3, #63	; 0x3f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80067d8:	bf88      	it	hi
 80067da:	3104      	addhi	r1, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80067dc:	65e0      	str	r0, [r4, #92]	; 0x5c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80067de:	4083      	lsls	r3, r0
  return HAL_OK;
 80067e0:	4610      	mov	r0, r2
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80067e2:	65a1      	str	r1, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80067e4:	608b      	str	r3, [r1, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80067e6:	6562      	str	r2, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80067e8:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 80067ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 80067ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80067f0:	2b03      	cmp	r3, #3
 80067f2:	f200 8095 	bhi.w	8006920 <HAL_DMA_Init+0x32c>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 80067f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80067f8:	f033 73c0 	bics.w	r3, r3, #25165824	; 0x1800000
 80067fc:	f040 8095 	bne.w	800692a <HAL_DMA_Init+0x336>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8006800:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006802:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 8006806:	d0a5      	beq.n	8006754 <HAL_DMA_Init+0x160>
 8006808:	21c9      	movs	r1, #201	; 0xc9
 800680a:	4844      	ldr	r0, [pc, #272]	; (800691c <HAL_DMA_Init+0x328>)
 800680c:	f7fc fbfc 	bl	8003008 <assert_failed>
 8006810:	e7a0      	b.n	8006754 <HAL_DMA_Init+0x160>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8006812:	21bd      	movs	r1, #189	; 0xbd
 8006814:	4841      	ldr	r0, [pc, #260]	; (800691c <HAL_DMA_Init+0x328>)
 8006816:	f7fc fbf7 	bl	8003008 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800681a:	6963      	ldr	r3, [r4, #20]
 800681c:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8006820:	f47f af79 	bne.w	8006716 <HAL_DMA_Init+0x122>
 8006824:	e77b      	b.n	800671e <HAL_DMA_Init+0x12a>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8006826:	21bc      	movs	r1, #188	; 0xbc
 8006828:	483c      	ldr	r0, [pc, #240]	; (800691c <HAL_DMA_Init+0x328>)
 800682a:	f7fc fbed 	bl	8003008 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800682e:	6923      	ldr	r3, [r4, #16]
 8006830:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8006834:	f43f af6b 	beq.w	800670e <HAL_DMA_Init+0x11a>
 8006838:	e7eb      	b.n	8006812 <HAL_DMA_Init+0x21e>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800683a:	21c2      	movs	r1, #194	; 0xc2
 800683c:	4837      	ldr	r0, [pc, #220]	; (800691c <HAL_DMA_Init+0x328>)
 800683e:	f7fc fbe3 	bl	8003008 <assert_failed>
 8006842:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8006844:	2b00      	cmp	r3, #0
 8006846:	d085      	beq.n	8006754 <HAL_DMA_Init+0x160>
 8006848:	e7d1      	b.n	80067ee <HAL_DMA_Init+0x1fa>
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800684a:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800684c:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 800684e:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006850:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006852:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8006856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8006858:	2001      	movs	r0, #1
}
 800685a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800685c:	21bb      	movs	r1, #187	; 0xbb
 800685e:	482f      	ldr	r0, [pc, #188]	; (800691c <HAL_DMA_Init+0x328>)
 8006860:	f7fc fbd2 	bl	8003008 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8006864:	68e3      	ldr	r3, [r4, #12]
 8006866:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800686a:	f43f af4b 	beq.w	8006704 <HAL_DMA_Init+0x110>
 800686e:	e7da      	b.n	8006826 <HAL_DMA_Init+0x232>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8006870:	21be      	movs	r1, #190	; 0xbe
 8006872:	482a      	ldr	r0, [pc, #168]	; (800691c <HAL_DMA_Init+0x328>)
 8006874:	f7fc fbc8 	bl	8003008 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8006878:	69a3      	ldr	r3, [r4, #24]
 800687a:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 800687e:	f47f af52 	bne.w	8006726 <HAL_DMA_Init+0x132>
 8006882:	e754      	b.n	800672e <HAL_DMA_Init+0x13a>
 8006884:	21bf      	movs	r1, #191	; 0xbf
 8006886:	4825      	ldr	r0, [pc, #148]	; (800691c <HAL_DMA_Init+0x328>)
 8006888:	f7fc fbbe 	bl	8003008 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800688c:	69e3      	ldr	r3, [r4, #28]
 800688e:	f033 0220 	bics.w	r2, r3, #32
 8006892:	f47f af50 	bne.w	8006736 <HAL_DMA_Init+0x142>
 8006896:	e752      	b.n	800673e <HAL_DMA_Init+0x14a>
 8006898:	21c0      	movs	r1, #192	; 0xc0
 800689a:	4820      	ldr	r0, [pc, #128]	; (800691c <HAL_DMA_Init+0x328>)
 800689c:	f7fc fbb4 	bl	8003008 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80068a0:	6a23      	ldr	r3, [r4, #32]
 80068a2:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 80068a6:	f43f af4f 	beq.w	8006748 <HAL_DMA_Init+0x154>
 80068aa:	21c1      	movs	r1, #193	; 0xc1
 80068ac:	481b      	ldr	r0, [pc, #108]	; (800691c <HAL_DMA_Init+0x328>)
 80068ae:	f7fc fbab 	bl	8003008 <assert_failed>
 80068b2:	e749      	b.n	8006748 <HAL_DMA_Init+0x154>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80068b4:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80068b8:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80068ba:	ea45 0001 	orr.w	r0, r5, r1
    tmp |= hdma->Init.FIFOThreshold;
 80068be:	f047 0104 	orr.w	r1, r7, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80068c2:	4302      	orrs	r2, r0
  hdma->Instance->CR = tmp;  
 80068c4:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80068c6:	695a      	ldr	r2, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80068c8:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 80068cc:	4311      	orrs	r1, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80068ce:	2d00      	cmp	r5, #0
 80068d0:	f43f af72 	beq.w	80067b8 <HAL_DMA_Init+0x1c4>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80068d4:	b376      	cbz	r6, 8006934 <HAL_DMA_Init+0x340>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80068d6:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 80068da:	d041      	beq.n	8006960 <HAL_DMA_Init+0x36c>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80068dc:	2f02      	cmp	r7, #2
 80068de:	d905      	bls.n	80068ec <HAL_DMA_Init+0x2f8>
 80068e0:	2f03      	cmp	r7, #3
 80068e2:	f47f af69 	bne.w	80067b8 <HAL_DMA_Init+0x1c4>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068e6:	01ea      	lsls	r2, r5, #7
 80068e8:	f57f af66 	bpl.w	80067b8 <HAL_DMA_Init+0x1c4>
        hdma->State = HAL_DMA_STATE_READY;
 80068ec:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80068ee:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 80068f0:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80068f2:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80068f4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80068f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068fa:	bf00      	nop
 80068fc:	40026010 	.word	0x40026010
 8006900:	40026028 	.word	0x40026028
 8006904:	40026040 	.word	0x40026040
 8006908:	400264b8 	.word	0x400264b8
 800690c:	e010803f 	.word	0xe010803f
 8006910:	aaaaaaab 	.word	0xaaaaaaab
 8006914:	fffffc00 	.word	0xfffffc00
 8006918:	08026800 	.word	0x08026800
 800691c:	080267c8 	.word	0x080267c8
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8006920:	21c7      	movs	r1, #199	; 0xc7
 8006922:	4816      	ldr	r0, [pc, #88]	; (800697c <HAL_DMA_Init+0x388>)
 8006924:	f7fc fb70 	bl	8003008 <assert_failed>
 8006928:	e765      	b.n	80067f6 <HAL_DMA_Init+0x202>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 800692a:	21c8      	movs	r1, #200	; 0xc8
 800692c:	4813      	ldr	r0, [pc, #76]	; (800697c <HAL_DMA_Init+0x388>)
 800692e:	f7fc fb6b 	bl	8003008 <assert_failed>
 8006932:	e765      	b.n	8006800 <HAL_DMA_Init+0x20c>
    switch (tmp)
 8006934:	2f01      	cmp	r7, #1
 8006936:	d00e      	beq.n	8006956 <HAL_DMA_Init+0x362>
 8006938:	d3d5      	bcc.n	80068e6 <HAL_DMA_Init+0x2f2>
 800693a:	2f02      	cmp	r7, #2
 800693c:	f47f af3c 	bne.w	80067b8 <HAL_DMA_Init+0x1c4>
 8006940:	e7d1      	b.n	80068e6 <HAL_DMA_Init+0x2f2>
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8006942:	21b9      	movs	r1, #185	; 0xb9
 8006944:	480d      	ldr	r0, [pc, #52]	; (800697c <HAL_DMA_Init+0x388>)
 8006946:	f7fc fb5f 	bl	8003008 <assert_failed>
 800694a:	e6ba      	b.n	80066c2 <HAL_DMA_Init+0xce>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 800694c:	21ba      	movs	r1, #186	; 0xba
 800694e:	480b      	ldr	r0, [pc, #44]	; (800697c <HAL_DMA_Init+0x388>)
 8006950:	f7fc fb5a 	bl	8003008 <assert_failed>
 8006954:	e6ca      	b.n	80066ec <HAL_DMA_Init+0xf8>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006956:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 800695a:	f47f af2d 	bne.w	80067b8 <HAL_DMA_Init+0x1c4>
 800695e:	e7c5      	b.n	80068ec <HAL_DMA_Init+0x2f8>
    switch (tmp)
 8006960:	2f03      	cmp	r7, #3
 8006962:	f63f af29 	bhi.w	80067b8 <HAL_DMA_Init+0x1c4>
 8006966:	a201      	add	r2, pc, #4	; (adr r2, 800696c <HAL_DMA_Init+0x378>)
 8006968:	f852 f027 	ldr.w	pc, [r2, r7, lsl #2]
 800696c:	080068ed 	.word	0x080068ed
 8006970:	080068e7 	.word	0x080068e7
 8006974:	080068ed 	.word	0x080068ed
 8006978:	08006957 	.word	0x08006957
 800697c:	080267c8 	.word	0x080267c8

08006980 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 8006980:	2800      	cmp	r0, #0
 8006982:	f000 8094 	beq.w	8006aae <HAL_DMA_DeInit+0x12e>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8006986:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800698a:	b2db      	uxtb	r3, r3
 800698c:	2b02      	cmp	r3, #2
 800698e:	f000 8090 	beq.w	8006ab2 <HAL_DMA_DeInit+0x132>
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8006992:	6802      	ldr	r2, [r0, #0]
 8006994:	4b4b      	ldr	r3, [pc, #300]	; (8006ac4 <HAL_DMA_DeInit+0x144>)
 8006996:	494c      	ldr	r1, [pc, #304]	; (8006ac8 <HAL_DMA_DeInit+0x148>)
{
 8006998:	b570      	push	{r4, r5, r6, lr}
 800699a:	4604      	mov	r4, r0
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 800699c:	484b      	ldr	r0, [pc, #300]	; (8006acc <HAL_DMA_DeInit+0x14c>)
 800699e:	4d4c      	ldr	r5, [pc, #304]	; (8006ad0 <HAL_DMA_DeInit+0x150>)
 80069a0:	429a      	cmp	r2, r3
 80069a2:	bf18      	it	ne
 80069a4:	4282      	cmpne	r2, r0
 80069a6:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80069aa:	bf14      	ite	ne
 80069ac:	2301      	movne	r3, #1
 80069ae:	2300      	moveq	r3, #0
 80069b0:	428a      	cmp	r2, r1
 80069b2:	bf0c      	ite	eq
 80069b4:	2300      	moveq	r3, #0
 80069b6:	f003 0301 	andne.w	r3, r3, #1
 80069ba:	3148      	adds	r1, #72	; 0x48
 80069bc:	42aa      	cmp	r2, r5
 80069be:	bf0c      	ite	eq
 80069c0:	2300      	moveq	r3, #0
 80069c2:	f003 0301 	andne.w	r3, r3, #1
 80069c6:	3548      	adds	r5, #72	; 0x48
 80069c8:	4282      	cmp	r2, r0
 80069ca:	bf0c      	ite	eq
 80069cc:	2300      	moveq	r3, #0
 80069ce:	f003 0301 	andne.w	r3, r3, #1
 80069d2:	3048      	adds	r0, #72	; 0x48
 80069d4:	428a      	cmp	r2, r1
 80069d6:	bf0c      	ite	eq
 80069d8:	2300      	moveq	r3, #0
 80069da:	f003 0301 	andne.w	r3, r3, #1
 80069de:	f501 7162 	add.w	r1, r1, #904	; 0x388
 80069e2:	42aa      	cmp	r2, r5
 80069e4:	bf0c      	ite	eq
 80069e6:	2300      	moveq	r3, #0
 80069e8:	f003 0301 	andne.w	r3, r3, #1
 80069ec:	f505 7562 	add.w	r5, r5, #904	; 0x388
 80069f0:	4282      	cmp	r2, r0
 80069f2:	bf0c      	ite	eq
 80069f4:	2300      	moveq	r3, #0
 80069f6:	f003 0301 	andne.w	r3, r3, #1
 80069fa:	f500 7062 	add.w	r0, r0, #904	; 0x388
 80069fe:	428a      	cmp	r2, r1
 8006a00:	bf0c      	ite	eq
 8006a02:	2300      	moveq	r3, #0
 8006a04:	f003 0301 	andne.w	r3, r3, #1
 8006a08:	3148      	adds	r1, #72	; 0x48
 8006a0a:	42aa      	cmp	r2, r5
 8006a0c:	bf0c      	ite	eq
 8006a0e:	2300      	moveq	r3, #0
 8006a10:	f003 0301 	andne.w	r3, r3, #1
 8006a14:	3548      	adds	r5, #72	; 0x48
 8006a16:	4282      	cmp	r2, r0
 8006a18:	bf0c      	ite	eq
 8006a1a:	2300      	moveq	r3, #0
 8006a1c:	f003 0301 	andne.w	r3, r3, #1
 8006a20:	3048      	adds	r0, #72	; 0x48
 8006a22:	428a      	cmp	r2, r1
 8006a24:	bf0c      	ite	eq
 8006a26:	2300      	moveq	r3, #0
 8006a28:	f003 0301 	andne.w	r3, r3, #1
 8006a2c:	3148      	adds	r1, #72	; 0x48
 8006a2e:	42aa      	cmp	r2, r5
 8006a30:	bf0c      	ite	eq
 8006a32:	2300      	moveq	r3, #0
 8006a34:	f003 0301 	andne.w	r3, r3, #1
 8006a38:	4282      	cmp	r2, r0
 8006a3a:	bf0c      	ite	eq
 8006a3c:	2300      	moveq	r3, #0
 8006a3e:	f003 0301 	andne.w	r3, r3, #1
 8006a42:	428a      	cmp	r2, r1
 8006a44:	bf0c      	ite	eq
 8006a46:	2300      	moveq	r3, #0
 8006a48:	f003 0301 	andne.w	r3, r3, #1
 8006a4c:	b113      	cbz	r3, 8006a54 <HAL_DMA_DeInit+0xd4>
 8006a4e:	4b21      	ldr	r3, [pc, #132]	; (8006ad4 <HAL_DMA_DeInit+0x154>)
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d130      	bne.n	8006ab6 <HAL_DMA_DeInit+0x136>
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006a54:	b2d3      	uxtb	r3, r2
  __HAL_DMA_DISABLE(hdma);
 8006a56:	6811      	ldr	r1, [r2, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006a58:	4d1f      	ldr	r5, [pc, #124]	; (8006ad8 <HAL_DMA_DeInit+0x158>)
  hdma->Instance->CR   = 0U;
 8006a5a:	2000      	movs	r0, #0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006a5c:	3b10      	subs	r3, #16
  __HAL_DMA_DISABLE(hdma);
 8006a5e:	f021 0101 	bic.w	r1, r1, #1
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8006a62:	2621      	movs	r6, #33	; 0x21
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006a64:	fba5 5303 	umull	r5, r3, r5, r3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006a68:	4d1c      	ldr	r5, [pc, #112]	; (8006adc <HAL_DMA_DeInit+0x15c>)
  __HAL_DMA_DISABLE(hdma);
 8006a6a:	6011      	str	r1, [r2, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006a6c:	091b      	lsrs	r3, r3, #4
 8006a6e:	491c      	ldr	r1, [pc, #112]	; (8006ae0 <HAL_DMA_DeInit+0x160>)
  hdma->Instance->CR   = 0U;
 8006a70:	6010      	str	r0, [r2, #0]
 8006a72:	4011      	ands	r1, r2
  hdma->Instance->NDTR = 0U;
 8006a74:	6050      	str	r0, [r2, #4]
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006a76:	5ced      	ldrb	r5, [r5, r3]
  if (stream_number > 3U)
 8006a78:	2b03      	cmp	r3, #3
  hdma->Instance->PAR  = 0U;
 8006a7a:	6090      	str	r0, [r2, #8]
  hdma->XferCpltCallback = NULL;
 8006a7c:	f04f 0300 	mov.w	r3, #0
  hdma->Instance->M0AR = 0U;
 8006a80:	60d0      	str	r0, [r2, #12]
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006a82:	bf88      	it	hi
 8006a84:	3104      	addhi	r1, #4
  hdma->Instance->M1AR = 0U;
 8006a86:	6110      	str	r0, [r2, #16]
  return HAL_OK;
 8006a88:	4618      	mov	r0, r3
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8006a8a:	6156      	str	r6, [r2, #20]
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a8c:	223f      	movs	r2, #63	; 0x3f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006a8e:	65e5      	str	r5, [r4, #92]	; 0x5c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a90:	40aa      	lsls	r2, r5
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006a92:	65a1      	str	r1, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a94:	608a      	str	r2, [r1, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a96:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8006a98:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8006a9c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 8006aa0:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8006aa4:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 8006aa8:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
}
 8006aac:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8006aae:	2001      	movs	r0, #1
 8006ab0:	4770      	bx	lr
    return HAL_BUSY;
 8006ab2:	4618      	mov	r0, r3
}
 8006ab4:	4770      	bx	lr
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8006ab6:	f240 1149 	movw	r1, #329	; 0x149
 8006aba:	480a      	ldr	r0, [pc, #40]	; (8006ae4 <HAL_DMA_DeInit+0x164>)
 8006abc:	f7fc faa4 	bl	8003008 <assert_failed>
 8006ac0:	6822      	ldr	r2, [r4, #0]
 8006ac2:	e7c7      	b.n	8006a54 <HAL_DMA_DeInit+0xd4>
 8006ac4:	40026010 	.word	0x40026010
 8006ac8:	40026040 	.word	0x40026040
 8006acc:	40026028 	.word	0x40026028
 8006ad0:	40026058 	.word	0x40026058
 8006ad4:	400264b8 	.word	0x400264b8
 8006ad8:	aaaaaaab 	.word	0xaaaaaaab
 8006adc:	08026800 	.word	0x08026800
 8006ae0:	fffffc00 	.word	0xfffffc00
 8006ae4:	080267c8 	.word	0x080267c8

08006ae8 <HAL_DMA_Start_IT>:
{
 8006ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aec:	461d      	mov	r5, r3
 8006aee:	460f      	mov	r7, r1
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8006af0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
{
 8006af4:	4604      	mov	r4, r0
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8006af6:	1e69      	subs	r1, r5, #1
{
 8006af8:	4690      	mov	r8, r2
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006afa:	6d86      	ldr	r6, [r0, #88]	; 0x58
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8006afc:	4299      	cmp	r1, r3
 8006afe:	d83a      	bhi.n	8006b76 <HAL_DMA_Start_IT+0x8e>
  __HAL_LOCK(hdma);
 8006b00:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d03f      	beq.n	8006b88 <HAL_DMA_Start_IT+0xa0>
 8006b08:	2201      	movs	r2, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8006b0a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8006b0e:	4293      	cmp	r3, r2
  __HAL_LOCK(hdma);
 8006b10:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8006b14:	d129      	bne.n	8006b6a <HAL_DMA_Start_IT+0x82>
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006b16:	6821      	ldr	r1, [r4, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8006b18:	2202      	movs	r2, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b1a:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8006b1c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b20:	6563      	str	r3, [r4, #84]	; 0x54
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006b22:	68a2      	ldr	r2, [r4, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006b24:	680b      	ldr	r3, [r1, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006b26:	2a40      	cmp	r2, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006b28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b2c:	600b      	str	r3, [r1, #0]
  hdma->Instance->NDTR = DataLength;
 8006b2e:	604d      	str	r5, [r1, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006b30:	d02d      	beq.n	8006b8e <HAL_DMA_Start_IT+0xa6>
    hdma->Instance->PAR = SrcAddress;
 8006b32:	608f      	str	r7, [r1, #8]
    hdma->Instance->M0AR = DstAddress;
 8006b34:	f8c1 800c 	str.w	r8, [r1, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b38:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8006b3a:	233f      	movs	r3, #63	; 0x3f
    if(hdma->XferHalfCpltCallback != NULL)
 8006b3c:	6c22      	ldr	r2, [r4, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b3e:	4083      	lsls	r3, r0
 8006b40:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006b42:	680b      	ldr	r3, [r1, #0]
 8006b44:	f043 0316 	orr.w	r3, r3, #22
 8006b48:	600b      	str	r3, [r1, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006b4a:	694b      	ldr	r3, [r1, #20]
 8006b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b50:	614b      	str	r3, [r1, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8006b52:	b11a      	cbz	r2, 8006b5c <HAL_DMA_Start_IT+0x74>
      hdma->Instance->CR  |= DMA_IT_HT;
 8006b54:	680b      	ldr	r3, [r1, #0]
 8006b56:	f043 0308 	orr.w	r3, r3, #8
 8006b5a:	600b      	str	r3, [r1, #0]
    __HAL_DMA_ENABLE(hdma);
 8006b5c:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b5e:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8006b60:	f043 0301 	orr.w	r3, r3, #1
 8006b64:	600b      	str	r3, [r1, #0]
}
 8006b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_UNLOCK(hdma);	  
 8006b6a:	2300      	movs	r3, #0
    status = HAL_BUSY;
 8006b6c:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);	  
 8006b6e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8006b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8006b76:	f240 11cd 	movw	r1, #461	; 0x1cd
 8006b7a:	4807      	ldr	r0, [pc, #28]	; (8006b98 <HAL_DMA_Start_IT+0xb0>)
 8006b7c:	f7fc fa44 	bl	8003008 <assert_failed>
  __HAL_LOCK(hdma);
 8006b80:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d1bf      	bne.n	8006b08 <HAL_DMA_Start_IT+0x20>
 8006b88:	2002      	movs	r0, #2
}
 8006b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hdma->Instance->PAR = DstAddress;
 8006b8e:	f8c1 8008 	str.w	r8, [r1, #8]
    hdma->Instance->M0AR = SrcAddress;
 8006b92:	60cf      	str	r7, [r1, #12]
 8006b94:	e7d0      	b.n	8006b38 <HAL_DMA_Start_IT+0x50>
 8006b96:	bf00      	nop
 8006b98:	080267c8 	.word	0x080267c8

08006b9c <HAL_DMA_Abort>:
{
 8006b9c:	b570      	push	{r4, r5, r6, lr}
 8006b9e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ba0:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8006ba2:	f7fe fddb 	bl	800575c <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006ba6:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d006      	beq.n	8006bbc <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006bae:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 8006bb0:	2300      	movs	r3, #0
    return HAL_ERROR;
 8006bb2:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006bb4:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8006bb6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8006bba:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006bbc:	6823      	ldr	r3, [r4, #0]
 8006bbe:	4605      	mov	r5, r0
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006bc0:	6c21      	ldr	r1, [r4, #64]	; 0x40
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	f022 0216 	bic.w	r2, r2, #22
 8006bc8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006bca:	695a      	ldr	r2, [r3, #20]
 8006bcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006bd0:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006bd2:	b339      	cbz	r1, 8006c24 <HAL_DMA_Abort+0x88>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	f022 0208 	bic.w	r2, r2, #8
 8006bda:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	f022 0201 	bic.w	r2, r2, #1
 8006be2:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006be4:	e005      	b.n	8006bf2 <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006be6:	f7fe fdb9 	bl	800575c <HAL_GetTick>
 8006bea:	1b40      	subs	r0, r0, r5
 8006bec:	2805      	cmp	r0, #5
 8006bee:	d80f      	bhi.n	8006c10 <HAL_DMA_Abort+0x74>
 8006bf0:	6823      	ldr	r3, [r4, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f013 0301 	ands.w	r3, r3, #1
 8006bf8:	d1f5      	bne.n	8006be6 <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006bfa:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006bfc:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
 8006bfe:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006c00:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 8006c02:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006c04:	60b2      	str	r2, [r6, #8]
    __HAL_UNLOCK(hdma);
 8006c06:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8006c0a:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
}
 8006c0e:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006c10:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006c12:	2120      	movs	r1, #32
        __HAL_UNLOCK(hdma);
 8006c14:	2200      	movs	r2, #0
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006c16:	6561      	str	r1, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8006c18:	4618      	mov	r0, r3
        __HAL_UNLOCK(hdma);
 8006c1a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006c1e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8006c22:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006c24:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006c26:	2a00      	cmp	r2, #0
 8006c28:	d1d4      	bne.n	8006bd4 <HAL_DMA_Abort+0x38>
 8006c2a:	e7d7      	b.n	8006bdc <HAL_DMA_Abort+0x40>

08006c2c <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c2c:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
{
 8006c30:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c32:	2a02      	cmp	r2, #2
 8006c34:	d003      	beq.n	8006c3e <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c36:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8006c38:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c3a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006c3c:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8006c3e:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8006c40:	2105      	movs	r1, #5
  return HAL_OK;
 8006c42:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_ABORT;
 8006c44:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8006c48:	6813      	ldr	r3, [r2, #0]
 8006c4a:	f023 0301 	bic.w	r3, r3, #1
 8006c4e:	6013      	str	r3, [r2, #0]
}
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop

08006c54 <HAL_DMA_IRQHandler>:
{
 8006c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c56:	4604      	mov	r4, r0
 8006c58:	b083      	sub	sp, #12
  __IO uint32_t count = 0;
 8006c5a:	2000      	movs	r0, #0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006c5c:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 8006c5e:	4966      	ldr	r1, [pc, #408]	; (8006df8 <HAL_DMA_IRQHandler+0x1a4>)
  __IO uint32_t count = 0;
 8006c60:	9001      	str	r0, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;
 8006c62:	680e      	ldr	r6, [r1, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006c64:	e9d4 7316 	ldrd	r7, r3, [r4, #88]	; 0x58
 8006c68:	409a      	lsls	r2, r3
  tmpisr = regs->ISR;
 8006c6a:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006c6c:	422a      	tst	r2, r5
 8006c6e:	d003      	beq.n	8006c78 <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006c70:	6821      	ldr	r1, [r4, #0]
 8006c72:	6808      	ldr	r0, [r1, #0]
 8006c74:	0740      	lsls	r0, r0, #29
 8006c76:	d459      	bmi.n	8006d2c <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006c78:	2201      	movs	r2, #1
 8006c7a:	409a      	lsls	r2, r3
 8006c7c:	422a      	tst	r2, r5
 8006c7e:	d003      	beq.n	8006c88 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006c80:	6821      	ldr	r1, [r4, #0]
 8006c82:	6949      	ldr	r1, [r1, #20]
 8006c84:	0608      	lsls	r0, r1, #24
 8006c86:	d474      	bmi.n	8006d72 <HAL_DMA_IRQHandler+0x11e>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006c88:	2204      	movs	r2, #4
 8006c8a:	409a      	lsls	r2, r3
 8006c8c:	422a      	tst	r2, r5
 8006c8e:	d003      	beq.n	8006c98 <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006c90:	6821      	ldr	r1, [r4, #0]
 8006c92:	6809      	ldr	r1, [r1, #0]
 8006c94:	0789      	lsls	r1, r1, #30
 8006c96:	d466      	bmi.n	8006d66 <HAL_DMA_IRQHandler+0x112>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006c98:	2210      	movs	r2, #16
 8006c9a:	409a      	lsls	r2, r3
 8006c9c:	422a      	tst	r2, r5
 8006c9e:	d003      	beq.n	8006ca8 <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006ca0:	6821      	ldr	r1, [r4, #0]
 8006ca2:	6808      	ldr	r0, [r1, #0]
 8006ca4:	0700      	lsls	r0, r0, #28
 8006ca6:	d44b      	bmi.n	8006d40 <HAL_DMA_IRQHandler+0xec>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006ca8:	2220      	movs	r2, #32
 8006caa:	409a      	lsls	r2, r3
 8006cac:	422a      	tst	r2, r5
 8006cae:	d014      	beq.n	8006cda <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006cb0:	6821      	ldr	r1, [r4, #0]
 8006cb2:	6808      	ldr	r0, [r1, #0]
 8006cb4:	06c0      	lsls	r0, r0, #27
 8006cb6:	d510      	bpl.n	8006cda <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006cb8:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006cba:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8006cbe:	2a05      	cmp	r2, #5
 8006cc0:	d063      	beq.n	8006d8a <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006cc2:	680b      	ldr	r3, [r1, #0]
 8006cc4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006cc8:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006cca:	d07e      	beq.n	8006dca <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006ccc:	0319      	lsls	r1, r3, #12
 8006cce:	f140 8089 	bpl.w	8006de4 <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 8006cd2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006cd4:	b10b      	cbz	r3, 8006cda <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 8006cd6:	4620      	mov	r0, r4
 8006cd8:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006cda:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006cdc:	b323      	cbz	r3, 8006d28 <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006cde:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006ce0:	07da      	lsls	r2, r3, #31
 8006ce2:	d51a      	bpl.n	8006d1a <HAL_DMA_IRQHandler+0xc6>
      __HAL_DMA_DISABLE(hdma);
 8006ce4:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8006ce6:	2105      	movs	r1, #5
  uint32_t timeout = SystemCoreClock / 9600;
 8006ce8:	4b44      	ldr	r3, [pc, #272]	; (8006dfc <HAL_DMA_IRQHandler+0x1a8>)
      hdma->State = HAL_DMA_STATE_ABORT;
 8006cea:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  uint32_t timeout = SystemCoreClock / 9600;
 8006cee:	fba3 3606 	umull	r3, r6, r3, r6
      __HAL_DMA_DISABLE(hdma);
 8006cf2:	6813      	ldr	r3, [r2, #0]
 8006cf4:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600;
 8006cf8:	0ab6      	lsrs	r6, r6, #10
      __HAL_DMA_DISABLE(hdma);
 8006cfa:	6013      	str	r3, [r2, #0]
 8006cfc:	e002      	b.n	8006d04 <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006cfe:	6813      	ldr	r3, [r2, #0]
 8006d00:	07db      	lsls	r3, r3, #31
 8006d02:	d504      	bpl.n	8006d0e <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 8006d04:	9b01      	ldr	r3, [sp, #4]
 8006d06:	3301      	adds	r3, #1
 8006d08:	42b3      	cmp	r3, r6
 8006d0a:	9301      	str	r3, [sp, #4]
 8006d0c:	d9f7      	bls.n	8006cfe <HAL_DMA_IRQHandler+0xaa>
      __HAL_UNLOCK(hdma);
 8006d0e:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 8006d10:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 8006d12:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8006d16:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8006d1a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006d1c:	b123      	cbz	r3, 8006d28 <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 8006d1e:	4620      	mov	r0, r4
}
 8006d20:	b003      	add	sp, #12
 8006d22:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8006d26:	4718      	bx	r3
}
 8006d28:	b003      	add	sp, #12
 8006d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006d2c:	6808      	ldr	r0, [r1, #0]
 8006d2e:	f020 0004 	bic.w	r0, r0, #4
 8006d32:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006d34:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006d36:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006d38:	f042 0201 	orr.w	r2, r2, #1
 8006d3c:	6562      	str	r2, [r4, #84]	; 0x54
 8006d3e:	e79b      	b.n	8006c78 <HAL_DMA_IRQHandler+0x24>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006d40:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006d42:	680a      	ldr	r2, [r1, #0]
 8006d44:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006d48:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006d4a:	d118      	bne.n	8006d7e <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006d4c:	05d2      	lsls	r2, r2, #23
 8006d4e:	d403      	bmi.n	8006d58 <HAL_DMA_IRQHandler+0x104>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006d50:	680a      	ldr	r2, [r1, #0]
 8006d52:	f022 0208 	bic.w	r2, r2, #8
 8006d56:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8006d58:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006d5a:	2a00      	cmp	r2, #0
 8006d5c:	d0a4      	beq.n	8006ca8 <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 8006d5e:	4620      	mov	r0, r4
 8006d60:	4790      	blx	r2
 8006d62:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006d64:	e7a0      	b.n	8006ca8 <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006d66:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006d68:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006d6a:	f042 0204 	orr.w	r2, r2, #4
 8006d6e:	6562      	str	r2, [r4, #84]	; 0x54
 8006d70:	e792      	b.n	8006c98 <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006d72:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006d74:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006d76:	f042 0202 	orr.w	r2, r2, #2
 8006d7a:	6562      	str	r2, [r4, #84]	; 0x54
 8006d7c:	e784      	b.n	8006c88 <HAL_DMA_IRQHandler+0x34>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006d7e:	0311      	lsls	r1, r2, #12
 8006d80:	d5ea      	bpl.n	8006d58 <HAL_DMA_IRQHandler+0x104>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006d82:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006d84:	2a00      	cmp	r2, #0
 8006d86:	d1ea      	bne.n	8006d5e <HAL_DMA_IRQHandler+0x10a>
 8006d88:	e78e      	b.n	8006ca8 <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006d8a:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006d8c:	6c20      	ldr	r0, [r4, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006d8e:	f022 0216 	bic.w	r2, r2, #22
 8006d92:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006d94:	694a      	ldr	r2, [r1, #20]
 8006d96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d9a:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006d9c:	b338      	cbz	r0, 8006dee <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006d9e:	680a      	ldr	r2, [r1, #0]
 8006da0:	f022 0208 	bic.w	r2, r2, #8
 8006da4:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006da6:	223f      	movs	r2, #63	; 0x3f
        __HAL_UNLOCK(hdma);
 8006da8:	2000      	movs	r0, #0
        hdma->State = HAL_DMA_STATE_READY;
 8006daa:	2101      	movs	r1, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006dac:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 8006db0:	6d22      	ldr	r2, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006db2:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8006db4:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8006db8:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8006dbc:	2a00      	cmp	r2, #0
 8006dbe:	d0b3      	beq.n	8006d28 <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 8006dc0:	4620      	mov	r0, r4
}
 8006dc2:	b003      	add	sp, #12
 8006dc4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 8006dc8:	4710      	bx	r2
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006dca:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8006dce:	d180      	bne.n	8006cd2 <HAL_DMA_IRQHandler+0x7e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006dd0:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8006dd2:	2001      	movs	r0, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006dd4:	f022 0210 	bic.w	r2, r2, #16
 8006dd8:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 8006dda:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8006dde:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 8006de2:	e776      	b.n	8006cd2 <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 8006de4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	f47f af75 	bne.w	8006cd6 <HAL_DMA_IRQHandler+0x82>
 8006dec:	e775      	b.n	8006cda <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006dee:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006df0:	2a00      	cmp	r2, #0
 8006df2:	d1d4      	bne.n	8006d9e <HAL_DMA_IRQHandler+0x14a>
 8006df4:	e7d7      	b.n	8006da6 <HAL_DMA_IRQHandler+0x152>
 8006df6:	bf00      	nop
 8006df8:	20000244 	.word	0x20000244
 8006dfc:	1b4e81b5 	.word	0x1b4e81b5

08006e00 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8006e00:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8006e02:	4770      	bx	lr

08006e04 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8006e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e08:	9d08      	ldr	r5, [sp, #32]
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8006e0a:	f64f 76fe 	movw	r6, #65534	; 0xfffe
{
 8006e0e:	460f      	mov	r7, r1
 8006e10:	4604      	mov	r4, r0
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8006e12:	1e69      	subs	r1, r5, #1
{
 8006e14:	4690      	mov	r8, r2
 8006e16:	4699      	mov	r9, r3
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8006e18:	42b1      	cmp	r1, r6
 8006e1a:	d861      	bhi.n	8006ee0 <HAL_DMAEx_MultiBufferStart_IT+0xdc>
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006e1c:	68a0      	ldr	r0, [r4, #8]
 8006e1e:	2880      	cmp	r0, #128	; 0x80
 8006e20:	d065      	beq.n	8006eee <HAL_DMAEx_MultiBufferStart_IT+0xea>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
    return HAL_ERROR;
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8006e22:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 8006e26:	2901      	cmp	r1, #1
 8006e28:	d07d      	beq.n	8006f26 <HAL_DMAEx_MultiBufferStart_IT+0x122>
 8006e2a:	2201      	movs	r2, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006e2c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8006e30:	4293      	cmp	r3, r2
  __HAL_LOCK(hdma);
 8006e32:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8006e36:	d14d      	bne.n	8006ed4 <HAL_DMAEx_MultiBufferStart_IT+0xd0>
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8006e38:	6821      	ldr	r1, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006e3a:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8006e3c:	2202      	movs	r2, #2
{
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e3e:	2840      	cmp	r0, #64	; 0x40
    hdma->State = HAL_DMA_STATE_BUSY;
 8006e40:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006e44:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8006e46:	680b      	ldr	r3, [r1, #0]
 8006e48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e4c:	600b      	str	r3, [r1, #0]
    hdma->Instance->M1AR = SecondMemAddress;
 8006e4e:	f8c1 9010 	str.w	r9, [r1, #16]
  hdma->Instance->NDTR = DataLength;
 8006e52:	604d      	str	r5, [r1, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e54:	d051      	beq.n	8006efa <HAL_DMAEx_MultiBufferStart_IT+0xf6>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8006e56:	608f      	str	r7, [r1, #8]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8006e58:	f8c1 800c 	str.w	r8, [r1, #12]
 8006e5c:	4b91      	ldr	r3, [pc, #580]	; (80070a4 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8006e5e:	4a92      	ldr	r2, [pc, #584]	; (80070a8 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8006e60:	4d92      	ldr	r5, [pc, #584]	; (80070ac <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8006e62:	4299      	cmp	r1, r3
 8006e64:	bf18      	it	ne
 8006e66:	4291      	cmpne	r1, r2
 8006e68:	4891      	ldr	r0, [pc, #580]	; (80070b0 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006e6a:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 8006e6e:	bf14      	ite	ne
 8006e70:	2301      	movne	r3, #1
 8006e72:	2300      	moveq	r3, #0
 8006e74:	42a9      	cmp	r1, r5
 8006e76:	bf0c      	ite	eq
 8006e78:	2300      	moveq	r3, #0
 8006e7a:	f003 0301 	andne.w	r3, r3, #1
 8006e7e:	4281      	cmp	r1, r0
 8006e80:	bf0c      	ite	eq
 8006e82:	2300      	moveq	r3, #0
 8006e84:	f003 0301 	andne.w	r3, r3, #1
 8006e88:	4291      	cmp	r1, r2
 8006e8a:	d93a      	bls.n	8006f02 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d174      	bne.n	8006f7a <HAL_DMAEx_MultiBufferStart_IT+0x176>
 8006e90:	4b88      	ldr	r3, [pc, #544]	; (80070b4 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8006e92:	2020      	movs	r0, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006e94:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006e96:	2508      	movs	r5, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006e98:	60d8      	str	r0, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006e9a:	2004      	movs	r0, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006e9c:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006e9e:	2201      	movs	r2, #1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006ea0:	60dd      	str	r5, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006ea2:	60d8      	str	r0, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006ea4:	4b83      	ldr	r3, [pc, #524]	; (80070b4 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8006ea6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006ea8:	680b      	ldr	r3, [r1, #0]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006eaa:	6c22      	ldr	r2, [r4, #64]	; 0x40
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006eac:	f043 0316 	orr.w	r3, r3, #22
 8006eb0:	600b      	str	r3, [r1, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006eb2:	694b      	ldr	r3, [r1, #20]
 8006eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eb8:	614b      	str	r3, [r1, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006eba:	2a00      	cmp	r2, #0
 8006ebc:	d036      	beq.n	8006f2c <HAL_DMAEx_MultiBufferStart_IT+0x128>
      hdma->Instance->CR  |= DMA_IT_HT;
 8006ebe:	680b      	ldr	r3, [r1, #0]
 8006ec0:	f043 0308 	orr.w	r3, r3, #8
 8006ec4:	600b      	str	r3, [r1, #0]
    __HAL_DMA_ENABLE(hdma); 
 8006ec6:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ec8:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma); 
 8006eca:	f043 0301 	orr.w	r3, r3, #1
 8006ece:	600b      	str	r3, [r1, #0]
}
 8006ed0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_UNLOCK(hdma);	  
 8006ed4:	2300      	movs	r3, #0
    status = HAL_BUSY;
 8006ed6:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);	  
 8006ed8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8006edc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8006ee0:	4875      	ldr	r0, [pc, #468]	; (80070b8 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 8006ee2:	21a2      	movs	r1, #162	; 0xa2
 8006ee4:	f7fc f890 	bl	8003008 <assert_failed>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006ee8:	68a0      	ldr	r0, [r4, #8]
 8006eea:	2880      	cmp	r0, #128	; 0x80
 8006eec:	d199      	bne.n	8006e22 <HAL_DMAEx_MultiBufferStart_IT+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8006eee:	f44f 7380 	mov.w	r3, #256	; 0x100
    return HAL_ERROR;
 8006ef2:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8006ef4:	6563      	str	r3, [r4, #84]	; 0x54
}
 8006ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hdma->Instance->PAR = DstAddress;
 8006efa:	f8c1 8008 	str.w	r8, [r1, #8]
    hdma->Instance->M0AR = SrcAddress;
 8006efe:	60cf      	str	r7, [r1, #12]
 8006f00:	e7ac      	b.n	8006e5c <HAL_DMAEx_MultiBufferStart_IT+0x58>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006f02:	4a6e      	ldr	r2, [pc, #440]	; (80070bc <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8006f04:	4291      	cmp	r1, r2
 8006f06:	d915      	bls.n	8006f34 <HAL_DMAEx_MultiBufferStart_IT+0x130>
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d15a      	bne.n	8006fc2 <HAL_DMAEx_MultiBufferStart_IT+0x1be>
 8006f0c:	4b69      	ldr	r3, [pc, #420]	; (80070b4 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8006f0e:	2020      	movs	r0, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006f10:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006f12:	2508      	movs	r5, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006f14:	6098      	str	r0, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006f16:	2004      	movs	r0, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006f18:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006f1a:	2201      	movs	r2, #1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006f1c:	609d      	str	r5, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006f1e:	6098      	str	r0, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006f20:	4b64      	ldr	r3, [pc, #400]	; (80070b4 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8006f22:	609a      	str	r2, [r3, #8]
 8006f24:	e7c0      	b.n	8006ea8 <HAL_DMAEx_MultiBufferStart_IT+0xa4>
  __HAL_LOCK(hdma);
 8006f26:	2002      	movs	r0, #2
}
 8006f28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006f2c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d1c5      	bne.n	8006ebe <HAL_DMAEx_MultiBufferStart_IT+0xba>
 8006f32:	e7c8      	b.n	8006ec6 <HAL_DMAEx_MultiBufferStart_IT+0xc2>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006f34:	4a62      	ldr	r2, [pc, #392]	; (80070c0 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8006f36:	4291      	cmp	r1, r2
 8006f38:	d90f      	bls.n	8006f5a <HAL_DMAEx_MultiBufferStart_IT+0x156>
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	f040 8140 	bne.w	80071c0 <HAL_DMAEx_MultiBufferStart_IT+0x3bc>
 8006f40:	4b60      	ldr	r3, [pc, #384]	; (80070c4 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8006f42:	2020      	movs	r0, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006f44:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006f46:	2508      	movs	r5, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006f48:	60d8      	str	r0, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006f4a:	2004      	movs	r0, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006f4c:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006f4e:	2201      	movs	r2, #1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006f50:	60dd      	str	r5, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006f52:	60d8      	str	r0, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006f54:	4b5b      	ldr	r3, [pc, #364]	; (80070c4 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8006f56:	60da      	str	r2, [r3, #12]
 8006f58:	e7a6      	b.n	8006ea8 <HAL_DMAEx_MultiBufferStart_IT+0xa4>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	f040 80bc 	bne.w	80070d8 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>
 8006f60:	4b58      	ldr	r3, [pc, #352]	; (80070c4 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8006f62:	2020      	movs	r0, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006f64:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006f66:	2508      	movs	r5, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006f68:	6098      	str	r0, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006f6a:	2004      	movs	r0, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006f6c:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006f6e:	2201      	movs	r2, #1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006f70:	609d      	str	r5, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006f72:	6098      	str	r0, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006f74:	4b53      	ldr	r3, [pc, #332]	; (80070c4 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8006f76:	609a      	str	r2, [r3, #8]
 8006f78:	e796      	b.n	8006ea8 <HAL_DMAEx_MultiBufferStart_IT+0xa4>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006f7a:	4b53      	ldr	r3, [pc, #332]	; (80070c8 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8006f7c:	f5a0 707a 	sub.w	r0, r0, #1000	; 0x3e8
 8006f80:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 8006f84:	4299      	cmp	r1, r3
 8006f86:	bf18      	it	ne
 8006f88:	4281      	cmpne	r1, r0
 8006f8a:	bf14      	ite	ne
 8006f8c:	2301      	movne	r3, #1
 8006f8e:	2300      	moveq	r3, #0
 8006f90:	4291      	cmp	r1, r2
 8006f92:	bf0c      	ite	eq
 8006f94:	2300      	moveq	r3, #0
 8006f96:	f003 0301 	andne.w	r3, r3, #1
 8006f9a:	b11b      	cbz	r3, 8006fa4 <HAL_DMAEx_MultiBufferStart_IT+0x1a0>
 8006f9c:	4b4b      	ldr	r3, [pc, #300]	; (80070cc <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 8006f9e:	4299      	cmp	r1, r3
 8006fa0:	f040 818a 	bne.w	80072b8 <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 8006fa4:	4b43      	ldr	r3, [pc, #268]	; (80070b4 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8006fa6:	f44f 6000 	mov.w	r0, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006faa:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006fae:	f44f 7500 	mov.w	r5, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006fb2:	60d8      	str	r0, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006fb4:	f44f 7080 	mov.w	r0, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006fb8:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006fba:	2240      	movs	r2, #64	; 0x40
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006fbc:	60dd      	str	r5, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006fbe:	60d8      	str	r0, [r3, #12]
 8006fc0:	e770      	b.n	8006ea4 <HAL_DMAEx_MultiBufferStart_IT+0xa0>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006fc2:	4b43      	ldr	r3, [pc, #268]	; (80070d0 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 8006fc4:	3a30      	subs	r2, #48	; 0x30
 8006fc6:	4840      	ldr	r0, [pc, #256]	; (80070c8 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8006fc8:	4299      	cmp	r1, r3
 8006fca:	bf18      	it	ne
 8006fcc:	4281      	cmpne	r1, r0
 8006fce:	bf14      	ite	ne
 8006fd0:	2301      	movne	r3, #1
 8006fd2:	2300      	moveq	r3, #0
 8006fd4:	4291      	cmp	r1, r2
 8006fd6:	bf0c      	ite	eq
 8006fd8:	2300      	moveq	r3, #0
 8006fda:	f003 0301 	andne.w	r3, r3, #1
 8006fde:	b11b      	cbz	r3, 8006fe8 <HAL_DMAEx_MultiBufferStart_IT+0x1e4>
 8006fe0:	4b3a      	ldr	r3, [pc, #232]	; (80070cc <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 8006fe2:	4299      	cmp	r1, r3
 8006fe4:	f040 81e4 	bne.w	80073b0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8006fe8:	f44f 6500 	mov.w	r5, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006fec:	4b36      	ldr	r3, [pc, #216]	; (80070c8 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8006fee:	4a38      	ldr	r2, [pc, #224]	; (80070d0 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 8006ff0:	4838      	ldr	r0, [pc, #224]	; (80070d4 <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 8006ff2:	4299      	cmp	r1, r3
 8006ff4:	bf18      	it	ne
 8006ff6:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006ff8:	f8c2 53e0 	str.w	r5, [r2, #992]	; 0x3e0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006ffc:	bf14      	ite	ne
 8006ffe:	2301      	movne	r3, #1
 8007000:	2300      	moveq	r3, #0
 8007002:	4281      	cmp	r1, r0
 8007004:	bf0c      	ite	eq
 8007006:	2300      	moveq	r3, #0
 8007008:	f003 0301 	andne.w	r3, r3, #1
 800700c:	b11b      	cbz	r3, 8007016 <HAL_DMAEx_MultiBufferStart_IT+0x212>
 800700e:	4b2f      	ldr	r3, [pc, #188]	; (80070cc <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 8007010:	4299      	cmp	r1, r3
 8007012:	f040 81e6 	bne.w	80073e2 <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 8007016:	f44f 6580 	mov.w	r5, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800701a:	4b2d      	ldr	r3, [pc, #180]	; (80070d0 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 800701c:	4a2a      	ldr	r2, [pc, #168]	; (80070c8 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 800701e:	482d      	ldr	r0, [pc, #180]	; (80070d4 <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 8007020:	4299      	cmp	r1, r3
 8007022:	bf18      	it	ne
 8007024:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007026:	f842 5c20 	str.w	r5, [r2, #-32]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800702a:	bf14      	ite	ne
 800702c:	2301      	movne	r3, #1
 800702e:	2300      	moveq	r3, #0
 8007030:	4281      	cmp	r1, r0
 8007032:	bf0c      	ite	eq
 8007034:	2300      	moveq	r3, #0
 8007036:	f003 0301 	andne.w	r3, r3, #1
 800703a:	b11b      	cbz	r3, 8007044 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 800703c:	4b23      	ldr	r3, [pc, #140]	; (80070cc <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 800703e:	4299      	cmp	r1, r3
 8007040:	f040 81ff 	bne.w	8007442 <HAL_DMAEx_MultiBufferStart_IT+0x63e>
 8007044:	f44f 7500 	mov.w	r5, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007048:	4b21      	ldr	r3, [pc, #132]	; (80070d0 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 800704a:	4a1f      	ldr	r2, [pc, #124]	; (80070c8 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 800704c:	4821      	ldr	r0, [pc, #132]	; (80070d4 <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 800704e:	4299      	cmp	r1, r3
 8007050:	bf18      	it	ne
 8007052:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007054:	f842 5c20 	str.w	r5, [r2, #-32]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007058:	bf14      	ite	ne
 800705a:	2301      	movne	r3, #1
 800705c:	2300      	moveq	r3, #0
 800705e:	4281      	cmp	r1, r0
 8007060:	bf0c      	ite	eq
 8007062:	2300      	moveq	r3, #0
 8007064:	f003 0301 	andne.w	r3, r3, #1
 8007068:	b11b      	cbz	r3, 8007072 <HAL_DMAEx_MultiBufferStart_IT+0x26e>
 800706a:	4b18      	ldr	r3, [pc, #96]	; (80070cc <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 800706c:	4299      	cmp	r1, r3
 800706e:	f040 81d0 	bne.w	8007412 <HAL_DMAEx_MultiBufferStart_IT+0x60e>
 8007072:	f44f 7580 	mov.w	r5, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8007076:	4b16      	ldr	r3, [pc, #88]	; (80070d0 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 8007078:	4a13      	ldr	r2, [pc, #76]	; (80070c8 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 800707a:	4816      	ldr	r0, [pc, #88]	; (80070d4 <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 800707c:	4299      	cmp	r1, r3
 800707e:	bf18      	it	ne
 8007080:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007082:	f842 5c20 	str.w	r5, [r2, #-32]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8007086:	bf14      	ite	ne
 8007088:	2301      	movne	r3, #1
 800708a:	2300      	moveq	r3, #0
 800708c:	4281      	cmp	r1, r0
 800708e:	bf0c      	ite	eq
 8007090:	2300      	moveq	r3, #0
 8007092:	f003 0301 	andne.w	r3, r3, #1
 8007096:	b11b      	cbz	r3, 80070a0 <HAL_DMAEx_MultiBufferStart_IT+0x29c>
 8007098:	4b0c      	ldr	r3, [pc, #48]	; (80070cc <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 800709a:	4299      	cmp	r1, r3
 800709c:	f040 81e9 	bne.w	8007472 <HAL_DMAEx_MultiBufferStart_IT+0x66e>
 80070a0:	2240      	movs	r2, #64	; 0x40
 80070a2:	e73d      	b.n	8006f20 <HAL_DMAEx_MultiBufferStart_IT+0x11c>
 80070a4:	40026470 	.word	0x40026470
 80070a8:	40026070 	.word	0x40026070
 80070ac:	40026010 	.word	0x40026010
 80070b0:	40026410 	.word	0x40026410
 80070b4:	40026400 	.word	0x40026400
 80070b8:	08026808 	.word	0x08026808
 80070bc:	400260b8 	.word	0x400260b8
 80070c0:	40026058 	.word	0x40026058
 80070c4:	40026000 	.word	0x40026000
 80070c8:	40026428 	.word	0x40026428
 80070cc:	40026488 	.word	0x40026488
 80070d0:	40026028 	.word	0x40026028
 80070d4:	40026088 	.word	0x40026088
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80070d8:	4b73      	ldr	r3, [pc, #460]	; (80072a8 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>)
 80070da:	4874      	ldr	r0, [pc, #464]	; (80072ac <HAL_DMAEx_MultiBufferStart_IT+0x4a8>)
 80070dc:	4a74      	ldr	r2, [pc, #464]	; (80072b0 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>)
 80070de:	4299      	cmp	r1, r3
 80070e0:	bf18      	it	ne
 80070e2:	4281      	cmpne	r1, r0
 80070e4:	bf14      	ite	ne
 80070e6:	2301      	movne	r3, #1
 80070e8:	2300      	moveq	r3, #0
 80070ea:	4291      	cmp	r1, r2
 80070ec:	bf0c      	ite	eq
 80070ee:	2300      	moveq	r3, #0
 80070f0:	f003 0301 	andne.w	r3, r3, #1
 80070f4:	b11b      	cbz	r3, 80070fe <HAL_DMAEx_MultiBufferStart_IT+0x2fa>
 80070f6:	4b6f      	ldr	r3, [pc, #444]	; (80072b4 <HAL_DMAEx_MultiBufferStart_IT+0x4b0>)
 80070f8:	4299      	cmp	r1, r3
 80070fa:	f040 81d2 	bne.w	80074a2 <HAL_DMAEx_MultiBufferStart_IT+0x69e>
 80070fe:	f44f 6000 	mov.w	r0, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007102:	4b6a      	ldr	r3, [pc, #424]	; (80072ac <HAL_DMAEx_MultiBufferStart_IT+0x4a8>)
 8007104:	4a68      	ldr	r2, [pc, #416]	; (80072a8 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>)
 8007106:	4d6a      	ldr	r5, [pc, #424]	; (80072b0 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>)
 8007108:	4299      	cmp	r1, r3
 800710a:	bf18      	it	ne
 800710c:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800710e:	f5a2 6285 	sub.w	r2, r2, #1064	; 0x428
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007112:	bf14      	ite	ne
 8007114:	2301      	movne	r3, #1
 8007116:	2300      	moveq	r3, #0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007118:	6090      	str	r0, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800711a:	42a9      	cmp	r1, r5
 800711c:	bf0c      	ite	eq
 800711e:	2300      	moveq	r3, #0
 8007120:	f003 0301 	andne.w	r3, r3, #1
 8007124:	b11b      	cbz	r3, 800712e <HAL_DMAEx_MultiBufferStart_IT+0x32a>
 8007126:	4b63      	ldr	r3, [pc, #396]	; (80072b4 <HAL_DMAEx_MultiBufferStart_IT+0x4b0>)
 8007128:	4299      	cmp	r1, r3
 800712a:	f040 8205 	bne.w	8007538 <HAL_DMAEx_MultiBufferStart_IT+0x734>
 800712e:	f44f 6080 	mov.w	r0, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007132:	4b5e      	ldr	r3, [pc, #376]	; (80072ac <HAL_DMAEx_MultiBufferStart_IT+0x4a8>)
 8007134:	4a5c      	ldr	r2, [pc, #368]	; (80072a8 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>)
 8007136:	4d5e      	ldr	r5, [pc, #376]	; (80072b0 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>)
 8007138:	4299      	cmp	r1, r3
 800713a:	bf18      	it	ne
 800713c:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800713e:	f5a2 6285 	sub.w	r2, r2, #1064	; 0x428
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007142:	bf14      	ite	ne
 8007144:	2301      	movne	r3, #1
 8007146:	2300      	moveq	r3, #0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007148:	6090      	str	r0, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800714a:	42a9      	cmp	r1, r5
 800714c:	bf0c      	ite	eq
 800714e:	2300      	moveq	r3, #0
 8007150:	f003 0301 	andne.w	r3, r3, #1
 8007154:	b11b      	cbz	r3, 800715e <HAL_DMAEx_MultiBufferStart_IT+0x35a>
 8007156:	4b57      	ldr	r3, [pc, #348]	; (80072b4 <HAL_DMAEx_MultiBufferStart_IT+0x4b0>)
 8007158:	4299      	cmp	r1, r3
 800715a:	f040 8253 	bne.w	8007604 <HAL_DMAEx_MultiBufferStart_IT+0x800>
 800715e:	f44f 7000 	mov.w	r0, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007162:	4b51      	ldr	r3, [pc, #324]	; (80072a8 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>)
 8007164:	4a51      	ldr	r2, [pc, #324]	; (80072ac <HAL_DMAEx_MultiBufferStart_IT+0x4a8>)
 8007166:	4d52      	ldr	r5, [pc, #328]	; (80072b0 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>)
 8007168:	4299      	cmp	r1, r3
 800716a:	bf18      	it	ne
 800716c:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800716e:	f842 0c20 	str.w	r0, [r2, #-32]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007172:	bf14      	ite	ne
 8007174:	2301      	movne	r3, #1
 8007176:	2300      	moveq	r3, #0
 8007178:	42a9      	cmp	r1, r5
 800717a:	bf0c      	ite	eq
 800717c:	2300      	moveq	r3, #0
 800717e:	f003 0301 	andne.w	r3, r3, #1
 8007182:	b11b      	cbz	r3, 800718c <HAL_DMAEx_MultiBufferStart_IT+0x388>
 8007184:	4b4b      	ldr	r3, [pc, #300]	; (80072b4 <HAL_DMAEx_MultiBufferStart_IT+0x4b0>)
 8007186:	4299      	cmp	r1, r3
 8007188:	f040 820e 	bne.w	80075a8 <HAL_DMAEx_MultiBufferStart_IT+0x7a4>
 800718c:	f44f 7080 	mov.w	r0, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8007190:	4b46      	ldr	r3, [pc, #280]	; (80072ac <HAL_DMAEx_MultiBufferStart_IT+0x4a8>)
 8007192:	4a45      	ldr	r2, [pc, #276]	; (80072a8 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>)
 8007194:	4d46      	ldr	r5, [pc, #280]	; (80072b0 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>)
 8007196:	4299      	cmp	r1, r3
 8007198:	bf18      	it	ne
 800719a:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800719c:	f5a2 6285 	sub.w	r2, r2, #1064	; 0x428
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80071a0:	bf14      	ite	ne
 80071a2:	2301      	movne	r3, #1
 80071a4:	2300      	moveq	r3, #0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80071a6:	6090      	str	r0, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80071a8:	42a9      	cmp	r1, r5
 80071aa:	bf0c      	ite	eq
 80071ac:	2300      	moveq	r3, #0
 80071ae:	f003 0301 	andne.w	r3, r3, #1
 80071b2:	b11b      	cbz	r3, 80071bc <HAL_DMAEx_MultiBufferStart_IT+0x3b8>
 80071b4:	4b3f      	ldr	r3, [pc, #252]	; (80072b4 <HAL_DMAEx_MultiBufferStart_IT+0x4b0>)
 80071b6:	4299      	cmp	r1, r3
 80071b8:	f040 8250 	bne.w	800765c <HAL_DMAEx_MultiBufferStart_IT+0x858>
 80071bc:	2240      	movs	r2, #64	; 0x40
 80071be:	e6d9      	b.n	8006f74 <HAL_DMAEx_MultiBufferStart_IT+0x170>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80071c0:	4b3a      	ldr	r3, [pc, #232]	; (80072ac <HAL_DMAEx_MultiBufferStart_IT+0x4a8>)
 80071c2:	3230      	adds	r2, #48	; 0x30
 80071c4:	4838      	ldr	r0, [pc, #224]	; (80072a8 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>)
 80071c6:	4299      	cmp	r1, r3
 80071c8:	bf18      	it	ne
 80071ca:	4281      	cmpne	r1, r0
 80071cc:	bf14      	ite	ne
 80071ce:	2301      	movne	r3, #1
 80071d0:	2300      	moveq	r3, #0
 80071d2:	4291      	cmp	r1, r2
 80071d4:	bf0c      	ite	eq
 80071d6:	2300      	moveq	r3, #0
 80071d8:	f003 0301 	andne.w	r3, r3, #1
 80071dc:	b11b      	cbz	r3, 80071e6 <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 80071de:	4b35      	ldr	r3, [pc, #212]	; (80072b4 <HAL_DMAEx_MultiBufferStart_IT+0x4b0>)
 80071e0:	4299      	cmp	r1, r3
 80071e2:	f040 8178 	bne.w	80074d6 <HAL_DMAEx_MultiBufferStart_IT+0x6d2>
 80071e6:	f44f 6000 	mov.w	r0, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80071ea:	4b2f      	ldr	r3, [pc, #188]	; (80072a8 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>)
 80071ec:	4a2f      	ldr	r2, [pc, #188]	; (80072ac <HAL_DMAEx_MultiBufferStart_IT+0x4a8>)
 80071ee:	4d30      	ldr	r5, [pc, #192]	; (80072b0 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>)
 80071f0:	4299      	cmp	r1, r3
 80071f2:	bf18      	it	ne
 80071f4:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80071f6:	f842 0c1c 	str.w	r0, [r2, #-28]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80071fa:	bf14      	ite	ne
 80071fc:	2301      	movne	r3, #1
 80071fe:	2300      	moveq	r3, #0
 8007200:	42a9      	cmp	r1, r5
 8007202:	bf0c      	ite	eq
 8007204:	2300      	moveq	r3, #0
 8007206:	f003 0301 	andne.w	r3, r3, #1
 800720a:	b11b      	cbz	r3, 8007214 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800720c:	4b29      	ldr	r3, [pc, #164]	; (80072b4 <HAL_DMAEx_MultiBufferStart_IT+0x4b0>)
 800720e:	4299      	cmp	r1, r3
 8007210:	f040 817a 	bne.w	8007508 <HAL_DMAEx_MultiBufferStart_IT+0x704>
 8007214:	f44f 6080 	mov.w	r0, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007218:	4b24      	ldr	r3, [pc, #144]	; (80072ac <HAL_DMAEx_MultiBufferStart_IT+0x4a8>)
 800721a:	4a23      	ldr	r2, [pc, #140]	; (80072a8 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>)
 800721c:	4d24      	ldr	r5, [pc, #144]	; (80072b0 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>)
 800721e:	4299      	cmp	r1, r3
 8007220:	bf18      	it	ne
 8007222:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007224:	f5a2 6285 	sub.w	r2, r2, #1064	; 0x428
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007228:	bf14      	ite	ne
 800722a:	2301      	movne	r3, #1
 800722c:	2300      	moveq	r3, #0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800722e:	60d0      	str	r0, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007230:	42a9      	cmp	r1, r5
 8007232:	bf0c      	ite	eq
 8007234:	2300      	moveq	r3, #0
 8007236:	f003 0301 	andne.w	r3, r3, #1
 800723a:	b11b      	cbz	r3, 8007244 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 800723c:	4b1d      	ldr	r3, [pc, #116]	; (80072b4 <HAL_DMAEx_MultiBufferStart_IT+0x4b0>)
 800723e:	4299      	cmp	r1, r3
 8007240:	f040 81ca 	bne.w	80075d8 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>
 8007244:	f44f 7000 	mov.w	r0, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007248:	4b17      	ldr	r3, [pc, #92]	; (80072a8 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>)
 800724a:	4a18      	ldr	r2, [pc, #96]	; (80072ac <HAL_DMAEx_MultiBufferStart_IT+0x4a8>)
 800724c:	4d18      	ldr	r5, [pc, #96]	; (80072b0 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>)
 800724e:	4299      	cmp	r1, r3
 8007250:	bf18      	it	ne
 8007252:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007254:	f842 0c1c 	str.w	r0, [r2, #-28]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007258:	bf14      	ite	ne
 800725a:	2301      	movne	r3, #1
 800725c:	2300      	moveq	r3, #0
 800725e:	42a9      	cmp	r1, r5
 8007260:	bf0c      	ite	eq
 8007262:	2300      	moveq	r3, #0
 8007264:	f003 0301 	andne.w	r3, r3, #1
 8007268:	b11b      	cbz	r3, 8007272 <HAL_DMAEx_MultiBufferStart_IT+0x46e>
 800726a:	4b12      	ldr	r3, [pc, #72]	; (80072b4 <HAL_DMAEx_MultiBufferStart_IT+0x4b0>)
 800726c:	4299      	cmp	r1, r3
 800726e:	f040 817b 	bne.w	8007568 <HAL_DMAEx_MultiBufferStart_IT+0x764>
 8007272:	f44f 7080 	mov.w	r0, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8007276:	4b0d      	ldr	r3, [pc, #52]	; (80072ac <HAL_DMAEx_MultiBufferStart_IT+0x4a8>)
 8007278:	4a0b      	ldr	r2, [pc, #44]	; (80072a8 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>)
 800727a:	4d0d      	ldr	r5, [pc, #52]	; (80072b0 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>)
 800727c:	4299      	cmp	r1, r3
 800727e:	bf18      	it	ne
 8007280:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007282:	f5a2 6285 	sub.w	r2, r2, #1064	; 0x428
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8007286:	bf14      	ite	ne
 8007288:	2301      	movne	r3, #1
 800728a:	2300      	moveq	r3, #0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800728c:	60d0      	str	r0, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800728e:	42a9      	cmp	r1, r5
 8007290:	bf0c      	ite	eq
 8007292:	2300      	moveq	r3, #0
 8007294:	f003 0301 	andne.w	r3, r3, #1
 8007298:	b11b      	cbz	r3, 80072a2 <HAL_DMAEx_MultiBufferStart_IT+0x49e>
 800729a:	4b06      	ldr	r3, [pc, #24]	; (80072b4 <HAL_DMAEx_MultiBufferStart_IT+0x4b0>)
 800729c:	4299      	cmp	r1, r3
 800729e:	f040 81c7 	bne.w	8007630 <HAL_DMAEx_MultiBufferStart_IT+0x82c>
 80072a2:	2240      	movs	r2, #64	; 0x40
 80072a4:	e656      	b.n	8006f54 <HAL_DMAEx_MultiBufferStart_IT+0x150>
 80072a6:	bf00      	nop
 80072a8:	40026428 	.word	0x40026428
 80072ac:	40026028 	.word	0x40026028
 80072b0:	40026088 	.word	0x40026088
 80072b4:	40026488 	.word	0x40026488
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80072b8:	3b48      	subs	r3, #72	; 0x48
 80072ba:	3018      	adds	r0, #24
 80072bc:	3218      	adds	r2, #24
 80072be:	4299      	cmp	r1, r3
 80072c0:	bf18      	it	ne
 80072c2:	4281      	cmpne	r1, r0
 80072c4:	bf14      	ite	ne
 80072c6:	2301      	movne	r3, #1
 80072c8:	2300      	moveq	r3, #0
 80072ca:	4291      	cmp	r1, r2
 80072cc:	bf0c      	ite	eq
 80072ce:	2300      	moveq	r3, #0
 80072d0:	f003 0301 	andne.w	r3, r3, #1
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	f000 81e2 	beq.w	800769e <HAL_DMAEx_MultiBufferStart_IT+0x89a>
 80072da:	4baf      	ldr	r3, [pc, #700]	; (8007598 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 80072dc:	4299      	cmp	r1, r3
 80072de:	f000 81de 	beq.w	800769e <HAL_DMAEx_MultiBufferStart_IT+0x89a>
 80072e2:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80072e6:	4bad      	ldr	r3, [pc, #692]	; (800759c <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 80072e8:	4aad      	ldr	r2, [pc, #692]	; (80075a0 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 80072ea:	4dae      	ldr	r5, [pc, #696]	; (80075a4 <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 80072ec:	4299      	cmp	r1, r3
 80072ee:	bf18      	it	ne
 80072f0:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80072f2:	f8c2 03cc 	str.w	r0, [r2, #972]	; 0x3cc
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80072f6:	bf14      	ite	ne
 80072f8:	2301      	movne	r3, #1
 80072fa:	2300      	moveq	r3, #0
 80072fc:	42a9      	cmp	r1, r5
 80072fe:	bf0c      	ite	eq
 8007300:	2300      	moveq	r3, #0
 8007302:	f003 0301 	andne.w	r3, r3, #1
 8007306:	2b00      	cmp	r3, #0
 8007308:	f000 81c6 	beq.w	8007698 <HAL_DMAEx_MultiBufferStart_IT+0x894>
 800730c:	4ba2      	ldr	r3, [pc, #648]	; (8007598 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 800730e:	4299      	cmp	r1, r3
 8007310:	f000 81c2 	beq.w	8007698 <HAL_DMAEx_MultiBufferStart_IT+0x894>
 8007314:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007318:	4ba0      	ldr	r3, [pc, #640]	; (800759c <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 800731a:	4aa1      	ldr	r2, [pc, #644]	; (80075a0 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 800731c:	4da1      	ldr	r5, [pc, #644]	; (80075a4 <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 800731e:	4299      	cmp	r1, r3
 8007320:	bf18      	it	ne
 8007322:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007324:	f8c2 03cc 	str.w	r0, [r2, #972]	; 0x3cc
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007328:	bf14      	ite	ne
 800732a:	2301      	movne	r3, #1
 800732c:	2300      	moveq	r3, #0
 800732e:	42a9      	cmp	r1, r5
 8007330:	bf0c      	ite	eq
 8007332:	2300      	moveq	r3, #0
 8007334:	f003 0301 	andne.w	r3, r3, #1
 8007338:	2b00      	cmp	r3, #0
 800733a:	f000 81aa 	beq.w	8007692 <HAL_DMAEx_MultiBufferStart_IT+0x88e>
 800733e:	4b96      	ldr	r3, [pc, #600]	; (8007598 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 8007340:	4299      	cmp	r1, r3
 8007342:	f000 81a6 	beq.w	8007692 <HAL_DMAEx_MultiBufferStart_IT+0x88e>
 8007346:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800734a:	4b94      	ldr	r3, [pc, #592]	; (800759c <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 800734c:	4a94      	ldr	r2, [pc, #592]	; (80075a0 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 800734e:	4d95      	ldr	r5, [pc, #596]	; (80075a4 <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 8007350:	4299      	cmp	r1, r3
 8007352:	bf18      	it	ne
 8007354:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007356:	f8c2 03cc 	str.w	r0, [r2, #972]	; 0x3cc
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800735a:	bf14      	ite	ne
 800735c:	2301      	movne	r3, #1
 800735e:	2300      	moveq	r3, #0
 8007360:	42a9      	cmp	r1, r5
 8007362:	bf0c      	ite	eq
 8007364:	2300      	moveq	r3, #0
 8007366:	f003 0301 	andne.w	r3, r3, #1
 800736a:	2b00      	cmp	r3, #0
 800736c:	f000 818e 	beq.w	800768c <HAL_DMAEx_MultiBufferStart_IT+0x888>
 8007370:	4b89      	ldr	r3, [pc, #548]	; (8007598 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 8007372:	4299      	cmp	r1, r3
 8007374:	f000 818a 	beq.w	800768c <HAL_DMAEx_MultiBufferStart_IT+0x888>
 8007378:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800737c:	4b87      	ldr	r3, [pc, #540]	; (800759c <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 800737e:	4a88      	ldr	r2, [pc, #544]	; (80075a0 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 8007380:	4d88      	ldr	r5, [pc, #544]	; (80075a4 <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 8007382:	4299      	cmp	r1, r3
 8007384:	bf18      	it	ne
 8007386:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007388:	f8c2 03cc 	str.w	r0, [r2, #972]	; 0x3cc
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800738c:	bf14      	ite	ne
 800738e:	2301      	movne	r3, #1
 8007390:	2300      	moveq	r3, #0
 8007392:	42a9      	cmp	r1, r5
 8007394:	bf0c      	ite	eq
 8007396:	2300      	moveq	r3, #0
 8007398:	f003 0301 	andne.w	r3, r3, #1
 800739c:	2b00      	cmp	r3, #0
 800739e:	f000 8172 	beq.w	8007686 <HAL_DMAEx_MultiBufferStart_IT+0x882>
 80073a2:	4b7d      	ldr	r3, [pc, #500]	; (8007598 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 80073a4:	4299      	cmp	r1, r3
 80073a6:	f000 816e 	beq.w	8007686 <HAL_DMAEx_MultiBufferStart_IT+0x882>
 80073aa:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80073ae:	e579      	b.n	8006ea4 <HAL_DMAEx_MultiBufferStart_IT+0xa0>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80073b0:	3b48      	subs	r3, #72	; 0x48
 80073b2:	f5a0 707a 	sub.w	r0, r0, #1000	; 0x3e8
 80073b6:	3218      	adds	r2, #24
 80073b8:	4299      	cmp	r1, r3
 80073ba:	bf18      	it	ne
 80073bc:	4281      	cmpne	r1, r0
 80073be:	bf14      	ite	ne
 80073c0:	2301      	movne	r3, #1
 80073c2:	2300      	moveq	r3, #0
 80073c4:	4291      	cmp	r1, r2
 80073c6:	bf0c      	ite	eq
 80073c8:	2300      	moveq	r3, #0
 80073ca:	f003 0301 	andne.w	r3, r3, #1
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f000 816b 	beq.w	80076aa <HAL_DMAEx_MultiBufferStart_IT+0x8a6>
 80073d4:	4b70      	ldr	r3, [pc, #448]	; (8007598 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 80073d6:	4299      	cmp	r1, r3
 80073d8:	f000 8167 	beq.w	80076aa <HAL_DMAEx_MultiBufferStart_IT+0x8a6>
 80073dc:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
 80073e0:	e604      	b.n	8006fec <HAL_DMAEx_MultiBufferStart_IT+0x1e8>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80073e2:	4b6f      	ldr	r3, [pc, #444]	; (80075a0 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 80073e4:	486d      	ldr	r0, [pc, #436]	; (800759c <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 80073e6:	4a6f      	ldr	r2, [pc, #444]	; (80075a4 <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 80073e8:	4299      	cmp	r1, r3
 80073ea:	bf18      	it	ne
 80073ec:	4281      	cmpne	r1, r0
 80073ee:	bf14      	ite	ne
 80073f0:	2301      	movne	r3, #1
 80073f2:	2300      	moveq	r3, #0
 80073f4:	4291      	cmp	r1, r2
 80073f6:	bf0c      	ite	eq
 80073f8:	2300      	moveq	r3, #0
 80073fa:	f003 0301 	andne.w	r3, r3, #1
 80073fe:	2b00      	cmp	r3, #0
 8007400:	f000 8159 	beq.w	80076b6 <HAL_DMAEx_MultiBufferStart_IT+0x8b2>
 8007404:	4b64      	ldr	r3, [pc, #400]	; (8007598 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 8007406:	4299      	cmp	r1, r3
 8007408:	f000 8155 	beq.w	80076b6 <HAL_DMAEx_MultiBufferStart_IT+0x8b2>
 800740c:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8007410:	e603      	b.n	800701a <HAL_DMAEx_MultiBufferStart_IT+0x216>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007412:	4b62      	ldr	r3, [pc, #392]	; (800759c <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 8007414:	4862      	ldr	r0, [pc, #392]	; (80075a0 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 8007416:	4a63      	ldr	r2, [pc, #396]	; (80075a4 <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 8007418:	4299      	cmp	r1, r3
 800741a:	bf18      	it	ne
 800741c:	4281      	cmpne	r1, r0
 800741e:	bf14      	ite	ne
 8007420:	2301      	movne	r3, #1
 8007422:	2300      	moveq	r3, #0
 8007424:	4291      	cmp	r1, r2
 8007426:	bf0c      	ite	eq
 8007428:	2300      	moveq	r3, #0
 800742a:	f003 0301 	andne.w	r3, r3, #1
 800742e:	2b00      	cmp	r3, #0
 8007430:	f000 813e 	beq.w	80076b0 <HAL_DMAEx_MultiBufferStart_IT+0x8ac>
 8007434:	4b58      	ldr	r3, [pc, #352]	; (8007598 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 8007436:	4299      	cmp	r1, r3
 8007438:	f000 813a 	beq.w	80076b0 <HAL_DMAEx_MultiBufferStart_IT+0x8ac>
 800743c:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8007440:	e619      	b.n	8007076 <HAL_DMAEx_MultiBufferStart_IT+0x272>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007442:	4b56      	ldr	r3, [pc, #344]	; (800759c <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 8007444:	4856      	ldr	r0, [pc, #344]	; (80075a0 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 8007446:	4a57      	ldr	r2, [pc, #348]	; (80075a4 <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 8007448:	4299      	cmp	r1, r3
 800744a:	bf18      	it	ne
 800744c:	4281      	cmpne	r1, r0
 800744e:	bf14      	ite	ne
 8007450:	2301      	movne	r3, #1
 8007452:	2300      	moveq	r3, #0
 8007454:	4291      	cmp	r1, r2
 8007456:	bf0c      	ite	eq
 8007458:	2300      	moveq	r3, #0
 800745a:	f003 0301 	andne.w	r3, r3, #1
 800745e:	2b00      	cmp	r3, #0
 8007460:	f000 812c 	beq.w	80076bc <HAL_DMAEx_MultiBufferStart_IT+0x8b8>
 8007464:	4b4c      	ldr	r3, [pc, #304]	; (8007598 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 8007466:	4299      	cmp	r1, r3
 8007468:	f000 8128 	beq.w	80076bc <HAL_DMAEx_MultiBufferStart_IT+0x8b8>
 800746c:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8007470:	e5ea      	b.n	8007048 <HAL_DMAEx_MultiBufferStart_IT+0x244>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8007472:	4b4a      	ldr	r3, [pc, #296]	; (800759c <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 8007474:	484a      	ldr	r0, [pc, #296]	; (80075a0 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 8007476:	4a4b      	ldr	r2, [pc, #300]	; (80075a4 <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 8007478:	4299      	cmp	r1, r3
 800747a:	bf18      	it	ne
 800747c:	4281      	cmpne	r1, r0
 800747e:	bf14      	ite	ne
 8007480:	2301      	movne	r3, #1
 8007482:	2300      	moveq	r3, #0
 8007484:	4291      	cmp	r1, r2
 8007486:	bf0c      	ite	eq
 8007488:	2300      	moveq	r3, #0
 800748a:	f003 0301 	andne.w	r3, r3, #1
 800748e:	2b00      	cmp	r3, #0
 8007490:	f000 8108 	beq.w	80076a4 <HAL_DMAEx_MultiBufferStart_IT+0x8a0>
 8007494:	4b40      	ldr	r3, [pc, #256]	; (8007598 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 8007496:	4299      	cmp	r1, r3
 8007498:	f000 8104 	beq.w	80076a4 <HAL_DMAEx_MultiBufferStart_IT+0x8a0>
 800749c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80074a0:	e53e      	b.n	8006f20 <HAL_DMAEx_MultiBufferStart_IT+0x11c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80074a2:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 80074a6:	f500 6083 	add.w	r0, r0, #1048	; 0x418
 80074aa:	3218      	adds	r2, #24
 80074ac:	4299      	cmp	r1, r3
 80074ae:	bf18      	it	ne
 80074b0:	4281      	cmpne	r1, r0
 80074b2:	bf14      	ite	ne
 80074b4:	2301      	movne	r3, #1
 80074b6:	2300      	moveq	r3, #0
 80074b8:	4291      	cmp	r1, r2
 80074ba:	bf0c      	ite	eq
 80074bc:	2300      	moveq	r3, #0
 80074be:	f003 0301 	andne.w	r3, r3, #1
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	f000 80fd 	beq.w	80076c2 <HAL_DMAEx_MultiBufferStart_IT+0x8be>
 80074c8:	4b33      	ldr	r3, [pc, #204]	; (8007598 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 80074ca:	4299      	cmp	r1, r3
 80074cc:	f000 80f9 	beq.w	80076c2 <HAL_DMAEx_MultiBufferStart_IT+0x8be>
 80074d0:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80074d4:	e615      	b.n	8007102 <HAL_DMAEx_MultiBufferStart_IT+0x2fe>
 80074d6:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 80074da:	3018      	adds	r0, #24
 80074dc:	3218      	adds	r2, #24
 80074de:	4299      	cmp	r1, r3
 80074e0:	bf18      	it	ne
 80074e2:	4281      	cmpne	r1, r0
 80074e4:	bf14      	ite	ne
 80074e6:	2301      	movne	r3, #1
 80074e8:	2300      	moveq	r3, #0
 80074ea:	4291      	cmp	r1, r2
 80074ec:	bf0c      	ite	eq
 80074ee:	2300      	moveq	r3, #0
 80074f0:	f003 0301 	andne.w	r3, r3, #1
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f000 80ea 	beq.w	80076ce <HAL_DMAEx_MultiBufferStart_IT+0x8ca>
 80074fa:	4b27      	ldr	r3, [pc, #156]	; (8007598 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 80074fc:	4299      	cmp	r1, r3
 80074fe:	f000 80e6 	beq.w	80076ce <HAL_DMAEx_MultiBufferStart_IT+0x8ca>
 8007502:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8007506:	e670      	b.n	80071ea <HAL_DMAEx_MultiBufferStart_IT+0x3e6>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007508:	4b25      	ldr	r3, [pc, #148]	; (80075a0 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 800750a:	4824      	ldr	r0, [pc, #144]	; (800759c <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 800750c:	4a25      	ldr	r2, [pc, #148]	; (80075a4 <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 800750e:	4299      	cmp	r1, r3
 8007510:	bf18      	it	ne
 8007512:	4281      	cmpne	r1, r0
 8007514:	bf14      	ite	ne
 8007516:	2301      	movne	r3, #1
 8007518:	2300      	moveq	r3, #0
 800751a:	4291      	cmp	r1, r2
 800751c:	bf0c      	ite	eq
 800751e:	2300      	moveq	r3, #0
 8007520:	f003 0301 	andne.w	r3, r3, #1
 8007524:	2b00      	cmp	r3, #0
 8007526:	f000 80de 	beq.w	80076e6 <HAL_DMAEx_MultiBufferStart_IT+0x8e2>
 800752a:	4b1b      	ldr	r3, [pc, #108]	; (8007598 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 800752c:	4299      	cmp	r1, r3
 800752e:	f000 80da 	beq.w	80076e6 <HAL_DMAEx_MultiBufferStart_IT+0x8e2>
 8007532:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8007536:	e66f      	b.n	8007218 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8007538:	4b18      	ldr	r3, [pc, #96]	; (800759c <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 800753a:	4819      	ldr	r0, [pc, #100]	; (80075a0 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 800753c:	4a19      	ldr	r2, [pc, #100]	; (80075a4 <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 800753e:	4299      	cmp	r1, r3
 8007540:	bf18      	it	ne
 8007542:	4281      	cmpne	r1, r0
 8007544:	bf14      	ite	ne
 8007546:	2301      	movne	r3, #1
 8007548:	2300      	moveq	r3, #0
 800754a:	4291      	cmp	r1, r2
 800754c:	bf0c      	ite	eq
 800754e:	2300      	moveq	r3, #0
 8007550:	f003 0301 	andne.w	r3, r3, #1
 8007554:	2b00      	cmp	r3, #0
 8007556:	f000 80c0 	beq.w	80076da <HAL_DMAEx_MultiBufferStart_IT+0x8d6>
 800755a:	4b0f      	ldr	r3, [pc, #60]	; (8007598 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 800755c:	4299      	cmp	r1, r3
 800755e:	f000 80bc 	beq.w	80076da <HAL_DMAEx_MultiBufferStart_IT+0x8d6>
 8007562:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8007566:	e5e4      	b.n	8007132 <HAL_DMAEx_MultiBufferStart_IT+0x32e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007568:	4b0d      	ldr	r3, [pc, #52]	; (80075a0 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 800756a:	480c      	ldr	r0, [pc, #48]	; (800759c <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 800756c:	4a0d      	ldr	r2, [pc, #52]	; (80075a4 <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 800756e:	4299      	cmp	r1, r3
 8007570:	bf18      	it	ne
 8007572:	4281      	cmpne	r1, r0
 8007574:	bf14      	ite	ne
 8007576:	2301      	movne	r3, #1
 8007578:	2300      	moveq	r3, #0
 800757a:	4291      	cmp	r1, r2
 800757c:	bf0c      	ite	eq
 800757e:	2300      	moveq	r3, #0
 8007580:	f003 0301 	andne.w	r3, r3, #1
 8007584:	2b00      	cmp	r3, #0
 8007586:	f000 80b4 	beq.w	80076f2 <HAL_DMAEx_MultiBufferStart_IT+0x8ee>
 800758a:	4b03      	ldr	r3, [pc, #12]	; (8007598 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 800758c:	4299      	cmp	r1, r3
 800758e:	f000 80b0 	beq.w	80076f2 <HAL_DMAEx_MultiBufferStart_IT+0x8ee>
 8007592:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8007596:	e66e      	b.n	8007276 <HAL_DMAEx_MultiBufferStart_IT+0x472>
 8007598:	400264a0 	.word	0x400264a0
 800759c:	40026440 	.word	0x40026440
 80075a0:	40026040 	.word	0x40026040
 80075a4:	400260a0 	.word	0x400260a0
 80075a8:	4b55      	ldr	r3, [pc, #340]	; (8007700 <HAL_DMAEx_MultiBufferStart_IT+0x8fc>)
 80075aa:	4856      	ldr	r0, [pc, #344]	; (8007704 <HAL_DMAEx_MultiBufferStart_IT+0x900>)
 80075ac:	4a56      	ldr	r2, [pc, #344]	; (8007708 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 80075ae:	4299      	cmp	r1, r3
 80075b0:	bf18      	it	ne
 80075b2:	4281      	cmpne	r1, r0
 80075b4:	bf14      	ite	ne
 80075b6:	2301      	movne	r3, #1
 80075b8:	2300      	moveq	r3, #0
 80075ba:	4291      	cmp	r1, r2
 80075bc:	bf0c      	ite	eq
 80075be:	2300      	moveq	r3, #0
 80075c0:	f003 0301 	andne.w	r3, r3, #1
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f000 8085 	beq.w	80076d4 <HAL_DMAEx_MultiBufferStart_IT+0x8d0>
 80075ca:	4b50      	ldr	r3, [pc, #320]	; (800770c <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 80075cc:	4299      	cmp	r1, r3
 80075ce:	f000 8081 	beq.w	80076d4 <HAL_DMAEx_MultiBufferStart_IT+0x8d0>
 80075d2:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80075d6:	e5db      	b.n	8007190 <HAL_DMAEx_MultiBufferStart_IT+0x38c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80075d8:	4b4a      	ldr	r3, [pc, #296]	; (8007704 <HAL_DMAEx_MultiBufferStart_IT+0x900>)
 80075da:	4849      	ldr	r0, [pc, #292]	; (8007700 <HAL_DMAEx_MultiBufferStart_IT+0x8fc>)
 80075dc:	4a4a      	ldr	r2, [pc, #296]	; (8007708 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 80075de:	4299      	cmp	r1, r3
 80075e0:	bf18      	it	ne
 80075e2:	4281      	cmpne	r1, r0
 80075e4:	bf14      	ite	ne
 80075e6:	2301      	movne	r3, #1
 80075e8:	2300      	moveq	r3, #0
 80075ea:	4291      	cmp	r1, r2
 80075ec:	bf0c      	ite	eq
 80075ee:	2300      	moveq	r3, #0
 80075f0:	f003 0301 	andne.w	r3, r3, #1
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d079      	beq.n	80076ec <HAL_DMAEx_MultiBufferStart_IT+0x8e8>
 80075f8:	4b44      	ldr	r3, [pc, #272]	; (800770c <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 80075fa:	4299      	cmp	r1, r3
 80075fc:	d076      	beq.n	80076ec <HAL_DMAEx_MultiBufferStart_IT+0x8e8>
 80075fe:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8007602:	e621      	b.n	8007248 <HAL_DMAEx_MultiBufferStart_IT+0x444>
 8007604:	4b3e      	ldr	r3, [pc, #248]	; (8007700 <HAL_DMAEx_MultiBufferStart_IT+0x8fc>)
 8007606:	483f      	ldr	r0, [pc, #252]	; (8007704 <HAL_DMAEx_MultiBufferStart_IT+0x900>)
 8007608:	4a3f      	ldr	r2, [pc, #252]	; (8007708 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 800760a:	4299      	cmp	r1, r3
 800760c:	bf18      	it	ne
 800760e:	4281      	cmpne	r1, r0
 8007610:	bf14      	ite	ne
 8007612:	2301      	movne	r3, #1
 8007614:	2300      	moveq	r3, #0
 8007616:	4291      	cmp	r1, r2
 8007618:	bf0c      	ite	eq
 800761a:	2300      	moveq	r3, #0
 800761c:	f003 0301 	andne.w	r3, r3, #1
 8007620:	2b00      	cmp	r3, #0
 8007622:	d05d      	beq.n	80076e0 <HAL_DMAEx_MultiBufferStart_IT+0x8dc>
 8007624:	4b39      	ldr	r3, [pc, #228]	; (800770c <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 8007626:	4299      	cmp	r1, r3
 8007628:	d05a      	beq.n	80076e0 <HAL_DMAEx_MultiBufferStart_IT+0x8dc>
 800762a:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800762e:	e598      	b.n	8007162 <HAL_DMAEx_MultiBufferStart_IT+0x35e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8007630:	4b34      	ldr	r3, [pc, #208]	; (8007704 <HAL_DMAEx_MultiBufferStart_IT+0x900>)
 8007632:	4833      	ldr	r0, [pc, #204]	; (8007700 <HAL_DMAEx_MultiBufferStart_IT+0x8fc>)
 8007634:	4a34      	ldr	r2, [pc, #208]	; (8007708 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 8007636:	4299      	cmp	r1, r3
 8007638:	bf18      	it	ne
 800763a:	4281      	cmpne	r1, r0
 800763c:	bf14      	ite	ne
 800763e:	2301      	movne	r3, #1
 8007640:	2300      	moveq	r3, #0
 8007642:	4291      	cmp	r1, r2
 8007644:	bf0c      	ite	eq
 8007646:	2300      	moveq	r3, #0
 8007648:	f003 0301 	andne.w	r3, r3, #1
 800764c:	2b00      	cmp	r3, #0
 800764e:	d053      	beq.n	80076f8 <HAL_DMAEx_MultiBufferStart_IT+0x8f4>
 8007650:	4b2e      	ldr	r3, [pc, #184]	; (800770c <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 8007652:	4299      	cmp	r1, r3
 8007654:	d050      	beq.n	80076f8 <HAL_DMAEx_MultiBufferStart_IT+0x8f4>
 8007656:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800765a:	e47b      	b.n	8006f54 <HAL_DMAEx_MultiBufferStart_IT+0x150>
 800765c:	4b29      	ldr	r3, [pc, #164]	; (8007704 <HAL_DMAEx_MultiBufferStart_IT+0x900>)
 800765e:	4828      	ldr	r0, [pc, #160]	; (8007700 <HAL_DMAEx_MultiBufferStart_IT+0x8fc>)
 8007660:	4a29      	ldr	r2, [pc, #164]	; (8007708 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 8007662:	4299      	cmp	r1, r3
 8007664:	bf18      	it	ne
 8007666:	4281      	cmpne	r1, r0
 8007668:	bf14      	ite	ne
 800766a:	2301      	movne	r3, #1
 800766c:	2300      	moveq	r3, #0
 800766e:	4291      	cmp	r1, r2
 8007670:	bf0c      	ite	eq
 8007672:	2300      	moveq	r3, #0
 8007674:	f003 0301 	andne.w	r3, r3, #1
 8007678:	b333      	cbz	r3, 80076c8 <HAL_DMAEx_MultiBufferStart_IT+0x8c4>
 800767a:	4b24      	ldr	r3, [pc, #144]	; (800770c <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 800767c:	4299      	cmp	r1, r3
 800767e:	d023      	beq.n	80076c8 <HAL_DMAEx_MultiBufferStart_IT+0x8c4>
 8007680:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8007684:	e476      	b.n	8006f74 <HAL_DMAEx_MultiBufferStart_IT+0x170>
 8007686:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800768a:	e40b      	b.n	8006ea4 <HAL_DMAEx_MultiBufferStart_IT+0xa0>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800768c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8007690:	e674      	b.n	800737c <HAL_DMAEx_MultiBufferStart_IT+0x578>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007692:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007696:	e658      	b.n	800734a <HAL_DMAEx_MultiBufferStart_IT+0x546>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007698:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800769c:	e63c      	b.n	8007318 <HAL_DMAEx_MultiBufferStart_IT+0x514>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800769e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80076a2:	e620      	b.n	80072e6 <HAL_DMAEx_MultiBufferStart_IT+0x4e2>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80076a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80076a8:	e43a      	b.n	8006f20 <HAL_DMAEx_MultiBufferStart_IT+0x11c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80076aa:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
 80076ae:	e49d      	b.n	8006fec <HAL_DMAEx_MultiBufferStart_IT+0x1e8>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80076b0:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 80076b4:	e4df      	b.n	8007076 <HAL_DMAEx_MultiBufferStart_IT+0x272>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80076b6:	f44f 1580 	mov.w	r5, #1048576	; 0x100000
 80076ba:	e4ae      	b.n	800701a <HAL_DMAEx_MultiBufferStart_IT+0x216>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80076bc:	f44f 2500 	mov.w	r5, #524288	; 0x80000
 80076c0:	e4c2      	b.n	8007048 <HAL_DMAEx_MultiBufferStart_IT+0x244>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80076c2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80076c6:	e51c      	b.n	8007102 <HAL_DMAEx_MultiBufferStart_IT+0x2fe>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80076c8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80076cc:	e452      	b.n	8006f74 <HAL_DMAEx_MultiBufferStart_IT+0x170>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80076ce:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80076d2:	e58a      	b.n	80071ea <HAL_DMAEx_MultiBufferStart_IT+0x3e6>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80076d4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80076d8:	e55a      	b.n	8007190 <HAL_DMAEx_MultiBufferStart_IT+0x38c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80076da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80076de:	e528      	b.n	8007132 <HAL_DMAEx_MultiBufferStart_IT+0x32e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80076e0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80076e4:	e53d      	b.n	8007162 <HAL_DMAEx_MultiBufferStart_IT+0x35e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80076e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80076ea:	e595      	b.n	8007218 <HAL_DMAEx_MultiBufferStart_IT+0x414>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80076ec:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80076f0:	e5aa      	b.n	8007248 <HAL_DMAEx_MultiBufferStart_IT+0x444>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80076f2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80076f6:	e5be      	b.n	8007276 <HAL_DMAEx_MultiBufferStart_IT+0x472>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80076f8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80076fc:	e42a      	b.n	8006f54 <HAL_DMAEx_MultiBufferStart_IT+0x150>
 80076fe:	bf00      	nop
 8007700:	40026040 	.word	0x40026040
 8007704:	40026440 	.word	0x40026440
 8007708:	400260a0 	.word	0x400260a0
 800770c:	400264a0 	.word	0x400264a0

08007710 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8007710:	b530      	push	{r4, r5, lr}
 8007712:	4605      	mov	r5, r0
 8007714:	b083      	sub	sp, #12
  __IO uint32_t tmpreg = 0;
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8007716:	f241 0418 	movw	r4, #4120	; 0x1018
  __IO uint32_t tmpreg = 0;
 800771a:	2200      	movs	r2, #0
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800771c:	682b      	ldr	r3, [r5, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800771e:	2001      	movs	r0, #1
  __IO uint32_t tmpreg = 0;
 8007720:	9201      	str	r2, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8007722:	591a      	ldr	r2, [r3, r4]
 8007724:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007728:	511a      	str	r2, [r3, r4]
  tmpreg = (heth->Instance)->DMAOMR;
 800772a:	591b      	ldr	r3, [r3, r4]
 800772c:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800772e:	f7fe f81b 	bl	8005768 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8007732:	682b      	ldr	r3, [r5, #0]
 8007734:	9a01      	ldr	r2, [sp, #4]
 8007736:	511a      	str	r2, [r3, r4]
}
 8007738:	b003      	add	sp, #12
 800773a:	bd30      	pop	{r4, r5, pc}

0800773c <ETH_MACDMAConfig>:
{
 800773c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800773e:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8007740:	2900      	cmp	r1, #0
 8007742:	d164      	bne.n	800780e <ETH_MACDMAConfig+0xd2>
 8007744:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
 8007748:	430b      	orrs	r3, r1
 800774a:	f443 7100 	orr.w	r1, r3, #512	; 0x200
  tmpreg = (heth->Instance)->MACCR;
 800774e:	6822      	ldr	r2, [r4, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007750:	2001      	movs	r0, #1
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8007752:	69e5      	ldr	r5, [r4, #28]
  tmpreg = (heth->Instance)->MACCR;
 8007754:	6816      	ldr	r6, [r2, #0]
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8007756:	4b32      	ldr	r3, [pc, #200]	; (8007820 <ETH_MACDMAConfig+0xe4>)
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8007758:	2d00      	cmp	r5, #0
    tmpreg = (heth->Instance)->DMAOMR;
 800775a:	f241 0518 	movw	r5, #4120	; 0x1018
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800775e:	ea03 0306 	and.w	r3, r3, r6
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8007762:	f04f 0600 	mov.w	r6, #0
 8007766:	ea43 0301 	orr.w	r3, r3, r1
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800776a:	bf14      	ite	ne
 800776c:	4631      	movne	r1, r6
 800776e:	f44f 6180 	moveq.w	r1, #1024	; 0x400
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8007772:	430b      	orrs	r3, r1
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8007774:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 8007776:	6817      	ldr	r7, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007778:	f7fd fff6 	bl	8005768 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800777c:	6823      	ldr	r3, [r4, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800777e:	2240      	movs	r2, #64	; 0x40
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8007780:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg; 
 8007782:	601f      	str	r7, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8007784:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 8007786:	685f      	ldr	r7, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8007788:	f7fd ffee 	bl	8005768 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 800778c:	6823      	ldr	r3, [r4, #0]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800778e:	f64f 7141 	movw	r1, #65345	; 0xff41
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8007792:	2001      	movs	r0, #1
   (heth->Instance)->MACFFR = tmpreg;
 8007794:	605f      	str	r7, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8007796:	609e      	str	r6, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8007798:	60de      	str	r6, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 800779a:	699a      	ldr	r2, [r3, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800779c:	400a      	ands	r2, r1
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800779e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80077a2:	619a      	str	r2, [r3, #24]
   tmpreg = (heth->Instance)->MACFCR;
 80077a4:	699f      	ldr	r7, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80077a6:	f7fd ffdf 	bl	8005768 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80077aa:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80077ac:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg;
 80077ae:	619f      	str	r7, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80077b0:	61de      	str	r6, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 80077b2:	69de      	ldr	r6, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80077b4:	f7fd ffd8 	bl	8005768 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80077b8:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80077ba:	2001      	movs	r0, #1
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80077bc:	4919      	ldr	r1, [pc, #100]	; (8007824 <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->MACVLANTR = tmpreg;
 80077be:	61de      	str	r6, [r3, #28]
    tmpreg = (heth->Instance)->DMAOMR;
 80077c0:	595a      	ldr	r2, [r3, r5]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80077c2:	4011      	ands	r1, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80077c4:	4a18      	ldr	r2, [pc, #96]	; (8007828 <ETH_MACDMAConfig+0xec>)
 80077c6:	430a      	orrs	r2, r1
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80077c8:	515a      	str	r2, [r3, r5]
    tmpreg = (heth->Instance)->DMAOMR;
 80077ca:	595e      	ldr	r6, [r3, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80077cc:	f7fd ffcc 	bl	8005768 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80077d0:	6823      	ldr	r3, [r4, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80077d2:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80077d4:	4a15      	ldr	r2, [pc, #84]	; (800782c <ETH_MACDMAConfig+0xf0>)
    (heth->Instance)->DMAOMR = tmpreg;
 80077d6:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80077d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077dc:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 80077de:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80077e0:	f7fd ffc2 	bl	8005768 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80077e4:	6823      	ldr	r3, [r4, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80077e6:	69a2      	ldr	r2, [r4, #24]
     (heth->Instance)->DMABMR = tmpreg;
 80077e8:	f503 5180 	add.w	r1, r3, #4096	; 0x1000
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80077ec:	2a01      	cmp	r2, #1
     (heth->Instance)->DMABMR = tmpreg;
 80077ee:	600d      	str	r5, [r1, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80077f0:	d105      	bne.n	80077fe <ETH_MACDMAConfig+0xc2>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80077f2:	f241 011c 	movw	r1, #4124	; 0x101c
 80077f6:	4a0e      	ldr	r2, [pc, #56]	; (8007830 <ETH_MACDMAConfig+0xf4>)
 80077f8:	5858      	ldr	r0, [r3, r1]
 80077fa:	4302      	orrs	r2, r0
 80077fc:	505a      	str	r2, [r3, r1]
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80077fe:	6963      	ldr	r3, [r4, #20]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8007800:	490c      	ldr	r1, [pc, #48]	; (8007834 <ETH_MACDMAConfig+0xf8>)
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8007802:	8898      	ldrh	r0, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8007804:	4a0c      	ldr	r2, [pc, #48]	; (8007838 <ETH_MACDMAConfig+0xfc>)
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8007806:	6008      	str	r0, [r1, #0]
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8007808:	681b      	ldr	r3, [r3, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800780a:	6013      	str	r3, [r2, #0]
}
 800780c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800780e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    (heth->Init).Speed = ETH_SPEED_100M;
 8007812:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007816:	f44f 4194 	mov.w	r1, #18944	; 0x4a00
 800781a:	e9c0 3202 	strd	r3, r2, [r0, #8]
 800781e:	e796      	b.n	800774e <ETH_MACDMAConfig+0x12>
 8007820:	ff20810f 	.word	0xff20810f
 8007824:	f8de3f23 	.word	0xf8de3f23
 8007828:	02200004 	.word	0x02200004
 800782c:	02c12080 	.word	0x02c12080
 8007830:	00010040 	.word	0x00010040
 8007834:	40028040 	.word	0x40028040
 8007838:	40028044 	.word	0x40028044

0800783c <HAL_ETH_DMATxDescListInit>:
{
 800783c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(heth);
 8007840:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8007844:	2c01      	cmp	r4, #1
 8007846:	d03f      	beq.n	80078c8 <HAL_ETH_DMATxDescListInit+0x8c>
 8007848:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800784a:	2402      	movs	r4, #2
  heth->TxDesc = DMATxDescTab;
 800784c:	62c1      	str	r1, [r0, #44]	; 0x2c
  __HAL_LOCK(heth);
 800784e:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8007852:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  for(i=0; i < TxBuffCount; i++)
 8007856:	b34b      	cbz	r3, 80078ac <HAL_ETH_DMATxDescListInit+0x70>
 8007858:	f103 3eff 	add.w	lr, r3, #4294967295
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800785c:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8007860:	eb01 1343 	add.w	r3, r1, r3, lsl #5
 8007864:	460c      	mov	r4, r1
 8007866:	2500      	movs	r5, #0
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8007868:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800786c:	e007      	b.n	800787e <HAL_ETH_DMATxDescListInit+0x42>
  for(i=0; i < TxBuffCount; i++)
 800786e:	42b3      	cmp	r3, r6
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8007870:	60e6      	str	r6, [r4, #12]
 8007872:	f105 0501 	add.w	r5, r5, #1
 8007876:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
 800787a:	4634      	mov	r4, r6
  for(i=0; i < TxBuffCount; i++)
 800787c:	d016      	beq.n	80078ac <HAL_ETH_DMATxDescListInit+0x70>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 800787e:	f104 0620 	add.w	r6, r4, #32
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8007882:	f8c4 c000 	str.w	ip, [r4]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8007886:	60a2      	str	r2, [r4, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8007888:	f1b8 0f00 	cmp.w	r8, #0
 800788c:	d103      	bne.n	8007896 <HAL_ETH_DMATxDescListInit+0x5a>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800788e:	6827      	ldr	r7, [r4, #0]
 8007890:	f447 0740 	orr.w	r7, r7, #12582912	; 0xc00000
 8007894:	6027      	str	r7, [r4, #0]
    if(i < (TxBuffCount-1))
 8007896:	4575      	cmp	r5, lr
 8007898:	d3e9      	bcc.n	800786e <HAL_ETH_DMATxDescListInit+0x32>
 800789a:	f104 0620 	add.w	r6, r4, #32
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800789e:	60e1      	str	r1, [r4, #12]
 80078a0:	3501      	adds	r5, #1
 80078a2:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
  for(i=0; i < TxBuffCount; i++)
 80078a6:	42b3      	cmp	r3, r6
 80078a8:	4634      	mov	r4, r6
 80078aa:	d1e8      	bne.n	800787e <HAL_ETH_DMATxDescListInit+0x42>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80078ac:	6805      	ldr	r5, [r0, #0]
  __HAL_UNLOCK(heth);
 80078ae:	2300      	movs	r3, #0
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80078b0:	f241 0210 	movw	r2, #4112	; 0x1010
  heth->State= HAL_ETH_STATE_READY;
 80078b4:	2401      	movs	r4, #1
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80078b6:	50a9      	str	r1, [r5, r2]
  return HAL_OK;
 80078b8:	461a      	mov	r2, r3
  heth->State= HAL_ETH_STATE_READY;
 80078ba:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80078be:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
}
 80078c2:	4610      	mov	r0, r2
 80078c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(heth);
 80078c8:	2202      	movs	r2, #2
}
 80078ca:	4610      	mov	r0, r2
 80078cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080078d0 <HAL_ETH_DMARxDescListInit>:
{
 80078d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 80078d2:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 80078d6:	2c01      	cmp	r4, #1
 80078d8:	d038      	beq.n	800794c <HAL_ETH_DMARxDescListInit+0x7c>
 80078da:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 80078dc:	2402      	movs	r4, #2
  heth->RxDesc = DMARxDescTab; 
 80078de:	6281      	str	r1, [r0, #40]	; 0x28
  __HAL_LOCK(heth);
 80078e0:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80078e4:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  for(i=0; i < RxBuffCount; i++)
 80078e8:	b31b      	cbz	r3, 8007932 <HAL_ETH_DMARxDescListInit+0x62>
 80078ea:	f103 3eff 	add.w	lr, r3, #4294967295
 80078ee:	460c      	mov	r4, r1
 80078f0:	eb01 1343 	add.w	r3, r1, r3, lsl #5
 80078f4:	2500      	movs	r5, #0
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80078f6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80078fa:	f244 57f4 	movw	r7, #17908	; 0x45f4
 80078fe:	e007      	b.n	8007910 <HAL_ETH_DMARxDescListInit+0x40>
  for(i=0; i < RxBuffCount; i++)
 8007900:	42b3      	cmp	r3, r6
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8007902:	60e6      	str	r6, [r4, #12]
 8007904:	f105 0501 	add.w	r5, r5, #1
 8007908:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
 800790c:	4634      	mov	r4, r6
  for(i=0; i < RxBuffCount; i++)
 800790e:	d010      	beq.n	8007932 <HAL_ETH_DMARxDescListInit+0x62>
    if(i < (RxBuffCount-1))
 8007910:	4575      	cmp	r5, lr
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8007912:	f8c4 c000 	str.w	ip, [r4]
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8007916:	f104 0620 	add.w	r6, r4, #32
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800791a:	e9c4 7201 	strd	r7, r2, [r4, #4]
    if(i < (RxBuffCount-1))
 800791e:	d3ef      	bcc.n	8007900 <HAL_ETH_DMARxDescListInit+0x30>
 8007920:	f104 0620 	add.w	r6, r4, #32
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8007924:	60e1      	str	r1, [r4, #12]
 8007926:	3501      	adds	r5, #1
 8007928:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
  for(i=0; i < RxBuffCount; i++)
 800792c:	42b3      	cmp	r3, r6
 800792e:	4634      	mov	r4, r6
 8007930:	d1ee      	bne.n	8007910 <HAL_ETH_DMARxDescListInit+0x40>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8007932:	6805      	ldr	r5, [r0, #0]
  __HAL_UNLOCK(heth);
 8007934:	2300      	movs	r3, #0
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8007936:	f241 020c 	movw	r2, #4108	; 0x100c
  heth->State= HAL_ETH_STATE_READY;
 800793a:	2401      	movs	r4, #1
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800793c:	50a9      	str	r1, [r5, r2]
  return HAL_OK;
 800793e:	461a      	mov	r2, r3
  heth->State= HAL_ETH_STATE_READY;
 8007940:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8007944:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
}
 8007948:	4610      	mov	r0, r2
 800794a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(heth);
 800794c:	2202      	movs	r2, #2
}
 800794e:	4610      	mov	r0, r2
 8007950:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007952:	bf00      	nop

08007954 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 8007954:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8007958:	2b01      	cmp	r3, #1
 800795a:	d065      	beq.n	8007a28 <HAL_ETH_TransmitFrame+0xd4>
 800795c:	4602      	mov	r2, r0
  heth->State = HAL_ETH_STATE_BUSY;
 800795e:	2302      	movs	r3, #2
  __HAL_LOCK(heth);
 8007960:	2001      	movs	r0, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8007962:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
  __HAL_LOCK(heth);
 8007966:	f882 0045 	strb.w	r0, [r2, #69]	; 0x45
  if (FrameLength == 0) 
 800796a:	2900      	cmp	r1, #0
 800796c:	d033      	beq.n	80079d6 <HAL_ETH_TransmitFrame+0x82>
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800796e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
{
 8007970:	b4f0      	push	{r4, r5, r6, r7}
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007972:	681c      	ldr	r4, [r3, #0]
 8007974:	2c00      	cmp	r4, #0
 8007976:	db59      	blt.n	8007a2c <HAL_ETH_TransmitFrame+0xd8>
  if (FrameLength > ETH_TX_BUF_SIZE)
 8007978:	f240 50f4 	movw	r0, #1524	; 0x5f4
 800797c:	4281      	cmp	r1, r0
 800797e:	d931      	bls.n	80079e4 <HAL_ETH_TransmitFrame+0x90>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8007980:	4d31      	ldr	r5, [pc, #196]	; (8007a48 <HAL_ETH_TransmitFrame+0xf4>)
 8007982:	fba5 4501 	umull	r4, r5, r5, r1
 8007986:	0aad      	lsrs	r5, r5, #10
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8007988:	fb00 1015 	mls	r0, r0, r5, r1
 800798c:	b340      	cbz	r0, 80079e0 <HAL_ETH_TransmitFrame+0x8c>
      bufcount++;
 800798e:	3501      	adds	r5, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8007990:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
 8007994:	4c2d      	ldr	r4, [pc, #180]	; (8007a4c <HAL_ETH_TransmitFrame+0xf8>)
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8007996:	2000      	movs	r0, #0
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8007998:	f240 56f4 	movw	r6, #1524	; 0x5f4
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 800799c:	fb04 1105 	mla	r1, r4, r5, r1
      if (i == (bufcount-1))
 80079a0:	1e6f      	subs	r7, r5, #1
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80079a2:	f3c1 010c 	ubfx	r1, r1, #0, #13
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80079a6:	681c      	ldr	r4, [r3, #0]
 80079a8:	f024 5440 	bic.w	r4, r4, #805306368	; 0x30000000
 80079ac:	601c      	str	r4, [r3, #0]
      if (i == 0) 
 80079ae:	2800      	cmp	r0, #0
 80079b0:	d044      	beq.n	8007a3c <HAL_ETH_TransmitFrame+0xe8>
      if (i == (bufcount-1))
 80079b2:	4287      	cmp	r7, r0
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80079b4:	605e      	str	r6, [r3, #4]
      if (i == (bufcount-1))
 80079b6:	d104      	bne.n	80079c2 <HAL_ETH_TransmitFrame+0x6e>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80079b8:	681c      	ldr	r4, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80079ba:	6059      	str	r1, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80079bc:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 80079c0:	601c      	str	r4, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80079c2:	681c      	ldr	r4, [r3, #0]
    for (i=0; i< bufcount; i++)
 80079c4:	3001      	adds	r0, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80079c6:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
    for (i=0; i< bufcount; i++)
 80079ca:	42a8      	cmp	r0, r5
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80079cc:	601c      	str	r4, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80079ce:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< bufcount; i++)
 80079d0:	d1e9      	bne.n	80079a6 <HAL_ETH_TransmitFrame+0x52>
 80079d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80079d4:	e013      	b.n	80079fe <HAL_ETH_TransmitFrame+0xaa>
    heth->State = HAL_ETH_STATE_READY;
 80079d6:	f882 0044 	strb.w	r0, [r2, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80079da:	f882 1045 	strb.w	r1, [r2, #69]	; 0x45
    return  HAL_ERROR;                                    
 80079de:	4770      	bx	lr
  if (bufcount == 1)
 80079e0:	2d01      	cmp	r5, #1
 80079e2:	d1d5      	bne.n	8007990 <HAL_ETH_TransmitFrame+0x3c>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80079e4:	6818      	ldr	r0, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80079e6:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80079ea:	68dc      	ldr	r4, [r3, #12]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80079ec:	f040 5040 	orr.w	r0, r0, #805306368	; 0x30000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80079f0:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80079f2:	6018      	str	r0, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80079f4:	6819      	ldr	r1, [r3, #0]
 80079f6:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80079fa:	6019      	str	r1, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80079fc:	62d4      	str	r4, [r2, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80079fe:	6813      	ldr	r3, [r2, #0]
 8007a00:	f241 0114 	movw	r1, #4116	; 0x1014
 8007a04:	5858      	ldr	r0, [r3, r1]
 8007a06:	0740      	lsls	r0, r0, #29
 8007a08:	d505      	bpl.n	8007a16 <HAL_ETH_TransmitFrame+0xc2>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8007a0a:	2504      	movs	r5, #4
    (heth->Instance)->DMATPDR = 0;
 8007a0c:	f241 0004 	movw	r0, #4100	; 0x1004
 8007a10:	2400      	movs	r4, #0
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8007a12:	505d      	str	r5, [r3, r1]
    (heth->Instance)->DMATPDR = 0;
 8007a14:	501c      	str	r4, [r3, r0]
  __HAL_UNLOCK(heth);
 8007a16:	2300      	movs	r3, #0
  heth->State = HAL_ETH_STATE_READY;
 8007a18:	2101      	movs	r1, #1
  return HAL_OK;
 8007a1a:	4618      	mov	r0, r3
  heth->State = HAL_ETH_STATE_READY;
 8007a1c:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8007a20:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
}
 8007a24:	bcf0      	pop	{r4, r5, r6, r7}
 8007a26:	4770      	bx	lr
  __HAL_LOCK(heth);
 8007a28:	2002      	movs	r0, #2
}
 8007a2a:	4770      	bx	lr
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8007a2c:	2112      	movs	r1, #18
    __HAL_UNLOCK(heth);
 8007a2e:	2300      	movs	r3, #0
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8007a30:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8007a34:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
}
 8007a38:	bcf0      	pop	{r4, r5, r6, r7}
 8007a3a:	4770      	bx	lr
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8007a3c:	681c      	ldr	r4, [r3, #0]
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8007a3e:	605e      	str	r6, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8007a40:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8007a44:	601c      	str	r4, [r3, #0]
 8007a46:	e7bc      	b.n	80079c2 <HAL_ETH_TransmitFrame+0x6e>
 8007a48:	ac02b00b 	.word	0xac02b00b
 8007a4c:	fffffa0c 	.word	0xfffffa0c

08007a50 <HAL_ETH_GetReceivedFrame_IT>:
  __HAL_LOCK(heth);
 8007a50:	f890 2045 	ldrb.w	r2, [r0, #69]	; 0x45
 8007a54:	2a01      	cmp	r2, #1
 8007a56:	d032      	beq.n	8007abe <HAL_ETH_GetReceivedFrame_IT+0x6e>
 8007a58:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2101      	movs	r1, #1
  uint32_t descriptorscancounter = 0;
 8007a5e:	2000      	movs	r0, #0
{
 8007a60:	b470      	push	{r4, r5, r6}
  heth->State = HAL_ETH_STATE_BUSY;
 8007a62:	2402      	movs	r4, #2
  __HAL_LOCK(heth);
 8007a64:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
      heth->RxFrameInfos.SegCount = 1;   
 8007a68:	460d      	mov	r5, r1
  heth->State = HAL_ETH_STATE_BUSY;
 8007a6a:	f883 4044 	strb.w	r4, [r3, #68]	; 0x44
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8007a6e:	6811      	ldr	r1, [r2, #0]
 8007a70:	2900      	cmp	r1, #0
 8007a72:	db17      	blt.n	8007aa4 <HAL_ETH_GetReceivedFrame_IT+0x54>
 8007a74:	2804      	cmp	r0, #4
    descriptorscancounter++;
 8007a76:	f100 0001 	add.w	r0, r0, #1
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8007a7a:	d013      	beq.n	8007aa4 <HAL_ETH_GetReceivedFrame_IT+0x54>
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8007a7c:	6811      	ldr	r1, [r2, #0]
 8007a7e:	68d4      	ldr	r4, [r2, #12]
 8007a80:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8007a84:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007a88:	d014      	beq.n	8007ab4 <HAL_ETH_GetReceivedFrame_IT+0x64>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8007a8a:	6816      	ldr	r6, [r2, #0]
 8007a8c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8007a8e:	f416 7f40 	tst.w	r6, #768	; 0x300
 8007a92:	f101 0101 	add.w	r1, r1, #1
 8007a96:	d114      	bne.n	8007ac2 <HAL_ETH_GetReceivedFrame_IT+0x72>
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8007a98:	4622      	mov	r2, r4
      (heth->RxFrameInfos.SegCount)++;
 8007a9a:	6399      	str	r1, [r3, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8007a9c:	629c      	str	r4, [r3, #40]	; 0x28
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8007a9e:	6811      	ldr	r1, [r2, #0]
 8007aa0:	2900      	cmp	r1, #0
 8007aa2:	dae7      	bge.n	8007a74 <HAL_ETH_GetReceivedFrame_IT+0x24>
  heth->State = HAL_ETH_STATE_READY;
 8007aa4:	2001      	movs	r0, #1
  __HAL_UNLOCK(heth);
 8007aa6:	2200      	movs	r2, #0
  heth->State = HAL_ETH_STATE_READY;
 8007aa8:	f883 0044 	strb.w	r0, [r3, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8007aac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
}
 8007ab0:	bc70      	pop	{r4, r5, r6}
 8007ab2:	4770      	bx	lr
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8007ab4:	631a      	str	r2, [r3, #48]	; 0x30
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8007ab6:	4622      	mov	r2, r4
      heth->RxFrameInfos.SegCount = 1;   
 8007ab8:	639d      	str	r5, [r3, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8007aba:	629c      	str	r4, [r3, #40]	; 0x28
 8007abc:	e7ef      	b.n	8007a9e <HAL_ETH_GetReceivedFrame_IT+0x4e>
  __HAL_LOCK(heth);
 8007abe:	2002      	movs	r0, #2
}
 8007ac0:	4770      	bx	lr
      if ((heth->RxFrameInfos.SegCount) == 1)
 8007ac2:	2901      	cmp	r1, #1
      (heth->RxFrameInfos.SegCount)++;
 8007ac4:	e9c3 210d 	strd	r2, r1, [r3, #52]	; 0x34
      if ((heth->RxFrameInfos.SegCount) == 1)
 8007ac8:	d010      	beq.n	8007aec <HAL_ETH_GetReceivedFrame_IT+0x9c>
 8007aca:	6b19      	ldr	r1, [r3, #48]	; 0x30
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8007acc:	6812      	ldr	r2, [r2, #0]
      heth->State = HAL_ETH_STATE_READY;
 8007ace:	2501      	movs	r5, #1
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8007ad0:	6888      	ldr	r0, [r1, #8]
      __HAL_UNLOCK(heth);
 8007ad2:	2100      	movs	r1, #0
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8007ad4:	f3c2 420d 	ubfx	r2, r2, #16, #14
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8007ad8:	629c      	str	r4, [r3, #40]	; 0x28
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8007ada:	6418      	str	r0, [r3, #64]	; 0x40
      return HAL_OK;
 8007adc:	4608      	mov	r0, r1
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8007ade:	3a04      	subs	r2, #4
      heth->State = HAL_ETH_STATE_READY;
 8007ae0:	f883 5044 	strb.w	r5, [r3, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8007ae4:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8007ae8:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_OK;
 8007aea:	e7e1      	b.n	8007ab0 <HAL_ETH_GetReceivedFrame_IT+0x60>
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8007aec:	4611      	mov	r1, r2
 8007aee:	631a      	str	r2, [r3, #48]	; 0x30
 8007af0:	e7ec      	b.n	8007acc <HAL_ETH_GetReceivedFrame_IT+0x7c>
 8007af2:	bf00      	nop

08007af4 <HAL_ETH_TxCpltCallback>:
 8007af4:	4770      	bx	lr
 8007af6:	bf00      	nop

08007af8 <HAL_ETH_ErrorCallback>:
 8007af8:	4770      	bx	lr
 8007afa:	bf00      	nop

08007afc <HAL_ETH_IRQHandler>:
{
 8007afc:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8007afe:	6803      	ldr	r3, [r0, #0]
 8007b00:	f241 0614 	movw	r6, #4116	; 0x1014
{
 8007b04:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8007b06:	599d      	ldr	r5, [r3, r6]
 8007b08:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8007b0c:	d123      	bne.n	8007b56 <HAL_ETH_IRQHandler+0x5a>
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8007b0e:	599a      	ldr	r2, [r3, r6]
 8007b10:	07d2      	lsls	r2, r2, #31
 8007b12:	d416      	bmi.n	8007b42 <HAL_ETH_IRQHandler+0x46>
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8007b14:	f241 0514 	movw	r5, #4116	; 0x1014
 8007b18:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007b1c:	515a      	str	r2, [r3, r5]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8007b1e:	595b      	ldr	r3, [r3, r5]
 8007b20:	041b      	lsls	r3, r3, #16
 8007b22:	d400      	bmi.n	8007b26 <HAL_ETH_IRQHandler+0x2a>
}
 8007b24:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ETH_ErrorCallback(heth);
 8007b26:	4620      	mov	r0, r4
 8007b28:	f7ff ffe6 	bl	8007af8 <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8007b2c:	6821      	ldr	r1, [r4, #0]
 8007b2e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    heth->State = HAL_ETH_STATE_READY;
 8007b32:	2201      	movs	r2, #1
    __HAL_UNLOCK(heth);
 8007b34:	2300      	movs	r3, #0
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8007b36:	5148      	str	r0, [r1, r5]
    heth->State = HAL_ETH_STATE_READY;
 8007b38:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8007b3c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8007b40:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ETH_TxCpltCallback(heth);
 8007b42:	f7ff ffd7 	bl	8007af4 <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8007b46:	2201      	movs	r2, #1
 8007b48:	6823      	ldr	r3, [r4, #0]
 8007b4a:	519a      	str	r2, [r3, r6]
    heth->State = HAL_ETH_STATE_READY;
 8007b4c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8007b50:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8007b54:	e7de      	b.n	8007b14 <HAL_ETH_IRQHandler+0x18>
    HAL_ETH_RxCpltCallback(heth);
 8007b56:	f008 fad5 	bl	8010104 <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8007b5a:	6823      	ldr	r3, [r4, #0]
 8007b5c:	2040      	movs	r0, #64	; 0x40
    heth->State = HAL_ETH_STATE_READY;
 8007b5e:	2101      	movs	r1, #1
    __HAL_UNLOCK(heth);
 8007b60:	2200      	movs	r2, #0
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8007b62:	5198      	str	r0, [r3, r6]
    heth->State = HAL_ETH_STATE_READY;
 8007b64:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8007b68:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8007b6c:	e7d2      	b.n	8007b14 <HAL_ETH_IRQHandler+0x18>
 8007b6e:	bf00      	nop

08007b70 <HAL_ETH_ReadPHYRegister>:
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 8007b70:	8a03      	ldrh	r3, [r0, #16]
 8007b72:	2b20      	cmp	r3, #32
{
 8007b74:	b570      	push	{r4, r5, r6, lr}
 8007b76:	4604      	mov	r4, r0
 8007b78:	460d      	mov	r5, r1
 8007b7a:	4616      	mov	r6, r2
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 8007b7c:	d833      	bhi.n	8007be6 <HAL_ETH_ReadPHYRegister+0x76>
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8007b7e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007b82:	2b82      	cmp	r3, #130	; 0x82
 8007b84:	d038      	beq.n	8007bf8 <HAL_ETH_ReadPHYRegister+0x88>
  tmpreg = heth->Instance->MACMIIAR;
 8007b86:	6820      	ldr	r0, [r4, #0]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8007b88:	01ab      	lsls	r3, r5, #6
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8007b8a:	2282      	movs	r2, #130	; 0x82
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8007b8c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8007b90:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8007b94:	8a22      	ldrh	r2, [r4, #16]
 8007b96:	f043 0301 	orr.w	r3, r3, #1
  tmpreg = heth->Instance->MACMIIAR;
 8007b9a:	6901      	ldr	r1, [r0, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8007b9c:	02d2      	lsls	r2, r2, #11
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8007b9e:	f001 011c 	and.w	r1, r1, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8007ba2:	b292      	uxth	r2, r2
 8007ba4:	430b      	orrs	r3, r1
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8007ba6:	4313      	orrs	r3, r2
  heth->Instance->MACMIIAR = tmpreg;
 8007ba8:	6103      	str	r3, [r0, #16]
  tickstart = HAL_GetTick();
 8007baa:	f7fd fdd7 	bl	800575c <HAL_GetTick>
 8007bae:	4605      	mov	r5, r0
 8007bb0:	e004      	b.n	8007bbc <HAL_ETH_ReadPHYRegister+0x4c>
    tmpreg = heth->Instance->MACMIIAR;
 8007bb2:	6823      	ldr	r3, [r4, #0]
 8007bb4:	6918      	ldr	r0, [r3, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8007bb6:	f010 0001 	ands.w	r0, r0, #1
 8007bba:	d00d      	beq.n	8007bd8 <HAL_ETH_ReadPHYRegister+0x68>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8007bbc:	f7fd fdce 	bl	800575c <HAL_GetTick>
 8007bc0:	1b40      	subs	r0, r0, r5
 8007bc2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8007bc6:	d3f4      	bcc.n	8007bb2 <HAL_ETH_ReadPHYRegister+0x42>
      heth->State= HAL_ETH_STATE_READY;
 8007bc8:	2201      	movs	r2, #1
      __HAL_UNLOCK(heth);
 8007bca:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 8007bcc:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 8007bce:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8007bd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8007bd6:	bd70      	pop	{r4, r5, r6, pc}
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8007bd8:	695b      	ldr	r3, [r3, #20]
  heth->State = HAL_ETH_STATE_READY;
 8007bda:	2201      	movs	r2, #1
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8007be0:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
}
 8007be4:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 8007be6:	f240 5116 	movw	r1, #1302	; 0x516
 8007bea:	4804      	ldr	r0, [pc, #16]	; (8007bfc <HAL_ETH_ReadPHYRegister+0x8c>)
 8007bec:	f7fb fa0c 	bl	8003008 <assert_failed>
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8007bf0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007bf4:	2b82      	cmp	r3, #130	; 0x82
 8007bf6:	d1c6      	bne.n	8007b86 <HAL_ETH_ReadPHYRegister+0x16>
    return HAL_BUSY;
 8007bf8:	2002      	movs	r0, #2
}
 8007bfa:	bd70      	pop	{r4, r5, r6, pc}
 8007bfc:	08026844 	.word	0x08026844

08007c00 <HAL_ETH_WritePHYRegister>:
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 8007c00:	8a03      	ldrh	r3, [r0, #16]
 8007c02:	2b20      	cmp	r3, #32
{
 8007c04:	b570      	push	{r4, r5, r6, lr}
 8007c06:	4604      	mov	r4, r0
 8007c08:	460d      	mov	r5, r1
 8007c0a:	4616      	mov	r6, r2
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 8007c0c:	d832      	bhi.n	8007c74 <HAL_ETH_WritePHYRegister+0x74>
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8007c0e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007c12:	2b42      	cmp	r3, #66	; 0x42
 8007c14:	d037      	beq.n	8007c86 <HAL_ETH_WritePHYRegister+0x86>
  tmpreg = heth->Instance->MACMIIAR;
 8007c16:	6821      	ldr	r1, [r4, #0]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8007c18:	01ab      	lsls	r3, r5, #6
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8007c1a:	2242      	movs	r2, #66	; 0x42
 8007c1c:	b2b6      	uxth	r6, r6
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8007c1e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8007c22:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8007c26:	8a22      	ldrh	r2, [r4, #16]
 8007c28:	f043 0303 	orr.w	r3, r3, #3
  tmpreg = heth->Instance->MACMIIAR;
 8007c2c:	6908      	ldr	r0, [r1, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8007c2e:	02d2      	lsls	r2, r2, #11
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8007c30:	614e      	str	r6, [r1, #20]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8007c32:	f000 001c 	and.w	r0, r0, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8007c36:	b292      	uxth	r2, r2
 8007c38:	4303      	orrs	r3, r0
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8007c3a:	4313      	orrs	r3, r2
  heth->Instance->MACMIIAR = tmpreg;
 8007c3c:	610b      	str	r3, [r1, #16]
  tickstart = HAL_GetTick();
 8007c3e:	f7fd fd8d 	bl	800575c <HAL_GetTick>
 8007c42:	4605      	mov	r5, r0
 8007c44:	e004      	b.n	8007c50 <HAL_ETH_WritePHYRegister+0x50>
    tmpreg = heth->Instance->MACMIIAR;
 8007c46:	6823      	ldr	r3, [r4, #0]
 8007c48:	6918      	ldr	r0, [r3, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8007c4a:	f010 0001 	ands.w	r0, r0, #1
 8007c4e:	d00d      	beq.n	8007c6c <HAL_ETH_WritePHYRegister+0x6c>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8007c50:	f7fd fd84 	bl	800575c <HAL_GetTick>
 8007c54:	1b40      	subs	r0, r0, r5
 8007c56:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8007c5a:	d3f4      	bcc.n	8007c46 <HAL_ETH_WritePHYRegister+0x46>
      heth->State= HAL_ETH_STATE_READY;
 8007c5c:	2201      	movs	r2, #1
      __HAL_UNLOCK(heth);
 8007c5e:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 8007c60:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 8007c62:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8007c66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8007c6a:	bd70      	pop	{r4, r5, r6, pc}
  heth->State = HAL_ETH_STATE_READY;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8007c72:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 8007c74:	f240 515e 	movw	r1, #1374	; 0x55e
 8007c78:	4804      	ldr	r0, [pc, #16]	; (8007c8c <HAL_ETH_WritePHYRegister+0x8c>)
 8007c7a:	f7fb f9c5 	bl	8003008 <assert_failed>
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8007c7e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007c82:	2b42      	cmp	r3, #66	; 0x42
 8007c84:	d1c7      	bne.n	8007c16 <HAL_ETH_WritePHYRegister+0x16>
    return HAL_BUSY;
 8007c86:	2002      	movs	r0, #2
}
 8007c88:	bd70      	pop	{r4, r5, r6, pc}
 8007c8a:	bf00      	nop
 8007c8c:	08026844 	.word	0x08026844

08007c90 <HAL_ETH_Init>:
{
 8007c90:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tempreg = 0, phyreg = 0;
 8007c92:	2300      	movs	r3, #0
{
 8007c94:	b083      	sub	sp, #12
  uint32_t tempreg = 0, phyreg = 0;
 8007c96:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 8007c98:	2800      	cmp	r0, #0
 8007c9a:	f000 80bb 	beq.w	8007e14 <HAL_ETH_Init+0x184>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
 8007c9e:	6843      	ldr	r3, [r0, #4]
 8007ca0:	4604      	mov	r4, r0
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	f200 8092 	bhi.w	8007dcc <HAL_ETH_Init+0x13c>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 8007ca8:	69a3      	ldr	r3, [r4, #24]
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	f200 8085 	bhi.w	8007dba <HAL_ETH_Init+0x12a>
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 8007cb0:	69e3      	ldr	r3, [r4, #28]
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d878      	bhi.n	8007da8 <HAL_ETH_Init+0x118>
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
 8007cb6:	6a23      	ldr	r3, [r4, #32]
 8007cb8:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 8007cbc:	f040 8095 	bne.w	8007dea <HAL_ETH_Init+0x15a>
  if(heth->State == HAL_ETH_STATE_RESET)
 8007cc0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007cc4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	f000 8088 	beq.w	8007dde <HAL_ETH_Init+0x14e>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007cce:	4b90      	ldr	r3, [pc, #576]	; (8007f10 <HAL_ETH_Init+0x280>)
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8007cd0:	6821      	ldr	r1, [r4, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007cd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8007cd4:	488f      	ldr	r0, [pc, #572]	; (8007f14 <HAL_ETH_Init+0x284>)
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8007cd6:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007cda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007cde:	645a      	str	r2, [r3, #68]	; 0x44
 8007ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ce6:	9301      	str	r3, [sp, #4]
 8007ce8:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8007cea:	6843      	ldr	r3, [r0, #4]
 8007cec:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007cf0:	6043      	str	r3, [r0, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8007cf2:	6843      	ldr	r3, [r0, #4]
 8007cf4:	6a22      	ldr	r2, [r4, #32]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	6043      	str	r3, [r0, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8007cfa:	680b      	ldr	r3, [r1, #0]
 8007cfc:	f043 0301 	orr.w	r3, r3, #1
 8007d00:	600b      	str	r3, [r1, #0]
  tickstart = HAL_GetTick();
 8007d02:	f7fd fd2b 	bl	800575c <HAL_GetTick>
 8007d06:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8007d08:	e005      	b.n	8007d16 <HAL_ETH_Init+0x86>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8007d0a:	f7fd fd27 	bl	800575c <HAL_GetTick>
 8007d0e:	1b40      	subs	r0, r0, r5
 8007d10:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8007d14:	d875      	bhi.n	8007e02 <HAL_ETH_Init+0x172>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8007d16:	6823      	ldr	r3, [r4, #0]
 8007d18:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8007d1c:	6812      	ldr	r2, [r2, #0]
 8007d1e:	07d0      	lsls	r0, r2, #31
 8007d20:	d4f3      	bmi.n	8007d0a <HAL_ETH_Init+0x7a>
  tempreg = (heth->Instance)->MACMIIAR;
 8007d22:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 8007d24:	f002 fda6 	bl	800a874 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 8007d28:	4b7b      	ldr	r3, [pc, #492]	; (8007f18 <HAL_ETH_Init+0x288>)
 8007d2a:	4a7c      	ldr	r2, [pc, #496]	; (8007f1c <HAL_ETH_Init+0x28c>)
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8007d2c:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000)&&(hclk < 35000000))
 8007d30:	4403      	add	r3, r0
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d972      	bls.n	8007e1c <HAL_ETH_Init+0x18c>
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8007d36:	4b7a      	ldr	r3, [pc, #488]	; (8007f20 <HAL_ETH_Init+0x290>)
 8007d38:	4a7a      	ldr	r2, [pc, #488]	; (8007f24 <HAL_ETH_Init+0x294>)
 8007d3a:	4403      	add	r3, r0
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d87a      	bhi.n	8007e36 <HAL_ETH_Init+0x1a6>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8007d40:	f045 050c 	orr.w	r5, r5, #12
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8007d44:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8007d46:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	4620      	mov	r0, r4
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8007d4e:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8007d50:	f7ff ff56 	bl	8007c00 <HAL_ETH_WritePHYRegister>
 8007d54:	4605      	mov	r5, r0
 8007d56:	2800      	cmp	r0, #0
 8007d58:	d163      	bne.n	8007e22 <HAL_ETH_Init+0x192>
  HAL_Delay(PHY_RESET_DELAY);
 8007d5a:	20ff      	movs	r0, #255	; 0xff
 8007d5c:	f7fd fd04 	bl	8005768 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8007d60:	6863      	ldr	r3, [r4, #4]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d176      	bne.n	8007e54 <HAL_ETH_Init+0x1c4>
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
 8007d66:	68a3      	ldr	r3, [r4, #8]
 8007d68:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 8007d6c:	f040 8098 	bne.w	8007ea0 <HAL_ETH_Init+0x210>
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
 8007d70:	68e3      	ldr	r3, [r4, #12]
 8007d72:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8007d76:	f040 808c 	bne.w	8007e92 <HAL_ETH_Init+0x202>
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8007d7a:	08db      	lsrs	r3, r3, #3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8007d7c:	68a2      	ldr	r2, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8007d7e:	2100      	movs	r1, #0
 8007d80:	4620      	mov	r0, r4
 8007d82:	ea43 0252 	orr.w	r2, r3, r2, lsr #1
 8007d86:	b292      	uxth	r2, r2
 8007d88:	f7ff ff3a 	bl	8007c00 <HAL_ETH_WritePHYRegister>
 8007d8c:	2800      	cmp	r0, #0
 8007d8e:	d148      	bne.n	8007e22 <HAL_ETH_Init+0x192>
    HAL_Delay(PHY_CONFIG_DELAY);
 8007d90:	f640 70ff 	movw	r0, #4095	; 0xfff
 8007d94:	f7fd fce8 	bl	8005768 <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 8007d98:	2100      	movs	r1, #0
 8007d9a:	4620      	mov	r0, r4
 8007d9c:	f7ff fcce 	bl	800773c <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8007da0:	2301      	movs	r3, #1
 8007da2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8007da6:	e032      	b.n	8007e0e <HAL_ETH_Init+0x17e>
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 8007da8:	21e0      	movs	r1, #224	; 0xe0
 8007daa:	485f      	ldr	r0, [pc, #380]	; (8007f28 <HAL_ETH_Init+0x298>)
 8007dac:	f7fb f92c 	bl	8003008 <assert_failed>
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
 8007db0:	6a23      	ldr	r3, [r4, #32]
 8007db2:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 8007db6:	d083      	beq.n	8007cc0 <HAL_ETH_Init+0x30>
 8007db8:	e017      	b.n	8007dea <HAL_ETH_Init+0x15a>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 8007dba:	21df      	movs	r1, #223	; 0xdf
 8007dbc:	485a      	ldr	r0, [pc, #360]	; (8007f28 <HAL_ETH_Init+0x298>)
 8007dbe:	f7fb f923 	bl	8003008 <assert_failed>
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 8007dc2:	69e3      	ldr	r3, [r4, #28]
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	f67f af76 	bls.w	8007cb6 <HAL_ETH_Init+0x26>
 8007dca:	e7ed      	b.n	8007da8 <HAL_ETH_Init+0x118>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
 8007dcc:	21de      	movs	r1, #222	; 0xde
 8007dce:	4856      	ldr	r0, [pc, #344]	; (8007f28 <HAL_ETH_Init+0x298>)
 8007dd0:	f7fb f91a 	bl	8003008 <assert_failed>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 8007dd4:	69a3      	ldr	r3, [r4, #24]
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	f67f af6a 	bls.w	8007cb0 <HAL_ETH_Init+0x20>
 8007ddc:	e7ed      	b.n	8007dba <HAL_ETH_Init+0x12a>
    heth->Lock = HAL_UNLOCKED;
 8007dde:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8007de2:	4620      	mov	r0, r4
 8007de4:	f008 f900 	bl	800ffe8 <HAL_ETH_MspInit>
 8007de8:	e771      	b.n	8007cce <HAL_ETH_Init+0x3e>
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
 8007dea:	21e1      	movs	r1, #225	; 0xe1
 8007dec:	484e      	ldr	r0, [pc, #312]	; (8007f28 <HAL_ETH_Init+0x298>)
 8007dee:	f7fb f90b 	bl	8003008 <assert_failed>
  if(heth->State == HAL_ETH_STATE_RESET)
 8007df2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007df6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	f47f af67 	bne.w	8007cce <HAL_ETH_Init+0x3e>
 8007e00:	e7ed      	b.n	8007dde <HAL_ETH_Init+0x14e>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8007e02:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 8007e04:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8007e06:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8007e0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8007e0e:	4628      	mov	r0, r5
 8007e10:	b003      	add	sp, #12
 8007e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8007e14:	2501      	movs	r5, #1
}
 8007e16:	4628      	mov	r0, r5
 8007e18:	b003      	add	sp, #12
 8007e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8007e1c:	f045 0508 	orr.w	r5, r5, #8
 8007e20:	e790      	b.n	8007d44 <HAL_ETH_Init+0xb4>
      heth->State = HAL_ETH_STATE_READY;
 8007e22:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 8007e24:	4620      	mov	r0, r4
 8007e26:	2101      	movs	r1, #1
 8007e28:	f7ff fc88 	bl	800773c <ETH_MACDMAConfig>
}
 8007e2c:	4628      	mov	r0, r5
      heth->State = HAL_ETH_STATE_READY;
 8007e2e:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
}
 8007e32:	b003      	add	sp, #12
 8007e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8007e36:	4b3d      	ldr	r3, [pc, #244]	; (8007f2c <HAL_ETH_Init+0x29c>)
 8007e38:	4a3d      	ldr	r2, [pc, #244]	; (8007f30 <HAL_ETH_Init+0x2a0>)
 8007e3a:	4403      	add	r3, r0
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d981      	bls.n	8007d44 <HAL_ETH_Init+0xb4>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8007e40:	4b3c      	ldr	r3, [pc, #240]	; (8007f34 <HAL_ETH_Init+0x2a4>)
 8007e42:	4a3d      	ldr	r2, [pc, #244]	; (8007f38 <HAL_ETH_Init+0x2a8>)
 8007e44:	4403      	add	r3, r0
 8007e46:	4293      	cmp	r3, r2
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8007e48:	bf94      	ite	ls
 8007e4a:	f045 0504 	orrls.w	r5, r5, #4
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8007e4e:	f045 0510 	orrhi.w	r5, r5, #16
 8007e52:	e777      	b.n	8007d44 <HAL_ETH_Init+0xb4>
    tickstart = HAL_GetTick();
 8007e54:	f7fd fc82 	bl	800575c <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8007e58:	f241 3688 	movw	r6, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8007e5c:	4607      	mov	r7, r0
 8007e5e:	e002      	b.n	8007e66 <HAL_ETH_Init+0x1d6>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8007e60:	9b00      	ldr	r3, [sp, #0]
 8007e62:	0759      	lsls	r1, r3, #29
 8007e64:	d422      	bmi.n	8007eac <HAL_ETH_Init+0x21c>
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8007e66:	466a      	mov	r2, sp
 8007e68:	2101      	movs	r1, #1
 8007e6a:	4620      	mov	r0, r4
 8007e6c:	f7ff fe80 	bl	8007b70 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8007e70:	f7fd fc74 	bl	800575c <HAL_GetTick>
 8007e74:	1bc0      	subs	r0, r0, r7
 8007e76:	42b0      	cmp	r0, r6
 8007e78:	d9f2      	bls.n	8007e60 <HAL_ETH_Init+0x1d0>
        ETH_MACDMAConfig(heth, err);
 8007e7a:	2101      	movs	r1, #1
 8007e7c:	4620      	mov	r0, r4
 8007e7e:	f7ff fc5d 	bl	800773c <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8007e82:	2201      	movs	r2, #1
        __HAL_UNLOCK(heth);
 8007e84:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8007e86:	2503      	movs	r5, #3
        heth->State= HAL_ETH_STATE_READY;
 8007e88:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8007e8c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8007e90:	e7bd      	b.n	8007e0e <HAL_ETH_Init+0x17e>
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
 8007e92:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8007e96:	4824      	ldr	r0, [pc, #144]	; (8007f28 <HAL_ETH_Init+0x298>)
 8007e98:	f7fb f8b6 	bl	8003008 <assert_failed>
 8007e9c:	68e3      	ldr	r3, [r4, #12]
 8007e9e:	e76c      	b.n	8007d7a <HAL_ETH_Init+0xea>
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
 8007ea0:	f240 11c5 	movw	r1, #453	; 0x1c5
 8007ea4:	4820      	ldr	r0, [pc, #128]	; (8007f28 <HAL_ETH_Init+0x298>)
 8007ea6:	f7fb f8af 	bl	8003008 <assert_failed>
 8007eaa:	e761      	b.n	8007d70 <HAL_ETH_Init+0xe0>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8007eac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007eb0:	2100      	movs	r1, #0
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	f7ff fea4 	bl	8007c00 <HAL_ETH_WritePHYRegister>
 8007eb8:	2800      	cmp	r0, #0
 8007eba:	d1b2      	bne.n	8007e22 <HAL_ETH_Init+0x192>
    tickstart = HAL_GetTick();
 8007ebc:	f7fd fc4e 	bl	800575c <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8007ec0:	f241 3688 	movw	r6, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8007ec4:	4607      	mov	r7, r0
 8007ec6:	e002      	b.n	8007ece <HAL_ETH_Init+0x23e>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8007ec8:	9b00      	ldr	r3, [sp, #0]
 8007eca:	069a      	lsls	r2, r3, #26
 8007ecc:	d40a      	bmi.n	8007ee4 <HAL_ETH_Init+0x254>
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8007ece:	466a      	mov	r2, sp
 8007ed0:	2101      	movs	r1, #1
 8007ed2:	4620      	mov	r0, r4
 8007ed4:	f7ff fe4c 	bl	8007b70 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8007ed8:	f7fd fc40 	bl	800575c <HAL_GetTick>
 8007edc:	1bc0      	subs	r0, r0, r7
 8007ede:	42b0      	cmp	r0, r6
 8007ee0:	d9f2      	bls.n	8007ec8 <HAL_ETH_Init+0x238>
 8007ee2:	e7ca      	b.n	8007e7a <HAL_ETH_Init+0x1ea>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8007ee4:	466a      	mov	r2, sp
 8007ee6:	211f      	movs	r1, #31
 8007ee8:	4620      	mov	r0, r4
 8007eea:	f7ff fe41 	bl	8007b70 <HAL_ETH_ReadPHYRegister>
 8007eee:	2800      	cmp	r0, #0
 8007ef0:	d197      	bne.n	8007e22 <HAL_ETH_Init+0x192>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8007ef2:	9b00      	ldr	r3, [sp, #0]
 8007ef4:	f013 0210 	ands.w	r2, r3, #16
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8007ef8:	bf18      	it	ne
 8007efa:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8007efe:	075b      	lsls	r3, r3, #29
      (heth->Init).Speed = ETH_SPEED_10M; 
 8007f00:	bf4c      	ite	mi
 8007f02:	2300      	movmi	r3, #0
      (heth->Init).Speed = ETH_SPEED_100M;
 8007f04:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8007f08:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_100M;
 8007f0a:	60a3      	str	r3, [r4, #8]
 8007f0c:	e744      	b.n	8007d98 <HAL_ETH_Init+0x108>
 8007f0e:	bf00      	nop
 8007f10:	40023800 	.word	0x40023800
 8007f14:	40013800 	.word	0x40013800
 8007f18:	feced300 	.word	0xfeced300
 8007f1c:	00e4e1bf 	.word	0x00e4e1bf
 8007f20:	fde9f140 	.word	0xfde9f140
 8007f24:	017d783f 	.word	0x017d783f
 8007f28:	08026844 	.word	0x08026844
 8007f2c:	fc6c7900 	.word	0xfc6c7900
 8007f30:	026259ff 	.word	0x026259ff
 8007f34:	fa0a1f00 	.word	0xfa0a1f00
 8007f38:	02faf07f 	.word	0x02faf07f

08007f3c <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 8007f3c:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d039      	beq.n	8007fb8 <HAL_ETH_Start+0x7c>
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8007f44:	6803      	ldr	r3, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 8007f46:	2202      	movs	r2, #2
{  
 8007f48:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t tmpreg = 0;
 8007f4a:	2500      	movs	r5, #0
{  
 8007f4c:	b082      	sub	sp, #8
  heth->State = HAL_ETH_STATE_BUSY;
 8007f4e:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 8007f52:	4604      	mov	r4, r0
  __IO uint32_t tmpreg = 0;
 8007f54:	9501      	str	r5, [sp, #4]
  __HAL_LOCK(heth);
 8007f56:	2601      	movs	r6, #1
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8007f58:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(heth);
 8007f5a:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007f5e:	4630      	mov	r0, r6
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8007f60:	f042 0208 	orr.w	r2, r2, #8
 8007f64:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007f6a:	f7fd fbfd 	bl	8005768 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8007f6e:	9a01      	ldr	r2, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007f70:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 8007f72:	6823      	ldr	r3, [r4, #0]
 8007f74:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg = 0;
 8007f76:	9500      	str	r5, [sp, #0]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	f042 0204 	orr.w	r2, r2, #4
 8007f7e:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	9300      	str	r3, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007f84:	f7fd fbf0 	bl	8005768 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8007f88:	6823      	ldr	r3, [r4, #0]
  ETH_FlushTransmitFIFO(heth);
 8007f8a:	4620      	mov	r0, r4
  (heth->Instance)->MACCR = tmpreg;
 8007f8c:	9a00      	ldr	r2, [sp, #0]
 8007f8e:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8007f90:	f7ff fbbe 	bl	8007710 <ETH_FlushTransmitFIFO>
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8007f94:	6822      	ldr	r2, [r4, #0]
 8007f96:	f241 0318 	movw	r3, #4120	; 0x1018
  return HAL_OK;
 8007f9a:	4628      	mov	r0, r5
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8007f9c:	58d1      	ldr	r1, [r2, r3]
 8007f9e:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8007fa2:	50d1      	str	r1, [r2, r3]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8007fa4:	58d1      	ldr	r1, [r2, r3]
 8007fa6:	f041 0102 	orr.w	r1, r1, #2
 8007faa:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8007fac:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8007fb0:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
}
 8007fb4:	b002      	add	sp, #8
 8007fb6:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(heth);
 8007fb8:	2002      	movs	r0, #2
}
 8007fba:	4770      	bx	lr

08007fbc <HAL_ETH_Stop>:
  __HAL_LOCK(heth);
 8007fbc:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d039      	beq.n	8008038 <HAL_ETH_Stop+0x7c>
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8007fc4:	6803      	ldr	r3, [r0, #0]
 8007fc6:	f241 0218 	movw	r2, #4120	; 0x1018
  heth->State = HAL_ETH_STATE_BUSY;
 8007fca:	2102      	movs	r1, #2
{  
 8007fcc:	b570      	push	{r4, r5, r6, lr}
  heth->State = HAL_ETH_STATE_BUSY;
 8007fce:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 8007fd2:	2601      	movs	r6, #1
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8007fd4:	5899      	ldr	r1, [r3, r2]
{  
 8007fd6:	b082      	sub	sp, #8
  __HAL_LOCK(heth);
 8007fd8:	f880 6045 	strb.w	r6, [r0, #69]	; 0x45
  __IO uint32_t tmpreg = 0;
 8007fdc:	2500      	movs	r5, #0
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8007fde:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8007fe2:	4604      	mov	r4, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007fe4:	4630      	mov	r0, r6
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8007fe6:	5099      	str	r1, [r3, r2]
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8007fe8:	5899      	ldr	r1, [r3, r2]
 8007fea:	f021 0102 	bic.w	r1, r1, #2
 8007fee:	5099      	str	r1, [r3, r2]
  __IO uint32_t tmpreg = 0;
 8007ff0:	9501      	str	r5, [sp, #4]
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	f022 0204 	bic.w	r2, r2, #4
 8007ff8:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007ffe:	f7fd fbb3 	bl	8005768 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8008002:	6823      	ldr	r3, [r4, #0]
  ETH_FlushTransmitFIFO(heth);
 8008004:	4620      	mov	r0, r4
  (heth->Instance)->MACCR = tmpreg;
 8008006:	9a01      	ldr	r2, [sp, #4]
 8008008:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 800800a:	f7ff fb81 	bl	8007710 <ETH_FlushTransmitFIFO>
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800800e:	6823      	ldr	r3, [r4, #0]
  __IO uint32_t tmpreg = 0;
 8008010:	9500      	str	r5, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008012:	4630      	mov	r0, r6
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	f022 0208 	bic.w	r2, r2, #8
 800801a:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	9300      	str	r3, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008020:	f7fd fba2 	bl	8005768 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8008024:	9a00      	ldr	r2, [sp, #0]
  return HAL_OK;
 8008026:	4628      	mov	r0, r5
  (heth->Instance)->MACCR = tmpreg;
 8008028:	6823      	ldr	r3, [r4, #0]
 800802a:	601a      	str	r2, [r3, #0]
  heth->State = HAL_ETH_STATE_READY;
 800802c:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8008030:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
}
 8008034:	b002      	add	sp, #8
 8008036:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(heth);
 8008038:	2002      	movs	r0, #2
}
 800803a:	4770      	bx	lr

0800803c <HAL_ETH_ConfigMAC>:
{
 800803c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 800803e:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8008042:	2b01      	cmp	r3, #1
 8008044:	f000 8242 	beq.w	80084cc <HAL_ETH_ConfigMAC+0x490>
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 8008048:	6883      	ldr	r3, [r0, #8]
 800804a:	460c      	mov	r4, r1
  heth->State= HAL_ETH_STATE_BUSY;
 800804c:	2202      	movs	r2, #2
  __HAL_LOCK(heth);
 800804e:	2101      	movs	r1, #1
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 8008050:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 8008054:	4605      	mov	r5, r0
  __HAL_LOCK(heth);
 8008056:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
  heth->State= HAL_ETH_STATE_BUSY;
 800805a:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800805e:	f040 8207 	bne.w	8008470 <HAL_ETH_ConfigMAC+0x434>
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
 8008062:	68eb      	ldr	r3, [r5, #12]
 8008064:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8008068:	f040 8114 	bne.w	8008294 <HAL_ETH_ConfigMAC+0x258>
  if (macconf != NULL)
 800806c:	2c00      	cmp	r4, #0
 800806e:	f000 8119 	beq.w	80082a4 <HAL_ETH_ConfigMAC+0x268>
    assert_param(IS_ETH_WATCHDOG(macconf->Watchdog));
 8008072:	6823      	ldr	r3, [r4, #0]
 8008074:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 8008078:	f040 8139 	bne.w	80082ee <HAL_ETH_ConfigMAC+0x2b2>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 800807c:	6863      	ldr	r3, [r4, #4]
 800807e:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 8008082:	f040 816b 	bne.w	800835c <HAL_ETH_ConfigMAC+0x320>
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 8008086:	68a3      	ldr	r3, [r4, #8]
 8008088:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800808c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008090:	d002      	beq.n	8008098 <HAL_ETH_ConfigMAC+0x5c>
 8008092:	2b00      	cmp	r3, #0
 8008094:	f040 821c 	bne.w	80084d0 <HAL_ETH_ConfigMAC+0x494>
    assert_param(IS_ETH_CARRIER_SENSE(macconf->CarrierSense));
 8008098:	68e3      	ldr	r3, [r4, #12]
 800809a:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800809e:	f040 8152 	bne.w	8008346 <HAL_ETH_ConfigMAC+0x30a>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 80080a2:	6923      	ldr	r3, [r4, #16]
 80080a4:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 80080a8:	f040 8142 	bne.w	8008330 <HAL_ETH_ConfigMAC+0x2f4>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 80080ac:	6963      	ldr	r3, [r4, #20]
 80080ae:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 80080b2:	f040 8132 	bne.w	800831a <HAL_ETH_ConfigMAC+0x2de>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 80080b6:	69a3      	ldr	r3, [r4, #24]
 80080b8:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 80080bc:	f040 8122 	bne.w	8008304 <HAL_ETH_ConfigMAC+0x2c8>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 80080c0:	69e3      	ldr	r3, [r4, #28]
 80080c2:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 80080c6:	f040 81a3 	bne.w	8008410 <HAL_ETH_ConfigMAC+0x3d4>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 80080ca:	6a23      	ldr	r3, [r4, #32]
 80080cc:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80080d0:	f040 818e 	bne.w	80083f0 <HAL_ETH_ConfigMAC+0x3b4>
    assert_param(IS_ETH_BACKOFF_LIMIT(macconf->BackOffLimit));
 80080d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080d6:	f033 0360 	bics.w	r3, r3, #96	; 0x60
 80080da:	f040 8193 	bne.w	8008404 <HAL_ETH_ConfigMAC+0x3c8>
    assert_param(IS_ETH_DEFERRAL_CHECK(macconf->DeferralCheck));
 80080de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80080e0:	f033 0310 	bics.w	r3, r3, #16
 80080e4:	f040 8179 	bne.w	80083da <HAL_ETH_ConfigMAC+0x39e>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 80080e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80080ea:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 80080ee:	f040 819a 	bne.w	8008426 <HAL_ETH_ConfigMAC+0x3ea>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 80080f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80080f4:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 80080f8:	d003      	beq.n	8008102 <HAL_ETH_ConfigMAC+0xc6>
 80080fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080fe:	f040 81d3 	bne.w	80084a8 <HAL_ETH_ConfigMAC+0x46c>
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 8008102:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008104:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008108:	2a40      	cmp	r2, #64	; 0x40
 800810a:	d002      	beq.n	8008112 <HAL_ETH_ConfigMAC+0xd6>
 800810c:	2b80      	cmp	r3, #128	; 0x80
 800810e:	f040 81b5 	bne.w	800847c <HAL_ETH_ConfigMAC+0x440>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 8008112:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008114:	f033 0320 	bics.w	r3, r3, #32
 8008118:	f040 80de 	bne.w	80082d8 <HAL_ETH_ConfigMAC+0x29c>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 800811c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800811e:	f033 0308 	bics.w	r3, r3, #8
 8008122:	f040 80cf 	bne.w	80082c4 <HAL_ETH_ConfigMAC+0x288>
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 8008126:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008128:	2b01      	cmp	r3, #1
 800812a:	f200 80a5 	bhi.w	8008278 <HAL_ETH_ConfigMAC+0x23c>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 800812e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008130:	f240 4204 	movw	r2, #1028	; 0x404
 8008134:	4293      	cmp	r3, r2
 8008136:	bf18      	it	ne
 8008138:	2b10      	cmpne	r3, #16
 800813a:	d003      	beq.n	8008144 <HAL_ETH_ConfigMAC+0x108>
 800813c:	f033 0304 	bics.w	r3, r3, #4
 8008140:	f040 81be 	bne.w	80084c0 <HAL_ETH_ConfigMAC+0x484>
    assert_param(IS_ETH_UNICAST_FRAMES_FILTER(macconf->UnicastFramesFilter));
 8008144:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008146:	f033 0202 	bics.w	r2, r3, #2
 800814a:	d004      	beq.n	8008156 <HAL_ETH_ConfigMAC+0x11a>
 800814c:	f240 4202 	movw	r2, #1026	; 0x402
 8008150:	4293      	cmp	r3, r2
 8008152:	f040 819e 	bne.w	8008492 <HAL_ETH_ConfigMAC+0x456>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 8008156:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800815c:	f080 816e 	bcs.w	800843c <HAL_ETH_ConfigMAC+0x400>
    assert_param(IS_ETH_ZEROQUANTA_PAUSE(macconf->ZeroQuantaPause));
 8008160:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008162:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8008166:	f040 8173 	bne.w	8008450 <HAL_ETH_ConfigMAC+0x414>
    assert_param(IS_ETH_PAUSE_LOW_THRESHOLD(macconf->PauseLowThreshold));
 800816a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800816c:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 8008170:	f040 8178 	bne.w	8008464 <HAL_ETH_ConfigMAC+0x428>
    assert_param(IS_ETH_UNICAST_PAUSE_FRAME_DETECT(macconf->UnicastPauseFrameDetect));
 8008174:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008176:	f033 0308 	bics.w	r3, r3, #8
 800817a:	f040 8123 	bne.w	80083c4 <HAL_ETH_ConfigMAC+0x388>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 800817e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008180:	f033 0304 	bics.w	r3, r3, #4
 8008184:	f040 8113 	bne.w	80083ae <HAL_ETH_ConfigMAC+0x372>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 8008188:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800818a:	f033 0302 	bics.w	r3, r3, #2
 800818e:	f040 8103 	bne.w	8008398 <HAL_ETH_ConfigMAC+0x35c>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 8008192:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008194:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 8008198:	f040 80f3 	bne.w	8008382 <HAL_ETH_ConfigMAC+0x346>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 800819c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800819e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081a2:	f080 80e8 	bcs.w	8008376 <HAL_ETH_ConfigMAC+0x33a>
                         macconf->BackOffLimit | 
 80081a6:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80081a8:	2001      	movs	r0, #1
                         macconf->BackOffLimit | 
 80081aa:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 80081ae:	430b      	orrs	r3, r1
 80081b0:	e9d4 6103 	ldrd	r6, r1, [r4, #12]
 80081b4:	4313      	orrs	r3, r2
 80081b6:	6962      	ldr	r2, [r4, #20]
 80081b8:	4333      	orrs	r3, r6
 80081ba:	69a6      	ldr	r6, [r4, #24]
 80081bc:	430b      	orrs	r3, r1
 80081be:	69e1      	ldr	r1, [r4, #28]
 80081c0:	4313      	orrs	r3, r2
 80081c2:	6a22      	ldr	r2, [r4, #32]
 80081c4:	4333      	orrs	r3, r6
 80081c6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80081c8:	430b      	orrs	r3, r1
 80081ca:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80081cc:	4313      	orrs	r3, r2
 80081ce:	68aa      	ldr	r2, [r5, #8]
 80081d0:	4333      	orrs	r3, r6
    tmpreg = (heth->Instance)->MACCR;
 80081d2:	682e      	ldr	r6, [r5, #0]
                         macconf->BackOffLimit | 
 80081d4:	430b      	orrs	r3, r1
    tmpreg = (heth->Instance)->MACCR;
 80081d6:	6837      	ldr	r7, [r6, #0]
                         macconf->BackOffLimit | 
 80081d8:	68e9      	ldr	r1, [r5, #12]
 80081da:	4313      	orrs	r3, r2
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 80081dc:	4abf      	ldr	r2, [pc, #764]	; (80084dc <HAL_ETH_ConfigMAC+0x4a0>)
                         macconf->BackOffLimit | 
 80081de:	430b      	orrs	r3, r1
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 80081e0:	403a      	ands	r2, r7
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80081e2:	f64f 7741 	movw	r7, #65345	; 0xff41
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80081e6:	4313      	orrs	r3, r2
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80081e8:	6033      	str	r3, [r6, #0]
    tmpreg = (heth->Instance)->MACCR;
 80081ea:	6836      	ldr	r6, [r6, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80081ec:	f7fd fabc 	bl	8005768 <HAL_Delay>
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80081f0:	6b21      	ldr	r1, [r4, #48]	; 0x30
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80081f2:	2001      	movs	r0, #1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80081f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    (heth->Instance)->MACCR = tmpreg; 
 80081f6:	682a      	ldr	r2, [r5, #0]
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80081f8:	430b      	orrs	r3, r1
                                          macconf->SourceAddrFilter |
 80081fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
    (heth->Instance)->MACCR = tmpreg; 
 80081fc:	6016      	str	r6, [r2, #0]
                                          macconf->SourceAddrFilter |
 80081fe:	430b      	orrs	r3, r1
                                          macconf->BroadcastFramesReception | 
 8008200:	e9d4 160e 	ldrd	r1, r6, [r4, #56]	; 0x38
                                          macconf->PassControlFrames |
 8008204:	430b      	orrs	r3, r1
                                          macconf->DestinationAddrFilter |
 8008206:	6c21      	ldr	r1, [r4, #64]	; 0x40
                                          macconf->BroadcastFramesReception | 
 8008208:	4333      	orrs	r3, r6
                                          macconf->PromiscuousMode |
 800820a:	6c66      	ldr	r6, [r4, #68]	; 0x44
                                          macconf->DestinationAddrFilter |
 800820c:	430b      	orrs	r3, r1
                                          macconf->MulticastFramesFilter |
 800820e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                                          macconf->PromiscuousMode |
 8008210:	4333      	orrs	r3, r6
                                          macconf->MulticastFramesFilter |
 8008212:	430b      	orrs	r3, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8008214:	6053      	str	r3, [r2, #4]
     tmpreg = (heth->Instance)->MACFFR;
 8008216:	6856      	ldr	r6, [r2, #4]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8008218:	f7fd faa6 	bl	8005768 <HAL_Delay>
                          macconf->ReceiveFlowControl |
 800821c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800821e:	6da3      	ldr	r3, [r4, #88]	; 0x58
     (heth->Instance)->MACFFR = tmpreg;
 8008220:	682a      	ldr	r2, [r5, #0]
                          macconf->ReceiveFlowControl |
 8008222:	430b      	orrs	r3, r1
 8008224:	6e21      	ldr	r1, [r4, #96]	; 0x60
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8008226:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
                          macconf->ReceiveFlowControl |
 8008228:	430b      	orrs	r3, r1
 800822a:	6e61      	ldr	r1, [r4, #100]	; 0x64
     (heth->Instance)->MACFFR = tmpreg;
 800822c:	6056      	str	r6, [r2, #4]
                          macconf->ReceiveFlowControl |
 800822e:	430b      	orrs	r3, r1
 8008230:	6ea6      	ldr	r6, [r4, #104]	; 0x68
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8008232:	6d21      	ldr	r1, [r4, #80]	; 0x50
                          macconf->ReceiveFlowControl |
 8008234:	4333      	orrs	r3, r6
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8008236:	6090      	str	r0, [r2, #8]
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8008238:	6d66      	ldr	r6, [r4, #84]	; 0x54
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800823a:	2001      	movs	r0, #1
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800823c:	60d1      	str	r1, [r2, #12]
     tmpreg = (heth->Instance)->MACFCR;
 800823e:	6991      	ldr	r1, [r2, #24]
                          macconf->ReceiveFlowControl |
 8008240:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8008244:	4039      	ands	r1, r7
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8008246:	430b      	orrs	r3, r1
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8008248:	6193      	str	r3, [r2, #24]
     tmpreg = (heth->Instance)->MACFCR;
 800824a:	6996      	ldr	r6, [r2, #24]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800824c:	f7fd fa8c 	bl	8005768 <HAL_Delay>
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8008250:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8008252:	2001      	movs	r0, #1
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8008254:	6f21      	ldr	r1, [r4, #112]	; 0x70
     (heth->Instance)->MACFCR = tmpreg;
 8008256:	682b      	ldr	r3, [r5, #0]
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8008258:	430a      	orrs	r2, r1
     (heth->Instance)->MACFCR = tmpreg;
 800825a:	619e      	str	r6, [r3, #24]
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800825c:	61da      	str	r2, [r3, #28]
      tmpreg = (heth->Instance)->MACVLANTR;
 800825e:	69dc      	ldr	r4, [r3, #28]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8008260:	f7fd fa82 	bl	8005768 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8008264:	682b      	ldr	r3, [r5, #0]
 8008266:	61dc      	str	r4, [r3, #28]
  __HAL_UNLOCK(heth);
 8008268:	2300      	movs	r3, #0
  heth->State= HAL_ETH_STATE_READY;
 800826a:	2201      	movs	r2, #1
  return HAL_OK;  
 800826c:	4618      	mov	r0, r3
  heth->State= HAL_ETH_STATE_READY;
 800826e:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8008272:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
}
 8008276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 8008278:	f240 6123 	movw	r1, #1571	; 0x623
 800827c:	4898      	ldr	r0, [pc, #608]	; (80084e0 <HAL_ETH_ConfigMAC+0x4a4>)
 800827e:	f7fa fec3 	bl	8003008 <assert_failed>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 8008282:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008284:	f240 4204 	movw	r2, #1028	; 0x404
 8008288:	4293      	cmp	r3, r2
 800828a:	bf18      	it	ne
 800828c:	2b10      	cmpne	r3, #16
 800828e:	f47f af55 	bne.w	800813c <HAL_ETH_ConfigMAC+0x100>
 8008292:	e757      	b.n	8008144 <HAL_ETH_ConfigMAC+0x108>
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
 8008294:	f240 610e 	movw	r1, #1550	; 0x60e
 8008298:	4891      	ldr	r0, [pc, #580]	; (80084e0 <HAL_ETH_ConfigMAC+0x4a4>)
 800829a:	f7fa feb5 	bl	8003008 <assert_failed>
  if (macconf != NULL)
 800829e:	2c00      	cmp	r4, #0
 80082a0:	f47f aee7 	bne.w	8008072 <HAL_ETH_ConfigMAC+0x36>
    tmpreg = (heth->Instance)->MACCR;
 80082a4:	682a      	ldr	r2, [r5, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80082a6:	2001      	movs	r0, #1
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80082a8:	68ec      	ldr	r4, [r5, #12]
    tmpreg = (heth->Instance)->MACCR;
 80082aa:	6811      	ldr	r1, [r2, #0]
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80082ac:	68ab      	ldr	r3, [r5, #8]
    tmpreg &= ~((uint32_t)0x00004800);
 80082ae:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80082b2:	4323      	orrs	r3, r4
 80082b4:	430b      	orrs	r3, r1
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80082b6:	6013      	str	r3, [r2, #0]
    tmpreg = (heth->Instance)->MACCR;
 80082b8:	6814      	ldr	r4, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80082ba:	f7fd fa55 	bl	8005768 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 80082be:	682b      	ldr	r3, [r5, #0]
 80082c0:	601c      	str	r4, [r3, #0]
 80082c2:	e7d1      	b.n	8008268 <HAL_ETH_ConfigMAC+0x22c>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 80082c4:	f240 6122 	movw	r1, #1570	; 0x622
 80082c8:	4885      	ldr	r0, [pc, #532]	; (80084e0 <HAL_ETH_ConfigMAC+0x4a4>)
 80082ca:	f7fa fe9d 	bl	8003008 <assert_failed>
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 80082ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	f67f af2c 	bls.w	800812e <HAL_ETH_ConfigMAC+0xf2>
 80082d6:	e7cf      	b.n	8008278 <HAL_ETH_ConfigMAC+0x23c>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 80082d8:	f240 6121 	movw	r1, #1569	; 0x621
 80082dc:	4880      	ldr	r0, [pc, #512]	; (80084e0 <HAL_ETH_ConfigMAC+0x4a4>)
 80082de:	f7fa fe93 	bl	8003008 <assert_failed>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 80082e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80082e4:	f033 0308 	bics.w	r3, r3, #8
 80082e8:	f43f af1d 	beq.w	8008126 <HAL_ETH_ConfigMAC+0xea>
 80082ec:	e7ea      	b.n	80082c4 <HAL_ETH_ConfigMAC+0x288>
    assert_param(IS_ETH_WATCHDOG(macconf->Watchdog));
 80082ee:	f240 6113 	movw	r1, #1555	; 0x613
 80082f2:	487b      	ldr	r0, [pc, #492]	; (80084e0 <HAL_ETH_ConfigMAC+0x4a4>)
 80082f4:	f7fa fe88 	bl	8003008 <assert_failed>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 80082f8:	6863      	ldr	r3, [r4, #4]
 80082fa:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 80082fe:	f43f aec2 	beq.w	8008086 <HAL_ETH_ConfigMAC+0x4a>
 8008302:	e02b      	b.n	800835c <HAL_ETH_ConfigMAC+0x320>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 8008304:	f240 6119 	movw	r1, #1561	; 0x619
 8008308:	4875      	ldr	r0, [pc, #468]	; (80084e0 <HAL_ETH_ConfigMAC+0x4a4>)
 800830a:	f7fa fe7d 	bl	8003008 <assert_failed>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 800830e:	69e3      	ldr	r3, [r4, #28]
 8008310:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8008314:	f43f aed9 	beq.w	80080ca <HAL_ETH_ConfigMAC+0x8e>
 8008318:	e07a      	b.n	8008410 <HAL_ETH_ConfigMAC+0x3d4>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 800831a:	f44f 61c3 	mov.w	r1, #1560	; 0x618
 800831e:	4870      	ldr	r0, [pc, #448]	; (80084e0 <HAL_ETH_ConfigMAC+0x4a4>)
 8008320:	f7fa fe72 	bl	8003008 <assert_failed>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 8008324:	69a3      	ldr	r3, [r4, #24]
 8008326:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800832a:	f43f aec9 	beq.w	80080c0 <HAL_ETH_ConfigMAC+0x84>
 800832e:	e7e9      	b.n	8008304 <HAL_ETH_ConfigMAC+0x2c8>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 8008330:	f240 6117 	movw	r1, #1559	; 0x617
 8008334:	486a      	ldr	r0, [pc, #424]	; (80084e0 <HAL_ETH_ConfigMAC+0x4a4>)
 8008336:	f7fa fe67 	bl	8003008 <assert_failed>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 800833a:	6963      	ldr	r3, [r4, #20]
 800833c:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8008340:	f43f aeb9 	beq.w	80080b6 <HAL_ETH_ConfigMAC+0x7a>
 8008344:	e7e9      	b.n	800831a <HAL_ETH_ConfigMAC+0x2de>
    assert_param(IS_ETH_CARRIER_SENSE(macconf->CarrierSense));
 8008346:	f240 6116 	movw	r1, #1558	; 0x616
 800834a:	4865      	ldr	r0, [pc, #404]	; (80084e0 <HAL_ETH_ConfigMAC+0x4a4>)
 800834c:	f7fa fe5c 	bl	8003008 <assert_failed>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 8008350:	6923      	ldr	r3, [r4, #16]
 8008352:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 8008356:	f43f aea9 	beq.w	80080ac <HAL_ETH_ConfigMAC+0x70>
 800835a:	e7e9      	b.n	8008330 <HAL_ETH_ConfigMAC+0x2f4>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 800835c:	f240 6114 	movw	r1, #1556	; 0x614
 8008360:	485f      	ldr	r0, [pc, #380]	; (80084e0 <HAL_ETH_ConfigMAC+0x4a4>)
 8008362:	f7fa fe51 	bl	8003008 <assert_failed>
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 8008366:	68a3      	ldr	r3, [r4, #8]
 8008368:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800836c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008370:	f47f ae8f 	bne.w	8008092 <HAL_ETH_ConfigMAC+0x56>
 8008374:	e690      	b.n	8008098 <HAL_ETH_ConfigMAC+0x5c>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 8008376:	f240 612d 	movw	r1, #1581	; 0x62d
 800837a:	4859      	ldr	r0, [pc, #356]	; (80084e0 <HAL_ETH_ConfigMAC+0x4a4>)
 800837c:	f7fa fe44 	bl	8003008 <assert_failed>
 8008380:	e711      	b.n	80081a6 <HAL_ETH_ConfigMAC+0x16a>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 8008382:	f240 612c 	movw	r1, #1580	; 0x62c
 8008386:	4856      	ldr	r0, [pc, #344]	; (80084e0 <HAL_ETH_ConfigMAC+0x4a4>)
 8008388:	f7fa fe3e 	bl	8003008 <assert_failed>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 800838c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800838e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008392:	f4ff af08 	bcc.w	80081a6 <HAL_ETH_ConfigMAC+0x16a>
 8008396:	e7ee      	b.n	8008376 <HAL_ETH_ConfigMAC+0x33a>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 8008398:	f240 612b 	movw	r1, #1579	; 0x62b
 800839c:	4850      	ldr	r0, [pc, #320]	; (80084e0 <HAL_ETH_ConfigMAC+0x4a4>)
 800839e:	f7fa fe33 	bl	8003008 <assert_failed>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 80083a2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80083a4:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 80083a8:	f43f aef8 	beq.w	800819c <HAL_ETH_ConfigMAC+0x160>
 80083ac:	e7e9      	b.n	8008382 <HAL_ETH_ConfigMAC+0x346>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 80083ae:	f240 612a 	movw	r1, #1578	; 0x62a
 80083b2:	484b      	ldr	r0, [pc, #300]	; (80084e0 <HAL_ETH_ConfigMAC+0x4a4>)
 80083b4:	f7fa fe28 	bl	8003008 <assert_failed>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 80083b8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80083ba:	f033 0302 	bics.w	r3, r3, #2
 80083be:	f43f aee8 	beq.w	8008192 <HAL_ETH_ConfigMAC+0x156>
 80083c2:	e7e9      	b.n	8008398 <HAL_ETH_ConfigMAC+0x35c>
    assert_param(IS_ETH_UNICAST_PAUSE_FRAME_DETECT(macconf->UnicastPauseFrameDetect));
 80083c4:	f240 6129 	movw	r1, #1577	; 0x629
 80083c8:	4845      	ldr	r0, [pc, #276]	; (80084e0 <HAL_ETH_ConfigMAC+0x4a4>)
 80083ca:	f7fa fe1d 	bl	8003008 <assert_failed>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 80083ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083d0:	f033 0304 	bics.w	r3, r3, #4
 80083d4:	f43f aed8 	beq.w	8008188 <HAL_ETH_ConfigMAC+0x14c>
 80083d8:	e7e9      	b.n	80083ae <HAL_ETH_ConfigMAC+0x372>
    assert_param(IS_ETH_DEFERRAL_CHECK(macconf->DeferralCheck));
 80083da:	f240 611d 	movw	r1, #1565	; 0x61d
 80083de:	4840      	ldr	r0, [pc, #256]	; (80084e0 <HAL_ETH_ConfigMAC+0x4a4>)
 80083e0:	f7fa fe12 	bl	8003008 <assert_failed>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 80083e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80083e6:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 80083ea:	f43f ae82 	beq.w	80080f2 <HAL_ETH_ConfigMAC+0xb6>
 80083ee:	e01a      	b.n	8008426 <HAL_ETH_ConfigMAC+0x3ea>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 80083f0:	f240 611b 	movw	r1, #1563	; 0x61b
 80083f4:	483a      	ldr	r0, [pc, #232]	; (80084e0 <HAL_ETH_ConfigMAC+0x4a4>)
 80083f6:	f7fa fe07 	bl	8003008 <assert_failed>
    assert_param(IS_ETH_BACKOFF_LIMIT(macconf->BackOffLimit));
 80083fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083fc:	f033 0360 	bics.w	r3, r3, #96	; 0x60
 8008400:	f43f ae6d 	beq.w	80080de <HAL_ETH_ConfigMAC+0xa2>
 8008404:	f240 611c 	movw	r1, #1564	; 0x61c
 8008408:	4835      	ldr	r0, [pc, #212]	; (80084e0 <HAL_ETH_ConfigMAC+0x4a4>)
 800840a:	f7fa fdfd 	bl	8003008 <assert_failed>
 800840e:	e666      	b.n	80080de <HAL_ETH_ConfigMAC+0xa2>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 8008410:	f240 611a 	movw	r1, #1562	; 0x61a
 8008414:	4832      	ldr	r0, [pc, #200]	; (80084e0 <HAL_ETH_ConfigMAC+0x4a4>)
 8008416:	f7fa fdf7 	bl	8003008 <assert_failed>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 800841a:	6a23      	ldr	r3, [r4, #32]
 800841c:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8008420:	f43f ae58 	beq.w	80080d4 <HAL_ETH_ConfigMAC+0x98>
 8008424:	e7e4      	b.n	80083f0 <HAL_ETH_ConfigMAC+0x3b4>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 8008426:	f240 611e 	movw	r1, #1566	; 0x61e
 800842a:	482d      	ldr	r0, [pc, #180]	; (80084e0 <HAL_ETH_ConfigMAC+0x4a4>)
 800842c:	f7fa fdec 	bl	8003008 <assert_failed>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 8008430:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008432:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 8008436:	f47f ae60 	bne.w	80080fa <HAL_ETH_ConfigMAC+0xbe>
 800843a:	e662      	b.n	8008102 <HAL_ETH_ConfigMAC+0xc6>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 800843c:	f240 6126 	movw	r1, #1574	; 0x626
 8008440:	4827      	ldr	r0, [pc, #156]	; (80084e0 <HAL_ETH_ConfigMAC+0x4a4>)
 8008442:	f7fa fde1 	bl	8003008 <assert_failed>
    assert_param(IS_ETH_ZEROQUANTA_PAUSE(macconf->ZeroQuantaPause));
 8008446:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008448:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800844c:	f43f ae8d 	beq.w	800816a <HAL_ETH_ConfigMAC+0x12e>
 8008450:	f240 6127 	movw	r1, #1575	; 0x627
 8008454:	4822      	ldr	r0, [pc, #136]	; (80084e0 <HAL_ETH_ConfigMAC+0x4a4>)
 8008456:	f7fa fdd7 	bl	8003008 <assert_failed>
    assert_param(IS_ETH_PAUSE_LOW_THRESHOLD(macconf->PauseLowThreshold));
 800845a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800845c:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 8008460:	f43f ae88 	beq.w	8008174 <HAL_ETH_ConfigMAC+0x138>
 8008464:	f44f 61c5 	mov.w	r1, #1576	; 0x628
 8008468:	481d      	ldr	r0, [pc, #116]	; (80084e0 <HAL_ETH_ConfigMAC+0x4a4>)
 800846a:	f7fa fdcd 	bl	8003008 <assert_failed>
 800846e:	e681      	b.n	8008174 <HAL_ETH_ConfigMAC+0x138>
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 8008470:	f240 610d 	movw	r1, #1549	; 0x60d
 8008474:	481a      	ldr	r0, [pc, #104]	; (80084e0 <HAL_ETH_ConfigMAC+0x4a4>)
 8008476:	f7fa fdc7 	bl	8003008 <assert_failed>
 800847a:	e5f2      	b.n	8008062 <HAL_ETH_ConfigMAC+0x26>
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 800847c:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8008480:	4817      	ldr	r0, [pc, #92]	; (80084e0 <HAL_ETH_ConfigMAC+0x4a4>)
 8008482:	f7fa fdc1 	bl	8003008 <assert_failed>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 8008486:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008488:	f033 0320 	bics.w	r3, r3, #32
 800848c:	f43f ae46 	beq.w	800811c <HAL_ETH_ConfigMAC+0xe0>
 8008490:	e722      	b.n	80082d8 <HAL_ETH_ConfigMAC+0x29c>
    assert_param(IS_ETH_UNICAST_FRAMES_FILTER(macconf->UnicastFramesFilter));
 8008492:	f240 6125 	movw	r1, #1573	; 0x625
 8008496:	4812      	ldr	r0, [pc, #72]	; (80084e0 <HAL_ETH_ConfigMAC+0x4a4>)
 8008498:	f7fa fdb6 	bl	8003008 <assert_failed>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 800849c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800849e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084a2:	f4ff ae5d 	bcc.w	8008160 <HAL_ETH_ConfigMAC+0x124>
 80084a6:	e7c9      	b.n	800843c <HAL_ETH_ConfigMAC+0x400>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 80084a8:	f240 611f 	movw	r1, #1567	; 0x61f
 80084ac:	480c      	ldr	r0, [pc, #48]	; (80084e0 <HAL_ETH_ConfigMAC+0x4a4>)
 80084ae:	f7fa fdab 	bl	8003008 <assert_failed>
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 80084b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80084b4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80084b8:	2a40      	cmp	r2, #64	; 0x40
 80084ba:	f47f ae27 	bne.w	800810c <HAL_ETH_ConfigMAC+0xd0>
 80084be:	e628      	b.n	8008112 <HAL_ETH_ConfigMAC+0xd6>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 80084c0:	f240 6124 	movw	r1, #1572	; 0x624
 80084c4:	4806      	ldr	r0, [pc, #24]	; (80084e0 <HAL_ETH_ConfigMAC+0x4a4>)
 80084c6:	f7fa fd9f 	bl	8003008 <assert_failed>
 80084ca:	e63b      	b.n	8008144 <HAL_ETH_ConfigMAC+0x108>
  __HAL_LOCK(heth);
 80084cc:	2002      	movs	r0, #2
}
 80084ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 80084d0:	f240 6115 	movw	r1, #1557	; 0x615
 80084d4:	4802      	ldr	r0, [pc, #8]	; (80084e0 <HAL_ETH_ConfigMAC+0x4a4>)
 80084d6:	f7fa fd97 	bl	8003008 <assert_failed>
 80084da:	e5dd      	b.n	8008098 <HAL_ETH_ConfigMAC+0x5c>
 80084dc:	ff20810f 	.word	0xff20810f
 80084e0:	08026844 	.word	0x08026844

080084e4 <HAL_GPIO_Init>:
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80084e4:	4bbf      	ldr	r3, [pc, #764]	; (80087e4 <HAL_GPIO_Init+0x300>)
 80084e6:	4ac0      	ldr	r2, [pc, #768]	; (80087e8 <HAL_GPIO_Init+0x304>)
 80084e8:	4290      	cmp	r0, r2
 80084ea:	bf18      	it	ne
 80084ec:	4298      	cmpne	r0, r3
{
 80084ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80084f2:	bf18      	it	ne
 80084f4:	2301      	movne	r3, #1
{
 80084f6:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80084f8:	bf08      	it	eq
 80084fa:	2300      	moveq	r3, #0
{
 80084fc:	4681      	mov	r9, r0
 80084fe:	468b      	mov	fp, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8008500:	9301      	str	r3, [sp, #4]
 8008502:	d026      	beq.n	8008552 <HAL_GPIO_Init+0x6e>
 8008504:	4bb9      	ldr	r3, [pc, #740]	; (80087ec <HAL_GPIO_Init+0x308>)
 8008506:	4298      	cmp	r0, r3
 8008508:	d023      	beq.n	8008552 <HAL_GPIO_Init+0x6e>
 800850a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800850e:	4298      	cmp	r0, r3
 8008510:	d01f      	beq.n	8008552 <HAL_GPIO_Init+0x6e>
 8008512:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008516:	4298      	cmp	r0, r3
 8008518:	d01b      	beq.n	8008552 <HAL_GPIO_Init+0x6e>
 800851a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800851e:	4298      	cmp	r0, r3
 8008520:	d017      	beq.n	8008552 <HAL_GPIO_Init+0x6e>
 8008522:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008526:	4298      	cmp	r0, r3
 8008528:	d013      	beq.n	8008552 <HAL_GPIO_Init+0x6e>
 800852a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800852e:	4298      	cmp	r0, r3
 8008530:	d00f      	beq.n	8008552 <HAL_GPIO_Init+0x6e>
 8008532:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8008536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800853a:	4290      	cmp	r0, r2
 800853c:	bf18      	it	ne
 800853e:	4298      	cmpne	r0, r3
 8008540:	d007      	beq.n	8008552 <HAL_GPIO_Init+0x6e>
 8008542:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008546:	4298      	cmp	r0, r3
 8008548:	d003      	beq.n	8008552 <HAL_GPIO_Init+0x6e>
 800854a:	21b1      	movs	r1, #177	; 0xb1
 800854c:	48a8      	ldr	r0, [pc, #672]	; (80087f0 <HAL_GPIO_Init+0x30c>)
 800854e:	f7fa fd5b 	bl	8003008 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8008552:	f8bb 3000 	ldrh.w	r3, [fp]
 8008556:	2b00      	cmp	r3, #0
 8008558:	f000 8116 	beq.w	8008788 <HAL_GPIO_Init+0x2a4>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800855c:	f8db 2004 	ldr.w	r2, [fp, #4]
 8008560:	4ba4      	ldr	r3, [pc, #656]	; (80087f4 <HAL_GPIO_Init+0x310>)
 8008562:	4ca5      	ldr	r4, [pc, #660]	; (80087f8 <HAL_GPIO_Init+0x314>)
 8008564:	f1a2 0011 	sub.w	r0, r2, #17
 8008568:	429a      	cmp	r2, r3
 800856a:	bf18      	it	ne
 800856c:	2a03      	cmpne	r2, #3
 800856e:	f422 1100 	bic.w	r1, r2, #2097152	; 0x200000
 8008572:	bf8c      	ite	hi
 8008574:	2301      	movhi	r3, #1
 8008576:	2300      	movls	r3, #0
 8008578:	42a2      	cmp	r2, r4
 800857a:	bf0c      	ite	eq
 800857c:	2300      	moveq	r3, #0
 800857e:	f003 0301 	andne.w	r3, r3, #1
 8008582:	4a9e      	ldr	r2, [pc, #632]	; (80087fc <HAL_GPIO_Init+0x318>)
 8008584:	2801      	cmp	r0, #1
 8008586:	bf94      	ite	ls
 8008588:	2300      	movls	r3, #0
 800858a:	f003 0301 	andhi.w	r3, r3, #1
 800858e:	4291      	cmp	r1, r2
 8008590:	bf0c      	ite	eq
 8008592:	2300      	moveq	r3, #0
 8008594:	f003 0301 	andne.w	r3, r3, #1
 8008598:	b11b      	cbz	r3, 80085a2 <HAL_GPIO_Init+0xbe>
 800859a:	4b99      	ldr	r3, [pc, #612]	; (8008800 <HAL_GPIO_Init+0x31c>)
 800859c:	4299      	cmp	r1, r3
 800859e:	f040 8116 	bne.w	80087ce <HAL_GPIO_Init+0x2ea>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80085a2:	f8db 3008 	ldr.w	r3, [fp, #8]
 80085a6:	2b02      	cmp	r3, #2
 80085a8:	f200 80f3 	bhi.w	8008792 <HAL_GPIO_Init+0x2ae>
{
 80085ac:	f04f 0800 	mov.w	r8, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80085b0:	f8df a274 	ldr.w	sl, [pc, #628]	; 8008828 <HAL_GPIO_Init+0x344>
 80085b4:	e005      	b.n	80085c2 <HAL_GPIO_Init+0xde>
  for(position = 0; position < GPIO_NUMBER; position++)
 80085b6:	f108 0801 	add.w	r8, r8, #1
 80085ba:	f1b8 0f10 	cmp.w	r8, #16
 80085be:	f000 80c2 	beq.w	8008746 <HAL_GPIO_Init+0x262>
    ioposition = ((uint32_t)0x01) << position;
 80085c2:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80085c4:	f8db 5000 	ldr.w	r5, [fp]
    ioposition = ((uint32_t)0x01) << position;
 80085c8:	fa04 f408 	lsl.w	r4, r4, r8
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80085cc:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 80085ce:	42ac      	cmp	r4, r5
 80085d0:	d1f1      	bne.n	80085b6 <HAL_GPIO_Init+0xd2>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80085d2:	f8db 1004 	ldr.w	r1, [fp, #4]
 80085d6:	ea4f 0748 	mov.w	r7, r8, lsl #1
 80085da:	2203      	movs	r2, #3
 80085dc:	f021 0010 	bic.w	r0, r1, #16
 80085e0:	40ba      	lsls	r2, r7
 80085e2:	1e43      	subs	r3, r0, #1
 80085e4:	43d6      	mvns	r6, r2
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	d819      	bhi.n	800861e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80085ea:	f8db 300c 	ldr.w	r3, [fp, #12]
 80085ee:	2b03      	cmp	r3, #3
 80085f0:	f200 80ac 	bhi.w	800874c <HAL_GPIO_Init+0x268>
        temp = GPIOx->OSPEEDR; 
 80085f4:	f8d9 2008 	ldr.w	r2, [r9, #8]
        temp |= (GPIO_Init->Speed << (position * 2));
 80085f8:	fa03 fc07 	lsl.w	ip, r3, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80085fc:	f3c1 1300 	ubfx	r3, r1, #4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008600:	ea02 0e06 	and.w	lr, r2, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8008604:	fa03 f308 	lsl.w	r3, r3, r8
        temp |= (GPIO_Init->Speed << (position * 2));
 8008608:	ea4c 020e 	orr.w	r2, ip, lr
        GPIOx->OSPEEDR = temp;
 800860c:	f8c9 2008 	str.w	r2, [r9, #8]
        temp = GPIOx->OTYPER;
 8008610:	f8d9 2004 	ldr.w	r2, [r9, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008614:	ea22 0404 	bic.w	r4, r2, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8008618:	431c      	orrs	r4, r3
        GPIOx->OTYPER = temp;
 800861a:	f8c9 4004 	str.w	r4, [r9, #4]
      temp = GPIOx->PUPDR;
 800861e:	f8d9 400c 	ldr.w	r4, [r9, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008622:	2802      	cmp	r0, #2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8008624:	f8db 3008 	ldr.w	r3, [fp, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8008628:	ea04 0406 	and.w	r4, r4, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800862c:	fa03 f307 	lsl.w	r3, r3, r7
 8008630:	ea43 0304 	orr.w	r3, r3, r4
      GPIOx->PUPDR = temp;
 8008634:	f8c9 300c 	str.w	r3, [r9, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008638:	d117      	bne.n	800866a <HAL_GPIO_Init+0x186>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800863a:	f8db 3010 	ldr.w	r3, [fp, #16]
 800863e:	2b0f      	cmp	r3, #15
 8008640:	f200 8094 	bhi.w	800876c <HAL_GPIO_Init+0x288>
        temp = GPIOx->AFR[position >> 3];
 8008644:	ea4f 00d8 	mov.w	r0, r8, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008648:	f008 0e07 	and.w	lr, r8, #7
 800864c:	f04f 0c0f 	mov.w	ip, #15
 8008650:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8008654:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8008658:	6a04      	ldr	r4, [r0, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800865a:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800865e:	fa03 f30e 	lsl.w	r3, r3, lr
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008662:	ea24 040c 	bic.w	r4, r4, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8008666:	4323      	orrs	r3, r4
        GPIOx->AFR[position >> 3] = temp;
 8008668:	6203      	str	r3, [r0, #32]
      temp = GPIOx->MODER;
 800866a:	f8d9 2000 	ldr.w	r2, [r9]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800866e:	f001 0303 	and.w	r3, r1, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008672:	4032      	ands	r2, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008674:	40bb      	lsls	r3, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008676:	00cf      	lsls	r7, r1, #3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008678:	ea43 0302 	orr.w	r3, r3, r2
      GPIOx->MODER = temp;
 800867c:	f8c9 3000 	str.w	r3, [r9]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008680:	d599      	bpl.n	80085b6 <HAL_GPIO_Init+0xd2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008682:	f8da 0044 	ldr.w	r0, [sl, #68]	; 0x44
 8008686:	f028 0703 	bic.w	r7, r8, #3
 800868a:	4c5e      	ldr	r4, [pc, #376]	; (8008804 <HAL_GPIO_Init+0x320>)

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800868c:	f008 0303 	and.w	r3, r8, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008690:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008694:	220f      	movs	r2, #15
 8008696:	443c      	add	r4, r7
 8008698:	009b      	lsls	r3, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800869a:	f8ca 0044 	str.w	r0, [sl, #68]	; 0x44
 800869e:	f8da 0044 	ldr.w	r0, [sl, #68]	; 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80086a2:	409a      	lsls	r2, r3
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80086a4:	4f50      	ldr	r7, [pc, #320]	; (80087e8 <HAL_GPIO_Init+0x304>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80086a6:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80086aa:	45b9      	cmp	r9, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80086ac:	9003      	str	r0, [sp, #12]
 80086ae:	9803      	ldr	r0, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 80086b0:	68a0      	ldr	r0, [r4, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80086b2:	ea20 0202 	bic.w	r2, r0, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80086b6:	d01f      	beq.n	80086f8 <HAL_GPIO_Init+0x214>
 80086b8:	9801      	ldr	r0, [sp, #4]
 80086ba:	2800      	cmp	r0, #0
 80086bc:	d051      	beq.n	8008762 <HAL_GPIO_Init+0x27e>
 80086be:	484b      	ldr	r0, [pc, #300]	; (80087ec <HAL_GPIO_Init+0x308>)
 80086c0:	4581      	cmp	r9, r0
 80086c2:	d05c      	beq.n	800877e <HAL_GPIO_Init+0x29a>
 80086c4:	4850      	ldr	r0, [pc, #320]	; (8008808 <HAL_GPIO_Init+0x324>)
 80086c6:	4581      	cmp	r9, r0
 80086c8:	d068      	beq.n	800879c <HAL_GPIO_Init+0x2b8>
 80086ca:	4850      	ldr	r0, [pc, #320]	; (800880c <HAL_GPIO_Init+0x328>)
 80086cc:	4581      	cmp	r9, r0
 80086ce:	d06a      	beq.n	80087a6 <HAL_GPIO_Init+0x2c2>
 80086d0:	484f      	ldr	r0, [pc, #316]	; (8008810 <HAL_GPIO_Init+0x32c>)
 80086d2:	4581      	cmp	r9, r0
 80086d4:	d071      	beq.n	80087ba <HAL_GPIO_Init+0x2d6>
 80086d6:	484f      	ldr	r0, [pc, #316]	; (8008814 <HAL_GPIO_Init+0x330>)
 80086d8:	4581      	cmp	r9, r0
 80086da:	d073      	beq.n	80087c4 <HAL_GPIO_Init+0x2e0>
 80086dc:	484e      	ldr	r0, [pc, #312]	; (8008818 <HAL_GPIO_Init+0x334>)
 80086de:	4581      	cmp	r9, r0
 80086e0:	d066      	beq.n	80087b0 <HAL_GPIO_Init+0x2cc>
 80086e2:	484e      	ldr	r0, [pc, #312]	; (800881c <HAL_GPIO_Init+0x338>)
 80086e4:	4581      	cmp	r9, r0
 80086e6:	d077      	beq.n	80087d8 <HAL_GPIO_Init+0x2f4>
 80086e8:	484d      	ldr	r0, [pc, #308]	; (8008820 <HAL_GPIO_Init+0x33c>)
 80086ea:	4581      	cmp	r9, r0
 80086ec:	bf0c      	ite	eq
 80086ee:	2009      	moveq	r0, #9
 80086f0:	200a      	movne	r0, #10
 80086f2:	fa00 f303 	lsl.w	r3, r0, r3
 80086f6:	431a      	orrs	r2, r3
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80086f8:	4b4a      	ldr	r3, [pc, #296]	; (8008824 <HAL_GPIO_Init+0x340>)
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80086fa:	03ce      	lsls	r6, r1, #15
        SYSCFG->EXTICR[position >> 2] = temp;
 80086fc:	60a2      	str	r2, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80086fe:	ea6f 0205 	mvn.w	r2, r5
        temp = EXTI->IMR;
 8008702:	681b      	ldr	r3, [r3, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8008704:	f108 0801 	add.w	r8, r8, #1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8008708:	4846      	ldr	r0, [pc, #280]	; (8008824 <HAL_GPIO_Init+0x340>)
          temp |= iocurrent;
 800870a:	bf4c      	ite	mi
 800870c:	432b      	orrmi	r3, r5
        temp &= ~((uint32_t)iocurrent);
 800870e:	4013      	andpl	r3, r2

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008710:	038c      	lsls	r4, r1, #14
        EXTI->IMR = temp;
 8008712:	6003      	str	r3, [r0, #0]
        temp = EXTI->EMR;
 8008714:	6843      	ldr	r3, [r0, #4]
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8008716:	4843      	ldr	r0, [pc, #268]	; (8008824 <HAL_GPIO_Init+0x340>)
          temp |= iocurrent;
 8008718:	bf4c      	ite	mi
 800871a:	432b      	orrmi	r3, r5
        temp &= ~((uint32_t)iocurrent);
 800871c:	4013      	andpl	r3, r2
        EXTI->EMR = temp;
 800871e:	6043      	str	r3, [r0, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008720:	6883      	ldr	r3, [r0, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008722:	02c8      	lsls	r0, r1, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8008724:	483f      	ldr	r0, [pc, #252]	; (8008824 <HAL_GPIO_Init+0x340>)
          temp |= iocurrent;
 8008726:	bf4c      	ite	mi
 8008728:	432b      	orrmi	r3, r5
        temp &= ~((uint32_t)iocurrent);
 800872a:	4013      	andpl	r3, r2

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800872c:	0289      	lsls	r1, r1, #10
        EXTI->RTSR = temp;
 800872e:	6083      	str	r3, [r0, #8]
        temp = EXTI->FTSR;
 8008730:	68c3      	ldr	r3, [r0, #12]
        temp &= ~((uint32_t)iocurrent);
 8008732:	bf54      	ite	pl
 8008734:	ea02 0503 	andpl.w	r5, r2, r3
        {
          temp |= iocurrent;
 8008738:	431d      	orrmi	r5, r3
        }
        EXTI->FTSR = temp;
 800873a:	4b3a      	ldr	r3, [pc, #232]	; (8008824 <HAL_GPIO_Init+0x340>)
  for(position = 0; position < GPIO_NUMBER; position++)
 800873c:	f1b8 0f10 	cmp.w	r8, #16
        EXTI->FTSR = temp;
 8008740:	60dd      	str	r5, [r3, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8008742:	f47f af3e 	bne.w	80085c2 <HAL_GPIO_Init+0xde>
      }
    }
  }
}
 8008746:	b005      	add	sp, #20
 8008748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800874c:	21c6      	movs	r1, #198	; 0xc6
 800874e:	4828      	ldr	r0, [pc, #160]	; (80087f0 <HAL_GPIO_Init+0x30c>)
 8008750:	f7fa fc5a 	bl	8003008 <assert_failed>
 8008754:	f8db 1004 	ldr.w	r1, [fp, #4]
 8008758:	f8db 300c 	ldr.w	r3, [fp, #12]
 800875c:	f021 0010 	bic.w	r0, r1, #16
 8008760:	e748      	b.n	80085f4 <HAL_GPIO_Init+0x110>
 8008762:	2001      	movs	r0, #1
 8008764:	fa00 f303 	lsl.w	r3, r0, r3
 8008768:	431a      	orrs	r2, r3
 800876a:	e7c5      	b.n	80086f8 <HAL_GPIO_Init+0x214>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800876c:	21de      	movs	r1, #222	; 0xde
 800876e:	4820      	ldr	r0, [pc, #128]	; (80087f0 <HAL_GPIO_Init+0x30c>)
 8008770:	f7fa fc4a 	bl	8003008 <assert_failed>
 8008774:	f8db 3010 	ldr.w	r3, [fp, #16]
 8008778:	f8db 1004 	ldr.w	r1, [fp, #4]
 800877c:	e762      	b.n	8008644 <HAL_GPIO_Init+0x160>
 800877e:	2002      	movs	r0, #2
 8008780:	fa00 f303 	lsl.w	r3, r0, r3
 8008784:	431a      	orrs	r2, r3
 8008786:	e7b7      	b.n	80086f8 <HAL_GPIO_Init+0x214>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8008788:	21b2      	movs	r1, #178	; 0xb2
 800878a:	4819      	ldr	r0, [pc, #100]	; (80087f0 <HAL_GPIO_Init+0x30c>)
 800878c:	f7fa fc3c 	bl	8003008 <assert_failed>
 8008790:	e6e4      	b.n	800855c <HAL_GPIO_Init+0x78>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8008792:	21b4      	movs	r1, #180	; 0xb4
 8008794:	4816      	ldr	r0, [pc, #88]	; (80087f0 <HAL_GPIO_Init+0x30c>)
 8008796:	f7fa fc37 	bl	8003008 <assert_failed>
 800879a:	e707      	b.n	80085ac <HAL_GPIO_Init+0xc8>
 800879c:	2003      	movs	r0, #3
 800879e:	fa00 f303 	lsl.w	r3, r0, r3
 80087a2:	431a      	orrs	r2, r3
 80087a4:	e7a8      	b.n	80086f8 <HAL_GPIO_Init+0x214>
 80087a6:	2004      	movs	r0, #4
 80087a8:	fa00 f303 	lsl.w	r3, r0, r3
 80087ac:	431a      	orrs	r2, r3
 80087ae:	e7a3      	b.n	80086f8 <HAL_GPIO_Init+0x214>
 80087b0:	2007      	movs	r0, #7
 80087b2:	fa00 f303 	lsl.w	r3, r0, r3
 80087b6:	431a      	orrs	r2, r3
 80087b8:	e79e      	b.n	80086f8 <HAL_GPIO_Init+0x214>
 80087ba:	2005      	movs	r0, #5
 80087bc:	fa00 f303 	lsl.w	r3, r0, r3
 80087c0:	431a      	orrs	r2, r3
 80087c2:	e799      	b.n	80086f8 <HAL_GPIO_Init+0x214>
 80087c4:	2006      	movs	r0, #6
 80087c6:	fa00 f303 	lsl.w	r3, r0, r3
 80087ca:	431a      	orrs	r2, r3
 80087cc:	e794      	b.n	80086f8 <HAL_GPIO_Init+0x214>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80087ce:	21b3      	movs	r1, #179	; 0xb3
 80087d0:	4807      	ldr	r0, [pc, #28]	; (80087f0 <HAL_GPIO_Init+0x30c>)
 80087d2:	f7fa fc19 	bl	8003008 <assert_failed>
 80087d6:	e6e4      	b.n	80085a2 <HAL_GPIO_Init+0xbe>
 80087d8:	2008      	movs	r0, #8
 80087da:	fa00 f303 	lsl.w	r3, r0, r3
 80087de:	431a      	orrs	r2, r3
 80087e0:	e78a      	b.n	80086f8 <HAL_GPIO_Init+0x214>
 80087e2:	bf00      	nop
 80087e4:	40020400 	.word	0x40020400
 80087e8:	40020000 	.word	0x40020000
 80087ec:	40020800 	.word	0x40020800
 80087f0:	0802687c 	.word	0x0802687c
 80087f4:	10210000 	.word	0x10210000
 80087f8:	10220000 	.word	0x10220000
 80087fc:	10110000 	.word	0x10110000
 8008800:	10120000 	.word	0x10120000
 8008804:	40013800 	.word	0x40013800
 8008808:	40020c00 	.word	0x40020c00
 800880c:	40021000 	.word	0x40021000
 8008810:	40021400 	.word	0x40021400
 8008814:	40021800 	.word	0x40021800
 8008818:	40021c00 	.word	0x40021c00
 800881c:	40022000 	.word	0x40022000
 8008820:	40022400 	.word	0x40022400
 8008824:	40013c00 	.word	0x40013c00
 8008828:	40023800 	.word	0x40023800

0800882c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800882c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t tmp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8008830:	4a6e      	ldr	r2, [pc, #440]	; (80089ec <HAL_GPIO_DeInit+0x1c0>)
{
 8008832:	4604      	mov	r4, r0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8008834:	4b6e      	ldr	r3, [pc, #440]	; (80089f0 <HAL_GPIO_DeInit+0x1c4>)
{
 8008836:	4688      	mov	r8, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8008838:	4290      	cmp	r0, r2
 800883a:	bf18      	it	ne
 800883c:	4298      	cmpne	r0, r3
 800883e:	bf14      	ite	ne
 8008840:	f04f 0901 	movne.w	r9, #1
 8008844:	f04f 0900 	moveq.w	r9, #0
 8008848:	d028      	beq.n	800889c <HAL_GPIO_DeInit+0x70>
 800884a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800884e:	4298      	cmp	r0, r3
 8008850:	d024      	beq.n	800889c <HAL_GPIO_DeInit+0x70>
 8008852:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008856:	4298      	cmp	r0, r3
 8008858:	d020      	beq.n	800889c <HAL_GPIO_DeInit+0x70>
 800885a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800885e:	4298      	cmp	r0, r3
 8008860:	d01c      	beq.n	800889c <HAL_GPIO_DeInit+0x70>
 8008862:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008866:	4298      	cmp	r0, r3
 8008868:	d018      	beq.n	800889c <HAL_GPIO_DeInit+0x70>
 800886a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800886e:	4298      	cmp	r0, r3
 8008870:	d014      	beq.n	800889c <HAL_GPIO_DeInit+0x70>
 8008872:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008876:	4298      	cmp	r0, r3
 8008878:	d010      	beq.n	800889c <HAL_GPIO_DeInit+0x70>
 800887a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800887e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008882:	4290      	cmp	r0, r2
 8008884:	bf18      	it	ne
 8008886:	4298      	cmpne	r0, r3
 8008888:	d008      	beq.n	800889c <HAL_GPIO_DeInit+0x70>
 800888a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800888e:	4298      	cmp	r0, r3
 8008890:	d004      	beq.n	800889c <HAL_GPIO_DeInit+0x70>
 8008892:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8008896:	4857      	ldr	r0, [pc, #348]	; (80089f4 <HAL_GPIO_DeInit+0x1c8>)
 8008898:	f7fa fbb6 	bl	8003008 <assert_failed>
{
 800889c:	2300      	movs	r3, #0
 800889e:	f8df b178 	ldr.w	fp, [pc, #376]	; 8008a18 <HAL_GPIO_DeInit+0x1ec>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80088a2:	f8df a148 	ldr.w	sl, [pc, #328]	; 80089ec <HAL_GPIO_DeInit+0x1c0>
 80088a6:	464e      	mov	r6, r9
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80088a8:	f8df e170 	ldr.w	lr, [pc, #368]	; 8008a1c <HAL_GPIO_DeInit+0x1f0>
 80088ac:	e002      	b.n	80088b4 <HAL_GPIO_DeInit+0x88>
  for(position = 0; position < GPIO_NUMBER; position++)
 80088ae:	3301      	adds	r3, #1
 80088b0:	2b10      	cmp	r3, #16
 80088b2:	d078      	beq.n	80089a6 <HAL_GPIO_DeInit+0x17a>
    ioposition = ((uint32_t)0x01) << position;
 80088b4:	2101      	movs	r1, #1
 80088b6:	fa01 f003 	lsl.w	r0, r1, r3
    iocurrent = (GPIO_Pin) & ioposition;
 80088ba:	ea00 0508 	and.w	r5, r0, r8
    if(iocurrent == ioposition)
 80088be:	42a8      	cmp	r0, r5
 80088c0:	d1f5      	bne.n	80088ae <HAL_GPIO_DeInit+0x82>
 80088c2:	f023 0703 	bic.w	r7, r3, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80088c6:	f003 0203 	and.w	r2, r3, #3
 80088ca:	f04f 0c0f 	mov.w	ip, #15
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80088ce:	4554      	cmp	r4, sl
 80088d0:	445f      	add	r7, fp
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80088d2:	ea4f 0282 	mov.w	r2, r2, lsl #2
      tmp = SYSCFG->EXTICR[position >> 2];
 80088d6:	f8d7 9008 	ldr.w	r9, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80088da:	fa0c fc02 	lsl.w	ip, ip, r2
 80088de:	ea0c 0909 	and.w	r9, ip, r9
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80088e2:	d01c      	beq.n	800891e <HAL_GPIO_DeInit+0xf2>
 80088e4:	b1c6      	cbz	r6, 8008918 <HAL_GPIO_DeInit+0xec>
 80088e6:	4944      	ldr	r1, [pc, #272]	; (80089f8 <HAL_GPIO_DeInit+0x1cc>)
 80088e8:	428c      	cmp	r4, r1
 80088ea:	d05e      	beq.n	80089aa <HAL_GPIO_DeInit+0x17e>
 80088ec:	4943      	ldr	r1, [pc, #268]	; (80089fc <HAL_GPIO_DeInit+0x1d0>)
 80088ee:	428c      	cmp	r4, r1
 80088f0:	d05f      	beq.n	80089b2 <HAL_GPIO_DeInit+0x186>
 80088f2:	4943      	ldr	r1, [pc, #268]	; (8008a00 <HAL_GPIO_DeInit+0x1d4>)
 80088f4:	428c      	cmp	r4, r1
 80088f6:	d060      	beq.n	80089ba <HAL_GPIO_DeInit+0x18e>
 80088f8:	4942      	ldr	r1, [pc, #264]	; (8008a04 <HAL_GPIO_DeInit+0x1d8>)
 80088fa:	428c      	cmp	r4, r1
 80088fc:	d061      	beq.n	80089c2 <HAL_GPIO_DeInit+0x196>
 80088fe:	4942      	ldr	r1, [pc, #264]	; (8008a08 <HAL_GPIO_DeInit+0x1dc>)
 8008900:	428c      	cmp	r4, r1
 8008902:	d062      	beq.n	80089ca <HAL_GPIO_DeInit+0x19e>
 8008904:	4941      	ldr	r1, [pc, #260]	; (8008a0c <HAL_GPIO_DeInit+0x1e0>)
 8008906:	428c      	cmp	r4, r1
 8008908:	d067      	beq.n	80089da <HAL_GPIO_DeInit+0x1ae>
 800890a:	4941      	ldr	r1, [pc, #260]	; (8008a10 <HAL_GPIO_DeInit+0x1e4>)
 800890c:	428c      	cmp	r4, r1
 800890e:	d068      	beq.n	80089e2 <HAL_GPIO_DeInit+0x1b6>
 8008910:	4940      	ldr	r1, [pc, #256]	; (8008a14 <HAL_GPIO_DeInit+0x1e8>)
 8008912:	428c      	cmp	r4, r1
 8008914:	d05d      	beq.n	80089d2 <HAL_GPIO_DeInit+0x1a6>
 8008916:	210a      	movs	r1, #10
 8008918:	fa01 f202 	lsl.w	r2, r1, r2
 800891c:	e000      	b.n	8008920 <HAL_GPIO_DeInit+0xf4>
 800891e:	2200      	movs	r2, #0
 8008920:	4591      	cmp	r9, r2
 8008922:	d118      	bne.n	8008956 <HAL_GPIO_DeInit+0x12a>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8008924:	f8de 2000 	ldr.w	r2, [lr]
 8008928:	43ed      	mvns	r5, r5
 800892a:	402a      	ands	r2, r5
 800892c:	f8ce 2000 	str.w	r2, [lr]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8008930:	f8de 2004 	ldr.w	r2, [lr, #4]
 8008934:	402a      	ands	r2, r5
 8008936:	f8ce 2004 	str.w	r2, [lr, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800893a:	f8de 2008 	ldr.w	r2, [lr, #8]
 800893e:	402a      	ands	r2, r5
 8008940:	f8ce 2008 	str.w	r2, [lr, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8008944:	f8de 200c 	ldr.w	r2, [lr, #12]
 8008948:	4015      	ands	r5, r2
 800894a:	f8ce 500c 	str.w	r5, [lr, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800894e:	68ba      	ldr	r2, [r7, #8]
 8008950:	ea22 020c 	bic.w	r2, r2, ip
 8008954:	60ba      	str	r2, [r7, #8]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008956:	2103      	movs	r1, #3
 8008958:	005a      	lsls	r2, r3, #1
 800895a:	f8d4 c000 	ldr.w	ip, [r4]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800895e:	270f      	movs	r7, #15
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008960:	fa01 f202 	lsl.w	r2, r1, r2
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008964:	fa23 f501 	lsr.w	r5, r3, r1
 8008968:	f003 0107 	and.w	r1, r3, #7
  for(position = 0; position < GPIO_NUMBER; position++)
 800896c:	3301      	adds	r3, #1
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800896e:	43d2      	mvns	r2, r2
 8008970:	eb04 0585 	add.w	r5, r4, r5, lsl #2
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008974:	0089      	lsls	r1, r1, #2
  for(position = 0; position < GPIO_NUMBER; position++)
 8008976:	2b10      	cmp	r3, #16
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008978:	ea0c 0c02 	and.w	ip, ip, r2
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800897c:	fa07 f701 	lsl.w	r7, r7, r1
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008980:	f8c4 c000 	str.w	ip, [r4]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008984:	6a29      	ldr	r1, [r5, #32]
 8008986:	ea21 0107 	bic.w	r1, r1, r7
 800898a:	6229      	str	r1, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800898c:	68e1      	ldr	r1, [r4, #12]
 800898e:	ea01 0102 	and.w	r1, r1, r2
 8008992:	60e1      	str	r1, [r4, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008994:	6861      	ldr	r1, [r4, #4]
 8008996:	ea21 0000 	bic.w	r0, r1, r0
 800899a:	6060      	str	r0, [r4, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800899c:	68a1      	ldr	r1, [r4, #8]
 800899e:	ea02 0201 	and.w	r2, r2, r1
 80089a2:	60a2      	str	r2, [r4, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80089a4:	d186      	bne.n	80088b4 <HAL_GPIO_DeInit+0x88>
    }
  }
}
 80089a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089aa:	2102      	movs	r1, #2
 80089ac:	fa01 f202 	lsl.w	r2, r1, r2
 80089b0:	e7b6      	b.n	8008920 <HAL_GPIO_DeInit+0xf4>
 80089b2:	2103      	movs	r1, #3
 80089b4:	fa01 f202 	lsl.w	r2, r1, r2
 80089b8:	e7b2      	b.n	8008920 <HAL_GPIO_DeInit+0xf4>
 80089ba:	2104      	movs	r1, #4
 80089bc:	fa01 f202 	lsl.w	r2, r1, r2
 80089c0:	e7ae      	b.n	8008920 <HAL_GPIO_DeInit+0xf4>
 80089c2:	2105      	movs	r1, #5
 80089c4:	fa01 f202 	lsl.w	r2, r1, r2
 80089c8:	e7aa      	b.n	8008920 <HAL_GPIO_DeInit+0xf4>
 80089ca:	2106      	movs	r1, #6
 80089cc:	fa01 f202 	lsl.w	r2, r1, r2
 80089d0:	e7a6      	b.n	8008920 <HAL_GPIO_DeInit+0xf4>
 80089d2:	2109      	movs	r1, #9
 80089d4:	fa01 f202 	lsl.w	r2, r1, r2
 80089d8:	e7a2      	b.n	8008920 <HAL_GPIO_DeInit+0xf4>
 80089da:	2107      	movs	r1, #7
 80089dc:	fa01 f202 	lsl.w	r2, r1, r2
 80089e0:	e79e      	b.n	8008920 <HAL_GPIO_DeInit+0xf4>
 80089e2:	2108      	movs	r1, #8
 80089e4:	fa01 f202 	lsl.w	r2, r1, r2
 80089e8:	e79a      	b.n	8008920 <HAL_GPIO_DeInit+0xf4>
 80089ea:	bf00      	nop
 80089ec:	40020000 	.word	0x40020000
 80089f0:	40020400 	.word	0x40020400
 80089f4:	0802687c 	.word	0x0802687c
 80089f8:	40020800 	.word	0x40020800
 80089fc:	40020c00 	.word	0x40020c00
 8008a00:	40021000 	.word	0x40021000
 8008a04:	40021400 	.word	0x40021400
 8008a08:	40021800 	.word	0x40021800
 8008a0c:	40021c00 	.word	0x40021c00
 8008a10:	40022000 	.word	0x40022000
 8008a14:	40022400 	.word	0x40022400
 8008a18:	40013800 	.word	0x40013800
 8008a1c:	40013c00 	.word	0x40013c00

08008a20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008a20:	b538      	push	{r3, r4, r5, lr}
 8008a22:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8008a24:	460c      	mov	r4, r1
 8008a26:	b129      	cbz	r1, 8008a34 <HAL_GPIO_ReadPin+0x14>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008a28:	692b      	ldr	r3, [r5, #16]
 8008a2a:	421c      	tst	r4, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8008a2c:	bf14      	ite	ne
 8008a2e:	2001      	movne	r0, #1
 8008a30:	2000      	moveq	r0, #0
 8008a32:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8008a34:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8008a38:	4801      	ldr	r0, [pc, #4]	; (8008a40 <HAL_GPIO_ReadPin+0x20>)
 8008a3a:	f7fa fae5 	bl	8003008 <assert_failed>
 8008a3e:	e7f3      	b.n	8008a28 <HAL_GPIO_ReadPin+0x8>
 8008a40:	0802687c 	.word	0x0802687c

08008a44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008a44:	b570      	push	{r4, r5, r6, lr}
 8008a46:	4606      	mov	r6, r0
 8008a48:	4615      	mov	r5, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8008a4a:	460c      	mov	r4, r1
 8008a4c:	b161      	cbz	r1, 8008a68 <HAL_GPIO_WritePin+0x24>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8008a4e:	2d01      	cmp	r5, #1
 8008a50:	d803      	bhi.n	8008a5a <HAL_GPIO_WritePin+0x16>

  if(PinState != GPIO_PIN_RESET)
 8008a52:	b905      	cbnz	r5, 8008a56 <HAL_GPIO_WritePin+0x12>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8008a54:	0424      	lsls	r4, r4, #16
 8008a56:	61b4      	str	r4, [r6, #24]
  }
}
 8008a58:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8008a5a:	f240 119b 	movw	r1, #411	; 0x19b
 8008a5e:	4805      	ldr	r0, [pc, #20]	; (8008a74 <HAL_GPIO_WritePin+0x30>)
 8008a60:	f7fa fad2 	bl	8003008 <assert_failed>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8008a64:	61b4      	str	r4, [r6, #24]
}
 8008a66:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8008a68:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8008a6c:	4801      	ldr	r0, [pc, #4]	; (8008a74 <HAL_GPIO_WritePin+0x30>)
 8008a6e:	f7fa facb 	bl	8003008 <assert_failed>
 8008a72:	e7ec      	b.n	8008a4e <HAL_GPIO_WritePin+0xa>
 8008a74:	0802687c 	.word	0x0802687c

08008a78 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008a78:	b538      	push	{r3, r4, r5, lr}
 8008a7a:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8008a7c:	460c      	mov	r4, r1
 8008a7e:	b129      	cbz	r1, 8008a8c <HAL_GPIO_TogglePin+0x14>

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8008a80:	6943      	ldr	r3, [r0, #20]
 8008a82:	420b      	tst	r3, r1
 8008a84:	d008      	beq.n	8008a98 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008a86:	040c      	lsls	r4, r1, #16
 8008a88:	6184      	str	r4, [r0, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8008a8a:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8008a8c:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8008a90:	4802      	ldr	r0, [pc, #8]	; (8008a9c <HAL_GPIO_TogglePin+0x24>)
 8008a92:	f7fa fab9 	bl	8003008 <assert_failed>
  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8008a96:	696b      	ldr	r3, [r5, #20]
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008a98:	61ac      	str	r4, [r5, #24]
}
 8008a9a:	bd38      	pop	{r3, r4, r5, pc}
 8008a9c:	0802687c 	.word	0x0802687c

08008aa0 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8008aa0:	4770      	bx	lr
 8008aa2:	bf00      	nop

08008aa4 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008aa4:	4a04      	ldr	r2, [pc, #16]	; (8008ab8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8008aa6:	6951      	ldr	r1, [r2, #20]
 8008aa8:	4201      	tst	r1, r0
 8008aaa:	d100      	bne.n	8008aae <HAL_GPIO_EXTI_IRQHandler+0xa>
 8008aac:	4770      	bx	lr
{
 8008aae:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008ab0:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008ab2:	f7ff fff5 	bl	8008aa0 <HAL_GPIO_EXTI_Callback>
}
 8008ab6:	bd08      	pop	{r3, pc}
 8008ab8:	40013c00 	.word	0x40013c00

08008abc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8008abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ac0:	4680      	mov	r8, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8008ac2:	4d25      	ldr	r5, [pc, #148]	; (8008b58 <I2C_TransferConfig+0x9c>)
 8008ac4:	4825      	ldr	r0, [pc, #148]	; (8008b5c <I2C_TransferConfig+0xa0>)
{
 8008ac6:	460e      	mov	r6, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8008ac8:	f8d8 1000 	ldr.w	r1, [r8]
{
 8008acc:	4614      	mov	r4, r2
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8008ace:	4a24      	ldr	r2, [pc, #144]	; (8008b60 <I2C_TransferConfig+0xa4>)
{
 8008ad0:	461f      	mov	r7, r3
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8008ad2:	4281      	cmp	r1, r0
 8008ad4:	bf18      	it	ne
 8008ad6:	42a9      	cmpne	r1, r5
{
 8008ad8:	9d06      	ldr	r5, [sp, #24]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8008ada:	bf14      	ite	ne
 8008adc:	2001      	movne	r0, #1
 8008ade:	2000      	moveq	r0, #0
 8008ae0:	4291      	cmp	r1, r2
 8008ae2:	bf0c      	ite	eq
 8008ae4:	2000      	moveq	r0, #0
 8008ae6:	f000 0001 	andne.w	r0, r0, #1
 8008aea:	b110      	cbz	r0, 8008af2 <I2C_TransferConfig+0x36>
 8008aec:	4b1d      	ldr	r3, [pc, #116]	; (8008b64 <I2C_TransferConfig+0xa8>)
 8008aee:	4299      	cmp	r1, r3
 8008af0:	d126      	bne.n	8008b40 <I2C_TransferConfig+0x84>
  assert_param(IS_TRANSFER_MODE(Mode));
 8008af2:	f037 7380 	bics.w	r3, r7, #16777216	; 0x1000000
 8008af6:	d002      	beq.n	8008afe <I2C_TransferConfig+0x42>
 8008af8:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 8008afc:	d126      	bne.n	8008b4c <I2C_TransferConfig+0x90>
  assert_param(IS_TRANSFER_REQUEST(Request));
 8008afe:	4b1a      	ldr	r3, [pc, #104]	; (8008b68 <I2C_TransferConfig+0xac>)
 8008b00:	429d      	cmp	r5, r3
 8008b02:	d00a      	beq.n	8008b1a <I2C_TransferConfig+0x5e>
 8008b04:	f425 6380 	bic.w	r3, r5, #1024	; 0x400
 8008b08:	4a18      	ldr	r2, [pc, #96]	; (8008b6c <I2C_TransferConfig+0xb0>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d005      	beq.n	8008b1a <I2C_TransferConfig+0x5e>
 8008b0e:	b125      	cbz	r5, 8008b1a <I2C_TransferConfig+0x5e>
 8008b10:	f641 01c2 	movw	r1, #6338	; 0x18c2
 8008b14:	4816      	ldr	r0, [pc, #88]	; (8008b70 <I2C_TransferConfig+0xb4>)
 8008b16:	f7fa fa77 	bl	8003008 <assert_failed>

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8008b1a:	f8d8 1000 	ldr.w	r1, [r8]
 8008b1e:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8008b22:	f3c6 0309 	ubfx	r3, r6, #0, #10
 8008b26:	4a13      	ldr	r2, [pc, #76]	; (8008b74 <I2C_TransferConfig+0xb8>)
 8008b28:	431c      	orrs	r4, r3
 8008b2a:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
 8008b2e:	684d      	ldr	r5, [r1, #4]
 8008b30:	ea44 0307 	orr.w	r3, r4, r7
 8008b34:	ea25 0502 	bic.w	r5, r5, r2
 8008b38:	432b      	orrs	r3, r5
 8008b3a:	604b      	str	r3, [r1, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8008b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8008b40:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
 8008b44:	480a      	ldr	r0, [pc, #40]	; (8008b70 <I2C_TransferConfig+0xb4>)
 8008b46:	f7fa fa5f 	bl	8003008 <assert_failed>
 8008b4a:	e7d2      	b.n	8008af2 <I2C_TransferConfig+0x36>
  assert_param(IS_TRANSFER_MODE(Mode));
 8008b4c:	f641 01c1 	movw	r1, #6337	; 0x18c1
 8008b50:	4807      	ldr	r0, [pc, #28]	; (8008b70 <I2C_TransferConfig+0xb4>)
 8008b52:	f7fa fa59 	bl	8003008 <assert_failed>
 8008b56:	e7d2      	b.n	8008afe <I2C_TransferConfig+0x42>
 8008b58:	40005800 	.word	0x40005800
 8008b5c:	40005400 	.word	0x40005400
 8008b60:	40005c00 	.word	0x40005c00
 8008b64:	40006000 	.word	0x40006000
 8008b68:	80004000 	.word	0x80004000
 8008b6c:	80002000 	.word	0x80002000
 8008b70:	080268b8 	.word	0x080268b8
 8008b74:	03ff63ff 	.word	0x03ff63ff

08008b78 <I2C_IsAcknowledgeFailed.part.1>:
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
 8008b78:	b570      	push	{r4, r5, r6, lr}
 8008b7a:	4605      	mov	r5, r0
 8008b7c:	460c      	mov	r4, r1
 8008b7e:	4616      	mov	r6, r2
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008b80:	6828      	ldr	r0, [r5, #0]
 8008b82:	e001      	b.n	8008b88 <I2C_IsAcknowledgeFailed.part.1+0x10>
      if (Timeout != HAL_MAX_DELAY)
 8008b84:	1c63      	adds	r3, r4, #1
 8008b86:	d120      	bne.n	8008bca <I2C_IsAcknowledgeFailed.part.1+0x52>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008b88:	6983      	ldr	r3, [r0, #24]
 8008b8a:	0699      	lsls	r1, r3, #26
 8008b8c:	d5fa      	bpl.n	8008b84 <I2C_IsAcknowledgeFailed.part.1+0xc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b8e:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b90:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b92:	61c2      	str	r2, [r0, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b94:	61c3      	str	r3, [r0, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008b96:	6983      	ldr	r3, [r0, #24]
 8008b98:	079a      	lsls	r2, r3, #30
 8008b9a:	d501      	bpl.n	8008ba0 <I2C_IsAcknowledgeFailed.part.1+0x28>
    hi2c->Instance->TXDR = 0x00U;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	6283      	str	r3, [r0, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008ba0:	6983      	ldr	r3, [r0, #24]
 8008ba2:	07db      	lsls	r3, r3, #31
 8008ba4:	d524      	bpl.n	8008bf0 <I2C_IsAcknowledgeFailed.part.1+0x78>
    I2C_RESET_CR2(hi2c);
 8008ba6:	6843      	ldr	r3, [r0, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ba8:	2200      	movs	r2, #0
    I2C_RESET_CR2(hi2c);
 8008baa:	4c14      	ldr	r4, [pc, #80]	; (8008bfc <I2C_IsAcknowledgeFailed.part.1+0x84>)
    hi2c->State = HAL_I2C_STATE_READY;
 8008bac:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 8008bae:	4023      	ands	r3, r4
 8008bb0:	6043      	str	r3, [r0, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008bb2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8008bb4:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008bb8:	f043 0304 	orr.w	r3, r3, #4
 8008bbc:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008bbe:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bc2:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 8008bc6:	2001      	movs	r0, #1
 8008bc8:	bd70      	pop	{r4, r5, r6, pc}
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bca:	f7fc fdc7 	bl	800575c <HAL_GetTick>
 8008bce:	1b80      	subs	r0, r0, r6
 8008bd0:	4284      	cmp	r4, r0
 8008bd2:	d301      	bcc.n	8008bd8 <I2C_IsAcknowledgeFailed.part.1+0x60>
 8008bd4:	2c00      	cmp	r4, #0
 8008bd6:	d1d3      	bne.n	8008b80 <I2C_IsAcknowledgeFailed.part.1+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008bd8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008bda:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bdc:	2200      	movs	r2, #0
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008bde:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
 8008be0:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008be4:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008be6:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bea:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
 8008bee:	e7ea      	b.n	8008bc6 <I2C_IsAcknowledgeFailed.part.1+0x4e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008bf0:	6983      	ldr	r3, [r0, #24]
 8008bf2:	f043 0301 	orr.w	r3, r3, #1
 8008bf6:	6183      	str	r3, [r0, #24]
 8008bf8:	e7d5      	b.n	8008ba6 <I2C_IsAcknowledgeFailed.part.1+0x2e>
 8008bfa:	bf00      	nop
 8008bfc:	fe00e800 	.word	0xfe00e800

08008c00 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8008c00:	b570      	push	{r4, r5, r6, lr}
 8008c02:	4605      	mov	r5, r0
 8008c04:	460c      	mov	r4, r1
 8008c06:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008c08:	e001      	b.n	8008c0e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8008c0a:	1c61      	adds	r1, r4, #1
 8008c0c:	d111      	bne.n	8008c32 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008c0e:	682b      	ldr	r3, [r5, #0]
 8008c10:	699a      	ldr	r2, [r3, #24]
 8008c12:	0792      	lsls	r2, r2, #30
 8008c14:	d40b      	bmi.n	8008c2e <I2C_WaitOnTXISFlagUntilTimeout+0x2e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008c16:	699b      	ldr	r3, [r3, #24]
 8008c18:	06d8      	lsls	r0, r3, #27
 8008c1a:	d5f6      	bpl.n	8008c0a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
 8008c1c:	4632      	mov	r2, r6
 8008c1e:	4621      	mov	r1, r4
 8008c20:	4628      	mov	r0, r5
 8008c22:	f7ff ffa9 	bl	8008b78 <I2C_IsAcknowledgeFailed.part.1>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c26:	2800      	cmp	r0, #0
 8008c28:	d0ef      	beq.n	8008c0a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      return HAL_ERROR;
 8008c2a:	2001      	movs	r0, #1
}
 8008c2c:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8008c2e:	2000      	movs	r0, #0
}
 8008c30:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c32:	f7fc fd93 	bl	800575c <HAL_GetTick>
 8008c36:	1b80      	subs	r0, r0, r6
 8008c38:	42a0      	cmp	r0, r4
 8008c3a:	d801      	bhi.n	8008c40 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008c3c:	2c00      	cmp	r4, #0
 8008c3e:	d1e6      	bne.n	8008c0e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008c40:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008c42:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c44:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 8008c46:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008c48:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8008c4a:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008c4e:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008c50:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c54:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 8008c58:	bd70      	pop	{r4, r5, r6, pc}
 8008c5a:	bf00      	nop

08008c5c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8008c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c5e:	4605      	mov	r5, r0
 8008c60:	460c      	mov	r4, r1
 8008c62:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008c64:	e00b      	b.n	8008c7e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008c66:	699b      	ldr	r3, [r3, #24]
 8008c68:	06db      	lsls	r3, r3, #27
 8008c6a:	d502      	bpl.n	8008c72 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
 8008c6c:	f7ff ff84 	bl	8008b78 <I2C_IsAcknowledgeFailed.part.1>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c70:	b9d8      	cbnz	r0, 8008caa <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c72:	f7fc fd73 	bl	800575c <HAL_GetTick>
 8008c76:	1b80      	subs	r0, r0, r6
 8008c78:	42a0      	cmp	r0, r4
 8008c7a:	d809      	bhi.n	8008c90 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 8008c7c:	b144      	cbz	r4, 8008c90 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008c7e:	682b      	ldr	r3, [r5, #0]
 8008c80:	4632      	mov	r2, r6
 8008c82:	4621      	mov	r1, r4
 8008c84:	4628      	mov	r0, r5
 8008c86:	699f      	ldr	r7, [r3, #24]
 8008c88:	06bf      	lsls	r7, r7, #26
 8008c8a:	d5ec      	bpl.n	8008c66 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
  return HAL_OK;
 8008c8c:	2000      	movs	r0, #0
}
 8008c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008c90:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008c92:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c94:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 8008c96:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008c98:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8008c9a:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008c9e:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008ca0:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ca4:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 8008ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8008caa:	2001      	movs	r0, #1
}
 8008cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cae:	bf00      	nop

08008cb0 <I2C_WaitOnFlagUntilTimeout>:
{
 8008cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cb4:	4680      	mov	r8, r0
 8008cb6:	460f      	mov	r7, r1
 8008cb8:	4616      	mov	r6, r2
 8008cba:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008cbc:	f8d8 4000 	ldr.w	r4, [r8]
 8008cc0:	e001      	b.n	8008cc6 <I2C_WaitOnFlagUntilTimeout+0x16>
    if (Timeout != HAL_MAX_DELAY)
 8008cc2:	1c6b      	adds	r3, r5, #1
 8008cc4:	d10a      	bne.n	8008cdc <I2C_WaitOnFlagUntilTimeout+0x2c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008cc6:	69a0      	ldr	r0, [r4, #24]
 8008cc8:	ea37 0300 	bics.w	r3, r7, r0
 8008ccc:	bf0c      	ite	eq
 8008cce:	2001      	moveq	r0, #1
 8008cd0:	2000      	movne	r0, #0
 8008cd2:	42b0      	cmp	r0, r6
 8008cd4:	d0f5      	beq.n	8008cc2 <I2C_WaitOnFlagUntilTimeout+0x12>
  return HAL_OK;
 8008cd6:	2000      	movs	r0, #0
}
 8008cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cdc:	f7fc fd3e 	bl	800575c <HAL_GetTick>
 8008ce0:	9b06      	ldr	r3, [sp, #24]
 8008ce2:	1ac0      	subs	r0, r0, r3
 8008ce4:	42a8      	cmp	r0, r5
 8008ce6:	d801      	bhi.n	8008cec <I2C_WaitOnFlagUntilTimeout+0x3c>
 8008ce8:	2d00      	cmp	r5, #0
 8008cea:	d1e7      	bne.n	8008cbc <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008cec:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008cf0:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cf2:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 8008cf4:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008cf6:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8008cf8:	f888 2040 	strb.w	r2, [r8, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008cfc:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008d00:	f888 1041 	strb.w	r1, [r8, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d04:	f888 2042 	strb.w	r2, [r8, #66]	; 0x42
 8008d08:	e7e6      	b.n	8008cd8 <I2C_WaitOnFlagUntilTimeout+0x28>
 8008d0a:	bf00      	nop

08008d0c <I2C_RequestMemoryRead>:
{
 8008d0c:	b570      	push	{r4, r5, r6, lr}
 8008d0e:	461d      	mov	r5, r3
 8008d10:	b082      	sub	sp, #8
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008d12:	4b17      	ldr	r3, [pc, #92]	; (8008d70 <I2C_RequestMemoryRead+0x64>)
{
 8008d14:	4604      	mov	r4, r0
 8008d16:	4616      	mov	r6, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008d18:	b2ea      	uxtb	r2, r5
 8008d1a:	9300      	str	r3, [sp, #0]
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	f7ff fecd 	bl	8008abc <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d22:	4620      	mov	r0, r4
 8008d24:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8008d28:	f7ff ff6a 	bl	8008c00 <I2C_WaitOnTXISFlagUntilTimeout>
 8008d2c:	b9c8      	cbnz	r0, 8008d62 <I2C_RequestMemoryRead+0x56>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008d2e:	2d01      	cmp	r5, #1
 8008d30:	6823      	ldr	r3, [r4, #0]
 8008d32:	d10e      	bne.n	8008d52 <I2C_RequestMemoryRead+0x46>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008d34:	b2f6      	uxtb	r6, r6
 8008d36:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008d38:	9b07      	ldr	r3, [sp, #28]
 8008d3a:	4620      	mov	r0, r4
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	2140      	movs	r1, #64	; 0x40
 8008d40:	9300      	str	r3, [sp, #0]
 8008d42:	9b06      	ldr	r3, [sp, #24]
 8008d44:	f7ff ffb4 	bl	8008cb0 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8008d48:	3000      	adds	r0, #0
 8008d4a:	bf18      	it	ne
 8008d4c:	2001      	movne	r0, #1
}
 8008d4e:	b002      	add	sp, #8
 8008d50:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008d52:	0a30      	lsrs	r0, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d54:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008d58:	6298      	str	r0, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	f7ff ff50 	bl	8008c00 <I2C_WaitOnTXISFlagUntilTimeout>
 8008d60:	b110      	cbz	r0, 8008d68 <I2C_RequestMemoryRead+0x5c>
    return HAL_ERROR;
 8008d62:	2001      	movs	r0, #1
}
 8008d64:	b002      	add	sp, #8
 8008d66:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008d68:	b2f6      	uxtb	r6, r6
 8008d6a:	6823      	ldr	r3, [r4, #0]
 8008d6c:	629e      	str	r6, [r3, #40]	; 0x28
 8008d6e:	e7e3      	b.n	8008d38 <I2C_RequestMemoryRead+0x2c>
 8008d70:	80002000 	.word	0x80002000

08008d74 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8008d74:	2800      	cmp	r0, #0
 8008d76:	f000 80c8 	beq.w	8008f0a <HAL_I2C_Init+0x196>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8008d7a:	6802      	ldr	r2, [r0, #0]
 8008d7c:	4969      	ldr	r1, [pc, #420]	; (8008f24 <HAL_I2C_Init+0x1b0>)
{
 8008d7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8008d80:	4b69      	ldr	r3, [pc, #420]	; (8008f28 <HAL_I2C_Init+0x1b4>)
 8008d82:	4604      	mov	r4, r0
 8008d84:	4869      	ldr	r0, [pc, #420]	; (8008f2c <HAL_I2C_Init+0x1b8>)
 8008d86:	429a      	cmp	r2, r3
 8008d88:	bf18      	it	ne
 8008d8a:	4282      	cmpne	r2, r0
 8008d8c:	bf14      	ite	ne
 8008d8e:	2301      	movne	r3, #1
 8008d90:	2300      	moveq	r3, #0
 8008d92:	428a      	cmp	r2, r1
 8008d94:	bf0c      	ite	eq
 8008d96:	2300      	moveq	r3, #0
 8008d98:	f003 0301 	andne.w	r3, r3, #1
 8008d9c:	b11b      	cbz	r3, 8008da6 <HAL_I2C_Init+0x32>
 8008d9e:	4b64      	ldr	r3, [pc, #400]	; (8008f30 <HAL_I2C_Init+0x1bc>)
 8008da0:	429a      	cmp	r2, r3
 8008da2:	f040 80b4 	bne.w	8008f0e <HAL_I2C_Init+0x19a>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8008da6:	68a3      	ldr	r3, [r4, #8]
 8008da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dac:	d268      	bcs.n	8008e80 <HAL_I2C_Init+0x10c>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8008dae:	68e3      	ldr	r3, [r4, #12]
 8008db0:	3b01      	subs	r3, #1
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d856      	bhi.n	8008e64 <HAL_I2C_Init+0xf0>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8008db6:	6923      	ldr	r3, [r4, #16]
 8008db8:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 8008dbc:	f040 809b 	bne.w	8008ef6 <HAL_I2C_Init+0x182>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8008dc0:	6963      	ldr	r3, [r4, #20]
 8008dc2:	2bff      	cmp	r3, #255	; 0xff
 8008dc4:	f200 808d 	bhi.w	8008ee2 <HAL_I2C_Init+0x16e>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8008dc8:	69a3      	ldr	r3, [r4, #24]
 8008dca:	2b07      	cmp	r3, #7
 8008dcc:	d87e      	bhi.n	8008ecc <HAL_I2C_Init+0x158>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8008dce:	69e3      	ldr	r3, [r4, #28]
 8008dd0:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 8008dd4:	d170      	bne.n	8008eb8 <HAL_I2C_Init+0x144>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8008dd6:	6a23      	ldr	r3, [r4, #32]
 8008dd8:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 8008ddc:	d160      	bne.n	8008ea0 <HAL_I2C_Init+0x12c>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008dde:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8008de2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d054      	beq.n	8008e94 <HAL_I2C_Init+0x120>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8008dea:	2124      	movs	r1, #36	; 0x24
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008dec:	68e5      	ldr	r5, [r4, #12]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008dee:	e9d4 3200 	ldrd	r3, r2, [r4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8008df2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008df6:	2d01      	cmp	r5, #1
  __HAL_I2C_DISABLE(hi2c);
 8008df8:	6818      	ldr	r0, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008dfa:	f022 6170 	bic.w	r1, r2, #251658240	; 0xf000000
 8008dfe:	68a2      	ldr	r2, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8008e00:	f020 0001 	bic.w	r0, r0, #1
 8008e04:	6018      	str	r0, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008e06:	6119      	str	r1, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008e08:	6899      	ldr	r1, [r3, #8]
 8008e0a:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8008e0e:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008e10:	d032      	beq.n	8008e78 <HAL_I2C_Init+0x104>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008e12:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008e16:	2d02      	cmp	r5, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008e18:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008e1a:	d102      	bne.n	8008e22 <HAL_I2C_Init+0xae>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008e1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e20:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008e22:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e24:	2100      	movs	r1, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008e26:	4843      	ldr	r0, [pc, #268]	; (8008f34 <HAL_I2C_Init+0x1c0>)
  hi2c->State = HAL_I2C_STATE_READY;
 8008e28:	2720      	movs	r7, #32
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8008e2a:	69a6      	ldr	r6, [r4, #24]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008e2c:	4310      	orrs	r0, r2
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8008e2e:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008e32:	6058      	str	r0, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8008e34:	432a      	orrs	r2, r5
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008e36:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008e38:	69e5      	ldr	r5, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8008e3a:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008e3e:	6a26      	ldr	r6, [r4, #32]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008e40:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008e44:	4335      	orrs	r5, r6
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008e46:	60d8      	str	r0, [r3, #12]
  return HAL_OK;
 8008e48:	4608      	mov	r0, r1
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8008e4a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008e4c:	601d      	str	r5, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8008e4e:	681a      	ldr	r2, [r3, #0]
 8008e50:	f042 0201 	orr.w	r2, r2, #1
 8008e54:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e56:	6461      	str	r1, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008e58:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008e5c:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e5e:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 8008e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8008e64:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8008e68:	4833      	ldr	r0, [pc, #204]	; (8008f38 <HAL_I2C_Init+0x1c4>)
 8008e6a:	f7fa f8cd 	bl	8003008 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8008e6e:	6923      	ldr	r3, [r4, #16]
 8008e70:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 8008e74:	d0a4      	beq.n	8008dc0 <HAL_I2C_Init+0x4c>
 8008e76:	e03e      	b.n	8008ef6 <HAL_I2C_Init+0x182>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008e78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008e7c:	609a      	str	r2, [r3, #8]
 8008e7e:	e7d0      	b.n	8008e22 <HAL_I2C_Init+0xae>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8008e80:	f240 11df 	movw	r1, #479	; 0x1df
 8008e84:	482c      	ldr	r0, [pc, #176]	; (8008f38 <HAL_I2C_Init+0x1c4>)
 8008e86:	f7fa f8bf 	bl	8003008 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8008e8a:	68e3      	ldr	r3, [r4, #12]
 8008e8c:	3b01      	subs	r3, #1
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d991      	bls.n	8008db6 <HAL_I2C_Init+0x42>
 8008e92:	e7e7      	b.n	8008e64 <HAL_I2C_Init+0xf0>
    hi2c->Lock = HAL_UNLOCKED;
 8008e94:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8008e98:	4620      	mov	r0, r4
 8008e9a:	f7fb f81d 	bl	8003ed8 <HAL_I2C_MspInit>
 8008e9e:	e7a4      	b.n	8008dea <HAL_I2C_Init+0x76>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8008ea0:	f240 11e5 	movw	r1, #485	; 0x1e5
 8008ea4:	4824      	ldr	r0, [pc, #144]	; (8008f38 <HAL_I2C_Init+0x1c4>)
 8008ea6:	f7fa f8af 	bl	8003008 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008eaa:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8008eae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d199      	bne.n	8008dea <HAL_I2C_Init+0x76>
 8008eb6:	e7ed      	b.n	8008e94 <HAL_I2C_Init+0x120>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8008eb8:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 8008ebc:	481e      	ldr	r0, [pc, #120]	; (8008f38 <HAL_I2C_Init+0x1c4>)
 8008ebe:	f7fa f8a3 	bl	8003008 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8008ec2:	6a23      	ldr	r3, [r4, #32]
 8008ec4:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 8008ec8:	d089      	beq.n	8008dde <HAL_I2C_Init+0x6a>
 8008eca:	e7e9      	b.n	8008ea0 <HAL_I2C_Init+0x12c>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8008ecc:	f240 11e3 	movw	r1, #483	; 0x1e3
 8008ed0:	4819      	ldr	r0, [pc, #100]	; (8008f38 <HAL_I2C_Init+0x1c4>)
 8008ed2:	f7fa f899 	bl	8003008 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8008ed6:	69e3      	ldr	r3, [r4, #28]
 8008ed8:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 8008edc:	f43f af7b 	beq.w	8008dd6 <HAL_I2C_Init+0x62>
 8008ee0:	e7ea      	b.n	8008eb8 <HAL_I2C_Init+0x144>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8008ee2:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8008ee6:	4814      	ldr	r0, [pc, #80]	; (8008f38 <HAL_I2C_Init+0x1c4>)
 8008ee8:	f7fa f88e 	bl	8003008 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8008eec:	69a3      	ldr	r3, [r4, #24]
 8008eee:	2b07      	cmp	r3, #7
 8008ef0:	f67f af6d 	bls.w	8008dce <HAL_I2C_Init+0x5a>
 8008ef4:	e7ea      	b.n	8008ecc <HAL_I2C_Init+0x158>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8008ef6:	f240 11e1 	movw	r1, #481	; 0x1e1
 8008efa:	480f      	ldr	r0, [pc, #60]	; (8008f38 <HAL_I2C_Init+0x1c4>)
 8008efc:	f7fa f884 	bl	8003008 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8008f00:	6963      	ldr	r3, [r4, #20]
 8008f02:	2bff      	cmp	r3, #255	; 0xff
 8008f04:	f67f af60 	bls.w	8008dc8 <HAL_I2C_Init+0x54>
 8008f08:	e7eb      	b.n	8008ee2 <HAL_I2C_Init+0x16e>
    return HAL_ERROR;
 8008f0a:	2001      	movs	r0, #1
}
 8008f0c:	4770      	bx	lr
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8008f0e:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008f12:	4809      	ldr	r0, [pc, #36]	; (8008f38 <HAL_I2C_Init+0x1c4>)
 8008f14:	f7fa f878 	bl	8003008 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8008f18:	68a3      	ldr	r3, [r4, #8]
 8008f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f1e:	f4ff af46 	bcc.w	8008dae <HAL_I2C_Init+0x3a>
 8008f22:	e7ad      	b.n	8008e80 <HAL_I2C_Init+0x10c>
 8008f24:	40005c00 	.word	0x40005c00
 8008f28:	40005400 	.word	0x40005400
 8008f2c:	40005800 	.word	0x40005800
 8008f30:	40006000 	.word	0x40006000
 8008f34:	02008000 	.word	0x02008000
 8008f38:	080268b8 	.word	0x080268b8

08008f3c <HAL_I2C_Master_Transmit>:
{
 8008f3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f40:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
{
 8008f44:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f46:	2c20      	cmp	r4, #32
 8008f48:	d169      	bne.n	800901e <HAL_I2C_Master_Transmit+0xe2>
    __HAL_LOCK(hi2c);
 8008f4a:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8008f4e:	2c01      	cmp	r4, #1
 8008f50:	d065      	beq.n	800901e <HAL_I2C_Master_Transmit+0xe2>
 8008f52:	f04f 0901 	mov.w	r9, #1
 8008f56:	4604      	mov	r4, r0
 8008f58:	4698      	mov	r8, r3
 8008f5a:	4615      	mov	r5, r2
 8008f5c:	f880 9040 	strb.w	r9, [r0, #64]	; 0x40
 8008f60:	460f      	mov	r7, r1
    tickstart = HAL_GetTick();
 8008f62:	f7fc fbfb 	bl	800575c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008f66:	464a      	mov	r2, r9
    tickstart = HAL_GetTick();
 8008f68:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008f6a:	9000      	str	r0, [sp, #0]
 8008f6c:	2319      	movs	r3, #25
 8008f6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008f72:	4620      	mov	r0, r4
 8008f74:	f7ff fe9c 	bl	8008cb0 <I2C_WaitOnFlagUntilTimeout>
 8008f78:	2800      	cmp	r0, #0
 8008f7a:	d154      	bne.n	8009026 <HAL_I2C_Master_Transmit+0xea>
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008f7c:	2310      	movs	r3, #16
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008f7e:	2221      	movs	r2, #33	; 0x21
    hi2c->pBuffPtr  = pData;
 8008f80:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008f82:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008f86:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f8a:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8008f8c:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f90:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008f92:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f94:	2bff      	cmp	r3, #255	; 0xff
 8008f96:	d954      	bls.n	8009042 <HAL_I2C_Master_Transmit+0x106>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008f98:	4839      	ldr	r0, [pc, #228]	; (8009080 <HAL_I2C_Master_Transmit+0x144>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008f9a:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008f9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008fa0:	4639      	mov	r1, r7
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008fa2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008fa4:	9000      	str	r0, [sp, #0]
 8008fa6:	4620      	mov	r0, r4
 8008fa8:	f7ff fd88 	bl	8008abc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008fac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008fae:	4632      	mov	r2, r6
 8008fb0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008fb2:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8008fb4:	b29b      	uxth	r3, r3
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d050      	beq.n	800905c <HAL_I2C_Master_Transmit+0x120>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008fba:	f7ff fe21 	bl	8008c00 <I2C_WaitOnTXISFlagUntilTimeout>
 8008fbe:	2800      	cmp	r0, #0
 8008fc0:	d131      	bne.n	8009026 <HAL_I2C_Master_Transmit+0xea>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008fc2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008fc4:	6822      	ldr	r2, [r4, #0]
 8008fc6:	f811 5b01 	ldrb.w	r5, [r1], #1
      hi2c->XferSize--;
 8008fca:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008fcc:	6295      	str	r5, [r2, #40]	; 0x28
      hi2c->XferCount--;
 8008fce:	8d65      	ldrh	r5, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8008fd0:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 8008fd2:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8008fd4:	3d01      	subs	r5, #1
      hi2c->XferSize--;
 8008fd6:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 8008fd8:	b2ad      	uxth	r5, r5
      hi2c->XferSize--;
 8008fda:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8008fdc:	8565      	strh	r5, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008fde:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8008fe0:	b289      	uxth	r1, r1
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d1e2      	bne.n	8008fac <HAL_I2C_Master_Transmit+0x70>
 8008fe6:	2900      	cmp	r1, #0
 8008fe8:	d0e0      	beq.n	8008fac <HAL_I2C_Master_Transmit+0x70>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008fea:	4602      	mov	r2, r0
 8008fec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fee:	2180      	movs	r1, #128	; 0x80
 8008ff0:	9600      	str	r6, [sp, #0]
 8008ff2:	4620      	mov	r0, r4
 8008ff4:	f7ff fe5c 	bl	8008cb0 <I2C_WaitOnFlagUntilTimeout>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008ff8:	f04f 0cff 	mov.w	ip, #255	; 0xff
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008ffc:	4605      	mov	r5, r0
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008ffe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009002:	4639      	mov	r1, r7
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009004:	b978      	cbnz	r0, 8009026 <HAL_I2C_Master_Transmit+0xea>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009006:	f8b4 e02a 	ldrh.w	lr, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800900a:	4662      	mov	r2, ip
 800900c:	4620      	mov	r0, r4
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800900e:	45e6      	cmp	lr, ip
 8009010:	d90d      	bls.n	800902e <HAL_I2C_Master_Transmit+0xf2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009012:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009016:	9500      	str	r5, [sp, #0]
 8009018:	f7ff fd50 	bl	8008abc <I2C_TransferConfig>
 800901c:	e7c6      	b.n	8008fac <HAL_I2C_Master_Transmit+0x70>
    return HAL_BUSY;
 800901e:	2002      	movs	r0, #2
}
 8009020:	b003      	add	sp, #12
 8009022:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_ERROR;
 8009026:	2001      	movs	r0, #1
}
 8009028:	b003      	add	sp, #12
 800902a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          hi2c->XferSize = hi2c->XferCount;
 800902e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009030:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009034:	9500      	str	r5, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8009036:	b292      	uxth	r2, r2
 8009038:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800903a:	b2d2      	uxtb	r2, r2
 800903c:	f7ff fd3e 	bl	8008abc <I2C_TransferConfig>
 8009040:	e7b4      	b.n	8008fac <HAL_I2C_Master_Transmit+0x70>
      hi2c->XferSize = hi2c->XferCount;
 8009042:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8009044:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009048:	4d0d      	ldr	r5, [pc, #52]	; (8009080 <HAL_I2C_Master_Transmit+0x144>)
 800904a:	4639      	mov	r1, r7
      hi2c->XferSize = hi2c->XferCount;
 800904c:	b292      	uxth	r2, r2
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800904e:	4620      	mov	r0, r4
 8009050:	9500      	str	r5, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8009052:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8009054:	b2d2      	uxtb	r2, r2
 8009056:	f7ff fd31 	bl	8008abc <I2C_TransferConfig>
 800905a:	e7a7      	b.n	8008fac <HAL_I2C_Master_Transmit+0x70>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800905c:	f7ff fdfe 	bl	8008c5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8009060:	2800      	cmp	r0, #0
 8009062:	d1e0      	bne.n	8009026 <HAL_I2C_Master_Transmit+0xea>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009064:	6823      	ldr	r3, [r4, #0]
 8009066:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 8009068:	4d06      	ldr	r5, [pc, #24]	; (8009084 <HAL_I2C_Master_Transmit+0x148>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800906a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800906c:	685a      	ldr	r2, [r3, #4]
 800906e:	402a      	ands	r2, r5
 8009070:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009072:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009076:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800907a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800907e:	e7cf      	b.n	8009020 <HAL_I2C_Master_Transmit+0xe4>
 8009080:	80002000 	.word	0x80002000
 8009084:	fe00e800 	.word	0xfe00e800

08009088 <HAL_I2C_Mem_Read>:
{
 8009088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800908c:	4698      	mov	r8, r3
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800908e:	3b01      	subs	r3, #1
{
 8009090:	b083      	sub	sp, #12
 8009092:	4604      	mov	r4, r0
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8009094:	2b01      	cmp	r3, #1
{
 8009096:	460e      	mov	r6, r1
 8009098:	4692      	mov	sl, r2
 800909a:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800909e:	d904      	bls.n	80090aa <HAL_I2C_Mem_Read+0x22>
 80090a0:	f640 1174 	movw	r1, #2420	; 0x974
 80090a4:	4862      	ldr	r0, [pc, #392]	; (8009230 <HAL_I2C_Mem_Read+0x1a8>)
 80090a6:	f7f9 ffaf 	bl	8003008 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80090aa:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80090ae:	2b20      	cmp	r3, #32
 80090b0:	d11c      	bne.n	80090ec <HAL_I2C_Mem_Read+0x64>
    if ((pData == NULL) || (Size == 0U))
 80090b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090b4:	b1f3      	cbz	r3, 80090f4 <HAL_I2C_Mem_Read+0x6c>
 80090b6:	f1b9 0f00 	cmp.w	r9, #0
 80090ba:	d01b      	beq.n	80090f4 <HAL_I2C_Mem_Read+0x6c>
    __HAL_LOCK(hi2c);
 80090bc:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d013      	beq.n	80090ec <HAL_I2C_Mem_Read+0x64>
 80090c4:	2501      	movs	r5, #1
 80090c6:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    tickstart = HAL_GetTick();
 80090ca:	f7fc fb47 	bl	800575c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80090ce:	462a      	mov	r2, r5
 80090d0:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80090d2:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80090d4:	2319      	movs	r3, #25
 80090d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80090da:	4620      	mov	r0, r4
 80090dc:	f7ff fde8 	bl	8008cb0 <I2C_WaitOnFlagUntilTimeout>
 80090e0:	4683      	mov	fp, r0
 80090e2:	b170      	cbz	r0, 8009102 <HAL_I2C_Mem_Read+0x7a>
      return HAL_ERROR;
 80090e4:	2001      	movs	r0, #1
}
 80090e6:	b003      	add	sp, #12
 80090e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 80090ec:	2002      	movs	r0, #2
}
 80090ee:	b003      	add	sp, #12
 80090f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80090f4:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
 80090f8:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80090fa:	6463      	str	r3, [r4, #68]	; 0x44
}
 80090fc:	b003      	add	sp, #12
 80090fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009102:	2040      	movs	r0, #64	; 0x40
    hi2c->pBuffPtr  = pData;
 8009104:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009106:	990e      	ldr	r1, [sp, #56]	; 0x38
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009108:	f04f 0c22 	mov.w	ip, #34	; 0x22
    hi2c->pBuffPtr  = pData;
 800910c:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800910e:	4652      	mov	r2, sl
    hi2c->XferISR   = NULL;
 8009110:	f8c4 b034 	str.w	fp, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009114:	4643      	mov	r3, r8
 8009116:	9100      	str	r1, [sp, #0]
 8009118:	4631      	mov	r1, r6
 800911a:	9701      	str	r7, [sp, #4]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800911c:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009120:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009124:	4620      	mov	r0, r4
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009126:	f8c4 b044 	str.w	fp, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800912a:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800912e:	f7ff fded 	bl	8008d0c <I2C_RequestMemoryRead>
 8009132:	2800      	cmp	r0, #0
 8009134:	d14a      	bne.n	80091cc <HAL_I2C_Mem_Read+0x144>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009136:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009138:	2bff      	cmp	r3, #255	; 0xff
 800913a:	d955      	bls.n	80091e8 <HAL_I2C_Mem_Read+0x160>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800913c:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800913e:	483d      	ldr	r0, [pc, #244]	; (8009234 <HAL_I2C_Mem_Read+0x1ac>)
 8009140:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009144:	4631      	mov	r1, r6
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009146:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8009148:	9000      	str	r0, [sp, #0]
 800914a:	4620      	mov	r0, r4
 800914c:	f7ff fcb6 	bl	8008abc <I2C_TransferConfig>
 8009150:	e003      	b.n	800915a <HAL_I2C_Mem_Read+0xd2>
    while (hi2c->XferCount > 0U);
 8009152:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009154:	b29b      	uxth	r3, r3
 8009156:	2b00      	cmp	r3, #0
 8009158:	d053      	beq.n	8009202 <HAL_I2C_Mem_Read+0x17a>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800915a:	9700      	str	r7, [sp, #0]
 800915c:	2200      	movs	r2, #0
 800915e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009160:	2104      	movs	r1, #4
 8009162:	4620      	mov	r0, r4
 8009164:	f7ff fda4 	bl	8008cb0 <I2C_WaitOnFlagUntilTimeout>
 8009168:	2800      	cmp	r0, #0
 800916a:	d1bb      	bne.n	80090e4 <HAL_I2C_Mem_Read+0x5c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800916c:	6822      	ldr	r2, [r4, #0]
 800916e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009170:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009172:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8009174:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8009176:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8009178:	3901      	subs	r1, #1
      hi2c->pBuffPtr++;
 800917a:	6a65      	ldr	r5, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800917c:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800917e:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
 8009180:	3501      	adds	r5, #1
      hi2c->XferSize--;
 8009182:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 8009184:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009186:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8009188:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800918a:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
 800918c:	6265      	str	r5, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800918e:	2b00      	cmp	r3, #0
 8009190:	d1df      	bne.n	8009152 <HAL_I2C_Mem_Read+0xca>
 8009192:	2900      	cmp	r1, #0
 8009194:	d0dd      	beq.n	8009152 <HAL_I2C_Mem_Read+0xca>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009196:	4602      	mov	r2, r0
 8009198:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800919a:	2180      	movs	r1, #128	; 0x80
 800919c:	9700      	str	r7, [sp, #0]
 800919e:	4620      	mov	r0, r4
 80091a0:	f7ff fd86 	bl	8008cb0 <I2C_WaitOnFlagUntilTimeout>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80091a4:	f04f 0cff 	mov.w	ip, #255	; 0xff
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80091a8:	4605      	mov	r5, r0
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80091aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80091ae:	4631      	mov	r1, r6
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80091b0:	2800      	cmp	r0, #0
 80091b2:	d197      	bne.n	80090e4 <HAL_I2C_Mem_Read+0x5c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80091b4:	f8b4 e02a 	ldrh.w	lr, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80091b8:	4662      	mov	r2, ip
 80091ba:	4620      	mov	r0, r4
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80091bc:	45e6      	cmp	lr, ip
 80091be:	d909      	bls.n	80091d4 <HAL_I2C_Mem_Read+0x14c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80091c0:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80091c4:	9500      	str	r5, [sp, #0]
 80091c6:	f7ff fc79 	bl	8008abc <I2C_TransferConfig>
 80091ca:	e7c2      	b.n	8009152 <HAL_I2C_Mem_Read+0xca>
      __HAL_UNLOCK(hi2c);
 80091cc:	f884 b040 	strb.w	fp, [r4, #64]	; 0x40
      return HAL_ERROR;
 80091d0:	4628      	mov	r0, r5
 80091d2:	e78c      	b.n	80090ee <HAL_I2C_Mem_Read+0x66>
          hi2c->XferSize = hi2c->XferCount;
 80091d4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80091d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80091da:	9500      	str	r5, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80091dc:	b292      	uxth	r2, r2
 80091de:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80091e0:	b2d2      	uxtb	r2, r2
 80091e2:	f7ff fc6b 	bl	8008abc <I2C_TransferConfig>
 80091e6:	e7b4      	b.n	8009152 <HAL_I2C_Mem_Read+0xca>
      hi2c->XferSize = hi2c->XferCount;
 80091e8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80091ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80091ee:	4d11      	ldr	r5, [pc, #68]	; (8009234 <HAL_I2C_Mem_Read+0x1ac>)
 80091f0:	4631      	mov	r1, r6
      hi2c->XferSize = hi2c->XferCount;
 80091f2:	b292      	uxth	r2, r2
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80091f4:	4620      	mov	r0, r4
 80091f6:	9500      	str	r5, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80091f8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80091fa:	b2d2      	uxtb	r2, r2
 80091fc:	f7ff fc5e 	bl	8008abc <I2C_TransferConfig>
 8009200:	e7ab      	b.n	800915a <HAL_I2C_Mem_Read+0xd2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009202:	463a      	mov	r2, r7
 8009204:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009206:	4620      	mov	r0, r4
 8009208:	f7ff fd28 	bl	8008c5c <I2C_WaitOnSTOPFlagUntilTimeout>
 800920c:	2800      	cmp	r0, #0
 800920e:	f47f af69 	bne.w	80090e4 <HAL_I2C_Mem_Read+0x5c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009212:	6823      	ldr	r3, [r4, #0]
 8009214:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 8009216:	4d08      	ldr	r5, [pc, #32]	; (8009238 <HAL_I2C_Mem_Read+0x1b0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009218:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800921a:	685a      	ldr	r2, [r3, #4]
 800921c:	402a      	ands	r2, r5
 800921e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009220:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009224:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009228:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800922c:	e75f      	b.n	80090ee <HAL_I2C_Mem_Read+0x66>
 800922e:	bf00      	nop
 8009230:	080268b8 	.word	0x080268b8
 8009234:	80002400 	.word	0x80002400
 8009238:	fe00e800 	.word	0xfe00e800

0800923c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800923c:	b570      	push	{r4, r5, r6, lr}
 800923e:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8009240:	4b22      	ldr	r3, [pc, #136]	; (80092cc <HAL_I2CEx_ConfigAnalogFilter+0x90>)
 8009242:	4823      	ldr	r0, [pc, #140]	; (80092d0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
{
 8009244:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8009246:	6822      	ldr	r2, [r4, #0]
 8009248:	4922      	ldr	r1, [pc, #136]	; (80092d4 <HAL_I2CEx_ConfigAnalogFilter+0x98>)
 800924a:	429a      	cmp	r2, r3
 800924c:	bf18      	it	ne
 800924e:	4282      	cmpne	r2, r0
 8009250:	bf14      	ite	ne
 8009252:	2301      	movne	r3, #1
 8009254:	2300      	moveq	r3, #0
 8009256:	428a      	cmp	r2, r1
 8009258:	bf0c      	ite	eq
 800925a:	2300      	moveq	r3, #0
 800925c:	f003 0301 	andne.w	r3, r3, #1
 8009260:	b113      	cbz	r3, 8009268 <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 8009262:	4b1d      	ldr	r3, [pc, #116]	; (80092d8 <HAL_I2CEx_ConfigAnalogFilter+0x9c>)
 8009264:	429a      	cmp	r2, r3
 8009266:	d12c      	bne.n	80092c2 <HAL_I2CEx_ConfigAnalogFilter+0x86>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 8009268:	f435 5380 	bics.w	r3, r5, #4096	; 0x1000
 800926c:	d124      	bne.n	80092b8 <HAL_I2CEx_ConfigAnalogFilter+0x7c>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800926e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8009272:	b2db      	uxtb	r3, r3
 8009274:	2b20      	cmp	r3, #32
 8009276:	d11d      	bne.n	80092b4 <HAL_I2CEx_ConfigAnalogFilter+0x78>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009278:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800927c:	2a01      	cmp	r2, #1
 800927e:	d019      	beq.n	80092b4 <HAL_I2CEx_ConfigAnalogFilter+0x78>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009280:	6822      	ldr	r2, [r4, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009282:	2124      	movs	r1, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009284:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009286:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800928a:	6811      	ldr	r1, [r2, #0]

    return HAL_OK;
 800928c:	4630      	mov	r0, r6
    __HAL_I2C_DISABLE(hi2c);
 800928e:	f021 0101 	bic.w	r1, r1, #1
 8009292:	6011      	str	r1, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009294:	6811      	ldr	r1, [r2, #0]
 8009296:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 800929a:	6011      	str	r1, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800929c:	6811      	ldr	r1, [r2, #0]
 800929e:	430d      	orrs	r5, r1
 80092a0:	6015      	str	r5, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 80092a2:	6811      	ldr	r1, [r2, #0]
 80092a4:	f041 0101 	orr.w	r1, r1, #1
 80092a8:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80092aa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80092ae:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 80092b2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 80092b4:	2002      	movs	r0, #2
}
 80092b6:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 80092b8:	2160      	movs	r1, #96	; 0x60
 80092ba:	4808      	ldr	r0, [pc, #32]	; (80092dc <HAL_I2CEx_ConfigAnalogFilter+0xa0>)
 80092bc:	f7f9 fea4 	bl	8003008 <assert_failed>
 80092c0:	e7d5      	b.n	800926e <HAL_I2CEx_ConfigAnalogFilter+0x32>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80092c2:	215f      	movs	r1, #95	; 0x5f
 80092c4:	4805      	ldr	r0, [pc, #20]	; (80092dc <HAL_I2CEx_ConfigAnalogFilter+0xa0>)
 80092c6:	f7f9 fe9f 	bl	8003008 <assert_failed>
 80092ca:	e7cd      	b.n	8009268 <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 80092cc:	40005400 	.word	0x40005400
 80092d0:	40005800 	.word	0x40005800
 80092d4:	40005c00 	.word	0x40005c00
 80092d8:	40006000 	.word	0x40006000
 80092dc:	080268f0 	.word	0x080268f0

080092e0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80092e0:	b570      	push	{r4, r5, r6, lr}
 80092e2:	4604      	mov	r4, r0
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80092e4:	4b21      	ldr	r3, [pc, #132]	; (800936c <HAL_I2CEx_ConfigDigitalFilter+0x8c>)
 80092e6:	4822      	ldr	r0, [pc, #136]	; (8009370 <HAL_I2CEx_ConfigDigitalFilter+0x90>)
{
 80092e8:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80092ea:	6822      	ldr	r2, [r4, #0]
 80092ec:	4921      	ldr	r1, [pc, #132]	; (8009374 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80092ee:	429a      	cmp	r2, r3
 80092f0:	bf18      	it	ne
 80092f2:	4282      	cmpne	r2, r0
 80092f4:	bf14      	ite	ne
 80092f6:	2301      	movne	r3, #1
 80092f8:	2300      	moveq	r3, #0
 80092fa:	428a      	cmp	r2, r1
 80092fc:	bf0c      	ite	eq
 80092fe:	2300      	moveq	r3, #0
 8009300:	f003 0301 	andne.w	r3, r3, #1
 8009304:	b113      	cbz	r3, 800930c <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 8009306:	4b1c      	ldr	r3, [pc, #112]	; (8009378 <HAL_I2CEx_ConfigDigitalFilter+0x98>)
 8009308:	429a      	cmp	r2, r3
 800930a:	d12a      	bne.n	8009362 <HAL_I2CEx_ConfigDigitalFilter+0x82>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800930c:	2d0f      	cmp	r5, #15
 800930e:	d823      	bhi.n	8009358 <HAL_I2CEx_ConfigDigitalFilter+0x78>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009310:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8009314:	b2db      	uxtb	r3, r3
 8009316:	2b20      	cmp	r3, #32
 8009318:	d11c      	bne.n	8009354 <HAL_I2CEx_ConfigDigitalFilter+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800931a:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800931e:	2a01      	cmp	r2, #1
 8009320:	d018      	beq.n	8009354 <HAL_I2CEx_ConfigDigitalFilter+0x74>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009322:	6822      	ldr	r2, [r4, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009324:	2124      	movs	r1, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009326:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009328:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800932c:	6811      	ldr	r1, [r2, #0]

    return HAL_OK;
 800932e:	4630      	mov	r0, r6
    __HAL_I2C_DISABLE(hi2c);
 8009330:	f021 0101 	bic.w	r1, r1, #1
 8009334:	6011      	str	r1, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 8009336:	6811      	ldr	r1, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8009338:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 800933c:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 8009340:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8009342:	6811      	ldr	r1, [r2, #0]
 8009344:	f041 0101 	orr.w	r1, r1, #1
 8009348:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800934a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800934e:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8009352:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8009354:	2002      	movs	r0, #2
}
 8009356:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8009358:	218e      	movs	r1, #142	; 0x8e
 800935a:	4808      	ldr	r0, [pc, #32]	; (800937c <HAL_I2CEx_ConfigDigitalFilter+0x9c>)
 800935c:	f7f9 fe54 	bl	8003008 <assert_failed>
 8009360:	e7d6      	b.n	8009310 <HAL_I2CEx_ConfigDigitalFilter+0x30>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8009362:	218d      	movs	r1, #141	; 0x8d
 8009364:	4805      	ldr	r0, [pc, #20]	; (800937c <HAL_I2CEx_ConfigDigitalFilter+0x9c>)
 8009366:	f7f9 fe4f 	bl	8003008 <assert_failed>
 800936a:	e7cf      	b.n	800930c <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 800936c:	40005400 	.word	0x40005400
 8009370:	40005800 	.word	0x40005800
 8009374:	40005c00 	.word	0x40005c00
 8009378:	40006000 	.word	0x40006000
 800937c:	080268f0 	.word	0x080268f0

08009380 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009380:	6803      	ldr	r3, [r0, #0]
 8009382:	f64a 22aa 	movw	r2, #43690	; 0xaaaa

  /* Return function status */
  return HAL_OK;
}
 8009386:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009388:	601a      	str	r2, [r3, #0]
}
 800938a:	4770      	bx	lr

0800938c <HAL_MDIOS_Init>:
HAL_StatusTypeDef HAL_MDIOS_Init(MDIOS_HandleTypeDef *hmdios)
{
  uint32_t tmpcr = 0;

  /* Check the MDIOS handle allocation */
  if(hmdios == NULL)
 800938c:	2800      	cmp	r0, #0
 800938e:	d03c      	beq.n	800940a <HAL_MDIOS_Init+0x7e>
  {
    return HAL_ERROR;
  }
  
  /* Check the parameters */
  assert_param(IS_MDIOS_ALL_INSTANCE(hmdios->Instance));
 8009390:	4b21      	ldr	r3, [pc, #132]	; (8009418 <HAL_MDIOS_Init+0x8c>)
 8009392:	6802      	ldr	r2, [r0, #0]
 8009394:	429a      	cmp	r2, r3
{
 8009396:	b570      	push	{r4, r5, r6, lr}
 8009398:	4604      	mov	r4, r0
  assert_param(IS_MDIOS_ALL_INSTANCE(hmdios->Instance));
 800939a:	d003      	beq.n	80093a4 <HAL_MDIOS_Init+0x18>
 800939c:	21c7      	movs	r1, #199	; 0xc7
 800939e:	481f      	ldr	r0, [pc, #124]	; (800941c <HAL_MDIOS_Init+0x90>)
 80093a0:	f7f9 fe32 	bl	8003008 <assert_failed>
  assert_param(IS_MDIOS_PORTADDRESS(hmdios->Init.PortAddress));
 80093a4:	6863      	ldr	r3, [r4, #4]
 80093a6:	2b1f      	cmp	r3, #31
 80093a8:	d826      	bhi.n	80093f8 <HAL_MDIOS_Init+0x6c>
  assert_param(IS_MDIOS_PREAMBLECHECK(hmdios->Init.PreambleCheck));
 80093aa:	68a3      	ldr	r3, [r4, #8]
 80093ac:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80093b0:	d119      	bne.n	80093e6 <HAL_MDIOS_Init+0x5a>
  
  /* Process Locked */
  __HAL_LOCK(hmdios);
 80093b2:	7b63      	ldrb	r3, [r4, #13]
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d01d      	beq.n	80093f4 <HAL_MDIOS_Init+0x68>
 80093b8:	2201      	movs	r2, #1
  
  if(hmdios->State == HAL_MDIOS_STATE_RESET)
 80093ba:	7b23      	ldrb	r3, [r4, #12]
  __HAL_LOCK(hmdios);
 80093bc:	7362      	strb	r2, [r4, #13]
  if(hmdios->State == HAL_MDIOS_STATE_RESET)
 80093be:	b333      	cbz	r3, 800940e <HAL_MDIOS_Init+0x82>
  
  /* Change the MDIOS state */
  hmdios->State = HAL_MDIOS_STATE_BUSY;
  
  /* Get the MDIOS CR value */
  tmpcr = hmdios->Instance->CR;
 80093c0:	6825      	ldr	r5, [r4, #0]
  
  /* Write the MDIOS CR */
  hmdios->Instance->CR = tmpcr;
  
  /* Change the MDIOS state */
  hmdios->State = HAL_MDIOS_STATE_READY;
 80093c2:	2601      	movs	r6, #1
  tmpcr |=  (uint32_t)(((hmdios->Init.PortAddress) << MDIOS_PORT_ADDRESS_SHIFT)    |\
 80093c4:	68a3      	ldr	r3, [r4, #8]
  hmdios->State = HAL_MDIOS_STATE_BUSY;
 80093c6:	2202      	movs	r2, #2
  tmpcr |=  (uint32_t)(((hmdios->Init.PortAddress) << MDIOS_PORT_ADDRESS_SHIFT)    |\
 80093c8:	6861      	ldr	r1, [r4, #4]
  hmdios->State = HAL_MDIOS_STATE_BUSY;
 80093ca:	7322      	strb	r2, [r4, #12]
  tmpcr |=  (uint32_t)(((hmdios->Init.PortAddress) << MDIOS_PORT_ADDRESS_SHIFT)    |\
 80093cc:	4333      	orrs	r3, r6
  tmpcr = hmdios->Instance->CR;
 80093ce:	6828      	ldr	r0, [r5, #0]
  tmpcr &= ((uint32_t)~(MDIOS_CR_EN | MDIOS_CR_DPC | MDIOS_CR_PORT_ADDRESS));
 80093d0:	4a13      	ldr	r2, [pc, #76]	; (8009420 <HAL_MDIOS_Init+0x94>)
  tmpcr |=  (uint32_t)(((hmdios->Init.PortAddress) << MDIOS_PORT_ADDRESS_SHIFT)    |\
 80093d2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  
  /* Release Lock */
  __HAL_UNLOCK(hmdios);
 80093d6:	2100      	movs	r1, #0
  tmpcr &= ((uint32_t)~(MDIOS_CR_EN | MDIOS_CR_DPC | MDIOS_CR_PORT_ADDRESS));
 80093d8:	4002      	ands	r2, r0
  
  /* Return function status */
  return HAL_OK;
 80093da:	4608      	mov	r0, r1
  tmpcr |=  (uint32_t)(((hmdios->Init.PortAddress) << MDIOS_PORT_ADDRESS_SHIFT)    |\
 80093dc:	4313      	orrs	r3, r2
  hmdios->Instance->CR = tmpcr;
 80093de:	602b      	str	r3, [r5, #0]
  hmdios->State = HAL_MDIOS_STATE_READY;
 80093e0:	7326      	strb	r6, [r4, #12]
  __HAL_UNLOCK(hmdios);
 80093e2:	7361      	strb	r1, [r4, #13]

}
 80093e4:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_MDIOS_PREAMBLECHECK(hmdios->Init.PreambleCheck));
 80093e6:	21c9      	movs	r1, #201	; 0xc9
 80093e8:	480c      	ldr	r0, [pc, #48]	; (800941c <HAL_MDIOS_Init+0x90>)
 80093ea:	f7f9 fe0d 	bl	8003008 <assert_failed>
  __HAL_LOCK(hmdios);
 80093ee:	7b63      	ldrb	r3, [r4, #13]
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d1e1      	bne.n	80093b8 <HAL_MDIOS_Init+0x2c>
 80093f4:	2002      	movs	r0, #2
}
 80093f6:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_MDIOS_PORTADDRESS(hmdios->Init.PortAddress));
 80093f8:	21c8      	movs	r1, #200	; 0xc8
 80093fa:	4808      	ldr	r0, [pc, #32]	; (800941c <HAL_MDIOS_Init+0x90>)
 80093fc:	f7f9 fe04 	bl	8003008 <assert_failed>
  assert_param(IS_MDIOS_PREAMBLECHECK(hmdios->Init.PreambleCheck));
 8009400:	68a3      	ldr	r3, [r4, #8]
 8009402:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8009406:	d0d4      	beq.n	80093b2 <HAL_MDIOS_Init+0x26>
 8009408:	e7ed      	b.n	80093e6 <HAL_MDIOS_Init+0x5a>
    return HAL_ERROR;
 800940a:	2001      	movs	r0, #1
}
 800940c:	4770      	bx	lr
    HAL_MDIOS_MspInit(hmdios);
 800940e:	4620      	mov	r0, r4
 8009410:	f7fa fdec 	bl	8003fec <HAL_MDIOS_MspInit>
 8009414:	e7d4      	b.n	80093c0 <HAL_MDIOS_Init+0x34>
 8009416:	bf00      	nop
 8009418:	40017800 	.word	0x40017800
 800941c:	0802692c 	.word	0x0802692c
 8009420:	ffffe07e 	.word	0xffffe07e

08009424 <HAL_MDIOS_WriteCpltCallback>:
 8009424:	4770      	bx	lr
 8009426:	bf00      	nop

08009428 <HAL_MDIOS_ReadCpltCallback>:
 8009428:	4770      	bx	lr
 800942a:	bf00      	nop

0800942c <HAL_MDIOS_ErrorCallback>:
 800942c:	4770      	bx	lr
 800942e:	bf00      	nop

08009430 <HAL_MDIOS_WakeUpCallback>:
 8009430:	4770      	bx	lr
 8009432:	bf00      	nop

08009434 <HAL_MDIOS_IRQHandler>:
  * @brief This function handles MDIOS interrupt request.
  * @param hmdios MDIOS handle
  * @retval None
  */
void HAL_MDIOS_IRQHandler(MDIOS_HandleTypeDef *hmdios)
{
 8009434:	b538      	push	{r3, r4, r5, lr}
  /* Write Register Interrupt enabled ? */
  if(__HAL_MDIOS_GET_IT_SOURCE(hmdios, MDIOS_IT_WRITE) != RESET)
 8009436:	6803      	ldr	r3, [r0, #0]
{
 8009438:	4604      	mov	r4, r0
  if(__HAL_MDIOS_GET_IT_SOURCE(hmdios, MDIOS_IT_WRITE) != RESET)
 800943a:	681a      	ldr	r2, [r3, #0]
 800943c:	0795      	lsls	r5, r2, #30
 800943e:	d501      	bpl.n	8009444 <HAL_MDIOS_IRQHandler+0x10>
  return hmdios->Instance->WRFR;   
 8009440:	685a      	ldr	r2, [r3, #4]
  {
    /* Write register flag */
    if(HAL_MDIOS_GetWrittenRegAddress(hmdios) != RESET)
 8009442:	bb22      	cbnz	r2, 800948e <HAL_MDIOS_IRQHandler+0x5a>
      HAL_MDIOS_ClearWriteRegAddress(hmdios, MDIOS_ALL_REG_FLAG);
    }
  }
  
  /* Read Register Interrupt enabled ? */
  if(__HAL_MDIOS_GET_IT_SOURCE(hmdios, MDIOS_IT_READ) != RESET)
 8009444:	681a      	ldr	r2, [r3, #0]
 8009446:	0750      	lsls	r0, r2, #29
 8009448:	d502      	bpl.n	8009450 <HAL_MDIOS_IRQHandler+0x1c>
  return hmdios->Instance->RDFR;   
 800944a:	68da      	ldr	r2, [r3, #12]
  {
    /* Read register flag */
    if(HAL_MDIOS_GetReadRegAddress(hmdios) != RESET)
 800944c:	2a00      	cmp	r2, #0
 800944e:	d130      	bne.n	80094b2 <HAL_MDIOS_IRQHandler+0x7e>
      HAL_MDIOS_ClearReadRegAddress(hmdios, MDIOS_ALL_REG_FLAG);
    }
  }
  
  /* Error Interrupt enabled ? */
  if(__HAL_MDIOS_GET_IT_SOURCE(hmdios, MDIOS_IT_ERROR) != RESET)
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	0711      	lsls	r1, r2, #28
 8009454:	d502      	bpl.n	800945c <HAL_MDIOS_IRQHandler+0x28>
  {
    /* All Errors Flag */
    if(__HAL_MDIOS_GET_ERROR_FLAG(hmdios, MDIOS_ALL_ERRORS_FLAG) !=RESET)
 8009456:	695b      	ldr	r3, [r3, #20]
 8009458:	075a      	lsls	r2, r3, #29
 800945a:	d10b      	bne.n	8009474 <HAL_MDIOS_IRQHandler+0x40>
      __HAL_MDIOS_CLEAR_ERROR_FLAG(hmdios, MDIOS_ALL_ERRORS_FLAG);
    }
  }
   
  /* check MDIOS WAKEUP exti flag */
  if(__HAL_MDIOS_WAKEUP_EXTI_GET_FLAG() != RESET)
 800945c:	4d1e      	ldr	r5, [pc, #120]	; (80094d8 <HAL_MDIOS_IRQHandler+0xa4>)
 800945e:	696b      	ldr	r3, [r5, #20]
 8009460:	01db      	lsls	r3, r3, #7
 8009462:	d400      	bmi.n	8009466 <HAL_MDIOS_IRQHandler+0x32>
#endif /* USE_HAL_MDIOS_REGISTER_CALLBACKS */

    /* Clear MDIOS WAKEUP Exti pending bit */
    __HAL_MDIOS_WAKEUP_EXTI_CLEAR_FLAG();
  }
}
 8009464:	bd38      	pop	{r3, r4, r5, pc}
    HAL_MDIOS_WakeUpCallback(hmdios);
 8009466:	4620      	mov	r0, r4
 8009468:	f7ff ffe2 	bl	8009430 <HAL_MDIOS_WakeUpCallback>
    __HAL_MDIOS_WAKEUP_EXTI_CLEAR_FLAG();
 800946c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009470:	616b      	str	r3, [r5, #20]
}
 8009472:	bd38      	pop	{r3, r4, r5, pc}
      HAL_MDIOS_ErrorCallback(hmdios);
 8009474:	4620      	mov	r0, r4
  if(__HAL_MDIOS_WAKEUP_EXTI_GET_FLAG() != RESET)
 8009476:	4d18      	ldr	r5, [pc, #96]	; (80094d8 <HAL_MDIOS_IRQHandler+0xa4>)
      HAL_MDIOS_ErrorCallback(hmdios);
 8009478:	f7ff ffd8 	bl	800942c <HAL_MDIOS_ErrorCallback>
      __HAL_MDIOS_CLEAR_ERROR_FLAG(hmdios, MDIOS_ALL_ERRORS_FLAG);
 800947c:	6822      	ldr	r2, [r4, #0]
 800947e:	6993      	ldr	r3, [r2, #24]
 8009480:	f043 0307 	orr.w	r3, r3, #7
 8009484:	6193      	str	r3, [r2, #24]
  if(__HAL_MDIOS_WAKEUP_EXTI_GET_FLAG() != RESET)
 8009486:	696b      	ldr	r3, [r5, #20]
 8009488:	01db      	lsls	r3, r3, #7
 800948a:	d5eb      	bpl.n	8009464 <HAL_MDIOS_IRQHandler+0x30>
 800948c:	e7eb      	b.n	8009466 <HAL_MDIOS_IRQHandler+0x32>
      HAL_MDIOS_WriteCpltCallback(hmdios);
 800948e:	f7ff ffc9 	bl	8009424 <HAL_MDIOS_WriteCpltCallback>
  assert_param(IS_MDIOS_REGISTER(RegNum));
 8009492:	f44f 7121 	mov.w	r1, #644	; 0x284
 8009496:	4811      	ldr	r0, [pc, #68]	; (80094dc <HAL_MDIOS_IRQHandler+0xa8>)
 8009498:	f7f9 fdb6 	bl	8003008 <assert_failed>
  __HAL_LOCK(hmdios);
 800949c:	7b63      	ldrb	r3, [r4, #13]
 800949e:	2b01      	cmp	r3, #1
 80094a0:	6823      	ldr	r3, [r4, #0]
 80094a2:	d0cf      	beq.n	8009444 <HAL_MDIOS_IRQHandler+0x10>
  hmdios->Instance->CWRFR |= (RegNum);
 80094a4:	f04f 31ff 	mov.w	r1, #4294967295
  __HAL_UNLOCK(hmdios);
 80094a8:	2200      	movs	r2, #0
  hmdios->Instance->CWRFR |= (RegNum);
 80094aa:	6898      	ldr	r0, [r3, #8]
 80094ac:	6099      	str	r1, [r3, #8]
  __HAL_UNLOCK(hmdios);
 80094ae:	7362      	strb	r2, [r4, #13]
 80094b0:	e7c8      	b.n	8009444 <HAL_MDIOS_IRQHandler+0x10>
      HAL_MDIOS_ReadCpltCallback(hmdios);
 80094b2:	4620      	mov	r0, r4
 80094b4:	f7ff ffb8 	bl	8009428 <HAL_MDIOS_ReadCpltCallback>
  assert_param(IS_MDIOS_REGISTER(RegNum));
 80094b8:	f240 219b 	movw	r1, #667	; 0x29b
 80094bc:	4807      	ldr	r0, [pc, #28]	; (80094dc <HAL_MDIOS_IRQHandler+0xa8>)
 80094be:	f7f9 fda3 	bl	8003008 <assert_failed>
  __HAL_LOCK(hmdios);
 80094c2:	7b63      	ldrb	r3, [r4, #13]
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	6823      	ldr	r3, [r4, #0]
 80094c8:	d0c2      	beq.n	8009450 <HAL_MDIOS_IRQHandler+0x1c>
  hmdios->Instance->CRDFR |= (RegNum); 
 80094ca:	f04f 31ff 	mov.w	r1, #4294967295
  __HAL_UNLOCK(hmdios);
 80094ce:	2200      	movs	r2, #0
  hmdios->Instance->CRDFR |= (RegNum); 
 80094d0:	6918      	ldr	r0, [r3, #16]
 80094d2:	6119      	str	r1, [r3, #16]
  __HAL_UNLOCK(hmdios);
 80094d4:	7362      	strb	r2, [r4, #13]
 80094d6:	e7bb      	b.n	8009450 <HAL_MDIOS_IRQHandler+0x1c>
 80094d8:	40013c00 	.word	0x40013c00
 80094dc:	0802692c 	.word	0x0802692c

080094e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80094e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094e2:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80094e4:	2800      	cmp	r0, #0
 80094e6:	f000 8098 	beq.w	800961a <HAL_PCD_Init+0x13a>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 80094ea:	6805      	ldr	r5, [r0, #0]
 80094ec:	4604      	mov	r4, r0
 80094ee:	f1b5 4fa0 	cmp.w	r5, #1342177280	; 0x50000000
 80094f2:	d007      	beq.n	8009504 <HAL_PCD_Init+0x24>
 80094f4:	4b4d      	ldr	r3, [pc, #308]	; (800962c <HAL_PCD_Init+0x14c>)
 80094f6:	429d      	cmp	r5, r3
 80094f8:	d004      	beq.n	8009504 <HAL_PCD_Init+0x24>
 80094fa:	2187      	movs	r1, #135	; 0x87
 80094fc:	484c      	ldr	r0, [pc, #304]	; (8009630 <HAL_PCD_Init+0x150>)
 80094fe:	f7f9 fd83 	bl	8003008 <assert_failed>
 8009502:	6825      	ldr	r5, [r4, #0]

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009504:	f894 33bd 	ldrb.w	r3, [r4, #957]	; 0x3bd
 8009508:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800950c:	b343      	cbz	r3, 8009560 <HAL_PCD_Init+0x80>
 800950e:	4628      	mov	r0, r5
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009510:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009512:	466f      	mov	r7, sp
 8009514:	1d26      	adds	r6, r4, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8009516:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800951a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800951c:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800951e:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 8009522:	bf08      	it	eq
 8009524:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 8009526:	f005 ff89 	bl	800f43c <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800952a:	f855 eb10 	ldr.w	lr, [r5], #16
 800952e:	46ac      	mov	ip, r5
 8009530:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009534:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8009536:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800953a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800953c:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8009540:	e887 0003 	stmia.w	r7, {r0, r1}
 8009544:	4670      	mov	r0, lr
 8009546:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800954a:	f005 feb1 	bl	800f2b0 <USB_CoreInit>
 800954e:	4607      	mov	r7, r0
 8009550:	b168      	cbz	r0, 800956e <HAL_PCD_Init+0x8e>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 8009552:	2501      	movs	r5, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009554:	2302      	movs	r3, #2
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8009556:	4628      	mov	r0, r5
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009558:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
}
 800955c:	b00b      	add	sp, #44	; 0x2c
 800955e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_PCD_MspInit(hpcd);
 8009560:	4620      	mov	r0, r4
    hpcd->Lock = HAL_UNLOCKED;
 8009562:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 8009566:	f016 f873 	bl	801f650 <HAL_PCD_MspInit>
 800956a:	6820      	ldr	r0, [r4, #0]
 800956c:	e7d0      	b.n	8009510 <HAL_PCD_Init+0x30>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800956e:	4601      	mov	r1, r0
 8009570:	6820      	ldr	r0, [r4, #0]
 8009572:	f005 ff6b 	bl	800f44c <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009576:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800957a:	f1bc 0f00 	cmp.w	ip, #0
 800957e:	d02b      	beq.n	80095d8 <HAL_PCD_Init+0xf8>
 8009580:	4638      	mov	r0, r7
    hpcd->IN_ep[i].is_in = 1U;
 8009582:	2701      	movs	r7, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009584:	4602      	mov	r2, r0
    hpcd->IN_ep[i].is_in = 1U;
 8009586:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800958a:	1c41      	adds	r1, r0, #1
    hpcd->IN_ep[i].is_in = 1U;
 800958c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    hpcd->IN_ep[i].num = i;
 8009590:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009594:	f8a3 0042 	strh.w	r0, [r3, #66]	; 0x42
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009598:	b2c8      	uxtb	r0, r1
    hpcd->IN_ep[i].is_in = 1U;
 800959a:	f883 703d 	strb.w	r7, [r3, #61]	; 0x3d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800959e:	4560      	cmp	r0, ip
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80095a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 80095a4:	651a      	str	r2, [r3, #80]	; 0x50
    hpcd->IN_ep[i].xfer_buff = 0U;
 80095a6:	e9c3 2211 	strd	r2, r2, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80095aa:	d3ec      	bcc.n	8009586 <HAL_PCD_Init+0xa6>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80095ac:	2200      	movs	r2, #0
    hpcd->OUT_ep[i].is_in = 0U;
 80095ae:	4611      	mov	r1, r2
 80095b0:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80095b4:	1c50      	adds	r0, r2, #1
    hpcd->OUT_ep[i].is_in = 0U;
 80095b6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    hpcd->OUT_ep[i].num = i;
 80095ba:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80095be:	b2c2      	uxtb	r2, r0
    hpcd->OUT_ep[i].is_in = 0U;
 80095c0:	f883 11fd 	strb.w	r1, [r3, #509]	; 0x1fd
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80095c4:	4562      	cmp	r2, ip
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80095c6:	f883 11ff 	strb.w	r1, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 80095ca:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80095ce:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 80095d2:	f8c3 1210 	str.w	r1, [r3, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80095d6:	d3eb      	bcc.n	80095b0 <HAL_PCD_Init+0xd0>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80095d8:	466f      	mov	r7, sp
 80095da:	f8d4 c000 	ldr.w	ip, [r4]
 80095de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80095e0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80095e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80095e4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80095e6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80095ea:	e887 0003 	stmia.w	r7, {r0, r1}
 80095ee:	4660      	mov	r0, ip
 80095f0:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80095f4:	f005 ff42 	bl	800f47c <USB_DevInit>
 80095f8:	4605      	mov	r5, r0
 80095fa:	2800      	cmp	r0, #0
 80095fc:	d1a9      	bne.n	8009552 <HAL_PCD_Init+0x72>
  hpcd->State = HAL_PCD_STATE_READY;
 80095fe:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 8009600:	6a63      	ldr	r3, [r4, #36]	; 0x24
  hpcd->USB_Address = 0U;
 8009602:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  if (hpcd->Init.lpm_enable == 1U)
 8009606:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 8009608:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 800960c:	d009      	beq.n	8009622 <HAL_PCD_Init+0x142>
  (void)USB_DevDisconnect(hpcd->Instance);
 800960e:	6820      	ldr	r0, [r4, #0]
 8009610:	f006 fb00 	bl	800fc14 <USB_DevDisconnect>
}
 8009614:	4628      	mov	r0, r5
 8009616:	b00b      	add	sp, #44	; 0x2c
 8009618:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800961a:	2501      	movs	r5, #1
}
 800961c:	4628      	mov	r0, r5
 800961e:	b00b      	add	sp, #44	; 0x2c
 8009620:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009622:	4620      	mov	r0, r4
 8009624:	f000 fcd4 	bl	8009fd0 <HAL_PCDEx_ActivateLPM>
 8009628:	e7f1      	b.n	800960e <HAL_PCD_Init+0x12e>
 800962a:	bf00      	nop
 800962c:	40040000 	.word	0x40040000
 8009630:	08026968 	.word	0x08026968

08009634 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8009634:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8009638:	2b01      	cmp	r3, #1
 800963a:	d00e      	beq.n	800965a <HAL_PCD_Start+0x26>
 800963c:	2301      	movs	r3, #1
{
 800963e:	b510      	push	{r4, lr}
 8009640:	4604      	mov	r4, r0
  (void)USB_DevConnect(hpcd->Instance);
 8009642:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8009644:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 8009648:	f006 fad8 	bl	800fbfc <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800964c:	6820      	ldr	r0, [r4, #0]
 800964e:	f005 feed 	bl	800f42c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8009652:	2000      	movs	r0, #0
 8009654:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
}
 8009658:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800965a:	2002      	movs	r0, #2
}
 800965c:	4770      	bx	lr
 800965e:	bf00      	nop

08009660 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009664:	6806      	ldr	r6, [r0, #0]
{
 8009666:	b089      	sub	sp, #36	; 0x24
 8009668:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800966a:	4630      	mov	r0, r6
 800966c:	f006 fb10 	bl	800fc90 <USB_GetMode>
 8009670:	b110      	cbz	r0, 8009678 <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 8009672:	b009      	add	sp, #36	; 0x24
 8009674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009678:	4605      	mov	r5, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800967a:	6820      	ldr	r0, [r4, #0]
 800967c:	f006 fad6 	bl	800fc2c <USB_ReadInterrupts>
 8009680:	2800      	cmp	r0, #0
 8009682:	d0f6      	beq.n	8009672 <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009684:	6820      	ldr	r0, [r4, #0]
 8009686:	f006 fad1 	bl	800fc2c <USB_ReadInterrupts>
 800968a:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800968e:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009690:	d003      	beq.n	800969a <HAL_PCD_IRQHandler+0x3a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8009692:	6943      	ldr	r3, [r0, #20]
 8009694:	f003 0302 	and.w	r3, r3, #2
 8009698:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800969a:	f006 fac7 	bl	800fc2c <USB_ReadInterrupts>
 800969e:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80096a2:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80096a4:	d011      	beq.n	80096ca <HAL_PCD_IRQHandler+0x6a>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80096a6:	6983      	ldr	r3, [r0, #24]
 80096a8:	f023 0310 	bic.w	r3, r3, #16
 80096ac:	6183      	str	r3, [r0, #24]
      temp = USBx->GRXSTSP;
 80096ae:	6a37      	ldr	r7, [r6, #32]
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80096b0:	f3c7 4343 	ubfx	r3, r7, #17, #4
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80096b4:	f007 080f 	and.w	r8, r7, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80096b8:	2b02      	cmp	r3, #2
 80096ba:	d07d      	beq.n	80097b8 <HAL_PCD_IRQHandler+0x158>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80096bc:	2b06      	cmp	r3, #6
 80096be:	f000 82ae 	beq.w	8009c1e <HAL_PCD_IRQHandler+0x5be>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80096c2:	6983      	ldr	r3, [r0, #24]
 80096c4:	f043 0310 	orr.w	r3, r3, #16
 80096c8:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80096ca:	f006 faaf 	bl	800fc2c <USB_ReadInterrupts>
 80096ce:	f410 2f00 	tst.w	r0, #524288	; 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80096d2:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80096d4:	f040 8169 	bne.w	80099aa <HAL_PCD_IRQHandler+0x34a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80096d8:	f006 faa8 	bl	800fc2c <USB_ReadInterrupts>
 80096dc:	0347      	lsls	r7, r0, #13
 80096de:	f100 80a8 	bmi.w	8009832 <HAL_PCD_IRQHandler+0x1d2>
 80096e2:	f8d4 b000 	ldr.w	fp, [r4]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80096e6:	4658      	mov	r0, fp
 80096e8:	f006 faa0 	bl	800fc2c <USB_ReadInterrupts>
 80096ec:	2800      	cmp	r0, #0
 80096ee:	f2c0 8083 	blt.w	80097f8 <HAL_PCD_IRQHandler+0x198>
 80096f2:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80096f4:	f006 fa9a 	bl	800fc2c <USB_ReadInterrupts>
 80096f8:	0500      	lsls	r0, r0, #20
 80096fa:	d44a      	bmi.n	8009792 <HAL_PCD_IRQHandler+0x132>
 80096fc:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80096fe:	f006 fa95 	bl	800fc2c <USB_ReadInterrupts>
 8009702:	0102      	lsls	r2, r0, #4
 8009704:	d513      	bpl.n	800972e <HAL_PCD_IRQHandler+0xce>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8009706:	6822      	ldr	r2, [r4, #0]
      if (hpcd->LPM_State == LPM_L0)
 8009708:	f894 13f4 	ldrb.w	r1, [r4, #1012]	; 0x3f4
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800970c:	6953      	ldr	r3, [r2, #20]
 800970e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009712:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 8009714:	2900      	cmp	r1, #0
 8009716:	d146      	bne.n	80097a6 <HAL_PCD_IRQHandler+0x146>
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8009718:	6d53      	ldr	r3, [r2, #84]	; 0x54
        hpcd->LPM_State = LPM_L1;
 800971a:	2101      	movs	r1, #1
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800971c:	4620      	mov	r0, r4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800971e:	f3c3 0383 	ubfx	r3, r3, #2, #4
        hpcd->LPM_State = LPM_L1;
 8009722:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8009726:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800972a:	f016 f8ff 	bl	801f92c <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800972e:	6820      	ldr	r0, [r4, #0]
 8009730:	f006 fa7c 	bl	800fc2c <USB_ReadInterrupts>
 8009734:	04c3      	lsls	r3, r0, #19
 8009736:	f100 8191 	bmi.w	8009a5c <HAL_PCD_IRQHandler+0x3fc>
 800973a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800973c:	f006 fa76 	bl	800fc2c <USB_ReadInterrupts>
 8009740:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 8009744:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009746:	f040 8172 	bne.w	8009a2e <HAL_PCD_IRQHandler+0x3ce>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800974a:	f006 fa6f 	bl	800fc2c <USB_ReadInterrupts>
 800974e:	0707      	lsls	r7, r0, #28
 8009750:	f100 8164 	bmi.w	8009a1c <HAL_PCD_IRQHandler+0x3bc>
 8009754:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009756:	f006 fa69 	bl	800fc2c <USB_ReadInterrupts>
 800975a:	02c6      	lsls	r6, r0, #11
 800975c:	f100 81d9 	bmi.w	8009b12 <HAL_PCD_IRQHandler+0x4b2>
 8009760:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009762:	f006 fa63 	bl	800fc2c <USB_ReadInterrupts>
 8009766:	0285      	lsls	r5, r0, #10
 8009768:	f100 81c9 	bmi.w	8009afe <HAL_PCD_IRQHandler+0x49e>
 800976c:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800976e:	f006 fa5d 	bl	800fc2c <USB_ReadInterrupts>
 8009772:	0040      	lsls	r0, r0, #1
 8009774:	d454      	bmi.n	8009820 <HAL_PCD_IRQHandler+0x1c0>
 8009776:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009778:	f006 fa58 	bl	800fc2c <USB_ReadInterrupts>
 800977c:	0741      	lsls	r1, r0, #29
 800977e:	f57f af78 	bpl.w	8009672 <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 8009782:	6823      	ldr	r3, [r4, #0]
 8009784:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009786:	076a      	lsls	r2, r5, #29
 8009788:	d411      	bmi.n	80097ae <HAL_PCD_IRQHandler+0x14e>
      hpcd->Instance->GOTGINT |= temp;
 800978a:	685a      	ldr	r2, [r3, #4]
 800978c:	432a      	orrs	r2, r5
 800978e:	605a      	str	r2, [r3, #4]
 8009790:	e76f      	b.n	8009672 <HAL_PCD_IRQHandler+0x12>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009792:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 8009796:	07d9      	lsls	r1, r3, #31
 8009798:	d42a      	bmi.n	80097f0 <HAL_PCD_IRQHandler+0x190>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800979a:	6820      	ldr	r0, [r4, #0]
 800979c:	6943      	ldr	r3, [r0, #20]
 800979e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097a2:	6143      	str	r3, [r0, #20]
 80097a4:	e7ab      	b.n	80096fe <HAL_PCD_IRQHandler+0x9e>
        HAL_PCD_SuspendCallback(hpcd);
 80097a6:	4620      	mov	r0, r4
 80097a8:	f015 ffd6 	bl	801f758 <HAL_PCD_SuspendCallback>
 80097ac:	e7bf      	b.n	800972e <HAL_PCD_IRQHandler+0xce>
        HAL_PCD_DisconnectCallback(hpcd);
 80097ae:	4620      	mov	r0, r4
 80097b0:	f015 fffa 	bl	801f7a8 <HAL_PCD_DisconnectCallback>
 80097b4:	6823      	ldr	r3, [r4, #0]
 80097b6:	e7e8      	b.n	800978a <HAL_PCD_IRQHandler+0x12a>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80097b8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80097bc:	421f      	tst	r7, r3
 80097be:	d080      	beq.n	80096c2 <HAL_PCD_IRQHandler+0x62>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80097c0:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 80097c4:	f3c7 170a 	ubfx	r7, r7, #4, #11
 80097c8:	4630      	mov	r0, r6
 80097ca:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 80097ce:	463a      	mov	r2, r7
 80097d0:	f8d8 1208 	ldr.w	r1, [r8, #520]	; 0x208
 80097d4:	f006 f992 	bl	800fafc <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80097d8:	f8d8 2208 	ldr.w	r2, [r8, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80097dc:	f8d8 3214 	ldr.w	r3, [r8, #532]	; 0x214
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80097e0:	443a      	add	r2, r7
 80097e2:	6820      	ldr	r0, [r4, #0]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80097e4:	441f      	add	r7, r3
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80097e6:	f8c8 2208 	str.w	r2, [r8, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80097ea:	f8c8 7214 	str.w	r7, [r8, #532]	; 0x214
 80097ee:	e768      	b.n	80096c2 <HAL_PCD_IRQHandler+0x62>
        HAL_PCD_SuspendCallback(hpcd);
 80097f0:	4620      	mov	r0, r4
 80097f2:	f015 ffb1 	bl	801f758 <HAL_PCD_SuspendCallback>
 80097f6:	e7d0      	b.n	800979a <HAL_PCD_IRQHandler+0x13a>
      if (hpcd->LPM_State == LPM_L1)
 80097f8:	f894 13f4 	ldrb.w	r1, [r4, #1012]	; 0x3f4
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80097fc:	f8d6 2804 	ldr.w	r2, [r6, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 8009800:	2901      	cmp	r1, #1
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009802:	f022 0201 	bic.w	r2, r2, #1
 8009806:	f8c6 2804 	str.w	r2, [r6, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 800980a:	f000 81dc 	beq.w	8009bc6 <HAL_PCD_IRQHandler+0x566>
        HAL_PCD_ResumeCallback(hpcd);
 800980e:	4620      	mov	r0, r4
 8009810:	f015 ffba 	bl	801f788 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009814:	6820      	ldr	r0, [r4, #0]
 8009816:	6943      	ldr	r3, [r0, #20]
 8009818:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800981c:	6143      	str	r3, [r0, #20]
 800981e:	e769      	b.n	80096f4 <HAL_PCD_IRQHandler+0x94>
      HAL_PCD_ConnectCallback(hpcd);
 8009820:	4620      	mov	r0, r4
 8009822:	f015 ffbd 	bl	801f7a0 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009826:	6820      	ldr	r0, [r4, #0]
 8009828:	6943      	ldr	r3, [r0, #20]
 800982a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800982e:	6143      	str	r3, [r0, #20]
 8009830:	e7a2      	b.n	8009778 <HAL_PCD_IRQHandler+0x118>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009832:	6820      	ldr	r0, [r4, #0]
 8009834:	f006 fa06 	bl	800fc44 <USB_ReadDevAllInEpInterrupt>
 8009838:	f8d4 b000 	ldr.w	fp, [r4]
      while (ep_intr != 0U)
 800983c:	4681      	mov	r9, r0
 800983e:	2800      	cmp	r0, #0
 8009840:	f43f af51 	beq.w	80096e6 <HAL_PCD_IRQHandler+0x86>
 8009844:	f506 6310 	add.w	r3, r6, #2304	; 0x900
 8009848:	46a0      	mov	r8, r4
      epnum = 0U;
 800984a:	f04f 0a00 	mov.w	sl, #0
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800984e:	9505      	str	r5, [sp, #20]
 8009850:	e9cd 3603 	strd	r3, r6, [sp, #12]
 8009854:	e007      	b.n	8009866 <HAL_PCD_IRQHandler+0x206>
      while (ep_intr != 0U)
 8009856:	ea5f 0959 	movs.w	r9, r9, lsr #1
        epnum++;
 800985a:	f10a 0a01 	add.w	sl, sl, #1
 800985e:	f108 081c 	add.w	r8, r8, #28
      while (ep_intr != 0U)
 8009862:	f000 8160 	beq.w	8009b26 <HAL_PCD_IRQHandler+0x4c6>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009866:	f019 0f01 	tst.w	r9, #1
 800986a:	d0f4      	beq.n	8009856 <HAL_PCD_IRQHandler+0x1f6>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800986c:	fa5f f68a 	uxtb.w	r6, sl
 8009870:	4658      	mov	r0, fp
 8009872:	4631      	mov	r1, r6
 8009874:	f006 f9f8 	bl	800fc68 <USB_ReadDevInEPInterrupt>
 8009878:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800987a:	07e8      	lsls	r0, r5, #31
 800987c:	d518      	bpl.n	80098b0 <HAL_PCD_IRQHandler+0x250>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800987e:	9b04      	ldr	r3, [sp, #16]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009880:	2701      	movs	r7, #1
 8009882:	f00a 010f 	and.w	r1, sl, #15
 8009886:	9a03      	ldr	r2, [sp, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009888:	f8d3 0834 	ldr.w	r0, [r3, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800988c:	fa07 f101 	lsl.w	r1, r7, r1
 8009890:	eb02 124a 	add.w	r2, r2, sl, lsl #5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009894:	ea20 0001 	bic.w	r0, r0, r1
            if (hpcd->Init.dma_enable == 1U)
 8009898:	6921      	ldr	r1, [r4, #16]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800989a:	f8c3 0834 	str.w	r0, [r3, #2100]	; 0x834
            if (hpcd->Init.dma_enable == 1U)
 800989e:	42b9      	cmp	r1, r7
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80098a0:	4613      	mov	r3, r2
 80098a2:	609f      	str	r7, [r3, #8]
            if (hpcd->Init.dma_enable == 1U)
 80098a4:	f000 8196 	beq.w	8009bd4 <HAL_PCD_IRQHandler+0x574>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80098a8:	4631      	mov	r1, r6
 80098aa:	4620      	mov	r0, r4
 80098ac:	f015 ff30 	bl	801f710 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80098b0:	0729      	lsls	r1, r5, #28
 80098b2:	d504      	bpl.n	80098be <HAL_PCD_IRQHandler+0x25e>
 80098b4:	9b03      	ldr	r3, [sp, #12]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80098b6:	2208      	movs	r2, #8
 80098b8:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 80098bc:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80098be:	06ea      	lsls	r2, r5, #27
 80098c0:	d504      	bpl.n	80098cc <HAL_PCD_IRQHandler+0x26c>
 80098c2:	9b03      	ldr	r3, [sp, #12]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80098c4:	2210      	movs	r2, #16
 80098c6:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 80098ca:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80098cc:	066b      	lsls	r3, r5, #25
 80098ce:	d504      	bpl.n	80098da <HAL_PCD_IRQHandler+0x27a>
 80098d0:	9b03      	ldr	r3, [sp, #12]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80098d2:	2240      	movs	r2, #64	; 0x40
 80098d4:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 80098d8:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80098da:	07af      	lsls	r7, r5, #30
 80098dc:	d504      	bpl.n	80098e8 <HAL_PCD_IRQHandler+0x288>
 80098de:	9b03      	ldr	r3, [sp, #12]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80098e0:	2202      	movs	r2, #2
 80098e2:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 80098e6:	609a      	str	r2, [r3, #8]
 80098e8:	6827      	ldr	r7, [r4, #0]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80098ea:	062d      	lsls	r5, r5, #24
 80098ec:	46bb      	mov	fp, r7
 80098ee:	d5b2      	bpl.n	8009856 <HAL_PCD_IRQHandler+0x1f6>
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 80098f0:	e9d8 2314 	ldrd	r2, r3, [r8, #80]	; 0x50
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d8ae      	bhi.n	8009856 <HAL_PCD_IRQHandler+0x1f6>
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 80098f8:	1ad5      	subs	r5, r2, r3

  if (len > ep->maxpacket)
 80098fa:	f8d8 0044 	ldr.w	r0, [r8, #68]	; 0x44
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80098fe:	f507 6110 	add.w	r1, r7, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 8009902:	4285      	cmp	r5, r0
 8009904:	46ac      	mov	ip, r5
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009906:	eb01 114a 	add.w	r1, r1, sl, lsl #5
  len32b = (len + 3U) / 4U;
 800990a:	bf28      	it	cs
 800990c:	4684      	movcs	ip, r0
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800990e:	9106      	str	r1, [sp, #24]
 8009910:	6989      	ldr	r1, [r1, #24]
  len32b = (len + 3U) / 4U;
 8009912:	f10c 0c03 	add.w	ip, ip, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009916:	b289      	uxth	r1, r1
 8009918:	ebb1 0f9c 	cmp.w	r1, ip, lsr #2
 800991c:	d335      	bcc.n	800998a <HAL_PCD_IRQHandler+0x32a>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800991e:	b3a2      	cbz	r2, 800998a <HAL_PCD_IRQHandler+0x32a>
 8009920:	4293      	cmp	r3, r2
 8009922:	d232      	bcs.n	800998a <HAL_PCD_IRQHandler+0x32a>
 8009924:	f8cd a01c 	str.w	sl, [sp, #28]
 8009928:	f8d8 1048 	ldr.w	r1, [r8, #72]	; 0x48
 800992c:	f8dd a018 	ldr.w	sl, [sp, #24]
 8009930:	e00b      	b.n	800994a <HAL_PCD_IRQHandler+0x2ea>
 8009932:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
 8009936:	429a      	cmp	r2, r3
 8009938:	eba2 0503 	sub.w	r5, r2, r3
 800993c:	f240 8182 	bls.w	8009c44 <HAL_PCD_IRQHandler+0x5e4>
 8009940:	2a00      	cmp	r2, #0
 8009942:	f000 817f 	beq.w	8009c44 <HAL_PCD_IRQHandler+0x5e4>
 8009946:	f8d8 0044 	ldr.w	r0, [r8, #68]	; 0x44
 800994a:	4285      	cmp	r5, r0
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800994c:	4632      	mov	r2, r6
 800994e:	bf28      	it	cs
 8009950:	4605      	movcs	r5, r0
 8009952:	7c20      	ldrb	r0, [r4, #16]
 8009954:	b2ab      	uxth	r3, r5
 8009956:	9000      	str	r0, [sp, #0]
 8009958:	4638      	mov	r0, r7
 800995a:	f006 f8b9 	bl	800fad0 <USB_WritePacket>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800995e:	f8da 2018 	ldr.w	r2, [sl, #24]
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 8009962:	f8d8 1048 	ldr.w	r1, [r8, #72]	; 0x48
    len32b = (len + 3U) / 4U;
 8009966:	1ce8      	adds	r0, r5, #3
    ep->xfer_count += len;
 8009968:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800996c:	b292      	uxth	r2, r2
    ep->xfer_buff  += len;
 800996e:	4429      	add	r1, r5
    ep->xfer_count += len;
 8009970:	442b      	add	r3, r5
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009972:	ebb2 0f90 	cmp.w	r2, r0, lsr #2
    ep->xfer_buff  += len;
 8009976:	f8c8 1048 	str.w	r1, [r8, #72]	; 0x48
    ep->xfer_count += len;
 800997a:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800997e:	d2d8      	bcs.n	8009932 <HAL_PCD_IRQHandler+0x2d2>
 8009980:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009984:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
 8009988:	6827      	ldr	r7, [r4, #0]
  }

  if (ep->xfer_len <= ep->xfer_count)
 800998a:	4293      	cmp	r3, r2
 800998c:	f0c0 815e 	bcc.w	8009c4c <HAL_PCD_IRQHandler+0x5ec>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009990:	f50b 6100 	add.w	r1, fp, #2048	; 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009994:	f00a 020f 	and.w	r2, sl, #15
 8009998:	2001      	movs	r0, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800999a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800999c:	46bb      	mov	fp, r7
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800999e:	fa00 f202 	lsl.w	r2, r0, r2
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80099a2:	ea23 0302 	bic.w	r3, r3, r2
 80099a6:	634b      	str	r3, [r1, #52]	; 0x34
 80099a8:	e755      	b.n	8009856 <HAL_PCD_IRQHandler+0x1f6>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80099aa:	f006 f943 	bl	800fc34 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 80099ae:	4607      	mov	r7, r0
 80099b0:	6820      	ldr	r0, [r4, #0]
 80099b2:	2f00      	cmp	r7, #0
 80099b4:	f43f ae90 	beq.w	80096d8 <HAL_PCD_IRQHandler+0x78>
      epnum = 0U;
 80099b8:	f04f 0800 	mov.w	r8, #0
 80099bc:	f506 6a30 	add.w	sl, r6, #2816	; 0xb00
 80099c0:	e004      	b.n	80099cc <HAL_PCD_IRQHandler+0x36c>
      while (ep_intr != 0U)
 80099c2:	087f      	lsrs	r7, r7, #1
        epnum++;
 80099c4:	f108 0801 	add.w	r8, r8, #1
      while (ep_intr != 0U)
 80099c8:	f43f ae86 	beq.w	80096d8 <HAL_PCD_IRQHandler+0x78>
        if ((ep_intr & 0x1U) != 0U)
 80099cc:	07f9      	lsls	r1, r7, #31
 80099ce:	d5f8      	bpl.n	80099c2 <HAL_PCD_IRQHandler+0x362>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80099d0:	fa5f fb88 	uxtb.w	fp, r8
 80099d4:	4659      	mov	r1, fp
 80099d6:	f006 f93d 	bl	800fc54 <USB_ReadDevOutEPInterrupt>
 80099da:	4681      	mov	r9, r0
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80099dc:	6820      	ldr	r0, [r4, #0]
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80099de:	f019 0f01 	tst.w	r9, #1
 80099e2:	f040 80a3 	bne.w	8009b2c <HAL_PCD_IRQHandler+0x4cc>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80099e6:	f019 0f08 	tst.w	r9, #8
 80099ea:	f040 80c4 	bne.w	8009b76 <HAL_PCD_IRQHandler+0x516>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80099ee:	f019 0f10 	tst.w	r9, #16
 80099f2:	d003      	beq.n	80099fc <HAL_PCD_IRQHandler+0x39c>
 80099f4:	eb0a 1348 	add.w	r3, sl, r8, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80099f8:	2210      	movs	r2, #16
 80099fa:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80099fc:	f019 0f20 	tst.w	r9, #32
 8009a00:	d003      	beq.n	8009a0a <HAL_PCD_IRQHandler+0x3aa>
 8009a02:	eb0a 1348 	add.w	r3, sl, r8, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009a06:	2220      	movs	r2, #32
 8009a08:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009a0a:	f419 5f00 	tst.w	r9, #8192	; 0x2000
 8009a0e:	d0d8      	beq.n	80099c2 <HAL_PCD_IRQHandler+0x362>
 8009a10:	eb0a 1348 	add.w	r3, sl, r8, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009a14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009a18:	609a      	str	r2, [r3, #8]
 8009a1a:	e7d2      	b.n	80099c2 <HAL_PCD_IRQHandler+0x362>
      HAL_PCD_SOFCallback(hpcd);
 8009a1c:	4620      	mov	r0, r4
 8009a1e:	f015 fe81 	bl	801f724 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009a22:	6820      	ldr	r0, [r4, #0]
 8009a24:	6943      	ldr	r3, [r0, #20]
 8009a26:	f003 0308 	and.w	r3, r3, #8
 8009a2a:	6143      	str	r3, [r0, #20]
 8009a2c:	e693      	b.n	8009756 <HAL_PCD_IRQHandler+0xf6>
      (void)USB_ActivateSetup(hpcd->Instance);
 8009a2e:	f006 f933 	bl	800fc98 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009a32:	6820      	ldr	r0, [r4, #0]
 8009a34:	f005 fe02 	bl	800f63c <USB_GetDevSpeed>
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009a38:	6825      	ldr	r5, [r4, #0]
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009a3a:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009a3c:	f000 ff1a 	bl	800a874 <HAL_RCC_GetHCLKFreq>
 8009a40:	7b22      	ldrb	r2, [r4, #12]
 8009a42:	4601      	mov	r1, r0
 8009a44:	4628      	mov	r0, r5
 8009a46:	f005 fc71 	bl	800f32c <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8009a4a:	4620      	mov	r0, r4
 8009a4c:	f015 fe6e 	bl	801f72c <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009a50:	6820      	ldr	r0, [r4, #0]
 8009a52:	6943      	ldr	r3, [r0, #20]
 8009a54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009a58:	6143      	str	r3, [r0, #20]
 8009a5a:	e676      	b.n	800974a <HAL_PCD_IRQHandler+0xea>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009a5c:	f506 6700 	add.w	r7, r6, #2048	; 0x800
 8009a60:	687b      	ldr	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009a62:	6820      	ldr	r0, [r4, #0]
 8009a64:	2110      	movs	r1, #16
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009a66:	f023 0301 	bic.w	r3, r3, #1
 8009a6a:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009a6c:	f005 fdd4 	bl	800f618 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009a70:	6860      	ldr	r0, [r4, #4]
 8009a72:	b308      	cbz	r0, 8009ab8 <HAL_PCD_IRQHandler+0x458>
 8009a74:	f506 6310 	add.w	r3, r6, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009a78:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 8009a7c:	6099      	str	r1, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009a7e:	3501      	adds	r5, #1
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	3320      	adds	r3, #32
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009a84:	4285      	cmp	r5, r0
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009a86:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8009a8a:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009a8e:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8009a92:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8009a96:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009a9a:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009a9e:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8009aa2:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8009aa6:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009aaa:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8009aae:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8009ab2:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009ab6:	d1e1      	bne.n	8009a7c <HAL_PCD_IRQHandler+0x41c>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009ab8:	69fb      	ldr	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009aba:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009abc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8009ac0:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009ac2:	2a00      	cmp	r2, #0
 8009ac4:	d075      	beq.n	8009bb2 <HAL_PCD_IRQHandler+0x552>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009ac6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009aca:	f043 030b 	orr.w	r3, r3, #11
 8009ace:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009ad2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ad4:	f043 030b 	orr.w	r3, r3, #11
 8009ad8:	647b      	str	r3, [r7, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009ada:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009ade:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8009ae2:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009ae4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009ae8:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009aea:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009aee:	f006 f8e9 	bl	800fcc4 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009af2:	6820      	ldr	r0, [r4, #0]
 8009af4:	6943      	ldr	r3, [r0, #20]
 8009af6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009afa:	6143      	str	r3, [r0, #20]
 8009afc:	e61e      	b.n	800973c <HAL_PCD_IRQHandler+0xdc>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009afe:	4620      	mov	r0, r4
 8009b00:	2100      	movs	r1, #0
 8009b02:	f015 fe45 	bl	801f790 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009b06:	6820      	ldr	r0, [r4, #0]
 8009b08:	6943      	ldr	r3, [r0, #20]
 8009b0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009b0e:	6143      	str	r3, [r0, #20]
 8009b10:	e62d      	b.n	800976e <HAL_PCD_IRQHandler+0x10e>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009b12:	4620      	mov	r0, r4
 8009b14:	2100      	movs	r1, #0
 8009b16:	f015 fe3f 	bl	801f798 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009b1a:	6820      	ldr	r0, [r4, #0]
 8009b1c:	6943      	ldr	r3, [r0, #20]
 8009b1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009b22:	6143      	str	r3, [r0, #20]
 8009b24:	e61d      	b.n	8009762 <HAL_PCD_IRQHandler+0x102>
 8009b26:	e9dd 6504 	ldrd	r6, r5, [sp, #16]
 8009b2a:	e5dc      	b.n	80096e6 <HAL_PCD_IRQHandler+0x86>
 8009b2c:	ea4f 1348 	mov.w	r3, r8, lsl #5
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if (hpcd->Init.dma_enable == 1U)
 8009b30:	6922      	ldr	r2, [r4, #16]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009b32:	f500 6e30 	add.w	lr, r0, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009b36:	f04f 0c01 	mov.w	ip, #1
 8009b3a:	eb0a 0103 	add.w	r1, sl, r3
  if (hpcd->Init.dma_enable == 1U)
 8009b3e:	2a01      	cmp	r2, #1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009b40:	4473      	add	r3, lr
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009b42:	f8c1 c008 	str.w	ip, [r1, #8]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009b46:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009b4a:	6899      	ldr	r1, [r3, #8]
  if (hpcd->Init.dma_enable == 1U)
 8009b4c:	d05a      	beq.n	8009c04 <HAL_PCD_IRQHandler+0x5a4>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009b4e:	4a5e      	ldr	r2, [pc, #376]	; (8009cc8 <HAL_PCD_IRQHandler+0x668>)
 8009b50:	4594      	cmp	ip, r2
 8009b52:	d07d      	beq.n	8009c50 <HAL_PCD_IRQHandler+0x5f0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009b54:	f1b8 0f00 	cmp.w	r8, #0
 8009b58:	d107      	bne.n	8009b6a <HAL_PCD_IRQHandler+0x50a>
 8009b5a:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8009b5e:	b923      	cbnz	r3, 8009b6a <HAL_PCD_IRQHandler+0x50a>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009b60:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8009b64:	4641      	mov	r1, r8
 8009b66:	f006 f8ad 	bl	800fcc4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009b6a:	4620      	mov	r0, r4
 8009b6c:	4659      	mov	r1, fp
 8009b6e:	f015 fdc5 	bl	801f6fc <HAL_PCD_DataOutStageCallback>
 8009b72:	6820      	ldr	r0, [r4, #0]
 8009b74:	e737      	b.n	80099e6 <HAL_PCD_IRQHandler+0x386>
 8009b76:	ea4f 1348 	mov.w	r3, r8, lsl #5
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009b7a:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009b7e:	f04f 0c08 	mov.w	ip, #8
 8009b82:	eb0a 0103 	add.w	r1, sl, r3
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009b86:	4413      	add	r3, r2
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009b88:	f8c1 c008 	str.w	ip, [r1, #8]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009b8c:	6c02      	ldr	r2, [r0, #64]	; 0x40

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009b8e:	484f      	ldr	r0, [pc, #316]	; (8009ccc <HAL_PCD_IRQHandler+0x66c>)
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009b90:	6899      	ldr	r1, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009b92:	4282      	cmp	r2, r0
 8009b94:	d931      	bls.n	8009bfa <HAL_PCD_IRQHandler+0x59a>
 8009b96:	040a      	lsls	r2, r1, #16
 8009b98:	d502      	bpl.n	8009ba0 <HAL_PCD_IRQHandler+0x540>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009b9a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8009b9e:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009ba0:	4620      	mov	r0, r4
 8009ba2:	f015 fda5 	bl	801f6f0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009ba6:	6921      	ldr	r1, [r4, #16]
 8009ba8:	2901      	cmp	r1, #1
 8009baa:	f000 8084 	beq.w	8009cb6 <HAL_PCD_IRQHandler+0x656>
 8009bae:	6820      	ldr	r0, [r4, #0]
 8009bb0:	e71d      	b.n	80099ee <HAL_PCD_IRQHandler+0x38e>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009bb2:	697a      	ldr	r2, [r7, #20]
 8009bb4:	f242 032b 	movw	r3, #8235	; 0x202b
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	f043 030b 	orr.w	r3, r3, #11
 8009bc2:	613b      	str	r3, [r7, #16]
 8009bc4:	e789      	b.n	8009ada <HAL_PCD_IRQHandler+0x47a>
        hpcd->LPM_State = LPM_L0;
 8009bc6:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009bc8:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 8009bca:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009bce:	f015 fead 	bl	801f92c <HAL_PCDEx_LPM_Callback>
 8009bd2:	e61f      	b.n	8009814 <HAL_PCD_IRQHandler+0x1b4>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8009bd4:	e9d8 2311 	ldrd	r2, r3, [r8, #68]	; 0x44
 8009bd8:	4413      	add	r3, r2
 8009bda:	f8c8 3048 	str.w	r3, [r8, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8009bde:	f1ba 0f00 	cmp.w	sl, #0
 8009be2:	f47f ae61 	bne.w	80098a8 <HAL_PCD_IRQHandler+0x248>
 8009be6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	f47f ae5d 	bne.w	80098a8 <HAL_PCD_IRQHandler+0x248>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009bee:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8009bf2:	6820      	ldr	r0, [r4, #0]
 8009bf4:	f006 f866 	bl	800fcc4 <USB_EP0_OutStart>
 8009bf8:	e656      	b.n	80098a8 <HAL_PCD_IRQHandler+0x248>
  HAL_PCD_SetupStageCallback(hpcd);
 8009bfa:	4620      	mov	r0, r4
 8009bfc:	f015 fd78 	bl	801f6f0 <HAL_PCD_SetupStageCallback>
 8009c00:	6820      	ldr	r0, [r4, #0]
 8009c02:	e6f4      	b.n	80099ee <HAL_PCD_IRQHandler+0x38e>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009c04:	070a      	lsls	r2, r1, #28
 8009c06:	d52a      	bpl.n	8009c5e <HAL_PCD_IRQHandler+0x5fe>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009c08:	4a30      	ldr	r2, [pc, #192]	; (8009ccc <HAL_PCD_IRQHandler+0x66c>)
 8009c0a:	4594      	cmp	ip, r2
 8009c0c:	f67f aeeb 	bls.w	80099e6 <HAL_PCD_IRQHandler+0x386>
 8009c10:	0409      	lsls	r1, r1, #16
 8009c12:	f57f aee8 	bpl.w	80099e6 <HAL_PCD_IRQHandler+0x386>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009c16:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8009c1a:	609a      	str	r2, [r3, #8]
 8009c1c:	e6e3      	b.n	80099e6 <HAL_PCD_IRQHandler+0x386>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009c1e:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009c22:	2208      	movs	r2, #8
 8009c24:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8009c28:	4630      	mov	r0, r6
 8009c2a:	f005 ff67 	bl	800fafc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009c2e:	f3c7 130a 	ubfx	r3, r7, #4, #11
 8009c32:	eb04 0288 	add.w	r2, r4, r8, lsl #2
 8009c36:	6820      	ldr	r0, [r4, #0]
 8009c38:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 8009c3c:	440b      	add	r3, r1
 8009c3e:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 8009c42:	e53e      	b.n	80096c2 <HAL_PCD_IRQHandler+0x62>
 8009c44:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009c48:	6827      	ldr	r7, [r4, #0]
 8009c4a:	e69e      	b.n	800998a <HAL_PCD_IRQHandler+0x32a>
 8009c4c:	46bb      	mov	fp, r7
 8009c4e:	e602      	b.n	8009856 <HAL_PCD_IRQHandler+0x1f6>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009c50:	040a      	lsls	r2, r1, #16
 8009c52:	d4e0      	bmi.n	8009c16 <HAL_PCD_IRQHandler+0x5b6>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009c54:	0689      	lsls	r1, r1, #26
 8009c56:	d588      	bpl.n	8009b6a <HAL_PCD_IRQHandler+0x50a>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009c58:	2220      	movs	r2, #32
 8009c5a:	609a      	str	r2, [r3, #8]
 8009c5c:	e785      	b.n	8009b6a <HAL_PCD_IRQHandler+0x50a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009c5e:	068a      	lsls	r2, r1, #26
 8009c60:	d42f      	bmi.n	8009cc2 <HAL_PCD_IRQHandler+0x662>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009c62:	f011 0f28 	tst.w	r1, #40	; 0x28
 8009c66:	f47f aebe 	bne.w	80099e6 <HAL_PCD_IRQHandler+0x386>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009c6a:	4a18      	ldr	r2, [pc, #96]	; (8009ccc <HAL_PCD_IRQHandler+0x66c>)
 8009c6c:	4594      	cmp	ip, r2
 8009c6e:	d901      	bls.n	8009c74 <HAL_PCD_IRQHandler+0x614>
 8009c70:	0409      	lsls	r1, r1, #16
 8009c72:	d4d0      	bmi.n	8009c16 <HAL_PCD_IRQHandler+0x5b6>
 8009c74:	ebc8 02c8 	rsb	r2, r8, r8, lsl #3
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009c78:	6919      	ldr	r1, [r3, #16]
 8009c7a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009c7e:	f3c1 0112 	ubfx	r1, r1, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8009c82:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009c86:	eba2 0c01 	sub.w	ip, r2, r1
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8009c8a:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8009c8e:	440a      	add	r2, r1
        hpcd->OUT_ep[epnum].xfer_count =
 8009c90:	f8c3 c214 	str.w	ip, [r3, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8009c94:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009c98:	f1b8 0f00 	cmp.w	r8, #0
 8009c9c:	f47f af65 	bne.w	8009b6a <HAL_PCD_IRQHandler+0x50a>
 8009ca0:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	f47f af60 	bne.w	8009b6a <HAL_PCD_IRQHandler+0x50a>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009caa:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8009cae:	2101      	movs	r1, #1
 8009cb0:	f006 f808 	bl	800fcc4 <USB_EP0_OutStart>
 8009cb4:	e759      	b.n	8009b6a <HAL_PCD_IRQHandler+0x50a>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009cb6:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8009cba:	6820      	ldr	r0, [r4, #0]
 8009cbc:	f006 f802 	bl	800fcc4 <USB_EP0_OutStart>
 8009cc0:	e775      	b.n	8009bae <HAL_PCD_IRQHandler+0x54e>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009cc2:	2220      	movs	r2, #32
 8009cc4:	609a      	str	r2, [r3, #8]
 8009cc6:	e68e      	b.n	80099e6 <HAL_PCD_IRQHandler+0x386>
 8009cc8:	4f54310a 	.word	0x4f54310a
 8009ccc:	4f54300a 	.word	0x4f54300a

08009cd0 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8009cd0:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8009cd4:	2a01      	cmp	r2, #1
 8009cd6:	d00d      	beq.n	8009cf4 <HAL_PCD_SetAddress+0x24>
 8009cd8:	2201      	movs	r2, #1
{
 8009cda:	b510      	push	{r4, lr}
 8009cdc:	4604      	mov	r4, r0
  hpcd->USB_Address = address;
 8009cde:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009ce2:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8009ce4:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009ce8:	f005 ff76 	bl	800fbd8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009cec:	2000      	movs	r0, #0
 8009cee:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8009cf2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8009cf4:	2002      	movs	r0, #2
}
 8009cf6:	4770      	bx	lr

08009cf8 <HAL_PCD_EP_Open>:
{
 8009cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cfa:	f001 040f 	and.w	r4, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8009cfe:	0609      	lsls	r1, r1, #24
 8009d00:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8009d04:	ea4f 0585 	mov.w	r5, r5, lsl #2
 8009d08:	d422      	bmi.n	8009d50 <HAL_PCD_EP_Open+0x58>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009d0a:	f505 71fe 	add.w	r1, r5, #508	; 0x1fc
    ep->is_in = 0U;
 8009d0e:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8009d12:	2600      	movs	r6, #0
 8009d14:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009d18:	4401      	add	r1, r0
    ep->is_in = 0U;
 8009d1a:	f885 61fd 	strb.w	r6, [r5, #509]	; 0x1fd
  if (ep->is_in != 0U)
 8009d1e:	784d      	ldrb	r5, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009d20:	700c      	strb	r4, [r1, #0]
  ep->maxpacket = ep_mps;
 8009d22:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 8009d24:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8009d26:	b105      	cbz	r5, 8009d2a <HAL_PCD_EP_Open+0x32>
    ep->tx_fifo_num = ep->num;
 8009d28:	80cc      	strh	r4, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 8009d2a:	2b02      	cmp	r3, #2
 8009d2c:	d101      	bne.n	8009d32 <HAL_PCD_EP_Open+0x3a>
    ep->data_pid_start = 0U;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8009d32:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8009d36:	2b01      	cmp	r3, #1
 8009d38:	d015      	beq.n	8009d66 <HAL_PCD_EP_Open+0x6e>
 8009d3a:	4604      	mov	r4, r0
 8009d3c:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009d3e:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8009d40:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009d44:	f005 fc86 	bl	800f654 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009d48:	2000      	movs	r0, #0
 8009d4a:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8009d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep->is_in = 1U;
 8009d50:	ebc4 06c4 	rsb	r6, r4, r4, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009d54:	f105 013c 	add.w	r1, r5, #60	; 0x3c
    ep->is_in = 1U;
 8009d58:	2701      	movs	r7, #1
 8009d5a:	eb00 0586 	add.w	r5, r0, r6, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009d5e:	4401      	add	r1, r0
    ep->is_in = 1U;
 8009d60:	f885 703d 	strb.w	r7, [r5, #61]	; 0x3d
 8009d64:	e7db      	b.n	8009d1e <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 8009d66:	2002      	movs	r0, #2
}
 8009d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d6a:	bf00      	nop

08009d6c <HAL_PCD_EP_Close>:
{
 8009d6c:	f001 020f 	and.w	r2, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8009d70:	0609      	lsls	r1, r1, #24
{
 8009d72:	b538      	push	{r3, r4, r5, lr}
 8009d74:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 8009d78:	ea4f 0383 	mov.w	r3, r3, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 8009d7c:	d419      	bmi.n	8009db2 <HAL_PCD_EP_Close+0x46>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009d7e:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8009d82:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 8009d86:	2400      	movs	r4, #0
 8009d88:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009d8c:	4401      	add	r1, r0
    ep->is_in = 0U;
 8009d8e:	f883 41fd 	strb.w	r4, [r3, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 8009d92:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8009d94:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	d019      	beq.n	8009dd0 <HAL_PCD_EP_Close+0x64>
 8009d9c:	4604      	mov	r4, r0
 8009d9e:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009da0:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8009da2:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009da6:	f005 fc97 	bl	800f6d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009daa:	2000      	movs	r0, #0
 8009dac:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8009db0:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009db2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    ep->is_in = 1U;
 8009db6:	ebc2 04c2 	rsb	r4, r2, r2, lsl #3
 8009dba:	2501      	movs	r5, #1
 8009dbc:	eb00 0384 	add.w	r3, r0, r4, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009dc0:	4401      	add	r1, r0
    ep->is_in = 1U;
 8009dc2:	f883 503d 	strb.w	r5, [r3, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 8009dc6:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8009dc8:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8009dcc:	2b01      	cmp	r3, #1
 8009dce:	d1e5      	bne.n	8009d9c <HAL_PCD_EP_Close+0x30>
 8009dd0:	2002      	movs	r0, #2
}
 8009dd2:	bd38      	pop	{r3, r4, r5, pc}

08009dd4 <HAL_PCD_EP_Receive>:
{
 8009dd4:	b570      	push	{r4, r5, r6, lr}
 8009dd6:	f001 050f 	and.w	r5, r1, #15
  ep->xfer_count = 0U;
 8009dda:	2600      	movs	r6, #0
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009ddc:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 8009dde:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009de2:	fb01 0105 	mla	r1, r1, r5, r0
  ep->xfer_buff = pBuf;
 8009de6:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009dea:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_buff = pBuf;
 8009dee:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_len = len;
 8009df2:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->num = ep_addr & EP_ADDR_MSK;
 8009df6:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  ep->xfer_count = 0U;
 8009dfa:	f8c4 6214 	str.w	r6, [r4, #532]	; 0x214
  ep->is_in = 0U;
 8009dfe:	f884 61fd 	strb.w	r6, [r4, #509]	; 0x1fd
  if (hpcd->Init.dma_enable == 1U)
 8009e02:	6903      	ldr	r3, [r0, #16]
 8009e04:	6800      	ldr	r0, [r0, #0]
 8009e06:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8009e08:	bf08      	it	eq
 8009e0a:	f8c4 220c 	streq.w	r2, [r4, #524]	; 0x20c
 8009e0e:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009e10:	b11d      	cbz	r5, 8009e1a <HAL_PCD_EP_Receive+0x46>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009e12:	f005 fcc1 	bl	800f798 <USB_EPStartXfer>
}
 8009e16:	2000      	movs	r0, #0
 8009e18:	bd70      	pop	{r4, r5, r6, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009e1a:	f005 fdd1 	bl	800f9c0 <USB_EP0StartXfer>
}
 8009e1e:	2000      	movs	r0, #0
 8009e20:	bd70      	pop	{r4, r5, r6, pc}
 8009e22:	bf00      	nop

08009e24 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009e24:	f001 010f 	and.w	r1, r1, #15
 8009e28:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8009e2c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 8009e30:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 8009e34:	4770      	bx	lr
 8009e36:	bf00      	nop

08009e38 <HAL_PCD_EP_Transmit>:
{
 8009e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e3a:	f001 050f 	and.w	r5, r1, #15
  ep->is_in = 1U;
 8009e3e:	2601      	movs	r6, #1
  ep->xfer_count = 0U;
 8009e40:	2700      	movs	r7, #0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009e42:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 8009e44:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009e48:	fb01 0105 	mla	r1, r1, r5, r0
  ep->xfer_buff = pBuf;
 8009e4c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009e50:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_buff = pBuf;
 8009e52:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->xfer_len = len;
 8009e54:	6523      	str	r3, [r4, #80]	; 0x50
  ep->num = ep_addr & EP_ADDR_MSK;
 8009e56:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 8009e5a:	6567      	str	r7, [r4, #84]	; 0x54
  ep->is_in = 1U;
 8009e5c:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 8009e60:	6903      	ldr	r3, [r0, #16]
 8009e62:	6800      	ldr	r0, [r0, #0]
 8009e64:	42b3      	cmp	r3, r6
    ep->dma_addr = (uint32_t)pBuf;
 8009e66:	bf08      	it	eq
 8009e68:	64e2      	streq	r2, [r4, #76]	; 0x4c
 8009e6a:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009e6c:	b11d      	cbz	r5, 8009e76 <HAL_PCD_EP_Transmit+0x3e>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009e6e:	f005 fc93 	bl	800f798 <USB_EPStartXfer>
}
 8009e72:	2000      	movs	r0, #0
 8009e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009e76:	f005 fda3 	bl	800f9c0 <USB_EP0StartXfer>
}
 8009e7a:	2000      	movs	r0, #0
 8009e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e7e:	bf00      	nop

08009e80 <HAL_PCD_EP_SetStall>:
{
 8009e80:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009e82:	6843      	ldr	r3, [r0, #4]
 8009e84:	f001 050f 	and.w	r5, r1, #15
 8009e88:	429d      	cmp	r5, r3
 8009e8a:	d81f      	bhi.n	8009ecc <HAL_PCD_EP_SetStall+0x4c>
  if ((0x80U & ep_addr) == 0x80U)
 8009e8c:	060b      	lsls	r3, r1, #24
 8009e8e:	d41f      	bmi.n	8009ed0 <HAL_PCD_EP_SetStall+0x50>
    ep->is_in = 0U;
 8009e90:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 8009e94:	241c      	movs	r4, #28
    ep->is_in = 0U;
 8009e96:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8009e98:	fb04 0101 	mla	r1, r4, r1, r0
    ep->is_in = 0U;
 8009e9c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->OUT_ep[ep_addr];
 8009ea0:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8009ea4:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 8009ea8:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8009eaa:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8009eac:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8009eae:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d01e      	beq.n	8009ef4 <HAL_PCD_EP_SetStall+0x74>
 8009eb6:	4604      	mov	r4, r0
 8009eb8:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009ebc:	6800      	ldr	r0, [r0, #0]
 8009ebe:	f005 fe2f 	bl	800fb20 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009ec2:	b1cd      	cbz	r5, 8009ef8 <HAL_PCD_EP_SetStall+0x78>
  __HAL_UNLOCK(hpcd);
 8009ec4:	2000      	movs	r0, #0
 8009ec6:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8009eca:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8009ecc:	2001      	movs	r0, #1
}
 8009ece:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009ed0:	211c      	movs	r1, #28
    ep->is_in = 1U;
 8009ed2:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 8009ed6:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009ed8:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 8009edc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009ee0:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8009ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  ep->is_stall = 1U;
 8009ee6:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8009ee8:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8009eea:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8009eec:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	d1e0      	bne.n	8009eb6 <HAL_PCD_EP_SetStall+0x36>
 8009ef4:	2002      	movs	r0, #2
}
 8009ef6:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009ef8:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8009efc:	7c21      	ldrb	r1, [r4, #16]
 8009efe:	6820      	ldr	r0, [r4, #0]
 8009f00:	f005 fee0 	bl	800fcc4 <USB_EP0_OutStart>
 8009f04:	e7de      	b.n	8009ec4 <HAL_PCD_EP_SetStall+0x44>
 8009f06:	bf00      	nop

08009f08 <HAL_PCD_EP_ClrStall>:
{
 8009f08:	b538      	push	{r3, r4, r5, lr}
 8009f0a:	f001 020f 	and.w	r2, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009f0e:	6843      	ldr	r3, [r0, #4]
 8009f10:	429a      	cmp	r2, r3
 8009f12:	d821      	bhi.n	8009f58 <HAL_PCD_EP_ClrStall+0x50>
 8009f14:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 8009f18:	0609      	lsls	r1, r1, #24
 8009f1a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8009f1e:	d41d      	bmi.n	8009f5c <HAL_PCD_EP_ClrStall+0x54>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009f20:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8009f24:	ebc2 04c2 	rsb	r4, r2, r2, lsl #3
 8009f28:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009f2a:	18c1      	adds	r1, r0, r3
    ep->is_in = 0U;
 8009f2c:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 8009f30:	f883 51fd 	strb.w	r5, [r3, #509]	; 0x1fd
  ep->is_stall = 0U;
 8009f34:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8009f36:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 8009f38:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8009f3a:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8009f3e:	2b01      	cmp	r3, #1
 8009f40:	d01c      	beq.n	8009f7c <HAL_PCD_EP_ClrStall+0x74>
 8009f42:	4604      	mov	r4, r0
 8009f44:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009f46:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8009f48:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009f4c:	f005 fe18 	bl	800fb80 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009f50:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
  return HAL_OK;
 8009f54:	4628      	mov	r0, r5
}
 8009f56:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8009f58:	2001      	movs	r0, #1
}
 8009f5a:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 8009f5c:	ebc2 04c2 	rsb	r4, r2, r2, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009f60:	333c      	adds	r3, #60	; 0x3c
    ep->is_in = 1U;
 8009f62:	2501      	movs	r5, #1
 8009f64:	eb00 0484 	add.w	r4, r0, r4, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009f68:	18c1      	adds	r1, r0, r3
    ep->is_in = 1U;
 8009f6a:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  ep->is_stall = 0U;
 8009f6e:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8009f70:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 8009f72:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8009f74:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8009f78:	2b01      	cmp	r3, #1
 8009f7a:	d1e2      	bne.n	8009f42 <HAL_PCD_EP_ClrStall+0x3a>
 8009f7c:	2002      	movs	r0, #2
}
 8009f7e:	bd38      	pop	{r3, r4, r5, pc}

08009f80 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009f80:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009f82:	6805      	ldr	r5, [r0, #0]
 8009f84:	0412      	lsls	r2, r2, #16
 8009f86:	6a6c      	ldr	r4, [r5, #36]	; 0x24

  if (fifo == 0U)
 8009f88:	b1c1      	cbz	r1, 8009fbc <HAL_PCDEx_SetTxFiFo+0x3c>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009f8a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8009f8c:	3901      	subs	r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009f8e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8009f92:	d00b      	beq.n	8009fac <HAL_PCDEx_SetTxFiFo+0x2c>
 8009f94:	2300      	movs	r3, #0
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009f96:	f103 0040 	add.w	r0, r3, #64	; 0x40
    for (i = 0U; i < (fifo - 1U); i++)
 8009f9a:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009f9c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 8009fa0:	b2db      	uxtb	r3, r3
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009fa2:	6840      	ldr	r0, [r0, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 8009fa4:	428b      	cmp	r3, r1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009fa6:	eb04 4410 	add.w	r4, r4, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8009faa:	d3f4      	bcc.n	8009f96 <HAL_PCDEx_SetTxFiFo+0x16>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009fac:	3140      	adds	r1, #64	; 0x40
 8009fae:	4314      	orrs	r4, r2
  }

  return HAL_OK;
}
 8009fb0:	2000      	movs	r0, #0
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009fb2:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8009fb6:	604c      	str	r4, [r1, #4]
}
 8009fb8:	bc30      	pop	{r4, r5}
 8009fba:	4770      	bx	lr
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009fbc:	4314      	orrs	r4, r2
}
 8009fbe:	2000      	movs	r0, #0
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009fc0:	62ac      	str	r4, [r5, #40]	; 0x28
}
 8009fc2:	bc30      	pop	{r4, r5}
 8009fc4:	4770      	bx	lr
 8009fc6:	bf00      	nop

08009fc8 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8009fc8:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 8009fca:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8009fcc:	6259      	str	r1, [r3, #36]	; 0x24
}
 8009fce:	4770      	bx	lr

08009fd0 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009fd0:	6803      	ldr	r3, [r0, #0]

  hpcd->lpm_active = 1U;
 8009fd2:	2101      	movs	r1, #1
  hpcd->LPM_State = LPM_L0;
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009fd4:	4a08      	ldr	r2, [pc, #32]	; (8009ff8 <HAL_PCDEx_ActivateLPM+0x28>)
{
 8009fd6:	b430      	push	{r4, r5}
  hpcd->lpm_active = 1U;
 8009fd8:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
{
 8009fdc:	4604      	mov	r4, r0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009fde:	6999      	ldr	r1, [r3, #24]
  hpcd->LPM_State = LPM_L0;
 8009fe0:	2500      	movs	r5, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009fe2:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
  hpcd->LPM_State = LPM_L0;
 8009fe6:	f884 53f4 	strb.w	r5, [r4, #1012]	; 0x3f4

  return HAL_OK;
}
 8009fea:	4628      	mov	r0, r5
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009fec:	6199      	str	r1, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009fee:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009ff0:	430a      	orrs	r2, r1
}
 8009ff2:	bc30      	pop	{r4, r5}
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009ff4:	655a      	str	r2, [r3, #84]	; 0x54
}
 8009ff6:	4770      	bx	lr
 8009ff8:	10000003 	.word	0x10000003

08009ffc <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009ffc:	4a02      	ldr	r2, [pc, #8]	; (800a008 <HAL_PWR_EnableBkUpAccess+0xc>)
 8009ffe:	6813      	ldr	r3, [r2, #0]
 800a000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a004:	6013      	str	r3, [r2, #0]
}
 800a006:	4770      	bx	lr
 800a008:	40007000 	.word	0x40007000

0800a00c <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800a00c:	4a1b      	ldr	r2, [pc, #108]	; (800a07c <HAL_PWREx_EnableOverDrive+0x70>)
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800a00e:	4b1c      	ldr	r3, [pc, #112]	; (800a080 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800a010:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800a012:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
{
 800a016:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800a018:	6411      	str	r1, [r2, #64]	; 0x40
{
 800a01a:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 800a01c:	6c12      	ldr	r2, [r2, #64]	; 0x40

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a01e:	461c      	mov	r4, r3
  __HAL_RCC_PWR_CLK_ENABLE();
 800a020:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800a024:	9201      	str	r2, [sp, #4]
 800a026:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800a028:	681a      	ldr	r2, [r3, #0]
 800a02a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a02e:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800a030:	f7fb fb94 	bl	800575c <HAL_GetTick>
 800a034:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a036:	e005      	b.n	800a044 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a038:	f7fb fb90 	bl	800575c <HAL_GetTick>
 800a03c:	1b40      	subs	r0, r0, r5
 800a03e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800a042:	d817      	bhi.n	800a074 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a044:	6863      	ldr	r3, [r4, #4]
 800a046:	03da      	lsls	r2, r3, #15
 800a048:	d5f6      	bpl.n	800a038 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800a04a:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a04c:	4d0c      	ldr	r5, [pc, #48]	; (800a080 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800a04e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a052:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800a054:	f7fb fb82 	bl	800575c <HAL_GetTick>
 800a058:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a05a:	e005      	b.n	800a068 <HAL_PWREx_EnableOverDrive+0x5c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a05c:	f7fb fb7e 	bl	800575c <HAL_GetTick>
 800a060:	1b00      	subs	r0, r0, r4
 800a062:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800a066:	d805      	bhi.n	800a074 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a068:	686b      	ldr	r3, [r5, #4]
 800a06a:	039b      	lsls	r3, r3, #14
 800a06c:	d5f6      	bpl.n	800a05c <HAL_PWREx_EnableOverDrive+0x50>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800a06e:	2000      	movs	r0, #0
}
 800a070:	b003      	add	sp, #12
 800a072:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 800a074:	2003      	movs	r0, #3
}
 800a076:	b003      	add	sp, #12
 800a078:	bd30      	pop	{r4, r5, pc}
 800a07a:	bf00      	nop
 800a07c:	40023800 	.word	0x40023800
 800a080:	40007000 	.word	0x40007000

0800a084 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a084:	2800      	cmp	r0, #0
 800a086:	f000 81f0 	beq.w	800a46a <HAL_RCC_OscConfig+0x3e6>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800a08a:	6803      	ldr	r3, [r0, #0]
 800a08c:	2b0f      	cmp	r3, #15
{
 800a08e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a092:	4604      	mov	r4, r0
 800a094:	b082      	sub	sp, #8
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800a096:	f200 80be 	bhi.w	800a216 <HAL_RCC_OscConfig+0x192>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a09a:	07dd      	lsls	r5, r3, #31
 800a09c:	d534      	bpl.n	800a108 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800a09e:	6863      	ldr	r3, [r4, #4]
 800a0a0:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 800a0a4:	d003      	beq.n	800a0ae <HAL_RCC_OscConfig+0x2a>
 800a0a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a0aa:	f040 817f 	bne.w	800a3ac <HAL_RCC_OscConfig+0x328>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a0ae:	4ab3      	ldr	r2, [pc, #716]	; (800a37c <HAL_RCC_OscConfig+0x2f8>)
 800a0b0:	6893      	ldr	r3, [r2, #8]
 800a0b2:	f003 030c 	and.w	r3, r3, #12
 800a0b6:	2b04      	cmp	r3, #4
 800a0b8:	d01d      	beq.n	800a0f6 <HAL_RCC_OscConfig+0x72>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a0ba:	6893      	ldr	r3, [r2, #8]
 800a0bc:	f003 030c 	and.w	r3, r3, #12
 800a0c0:	2b08      	cmp	r3, #8
 800a0c2:	d015      	beq.n	800a0f0 <HAL_RCC_OscConfig+0x6c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a0c4:	6863      	ldr	r3, [r4, #4]
 800a0c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0ca:	f000 817f 	beq.w	800a3cc <HAL_RCC_OscConfig+0x348>
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	f000 81ae 	beq.w	800a430 <HAL_RCC_OscConfig+0x3ac>
 800a0d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a0d8:	4ba8      	ldr	r3, [pc, #672]	; (800a37c <HAL_RCC_OscConfig+0x2f8>)
 800a0da:	681a      	ldr	r2, [r3, #0]
 800a0dc:	f000 820b 	beq.w	800a4f6 <HAL_RCC_OscConfig+0x472>
 800a0e0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a0e4:	601a      	str	r2, [r3, #0]
 800a0e6:	681a      	ldr	r2, [r3, #0]
 800a0e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a0ec:	601a      	str	r2, [r3, #0]
 800a0ee:	e172      	b.n	800a3d6 <HAL_RCC_OscConfig+0x352>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a0f0:	6853      	ldr	r3, [r2, #4]
 800a0f2:	0258      	lsls	r0, r3, #9
 800a0f4:	d5e6      	bpl.n	800a0c4 <HAL_RCC_OscConfig+0x40>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a0f6:	4ba1      	ldr	r3, [pc, #644]	; (800a37c <HAL_RCC_OscConfig+0x2f8>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	0399      	lsls	r1, r3, #14
 800a0fc:	d503      	bpl.n	800a106 <HAL_RCC_OscConfig+0x82>
 800a0fe:	6863      	ldr	r3, [r4, #4]
 800a100:	2b00      	cmp	r3, #0
 800a102:	f000 8126 	beq.w	800a352 <HAL_RCC_OscConfig+0x2ce>
 800a106:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a108:	079f      	lsls	r7, r3, #30
 800a10a:	d450      	bmi.n	800a1ae <HAL_RCC_OscConfig+0x12a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a10c:	071a      	lsls	r2, r3, #28
 800a10e:	d51a      	bpl.n	800a146 <HAL_RCC_OscConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800a110:	6963      	ldr	r3, [r4, #20]
 800a112:	2b01      	cmp	r3, #1
 800a114:	f200 8141 	bhi.w	800a39a <HAL_RCC_OscConfig+0x316>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a118:	2b00      	cmp	r3, #0
 800a11a:	f000 8124 	beq.w	800a366 <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a11e:	4b97      	ldr	r3, [pc, #604]	; (800a37c <HAL_RCC_OscConfig+0x2f8>)
 800a120:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a122:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 800a124:	f042 0201 	orr.w	r2, r2, #1
 800a128:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 800a12a:	f7fb fb17 	bl	800575c <HAL_GetTick>
 800a12e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a130:	e005      	b.n	800a13e <HAL_RCC_OscConfig+0xba>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a132:	f7fb fb13 	bl	800575c <HAL_GetTick>
 800a136:	1b80      	subs	r0, r0, r6
 800a138:	2802      	cmp	r0, #2
 800a13a:	f200 816b 	bhi.w	800a414 <HAL_RCC_OscConfig+0x390>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a13e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800a140:	079b      	lsls	r3, r3, #30
 800a142:	d5f6      	bpl.n	800a132 <HAL_RCC_OscConfig+0xae>
 800a144:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a146:	075e      	lsls	r6, r3, #29
 800a148:	f140 808b 	bpl.w	800a262 <HAL_RCC_OscConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800a14c:	68a3      	ldr	r3, [r4, #8]
 800a14e:	2b01      	cmp	r3, #1
 800a150:	d906      	bls.n	800a160 <HAL_RCC_OscConfig+0xdc>
 800a152:	2b05      	cmp	r3, #5
 800a154:	d004      	beq.n	800a160 <HAL_RCC_OscConfig+0xdc>
 800a156:	f44f 7102 	mov.w	r1, #520	; 0x208
 800a15a:	4889      	ldr	r0, [pc, #548]	; (800a380 <HAL_RCC_OscConfig+0x2fc>)
 800a15c:	f7f8 ff54 	bl	8003008 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a160:	4b86      	ldr	r3, [pc, #536]	; (800a37c <HAL_RCC_OscConfig+0x2f8>)
 800a162:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a164:	00d5      	lsls	r5, r2, #3
 800a166:	f100 8182 	bmi.w	800a46e <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800a16a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800a16c:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800a16e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a172:	641a      	str	r2, [r3, #64]	; 0x40
 800a174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a17a:	9301      	str	r3, [sp, #4]
 800a17c:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a17e:	4b81      	ldr	r3, [pc, #516]	; (800a384 <HAL_RCC_OscConfig+0x300>)
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	05d0      	lsls	r0, r2, #23
 800a184:	f140 8135 	bpl.w	800a3f2 <HAL_RCC_OscConfig+0x36e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a188:	68a3      	ldr	r3, [r4, #8]
 800a18a:	2b01      	cmp	r3, #1
 800a18c:	d04d      	beq.n	800a22a <HAL_RCC_OscConfig+0x1a6>
 800a18e:	2b00      	cmp	r3, #0
 800a190:	f000 816f 	beq.w	800a472 <HAL_RCC_OscConfig+0x3ee>
 800a194:	2b05      	cmp	r3, #5
 800a196:	4b79      	ldr	r3, [pc, #484]	; (800a37c <HAL_RCC_OscConfig+0x2f8>)
 800a198:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a19a:	f000 81b4 	beq.w	800a506 <HAL_RCC_OscConfig+0x482>
 800a19e:	f022 0201 	bic.w	r2, r2, #1
 800a1a2:	671a      	str	r2, [r3, #112]	; 0x70
 800a1a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a1a6:	f022 0204 	bic.w	r2, r2, #4
 800a1aa:	671a      	str	r2, [r3, #112]	; 0x70
 800a1ac:	e042      	b.n	800a234 <HAL_RCC_OscConfig+0x1b0>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800a1ae:	68e3      	ldr	r3, [r4, #12]
 800a1b0:	2b01      	cmp	r3, #1
 800a1b2:	f200 80d2 	bhi.w	800a35a <HAL_RCC_OscConfig+0x2d6>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800a1b6:	6923      	ldr	r3, [r4, #16]
 800a1b8:	2b1f      	cmp	r3, #31
 800a1ba:	f200 8150 	bhi.w	800a45e <HAL_RCC_OscConfig+0x3da>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a1be:	4b6f      	ldr	r3, [pc, #444]	; (800a37c <HAL_RCC_OscConfig+0x2f8>)
 800a1c0:	689a      	ldr	r2, [r3, #8]
 800a1c2:	f012 0f0c 	tst.w	r2, #12
 800a1c6:	f000 80bd 	beq.w	800a344 <HAL_RCC_OscConfig+0x2c0>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a1ca:	689a      	ldr	r2, [r3, #8]
 800a1cc:	f002 020c 	and.w	r2, r2, #12
 800a1d0:	2a08      	cmp	r2, #8
 800a1d2:	f000 80b3 	beq.w	800a33c <HAL_RCC_OscConfig+0x2b8>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a1d6:	68e3      	ldr	r3, [r4, #12]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	f000 8166 	beq.w	800a4aa <HAL_RCC_OscConfig+0x426>
        __HAL_RCC_HSI_ENABLE();
 800a1de:	4b67      	ldr	r3, [pc, #412]	; (800a37c <HAL_RCC_OscConfig+0x2f8>)
 800a1e0:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a1e2:	461d      	mov	r5, r3
        __HAL_RCC_HSI_ENABLE();
 800a1e4:	f042 0201 	orr.w	r2, r2, #1
 800a1e8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800a1ea:	f7fb fab7 	bl	800575c <HAL_GetTick>
 800a1ee:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a1f0:	e005      	b.n	800a1fe <HAL_RCC_OscConfig+0x17a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a1f2:	f7fb fab3 	bl	800575c <HAL_GetTick>
 800a1f6:	1b80      	subs	r0, r0, r6
 800a1f8:	2802      	cmp	r0, #2
 800a1fa:	f200 810b 	bhi.w	800a414 <HAL_RCC_OscConfig+0x390>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a1fe:	682b      	ldr	r3, [r5, #0]
 800a200:	0798      	lsls	r0, r3, #30
 800a202:	d5f6      	bpl.n	800a1f2 <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a204:	682b      	ldr	r3, [r5, #0]
 800a206:	6922      	ldr	r2, [r4, #16]
 800a208:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800a20c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800a210:	602b      	str	r3, [r5, #0]
 800a212:	6823      	ldr	r3, [r4, #0]
 800a214:	e77a      	b.n	800a10c <HAL_RCC_OscConfig+0x88>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800a216:	f240 1165 	movw	r1, #357	; 0x165
 800a21a:	4859      	ldr	r0, [pc, #356]	; (800a380 <HAL_RCC_OscConfig+0x2fc>)
 800a21c:	f7f8 fef4 	bl	8003008 <assert_failed>
 800a220:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a222:	07dd      	lsls	r5, r3, #31
 800a224:	f57f af70 	bpl.w	800a108 <HAL_RCC_OscConfig+0x84>
 800a228:	e739      	b.n	800a09e <HAL_RCC_OscConfig+0x1a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a22a:	4a54      	ldr	r2, [pc, #336]	; (800a37c <HAL_RCC_OscConfig+0x2f8>)
 800a22c:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800a22e:	f043 0301 	orr.w	r3, r3, #1
 800a232:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a234:	f7fb fa92 	bl	800575c <HAL_GetTick>

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a238:	4e50      	ldr	r6, [pc, #320]	; (800a37c <HAL_RCC_OscConfig+0x2f8>)
      tickstart = HAL_GetTick();
 800a23a:	4680      	mov	r8, r0
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a23c:	f241 3788 	movw	r7, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a240:	e006      	b.n	800a250 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a242:	f7fb fa8b 	bl	800575c <HAL_GetTick>
 800a246:	eba0 0008 	sub.w	r0, r0, r8
 800a24a:	42b8      	cmp	r0, r7
 800a24c:	f200 80e2 	bhi.w	800a414 <HAL_RCC_OscConfig+0x390>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a250:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800a252:	079a      	lsls	r2, r3, #30
 800a254:	d5f5      	bpl.n	800a242 <HAL_RCC_OscConfig+0x1be>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a256:	b125      	cbz	r5, 800a262 <HAL_RCC_OscConfig+0x1de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a258:	4a48      	ldr	r2, [pc, #288]	; (800a37c <HAL_RCC_OscConfig+0x2f8>)
 800a25a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800a25c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a260:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800a262:	69a0      	ldr	r0, [r4, #24]
 800a264:	2802      	cmp	r0, #2
 800a266:	f200 80a7 	bhi.w	800a3b8 <HAL_RCC_OscConfig+0x334>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a26a:	2800      	cmp	r0, #0
 800a26c:	d062      	beq.n	800a334 <HAL_RCC_OscConfig+0x2b0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a26e:	4a43      	ldr	r2, [pc, #268]	; (800a37c <HAL_RCC_OscConfig+0x2f8>)
 800a270:	6893      	ldr	r3, [r2, #8]
 800a272:	f003 030c 	and.w	r3, r3, #12
 800a276:	2b08      	cmp	r3, #8
 800a278:	f000 814d 	beq.w	800a516 <HAL_RCC_OscConfig+0x492>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a27c:	2802      	cmp	r0, #2
 800a27e:	f040 8128 	bne.w	800a4d2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800a282:	69e3      	ldr	r3, [r4, #28]
 800a284:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 800a288:	f040 8195 	bne.w	800a5b6 <HAL_RCC_OscConfig+0x532>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800a28c:	6a23      	ldr	r3, [r4, #32]
 800a28e:	3b02      	subs	r3, #2
 800a290:	2b3d      	cmp	r3, #61	; 0x3d
 800a292:	f200 818a 	bhi.w	800a5aa <HAL_RCC_OscConfig+0x526>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800a296:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a298:	3b32      	subs	r3, #50	; 0x32
 800a29a:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800a29e:	f200 8172 	bhi.w	800a586 <HAL_RCC_OscConfig+0x502>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800a2a2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800a2a4:	2a08      	cmp	r2, #8
 800a2a6:	f240 8167 	bls.w	800a578 <HAL_RCC_OscConfig+0x4f4>
 800a2aa:	f44f 7116 	mov.w	r1, #600	; 0x258
 800a2ae:	4834      	ldr	r0, [pc, #208]	; (800a380 <HAL_RCC_OscConfig+0x2fc>)
 800a2b0:	f7f8 feaa 	bl	8003008 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800a2b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a2b6:	3b02      	subs	r3, #2
 800a2b8:	2b0d      	cmp	r3, #13
 800a2ba:	f200 8170 	bhi.w	800a59e <HAL_RCC_OscConfig+0x51a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800a2be:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a2c0:	3b02      	subs	r3, #2
 800a2c2:	2b05      	cmp	r3, #5
 800a2c4:	f200 8165 	bhi.w	800a592 <HAL_RCC_OscConfig+0x50e>
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a2c8:	4b2c      	ldr	r3, [pc, #176]	; (800a37c <HAL_RCC_OscConfig+0x2f8>)
 800a2ca:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a2cc:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 800a2ce:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800a2d2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800a2d4:	f7fb fa42 	bl	800575c <HAL_GetTick>
 800a2d8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a2da:	e005      	b.n	800a2e8 <HAL_RCC_OscConfig+0x264>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a2dc:	f7fb fa3e 	bl	800575c <HAL_GetTick>
 800a2e0:	1b80      	subs	r0, r0, r6
 800a2e2:	2802      	cmp	r0, #2
 800a2e4:	f200 8096 	bhi.w	800a414 <HAL_RCC_OscConfig+0x390>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a2e8:	682b      	ldr	r3, [r5, #0]
 800a2ea:	0199      	lsls	r1, r3, #6
 800a2ec:	d4f6      	bmi.n	800a2dc <HAL_RCC_OscConfig+0x258>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a2ee:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800a2f2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
 800a2fa:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800a2fe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a300:	0852      	lsrs	r2, r2, #1

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a302:	4c1e      	ldr	r4, [pc, #120]	; (800a37c <HAL_RCC_OscConfig+0x2f8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a304:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800a308:	3a01      	subs	r2, #1
 800a30a:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800a30e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a312:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800a314:	682b      	ldr	r3, [r5, #0]
 800a316:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a31a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a31c:	f7fb fa1e 	bl	800575c <HAL_GetTick>
 800a320:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a322:	e004      	b.n	800a32e <HAL_RCC_OscConfig+0x2aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a324:	f7fb fa1a 	bl	800575c <HAL_GetTick>
 800a328:	1b40      	subs	r0, r0, r5
 800a32a:	2802      	cmp	r0, #2
 800a32c:	d872      	bhi.n	800a414 <HAL_RCC_OscConfig+0x390>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a32e:	6823      	ldr	r3, [r4, #0]
 800a330:	019a      	lsls	r2, r3, #6
 800a332:	d5f7      	bpl.n	800a324 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800a334:	2000      	movs	r0, #0
}
 800a336:	b002      	add	sp, #8
 800a338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	025e      	lsls	r6, r3, #9
 800a340:	f53f af49 	bmi.w	800a1d6 <HAL_RCC_OscConfig+0x152>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a344:	4b0d      	ldr	r3, [pc, #52]	; (800a37c <HAL_RCC_OscConfig+0x2f8>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	079d      	lsls	r5, r3, #30
 800a34a:	d567      	bpl.n	800a41c <HAL_RCC_OscConfig+0x398>
 800a34c:	68e3      	ldr	r3, [r4, #12]
 800a34e:	2b01      	cmp	r3, #1
 800a350:	d064      	beq.n	800a41c <HAL_RCC_OscConfig+0x398>
        return HAL_ERROR;
 800a352:	2001      	movs	r0, #1
}
 800a354:	b002      	add	sp, #8
 800a356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800a35a:	f240 119d 	movw	r1, #413	; 0x19d
 800a35e:	4808      	ldr	r0, [pc, #32]	; (800a380 <HAL_RCC_OscConfig+0x2fc>)
 800a360:	f7f8 fe52 	bl	8003008 <assert_failed>
 800a364:	e727      	b.n	800a1b6 <HAL_RCC_OscConfig+0x132>
      __HAL_RCC_LSI_DISABLE();
 800a366:	4b05      	ldr	r3, [pc, #20]	; (800a37c <HAL_RCC_OscConfig+0x2f8>)
 800a368:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a36a:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 800a36c:	f022 0201 	bic.w	r2, r2, #1
 800a370:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 800a372:	f7fb f9f3 	bl	800575c <HAL_GetTick>
 800a376:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a378:	e00b      	b.n	800a392 <HAL_RCC_OscConfig+0x30e>
 800a37a:	bf00      	nop
 800a37c:	40023800 	.word	0x40023800
 800a380:	080269a0 	.word	0x080269a0
 800a384:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a388:	f7fb f9e8 	bl	800575c <HAL_GetTick>
 800a38c:	1b80      	subs	r0, r0, r6
 800a38e:	2802      	cmp	r0, #2
 800a390:	d840      	bhi.n	800a414 <HAL_RCC_OscConfig+0x390>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a392:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800a394:	079f      	lsls	r7, r3, #30
 800a396:	d4f7      	bmi.n	800a388 <HAL_RCC_OscConfig+0x304>
 800a398:	e6d4      	b.n	800a144 <HAL_RCC_OscConfig+0xc0>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800a39a:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a39e:	4889      	ldr	r0, [pc, #548]	; (800a5c4 <HAL_RCC_OscConfig+0x540>)
 800a3a0:	f7f8 fe32 	bl	8003008 <assert_failed>
 800a3a4:	6963      	ldr	r3, [r4, #20]
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d0dd      	beq.n	800a366 <HAL_RCC_OscConfig+0x2e2>
 800a3aa:	e6b8      	b.n	800a11e <HAL_RCC_OscConfig+0x9a>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800a3ac:	f240 116b 	movw	r1, #363	; 0x16b
 800a3b0:	4884      	ldr	r0, [pc, #528]	; (800a5c4 <HAL_RCC_OscConfig+0x540>)
 800a3b2:	f7f8 fe29 	bl	8003008 <assert_failed>
 800a3b6:	e67a      	b.n	800a0ae <HAL_RCC_OscConfig+0x2a>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800a3b8:	4882      	ldr	r0, [pc, #520]	; (800a5c4 <HAL_RCC_OscConfig+0x540>)
 800a3ba:	f44f 7113 	mov.w	r1, #588	; 0x24c
 800a3be:	f7f8 fe23 	bl	8003008 <assert_failed>
 800a3c2:	69a0      	ldr	r0, [r4, #24]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a3c4:	2800      	cmp	r0, #0
 800a3c6:	f47f af52 	bne.w	800a26e <HAL_RCC_OscConfig+0x1ea>
 800a3ca:	e7b3      	b.n	800a334 <HAL_RCC_OscConfig+0x2b0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a3cc:	4a7e      	ldr	r2, [pc, #504]	; (800a5c8 <HAL_RCC_OscConfig+0x544>)
 800a3ce:	6813      	ldr	r3, [r2, #0]
 800a3d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a3d4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800a3d6:	f7fb f9c1 	bl	800575c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a3da:	4d7b      	ldr	r5, [pc, #492]	; (800a5c8 <HAL_RCC_OscConfig+0x544>)
        tickstart = HAL_GetTick();
 800a3dc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a3de:	e004      	b.n	800a3ea <HAL_RCC_OscConfig+0x366>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a3e0:	f7fb f9bc 	bl	800575c <HAL_GetTick>
 800a3e4:	1b80      	subs	r0, r0, r6
 800a3e6:	2864      	cmp	r0, #100	; 0x64
 800a3e8:	d814      	bhi.n	800a414 <HAL_RCC_OscConfig+0x390>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a3ea:	682b      	ldr	r3, [r5, #0]
 800a3ec:	039a      	lsls	r2, r3, #14
 800a3ee:	d5f7      	bpl.n	800a3e0 <HAL_RCC_OscConfig+0x35c>
 800a3f0:	e689      	b.n	800a106 <HAL_RCC_OscConfig+0x82>
      PWR->CR1 |= PWR_CR1_DBP;
 800a3f2:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a3f4:	461e      	mov	r6, r3
      PWR->CR1 |= PWR_CR1_DBP;
 800a3f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a3fa:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800a3fc:	f7fb f9ae 	bl	800575c <HAL_GetTick>
 800a400:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a402:	6833      	ldr	r3, [r6, #0]
 800a404:	05d9      	lsls	r1, r3, #23
 800a406:	f53f aebf 	bmi.w	800a188 <HAL_RCC_OscConfig+0x104>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a40a:	f7fb f9a7 	bl	800575c <HAL_GetTick>
 800a40e:	1bc0      	subs	r0, r0, r7
 800a410:	2864      	cmp	r0, #100	; 0x64
 800a412:	d9f6      	bls.n	800a402 <HAL_RCC_OscConfig+0x37e>
            return HAL_TIMEOUT;
 800a414:	2003      	movs	r0, #3
}
 800a416:	b002      	add	sp, #8
 800a418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a41c:	4a6a      	ldr	r2, [pc, #424]	; (800a5c8 <HAL_RCC_OscConfig+0x544>)
 800a41e:	6921      	ldr	r1, [r4, #16]
 800a420:	6813      	ldr	r3, [r2, #0]
 800a422:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800a426:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800a42a:	6013      	str	r3, [r2, #0]
 800a42c:	6823      	ldr	r3, [r4, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a42e:	e66d      	b.n	800a10c <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a430:	4b65      	ldr	r3, [pc, #404]	; (800a5c8 <HAL_RCC_OscConfig+0x544>)
 800a432:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a434:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a436:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a43a:	601a      	str	r2, [r3, #0]
 800a43c:	681a      	ldr	r2, [r3, #0]
 800a43e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a442:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800a444:	f7fb f98a 	bl	800575c <HAL_GetTick>
 800a448:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a44a:	e004      	b.n	800a456 <HAL_RCC_OscConfig+0x3d2>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a44c:	f7fb f986 	bl	800575c <HAL_GetTick>
 800a450:	1b80      	subs	r0, r0, r6
 800a452:	2864      	cmp	r0, #100	; 0x64
 800a454:	d8de      	bhi.n	800a414 <HAL_RCC_OscConfig+0x390>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a456:	682b      	ldr	r3, [r5, #0]
 800a458:	039b      	lsls	r3, r3, #14
 800a45a:	d4f7      	bmi.n	800a44c <HAL_RCC_OscConfig+0x3c8>
 800a45c:	e653      	b.n	800a106 <HAL_RCC_OscConfig+0x82>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800a45e:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 800a462:	4858      	ldr	r0, [pc, #352]	; (800a5c4 <HAL_RCC_OscConfig+0x540>)
 800a464:	f7f8 fdd0 	bl	8003008 <assert_failed>
 800a468:	e6a9      	b.n	800a1be <HAL_RCC_OscConfig+0x13a>
    return HAL_ERROR;
 800a46a:	2001      	movs	r0, #1
}
 800a46c:	4770      	bx	lr
  FlagStatus pwrclkchanged = RESET;
 800a46e:	2500      	movs	r5, #0
 800a470:	e685      	b.n	800a17e <HAL_RCC_OscConfig+0xfa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a472:	4b55      	ldr	r3, [pc, #340]	; (800a5c8 <HAL_RCC_OscConfig+0x544>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a474:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a478:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a47a:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a47c:	f022 0201 	bic.w	r2, r2, #1
 800a480:	671a      	str	r2, [r3, #112]	; 0x70
 800a482:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a484:	f022 0204 	bic.w	r2, r2, #4
 800a488:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 800a48a:	f7fb f967 	bl	800575c <HAL_GetTick>
 800a48e:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a490:	e004      	b.n	800a49c <HAL_RCC_OscConfig+0x418>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a492:	f7fb f963 	bl	800575c <HAL_GetTick>
 800a496:	1bc0      	subs	r0, r0, r7
 800a498:	4540      	cmp	r0, r8
 800a49a:	d8bb      	bhi.n	800a414 <HAL_RCC_OscConfig+0x390>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a49c:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800a49e:	079b      	lsls	r3, r3, #30
 800a4a0:	d4f7      	bmi.n	800a492 <HAL_RCC_OscConfig+0x40e>
    if (pwrclkchanged == SET)
 800a4a2:	2d00      	cmp	r5, #0
 800a4a4:	f43f aedd 	beq.w	800a262 <HAL_RCC_OscConfig+0x1de>
 800a4a8:	e6d6      	b.n	800a258 <HAL_RCC_OscConfig+0x1d4>
        __HAL_RCC_HSI_DISABLE();
 800a4aa:	4b47      	ldr	r3, [pc, #284]	; (800a5c8 <HAL_RCC_OscConfig+0x544>)
 800a4ac:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a4ae:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 800a4b0:	f022 0201 	bic.w	r2, r2, #1
 800a4b4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800a4b6:	f7fb f951 	bl	800575c <HAL_GetTick>
 800a4ba:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a4bc:	e004      	b.n	800a4c8 <HAL_RCC_OscConfig+0x444>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a4be:	f7fb f94d 	bl	800575c <HAL_GetTick>
 800a4c2:	1b80      	subs	r0, r0, r6
 800a4c4:	2802      	cmp	r0, #2
 800a4c6:	d8a5      	bhi.n	800a414 <HAL_RCC_OscConfig+0x390>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a4c8:	682b      	ldr	r3, [r5, #0]
 800a4ca:	0799      	lsls	r1, r3, #30
 800a4cc:	d4f7      	bmi.n	800a4be <HAL_RCC_OscConfig+0x43a>
 800a4ce:	6823      	ldr	r3, [r4, #0]
 800a4d0:	e61c      	b.n	800a10c <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_PLL_DISABLE();
 800a4d2:	6813      	ldr	r3, [r2, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a4d4:	4614      	mov	r4, r2
        __HAL_RCC_PLL_DISABLE();
 800a4d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a4da:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800a4dc:	f7fb f93e 	bl	800575c <HAL_GetTick>
 800a4e0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a4e2:	e004      	b.n	800a4ee <HAL_RCC_OscConfig+0x46a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a4e4:	f7fb f93a 	bl	800575c <HAL_GetTick>
 800a4e8:	1b40      	subs	r0, r0, r5
 800a4ea:	2802      	cmp	r0, #2
 800a4ec:	d892      	bhi.n	800a414 <HAL_RCC_OscConfig+0x390>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a4ee:	6823      	ldr	r3, [r4, #0]
 800a4f0:	019b      	lsls	r3, r3, #6
 800a4f2:	d4f7      	bmi.n	800a4e4 <HAL_RCC_OscConfig+0x460>
 800a4f4:	e71e      	b.n	800a334 <HAL_RCC_OscConfig+0x2b0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a4f6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800a4fa:	601a      	str	r2, [r3, #0]
 800a4fc:	681a      	ldr	r2, [r3, #0]
 800a4fe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a502:	601a      	str	r2, [r3, #0]
 800a504:	e767      	b.n	800a3d6 <HAL_RCC_OscConfig+0x352>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a506:	f042 0204 	orr.w	r2, r2, #4
 800a50a:	671a      	str	r2, [r3, #112]	; 0x70
 800a50c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a50e:	f042 0201 	orr.w	r2, r2, #1
 800a512:	671a      	str	r2, [r3, #112]	; 0x70
 800a514:	e68e      	b.n	800a234 <HAL_RCC_OscConfig+0x1b0>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a516:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 800a518:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a51a:	f43f af1b 	beq.w	800a354 <HAL_RCC_OscConfig+0x2d0>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a51e:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a522:	69e1      	ldr	r1, [r4, #28]
 800a524:	428b      	cmp	r3, r1
 800a526:	f47f af14 	bne.w	800a352 <HAL_RCC_OscConfig+0x2ce>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a52a:	f002 033f 	and.w	r3, r2, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a52e:	6a21      	ldr	r1, [r4, #32]
 800a530:	428b      	cmp	r3, r1
 800a532:	f47f af0e 	bne.w	800a352 <HAL_RCC_OscConfig+0x2ce>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a536:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a53a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a53c:	4013      	ands	r3, r2
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a53e:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 800a542:	f47f af06 	bne.w	800a352 <HAL_RCC_OscConfig+0x2ce>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a546:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a548:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 800a54c:	085b      	lsrs	r3, r3, #1
 800a54e:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a550:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 800a554:	f47f aefd 	bne.w	800a352 <HAL_RCC_OscConfig+0x2ce>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a558:	f002 6370 	and.w	r3, r2, #251658240	; 0xf000000
 800a55c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a55e:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 800a562:	f47f aef6 	bne.w	800a352 <HAL_RCC_OscConfig+0x2ce>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800a566:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a568:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a56c:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
    return HAL_ERROR;
 800a570:	bf14      	ite	ne
 800a572:	2001      	movne	r0, #1
 800a574:	2000      	moveq	r0, #0
 800a576:	e6ed      	b.n	800a354 <HAL_RCC_OscConfig+0x2d0>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800a578:	f44f 73aa 	mov.w	r3, #340	; 0x154
 800a57c:	40d3      	lsrs	r3, r2
 800a57e:	07d8      	lsls	r0, r3, #31
 800a580:	f53f ae98 	bmi.w	800a2b4 <HAL_RCC_OscConfig+0x230>
 800a584:	e691      	b.n	800a2aa <HAL_RCC_OscConfig+0x226>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800a586:	f240 2157 	movw	r1, #599	; 0x257
 800a58a:	480e      	ldr	r0, [pc, #56]	; (800a5c4 <HAL_RCC_OscConfig+0x540>)
 800a58c:	f7f8 fd3c 	bl	8003008 <assert_failed>
 800a590:	e687      	b.n	800a2a2 <HAL_RCC_OscConfig+0x21e>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800a592:	f240 215b 	movw	r1, #603	; 0x25b
 800a596:	480b      	ldr	r0, [pc, #44]	; (800a5c4 <HAL_RCC_OscConfig+0x540>)
 800a598:	f7f8 fd36 	bl	8003008 <assert_failed>
 800a59c:	e694      	b.n	800a2c8 <HAL_RCC_OscConfig+0x244>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800a59e:	f240 2159 	movw	r1, #601	; 0x259
 800a5a2:	4808      	ldr	r0, [pc, #32]	; (800a5c4 <HAL_RCC_OscConfig+0x540>)
 800a5a4:	f7f8 fd30 	bl	8003008 <assert_failed>
 800a5a8:	e689      	b.n	800a2be <HAL_RCC_OscConfig+0x23a>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800a5aa:	f240 2156 	movw	r1, #598	; 0x256
 800a5ae:	4805      	ldr	r0, [pc, #20]	; (800a5c4 <HAL_RCC_OscConfig+0x540>)
 800a5b0:	f7f8 fd2a 	bl	8003008 <assert_failed>
 800a5b4:	e66f      	b.n	800a296 <HAL_RCC_OscConfig+0x212>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800a5b6:	f240 2155 	movw	r1, #597	; 0x255
 800a5ba:	4802      	ldr	r0, [pc, #8]	; (800a5c4 <HAL_RCC_OscConfig+0x540>)
 800a5bc:	f7f8 fd24 	bl	8003008 <assert_failed>
 800a5c0:	e664      	b.n	800a28c <HAL_RCC_OscConfig+0x208>
 800a5c2:	bf00      	nop
 800a5c4:	080269a0 	.word	0x080269a0
 800a5c8:	40023800 	.word	0x40023800

0800a5cc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a5cc:	4916      	ldr	r1, [pc, #88]	; (800a628 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 800a5ce:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a5d0:	688b      	ldr	r3, [r1, #8]
 800a5d2:	f003 030c 	and.w	r3, r3, #12
 800a5d6:	2b04      	cmp	r3, #4
 800a5d8:	d01b      	beq.n	800a612 <HAL_RCC_GetSysClockFreq+0x46>
 800a5da:	2b08      	cmp	r3, #8
 800a5dc:	d117      	bne.n	800a60e <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a5de:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800a5e0:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a5e2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a5e6:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800a5e8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 800a5ec:	d113      	bne.n	800a616 <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a5ee:	480f      	ldr	r0, [pc, #60]	; (800a62c <HAL_RCC_GetSysClockFreq+0x60>)
 800a5f0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800a5f4:	fba1 0100 	umull	r0, r1, r1, r0
 800a5f8:	f7f5 feda 	bl	80003b0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800a5fc:	4b0a      	ldr	r3, [pc, #40]	; (800a628 <HAL_RCC_GetSysClockFreq+0x5c>)
 800a5fe:	685b      	ldr	r3, [r3, #4]
 800a600:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800a604:	3301      	adds	r3, #1
 800a606:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800a608:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800a60c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 800a60e:	4807      	ldr	r0, [pc, #28]	; (800a62c <HAL_RCC_GetSysClockFreq+0x60>)
}
 800a610:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800a612:	4807      	ldr	r0, [pc, #28]	; (800a630 <HAL_RCC_GetSysClockFreq+0x64>)
}
 800a614:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a616:	4806      	ldr	r0, [pc, #24]	; (800a630 <HAL_RCC_GetSysClockFreq+0x64>)
 800a618:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800a61c:	2300      	movs	r3, #0
 800a61e:	fba1 0100 	umull	r0, r1, r1, r0
 800a622:	f7f5 fec5 	bl	80003b0 <__aeabi_uldivmod>
 800a626:	e7e9      	b.n	800a5fc <HAL_RCC_GetSysClockFreq+0x30>
 800a628:	40023800 	.word	0x40023800
 800a62c:	00f42400 	.word	0x00f42400
 800a630:	007a1200 	.word	0x007a1200

0800a634 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800a634:	2800      	cmp	r0, #0
 800a636:	f000 80e6 	beq.w	800a806 <HAL_RCC_ClockConfig+0x1d2>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800a63a:	6803      	ldr	r3, [r0, #0]
 800a63c:	3b01      	subs	r3, #1
 800a63e:	2b0e      	cmp	r3, #14
{
 800a640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a644:	4604      	mov	r4, r0
 800a646:	460d      	mov	r5, r1
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800a648:	f200 80c9 	bhi.w	800a7de <HAL_RCC_ClockConfig+0x1aa>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800a64c:	2d0f      	cmp	r5, #15
 800a64e:	f200 80b6 	bhi.w	800a7be <HAL_RCC_ClockConfig+0x18a>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a652:	4a82      	ldr	r2, [pc, #520]	; (800a85c <HAL_RCC_ClockConfig+0x228>)
 800a654:	6813      	ldr	r3, [r2, #0]
 800a656:	f003 030f 	and.w	r3, r3, #15
 800a65a:	42ab      	cmp	r3, r5
 800a65c:	f0c0 80d5 	bcc.w	800a80a <HAL_RCC_ClockConfig+0x1d6>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a660:	6823      	ldr	r3, [r4, #0]
 800a662:	0798      	lsls	r0, r3, #30
 800a664:	d532      	bpl.n	800a6cc <HAL_RCC_ClockConfig+0x98>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a666:	0759      	lsls	r1, r3, #29
 800a668:	d504      	bpl.n	800a674 <HAL_RCC_ClockConfig+0x40>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a66a:	497d      	ldr	r1, [pc, #500]	; (800a860 <HAL_RCC_ClockConfig+0x22c>)
 800a66c:	688a      	ldr	r2, [r1, #8]
 800a66e:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800a672:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a674:	071a      	lsls	r2, r3, #28
 800a676:	d504      	bpl.n	800a682 <HAL_RCC_ClockConfig+0x4e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a678:	4979      	ldr	r1, [pc, #484]	; (800a860 <HAL_RCC_ClockConfig+0x22c>)
 800a67a:	688a      	ldr	r2, [r1, #8]
 800a67c:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800a680:	608a      	str	r2, [r1, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800a682:	68a1      	ldr	r1, [r4, #8]
 800a684:	f031 0280 	bics.w	r2, r1, #128	; 0x80
 800a688:	f021 0620 	bic.w	r6, r1, #32
 800a68c:	f021 0040 	bic.w	r0, r1, #64	; 0x40
 800a690:	bf14      	ite	ne
 800a692:	2201      	movne	r2, #1
 800a694:	2200      	moveq	r2, #0
 800a696:	2e90      	cmp	r6, #144	; 0x90
 800a698:	bf0c      	ite	eq
 800a69a:	2200      	moveq	r2, #0
 800a69c:	f002 0201 	andne.w	r2, r2, #1
 800a6a0:	29f0      	cmp	r1, #240	; 0xf0
 800a6a2:	bf0c      	ite	eq
 800a6a4:	2200      	moveq	r2, #0
 800a6a6:	f002 0201 	andne.w	r2, r2, #1
 800a6aa:	28a0      	cmp	r0, #160	; 0xa0
 800a6ac:	bf0c      	ite	eq
 800a6ae:	2200      	moveq	r2, #0
 800a6b0:	f002 0201 	andne.w	r2, r2, #1
 800a6b4:	b122      	cbz	r2, 800a6c0 <HAL_RCC_ClockConfig+0x8c>
 800a6b6:	f021 0210 	bic.w	r2, r1, #16
 800a6ba:	2ac0      	cmp	r2, #192	; 0xc0
 800a6bc:	f040 80c6 	bne.w	800a84c <HAL_RCC_ClockConfig+0x218>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a6c0:	4867      	ldr	r0, [pc, #412]	; (800a860 <HAL_RCC_ClockConfig+0x22c>)
 800a6c2:	6882      	ldr	r2, [r0, #8]
 800a6c4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800a6c8:	4311      	orrs	r1, r2
 800a6ca:	6081      	str	r1, [r0, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a6cc:	07df      	lsls	r7, r3, #31
 800a6ce:	d527      	bpl.n	800a720 <HAL_RCC_ClockConfig+0xec>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800a6d0:	6863      	ldr	r3, [r4, #4]
 800a6d2:	2b02      	cmp	r3, #2
 800a6d4:	f200 8090 	bhi.w	800a7f8 <HAL_RCC_ClockConfig+0x1c4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a6d8:	4a61      	ldr	r2, [pc, #388]	; (800a860 <HAL_RCC_ClockConfig+0x22c>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a6da:	2b01      	cmp	r3, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a6dc:	6812      	ldr	r2, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a6de:	f000 8087 	beq.w	800a7f0 <HAL_RCC_ClockConfig+0x1bc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a6e2:	2b02      	cmp	r3, #2
 800a6e4:	f000 809f 	beq.w	800a826 <HAL_RCC_ClockConfig+0x1f2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a6e8:	0791      	lsls	r1, r2, #30
 800a6ea:	d575      	bpl.n	800a7d8 <HAL_RCC_ClockConfig+0x1a4>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a6ec:	495c      	ldr	r1, [pc, #368]	; (800a860 <HAL_RCC_ClockConfig+0x22c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a6ee:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a6f2:	688a      	ldr	r2, [r1, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a6f4:	460e      	mov	r6, r1
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a6f6:	f022 0203 	bic.w	r2, r2, #3
 800a6fa:	4313      	orrs	r3, r2
 800a6fc:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800a6fe:	f7fb f82d 	bl	800575c <HAL_GetTick>
 800a702:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a704:	e005      	b.n	800a712 <HAL_RCC_ClockConfig+0xde>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a706:	f7fb f829 	bl	800575c <HAL_GetTick>
 800a70a:	1bc0      	subs	r0, r0, r7
 800a70c:	4540      	cmp	r0, r8
 800a70e:	f200 8088 	bhi.w	800a822 <HAL_RCC_ClockConfig+0x1ee>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a712:	68b3      	ldr	r3, [r6, #8]
 800a714:	6862      	ldr	r2, [r4, #4]
 800a716:	f003 030c 	and.w	r3, r3, #12
 800a71a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800a71e:	d1f2      	bne.n	800a706 <HAL_RCC_ClockConfig+0xd2>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a720:	4a4e      	ldr	r2, [pc, #312]	; (800a85c <HAL_RCC_ClockConfig+0x228>)
 800a722:	6813      	ldr	r3, [r2, #0]
 800a724:	f003 030f 	and.w	r3, r3, #15
 800a728:	42ab      	cmp	r3, r5
 800a72a:	d909      	bls.n	800a740 <HAL_RCC_ClockConfig+0x10c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a72c:	6813      	ldr	r3, [r2, #0]
 800a72e:	f023 030f 	bic.w	r3, r3, #15
 800a732:	432b      	orrs	r3, r5
 800a734:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a736:	6813      	ldr	r3, [r2, #0]
 800a738:	f003 030f 	and.w	r3, r3, #15
 800a73c:	42ab      	cmp	r3, r5
 800a73e:	d14b      	bne.n	800a7d8 <HAL_RCC_ClockConfig+0x1a4>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a740:	6823      	ldr	r3, [r4, #0]
 800a742:	075a      	lsls	r2, r3, #29
 800a744:	d512      	bpl.n	800a76c <HAL_RCC_ClockConfig+0x138>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800a746:	68e1      	ldr	r1, [r4, #12]
 800a748:	f421 6000 	bic.w	r0, r1, #2048	; 0x800
 800a74c:	f421 5280 	bic.w	r2, r1, #4096	; 0x1000
 800a750:	f5b0 5fa0 	cmp.w	r0, #5120	; 0x1400
 800a754:	bf18      	it	ne
 800a756:	2a00      	cmpne	r2, #0
 800a758:	d002      	beq.n	800a760 <HAL_RCC_ClockConfig+0x12c>
 800a75a:	f5b1 5fc0 	cmp.w	r1, #6144	; 0x1800
 800a75e:	d16d      	bne.n	800a83c <HAL_RCC_ClockConfig+0x208>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a760:	483f      	ldr	r0, [pc, #252]	; (800a860 <HAL_RCC_ClockConfig+0x22c>)
 800a762:	6882      	ldr	r2, [r0, #8]
 800a764:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800a768:	430a      	orrs	r2, r1
 800a76a:	6082      	str	r2, [r0, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a76c:	071b      	lsls	r3, r3, #28
 800a76e:	d513      	bpl.n	800a798 <HAL_RCC_ClockConfig+0x164>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800a770:	6922      	ldr	r2, [r4, #16]
 800a772:	f422 6100 	bic.w	r1, r2, #2048	; 0x800
 800a776:	f422 5380 	bic.w	r3, r2, #4096	; 0x1000
 800a77a:	f5b1 5fa0 	cmp.w	r1, #5120	; 0x1400
 800a77e:	bf18      	it	ne
 800a780:	2b00      	cmpne	r3, #0
 800a782:	d002      	beq.n	800a78a <HAL_RCC_ClockConfig+0x156>
 800a784:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 800a788:	d151      	bne.n	800a82e <HAL_RCC_ClockConfig+0x1fa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a78a:	4935      	ldr	r1, [pc, #212]	; (800a860 <HAL_RCC_ClockConfig+0x22c>)
 800a78c:	688b      	ldr	r3, [r1, #8]
 800a78e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800a792:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800a796:	608b      	str	r3, [r1, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a798:	f7ff ff18 	bl	800a5cc <HAL_RCC_GetSysClockFreq>
 800a79c:	4b30      	ldr	r3, [pc, #192]	; (800a860 <HAL_RCC_ClockConfig+0x22c>)
 800a79e:	4c31      	ldr	r4, [pc, #196]	; (800a864 <HAL_RCC_ClockConfig+0x230>)
 800a7a0:	689b      	ldr	r3, [r3, #8]
  HAL_InitTick(uwTickPrio);
 800a7a2:	4931      	ldr	r1, [pc, #196]	; (800a868 <HAL_RCC_ClockConfig+0x234>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a7a4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a7a8:	4a30      	ldr	r2, [pc, #192]	; (800a86c <HAL_RCC_ClockConfig+0x238>)
 800a7aa:	5ce3      	ldrb	r3, [r4, r3]
 800a7ac:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick(uwTickPrio);
 800a7b0:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a7b2:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 800a7b4:	f7fa f8e2 	bl	800497c <HAL_InitTick>
  return HAL_OK;
 800a7b8:	2000      	movs	r0, #0
}
 800a7ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_FLASH_LATENCY(FLatency));
 800a7be:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 800a7c2:	482b      	ldr	r0, [pc, #172]	; (800a870 <HAL_RCC_ClockConfig+0x23c>)
 800a7c4:	f7f8 fc20 	bl	8003008 <assert_failed>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a7c8:	4b24      	ldr	r3, [pc, #144]	; (800a85c <HAL_RCC_ClockConfig+0x228>)
 800a7ca:	681a      	ldr	r2, [r3, #0]
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a7cc:	6819      	ldr	r1, [r3, #0]
 800a7ce:	f021 010f 	bic.w	r1, r1, #15
 800a7d2:	430d      	orrs	r5, r1
 800a7d4:	601d      	str	r5, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a7d6:	681b      	ldr	r3, [r3, #0]
    return HAL_ERROR;
 800a7d8:	2001      	movs	r0, #1
}
 800a7da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800a7de:	f240 21df 	movw	r1, #735	; 0x2df
 800a7e2:	4823      	ldr	r0, [pc, #140]	; (800a870 <HAL_RCC_ClockConfig+0x23c>)
 800a7e4:	f7f8 fc10 	bl	8003008 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800a7e8:	2d0f      	cmp	r5, #15
 800a7ea:	f67f af32 	bls.w	800a652 <HAL_RCC_ClockConfig+0x1e>
 800a7ee:	e7e6      	b.n	800a7be <HAL_RCC_ClockConfig+0x18a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a7f0:	0396      	lsls	r6, r2, #14
 800a7f2:	f53f af7b 	bmi.w	800a6ec <HAL_RCC_ClockConfig+0xb8>
 800a7f6:	e7ef      	b.n	800a7d8 <HAL_RCC_ClockConfig+0x1a4>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800a7f8:	f240 310b 	movw	r1, #779	; 0x30b
 800a7fc:	481c      	ldr	r0, [pc, #112]	; (800a870 <HAL_RCC_ClockConfig+0x23c>)
 800a7fe:	f7f8 fc03 	bl	8003008 <assert_failed>
 800a802:	6863      	ldr	r3, [r4, #4]
 800a804:	e768      	b.n	800a6d8 <HAL_RCC_ClockConfig+0xa4>
    return HAL_ERROR;
 800a806:	2001      	movs	r0, #1
}
 800a808:	4770      	bx	lr
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a80a:	6813      	ldr	r3, [r2, #0]
 800a80c:	f023 030f 	bic.w	r3, r3, #15
 800a810:	432b      	orrs	r3, r5
 800a812:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a814:	6813      	ldr	r3, [r2, #0]
 800a816:	f003 030f 	and.w	r3, r3, #15
 800a81a:	42ab      	cmp	r3, r5
 800a81c:	f43f af20 	beq.w	800a660 <HAL_RCC_ClockConfig+0x2c>
 800a820:	e7da      	b.n	800a7d8 <HAL_RCC_ClockConfig+0x1a4>
        return HAL_TIMEOUT;
 800a822:	2003      	movs	r0, #3
 800a824:	e7d9      	b.n	800a7da <HAL_RCC_ClockConfig+0x1a6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a826:	0190      	lsls	r0, r2, #6
 800a828:	f53f af60 	bmi.w	800a6ec <HAL_RCC_ClockConfig+0xb8>
 800a82c:	e7d4      	b.n	800a7d8 <HAL_RCC_ClockConfig+0x1a4>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800a82e:	f240 314f 	movw	r1, #847	; 0x34f
 800a832:	480f      	ldr	r0, [pc, #60]	; (800a870 <HAL_RCC_ClockConfig+0x23c>)
 800a834:	f7f8 fbe8 	bl	8003008 <assert_failed>
 800a838:	6922      	ldr	r2, [r4, #16]
 800a83a:	e7a6      	b.n	800a78a <HAL_RCC_ClockConfig+0x156>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800a83c:	f44f 7152 	mov.w	r1, #840	; 0x348
 800a840:	480b      	ldr	r0, [pc, #44]	; (800a870 <HAL_RCC_ClockConfig+0x23c>)
 800a842:	f7f8 fbe1 	bl	8003008 <assert_failed>
 800a846:	68e1      	ldr	r1, [r4, #12]
 800a848:	6823      	ldr	r3, [r4, #0]
 800a84a:	e789      	b.n	800a760 <HAL_RCC_ClockConfig+0x12c>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800a84c:	f44f 7141 	mov.w	r1, #772	; 0x304
 800a850:	4807      	ldr	r0, [pc, #28]	; (800a870 <HAL_RCC_ClockConfig+0x23c>)
 800a852:	f7f8 fbd9 	bl	8003008 <assert_failed>
 800a856:	68a1      	ldr	r1, [r4, #8]
 800a858:	6823      	ldr	r3, [r4, #0]
 800a85a:	e731      	b.n	800a6c0 <HAL_RCC_ClockConfig+0x8c>
 800a85c:	40023c00 	.word	0x40023c00
 800a860:	40023800 	.word	0x40023800
 800a864:	080260c4 	.word	0x080260c4
 800a868:	200002a4 	.word	0x200002a4
 800a86c:	20000244 	.word	0x20000244
 800a870:	080269a0 	.word	0x080269a0

0800a874 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800a874:	4b01      	ldr	r3, [pc, #4]	; (800a87c <HAL_RCC_GetHCLKFreq+0x8>)
}
 800a876:	6818      	ldr	r0, [r3, #0]
 800a878:	4770      	bx	lr
 800a87a:	bf00      	nop
 800a87c:	20000244 	.word	0x20000244

0800a880 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a880:	4b04      	ldr	r3, [pc, #16]	; (800a894 <HAL_RCC_GetPCLK1Freq+0x14>)
 800a882:	4a05      	ldr	r2, [pc, #20]	; (800a898 <HAL_RCC_GetPCLK1Freq+0x18>)
 800a884:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800a886:	4905      	ldr	r1, [pc, #20]	; (800a89c <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a888:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800a88c:	6808      	ldr	r0, [r1, #0]
 800a88e:	5cd3      	ldrb	r3, [r2, r3]
}
 800a890:	40d8      	lsrs	r0, r3
 800a892:	4770      	bx	lr
 800a894:	40023800 	.word	0x40023800
 800a898:	080260d4 	.word	0x080260d4
 800a89c:	20000244 	.word	0x20000244

0800a8a0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a8a0:	4b04      	ldr	r3, [pc, #16]	; (800a8b4 <HAL_RCC_GetPCLK2Freq+0x14>)
 800a8a2:	4a05      	ldr	r2, [pc, #20]	; (800a8b8 <HAL_RCC_GetPCLK2Freq+0x18>)
 800a8a4:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800a8a6:	4905      	ldr	r1, [pc, #20]	; (800a8bc <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a8a8:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800a8ac:	6808      	ldr	r0, [r1, #0]
 800a8ae:	5cd3      	ldrb	r3, [r2, r3]
}
 800a8b0:	40d8      	lsrs	r0, r3
 800a8b2:	4770      	bx	lr
 800a8b4:	40023800 	.word	0x40023800
 800a8b8:	080260d4 	.word	0x080260d4
 800a8bc:	20000244 	.word	0x20000244

0800a8c0 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a8c0:	4b0e      	ldr	r3, [pc, #56]	; (800a8fc <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a8c2:	220f      	movs	r2, #15
 800a8c4:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a8c6:	689a      	ldr	r2, [r3, #8]
 800a8c8:	f002 0203 	and.w	r2, r2, #3
 800a8cc:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a8ce:	689a      	ldr	r2, [r3, #8]
 800a8d0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800a8d4:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a8d6:	689a      	ldr	r2, [r3, #8]
 800a8d8:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800a8dc:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800a8de:	689b      	ldr	r3, [r3, #8]
 800a8e0:	08db      	lsrs	r3, r3, #3
{
 800a8e2:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800a8e4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a8e8:	4c05      	ldr	r4, [pc, #20]	; (800a900 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800a8ea:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a8ec:	6823      	ldr	r3, [r4, #0]
}
 800a8ee:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a8f2:	f003 030f 	and.w	r3, r3, #15
 800a8f6:	600b      	str	r3, [r1, #0]
}
 800a8f8:	4770      	bx	lr
 800a8fa:	bf00      	nop
 800a8fc:	40023800 	.word	0x40023800
 800a900:	40023c00 	.word	0x40023c00

0800a904 <HAL_RCCEx_PeriphCLKConfig>:
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
  uint32_t pllsaiused = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800a904:	4a54      	ldr	r2, [pc, #336]	; (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800a906:	6803      	ldr	r3, [r0, #0]
 800a908:	401a      	ands	r2, r3
{
 800a90a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a90e:	4604      	mov	r4, r0
 800a910:	b083      	sub	sp, #12
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800a912:	2a00      	cmp	r2, #0
 800a914:	f000 8349 	beq.w	800afaa <HAL_RCCEx_PeriphCLKConfig+0x6a6>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a918:	f013 0601 	ands.w	r6, r3, #1
 800a91c:	d00f      	beq.n	800a93e <HAL_RCCEx_PeriphCLKConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800a91e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a920:	f431 0200 	bics.w	r2, r1, #8388608	; 0x800000
 800a924:	f040 834c 	bne.w	800afc0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a928:	4a4c      	ldr	r2, [pc, #304]	; (800aa5c <HAL_RCCEx_PeriphCLKConfig+0x158>)

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800a92a:	fab1 f681 	clz	r6, r1
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a92e:	6890      	ldr	r0, [r2, #8]
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800a930:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a932:	f420 0000 	bic.w	r0, r0, #8388608	; 0x800000
 800a936:	6090      	str	r0, [r2, #8]
 800a938:	6890      	ldr	r0, [r2, #8]
 800a93a:	4301      	orrs	r1, r0
 800a93c:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800a93e:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 800a942:	d014      	beq.n	800a96e <HAL_RCCEx_PeriphCLKConfig+0x6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800a944:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800a946:	f435 1240 	bics.w	r2, r5, #3145728	; 0x300000
 800a94a:	f040 836f 	bne.w	800b02c <HAL_RCCEx_PeriphCLKConfig+0x728>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a94e:	4943      	ldr	r1, [pc, #268]	; (800aa5c <HAL_RCCEx_PeriphCLKConfig+0x158>)
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800a950:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a954:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800a958:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800a95c:	ea42 0205 	orr.w	r2, r2, r5
 800a960:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800a964:	f000 8327 	beq.w	800afb6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800a968:	fab5 f585 	clz	r5, r5
 800a96c:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800a96e:	02da      	lsls	r2, r3, #11
 800a970:	d514      	bpl.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 800a972:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a974:	f431 0240 	bics.w	r2, r1, #12582912	; 0xc00000
 800a978:	f040 8351 	bne.w	800b01e <HAL_RCCEx_PeriphCLKConfig+0x71a>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a97c:	4837      	ldr	r0, [pc, #220]	; (800aa5c <HAL_RCCEx_PeriphCLKConfig+0x158>)

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800a97e:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a982:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800a986:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800a98a:	ea42 0201 	orr.w	r2, r2, r1
 800a98e:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800a992:	f000 8313 	beq.w	800afbc <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800a996:	2900      	cmp	r1, #0
 800a998:	bf08      	it	eq
 800a99a:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 800a99c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800a9a0:	bf18      	it	ne
 800a9a2:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a9a4:	069f      	lsls	r7, r3, #26
 800a9a6:	f140 8099 	bpl.w	800aadc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800a9aa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800a9ac:	492c      	ldr	r1, [pc, #176]	; (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800a9ae:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800a9b2:	bf18      	it	ne
 800a9b4:	f5b2 7f00 	cmpne.w	r2, #512	; 0x200
 800a9b8:	f422 2ca0 	bic.w	ip, r2, #327680	; 0x50000
 800a9bc:	f422 2710 	bic.w	r7, r2, #589824	; 0x90000
 800a9c0:	4828      	ldr	r0, [pc, #160]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a9c2:	bf14      	ite	ne
 800a9c4:	2301      	movne	r3, #1
 800a9c6:	2300      	moveq	r3, #0
 800a9c8:	458c      	cmp	ip, r1
 800a9ca:	bf0c      	ite	eq
 800a9cc:	2300      	moveq	r3, #0
 800a9ce:	f003 0301 	andne.w	r3, r3, #1
 800a9d2:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 800a9d6:	f8df c098 	ldr.w	ip, [pc, #152]	; 800aa70 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800a9da:	4287      	cmp	r7, r0
 800a9dc:	bf0c      	ite	eq
 800a9de:	2300      	moveq	r3, #0
 800a9e0:	f003 0301 	andne.w	r3, r3, #1
 800a9e4:	f422 1788 	bic.w	r7, r2, #1114112	; 0x110000
 800a9e8:	f500 2020 	add.w	r0, r0, #655360	; 0xa0000
 800a9ec:	4561      	cmp	r1, ip
 800a9ee:	bf0c      	ite	eq
 800a9f0:	2300      	moveq	r3, #0
 800a9f2:	f003 0301 	andne.w	r3, r3, #1
 800a9f6:	f50c 2c00 	add.w	ip, ip, #524288	; 0x80000
 800a9fa:	4287      	cmp	r7, r0
 800a9fc:	bf0c      	ite	eq
 800a9fe:	2300      	moveq	r3, #0
 800aa00:	f003 0301 	andne.w	r3, r3, #1
 800aa04:	4f18      	ldr	r7, [pc, #96]	; (800aa68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800aa06:	f500 2020 	add.w	r0, r0, #655360	; 0xa0000
 800aa0a:	4561      	cmp	r1, ip
 800aa0c:	bf0c      	ite	eq
 800aa0e:	2300      	moveq	r3, #0
 800aa10:	f003 0301 	andne.w	r3, r3, #1
 800aa14:	42b9      	cmp	r1, r7
 800aa16:	bf0c      	ite	eq
 800aa18:	2300      	moveq	r3, #0
 800aa1a:	f003 0301 	andne.w	r3, r3, #1
 800aa1e:	4281      	cmp	r1, r0
 800aa20:	bf0c      	ite	eq
 800aa22:	2300      	moveq	r3, #0
 800aa24:	f003 0301 	andne.w	r3, r3, #1
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	f040 823f 	bne.w	800aeac <HAL_RCCEx_PeriphCLKConfig+0x5a8>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800aa2e:	4a0b      	ldr	r2, [pc, #44]	; (800aa5c <HAL_RCCEx_PeriphCLKConfig+0x158>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800aa30:	4b0e      	ldr	r3, [pc, #56]	; (800aa6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800aa32:	6c11      	ldr	r1, [r2, #64]	; 0x40

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800aa34:	461f      	mov	r7, r3
    __HAL_RCC_PWR_CLK_ENABLE();
 800aa36:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800aa3a:	6411      	str	r1, [r2, #64]	; 0x40
 800aa3c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800aa3e:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800aa42:	9201      	str	r2, [sp, #4]
 800aa44:	9a01      	ldr	r2, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800aa46:	681a      	ldr	r2, [r3, #0]
 800aa48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aa4c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800aa4e:	f7fa fe85 	bl	800575c <HAL_GetTick>
 800aa52:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800aa54:	e015      	b.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 800aa56:	bf00      	nop
 800aa58:	1dfffff9 	.word	0x1dfffff9
 800aa5c:	40023800 	.word	0x40023800
 800aa60:	00020300 	.word	0x00020300
 800aa64:	00040300 	.word	0x00040300
 800aa68:	00140300 	.word	0x00140300
 800aa6c:	40007000 	.word	0x40007000
 800aa70:	00080300 	.word	0x00080300
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aa74:	f7fa fe72 	bl	800575c <HAL_GetTick>
 800aa78:	eba0 0008 	sub.w	r0, r0, r8
 800aa7c:	2864      	cmp	r0, #100	; 0x64
 800aa7e:	f200 8211 	bhi.w	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	05d8      	lsls	r0, r3, #23
 800aa86:	d5f5      	bpl.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0x170>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800aa88:	4ac4      	ldr	r2, [pc, #784]	; (800ad9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800aa8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800aa8c:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800aa8e:	f403 7040 	and.w	r0, r3, #768	; 0x300

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800aa92:	f411 7140 	ands.w	r1, r1, #768	; 0x300
 800aa96:	d011      	beq.n	800aabc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800aa98:	4281      	cmp	r1, r0
 800aa9a:	d00f      	beq.n	800aabc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800aa9c:	6f11      	ldr	r1, [r2, #112]	; 0x70

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800aa9e:	6f17      	ldr	r7, [r2, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800aaa0:	f421 7140 	bic.w	r1, r1, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800aaa4:	f447 3780 	orr.w	r7, r7, #65536	; 0x10000
 800aaa8:	6717      	str	r7, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800aaaa:	6f17      	ldr	r7, [r2, #112]	; 0x70
 800aaac:	f427 3780 	bic.w	r7, r7, #65536	; 0x10000
 800aab0:	6717      	str	r7, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800aab2:	6711      	str	r1, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800aab4:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800aab6:	07c9      	lsls	r1, r1, #31
 800aab8:	f100 8388 	bmi.w	800b1cc <HAL_RCCEx_PeriphCLKConfig+0x8c8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aabc:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 800aac0:	f000 82a4 	beq.w	800b00c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800aac4:	49b5      	ldr	r1, [pc, #724]	; (800ad9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800aac6:	688a      	ldr	r2, [r1, #8]
 800aac8:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800aacc:	608a      	str	r2, [r1, #8]
 800aace:	4ab3      	ldr	r2, [pc, #716]	; (800ad9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800aad0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aad4:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800aad6:	430b      	orrs	r3, r1
 800aad8:	6713      	str	r3, [r2, #112]	; 0x70
 800aada:	6823      	ldr	r3, [r4, #0]
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800aadc:	06df      	lsls	r7, r3, #27
 800aade:	d510      	bpl.n	800ab02 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 800aae0:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 800aae2:	f037 7280 	bics.w	r2, r7, #16777216	; 0x1000000
 800aae6:	f040 82a8 	bne.w	800b03a <HAL_RCCEx_PeriphCLKConfig+0x736>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800aaea:	4aac      	ldr	r2, [pc, #688]	; (800ad9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800aaec:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 800aaf0:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
 800aaf4:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
 800aaf8:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800aafc:	4339      	orrs	r1, r7
 800aafe:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ab02:	0458      	lsls	r0, r3, #17
 800ab04:	d50f      	bpl.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800ab06:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800ab08:	f431 3280 	bics.w	r2, r1, #65536	; 0x10000
 800ab0c:	d003      	beq.n	800ab16 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800ab0e:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800ab12:	f040 8264 	bne.w	800afde <HAL_RCCEx_PeriphCLKConfig+0x6da>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ab16:	48a1      	ldr	r0, [pc, #644]	; (800ad9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ab18:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800ab1c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800ab20:	430a      	orrs	r2, r1
 800ab22:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ab26:	0419      	lsls	r1, r3, #16
 800ab28:	d50f      	bpl.n	800ab4a <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800ab2a:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800ab2c:	f431 2280 	bics.w	r2, r1, #262144	; 0x40000
 800ab30:	d003      	beq.n	800ab3a <HAL_RCCEx_PeriphCLKConfig+0x236>
 800ab32:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 800ab36:	f040 8259 	bne.w	800afec <HAL_RCCEx_PeriphCLKConfig+0x6e8>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ab3a:	4898      	ldr	r0, [pc, #608]	; (800ad9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ab3c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800ab40:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800ab44:	430a      	orrs	r2, r1
 800ab46:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ab4a:	03da      	lsls	r2, r3, #15
 800ab4c:	d50f      	bpl.n	800ab6e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800ab4e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800ab50:	f431 1280 	bics.w	r2, r1, #1048576	; 0x100000
 800ab54:	d003      	beq.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800ab56:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800ab5a:	f040 824f 	bne.w	800affc <HAL_RCCEx_PeriphCLKConfig+0x6f8>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ab5e:	488f      	ldr	r0, [pc, #572]	; (800ad9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ab60:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800ab64:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800ab68:	430a      	orrs	r2, r1
 800ab6a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ab6e:	039f      	lsls	r7, r3, #14
 800ab70:	d50f      	bpl.n	800ab92 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800ab72:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800ab74:	f431 0280 	bics.w	r2, r1, #4194304	; 0x400000
 800ab78:	d003      	beq.n	800ab82 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 800ab7a:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800ab7e:	f040 8226 	bne.w	800afce <HAL_RCCEx_PeriphCLKConfig+0x6ca>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ab82:	4886      	ldr	r0, [pc, #536]	; (800ad9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ab84:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800ab88:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800ab8c:	430a      	orrs	r2, r1
 800ab8e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ab92:	0658      	lsls	r0, r3, #25
 800ab94:	d50b      	bpl.n	800abae <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800ab96:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ab98:	2903      	cmp	r1, #3
 800ab9a:	f200 8290 	bhi.w	800b0be <HAL_RCCEx_PeriphCLKConfig+0x7ba>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ab9e:	487f      	ldr	r0, [pc, #508]	; (800ad9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800aba0:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800aba4:	f022 0203 	bic.w	r2, r2, #3
 800aba8:	430a      	orrs	r2, r1
 800abaa:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800abae:	0619      	lsls	r1, r3, #24
 800abb0:	d50c      	bpl.n	800abcc <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800abb2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800abb4:	f031 020c 	bics.w	r2, r1, #12
 800abb8:	f040 828f 	bne.w	800b0da <HAL_RCCEx_PeriphCLKConfig+0x7d6>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800abbc:	4877      	ldr	r0, [pc, #476]	; (800ad9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800abbe:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800abc2:	f022 020c 	bic.w	r2, r2, #12
 800abc6:	430a      	orrs	r2, r1
 800abc8:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800abcc:	05da      	lsls	r2, r3, #23
 800abce:	d50c      	bpl.n	800abea <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800abd0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800abd2:	f031 0230 	bics.w	r2, r1, #48	; 0x30
 800abd6:	f040 8288 	bne.w	800b0ea <HAL_RCCEx_PeriphCLKConfig+0x7e6>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800abda:	4870      	ldr	r0, [pc, #448]	; (800ad9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800abdc:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800abe0:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800abe4:	430a      	orrs	r2, r1
 800abe6:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800abea:	059f      	lsls	r7, r3, #22
 800abec:	d50c      	bpl.n	800ac08 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800abee:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800abf0:	f031 02c0 	bics.w	r2, r1, #192	; 0xc0
 800abf4:	f040 8291 	bne.w	800b11a <HAL_RCCEx_PeriphCLKConfig+0x816>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800abf8:	4868      	ldr	r0, [pc, #416]	; (800ad9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800abfa:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800abfe:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800ac02:	430a      	orrs	r2, r1
 800ac04:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ac08:	0558      	lsls	r0, r3, #21
 800ac0a:	d50c      	bpl.n	800ac26 <HAL_RCCEx_PeriphCLKConfig+0x322>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800ac0c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800ac0e:	f431 7240 	bics.w	r2, r1, #768	; 0x300
 800ac12:	f040 828a 	bne.w	800b12a <HAL_RCCEx_PeriphCLKConfig+0x826>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800ac16:	4861      	ldr	r0, [pc, #388]	; (800ad9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ac18:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800ac1c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800ac20:	430a      	orrs	r2, r1
 800ac22:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800ac26:	0519      	lsls	r1, r3, #20
 800ac28:	d50c      	bpl.n	800ac44 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 800ac2a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ac2c:	f431 6240 	bics.w	r2, r1, #3072	; 0xc00
 800ac30:	f040 8283 	bne.w	800b13a <HAL_RCCEx_PeriphCLKConfig+0x836>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800ac34:	4859      	ldr	r0, [pc, #356]	; (800ad9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ac36:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800ac3a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800ac3e:	430a      	orrs	r2, r1
 800ac40:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800ac44:	04da      	lsls	r2, r3, #19
 800ac46:	d50c      	bpl.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0x35e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 800ac48:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ac4a:	f431 5240 	bics.w	r2, r1, #12288	; 0x3000
 800ac4e:	f040 827c 	bne.w	800b14a <HAL_RCCEx_PeriphCLKConfig+0x846>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800ac52:	4852      	ldr	r0, [pc, #328]	; (800ad9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ac54:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800ac58:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800ac5c:	430a      	orrs	r2, r1
 800ac5e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800ac62:	049f      	lsls	r7, r3, #18
 800ac64:	d50c      	bpl.n	800ac80 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 800ac66:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800ac68:	f431 4240 	bics.w	r2, r1, #49152	; 0xc000
 800ac6c:	f040 824d 	bne.w	800b10a <HAL_RCCEx_PeriphCLKConfig+0x806>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800ac70:	484a      	ldr	r0, [pc, #296]	; (800ad9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ac72:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800ac76:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800ac7a:	430a      	orrs	r2, r1
 800ac7c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ac80:	0258      	lsls	r0, r3, #9
 800ac82:	d50c      	bpl.n	800ac9e <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 800ac84:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800ac86:	f031 6280 	bics.w	r2, r1, #67108864	; 0x4000000
 800ac8a:	f040 81dd 	bne.w	800b048 <HAL_RCCEx_PeriphCLKConfig+0x744>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ac8e:	4843      	ldr	r0, [pc, #268]	; (800ad9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ac90:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800ac94:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800ac98:	430a      	orrs	r2, r1
 800ac9a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800ac9e:	0299      	lsls	r1, r3, #10
 800aca0:	d510      	bpl.n	800acc4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 800aca2:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800aca4:	f031 6200 	bics.w	r2, r1, #134217728	; 0x8000000
 800aca8:	f040 81d6 	bne.w	800b058 <HAL_RCCEx_PeriphCLKConfig+0x754>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800acac:	483b      	ldr	r0, [pc, #236]	; (800ad9c <HAL_RCCEx_PeriphCLKConfig+0x498>)

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800acae:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800acb2:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
      pllsaiused = 1;
 800acb6:	bf08      	it	eq
 800acb8:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800acba:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 800acbe:	430a      	orrs	r2, r1
 800acc0:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 800acc4:	f013 0f08 	tst.w	r3, #8
 800acc8:	bf18      	it	ne
 800acca:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800accc:	035a      	lsls	r2, r3, #13
 800acce:	d50c      	bpl.n	800acea <HAL_RCCEx_PeriphCLKConfig+0x3e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800acd0:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800acd2:	f031 7240 	bics.w	r2, r1, #50331648	; 0x3000000
 800acd6:	f040 8210 	bne.w	800b0fa <HAL_RCCEx_PeriphCLKConfig+0x7f6>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800acda:	4830      	ldr	r0, [pc, #192]	; (800ad9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800acdc:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800ace0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800ace4:	430a      	orrs	r2, r1
 800ace6:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800acea:	021f      	lsls	r7, r3, #8
 800acec:	d50d      	bpl.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0x406>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 800acee:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800acf2:	f031 5280 	bics.w	r2, r1, #268435456	; 0x10000000
 800acf6:	f040 81b7 	bne.w	800b068 <HAL_RCCEx_PeriphCLKConfig+0x764>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800acfa:	4828      	ldr	r0, [pc, #160]	; (800ad9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800acfc:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800ad00:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800ad04:	430a      	orrs	r2, r1
 800ad06:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800ad0a:	0158      	lsls	r0, r3, #5
 800ad0c:	d50d      	bpl.n	800ad2a <HAL_RCCEx_PeriphCLKConfig+0x426>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 800ad0e:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800ad12:	f031 5200 	bics.w	r2, r1, #536870912	; 0x20000000
 800ad16:	f040 81b0 	bne.w	800b07a <HAL_RCCEx_PeriphCLKConfig+0x776>

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800ad1a:	4820      	ldr	r0, [pc, #128]	; (800ad9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ad1c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800ad20:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800ad24:	430a      	orrs	r2, r1
 800ad26:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ad2a:	0119      	lsls	r1, r3, #4
 800ad2c:	d50d      	bpl.n	800ad4a <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800ad2e:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800ad32:	f031 7200 	bics.w	r2, r1, #33554432	; 0x2000000
 800ad36:	f040 81b1 	bne.w	800b09c <HAL_RCCEx_PeriphCLKConfig+0x798>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ad3a:	4818      	ldr	r0, [pc, #96]	; (800ad9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ad3c:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800ad40:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800ad44:	430a      	orrs	r2, r1
 800ad46:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800ad4a:	00da      	lsls	r2, r3, #3
 800ad4c:	d50d      	bpl.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0x466>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 800ad4e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800ad52:	f032 6380 	bics.w	r3, r2, #67108864	; 0x4000000
 800ad56:	f040 81aa 	bne.w	800b0ae <HAL_RCCEx_PeriphCLKConfig+0x7aa>

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800ad5a:	4910      	ldr	r1, [pc, #64]	; (800ad9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ad5c:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 800ad60:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ad64:	4313      	orrs	r3, r2
 800ad66:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800ad6a:	2e01      	cmp	r6, #1
 800ad6c:	f000 80a9 	beq.w	800aec2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 800ad70:	6823      	ldr	r3, [r4, #0]
 800ad72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad76:	f000 80a4 	beq.w	800aec2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800ad7a:	2d01      	cmp	r5, #1
 800ad7c:	d003      	beq.n	800ad86 <HAL_RCCEx_PeriphCLKConfig+0x482>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800ad7e:	2000      	movs	r0, #0
}
 800ad80:	b003      	add	sp, #12
 800ad82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 800ad86:	4b05      	ldr	r3, [pc, #20]	; (800ad9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ad88:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ad8a:	461d      	mov	r5, r3
    __HAL_RCC_PLLSAI_DISABLE();
 800ad8c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800ad90:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800ad92:	f7fa fce3 	bl	800575c <HAL_GetTick>
 800ad96:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ad98:	e007      	b.n	800adaa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800ad9a:	bf00      	nop
 800ad9c:	40023800 	.word	0x40023800
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800ada0:	f7fa fcdc 	bl	800575c <HAL_GetTick>
 800ada4:	1b80      	subs	r0, r0, r6
 800ada6:	2864      	cmp	r0, #100	; 0x64
 800ada8:	d87c      	bhi.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800adaa:	682b      	ldr	r3, [r5, #0]
 800adac:	009f      	lsls	r7, r3, #2
 800adae:	d4f7      	bmi.n	800ada0 <HAL_RCCEx_PeriphCLKConfig+0x49c>
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 800adb0:	6963      	ldr	r3, [r4, #20]
 800adb2:	3b32      	subs	r3, #50	; 0x32
 800adb4:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800adb8:	d904      	bls.n	800adc4 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
 800adba:	f240 2146 	movw	r1, #582	; 0x246
 800adbe:	48b3      	ldr	r0, [pc, #716]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800adc0:	f7f8 f922 	bl	8003008 <assert_failed>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800adc4:	6823      	ldr	r3, [r4, #0]
 800adc6:	031d      	lsls	r5, r3, #12
 800adc8:	d501      	bpl.n	800adce <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800adca:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800adcc:	b11a      	cbz	r2, 800add6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800adce:	02d8      	lsls	r0, r3, #11
 800add0:	d526      	bpl.n	800ae20 <HAL_RCCEx_PeriphCLKConfig+0x51c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800add2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800add4:	bb22      	cbnz	r2, 800ae20 <HAL_RCCEx_PeriphCLKConfig+0x51c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 800add6:	69a3      	ldr	r3, [r4, #24]
 800add8:	3b02      	subs	r3, #2
 800adda:	2b0d      	cmp	r3, #13
 800addc:	f200 8259 	bhi.w	800b292 <HAL_RCCEx_PeriphCLKConfig+0x98e>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 800ade0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ade2:	1e59      	subs	r1, r3, #1
 800ade4:	291f      	cmp	r1, #31
 800ade6:	f200 824c 	bhi.w	800b282 <HAL_RCCEx_PeriphCLKConfig+0x97e>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800adea:	4aa9      	ldr	r2, [pc, #676]	; (800b090 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800adec:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800adee:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800adf2:	f8d2 6088 	ldr.w	r6, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800adf6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800adfa:	69a0      	ldr	r0, [r4, #24]
 800adfc:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 800ae00:	4333      	orrs	r3, r6
 800ae02:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800ae06:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800ae0a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800ae0e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800ae12:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800ae16:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800ae1a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800ae1e:	6823      	ldr	r3, [r4, #0]
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800ae20:	0299      	lsls	r1, r3, #10
 800ae22:	d504      	bpl.n	800ae2e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800ae24:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800ae26:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 800ae2a:	f000 8215 	beq.w	800b258 <HAL_RCCEx_PeriphCLKConfig+0x954>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800ae2e:	071a      	lsls	r2, r3, #28
 800ae30:	d526      	bpl.n	800ae80 <HAL_RCCEx_PeriphCLKConfig+0x57c>
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 800ae32:	69e3      	ldr	r3, [r4, #28]
 800ae34:	3b02      	subs	r3, #2
 800ae36:	2b05      	cmp	r3, #5
 800ae38:	d904      	bls.n	800ae44 <HAL_RCCEx_PeriphCLKConfig+0x540>
 800ae3a:	f240 2171 	movw	r1, #625	; 0x271
 800ae3e:	4893      	ldr	r0, [pc, #588]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800ae40:	f7f8 f8e2 	bl	8003008 <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 800ae44:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800ae46:	f430 3340 	bics.w	r3, r0, #196608	; 0x30000
 800ae4a:	f040 8228 	bne.w	800b29e <HAL_RCCEx_PeriphCLKConfig+0x99a>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ae4e:	4a90      	ldr	r2, [pc, #576]	; (800b090 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800ae50:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ae52:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800ae56:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800ae5a:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800ae5e:	69e4      	ldr	r4, [r4, #28]
 800ae60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ae64:	430b      	orrs	r3, r1
 800ae66:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800ae6a:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
 800ae6e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800ae72:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800ae76:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800ae7a:	4303      	orrs	r3, r0
 800ae7c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 800ae80:	4b83      	ldr	r3, [pc, #524]	; (800b090 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800ae82:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ae84:	461c      	mov	r4, r3
    __HAL_RCC_PLLSAI_ENABLE();
 800ae86:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800ae8a:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800ae8c:	f7fa fc66 	bl	800575c <HAL_GetTick>
 800ae90:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ae92:	6823      	ldr	r3, [r4, #0]
 800ae94:	009b      	lsls	r3, r3, #2
 800ae96:	f53f af72 	bmi.w	800ad7e <HAL_RCCEx_PeriphCLKConfig+0x47a>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800ae9a:	f7fa fc5f 	bl	800575c <HAL_GetTick>
 800ae9e:	1b40      	subs	r0, r0, r5
 800aea0:	2864      	cmp	r0, #100	; 0x64
 800aea2:	d9f6      	bls.n	800ae92 <HAL_RCCEx_PeriphCLKConfig+0x58e>
        return HAL_TIMEOUT;
 800aea4:	2003      	movs	r0, #3
}
 800aea6:	b003      	add	sp, #12
 800aea8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800aeac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800aeb0:	4b78      	ldr	r3, [pc, #480]	; (800b094 <HAL_RCCEx_PeriphCLKConfig+0x790>)
 800aeb2:	429a      	cmp	r2, r3
 800aeb4:	f43f adbb 	beq.w	800aa2e <HAL_RCCEx_PeriphCLKConfig+0x12a>
 800aeb8:	21b9      	movs	r1, #185	; 0xb9
 800aeba:	4874      	ldr	r0, [pc, #464]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800aebc:	f7f8 f8a4 	bl	8003008 <assert_failed>
 800aec0:	e5b5      	b.n	800aa2e <HAL_RCCEx_PeriphCLKConfig+0x12a>
    __HAL_RCC_PLLI2S_DISABLE();
 800aec2:	4b73      	ldr	r3, [pc, #460]	; (800b090 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800aec4:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800aec6:	461e      	mov	r6, r3
    __HAL_RCC_PLLI2S_DISABLE();
 800aec8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800aecc:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800aece:	f7fa fc45 	bl	800575c <HAL_GetTick>
 800aed2:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800aed4:	e004      	b.n	800aee0 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800aed6:	f7fa fc41 	bl	800575c <HAL_GetTick>
 800aeda:	1bc0      	subs	r0, r0, r7
 800aedc:	2864      	cmp	r0, #100	; 0x64
 800aede:	d8e1      	bhi.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800aee0:	6833      	ldr	r3, [r6, #0]
 800aee2:	011b      	lsls	r3, r3, #4
 800aee4:	d4f7      	bmi.n	800aed6 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 800aee6:	6863      	ldr	r3, [r4, #4]
 800aee8:	3b32      	subs	r3, #50	; 0x32
 800aeea:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800aeee:	f200 80ee 	bhi.w	800b0ce <HAL_RCCEx_PeriphCLKConfig+0x7ca>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800aef2:	6823      	ldr	r3, [r4, #0]
 800aef4:	07df      	lsls	r7, r3, #31
 800aef6:	d503      	bpl.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 800aef8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800aefa:	2a00      	cmp	r2, #0
 800aefc:	f000 8150 	beq.w	800b1a0 <HAL_RCCEx_PeriphCLKConfig+0x89c>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800af00:	031e      	lsls	r6, r3, #12
 800af02:	d504      	bpl.n	800af0e <HAL_RCCEx_PeriphCLKConfig+0x60a>
 800af04:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800af06:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800af0a:	f000 8126 	beq.w	800b15a <HAL_RCCEx_PeriphCLKConfig+0x856>
 800af0e:	02d8      	lsls	r0, r3, #11
 800af10:	d504      	bpl.n	800af1c <HAL_RCCEx_PeriphCLKConfig+0x618>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800af12:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800af14:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800af18:	f000 811f 	beq.w	800b15a <HAL_RCCEx_PeriphCLKConfig+0x856>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800af1c:	01d9      	lsls	r1, r3, #7
 800af1e:	d514      	bpl.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0x646>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800af20:	6927      	ldr	r7, [r4, #16]
 800af22:	2f03      	cmp	r7, #3
 800af24:	f200 8175 	bhi.w	800b212 <HAL_RCCEx_PeriphCLKConfig+0x90e>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800af28:	4959      	ldr	r1, [pc, #356]	; (800b090 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800af2a:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800af2c:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800af30:	f8d1 6084 	ldr.w	r6, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800af34:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800af38:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 800af3c:	4332      	orrs	r2, r6
 800af3e:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800af42:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800af46:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800af4a:	019a      	lsls	r2, r3, #6
 800af4c:	d51a      	bpl.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x680>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800af4e:	6923      	ldr	r3, [r4, #16]
 800af50:	2b03      	cmp	r3, #3
 800af52:	f200 8173 	bhi.w	800b23c <HAL_RCCEx_PeriphCLKConfig+0x938>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800af56:	68a3      	ldr	r3, [r4, #8]
 800af58:	3b02      	subs	r3, #2
 800af5a:	2b05      	cmp	r3, #5
 800af5c:	f200 8168 	bhi.w	800b230 <HAL_RCCEx_PeriphCLKConfig+0x92c>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800af60:	68e2      	ldr	r2, [r4, #12]
 800af62:	1e93      	subs	r3, r2, #2
 800af64:	2b0d      	cmp	r3, #13
 800af66:	f200 815c 	bhi.w	800b222 <HAL_RCCEx_PeriphCLKConfig+0x91e>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800af6a:	6923      	ldr	r3, [r4, #16]
 800af6c:	6861      	ldr	r1, [r4, #4]
 800af6e:	041b      	lsls	r3, r3, #16
 800af70:	68a0      	ldr	r0, [r4, #8]
 800af72:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800af76:	4946      	ldr	r1, [pc, #280]	; (800b090 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800af78:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 800af7c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800af80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800af84:	4b42      	ldr	r3, [pc, #264]	; (800b090 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800af86:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800af88:	461e      	mov	r6, r3
    __HAL_RCC_PLLI2S_ENABLE();
 800af8a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800af8e:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800af90:	f7fa fbe4 	bl	800575c <HAL_GetTick>
 800af94:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800af96:	e004      	b.n	800afa2 <HAL_RCCEx_PeriphCLKConfig+0x69e>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800af98:	f7fa fbe0 	bl	800575c <HAL_GetTick>
 800af9c:	1bc0      	subs	r0, r0, r7
 800af9e:	2864      	cmp	r0, #100	; 0x64
 800afa0:	d880      	bhi.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800afa2:	6833      	ldr	r3, [r6, #0]
 800afa4:	011b      	lsls	r3, r3, #4
 800afa6:	d5f7      	bpl.n	800af98 <HAL_RCCEx_PeriphCLKConfig+0x694>
 800afa8:	e6e7      	b.n	800ad7a <HAL_RCCEx_PeriphCLKConfig+0x476>
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800afaa:	2174      	movs	r1, #116	; 0x74
 800afac:	4837      	ldr	r0, [pc, #220]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800afae:	f7f8 f82b 	bl	8003008 <assert_failed>
 800afb2:	6823      	ldr	r3, [r4, #0]
 800afb4:	e4b0      	b.n	800a918 <HAL_RCCEx_PeriphCLKConfig+0x14>
  uint32_t pllsaiused = 0;
 800afb6:	2500      	movs	r5, #0
      plli2sused = 1;
 800afb8:	2601      	movs	r6, #1
 800afba:	e4d8      	b.n	800a96e <HAL_RCCEx_PeriphCLKConfig+0x6a>
      plli2sused = 1;
 800afbc:	2601      	movs	r6, #1
 800afbe:	e4ed      	b.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0x98>
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800afc0:	217a      	movs	r1, #122	; 0x7a
 800afc2:	4832      	ldr	r0, [pc, #200]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800afc4:	f7f8 f820 	bl	8003008 <assert_failed>
 800afc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800afca:	6823      	ldr	r3, [r4, #0]
 800afcc:	e4ac      	b.n	800a928 <HAL_RCCEx_PeriphCLKConfig+0x24>
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800afce:	f240 111b 	movw	r1, #283	; 0x11b
 800afd2:	482e      	ldr	r0, [pc, #184]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800afd4:	f7f8 f818 	bl	8003008 <assert_failed>
 800afd8:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800afda:	6823      	ldr	r3, [r4, #0]
 800afdc:	e5d1      	b.n	800ab82 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800afde:	21fd      	movs	r1, #253	; 0xfd
 800afe0:	482a      	ldr	r0, [pc, #168]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800afe2:	f7f8 f811 	bl	8003008 <assert_failed>
 800afe6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800afe8:	6823      	ldr	r3, [r4, #0]
 800afea:	e594      	b.n	800ab16 <HAL_RCCEx_PeriphCLKConfig+0x212>
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800afec:	f240 1107 	movw	r1, #263	; 0x107
 800aff0:	4826      	ldr	r0, [pc, #152]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800aff2:	f7f8 f809 	bl	8003008 <assert_failed>
 800aff6:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800aff8:	6823      	ldr	r3, [r4, #0]
 800affa:	e59e      	b.n	800ab3a <HAL_RCCEx_PeriphCLKConfig+0x236>
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800affc:	f240 1111 	movw	r1, #273	; 0x111
 800b000:	4822      	ldr	r0, [pc, #136]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800b002:	f7f8 f801 	bl	8003008 <assert_failed>
 800b006:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800b008:	6823      	ldr	r3, [r4, #0]
 800b00a:	e5a8      	b.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0x25a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b00c:	4820      	ldr	r0, [pc, #128]	; (800b090 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800b00e:	4922      	ldr	r1, [pc, #136]	; (800b098 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800b010:	6882      	ldr	r2, [r0, #8]
 800b012:	4019      	ands	r1, r3
 800b014:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800b018:	430a      	orrs	r2, r1
 800b01a:	6082      	str	r2, [r0, #8]
 800b01c:	e557      	b.n	800aace <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 800b01e:	219e      	movs	r1, #158	; 0x9e
 800b020:	481a      	ldr	r0, [pc, #104]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800b022:	f7f7 fff1 	bl	8003008 <assert_failed>
 800b026:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b028:	6823      	ldr	r3, [r4, #0]
 800b02a:	e4a7      	b.n	800a97c <HAL_RCCEx_PeriphCLKConfig+0x78>
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800b02c:	218a      	movs	r1, #138	; 0x8a
 800b02e:	4817      	ldr	r0, [pc, #92]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800b030:	f7f7 ffea 	bl	8003008 <assert_failed>
 800b034:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800b036:	6823      	ldr	r3, [r4, #0]
 800b038:	e489      	b.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 800b03a:	21f3      	movs	r1, #243	; 0xf3
 800b03c:	4813      	ldr	r0, [pc, #76]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800b03e:	f7f7 ffe3 	bl	8003008 <assert_failed>
 800b042:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 800b044:	6823      	ldr	r3, [r4, #0]
 800b046:	e550      	b.n	800aaea <HAL_RCCEx_PeriphCLKConfig+0x1e6>
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 800b048:	f240 1175 	movw	r1, #373	; 0x175
 800b04c:	480f      	ldr	r0, [pc, #60]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800b04e:	f7f7 ffdb 	bl	8003008 <assert_failed>
 800b052:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800b054:	6823      	ldr	r3, [r4, #0]
 800b056:	e61a      	b.n	800ac8e <HAL_RCCEx_PeriphCLKConfig+0x38a>
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 800b058:	f240 117f 	movw	r1, #383	; 0x17f
 800b05c:	480b      	ldr	r0, [pc, #44]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800b05e:	f7f7 ffd3 	bl	8003008 <assert_failed>
 800b062:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800b064:	6823      	ldr	r3, [r4, #0]
 800b066:	e621      	b.n	800acac <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 800b068:	f240 11a1 	movw	r1, #417	; 0x1a1
 800b06c:	4807      	ldr	r0, [pc, #28]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800b06e:	f7f7 ffcb 	bl	8003008 <assert_failed>
 800b072:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800b076:	6823      	ldr	r3, [r4, #0]
 800b078:	e63f      	b.n	800acfa <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 800b07a:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 800b07e:	4803      	ldr	r0, [pc, #12]	; (800b08c <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800b080:	f7f7 ffc2 	bl	8003008 <assert_failed>
 800b084:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800b088:	6823      	ldr	r3, [r4, #0]
 800b08a:	e646      	b.n	800ad1a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800b08c:	080269d8 	.word	0x080269d8
 800b090:	40023800 	.word	0x40023800
 800b094:	001c0300 	.word	0x001c0300
 800b098:	0ffffcff 	.word	0x0ffffcff
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800b09c:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 800b0a0:	4886      	ldr	r0, [pc, #536]	; (800b2bc <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b0a2:	f7f7 ffb1 	bl	8003008 <assert_failed>
 800b0a6:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800b0aa:	6823      	ldr	r3, [r4, #0]
 800b0ac:	e645      	b.n	800ad3a <HAL_RCCEx_PeriphCLKConfig+0x436>
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 800b0ae:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800b0b2:	4882      	ldr	r0, [pc, #520]	; (800b2bc <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b0b4:	f7f7 ffa8 	bl	8003008 <assert_failed>
 800b0b8:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800b0bc:	e64d      	b.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x456>
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800b0be:	f240 1125 	movw	r1, #293	; 0x125
 800b0c2:	487e      	ldr	r0, [pc, #504]	; (800b2bc <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b0c4:	f7f7 ffa0 	bl	8003008 <assert_failed>
 800b0c8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b0ca:	6823      	ldr	r3, [r4, #0]
 800b0cc:	e567      	b.n	800ab9e <HAL_RCCEx_PeriphCLKConfig+0x29a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 800b0ce:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 800b0d2:	487a      	ldr	r0, [pc, #488]	; (800b2bc <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b0d4:	f7f7 ff98 	bl	8003008 <assert_failed>
 800b0d8:	e70b      	b.n	800aef2 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800b0da:	f240 112f 	movw	r1, #303	; 0x12f
 800b0de:	4877      	ldr	r0, [pc, #476]	; (800b2bc <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b0e0:	f7f7 ff92 	bl	8003008 <assert_failed>
 800b0e4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b0e6:	6823      	ldr	r3, [r4, #0]
 800b0e8:	e568      	b.n	800abbc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800b0ea:	f240 1139 	movw	r1, #313	; 0x139
 800b0ee:	4873      	ldr	r0, [pc, #460]	; (800b2bc <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b0f0:	f7f7 ff8a 	bl	8003008 <assert_failed>
 800b0f4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800b0f6:	6823      	ldr	r3, [r4, #0]
 800b0f8:	e56f      	b.n	800abda <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800b0fa:	f240 1197 	movw	r1, #407	; 0x197
 800b0fe:	486f      	ldr	r0, [pc, #444]	; (800b2bc <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b100:	f7f7 ff82 	bl	8003008 <assert_failed>
 800b104:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800b106:	6823      	ldr	r3, [r4, #0]
 800b108:	e5e7      	b.n	800acda <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 800b10a:	f240 116b 	movw	r1, #363	; 0x16b
 800b10e:	486b      	ldr	r0, [pc, #428]	; (800b2bc <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b110:	f7f7 ff7a 	bl	8003008 <assert_failed>
 800b114:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800b116:	6823      	ldr	r3, [r4, #0]
 800b118:	e5aa      	b.n	800ac70 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800b11a:	f240 1143 	movw	r1, #323	; 0x143
 800b11e:	4867      	ldr	r0, [pc, #412]	; (800b2bc <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b120:	f7f7 ff72 	bl	8003008 <assert_failed>
 800b124:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800b126:	6823      	ldr	r3, [r4, #0]
 800b128:	e566      	b.n	800abf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800b12a:	f240 114d 	movw	r1, #333	; 0x14d
 800b12e:	4863      	ldr	r0, [pc, #396]	; (800b2bc <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b130:	f7f7 ff6a 	bl	8003008 <assert_failed>
 800b134:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800b136:	6823      	ldr	r3, [r4, #0]
 800b138:	e56d      	b.n	800ac16 <HAL_RCCEx_PeriphCLKConfig+0x312>
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 800b13a:	f240 1157 	movw	r1, #343	; 0x157
 800b13e:	485f      	ldr	r0, [pc, #380]	; (800b2bc <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b140:	f7f7 ff62 	bl	8003008 <assert_failed>
 800b144:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b146:	6823      	ldr	r3, [r4, #0]
 800b148:	e574      	b.n	800ac34 <HAL_RCCEx_PeriphCLKConfig+0x330>
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 800b14a:	f240 1161 	movw	r1, #353	; 0x161
 800b14e:	485b      	ldr	r0, [pc, #364]	; (800b2bc <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b150:	f7f7 ff5a 	bl	8003008 <assert_failed>
 800b154:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b156:	6823      	ldr	r3, [r4, #0]
 800b158:	e57b      	b.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800b15a:	68e3      	ldr	r3, [r4, #12]
 800b15c:	3b02      	subs	r3, #2
 800b15e:	2b0d      	cmp	r3, #13
 800b160:	d851      	bhi.n	800b206 <HAL_RCCEx_PeriphCLKConfig+0x902>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 800b162:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b164:	1e5e      	subs	r6, r3, #1
 800b166:	2e1f      	cmp	r6, #31
 800b168:	d845      	bhi.n	800b1f6 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b16a:	4a55      	ldr	r2, [pc, #340]	; (800b2c0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800b16c:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b16e:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b172:	f8d2 7084 	ldr.w	r7, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800b176:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b17a:	68e1      	ldr	r1, [r4, #12]
 800b17c:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 800b180:	433b      	orrs	r3, r7
 800b182:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800b186:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800b18a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800b18e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800b192:	f023 031f 	bic.w	r3, r3, #31
 800b196:	4333      	orrs	r3, r6
 800b198:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800b19c:	6823      	ldr	r3, [r4, #0]
 800b19e:	e6bd      	b.n	800af1c <HAL_RCCEx_PeriphCLKConfig+0x618>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800b1a0:	68a7      	ldr	r7, [r4, #8]
 800b1a2:	1eba      	subs	r2, r7, #2
 800b1a4:	2a05      	cmp	r2, #5
 800b1a6:	d84f      	bhi.n	800b248 <HAL_RCCEx_PeriphCLKConfig+0x944>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b1a8:	4945      	ldr	r1, [pc, #276]	; (800b2c0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800b1aa:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b1ac:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b1b0:	f8d1 6084 	ldr.w	r6, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800b1b4:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800b1b8:	f006 6670 	and.w	r6, r6, #251658240	; 0xf000000
 800b1bc:	4332      	orrs	r2, r6
 800b1be:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800b1c2:	ea42 7207 	orr.w	r2, r2, r7, lsl #28
 800b1c6:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
 800b1ca:	e699      	b.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b1cc:	4617      	mov	r7, r2
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b1ce:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800b1d2:	f7fa fac3 	bl	800575c <HAL_GetTick>
 800b1d6:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b1d8:	e006      	b.n	800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b1da:	f7fa fabf 	bl	800575c <HAL_GetTick>
 800b1de:	eba0 0009 	sub.w	r0, r0, r9
 800b1e2:	4540      	cmp	r0, r8
 800b1e4:	f63f ae5e 	bhi.w	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b1e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b1ea:	079b      	lsls	r3, r3, #30
 800b1ec:	d5f5      	bpl.n	800b1da <HAL_RCCEx_PeriphCLKConfig+0x8d6>
 800b1ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b1f0:	f403 7040 	and.w	r0, r3, #768	; 0x300
 800b1f4:	e462      	b.n	800aabc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 800b1f6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800b1fa:	4830      	ldr	r0, [pc, #192]	; (800b2bc <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b1fc:	f7f7 ff04 	bl	8003008 <assert_failed>
 800b200:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b202:	1e5e      	subs	r6, r3, #1
 800b204:	e7b1      	b.n	800b16a <HAL_RCCEx_PeriphCLKConfig+0x866>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800b206:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 800b20a:	482c      	ldr	r0, [pc, #176]	; (800b2bc <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b20c:	f7f7 fefc 	bl	8003008 <assert_failed>
 800b210:	e7a7      	b.n	800b162 <HAL_RCCEx_PeriphCLKConfig+0x85e>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800b212:	f240 2107 	movw	r1, #519	; 0x207
 800b216:	4829      	ldr	r0, [pc, #164]	; (800b2bc <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b218:	f7f7 fef6 	bl	8003008 <assert_failed>
 800b21c:	6927      	ldr	r7, [r4, #16]
 800b21e:	6823      	ldr	r3, [r4, #0]
 800b220:	e682      	b.n	800af28 <HAL_RCCEx_PeriphCLKConfig+0x624>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800b222:	f44f 7106 	mov.w	r1, #536	; 0x218
 800b226:	4825      	ldr	r0, [pc, #148]	; (800b2bc <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b228:	f7f7 feee 	bl	8003008 <assert_failed>
 800b22c:	68e2      	ldr	r2, [r4, #12]
 800b22e:	e69c      	b.n	800af6a <HAL_RCCEx_PeriphCLKConfig+0x666>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800b230:	f240 2117 	movw	r1, #535	; 0x217
 800b234:	4821      	ldr	r0, [pc, #132]	; (800b2bc <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b236:	f7f7 fee7 	bl	8003008 <assert_failed>
 800b23a:	e691      	b.n	800af60 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800b23c:	f240 2116 	movw	r1, #534	; 0x216
 800b240:	481e      	ldr	r0, [pc, #120]	; (800b2bc <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b242:	f7f7 fee1 	bl	8003008 <assert_failed>
 800b246:	e686      	b.n	800af56 <HAL_RCCEx_PeriphCLKConfig+0x652>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800b248:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 800b24c:	481b      	ldr	r0, [pc, #108]	; (800b2bc <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b24e:	f7f7 fedb 	bl	8003008 <assert_failed>
 800b252:	68a7      	ldr	r7, [r4, #8]
 800b254:	6823      	ldr	r3, [r4, #0]
 800b256:	e7a7      	b.n	800b1a8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 800b258:	6a26      	ldr	r6, [r4, #32]
 800b25a:	2e03      	cmp	r6, #3
 800b25c:	d826      	bhi.n	800b2ac <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b25e:	4918      	ldr	r1, [pc, #96]	; (800b2c0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800b260:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b262:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b266:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800b26a:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800b26e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800b272:	4302      	orrs	r2, r0
 800b274:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 800b278:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800b27c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
 800b280:	e5d5      	b.n	800ae2e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 800b282:	f240 214f 	movw	r1, #591	; 0x24f
 800b286:	480d      	ldr	r0, [pc, #52]	; (800b2bc <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b288:	f7f7 febe 	bl	8003008 <assert_failed>
 800b28c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b28e:	1e59      	subs	r1, r3, #1
 800b290:	e5ab      	b.n	800adea <HAL_RCCEx_PeriphCLKConfig+0x4e6>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 800b292:	f240 214d 	movw	r1, #589	; 0x24d
 800b296:	4809      	ldr	r0, [pc, #36]	; (800b2bc <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b298:	f7f7 feb6 	bl	8003008 <assert_failed>
 800b29c:	e5a0      	b.n	800ade0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 800b29e:	4807      	ldr	r0, [pc, #28]	; (800b2bc <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b2a0:	f240 2172 	movw	r1, #626	; 0x272
 800b2a4:	f7f7 feb0 	bl	8003008 <assert_failed>
 800b2a8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800b2aa:	e5d0      	b.n	800ae4e <HAL_RCCEx_PeriphCLKConfig+0x54a>
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 800b2ac:	f240 2162 	movw	r1, #610	; 0x262
 800b2b0:	4802      	ldr	r0, [pc, #8]	; (800b2bc <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b2b2:	f7f7 fea9 	bl	8003008 <assert_failed>
 800b2b6:	6a26      	ldr	r6, [r4, #32]
 800b2b8:	6823      	ldr	r3, [r4, #0]
 800b2ba:	e7d0      	b.n	800b25e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800b2bc:	080269d8 	.word	0x080269d8
 800b2c0:	40023800 	.word	0x40023800

0800b2c4 <HAL_RNG_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800b2c4:	b1f8      	cbz	r0, 800b306 <HAL_RNG_Init+0x42>
  {
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
 800b2c6:	6802      	ldr	r2, [r0, #0]
{
 800b2c8:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
 800b2ca:	4b10      	ldr	r3, [pc, #64]	; (800b30c <HAL_RNG_Init+0x48>)
 800b2cc:	4604      	mov	r4, r0
 800b2ce:	429a      	cmp	r2, r3
 800b2d0:	d003      	beq.n	800b2da <HAL_RNG_Init+0x16>
 800b2d2:	21a3      	movs	r1, #163	; 0xa3
 800b2d4:	480e      	ldr	r0, [pc, #56]	; (800b310 <HAL_RNG_Init+0x4c>)
 800b2d6:	f7f7 fe97 	bl	8003008 <assert_failed>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800b2da:	7963      	ldrb	r3, [r4, #5]
 800b2dc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b2e0:	b163      	cbz	r3, 800b2fc <HAL_RNG_Init+0x38>
  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800b2e2:	6821      	ldr	r1, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 800b2e4:	2302      	movs	r3, #2

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800b2e6:	2200      	movs	r2, #0
  hrng->State = HAL_RNG_STATE_READY;
 800b2e8:	2501      	movs	r5, #1
  hrng->State = HAL_RNG_STATE_BUSY;
 800b2ea:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 800b2ec:	680b      	ldr	r3, [r1, #0]

  /* Return function status */
  return HAL_OK;
 800b2ee:	4610      	mov	r0, r2
  __HAL_RNG_ENABLE(hrng);
 800b2f0:	f043 0304 	orr.w	r3, r3, #4
 800b2f4:	600b      	str	r3, [r1, #0]
  hrng->State = HAL_RNG_STATE_READY;
 800b2f6:	7165      	strb	r5, [r4, #5]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800b2f8:	60a2      	str	r2, [r4, #8]
}
 800b2fa:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 800b2fc:	7122      	strb	r2, [r4, #4]
    HAL_RNG_MspInit(hrng);
 800b2fe:	4620      	mov	r0, r4
 800b300:	f7f8 feb2 	bl	8004068 <HAL_RNG_MspInit>
 800b304:	e7ed      	b.n	800b2e2 <HAL_RNG_Init+0x1e>
    return HAL_ERROR;
 800b306:	2001      	movs	r0, #1
}
 800b308:	4770      	bx	lr
 800b30a:	bf00      	nop
 800b30c:	50060800 	.word	0x50060800
 800b310:	08026a14 	.word	0x08026a14

0800b314 <SPI_WaitFifoStateUntilTimeout.part.1>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800b314:	4603      	mov	r3, r0
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b316:	e9d0 2000 	ldrd	r2, r0, [r0]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b31a:	6851      	ldr	r1, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b31c:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b320:	f021 01e0 	bic.w	r1, r1, #224	; 0xe0
 800b324:	6051      	str	r1, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b326:	d013      	beq.n	800b350 <SPI_WaitFifoStateUntilTimeout.part.1+0x3c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b328:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800b32a:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800b32e:	d107      	bne.n	800b340 <SPI_WaitFifoStateUntilTimeout.part.1+0x2c>
        {
          SPI_RESET_CRC(hspi);
 800b330:	6811      	ldr	r1, [r2, #0]
 800b332:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800b336:	6011      	str	r1, [r2, #0]
 800b338:	6811      	ldr	r1, [r2, #0]
 800b33a:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 800b33e:	6011      	str	r1, [r2, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b340:	2101      	movs	r1, #1

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b342:	2200      	movs	r2, #0
      }
    }
  }

  return HAL_OK;
}
 800b344:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 800b346:	f883 105d 	strb.w	r1, [r3, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800b34a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
}
 800b34e:	4770      	bx	lr
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b350:	6899      	ldr	r1, [r3, #8]
 800b352:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800b356:	d002      	beq.n	800b35e <SPI_WaitFifoStateUntilTimeout.part.1+0x4a>
 800b358:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b35c:	d1e4      	bne.n	800b328 <SPI_WaitFifoStateUntilTimeout.part.1+0x14>
          __HAL_SPI_DISABLE(hspi);
 800b35e:	6811      	ldr	r1, [r2, #0]
 800b360:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800b364:	6011      	str	r1, [r2, #0]
 800b366:	e7df      	b.n	800b328 <SPI_WaitFifoStateUntilTimeout.part.1+0x14>

0800b368 <SPI_WaitFlagStateUntilTimeout.constprop.9>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800b368:	b570      	push	{r4, r5, r6, lr}
 800b36a:	4605      	mov	r5, r0
 800b36c:	460c      	mov	r4, r1
 800b36e:	4616      	mov	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b370:	682b      	ldr	r3, [r5, #0]
 800b372:	e001      	b.n	800b378 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x10>
    if (Timeout != HAL_MAX_DELAY)
 800b374:	1c62      	adds	r2, r4, #1
 800b376:	d104      	bne.n	800b382 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x1a>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b378:	6898      	ldr	r0, [r3, #8]
 800b37a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b37e:	d1f9      	bne.n	800b374 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
}
 800b380:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800b382:	f7fa f9eb 	bl	800575c <HAL_GetTick>
 800b386:	1b80      	subs	r0, r0, r6
 800b388:	4284      	cmp	r4, r0
 800b38a:	d8f1      	bhi.n	800b370 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x8>
 800b38c:	4628      	mov	r0, r5
}
 800b38e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b392:	f7ff bfbf 	b.w	800b314 <SPI_WaitFifoStateUntilTimeout.part.1>
 800b396:	bf00      	nop

0800b398 <SPI_WaitFifoStateUntilTimeout.constprop.10>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800b398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b39a:	4606      	mov	r6, r0
 800b39c:	460c      	mov	r4, r1
 800b39e:	4615      	mov	r5, r2
 800b3a0:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((hspi->Instance->SR & Fifo) != State)
 800b3a2:	6831      	ldr	r1, [r6, #0]
 800b3a4:	e005      	b.n	800b3b2 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x1a>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b3a6:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 800b3aa:	d100      	bne.n	800b3ae <SPI_WaitFifoStateUntilTimeout.constprop.10+0x16>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800b3ac:	7b0a      	ldrb	r2, [r1, #12]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b3ae:	1c6b      	adds	r3, r5, #1
 800b3b0:	d103      	bne.n	800b3ba <SPI_WaitFifoStateUntilTimeout.constprop.10+0x22>
  while ((hspi->Instance->SR & Fifo) != State)
 800b3b2:	6888      	ldr	r0, [r1, #8]
 800b3b4:	4020      	ands	r0, r4
 800b3b6:	d1f6      	bne.n	800b3a6 <SPI_WaitFifoStateUntilTimeout.constprop.10+0xe>
      }
    }
  }

  return HAL_OK;
}
 800b3b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800b3ba:	f7fa f9cf 	bl	800575c <HAL_GetTick>
 800b3be:	1bc0      	subs	r0, r0, r7
 800b3c0:	4285      	cmp	r5, r0
 800b3c2:	d8ee      	bhi.n	800b3a2 <SPI_WaitFifoStateUntilTimeout.constprop.10+0xa>
 800b3c4:	4630      	mov	r0, r6
}
 800b3c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b3ca:	f7ff bfa3 	b.w	800b314 <SPI_WaitFifoStateUntilTimeout.part.1>
 800b3ce:	bf00      	nop

0800b3d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b3d0:	b570      	push	{r4, r5, r6, lr}
 800b3d2:	460d      	mov	r5, r1
 800b3d4:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b3d6:	4613      	mov	r3, r2
 800b3d8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800b3dc:	462a      	mov	r2, r5
{
 800b3de:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b3e0:	f7ff ffda 	bl	800b398 <SPI_WaitFifoStateUntilTimeout.constprop.10>
 800b3e4:	b970      	cbnz	r0, 800b404 <SPI_EndRxTxTransaction+0x34>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b3e6:	4632      	mov	r2, r6
 800b3e8:	4629      	mov	r1, r5
 800b3ea:	4620      	mov	r0, r4
 800b3ec:	f7ff ffbc 	bl	800b368 <SPI_WaitFlagStateUntilTimeout.constprop.9>
 800b3f0:	b940      	cbnz	r0, 800b404 <SPI_EndRxTxTransaction+0x34>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b3f2:	4633      	mov	r3, r6
 800b3f4:	462a      	mov	r2, r5
 800b3f6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b3fa:	4620      	mov	r0, r4
 800b3fc:	f7ff ffcc 	bl	800b398 <SPI_WaitFifoStateUntilTimeout.constprop.10>
 800b400:	b900      	cbnz	r0, 800b404 <SPI_EndRxTxTransaction+0x34>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 800b402:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b404:	6e23      	ldr	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800b406:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b408:	f043 0320 	orr.w	r3, r3, #32
 800b40c:	6623      	str	r3, [r4, #96]	; 0x60
}
 800b40e:	bd70      	pop	{r4, r5, r6, pc}

0800b410 <HAL_SPI_Init>:
  if (hspi == NULL)
 800b410:	2800      	cmp	r0, #0
 800b412:	f000 80f9 	beq.w	800b608 <HAL_SPI_Init+0x1f8>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800b416:	6802      	ldr	r2, [r0, #0]
 800b418:	4b94      	ldr	r3, [pc, #592]	; (800b66c <HAL_SPI_Init+0x25c>)
 800b41a:	4995      	ldr	r1, [pc, #596]	; (800b670 <HAL_SPI_Init+0x260>)
 800b41c:	429a      	cmp	r2, r3
 800b41e:	bf18      	it	ne
 800b420:	428a      	cmpne	r2, r1
 800b422:	f501 318c 	add.w	r1, r1, #71680	; 0x11800
 800b426:	bf14      	ite	ne
 800b428:	2301      	movne	r3, #1
 800b42a:	2300      	moveq	r3, #0
{
 800b42c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800b430:	4d90      	ldr	r5, [pc, #576]	; (800b674 <HAL_SPI_Init+0x264>)
 800b432:	4604      	mov	r4, r0
 800b434:	4890      	ldr	r0, [pc, #576]	; (800b678 <HAL_SPI_Init+0x268>)
 800b436:	42aa      	cmp	r2, r5
 800b438:	bf0c      	ite	eq
 800b43a:	2300      	moveq	r3, #0
 800b43c:	f003 0301 	andne.w	r3, r3, #1
 800b440:	4282      	cmp	r2, r0
 800b442:	bf0c      	ite	eq
 800b444:	2300      	moveq	r3, #0
 800b446:	f003 0301 	andne.w	r3, r3, #1
 800b44a:	428a      	cmp	r2, r1
 800b44c:	bf0c      	ite	eq
 800b44e:	2300      	moveq	r3, #0
 800b450:	f003 0301 	andne.w	r3, r3, #1
 800b454:	b11b      	cbz	r3, 800b45e <HAL_SPI_Init+0x4e>
 800b456:	4b89      	ldr	r3, [pc, #548]	; (800b67c <HAL_SPI_Init+0x26c>)
 800b458:	429a      	cmp	r2, r3
 800b45a:	f040 80ee 	bne.w	800b63a <HAL_SPI_Init+0x22a>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800b45e:	6863      	ldr	r3, [r4, #4]
 800b460:	b13b      	cbz	r3, 800b472 <HAL_SPI_Init+0x62>
 800b462:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b466:	d004      	beq.n	800b472 <HAL_SPI_Init+0x62>
 800b468:	f240 1145 	movw	r1, #325	; 0x145
 800b46c:	4884      	ldr	r0, [pc, #528]	; (800b680 <HAL_SPI_Init+0x270>)
 800b46e:	f7f7 fdcb 	bl	8003008 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800b472:	68a3      	ldr	r3, [r4, #8]
 800b474:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800b478:	d003      	beq.n	800b482 <HAL_SPI_Init+0x72>
 800b47a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b47e:	f040 80c5 	bne.w	800b60c <HAL_SPI_Init+0x1fc>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800b482:	68e2      	ldr	r2, [r4, #12]
 800b484:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
 800b488:	f422 7040 	bic.w	r0, r2, #768	; 0x300
 800b48c:	f422 6110 	bic.w	r1, r2, #2304	; 0x900
 800b490:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b494:	bf18      	it	ne
 800b496:	f5b0 6f00 	cmpne.w	r0, #2048	; 0x800
 800b49a:	bf14      	ite	ne
 800b49c:	2301      	movne	r3, #1
 800b49e:	2300      	moveq	r3, #0
 800b4a0:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 800b4a4:	bf0c      	ite	eq
 800b4a6:	2300      	moveq	r3, #0
 800b4a8:	f003 0301 	andne.w	r3, r3, #1
 800b4ac:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b4b0:	bf0c      	ite	eq
 800b4b2:	2300      	moveq	r3, #0
 800b4b4:	f003 0301 	andne.w	r3, r3, #1
 800b4b8:	b12b      	cbz	r3, 800b4c6 <HAL_SPI_Init+0xb6>
 800b4ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b4be:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800b4c2:	f040 80cc 	bne.w	800b65e <HAL_SPI_Init+0x24e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800b4c6:	69a3      	ldr	r3, [r4, #24]
 800b4c8:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 800b4cc:	d003      	beq.n	800b4d6 <HAL_SPI_Init+0xc6>
 800b4ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b4d2:	f040 80a1 	bne.w	800b618 <HAL_SPI_Init+0x208>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800b4d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b4d8:	f033 0308 	bics.w	r3, r3, #8
 800b4dc:	d17f      	bne.n	800b5de <HAL_SPI_Init+0x1ce>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800b4de:	69e3      	ldr	r3, [r4, #28]
 800b4e0:	f023 0318 	bic.w	r3, r3, #24
 800b4e4:	2b20      	cmp	r3, #32
 800b4e6:	d002      	beq.n	800b4ee <HAL_SPI_Init+0xde>
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	f040 80b2 	bne.w	800b652 <HAL_SPI_Init+0x242>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800b4ee:	6a23      	ldr	r3, [r4, #32]
 800b4f0:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800b4f4:	d169      	bne.n	800b5ca <HAL_SPI_Init+0x1ba>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800b4f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4f8:	f033 0210 	bics.w	r2, r3, #16
 800b4fc:	d17b      	bne.n	800b5f6 <HAL_SPI_Init+0x1e6>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b4fe:	b943      	cbnz	r3, 800b512 <HAL_SPI_Init+0x102>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800b500:	6923      	ldr	r3, [r4, #16]
 800b502:	f033 0302 	bics.w	r3, r3, #2
 800b506:	f040 809e 	bne.w	800b646 <HAL_SPI_Init+0x236>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800b50a:	6963      	ldr	r3, [r4, #20]
 800b50c:	2b01      	cmp	r3, #1
 800b50e:	f200 808e 	bhi.w	800b62e <HAL_SPI_Init+0x21e>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b512:	2200      	movs	r2, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 800b514:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b518:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800b51a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d04d      	beq.n	800b5be <HAL_SPI_Init+0x1ae>
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b522:	68e7      	ldr	r7, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800b524:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800b526:	6822      	ldr	r2, [r4, #0]
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b528:	f5b7 6fe0 	cmp.w	r7, #1792	; 0x700
  hspi->State = HAL_SPI_STATE_BUSY;
 800b52c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b530:	f427 6100 	bic.w	r1, r7, #2048	; 0x800
  __HAL_SPI_DISABLE(hspi);
 800b534:	6813      	ldr	r3, [r2, #0]
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b536:	bf94      	ite	ls
 800b538:	f44f 5580 	movls.w	r5, #4096	; 0x1000
 800b53c:	2500      	movhi	r5, #0
  __HAL_SPI_DISABLE(hspi);
 800b53e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b542:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800b546:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b548:	d135      	bne.n	800b5b6 <HAL_SPI_Init+0x1a6>
 800b54a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800b54c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b54e:	b92b      	cbnz	r3, 800b55c <HAL_SPI_Init+0x14c>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b550:	f5b7 6fe0 	cmp.w	r7, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800b554:	bf8c      	ite	hi
 800b556:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800b558:	2301      	movls	r3, #1
 800b55a:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800b55c:	68a1      	ldr	r1, [r4, #8]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b55e:	f04f 0800 	mov.w	r8, #0
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800b562:	6863      	ldr	r3, [r4, #4]
 800b564:	6920      	ldr	r0, [r4, #16]
 800b566:	430b      	orrs	r3, r1
 800b568:	6961      	ldr	r1, [r4, #20]
 800b56a:	4303      	orrs	r3, r0
 800b56c:	430b      	orrs	r3, r1
 800b56e:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 800b572:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800b574:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b576:	ea4f 4c10 	mov.w	ip, r0, lsr #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800b57a:	f400 7e00 	and.w	lr, r0, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800b57e:	430f      	orrs	r7, r1
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800b580:	6a21      	ldr	r1, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800b582:	f00c 0c04 	and.w	ip, ip, #4
  return HAL_OK;
 800b586:	4640      	mov	r0, r8
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800b588:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800b58a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b58c:	430f      	orrs	r7, r1
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800b58e:	ea43 030e 	orr.w	r3, r3, lr
  hspi->State     = HAL_SPI_STATE_READY;
 800b592:	f04f 0e01 	mov.w	lr, #1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800b596:	ea47 070c 	orr.w	r7, r7, ip
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800b59a:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800b59c:	433d      	orrs	r5, r7
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800b59e:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800b5a0:	6055      	str	r5, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b5a2:	69d3      	ldr	r3, [r2, #28]
 800b5a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b5a8:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b5aa:	f8c4 8060 	str.w	r8, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b5ae:	f884 e05d 	strb.w	lr, [r4, #93]	; 0x5d
}
 800b5b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	461e      	mov	r6, r3
 800b5ba:	62a3      	str	r3, [r4, #40]	; 0x28
 800b5bc:	e7c6      	b.n	800b54c <HAL_SPI_Init+0x13c>
    hspi->Lock = HAL_UNLOCKED;
 800b5be:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800b5c2:	4620      	mov	r0, r4
 800b5c4:	f7f8 fd66 	bl	8004094 <HAL_SPI_MspInit>
 800b5c8:	e7ab      	b.n	800b522 <HAL_SPI_Init+0x112>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800b5ca:	f240 114b 	movw	r1, #331	; 0x14b
 800b5ce:	482c      	ldr	r0, [pc, #176]	; (800b680 <HAL_SPI_Init+0x270>)
 800b5d0:	f7f7 fd1a 	bl	8003008 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800b5d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5d6:	f033 0210 	bics.w	r2, r3, #16
 800b5da:	d090      	beq.n	800b4fe <HAL_SPI_Init+0xee>
 800b5dc:	e00b      	b.n	800b5f6 <HAL_SPI_Init+0x1e6>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800b5de:	f240 1149 	movw	r1, #329	; 0x149
 800b5e2:	4827      	ldr	r0, [pc, #156]	; (800b680 <HAL_SPI_Init+0x270>)
 800b5e4:	f7f7 fd10 	bl	8003008 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800b5e8:	69e3      	ldr	r3, [r4, #28]
 800b5ea:	f023 0318 	bic.w	r3, r3, #24
 800b5ee:	2b20      	cmp	r3, #32
 800b5f0:	f47f af7a 	bne.w	800b4e8 <HAL_SPI_Init+0xd8>
 800b5f4:	e77b      	b.n	800b4ee <HAL_SPI_Init+0xde>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800b5f6:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800b5fa:	4821      	ldr	r0, [pc, #132]	; (800b680 <HAL_SPI_Init+0x270>)
 800b5fc:	f7f7 fd04 	bl	8003008 <assert_failed>
 800b600:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b602:	2b00      	cmp	r3, #0
 800b604:	d185      	bne.n	800b512 <HAL_SPI_Init+0x102>
 800b606:	e77b      	b.n	800b500 <HAL_SPI_Init+0xf0>
    return HAL_ERROR;
 800b608:	2001      	movs	r0, #1
}
 800b60a:	4770      	bx	lr
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800b60c:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800b610:	481b      	ldr	r0, [pc, #108]	; (800b680 <HAL_SPI_Init+0x270>)
 800b612:	f7f7 fcf9 	bl	8003008 <assert_failed>
 800b616:	e734      	b.n	800b482 <HAL_SPI_Init+0x72>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800b618:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800b61c:	4818      	ldr	r0, [pc, #96]	; (800b680 <HAL_SPI_Init+0x270>)
 800b61e:	f7f7 fcf3 	bl	8003008 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800b622:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b624:	f033 0308 	bics.w	r3, r3, #8
 800b628:	f43f af59 	beq.w	800b4de <HAL_SPI_Init+0xce>
 800b62c:	e7d7      	b.n	800b5de <HAL_SPI_Init+0x1ce>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800b62e:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800b632:	4813      	ldr	r0, [pc, #76]	; (800b680 <HAL_SPI_Init+0x270>)
 800b634:	f7f7 fce8 	bl	8003008 <assert_failed>
 800b638:	e76b      	b.n	800b512 <HAL_SPI_Init+0x102>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800b63a:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800b63e:	4810      	ldr	r0, [pc, #64]	; (800b680 <HAL_SPI_Init+0x270>)
 800b640:	f7f7 fce2 	bl	8003008 <assert_failed>
 800b644:	e70b      	b.n	800b45e <HAL_SPI_Init+0x4e>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800b646:	f240 114f 	movw	r1, #335	; 0x14f
 800b64a:	480d      	ldr	r0, [pc, #52]	; (800b680 <HAL_SPI_Init+0x270>)
 800b64c:	f7f7 fcdc 	bl	8003008 <assert_failed>
 800b650:	e75b      	b.n	800b50a <HAL_SPI_Init+0xfa>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800b652:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800b656:	480a      	ldr	r0, [pc, #40]	; (800b680 <HAL_SPI_Init+0x270>)
 800b658:	f7f7 fcd6 	bl	8003008 <assert_failed>
 800b65c:	e747      	b.n	800b4ee <HAL_SPI_Init+0xde>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800b65e:	f240 1147 	movw	r1, #327	; 0x147
 800b662:	4807      	ldr	r0, [pc, #28]	; (800b680 <HAL_SPI_Init+0x270>)
 800b664:	f7f7 fcd0 	bl	8003008 <assert_failed>
 800b668:	e72d      	b.n	800b4c6 <HAL_SPI_Init+0xb6>
 800b66a:	bf00      	nop
 800b66c:	40013000 	.word	0x40013000
 800b670:	40003800 	.word	0x40003800
 800b674:	40003c00 	.word	0x40003c00
 800b678:	40013400 	.word	0x40013400
 800b67c:	40015400 	.word	0x40015400
 800b680:	08026a4c 	.word	0x08026a4c

0800b684 <HAL_SPI_Transmit>:
{
 800b684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b688:	461d      	mov	r5, r3
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800b68a:	6883      	ldr	r3, [r0, #8]
{
 800b68c:	b082      	sub	sp, #8
 800b68e:	4604      	mov	r4, r0
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800b690:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
{
 800b694:	4688      	mov	r8, r1
 800b696:	4617      	mov	r7, r2
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800b698:	f040 8081 	bne.w	800b79e <HAL_SPI_Transmit+0x11a>
  __HAL_LOCK(hspi);
 800b69c:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800b6a0:	2b01      	cmp	r3, #1
 800b6a2:	f000 8086 	beq.w	800b7b2 <HAL_SPI_Transmit+0x12e>
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800b6ac:	f7fa f856 	bl	800575c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800b6b0:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tickstart = HAL_GetTick();
 800b6b4:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800b6b6:	2b01      	cmp	r3, #1
 800b6b8:	d009      	beq.n	800b6ce <HAL_SPI_Transmit+0x4a>
    errorcode = HAL_BUSY;
 800b6ba:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800b6bc:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800b6be:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800b6c0:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800b6c4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800b6c8:	b002      	add	sp, #8
 800b6ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800b6ce:	f1b8 0f00 	cmp.w	r8, #0
 800b6d2:	d072      	beq.n	800b7ba <HAL_SPI_Transmit+0x136>
 800b6d4:	fab7 f387 	clz	r3, r7
 800b6d8:	095b      	lsrs	r3, r3, #5
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d16d      	bne.n	800b7ba <HAL_SPI_Transmit+0x136>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b6de:	68a2      	ldr	r2, [r4, #8]
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b6e0:	2103      	movs	r1, #3
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b6e2:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b6e4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b6e8:	f884 105d 	strb.w	r1, [r4, #93]	; 0x5d
  hspi->RxXferSize  = 0U;
 800b6ec:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b6f0:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b6f2:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800b6f6:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800b6f8:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b6fa:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->RxISR       = NULL;
 800b6fe:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 800b702:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b704:	d103      	bne.n	800b70e <HAL_SPI_Transmit+0x8a>
    SPI_1LINE_TX(hspi);
 800b706:	681a      	ldr	r2, [r3, #0]
 800b708:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b70c:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b70e:	681a      	ldr	r2, [r3, #0]
 800b710:	0652      	lsls	r2, r2, #25
 800b712:	d403      	bmi.n	800b71c <HAL_SPI_Transmit+0x98>
    __HAL_SPI_ENABLE(hspi);
 800b714:	681a      	ldr	r2, [r3, #0]
 800b716:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b71a:	601a      	str	r2, [r3, #0]
 800b71c:	f1a7 0701 	sub.w	r7, r7, #1
 800b720:	6861      	ldr	r1, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b722:	68e2      	ldr	r2, [r4, #12]
 800b724:	fab7 f787 	clz	r7, r7
 800b728:	097f      	lsrs	r7, r7, #5
 800b72a:	2900      	cmp	r1, #0
 800b72c:	bf08      	it	eq
 800b72e:	2701      	moveq	r7, #1
 800b730:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 800b734:	d94c      	bls.n	800b7d0 <HAL_SPI_Transmit+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b736:	b147      	cbz	r7, 800b74a <HAL_SPI_Transmit+0xc6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b738:	4642      	mov	r2, r8
 800b73a:	f832 1b02 	ldrh.w	r1, [r2], #2
 800b73e:	60d9      	str	r1, [r3, #12]
      hspi->TxXferCount--;
 800b740:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b742:	63a2      	str	r2, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800b744:	3b01      	subs	r3, #1
 800b746:	b29b      	uxth	r3, r3
 800b748:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800b74a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b74c:	b29b      	uxth	r3, r3
 800b74e:	b183      	cbz	r3, 800b772 <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b750:	6823      	ldr	r3, [r4, #0]
 800b752:	689a      	ldr	r2, [r3, #8]
 800b754:	0790      	lsls	r0, r2, #30
 800b756:	d532      	bpl.n	800b7be <HAL_SPI_Transmit+0x13a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b758:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b75a:	f831 2b02 	ldrh.w	r2, [r1], #2
 800b75e:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 800b760:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b762:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800b764:	3b01      	subs	r3, #1
 800b766:	b29b      	uxth	r3, r3
 800b768:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800b76a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b76c:	b29b      	uxth	r3, r3
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d1ee      	bne.n	800b750 <HAL_SPI_Transmit+0xcc>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b772:	4632      	mov	r2, r6
 800b774:	4629      	mov	r1, r5
 800b776:	4620      	mov	r0, r4
 800b778:	f7ff fe2a 	bl	800b3d0 <SPI_EndRxTxTransaction>
 800b77c:	b108      	cbz	r0, 800b782 <HAL_SPI_Transmit+0xfe>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b77e:	2320      	movs	r3, #32
 800b780:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b782:	68a3      	ldr	r3, [r4, #8]
 800b784:	b933      	cbnz	r3, 800b794 <HAL_SPI_Transmit+0x110>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b786:	6822      	ldr	r2, [r4, #0]
 800b788:	9301      	str	r3, [sp, #4]
 800b78a:	68d3      	ldr	r3, [r2, #12]
 800b78c:	9301      	str	r3, [sp, #4]
 800b78e:	6893      	ldr	r3, [r2, #8]
 800b790:	9301      	str	r3, [sp, #4]
 800b792:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b794:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 800b796:	3000      	adds	r0, #0
 800b798:	bf18      	it	ne
 800b79a:	2001      	movne	r0, #1
error:
 800b79c:	e78e      	b.n	800b6bc <HAL_SPI_Transmit+0x38>
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800b79e:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800b7a2:	4827      	ldr	r0, [pc, #156]	; (800b840 <HAL_SPI_Transmit+0x1bc>)
 800b7a4:	f7f7 fc30 	bl	8003008 <assert_failed>
  __HAL_LOCK(hspi);
 800b7a8:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800b7ac:	2b01      	cmp	r3, #1
 800b7ae:	f47f af7a 	bne.w	800b6a6 <HAL_SPI_Transmit+0x22>
 800b7b2:	2002      	movs	r0, #2
}
 800b7b4:	b002      	add	sp, #8
 800b7b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    errorcode = HAL_ERROR;
 800b7ba:	2001      	movs	r0, #1
 800b7bc:	e77e      	b.n	800b6bc <HAL_SPI_Transmit+0x38>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b7be:	f7f9 ffcd 	bl	800575c <HAL_GetTick>
 800b7c2:	1b80      	subs	r0, r0, r6
 800b7c4:	42a8      	cmp	r0, r5
 800b7c6:	d3c0      	bcc.n	800b74a <HAL_SPI_Transmit+0xc6>
 800b7c8:	1c69      	adds	r1, r5, #1
 800b7ca:	d0be      	beq.n	800b74a <HAL_SPI_Transmit+0xc6>
          errorcode = HAL_TIMEOUT;
 800b7cc:	2003      	movs	r0, #3
 800b7ce:	e775      	b.n	800b6bc <HAL_SPI_Transmit+0x38>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b7d0:	b16f      	cbz	r7, 800b7ee <HAL_SPI_Transmit+0x16a>
      if (hspi->TxXferCount > 1U)
 800b7d2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800b7d4:	2a01      	cmp	r2, #1
 800b7d6:	d92f      	bls.n	800b838 <HAL_SPI_Transmit+0x1b4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b7d8:	4642      	mov	r2, r8
 800b7da:	e015      	b.n	800b808 <HAL_SPI_Transmit+0x184>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b7dc:	780a      	ldrb	r2, [r1, #0]
 800b7de:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 800b7e0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 800b7e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800b7e4:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 800b7e6:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 800b7e8:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 800b7ea:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800b7ec:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800b7ee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b7f0:	b29b      	uxth	r3, r3
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d0bd      	beq.n	800b772 <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b7f6:	6823      	ldr	r3, [r4, #0]
 800b7f8:	689a      	ldr	r2, [r3, #8]
 800b7fa:	0792      	lsls	r2, r2, #30
 800b7fc:	d514      	bpl.n	800b828 <HAL_SPI_Transmit+0x1a4>
        if (hspi->TxXferCount > 1U)
 800b7fe:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800b800:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b802:	2a01      	cmp	r2, #1
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b804:	460a      	mov	r2, r1
        if (hspi->TxXferCount > 1U)
 800b806:	d9e9      	bls.n	800b7dc <HAL_SPI_Transmit+0x158>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b808:	f832 1b02 	ldrh.w	r1, [r2], #2
 800b80c:	60d9      	str	r1, [r3, #12]
          hspi->TxXferCount -= 2U;
 800b80e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b810:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800b812:	3b02      	subs	r3, #2
 800b814:	b29b      	uxth	r3, r3
 800b816:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800b818:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b81a:	b29b      	uxth	r3, r3
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d0a8      	beq.n	800b772 <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b820:	6823      	ldr	r3, [r4, #0]
 800b822:	689a      	ldr	r2, [r3, #8]
 800b824:	0792      	lsls	r2, r2, #30
 800b826:	d4ea      	bmi.n	800b7fe <HAL_SPI_Transmit+0x17a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b828:	f7f9 ff98 	bl	800575c <HAL_GetTick>
 800b82c:	1b80      	subs	r0, r0, r6
 800b82e:	42a8      	cmp	r0, r5
 800b830:	d3dd      	bcc.n	800b7ee <HAL_SPI_Transmit+0x16a>
 800b832:	1c6b      	adds	r3, r5, #1
 800b834:	d0db      	beq.n	800b7ee <HAL_SPI_Transmit+0x16a>
 800b836:	e7c9      	b.n	800b7cc <HAL_SPI_Transmit+0x148>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b838:	f898 2000 	ldrb.w	r2, [r8]
 800b83c:	e7cf      	b.n	800b7de <HAL_SPI_Transmit+0x15a>
 800b83e:	bf00      	nop
 800b840:	08026a4c 	.word	0x08026a4c

0800b844 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b844:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b846:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b848:	688d      	ldr	r5, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b84a:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
  tmpccmrx |= OC_Config->OCMode;
 800b84e:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b850:	4a0f      	ldr	r2, [pc, #60]	; (800b890 <TIM_OC5_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b852:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 800b854:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800b856:	6844      	ldr	r4, [r0, #4]
  tmpccer &= ~TIM_CCER_CC5P;
 800b858:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccmrx = TIMx->CCMR3;
 800b85c:	6d47      	ldr	r7, [r0, #84]	; 0x54
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b85e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b862:	4d0c      	ldr	r5, [pc, #48]	; (800b894 <TIM_OC5_SetConfig+0x50>)
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b864:	403a      	ands	r2, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b866:	42a8      	cmp	r0, r5
  tmpccmrx |= OC_Config->OCMode;
 800b868:	ea42 0206 	orr.w	r2, r2, r6
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b86c:	d00a      	beq.n	800b884 <TIM_OC5_SetConfig+0x40>
 800b86e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b872:	42a8      	cmp	r0, r5
 800b874:	d006      	beq.n	800b884 <TIM_OC5_SetConfig+0x40>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b876:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800b878:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 800b87a:	6542      	str	r2, [r0, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 800b87c:	6581      	str	r1, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b87e:	6203      	str	r3, [r0, #32]
}
 800b880:	bcf0      	pop	{r4, r5, r6, r7}
 800b882:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b884:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b888:	694d      	ldr	r5, [r1, #20]
 800b88a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 800b88e:	e7f2      	b.n	800b876 <TIM_OC5_SetConfig+0x32>
 800b890:	fffeff8f 	.word	0xfffeff8f
 800b894:	40010000 	.word	0x40010000

0800b898 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b898:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b89a:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b89c:	688d      	ldr	r5, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b89e:	f424 1480 	bic.w	r4, r4, #1048576	; 0x100000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b8a2:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b8a4:	4a0f      	ldr	r2, [pc, #60]	; (800b8e4 <TIM_OC6_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b8a6:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 800b8a8:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800b8aa:	6844      	ldr	r4, [r0, #4]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b8ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccmrx = TIMx->CCMR3;
 800b8b0:	6d47      	ldr	r7, [r0, #84]	; 0x54
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b8b2:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8b6:	4d0c      	ldr	r5, [pc, #48]	; (800b8e8 <TIM_OC6_SetConfig+0x50>)
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b8b8:	403a      	ands	r2, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8ba:	42a8      	cmp	r0, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b8bc:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8c0:	d00a      	beq.n	800b8d8 <TIM_OC6_SetConfig+0x40>
 800b8c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b8c6:	42a8      	cmp	r0, r5
 800b8c8:	d006      	beq.n	800b8d8 <TIM_OC6_SetConfig+0x40>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b8ca:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800b8cc:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 800b8ce:	6542      	str	r2, [r0, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 800b8d0:	65c1      	str	r1, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b8d2:	6203      	str	r3, [r0, #32]
}
 800b8d4:	bcf0      	pop	{r4, r5, r6, r7}
 800b8d6:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b8d8:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b8dc:	694d      	ldr	r5, [r1, #20]
 800b8de:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 800b8e2:	e7f2      	b.n	800b8ca <TIM_OC6_SetConfig+0x32>
 800b8e4:	feff8fff 	.word	0xfeff8fff
 800b8e8:	40010000 	.word	0x40010000

0800b8ec <TIM_OC1_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b8ec:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b8ee:	4b2c      	ldr	r3, [pc, #176]	; (800b9a0 <TIM_OC1_SetConfig+0xb4>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b8f0:	f022 0201 	bic.w	r2, r2, #1
{
 800b8f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8f8:	460e      	mov	r6, r1
  tmpccer |= OC_Config->OCPolarity;
 800b8fa:	6889      	ldr	r1, [r1, #8]
{
 800b8fc:	4604      	mov	r4, r0
  tmpccmrx |= OC_Config->OCMode;
 800b8fe:	6837      	ldr	r7, [r6, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b900:	6202      	str	r2, [r0, #32]
  tmpccer = TIMx->CCER;
 800b902:	6a05      	ldr	r5, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800b904:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800b908:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 800b90a:	f025 0502 	bic.w	r5, r5, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b90e:	4013      	ands	r3, r2
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b910:	4a24      	ldr	r2, [pc, #144]	; (800b9a4 <TIM_OC1_SetConfig+0xb8>)
  tmpccer |= OC_Config->OCPolarity;
 800b912:	430d      	orrs	r5, r1
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b914:	4290      	cmp	r0, r2
  tmpccmrx |= OC_Config->OCMode;
 800b916:	ea47 0703 	orr.w	r7, r7, r3
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b91a:	d00a      	beq.n	800b932 <TIM_OC1_SetConfig+0x46>
 800b91c:	4b22      	ldr	r3, [pc, #136]	; (800b9a8 <TIM_OC1_SetConfig+0xbc>)
 800b91e:	4298      	cmp	r0, r3
 800b920:	d007      	beq.n	800b932 <TIM_OC1_SetConfig+0x46>
  TIMx->CCR1 = OC_Config->Pulse;
 800b922:	6873      	ldr	r3, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800b924:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 800b928:	61a7      	str	r7, [r4, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800b92a:	6363      	str	r3, [r4, #52]	; 0x34
  TIMx->CCER = tmpccer;
 800b92c:	6225      	str	r5, [r4, #32]
}
 800b92e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800b932:	68f2      	ldr	r2, [r6, #12]
 800b934:	f032 0308 	bics.w	r3, r2, #8
 800b938:	d12a      	bne.n	800b990 <TIM_OC1_SetConfig+0xa4>
    tmpccer &= ~TIM_CCER_CC1NP;
 800b93a:	f025 0508 	bic.w	r5, r5, #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800b93e:	69b3      	ldr	r3, [r6, #24]
    tmpccer |= OC_Config->OCNPolarity;
 800b940:	4315      	orrs	r5, r2
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800b942:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC1NE;
 800b946:	f025 0504 	bic.w	r5, r5, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800b94a:	d117      	bne.n	800b97c <TIM_OC1_SetConfig+0x90>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800b94c:	6973      	ldr	r3, [r6, #20]
 800b94e:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800b952:	d106      	bne.n	800b962 <TIM_OC1_SetConfig+0x76>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b954:	f428 7240 	bic.w	r2, r8, #768	; 0x300
 800b958:	69b1      	ldr	r1, [r6, #24]
 800b95a:	430a      	orrs	r2, r1
    tmpcr2 |= OC_Config->OCNIdleState;
 800b95c:	ea42 0803 	orr.w	r8, r2, r3
 800b960:	e7df      	b.n	800b922 <TIM_OC1_SetConfig+0x36>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800b962:	f241 7199 	movw	r1, #6041	; 0x1799
 800b966:	4811      	ldr	r0, [pc, #68]	; (800b9ac <TIM_OC1_SetConfig+0xc0>)
 800b968:	f7f7 fb4e 	bl	8003008 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b96c:	f428 7240 	bic.w	r2, r8, #768	; 0x300
 800b970:	69b1      	ldr	r1, [r6, #24]
 800b972:	6973      	ldr	r3, [r6, #20]
 800b974:	430a      	orrs	r2, r1
    tmpcr2 |= OC_Config->OCNIdleState;
 800b976:	ea42 0803 	orr.w	r8, r2, r3
 800b97a:	e7d2      	b.n	800b922 <TIM_OC1_SetConfig+0x36>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800b97c:	f241 7198 	movw	r1, #6040	; 0x1798
 800b980:	480a      	ldr	r0, [pc, #40]	; (800b9ac <TIM_OC1_SetConfig+0xc0>)
 800b982:	f7f7 fb41 	bl	8003008 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800b986:	6973      	ldr	r3, [r6, #20]
 800b988:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800b98c:	d0e2      	beq.n	800b954 <TIM_OC1_SetConfig+0x68>
 800b98e:	e7e8      	b.n	800b962 <TIM_OC1_SetConfig+0x76>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800b990:	f241 718b 	movw	r1, #6027	; 0x178b
 800b994:	4805      	ldr	r0, [pc, #20]	; (800b9ac <TIM_OC1_SetConfig+0xc0>)
 800b996:	f7f7 fb37 	bl	8003008 <assert_failed>
 800b99a:	68f2      	ldr	r2, [r6, #12]
 800b99c:	e7cd      	b.n	800b93a <TIM_OC1_SetConfig+0x4e>
 800b99e:	bf00      	nop
 800b9a0:	fffeff8c 	.word	0xfffeff8c
 800b9a4:	40010000 	.word	0x40010000
 800b9a8:	40010400 	.word	0x40010400
 800b9ac:	08026a84 	.word	0x08026a84

0800b9b0 <TIM_OC3_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b9b0:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b9b2:	4b2e      	ldr	r3, [pc, #184]	; (800ba6c <TIM_OC3_SetConfig+0xbc>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b9b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
{
 800b9b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9bc:	460e      	mov	r6, r1
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b9be:	6889      	ldr	r1, [r1, #8]
{
 800b9c0:	4604      	mov	r4, r0
  tmpccmrx |= OC_Config->OCMode;
 800b9c2:	6837      	ldr	r7, [r6, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b9c4:	6202      	str	r2, [r0, #32]
  tmpccer = TIMx->CCER;
 800b9c6:	6a05      	ldr	r5, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800b9c8:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 800b9cc:	69c2      	ldr	r2, [r0, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 800b9ce:	f425 7500 	bic.w	r5, r5, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b9d2:	4013      	ands	r3, r2
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b9d4:	4a26      	ldr	r2, [pc, #152]	; (800ba70 <TIM_OC3_SetConfig+0xc0>)
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b9d6:	ea45 2501 	orr.w	r5, r5, r1, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b9da:	4290      	cmp	r0, r2
  tmpccmrx |= OC_Config->OCMode;
 800b9dc:	ea47 0703 	orr.w	r7, r7, r3
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b9e0:	d00a      	beq.n	800b9f8 <TIM_OC3_SetConfig+0x48>
 800b9e2:	4b24      	ldr	r3, [pc, #144]	; (800ba74 <TIM_OC3_SetConfig+0xc4>)
 800b9e4:	4298      	cmp	r0, r3
 800b9e6:	d007      	beq.n	800b9f8 <TIM_OC3_SetConfig+0x48>
  TIMx->CCR3 = OC_Config->Pulse;
 800b9e8:	6873      	ldr	r3, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800b9ea:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 800b9ee:	61e7      	str	r7, [r4, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800b9f0:	63e3      	str	r3, [r4, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800b9f2:	6225      	str	r5, [r4, #32]
}
 800b9f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800b9f8:	68f2      	ldr	r2, [r6, #12]
 800b9fa:	f032 0308 	bics.w	r3, r2, #8
 800b9fe:	d12d      	bne.n	800ba5c <TIM_OC3_SetConfig+0xac>
    tmpccer &= ~TIM_CCER_CC3NP;
 800ba00:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800ba04:	69b3      	ldr	r3, [r6, #24]
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ba06:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800ba0a:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC3NE;
 800ba0e:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800ba12:	d119      	bne.n	800ba48 <TIM_OC3_SetConfig+0x98>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800ba14:	6973      	ldr	r3, [r6, #20]
 800ba16:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800ba1a:	d107      	bne.n	800ba2c <TIM_OC3_SetConfig+0x7c>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ba1c:	f428 5240 	bic.w	r2, r8, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ba20:	69b1      	ldr	r1, [r6, #24]
 800ba22:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800ba26:	ea42 1803 	orr.w	r8, r2, r3, lsl #4
 800ba2a:	e7dd      	b.n	800b9e8 <TIM_OC3_SetConfig+0x38>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800ba2c:	f641 012f 	movw	r1, #6191	; 0x182f
 800ba30:	4811      	ldr	r0, [pc, #68]	; (800ba78 <TIM_OC3_SetConfig+0xc8>)
 800ba32:	f7f7 fae9 	bl	8003008 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ba36:	f428 5240 	bic.w	r2, r8, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ba3a:	69b1      	ldr	r1, [r6, #24]
 800ba3c:	6973      	ldr	r3, [r6, #20]
 800ba3e:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800ba42:	ea42 1803 	orr.w	r8, r2, r3, lsl #4
 800ba46:	e7cf      	b.n	800b9e8 <TIM_OC3_SetConfig+0x38>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800ba48:	f641 012e 	movw	r1, #6190	; 0x182e
 800ba4c:	480a      	ldr	r0, [pc, #40]	; (800ba78 <TIM_OC3_SetConfig+0xc8>)
 800ba4e:	f7f7 fadb 	bl	8003008 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800ba52:	6973      	ldr	r3, [r6, #20]
 800ba54:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800ba58:	d0e0      	beq.n	800ba1c <TIM_OC3_SetConfig+0x6c>
 800ba5a:	e7e7      	b.n	800ba2c <TIM_OC3_SetConfig+0x7c>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800ba5c:	f641 0121 	movw	r1, #6177	; 0x1821
 800ba60:	4805      	ldr	r0, [pc, #20]	; (800ba78 <TIM_OC3_SetConfig+0xc8>)
 800ba62:	f7f7 fad1 	bl	8003008 <assert_failed>
 800ba66:	68f2      	ldr	r2, [r6, #12]
 800ba68:	e7ca      	b.n	800ba00 <TIM_OC3_SetConfig+0x50>
 800ba6a:	bf00      	nop
 800ba6c:	fffeff8c 	.word	0xfffeff8c
 800ba70:	40010000 	.word	0x40010000
 800ba74:	40010400 	.word	0x40010400
 800ba78:	08026a84 	.word	0x08026a84

0800ba7c <TIM_OC4_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ba7c:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ba7e:	4b1b      	ldr	r3, [pc, #108]	; (800baec <TIM_OC4_SetConfig+0x70>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ba80:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
{
 800ba84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba86:	460f      	mov	r7, r1
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ba88:	6889      	ldr	r1, [r1, #8]
{
 800ba8a:	4604      	mov	r4, r0
 800ba8c:	b083      	sub	sp, #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ba8e:	683e      	ldr	r6, [r7, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ba90:	6202      	str	r2, [r0, #32]
  tmpccer = TIMx->CCER;
 800ba92:	6a05      	ldr	r5, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800ba94:	6842      	ldr	r2, [r0, #4]
  tmpccer &= ~TIM_CCER_CC4P;
 800ba96:	f425 5500 	bic.w	r5, r5, #8192	; 0x2000
  tmpccmrx = TIMx->CCMR2;
 800ba9a:	69c0      	ldr	r0, [r0, #28]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ba9c:	ea45 3501 	orr.w	r5, r5, r1, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800baa0:	4913      	ldr	r1, [pc, #76]	; (800baf0 <TIM_OC4_SetConfig+0x74>)
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800baa2:	4003      	ands	r3, r0
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800baa4:	428c      	cmp	r4, r1
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800baa6:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800baaa:	d009      	beq.n	800bac0 <TIM_OC4_SetConfig+0x44>
 800baac:	4b11      	ldr	r3, [pc, #68]	; (800baf4 <TIM_OC4_SetConfig+0x78>)
 800baae:	429c      	cmp	r4, r3
 800bab0:	d006      	beq.n	800bac0 <TIM_OC4_SetConfig+0x44>
  TIMx->CCR4 = OC_Config->Pulse;
 800bab2:	687b      	ldr	r3, [r7, #4]
  TIMx->CR2 = tmpcr2;
 800bab4:	6062      	str	r2, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 800bab6:	61e6      	str	r6, [r4, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800bab8:	6423      	str	r3, [r4, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800baba:	6225      	str	r5, [r4, #32]
}
 800babc:	b003      	add	sp, #12
 800babe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800bac0:	697b      	ldr	r3, [r7, #20]
 800bac2:	f433 7180 	bics.w	r1, r3, #256	; 0x100
 800bac6:	d104      	bne.n	800bad2 <TIM_OC4_SetConfig+0x56>
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bac8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bacc:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
 800bad0:	e7ef      	b.n	800bab2 <TIM_OC4_SetConfig+0x36>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800bad2:	f641 016d 	movw	r1, #6253	; 0x186d
 800bad6:	4808      	ldr	r0, [pc, #32]	; (800baf8 <TIM_OC4_SetConfig+0x7c>)
 800bad8:	9201      	str	r2, [sp, #4]
 800bada:	f7f7 fa95 	bl	8003008 <assert_failed>
 800bade:	9a01      	ldr	r2, [sp, #4]
 800bae0:	697b      	ldr	r3, [r7, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bae2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bae6:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
 800baea:	e7e2      	b.n	800bab2 <TIM_OC4_SetConfig+0x36>
 800baec:	feff8cff 	.word	0xfeff8cff
 800baf0:	40010000 	.word	0x40010000
 800baf4:	40010400 	.word	0x40010400
 800baf8:	08026a84 	.word	0x08026a84

0800bafc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800bafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bafe:	6803      	ldr	r3, [r0, #0]
{
 800bb00:	460c      	mov	r4, r1
 800bb02:	4606      	mov	r6, r0

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800bb04:	6848      	ldr	r0, [r1, #4]
  tmpsmcr = htim->Instance->SMCR;
 800bb06:	6899      	ldr	r1, [r3, #8]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800bb08:	4aac      	ldr	r2, [pc, #688]	; (800bdbc <TIM_SlaveTimer_SetConfig+0x2c0>)

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800bb0a:	2830      	cmp	r0, #48	; 0x30
  tmpsmcr &= ~TIM_SMCR_TS;
 800bb0c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800bb10:	6825      	ldr	r5, [r4, #0]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800bb12:	ea41 0100 	orr.w	r1, r1, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 800bb16:	ea02 0201 	and.w	r2, r2, r1
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800bb1a:	ea42 0205 	orr.w	r2, r2, r5
  htim->Instance->SMCR = tmpsmcr;
 800bb1e:	609a      	str	r2, [r3, #8]
  switch (sSlaveConfig->InputTrigger)
 800bb20:	f000 80c9 	beq.w	800bcb6 <TIM_SlaveTimer_SetConfig+0x1ba>
 800bb24:	f240 80c2 	bls.w	800bcac <TIM_SlaveTimer_SetConfig+0x1b0>
 800bb28:	2850      	cmp	r0, #80	; 0x50
 800bb2a:	f000 8159 	beq.w	800bde0 <TIM_SlaveTimer_SetConfig+0x2e4>
 800bb2e:	d958      	bls.n	800bbe2 <TIM_SlaveTimer_SetConfig+0xe6>
 800bb30:	2860      	cmp	r0, #96	; 0x60
 800bb32:	f000 80ee 	beq.w	800bd12 <TIM_SlaveTimer_SetConfig+0x216>
 800bb36:	2870      	cmp	r0, #112	; 0x70
 800bb38:	f040 80e9 	bne.w	800bd0e <TIM_SlaveTimer_SetConfig+0x212>
  {
    case TIM_TS_ETRF:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800bb3c:	4aa0      	ldr	r2, [pc, #640]	; (800bdc0 <TIM_SlaveTimer_SetConfig+0x2c4>)
 800bb3e:	49a1      	ldr	r1, [pc, #644]	; (800bdc4 <TIM_SlaveTimer_SetConfig+0x2c8>)
 800bb40:	4293      	cmp	r3, r2
 800bb42:	bf18      	it	ne
 800bb44:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800bb48:	489f      	ldr	r0, [pc, #636]	; (800bdc8 <TIM_SlaveTimer_SetConfig+0x2cc>)
 800bb4a:	bf14      	ite	ne
 800bb4c:	2201      	movne	r2, #1
 800bb4e:	2200      	moveq	r2, #0
 800bb50:	428b      	cmp	r3, r1
 800bb52:	bf0c      	ite	eq
 800bb54:	2200      	moveq	r2, #0
 800bb56:	f002 0201 	andne.w	r2, r2, #1
 800bb5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bb5e:	4283      	cmp	r3, r0
 800bb60:	bf0c      	ite	eq
 800bb62:	2200      	moveq	r2, #0
 800bb64:	f002 0201 	andne.w	r2, r2, #1
 800bb68:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800bb6c:	428b      	cmp	r3, r1
 800bb6e:	bf0c      	ite	eq
 800bb70:	2200      	moveq	r2, #0
 800bb72:	f002 0201 	andne.w	r2, r2, #1
 800bb76:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800bb7a:	4283      	cmp	r3, r0
 800bb7c:	bf0c      	ite	eq
 800bb7e:	2200      	moveq	r2, #0
 800bb80:	f002 0201 	andne.w	r2, r2, #1
 800bb84:	428b      	cmp	r3, r1
 800bb86:	bf0c      	ite	eq
 800bb88:	2200      	moveq	r2, #0
 800bb8a:	f002 0201 	andne.w	r2, r2, #1
 800bb8e:	b11a      	cbz	r2, 800bb98 <TIM_SlaveTimer_SetConfig+0x9c>
 800bb90:	4a8e      	ldr	r2, [pc, #568]	; (800bdcc <TIM_SlaveTimer_SetConfig+0x2d0>)
 800bb92:	4293      	cmp	r3, r2
 800bb94:	f040 81bf 	bne.w	800bf16 <TIM_SlaveTimer_SetConfig+0x41a>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 800bb98:	68e3      	ldr	r3, [r4, #12]
 800bb9a:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800bb9e:	f040 819c 	bne.w	800beda <TIM_SlaveTimer_SetConfig+0x3de>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800bba2:	68a3      	ldr	r3, [r4, #8]
 800bba4:	2b0a      	cmp	r3, #10
 800bba6:	bf18      	it	ne
 800bba8:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800bbac:	d003      	beq.n	800bbb6 <TIM_SlaveTimer_SetConfig+0xba>
 800bbae:	f033 0302 	bics.w	r3, r3, #2
 800bbb2:	f040 8198 	bne.w	800bee6 <TIM_SlaveTimer_SetConfig+0x3ea>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800bbb6:	6921      	ldr	r1, [r4, #16]
 800bbb8:	290f      	cmp	r1, #15
 800bbba:	d905      	bls.n	800bbc8 <TIM_SlaveTimer_SetConfig+0xcc>
 800bbbc:	f641 1114 	movw	r1, #6420	; 0x1914
 800bbc0:	4883      	ldr	r0, [pc, #524]	; (800bdd0 <TIM_SlaveTimer_SetConfig+0x2d4>)
 800bbc2:	f7f7 fa21 	bl	8003008 <assert_failed>
 800bbc6:	6921      	ldr	r1, [r4, #16]
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800bbc8:	6835      	ldr	r5, [r6, #0]
    }

    default:
      break;
  }
  return HAL_OK;
 800bbca:	2000      	movs	r0, #0
 800bbcc:	68e3      	ldr	r3, [r4, #12]
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bbce:	68aa      	ldr	r2, [r5, #8]
 800bbd0:	68a4      	ldr	r4, [r4, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bbd2:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800bbd6:	4323      	orrs	r3, r4
 800bbd8:	4313      	orrs	r3, r2

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bbda:	ea43 2301 	orr.w	r3, r3, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bbde:	60ab      	str	r3, [r5, #8]
}
 800bbe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sSlaveConfig->InputTrigger)
 800bbe2:	2840      	cmp	r0, #64	; 0x40
 800bbe4:	f040 8093 	bne.w	800bd0e <TIM_SlaveTimer_SetConfig+0x212>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800bbe8:	4a75      	ldr	r2, [pc, #468]	; (800bdc0 <TIM_SlaveTimer_SetConfig+0x2c4>)
 800bbea:	4976      	ldr	r1, [pc, #472]	; (800bdc4 <TIM_SlaveTimer_SetConfig+0x2c8>)
 800bbec:	4293      	cmp	r3, r2
 800bbee:	bf18      	it	ne
 800bbf0:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800bbf4:	4874      	ldr	r0, [pc, #464]	; (800bdc8 <TIM_SlaveTimer_SetConfig+0x2cc>)
 800bbf6:	bf14      	ite	ne
 800bbf8:	2201      	movne	r2, #1
 800bbfa:	2200      	moveq	r2, #0
 800bbfc:	428b      	cmp	r3, r1
 800bbfe:	bf0c      	ite	eq
 800bc00:	2200      	moveq	r2, #0
 800bc02:	f002 0201 	andne.w	r2, r2, #1
 800bc06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bc0a:	4283      	cmp	r3, r0
 800bc0c:	bf0c      	ite	eq
 800bc0e:	2200      	moveq	r2, #0
 800bc10:	f002 0201 	andne.w	r2, r2, #1
 800bc14:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800bc18:	428b      	cmp	r3, r1
 800bc1a:	bf0c      	ite	eq
 800bc1c:	2200      	moveq	r2, #0
 800bc1e:	f002 0201 	andne.w	r2, r2, #1
 800bc22:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800bc26:	4283      	cmp	r3, r0
 800bc28:	bf0c      	ite	eq
 800bc2a:	2200      	moveq	r2, #0
 800bc2c:	f002 0201 	andne.w	r2, r2, #1
 800bc30:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 800bc34:	428b      	cmp	r3, r1
 800bc36:	bf0c      	ite	eq
 800bc38:	2200      	moveq	r2, #0
 800bc3a:	f002 0201 	andne.w	r2, r2, #1
 800bc3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bc42:	4283      	cmp	r3, r0
 800bc44:	bf0c      	ite	eq
 800bc46:	2200      	moveq	r2, #0
 800bc48:	f002 0201 	andne.w	r2, r2, #1
 800bc4c:	f5a0 3096 	sub.w	r0, r0, #76800	; 0x12c00
 800bc50:	428b      	cmp	r3, r1
 800bc52:	bf0c      	ite	eq
 800bc54:	2200      	moveq	r2, #0
 800bc56:	f002 0201 	andne.w	r2, r2, #1
 800bc5a:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800bc5e:	4283      	cmp	r3, r0
 800bc60:	bf0c      	ite	eq
 800bc62:	2200      	moveq	r2, #0
 800bc64:	f002 0201 	andne.w	r2, r2, #1
 800bc68:	428b      	cmp	r3, r1
 800bc6a:	bf0c      	ite	eq
 800bc6c:	2200      	moveq	r2, #0
 800bc6e:	f002 0201 	andne.w	r2, r2, #1
 800bc72:	b11a      	cbz	r2, 800bc7c <TIM_SlaveTimer_SetConfig+0x180>
 800bc74:	4a57      	ldr	r2, [pc, #348]	; (800bdd4 <TIM_SlaveTimer_SetConfig+0x2d8>)
 800bc76:	4293      	cmp	r3, r2
 800bc78:	f040 8159 	bne.w	800bf2e <TIM_SlaveTimer_SetConfig+0x432>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800bc7c:	6923      	ldr	r3, [r4, #16]
 800bc7e:	2b0f      	cmp	r3, #15
 800bc80:	f200 811e 	bhi.w	800bec0 <TIM_SlaveTimer_SetConfig+0x3c4>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800bc84:	6823      	ldr	r3, [r4, #0]
 800bc86:	2b05      	cmp	r3, #5
 800bc88:	f000 8118 	beq.w	800bebc <TIM_SlaveTimer_SetConfig+0x3c0>
      tmpccer = htim->Instance->CCER;
 800bc8c:	6833      	ldr	r3, [r6, #0]
  return HAL_OK;
 800bc8e:	2000      	movs	r0, #0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800bc90:	6925      	ldr	r5, [r4, #16]
      tmpccer = htim->Instance->CCER;
 800bc92:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800bc94:	6a19      	ldr	r1, [r3, #32]
 800bc96:	f021 0101 	bic.w	r1, r1, #1
 800bc9a:	6219      	str	r1, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800bc9c:	699a      	ldr	r2, [r3, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bc9e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800bca2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 800bca6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800bca8:	621c      	str	r4, [r3, #32]
}
 800bcaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sSlaveConfig->InputTrigger)
 800bcac:	2810      	cmp	r0, #16
 800bcae:	d002      	beq.n	800bcb6 <TIM_SlaveTimer_SetConfig+0x1ba>
 800bcb0:	2820      	cmp	r0, #32
 800bcb2:	d000      	beq.n	800bcb6 <TIM_SlaveTimer_SetConfig+0x1ba>
 800bcb4:	bb58      	cbnz	r0, 800bd0e <TIM_SlaveTimer_SetConfig+0x212>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800bcb6:	4a42      	ldr	r2, [pc, #264]	; (800bdc0 <TIM_SlaveTimer_SetConfig+0x2c4>)
 800bcb8:	4942      	ldr	r1, [pc, #264]	; (800bdc4 <TIM_SlaveTimer_SetConfig+0x2c8>)
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	bf18      	it	ne
 800bcbe:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800bcc2:	4d41      	ldr	r5, [pc, #260]	; (800bdc8 <TIM_SlaveTimer_SetConfig+0x2cc>)
 800bcc4:	4c44      	ldr	r4, [pc, #272]	; (800bdd8 <TIM_SlaveTimer_SetConfig+0x2dc>)
 800bcc6:	bf14      	ite	ne
 800bcc8:	2201      	movne	r2, #1
 800bcca:	2200      	moveq	r2, #0
 800bccc:	4843      	ldr	r0, [pc, #268]	; (800bddc <TIM_SlaveTimer_SetConfig+0x2e0>)
 800bcce:	428b      	cmp	r3, r1
 800bcd0:	bf0c      	ite	eq
 800bcd2:	2200      	moveq	r2, #0
 800bcd4:	f002 0201 	andne.w	r2, r2, #1
 800bcd8:	f501 319e 	add.w	r1, r1, #80896	; 0x13c00
 800bcdc:	42ab      	cmp	r3, r5
 800bcde:	bf0c      	ite	eq
 800bce0:	2200      	moveq	r2, #0
 800bce2:	f002 0201 	andne.w	r2, r2, #1
 800bce6:	42a3      	cmp	r3, r4
 800bce8:	bf0c      	ite	eq
 800bcea:	2200      	moveq	r2, #0
 800bcec:	f002 0201 	andne.w	r2, r2, #1
 800bcf0:	4283      	cmp	r3, r0
 800bcf2:	bf0c      	ite	eq
 800bcf4:	2200      	moveq	r2, #0
 800bcf6:	f002 0201 	andne.w	r2, r2, #1
 800bcfa:	428b      	cmp	r3, r1
 800bcfc:	bf0c      	ite	eq
 800bcfe:	2200      	moveq	r2, #0
 800bd00:	f002 0201 	andne.w	r2, r2, #1
 800bd04:	b11a      	cbz	r2, 800bd0e <TIM_SlaveTimer_SetConfig+0x212>
 800bd06:	4a31      	ldr	r2, [pc, #196]	; (800bdcc <TIM_SlaveTimer_SetConfig+0x2d0>)
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	f040 80df 	bne.w	800becc <TIM_SlaveTimer_SetConfig+0x3d0>
  return HAL_OK;
 800bd0e:	2000      	movs	r0, #0
}
 800bd10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800bd12:	4a2b      	ldr	r2, [pc, #172]	; (800bdc0 <TIM_SlaveTimer_SetConfig+0x2c4>)
 800bd14:	492b      	ldr	r1, [pc, #172]	; (800bdc4 <TIM_SlaveTimer_SetConfig+0x2c8>)
 800bd16:	4293      	cmp	r3, r2
 800bd18:	bf18      	it	ne
 800bd1a:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800bd1e:	482a      	ldr	r0, [pc, #168]	; (800bdc8 <TIM_SlaveTimer_SetConfig+0x2cc>)
 800bd20:	bf14      	ite	ne
 800bd22:	2201      	movne	r2, #1
 800bd24:	2200      	moveq	r2, #0
 800bd26:	428b      	cmp	r3, r1
 800bd28:	bf0c      	ite	eq
 800bd2a:	2200      	moveq	r2, #0
 800bd2c:	f002 0201 	andne.w	r2, r2, #1
 800bd30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd34:	4283      	cmp	r3, r0
 800bd36:	bf0c      	ite	eq
 800bd38:	2200      	moveq	r2, #0
 800bd3a:	f002 0201 	andne.w	r2, r2, #1
 800bd3e:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800bd42:	428b      	cmp	r3, r1
 800bd44:	bf0c      	ite	eq
 800bd46:	2200      	moveq	r2, #0
 800bd48:	f002 0201 	andne.w	r2, r2, #1
 800bd4c:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800bd50:	4283      	cmp	r3, r0
 800bd52:	bf0c      	ite	eq
 800bd54:	2200      	moveq	r2, #0
 800bd56:	f002 0201 	andne.w	r2, r2, #1
 800bd5a:	428b      	cmp	r3, r1
 800bd5c:	bf0c      	ite	eq
 800bd5e:	2200      	moveq	r2, #0
 800bd60:	f002 0201 	andne.w	r2, r2, #1
 800bd64:	b11a      	cbz	r2, 800bd6e <TIM_SlaveTimer_SetConfig+0x272>
 800bd66:	4a19      	ldr	r2, [pc, #100]	; (800bdcc <TIM_SlaveTimer_SetConfig+0x2d0>)
 800bd68:	4293      	cmp	r3, r2
 800bd6a:	f040 80ce 	bne.w	800bf0a <TIM_SlaveTimer_SetConfig+0x40e>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800bd6e:	68a3      	ldr	r3, [r4, #8]
 800bd70:	2b0a      	cmp	r3, #10
 800bd72:	bf18      	it	ne
 800bd74:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800bd78:	d003      	beq.n	800bd82 <TIM_SlaveTimer_SetConfig+0x286>
 800bd7a:	f033 0302 	bics.w	r3, r3, #2
 800bd7e:	f040 80be 	bne.w	800befe <TIM_SlaveTimer_SetConfig+0x402>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800bd82:	6925      	ldr	r5, [r4, #16]
 800bd84:	2d0f      	cmp	r5, #15
 800bd86:	d905      	bls.n	800bd94 <TIM_SlaveTimer_SetConfig+0x298>
 800bd88:	f641 114a 	movw	r1, #6474	; 0x194a
 800bd8c:	4810      	ldr	r0, [pc, #64]	; (800bdd0 <TIM_SlaveTimer_SetConfig+0x2d4>)
 800bd8e:	f7f7 f93b 	bl	8003008 <assert_failed>
 800bd92:	6925      	ldr	r5, [r4, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bd94:	6833      	ldr	r3, [r6, #0]
  return HAL_OK;
 800bd96:	2000      	movs	r0, #0
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bd98:	68a6      	ldr	r6, [r4, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bd9a:	6a1c      	ldr	r4, [r3, #32]
 800bd9c:	f024 0410 	bic.w	r4, r4, #16
 800bda0:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bda2:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800bda4:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bda6:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bdaa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bdae:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800bdb2:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800bdb6:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800bdb8:	621a      	str	r2, [r3, #32]
}
 800bdba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdbc:	fffefff8 	.word	0xfffefff8
 800bdc0:	40010000 	.word	0x40010000
 800bdc4:	40000400 	.word	0x40000400
 800bdc8:	40000800 	.word	0x40000800
 800bdcc:	40001800 	.word	0x40001800
 800bdd0:	08026a84 	.word	0x08026a84
 800bdd4:	40002000 	.word	0x40002000
 800bdd8:	40000c00 	.word	0x40000c00
 800bddc:	40010400 	.word	0x40010400
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800bde0:	4a56      	ldr	r2, [pc, #344]	; (800bf3c <TIM_SlaveTimer_SetConfig+0x440>)
 800bde2:	4957      	ldr	r1, [pc, #348]	; (800bf40 <TIM_SlaveTimer_SetConfig+0x444>)
 800bde4:	4293      	cmp	r3, r2
 800bde6:	bf18      	it	ne
 800bde8:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800bdec:	4855      	ldr	r0, [pc, #340]	; (800bf44 <TIM_SlaveTimer_SetConfig+0x448>)
 800bdee:	bf14      	ite	ne
 800bdf0:	2201      	movne	r2, #1
 800bdf2:	2200      	moveq	r2, #0
 800bdf4:	428b      	cmp	r3, r1
 800bdf6:	bf0c      	ite	eq
 800bdf8:	2200      	moveq	r2, #0
 800bdfa:	f002 0201 	andne.w	r2, r2, #1
 800bdfe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800be02:	4283      	cmp	r3, r0
 800be04:	bf0c      	ite	eq
 800be06:	2200      	moveq	r2, #0
 800be08:	f002 0201 	andne.w	r2, r2, #1
 800be0c:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800be10:	428b      	cmp	r3, r1
 800be12:	bf0c      	ite	eq
 800be14:	2200      	moveq	r2, #0
 800be16:	f002 0201 	andne.w	r2, r2, #1
 800be1a:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800be1e:	4283      	cmp	r3, r0
 800be20:	bf0c      	ite	eq
 800be22:	2200      	moveq	r2, #0
 800be24:	f002 0201 	andne.w	r2, r2, #1
 800be28:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 800be2c:	428b      	cmp	r3, r1
 800be2e:	bf0c      	ite	eq
 800be30:	2200      	moveq	r2, #0
 800be32:	f002 0201 	andne.w	r2, r2, #1
 800be36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800be3a:	4283      	cmp	r3, r0
 800be3c:	bf0c      	ite	eq
 800be3e:	2200      	moveq	r2, #0
 800be40:	f002 0201 	andne.w	r2, r2, #1
 800be44:	f5a0 3096 	sub.w	r0, r0, #76800	; 0x12c00
 800be48:	428b      	cmp	r3, r1
 800be4a:	bf0c      	ite	eq
 800be4c:	2200      	moveq	r2, #0
 800be4e:	f002 0201 	andne.w	r2, r2, #1
 800be52:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800be56:	4283      	cmp	r3, r0
 800be58:	bf0c      	ite	eq
 800be5a:	2200      	moveq	r2, #0
 800be5c:	f002 0201 	andne.w	r2, r2, #1
 800be60:	428b      	cmp	r3, r1
 800be62:	bf0c      	ite	eq
 800be64:	2200      	moveq	r2, #0
 800be66:	f002 0201 	andne.w	r2, r2, #1
 800be6a:	b112      	cbz	r2, 800be72 <TIM_SlaveTimer_SetConfig+0x376>
 800be6c:	4a36      	ldr	r2, [pc, #216]	; (800bf48 <TIM_SlaveTimer_SetConfig+0x44c>)
 800be6e:	4293      	cmp	r3, r2
 800be70:	d157      	bne.n	800bf22 <TIM_SlaveTimer_SetConfig+0x426>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800be72:	68a3      	ldr	r3, [r4, #8]
 800be74:	2b0a      	cmp	r3, #10
 800be76:	bf18      	it	ne
 800be78:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800be7c:	d002      	beq.n	800be84 <TIM_SlaveTimer_SetConfig+0x388>
 800be7e:	f033 0302 	bics.w	r3, r3, #2
 800be82:	d136      	bne.n	800bef2 <TIM_SlaveTimer_SetConfig+0x3f6>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800be84:	6927      	ldr	r7, [r4, #16]
 800be86:	2f0f      	cmp	r7, #15
 800be88:	d905      	bls.n	800be96 <TIM_SlaveTimer_SetConfig+0x39a>
 800be8a:	f641 113c 	movw	r1, #6460	; 0x193c
 800be8e:	482f      	ldr	r0, [pc, #188]	; (800bf4c <TIM_SlaveTimer_SetConfig+0x450>)
 800be90:	f7f7 f8ba 	bl	8003008 <assert_failed>
 800be94:	6927      	ldr	r7, [r4, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800be96:	6833      	ldr	r3, [r6, #0]
  return HAL_OK;
 800be98:	2000      	movs	r0, #0
      TIM_TI1_ConfigInputStage(htim->Instance,
 800be9a:	68a1      	ldr	r1, [r4, #8]
  tmpccer = TIMx->CCER;
 800be9c:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800be9e:	6a1c      	ldr	r4, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bea0:	f025 050a 	bic.w	r5, r5, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bea4:	f024 0401 	bic.w	r4, r4, #1
  tmpccer |= TIM_ICPolarity;
 800bea8:	4329      	orrs	r1, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800beaa:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800beac:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800beae:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800beb2:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800beb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800beb8:	6219      	str	r1, [r3, #32]
}
 800beba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_ERROR;
 800bebc:	2001      	movs	r0, #1
}
 800bebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800bec0:	f641 1121 	movw	r1, #6433	; 0x1921
 800bec4:	4821      	ldr	r0, [pc, #132]	; (800bf4c <TIM_SlaveTimer_SetConfig+0x450>)
 800bec6:	f7f7 f89f 	bl	8003008 <assert_failed>
 800beca:	e6db      	b.n	800bc84 <TIM_SlaveTimer_SetConfig+0x188>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800becc:	f641 1159 	movw	r1, #6489	; 0x1959
 800bed0:	481e      	ldr	r0, [pc, #120]	; (800bf4c <TIM_SlaveTimer_SetConfig+0x450>)
 800bed2:	f7f7 f899 	bl	8003008 <assert_failed>
  return HAL_OK;
 800bed6:	2000      	movs	r0, #0
}
 800bed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 800beda:	f641 1112 	movw	r1, #6418	; 0x1912
 800bede:	481b      	ldr	r0, [pc, #108]	; (800bf4c <TIM_SlaveTimer_SetConfig+0x450>)
 800bee0:	f7f7 f892 	bl	8003008 <assert_failed>
 800bee4:	e65d      	b.n	800bba2 <TIM_SlaveTimer_SetConfig+0xa6>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800bee6:	f641 1113 	movw	r1, #6419	; 0x1913
 800beea:	4818      	ldr	r0, [pc, #96]	; (800bf4c <TIM_SlaveTimer_SetConfig+0x450>)
 800beec:	f7f7 f88c 	bl	8003008 <assert_failed>
 800bef0:	e661      	b.n	800bbb6 <TIM_SlaveTimer_SetConfig+0xba>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800bef2:	f641 113b 	movw	r1, #6459	; 0x193b
 800bef6:	4815      	ldr	r0, [pc, #84]	; (800bf4c <TIM_SlaveTimer_SetConfig+0x450>)
 800bef8:	f7f7 f886 	bl	8003008 <assert_failed>
 800befc:	e7c2      	b.n	800be84 <TIM_SlaveTimer_SetConfig+0x388>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800befe:	f641 1149 	movw	r1, #6473	; 0x1949
 800bf02:	4812      	ldr	r0, [pc, #72]	; (800bf4c <TIM_SlaveTimer_SetConfig+0x450>)
 800bf04:	f7f7 f880 	bl	8003008 <assert_failed>
 800bf08:	e73b      	b.n	800bd82 <TIM_SlaveTimer_SetConfig+0x286>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800bf0a:	f641 1148 	movw	r1, #6472	; 0x1948
 800bf0e:	480f      	ldr	r0, [pc, #60]	; (800bf4c <TIM_SlaveTimer_SetConfig+0x450>)
 800bf10:	f7f7 f87a 	bl	8003008 <assert_failed>
 800bf14:	e72b      	b.n	800bd6e <TIM_SlaveTimer_SetConfig+0x272>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800bf16:	f641 1111 	movw	r1, #6417	; 0x1911
 800bf1a:	480c      	ldr	r0, [pc, #48]	; (800bf4c <TIM_SlaveTimer_SetConfig+0x450>)
 800bf1c:	f7f7 f874 	bl	8003008 <assert_failed>
 800bf20:	e63a      	b.n	800bb98 <TIM_SlaveTimer_SetConfig+0x9c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800bf22:	f641 113a 	movw	r1, #6458	; 0x193a
 800bf26:	4809      	ldr	r0, [pc, #36]	; (800bf4c <TIM_SlaveTimer_SetConfig+0x450>)
 800bf28:	f7f7 f86e 	bl	8003008 <assert_failed>
 800bf2c:	e7a1      	b.n	800be72 <TIM_SlaveTimer_SetConfig+0x376>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800bf2e:	f44f 51c9 	mov.w	r1, #6432	; 0x1920
 800bf32:	4806      	ldr	r0, [pc, #24]	; (800bf4c <TIM_SlaveTimer_SetConfig+0x450>)
 800bf34:	f7f7 f868 	bl	8003008 <assert_failed>
 800bf38:	e6a0      	b.n	800bc7c <TIM_SlaveTimer_SetConfig+0x180>
 800bf3a:	bf00      	nop
 800bf3c:	40010000 	.word	0x40010000
 800bf40:	40000400 	.word	0x40000400
 800bf44:	40000800 	.word	0x40000800
 800bf48:	40002000 	.word	0x40002000
 800bf4c:	08026a84 	.word	0x08026a84

0800bf50 <HAL_TIM_Base_Start>:
{
 800bf50:	b538      	push	{r3, r4, r5, lr}
 800bf52:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800bf54:	4b38      	ldr	r3, [pc, #224]	; (800c038 <HAL_TIM_Base_Start+0xe8>)
 800bf56:	4839      	ldr	r0, [pc, #228]	; (800c03c <HAL_TIM_Base_Start+0xec>)
 800bf58:	6822      	ldr	r2, [r4, #0]
 800bf5a:	4939      	ldr	r1, [pc, #228]	; (800c040 <HAL_TIM_Base_Start+0xf0>)
 800bf5c:	429a      	cmp	r2, r3
 800bf5e:	bf18      	it	ne
 800bf60:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800bf64:	4d37      	ldr	r5, [pc, #220]	; (800c044 <HAL_TIM_Base_Start+0xf4>)
 800bf66:	bf14      	ite	ne
 800bf68:	2301      	movne	r3, #1
 800bf6a:	2300      	moveq	r3, #0
 800bf6c:	4282      	cmp	r2, r0
 800bf6e:	bf0c      	ite	eq
 800bf70:	2300      	moveq	r3, #0
 800bf72:	f003 0301 	andne.w	r3, r3, #1
 800bf76:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800bf7a:	428a      	cmp	r2, r1
 800bf7c:	bf0c      	ite	eq
 800bf7e:	2300      	moveq	r3, #0
 800bf80:	f003 0301 	andne.w	r3, r3, #1
 800bf84:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800bf88:	42aa      	cmp	r2, r5
 800bf8a:	bf0c      	ite	eq
 800bf8c:	2300      	moveq	r3, #0
 800bf8e:	f003 0301 	andne.w	r3, r3, #1
 800bf92:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800bf96:	4282      	cmp	r2, r0
 800bf98:	bf0c      	ite	eq
 800bf9a:	2300      	moveq	r3, #0
 800bf9c:	f003 0301 	andne.w	r3, r3, #1
 800bfa0:	f500 3098 	add.w	r0, r0, #77824	; 0x13000
 800bfa4:	428a      	cmp	r2, r1
 800bfa6:	bf0c      	ite	eq
 800bfa8:	2300      	moveq	r3, #0
 800bfaa:	f003 0301 	andne.w	r3, r3, #1
 800bfae:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
 800bfb2:	42aa      	cmp	r2, r5
 800bfb4:	bf0c      	ite	eq
 800bfb6:	2300      	moveq	r3, #0
 800bfb8:	f003 0301 	andne.w	r3, r3, #1
 800bfbc:	f505 4588 	add.w	r5, r5, #17408	; 0x4400
 800bfc0:	4282      	cmp	r2, r0
 800bfc2:	bf0c      	ite	eq
 800bfc4:	2300      	moveq	r3, #0
 800bfc6:	f003 0301 	andne.w	r3, r3, #1
 800bfca:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800bfce:	428a      	cmp	r2, r1
 800bfd0:	bf0c      	ite	eq
 800bfd2:	2300      	moveq	r3, #0
 800bfd4:	f003 0301 	andne.w	r3, r3, #1
 800bfd8:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800bfdc:	42aa      	cmp	r2, r5
 800bfde:	bf0c      	ite	eq
 800bfe0:	2300      	moveq	r3, #0
 800bfe2:	f003 0301 	andne.w	r3, r3, #1
 800bfe6:	4282      	cmp	r2, r0
 800bfe8:	bf0c      	ite	eq
 800bfea:	2300      	moveq	r3, #0
 800bfec:	f003 0301 	andne.w	r3, r3, #1
 800bff0:	428a      	cmp	r2, r1
 800bff2:	bf0c      	ite	eq
 800bff4:	2300      	moveq	r3, #0
 800bff6:	f003 0301 	andne.w	r3, r3, #1
 800bffa:	b113      	cbz	r3, 800c002 <HAL_TIM_Base_Start+0xb2>
 800bffc:	4b12      	ldr	r3, [pc, #72]	; (800c048 <HAL_TIM_Base_Start+0xf8>)
 800bffe:	429a      	cmp	r2, r3
 800c000:	d113      	bne.n	800c02a <HAL_TIM_Base_Start+0xda>
  htim->State = HAL_TIM_STATE_BUSY;
 800c002:	2102      	movs	r1, #2
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c004:	4b11      	ldr	r3, [pc, #68]	; (800c04c <HAL_TIM_Base_Start+0xfc>)
  htim->State = HAL_TIM_STATE_BUSY;
 800c006:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c00a:	6891      	ldr	r1, [r2, #8]
 800c00c:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c00e:	2b06      	cmp	r3, #6
 800c010:	d006      	beq.n	800c020 <HAL_TIM_Base_Start+0xd0>
 800c012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c016:	d003      	beq.n	800c020 <HAL_TIM_Base_Start+0xd0>
    __HAL_TIM_ENABLE(htim);
 800c018:	6813      	ldr	r3, [r2, #0]
 800c01a:	f043 0301 	orr.w	r3, r3, #1
 800c01e:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 800c020:	2301      	movs	r3, #1
}
 800c022:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800c024:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800c028:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800c02a:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800c02e:	4808      	ldr	r0, [pc, #32]	; (800c050 <HAL_TIM_Base_Start+0x100>)
 800c030:	f7f6 ffea 	bl	8003008 <assert_failed>
 800c034:	6822      	ldr	r2, [r4, #0]
 800c036:	e7e4      	b.n	800c002 <HAL_TIM_Base_Start+0xb2>
 800c038:	40010000 	.word	0x40010000
 800c03c:	40000400 	.word	0x40000400
 800c040:	40000800 	.word	0x40000800
 800c044:	40000c00 	.word	0x40000c00
 800c048:	40002000 	.word	0x40002000
 800c04c:	00010007 	.word	0x00010007
 800c050:	08026a84 	.word	0x08026a84

0800c054 <HAL_TIM_Base_Start_IT>:
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800c054:	6802      	ldr	r2, [r0, #0]
 800c056:	4938      	ldr	r1, [pc, #224]	; (800c138 <HAL_TIM_Base_Start_IT+0xe4>)
{
 800c058:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800c05a:	4b38      	ldr	r3, [pc, #224]	; (800c13c <HAL_TIM_Base_Start_IT+0xe8>)
 800c05c:	4c38      	ldr	r4, [pc, #224]	; (800c140 <HAL_TIM_Base_Start_IT+0xec>)
 800c05e:	429a      	cmp	r2, r3
 800c060:	bf18      	it	ne
 800c062:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800c066:	4d37      	ldr	r5, [pc, #220]	; (800c144 <HAL_TIM_Base_Start_IT+0xf0>)
 800c068:	bf14      	ite	ne
 800c06a:	2301      	movne	r3, #1
 800c06c:	2300      	moveq	r3, #0
 800c06e:	42a2      	cmp	r2, r4
 800c070:	bf0c      	ite	eq
 800c072:	2300      	moveq	r3, #0
 800c074:	f003 0301 	andne.w	r3, r3, #1
 800c078:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 800c07c:	428a      	cmp	r2, r1
 800c07e:	bf0c      	ite	eq
 800c080:	2300      	moveq	r3, #0
 800c082:	f003 0301 	andne.w	r3, r3, #1
 800c086:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800c08a:	42aa      	cmp	r2, r5
 800c08c:	bf0c      	ite	eq
 800c08e:	2300      	moveq	r3, #0
 800c090:	f003 0301 	andne.w	r3, r3, #1
 800c094:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800c098:	42a2      	cmp	r2, r4
 800c09a:	bf0c      	ite	eq
 800c09c:	2300      	moveq	r3, #0
 800c09e:	f003 0301 	andne.w	r3, r3, #1
 800c0a2:	f504 3498 	add.w	r4, r4, #77824	; 0x13000
 800c0a6:	428a      	cmp	r2, r1
 800c0a8:	bf0c      	ite	eq
 800c0aa:	2300      	moveq	r3, #0
 800c0ac:	f003 0301 	andne.w	r3, r3, #1
 800c0b0:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
 800c0b4:	42aa      	cmp	r2, r5
 800c0b6:	bf0c      	ite	eq
 800c0b8:	2300      	moveq	r3, #0
 800c0ba:	f003 0301 	andne.w	r3, r3, #1
 800c0be:	f505 4588 	add.w	r5, r5, #17408	; 0x4400
 800c0c2:	42a2      	cmp	r2, r4
 800c0c4:	bf0c      	ite	eq
 800c0c6:	2300      	moveq	r3, #0
 800c0c8:	f003 0301 	andne.w	r3, r3, #1
 800c0cc:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 800c0d0:	428a      	cmp	r2, r1
 800c0d2:	bf0c      	ite	eq
 800c0d4:	2300      	moveq	r3, #0
 800c0d6:	f003 0301 	andne.w	r3, r3, #1
 800c0da:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800c0de:	42aa      	cmp	r2, r5
 800c0e0:	bf0c      	ite	eq
 800c0e2:	2300      	moveq	r3, #0
 800c0e4:	f003 0301 	andne.w	r3, r3, #1
 800c0e8:	42a2      	cmp	r2, r4
 800c0ea:	bf0c      	ite	eq
 800c0ec:	2300      	moveq	r3, #0
 800c0ee:	f003 0301 	andne.w	r3, r3, #1
 800c0f2:	428a      	cmp	r2, r1
 800c0f4:	bf0c      	ite	eq
 800c0f6:	2300      	moveq	r3, #0
 800c0f8:	f003 0301 	andne.w	r3, r3, #1
 800c0fc:	b113      	cbz	r3, 800c104 <HAL_TIM_Base_Start_IT+0xb0>
 800c0fe:	4b12      	ldr	r3, [pc, #72]	; (800c148 <HAL_TIM_Base_Start_IT+0xf4>)
 800c100:	429a      	cmp	r2, r3
 800c102:	d111      	bne.n	800c128 <HAL_TIM_Base_Start_IT+0xd4>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c104:	68d1      	ldr	r1, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c106:	4b11      	ldr	r3, [pc, #68]	; (800c14c <HAL_TIM_Base_Start_IT+0xf8>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c108:	f041 0101 	orr.w	r1, r1, #1
 800c10c:	60d1      	str	r1, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c10e:	6891      	ldr	r1, [r2, #8]
 800c110:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c112:	2b06      	cmp	r3, #6
 800c114:	d006      	beq.n	800c124 <HAL_TIM_Base_Start_IT+0xd0>
 800c116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c11a:	d003      	beq.n	800c124 <HAL_TIM_Base_Start_IT+0xd0>
    __HAL_TIM_ENABLE(htim);
 800c11c:	6813      	ldr	r3, [r2, #0]
 800c11e:	f043 0301 	orr.w	r3, r3, #1
 800c122:	6013      	str	r3, [r2, #0]
}
 800c124:	2000      	movs	r0, #0
 800c126:	bd38      	pop	{r3, r4, r5, pc}
 800c128:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800c12a:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 800c12e:	4808      	ldr	r0, [pc, #32]	; (800c150 <HAL_TIM_Base_Start_IT+0xfc>)
 800c130:	f7f6 ff6a 	bl	8003008 <assert_failed>
 800c134:	6822      	ldr	r2, [r4, #0]
 800c136:	e7e5      	b.n	800c104 <HAL_TIM_Base_Start_IT+0xb0>
 800c138:	40000800 	.word	0x40000800
 800c13c:	40010000 	.word	0x40010000
 800c140:	40000400 	.word	0x40000400
 800c144:	40000c00 	.word	0x40000c00
 800c148:	40002000 	.word	0x40002000
 800c14c:	00010007 	.word	0x00010007
 800c150:	08026a84 	.word	0x08026a84

0800c154 <HAL_TIM_OC_MspInit>:
 800c154:	4770      	bx	lr
 800c156:	bf00      	nop

0800c158 <HAL_TIM_PWM_MspInit>:
 800c158:	4770      	bx	lr
 800c15a:	bf00      	nop

0800c15c <HAL_TIM_IC_MspInit>:
 800c15c:	4770      	bx	lr
 800c15e:	bf00      	nop

0800c160 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800c160:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800c164:	2b01      	cmp	r3, #1
 800c166:	f000 81c8 	beq.w	800c4fa <HAL_TIM_ConfigClockSource+0x39a>
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800c16a:	680a      	ldr	r2, [r1, #0]
 800c16c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800c170:	bf18      	it	ne
 800c172:	f5b2 5f00 	cmpne.w	r2, #8192	; 0x2000
{
 800c176:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800c178:	bf14      	ite	ne
 800c17a:	2301      	movne	r3, #1
 800c17c:	2300      	moveq	r3, #0
 800c17e:	f032 0630 	bics.w	r6, r2, #48	; 0x30
 800c182:	4604      	mov	r4, r0
 800c184:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 800c186:	f04f 0001 	mov.w	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800c18a:	f04f 0102 	mov.w	r1, #2
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800c18e:	bf08      	it	eq
 800c190:	2300      	moveq	r3, #0
  __HAL_LOCK(htim);
 800c192:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800c196:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800c19a:	b113      	cbz	r3, 800c1a2 <HAL_TIM_ConfigClockSource+0x42>
 800c19c:	2e40      	cmp	r6, #64	; 0x40
 800c19e:	f040 8242 	bne.w	800c626 <HAL_TIM_ConfigClockSource+0x4c6>
  tmpsmcr = htim->Instance->SMCR;
 800c1a2:	6823      	ldr	r3, [r4, #0]
  switch (sClockSourceConfig->ClockSource)
 800c1a4:	2a40      	cmp	r2, #64	; 0x40
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c1a6:	49a5      	ldr	r1, [pc, #660]	; (800c43c <HAL_TIM_ConfigClockSource+0x2dc>)
  tmpsmcr = htim->Instance->SMCR;
 800c1a8:	6898      	ldr	r0, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c1aa:	ea01 0100 	and.w	r1, r1, r0
  htim->Instance->SMCR = tmpsmcr;
 800c1ae:	6099      	str	r1, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 800c1b0:	f000 81d3 	beq.w	800c55a <HAL_TIM_ConfigClockSource+0x3fa>
 800c1b4:	f240 81a3 	bls.w	800c4fe <HAL_TIM_ConfigClockSource+0x39e>
 800c1b8:	2a70      	cmp	r2, #112	; 0x70
 800c1ba:	f000 814d 	beq.w	800c458 <HAL_TIM_ConfigClockSource+0x2f8>
 800c1be:	d84c      	bhi.n	800c25a <HAL_TIM_ConfigClockSource+0xfa>
 800c1c0:	2a50      	cmp	r2, #80	; 0x50
 800c1c2:	f000 8095 	beq.w	800c2f0 <HAL_TIM_ConfigClockSource+0x190>
 800c1c6:	2a60      	cmp	r2, #96	; 0x60
 800c1c8:	f040 812f 	bne.w	800c42a <HAL_TIM_ConfigClockSource+0x2ca>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800c1cc:	4a9c      	ldr	r2, [pc, #624]	; (800c440 <HAL_TIM_ConfigClockSource+0x2e0>)
 800c1ce:	499d      	ldr	r1, [pc, #628]	; (800c444 <HAL_TIM_ConfigClockSource+0x2e4>)
 800c1d0:	4293      	cmp	r3, r2
 800c1d2:	bf18      	it	ne
 800c1d4:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800c1d8:	489b      	ldr	r0, [pc, #620]	; (800c448 <HAL_TIM_ConfigClockSource+0x2e8>)
 800c1da:	bf14      	ite	ne
 800c1dc:	2201      	movne	r2, #1
 800c1de:	2200      	moveq	r2, #0
 800c1e0:	428b      	cmp	r3, r1
 800c1e2:	bf0c      	ite	eq
 800c1e4:	2200      	moveq	r2, #0
 800c1e6:	f002 0201 	andne.w	r2, r2, #1
 800c1ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c1ee:	4283      	cmp	r3, r0
 800c1f0:	bf0c      	ite	eq
 800c1f2:	2200      	moveq	r2, #0
 800c1f4:	f002 0201 	andne.w	r2, r2, #1
 800c1f8:	428b      	cmp	r3, r1
 800c1fa:	bf0c      	ite	eq
 800c1fc:	2200      	moveq	r2, #0
 800c1fe:	f002 0201 	andne.w	r2, r2, #1
 800c202:	b11a      	cbz	r2, 800c20c <HAL_TIM_ConfigClockSource+0xac>
 800c204:	4a91      	ldr	r2, [pc, #580]	; (800c44c <HAL_TIM_ConfigClockSource+0x2ec>)
 800c206:	4293      	cmp	r3, r2
 800c208:	f040 8201 	bne.w	800c60e <HAL_TIM_ConfigClockSource+0x4ae>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800c20c:	686b      	ldr	r3, [r5, #4]
 800c20e:	2b0a      	cmp	r3, #10
 800c210:	bf18      	it	ne
 800c212:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800c216:	d003      	beq.n	800c220 <HAL_TIM_ConfigClockSource+0xc0>
 800c218:	f033 0302 	bics.w	r3, r3, #2
 800c21c:	f040 8216 	bne.w	800c64c <HAL_TIM_ConfigClockSource+0x4ec>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800c220:	68ee      	ldr	r6, [r5, #12]
 800c222:	2e0f      	cmp	r6, #15
 800c224:	f200 823f 	bhi.w	800c6a6 <HAL_TIM_ConfigClockSource+0x546>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c228:	6823      	ldr	r3, [r4, #0]
 800c22a:	686d      	ldr	r5, [r5, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c22c:	6a18      	ldr	r0, [r3, #32]
 800c22e:	f020 0010 	bic.w	r0, r0, #16
 800c232:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c234:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800c236:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c238:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c23c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c240:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800c244:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800c248:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800c24a:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800c24c:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800c24e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c252:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800c256:	609a      	str	r2, [r3, #8]
 800c258:	e0e7      	b.n	800c42a <HAL_TIM_ConfigClockSource+0x2ca>
  switch (sClockSourceConfig->ClockSource)
 800c25a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800c25e:	f000 808d 	beq.w	800c37c <HAL_TIM_ConfigClockSource+0x21c>
 800c262:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800c266:	f040 80e0 	bne.w	800c42a <HAL_TIM_ConfigClockSource+0x2ca>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800c26a:	4a75      	ldr	r2, [pc, #468]	; (800c440 <HAL_TIM_ConfigClockSource+0x2e0>)
 800c26c:	4975      	ldr	r1, [pc, #468]	; (800c444 <HAL_TIM_ConfigClockSource+0x2e4>)
 800c26e:	4293      	cmp	r3, r2
 800c270:	bf18      	it	ne
 800c272:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800c276:	4874      	ldr	r0, [pc, #464]	; (800c448 <HAL_TIM_ConfigClockSource+0x2e8>)
 800c278:	bf14      	ite	ne
 800c27a:	2201      	movne	r2, #1
 800c27c:	2200      	moveq	r2, #0
 800c27e:	428b      	cmp	r3, r1
 800c280:	bf0c      	ite	eq
 800c282:	2200      	moveq	r2, #0
 800c284:	f002 0201 	andne.w	r2, r2, #1
 800c288:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c28c:	4283      	cmp	r3, r0
 800c28e:	bf0c      	ite	eq
 800c290:	2200      	moveq	r2, #0
 800c292:	f002 0201 	andne.w	r2, r2, #1
 800c296:	428b      	cmp	r3, r1
 800c298:	bf0c      	ite	eq
 800c29a:	2200      	moveq	r2, #0
 800c29c:	f002 0201 	andne.w	r2, r2, #1
 800c2a0:	b11a      	cbz	r2, 800c2aa <HAL_TIM_ConfigClockSource+0x14a>
 800c2a2:	4a6a      	ldr	r2, [pc, #424]	; (800c44c <HAL_TIM_ConfigClockSource+0x2ec>)
 800c2a4:	4293      	cmp	r3, r2
 800c2a6:	f040 81b8 	bne.w	800c61a <HAL_TIM_ConfigClockSource+0x4ba>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800c2aa:	68ab      	ldr	r3, [r5, #8]
 800c2ac:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800c2b0:	f040 8207 	bne.w	800c6c2 <HAL_TIM_ConfigClockSource+0x562>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800c2b4:	686b      	ldr	r3, [r5, #4]
 800c2b6:	2b0a      	cmp	r3, #10
 800c2b8:	bf18      	it	ne
 800c2ba:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800c2be:	d003      	beq.n	800c2c8 <HAL_TIM_ConfigClockSource+0x168>
 800c2c0:	f033 0302 	bics.w	r3, r3, #2
 800c2c4:	f040 81bc 	bne.w	800c640 <HAL_TIM_ConfigClockSource+0x4e0>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800c2c8:	68e8      	ldr	r0, [r5, #12]
 800c2ca:	280f      	cmp	r0, #15
 800c2cc:	f200 81dd 	bhi.w	800c68a <HAL_TIM_ConfigClockSource+0x52a>
      TIM_ETR_SetConfig(htim->Instance,
 800c2d0:	6822      	ldr	r2, [r4, #0]
 800c2d2:	68ab      	ldr	r3, [r5, #8]
  tmpsmcr = TIMx->SMCR;
 800c2d4:	6891      	ldr	r1, [r2, #8]
 800c2d6:	686d      	ldr	r5, [r5, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c2d8:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 800c2dc:	432b      	orrs	r3, r5
 800c2de:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c2e0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  TIMx->SMCR = tmpsmcr;
 800c2e4:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c2e6:	6893      	ldr	r3, [r2, #8]
 800c2e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c2ec:	6093      	str	r3, [r2, #8]
      break;
 800c2ee:	e09c      	b.n	800c42a <HAL_TIM_ConfigClockSource+0x2ca>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800c2f0:	4a53      	ldr	r2, [pc, #332]	; (800c440 <HAL_TIM_ConfigClockSource+0x2e0>)
 800c2f2:	4954      	ldr	r1, [pc, #336]	; (800c444 <HAL_TIM_ConfigClockSource+0x2e4>)
 800c2f4:	4293      	cmp	r3, r2
 800c2f6:	bf18      	it	ne
 800c2f8:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800c2fc:	4852      	ldr	r0, [pc, #328]	; (800c448 <HAL_TIM_ConfigClockSource+0x2e8>)
 800c2fe:	bf14      	ite	ne
 800c300:	2201      	movne	r2, #1
 800c302:	2200      	moveq	r2, #0
 800c304:	428b      	cmp	r3, r1
 800c306:	bf0c      	ite	eq
 800c308:	2200      	moveq	r2, #0
 800c30a:	f002 0201 	andne.w	r2, r2, #1
 800c30e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c312:	4283      	cmp	r3, r0
 800c314:	bf0c      	ite	eq
 800c316:	2200      	moveq	r2, #0
 800c318:	f002 0201 	andne.w	r2, r2, #1
 800c31c:	428b      	cmp	r3, r1
 800c31e:	bf0c      	ite	eq
 800c320:	2200      	moveq	r2, #0
 800c322:	f002 0201 	andne.w	r2, r2, #1
 800c326:	b11a      	cbz	r2, 800c330 <HAL_TIM_ConfigClockSource+0x1d0>
 800c328:	4a48      	ldr	r2, [pc, #288]	; (800c44c <HAL_TIM_ConfigClockSource+0x2ec>)
 800c32a:	4293      	cmp	r3, r2
 800c32c:	f040 8169 	bne.w	800c602 <HAL_TIM_ConfigClockSource+0x4a2>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800c330:	686b      	ldr	r3, [r5, #4]
 800c332:	2b0a      	cmp	r3, #10
 800c334:	bf18      	it	ne
 800c336:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800c33a:	d003      	beq.n	800c344 <HAL_TIM_ConfigClockSource+0x1e4>
 800c33c:	f033 0302 	bics.w	r3, r3, #2
 800c340:	f040 818a 	bne.w	800c658 <HAL_TIM_ConfigClockSource+0x4f8>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800c344:	68ee      	ldr	r6, [r5, #12]
 800c346:	2e0f      	cmp	r6, #15
 800c348:	f200 81b4 	bhi.w	800c6b4 <HAL_TIM_ConfigClockSource+0x554>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c34c:	6823      	ldr	r3, [r4, #0]
 800c34e:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 800c350:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c352:	6a18      	ldr	r0, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c354:	f025 050a 	bic.w	r5, r5, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c358:	f020 0001 	bic.w	r0, r0, #1
  tmpccer |= TIM_ICPolarity;
 800c35c:	4329      	orrs	r1, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c35e:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c360:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c362:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c366:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800c36a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c36c:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800c36e:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800c370:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c374:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800c378:	609a      	str	r2, [r3, #8]
 800c37a:	e056      	b.n	800c42a <HAL_TIM_ConfigClockSource+0x2ca>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800c37c:	4a30      	ldr	r2, [pc, #192]	; (800c440 <HAL_TIM_ConfigClockSource+0x2e0>)
 800c37e:	4831      	ldr	r0, [pc, #196]	; (800c444 <HAL_TIM_ConfigClockSource+0x2e4>)
 800c380:	4293      	cmp	r3, r2
 800c382:	bf18      	it	ne
 800c384:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800c388:	492f      	ldr	r1, [pc, #188]	; (800c448 <HAL_TIM_ConfigClockSource+0x2e8>)
 800c38a:	4d31      	ldr	r5, [pc, #196]	; (800c450 <HAL_TIM_ConfigClockSource+0x2f0>)
 800c38c:	bf14      	ite	ne
 800c38e:	2201      	movne	r2, #1
 800c390:	2200      	moveq	r2, #0
 800c392:	4283      	cmp	r3, r0
 800c394:	bf0c      	ite	eq
 800c396:	2200      	moveq	r2, #0
 800c398:	f002 0201 	andne.w	r2, r2, #1
 800c39c:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800c3a0:	428b      	cmp	r3, r1
 800c3a2:	bf0c      	ite	eq
 800c3a4:	2200      	moveq	r2, #0
 800c3a6:	f002 0201 	andne.w	r2, r2, #1
 800c3aa:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800c3ae:	42ab      	cmp	r3, r5
 800c3b0:	bf0c      	ite	eq
 800c3b2:	2200      	moveq	r2, #0
 800c3b4:	f002 0201 	andne.w	r2, r2, #1
 800c3b8:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800c3bc:	4283      	cmp	r3, r0
 800c3be:	bf0c      	ite	eq
 800c3c0:	2200      	moveq	r2, #0
 800c3c2:	f002 0201 	andne.w	r2, r2, #1
 800c3c6:	f500 3098 	add.w	r0, r0, #77824	; 0x13000
 800c3ca:	428b      	cmp	r3, r1
 800c3cc:	bf0c      	ite	eq
 800c3ce:	2200      	moveq	r2, #0
 800c3d0:	f002 0201 	andne.w	r2, r2, #1
 800c3d4:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
 800c3d8:	42ab      	cmp	r3, r5
 800c3da:	bf0c      	ite	eq
 800c3dc:	2200      	moveq	r2, #0
 800c3de:	f002 0201 	andne.w	r2, r2, #1
 800c3e2:	f505 4588 	add.w	r5, r5, #17408	; 0x4400
 800c3e6:	4283      	cmp	r3, r0
 800c3e8:	bf0c      	ite	eq
 800c3ea:	2200      	moveq	r2, #0
 800c3ec:	f002 0201 	andne.w	r2, r2, #1
 800c3f0:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800c3f4:	428b      	cmp	r3, r1
 800c3f6:	bf0c      	ite	eq
 800c3f8:	2200      	moveq	r2, #0
 800c3fa:	f002 0201 	andne.w	r2, r2, #1
 800c3fe:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800c402:	42ab      	cmp	r3, r5
 800c404:	bf0c      	ite	eq
 800c406:	2200      	moveq	r2, #0
 800c408:	f002 0201 	andne.w	r2, r2, #1
 800c40c:	4283      	cmp	r3, r0
 800c40e:	bf0c      	ite	eq
 800c410:	2200      	moveq	r2, #0
 800c412:	f002 0201 	andne.w	r2, r2, #1
 800c416:	428b      	cmp	r3, r1
 800c418:	bf0c      	ite	eq
 800c41a:	2200      	moveq	r2, #0
 800c41c:	f002 0201 	andne.w	r2, r2, #1
 800c420:	b11a      	cbz	r2, 800c42a <HAL_TIM_ConfigClockSource+0x2ca>
 800c422:	4a0c      	ldr	r2, [pc, #48]	; (800c454 <HAL_TIM_ConfigClockSource+0x2f4>)
 800c424:	4293      	cmp	r3, r2
 800c426:	f040 8158 	bne.w	800c6da <HAL_TIM_ConfigClockSource+0x57a>
  __HAL_UNLOCK(htim);
 800c42a:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800c42c:	2201      	movs	r2, #1
  return HAL_OK;
 800c42e:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800c430:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800c434:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800c438:	bd70      	pop	{r4, r5, r6, pc}
 800c43a:	bf00      	nop
 800c43c:	fffe0088 	.word	0xfffe0088
 800c440:	40010000 	.word	0x40010000
 800c444:	40000400 	.word	0x40000400
 800c448:	40000800 	.word	0x40000800
 800c44c:	40010400 	.word	0x40010400
 800c450:	40000c00 	.word	0x40000c00
 800c454:	40002000 	.word	0x40002000
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800c458:	4aa3      	ldr	r2, [pc, #652]	; (800c6e8 <HAL_TIM_ConfigClockSource+0x588>)
 800c45a:	49a4      	ldr	r1, [pc, #656]	; (800c6ec <HAL_TIM_ConfigClockSource+0x58c>)
 800c45c:	4293      	cmp	r3, r2
 800c45e:	bf18      	it	ne
 800c460:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800c464:	48a2      	ldr	r0, [pc, #648]	; (800c6f0 <HAL_TIM_ConfigClockSource+0x590>)
 800c466:	bf14      	ite	ne
 800c468:	2201      	movne	r2, #1
 800c46a:	2200      	moveq	r2, #0
 800c46c:	428b      	cmp	r3, r1
 800c46e:	bf0c      	ite	eq
 800c470:	2200      	moveq	r2, #0
 800c472:	f002 0201 	andne.w	r2, r2, #1
 800c476:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c47a:	4283      	cmp	r3, r0
 800c47c:	bf0c      	ite	eq
 800c47e:	2200      	moveq	r2, #0
 800c480:	f002 0201 	andne.w	r2, r2, #1
 800c484:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800c488:	428b      	cmp	r3, r1
 800c48a:	bf0c      	ite	eq
 800c48c:	2200      	moveq	r2, #0
 800c48e:	f002 0201 	andne.w	r2, r2, #1
 800c492:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800c496:	4283      	cmp	r3, r0
 800c498:	bf0c      	ite	eq
 800c49a:	2200      	moveq	r2, #0
 800c49c:	f002 0201 	andne.w	r2, r2, #1
 800c4a0:	428b      	cmp	r3, r1
 800c4a2:	bf0c      	ite	eq
 800c4a4:	2200      	moveq	r2, #0
 800c4a6:	f002 0201 	andne.w	r2, r2, #1
 800c4aa:	b11a      	cbz	r2, 800c4b4 <HAL_TIM_ConfigClockSource+0x354>
 800c4ac:	4a91      	ldr	r2, [pc, #580]	; (800c6f4 <HAL_TIM_ConfigClockSource+0x594>)
 800c4ae:	4293      	cmp	r3, r2
 800c4b0:	f040 80de 	bne.w	800c670 <HAL_TIM_ConfigClockSource+0x510>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800c4b4:	68ab      	ldr	r3, [r5, #8]
 800c4b6:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800c4ba:	f040 8108 	bne.w	800c6ce <HAL_TIM_ConfigClockSource+0x56e>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800c4be:	686b      	ldr	r3, [r5, #4]
 800c4c0:	2b0a      	cmp	r3, #10
 800c4c2:	bf18      	it	ne
 800c4c4:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800c4c8:	d003      	beq.n	800c4d2 <HAL_TIM_ConfigClockSource+0x372>
 800c4ca:	f033 0302 	bics.w	r3, r3, #2
 800c4ce:	f040 80c9 	bne.w	800c664 <HAL_TIM_ConfigClockSource+0x504>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800c4d2:	68e8      	ldr	r0, [r5, #12]
 800c4d4:	280f      	cmp	r0, #15
 800c4d6:	f200 80d1 	bhi.w	800c67c <HAL_TIM_ConfigClockSource+0x51c>
      TIM_ETR_SetConfig(htim->Instance,
 800c4da:	6822      	ldr	r2, [r4, #0]
 800c4dc:	68ab      	ldr	r3, [r5, #8]
  tmpsmcr = TIMx->SMCR;
 800c4de:	6891      	ldr	r1, [r2, #8]
 800c4e0:	686d      	ldr	r5, [r5, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c4e2:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 800c4e6:	432b      	orrs	r3, r5
 800c4e8:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c4ea:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  TIMx->SMCR = tmpsmcr;
 800c4ee:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 800c4f0:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c4f2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800c4f6:	6093      	str	r3, [r2, #8]
      break;
 800c4f8:	e797      	b.n	800c42a <HAL_TIM_ConfigClockSource+0x2ca>
  __HAL_LOCK(htim);
 800c4fa:	2002      	movs	r0, #2
}
 800c4fc:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800c4fe:	2a10      	cmp	r2, #16
 800c500:	d004      	beq.n	800c50c <HAL_TIM_ConfigClockSource+0x3ac>
 800c502:	d96d      	bls.n	800c5e0 <HAL_TIM_ConfigClockSource+0x480>
 800c504:	2a20      	cmp	r2, #32
 800c506:	d001      	beq.n	800c50c <HAL_TIM_ConfigClockSource+0x3ac>
 800c508:	2a30      	cmp	r2, #48	; 0x30
 800c50a:	d18e      	bne.n	800c42a <HAL_TIM_ConfigClockSource+0x2ca>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800c50c:	4976      	ldr	r1, [pc, #472]	; (800c6e8 <HAL_TIM_ConfigClockSource+0x588>)
 800c50e:	4877      	ldr	r0, [pc, #476]	; (800c6ec <HAL_TIM_ConfigClockSource+0x58c>)
 800c510:	428b      	cmp	r3, r1
 800c512:	bf18      	it	ne
 800c514:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800c518:	4e75      	ldr	r6, [pc, #468]	; (800c6f0 <HAL_TIM_ConfigClockSource+0x590>)
 800c51a:	bf14      	ite	ne
 800c51c:	2101      	movne	r1, #1
 800c51e:	2100      	moveq	r1, #0
 800c520:	4283      	cmp	r3, r0
 800c522:	bf0c      	ite	eq
 800c524:	2100      	moveq	r1, #0
 800c526:	f001 0101 	andne.w	r1, r1, #1
 800c52a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800c52e:	42b3      	cmp	r3, r6
 800c530:	bf0c      	ite	eq
 800c532:	2100      	moveq	r1, #0
 800c534:	f001 0101 	andne.w	r1, r1, #1
 800c538:	4283      	cmp	r3, r0
 800c53a:	bf0c      	ite	eq
 800c53c:	2100      	moveq	r1, #0
 800c53e:	f001 0101 	andne.w	r1, r1, #1
 800c542:	b111      	cbz	r1, 800c54a <HAL_TIM_ConfigClockSource+0x3ea>
 800c544:	496c      	ldr	r1, [pc, #432]	; (800c6f8 <HAL_TIM_ConfigClockSource+0x598>)
 800c546:	428b      	cmp	r3, r1
 800c548:	d153      	bne.n	800c5f2 <HAL_TIM_ConfigClockSource+0x492>
  tmpsmcr = TIMx->SMCR;
 800c54a:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c54c:	f042 0207 	orr.w	r2, r2, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 800c550:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c554:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 800c556:	609a      	str	r2, [r3, #8]
 800c558:	e767      	b.n	800c42a <HAL_TIM_ConfigClockSource+0x2ca>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800c55a:	4a63      	ldr	r2, [pc, #396]	; (800c6e8 <HAL_TIM_ConfigClockSource+0x588>)
 800c55c:	4963      	ldr	r1, [pc, #396]	; (800c6ec <HAL_TIM_ConfigClockSource+0x58c>)
 800c55e:	4293      	cmp	r3, r2
 800c560:	bf18      	it	ne
 800c562:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800c566:	4862      	ldr	r0, [pc, #392]	; (800c6f0 <HAL_TIM_ConfigClockSource+0x590>)
 800c568:	bf14      	ite	ne
 800c56a:	2201      	movne	r2, #1
 800c56c:	2200      	moveq	r2, #0
 800c56e:	428b      	cmp	r3, r1
 800c570:	bf0c      	ite	eq
 800c572:	2200      	moveq	r2, #0
 800c574:	f002 0201 	andne.w	r2, r2, #1
 800c578:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c57c:	4283      	cmp	r3, r0
 800c57e:	bf0c      	ite	eq
 800c580:	2200      	moveq	r2, #0
 800c582:	f002 0201 	andne.w	r2, r2, #1
 800c586:	428b      	cmp	r3, r1
 800c588:	bf0c      	ite	eq
 800c58a:	2200      	moveq	r2, #0
 800c58c:	f002 0201 	andne.w	r2, r2, #1
 800c590:	b112      	cbz	r2, 800c598 <HAL_TIM_ConfigClockSource+0x438>
 800c592:	4a59      	ldr	r2, [pc, #356]	; (800c6f8 <HAL_TIM_ConfigClockSource+0x598>)
 800c594:	4293      	cmp	r3, r2
 800c596:	d126      	bne.n	800c5e6 <HAL_TIM_ConfigClockSource+0x486>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800c598:	686b      	ldr	r3, [r5, #4]
 800c59a:	2b0a      	cmp	r3, #10
 800c59c:	bf18      	it	ne
 800c59e:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800c5a2:	d002      	beq.n	800c5aa <HAL_TIM_ConfigClockSource+0x44a>
 800c5a4:	f033 0302 	bics.w	r3, r3, #2
 800c5a8:	d144      	bne.n	800c634 <HAL_TIM_ConfigClockSource+0x4d4>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800c5aa:	68ee      	ldr	r6, [r5, #12]
 800c5ac:	2e0f      	cmp	r6, #15
 800c5ae:	d873      	bhi.n	800c698 <HAL_TIM_ConfigClockSource+0x538>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c5b0:	6823      	ldr	r3, [r4, #0]
 800c5b2:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 800c5b4:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c5b6:	6a18      	ldr	r0, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c5b8:	f025 050a 	bic.w	r5, r5, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c5bc:	f020 0001 	bic.w	r0, r0, #1
  tmpccer |= TIM_ICPolarity;
 800c5c0:	4329      	orrs	r1, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c5c2:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c5c4:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c5c6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c5ca:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800c5ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c5d0:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800c5d2:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800c5d4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c5d8:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800c5dc:	609a      	str	r2, [r3, #8]
 800c5de:	e724      	b.n	800c42a <HAL_TIM_ConfigClockSource+0x2ca>
  switch (sClockSourceConfig->ClockSource)
 800c5e0:	2a00      	cmp	r2, #0
 800c5e2:	d093      	beq.n	800c50c <HAL_TIM_ConfigClockSource+0x3ac>
 800c5e4:	e721      	b.n	800c42a <HAL_TIM_ConfigClockSource+0x2ca>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800c5e6:	f241 2169 	movw	r1, #4713	; 0x1269
 800c5ea:	4844      	ldr	r0, [pc, #272]	; (800c6fc <HAL_TIM_ConfigClockSource+0x59c>)
 800c5ec:	f7f6 fd0c 	bl	8003008 <assert_failed>
 800c5f0:	e7d2      	b.n	800c598 <HAL_TIM_ConfigClockSource+0x438>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800c5f2:	f241 217c 	movw	r1, #4732	; 0x127c
 800c5f6:	4841      	ldr	r0, [pc, #260]	; (800c6fc <HAL_TIM_ConfigClockSource+0x59c>)
 800c5f8:	f7f6 fd06 	bl	8003008 <assert_failed>
 800c5fc:	682a      	ldr	r2, [r5, #0]
 800c5fe:	6823      	ldr	r3, [r4, #0]
 800c600:	e7a3      	b.n	800c54a <HAL_TIM_ConfigClockSource+0x3ea>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800c602:	f241 2149 	movw	r1, #4681	; 0x1249
 800c606:	483d      	ldr	r0, [pc, #244]	; (800c6fc <HAL_TIM_ConfigClockSource+0x59c>)
 800c608:	f7f6 fcfe 	bl	8003008 <assert_failed>
 800c60c:	e690      	b.n	800c330 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800c60e:	f241 2159 	movw	r1, #4697	; 0x1259
 800c612:	483a      	ldr	r0, [pc, #232]	; (800c6fc <HAL_TIM_ConfigClockSource+0x59c>)
 800c614:	f7f6 fcf8 	bl	8003008 <assert_failed>
 800c618:	e5f8      	b.n	800c20c <HAL_TIM_ConfigClockSource+0xac>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800c61a:	f241 2135 	movw	r1, #4661	; 0x1235
 800c61e:	4837      	ldr	r0, [pc, #220]	; (800c6fc <HAL_TIM_ConfigClockSource+0x59c>)
 800c620:	f7f6 fcf2 	bl	8003008 <assert_failed>
 800c624:	e641      	b.n	800c2aa <HAL_TIM_ConfigClockSource+0x14a>
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800c626:	f241 210a 	movw	r1, #4618	; 0x120a
 800c62a:	4834      	ldr	r0, [pc, #208]	; (800c6fc <HAL_TIM_ConfigClockSource+0x59c>)
 800c62c:	f7f6 fcec 	bl	8003008 <assert_failed>
 800c630:	682a      	ldr	r2, [r5, #0]
 800c632:	e5b6      	b.n	800c1a2 <HAL_TIM_ConfigClockSource+0x42>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800c634:	f241 216c 	movw	r1, #4716	; 0x126c
 800c638:	4830      	ldr	r0, [pc, #192]	; (800c6fc <HAL_TIM_ConfigClockSource+0x59c>)
 800c63a:	f7f6 fce5 	bl	8003008 <assert_failed>
 800c63e:	e7b4      	b.n	800c5aa <HAL_TIM_ConfigClockSource+0x44a>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800c640:	f241 2139 	movw	r1, #4665	; 0x1239
 800c644:	482d      	ldr	r0, [pc, #180]	; (800c6fc <HAL_TIM_ConfigClockSource+0x59c>)
 800c646:	f7f6 fcdf 	bl	8003008 <assert_failed>
 800c64a:	e63d      	b.n	800c2c8 <HAL_TIM_ConfigClockSource+0x168>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800c64c:	f241 215c 	movw	r1, #4700	; 0x125c
 800c650:	482a      	ldr	r0, [pc, #168]	; (800c6fc <HAL_TIM_ConfigClockSource+0x59c>)
 800c652:	f7f6 fcd9 	bl	8003008 <assert_failed>
 800c656:	e5e3      	b.n	800c220 <HAL_TIM_ConfigClockSource+0xc0>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800c658:	f241 214c 	movw	r1, #4684	; 0x124c
 800c65c:	4827      	ldr	r0, [pc, #156]	; (800c6fc <HAL_TIM_ConfigClockSource+0x59c>)
 800c65e:	f7f6 fcd3 	bl	8003008 <assert_failed>
 800c662:	e66f      	b.n	800c344 <HAL_TIM_ConfigClockSource+0x1e4>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800c664:	f241 2121 	movw	r1, #4641	; 0x1221
 800c668:	4824      	ldr	r0, [pc, #144]	; (800c6fc <HAL_TIM_ConfigClockSource+0x59c>)
 800c66a:	f7f6 fccd 	bl	8003008 <assert_failed>
 800c66e:	e730      	b.n	800c4d2 <HAL_TIM_ConfigClockSource+0x372>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800c670:	f241 211d 	movw	r1, #4637	; 0x121d
 800c674:	4821      	ldr	r0, [pc, #132]	; (800c6fc <HAL_TIM_ConfigClockSource+0x59c>)
 800c676:	f7f6 fcc7 	bl	8003008 <assert_failed>
 800c67a:	e71b      	b.n	800c4b4 <HAL_TIM_ConfigClockSource+0x354>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800c67c:	481f      	ldr	r0, [pc, #124]	; (800c6fc <HAL_TIM_ConfigClockSource+0x59c>)
 800c67e:	f241 2122 	movw	r1, #4642	; 0x1222
 800c682:	f7f6 fcc1 	bl	8003008 <assert_failed>
 800c686:	68e8      	ldr	r0, [r5, #12]
 800c688:	e727      	b.n	800c4da <HAL_TIM_ConfigClockSource+0x37a>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800c68a:	481c      	ldr	r0, [pc, #112]	; (800c6fc <HAL_TIM_ConfigClockSource+0x59c>)
 800c68c:	f241 213a 	movw	r1, #4666	; 0x123a
 800c690:	f7f6 fcba 	bl	8003008 <assert_failed>
 800c694:	68e8      	ldr	r0, [r5, #12]
 800c696:	e61b      	b.n	800c2d0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800c698:	f241 216d 	movw	r1, #4717	; 0x126d
 800c69c:	4817      	ldr	r0, [pc, #92]	; (800c6fc <HAL_TIM_ConfigClockSource+0x59c>)
 800c69e:	f7f6 fcb3 	bl	8003008 <assert_failed>
 800c6a2:	68ee      	ldr	r6, [r5, #12]
 800c6a4:	e784      	b.n	800c5b0 <HAL_TIM_ConfigClockSource+0x450>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800c6a6:	f241 215d 	movw	r1, #4701	; 0x125d
 800c6aa:	4814      	ldr	r0, [pc, #80]	; (800c6fc <HAL_TIM_ConfigClockSource+0x59c>)
 800c6ac:	f7f6 fcac 	bl	8003008 <assert_failed>
 800c6b0:	68ee      	ldr	r6, [r5, #12]
 800c6b2:	e5b9      	b.n	800c228 <HAL_TIM_ConfigClockSource+0xc8>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800c6b4:	f241 214d 	movw	r1, #4685	; 0x124d
 800c6b8:	4810      	ldr	r0, [pc, #64]	; (800c6fc <HAL_TIM_ConfigClockSource+0x59c>)
 800c6ba:	f7f6 fca5 	bl	8003008 <assert_failed>
 800c6be:	68ee      	ldr	r6, [r5, #12]
 800c6c0:	e644      	b.n	800c34c <HAL_TIM_ConfigClockSource+0x1ec>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800c6c2:	f241 2138 	movw	r1, #4664	; 0x1238
 800c6c6:	480d      	ldr	r0, [pc, #52]	; (800c6fc <HAL_TIM_ConfigClockSource+0x59c>)
 800c6c8:	f7f6 fc9e 	bl	8003008 <assert_failed>
 800c6cc:	e5f2      	b.n	800c2b4 <HAL_TIM_ConfigClockSource+0x154>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800c6ce:	f44f 5191 	mov.w	r1, #4640	; 0x1220
 800c6d2:	480a      	ldr	r0, [pc, #40]	; (800c6fc <HAL_TIM_ConfigClockSource+0x59c>)
 800c6d4:	f7f6 fc98 	bl	8003008 <assert_failed>
 800c6d8:	e6f1      	b.n	800c4be <HAL_TIM_ConfigClockSource+0x35e>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800c6da:	f241 2116 	movw	r1, #4630	; 0x1216
 800c6de:	4807      	ldr	r0, [pc, #28]	; (800c6fc <HAL_TIM_ConfigClockSource+0x59c>)
 800c6e0:	f7f6 fc92 	bl	8003008 <assert_failed>
 800c6e4:	e6a1      	b.n	800c42a <HAL_TIM_ConfigClockSource+0x2ca>
 800c6e6:	bf00      	nop
 800c6e8:	40010000 	.word	0x40010000
 800c6ec:	40000400 	.word	0x40000400
 800c6f0:	40000800 	.word	0x40000800
 800c6f4:	40001800 	.word	0x40001800
 800c6f8:	40010400 	.word	0x40010400
 800c6fc:	08026a84 	.word	0x08026a84

0800c700 <HAL_TIM_SlaveConfigSynchro>:
{
 800c700:	b570      	push	{r4, r5, r6, lr}
 800c702:	4604      	mov	r4, r0
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800c704:	4b39      	ldr	r3, [pc, #228]	; (800c7ec <HAL_TIM_SlaveConfigSynchro+0xec>)
 800c706:	483a      	ldr	r0, [pc, #232]	; (800c7f0 <HAL_TIM_SlaveConfigSynchro+0xf0>)
{
 800c708:	460d      	mov	r5, r1
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800c70a:	6822      	ldr	r2, [r4, #0]
 800c70c:	4939      	ldr	r1, [pc, #228]	; (800c7f4 <HAL_TIM_SlaveConfigSynchro+0xf4>)
 800c70e:	429a      	cmp	r2, r3
 800c710:	bf18      	it	ne
 800c712:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800c716:	4e38      	ldr	r6, [pc, #224]	; (800c7f8 <HAL_TIM_SlaveConfigSynchro+0xf8>)
 800c718:	bf14      	ite	ne
 800c71a:	2301      	movne	r3, #1
 800c71c:	2300      	moveq	r3, #0
 800c71e:	4282      	cmp	r2, r0
 800c720:	bf0c      	ite	eq
 800c722:	2300      	moveq	r3, #0
 800c724:	f003 0301 	andne.w	r3, r3, #1
 800c728:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 800c72c:	428a      	cmp	r2, r1
 800c72e:	bf0c      	ite	eq
 800c730:	2300      	moveq	r3, #0
 800c732:	f003 0301 	andne.w	r3, r3, #1
 800c736:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 800c73a:	42b2      	cmp	r2, r6
 800c73c:	bf0c      	ite	eq
 800c73e:	2300      	moveq	r3, #0
 800c740:	f003 0301 	andne.w	r3, r3, #1
 800c744:	4282      	cmp	r2, r0
 800c746:	bf0c      	ite	eq
 800c748:	2300      	moveq	r3, #0
 800c74a:	f003 0301 	andne.w	r3, r3, #1
 800c74e:	428a      	cmp	r2, r1
 800c750:	bf0c      	ite	eq
 800c752:	2300      	moveq	r3, #0
 800c754:	f003 0301 	andne.w	r3, r3, #1
 800c758:	b113      	cbz	r3, 800c760 <HAL_TIM_SlaveConfigSynchro+0x60>
 800c75a:	4b28      	ldr	r3, [pc, #160]	; (800c7fc <HAL_TIM_SlaveConfigSynchro+0xfc>)
 800c75c:	429a      	cmp	r2, r3
 800c75e:	d138      	bne.n	800c7d2 <HAL_TIM_SlaveConfigSynchro+0xd2>
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 800c760:	682b      	ldr	r3, [r5, #0]
 800c762:	1f1a      	subs	r2, r3, #4
 800c764:	2a03      	cmp	r2, #3
 800c766:	d902      	bls.n	800c76e <HAL_TIM_SlaveConfigSynchro+0x6e>
 800c768:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800c76c:	d12b      	bne.n	800c7c6 <HAL_TIM_SlaveConfigSynchro+0xc6>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 800c76e:	686b      	ldr	r3, [r5, #4]
 800c770:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800c774:	2b40      	cmp	r3, #64	; 0x40
 800c776:	d000      	beq.n	800c77a <HAL_TIM_SlaveConfigSynchro+0x7a>
 800c778:	bb8b      	cbnz	r3, 800c7de <HAL_TIM_SlaveConfigSynchro+0xde>
  __HAL_LOCK(htim);
 800c77a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800c77e:	2b01      	cmp	r3, #1
 800c780:	d01f      	beq.n	800c7c2 <HAL_TIM_SlaveConfigSynchro+0xc2>
 800c782:	2601      	movs	r6, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800c784:	2302      	movs	r3, #2
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800c786:	4629      	mov	r1, r5
 800c788:	4620      	mov	r0, r4
  __HAL_LOCK(htim);
 800c78a:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800c78e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800c792:	f7ff f9b3 	bl	800bafc <TIM_SlaveTimer_SetConfig>
 800c796:	b968      	cbnz	r0, 800c7b4 <HAL_TIM_SlaveConfigSynchro+0xb4>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800c798:	6823      	ldr	r3, [r4, #0]
 800c79a:	68da      	ldr	r2, [r3, #12]
 800c79c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c7a0:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800c7a2:	68da      	ldr	r2, [r3, #12]
 800c7a4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c7a8:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 800c7aa:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800c7ae:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800c7b2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(htim);
 800c7b4:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 800c7b6:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
    return HAL_ERROR;
 800c7ba:	4630      	mov	r0, r6
    __HAL_UNLOCK(htim);
 800c7bc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800c7c0:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 800c7c2:	2002      	movs	r0, #2
}
 800c7c4:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 800c7c6:	f241 21bc 	movw	r1, #4796	; 0x12bc
 800c7ca:	480d      	ldr	r0, [pc, #52]	; (800c800 <HAL_TIM_SlaveConfigSynchro+0x100>)
 800c7cc:	f7f6 fc1c 	bl	8003008 <assert_failed>
 800c7d0:	e7cd      	b.n	800c76e <HAL_TIM_SlaveConfigSynchro+0x6e>
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800c7d2:	f241 21bb 	movw	r1, #4795	; 0x12bb
 800c7d6:	480a      	ldr	r0, [pc, #40]	; (800c800 <HAL_TIM_SlaveConfigSynchro+0x100>)
 800c7d8:	f7f6 fc16 	bl	8003008 <assert_failed>
 800c7dc:	e7c0      	b.n	800c760 <HAL_TIM_SlaveConfigSynchro+0x60>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 800c7de:	f241 21bd 	movw	r1, #4797	; 0x12bd
 800c7e2:	4807      	ldr	r0, [pc, #28]	; (800c800 <HAL_TIM_SlaveConfigSynchro+0x100>)
 800c7e4:	f7f6 fc10 	bl	8003008 <assert_failed>
 800c7e8:	e7c7      	b.n	800c77a <HAL_TIM_SlaveConfigSynchro+0x7a>
 800c7ea:	bf00      	nop
 800c7ec:	40010000 	.word	0x40010000
 800c7f0:	40000400 	.word	0x40000400
 800c7f4:	40000800 	.word	0x40000800
 800c7f8:	40000c00 	.word	0x40000c00
 800c7fc:	40001800 	.word	0x40001800
 800c800:	08026a84 	.word	0x08026a84

0800c804 <HAL_TIM_OC_DelayElapsedCallback>:
 800c804:	4770      	bx	lr
 800c806:	bf00      	nop

0800c808 <TIM_DMACaptureCplt>:
{
 800c808:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c80a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 800c80c:	2301      	movs	r3, #1
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c80e:	6a62      	ldr	r2, [r4, #36]	; 0x24
  htim->State = HAL_TIM_STATE_READY;
 800c810:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c814:	4282      	cmp	r2, r0
 800c816:	d00f      	beq.n	800c838 <TIM_DMACaptureCplt+0x30>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800c818:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c81a:	4283      	cmp	r3, r0
 800c81c:	d01b      	beq.n	800c856 <TIM_DMACaptureCplt+0x4e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800c81e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c820:	4283      	cmp	r3, r0
 800c822:	d010      	beq.n	800c846 <TIM_DMACaptureCplt+0x3e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800c824:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c826:	4283      	cmp	r3, r0
 800c828:	d005      	beq.n	800c836 <TIM_DMACaptureCplt+0x2e>
  HAL_TIM_IC_CaptureCallback(htim);
 800c82a:	4620      	mov	r0, r4
 800c82c:	f7f5 fb58 	bl	8001ee0 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c830:	2300      	movs	r3, #0
 800c832:	7723      	strb	r3, [r4, #28]
}
 800c834:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c836:	2308      	movs	r3, #8
 800c838:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureCallback(htim);
 800c83a:	4620      	mov	r0, r4
 800c83c:	f7f5 fb50 	bl	8001ee0 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c840:	2300      	movs	r3, #0
 800c842:	7723      	strb	r3, [r4, #28]
}
 800c844:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c846:	2304      	movs	r3, #4
  HAL_TIM_IC_CaptureCallback(htim);
 800c848:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c84a:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureCallback(htim);
 800c84c:	f7f5 fb48 	bl	8001ee0 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c850:	2300      	movs	r3, #0
 800c852:	7723      	strb	r3, [r4, #28]
}
 800c854:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c856:	2302      	movs	r3, #2
  HAL_TIM_IC_CaptureCallback(htim);
 800c858:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c85a:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureCallback(htim);
 800c85c:	f7f5 fb40 	bl	8001ee0 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c860:	2300      	movs	r3, #0
 800c862:	7723      	strb	r3, [r4, #28]
}
 800c864:	bd10      	pop	{r4, pc}
 800c866:	bf00      	nop

0800c868 <HAL_TIM_IC_CaptureHalfCpltCallback>:
 800c868:	4770      	bx	lr
 800c86a:	bf00      	nop

0800c86c <TIM_DMACaptureHalfCplt>:
{
 800c86c:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c86e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 800c870:	2301      	movs	r3, #1
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c872:	6a62      	ldr	r2, [r4, #36]	; 0x24
  htim->State = HAL_TIM_STATE_READY;
 800c874:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c878:	4282      	cmp	r2, r0
 800c87a:	d00f      	beq.n	800c89c <TIM_DMACaptureHalfCplt+0x30>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800c87c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c87e:	4283      	cmp	r3, r0
 800c880:	d01b      	beq.n	800c8ba <TIM_DMACaptureHalfCplt+0x4e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800c882:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c884:	4283      	cmp	r3, r0
 800c886:	d010      	beq.n	800c8aa <TIM_DMACaptureHalfCplt+0x3e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800c888:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c88a:	4283      	cmp	r3, r0
 800c88c:	d005      	beq.n	800c89a <TIM_DMACaptureHalfCplt+0x2e>
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800c88e:	4620      	mov	r0, r4
 800c890:	f7ff ffea 	bl	800c868 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c894:	2300      	movs	r3, #0
 800c896:	7723      	strb	r3, [r4, #28]
}
 800c898:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c89a:	2308      	movs	r3, #8
 800c89c:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800c89e:	4620      	mov	r0, r4
 800c8a0:	f7ff ffe2 	bl	800c868 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	7723      	strb	r3, [r4, #28]
}
 800c8a8:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c8aa:	2304      	movs	r3, #4
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800c8ac:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c8ae:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800c8b0:	f7ff ffda 	bl	800c868 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	7723      	strb	r3, [r4, #28]
}
 800c8b8:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c8ba:	2302      	movs	r3, #2
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800c8bc:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c8be:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800c8c0:	f7ff ffd2 	bl	800c868 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	7723      	strb	r3, [r4, #28]
}
 800c8c8:	bd10      	pop	{r4, pc}
 800c8ca:	bf00      	nop

0800c8cc <HAL_TIM_PWM_PulseFinishedCallback>:
 800c8cc:	4770      	bx	lr
 800c8ce:	bf00      	nop

0800c8d0 <HAL_TIM_TriggerCallback>:
 800c8d0:	4770      	bx	lr
 800c8d2:	bf00      	nop

0800c8d4 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c8d4:	6803      	ldr	r3, [r0, #0]
 800c8d6:	691a      	ldr	r2, [r3, #16]
 800c8d8:	0791      	lsls	r1, r2, #30
{
 800c8da:	b510      	push	{r4, lr}
 800c8dc:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c8de:	d502      	bpl.n	800c8e6 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c8e0:	68da      	ldr	r2, [r3, #12]
 800c8e2:	0792      	lsls	r2, r2, #30
 800c8e4:	d468      	bmi.n	800c9b8 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c8e6:	691a      	ldr	r2, [r3, #16]
 800c8e8:	0752      	lsls	r2, r2, #29
 800c8ea:	d502      	bpl.n	800c8f2 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c8ec:	68da      	ldr	r2, [r3, #12]
 800c8ee:	0750      	lsls	r0, r2, #29
 800c8f0:	d44f      	bmi.n	800c992 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c8f2:	691a      	ldr	r2, [r3, #16]
 800c8f4:	0711      	lsls	r1, r2, #28
 800c8f6:	d502      	bpl.n	800c8fe <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c8f8:	68da      	ldr	r2, [r3, #12]
 800c8fa:	0712      	lsls	r2, r2, #28
 800c8fc:	d437      	bmi.n	800c96e <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c8fe:	691a      	ldr	r2, [r3, #16]
 800c900:	06d0      	lsls	r0, r2, #27
 800c902:	d502      	bpl.n	800c90a <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c904:	68da      	ldr	r2, [r3, #12]
 800c906:	06d1      	lsls	r1, r2, #27
 800c908:	d41e      	bmi.n	800c948 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c90a:	691a      	ldr	r2, [r3, #16]
 800c90c:	07d2      	lsls	r2, r2, #31
 800c90e:	d502      	bpl.n	800c916 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c910:	68da      	ldr	r2, [r3, #12]
 800c912:	07d0      	lsls	r0, r2, #31
 800c914:	d469      	bmi.n	800c9ea <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c916:	691a      	ldr	r2, [r3, #16]
 800c918:	0611      	lsls	r1, r2, #24
 800c91a:	d502      	bpl.n	800c922 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c91c:	68da      	ldr	r2, [r3, #12]
 800c91e:	0612      	lsls	r2, r2, #24
 800c920:	d46b      	bmi.n	800c9fa <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c922:	691a      	ldr	r2, [r3, #16]
 800c924:	05d0      	lsls	r0, r2, #23
 800c926:	d502      	bpl.n	800c92e <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c928:	68da      	ldr	r2, [r3, #12]
 800c92a:	0611      	lsls	r1, r2, #24
 800c92c:	d46d      	bmi.n	800ca0a <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c92e:	691a      	ldr	r2, [r3, #16]
 800c930:	0652      	lsls	r2, r2, #25
 800c932:	d502      	bpl.n	800c93a <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c934:	68da      	ldr	r2, [r3, #12]
 800c936:	0650      	lsls	r0, r2, #25
 800c938:	d46f      	bmi.n	800ca1a <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c93a:	691a      	ldr	r2, [r3, #16]
 800c93c:	0691      	lsls	r1, r2, #26
 800c93e:	d502      	bpl.n	800c946 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c940:	68da      	ldr	r2, [r3, #12]
 800c942:	0692      	lsls	r2, r2, #26
 800c944:	d449      	bmi.n	800c9da <HAL_TIM_IRQHandler+0x106>
}
 800c946:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c948:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c94c:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800c94e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c950:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c952:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c954:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c956:	f413 7f40 	tst.w	r3, #768	; 0x300
 800c95a:	d16f      	bne.n	800ca3c <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c95c:	f7ff ff52 	bl	800c804 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c960:	4620      	mov	r0, r4
 800c962:	f7ff ffb3 	bl	800c8cc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c966:	2200      	movs	r2, #0
 800c968:	6823      	ldr	r3, [r4, #0]
 800c96a:	7722      	strb	r2, [r4, #28]
 800c96c:	e7cd      	b.n	800c90a <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c96e:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c972:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800c974:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c976:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c978:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c97a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c97c:	079b      	lsls	r3, r3, #30
 800c97e:	d15a      	bne.n	800ca36 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c980:	f7ff ff40 	bl	800c804 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c984:	4620      	mov	r0, r4
 800c986:	f7ff ffa1 	bl	800c8cc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c98a:	2200      	movs	r2, #0
 800c98c:	6823      	ldr	r3, [r4, #0]
 800c98e:	7722      	strb	r2, [r4, #28]
 800c990:	e7b5      	b.n	800c8fe <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c992:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c996:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800c998:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c99a:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c99c:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c99e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c9a0:	f413 7f40 	tst.w	r3, #768	; 0x300
 800c9a4:	d144      	bne.n	800ca30 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c9a6:	f7ff ff2d 	bl	800c804 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c9aa:	4620      	mov	r0, r4
 800c9ac:	f7ff ff8e 	bl	800c8cc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	6823      	ldr	r3, [r4, #0]
 800c9b4:	7722      	strb	r2, [r4, #28]
 800c9b6:	e79c      	b.n	800c8f2 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c9b8:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c9bc:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c9be:	6119      	str	r1, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c9c0:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c9c2:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c9c4:	0799      	lsls	r1, r3, #30
 800c9c6:	d130      	bne.n	800ca2a <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c9c8:	f7ff ff1c 	bl	800c804 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c9cc:	4620      	mov	r0, r4
 800c9ce:	f7ff ff7d 	bl	800c8cc <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	6823      	ldr	r3, [r4, #0]
 800c9d6:	7722      	strb	r2, [r4, #28]
 800c9d8:	e785      	b.n	800c8e6 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c9da:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800c9de:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c9e0:	611a      	str	r2, [r3, #16]
}
 800c9e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800c9e6:	f001 bc63 	b.w	800e2b0 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c9ea:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800c9ee:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c9f0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800c9f2:	f7f5 fabd 	bl	8001f70 <HAL_TIM_PeriodElapsedCallback>
 800c9f6:	6823      	ldr	r3, [r4, #0]
 800c9f8:	e78d      	b.n	800c916 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c9fa:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800c9fe:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ca00:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800ca02:	f001 fc57 	bl	800e2b4 <HAL_TIMEx_BreakCallback>
 800ca06:	6823      	ldr	r3, [r4, #0]
 800ca08:	e78b      	b.n	800c922 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ca0a:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800ca0e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ca10:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800ca12:	f001 fc51 	bl	800e2b8 <HAL_TIMEx_Break2Callback>
 800ca16:	6823      	ldr	r3, [r4, #0]
 800ca18:	e789      	b.n	800c92e <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ca1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800ca1e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ca20:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800ca22:	f7ff ff55 	bl	800c8d0 <HAL_TIM_TriggerCallback>
 800ca26:	6823      	ldr	r3, [r4, #0]
 800ca28:	e787      	b.n	800c93a <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800ca2a:	f7f5 fa59 	bl	8001ee0 <HAL_TIM_IC_CaptureCallback>
 800ca2e:	e7d0      	b.n	800c9d2 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 800ca30:	f7f5 fa56 	bl	8001ee0 <HAL_TIM_IC_CaptureCallback>
 800ca34:	e7bc      	b.n	800c9b0 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800ca36:	f7f5 fa53 	bl	8001ee0 <HAL_TIM_IC_CaptureCallback>
 800ca3a:	e7a6      	b.n	800c98a <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 800ca3c:	f7f5 fa50 	bl	8001ee0 <HAL_TIM_IC_CaptureCallback>
 800ca40:	e791      	b.n	800c966 <HAL_TIM_IRQHandler+0x92>
 800ca42:	bf00      	nop

0800ca44 <HAL_TIM_ErrorCallback>:
 800ca44:	4770      	bx	lr
 800ca46:	bf00      	nop

0800ca48 <TIM_DMAError>:
{
 800ca48:	b508      	push	{r3, lr}
  htim->State = HAL_TIM_STATE_READY;
 800ca4a:	2201      	movs	r2, #1
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ca4c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  HAL_TIM_ErrorCallback(htim);
 800ca4e:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800ca50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  HAL_TIM_ErrorCallback(htim);
 800ca54:	f7ff fff6 	bl	800ca44 <HAL_TIM_ErrorCallback>
}
 800ca58:	bd08      	pop	{r3, pc}
 800ca5a:	bf00      	nop

0800ca5c <TIM_Base_SetConfig>:
{
 800ca5c:	b4f0      	push	{r4, r5, r6, r7}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ca5e:	4e32      	ldr	r6, [pc, #200]	; (800cb28 <TIM_Base_SetConfig+0xcc>)
 800ca60:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800ca64:	4f31      	ldr	r7, [pc, #196]	; (800cb2c <TIM_Base_SetConfig+0xd0>)
 800ca66:	eba0 0606 	sub.w	r6, r0, r6
  tmpcr1 = TIMx->CR1;
 800ca6a:	6803      	ldr	r3, [r0, #0]
 800ca6c:	eba0 0707 	sub.w	r7, r0, r7
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ca70:	fab6 f686 	clz	r6, r6
 800ca74:	fab7 f787 	clz	r7, r7
 800ca78:	ea4f 1656 	mov.w	r6, r6, lsr #5
 800ca7c:	ea4f 1757 	mov.w	r7, r7, lsr #5
 800ca80:	d025      	beq.n	800cace <TIM_Base_SetConfig+0x72>
 800ca82:	bb26      	cbnz	r6, 800cace <TIM_Base_SetConfig+0x72>
 800ca84:	4a2a      	ldr	r2, [pc, #168]	; (800cb30 <TIM_Base_SetConfig+0xd4>)
 800ca86:	4290      	cmp	r0, r2
 800ca88:	d03e      	beq.n	800cb08 <TIM_Base_SetConfig+0xac>
 800ca8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ca8e:	4290      	cmp	r0, r2
 800ca90:	d03a      	beq.n	800cb08 <TIM_Base_SetConfig+0xac>
 800ca92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ca96:	4290      	cmp	r0, r2
 800ca98:	d03b      	beq.n	800cb12 <TIM_Base_SetConfig+0xb6>
 800ca9a:	2f00      	cmp	r7, #0
 800ca9c:	d139      	bne.n	800cb12 <TIM_Base_SetConfig+0xb6>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ca9e:	4a25      	ldr	r2, [pc, #148]	; (800cb34 <TIM_Base_SetConfig+0xd8>)
 800caa0:	4290      	cmp	r0, r2
 800caa2:	d018      	beq.n	800cad6 <TIM_Base_SetConfig+0x7a>
 800caa4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800caa8:	4290      	cmp	r0, r2
 800caaa:	d014      	beq.n	800cad6 <TIM_Base_SetConfig+0x7a>
 800caac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cab0:	4290      	cmp	r0, r2
 800cab2:	d010      	beq.n	800cad6 <TIM_Base_SetConfig+0x7a>
 800cab4:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800cab8:	4290      	cmp	r0, r2
 800caba:	d00c      	beq.n	800cad6 <TIM_Base_SetConfig+0x7a>
 800cabc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cac0:	4290      	cmp	r0, r2
 800cac2:	d008      	beq.n	800cad6 <TIM_Base_SetConfig+0x7a>
 800cac4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cac8:	4290      	cmp	r0, r2
 800caca:	d108      	bne.n	800cade <TIM_Base_SetConfig+0x82>
 800cacc:	e003      	b.n	800cad6 <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800cad2:	684d      	ldr	r5, [r1, #4]
 800cad4:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 800cad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cada:	68cd      	ldr	r5, [r1, #12]
 800cadc:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cade:	694a      	ldr	r2, [r1, #20]
 800cae0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cae4:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cae6:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 800cae8:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 800caea:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800caec:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800caee:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800caf0:	b926      	cbnz	r6, 800cafc <TIM_Base_SetConfig+0xa0>
 800caf2:	b91f      	cbnz	r7, 800cafc <TIM_Base_SetConfig+0xa0>
  TIMx->EGR = TIM_EGR_UG;
 800caf4:	2301      	movs	r3, #1
}
 800caf6:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->EGR = TIM_EGR_UG;
 800caf8:	6143      	str	r3, [r0, #20]
}
 800cafa:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800cafc:	690b      	ldr	r3, [r1, #16]
 800cafe:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800cb00:	2301      	movs	r3, #1
}
 800cb02:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->EGR = TIM_EGR_UG;
 800cb04:	6143      	str	r3, [r0, #20]
}
 800cb06:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cb08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800cb0c:	684a      	ldr	r2, [r1, #4]
 800cb0e:	4313      	orrs	r3, r2
 800cb10:	e7e1      	b.n	800cad6 <TIM_Base_SetConfig+0x7a>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cb12:	4a09      	ldr	r2, [pc, #36]	; (800cb38 <TIM_Base_SetConfig+0xdc>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cb14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800cb18:	684c      	ldr	r4, [r1, #4]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cb1a:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 800cb1c:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cb20:	d0d9      	beq.n	800cad6 <TIM_Base_SetConfig+0x7a>
 800cb22:	2f00      	cmp	r7, #0
 800cb24:	d1d7      	bne.n	800cad6 <TIM_Base_SetConfig+0x7a>
 800cb26:	e7ba      	b.n	800ca9e <TIM_Base_SetConfig+0x42>
 800cb28:	40010000 	.word	0x40010000
 800cb2c:	40010400 	.word	0x40010400
 800cb30:	40000400 	.word	0x40000400
 800cb34:	40014000 	.word	0x40014000
 800cb38:	40000c00 	.word	0x40000c00

0800cb3c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800cb3c:	2800      	cmp	r0, #0
 800cb3e:	f000 8097 	beq.w	800cc70 <HAL_TIM_Base_Init+0x134>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800cb42:	6802      	ldr	r2, [r0, #0]
 800cb44:	4956      	ldr	r1, [pc, #344]	; (800cca0 <HAL_TIM_Base_Init+0x164>)
{
 800cb46:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800cb48:	4b56      	ldr	r3, [pc, #344]	; (800cca4 <HAL_TIM_Base_Init+0x168>)
 800cb4a:	4604      	mov	r4, r0
 800cb4c:	4856      	ldr	r0, [pc, #344]	; (800cca8 <HAL_TIM_Base_Init+0x16c>)
 800cb4e:	429a      	cmp	r2, r3
 800cb50:	bf18      	it	ne
 800cb52:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800cb56:	4d55      	ldr	r5, [pc, #340]	; (800ccac <HAL_TIM_Base_Init+0x170>)
 800cb58:	bf14      	ite	ne
 800cb5a:	2301      	movne	r3, #1
 800cb5c:	2300      	moveq	r3, #0
 800cb5e:	4282      	cmp	r2, r0
 800cb60:	bf0c      	ite	eq
 800cb62:	2300      	moveq	r3, #0
 800cb64:	f003 0301 	andne.w	r3, r3, #1
 800cb68:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800cb6c:	428a      	cmp	r2, r1
 800cb6e:	bf0c      	ite	eq
 800cb70:	2300      	moveq	r3, #0
 800cb72:	f003 0301 	andne.w	r3, r3, #1
 800cb76:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800cb7a:	42aa      	cmp	r2, r5
 800cb7c:	bf0c      	ite	eq
 800cb7e:	2300      	moveq	r3, #0
 800cb80:	f003 0301 	andne.w	r3, r3, #1
 800cb84:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800cb88:	4282      	cmp	r2, r0
 800cb8a:	bf0c      	ite	eq
 800cb8c:	2300      	moveq	r3, #0
 800cb8e:	f003 0301 	andne.w	r3, r3, #1
 800cb92:	f500 3098 	add.w	r0, r0, #77824	; 0x13000
 800cb96:	428a      	cmp	r2, r1
 800cb98:	bf0c      	ite	eq
 800cb9a:	2300      	moveq	r3, #0
 800cb9c:	f003 0301 	andne.w	r3, r3, #1
 800cba0:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
 800cba4:	42aa      	cmp	r2, r5
 800cba6:	bf0c      	ite	eq
 800cba8:	2300      	moveq	r3, #0
 800cbaa:	f003 0301 	andne.w	r3, r3, #1
 800cbae:	f505 4588 	add.w	r5, r5, #17408	; 0x4400
 800cbb2:	4282      	cmp	r2, r0
 800cbb4:	bf0c      	ite	eq
 800cbb6:	2300      	moveq	r3, #0
 800cbb8:	f003 0301 	andne.w	r3, r3, #1
 800cbbc:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800cbc0:	428a      	cmp	r2, r1
 800cbc2:	bf0c      	ite	eq
 800cbc4:	2300      	moveq	r3, #0
 800cbc6:	f003 0301 	andne.w	r3, r3, #1
 800cbca:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800cbce:	42aa      	cmp	r2, r5
 800cbd0:	bf0c      	ite	eq
 800cbd2:	2300      	moveq	r3, #0
 800cbd4:	f003 0301 	andne.w	r3, r3, #1
 800cbd8:	4282      	cmp	r2, r0
 800cbda:	bf0c      	ite	eq
 800cbdc:	2300      	moveq	r3, #0
 800cbde:	f003 0301 	andne.w	r3, r3, #1
 800cbe2:	428a      	cmp	r2, r1
 800cbe4:	bf0c      	ite	eq
 800cbe6:	2300      	moveq	r3, #0
 800cbe8:	f003 0301 	andne.w	r3, r3, #1
 800cbec:	b113      	cbz	r3, 800cbf4 <HAL_TIM_Base_Init+0xb8>
 800cbee:	4b30      	ldr	r3, [pc, #192]	; (800ccb0 <HAL_TIM_Base_Init+0x174>)
 800cbf0:	429a      	cmp	r2, r3
 800cbf2:	d14f      	bne.n	800cc94 <HAL_TIM_Base_Init+0x158>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800cbf4:	68a2      	ldr	r2, [r4, #8]
 800cbf6:	f032 0310 	bics.w	r3, r2, #16
 800cbfa:	f022 0140 	bic.w	r1, r2, #64	; 0x40
 800cbfe:	bf14      	ite	ne
 800cc00:	2301      	movne	r3, #1
 800cc02:	2300      	moveq	r3, #0
 800cc04:	2920      	cmp	r1, #32
 800cc06:	bf0c      	ite	eq
 800cc08:	2300      	moveq	r3, #0
 800cc0a:	f003 0301 	andne.w	r3, r3, #1
 800cc0e:	b10b      	cbz	r3, 800cc14 <HAL_TIM_Base_Init+0xd8>
 800cc10:	2a40      	cmp	r2, #64	; 0x40
 800cc12:	d139      	bne.n	800cc88 <HAL_TIM_Base_Init+0x14c>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800cc14:	6923      	ldr	r3, [r4, #16]
 800cc16:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800cc1a:	d002      	beq.n	800cc22 <HAL_TIM_Base_Init+0xe6>
 800cc1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc20:	d128      	bne.n	800cc74 <HAL_TIM_Base_Init+0x138>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800cc22:	69a3      	ldr	r3, [r4, #24]
 800cc24:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800cc28:	d116      	bne.n	800cc58 <HAL_TIM_Base_Init+0x11c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800cc2a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800cc2e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800cc32:	b15b      	cbz	r3, 800cc4c <HAL_TIM_Base_Init+0x110>
  htim->State = HAL_TIM_STATE_BUSY;
 800cc34:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cc36:	6820      	ldr	r0, [r4, #0]
 800cc38:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800cc3a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cc3e:	f7ff ff0d 	bl	800ca5c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800cc42:	2301      	movs	r3, #1
  return HAL_OK;
 800cc44:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800cc46:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800cc4a:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 800cc4c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800cc50:	4620      	mov	r0, r4
 800cc52:	f7f7 fadd 	bl	8004210 <HAL_TIM_Base_MspInit>
 800cc56:	e7ed      	b.n	800cc34 <HAL_TIM_Base_Init+0xf8>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800cc58:	f44f 718c 	mov.w	r1, #280	; 0x118
 800cc5c:	4815      	ldr	r0, [pc, #84]	; (800ccb4 <HAL_TIM_Base_Init+0x178>)
 800cc5e:	f7f6 f9d3 	bl	8003008 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800cc62:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800cc66:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d1e2      	bne.n	800cc34 <HAL_TIM_Base_Init+0xf8>
 800cc6e:	e7ed      	b.n	800cc4c <HAL_TIM_Base_Init+0x110>
    return HAL_ERROR;
 800cc70:	2001      	movs	r0, #1
}
 800cc72:	4770      	bx	lr
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800cc74:	f240 1117 	movw	r1, #279	; 0x117
 800cc78:	480e      	ldr	r0, [pc, #56]	; (800ccb4 <HAL_TIM_Base_Init+0x178>)
 800cc7a:	f7f6 f9c5 	bl	8003008 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800cc7e:	69a3      	ldr	r3, [r4, #24]
 800cc80:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800cc84:	d0d1      	beq.n	800cc2a <HAL_TIM_Base_Init+0xee>
 800cc86:	e7e7      	b.n	800cc58 <HAL_TIM_Base_Init+0x11c>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800cc88:	f44f 718b 	mov.w	r1, #278	; 0x116
 800cc8c:	4809      	ldr	r0, [pc, #36]	; (800ccb4 <HAL_TIM_Base_Init+0x178>)
 800cc8e:	f7f6 f9bb 	bl	8003008 <assert_failed>
 800cc92:	e7bf      	b.n	800cc14 <HAL_TIM_Base_Init+0xd8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800cc94:	f240 1115 	movw	r1, #277	; 0x115
 800cc98:	4806      	ldr	r0, [pc, #24]	; (800ccb4 <HAL_TIM_Base_Init+0x178>)
 800cc9a:	f7f6 f9b5 	bl	8003008 <assert_failed>
 800cc9e:	e7a9      	b.n	800cbf4 <HAL_TIM_Base_Init+0xb8>
 800cca0:	40000800 	.word	0x40000800
 800cca4:	40010000 	.word	0x40010000
 800cca8:	40000400 	.word	0x40000400
 800ccac:	40000c00 	.word	0x40000c00
 800ccb0:	40002000 	.word	0x40002000
 800ccb4:	08026a84 	.word	0x08026a84

0800ccb8 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 800ccb8:	2800      	cmp	r0, #0
 800ccba:	f000 8097 	beq.w	800cdec <HAL_TIM_OC_Init+0x134>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ccbe:	6802      	ldr	r2, [r0, #0]
 800ccc0:	4956      	ldr	r1, [pc, #344]	; (800ce1c <HAL_TIM_OC_Init+0x164>)
{
 800ccc2:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ccc4:	4b56      	ldr	r3, [pc, #344]	; (800ce20 <HAL_TIM_OC_Init+0x168>)
 800ccc6:	4604      	mov	r4, r0
 800ccc8:	4856      	ldr	r0, [pc, #344]	; (800ce24 <HAL_TIM_OC_Init+0x16c>)
 800ccca:	429a      	cmp	r2, r3
 800cccc:	bf18      	it	ne
 800ccce:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800ccd2:	4d55      	ldr	r5, [pc, #340]	; (800ce28 <HAL_TIM_OC_Init+0x170>)
 800ccd4:	bf14      	ite	ne
 800ccd6:	2301      	movne	r3, #1
 800ccd8:	2300      	moveq	r3, #0
 800ccda:	4282      	cmp	r2, r0
 800ccdc:	bf0c      	ite	eq
 800ccde:	2300      	moveq	r3, #0
 800cce0:	f003 0301 	andne.w	r3, r3, #1
 800cce4:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800cce8:	428a      	cmp	r2, r1
 800ccea:	bf0c      	ite	eq
 800ccec:	2300      	moveq	r3, #0
 800ccee:	f003 0301 	andne.w	r3, r3, #1
 800ccf2:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800ccf6:	42aa      	cmp	r2, r5
 800ccf8:	bf0c      	ite	eq
 800ccfa:	2300      	moveq	r3, #0
 800ccfc:	f003 0301 	andne.w	r3, r3, #1
 800cd00:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800cd04:	4282      	cmp	r2, r0
 800cd06:	bf0c      	ite	eq
 800cd08:	2300      	moveq	r3, #0
 800cd0a:	f003 0301 	andne.w	r3, r3, #1
 800cd0e:	f500 3098 	add.w	r0, r0, #77824	; 0x13000
 800cd12:	428a      	cmp	r2, r1
 800cd14:	bf0c      	ite	eq
 800cd16:	2300      	moveq	r3, #0
 800cd18:	f003 0301 	andne.w	r3, r3, #1
 800cd1c:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
 800cd20:	42aa      	cmp	r2, r5
 800cd22:	bf0c      	ite	eq
 800cd24:	2300      	moveq	r3, #0
 800cd26:	f003 0301 	andne.w	r3, r3, #1
 800cd2a:	f505 4588 	add.w	r5, r5, #17408	; 0x4400
 800cd2e:	4282      	cmp	r2, r0
 800cd30:	bf0c      	ite	eq
 800cd32:	2300      	moveq	r3, #0
 800cd34:	f003 0301 	andne.w	r3, r3, #1
 800cd38:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800cd3c:	428a      	cmp	r2, r1
 800cd3e:	bf0c      	ite	eq
 800cd40:	2300      	moveq	r3, #0
 800cd42:	f003 0301 	andne.w	r3, r3, #1
 800cd46:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800cd4a:	42aa      	cmp	r2, r5
 800cd4c:	bf0c      	ite	eq
 800cd4e:	2300      	moveq	r3, #0
 800cd50:	f003 0301 	andne.w	r3, r3, #1
 800cd54:	4282      	cmp	r2, r0
 800cd56:	bf0c      	ite	eq
 800cd58:	2300      	moveq	r3, #0
 800cd5a:	f003 0301 	andne.w	r3, r3, #1
 800cd5e:	428a      	cmp	r2, r1
 800cd60:	bf0c      	ite	eq
 800cd62:	2300      	moveq	r3, #0
 800cd64:	f003 0301 	andne.w	r3, r3, #1
 800cd68:	b113      	cbz	r3, 800cd70 <HAL_TIM_OC_Init+0xb8>
 800cd6a:	4b30      	ldr	r3, [pc, #192]	; (800ce2c <HAL_TIM_OC_Init+0x174>)
 800cd6c:	429a      	cmp	r2, r3
 800cd6e:	d14f      	bne.n	800ce10 <HAL_TIM_OC_Init+0x158>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800cd70:	68a2      	ldr	r2, [r4, #8]
 800cd72:	f032 0310 	bics.w	r3, r2, #16
 800cd76:	f022 0140 	bic.w	r1, r2, #64	; 0x40
 800cd7a:	bf14      	ite	ne
 800cd7c:	2301      	movne	r3, #1
 800cd7e:	2300      	moveq	r3, #0
 800cd80:	2920      	cmp	r1, #32
 800cd82:	bf0c      	ite	eq
 800cd84:	2300      	moveq	r3, #0
 800cd86:	f003 0301 	andne.w	r3, r3, #1
 800cd8a:	b10b      	cbz	r3, 800cd90 <HAL_TIM_OC_Init+0xd8>
 800cd8c:	2a40      	cmp	r2, #64	; 0x40
 800cd8e:	d139      	bne.n	800ce04 <HAL_TIM_OC_Init+0x14c>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800cd90:	6923      	ldr	r3, [r4, #16]
 800cd92:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800cd96:	d002      	beq.n	800cd9e <HAL_TIM_OC_Init+0xe6>
 800cd98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd9c:	d128      	bne.n	800cdf0 <HAL_TIM_OC_Init+0x138>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800cd9e:	69a3      	ldr	r3, [r4, #24]
 800cda0:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800cda4:	d116      	bne.n	800cdd4 <HAL_TIM_OC_Init+0x11c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800cda6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800cdaa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800cdae:	b15b      	cbz	r3, 800cdc8 <HAL_TIM_OC_Init+0x110>
  htim->State = HAL_TIM_STATE_BUSY;
 800cdb0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800cdb2:	6820      	ldr	r0, [r4, #0]
 800cdb4:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800cdb6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800cdba:	f7ff fe4f 	bl	800ca5c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800cdbe:	2301      	movs	r3, #1
  return HAL_OK;
 800cdc0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800cdc2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800cdc6:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 800cdc8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 800cdcc:	4620      	mov	r0, r4
 800cdce:	f7ff f9c1 	bl	800c154 <HAL_TIM_OC_MspInit>
 800cdd2:	e7ed      	b.n	800cdb0 <HAL_TIM_OC_Init+0xf8>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800cdd4:	f44f 7119 	mov.w	r1, #612	; 0x264
 800cdd8:	4815      	ldr	r0, [pc, #84]	; (800ce30 <HAL_TIM_OC_Init+0x178>)
 800cdda:	f7f6 f915 	bl	8003008 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800cdde:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800cde2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d1e2      	bne.n	800cdb0 <HAL_TIM_OC_Init+0xf8>
 800cdea:	e7ed      	b.n	800cdc8 <HAL_TIM_OC_Init+0x110>
    return HAL_ERROR;
 800cdec:	2001      	movs	r0, #1
}
 800cdee:	4770      	bx	lr
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800cdf0:	f240 2163 	movw	r1, #611	; 0x263
 800cdf4:	480e      	ldr	r0, [pc, #56]	; (800ce30 <HAL_TIM_OC_Init+0x178>)
 800cdf6:	f7f6 f907 	bl	8003008 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800cdfa:	69a3      	ldr	r3, [r4, #24]
 800cdfc:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800ce00:	d0d1      	beq.n	800cda6 <HAL_TIM_OC_Init+0xee>
 800ce02:	e7e7      	b.n	800cdd4 <HAL_TIM_OC_Init+0x11c>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800ce04:	f240 2162 	movw	r1, #610	; 0x262
 800ce08:	4809      	ldr	r0, [pc, #36]	; (800ce30 <HAL_TIM_OC_Init+0x178>)
 800ce0a:	f7f6 f8fd 	bl	8003008 <assert_failed>
 800ce0e:	e7bf      	b.n	800cd90 <HAL_TIM_OC_Init+0xd8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ce10:	f240 2161 	movw	r1, #609	; 0x261
 800ce14:	4806      	ldr	r0, [pc, #24]	; (800ce30 <HAL_TIM_OC_Init+0x178>)
 800ce16:	f7f6 f8f7 	bl	8003008 <assert_failed>
 800ce1a:	e7a9      	b.n	800cd70 <HAL_TIM_OC_Init+0xb8>
 800ce1c:	40000800 	.word	0x40000800
 800ce20:	40010000 	.word	0x40010000
 800ce24:	40000400 	.word	0x40000400
 800ce28:	40000c00 	.word	0x40000c00
 800ce2c:	40002000 	.word	0x40002000
 800ce30:	08026a84 	.word	0x08026a84

0800ce34 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800ce34:	2800      	cmp	r0, #0
 800ce36:	f000 8097 	beq.w	800cf68 <HAL_TIM_PWM_Init+0x134>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ce3a:	6802      	ldr	r2, [r0, #0]
 800ce3c:	4956      	ldr	r1, [pc, #344]	; (800cf98 <HAL_TIM_PWM_Init+0x164>)
{
 800ce3e:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ce40:	4b56      	ldr	r3, [pc, #344]	; (800cf9c <HAL_TIM_PWM_Init+0x168>)
 800ce42:	4604      	mov	r4, r0
 800ce44:	4856      	ldr	r0, [pc, #344]	; (800cfa0 <HAL_TIM_PWM_Init+0x16c>)
 800ce46:	429a      	cmp	r2, r3
 800ce48:	bf18      	it	ne
 800ce4a:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800ce4e:	4d55      	ldr	r5, [pc, #340]	; (800cfa4 <HAL_TIM_PWM_Init+0x170>)
 800ce50:	bf14      	ite	ne
 800ce52:	2301      	movne	r3, #1
 800ce54:	2300      	moveq	r3, #0
 800ce56:	4282      	cmp	r2, r0
 800ce58:	bf0c      	ite	eq
 800ce5a:	2300      	moveq	r3, #0
 800ce5c:	f003 0301 	andne.w	r3, r3, #1
 800ce60:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800ce64:	428a      	cmp	r2, r1
 800ce66:	bf0c      	ite	eq
 800ce68:	2300      	moveq	r3, #0
 800ce6a:	f003 0301 	andne.w	r3, r3, #1
 800ce6e:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800ce72:	42aa      	cmp	r2, r5
 800ce74:	bf0c      	ite	eq
 800ce76:	2300      	moveq	r3, #0
 800ce78:	f003 0301 	andne.w	r3, r3, #1
 800ce7c:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800ce80:	4282      	cmp	r2, r0
 800ce82:	bf0c      	ite	eq
 800ce84:	2300      	moveq	r3, #0
 800ce86:	f003 0301 	andne.w	r3, r3, #1
 800ce8a:	f500 3098 	add.w	r0, r0, #77824	; 0x13000
 800ce8e:	428a      	cmp	r2, r1
 800ce90:	bf0c      	ite	eq
 800ce92:	2300      	moveq	r3, #0
 800ce94:	f003 0301 	andne.w	r3, r3, #1
 800ce98:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
 800ce9c:	42aa      	cmp	r2, r5
 800ce9e:	bf0c      	ite	eq
 800cea0:	2300      	moveq	r3, #0
 800cea2:	f003 0301 	andne.w	r3, r3, #1
 800cea6:	f505 4588 	add.w	r5, r5, #17408	; 0x4400
 800ceaa:	4282      	cmp	r2, r0
 800ceac:	bf0c      	ite	eq
 800ceae:	2300      	moveq	r3, #0
 800ceb0:	f003 0301 	andne.w	r3, r3, #1
 800ceb4:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800ceb8:	428a      	cmp	r2, r1
 800ceba:	bf0c      	ite	eq
 800cebc:	2300      	moveq	r3, #0
 800cebe:	f003 0301 	andne.w	r3, r3, #1
 800cec2:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800cec6:	42aa      	cmp	r2, r5
 800cec8:	bf0c      	ite	eq
 800ceca:	2300      	moveq	r3, #0
 800cecc:	f003 0301 	andne.w	r3, r3, #1
 800ced0:	4282      	cmp	r2, r0
 800ced2:	bf0c      	ite	eq
 800ced4:	2300      	moveq	r3, #0
 800ced6:	f003 0301 	andne.w	r3, r3, #1
 800ceda:	428a      	cmp	r2, r1
 800cedc:	bf0c      	ite	eq
 800cede:	2300      	moveq	r3, #0
 800cee0:	f003 0301 	andne.w	r3, r3, #1
 800cee4:	b113      	cbz	r3, 800ceec <HAL_TIM_PWM_Init+0xb8>
 800cee6:	4b30      	ldr	r3, [pc, #192]	; (800cfa8 <HAL_TIM_PWM_Init+0x174>)
 800cee8:	429a      	cmp	r2, r3
 800ceea:	d14f      	bne.n	800cf8c <HAL_TIM_PWM_Init+0x158>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800ceec:	68a2      	ldr	r2, [r4, #8]
 800ceee:	f032 0310 	bics.w	r3, r2, #16
 800cef2:	f022 0140 	bic.w	r1, r2, #64	; 0x40
 800cef6:	bf14      	ite	ne
 800cef8:	2301      	movne	r3, #1
 800cefa:	2300      	moveq	r3, #0
 800cefc:	2920      	cmp	r1, #32
 800cefe:	bf0c      	ite	eq
 800cf00:	2300      	moveq	r3, #0
 800cf02:	f003 0301 	andne.w	r3, r3, #1
 800cf06:	b10b      	cbz	r3, 800cf0c <HAL_TIM_PWM_Init+0xd8>
 800cf08:	2a40      	cmp	r2, #64	; 0x40
 800cf0a:	d139      	bne.n	800cf80 <HAL_TIM_PWM_Init+0x14c>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800cf0c:	6923      	ldr	r3, [r4, #16]
 800cf0e:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800cf12:	d002      	beq.n	800cf1a <HAL_TIM_PWM_Init+0xe6>
 800cf14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cf18:	d128      	bne.n	800cf6c <HAL_TIM_PWM_Init+0x138>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800cf1a:	69a3      	ldr	r3, [r4, #24]
 800cf1c:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800cf20:	d116      	bne.n	800cf50 <HAL_TIM_PWM_Init+0x11c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800cf22:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800cf26:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800cf2a:	b15b      	cbz	r3, 800cf44 <HAL_TIM_PWM_Init+0x110>
  htim->State = HAL_TIM_STATE_BUSY;
 800cf2c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cf2e:	6820      	ldr	r0, [r4, #0]
 800cf30:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800cf32:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cf36:	f7ff fd91 	bl	800ca5c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800cf3a:	2301      	movs	r3, #1
  return HAL_OK;
 800cf3c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800cf3e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800cf42:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 800cf44:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800cf48:	4620      	mov	r0, r4
 800cf4a:	f7ff f905 	bl	800c158 <HAL_TIM_PWM_MspInit>
 800cf4e:	e7ed      	b.n	800cf2c <HAL_TIM_PWM_Init+0xf8>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800cf50:	f240 41a5 	movw	r1, #1189	; 0x4a5
 800cf54:	4815      	ldr	r0, [pc, #84]	; (800cfac <HAL_TIM_PWM_Init+0x178>)
 800cf56:	f7f6 f857 	bl	8003008 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800cf5a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800cf5e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d1e2      	bne.n	800cf2c <HAL_TIM_PWM_Init+0xf8>
 800cf66:	e7ed      	b.n	800cf44 <HAL_TIM_PWM_Init+0x110>
    return HAL_ERROR;
 800cf68:	2001      	movs	r0, #1
}
 800cf6a:	4770      	bx	lr
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800cf6c:	f240 41a4 	movw	r1, #1188	; 0x4a4
 800cf70:	480e      	ldr	r0, [pc, #56]	; (800cfac <HAL_TIM_PWM_Init+0x178>)
 800cf72:	f7f6 f849 	bl	8003008 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800cf76:	69a3      	ldr	r3, [r4, #24]
 800cf78:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800cf7c:	d0d1      	beq.n	800cf22 <HAL_TIM_PWM_Init+0xee>
 800cf7e:	e7e7      	b.n	800cf50 <HAL_TIM_PWM_Init+0x11c>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800cf80:	f240 41a3 	movw	r1, #1187	; 0x4a3
 800cf84:	4809      	ldr	r0, [pc, #36]	; (800cfac <HAL_TIM_PWM_Init+0x178>)
 800cf86:	f7f6 f83f 	bl	8003008 <assert_failed>
 800cf8a:	e7bf      	b.n	800cf0c <HAL_TIM_PWM_Init+0xd8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800cf8c:	f240 41a2 	movw	r1, #1186	; 0x4a2
 800cf90:	4806      	ldr	r0, [pc, #24]	; (800cfac <HAL_TIM_PWM_Init+0x178>)
 800cf92:	f7f6 f839 	bl	8003008 <assert_failed>
 800cf96:	e7a9      	b.n	800ceec <HAL_TIM_PWM_Init+0xb8>
 800cf98:	40000800 	.word	0x40000800
 800cf9c:	40010000 	.word	0x40010000
 800cfa0:	40000400 	.word	0x40000400
 800cfa4:	40000c00 	.word	0x40000c00
 800cfa8:	40002000 	.word	0x40002000
 800cfac:	08026a84 	.word	0x08026a84

0800cfb0 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 800cfb0:	2800      	cmp	r0, #0
 800cfb2:	f000 8097 	beq.w	800d0e4 <HAL_TIM_IC_Init+0x134>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800cfb6:	6802      	ldr	r2, [r0, #0]
 800cfb8:	4956      	ldr	r1, [pc, #344]	; (800d114 <HAL_TIM_IC_Init+0x164>)
{
 800cfba:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800cfbc:	4b56      	ldr	r3, [pc, #344]	; (800d118 <HAL_TIM_IC_Init+0x168>)
 800cfbe:	4604      	mov	r4, r0
 800cfc0:	4856      	ldr	r0, [pc, #344]	; (800d11c <HAL_TIM_IC_Init+0x16c>)
 800cfc2:	429a      	cmp	r2, r3
 800cfc4:	bf18      	it	ne
 800cfc6:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800cfca:	4d55      	ldr	r5, [pc, #340]	; (800d120 <HAL_TIM_IC_Init+0x170>)
 800cfcc:	bf14      	ite	ne
 800cfce:	2301      	movne	r3, #1
 800cfd0:	2300      	moveq	r3, #0
 800cfd2:	4282      	cmp	r2, r0
 800cfd4:	bf0c      	ite	eq
 800cfd6:	2300      	moveq	r3, #0
 800cfd8:	f003 0301 	andne.w	r3, r3, #1
 800cfdc:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800cfe0:	428a      	cmp	r2, r1
 800cfe2:	bf0c      	ite	eq
 800cfe4:	2300      	moveq	r3, #0
 800cfe6:	f003 0301 	andne.w	r3, r3, #1
 800cfea:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800cfee:	42aa      	cmp	r2, r5
 800cff0:	bf0c      	ite	eq
 800cff2:	2300      	moveq	r3, #0
 800cff4:	f003 0301 	andne.w	r3, r3, #1
 800cff8:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800cffc:	4282      	cmp	r2, r0
 800cffe:	bf0c      	ite	eq
 800d000:	2300      	moveq	r3, #0
 800d002:	f003 0301 	andne.w	r3, r3, #1
 800d006:	f500 3098 	add.w	r0, r0, #77824	; 0x13000
 800d00a:	428a      	cmp	r2, r1
 800d00c:	bf0c      	ite	eq
 800d00e:	2300      	moveq	r3, #0
 800d010:	f003 0301 	andne.w	r3, r3, #1
 800d014:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
 800d018:	42aa      	cmp	r2, r5
 800d01a:	bf0c      	ite	eq
 800d01c:	2300      	moveq	r3, #0
 800d01e:	f003 0301 	andne.w	r3, r3, #1
 800d022:	f505 4588 	add.w	r5, r5, #17408	; 0x4400
 800d026:	4282      	cmp	r2, r0
 800d028:	bf0c      	ite	eq
 800d02a:	2300      	moveq	r3, #0
 800d02c:	f003 0301 	andne.w	r3, r3, #1
 800d030:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800d034:	428a      	cmp	r2, r1
 800d036:	bf0c      	ite	eq
 800d038:	2300      	moveq	r3, #0
 800d03a:	f003 0301 	andne.w	r3, r3, #1
 800d03e:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800d042:	42aa      	cmp	r2, r5
 800d044:	bf0c      	ite	eq
 800d046:	2300      	moveq	r3, #0
 800d048:	f003 0301 	andne.w	r3, r3, #1
 800d04c:	4282      	cmp	r2, r0
 800d04e:	bf0c      	ite	eq
 800d050:	2300      	moveq	r3, #0
 800d052:	f003 0301 	andne.w	r3, r3, #1
 800d056:	428a      	cmp	r2, r1
 800d058:	bf0c      	ite	eq
 800d05a:	2300      	moveq	r3, #0
 800d05c:	f003 0301 	andne.w	r3, r3, #1
 800d060:	b113      	cbz	r3, 800d068 <HAL_TIM_IC_Init+0xb8>
 800d062:	4b30      	ldr	r3, [pc, #192]	; (800d124 <HAL_TIM_IC_Init+0x174>)
 800d064:	429a      	cmp	r2, r3
 800d066:	d14f      	bne.n	800d108 <HAL_TIM_IC_Init+0x158>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800d068:	68a2      	ldr	r2, [r4, #8]
 800d06a:	f032 0310 	bics.w	r3, r2, #16
 800d06e:	f022 0140 	bic.w	r1, r2, #64	; 0x40
 800d072:	bf14      	ite	ne
 800d074:	2301      	movne	r3, #1
 800d076:	2300      	moveq	r3, #0
 800d078:	2920      	cmp	r1, #32
 800d07a:	bf0c      	ite	eq
 800d07c:	2300      	moveq	r3, #0
 800d07e:	f003 0301 	andne.w	r3, r3, #1
 800d082:	b10b      	cbz	r3, 800d088 <HAL_TIM_IC_Init+0xd8>
 800d084:	2a40      	cmp	r2, #64	; 0x40
 800d086:	d139      	bne.n	800d0fc <HAL_TIM_IC_Init+0x14c>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800d088:	6923      	ldr	r3, [r4, #16]
 800d08a:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800d08e:	d002      	beq.n	800d096 <HAL_TIM_IC_Init+0xe6>
 800d090:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d094:	d128      	bne.n	800d0e8 <HAL_TIM_IC_Init+0x138>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800d096:	69a3      	ldr	r3, [r4, #24]
 800d098:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800d09c:	d116      	bne.n	800d0cc <HAL_TIM_IC_Init+0x11c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800d09e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800d0a2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d0a6:	b15b      	cbz	r3, 800d0c0 <HAL_TIM_IC_Init+0x110>
  htim->State = HAL_TIM_STATE_BUSY;
 800d0a8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d0aa:	6820      	ldr	r0, [r4, #0]
 800d0ac:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800d0ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d0b2:	f7ff fcd3 	bl	800ca5c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800d0b6:	2301      	movs	r3, #1
  return HAL_OK;
 800d0b8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800d0ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800d0be:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 800d0c0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 800d0c4:	4620      	mov	r0, r4
 800d0c6:	f7ff f849 	bl	800c15c <HAL_TIM_IC_MspInit>
 800d0ca:	e7ed      	b.n	800d0a8 <HAL_TIM_IC_Init+0xf8>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800d0cc:	f240 61e7 	movw	r1, #1767	; 0x6e7
 800d0d0:	4815      	ldr	r0, [pc, #84]	; (800d128 <HAL_TIM_IC_Init+0x178>)
 800d0d2:	f7f5 ff99 	bl	8003008 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800d0d6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800d0da:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d1e2      	bne.n	800d0a8 <HAL_TIM_IC_Init+0xf8>
 800d0e2:	e7ed      	b.n	800d0c0 <HAL_TIM_IC_Init+0x110>
    return HAL_ERROR;
 800d0e4:	2001      	movs	r0, #1
}
 800d0e6:	4770      	bx	lr
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800d0e8:	f240 61e6 	movw	r1, #1766	; 0x6e6
 800d0ec:	480e      	ldr	r0, [pc, #56]	; (800d128 <HAL_TIM_IC_Init+0x178>)
 800d0ee:	f7f5 ff8b 	bl	8003008 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800d0f2:	69a3      	ldr	r3, [r4, #24]
 800d0f4:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800d0f8:	d0d1      	beq.n	800d09e <HAL_TIM_IC_Init+0xee>
 800d0fa:	e7e7      	b.n	800d0cc <HAL_TIM_IC_Init+0x11c>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800d0fc:	f240 61e5 	movw	r1, #1765	; 0x6e5
 800d100:	4809      	ldr	r0, [pc, #36]	; (800d128 <HAL_TIM_IC_Init+0x178>)
 800d102:	f7f5 ff81 	bl	8003008 <assert_failed>
 800d106:	e7bf      	b.n	800d088 <HAL_TIM_IC_Init+0xd8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800d108:	f240 61e4 	movw	r1, #1764	; 0x6e4
 800d10c:	4806      	ldr	r0, [pc, #24]	; (800d128 <HAL_TIM_IC_Init+0x178>)
 800d10e:	f7f5 ff7b 	bl	8003008 <assert_failed>
 800d112:	e7a9      	b.n	800d068 <HAL_TIM_IC_Init+0xb8>
 800d114:	40000800 	.word	0x40000800
 800d118:	40010000 	.word	0x40010000
 800d11c:	40000400 	.word	0x40000400
 800d120:	40000c00 	.word	0x40000c00
 800d124:	40002000 	.word	0x40002000
 800d128:	08026a84 	.word	0x08026a84

0800d12c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d12c:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d12e:	4b2e      	ldr	r3, [pc, #184]	; (800d1e8 <TIM_OC2_SetConfig+0xbc>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d130:	f022 0210 	bic.w	r2, r2, #16
{
 800d134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d138:	460e      	mov	r6, r1
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d13a:	6889      	ldr	r1, [r1, #8]
{
 800d13c:	4604      	mov	r4, r0
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d13e:	6837      	ldr	r7, [r6, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d140:	6202      	str	r2, [r0, #32]
  tmpccer = TIMx->CCER;
 800d142:	6a05      	ldr	r5, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800d144:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800d148:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 800d14a:	f025 0520 	bic.w	r5, r5, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d14e:	4013      	ands	r3, r2
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d150:	4a26      	ldr	r2, [pc, #152]	; (800d1ec <TIM_OC2_SetConfig+0xc0>)
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d152:	ea45 1501 	orr.w	r5, r5, r1, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d156:	4290      	cmp	r0, r2
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d158:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d15c:	d00a      	beq.n	800d174 <TIM_OC2_SetConfig+0x48>
 800d15e:	4b24      	ldr	r3, [pc, #144]	; (800d1f0 <TIM_OC2_SetConfig+0xc4>)
 800d160:	4298      	cmp	r0, r3
 800d162:	d007      	beq.n	800d174 <TIM_OC2_SetConfig+0x48>
  TIMx->CCR2 = OC_Config->Pulse;
 800d164:	6873      	ldr	r3, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800d166:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 800d16a:	61a7      	str	r7, [r4, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800d16c:	63a3      	str	r3, [r4, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800d16e:	6225      	str	r5, [r4, #32]
}
 800d170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800d174:	68f2      	ldr	r2, [r6, #12]
 800d176:	f032 0308 	bics.w	r3, r2, #8
 800d17a:	d12d      	bne.n	800d1d8 <TIM_OC2_SetConfig+0xac>
    tmpccer &= ~TIM_CCER_CC2NP;
 800d17c:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800d180:	69b3      	ldr	r3, [r6, #24]
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d182:	ea45 1502 	orr.w	r5, r5, r2, lsl #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800d186:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC2NE;
 800d18a:	f025 0540 	bic.w	r5, r5, #64	; 0x40
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800d18e:	d119      	bne.n	800d1c4 <TIM_OC2_SetConfig+0x98>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800d190:	6973      	ldr	r3, [r6, #20]
 800d192:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800d196:	d107      	bne.n	800d1a8 <TIM_OC2_SetConfig+0x7c>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d198:	f428 6240 	bic.w	r2, r8, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d19c:	69b1      	ldr	r1, [r6, #24]
 800d19e:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 800d1a2:	ea42 0883 	orr.w	r8, r2, r3, lsl #2
 800d1a6:	e7dd      	b.n	800d164 <TIM_OC2_SetConfig+0x38>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800d1a8:	f241 71e5 	movw	r1, #6117	; 0x17e5
 800d1ac:	4811      	ldr	r0, [pc, #68]	; (800d1f4 <TIM_OC2_SetConfig+0xc8>)
 800d1ae:	f7f5 ff2b 	bl	8003008 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d1b2:	f428 6240 	bic.w	r2, r8, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d1b6:	69b1      	ldr	r1, [r6, #24]
 800d1b8:	6973      	ldr	r3, [r6, #20]
 800d1ba:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 800d1be:	ea42 0883 	orr.w	r8, r2, r3, lsl #2
 800d1c2:	e7cf      	b.n	800d164 <TIM_OC2_SetConfig+0x38>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800d1c4:	f241 71e4 	movw	r1, #6116	; 0x17e4
 800d1c8:	480a      	ldr	r0, [pc, #40]	; (800d1f4 <TIM_OC2_SetConfig+0xc8>)
 800d1ca:	f7f5 ff1d 	bl	8003008 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800d1ce:	6973      	ldr	r3, [r6, #20]
 800d1d0:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800d1d4:	d0e0      	beq.n	800d198 <TIM_OC2_SetConfig+0x6c>
 800d1d6:	e7e7      	b.n	800d1a8 <TIM_OC2_SetConfig+0x7c>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800d1d8:	f241 71d6 	movw	r1, #6102	; 0x17d6
 800d1dc:	4805      	ldr	r0, [pc, #20]	; (800d1f4 <TIM_OC2_SetConfig+0xc8>)
 800d1de:	f7f5 ff13 	bl	8003008 <assert_failed>
 800d1e2:	68f2      	ldr	r2, [r6, #12]
 800d1e4:	e7ca      	b.n	800d17c <TIM_OC2_SetConfig+0x50>
 800d1e6:	bf00      	nop
 800d1e8:	feff8cff 	.word	0xfeff8cff
 800d1ec:	40010000 	.word	0x40010000
 800d1f0:	40010400 	.word	0x40010400
 800d1f4:	08026a84 	.word	0x08026a84

0800d1f8 <HAL_TIM_OC_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
 800d1f8:	2a14      	cmp	r2, #20
{
 800d1fa:	b570      	push	{r4, r5, r6, lr}
 800d1fc:	4615      	mov	r5, r2
 800d1fe:	4604      	mov	r4, r0
 800d200:	460e      	mov	r6, r1
  assert_param(IS_TIM_CHANNELS(Channel));
 800d202:	f240 808f 	bls.w	800d324 <HAL_TIM_OC_ConfigChannel+0x12c>
 800d206:	2a3c      	cmp	r2, #60	; 0x3c
 800d208:	f040 8091 	bne.w	800d32e <HAL_TIM_OC_ConfigChannel+0x136>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 800d20c:	6833      	ldr	r3, [r6, #0]
 800d20e:	f023 0210 	bic.w	r2, r3, #16
 800d212:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800d216:	2a40      	cmp	r2, #64	; 0x40
 800d218:	bf18      	it	ne
 800d21a:	2b00      	cmpne	r3, #0
 800d21c:	d003      	beq.n	800d226 <HAL_TIM_OC_ConfigChannel+0x2e>
 800d21e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800d222:	f040 8137 	bne.w	800d494 <HAL_TIM_OC_ConfigChannel+0x29c>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800d226:	68b3      	ldr	r3, [r6, #8]
 800d228:	f033 0302 	bics.w	r3, r3, #2
 800d22c:	f040 8085 	bne.w	800d33a <HAL_TIM_OC_ConfigChannel+0x142>
  __HAL_LOCK(htim);
 800d230:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800d234:	2b01      	cmp	r3, #1
 800d236:	f000 808a 	beq.w	800d34e <HAL_TIM_OC_ConfigChannel+0x156>
 800d23a:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800d23c:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 800d23e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800d242:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  switch (Channel)
 800d246:	2d14      	cmp	r5, #20
 800d248:	d864      	bhi.n	800d314 <HAL_TIM_OC_ConfigChannel+0x11c>
 800d24a:	e8df f015 	tbh	[pc, r5, lsl #1]
 800d24e:	0015      	.short	0x0015
 800d250:	00630063 	.word	0x00630063
 800d254:	00820063 	.word	0x00820063
 800d258:	00630063 	.word	0x00630063
 800d25c:	00b50063 	.word	0x00b50063
 800d260:	00630063 	.word	0x00630063
 800d264:	00d90063 	.word	0x00d90063
 800d268:	00630063 	.word	0x00630063
 800d26c:	00fd0063 	.word	0x00fd0063
 800d270:	00630063 	.word	0x00630063
 800d274:	01090063 	.word	0x01090063
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800d278:	6820      	ldr	r0, [r4, #0]
 800d27a:	4b97      	ldr	r3, [pc, #604]	; (800d4d8 <HAL_TIM_OC_ConfigChannel+0x2e0>)
 800d27c:	4a97      	ldr	r2, [pc, #604]	; (800d4dc <HAL_TIM_OC_ConfigChannel+0x2e4>)
 800d27e:	4298      	cmp	r0, r3
 800d280:	bf18      	it	ne
 800d282:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800d286:	4996      	ldr	r1, [pc, #600]	; (800d4e0 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 800d288:	bf14      	ite	ne
 800d28a:	2301      	movne	r3, #1
 800d28c:	2300      	moveq	r3, #0
 800d28e:	4290      	cmp	r0, r2
 800d290:	bf0c      	ite	eq
 800d292:	2300      	moveq	r3, #0
 800d294:	f003 0301 	andne.w	r3, r3, #1
 800d298:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d29c:	4288      	cmp	r0, r1
 800d29e:	bf0c      	ite	eq
 800d2a0:	2300      	moveq	r3, #0
 800d2a2:	f003 0301 	andne.w	r3, r3, #1
 800d2a6:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 800d2aa:	4290      	cmp	r0, r2
 800d2ac:	bf0c      	ite	eq
 800d2ae:	2300      	moveq	r3, #0
 800d2b0:	f003 0301 	andne.w	r3, r3, #1
 800d2b4:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800d2b8:	4288      	cmp	r0, r1
 800d2ba:	bf0c      	ite	eq
 800d2bc:	2300      	moveq	r3, #0
 800d2be:	f003 0301 	andne.w	r3, r3, #1
 800d2c2:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800d2c6:	4290      	cmp	r0, r2
 800d2c8:	bf0c      	ite	eq
 800d2ca:	2300      	moveq	r3, #0
 800d2cc:	f003 0301 	andne.w	r3, r3, #1
 800d2d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d2d4:	4288      	cmp	r0, r1
 800d2d6:	bf0c      	ite	eq
 800d2d8:	2300      	moveq	r3, #0
 800d2da:	f003 0301 	andne.w	r3, r3, #1
 800d2de:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800d2e2:	4290      	cmp	r0, r2
 800d2e4:	bf0c      	ite	eq
 800d2e6:	2300      	moveq	r3, #0
 800d2e8:	f003 0301 	andne.w	r3, r3, #1
 800d2ec:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00
 800d2f0:	4288      	cmp	r0, r1
 800d2f2:	bf0c      	ite	eq
 800d2f4:	2300      	moveq	r3, #0
 800d2f6:	f003 0301 	andne.w	r3, r3, #1
 800d2fa:	4290      	cmp	r0, r2
 800d2fc:	bf0c      	ite	eq
 800d2fe:	2300      	moveq	r3, #0
 800d300:	f003 0301 	andne.w	r3, r3, #1
 800d304:	b11b      	cbz	r3, 800d30e <HAL_TIM_OC_ConfigChannel+0x116>
 800d306:	4b77      	ldr	r3, [pc, #476]	; (800d4e4 <HAL_TIM_OC_ConfigChannel+0x2ec>)
 800d308:	4298      	cmp	r0, r3
 800d30a:	f040 80de 	bne.w	800d4ca <HAL_TIM_OC_ConfigChannel+0x2d2>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d30e:	4631      	mov	r1, r6
 800d310:	f7fe faec 	bl	800b8ec <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim);
 800d314:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800d316:	2201      	movs	r2, #1
  return HAL_OK;
 800d318:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800d31a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800d31e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800d322:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
 800d324:	4b70      	ldr	r3, [pc, #448]	; (800d4e8 <HAL_TIM_OC_ConfigChannel+0x2f0>)
 800d326:	40d3      	lsrs	r3, r2
 800d328:	07db      	lsls	r3, r3, #31
 800d32a:	f53f af6f 	bmi.w	800d20c <HAL_TIM_OC_ConfigChannel+0x14>
 800d32e:	f640 5155 	movw	r1, #3413	; 0xd55
 800d332:	486e      	ldr	r0, [pc, #440]	; (800d4ec <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800d334:	f7f5 fe68 	bl	8003008 <assert_failed>
 800d338:	e768      	b.n	800d20c <HAL_TIM_OC_ConfigChannel+0x14>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800d33a:	f640 5157 	movw	r1, #3415	; 0xd57
 800d33e:	486b      	ldr	r0, [pc, #428]	; (800d4ec <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800d340:	f7f5 fe62 	bl	8003008 <assert_failed>
  __HAL_LOCK(htim);
 800d344:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800d348:	2b01      	cmp	r3, #1
 800d34a:	f47f af76 	bne.w	800d23a <HAL_TIM_OC_ConfigChannel+0x42>
 800d34e:	2002      	movs	r0, #2
}
 800d350:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800d352:	6820      	ldr	r0, [r4, #0]
 800d354:	4b60      	ldr	r3, [pc, #384]	; (800d4d8 <HAL_TIM_OC_ConfigChannel+0x2e0>)
 800d356:	4a61      	ldr	r2, [pc, #388]	; (800d4dc <HAL_TIM_OC_ConfigChannel+0x2e4>)
 800d358:	4298      	cmp	r0, r3
 800d35a:	bf18      	it	ne
 800d35c:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800d360:	495f      	ldr	r1, [pc, #380]	; (800d4e0 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 800d362:	bf14      	ite	ne
 800d364:	2301      	movne	r3, #1
 800d366:	2300      	moveq	r3, #0
 800d368:	4290      	cmp	r0, r2
 800d36a:	bf0c      	ite	eq
 800d36c:	2300      	moveq	r3, #0
 800d36e:	f003 0301 	andne.w	r3, r3, #1
 800d372:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d376:	4288      	cmp	r0, r1
 800d378:	bf0c      	ite	eq
 800d37a:	2300      	moveq	r3, #0
 800d37c:	f003 0301 	andne.w	r3, r3, #1
 800d380:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 800d384:	4290      	cmp	r0, r2
 800d386:	bf0c      	ite	eq
 800d388:	2300      	moveq	r3, #0
 800d38a:	f003 0301 	andne.w	r3, r3, #1
 800d38e:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800d392:	4288      	cmp	r0, r1
 800d394:	bf0c      	ite	eq
 800d396:	2300      	moveq	r3, #0
 800d398:	f003 0301 	andne.w	r3, r3, #1
 800d39c:	4290      	cmp	r0, r2
 800d39e:	bf0c      	ite	eq
 800d3a0:	2300      	moveq	r3, #0
 800d3a2:	f003 0301 	andne.w	r3, r3, #1
 800d3a6:	b11b      	cbz	r3, 800d3b0 <HAL_TIM_OC_ConfigChannel+0x1b8>
 800d3a8:	4b51      	ldr	r3, [pc, #324]	; (800d4f0 <HAL_TIM_OC_ConfigChannel+0x2f8>)
 800d3aa:	4298      	cmp	r0, r3
 800d3ac:	f040 8086 	bne.w	800d4bc <HAL_TIM_OC_ConfigChannel+0x2c4>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d3b0:	4631      	mov	r1, r6
 800d3b2:	f7ff febb 	bl	800d12c <TIM_OC2_SetConfig>
      break;
 800d3b6:	e7ad      	b.n	800d314 <HAL_TIM_OC_ConfigChannel+0x11c>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800d3b8:	6820      	ldr	r0, [r4, #0]
 800d3ba:	4b47      	ldr	r3, [pc, #284]	; (800d4d8 <HAL_TIM_OC_ConfigChannel+0x2e0>)
 800d3bc:	4a47      	ldr	r2, [pc, #284]	; (800d4dc <HAL_TIM_OC_ConfigChannel+0x2e4>)
 800d3be:	4298      	cmp	r0, r3
 800d3c0:	bf18      	it	ne
 800d3c2:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800d3c6:	4946      	ldr	r1, [pc, #280]	; (800d4e0 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 800d3c8:	bf14      	ite	ne
 800d3ca:	2301      	movne	r3, #1
 800d3cc:	2300      	moveq	r3, #0
 800d3ce:	4290      	cmp	r0, r2
 800d3d0:	bf0c      	ite	eq
 800d3d2:	2300      	moveq	r3, #0
 800d3d4:	f003 0301 	andne.w	r3, r3, #1
 800d3d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d3dc:	4288      	cmp	r0, r1
 800d3de:	bf0c      	ite	eq
 800d3e0:	2300      	moveq	r3, #0
 800d3e2:	f003 0301 	andne.w	r3, r3, #1
 800d3e6:	4290      	cmp	r0, r2
 800d3e8:	bf0c      	ite	eq
 800d3ea:	2300      	moveq	r3, #0
 800d3ec:	f003 0301 	andne.w	r3, r3, #1
 800d3f0:	b113      	cbz	r3, 800d3f8 <HAL_TIM_OC_ConfigChannel+0x200>
 800d3f2:	4b40      	ldr	r3, [pc, #256]	; (800d4f4 <HAL_TIM_OC_ConfigChannel+0x2fc>)
 800d3f4:	4298      	cmp	r0, r3
 800d3f6:	d15a      	bne.n	800d4ae <HAL_TIM_OC_ConfigChannel+0x2b6>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d3f8:	4631      	mov	r1, r6
 800d3fa:	f7fe fad9 	bl	800b9b0 <TIM_OC3_SetConfig>
      break;
 800d3fe:	e789      	b.n	800d314 <HAL_TIM_OC_ConfigChannel+0x11c>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800d400:	6820      	ldr	r0, [r4, #0]
 800d402:	4b35      	ldr	r3, [pc, #212]	; (800d4d8 <HAL_TIM_OC_ConfigChannel+0x2e0>)
 800d404:	4a35      	ldr	r2, [pc, #212]	; (800d4dc <HAL_TIM_OC_ConfigChannel+0x2e4>)
 800d406:	4298      	cmp	r0, r3
 800d408:	bf18      	it	ne
 800d40a:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800d40e:	4934      	ldr	r1, [pc, #208]	; (800d4e0 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 800d410:	bf14      	ite	ne
 800d412:	2301      	movne	r3, #1
 800d414:	2300      	moveq	r3, #0
 800d416:	4290      	cmp	r0, r2
 800d418:	bf0c      	ite	eq
 800d41a:	2300      	moveq	r3, #0
 800d41c:	f003 0301 	andne.w	r3, r3, #1
 800d420:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d424:	4288      	cmp	r0, r1
 800d426:	bf0c      	ite	eq
 800d428:	2300      	moveq	r3, #0
 800d42a:	f003 0301 	andne.w	r3, r3, #1
 800d42e:	4290      	cmp	r0, r2
 800d430:	bf0c      	ite	eq
 800d432:	2300      	moveq	r3, #0
 800d434:	f003 0301 	andne.w	r3, r3, #1
 800d438:	b113      	cbz	r3, 800d440 <HAL_TIM_OC_ConfigChannel+0x248>
 800d43a:	4b2e      	ldr	r3, [pc, #184]	; (800d4f4 <HAL_TIM_OC_ConfigChannel+0x2fc>)
 800d43c:	4298      	cmp	r0, r3
 800d43e:	d12f      	bne.n	800d4a0 <HAL_TIM_OC_ConfigChannel+0x2a8>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d440:	4631      	mov	r1, r6
 800d442:	f7fe fb1b 	bl	800ba7c <TIM_OC4_SetConfig>
      break;
 800d446:	e765      	b.n	800d314 <HAL_TIM_OC_ConfigChannel+0x11c>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800d448:	6820      	ldr	r0, [r4, #0]
 800d44a:	4b23      	ldr	r3, [pc, #140]	; (800d4d8 <HAL_TIM_OC_ConfigChannel+0x2e0>)
 800d44c:	4298      	cmp	r0, r3
 800d44e:	d003      	beq.n	800d458 <HAL_TIM_OC_ConfigChannel+0x260>
 800d450:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d454:	4298      	cmp	r0, r3
 800d456:	d116      	bne.n	800d486 <HAL_TIM_OC_ConfigChannel+0x28e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d458:	4631      	mov	r1, r6
 800d45a:	f7fe f9f3 	bl	800b844 <TIM_OC5_SetConfig>
      break;
 800d45e:	e759      	b.n	800d314 <HAL_TIM_OC_ConfigChannel+0x11c>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800d460:	6820      	ldr	r0, [r4, #0]
 800d462:	4b1d      	ldr	r3, [pc, #116]	; (800d4d8 <HAL_TIM_OC_ConfigChannel+0x2e0>)
 800d464:	4298      	cmp	r0, r3
 800d466:	d003      	beq.n	800d470 <HAL_TIM_OC_ConfigChannel+0x278>
 800d468:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d46c:	4298      	cmp	r0, r3
 800d46e:	d103      	bne.n	800d478 <HAL_TIM_OC_ConfigChannel+0x280>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d470:	4631      	mov	r1, r6
 800d472:	f7fe fa11 	bl	800b898 <TIM_OC6_SetConfig>
      break;
 800d476:	e74d      	b.n	800d314 <HAL_TIM_OC_ConfigChannel+0x11c>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800d478:	481c      	ldr	r0, [pc, #112]	; (800d4ec <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800d47a:	f640 5195 	movw	r1, #3477	; 0xd95
 800d47e:	f7f5 fdc3 	bl	8003008 <assert_failed>
 800d482:	6820      	ldr	r0, [r4, #0]
 800d484:	e7f4      	b.n	800d470 <HAL_TIM_OC_ConfigChannel+0x278>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800d486:	4819      	ldr	r0, [pc, #100]	; (800d4ec <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800d488:	f640 518b 	movw	r1, #3467	; 0xd8b
 800d48c:	f7f5 fdbc 	bl	8003008 <assert_failed>
 800d490:	6820      	ldr	r0, [r4, #0]
 800d492:	e7e1      	b.n	800d458 <HAL_TIM_OC_ConfigChannel+0x260>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 800d494:	f640 5156 	movw	r1, #3414	; 0xd56
 800d498:	4814      	ldr	r0, [pc, #80]	; (800d4ec <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800d49a:	f7f5 fdb5 	bl	8003008 <assert_failed>
 800d49e:	e6c2      	b.n	800d226 <HAL_TIM_OC_ConfigChannel+0x2e>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800d4a0:	4812      	ldr	r0, [pc, #72]	; (800d4ec <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800d4a2:	f640 5181 	movw	r1, #3457	; 0xd81
 800d4a6:	f7f5 fdaf 	bl	8003008 <assert_failed>
 800d4aa:	6820      	ldr	r0, [r4, #0]
 800d4ac:	e7c8      	b.n	800d440 <HAL_TIM_OC_ConfigChannel+0x248>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800d4ae:	480f      	ldr	r0, [pc, #60]	; (800d4ec <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800d4b0:	f640 5177 	movw	r1, #3447	; 0xd77
 800d4b4:	f7f5 fda8 	bl	8003008 <assert_failed>
 800d4b8:	6820      	ldr	r0, [r4, #0]
 800d4ba:	e79d      	b.n	800d3f8 <HAL_TIM_OC_ConfigChannel+0x200>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800d4bc:	480b      	ldr	r0, [pc, #44]	; (800d4ec <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800d4be:	f640 516d 	movw	r1, #3437	; 0xd6d
 800d4c2:	f7f5 fda1 	bl	8003008 <assert_failed>
 800d4c6:	6820      	ldr	r0, [r4, #0]
 800d4c8:	e772      	b.n	800d3b0 <HAL_TIM_OC_ConfigChannel+0x1b8>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800d4ca:	4808      	ldr	r0, [pc, #32]	; (800d4ec <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800d4cc:	f640 5163 	movw	r1, #3427	; 0xd63
 800d4d0:	f7f5 fd9a 	bl	8003008 <assert_failed>
 800d4d4:	6820      	ldr	r0, [r4, #0]
 800d4d6:	e71a      	b.n	800d30e <HAL_TIM_OC_ConfigChannel+0x116>
 800d4d8:	40010000 	.word	0x40010000
 800d4dc:	40000400 	.word	0x40000400
 800d4e0:	40000800 	.word	0x40000800
 800d4e4:	40002000 	.word	0x40002000
 800d4e8:	00111111 	.word	0x00111111
 800d4ec:	08026a84 	.word	0x08026a84
 800d4f0:	40001800 	.word	0x40001800
 800d4f4:	40010400 	.word	0x40010400

0800d4f8 <HAL_TIM_PWM_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
 800d4f8:	2a14      	cmp	r2, #20
{
 800d4fa:	b570      	push	{r4, r5, r6, lr}
 800d4fc:	4616      	mov	r6, r2
 800d4fe:	4604      	mov	r4, r0
 800d500:	460d      	mov	r5, r1
  assert_param(IS_TIM_CHANNELS(Channel));
 800d502:	f240 809f 	bls.w	800d644 <HAL_TIM_PWM_ConfigChannel+0x14c>
 800d506:	2a3c      	cmp	r2, #60	; 0x3c
 800d508:	f040 80a1 	bne.w	800d64e <HAL_TIM_PWM_ConfigChannel+0x156>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800d50c:	682a      	ldr	r2, [r5, #0]
 800d50e:	4b97      	ldr	r3, [pc, #604]	; (800d76c <HAL_TIM_PWM_ConfigChannel+0x274>)
 800d510:	4013      	ands	r3, r2
 800d512:	2b60      	cmp	r3, #96	; 0x60
 800d514:	d005      	beq.n	800d522 <HAL_TIM_PWM_ConfigChannel+0x2a>
 800d516:	f022 0210 	bic.w	r2, r2, #16
 800d51a:	4b95      	ldr	r3, [pc, #596]	; (800d770 <HAL_TIM_PWM_ConfigChannel+0x278>)
 800d51c:	429a      	cmp	r2, r3
 800d51e:	f040 819e 	bne.w	800d85e <HAL_TIM_PWM_ConfigChannel+0x366>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800d522:	68ab      	ldr	r3, [r5, #8]
 800d524:	f033 0302 	bics.w	r3, r3, #2
 800d528:	f040 8097 	bne.w	800d65a <HAL_TIM_PWM_ConfigChannel+0x162>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800d52c:	692b      	ldr	r3, [r5, #16]
 800d52e:	f033 0304 	bics.w	r3, r3, #4
 800d532:	f040 809c 	bne.w	800d66e <HAL_TIM_PWM_ConfigChannel+0x176>
  __HAL_LOCK(htim);
 800d536:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800d53a:	2b01      	cmp	r3, #1
 800d53c:	f000 80a1 	beq.w	800d682 <HAL_TIM_PWM_ConfigChannel+0x18a>
 800d540:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800d542:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 800d544:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800d548:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  switch (Channel)
 800d54c:	2e14      	cmp	r6, #20
 800d54e:	d871      	bhi.n	800d634 <HAL_TIM_PWM_ConfigChannel+0x13c>
 800d550:	e8df f016 	tbh	[pc, r6, lsl #1]
 800d554:	00700015 	.word	0x00700015
 800d558:	00700070 	.word	0x00700070
 800d55c:	00700099 	.word	0x00700099
 800d560:	00700070 	.word	0x00700070
 800d564:	007000da 	.word	0x007000da
 800d568:	00700070 	.word	0x00700070
 800d56c:	00700120 	.word	0x00700120
 800d570:	00700070 	.word	0x00700070
 800d574:	00700152 	.word	0x00700152
 800d578:	00700070 	.word	0x00700070
 800d57c:	016b      	.short	0x016b
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800d57e:	6820      	ldr	r0, [r4, #0]
 800d580:	4b7c      	ldr	r3, [pc, #496]	; (800d774 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 800d582:	4a7d      	ldr	r2, [pc, #500]	; (800d778 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800d584:	4298      	cmp	r0, r3
 800d586:	bf18      	it	ne
 800d588:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800d58c:	497b      	ldr	r1, [pc, #492]	; (800d77c <HAL_TIM_PWM_ConfigChannel+0x284>)
 800d58e:	bf14      	ite	ne
 800d590:	2301      	movne	r3, #1
 800d592:	2300      	moveq	r3, #0
 800d594:	4290      	cmp	r0, r2
 800d596:	bf0c      	ite	eq
 800d598:	2300      	moveq	r3, #0
 800d59a:	f003 0301 	andne.w	r3, r3, #1
 800d59e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d5a2:	4288      	cmp	r0, r1
 800d5a4:	bf0c      	ite	eq
 800d5a6:	2300      	moveq	r3, #0
 800d5a8:	f003 0301 	andne.w	r3, r3, #1
 800d5ac:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 800d5b0:	4290      	cmp	r0, r2
 800d5b2:	bf0c      	ite	eq
 800d5b4:	2300      	moveq	r3, #0
 800d5b6:	f003 0301 	andne.w	r3, r3, #1
 800d5ba:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800d5be:	4288      	cmp	r0, r1
 800d5c0:	bf0c      	ite	eq
 800d5c2:	2300      	moveq	r3, #0
 800d5c4:	f003 0301 	andne.w	r3, r3, #1
 800d5c8:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800d5cc:	4290      	cmp	r0, r2
 800d5ce:	bf0c      	ite	eq
 800d5d0:	2300      	moveq	r3, #0
 800d5d2:	f003 0301 	andne.w	r3, r3, #1
 800d5d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d5da:	4288      	cmp	r0, r1
 800d5dc:	bf0c      	ite	eq
 800d5de:	2300      	moveq	r3, #0
 800d5e0:	f003 0301 	andne.w	r3, r3, #1
 800d5e4:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800d5e8:	4290      	cmp	r0, r2
 800d5ea:	bf0c      	ite	eq
 800d5ec:	2300      	moveq	r3, #0
 800d5ee:	f003 0301 	andne.w	r3, r3, #1
 800d5f2:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00
 800d5f6:	4288      	cmp	r0, r1
 800d5f8:	bf0c      	ite	eq
 800d5fa:	2300      	moveq	r3, #0
 800d5fc:	f003 0301 	andne.w	r3, r3, #1
 800d600:	4290      	cmp	r0, r2
 800d602:	bf0c      	ite	eq
 800d604:	2300      	moveq	r3, #0
 800d606:	f003 0301 	andne.w	r3, r3, #1
 800d60a:	b11b      	cbz	r3, 800d614 <HAL_TIM_PWM_ConfigChannel+0x11c>
 800d60c:	4b5c      	ldr	r3, [pc, #368]	; (800d780 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800d60e:	4298      	cmp	r0, r3
 800d610:	f040 814e 	bne.w	800d8b0 <HAL_TIM_PWM_ConfigChannel+0x3b8>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d614:	4629      	mov	r1, r5
 800d616:	f7fe f969 	bl	800b8ec <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d61a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d61c:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d61e:	6999      	ldr	r1, [r3, #24]
 800d620:	f041 0108 	orr.w	r1, r1, #8
 800d624:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d626:	6999      	ldr	r1, [r3, #24]
 800d628:	f021 0104 	bic.w	r1, r1, #4
 800d62c:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d62e:	699a      	ldr	r2, [r3, #24]
 800d630:	4302      	orrs	r2, r0
 800d632:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 800d634:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800d636:	2201      	movs	r2, #1
  return HAL_OK;
 800d638:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800d63a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800d63e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800d642:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
 800d644:	4b4f      	ldr	r3, [pc, #316]	; (800d784 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 800d646:	40d3      	lsrs	r3, r2
 800d648:	07db      	lsls	r3, r3, #31
 800d64a:	f53f af5f 	bmi.w	800d50c <HAL_TIM_PWM_ConfigChannel+0x14>
 800d64e:	f640 611c 	movw	r1, #3612	; 0xe1c
 800d652:	484d      	ldr	r0, [pc, #308]	; (800d788 <HAL_TIM_PWM_ConfigChannel+0x290>)
 800d654:	f7f5 fcd8 	bl	8003008 <assert_failed>
 800d658:	e758      	b.n	800d50c <HAL_TIM_PWM_ConfigChannel+0x14>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800d65a:	f640 611e 	movw	r1, #3614	; 0xe1e
 800d65e:	484a      	ldr	r0, [pc, #296]	; (800d788 <HAL_TIM_PWM_ConfigChannel+0x290>)
 800d660:	f7f5 fcd2 	bl	8003008 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800d664:	692b      	ldr	r3, [r5, #16]
 800d666:	f033 0304 	bics.w	r3, r3, #4
 800d66a:	f43f af64 	beq.w	800d536 <HAL_TIM_PWM_ConfigChannel+0x3e>
 800d66e:	f640 611f 	movw	r1, #3615	; 0xe1f
 800d672:	4845      	ldr	r0, [pc, #276]	; (800d788 <HAL_TIM_PWM_ConfigChannel+0x290>)
 800d674:	f7f5 fcc8 	bl	8003008 <assert_failed>
  __HAL_LOCK(htim);
 800d678:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800d67c:	2b01      	cmp	r3, #1
 800d67e:	f47f af5f 	bne.w	800d540 <HAL_TIM_PWM_ConfigChannel+0x48>
 800d682:	2002      	movs	r0, #2
}
 800d684:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800d686:	6820      	ldr	r0, [r4, #0]
 800d688:	4b3a      	ldr	r3, [pc, #232]	; (800d774 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 800d68a:	4a3b      	ldr	r2, [pc, #236]	; (800d778 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800d68c:	4298      	cmp	r0, r3
 800d68e:	bf18      	it	ne
 800d690:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800d694:	4939      	ldr	r1, [pc, #228]	; (800d77c <HAL_TIM_PWM_ConfigChannel+0x284>)
 800d696:	bf14      	ite	ne
 800d698:	2301      	movne	r3, #1
 800d69a:	2300      	moveq	r3, #0
 800d69c:	4290      	cmp	r0, r2
 800d69e:	bf0c      	ite	eq
 800d6a0:	2300      	moveq	r3, #0
 800d6a2:	f003 0301 	andne.w	r3, r3, #1
 800d6a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d6aa:	4288      	cmp	r0, r1
 800d6ac:	bf0c      	ite	eq
 800d6ae:	2300      	moveq	r3, #0
 800d6b0:	f003 0301 	andne.w	r3, r3, #1
 800d6b4:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 800d6b8:	4290      	cmp	r0, r2
 800d6ba:	bf0c      	ite	eq
 800d6bc:	2300      	moveq	r3, #0
 800d6be:	f003 0301 	andne.w	r3, r3, #1
 800d6c2:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800d6c6:	4288      	cmp	r0, r1
 800d6c8:	bf0c      	ite	eq
 800d6ca:	2300      	moveq	r3, #0
 800d6cc:	f003 0301 	andne.w	r3, r3, #1
 800d6d0:	4290      	cmp	r0, r2
 800d6d2:	bf0c      	ite	eq
 800d6d4:	2300      	moveq	r3, #0
 800d6d6:	f003 0301 	andne.w	r3, r3, #1
 800d6da:	b11b      	cbz	r3, 800d6e4 <HAL_TIM_PWM_ConfigChannel+0x1ec>
 800d6dc:	4b2b      	ldr	r3, [pc, #172]	; (800d78c <HAL_TIM_PWM_ConfigChannel+0x294>)
 800d6de:	4298      	cmp	r0, r3
 800d6e0:	f040 80df 	bne.w	800d8a2 <HAL_TIM_PWM_ConfigChannel+0x3aa>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d6e4:	4629      	mov	r1, r5
 800d6e6:	f7ff fd21 	bl	800d12c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d6ea:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d6ec:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d6ee:	6999      	ldr	r1, [r3, #24]
 800d6f0:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800d6f4:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d6f6:	6999      	ldr	r1, [r3, #24]
 800d6f8:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800d6fc:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d6fe:	699a      	ldr	r2, [r3, #24]
 800d700:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800d704:	619a      	str	r2, [r3, #24]
      break;
 800d706:	e795      	b.n	800d634 <HAL_TIM_PWM_ConfigChannel+0x13c>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800d708:	6820      	ldr	r0, [r4, #0]
 800d70a:	4b1a      	ldr	r3, [pc, #104]	; (800d774 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 800d70c:	4a1a      	ldr	r2, [pc, #104]	; (800d778 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800d70e:	4298      	cmp	r0, r3
 800d710:	bf18      	it	ne
 800d712:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800d716:	4919      	ldr	r1, [pc, #100]	; (800d77c <HAL_TIM_PWM_ConfigChannel+0x284>)
 800d718:	bf14      	ite	ne
 800d71a:	2301      	movne	r3, #1
 800d71c:	2300      	moveq	r3, #0
 800d71e:	4290      	cmp	r0, r2
 800d720:	bf0c      	ite	eq
 800d722:	2300      	moveq	r3, #0
 800d724:	f003 0301 	andne.w	r3, r3, #1
 800d728:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d72c:	4288      	cmp	r0, r1
 800d72e:	bf0c      	ite	eq
 800d730:	2300      	moveq	r3, #0
 800d732:	f003 0301 	andne.w	r3, r3, #1
 800d736:	4290      	cmp	r0, r2
 800d738:	bf0c      	ite	eq
 800d73a:	2300      	moveq	r3, #0
 800d73c:	f003 0301 	andne.w	r3, r3, #1
 800d740:	b11b      	cbz	r3, 800d74a <HAL_TIM_PWM_ConfigChannel+0x252>
 800d742:	4b13      	ldr	r3, [pc, #76]	; (800d790 <HAL_TIM_PWM_ConfigChannel+0x298>)
 800d744:	4298      	cmp	r0, r3
 800d746:	f040 80a5 	bne.w	800d894 <HAL_TIM_PWM_ConfigChannel+0x39c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d74a:	4629      	mov	r1, r5
 800d74c:	f7fe f930 	bl	800b9b0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d750:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d752:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d754:	69d9      	ldr	r1, [r3, #28]
 800d756:	f041 0108 	orr.w	r1, r1, #8
 800d75a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d75c:	69d9      	ldr	r1, [r3, #28]
 800d75e:	f021 0104 	bic.w	r1, r1, #4
 800d762:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d764:	69da      	ldr	r2, [r3, #28]
 800d766:	4302      	orrs	r2, r0
 800d768:	61da      	str	r2, [r3, #28]
      break;
 800d76a:	e763      	b.n	800d634 <HAL_TIM_PWM_ConfigChannel+0x13c>
 800d76c:	fffeffef 	.word	0xfffeffef
 800d770:	00010040 	.word	0x00010040
 800d774:	40010000 	.word	0x40010000
 800d778:	40000400 	.word	0x40000400
 800d77c:	40000800 	.word	0x40000800
 800d780:	40002000 	.word	0x40002000
 800d784:	00111111 	.word	0x00111111
 800d788:	08026a84 	.word	0x08026a84
 800d78c:	40001800 	.word	0x40001800
 800d790:	40010400 	.word	0x40010400
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800d794:	6820      	ldr	r0, [r4, #0]
 800d796:	4b4a      	ldr	r3, [pc, #296]	; (800d8c0 <HAL_TIM_PWM_ConfigChannel+0x3c8>)
 800d798:	4a4a      	ldr	r2, [pc, #296]	; (800d8c4 <HAL_TIM_PWM_ConfigChannel+0x3cc>)
 800d79a:	4298      	cmp	r0, r3
 800d79c:	bf18      	it	ne
 800d79e:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800d7a2:	4949      	ldr	r1, [pc, #292]	; (800d8c8 <HAL_TIM_PWM_ConfigChannel+0x3d0>)
 800d7a4:	bf14      	ite	ne
 800d7a6:	2301      	movne	r3, #1
 800d7a8:	2300      	moveq	r3, #0
 800d7aa:	4290      	cmp	r0, r2
 800d7ac:	bf0c      	ite	eq
 800d7ae:	2300      	moveq	r3, #0
 800d7b0:	f003 0301 	andne.w	r3, r3, #1
 800d7b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d7b8:	4288      	cmp	r0, r1
 800d7ba:	bf0c      	ite	eq
 800d7bc:	2300      	moveq	r3, #0
 800d7be:	f003 0301 	andne.w	r3, r3, #1
 800d7c2:	4290      	cmp	r0, r2
 800d7c4:	bf0c      	ite	eq
 800d7c6:	2300      	moveq	r3, #0
 800d7c8:	f003 0301 	andne.w	r3, r3, #1
 800d7cc:	b113      	cbz	r3, 800d7d4 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 800d7ce:	4b3f      	ldr	r3, [pc, #252]	; (800d8cc <HAL_TIM_PWM_ConfigChannel+0x3d4>)
 800d7d0:	4298      	cmp	r0, r3
 800d7d2:	d158      	bne.n	800d886 <HAL_TIM_PWM_ConfigChannel+0x38e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d7d4:	4629      	mov	r1, r5
 800d7d6:	f7fe f951 	bl	800ba7c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d7da:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d7dc:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d7de:	69d9      	ldr	r1, [r3, #28]
 800d7e0:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800d7e4:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d7e6:	69d9      	ldr	r1, [r3, #28]
 800d7e8:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800d7ec:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d7ee:	69da      	ldr	r2, [r3, #28]
 800d7f0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800d7f4:	61da      	str	r2, [r3, #28]
      break;
 800d7f6:	e71d      	b.n	800d634 <HAL_TIM_PWM_ConfigChannel+0x13c>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800d7f8:	6820      	ldr	r0, [r4, #0]
 800d7fa:	4b31      	ldr	r3, [pc, #196]	; (800d8c0 <HAL_TIM_PWM_ConfigChannel+0x3c8>)
 800d7fc:	4298      	cmp	r0, r3
 800d7fe:	d003      	beq.n	800d808 <HAL_TIM_PWM_ConfigChannel+0x310>
 800d800:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d804:	4298      	cmp	r0, r3
 800d806:	d137      	bne.n	800d878 <HAL_TIM_PWM_ConfigChannel+0x380>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d808:	4629      	mov	r1, r5
 800d80a:	f7fe f81b 	bl	800b844 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d80e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d810:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d812:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d814:	f041 0108 	orr.w	r1, r1, #8
 800d818:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d81a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d81c:	f021 0104 	bic.w	r1, r1, #4
 800d820:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d822:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d824:	4302      	orrs	r2, r0
 800d826:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d828:	e704      	b.n	800d634 <HAL_TIM_PWM_ConfigChannel+0x13c>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800d82a:	6820      	ldr	r0, [r4, #0]
 800d82c:	4b24      	ldr	r3, [pc, #144]	; (800d8c0 <HAL_TIM_PWM_ConfigChannel+0x3c8>)
 800d82e:	4298      	cmp	r0, r3
 800d830:	d003      	beq.n	800d83a <HAL_TIM_PWM_ConfigChannel+0x342>
 800d832:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d836:	4298      	cmp	r0, r3
 800d838:	d117      	bne.n	800d86a <HAL_TIM_PWM_ConfigChannel+0x372>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d83a:	4629      	mov	r1, r5
 800d83c:	f7fe f82c 	bl	800b898 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d840:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d842:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d844:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d846:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800d84a:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d84c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d84e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800d852:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d854:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d856:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800d85a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d85c:	e6ea      	b.n	800d634 <HAL_TIM_PWM_ConfigChannel+0x13c>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800d85e:	f640 611d 	movw	r1, #3613	; 0xe1d
 800d862:	481b      	ldr	r0, [pc, #108]	; (800d8d0 <HAL_TIM_PWM_ConfigChannel+0x3d8>)
 800d864:	f7f5 fbd0 	bl	8003008 <assert_failed>
 800d868:	e65b      	b.n	800d522 <HAL_TIM_PWM_ConfigChannel+0x2a>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800d86a:	4819      	ldr	r0, [pc, #100]	; (800d8d0 <HAL_TIM_PWM_ConfigChannel+0x3d8>)
 800d86c:	f44f 6168 	mov.w	r1, #3712	; 0xe80
 800d870:	f7f5 fbca 	bl	8003008 <assert_failed>
 800d874:	6820      	ldr	r0, [r4, #0]
 800d876:	e7e0      	b.n	800d83a <HAL_TIM_PWM_ConfigChannel+0x342>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800d878:	4815      	ldr	r0, [pc, #84]	; (800d8d0 <HAL_TIM_PWM_ConfigChannel+0x3d8>)
 800d87a:	f640 616f 	movw	r1, #3695	; 0xe6f
 800d87e:	f7f5 fbc3 	bl	8003008 <assert_failed>
 800d882:	6820      	ldr	r0, [r4, #0]
 800d884:	e7c0      	b.n	800d808 <HAL_TIM_PWM_ConfigChannel+0x310>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800d886:	4812      	ldr	r0, [pc, #72]	; (800d8d0 <HAL_TIM_PWM_ConfigChannel+0x3d8>)
 800d888:	f640 615e 	movw	r1, #3678	; 0xe5e
 800d88c:	f7f5 fbbc 	bl	8003008 <assert_failed>
 800d890:	6820      	ldr	r0, [r4, #0]
 800d892:	e79f      	b.n	800d7d4 <HAL_TIM_PWM_ConfigChannel+0x2dc>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800d894:	480e      	ldr	r0, [pc, #56]	; (800d8d0 <HAL_TIM_PWM_ConfigChannel+0x3d8>)
 800d896:	f640 614d 	movw	r1, #3661	; 0xe4d
 800d89a:	f7f5 fbb5 	bl	8003008 <assert_failed>
 800d89e:	6820      	ldr	r0, [r4, #0]
 800d8a0:	e753      	b.n	800d74a <HAL_TIM_PWM_ConfigChannel+0x252>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800d8a2:	480b      	ldr	r0, [pc, #44]	; (800d8d0 <HAL_TIM_PWM_ConfigChannel+0x3d8>)
 800d8a4:	f640 613c 	movw	r1, #3644	; 0xe3c
 800d8a8:	f7f5 fbae 	bl	8003008 <assert_failed>
 800d8ac:	6820      	ldr	r0, [r4, #0]
 800d8ae:	e719      	b.n	800d6e4 <HAL_TIM_PWM_ConfigChannel+0x1ec>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800d8b0:	4807      	ldr	r0, [pc, #28]	; (800d8d0 <HAL_TIM_PWM_ConfigChannel+0x3d8>)
 800d8b2:	f640 612b 	movw	r1, #3627	; 0xe2b
 800d8b6:	f7f5 fba7 	bl	8003008 <assert_failed>
 800d8ba:	6820      	ldr	r0, [r4, #0]
 800d8bc:	e6aa      	b.n	800d614 <HAL_TIM_PWM_ConfigChannel+0x11c>
 800d8be:	bf00      	nop
 800d8c0:	40010000 	.word	0x40010000
 800d8c4:	40000400 	.word	0x40000400
 800d8c8:	40000800 	.word	0x40000800
 800d8cc:	40010400 	.word	0x40010400
 800d8d0:	08026a84 	.word	0x08026a84

0800d8d4 <TIM_TI1_SetConfig>:
{
 800d8d4:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d8d6:	6a04      	ldr	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800d8d8:	4e1b      	ldr	r6, [pc, #108]	; (800d948 <TIM_TI1_SetConfig+0x74>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d8da:	f024 0401 	bic.w	r4, r4, #1
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800d8de:	42b0      	cmp	r0, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d8e0:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d8e2:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800d8e4:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800d8e6:	d01d      	beq.n	800d924 <TIM_TI1_SetConfig+0x50>
 800d8e8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800d8ec:	d01a      	beq.n	800d924 <TIM_TI1_SetConfig+0x50>
 800d8ee:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 800d8f2:	42b0      	cmp	r0, r6
 800d8f4:	d016      	beq.n	800d924 <TIM_TI1_SetConfig+0x50>
 800d8f6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800d8fa:	42b0      	cmp	r0, r6
 800d8fc:	d012      	beq.n	800d924 <TIM_TI1_SetConfig+0x50>
 800d8fe:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800d902:	42b0      	cmp	r0, r6
 800d904:	d00e      	beq.n	800d924 <TIM_TI1_SetConfig+0x50>
 800d906:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 800d90a:	42b0      	cmp	r0, r6
 800d90c:	d00a      	beq.n	800d924 <TIM_TI1_SetConfig+0x50>
 800d90e:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 800d912:	42b0      	cmp	r0, r6
 800d914:	d006      	beq.n	800d924 <TIM_TI1_SetConfig+0x50>
 800d916:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 800d91a:	42b0      	cmp	r0, r6
 800d91c:	d002      	beq.n	800d924 <TIM_TI1_SetConfig+0x50>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800d91e:	f044 0201 	orr.w	r2, r4, #1
 800d922:	e002      	b.n	800d92a <TIM_TI1_SetConfig+0x56>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800d924:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 800d928:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800d92a:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d92c:	f025 040a 	bic.w	r4, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d930:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800d934:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800d938:	b2db      	uxtb	r3, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800d93a:	4321      	orrs	r1, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800d93c:	4313      	orrs	r3, r2
}
 800d93e:	bc70      	pop	{r4, r5, r6}
  TIMx->CCMR1 = tmpccmr1;
 800d940:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800d942:	6201      	str	r1, [r0, #32]
}
 800d944:	4770      	bx	lr
 800d946:	bf00      	nop
 800d948:	40010000 	.word	0x40010000

0800d94c <HAL_TIM_IC_ConfigChannel>:
{
 800d94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800d94e:	4bb1      	ldr	r3, [pc, #708]	; (800dc14 <HAL_TIM_IC_ConfigChannel+0x2c8>)
{
 800d950:	460c      	mov	r4, r1
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800d952:	6801      	ldr	r1, [r0, #0]
{
 800d954:	4605      	mov	r5, r0
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800d956:	4fb0      	ldr	r7, [pc, #704]	; (800dc18 <HAL_TIM_IC_ConfigChannel+0x2cc>)
{
 800d958:	4616      	mov	r6, r2
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800d95a:	4299      	cmp	r1, r3
 800d95c:	bf18      	it	ne
 800d95e:	f1b1 4f80 	cmpne.w	r1, #1073741824	; 0x40000000
 800d962:	48ae      	ldr	r0, [pc, #696]	; (800dc1c <HAL_TIM_IC_ConfigChannel+0x2d0>)
 800d964:	4aae      	ldr	r2, [pc, #696]	; (800dc20 <HAL_TIM_IC_ConfigChannel+0x2d4>)
 800d966:	bf14      	ite	ne
 800d968:	2301      	movne	r3, #1
 800d96a:	2300      	moveq	r3, #0
 800d96c:	42b9      	cmp	r1, r7
 800d96e:	bf0c      	ite	eq
 800d970:	2300      	moveq	r3, #0
 800d972:	f003 0301 	andne.w	r3, r3, #1
 800d976:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800d97a:	4281      	cmp	r1, r0
 800d97c:	bf0c      	ite	eq
 800d97e:	2300      	moveq	r3, #0
 800d980:	f003 0301 	andne.w	r3, r3, #1
 800d984:	f500 309c 	add.w	r0, r0, #79872	; 0x13800
 800d988:	4291      	cmp	r1, r2
 800d98a:	bf0c      	ite	eq
 800d98c:	2300      	moveq	r3, #0
 800d98e:	f003 0301 	andne.w	r3, r3, #1
 800d992:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 800d996:	42b9      	cmp	r1, r7
 800d998:	bf0c      	ite	eq
 800d99a:	2300      	moveq	r3, #0
 800d99c:	f003 0301 	andne.w	r3, r3, #1
 800d9a0:	f507 4788 	add.w	r7, r7, #17408	; 0x4400
 800d9a4:	4281      	cmp	r1, r0
 800d9a6:	bf0c      	ite	eq
 800d9a8:	2300      	moveq	r3, #0
 800d9aa:	f003 0301 	andne.w	r3, r3, #1
 800d9ae:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800d9b2:	4291      	cmp	r1, r2
 800d9b4:	bf0c      	ite	eq
 800d9b6:	2300      	moveq	r3, #0
 800d9b8:	f003 0301 	andne.w	r3, r3, #1
 800d9bc:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800d9c0:	42b9      	cmp	r1, r7
 800d9c2:	bf0c      	ite	eq
 800d9c4:	2300      	moveq	r3, #0
 800d9c6:	f003 0301 	andne.w	r3, r3, #1
 800d9ca:	4281      	cmp	r1, r0
 800d9cc:	bf0c      	ite	eq
 800d9ce:	2300      	moveq	r3, #0
 800d9d0:	f003 0301 	andne.w	r3, r3, #1
 800d9d4:	4291      	cmp	r1, r2
 800d9d6:	bf0c      	ite	eq
 800d9d8:	2300      	moveq	r3, #0
 800d9da:	f003 0301 	andne.w	r3, r3, #1
 800d9de:	b11b      	cbz	r3, 800d9e8 <HAL_TIM_IC_ConfigChannel+0x9c>
 800d9e0:	4b90      	ldr	r3, [pc, #576]	; (800dc24 <HAL_TIM_IC_ConfigChannel+0x2d8>)
 800d9e2:	4299      	cmp	r1, r3
 800d9e4:	f040 80fb 	bne.w	800dbde <HAL_TIM_IC_ConfigChannel+0x292>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 800d9e8:	6823      	ldr	r3, [r4, #0]
 800d9ea:	f033 0202 	bics.w	r2, r3, #2
 800d9ee:	d001      	beq.n	800d9f4 <HAL_TIM_IC_ConfigChannel+0xa8>
 800d9f0:	2b0a      	cmp	r3, #10
 800d9f2:	d16d      	bne.n	800dad0 <HAL_TIM_IC_ConfigChannel+0x184>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 800d9f4:	6863      	ldr	r3, [r4, #4]
 800d9f6:	3b01      	subs	r3, #1
 800d9f8:	2b02      	cmp	r3, #2
 800d9fa:	d872      	bhi.n	800dae2 <HAL_TIM_IC_ConfigChannel+0x196>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 800d9fc:	68a3      	ldr	r3, [r4, #8]
 800d9fe:	f033 030c 	bics.w	r3, r3, #12
 800da02:	d177      	bne.n	800daf4 <HAL_TIM_IC_ConfigChannel+0x1a8>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 800da04:	68e3      	ldr	r3, [r4, #12]
 800da06:	2b0f      	cmp	r3, #15
 800da08:	d87c      	bhi.n	800db04 <HAL_TIM_IC_ConfigChannel+0x1b8>
  __HAL_LOCK(htim);
 800da0a:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800da0e:	2b01      	cmp	r3, #1
 800da10:	f000 8082 	beq.w	800db18 <HAL_TIM_IC_ConfigChannel+0x1cc>
 800da14:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800da16:	2302      	movs	r3, #2
 800da18:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(htim);
 800da1a:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800da1e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  if (Channel == TIM_CHANNEL_1)
 800da22:	2e00      	cmp	r6, #0
 800da24:	d07a      	beq.n	800db1c <HAL_TIM_IC_ConfigChannel+0x1d0>
 800da26:	4b7b      	ldr	r3, [pc, #492]	; (800dc14 <HAL_TIM_IC_ConfigChannel+0x2c8>)
 800da28:	497b      	ldr	r1, [pc, #492]	; (800dc18 <HAL_TIM_IC_ConfigChannel+0x2cc>)
 800da2a:	4298      	cmp	r0, r3
 800da2c:	bf18      	it	ne
 800da2e:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800da32:	4a7a      	ldr	r2, [pc, #488]	; (800dc1c <HAL_TIM_IC_ConfigChannel+0x2d0>)
 800da34:	bf14      	ite	ne
 800da36:	2301      	movne	r3, #1
 800da38:	2300      	moveq	r3, #0
 800da3a:	4288      	cmp	r0, r1
 800da3c:	bf0c      	ite	eq
 800da3e:	2300      	moveq	r3, #0
 800da40:	f003 0301 	andne.w	r3, r3, #1
 800da44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800da48:	4290      	cmp	r0, r2
 800da4a:	bf0c      	ite	eq
 800da4c:	2300      	moveq	r3, #0
 800da4e:	f003 0301 	andne.w	r3, r3, #1
 800da52:	f502 427c 	add.w	r2, r2, #64512	; 0xfc00
 800da56:	4288      	cmp	r0, r1
 800da58:	bf0c      	ite	eq
 800da5a:	2300      	moveq	r3, #0
 800da5c:	f003 0301 	andne.w	r3, r3, #1
 800da60:	4290      	cmp	r0, r2
 800da62:	bf0c      	ite	eq
 800da64:	2300      	moveq	r3, #0
 800da66:	f003 0301 	andne.w	r3, r3, #1
  else if (Channel == TIM_CHANNEL_2)
 800da6a:	2e04      	cmp	r6, #4
 800da6c:	d065      	beq.n	800db3a <HAL_TIM_IC_ConfigChannel+0x1ee>
  else if (Channel == TIM_CHANNEL_3)
 800da6e:	2e08      	cmp	r6, #8
 800da70:	f000 8091 	beq.w	800db96 <HAL_TIM_IC_ConfigChannel+0x24a>
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800da74:	2b00      	cmp	r3, #0
 800da76:	f040 80b8 	bne.w	800dbea <HAL_TIM_IC_ConfigChannel+0x29e>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800da7a:	6a01      	ldr	r1, [r0, #32]
    TIM_TI4_SetConfig(htim->Instance,
 800da7c:	6823      	ldr	r3, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800da7e:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    TIM_TI4_SetConfig(htim->Instance,
 800da82:	6867      	ldr	r7, [r4, #4]
 800da84:	68e2      	ldr	r2, [r4, #12]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800da86:	031b      	lsls	r3, r3, #12
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800da88:	6201      	str	r1, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 800da8a:	69c1      	ldr	r1, [r0, #28]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800da8c:	0312      	lsls	r2, r2, #12
  tmpccer = TIMx->CCER;
 800da8e:	6a06      	ldr	r6, [r0, #32]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800da90:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800da94:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800da98:	b292      	uxth	r2, r2
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800da9a:	f426 4620 	bic.w	r6, r6, #40960	; 0xa000
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800da9e:	68a4      	ldr	r4, [r4, #8]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800daa0:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800daa4:	4333      	orrs	r3, r6
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800daa6:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800daaa:	430a      	orrs	r2, r1
  TIMx->CCMR2 = tmpccmr2;
 800daac:	61c2      	str	r2, [r0, #28]
  TIMx->CCER = tmpccer ;
 800daae:	6203      	str	r3, [r0, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800dab0:	69c2      	ldr	r2, [r0, #28]
 800dab2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800dab6:	61c2      	str	r2, [r0, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800dab8:	69c3      	ldr	r3, [r0, #28]
 800daba:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800dabe:	61c3      	str	r3, [r0, #28]
  __HAL_UNLOCK(htim);
 800dac0:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800dac2:	2201      	movs	r2, #1
  return HAL_OK;
 800dac4:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800dac6:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800daca:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 800dace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 800dad0:	f640 51b8 	movw	r1, #3512	; 0xdb8
 800dad4:	4854      	ldr	r0, [pc, #336]	; (800dc28 <HAL_TIM_IC_ConfigChannel+0x2dc>)
 800dad6:	f7f5 fa97 	bl	8003008 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 800dada:	6863      	ldr	r3, [r4, #4]
 800dadc:	3b01      	subs	r3, #1
 800dade:	2b02      	cmp	r3, #2
 800dae0:	d98c      	bls.n	800d9fc <HAL_TIM_IC_ConfigChannel+0xb0>
 800dae2:	f640 51b9 	movw	r1, #3513	; 0xdb9
 800dae6:	4850      	ldr	r0, [pc, #320]	; (800dc28 <HAL_TIM_IC_ConfigChannel+0x2dc>)
 800dae8:	f7f5 fa8e 	bl	8003008 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 800daec:	68a3      	ldr	r3, [r4, #8]
 800daee:	f033 030c 	bics.w	r3, r3, #12
 800daf2:	d087      	beq.n	800da04 <HAL_TIM_IC_ConfigChannel+0xb8>
 800daf4:	f640 51ba 	movw	r1, #3514	; 0xdba
 800daf8:	484b      	ldr	r0, [pc, #300]	; (800dc28 <HAL_TIM_IC_ConfigChannel+0x2dc>)
 800dafa:	f7f5 fa85 	bl	8003008 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 800dafe:	68e3      	ldr	r3, [r4, #12]
 800db00:	2b0f      	cmp	r3, #15
 800db02:	d982      	bls.n	800da0a <HAL_TIM_IC_ConfigChannel+0xbe>
 800db04:	f640 51bb 	movw	r1, #3515	; 0xdbb
 800db08:	4847      	ldr	r0, [pc, #284]	; (800dc28 <HAL_TIM_IC_ConfigChannel+0x2dc>)
 800db0a:	f7f5 fa7d 	bl	8003008 <assert_failed>
  __HAL_LOCK(htim);
 800db0e:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800db12:	2b01      	cmp	r3, #1
 800db14:	f47f af7e 	bne.w	800da14 <HAL_TIM_IC_ConfigChannel+0xc8>
 800db18:	2002      	movs	r0, #2
}
 800db1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIM_TI1_SetConfig(htim->Instance,
 800db1c:	e9d4 1200 	ldrd	r1, r2, [r4]
 800db20:	68e3      	ldr	r3, [r4, #12]
 800db22:	f7ff fed7 	bl	800d8d4 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800db26:	682b      	ldr	r3, [r5, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800db28:	68a0      	ldr	r0, [r4, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800db2a:	6999      	ldr	r1, [r3, #24]
 800db2c:	f021 010c 	bic.w	r1, r1, #12
 800db30:	6199      	str	r1, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800db32:	699a      	ldr	r2, [r3, #24]
 800db34:	4302      	orrs	r2, r0
 800db36:	619a      	str	r2, [r3, #24]
 800db38:	e7c2      	b.n	800dac0 <HAL_TIM_IC_ConfigChannel+0x174>
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800db3a:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800db3e:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800db42:	4288      	cmp	r0, r1
 800db44:	bf18      	it	ne
 800db46:	4290      	cmpne	r0, r2
 800db48:	d001      	beq.n	800db4e <HAL_TIM_IC_ConfigChannel+0x202>
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d15b      	bne.n	800dc06 <HAL_TIM_IC_ConfigChannel+0x2ba>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800db4e:	6a01      	ldr	r1, [r0, #32]
    TIM_TI2_SetConfig(htim->Instance,
 800db50:	6823      	ldr	r3, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800db52:	f021 0110 	bic.w	r1, r1, #16
    TIM_TI2_SetConfig(htim->Instance,
 800db56:	6867      	ldr	r7, [r4, #4]
 800db58:	68e2      	ldr	r2, [r4, #12]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800db5a:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800db5c:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800db5e:	6981      	ldr	r1, [r0, #24]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800db60:	0312      	lsls	r2, r2, #12
  tmpccer = TIMx->CCER;
 800db62:	6a06      	ldr	r6, [r0, #32]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800db64:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800db68:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800db6c:	b292      	uxth	r2, r2
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800db6e:	f026 06a0 	bic.w	r6, r6, #160	; 0xa0
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800db72:	68a4      	ldr	r4, [r4, #8]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800db74:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800db78:	4333      	orrs	r3, r6
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800db7a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800db7e:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1 ;
 800db80:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800db82:	6203      	str	r3, [r0, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800db84:	6982      	ldr	r2, [r0, #24]
 800db86:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800db8a:	6182      	str	r2, [r0, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800db8c:	6983      	ldr	r3, [r0, #24]
 800db8e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800db92:	6183      	str	r3, [r0, #24]
 800db94:	e794      	b.n	800dac0 <HAL_TIM_IC_ConfigChannel+0x174>
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800db96:	2b00      	cmp	r3, #0
 800db98:	d12e      	bne.n	800dbf8 <HAL_TIM_IC_ConfigChannel+0x2ac>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800db9a:	6a06      	ldr	r6, [r0, #32]
    TIM_TI3_SetConfig(htim->Instance,
 800db9c:	6823      	ldr	r3, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800db9e:	f426 7680 	bic.w	r6, r6, #256	; 0x100
    TIM_TI3_SetConfig(htim->Instance,
 800dba2:	6861      	ldr	r1, [r4, #4]
 800dba4:	68e2      	ldr	r2, [r4, #12]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800dba6:	021b      	lsls	r3, r3, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800dba8:	6206      	str	r6, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 800dbaa:	69c7      	ldr	r7, [r0, #28]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800dbac:	0112      	lsls	r2, r2, #4
  tmpccer = TIMx->CCER;
 800dbae:	6a06      	ldr	r6, [r0, #32]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800dbb0:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800dbb4:	f027 0703 	bic.w	r7, r7, #3
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800dbb8:	b2d2      	uxtb	r2, r2
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800dbba:	f426 6620 	bic.w	r6, r6, #2560	; 0xa00
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800dbbe:	68a4      	ldr	r4, [r4, #8]
  tmpccmr2 |= TIM_ICSelection;
 800dbc0:	4339      	orrs	r1, r7
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800dbc2:	4333      	orrs	r3, r6
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800dbc4:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800dbc8:	430a      	orrs	r2, r1
  TIMx->CCMR2 = tmpccmr2;
 800dbca:	61c2      	str	r2, [r0, #28]
  TIMx->CCER = tmpccer;
 800dbcc:	6203      	str	r3, [r0, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800dbce:	69c2      	ldr	r2, [r0, #28]
 800dbd0:	f022 020c 	bic.w	r2, r2, #12
 800dbd4:	61c2      	str	r2, [r0, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800dbd6:	69c3      	ldr	r3, [r0, #28]
 800dbd8:	4323      	orrs	r3, r4
 800dbda:	61c3      	str	r3, [r0, #28]
 800dbdc:	e770      	b.n	800dac0 <HAL_TIM_IC_ConfigChannel+0x174>
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800dbde:	f640 51b7 	movw	r1, #3511	; 0xdb7
 800dbe2:	4811      	ldr	r0, [pc, #68]	; (800dc28 <HAL_TIM_IC_ConfigChannel+0x2dc>)
 800dbe4:	f7f5 fa10 	bl	8003008 <assert_failed>
 800dbe8:	e6fe      	b.n	800d9e8 <HAL_TIM_IC_ConfigChannel+0x9c>
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800dbea:	480f      	ldr	r0, [pc, #60]	; (800dc28 <HAL_TIM_IC_ConfigChannel+0x2dc>)
 800dbec:	f640 51f3 	movw	r1, #3571	; 0xdf3
 800dbf0:	f7f5 fa0a 	bl	8003008 <assert_failed>
 800dbf4:	6828      	ldr	r0, [r5, #0]
 800dbf6:	e740      	b.n	800da7a <HAL_TIM_IC_ConfigChannel+0x12e>
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800dbf8:	480b      	ldr	r0, [pc, #44]	; (800dc28 <HAL_TIM_IC_ConfigChannel+0x2dc>)
 800dbfa:	f640 51e3 	movw	r1, #3555	; 0xde3
 800dbfe:	f7f5 fa03 	bl	8003008 <assert_failed>
 800dc02:	6828      	ldr	r0, [r5, #0]
 800dc04:	e7c9      	b.n	800db9a <HAL_TIM_IC_ConfigChannel+0x24e>
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800dc06:	4808      	ldr	r0, [pc, #32]	; (800dc28 <HAL_TIM_IC_ConfigChannel+0x2dc>)
 800dc08:	f640 51d3 	movw	r1, #3539	; 0xdd3
 800dc0c:	f7f5 f9fc 	bl	8003008 <assert_failed>
 800dc10:	6828      	ldr	r0, [r5, #0]
 800dc12:	e79c      	b.n	800db4e <HAL_TIM_IC_ConfigChannel+0x202>
 800dc14:	40010000 	.word	0x40010000
 800dc18:	40000400 	.word	0x40000400
 800dc1c:	40000800 	.word	0x40000800
 800dc20:	40000c00 	.word	0x40000c00
 800dc24:	40002000 	.word	0x40002000
 800dc28:	08026a84 	.word	0x08026a84

0800dc2c <TIM_CCxChannelCmd>:
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800dc2c:	4b2b      	ldr	r3, [pc, #172]	; (800dcdc <TIM_CCxChannelCmd+0xb0>)
 800dc2e:	4298      	cmp	r0, r3
{
 800dc30:	b530      	push	{r4, r5, lr}
 800dc32:	4604      	mov	r4, r0
 800dc34:	b083      	sub	sp, #12
 800dc36:	460d      	mov	r5, r1
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800dc38:	d031      	beq.n	800dc9e <TIM_CCxChannelCmd+0x72>
 800dc3a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800dc3e:	d02e      	beq.n	800dc9e <TIM_CCxChannelCmd+0x72>
 800dc40:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 800dc44:	4298      	cmp	r0, r3
 800dc46:	d02a      	beq.n	800dc9e <TIM_CCxChannelCmd+0x72>
 800dc48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dc4c:	4298      	cmp	r0, r3
 800dc4e:	d026      	beq.n	800dc9e <TIM_CCxChannelCmd+0x72>
 800dc50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dc54:	4298      	cmp	r0, r3
 800dc56:	d022      	beq.n	800dc9e <TIM_CCxChannelCmd+0x72>
 800dc58:	f503 4378 	add.w	r3, r3, #63488	; 0xf800
 800dc5c:	4298      	cmp	r0, r3
 800dc5e:	d01e      	beq.n	800dc9e <TIM_CCxChannelCmd+0x72>
 800dc60:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800dc64:	4298      	cmp	r0, r3
 800dc66:	d01a      	beq.n	800dc9e <TIM_CCxChannelCmd+0x72>
 800dc68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dc6c:	4298      	cmp	r0, r3
 800dc6e:	d016      	beq.n	800dc9e <TIM_CCxChannelCmd+0x72>
 800dc70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dc74:	4298      	cmp	r0, r3
 800dc76:	d012      	beq.n	800dc9e <TIM_CCxChannelCmd+0x72>
 800dc78:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 800dc7c:	4298      	cmp	r0, r3
 800dc7e:	d00e      	beq.n	800dc9e <TIM_CCxChannelCmd+0x72>
 800dc80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dc84:	4298      	cmp	r0, r3
 800dc86:	d00a      	beq.n	800dc9e <TIM_CCxChannelCmd+0x72>
 800dc88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dc8c:	4298      	cmp	r0, r3
 800dc8e:	d006      	beq.n	800dc9e <TIM_CCxChannelCmd+0x72>
 800dc90:	f641 21c2 	movw	r1, #6850	; 0x1ac2
 800dc94:	4812      	ldr	r0, [pc, #72]	; (800dce0 <TIM_CCxChannelCmd+0xb4>)
 800dc96:	9201      	str	r2, [sp, #4]
 800dc98:	f7f5 f9b6 	bl	8003008 <assert_failed>
 800dc9c:	9a01      	ldr	r2, [sp, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
 800dc9e:	2d14      	cmp	r5, #20
 800dca0:	d910      	bls.n	800dcc4 <TIM_CCxChannelCmd+0x98>
 800dca2:	2d3c      	cmp	r5, #60	; 0x3c
 800dca4:	d112      	bne.n	800dccc <TIM_CCxChannelCmd+0xa0>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800dca6:	f005 051f 	and.w	r5, r5, #31
 800dcaa:	2101      	movs	r1, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800dcac:	6a23      	ldr	r3, [r4, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800dcae:	40a9      	lsls	r1, r5

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dcb0:	fa02 f505 	lsl.w	r5, r2, r5
  TIMx->CCER &= ~tmp;
 800dcb4:	ea23 0301 	bic.w	r3, r3, r1
 800dcb8:	6223      	str	r3, [r4, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dcba:	6a22      	ldr	r2, [r4, #32]
 800dcbc:	4315      	orrs	r5, r2
 800dcbe:	6225      	str	r5, [r4, #32]
}
 800dcc0:	b003      	add	sp, #12
 800dcc2:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
 800dcc4:	4b07      	ldr	r3, [pc, #28]	; (800dce4 <TIM_CCxChannelCmd+0xb8>)
 800dcc6:	40eb      	lsrs	r3, r5
 800dcc8:	07db      	lsls	r3, r3, #31
 800dcca:	d4ec      	bmi.n	800dca6 <TIM_CCxChannelCmd+0x7a>
 800dccc:	f641 21c3 	movw	r1, #6851	; 0x1ac3
 800dcd0:	4803      	ldr	r0, [pc, #12]	; (800dce0 <TIM_CCxChannelCmd+0xb4>)
 800dcd2:	9201      	str	r2, [sp, #4]
 800dcd4:	f7f5 f998 	bl	8003008 <assert_failed>
 800dcd8:	9a01      	ldr	r2, [sp, #4]
 800dcda:	e7e4      	b.n	800dca6 <TIM_CCxChannelCmd+0x7a>
 800dcdc:	40010000 	.word	0x40010000
 800dce0:	08026a84 	.word	0x08026a84
 800dce4:	00111111 	.word	0x00111111

0800dce8 <HAL_TIM_IC_Start_DMA>:
{
 800dce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dcea:	4604      	mov	r4, r0
 800dcec:	460d      	mov	r5, r1
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800dcee:	4883      	ldr	r0, [pc, #524]	; (800defc <HAL_TIM_IC_Start_DMA+0x214>)
{
 800dcf0:	b083      	sub	sp, #12
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800dcf2:	6821      	ldr	r1, [r4, #0]
 800dcf4:	4281      	cmp	r1, r0
 800dcf6:	f000 8083 	beq.w	800de00 <HAL_TIM_IC_Start_DMA+0x118>
 800dcfa:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800dcfe:	d053      	beq.n	800dda8 <HAL_TIM_IC_Start_DMA+0xc0>
 800dd00:	487f      	ldr	r0, [pc, #508]	; (800df00 <HAL_TIM_IC_Start_DMA+0x218>)
 800dd02:	4281      	cmp	r1, r0
 800dd04:	d050      	beq.n	800dda8 <HAL_TIM_IC_Start_DMA+0xc0>
 800dd06:	487f      	ldr	r0, [pc, #508]	; (800df04 <HAL_TIM_IC_Start_DMA+0x21c>)
 800dd08:	4281      	cmp	r1, r0
 800dd0a:	d04d      	beq.n	800dda8 <HAL_TIM_IC_Start_DMA+0xc0>
 800dd0c:	487e      	ldr	r0, [pc, #504]	; (800df08 <HAL_TIM_IC_Start_DMA+0x220>)
 800dd0e:	4281      	cmp	r1, r0
 800dd10:	d04a      	beq.n	800dda8 <HAL_TIM_IC_Start_DMA+0xc0>
 800dd12:	487e      	ldr	r0, [pc, #504]	; (800df0c <HAL_TIM_IC_Start_DMA+0x224>)
 800dd14:	4281      	cmp	r1, r0
 800dd16:	d073      	beq.n	800de00 <HAL_TIM_IC_Start_DMA+0x118>
 800dd18:	487d      	ldr	r0, [pc, #500]	; (800df10 <HAL_TIM_IC_Start_DMA+0x228>)
 800dd1a:	4281      	cmp	r1, r0
 800dd1c:	f000 80d5 	beq.w	800deca <HAL_TIM_IC_Start_DMA+0x1e2>
 800dd20:	487c      	ldr	r0, [pc, #496]	; (800df14 <HAL_TIM_IC_Start_DMA+0x22c>)
 800dd22:	4281      	cmp	r1, r0
 800dd24:	f040 80d6 	bne.w	800ded4 <HAL_TIM_IC_Start_DMA+0x1ec>
 800dd28:	2d00      	cmp	r5, #0
 800dd2a:	f000 80c4 	beq.w	800deb6 <HAL_TIM_IC_Start_DMA+0x1ce>
 800dd2e:	f640 0115 	movw	r1, #2069	; 0x815
 800dd32:	4879      	ldr	r0, [pc, #484]	; (800df18 <HAL_TIM_IC_Start_DMA+0x230>)
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 800dd34:	4e72      	ldr	r6, [pc, #456]	; (800df00 <HAL_TIM_IC_Start_DMA+0x218>)
 800dd36:	4f73      	ldr	r7, [pc, #460]	; (800df04 <HAL_TIM_IC_Start_DMA+0x21c>)
 800dd38:	e9cd 2300 	strd	r2, r3, [sp]
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800dd3c:	f7f5 f964 	bl	8003008 <assert_failed>
 800dd40:	6820      	ldr	r0, [r4, #0]
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 800dd42:	496e      	ldr	r1, [pc, #440]	; (800defc <HAL_TIM_IC_Start_DMA+0x214>)
 800dd44:	4288      	cmp	r0, r1
 800dd46:	bf18      	it	ne
 800dd48:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800dd4c:	bf14      	ite	ne
 800dd4e:	2101      	movne	r1, #1
 800dd50:	2100      	moveq	r1, #0
 800dd52:	42b0      	cmp	r0, r6
 800dd54:	bf0c      	ite	eq
 800dd56:	2100      	moveq	r1, #0
 800dd58:	f001 0101 	andne.w	r1, r1, #1
 800dd5c:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800dd60:	42b8      	cmp	r0, r7
 800dd62:	bf0c      	ite	eq
 800dd64:	2100      	moveq	r1, #0
 800dd66:	f001 0101 	andne.w	r1, r1, #1
 800dd6a:	42b0      	cmp	r0, r6
 800dd6c:	bf0c      	ite	eq
 800dd6e:	2100      	moveq	r1, #0
 800dd70:	f001 0101 	andne.w	r1, r1, #1
 800dd74:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dd78:	2900      	cmp	r1, #0
 800dd7a:	f040 8098 	bne.w	800deae <HAL_TIM_IC_Start_DMA+0x1c6>
  if (htim->State == HAL_TIM_STATE_BUSY)
 800dd7e:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 800dd82:	b2c0      	uxtb	r0, r0
 800dd84:	2802      	cmp	r0, #2
 800dd86:	d039      	beq.n	800ddfc <HAL_TIM_IC_Start_DMA+0x114>
  else if (htim->State == HAL_TIM_STATE_READY)
 800dd88:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 800dd8c:	2901      	cmp	r1, #1
 800dd8e:	d03e      	beq.n	800de0e <HAL_TIM_IC_Start_DMA+0x126>
 800dd90:	6820      	ldr	r0, [r4, #0]
  switch (Channel)
 800dd92:	2d0c      	cmp	r5, #12
 800dd94:	d820      	bhi.n	800ddd8 <HAL_TIM_IC_Start_DMA+0xf0>
 800dd96:	e8df f005 	tbb	[pc, r5]
 800dd9a:	1f0b      	.short	0x1f0b
 800dd9c:	1f411f1f 	.word	0x1f411f1f
 800dda0:	1f571f1f 	.word	0x1f571f1f
 800dda4:	1f1f      	.short	0x1f1f
 800dda6:	6d          	.byte	0x6d
 800dda7:	00          	.byte	0x00
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800dda8:	f035 010c 	bics.w	r1, r5, #12
 800ddac:	d1bf      	bne.n	800dd2e <HAL_TIM_IC_Start_DMA+0x46>
 800ddae:	e7e6      	b.n	800dd7e <HAL_TIM_IC_Start_DMA+0x96>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800ddb0:	6a66      	ldr	r6, [r4, #36]	; 0x24
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 800ddb2:	f100 0134 	add.w	r1, r0, #52	; 0x34
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800ddb6:	4f59      	ldr	r7, [pc, #356]	; (800df1c <HAL_TIM_IC_Start_DMA+0x234>)
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800ddb8:	f8df c17c 	ldr.w	ip, [pc, #380]	; 800df38 <HAL_TIM_IC_Start_DMA+0x250>
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 800ddbc:	4630      	mov	r0, r6
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800ddbe:	6437      	str	r7, [r6, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800ddc0:	4f57      	ldr	r7, [pc, #348]	; (800df20 <HAL_TIM_IC_Start_DMA+0x238>)
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800ddc2:	f8c6 c03c 	str.w	ip, [r6, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800ddc6:	64f7      	str	r7, [r6, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 800ddc8:	f7f8 fe8e 	bl	8006ae8 <HAL_DMA_Start_IT>
 800ddcc:	bb18      	cbnz	r0, 800de16 <HAL_TIM_IC_Start_DMA+0x12e>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800ddce:	6820      	ldr	r0, [r4, #0]
 800ddd0:	68c3      	ldr	r3, [r0, #12]
 800ddd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ddd6:	60c3      	str	r3, [r0, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ddd8:	4629      	mov	r1, r5
 800ddda:	2201      	movs	r2, #1
 800dddc:	f7ff ff26 	bl	800dc2c <TIM_CCxChannelCmd>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dde0:	6822      	ldr	r2, [r4, #0]
 800dde2:	4b50      	ldr	r3, [pc, #320]	; (800df24 <HAL_TIM_IC_Start_DMA+0x23c>)
 800dde4:	6891      	ldr	r1, [r2, #8]
 800dde6:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dde8:	2b06      	cmp	r3, #6
 800ddea:	d05d      	beq.n	800dea8 <HAL_TIM_IC_Start_DMA+0x1c0>
 800ddec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ddf0:	d05a      	beq.n	800dea8 <HAL_TIM_IC_Start_DMA+0x1c0>
    __HAL_TIM_ENABLE(htim);
 800ddf2:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800ddf4:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 800ddf6:	f043 0301 	orr.w	r3, r3, #1
 800ddfa:	6013      	str	r3, [r2, #0]
}
 800ddfc:	b003      	add	sp, #12
 800ddfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800de00:	2d14      	cmp	r5, #20
 800de02:	d894      	bhi.n	800dd2e <HAL_TIM_IC_Start_DMA+0x46>
 800de04:	4948      	ldr	r1, [pc, #288]	; (800df28 <HAL_TIM_IC_Start_DMA+0x240>)
 800de06:	40e9      	lsrs	r1, r5
 800de08:	07c9      	lsls	r1, r1, #31
 800de0a:	d4b8      	bmi.n	800dd7e <HAL_TIM_IC_Start_DMA+0x96>
 800de0c:	e78f      	b.n	800dd2e <HAL_TIM_IC_Start_DMA+0x46>
    if ((pData == NULL) && (Length > 0U))
 800de0e:	2a00      	cmp	r2, #0
 800de10:	d146      	bne.n	800dea0 <HAL_TIM_IC_Start_DMA+0x1b8>
 800de12:	2b00      	cmp	r3, #0
 800de14:	d044      	beq.n	800dea0 <HAL_TIM_IC_Start_DMA+0x1b8>
      return HAL_ERROR;
 800de16:	2001      	movs	r0, #1
}
 800de18:	b003      	add	sp, #12
 800de1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800de1c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 800de1e:	f100 0138 	add.w	r1, r0, #56	; 0x38
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800de22:	4f3e      	ldr	r7, [pc, #248]	; (800df1c <HAL_TIM_IC_Start_DMA+0x234>)
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800de24:	f8df c110 	ldr.w	ip, [pc, #272]	; 800df38 <HAL_TIM_IC_Start_DMA+0x250>
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 800de28:	4630      	mov	r0, r6
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800de2a:	6437      	str	r7, [r6, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800de2c:	4f3c      	ldr	r7, [pc, #240]	; (800df20 <HAL_TIM_IC_Start_DMA+0x238>)
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800de2e:	f8c6 c03c 	str.w	ip, [r6, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800de32:	64f7      	str	r7, [r6, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 800de34:	f7f8 fe58 	bl	8006ae8 <HAL_DMA_Start_IT>
 800de38:	2800      	cmp	r0, #0
 800de3a:	d1ec      	bne.n	800de16 <HAL_TIM_IC_Start_DMA+0x12e>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800de3c:	6820      	ldr	r0, [r4, #0]
 800de3e:	68c3      	ldr	r3, [r0, #12]
 800de40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800de44:	60c3      	str	r3, [r0, #12]
      break;
 800de46:	e7c7      	b.n	800ddd8 <HAL_TIM_IC_Start_DMA+0xf0>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800de48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 800de4a:	f100 013c 	add.w	r1, r0, #60	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800de4e:	4f33      	ldr	r7, [pc, #204]	; (800df1c <HAL_TIM_IC_Start_DMA+0x234>)
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800de50:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800df38 <HAL_TIM_IC_Start_DMA+0x250>
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 800de54:	4630      	mov	r0, r6
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800de56:	6437      	str	r7, [r6, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800de58:	4f31      	ldr	r7, [pc, #196]	; (800df20 <HAL_TIM_IC_Start_DMA+0x238>)
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800de5a:	f8c6 c03c 	str.w	ip, [r6, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800de5e:	64f7      	str	r7, [r6, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 800de60:	f7f8 fe42 	bl	8006ae8 <HAL_DMA_Start_IT>
 800de64:	2800      	cmp	r0, #0
 800de66:	d1d6      	bne.n	800de16 <HAL_TIM_IC_Start_DMA+0x12e>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800de68:	6820      	ldr	r0, [r4, #0]
 800de6a:	68c3      	ldr	r3, [r0, #12]
 800de6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800de70:	60c3      	str	r3, [r0, #12]
      break;
 800de72:	e7b1      	b.n	800ddd8 <HAL_TIM_IC_Start_DMA+0xf0>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800de74:	6b26      	ldr	r6, [r4, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 800de76:	f100 0140 	add.w	r1, r0, #64	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800de7a:	4f28      	ldr	r7, [pc, #160]	; (800df1c <HAL_TIM_IC_Start_DMA+0x234>)
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800de7c:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 800df38 <HAL_TIM_IC_Start_DMA+0x250>
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 800de80:	4630      	mov	r0, r6
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800de82:	6437      	str	r7, [r6, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800de84:	4f26      	ldr	r7, [pc, #152]	; (800df20 <HAL_TIM_IC_Start_DMA+0x238>)
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800de86:	f8c6 c03c 	str.w	ip, [r6, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800de8a:	64f7      	str	r7, [r6, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 800de8c:	f7f8 fe2c 	bl	8006ae8 <HAL_DMA_Start_IT>
 800de90:	2800      	cmp	r0, #0
 800de92:	d1c0      	bne.n	800de16 <HAL_TIM_IC_Start_DMA+0x12e>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800de94:	6820      	ldr	r0, [r4, #0]
 800de96:	68c3      	ldr	r3, [r0, #12]
 800de98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800de9c:	60c3      	str	r3, [r0, #12]
      break;
 800de9e:	e79b      	b.n	800ddd8 <HAL_TIM_IC_Start_DMA+0xf0>
      htim->State = HAL_TIM_STATE_BUSY;
 800dea0:	2102      	movs	r1, #2
 800dea2:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
 800dea6:	e773      	b.n	800dd90 <HAL_TIM_IC_Start_DMA+0xa8>
  return HAL_OK;
 800dea8:	2000      	movs	r0, #0
}
 800deaa:	b003      	add	sp, #12
 800deac:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 800deae:	4917      	ldr	r1, [pc, #92]	; (800df0c <HAL_TIM_IC_Start_DMA+0x224>)
 800deb0:	4288      	cmp	r0, r1
 800deb2:	f43f af64 	beq.w	800dd7e <HAL_TIM_IC_Start_DMA+0x96>
 800deb6:	f640 0116 	movw	r1, #2070	; 0x816
 800deba:	4817      	ldr	r0, [pc, #92]	; (800df18 <HAL_TIM_IC_Start_DMA+0x230>)
 800debc:	e9cd 2300 	strd	r2, r3, [sp]
 800dec0:	f7f5 f8a2 	bl	8003008 <assert_failed>
 800dec4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dec8:	e759      	b.n	800dd7e <HAL_TIM_IC_Start_DMA+0x96>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800deca:	f035 0104 	bics.w	r1, r5, #4
 800dece:	f47f af2e 	bne.w	800dd2e <HAL_TIM_IC_Start_DMA+0x46>
 800ded2:	e7f0      	b.n	800deb6 <HAL_TIM_IC_Start_DMA+0x1ce>
 800ded4:	4815      	ldr	r0, [pc, #84]	; (800df2c <HAL_TIM_IC_Start_DMA+0x244>)
 800ded6:	4281      	cmp	r1, r0
 800ded8:	f43f af26 	beq.w	800dd28 <HAL_TIM_IC_Start_DMA+0x40>
 800dedc:	f5a0 3098 	sub.w	r0, r0, #77824	; 0x13000
 800dee0:	4281      	cmp	r1, r0
 800dee2:	d0f2      	beq.n	800deca <HAL_TIM_IC_Start_DMA+0x1e2>
 800dee4:	4812      	ldr	r0, [pc, #72]	; (800df30 <HAL_TIM_IC_Start_DMA+0x248>)
 800dee6:	4281      	cmp	r1, r0
 800dee8:	f43f af1e 	beq.w	800dd28 <HAL_TIM_IC_Start_DMA+0x40>
 800deec:	4811      	ldr	r0, [pc, #68]	; (800df34 <HAL_TIM_IC_Start_DMA+0x24c>)
 800deee:	4281      	cmp	r1, r0
 800def0:	f47f af1d 	bne.w	800dd2e <HAL_TIM_IC_Start_DMA+0x46>
 800def4:	2d00      	cmp	r5, #0
 800def6:	f47f af1a 	bne.w	800dd2e <HAL_TIM_IC_Start_DMA+0x46>
 800defa:	e7dc      	b.n	800deb6 <HAL_TIM_IC_Start_DMA+0x1ce>
 800defc:	40010000 	.word	0x40010000
 800df00:	40000400 	.word	0x40000400
 800df04:	40000800 	.word	0x40000800
 800df08:	40000c00 	.word	0x40000c00
 800df0c:	40010400 	.word	0x40010400
 800df10:	40014000 	.word	0x40014000
 800df14:	40014400 	.word	0x40014400
 800df18:	08026a84 	.word	0x08026a84
 800df1c:	0800c86d 	.word	0x0800c86d
 800df20:	0800ca49 	.word	0x0800ca49
 800df24:	00010007 	.word	0x00010007
 800df28:	00111111 	.word	0x00111111
 800df2c:	40014800 	.word	0x40014800
 800df30:	40001c00 	.word	0x40001c00
 800df34:	40002000 	.word	0x40002000
 800df38:	0800c809 	.word	0x0800c809

0800df3c <HAL_TIM_IC_Stop_DMA>:
{
 800df3c:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800df3e:	4a5a      	ldr	r2, [pc, #360]	; (800e0a8 <HAL_TIM_IC_Stop_DMA+0x16c>)
{
 800df40:	4604      	mov	r4, r0
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800df42:	6803      	ldr	r3, [r0, #0]
{
 800df44:	460d      	mov	r5, r1
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800df46:	4293      	cmp	r3, r2
 800df48:	f000 808e 	beq.w	800e068 <HAL_TIM_IC_Stop_DMA+0x12c>
 800df4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800df50:	d04a      	beq.n	800dfe8 <HAL_TIM_IC_Stop_DMA+0xac>
 800df52:	4a56      	ldr	r2, [pc, #344]	; (800e0ac <HAL_TIM_IC_Stop_DMA+0x170>)
 800df54:	4293      	cmp	r3, r2
 800df56:	d047      	beq.n	800dfe8 <HAL_TIM_IC_Stop_DMA+0xac>
 800df58:	4a55      	ldr	r2, [pc, #340]	; (800e0b0 <HAL_TIM_IC_Stop_DMA+0x174>)
 800df5a:	4293      	cmp	r3, r2
 800df5c:	d044      	beq.n	800dfe8 <HAL_TIM_IC_Stop_DMA+0xac>
 800df5e:	4a55      	ldr	r2, [pc, #340]	; (800e0b4 <HAL_TIM_IC_Stop_DMA+0x178>)
 800df60:	4293      	cmp	r3, r2
 800df62:	d041      	beq.n	800dfe8 <HAL_TIM_IC_Stop_DMA+0xac>
 800df64:	4a54      	ldr	r2, [pc, #336]	; (800e0b8 <HAL_TIM_IC_Stop_DMA+0x17c>)
 800df66:	4293      	cmp	r3, r2
 800df68:	d07e      	beq.n	800e068 <HAL_TIM_IC_Stop_DMA+0x12c>
 800df6a:	4a54      	ldr	r2, [pc, #336]	; (800e0bc <HAL_TIM_IC_Stop_DMA+0x180>)
 800df6c:	4293      	cmp	r3, r2
 800df6e:	f000 8082 	beq.w	800e076 <HAL_TIM_IC_Stop_DMA+0x13a>
 800df72:	4a53      	ldr	r2, [pc, #332]	; (800e0c0 <HAL_TIM_IC_Stop_DMA+0x184>)
 800df74:	4293      	cmp	r3, r2
 800df76:	f040 8083 	bne.w	800e080 <HAL_TIM_IC_Stop_DMA+0x144>
 800df7a:	b325      	cbz	r5, 800dfc6 <HAL_TIM_IC_Stop_DMA+0x8a>
 800df7c:	f640 019a 	movw	r1, #2202	; 0x89a
 800df80:	4850      	ldr	r0, [pc, #320]	; (800e0c4 <HAL_TIM_IC_Stop_DMA+0x188>)
 800df82:	f7f5 f841 	bl	8003008 <assert_failed>
 800df86:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 800df88:	4a47      	ldr	r2, [pc, #284]	; (800e0a8 <HAL_TIM_IC_Stop_DMA+0x16c>)
 800df8a:	4948      	ldr	r1, [pc, #288]	; (800e0ac <HAL_TIM_IC_Stop_DMA+0x170>)
 800df8c:	4293      	cmp	r3, r2
 800df8e:	bf18      	it	ne
 800df90:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800df94:	4846      	ldr	r0, [pc, #280]	; (800e0b0 <HAL_TIM_IC_Stop_DMA+0x174>)
 800df96:	bf14      	ite	ne
 800df98:	2201      	movne	r2, #1
 800df9a:	2200      	moveq	r2, #0
 800df9c:	428b      	cmp	r3, r1
 800df9e:	bf0c      	ite	eq
 800dfa0:	2200      	moveq	r2, #0
 800dfa2:	f002 0201 	andne.w	r2, r2, #1
 800dfa6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dfaa:	4283      	cmp	r3, r0
 800dfac:	bf0c      	ite	eq
 800dfae:	2200      	moveq	r2, #0
 800dfb0:	f002 0201 	andne.w	r2, r2, #1
 800dfb4:	428b      	cmp	r3, r1
 800dfb6:	bf0c      	ite	eq
 800dfb8:	2200      	moveq	r2, #0
 800dfba:	f002 0201 	andne.w	r2, r2, #1
 800dfbe:	b142      	cbz	r2, 800dfd2 <HAL_TIM_IC_Stop_DMA+0x96>
 800dfc0:	4a3d      	ldr	r2, [pc, #244]	; (800e0b8 <HAL_TIM_IC_Stop_DMA+0x17c>)
 800dfc2:	4293      	cmp	r3, r2
 800dfc4:	d005      	beq.n	800dfd2 <HAL_TIM_IC_Stop_DMA+0x96>
 800dfc6:	f640 019b 	movw	r1, #2203	; 0x89b
 800dfca:	483e      	ldr	r0, [pc, #248]	; (800e0c4 <HAL_TIM_IC_Stop_DMA+0x188>)
 800dfcc:	f7f5 f81c 	bl	8003008 <assert_failed>
 800dfd0:	6823      	ldr	r3, [r4, #0]
  switch (Channel)
 800dfd2:	2d0c      	cmp	r5, #12
 800dfd4:	d814      	bhi.n	800e000 <HAL_TIM_IC_Stop_DMA+0xc4>
 800dfd6:	e8df f005 	tbb	[pc, r5]
 800dfda:	130b      	.short	0x130b
 800dfdc:	133e1313 	.word	0x133e1313
 800dfe0:	13351313 	.word	0x13351313
 800dfe4:	1313      	.short	0x1313
 800dfe6:	2c          	.byte	0x2c
 800dfe7:	00          	.byte	0x00
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800dfe8:	f035 020c 	bics.w	r2, r5, #12
 800dfec:	d1c6      	bne.n	800df7c <HAL_TIM_IC_Stop_DMA+0x40>
 800dfee:	e7f0      	b.n	800dfd2 <HAL_TIM_IC_Stop_DMA+0x96>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800dff0:	68da      	ldr	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800dff2:	6a60      	ldr	r0, [r4, #36]	; 0x24
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800dff4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800dff8:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800dffa:	f7f8 fe17 	bl	8006c2c <HAL_DMA_Abort_IT>
 800dffe:	6823      	ldr	r3, [r4, #0]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e000:	4629      	mov	r1, r5
 800e002:	4618      	mov	r0, r3
 800e004:	2200      	movs	r2, #0
 800e006:	f7ff fe11 	bl	800dc2c <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 800e00a:	6823      	ldr	r3, [r4, #0]
 800e00c:	f241 1211 	movw	r2, #4369	; 0x1111
 800e010:	6a19      	ldr	r1, [r3, #32]
 800e012:	4211      	tst	r1, r2
 800e014:	d108      	bne.n	800e028 <HAL_TIM_IC_Stop_DMA+0xec>
 800e016:	6a19      	ldr	r1, [r3, #32]
 800e018:	f240 4244 	movw	r2, #1092	; 0x444
 800e01c:	4211      	tst	r1, r2
 800e01e:	d103      	bne.n	800e028 <HAL_TIM_IC_Stop_DMA+0xec>
 800e020:	681a      	ldr	r2, [r3, #0]
 800e022:	f022 0201 	bic.w	r2, r2, #1
 800e026:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800e028:	2301      	movs	r3, #1
}
 800e02a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800e02c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800e030:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800e032:	68da      	ldr	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800e034:	6b20      	ldr	r0, [r4, #48]	; 0x30
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800e036:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e03a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800e03c:	f7f8 fdf6 	bl	8006c2c <HAL_DMA_Abort_IT>
 800e040:	6823      	ldr	r3, [r4, #0]
      break;
 800e042:	e7dd      	b.n	800e000 <HAL_TIM_IC_Stop_DMA+0xc4>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800e044:	68da      	ldr	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800e046:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800e048:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e04c:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800e04e:	f7f8 fded 	bl	8006c2c <HAL_DMA_Abort_IT>
 800e052:	6823      	ldr	r3, [r4, #0]
      break;
 800e054:	e7d4      	b.n	800e000 <HAL_TIM_IC_Stop_DMA+0xc4>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800e056:	68da      	ldr	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800e058:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800e05a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e05e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800e060:	f7f8 fde4 	bl	8006c2c <HAL_DMA_Abort_IT>
 800e064:	6823      	ldr	r3, [r4, #0]
      break;
 800e066:	e7cb      	b.n	800e000 <HAL_TIM_IC_Stop_DMA+0xc4>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800e068:	2d14      	cmp	r5, #20
 800e06a:	d887      	bhi.n	800df7c <HAL_TIM_IC_Stop_DMA+0x40>
 800e06c:	4a16      	ldr	r2, [pc, #88]	; (800e0c8 <HAL_TIM_IC_Stop_DMA+0x18c>)
 800e06e:	40ea      	lsrs	r2, r5
 800e070:	07d2      	lsls	r2, r2, #31
 800e072:	d4ae      	bmi.n	800dfd2 <HAL_TIM_IC_Stop_DMA+0x96>
 800e074:	e782      	b.n	800df7c <HAL_TIM_IC_Stop_DMA+0x40>
 800e076:	f035 0304 	bics.w	r3, r5, #4
 800e07a:	f47f af7f 	bne.w	800df7c <HAL_TIM_IC_Stop_DMA+0x40>
 800e07e:	e7a2      	b.n	800dfc6 <HAL_TIM_IC_Stop_DMA+0x8a>
 800e080:	4a12      	ldr	r2, [pc, #72]	; (800e0cc <HAL_TIM_IC_Stop_DMA+0x190>)
 800e082:	4293      	cmp	r3, r2
 800e084:	f43f af79 	beq.w	800df7a <HAL_TIM_IC_Stop_DMA+0x3e>
 800e088:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800e08c:	4293      	cmp	r3, r2
 800e08e:	d0f2      	beq.n	800e076 <HAL_TIM_IC_Stop_DMA+0x13a>
 800e090:	4a0f      	ldr	r2, [pc, #60]	; (800e0d0 <HAL_TIM_IC_Stop_DMA+0x194>)
 800e092:	4293      	cmp	r3, r2
 800e094:	f43f af71 	beq.w	800df7a <HAL_TIM_IC_Stop_DMA+0x3e>
 800e098:	4a0e      	ldr	r2, [pc, #56]	; (800e0d4 <HAL_TIM_IC_Stop_DMA+0x198>)
 800e09a:	4293      	cmp	r3, r2
 800e09c:	f47f af6e 	bne.w	800df7c <HAL_TIM_IC_Stop_DMA+0x40>
 800e0a0:	2d00      	cmp	r5, #0
 800e0a2:	f47f af6b 	bne.w	800df7c <HAL_TIM_IC_Stop_DMA+0x40>
 800e0a6:	e78e      	b.n	800dfc6 <HAL_TIM_IC_Stop_DMA+0x8a>
 800e0a8:	40010000 	.word	0x40010000
 800e0ac:	40000400 	.word	0x40000400
 800e0b0:	40000800 	.word	0x40000800
 800e0b4:	40000c00 	.word	0x40000c00
 800e0b8:	40010400 	.word	0x40010400
 800e0bc:	40014000 	.word	0x40014000
 800e0c0:	40014400 	.word	0x40014400
 800e0c4:	08026a84 	.word	0x08026a84
 800e0c8:	00111111 	.word	0x00111111
 800e0cc:	40014800 	.word	0x40014800
 800e0d0:	40001c00 	.word	0x40001c00
 800e0d4:	40002000 	.word	0x40002000

0800e0d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e0d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0dc:	4604      	mov	r4, r0
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800e0de:	4b6d      	ldr	r3, [pc, #436]	; (800e294 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>)
 800e0e0:	486d      	ldr	r0, [pc, #436]	; (800e298 <HAL_TIMEx_MasterConfigSynchronization+0x1c0>)
{
 800e0e2:	460d      	mov	r5, r1
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800e0e4:	6822      	ldr	r2, [r4, #0]
 800e0e6:	496d      	ldr	r1, [pc, #436]	; (800e29c <HAL_TIMEx_MasterConfigSynchronization+0x1c4>)
 800e0e8:	429a      	cmp	r2, r3
 800e0ea:	bf18      	it	ne
 800e0ec:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800e0f0:	4e6b      	ldr	r6, [pc, #428]	; (800e2a0 <HAL_TIMEx_MasterConfigSynchronization+0x1c8>)
 800e0f2:	bf14      	ite	ne
 800e0f4:	2301      	movne	r3, #1
 800e0f6:	2300      	moveq	r3, #0
 800e0f8:	4282      	cmp	r2, r0
 800e0fa:	bf0c      	ite	eq
 800e0fc:	2300      	moveq	r3, #0
 800e0fe:	f003 0301 	andne.w	r3, r3, #1
 800e102:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800e106:	428a      	cmp	r2, r1
 800e108:	bf0c      	ite	eq
 800e10a:	2300      	moveq	r3, #0
 800e10c:	f003 0301 	andne.w	r3, r3, #1
 800e110:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800e114:	42b2      	cmp	r2, r6
 800e116:	bf0c      	ite	eq
 800e118:	2300      	moveq	r3, #0
 800e11a:	f003 0301 	andne.w	r3, r3, #1
 800e11e:	4282      	cmp	r2, r0
 800e120:	bf0c      	ite	eq
 800e122:	2300      	moveq	r3, #0
 800e124:	f003 0301 	andne.w	r3, r3, #1
 800e128:	428a      	cmp	r2, r1
 800e12a:	bf0c      	ite	eq
 800e12c:	2300      	moveq	r3, #0
 800e12e:	f003 0301 	andne.w	r3, r3, #1
 800e132:	b11b      	cbz	r3, 800e13c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800e134:	4b5b      	ldr	r3, [pc, #364]	; (800e2a4 <HAL_TIMEx_MasterConfigSynchronization+0x1cc>)
 800e136:	429a      	cmp	r2, r3
 800e138:	f040 808c 	bne.w	800e254 <HAL_TIMEx_MasterConfigSynchronization+0x17c>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800e13c:	682b      	ldr	r3, [r5, #0]
 800e13e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800e142:	2b40      	cmp	r3, #64	; 0x40
 800e144:	d002      	beq.n	800e14c <HAL_TIMEx_MasterConfigSynchronization+0x74>
 800e146:	2b00      	cmp	r3, #0
 800e148:	f040 808a 	bne.w	800e260 <HAL_TIMEx_MasterConfigSynchronization+0x188>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800e14c:	68ab      	ldr	r3, [r5, #8]
 800e14e:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800e152:	d173      	bne.n	800e23c <HAL_TIMEx_MasterConfigSynchronization+0x164>

  /* Check input state */
  __HAL_LOCK(htim);
 800e154:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800e158:	2b01      	cmp	r3, #1
 800e15a:	d078      	beq.n	800e24e <HAL_TIMEx_MasterConfigSynchronization+0x176>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e15c:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800e15e:	2102      	movs	r1, #2

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e160:	f8df 9130 	ldr.w	r9, [pc, #304]	; 800e294 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
  __HAL_LOCK(htim);
 800e164:	2301      	movs	r3, #1
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e166:	f8df 813c 	ldr.w	r8, [pc, #316]	; 800e2a4 <HAL_TIMEx_MasterConfigSynchronization+0x1cc>
  htim->State = HAL_TIM_STATE_BUSY;
 800e16a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e16e:	eba2 0009 	sub.w	r0, r2, r9
 800e172:	eba2 0108 	sub.w	r1, r2, r8
  tmpcr2 = htim->Instance->CR2;
 800e176:	6857      	ldr	r7, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e178:	fab0 f080 	clz	r0, r0
  __HAL_LOCK(htim);
 800e17c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e180:	fab1 f181 	clz	r1, r1
  tmpsmcr = htim->Instance->SMCR;
 800e184:	6896      	ldr	r6, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e186:	0940      	lsrs	r0, r0, #5
 800e188:	0949      	lsrs	r1, r1, #5
 800e18a:	ea50 0301 	orrs.w	r3, r0, r1
 800e18e:	d135      	bne.n	800e1fc <HAL_TIMEx_MasterConfigSynchronization+0x124>
 800e190:	4619      	mov	r1, r3
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e192:	430b      	orrs	r3, r1
 800e194:	4840      	ldr	r0, [pc, #256]	; (800e298 <HAL_TIMEx_MasterConfigSynchronization+0x1c0>)
 800e196:	4941      	ldr	r1, [pc, #260]	; (800e29c <HAL_TIMEx_MasterConfigSynchronization+0x1c4>)
  tmpcr2 &= ~TIM_CR2_MMS;
 800e198:	f027 0770 	bic.w	r7, r7, #112	; 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e19c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800e1a0:	bf08      	it	eq
 800e1a2:	f043 0301 	orreq.w	r3, r3, #1
 800e1a6:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 800e2a0 <HAL_TIMEx_MasterConfigSynchronization+0x1c8>
 800e1aa:	4282      	cmp	r2, r0
 800e1ac:	bf08      	it	eq
 800e1ae:	f043 0301 	orreq.w	r3, r3, #1
 800e1b2:	f500 309e 	add.w	r0, r0, #80896	; 0x13c00
 800e1b6:	428a      	cmp	r2, r1
 800e1b8:	bf08      	it	eq
 800e1ba:	f043 0301 	orreq.w	r3, r3, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e1be:	6829      	ldr	r1, [r5, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e1c0:	4562      	cmp	r2, ip
 800e1c2:	bf08      	it	eq
 800e1c4:	f043 0301 	orreq.w	r3, r3, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e1c8:	430f      	orrs	r7, r1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e1ca:	4282      	cmp	r2, r0
 800e1cc:	bf08      	it	eq
 800e1ce:	f043 0301 	orreq.w	r3, r3, #1
  htim->Instance->CR2 = tmpcr2;
 800e1d2:	6057      	str	r7, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e1d4:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e1d8:	d102      	bne.n	800e1e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800e1da:	4b33      	ldr	r3, [pc, #204]	; (800e2a8 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>)
 800e1dc:	429a      	cmp	r2, r3
 800e1de:	d104      	bne.n	800e1ea <HAL_TIMEx_MasterConfigSynchronization+0x112>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e1e0:	68ab      	ldr	r3, [r5, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e1e2:	f026 0680 	bic.w	r6, r6, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e1e6:	431e      	orrs	r6, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e1e8:	6096      	str	r6, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800e1ea:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800e1ec:	2201      	movs	r2, #1

  return HAL_OK;
 800e1ee:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800e1f0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800e1f4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800e1f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800e1fc:	f8d5 e004 	ldr.w	lr, [r5, #4]
 800e200:	f42e 1340 	bic.w	r3, lr, #3145728	; 0x300000
 800e204:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e208:	bf18      	it	ne
 800e20a:	2b00      	cmpne	r3, #0
 800e20c:	bf14      	ite	ne
 800e20e:	f04f 0c01 	movne.w	ip, #1
 800e212:	f04f 0c00 	moveq.w	ip, #0
 800e216:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e21a:	bf0c      	ite	eq
 800e21c:	f04f 0c00 	moveq.w	ip, #0
 800e220:	f00c 0c01 	andne.w	ip, ip, #1
 800e224:	f1bc 0f00 	cmp.w	ip, #0
 800e228:	d002      	beq.n	800e230 <HAL_TIMEx_MasterConfigSynchronization+0x158>
 800e22a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800e22e:	d11d      	bne.n	800e26c <HAL_TIMEx_MasterConfigSynchronization+0x194>
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e230:	f427 0770 	bic.w	r7, r7, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e234:	4603      	mov	r3, r0
 800e236:	ea47 070e 	orr.w	r7, r7, lr
 800e23a:	e7aa      	b.n	800e192 <HAL_TIMEx_MasterConfigSynchronization+0xba>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800e23c:	f44f 61cd 	mov.w	r1, #1640	; 0x668
 800e240:	481a      	ldr	r0, [pc, #104]	; (800e2ac <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 800e242:	f7f4 fee1 	bl	8003008 <assert_failed>
  __HAL_LOCK(htim);
 800e246:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800e24a:	2b01      	cmp	r3, #1
 800e24c:	d186      	bne.n	800e15c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800e24e:	2002      	movs	r0, #2
}
 800e250:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800e254:	f240 6166 	movw	r1, #1638	; 0x666
 800e258:	4814      	ldr	r0, [pc, #80]	; (800e2ac <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 800e25a:	f7f4 fed5 	bl	8003008 <assert_failed>
 800e25e:	e76d      	b.n	800e13c <HAL_TIMEx_MasterConfigSynchronization+0x64>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800e260:	f240 6167 	movw	r1, #1639	; 0x667
 800e264:	4811      	ldr	r0, [pc, #68]	; (800e2ac <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 800e266:	f7f4 fecf 	bl	8003008 <assert_failed>
 800e26a:	e76f      	b.n	800e14c <HAL_TIMEx_MasterConfigSynchronization+0x74>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800e26c:	f240 617a 	movw	r1, #1658	; 0x67a
 800e270:	480e      	ldr	r0, [pc, #56]	; (800e2ac <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 800e272:	f7f4 fec9 	bl	8003008 <assert_failed>
 800e276:	6822      	ldr	r2, [r4, #0]
 800e278:	f8d5 e004 	ldr.w	lr, [r5, #4]
 800e27c:	eba2 0309 	sub.w	r3, r2, r9
 800e280:	eba2 0c08 	sub.w	ip, r2, r8
 800e284:	4258      	negs	r0, r3
 800e286:	4158      	adcs	r0, r3
 800e288:	f1dc 0100 	rsbs	r1, ip, #0
 800e28c:	eb41 010c 	adc.w	r1, r1, ip
 800e290:	e7ce      	b.n	800e230 <HAL_TIMEx_MasterConfigSynchronization+0x158>
 800e292:	bf00      	nop
 800e294:	40010000 	.word	0x40010000
 800e298:	40000400 	.word	0x40000400
 800e29c:	40000800 	.word	0x40000800
 800e2a0:	40000c00 	.word	0x40000c00
 800e2a4:	40010400 	.word	0x40010400
 800e2a8:	40001800 	.word	0x40001800
 800e2ac:	08026abc 	.word	0x08026abc

0800e2b0 <HAL_TIMEx_CommutCallback>:
 800e2b0:	4770      	bx	lr
 800e2b2:	bf00      	nop

0800e2b4 <HAL_TIMEx_BreakCallback>:
 800e2b4:	4770      	bx	lr
 800e2b6:	bf00      	nop

0800e2b8 <HAL_TIMEx_Break2Callback>:
 800e2b8:	4770      	bx	lr
 800e2ba:	bf00      	nop

0800e2bc <HAL_UART_DeInit>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e2bc:	2800      	cmp	r0, #0
 800e2be:	d043      	beq.n	800e348 <HAL_UART_DeInit+0x8c>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));
 800e2c0:	6802      	ldr	r2, [r0, #0]
 800e2c2:	4926      	ldr	r1, [pc, #152]	; (800e35c <HAL_UART_DeInit+0xa0>)
{
 800e2c4:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_INSTANCE(huart->Instance));
 800e2c6:	4b26      	ldr	r3, [pc, #152]	; (800e360 <HAL_UART_DeInit+0xa4>)
 800e2c8:	4604      	mov	r4, r0
 800e2ca:	4826      	ldr	r0, [pc, #152]	; (800e364 <HAL_UART_DeInit+0xa8>)
 800e2cc:	429a      	cmp	r2, r3
 800e2ce:	bf18      	it	ne
 800e2d0:	428a      	cmpne	r2, r1
 800e2d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e2d6:	4d24      	ldr	r5, [pc, #144]	; (800e368 <HAL_UART_DeInit+0xac>)
 800e2d8:	bf14      	ite	ne
 800e2da:	2301      	movne	r3, #1
 800e2dc:	2300      	moveq	r3, #0
 800e2de:	4282      	cmp	r2, r0
 800e2e0:	bf0c      	ite	eq
 800e2e2:	2300      	moveq	r3, #0
 800e2e4:	f003 0301 	andne.w	r3, r3, #1
 800e2e8:	f500 404c 	add.w	r0, r0, #52224	; 0xcc00
 800e2ec:	428a      	cmp	r2, r1
 800e2ee:	bf0c      	ite	eq
 800e2f0:	2300      	moveq	r3, #0
 800e2f2:	f003 0301 	andne.w	r3, r3, #1
 800e2f6:	f501 5130 	add.w	r1, r1, #11264	; 0x2c00
 800e2fa:	42aa      	cmp	r2, r5
 800e2fc:	bf0c      	ite	eq
 800e2fe:	2300      	moveq	r3, #0
 800e300:	f003 0301 	andne.w	r3, r3, #1
 800e304:	4282      	cmp	r2, r0
 800e306:	bf0c      	ite	eq
 800e308:	2300      	moveq	r3, #0
 800e30a:	f003 0301 	andne.w	r3, r3, #1
 800e30e:	428a      	cmp	r2, r1
 800e310:	bf0c      	ite	eq
 800e312:	2300      	moveq	r3, #0
 800e314:	f003 0301 	andne.w	r3, r3, #1
 800e318:	b113      	cbz	r3, 800e320 <HAL_UART_DeInit+0x64>
 800e31a:	4b14      	ldr	r3, [pc, #80]	; (800e36c <HAL_UART_DeInit+0xb0>)
 800e31c:	429a      	cmp	r2, r3
 800e31e:	d115      	bne.n	800e34c <HAL_UART_DeInit+0x90>

  huart->gState = HAL_UART_STATE_BUSY;
 800e320:	2324      	movs	r3, #36	; 0x24

  __HAL_UART_DISABLE(huart);

  huart->Instance->CR1 = 0x0U;
 800e322:	2500      	movs	r5, #0
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800e324:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800e326:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800e328:	6813      	ldr	r3, [r2, #0]
 800e32a:	f023 0301 	bic.w	r3, r3, #1
 800e32e:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0U;
 800e330:	6015      	str	r5, [r2, #0]
  huart->Instance->CR2 = 0x0U;
 800e332:	6055      	str	r5, [r2, #4]
  huart->Instance->CR3 = 0x0U;
 800e334:	6095      	str	r5, [r2, #8]
  HAL_UART_MspDeInit(huart);
 800e336:	f7f6 fa81 	bl	800483c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e33a:	67e5      	str	r5, [r4, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_RESET;
  huart->RxState = HAL_UART_STATE_RESET;

  __HAL_UNLOCK(huart);
 800e33c:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70

  return HAL_OK;
 800e340:	4628      	mov	r0, r5
  huart->gState = HAL_UART_STATE_RESET;
 800e342:	6765      	str	r5, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 800e344:	67a5      	str	r5, [r4, #120]	; 0x78
}
 800e346:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800e348:	2001      	movs	r0, #1
}
 800e34a:	4770      	bx	lr
  assert_param(IS_UART_INSTANCE(huart->Instance));
 800e34c:	f240 2165 	movw	r1, #613	; 0x265
 800e350:	4807      	ldr	r0, [pc, #28]	; (800e370 <HAL_UART_DeInit+0xb4>)
 800e352:	f7f4 fe59 	bl	8003008 <assert_failed>
 800e356:	6822      	ldr	r2, [r4, #0]
 800e358:	e7e2      	b.n	800e320 <HAL_UART_DeInit+0x64>
 800e35a:	bf00      	nop
 800e35c:	40004400 	.word	0x40004400
 800e360:	40011000 	.word	0x40011000
 800e364:	40004800 	.word	0x40004800
 800e368:	40005000 	.word	0x40005000
 800e36c:	40007c00 	.word	0x40007c00
 800e370:	08026b0c 	.word	0x08026b0c

0800e374 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e376:	6f46      	ldr	r6, [r0, #116]	; 0x74
 800e378:	2e20      	cmp	r6, #32
 800e37a:	d13b      	bne.n	800e3f4 <HAL_UART_Transmit_DMA+0x80>
  {
    if ((pData == NULL) || (Size == 0U))
 800e37c:	2900      	cmp	r1, #0
 800e37e:	d03b      	beq.n	800e3f8 <HAL_UART_Transmit_DMA+0x84>
 800e380:	fab2 f782 	clz	r7, r2
 800e384:	097f      	lsrs	r7, r7, #5
 800e386:	2f00      	cmp	r7, #0
 800e388:	d136      	bne.n	800e3f8 <HAL_UART_Transmit_DMA+0x84>
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 800e38a:	f890 4070 	ldrb.w	r4, [r0, #112]	; 0x70
 800e38e:	2c01      	cmp	r4, #1
 800e390:	d030      	beq.n	800e3f4 <HAL_UART_Transmit_DMA+0x80>
 800e392:	4613      	mov	r3, r2
 800e394:	4605      	mov	r5, r0
    huart->pTxBuffPtr  = pData;
    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e396:	2221      	movs	r2, #33	; 0x21
    __HAL_LOCK(huart);
 800e398:	2401      	movs	r4, #1

    if (huart->hdmatx != NULL)
 800e39a:	f8d0 e068 	ldr.w	lr, [r0, #104]	; 0x68
    huart->TxXferCount = Size;
 800e39e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
    huart->pTxBuffPtr  = pData;
 800e3a2:	64e9      	str	r1, [r5, #76]	; 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e3a4:	67c7      	str	r7, [r0, #124]	; 0x7c
    huart->TxXferSize  = Size;
 800e3a6:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e3aa:	6742      	str	r2, [r0, #116]	; 0x74
    __HAL_LOCK(huart);
 800e3ac:	f880 4070 	strb.w	r4, [r0, #112]	; 0x70
 800e3b0:	6802      	ldr	r2, [r0, #0]
    if (huart->hdmatx != NULL)
 800e3b2:	f1be 0f00 	cmp.w	lr, #0
 800e3b6:	d012      	beq.n	800e3de <HAL_UART_Transmit_DMA+0x6a>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e3b8:	f8df c054 	ldr.w	ip, [pc, #84]	; 800e410 <HAL_UART_Transmit_DMA+0x9c>

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800e3bc:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e3be:	4813      	ldr	r0, [pc, #76]	; (800e40c <HAL_UART_Transmit_DMA+0x98>)
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e3c0:	f8ce c040 	str.w	ip, [lr, #64]	; 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e3c4:	f8df c04c 	ldr.w	ip, [pc, #76]	; 800e414 <HAL_UART_Transmit_DMA+0xa0>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e3c8:	f8ce 003c 	str.w	r0, [lr, #60]	; 0x3c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800e3cc:	4670      	mov	r0, lr
      huart->hdmatx->XferAbortCallback = NULL;
 800e3ce:	f8ce 7050 	str.w	r7, [lr, #80]	; 0x50
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e3d2:	f8ce c04c 	str.w	ip, [lr, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800e3d6:	f7f8 fb87 	bl	8006ae8 <HAL_DMA_Start_IT>
 800e3da:	b978      	cbnz	r0, 800e3fc <HAL_UART_Transmit_DMA+0x88>
 800e3dc:	682a      	ldr	r2, [r5, #0]

        return HAL_ERROR;
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800e3de:	2340      	movs	r3, #64	; 0x40

    __HAL_UNLOCK(huart);
 800e3e0:	2100      	movs	r1, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800e3e2:	6213      	str	r3, [r2, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);

    return HAL_OK;
 800e3e4:	4608      	mov	r0, r1
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e3e6:	6893      	ldr	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 800e3e8:	f885 1070 	strb.w	r1, [r5, #112]	; 0x70
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e3ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e3f0:	6093      	str	r3, [r2, #8]
  }
  else
  {
    return HAL_BUSY;
  }
}
 800e3f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800e3f4:	2002      	movs	r0, #2
}
 800e3f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800e3f8:	2001      	movs	r0, #1
}
 800e3fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e3fc:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);
 800e3fe:	f885 7070 	strb.w	r7, [r5, #112]	; 0x70
        return HAL_ERROR;
 800e402:	4620      	mov	r0, r4
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e404:	67eb      	str	r3, [r5, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 800e406:	676e      	str	r6, [r5, #116]	; 0x74
}
 800e408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e40a:	bf00      	nop
 800e40c:	0800e575 	.word	0x0800e575
 800e410:	0800e5a5 	.word	0x0800e5a5
 800e414:	0800e5f9 	.word	0x0800e5f9

0800e418 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e41c:	6f86      	ldr	r6, [r0, #120]	; 0x78
 800e41e:	2e20      	cmp	r6, #32
 800e420:	d149      	bne.n	800e4b6 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e422:	2900      	cmp	r1, #0
 800e424:	d04a      	beq.n	800e4bc <HAL_UART_Receive_DMA+0xa4>
 800e426:	fab2 f782 	clz	r7, r2
 800e42a:	097f      	lsrs	r7, r7, #5
 800e42c:	2f00      	cmp	r7, #0
 800e42e:	d145      	bne.n	800e4bc <HAL_UART_Receive_DMA+0xa4>
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 800e430:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800e434:	2b01      	cmp	r3, #1
 800e436:	d03e      	beq.n	800e4b6 <HAL_UART_Receive_DMA+0x9e>
 800e438:	4613      	mov	r3, r2
 800e43a:	2401      	movs	r4, #1

    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e43c:	2222      	movs	r2, #34	; 0x22

    if (huart->hdmarx != NULL)
 800e43e:	f8d0 e06c 	ldr.w	lr, [r0, #108]	; 0x6c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e442:	67c7      	str	r7, [r0, #124]	; 0x7c
 800e444:	4605      	mov	r5, r0
    huart->pRxBuffPtr = pData;
 800e446:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 800e448:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58
    __HAL_LOCK(huart);
 800e44c:	f880 4070 	strb.w	r4, [r0, #112]	; 0x70
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e450:	6782      	str	r2, [r0, #120]	; 0x78
 800e452:	f8d0 c000 	ldr.w	ip, [r0]
    if (huart->hdmarx != NULL)
 800e456:	f1be 0f00 	cmp.w	lr, #0
 800e45a:	d015      	beq.n	800e488 <HAL_UART_Receive_DMA+0x70>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e45c:	481c      	ldr	r0, [pc, #112]	; (800e4d0 <HAL_UART_Receive_DMA+0xb8>)

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e45e:	460a      	mov	r2, r1
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e460:	f8df 8070 	ldr.w	r8, [pc, #112]	; 800e4d4 <HAL_UART_Receive_DMA+0xbc>
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e464:	f10c 0124 	add.w	r1, ip, #36	; 0x24
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e468:	f8df c06c 	ldr.w	ip, [pc, #108]	; 800e4d8 <HAL_UART_Receive_DMA+0xc0>
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e46c:	f8ce 003c 	str.w	r0, [lr, #60]	; 0x3c
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e470:	4670      	mov	r0, lr
      huart->hdmarx->XferAbortCallback = NULL;
 800e472:	f8ce 7050 	str.w	r7, [lr, #80]	; 0x50
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e476:	f8ce 8040 	str.w	r8, [lr, #64]	; 0x40
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e47a:	f8ce c04c 	str.w	ip, [lr, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e47e:	f7f8 fb33 	bl	8006ae8 <HAL_DMA_Start_IT>
 800e482:	b9f0      	cbnz	r0, 800e4c2 <HAL_UART_Receive_DMA+0xaa>
 800e484:	f8d5 c000 	ldr.w	ip, [r5]
      }
    }
    __HAL_UNLOCK(huart);

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e488:	f8dc 3000 	ldr.w	r3, [ip]
    __HAL_UNLOCK(huart);
 800e48c:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e48e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    __HAL_UNLOCK(huart);
 800e492:	f885 0070 	strb.w	r0, [r5, #112]	; 0x70
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e496:	f8cc 3000 	str.w	r3, [ip]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e49a:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800e49e:	f043 0301 	orr.w	r3, r3, #1
 800e4a2:	f8cc 3008 	str.w	r3, [ip, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e4a6:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800e4aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e4ae:	f8cc 3008 	str.w	r3, [ip, #8]
  }
  else
  {
    return HAL_BUSY;
  }
}
 800e4b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800e4b6:	2002      	movs	r0, #2
}
 800e4b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 800e4bc:	2001      	movs	r0, #1
}
 800e4be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e4c2:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);
 800e4c4:	f885 7070 	strb.w	r7, [r5, #112]	; 0x70
        return HAL_ERROR;
 800e4c8:	4620      	mov	r0, r4
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e4ca:	67eb      	str	r3, [r5, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 800e4cc:	676e      	str	r6, [r5, #116]	; 0x74
        return HAL_ERROR;
 800e4ce:	e7f3      	b.n	800e4b8 <HAL_UART_Receive_DMA+0xa0>
 800e4d0:	0800e5b1 	.word	0x0800e5b1
 800e4d4:	0800e5ed 	.word	0x0800e5ed
 800e4d8:	0800e5f9 	.word	0x0800e5f9

0800e4dc <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800e4dc:	b538      	push	{r3, r4, r5, lr}
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800e4de:	6803      	ldr	r3, [r0, #0]
{
 800e4e0:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800e4e2:	681a      	ldr	r2, [r3, #0]
 800e4e4:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 800e4e8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e4ea:	689a      	ldr	r2, [r3, #8]
 800e4ec:	f022 0201 	bic.w	r2, r2, #1
 800e4f0:	609a      	str	r2, [r3, #8]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800e4f2:	689a      	ldr	r2, [r3, #8]
 800e4f4:	0611      	lsls	r1, r2, #24
 800e4f6:	d50c      	bpl.n	800e512 <HAL_UART_Abort+0x36>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e4f8:	689a      	ldr	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800e4fa:	6e81      	ldr	r1, [r0, #104]	; 0x68
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e4fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e500:	609a      	str	r2, [r3, #8]
    if (huart->hdmatx != NULL)
 800e502:	b131      	cbz	r1, 800e512 <HAL_UART_Abort+0x36>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800e504:	2300      	movs	r3, #0

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800e506:	4608      	mov	r0, r1
      huart->hdmatx->XferAbortCallback = NULL;
 800e508:	650b      	str	r3, [r1, #80]	; 0x50
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800e50a:	f7f8 fb47 	bl	8006b9c <HAL_DMA_Abort>
 800e50e:	bb08      	cbnz	r0, 800e554 <HAL_UART_Abort+0x78>
 800e510:	6823      	ldr	r3, [r4, #0]
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e512:	689a      	ldr	r2, [r3, #8]
 800e514:	0652      	lsls	r2, r2, #25
 800e516:	d50c      	bpl.n	800e532 <HAL_UART_Abort+0x56>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e518:	689a      	ldr	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800e51a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e51c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e520:	609a      	str	r2, [r3, #8]
    if (huart->hdmarx != NULL)
 800e522:	b131      	cbz	r1, 800e532 <HAL_UART_Abort+0x56>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800e524:	2300      	movs	r3, #0

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800e526:	4608      	mov	r0, r1
      huart->hdmarx->XferAbortCallback = NULL;
 800e528:	650b      	str	r3, [r1, #80]	; 0x50
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800e52a:	f7f8 fb37 	bl	8006b9c <HAL_DMA_Abort>
 800e52e:	b9d0      	cbnz	r0, 800e566 <HAL_UART_Abort+0x8a>
 800e530:	6823      	ldr	r3, [r4, #0]
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800e532:	2200      	movs	r2, #0
  huart->RxXferCount = 0U;

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800e534:	210f      	movs	r1, #15

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800e536:	2520      	movs	r5, #32
  huart->TxXferCount = 0U;
 800e538:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
  huart->RxState = HAL_UART_STATE_READY;

  huart->ErrorCode = HAL_UART_ERROR_NONE;

  return HAL_OK;
 800e53c:	4610      	mov	r0, r2
  huart->RxXferCount = 0U;
 800e53e:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800e542:	6219      	str	r1, [r3, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e544:	6999      	ldr	r1, [r3, #24]
 800e546:	f041 0108 	orr.w	r1, r1, #8
 800e54a:	6199      	str	r1, [r3, #24]
  huart->gState  = HAL_UART_STATE_READY;
 800e54c:	6765      	str	r5, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800e54e:	67a5      	str	r5, [r4, #120]	; 0x78
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e550:	67e2      	str	r2, [r4, #124]	; 0x7c
}
 800e552:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800e554:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800e556:	f7f8 fc53 	bl	8006e00 <HAL_DMA_GetError>
 800e55a:	2820      	cmp	r0, #32
 800e55c:	d1d8      	bne.n	800e510 <HAL_UART_Abort+0x34>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e55e:	2310      	movs	r3, #16
          return HAL_TIMEOUT;
 800e560:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e562:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 800e564:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800e566:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800e568:	f7f8 fc4a 	bl	8006e00 <HAL_DMA_GetError>
 800e56c:	2820      	cmp	r0, #32
 800e56e:	d1df      	bne.n	800e530 <HAL_UART_Abort+0x54>
 800e570:	e7f5      	b.n	800e55e <HAL_UART_Abort+0x82>
 800e572:	bf00      	nop

0800e574 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e574:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e576:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e578:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e57a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e57e:	d00c      	beq.n	800e59a <UART_DMATransmitCplt+0x26>
  {
    huart->TxXferCount = 0U;

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e580:	6803      	ldr	r3, [r0, #0]
    huart->TxXferCount = 0U;
 800e582:	2200      	movs	r2, #0
 800e584:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e588:	689a      	ldr	r2, [r3, #8]
 800e58a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e58e:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e590:	681a      	ldr	r2, [r3, #0]
 800e592:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e596:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e598:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800e59a:	f7f2 fd5b 	bl	8001054 <HAL_UART_TxCpltCallback>
}
 800e59e:	bd08      	pop	{r3, pc}

0800e5a0 <HAL_UART_TxHalfCpltCallback>:
 800e5a0:	4770      	bx	lr
 800e5a2:	bf00      	nop

0800e5a4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e5a4:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e5a6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800e5a8:	f7ff fffa 	bl	800e5a0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e5ac:	bd08      	pop	{r3, pc}
 800e5ae:	bf00      	nop

0800e5b0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e5b0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e5b2:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e5b4:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e5b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e5ba:	d011      	beq.n	800e5e0 <UART_DMAReceiveCplt+0x30>
  {
    huart->RxXferCount = 0U;

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e5bc:	6803      	ldr	r3, [r0, #0]
    huart->RxXferCount = 0U;
 800e5be:	2200      	movs	r2, #0
    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e5c0:	2120      	movs	r1, #32
    huart->RxXferCount = 0U;
 800e5c2:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e5c6:	681a      	ldr	r2, [r3, #0]
 800e5c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e5cc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e5ce:	689a      	ldr	r2, [r3, #8]
 800e5d0:	f022 0201 	bic.w	r2, r2, #1
 800e5d4:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e5d6:	689a      	ldr	r2, [r3, #8]
 800e5d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e5dc:	609a      	str	r2, [r3, #8]
    huart->RxState = HAL_UART_STATE_READY;
 800e5de:	6781      	str	r1, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800e5e0:	f7f4 fe76 	bl	80032d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e5e4:	bd08      	pop	{r3, pc}
 800e5e6:	bf00      	nop

0800e5e8 <HAL_UART_RxHalfCpltCallback>:
 800e5e8:	4770      	bx	lr
 800e5ea:	bf00      	nop

0800e5ec <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e5ec:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800e5ee:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800e5f0:	f7ff fffa 	bl	800e5e8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e5f4:	bd08      	pop	{r3, pc}
 800e5f6:	bf00      	nop

0800e5f8 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e5f8:	6b83      	ldr	r3, [r0, #56]	; 0x38

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e5fa:	681a      	ldr	r2, [r3, #0]
{
 800e5fc:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e5fe:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e600:	6f98      	ldr	r0, [r3, #120]	; 0x78
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e602:	6891      	ldr	r1, [r2, #8]
 800e604:	0609      	lsls	r1, r1, #24
 800e606:	d501      	bpl.n	800e60c <UART_DMAError+0x14>
 800e608:	2c21      	cmp	r4, #33	; 0x21
 800e60a:	d01b      	beq.n	800e644 <UART_DMAError+0x4c>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e60c:	6891      	ldr	r1, [r2, #8]
 800e60e:	0649      	lsls	r1, r1, #25
 800e610:	d501      	bpl.n	800e616 <UART_DMAError+0x1e>
 800e612:	2822      	cmp	r0, #34	; 0x22
 800e614:	d007      	beq.n	800e626 <UART_DMAError+0x2e>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e616:	6fda      	ldr	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e618:	4618      	mov	r0, r3
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e61a:	f042 0210 	orr.w	r2, r2, #16
 800e61e:	67da      	str	r2, [r3, #124]	; 0x7c
  HAL_UART_ErrorCallback(huart);
 800e620:	f7f4 fe9c 	bl	800335c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e624:	bd10      	pop	{r4, pc}
    huart->RxXferCount = 0U;
 800e626:	2000      	movs	r0, #0
  huart->RxState = HAL_UART_STATE_READY;
 800e628:	2420      	movs	r4, #32
    huart->RxXferCount = 0U;
 800e62a:	f8a3 005a 	strh.w	r0, [r3, #90]	; 0x5a
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e62e:	6811      	ldr	r1, [r2, #0]
 800e630:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 800e634:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e636:	6891      	ldr	r1, [r2, #8]
 800e638:	f021 0101 	bic.w	r1, r1, #1
 800e63c:	6091      	str	r1, [r2, #8]
  huart->RxISR = NULL;
 800e63e:	6618      	str	r0, [r3, #96]	; 0x60
  huart->RxState = HAL_UART_STATE_READY;
 800e640:	679c      	str	r4, [r3, #120]	; 0x78
 800e642:	e7e8      	b.n	800e616 <UART_DMAError+0x1e>
    huart->TxXferCount = 0U;
 800e644:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 800e646:	2420      	movs	r4, #32
    huart->TxXferCount = 0U;
 800e648:	f8a3 1052 	strh.w	r1, [r3, #82]	; 0x52
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800e64c:	6811      	ldr	r1, [r2, #0]
 800e64e:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 800e652:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800e654:	675c      	str	r4, [r3, #116]	; 0x74
 800e656:	e7d9      	b.n	800e60c <UART_DMAError+0x14>

0800e658 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e658:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
  huart->RxXferCount = 0U;
 800e65a:	2200      	movs	r2, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e65c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800e65e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e662:	4618      	mov	r0, r3
  huart->TxXferCount = 0U;
 800e664:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 800e668:	f7f4 fe78 	bl	800335c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e66c:	bd08      	pop	{r3, pc}
 800e66e:	bf00      	nop

0800e670 <HAL_UARTEx_WakeupCallback>:
}
 800e670:	4770      	bx	lr
 800e672:	bf00      	nop

0800e674 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e674:	6803      	ldr	r3, [r0, #0]
{
 800e676:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e678:	69da      	ldr	r2, [r3, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e67a:	f640 060f 	movw	r6, #2063	; 0x80f
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e67e:	6819      	ldr	r1, [r3, #0]
{
 800e680:	4604      	mov	r4, r0
  if (errorflags == 0U)
 800e682:	4232      	tst	r2, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e684:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 800e686:	d052      	beq.n	800e72e <HAL_UART_IRQHandler+0xba>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800e688:	f015 0001 	ands.w	r0, r5, #1
 800e68c:	d058      	beq.n	800e740 <HAL_UART_IRQHandler+0xcc>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e68e:	07d5      	lsls	r5, r2, #31
 800e690:	d507      	bpl.n	800e6a2 <HAL_UART_IRQHandler+0x2e>
 800e692:	05ce      	lsls	r6, r1, #23
 800e694:	d505      	bpl.n	800e6a2 <HAL_UART_IRQHandler+0x2e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e696:	2501      	movs	r5, #1
 800e698:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e69a:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 800e69c:	f045 0501 	orr.w	r5, r5, #1
 800e6a0:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e6a2:	0795      	lsls	r5, r2, #30
 800e6a4:	d474      	bmi.n	800e790 <HAL_UART_IRQHandler+0x11c>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e6a6:	0755      	lsls	r5, r2, #29
 800e6a8:	d501      	bpl.n	800e6ae <HAL_UART_IRQHandler+0x3a>
 800e6aa:	2800      	cmp	r0, #0
 800e6ac:	d17a      	bne.n	800e7a4 <HAL_UART_IRQHandler+0x130>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e6ae:	0716      	lsls	r6, r2, #28
 800e6b0:	d503      	bpl.n	800e6ba <HAL_UART_IRQHandler+0x46>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e6b2:	068d      	lsls	r5, r1, #26
 800e6b4:	d47d      	bmi.n	800e7b2 <HAL_UART_IRQHandler+0x13e>
 800e6b6:	2800      	cmp	r0, #0
 800e6b8:	d17b      	bne.n	800e7b2 <HAL_UART_IRQHandler+0x13e>
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e6ba:	0510      	lsls	r0, r2, #20
 800e6bc:	d508      	bpl.n	800e6d0 <HAL_UART_IRQHandler+0x5c>
 800e6be:	014e      	lsls	r6, r1, #5
 800e6c0:	d506      	bpl.n	800e6d0 <HAL_UART_IRQHandler+0x5c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e6c2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800e6c6:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e6c8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800e6ca:	f040 0020 	orr.w	r0, r0, #32
 800e6ce:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e6d0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800e6d2:	2800      	cmp	r0, #0
 800e6d4:	d04b      	beq.n	800e76e <HAL_UART_IRQHandler+0xfa>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800e6d6:	0695      	lsls	r5, r2, #26
 800e6d8:	d501      	bpl.n	800e6de <HAL_UART_IRQHandler+0x6a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e6da:	0688      	lsls	r0, r1, #26
 800e6dc:	d474      	bmi.n	800e7c8 <HAL_UART_IRQHandler+0x154>
      errorcode = huart->ErrorCode;
 800e6de:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e6e0:	6899      	ldr	r1, [r3, #8]
 800e6e2:	0649      	lsls	r1, r1, #25
 800e6e4:	d402      	bmi.n	800e6ec <HAL_UART_IRQHandler+0x78>
 800e6e6:	f015 0528 	ands.w	r5, r5, #40	; 0x28
 800e6ea:	d074      	beq.n	800e7d6 <HAL_UART_IRQHandler+0x162>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e6ec:	681a      	ldr	r2, [r3, #0]
  huart->RxState = HAL_UART_STATE_READY;
 800e6ee:	2020      	movs	r0, #32
  huart->RxISR = NULL;
 800e6f0:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e6f2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e6f6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e6f8:	689a      	ldr	r2, [r3, #8]
 800e6fa:	f022 0201 	bic.w	r2, r2, #1
 800e6fe:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 800e700:	67a0      	str	r0, [r4, #120]	; 0x78
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e702:	689a      	ldr	r2, [r3, #8]
  huart->RxISR = NULL;
 800e704:	6621      	str	r1, [r4, #96]	; 0x60
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e706:	0652      	lsls	r2, r2, #25
 800e708:	d55a      	bpl.n	800e7c0 <HAL_UART_IRQHandler+0x14c>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e70a:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800e70c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e70e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e712:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800e714:	2900      	cmp	r1, #0
 800e716:	d053      	beq.n	800e7c0 <HAL_UART_IRQHandler+0x14c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e718:	4b31      	ldr	r3, [pc, #196]	; (800e7e0 <HAL_UART_IRQHandler+0x16c>)
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e71a:	4608      	mov	r0, r1
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e71c:	650b      	str	r3, [r1, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e71e:	f7f8 fa85 	bl	8006c2c <HAL_DMA_Abort_IT>
 800e722:	b320      	cbz	r0, 800e76e <HAL_UART_IRQHandler+0xfa>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e724:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
}
 800e726:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e72a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800e72c:	4718      	bx	r3
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800e72e:	0696      	lsls	r6, r2, #26
 800e730:	d509      	bpl.n	800e746 <HAL_UART_IRQHandler+0xd2>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e732:	068e      	lsls	r6, r1, #26
 800e734:	d507      	bpl.n	800e746 <HAL_UART_IRQHandler+0xd2>
      if (huart->RxISR != NULL)
 800e736:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800e738:	b1cb      	cbz	r3, 800e76e <HAL_UART_IRQHandler+0xfa>
}
 800e73a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800e73e:	4718      	bx	r3
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800e740:	f411 7f90 	tst.w	r1, #288	; 0x120
 800e744:	d1a3      	bne.n	800e68e <HAL_UART_IRQHandler+0x1a>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e746:	02d6      	lsls	r6, r2, #11
 800e748:	d409      	bmi.n	800e75e <HAL_UART_IRQHandler+0xea>
  if (((isrflags & USART_ISR_TXE) != 0U)
 800e74a:	0616      	lsls	r6, r2, #24
 800e74c:	d510      	bpl.n	800e770 <HAL_UART_IRQHandler+0xfc>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800e74e:	060d      	lsls	r5, r1, #24
 800e750:	d50e      	bpl.n	800e770 <HAL_UART_IRQHandler+0xfc>
    if (huart->TxISR != NULL)
 800e752:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e754:	b15b      	cbz	r3, 800e76e <HAL_UART_IRQHandler+0xfa>
      huart->TxISR(huart);
 800e756:	4620      	mov	r0, r4
}
 800e758:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800e75c:	4718      	bx	r3
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e75e:	0268      	lsls	r0, r5, #9
 800e760:	d5f3      	bpl.n	800e74a <HAL_UART_IRQHandler+0xd6>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e762:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800e766:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e768:	621a      	str	r2, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800e76a:	f7ff ff81 	bl	800e670 <HAL_UARTEx_WakeupCallback>
}
 800e76e:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e770:	0650      	lsls	r0, r2, #25
 800e772:	d5fc      	bpl.n	800e76e <HAL_UART_IRQHandler+0xfa>
 800e774:	064a      	lsls	r2, r1, #25
 800e776:	d5fa      	bpl.n	800e76e <HAL_UART_IRQHandler+0xfa>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e778:	681a      	ldr	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e77a:	2520      	movs	r5, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e77c:	2100      	movs	r1, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e77e:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e780:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e784:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800e786:	6765      	str	r5, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 800e788:	6661      	str	r1, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 800e78a:	f7f2 fc63 	bl	8001054 <HAL_UART_TxCpltCallback>
}
 800e78e:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e790:	2800      	cmp	r0, #0
 800e792:	d08c      	beq.n	800e6ae <HAL_UART_IRQHandler+0x3a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e794:	2502      	movs	r5, #2
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e796:	0756      	lsls	r6, r2, #29
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e798:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e79a:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 800e79c:	f045 0504 	orr.w	r5, r5, #4
 800e7a0:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e7a2:	d584      	bpl.n	800e6ae <HAL_UART_IRQHandler+0x3a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e7a4:	2504      	movs	r5, #4
 800e7a6:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e7a8:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 800e7aa:	f045 0502 	orr.w	r5, r5, #2
 800e7ae:	67e5      	str	r5, [r4, #124]	; 0x7c
 800e7b0:	e77d      	b.n	800e6ae <HAL_UART_IRQHandler+0x3a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e7b2:	2008      	movs	r0, #8
 800e7b4:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e7b6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800e7b8:	f040 0008 	orr.w	r0, r0, #8
 800e7bc:	67e0      	str	r0, [r4, #124]	; 0x7c
 800e7be:	e77c      	b.n	800e6ba <HAL_UART_IRQHandler+0x46>
            HAL_UART_ErrorCallback(huart);
 800e7c0:	4620      	mov	r0, r4
 800e7c2:	f7f4 fdcb 	bl	800335c <HAL_UART_ErrorCallback>
}
 800e7c6:	bd70      	pop	{r4, r5, r6, pc}
        if (huart->RxISR != NULL)
 800e7c8:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800e7ca:	2a00      	cmp	r2, #0
 800e7cc:	d087      	beq.n	800e6de <HAL_UART_IRQHandler+0x6a>
          huart->RxISR(huart);
 800e7ce:	4620      	mov	r0, r4
 800e7d0:	4790      	blx	r2
 800e7d2:	6823      	ldr	r3, [r4, #0]
 800e7d4:	e783      	b.n	800e6de <HAL_UART_IRQHandler+0x6a>
        HAL_UART_ErrorCallback(huart);
 800e7d6:	4620      	mov	r0, r4
 800e7d8:	f7f4 fdc0 	bl	800335c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e7dc:	67e5      	str	r5, [r4, #124]	; 0x7c
}
 800e7de:	bd70      	pop	{r4, r5, r6, pc}
 800e7e0:	0800e659 	.word	0x0800e659

0800e7e4 <UART_SetConfig>:
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800e7e4:	4bba      	ldr	r3, [pc, #744]	; (800ead0 <UART_SetConfig+0x2ec>)
 800e7e6:	6842      	ldr	r2, [r0, #4]
 800e7e8:	429a      	cmp	r2, r3
{
 800e7ea:	b570      	push	{r4, r5, r6, lr}
 800e7ec:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800e7ee:	f200 80bf 	bhi.w	800e970 <UART_SetConfig+0x18c>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800e7f2:	68a3      	ldr	r3, [r4, #8]
 800e7f4:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 800e7f8:	d002      	beq.n	800e800 <UART_SetConfig+0x1c>
 800e7fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e7fe:	d17c      	bne.n	800e8fa <UART_SetConfig+0x116>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800e800:	68e3      	ldr	r3, [r4, #12]
 800e802:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800e806:	f040 8082 	bne.w	800e90e <UART_SetConfig+0x12a>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800e80a:	6a23      	ldr	r3, [r4, #32]
 800e80c:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 800e810:	f040 8087 	bne.w	800e922 <UART_SetConfig+0x13e>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800e814:	6923      	ldr	r3, [r4, #16]
 800e816:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800e81a:	d002      	beq.n	800e822 <UART_SetConfig+0x3e>
 800e81c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800e820:	d165      	bne.n	800e8ee <UART_SetConfig+0x10a>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800e822:	6963      	ldr	r3, [r4, #20]
 800e824:	f033 020c 	bics.w	r2, r3, #12
 800e828:	d148      	bne.n	800e8bc <UART_SetConfig+0xd8>
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d046      	beq.n	800e8bc <UART_SetConfig+0xd8>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800e82e:	69a3      	ldr	r3, [r4, #24]
 800e830:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 800e834:	d14b      	bne.n	800e8ce <UART_SetConfig+0xea>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800e836:	69e0      	ldr	r0, [r4, #28]
 800e838:	f430 4300 	bics.w	r3, r0, #32768	; 0x8000
 800e83c:	d150      	bne.n	800e8e0 <UART_SetConfig+0xfc>
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e83e:	6823      	ldr	r3, [r4, #0]
 800e840:	6921      	ldr	r1, [r4, #16]
 800e842:	68a2      	ldr	r2, [r4, #8]
 800e844:	681e      	ldr	r6, [r3, #0]
 800e846:	430a      	orrs	r2, r1
 800e848:	4da2      	ldr	r5, [pc, #648]	; (800ead4 <UART_SetConfig+0x2f0>)
 800e84a:	6961      	ldr	r1, [r4, #20]
 800e84c:	4035      	ands	r5, r6
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e84e:	68e6      	ldr	r6, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e850:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e852:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e854:	432a      	orrs	r2, r5
  tmpreg |= huart->Init.OneBitSampling;
 800e856:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e858:	4302      	orrs	r2, r0
  tmpreg |= huart->Init.OneBitSampling;
 800e85a:	4329      	orrs	r1, r5
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e85c:	4d9e      	ldr	r5, [pc, #632]	; (800ead8 <UART_SetConfig+0x2f4>)
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e85e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e860:	685a      	ldr	r2, [r3, #4]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e862:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e864:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800e868:	ea42 0206 	orr.w	r2, r2, r6
 800e86c:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e86e:	689a      	ldr	r2, [r3, #8]
 800e870:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 800e874:	ea41 0102 	orr.w	r1, r1, r2
 800e878:	6099      	str	r1, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e87a:	d07f      	beq.n	800e97c <UART_SetConfig+0x198>
 800e87c:	4a97      	ldr	r2, [pc, #604]	; (800eadc <UART_SetConfig+0x2f8>)
 800e87e:	4293      	cmp	r3, r2
 800e880:	d055      	beq.n	800e92e <UART_SetConfig+0x14a>
 800e882:	4a97      	ldr	r2, [pc, #604]	; (800eae0 <UART_SetConfig+0x2fc>)
 800e884:	4293      	cmp	r3, r2
 800e886:	f000 80f1 	beq.w	800ea6c <UART_SetConfig+0x288>
 800e88a:	4a96      	ldr	r2, [pc, #600]	; (800eae4 <UART_SetConfig+0x300>)
 800e88c:	4293      	cmp	r3, r2
 800e88e:	f000 813b 	beq.w	800eb08 <UART_SetConfig+0x324>
 800e892:	4a95      	ldr	r2, [pc, #596]	; (800eae8 <UART_SetConfig+0x304>)
 800e894:	4293      	cmp	r3, r2
 800e896:	f000 8091 	beq.w	800e9bc <UART_SetConfig+0x1d8>
 800e89a:	4a94      	ldr	r2, [pc, #592]	; (800eaec <UART_SetConfig+0x308>)
 800e89c:	4293      	cmp	r3, r2
 800e89e:	f000 80fd 	beq.w	800ea9c <UART_SetConfig+0x2b8>
 800e8a2:	4a93      	ldr	r2, [pc, #588]	; (800eaf0 <UART_SetConfig+0x30c>)
 800e8a4:	4293      	cmp	r3, r2
 800e8a6:	f000 8160 	beq.w	800eb6a <UART_SetConfig+0x386>
 800e8aa:	4a92      	ldr	r2, [pc, #584]	; (800eaf4 <UART_SetConfig+0x310>)
 800e8ac:	4293      	cmp	r3, r2
 800e8ae:	f000 816e 	beq.w	800eb8e <UART_SetConfig+0x3aa>
  huart->RxISR = NULL;
 800e8b2:	2300      	movs	r3, #0
      ret = HAL_ERROR;
 800e8b4:	2001      	movs	r0, #1
  huart->TxISR = NULL;
 800e8b6:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 800e8ba:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800e8bc:	f640 21c4 	movw	r1, #2756	; 0xac4
 800e8c0:	488d      	ldr	r0, [pc, #564]	; (800eaf8 <UART_SetConfig+0x314>)
 800e8c2:	f7f4 fba1 	bl	8003008 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800e8c6:	69a3      	ldr	r3, [r4, #24]
 800e8c8:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 800e8cc:	d0b3      	beq.n	800e836 <UART_SetConfig+0x52>
 800e8ce:	488a      	ldr	r0, [pc, #552]	; (800eaf8 <UART_SetConfig+0x314>)
 800e8d0:	f640 21c5 	movw	r1, #2757	; 0xac5
 800e8d4:	f7f4 fb98 	bl	8003008 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800e8d8:	69e0      	ldr	r0, [r4, #28]
 800e8da:	f430 4300 	bics.w	r3, r0, #32768	; 0x8000
 800e8de:	d0ae      	beq.n	800e83e <UART_SetConfig+0x5a>
 800e8e0:	4885      	ldr	r0, [pc, #532]	; (800eaf8 <UART_SetConfig+0x314>)
 800e8e2:	f640 21c6 	movw	r1, #2758	; 0xac6
 800e8e6:	f7f4 fb8f 	bl	8003008 <assert_failed>
 800e8ea:	69e0      	ldr	r0, [r4, #28]
 800e8ec:	e7a7      	b.n	800e83e <UART_SetConfig+0x5a>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800e8ee:	f640 21c3 	movw	r1, #2755	; 0xac3
 800e8f2:	4881      	ldr	r0, [pc, #516]	; (800eaf8 <UART_SetConfig+0x314>)
 800e8f4:	f7f4 fb88 	bl	8003008 <assert_failed>
 800e8f8:	e793      	b.n	800e822 <UART_SetConfig+0x3e>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800e8fa:	f640 21bf 	movw	r1, #2751	; 0xabf
 800e8fe:	487e      	ldr	r0, [pc, #504]	; (800eaf8 <UART_SetConfig+0x314>)
 800e900:	f7f4 fb82 	bl	8003008 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800e904:	68e3      	ldr	r3, [r4, #12]
 800e906:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800e90a:	f43f af7e 	beq.w	800e80a <UART_SetConfig+0x26>
 800e90e:	f44f 612c 	mov.w	r1, #2752	; 0xac0
 800e912:	4879      	ldr	r0, [pc, #484]	; (800eaf8 <UART_SetConfig+0x314>)
 800e914:	f7f4 fb78 	bl	8003008 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800e918:	6a23      	ldr	r3, [r4, #32]
 800e91a:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 800e91e:	f43f af79 	beq.w	800e814 <UART_SetConfig+0x30>
 800e922:	f640 21c1 	movw	r1, #2753	; 0xac1
 800e926:	4874      	ldr	r0, [pc, #464]	; (800eaf8 <UART_SetConfig+0x314>)
 800e928:	f7f4 fb6e 	bl	8003008 <assert_failed>
 800e92c:	e772      	b.n	800e814 <UART_SetConfig+0x30>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e92e:	4b73      	ldr	r3, [pc, #460]	; (800eafc <UART_SetConfig+0x318>)
 800e930:	4a73      	ldr	r2, [pc, #460]	; (800eb00 <UART_SetConfig+0x31c>)
 800e932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e936:	f003 030c 	and.w	r3, r3, #12
 800e93a:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e93c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800e940:	d024      	beq.n	800e98c <UART_SetConfig+0x1a8>
    switch (clocksource)
 800e942:	2b08      	cmp	r3, #8
 800e944:	d8b5      	bhi.n	800e8b2 <UART_SetConfig+0xce>
 800e946:	a201      	add	r2, pc, #4	; (adr r2, 800e94c <UART_SetConfig+0x168>)
 800e948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e94c:	0800ea5b 	.word	0x0800ea5b
 800e950:	0800e9eb 	.word	0x0800e9eb
 800e954:	0800eb43 	.word	0x0800eb43
 800e958:	0800e8b3 	.word	0x0800e8b3
 800e95c:	0800eab3 	.word	0x0800eab3
 800e960:	0800e8b3 	.word	0x0800e8b3
 800e964:	0800e8b3 	.word	0x0800e8b3
 800e968:	0800e8b3 	.word	0x0800e8b3
 800e96c:	0800ea8d 	.word	0x0800ea8d
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800e970:	f640 21be 	movw	r1, #2750	; 0xabe
 800e974:	4860      	ldr	r0, [pc, #384]	; (800eaf8 <UART_SetConfig+0x314>)
 800e976:	f7f4 fb47 	bl	8003008 <assert_failed>
 800e97a:	e73a      	b.n	800e7f2 <UART_SetConfig+0xe>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e97c:	4b5f      	ldr	r3, [pc, #380]	; (800eafc <UART_SetConfig+0x318>)
 800e97e:	4a61      	ldr	r2, [pc, #388]	; (800eb04 <UART_SetConfig+0x320>)
 800e980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e984:	f003 0303 	and.w	r3, r3, #3
 800e988:	5cd3      	ldrb	r3, [r2, r3]
 800e98a:	e7d7      	b.n	800e93c <UART_SetConfig+0x158>
    switch (clocksource)
 800e98c:	2b08      	cmp	r3, #8
 800e98e:	d890      	bhi.n	800e8b2 <UART_SetConfig+0xce>
 800e990:	a201      	add	r2, pc, #4	; (adr r2, 800e998 <UART_SetConfig+0x1b4>)
 800e992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e996:	bf00      	nop
 800e998:	0800eac5 	.word	0x0800eac5
 800e99c:	0800ea17 	.word	0x0800ea17
 800e9a0:	0800eb23 	.word	0x0800eb23
 800e9a4:	0800e8b3 	.word	0x0800e8b3
 800e9a8:	0800eacb 	.word	0x0800eacb
 800e9ac:	0800e8b3 	.word	0x0800e8b3
 800e9b0:	0800e8b3 	.word	0x0800e8b3
 800e9b4:	0800e8b3 	.word	0x0800e8b3
 800e9b8:	0800eb33 	.word	0x0800eb33
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e9bc:	4b4f      	ldr	r3, [pc, #316]	; (800eafc <UART_SetConfig+0x318>)
 800e9be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e9c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e9c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e9ca:	d06f      	beq.n	800eaac <UART_SetConfig+0x2c8>
 800e9cc:	d93f      	bls.n	800ea4e <UART_SetConfig+0x26a>
 800e9ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e9d2:	f000 80a3 	beq.w	800eb1c <UART_SetConfig+0x338>
 800e9d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e9da:	d054      	beq.n	800ea86 <UART_SetConfig+0x2a2>
 800e9dc:	e769      	b.n	800e8b2 <UART_SetConfig+0xce>
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	f47f af67 	bne.w	800e8b2 <UART_SetConfig+0xce>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e9e4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800e9e8:	d015      	beq.n	800ea16 <UART_SetConfig+0x232>
        pclk = HAL_RCC_GetPCLK2Freq();
 800e9ea:	f7fb ff59 	bl	800a8a0 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e9ee:	6862      	ldr	r2, [r4, #4]
 800e9f0:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800e9f4:	fbb3 f3f2 	udiv	r3, r3, r2
 800e9f8:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e9fa:	f1a3 0110 	sub.w	r1, r3, #16
 800e9fe:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800ea02:	4291      	cmp	r1, r2
 800ea04:	f63f af55 	bhi.w	800e8b2 <UART_SetConfig+0xce>
      huart->Instance->BRR = usartdiv;
 800ea08:	6822      	ldr	r2, [r4, #0]
 800ea0a:	2000      	movs	r0, #0
 800ea0c:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 800ea0e:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800ea10:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 800ea14:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 800ea16:	f7fb ff43 	bl	800a8a0 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ea1a:	6862      	ldr	r2, [r4, #4]
 800ea1c:	0853      	lsrs	r3, r2, #1
 800ea1e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800ea22:	fbb3 f3f2 	udiv	r3, r3, r2
 800ea26:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ea28:	f1a3 0110 	sub.w	r1, r3, #16
 800ea2c:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800ea30:	4291      	cmp	r1, r2
 800ea32:	f63f af3e 	bhi.w	800e8b2 <UART_SetConfig+0xce>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ea36:	f023 020f 	bic.w	r2, r3, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ea3a:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 800ea3e:	6821      	ldr	r1, [r4, #0]
 800ea40:	2000      	movs	r0, #0
 800ea42:	4313      	orrs	r3, r2
 800ea44:	60cb      	str	r3, [r1, #12]
  huart->RxISR = NULL;
 800ea46:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800ea48:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 800ea4c:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	f47f af2f 	bne.w	800e8b2 <UART_SetConfig+0xce>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ea54:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800ea58:	d034      	beq.n	800eac4 <UART_SetConfig+0x2e0>
        pclk = HAL_RCC_GetPCLK1Freq();
 800ea5a:	f7fb ff11 	bl	800a880 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ea5e:	6862      	ldr	r2, [r4, #4]
 800ea60:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800ea64:	fbb3 f3f2 	udiv	r3, r3, r2
 800ea68:	b29b      	uxth	r3, r3
        break;
 800ea6a:	e7c6      	b.n	800e9fa <UART_SetConfig+0x216>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ea6c:	4b23      	ldr	r3, [pc, #140]	; (800eafc <UART_SetConfig+0x318>)
 800ea6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ea72:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ea76:	2b10      	cmp	r3, #16
 800ea78:	d018      	beq.n	800eaac <UART_SetConfig+0x2c8>
 800ea7a:	d9e8      	bls.n	800ea4e <UART_SetConfig+0x26a>
 800ea7c:	2b20      	cmp	r3, #32
 800ea7e:	d04d      	beq.n	800eb1c <UART_SetConfig+0x338>
 800ea80:	2b30      	cmp	r3, #48	; 0x30
 800ea82:	f47f af16 	bne.w	800e8b2 <UART_SetConfig+0xce>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ea86:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800ea8a:	d052      	beq.n	800eb32 <UART_SetConfig+0x34e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800ea8c:	6862      	ldr	r2, [r4, #4]
 800ea8e:	0853      	lsrs	r3, r2, #1
 800ea90:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ea94:	fbb3 f3f2 	udiv	r3, r3, r2
 800ea98:	b29b      	uxth	r3, r3
        break;
 800ea9a:	e7ae      	b.n	800e9fa <UART_SetConfig+0x216>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ea9c:	4b17      	ldr	r3, [pc, #92]	; (800eafc <UART_SetConfig+0x318>)
 800ea9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eaa2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800eaa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eaaa:	d152      	bne.n	800eb52 <UART_SetConfig+0x36e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800eaac:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800eab0:	d00b      	beq.n	800eaca <UART_SetConfig+0x2e6>
        pclk = HAL_RCC_GetSysClockFreq();
 800eab2:	f7fb fd8b 	bl	800a5cc <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800eab6:	6862      	ldr	r2, [r4, #4]
 800eab8:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800eabc:	fbb3 f3f2 	udiv	r3, r3, r2
 800eac0:	b29b      	uxth	r3, r3
        break;
 800eac2:	e79a      	b.n	800e9fa <UART_SetConfig+0x216>
        pclk = HAL_RCC_GetPCLK1Freq();
 800eac4:	f7fb fedc 	bl	800a880 <HAL_RCC_GetPCLK1Freq>
 800eac8:	e7a7      	b.n	800ea1a <UART_SetConfig+0x236>
        pclk = HAL_RCC_GetSysClockFreq();
 800eaca:	f7fb fd7f 	bl	800a5cc <HAL_RCC_GetSysClockFreq>
 800eace:	e7a4      	b.n	800ea1a <UART_SetConfig+0x236>
 800ead0:	019bfcc0 	.word	0x019bfcc0
 800ead4:	efff69f3 	.word	0xefff69f3
 800ead8:	40011000 	.word	0x40011000
 800eadc:	40004400 	.word	0x40004400
 800eae0:	40004800 	.word	0x40004800
 800eae4:	40004c00 	.word	0x40004c00
 800eae8:	40005000 	.word	0x40005000
 800eaec:	40011400 	.word	0x40011400
 800eaf0:	40007800 	.word	0x40007800
 800eaf4:	40007c00 	.word	0x40007c00
 800eaf8:	08026b0c 	.word	0x08026b0c
 800eafc:	40023800 	.word	0x40023800
 800eb00:	08026afc 	.word	0x08026afc
 800eb04:	08026af8 	.word	0x08026af8
  UART_GETCLOCKSOURCE(huart, clocksource);
 800eb08:	4b2a      	ldr	r3, [pc, #168]	; (800ebb4 <UART_SetConfig+0x3d0>)
 800eb0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eb0e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800eb12:	2b40      	cmp	r3, #64	; 0x40
 800eb14:	d0ca      	beq.n	800eaac <UART_SetConfig+0x2c8>
 800eb16:	d99a      	bls.n	800ea4e <UART_SetConfig+0x26a>
 800eb18:	2b80      	cmp	r3, #128	; 0x80
 800eb1a:	d123      	bne.n	800eb64 <UART_SetConfig+0x380>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800eb1c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800eb20:	d10f      	bne.n	800eb42 <UART_SetConfig+0x35e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800eb22:	6862      	ldr	r2, [r4, #4]
 800eb24:	4b24      	ldr	r3, [pc, #144]	; (800ebb8 <UART_SetConfig+0x3d4>)
 800eb26:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800eb2a:	fbb3 f3f2 	udiv	r3, r3, r2
 800eb2e:	b29b      	uxth	r3, r3
        break;
 800eb30:	e77a      	b.n	800ea28 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800eb32:	6862      	ldr	r2, [r4, #4]
 800eb34:	0853      	lsrs	r3, r2, #1
 800eb36:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800eb3a:	fbb3 f3f2 	udiv	r3, r3, r2
 800eb3e:	b29b      	uxth	r3, r3
        break;
 800eb40:	e772      	b.n	800ea28 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800eb42:	6862      	ldr	r2, [r4, #4]
 800eb44:	4b1d      	ldr	r3, [pc, #116]	; (800ebbc <UART_SetConfig+0x3d8>)
 800eb46:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800eb4a:	fbb3 f3f2 	udiv	r3, r3, r2
 800eb4e:	b29b      	uxth	r3, r3
        break;
 800eb50:	e753      	b.n	800e9fa <UART_SetConfig+0x216>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800eb52:	f67f af44 	bls.w	800e9de <UART_SetConfig+0x1fa>
 800eb56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eb5a:	d0df      	beq.n	800eb1c <UART_SetConfig+0x338>
 800eb5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800eb60:	d091      	beq.n	800ea86 <UART_SetConfig+0x2a2>
 800eb62:	e6a6      	b.n	800e8b2 <UART_SetConfig+0xce>
 800eb64:	2bc0      	cmp	r3, #192	; 0xc0
 800eb66:	d08e      	beq.n	800ea86 <UART_SetConfig+0x2a2>
 800eb68:	e6a3      	b.n	800e8b2 <UART_SetConfig+0xce>
 800eb6a:	4b12      	ldr	r3, [pc, #72]	; (800ebb4 <UART_SetConfig+0x3d0>)
 800eb6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eb70:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800eb74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eb78:	d098      	beq.n	800eaac <UART_SetConfig+0x2c8>
 800eb7a:	f67f af68 	bls.w	800ea4e <UART_SetConfig+0x26a>
 800eb7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eb82:	d0cb      	beq.n	800eb1c <UART_SetConfig+0x338>
 800eb84:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800eb88:	f43f af7d 	beq.w	800ea86 <UART_SetConfig+0x2a2>
 800eb8c:	e691      	b.n	800e8b2 <UART_SetConfig+0xce>
 800eb8e:	4b09      	ldr	r3, [pc, #36]	; (800ebb4 <UART_SetConfig+0x3d0>)
 800eb90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eb94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800eb98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800eb9c:	d086      	beq.n	800eaac <UART_SetConfig+0x2c8>
 800eb9e:	f67f af56 	bls.w	800ea4e <UART_SetConfig+0x26a>
 800eba2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eba6:	d0b9      	beq.n	800eb1c <UART_SetConfig+0x338>
 800eba8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ebac:	f43f af6b 	beq.w	800ea86 <UART_SetConfig+0x2a2>
 800ebb0:	e67f      	b.n	800e8b2 <UART_SetConfig+0xce>
 800ebb2:	bf00      	nop
 800ebb4:	40023800 	.word	0x40023800
 800ebb8:	01e84800 	.word	0x01e84800
 800ebbc:	00f42400 	.word	0x00f42400

0800ebc0 <UART_AdvFeatureConfig>:
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800ebc0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ebc2:	2bff      	cmp	r3, #255	; 0xff
{
 800ebc4:	b510      	push	{r4, lr}
 800ebc6:	4604      	mov	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800ebc8:	d87d      	bhi.n	800ecc6 <UART_AdvFeatureConfig+0x106>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ebca:	07da      	lsls	r2, r3, #31
 800ebcc:	d50a      	bpl.n	800ebe4 <UART_AdvFeatureConfig+0x24>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800ebce:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800ebd0:	f431 3200 	bics.w	r2, r1, #131072	; 0x20000
 800ebd4:	f040 8097 	bne.w	800ed06 <UART_AdvFeatureConfig+0x146>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ebd8:	6820      	ldr	r0, [r4, #0]
 800ebda:	6842      	ldr	r2, [r0, #4]
 800ebdc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800ebe0:	430a      	orrs	r2, r1
 800ebe2:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ebe4:	0798      	lsls	r0, r3, #30
 800ebe6:	d50a      	bpl.n	800ebfe <UART_AdvFeatureConfig+0x3e>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800ebe8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ebea:	f431 3280 	bics.w	r2, r1, #65536	; 0x10000
 800ebee:	f040 8092 	bne.w	800ed16 <UART_AdvFeatureConfig+0x156>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ebf2:	6820      	ldr	r0, [r4, #0]
 800ebf4:	6842      	ldr	r2, [r0, #4]
 800ebf6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ebfa:	430a      	orrs	r2, r1
 800ebfc:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ebfe:	0759      	lsls	r1, r3, #29
 800ec00:	d50a      	bpl.n	800ec18 <UART_AdvFeatureConfig+0x58>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800ec02:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ec04:	f431 2280 	bics.w	r2, r1, #262144	; 0x40000
 800ec08:	f040 808d 	bne.w	800ed26 <UART_AdvFeatureConfig+0x166>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ec0c:	6820      	ldr	r0, [r4, #0]
 800ec0e:	6842      	ldr	r2, [r0, #4]
 800ec10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ec14:	430a      	orrs	r2, r1
 800ec16:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ec18:	071a      	lsls	r2, r3, #28
 800ec1a:	d50a      	bpl.n	800ec32 <UART_AdvFeatureConfig+0x72>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800ec1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec1e:	f431 4200 	bics.w	r2, r1, #32768	; 0x8000
 800ec22:	f040 8088 	bne.w	800ed36 <UART_AdvFeatureConfig+0x176>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ec26:	6820      	ldr	r0, [r4, #0]
 800ec28:	6842      	ldr	r2, [r0, #4]
 800ec2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ec2e:	430a      	orrs	r2, r1
 800ec30:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ec32:	06d8      	lsls	r0, r3, #27
 800ec34:	d50a      	bpl.n	800ec4c <UART_AdvFeatureConfig+0x8c>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800ec36:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ec38:	f431 5280 	bics.w	r2, r1, #4096	; 0x1000
 800ec3c:	f040 8083 	bne.w	800ed46 <UART_AdvFeatureConfig+0x186>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ec40:	6820      	ldr	r0, [r4, #0]
 800ec42:	6882      	ldr	r2, [r0, #8]
 800ec44:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ec48:	430a      	orrs	r2, r1
 800ec4a:	6082      	str	r2, [r0, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ec4c:	0699      	lsls	r1, r3, #26
 800ec4e:	d509      	bpl.n	800ec64 <UART_AdvFeatureConfig+0xa4>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800ec50:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ec52:	f431 5200 	bics.w	r2, r1, #8192	; 0x2000
 800ec56:	d17e      	bne.n	800ed56 <UART_AdvFeatureConfig+0x196>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ec58:	6820      	ldr	r0, [r4, #0]
 800ec5a:	6882      	ldr	r2, [r0, #8]
 800ec5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ec60:	430a      	orrs	r2, r1
 800ec62:	6082      	str	r2, [r0, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ec64:	065a      	lsls	r2, r3, #25
 800ec66:	d521      	bpl.n	800ecac <UART_AdvFeatureConfig+0xec>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800ec68:	4b46      	ldr	r3, [pc, #280]	; (800ed84 <UART_AdvFeatureConfig+0x1c4>)
 800ec6a:	6822      	ldr	r2, [r4, #0]
 800ec6c:	4846      	ldr	r0, [pc, #280]	; (800ed88 <UART_AdvFeatureConfig+0x1c8>)
 800ec6e:	4947      	ldr	r1, [pc, #284]	; (800ed8c <UART_AdvFeatureConfig+0x1cc>)
 800ec70:	429a      	cmp	r2, r3
 800ec72:	bf18      	it	ne
 800ec74:	4282      	cmpne	r2, r0
 800ec76:	bf14      	ite	ne
 800ec78:	2301      	movne	r3, #1
 800ec7a:	2300      	moveq	r3, #0
 800ec7c:	428a      	cmp	r2, r1
 800ec7e:	bf0c      	ite	eq
 800ec80:	2300      	moveq	r3, #0
 800ec82:	f003 0301 	andne.w	r3, r3, #1
 800ec86:	b113      	cbz	r3, 800ec8e <UART_AdvFeatureConfig+0xce>
 800ec88:	4b41      	ldr	r3, [pc, #260]	; (800ed90 <UART_AdvFeatureConfig+0x1d0>)
 800ec8a:	429a      	cmp	r2, r3
 800ec8c:	d16b      	bne.n	800ed66 <UART_AdvFeatureConfig+0x1a6>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800ec8e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ec90:	f432 1380 	bics.w	r3, r2, #1048576	; 0x100000
 800ec94:	d130      	bne.n	800ecf8 <UART_AdvFeatureConfig+0x138>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ec96:	6821      	ldr	r1, [r4, #0]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ec98:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ec9c:	684b      	ldr	r3, [r1, #4]
 800ec9e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800eca2:	ea43 0302 	orr.w	r3, r3, r2
 800eca6:	604b      	str	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800eca8:	d01b      	beq.n	800ece2 <UART_AdvFeatureConfig+0x122>
 800ecaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ecac:	061b      	lsls	r3, r3, #24
 800ecae:	d509      	bpl.n	800ecc4 <UART_AdvFeatureConfig+0x104>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800ecb0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800ecb2:	f432 2300 	bics.w	r3, r2, #524288	; 0x80000
 800ecb6:	d10d      	bne.n	800ecd4 <UART_AdvFeatureConfig+0x114>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ecb8:	6821      	ldr	r1, [r4, #0]
 800ecba:	684b      	ldr	r3, [r1, #4]
 800ecbc:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800ecc0:	4313      	orrs	r3, r2
 800ecc2:	604b      	str	r3, [r1, #4]
}
 800ecc4:	bd10      	pop	{r4, pc}
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800ecc6:	f640 3143 	movw	r1, #2883	; 0xb43
 800ecca:	4832      	ldr	r0, [pc, #200]	; (800ed94 <UART_AdvFeatureConfig+0x1d4>)
 800eccc:	f7f4 f99c 	bl	8003008 <assert_failed>
 800ecd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ecd2:	e77a      	b.n	800ebca <UART_AdvFeatureConfig+0xa>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800ecd4:	f44f 6138 	mov.w	r1, #2944	; 0xb80
 800ecd8:	482e      	ldr	r0, [pc, #184]	; (800ed94 <UART_AdvFeatureConfig+0x1d4>)
 800ecda:	f7f4 f995 	bl	8003008 <assert_failed>
 800ecde:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800ece0:	e7ea      	b.n	800ecb8 <UART_AdvFeatureConfig+0xf8>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800ece2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800ece4:	f430 03c0 	bics.w	r3, r0, #6291456	; 0x600000
 800ece8:	d143      	bne.n	800ed72 <UART_AdvFeatureConfig+0x1b2>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ecea:	684a      	ldr	r2, [r1, #4]
 800ecec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ecee:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800ecf2:	4302      	orrs	r2, r0
 800ecf4:	604a      	str	r2, [r1, #4]
 800ecf6:	e7d9      	b.n	800ecac <UART_AdvFeatureConfig+0xec>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800ecf8:	f640 3173 	movw	r1, #2931	; 0xb73
 800ecfc:	4825      	ldr	r0, [pc, #148]	; (800ed94 <UART_AdvFeatureConfig+0x1d4>)
 800ecfe:	f7f4 f983 	bl	8003008 <assert_failed>
 800ed02:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ed04:	e7c7      	b.n	800ec96 <UART_AdvFeatureConfig+0xd6>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800ed06:	f640 3148 	movw	r1, #2888	; 0xb48
 800ed0a:	4822      	ldr	r0, [pc, #136]	; (800ed94 <UART_AdvFeatureConfig+0x1d4>)
 800ed0c:	f7f4 f97c 	bl	8003008 <assert_failed>
 800ed10:	e9d4 3109 	ldrd	r3, r1, [r4, #36]	; 0x24
 800ed14:	e760      	b.n	800ebd8 <UART_AdvFeatureConfig+0x18>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800ed16:	f640 314f 	movw	r1, #2895	; 0xb4f
 800ed1a:	481e      	ldr	r0, [pc, #120]	; (800ed94 <UART_AdvFeatureConfig+0x1d4>)
 800ed1c:	f7f4 f974 	bl	8003008 <assert_failed>
 800ed20:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ed22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed24:	e765      	b.n	800ebf2 <UART_AdvFeatureConfig+0x32>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800ed26:	f640 3156 	movw	r1, #2902	; 0xb56
 800ed2a:	481a      	ldr	r0, [pc, #104]	; (800ed94 <UART_AdvFeatureConfig+0x1d4>)
 800ed2c:	f7f4 f96c 	bl	8003008 <assert_failed>
 800ed30:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ed32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed34:	e76a      	b.n	800ec0c <UART_AdvFeatureConfig+0x4c>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800ed36:	f640 315d 	movw	r1, #2909	; 0xb5d
 800ed3a:	4816      	ldr	r0, [pc, #88]	; (800ed94 <UART_AdvFeatureConfig+0x1d4>)
 800ed3c:	f7f4 f964 	bl	8003008 <assert_failed>
 800ed40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ed42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed44:	e76f      	b.n	800ec26 <UART_AdvFeatureConfig+0x66>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800ed46:	f640 3164 	movw	r1, #2916	; 0xb64
 800ed4a:	4812      	ldr	r0, [pc, #72]	; (800ed94 <UART_AdvFeatureConfig+0x1d4>)
 800ed4c:	f7f4 f95c 	bl	8003008 <assert_failed>
 800ed50:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ed52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed54:	e774      	b.n	800ec40 <UART_AdvFeatureConfig+0x80>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800ed56:	f640 316b 	movw	r1, #2923	; 0xb6b
 800ed5a:	480e      	ldr	r0, [pc, #56]	; (800ed94 <UART_AdvFeatureConfig+0x1d4>)
 800ed5c:	f7f4 f954 	bl	8003008 <assert_failed>
 800ed60:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ed62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed64:	e778      	b.n	800ec58 <UART_AdvFeatureConfig+0x98>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800ed66:	f640 3172 	movw	r1, #2930	; 0xb72
 800ed6a:	480a      	ldr	r0, [pc, #40]	; (800ed94 <UART_AdvFeatureConfig+0x1d4>)
 800ed6c:	f7f4 f94c 	bl	8003008 <assert_failed>
 800ed70:	e78d      	b.n	800ec8e <UART_AdvFeatureConfig+0xce>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800ed72:	f640 3178 	movw	r1, #2936	; 0xb78
 800ed76:	4807      	ldr	r0, [pc, #28]	; (800ed94 <UART_AdvFeatureConfig+0x1d4>)
 800ed78:	f7f4 f946 	bl	8003008 <assert_failed>
 800ed7c:	6821      	ldr	r1, [r4, #0]
 800ed7e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800ed80:	e7b3      	b.n	800ecea <UART_AdvFeatureConfig+0x12a>
 800ed82:	bf00      	nop
 800ed84:	40011000 	.word	0x40011000
 800ed88:	40004400 	.word	0x40004400
 800ed8c:	40004800 	.word	0x40004800
 800ed90:	40011400 	.word	0x40011400
 800ed94:	08026b0c 	.word	0x08026b0c

0800ed98 <UART_WaitOnFlagUntilTimeout>:
{
 800ed98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed9c:	9d08      	ldr	r5, [sp, #32]
 800ed9e:	4680      	mov	r8, r0
 800eda0:	460f      	mov	r7, r1
 800eda2:	4616      	mov	r6, r2
 800eda4:	4699      	mov	r9, r3
 800eda6:	6804      	ldr	r4, [r0, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eda8:	e001      	b.n	800edae <UART_WaitOnFlagUntilTimeout+0x16>
    if (Timeout != HAL_MAX_DELAY)
 800edaa:	1c68      	adds	r0, r5, #1
 800edac:	d10a      	bne.n	800edc4 <UART_WaitOnFlagUntilTimeout+0x2c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800edae:	69e0      	ldr	r0, [r4, #28]
 800edb0:	ea37 0300 	bics.w	r3, r7, r0
 800edb4:	bf0c      	ite	eq
 800edb6:	2001      	moveq	r0, #1
 800edb8:	2000      	movne	r0, #0
 800edba:	42b0      	cmp	r0, r6
 800edbc:	d0f5      	beq.n	800edaa <UART_WaitOnFlagUntilTimeout+0x12>
  return HAL_OK;
 800edbe:	2000      	movs	r0, #0
}
 800edc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800edc4:	f7f6 fcca 	bl	800575c <HAL_GetTick>
 800edc8:	eba0 0009 	sub.w	r0, r0, r9
 800edcc:	fab5 f285 	clz	r2, r5
 800edd0:	42a8      	cmp	r0, r5
 800edd2:	ea4f 1252 	mov.w	r2, r2, lsr #5
 800edd6:	d81e      	bhi.n	800ee16 <UART_WaitOnFlagUntilTimeout+0x7e>
 800edd8:	b9ea      	cbnz	r2, 800ee16 <UART_WaitOnFlagUntilTimeout+0x7e>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800edda:	f8d8 4000 	ldr.w	r4, [r8]
 800edde:	6823      	ldr	r3, [r4, #0]
 800ede0:	0759      	lsls	r1, r3, #29
 800ede2:	d5e4      	bpl.n	800edae <UART_WaitOnFlagUntilTimeout+0x16>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ede4:	69e3      	ldr	r3, [r4, #28]
 800ede6:	051b      	lsls	r3, r3, #20
 800ede8:	d5e1      	bpl.n	800edae <UART_WaitOnFlagUntilTimeout+0x16>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800edea:	f44f 6100 	mov.w	r1, #2048	; 0x800
          huart->gState = HAL_UART_STATE_READY;
 800edee:	2320      	movs	r3, #32
          return HAL_TIMEOUT;
 800edf0:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800edf2:	6221      	str	r1, [r4, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800edf4:	6821      	ldr	r1, [r4, #0]
 800edf6:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 800edfa:	6021      	str	r1, [r4, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800edfc:	68a1      	ldr	r1, [r4, #8]
 800edfe:	f021 0101 	bic.w	r1, r1, #1
 800ee02:	60a1      	str	r1, [r4, #8]
          huart->gState = HAL_UART_STATE_READY;
 800ee04:	f8c8 3074 	str.w	r3, [r8, #116]	; 0x74
          __HAL_UNLOCK(huart);
 800ee08:	f888 2070 	strb.w	r2, [r8, #112]	; 0x70
          huart->RxState = HAL_UART_STATE_READY;
 800ee0c:	f8c8 3078 	str.w	r3, [r8, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ee10:	f8c8 307c 	str.w	r3, [r8, #124]	; 0x7c
          return HAL_TIMEOUT;
 800ee14:	e7d4      	b.n	800edc0 <UART_WaitOnFlagUntilTimeout+0x28>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ee16:	f8d8 3000 	ldr.w	r3, [r8]
        huart->gState = HAL_UART_STATE_READY;
 800ee1a:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 800ee1c:	2400      	movs	r4, #0
 800ee1e:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ee20:	681a      	ldr	r2, [r3, #0]
 800ee22:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ee26:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ee28:	689a      	ldr	r2, [r3, #8]
 800ee2a:	f022 0201 	bic.w	r2, r2, #1
 800ee2e:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800ee30:	f8c8 1074 	str.w	r1, [r8, #116]	; 0x74
        __HAL_UNLOCK(huart);
 800ee34:	f888 4070 	strb.w	r4, [r8, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 800ee38:	f8c8 1078 	str.w	r1, [r8, #120]	; 0x78
 800ee3c:	e7c0      	b.n	800edc0 <UART_WaitOnFlagUntilTimeout+0x28>
 800ee3e:	bf00      	nop

0800ee40 <HAL_UART_Transmit>:
{
 800ee40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee44:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800ee46:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 800ee48:	b084      	sub	sp, #16
  if (huart->gState == HAL_UART_STATE_READY)
 800ee4a:	2b20      	cmp	r3, #32
 800ee4c:	d145      	bne.n	800eeda <HAL_UART_Transmit+0x9a>
 800ee4e:	460d      	mov	r5, r1
    if ((pData == NULL) || (Size == 0U))
 800ee50:	2900      	cmp	r1, #0
 800ee52:	d046      	beq.n	800eee2 <HAL_UART_Transmit+0xa2>
 800ee54:	fab2 f682 	clz	r6, r2
 800ee58:	9203      	str	r2, [sp, #12]
 800ee5a:	0976      	lsrs	r6, r6, #5
 800ee5c:	2e00      	cmp	r6, #0
 800ee5e:	d140      	bne.n	800eee2 <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 800ee60:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800ee64:	4604      	mov	r4, r0
 800ee66:	2b01      	cmp	r3, #1
 800ee68:	d037      	beq.n	800eeda <HAL_UART_Transmit+0x9a>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ee6a:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 800ee6c:	2101      	movs	r1, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ee6e:	67c6      	str	r6, [r0, #124]	; 0x7c
    __HAL_LOCK(huart);
 800ee70:	f880 1070 	strb.w	r1, [r0, #112]	; 0x70
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ee74:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 800ee76:	f7f6 fc71 	bl	800575c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ee7a:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 800ee7c:	9a03      	ldr	r2, [sp, #12]
    tickstart = HAL_GetTick();
 800ee7e:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ee80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize  = Size;
 800ee84:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 800ee88:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ee8c:	d03d      	beq.n	800ef0a <HAL_UART_Transmit+0xca>
    while (huart->TxXferCount > 0U)
 800ee8e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    __HAL_UNLOCK(huart);
 800ee92:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 800ee94:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 800ee96:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
    while (huart->TxXferCount > 0U)
 800ee9a:	b96b      	cbnz	r3, 800eeb8 <HAL_UART_Transmit+0x78>
 800ee9c:	e029      	b.n	800eef2 <HAL_UART_Transmit+0xb2>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ee9e:	f815 2b01 	ldrb.w	r2, [r5], #1
 800eea2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 800eea4:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800eea8:	3b01      	subs	r3, #1
 800eeaa:	b29b      	uxth	r3, r3
 800eeac:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800eeb0:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800eeb4:	b29b      	uxth	r3, r3
 800eeb6:	b1e3      	cbz	r3, 800eef2 <HAL_UART_Transmit+0xb2>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800eeb8:	9700      	str	r7, [sp, #0]
 800eeba:	4643      	mov	r3, r8
 800eebc:	2200      	movs	r2, #0
 800eebe:	2180      	movs	r1, #128	; 0x80
 800eec0:	4620      	mov	r0, r4
 800eec2:	f7ff ff69 	bl	800ed98 <UART_WaitOnFlagUntilTimeout>
 800eec6:	b980      	cbnz	r0, 800eeea <HAL_UART_Transmit+0xaa>
 800eec8:	6823      	ldr	r3, [r4, #0]
      if (pdata8bits == NULL)
 800eeca:	2d00      	cmp	r5, #0
 800eecc:	d1e7      	bne.n	800ee9e <HAL_UART_Transmit+0x5e>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800eece:	f836 2b02 	ldrh.w	r2, [r6], #2
 800eed2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800eed6:	629a      	str	r2, [r3, #40]	; 0x28
 800eed8:	e7e4      	b.n	800eea4 <HAL_UART_Transmit+0x64>
    return HAL_BUSY;
 800eeda:	2002      	movs	r0, #2
}
 800eedc:	b004      	add	sp, #16
 800eede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800eee2:	2001      	movs	r0, #1
}
 800eee4:	b004      	add	sp, #16
 800eee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_TIMEOUT;
 800eeea:	2003      	movs	r0, #3
}
 800eeec:	b004      	add	sp, #16
 800eeee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800eef2:	9700      	str	r7, [sp, #0]
 800eef4:	4643      	mov	r3, r8
 800eef6:	2200      	movs	r2, #0
 800eef8:	2140      	movs	r1, #64	; 0x40
 800eefa:	4620      	mov	r0, r4
 800eefc:	f7ff ff4c 	bl	800ed98 <UART_WaitOnFlagUntilTimeout>
 800ef00:	2800      	cmp	r0, #0
 800ef02:	d1f2      	bne.n	800eeea <HAL_UART_Transmit+0xaa>
    huart->gState = HAL_UART_STATE_READY;
 800ef04:	2320      	movs	r3, #32
 800ef06:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 800ef08:	e7e8      	b.n	800eedc <HAL_UART_Transmit+0x9c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ef0a:	6923      	ldr	r3, [r4, #16]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d1be      	bne.n	800ee8e <HAL_UART_Transmit+0x4e>
 800ef10:	462e      	mov	r6, r5
      pdata8bits  = NULL;
 800ef12:	461d      	mov	r5, r3
 800ef14:	e7bb      	b.n	800ee8e <HAL_UART_Transmit+0x4e>
 800ef16:	bf00      	nop

0800ef18 <UART_CheckIdleState>:
{
 800ef18:	b570      	push	{r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef1a:	2500      	movs	r5, #0
{
 800ef1c:	4604      	mov	r4, r0
 800ef1e:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef20:	67c5      	str	r5, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 800ef22:	f7f6 fc1b 	bl	800575c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ef26:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800ef28:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ef2a:	681a      	ldr	r2, [r3, #0]
 800ef2c:	0712      	lsls	r2, r2, #28
 800ef2e:	d40b      	bmi.n	800ef48 <UART_CheckIdleState+0x30>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	075b      	lsls	r3, r3, #29
 800ef34:	d417      	bmi.n	800ef66 <UART_CheckIdleState+0x4e>
  __HAL_UNLOCK(huart);
 800ef36:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800ef38:	2220      	movs	r2, #32
  return HAL_OK;
 800ef3a:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 800ef3c:	6762      	str	r2, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 800ef3e:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 800ef42:	67a2      	str	r2, [r4, #120]	; 0x78
}
 800ef44:	b002      	add	sp, #8
 800ef46:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ef48:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
 800ef4c:	462a      	mov	r2, r5
 800ef4e:	4633      	mov	r3, r6
 800ef50:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ef54:	9000      	str	r0, [sp, #0]
 800ef56:	4620      	mov	r0, r4
 800ef58:	f7ff ff1e 	bl	800ed98 <UART_WaitOnFlagUntilTimeout>
 800ef5c:	b978      	cbnz	r0, 800ef7e <UART_CheckIdleState+0x66>
 800ef5e:	6823      	ldr	r3, [r4, #0]
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	075b      	lsls	r3, r3, #29
 800ef64:	d5e7      	bpl.n	800ef36 <UART_CheckIdleState+0x1e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ef66:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
 800ef6a:	4633      	mov	r3, r6
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ef72:	9000      	str	r0, [sp, #0]
 800ef74:	4620      	mov	r0, r4
 800ef76:	f7ff ff0f 	bl	800ed98 <UART_WaitOnFlagUntilTimeout>
 800ef7a:	2800      	cmp	r0, #0
 800ef7c:	d0db      	beq.n	800ef36 <UART_CheckIdleState+0x1e>
      return HAL_TIMEOUT;
 800ef7e:	2003      	movs	r0, #3
}
 800ef80:	b002      	add	sp, #8
 800ef82:	bd70      	pop	{r4, r5, r6, pc}

0800ef84 <HAL_UART_Init>:
  if (huart == NULL)
 800ef84:	2800      	cmp	r0, #0
 800ef86:	d06c      	beq.n	800f062 <HAL_UART_Init+0xde>
 800ef88:	6802      	ldr	r2, [r0, #0]
 800ef8a:	493a      	ldr	r1, [pc, #232]	; (800f074 <HAL_UART_Init+0xf0>)
{
 800ef8c:	b538      	push	{r3, r4, r5, lr}
 800ef8e:	4b3a      	ldr	r3, [pc, #232]	; (800f078 <HAL_UART_Init+0xf4>)
 800ef90:	4604      	mov	r4, r0
 800ef92:	483a      	ldr	r0, [pc, #232]	; (800f07c <HAL_UART_Init+0xf8>)
 800ef94:	4d3a      	ldr	r5, [pc, #232]	; (800f080 <HAL_UART_Init+0xfc>)
 800ef96:	429a      	cmp	r2, r3
 800ef98:	bf18      	it	ne
 800ef9a:	4282      	cmpne	r2, r0
 800ef9c:	f5a0 6040 	sub.w	r0, r0, #3072	; 0xc00
 800efa0:	bf14      	ite	ne
 800efa2:	2301      	movne	r3, #1
 800efa4:	2300      	moveq	r3, #0
 800efa6:	428a      	cmp	r2, r1
 800efa8:	bf0c      	ite	eq
 800efaa:	2300      	moveq	r3, #0
 800efac:	f003 0301 	andne.w	r3, r3, #1
 800efb0:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
 800efb4:	42aa      	cmp	r2, r5
 800efb6:	bf0c      	ite	eq
 800efb8:	2300      	moveq	r3, #0
 800efba:	f003 0301 	andne.w	r3, r3, #1
 800efbe:	f5a5 4518 	sub.w	r5, r5, #38912	; 0x9800
 800efc2:	4282      	cmp	r2, r0
 800efc4:	bf0c      	ite	eq
 800efc6:	2300      	moveq	r3, #0
 800efc8:	f003 0301 	andne.w	r3, r3, #1
 800efcc:	f500 5060 	add.w	r0, r0, #14336	; 0x3800
 800efd0:	428a      	cmp	r2, r1
 800efd2:	bf0c      	ite	eq
 800efd4:	2300      	moveq	r3, #0
 800efd6:	f003 0301 	andne.w	r3, r3, #1
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800efda:	69a1      	ldr	r1, [r4, #24]
 800efdc:	42aa      	cmp	r2, r5
 800efde:	bf0c      	ite	eq
 800efe0:	2300      	moveq	r3, #0
 800efe2:	f003 0301 	andne.w	r3, r3, #1
 800efe6:	4282      	cmp	r2, r0
 800efe8:	bf0c      	ite	eq
 800efea:	2300      	moveq	r3, #0
 800efec:	f003 0301 	andne.w	r3, r3, #1
 800eff0:	bb19      	cbnz	r1, 800f03a <HAL_UART_Init+0xb6>
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d137      	bne.n	800f066 <HAL_UART_Init+0xe2>
  if (huart->gState == HAL_UART_STATE_RESET)
 800eff6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800eff8:	b34b      	cbz	r3, 800f04e <HAL_UART_Init+0xca>
  __HAL_UART_DISABLE(huart);
 800effa:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800effc:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800effe:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800f000:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800f002:	6813      	ldr	r3, [r2, #0]
 800f004:	f023 0301 	bic.w	r3, r3, #1
 800f008:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f00a:	f7ff fbeb 	bl	800e7e4 <UART_SetConfig>
 800f00e:	2801      	cmp	r0, #1
 800f010:	d01b      	beq.n	800f04a <HAL_UART_Init+0xc6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f012:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f014:	bb0b      	cbnz	r3, 800f05a <HAL_UART_Init+0xd6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f016:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800f018:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f01a:	685a      	ldr	r2, [r3, #4]
 800f01c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f020:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f022:	689a      	ldr	r2, [r3, #8]
 800f024:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f028:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800f02a:	681a      	ldr	r2, [r3, #0]
 800f02c:	f042 0201 	orr.w	r2, r2, #1
 800f030:	601a      	str	r2, [r3, #0]
}
 800f032:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return (UART_CheckIdleState(huart));
 800f036:	f7ff bf6f 	b.w	800ef18 <UART_CheckIdleState>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d0db      	beq.n	800eff6 <HAL_UART_Init+0x72>
 800f03e:	f44f 7195 	mov.w	r1, #298	; 0x12a
 800f042:	4810      	ldr	r0, [pc, #64]	; (800f084 <HAL_UART_Init+0x100>)
 800f044:	f7f3 ffe0 	bl	8003008 <assert_failed>
 800f048:	e7d5      	b.n	800eff6 <HAL_UART_Init+0x72>
}
 800f04a:	2001      	movs	r0, #1
 800f04c:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 800f04e:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800f052:	4620      	mov	r0, r4
 800f054:	f7f5 fa26 	bl	80044a4 <HAL_UART_MspInit>
 800f058:	e7cf      	b.n	800effa <HAL_UART_Init+0x76>
    UART_AdvFeatureConfig(huart);
 800f05a:	4620      	mov	r0, r4
 800f05c:	f7ff fdb0 	bl	800ebc0 <UART_AdvFeatureConfig>
 800f060:	e7d9      	b.n	800f016 <HAL_UART_Init+0x92>
}
 800f062:	2001      	movs	r0, #1
 800f064:	4770      	bx	lr
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800f066:	f240 112f 	movw	r1, #303	; 0x12f
 800f06a:	4806      	ldr	r0, [pc, #24]	; (800f084 <HAL_UART_Init+0x100>)
 800f06c:	f7f3 ffcc 	bl	8003008 <assert_failed>
 800f070:	e7c1      	b.n	800eff6 <HAL_UART_Init+0x72>
 800f072:	bf00      	nop
 800f074:	40004c00 	.word	0x40004c00
 800f078:	40011400 	.word	0x40011400
 800f07c:	40005000 	.word	0x40005000
 800f080:	40011000 	.word	0x40011000
 800f084:	08026b0c 	.word	0x08026b0c

0800f088 <HAL_MultiProcessor_Init>:
  if (huart == NULL)
 800f088:	2800      	cmp	r0, #0
 800f08a:	d04d      	beq.n	800f128 <HAL_MultiProcessor_Init+0xa0>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 800f08c:	f432 6300 	bics.w	r3, r2, #2048	; 0x800
{
 800f090:	b570      	push	{r4, r5, r6, lr}
 800f092:	4604      	mov	r4, r0
 800f094:	4615      	mov	r5, r2
 800f096:	460e      	mov	r6, r1
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 800f098:	d130      	bne.n	800f0fc <HAL_MultiProcessor_Init+0x74>
  if (huart->gState == HAL_UART_STATE_RESET)
 800f09a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800f09c:	b343      	cbz	r3, 800f0f0 <HAL_MultiProcessor_Init+0x68>
  __HAL_UART_DISABLE(huart);
 800f09e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800f0a0:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f0a2:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800f0a4:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800f0a6:	6813      	ldr	r3, [r2, #0]
 800f0a8:	f023 0301 	bic.w	r3, r3, #1
 800f0ac:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f0ae:	f7ff fb99 	bl	800e7e4 <UART_SetConfig>
 800f0b2:	2801      	cmp	r0, #1
 800f0b4:	d02b      	beq.n	800f10e <HAL_MultiProcessor_Init+0x86>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f0b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d131      	bne.n	800f120 <HAL_MultiProcessor_Init+0x98>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f0bc:	6823      	ldr	r3, [r4, #0]
  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 800f0be:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f0c2:	685a      	ldr	r2, [r3, #4]
 800f0c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f0c8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f0ca:	689a      	ldr	r2, [r3, #8]
 800f0cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f0d0:	609a      	str	r2, [r3, #8]
  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 800f0d2:	d01e      	beq.n	800f112 <HAL_MultiProcessor_Init+0x8a>
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 800f0d4:	6819      	ldr	r1, [r3, #0]
  return (UART_CheckIdleState(huart));
 800f0d6:	4620      	mov	r0, r4
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 800f0d8:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800f0dc:	4329      	orrs	r1, r5
 800f0de:	6019      	str	r1, [r3, #0]
  __HAL_UART_ENABLE(huart);
 800f0e0:	681a      	ldr	r2, [r3, #0]
 800f0e2:	f042 0201 	orr.w	r2, r2, #1
}
 800f0e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  __HAL_UART_ENABLE(huart);
 800f0ea:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800f0ec:	f7ff bf14 	b.w	800ef18 <UART_CheckIdleState>
    huart->Lock = HAL_UNLOCKED;
 800f0f0:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800f0f4:	4620      	mov	r0, r4
 800f0f6:	f7f5 f9d5 	bl	80044a4 <HAL_UART_MspInit>
 800f0fa:	e7d0      	b.n	800f09e <HAL_MultiProcessor_Init+0x16>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 800f0fc:	f240 211b 	movw	r1, #539	; 0x21b
 800f100:	480a      	ldr	r0, [pc, #40]	; (800f12c <HAL_MultiProcessor_Init+0xa4>)
 800f102:	f7f3 ff81 	bl	8003008 <assert_failed>
  if (huart->gState == HAL_UART_STATE_RESET)
 800f106:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d1c8      	bne.n	800f09e <HAL_MultiProcessor_Init+0x16>
 800f10c:	e7f0      	b.n	800f0f0 <HAL_MultiProcessor_Init+0x68>
}
 800f10e:	2001      	movs	r0, #1
 800f110:	bd70      	pop	{r4, r5, r6, pc}
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 800f112:	6859      	ldr	r1, [r3, #4]
 800f114:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800f118:	ea41 6606 	orr.w	r6, r1, r6, lsl #24
 800f11c:	605e      	str	r6, [r3, #4]
 800f11e:	e7d9      	b.n	800f0d4 <HAL_MultiProcessor_Init+0x4c>
    UART_AdvFeatureConfig(huart);
 800f120:	4620      	mov	r0, r4
 800f122:	f7ff fd4d 	bl	800ebc0 <UART_AdvFeatureConfig>
 800f126:	e7c9      	b.n	800f0bc <HAL_MultiProcessor_Init+0x34>
}
 800f128:	2001      	movs	r0, #1
 800f12a:	4770      	bx	lr
 800f12c:	08026b0c 	.word	0x08026b0c

0800f130 <HAL_RS485Ex_Init>:
                                   uint32_t DeassertionTime)
{
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800f130:	2800      	cmp	r0, #0
 800f132:	f000 8092 	beq.w	800f25a <HAL_RS485Ex_Init+0x12a>
{
 800f136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    return HAL_ERROR;
  }
  /* Check the Driver Enable UART instance */
  assert_param(IS_UART_DRIVER_ENABLE_INSTANCE(huart->Instance));
 800f13a:	4c4b      	ldr	r4, [pc, #300]	; (800f268 <HAL_RS485Ex_Init+0x138>)
 800f13c:	461d      	mov	r5, r3
 800f13e:	460e      	mov	r6, r1
 800f140:	6803      	ldr	r3, [r0, #0]
 800f142:	494a      	ldr	r1, [pc, #296]	; (800f26c <HAL_RS485Ex_Init+0x13c>)
 800f144:	4617      	mov	r7, r2
 800f146:	4a4a      	ldr	r2, [pc, #296]	; (800f270 <HAL_RS485Ex_Init+0x140>)
 800f148:	4680      	mov	r8, r0
 800f14a:	42a3      	cmp	r3, r4
 800f14c:	bf18      	it	ne
 800f14e:	428b      	cmpne	r3, r1
 800f150:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f154:	bf14      	ite	ne
 800f156:	2401      	movne	r4, #1
 800f158:	2400      	moveq	r4, #0
 800f15a:	4293      	cmp	r3, r2
 800f15c:	bf0c      	ite	eq
 800f15e:	2400      	moveq	r4, #0
 800f160:	f004 0401 	andne.w	r4, r4, #1
 800f164:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f168:	428b      	cmp	r3, r1
 800f16a:	bf0c      	ite	eq
 800f16c:	2400      	moveq	r4, #0
 800f16e:	f004 0401 	andne.w	r4, r4, #1
 800f172:	f501 4148 	add.w	r1, r1, #51200	; 0xc800
 800f176:	4293      	cmp	r3, r2
 800f178:	bf0c      	ite	eq
 800f17a:	2400      	moveq	r4, #0
 800f17c:	f004 0401 	andne.w	r4, r4, #1
 800f180:	f502 5220 	add.w	r2, r2, #10240	; 0x2800
 800f184:	428b      	cmp	r3, r1
 800f186:	bf0c      	ite	eq
 800f188:	2400      	moveq	r4, #0
 800f18a:	f004 0401 	andne.w	r4, r4, #1
 800f18e:	4293      	cmp	r3, r2
 800f190:	bf0c      	ite	eq
 800f192:	2400      	moveq	r4, #0
 800f194:	f004 0401 	andne.w	r4, r4, #1
 800f198:	b11c      	cbz	r4, 800f1a2 <HAL_RS485Ex_Init+0x72>
 800f19a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f19e:	4293      	cmp	r3, r2
 800f1a0:	d15d      	bne.n	800f25e <HAL_RS485Ex_Init+0x12e>

  /* Check the Driver Enable polarity */
  assert_param(IS_UART_DE_POLARITY(Polarity));
 800f1a2:	f436 4300 	bics.w	r3, r6, #32768	; 0x8000
 800f1a6:	d14a      	bne.n	800f23e <HAL_RS485Ex_Init+0x10e>

  /* Check the Driver Enable assertion time */
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));
 800f1a8:	2f1f      	cmp	r7, #31
 800f1aa:	d841      	bhi.n	800f230 <HAL_RS485Ex_Init+0x100>

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));
 800f1ac:	2d1f      	cmp	r5, #31
 800f1ae:	d836      	bhi.n	800f21e <HAL_RS485Ex_Init+0xee>

  if (huart->gState == HAL_UART_STATE_RESET)
 800f1b0:	f8d8 3074 	ldr.w	r3, [r8, #116]	; 0x74
 800f1b4:	b36b      	cbz	r3, 800f212 <HAL_RS485Ex_Init+0xe2>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800f1b6:	f8d8 2000 	ldr.w	r2, [r8]
  huart->gState = HAL_UART_STATE_BUSY;
 800f1ba:	2324      	movs	r3, #36	; 0x24

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f1bc:	4640      	mov	r0, r8
  huart->gState = HAL_UART_STATE_BUSY;
 800f1be:	f8c8 3074 	str.w	r3, [r8, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800f1c2:	6813      	ldr	r3, [r2, #0]
 800f1c4:	f023 0301 	bic.w	r3, r3, #1
 800f1c8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f1ca:	f7ff fb0b 	bl	800e7e4 <UART_SetConfig>
 800f1ce:	2801      	cmp	r0, #1
 800f1d0:	d03c      	beq.n	800f24c <HAL_RS485Ex_Init+0x11c>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f1d2:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d13b      	bne.n	800f252 <HAL_RS485Ex_Init+0x122>
  {
    UART_AdvFeatureConfig(huart);
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800f1da:	f8d8 3000 	ldr.w	r3, [r8]
  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800f1de:	042d      	lsls	r5, r5, #16
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800f1e0:	4a24      	ldr	r2, [pc, #144]	; (800f274 <HAL_RS485Ex_Init+0x144>)

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f1e2:	4640      	mov	r0, r8
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800f1e4:	6899      	ldr	r1, [r3, #8]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800f1e6:	ea45 5747 	orr.w	r7, r5, r7, lsl #21
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800f1ea:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800f1ee:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800f1f0:	6899      	ldr	r1, [r3, #8]
 800f1f2:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800f1f6:	430e      	orrs	r6, r1
 800f1f8:	609e      	str	r6, [r3, #8]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800f1fa:	6819      	ldr	r1, [r3, #0]
 800f1fc:	400a      	ands	r2, r1
 800f1fe:	4317      	orrs	r7, r2
 800f200:	601f      	str	r7, [r3, #0]
  __HAL_UART_ENABLE(huart);
 800f202:	681a      	ldr	r2, [r3, #0]
 800f204:	f042 0201 	orr.w	r2, r2, #1
}
 800f208:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_UART_ENABLE(huart);
 800f20c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800f20e:	f7ff be83 	b.w	800ef18 <UART_CheckIdleState>
    huart->Lock = HAL_UNLOCKED;
 800f212:	f888 3070 	strb.w	r3, [r8, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800f216:	4640      	mov	r0, r8
 800f218:	f7f5 f944 	bl	80044a4 <HAL_UART_MspInit>
 800f21c:	e7cb      	b.n	800f1b6 <HAL_RS485Ex_Init+0x86>
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));
 800f21e:	21aa      	movs	r1, #170	; 0xaa
 800f220:	4815      	ldr	r0, [pc, #84]	; (800f278 <HAL_RS485Ex_Init+0x148>)
 800f222:	f7f3 fef1 	bl	8003008 <assert_failed>
  if (huart->gState == HAL_UART_STATE_RESET)
 800f226:	f8d8 3074 	ldr.w	r3, [r8, #116]	; 0x74
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d1c3      	bne.n	800f1b6 <HAL_RS485Ex_Init+0x86>
 800f22e:	e7f0      	b.n	800f212 <HAL_RS485Ex_Init+0xe2>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));
 800f230:	21a7      	movs	r1, #167	; 0xa7
 800f232:	4811      	ldr	r0, [pc, #68]	; (800f278 <HAL_RS485Ex_Init+0x148>)
 800f234:	f7f3 fee8 	bl	8003008 <assert_failed>
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));
 800f238:	2d1f      	cmp	r5, #31
 800f23a:	d9b9      	bls.n	800f1b0 <HAL_RS485Ex_Init+0x80>
 800f23c:	e7ef      	b.n	800f21e <HAL_RS485Ex_Init+0xee>
  assert_param(IS_UART_DE_POLARITY(Polarity));
 800f23e:	21a4      	movs	r1, #164	; 0xa4
 800f240:	480d      	ldr	r0, [pc, #52]	; (800f278 <HAL_RS485Ex_Init+0x148>)
 800f242:	f7f3 fee1 	bl	8003008 <assert_failed>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));
 800f246:	2f1f      	cmp	r7, #31
 800f248:	d9b0      	bls.n	800f1ac <HAL_RS485Ex_Init+0x7c>
 800f24a:	e7f1      	b.n	800f230 <HAL_RS485Ex_Init+0x100>
}
 800f24c:	2001      	movs	r0, #1
 800f24e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_AdvFeatureConfig(huart);
 800f252:	4640      	mov	r0, r8
 800f254:	f7ff fcb4 	bl	800ebc0 <UART_AdvFeatureConfig>
 800f258:	e7bf      	b.n	800f1da <HAL_RS485Ex_Init+0xaa>
}
 800f25a:	2001      	movs	r0, #1
 800f25c:	4770      	bx	lr
  assert_param(IS_UART_DRIVER_ENABLE_INSTANCE(huart->Instance));
 800f25e:	21a1      	movs	r1, #161	; 0xa1
 800f260:	4805      	ldr	r0, [pc, #20]	; (800f278 <HAL_RS485Ex_Init+0x148>)
 800f262:	f7f3 fed1 	bl	8003008 <assert_failed>
 800f266:	e79c      	b.n	800f1a2 <HAL_RS485Ex_Init+0x72>
 800f268:	40011000 	.word	0x40011000
 800f26c:	40004400 	.word	0x40004400
 800f270:	40004800 	.word	0x40004800
 800f274:	fc00ffff 	.word	0xfc00ffff
 800f278:	08026b48 	.word	0x08026b48

0800f27c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f27c:	4b0b      	ldr	r3, [pc, #44]	; (800f2ac <USB_CoreReset+0x30>)
 800f27e:	e001      	b.n	800f284 <USB_CoreReset+0x8>
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800f280:	3b01      	subs	r3, #1
 800f282:	d010      	beq.n	800f2a6 <USB_CoreReset+0x2a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f284:	6902      	ldr	r2, [r0, #16]
 800f286:	2a00      	cmp	r2, #0
 800f288:	dafa      	bge.n	800f280 <USB_CoreReset+0x4>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f28a:	6903      	ldr	r3, [r0, #16]
 800f28c:	4a07      	ldr	r2, [pc, #28]	; (800f2ac <USB_CoreReset+0x30>)
 800f28e:	f043 0301 	orr.w	r3, r3, #1
 800f292:	6103      	str	r3, [r0, #16]
 800f294:	e001      	b.n	800f29a <USB_CoreReset+0x1e>

  do
  {
    if (++count > 200000U)
 800f296:	3a01      	subs	r2, #1
 800f298:	d005      	beq.n	800f2a6 <USB_CoreReset+0x2a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f29a:	6903      	ldr	r3, [r0, #16]
 800f29c:	f013 0301 	ands.w	r3, r3, #1
 800f2a0:	d1f9      	bne.n	800f296 <USB_CoreReset+0x1a>

  return HAL_OK;
 800f2a2:	4618      	mov	r0, r3
}
 800f2a4:	4770      	bx	lr
      return HAL_TIMEOUT;
 800f2a6:	2003      	movs	r0, #3
 800f2a8:	4770      	bx	lr
 800f2aa:	bf00      	nop
 800f2ac:	00030d40 	.word	0x00030d40

0800f2b0 <USB_CoreInit>:
{
 800f2b0:	b084      	sub	sp, #16
 800f2b2:	b538      	push	{r3, r4, r5, lr}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f2b4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
{
 800f2b6:	ac05      	add	r4, sp, #20
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f2b8:	2d01      	cmp	r5, #1
{
 800f2ba:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800f2be:	4601      	mov	r1, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f2c0:	d121      	bne.n	800f306 <USB_CoreInit+0x56>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f2c2:	6b82      	ldr	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f2c4:	4b18      	ldr	r3, [pc, #96]	; (800f328 <USB_CoreInit+0x78>)
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f2c6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    if (cfg.use_external_vbus == 1U)
 800f2ca:	9811      	ldr	r0, [sp, #68]	; 0x44
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f2cc:	638a      	str	r2, [r1, #56]	; 0x38
    if (cfg.use_external_vbus == 1U)
 800f2ce:	2801      	cmp	r0, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f2d0:	68ca      	ldr	r2, [r1, #12]
 800f2d2:	ea03 0302 	and.w	r3, r3, r2
 800f2d6:	60cb      	str	r3, [r1, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f2d8:	68cb      	ldr	r3, [r1, #12]
 800f2da:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800f2de:	60cb      	str	r3, [r1, #12]
    if (cfg.use_external_vbus == 1U)
 800f2e0:	d01c      	beq.n	800f31c <USB_CoreInit+0x6c>
    ret = USB_CoreReset(USBx);
 800f2e2:	4608      	mov	r0, r1
 800f2e4:	f7ff ffca 	bl	800f27c <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 800f2e8:	9b08      	ldr	r3, [sp, #32]
 800f2ea:	2b01      	cmp	r3, #1
 800f2ec:	d107      	bne.n	800f2fe <USB_CoreInit+0x4e>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f2ee:	688b      	ldr	r3, [r1, #8]
 800f2f0:	f043 0306 	orr.w	r3, r3, #6
 800f2f4:	608b      	str	r3, [r1, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f2f6:	688b      	ldr	r3, [r1, #8]
 800f2f8:	f043 0320 	orr.w	r3, r3, #32
 800f2fc:	608b      	str	r3, [r1, #8]
}
 800f2fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f302:	b004      	add	sp, #16
 800f304:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f306:	68c3      	ldr	r3, [r0, #12]
 800f308:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f30c:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 800f30e:	f7ff ffb5 	bl	800f27c <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f312:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800f314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f318:	638b      	str	r3, [r1, #56]	; 0x38
 800f31a:	e7e5      	b.n	800f2e8 <USB_CoreInit+0x38>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f31c:	68cb      	ldr	r3, [r1, #12]
 800f31e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f322:	60cb      	str	r3, [r1, #12]
 800f324:	e7dd      	b.n	800f2e2 <USB_CoreInit+0x32>
 800f326:	bf00      	nop
 800f328:	ffbdffbf 	.word	0xffbdffbf

0800f32c <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 800f32c:	2a02      	cmp	r2, #2
{
 800f32e:	4603      	mov	r3, r0
 800f330:	b410      	push	{r4}
  if (speed == USBD_FS_SPEED)
 800f332:	d00c      	beq.n	800f34e <USB_SetTurnaroundTime+0x22>
 800f334:	f44f 5410 	mov.w	r4, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f338:	68d9      	ldr	r1, [r3, #12]
}
 800f33a:	2000      	movs	r0, #0
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f33c:	f421 5170 	bic.w	r1, r1, #15360	; 0x3c00
 800f340:	60d9      	str	r1, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f342:	68da      	ldr	r2, [r3, #12]
 800f344:	4322      	orrs	r2, r4
}
 800f346:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f34a:	60da      	str	r2, [r3, #12]
}
 800f34c:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f34e:	4a29      	ldr	r2, [pc, #164]	; (800f3f4 <USB_SetTurnaroundTime+0xc8>)
 800f350:	4829      	ldr	r0, [pc, #164]	; (800f3f8 <USB_SetTurnaroundTime+0xcc>)
 800f352:	440a      	add	r2, r1
 800f354:	4282      	cmp	r2, r0
 800f356:	d93a      	bls.n	800f3ce <USB_SetTurnaroundTime+0xa2>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f358:	4a28      	ldr	r2, [pc, #160]	; (800f3fc <USB_SetTurnaroundTime+0xd0>)
 800f35a:	4829      	ldr	r0, [pc, #164]	; (800f400 <USB_SetTurnaroundTime+0xd4>)
 800f35c:	440a      	add	r2, r1
 800f35e:	4282      	cmp	r2, r0
 800f360:	d932      	bls.n	800f3c8 <USB_SetTurnaroundTime+0x9c>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f362:	4a28      	ldr	r2, [pc, #160]	; (800f404 <USB_SetTurnaroundTime+0xd8>)
 800f364:	4828      	ldr	r0, [pc, #160]	; (800f408 <USB_SetTurnaroundTime+0xdc>)
 800f366:	440a      	add	r2, r1
 800f368:	4282      	cmp	r2, r0
 800f36a:	d933      	bls.n	800f3d4 <USB_SetTurnaroundTime+0xa8>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f36c:	4a27      	ldr	r2, [pc, #156]	; (800f40c <USB_SetTurnaroundTime+0xe0>)
 800f36e:	f500 30c3 	add.w	r0, r0, #99840	; 0x18600
 800f372:	440a      	add	r2, r1
 800f374:	30a0      	adds	r0, #160	; 0xa0
 800f376:	4282      	cmp	r2, r0
 800f378:	d92f      	bls.n	800f3da <USB_SetTurnaroundTime+0xae>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f37a:	4a25      	ldr	r2, [pc, #148]	; (800f410 <USB_SetTurnaroundTime+0xe4>)
 800f37c:	4825      	ldr	r0, [pc, #148]	; (800f414 <USB_SetTurnaroundTime+0xe8>)
 800f37e:	440a      	add	r2, r1
 800f380:	4282      	cmp	r2, r0
 800f382:	d92d      	bls.n	800f3e0 <USB_SetTurnaroundTime+0xb4>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f384:	4a24      	ldr	r2, [pc, #144]	; (800f418 <USB_SetTurnaroundTime+0xec>)
 800f386:	f500 2092 	add.w	r0, r0, #299008	; 0x49000
 800f38a:	440a      	add	r2, r1
 800f38c:	f500 7078 	add.w	r0, r0, #992	; 0x3e0
 800f390:	4282      	cmp	r2, r0
 800f392:	d928      	bls.n	800f3e6 <USB_SetTurnaroundTime+0xba>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f394:	4a21      	ldr	r2, [pc, #132]	; (800f41c <USB_SetTurnaroundTime+0xf0>)
 800f396:	f500 20c3 	add.w	r0, r0, #399360	; 0x61800
 800f39a:	440a      	add	r2, r1
 800f39c:	f500 7020 	add.w	r0, r0, #640	; 0x280
 800f3a0:	4282      	cmp	r2, r0
 800f3a2:	d9c7      	bls.n	800f334 <USB_SetTurnaroundTime+0x8>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f3a4:	4a1e      	ldr	r2, [pc, #120]	; (800f420 <USB_SetTurnaroundTime+0xf4>)
 800f3a6:	f500 10b7 	add.w	r0, r0, #1499136	; 0x16e000
 800f3aa:	440a      	add	r2, r1
 800f3ac:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800f3b0:	4282      	cmp	r2, r0
 800f3b2:	d91b      	bls.n	800f3ec <USB_SetTurnaroundTime+0xc0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f3b4:	4a1b      	ldr	r2, [pc, #108]	; (800f424 <USB_SetTurnaroundTime+0xf8>)
 800f3b6:	4c1c      	ldr	r4, [pc, #112]	; (800f428 <USB_SetTurnaroundTime+0xfc>)
 800f3b8:	440a      	add	r2, r1
 800f3ba:	42a2      	cmp	r2, r4
 800f3bc:	bf8c      	ite	hi
 800f3be:	f44f 54c0 	movhi.w	r4, #6144	; 0x1800
 800f3c2:	f44f 54e0 	movls.w	r4, #7168	; 0x1c00
 800f3c6:	e7b7      	b.n	800f338 <USB_SetTurnaroundTime+0xc>
 800f3c8:	f44f 5460 	mov.w	r4, #14336	; 0x3800
 800f3cc:	e7b4      	b.n	800f338 <USB_SetTurnaroundTime+0xc>
 800f3ce:	f44f 5470 	mov.w	r4, #15360	; 0x3c00
 800f3d2:	e7b1      	b.n	800f338 <USB_SetTurnaroundTime+0xc>
 800f3d4:	f44f 5450 	mov.w	r4, #13312	; 0x3400
 800f3d8:	e7ae      	b.n	800f338 <USB_SetTurnaroundTime+0xc>
 800f3da:	f44f 5440 	mov.w	r4, #12288	; 0x3000
 800f3de:	e7ab      	b.n	800f338 <USB_SetTurnaroundTime+0xc>
 800f3e0:	f44f 5430 	mov.w	r4, #11264	; 0x2c00
 800f3e4:	e7a8      	b.n	800f338 <USB_SetTurnaroundTime+0xc>
 800f3e6:	f44f 5420 	mov.w	r4, #10240	; 0x2800
 800f3ea:	e7a5      	b.n	800f338 <USB_SetTurnaroundTime+0xc>
 800f3ec:	f44f 5400 	mov.w	r4, #8192	; 0x2000
 800f3f0:	e7a2      	b.n	800f338 <USB_SetTurnaroundTime+0xc>
 800f3f2:	bf00      	nop
 800f3f4:	ff275340 	.word	0xff275340
 800f3f8:	000c34ff 	.word	0x000c34ff
 800f3fc:	ff1b1e40 	.word	0xff1b1e40
 800f400:	000f423f 	.word	0x000f423f
 800f404:	ff0bdc00 	.word	0xff0bdc00
 800f408:	00124f7f 	.word	0x00124f7f
 800f40c:	fef98c80 	.word	0xfef98c80
 800f410:	fee5b660 	.word	0xfee5b660
 800f414:	0016e35f 	.word	0x0016e35f
 800f418:	feced300 	.word	0xfeced300
 800f41c:	feb35bc0 	.word	0xfeb35bc0
 800f420:	fe91ca00 	.word	0xfe91ca00
 800f424:	fe5954e0 	.word	0xfe5954e0
 800f428:	00419cdf 	.word	0x00419cdf

0800f42c <USB_EnableGlobalInt>:
{
 800f42c:	4602      	mov	r2, r0
}
 800f42e:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f430:	6893      	ldr	r3, [r2, #8]
 800f432:	f043 0301 	orr.w	r3, r3, #1
 800f436:	6093      	str	r3, [r2, #8]
}
 800f438:	4770      	bx	lr
 800f43a:	bf00      	nop

0800f43c <USB_DisableGlobalInt>:
{
 800f43c:	4602      	mov	r2, r0
}
 800f43e:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f440:	6893      	ldr	r3, [r2, #8]
 800f442:	f023 0301 	bic.w	r3, r3, #1
 800f446:	6093      	str	r3, [r2, #8]
}
 800f448:	4770      	bx	lr
 800f44a:	bf00      	nop

0800f44c <USB_SetCurrentMode>:
{
 800f44c:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f44e:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800f450:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f452:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800f456:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800f458:	d00b      	beq.n	800f472 <USB_SetCurrentMode+0x26>
  else if (mode == USB_DEVICE_MODE)
 800f45a:	b941      	cbnz	r1, 800f46e <USB_SetCurrentMode+0x22>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f45c:	68c3      	ldr	r3, [r0, #12]
 800f45e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f462:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 800f464:	2032      	movs	r0, #50	; 0x32
 800f466:	f7f6 f97f 	bl	8005768 <HAL_Delay>
  return HAL_OK;
 800f46a:	2000      	movs	r0, #0
}
 800f46c:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 800f46e:	2001      	movs	r0, #1
}
 800f470:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f472:	68c3      	ldr	r3, [r0, #12]
 800f474:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f478:	60c3      	str	r3, [r0, #12]
 800f47a:	e7f3      	b.n	800f464 <USB_SetCurrentMode+0x18>

0800f47c <USB_DevInit>:
{
 800f47c:	b084      	sub	sp, #16
 800f47e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  for (i = 0U; i < 15U; i++)
 800f482:	2400      	movs	r4, #0
{
 800f484:	ae08      	add	r6, sp, #32
 800f486:	4605      	mov	r5, r0
 800f488:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
    USBx->DIEPTXF[i] = 0U;
 800f48c:	4620      	mov	r0, r4
{
 800f48e:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800f492:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f494:	9e08      	ldr	r6, [sp, #32]
 800f496:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    USBx->DIEPTXF[i] = 0U;
 800f498:	f104 0340 	add.w	r3, r4, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 800f49c:	3401      	adds	r4, #1
    USBx->DIEPTXF[i] = 0U;
 800f49e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  for (i = 0U; i < 15U; i++)
 800f4a2:	2c0f      	cmp	r4, #15
    USBx->DIEPTXF[i] = 0U;
 800f4a4:	6058      	str	r0, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f4a6:	d1f7      	bne.n	800f498 <USB_DevInit+0x1c>
 800f4a8:	f505 6700 	add.w	r7, r5, #2048	; 0x800
  if (cfg.vbus_sensing_enable == 0U)
 800f4ac:	2900      	cmp	r1, #0
 800f4ae:	f040 809e 	bne.w	800f5ee <USB_DevInit+0x172>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	f043 0302 	orr.w	r3, r3, #2
 800f4b8:	607b      	str	r3, [r7, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800f4ba:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800f4bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f4c0:	63ab      	str	r3, [r5, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800f4c2:	682b      	ldr	r3, [r5, #0]
 800f4c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4c8:	602b      	str	r3, [r5, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800f4ca:	682b      	ldr	r3, [r5, #0]
 800f4cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f4d0:	602b      	str	r3, [r5, #0]
  USBx_PCGCCTL = 0U;
 800f4d2:	2300      	movs	r3, #0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f4d4:	f1bc 0f01 	cmp.w	ip, #1
  USBx_PCGCCTL = 0U;
 800f4d8:	f8c5 3e00 	str.w	r3, [r5, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800f4dc:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 800f4e0:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
  USBx_DEVICE->DCFG |= speed;
 800f4e4:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f4e8:	d03b      	beq.n	800f562 <USB_DevInit+0xe6>
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800f4ea:	f1bc 0f03 	cmp.w	ip, #3
 800f4ee:	d038      	beq.n	800f562 <USB_DevInit+0xe6>
  USBx_DEVICE->DCFG |= speed;
 800f4f0:	f043 0303 	orr.w	r3, r3, #3
 800f4f4:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f4f8:	f44f 6284 	mov.w	r2, #1056	; 0x420
 800f4fc:	4b43      	ldr	r3, [pc, #268]	; (800f60c <USB_DevInit+0x190>)
 800f4fe:	612a      	str	r2, [r5, #16]
 800f500:	e001      	b.n	800f506 <USB_DevInit+0x8a>
    if (++count > 200000U)
 800f502:	3b01      	subs	r3, #1
 800f504:	d07a      	beq.n	800f5fc <USB_DevInit+0x180>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f506:	6928      	ldr	r0, [r5, #16]
 800f508:	f010 0020 	ands.w	r0, r0, #32
 800f50c:	d1f9      	bne.n	800f502 <USB_DevInit+0x86>
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f50e:	2210      	movs	r2, #16
 800f510:	4b3e      	ldr	r3, [pc, #248]	; (800f60c <USB_DevInit+0x190>)
 800f512:	612a      	str	r2, [r5, #16]
 800f514:	e001      	b.n	800f51a <USB_DevInit+0x9e>
    if (++count > 200000U)
 800f516:	3b01      	subs	r3, #1
 800f518:	d06e      	beq.n	800f5f8 <USB_DevInit+0x17c>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f51a:	692a      	ldr	r2, [r5, #16]
 800f51c:	06d2      	lsls	r2, r2, #27
 800f51e:	d4fa      	bmi.n	800f516 <USB_DevInit+0x9a>
  USBx_DEVICE->DIEPMSK = 0U;
 800f520:	2200      	movs	r2, #0
 800f522:	613a      	str	r2, [r7, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f524:	617a      	str	r2, [r7, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f526:	61fa      	str	r2, [r7, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f528:	b316      	cbz	r6, 800f570 <USB_DevInit+0xf4>
 800f52a:	f505 6310 	add.w	r3, r5, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f52e:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f532:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 800f536:	4694      	mov	ip, r2
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f538:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 800f53c:	e009      	b.n	800f552 <USB_DevInit+0xd6>
      USBx_INEP(i)->DIEPCTL = 0U;
 800f53e:	f8c3 c000 	str.w	ip, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f542:	3201      	adds	r2, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f544:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f548:	f8c3 e008 	str.w	lr, [r3, #8]
 800f54c:	3320      	adds	r3, #32
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f54e:	42b2      	cmp	r2, r6
 800f550:	d031      	beq.n	800f5b6 <USB_DevInit+0x13a>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f552:	681c      	ldr	r4, [r3, #0]
 800f554:	2c00      	cmp	r4, #0
 800f556:	daf2      	bge.n	800f53e <USB_DevInit+0xc2>
      if (i == 0U)
 800f558:	2a00      	cmp	r2, #0
 800f55a:	d054      	beq.n	800f606 <USB_DevInit+0x18a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f55c:	f8c3 8000 	str.w	r8, [r3]
 800f560:	e7ef      	b.n	800f542 <USB_DevInit+0xc6>
    if (cfg.speed == USBD_HS_SPEED)
 800f562:	2a00      	cmp	r2, #0
 800f564:	d0c6      	beq.n	800f4f4 <USB_DevInit+0x78>
  USBx_DEVICE->DCFG |= speed;
 800f566:	f043 0301 	orr.w	r3, r3, #1
 800f56a:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
 800f56e:	e7c3      	b.n	800f4f8 <USB_DevInit+0x7c>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f570:	693b      	ldr	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 800f572:	2600      	movs	r6, #0
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f574:	f06f 4480 	mvn.w	r4, #1073741824	; 0x40000000
  if (cfg.dma_enable == 0U)
 800f578:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f57a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f57e:	613b      	str	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 800f580:	61ae      	str	r6, [r5, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f582:	616c      	str	r4, [r5, #20]
  if (cfg.dma_enable == 0U)
 800f584:	b91a      	cbnz	r2, 800f58e <USB_DevInit+0x112>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f586:	69ab      	ldr	r3, [r5, #24]
 800f588:	f043 0310 	orr.w	r3, r3, #16
 800f58c:	61ab      	str	r3, [r5, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f58e:	69ac      	ldr	r4, [r5, #24]
 800f590:	4b1f      	ldr	r3, [pc, #124]	; (800f610 <USB_DevInit+0x194>)
  if (cfg.Sof_enable != 0U)
 800f592:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f594:	4323      	orrs	r3, r4
 800f596:	61ab      	str	r3, [r5, #24]
  if (cfg.Sof_enable != 0U)
 800f598:	b11a      	cbz	r2, 800f5a2 <USB_DevInit+0x126>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f59a:	69ab      	ldr	r3, [r5, #24]
 800f59c:	f043 0308 	orr.w	r3, r3, #8
 800f5a0:	61ab      	str	r3, [r5, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800f5a2:	2901      	cmp	r1, #1
 800f5a4:	d103      	bne.n	800f5ae <USB_DevInit+0x132>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f5a6:	69aa      	ldr	r2, [r5, #24]
 800f5a8:	4b1a      	ldr	r3, [pc, #104]	; (800f614 <USB_DevInit+0x198>)
 800f5aa:	4313      	orrs	r3, r2
 800f5ac:	61ab      	str	r3, [r5, #24]
}
 800f5ae:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f5b2:	b004      	add	sp, #16
 800f5b4:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f5b6:	2400      	movs	r4, #0
 800f5b8:	f505 6330 	add.w	r3, r5, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f5bc:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f5c0:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f5c4:	46a4      	mov	ip, r4
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f5c6:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 800f5ca:	e009      	b.n	800f5e0 <USB_DevInit+0x164>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f5cc:	f8c3 c000 	str.w	ip, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f5d0:	3401      	adds	r4, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f5d2:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f5d6:	f8c3 e008 	str.w	lr, [r3, #8]
 800f5da:	3320      	adds	r3, #32
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f5dc:	4294      	cmp	r4, r2
 800f5de:	d0c7      	beq.n	800f570 <USB_DevInit+0xf4>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f5e0:	681e      	ldr	r6, [r3, #0]
 800f5e2:	2e00      	cmp	r6, #0
 800f5e4:	daf2      	bge.n	800f5cc <USB_DevInit+0x150>
      if (i == 0U)
 800f5e6:	b15c      	cbz	r4, 800f600 <USB_DevInit+0x184>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f5e8:	f8c3 8000 	str.w	r8, [r3]
 800f5ec:	e7f0      	b.n	800f5d0 <USB_DevInit+0x154>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800f5ee:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800f5f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f5f4:	63ab      	str	r3, [r5, #56]	; 0x38
 800f5f6:	e76c      	b.n	800f4d2 <USB_DevInit+0x56>
    ret = HAL_ERROR;
 800f5f8:	2001      	movs	r0, #1
 800f5fa:	e791      	b.n	800f520 <USB_DevInit+0xa4>
    ret = HAL_ERROR;
 800f5fc:	2001      	movs	r0, #1
 800f5fe:	e786      	b.n	800f50e <USB_DevInit+0x92>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f600:	f8c3 9000 	str.w	r9, [r3]
 800f604:	e7e4      	b.n	800f5d0 <USB_DevInit+0x154>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f606:	f8c3 9000 	str.w	r9, [r3]
 800f60a:	e79a      	b.n	800f542 <USB_DevInit+0xc6>
 800f60c:	00030d40 	.word	0x00030d40
 800f610:	803c3800 	.word	0x803c3800
 800f614:	40000004 	.word	0x40000004

0800f618 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f618:	0189      	lsls	r1, r1, #6
 800f61a:	4a07      	ldr	r2, [pc, #28]	; (800f638 <USB_FlushTxFifo+0x20>)
 800f61c:	f041 0120 	orr.w	r1, r1, #32
 800f620:	6101      	str	r1, [r0, #16]
 800f622:	e001      	b.n	800f628 <USB_FlushTxFifo+0x10>
    if (++count > 200000U)
 800f624:	3a01      	subs	r2, #1
 800f626:	d005      	beq.n	800f634 <USB_FlushTxFifo+0x1c>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f628:	6903      	ldr	r3, [r0, #16]
 800f62a:	f013 0320 	ands.w	r3, r3, #32
 800f62e:	d1f9      	bne.n	800f624 <USB_FlushTxFifo+0xc>
  return HAL_OK;
 800f630:	4618      	mov	r0, r3
 800f632:	4770      	bx	lr
      return HAL_TIMEOUT;
 800f634:	2003      	movs	r0, #3
}
 800f636:	4770      	bx	lr
 800f638:	00030d40 	.word	0x00030d40

0800f63c <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800f63c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800f640:	f013 0006 	ands.w	r0, r3, #6
 800f644:	d004      	beq.n	800f650 <USB_GetDevSpeed+0x14>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800f646:	f013 0f02 	tst.w	r3, #2
    speed = 0xFU;
 800f64a:	bf14      	ite	ne
 800f64c:	2002      	movne	r0, #2
 800f64e:	200f      	moveq	r0, #15
}
 800f650:	4770      	bx	lr
 800f652:	bf00      	nop

0800f654 <USB_ActivateEndpoint>:
{
 800f654:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 800f656:	780a      	ldrb	r2, [r1, #0]
 800f658:	2301      	movs	r3, #1
  if (ep->is_in == 1U)
 800f65a:	784d      	ldrb	r5, [r1, #1]
 800f65c:	f500 6400 	add.w	r4, r0, #2048	; 0x800
 800f660:	f002 060f 	and.w	r6, r2, #15
 800f664:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 800f668:	2d01      	cmp	r5, #1
 800f66a:	fa03 f306 	lsl.w	r3, r3, r6
 800f66e:	d017      	beq.n	800f6a0 <USB_ActivateEndpoint+0x4c>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800f670:	69e2      	ldr	r2, [r4, #28]
 800f672:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800f676:	61e3      	str	r3, [r4, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800f678:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800f67c:	041b      	lsls	r3, r3, #16
 800f67e:	d40c      	bmi.n	800f69a <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f680:	688a      	ldr	r2, [r1, #8]
 800f682:	4b14      	ldr	r3, [pc, #80]	; (800f6d4 <USB_ActivateEndpoint+0x80>)
 800f684:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800f688:	78cc      	ldrb	r4, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f68a:	f8d0 1b00 	ldr.w	r1, [r0, #2816]	; 0xb00
 800f68e:	4313      	orrs	r3, r2
 800f690:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800f694:	430b      	orrs	r3, r1
 800f696:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800f69a:	2000      	movs	r0, #0
 800f69c:	bc70      	pop	{r4, r5, r6}
 800f69e:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800f6a0:	69e5      	ldr	r5, [r4, #28]
 800f6a2:	432b      	orrs	r3, r5
 800f6a4:	61e3      	str	r3, [r4, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800f6a6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800f6aa:	041c      	lsls	r4, r3, #16
 800f6ac:	d4f5      	bmi.n	800f69a <USB_ActivateEndpoint+0x46>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f6ae:	688c      	ldr	r4, [r1, #8]
 800f6b0:	4b08      	ldr	r3, [pc, #32]	; (800f6d4 <USB_ActivateEndpoint+0x80>)
 800f6b2:	f3c4 040a 	ubfx	r4, r4, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f6b6:	78cd      	ldrb	r5, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f6b8:	f8d0 1900 	ldr.w	r1, [r0, #2304]	; 0x900
 800f6bc:	4323      	orrs	r3, r4
 800f6be:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
 800f6c2:	ea43 5282 	orr.w	r2, r3, r2, lsl #22
 800f6c6:	430a      	orrs	r2, r1
}
 800f6c8:	bc70      	pop	{r4, r5, r6}
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f6ca:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
}
 800f6ce:	2000      	movs	r0, #0
 800f6d0:	4770      	bx	lr
 800f6d2:	bf00      	nop
 800f6d4:	10008000 	.word	0x10008000

0800f6d8 <USB_DeactivateEndpoint>:
{
 800f6d8:	b410      	push	{r4}
  uint32_t epnum = (uint32_t)ep->num;
 800f6da:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800f6dc:	7849      	ldrb	r1, [r1, #1]
 800f6de:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 800f6e2:	2901      	cmp	r1, #1
 800f6e4:	d02a      	beq.n	800f73c <USB_DeactivateEndpoint+0x64>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f6e6:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	; 0xb00
 800f6ea:	2900      	cmp	r1, #0
 800f6ec:	db19      	blt.n	800f722 <USB_DeactivateEndpoint+0x4a>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f6ee:	f003 010f 	and.w	r1, r3, #15
 800f6f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800f6f6:	4c26      	ldr	r4, [pc, #152]	; (800f790 <USB_DeactivateEndpoint+0xb8>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f6f8:	408b      	lsls	r3, r1
 800f6fa:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 800f6fe:	43db      	mvns	r3, r3
 800f700:	4019      	ands	r1, r3
 800f702:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f706:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 800f70a:	400b      	ands	r3, r1
 800f70c:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 800f710:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800f712:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 800f716:	401c      	ands	r4, r3
 800f718:	f8c2 4b00 	str.w	r4, [r2, #2816]	; 0xb00
}
 800f71c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f720:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800f722:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	; 0xb00
 800f726:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 800f72a:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800f72e:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	; 0xb00
 800f732:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800f736:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
 800f73a:	e7d8      	b.n	800f6ee <USB_DeactivateEndpoint+0x16>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f73c:	f8d2 1900 	ldr.w	r1, [r2, #2304]	; 0x900
 800f740:	2900      	cmp	r1, #0
 800f742:	da0b      	bge.n	800f75c <USB_DeactivateEndpoint+0x84>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800f744:	f8d2 1900 	ldr.w	r1, [r2, #2304]	; 0x900
 800f748:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 800f74c:	f8c2 1900 	str.w	r1, [r2, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800f750:	f8d2 1900 	ldr.w	r1, [r2, #2304]	; 0x900
 800f754:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800f758:	f8c2 1900 	str.w	r1, [r2, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f75c:	f003 040f 	and.w	r4, r3, #15
 800f760:	2301      	movs	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800f762:	490c      	ldr	r1, [pc, #48]	; (800f794 <USB_DeactivateEndpoint+0xbc>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f764:	40a3      	lsls	r3, r4
 800f766:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 800f76a:	43db      	mvns	r3, r3
 800f76c:	401c      	ands	r4, r3
 800f76e:	f8c0 483c 	str.w	r4, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f772:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
 800f776:	4023      	ands	r3, r4
}
 800f778:	f85d 4b04 	ldr.w	r4, [sp], #4
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f77c:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 800f780:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800f782:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 800f786:	4019      	ands	r1, r3
 800f788:	f8c2 1900 	str.w	r1, [r2, #2304]	; 0x900
}
 800f78c:	4770      	bx	lr
 800f78e:	bf00      	nop
 800f790:	eff37800 	.word	0xeff37800
 800f794:	ec337800 	.word	0xec337800

0800f798 <USB_EPStartXfer>:
{
 800f798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (ep->is_in == 1U)
 800f79c:	784f      	ldrb	r7, [r1, #1]
 800f79e:	780b      	ldrb	r3, [r1, #0]
 800f7a0:	2f01      	cmp	r7, #1
 800f7a2:	694c      	ldr	r4, [r1, #20]
 800f7a4:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800f7a8:	78ce      	ldrb	r6, [r1, #3]
 800f7aa:	d055      	beq.n	800f858 <USB_EPStartXfer+0xc0>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f7ac:	f503 6730 	add.w	r7, r3, #2816	; 0xb00
 800f7b0:	f8df e208 	ldr.w	lr, [pc, #520]	; 800f9bc <USB_EPStartXfer+0x224>
 800f7b4:	f8d7 c010 	ldr.w	ip, [r7, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f7b8:	4d7e      	ldr	r5, [pc, #504]	; (800f9b4 <USB_EPStartXfer+0x21c>)
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f7ba:	ea0c 0e0e 	and.w	lr, ip, lr
 800f7be:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800f7c2:	f8c7 e010 	str.w	lr, [r7, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f7c6:	f8d7 e010 	ldr.w	lr, [r7, #16]
 800f7ca:	ea0e 0505 	and.w	r5, lr, r5
 800f7ce:	613d      	str	r5, [r7, #16]
    if (ep->xfer_len == 0U)
 800f7d0:	b38c      	cbz	r4, 800f836 <USB_EPStartXfer+0x9e>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f7d2:	eb04 050c 	add.w	r5, r4, ip
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f7d6:	4c78      	ldr	r4, [pc, #480]	; (800f9b8 <USB_EPStartXfer+0x220>)
 800f7d8:	f8d7 8010 	ldr.w	r8, [r7, #16]
    if (dma == 1U)
 800f7dc:	2a01      	cmp	r2, #1
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f7de:	f105 35ff 	add.w	r5, r5, #4294967295
 800f7e2:	fbb5 f5fc 	udiv	r5, r5, ip
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f7e6:	ea04 4ec5 	and.w	lr, r4, r5, lsl #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800f7ea:	b2ad      	uxth	r5, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f7ec:	ea4e 0e08 	orr.w	lr, lr, r8
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800f7f0:	fb0c f405 	mul.w	r4, ip, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f7f4:	f8c7 e010 	str.w	lr, [r7, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800f7f8:	693d      	ldr	r5, [r7, #16]
 800f7fa:	f3c4 0412 	ubfx	r4, r4, #0, #19
 800f7fe:	ea44 0405 	orr.w	r4, r4, r5
 800f802:	613c      	str	r4, [r7, #16]
    if (dma == 1U)
 800f804:	d023      	beq.n	800f84e <USB_EPStartXfer+0xb6>
    if (ep->type == EP_TYPE_ISOC)
 800f806:	2e01      	cmp	r6, #1
 800f808:	d10c      	bne.n	800f824 <USB_EPStartXfer+0x8c>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f80a:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 800f80e:	f412 7f80 	tst.w	r2, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f812:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800f816:	bf0c      	ite	eq
 800f818:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f81c:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 800f820:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f824:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800f828:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800f82c:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 800f830:	2000      	movs	r0, #0
 800f832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f836:	693d      	ldr	r5, [r7, #16]
 800f838:	f3cc 0412 	ubfx	r4, ip, #0, #19
    if (dma == 1U)
 800f83c:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f83e:	ea44 0405 	orr.w	r4, r4, r5
 800f842:	613c      	str	r4, [r7, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f844:	693c      	ldr	r4, [r7, #16]
 800f846:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800f84a:	613c      	str	r4, [r7, #16]
    if (dma == 1U)
 800f84c:	d1db      	bne.n	800f806 <USB_EPStartXfer+0x6e>
      if ((uint32_t)ep->xfer_buff != 0U)
 800f84e:	68ca      	ldr	r2, [r1, #12]
 800f850:	2a00      	cmp	r2, #0
 800f852:	d0d8      	beq.n	800f806 <USB_EPStartXfer+0x6e>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f854:	617a      	str	r2, [r7, #20]
 800f856:	e7d6      	b.n	800f806 <USB_EPStartXfer+0x6e>
 800f858:	f503 6510 	add.w	r5, r3, #2304	; 0x900
    if (ep->xfer_len == 0U)
 800f85c:	b3ec      	cbz	r4, 800f8da <USB_EPStartXfer+0x142>
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f85e:	f8d1 8008 	ldr.w	r8, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f862:	f3c4 0c12 	ubfx	ip, r4, #0, #19
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f866:	f8d5 9010 	ldr.w	r9, [r5, #16]
      if (ep->type == EP_TYPE_ISOC)
 800f86a:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f86c:	eb08 0e04 	add.w	lr, r8, r4
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f870:	f8df a148 	ldr.w	sl, [pc, #328]	; 800f9bc <USB_EPStartXfer+0x224>
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f874:	f10e 3eff 	add.w	lr, lr, #4294967295
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f878:	ea09 0a0a 	and.w	sl, r9, sl
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f87c:	f8df 9134 	ldr.w	r9, [pc, #308]	; 800f9b4 <USB_EPStartXfer+0x21c>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f880:	f8c5 a010 	str.w	sl, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f884:	f8d5 a010 	ldr.w	sl, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f888:	fbbe f8f8 	udiv	r8, lr, r8
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f88c:	ea0a 0909 	and.w	r9, sl, r9
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f890:	f8df e124 	ldr.w	lr, [pc, #292]	; 800f9b8 <USB_EPStartXfer+0x220>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f894:	f8c5 9010 	str.w	r9, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f898:	ea0e 4ec8 	and.w	lr, lr, r8, lsl #19
 800f89c:	f8d5 8010 	ldr.w	r8, [r5, #16]
 800f8a0:	ea4e 0e08 	orr.w	lr, lr, r8
 800f8a4:	f8c5 e010 	str.w	lr, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f8a8:	f8d5 e010 	ldr.w	lr, [r5, #16]
 800f8ac:	ea4c 0c0e 	orr.w	ip, ip, lr
 800f8b0:	f8c5 c010 	str.w	ip, [r5, #16]
      if (ep->type == EP_TYPE_ISOC)
 800f8b4:	d052      	beq.n	800f95c <USB_EPStartXfer+0x1c4>
    if (dma == 1U)
 800f8b6:	2a01      	cmp	r2, #1
 800f8b8:	d05a      	beq.n	800f970 <USB_EPStartXfer+0x1d8>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f8ba:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800f8be:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800f8c2:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f8c6:	780b      	ldrb	r3, [r1, #0]
 800f8c8:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 800f8cc:	f003 030f 	and.w	r3, r3, #15
 800f8d0:	409f      	lsls	r7, r3
 800f8d2:	4317      	orrs	r7, r2
 800f8d4:	f8c0 7834 	str.w	r7, [r0, #2100]	; 0x834
 800f8d8:	e7aa      	b.n	800f830 <USB_EPStartXfer+0x98>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f8da:	f8d5 e010 	ldr.w	lr, [r5, #16]
    if (dma == 1U)
 800f8de:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f8e0:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 800f9b4 <USB_EPStartXfer+0x21c>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f8e4:	4f35      	ldr	r7, [pc, #212]	; (800f9bc <USB_EPStartXfer+0x224>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f8e6:	ea0e 0c0c 	and.w	ip, lr, ip
 800f8ea:	f8c5 c010 	str.w	ip, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f8ee:	f8d5 c010 	ldr.w	ip, [r5, #16]
 800f8f2:	f44c 2c00 	orr.w	ip, ip, #524288	; 0x80000
 800f8f6:	f8c5 c010 	str.w	ip, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f8fa:	f8d5 c010 	ldr.w	ip, [r5, #16]
 800f8fe:	ea0c 0707 	and.w	r7, ip, r7
 800f902:	612f      	str	r7, [r5, #16]
    if (dma == 1U)
 800f904:	d034      	beq.n	800f970 <USB_EPStartXfer+0x1d8>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f906:	f8d3 5900 	ldr.w	r5, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800f90a:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f90c:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 800f910:	f8c3 5900 	str.w	r5, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800f914:	d18c      	bne.n	800f830 <USB_EPStartXfer+0x98>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f916:	f8d0 5808 	ldr.w	r5, [r0, #2056]	; 0x808
 800f91a:	f415 7f80 	tst.w	r5, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f91e:	f8d3 5900 	ldr.w	r5, [r3, #2304]	; 0x900
 800f922:	bf0c      	ite	eq
 800f924:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f928:	f045 5580 	orrne.w	r5, r5, #268435456	; 0x10000000
 800f92c:	f8c3 5900 	str.w	r5, [r3, #2304]	; 0x900
  if (dma == 0U)
 800f930:	2a00      	cmp	r2, #0
 800f932:	f47f af7d 	bne.w	800f830 <USB_EPStartXfer+0x98>
    count32b = ((uint32_t)len + 3U) / 4U;
 800f936:	b2a2      	uxth	r2, r4
 800f938:	3203      	adds	r2, #3
    for (i = 0U; i < count32b; i++)
 800f93a:	0892      	lsrs	r2, r2, #2
 800f93c:	f43f af78 	beq.w	800f830 <USB_EPStartXfer+0x98>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f940:	780c      	ldrb	r4, [r1, #0]
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800f942:	68cb      	ldr	r3, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f944:	eb00 3004 	add.w	r0, r0, r4, lsl #12
 800f948:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800f94c:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800f950:	f853 1b04 	ldr.w	r1, [r3], #4
    for (i = 0U; i < count32b; i++)
 800f954:	4293      	cmp	r3, r2
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f956:	6001      	str	r1, [r0, #0]
    for (i = 0U; i < count32b; i++)
 800f958:	d1fa      	bne.n	800f950 <USB_EPStartXfer+0x1b8>
 800f95a:	e769      	b.n	800f830 <USB_EPStartXfer+0x98>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f95c:	692f      	ldr	r7, [r5, #16]
    if (dma == 1U)
 800f95e:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f960:	f027 47c0 	bic.w	r7, r7, #1610612736	; 0x60000000
 800f964:	612f      	str	r7, [r5, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800f966:	692f      	ldr	r7, [r5, #16]
 800f968:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 800f96c:	612f      	str	r7, [r5, #16]
    if (dma == 1U)
 800f96e:	d11a      	bne.n	800f9a6 <USB_EPStartXfer+0x20e>
      if ((uint32_t)ep->dma_addr != 0U)
 800f970:	690a      	ldr	r2, [r1, #16]
 800f972:	b102      	cbz	r2, 800f976 <USB_EPStartXfer+0x1de>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f974:	616a      	str	r2, [r5, #20]
      if (ep->type == EP_TYPE_ISOC)
 800f976:	2e01      	cmp	r6, #1
 800f978:	d10c      	bne.n	800f994 <USB_EPStartXfer+0x1fc>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f97a:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 800f97e:	f412 7f80 	tst.w	r2, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f982:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800f986:	bf0c      	ite	eq
 800f988:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f98c:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 800f990:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f994:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
}
 800f998:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f99a:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800f99e:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
}
 800f9a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f9a6:	f8d3 5900 	ldr.w	r5, [r3, #2304]	; 0x900
 800f9aa:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 800f9ae:	f8c3 5900 	str.w	r5, [r3, #2304]	; 0x900
 800f9b2:	e7b0      	b.n	800f916 <USB_EPStartXfer+0x17e>
 800f9b4:	e007ffff 	.word	0xe007ffff
 800f9b8:	1ff80000 	.word	0x1ff80000
 800f9bc:	fff80000 	.word	0xfff80000

0800f9c0 <USB_EP0StartXfer>:
{
 800f9c0:	b4f0      	push	{r4, r5, r6, r7}
  if (ep->is_in == 1U)
 800f9c2:	784b      	ldrb	r3, [r1, #1]
 800f9c4:	780c      	ldrb	r4, [r1, #0]
 800f9c6:	2b01      	cmp	r3, #1
 800f9c8:	694d      	ldr	r5, [r1, #20]
 800f9ca:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 800f9ce:	d026      	beq.n	800fa1e <USB_EP0StartXfer+0x5e>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f9d0:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 800f9d4:	4f3c      	ldr	r7, [pc, #240]	; (800fac8 <USB_EP0StartXfer+0x108>)
 800f9d6:	6918      	ldr	r0, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f9d8:	4e3c      	ldr	r6, [pc, #240]	; (800facc <USB_EP0StartXfer+0x10c>)
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f9da:	4007      	ands	r7, r0
 800f9dc:	6888      	ldr	r0, [r1, #8]
 800f9de:	611f      	str	r7, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f9e0:	691f      	ldr	r7, [r3, #16]
 800f9e2:	403e      	ands	r6, r7
 800f9e4:	611e      	str	r6, [r3, #16]
    if (ep->xfer_len > 0U)
 800f9e6:	b105      	cbz	r5, 800f9ea <USB_EP0StartXfer+0x2a>
      ep->xfer_len = ep->maxpacket;
 800f9e8:	6148      	str	r0, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f9ea:	691d      	ldr	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800f9ec:	f3c0 0012 	ubfx	r0, r0, #0, #19
    if (dma == 1U)
 800f9f0:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f9f2:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800f9f6:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800f9f8:	691d      	ldr	r5, [r3, #16]
 800f9fa:	ea40 0005 	orr.w	r0, r0, r5
 800f9fe:	6118      	str	r0, [r3, #16]
    if (dma == 1U)
 800fa00:	d008      	beq.n	800fa14 <USB_EP0StartXfer+0x54>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800fa02:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 800fa06:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fa0a:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
}
 800fa0e:	2000      	movs	r0, #0
 800fa10:	bcf0      	pop	{r4, r5, r6, r7}
 800fa12:	4770      	bx	lr
      if ((uint32_t)ep->xfer_buff != 0U)
 800fa14:	68ca      	ldr	r2, [r1, #12]
 800fa16:	2a00      	cmp	r2, #0
 800fa18:	d0f3      	beq.n	800fa02 <USB_EP0StartXfer+0x42>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800fa1a:	615a      	str	r2, [r3, #20]
 800fa1c:	e7f1      	b.n	800fa02 <USB_EP0StartXfer+0x42>
 800fa1e:	f504 6310 	add.w	r3, r4, #2304	; 0x900
    if (ep->xfer_len == 0U)
 800fa22:	2d00      	cmp	r5, #0
 800fa24:	d033      	beq.n	800fa8e <USB_EP0StartXfer+0xce>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fa26:	f8d3 c010 	ldr.w	ip, [r3, #16]
 800fa2a:	4f27      	ldr	r7, [pc, #156]	; (800fac8 <USB_EP0StartXfer+0x108>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fa2c:	4e27      	ldr	r6, [pc, #156]	; (800facc <USB_EP0StartXfer+0x10c>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fa2e:	ea0c 0707 	and.w	r7, ip, r7
      if (ep->xfer_len > ep->maxpacket)
 800fa32:	f8d1 c008 	ldr.w	ip, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fa36:	611f      	str	r7, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 800fa38:	45ac      	cmp	ip, r5
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fa3a:	691f      	ldr	r7, [r3, #16]
 800fa3c:	ea06 0607 	and.w	r6, r6, r7
 800fa40:	611e      	str	r6, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 800fa42:	d202      	bcs.n	800fa4a <USB_EP0StartXfer+0x8a>
        ep->xfer_len = ep->maxpacket;
 800fa44:	4665      	mov	r5, ip
 800fa46:	f8c1 c014 	str.w	ip, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fa4a:	691e      	ldr	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800fa4c:	f3c5 0512 	ubfx	r5, r5, #0, #19
    if (dma == 1U)
 800fa50:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fa52:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 800fa56:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800fa58:	691e      	ldr	r6, [r3, #16]
 800fa5a:	ea45 0506 	orr.w	r5, r5, r6
 800fa5e:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 800fa60:	d026      	beq.n	800fab0 <USB_EP0StartXfer+0xf0>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fa62:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 800fa66:	694a      	ldr	r2, [r1, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fa68:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fa6c:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 800fa70:	2a00      	cmp	r2, #0
 800fa72:	d0cc      	beq.n	800fa0e <USB_EP0StartXfer+0x4e>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800fa74:	780a      	ldrb	r2, [r1, #0]
 800fa76:	2301      	movs	r3, #1
 800fa78:	f8d0 1834 	ldr.w	r1, [r0, #2100]	; 0x834
 800fa7c:	f002 020f 	and.w	r2, r2, #15
 800fa80:	4093      	lsls	r3, r2
 800fa82:	430b      	orrs	r3, r1
}
 800fa84:	bcf0      	pop	{r4, r5, r6, r7}
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800fa86:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
}
 800fa8a:	2000      	movs	r0, #0
 800fa8c:	4770      	bx	lr
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fa8e:	691f      	ldr	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fa90:	f5a5 2500 	sub.w	r5, r5, #524288	; 0x80000
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fa94:	4e0d      	ldr	r6, [pc, #52]	; (800facc <USB_EP0StartXfer+0x10c>)
    if (dma == 1U)
 800fa96:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fa98:	ea06 0607 	and.w	r6, r6, r7
 800fa9c:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fa9e:	691e      	ldr	r6, [r3, #16]
 800faa0:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 800faa4:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800faa6:	691e      	ldr	r6, [r3, #16]
 800faa8:	ea05 0506 	and.w	r5, r5, r6
 800faac:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 800faae:	d1d8      	bne.n	800fa62 <USB_EP0StartXfer+0xa2>
      if ((uint32_t)ep->dma_addr != 0U)
 800fab0:	690a      	ldr	r2, [r1, #16]
 800fab2:	b102      	cbz	r2, 800fab6 <USB_EP0StartXfer+0xf6>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800fab4:	615a      	str	r2, [r3, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fab6:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
}
 800faba:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fabc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fac0:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
}
 800fac4:	bcf0      	pop	{r4, r5, r6, r7}
 800fac6:	4770      	bx	lr
 800fac8:	fff80000 	.word	0xfff80000
 800facc:	e007ffff 	.word	0xe007ffff

0800fad0 <USB_WritePacket>:
{
 800fad0:	b410      	push	{r4}
 800fad2:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 800fad6:	b96c      	cbnz	r4, 800faf4 <USB_WritePacket+0x24>
    count32b = ((uint32_t)len + 3U) / 4U;
 800fad8:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 800fada:	089b      	lsrs	r3, r3, #2
 800fadc:	d00a      	beq.n	800faf4 <USB_WritePacket+0x24>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800fade:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 800fae2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800fae6:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800faea:	f851 2b04 	ldr.w	r2, [r1], #4
    for (i = 0U; i < count32b; i++)
 800faee:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800faf0:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 800faf2:	d1fa      	bne.n	800faea <USB_WritePacket+0x1a>
}
 800faf4:	2000      	movs	r0, #0
 800faf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fafa:	4770      	bx	lr

0800fafc <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800fafc:	3203      	adds	r2, #3
  for (i = 0U; i < count32b; i++)
 800fafe:	0892      	lsrs	r2, r2, #2
 800fb00:	d00c      	beq.n	800fb1c <USB_ReadPacket+0x20>
{
 800fb02:	b410      	push	{r4}
 800fb04:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
 800fb08:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800fb0c:	6823      	ldr	r3, [r4, #0]
 800fb0e:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0U; i < count32b; i++)
 800fb12:	4281      	cmp	r1, r0
 800fb14:	d1fa      	bne.n	800fb0c <USB_ReadPacket+0x10>
}
 800fb16:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb1a:	4770      	bx	lr
  uint32_t *pDest = (uint32_t *)dest;
 800fb1c:	4608      	mov	r0, r1
}
 800fb1e:	4770      	bx	lr

0800fb20 <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 800fb20:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800fb22:	784a      	ldrb	r2, [r1, #1]
 800fb24:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800fb28:	3300      	adds	r3, #0
 800fb2a:	bf18      	it	ne
 800fb2c:	2301      	movne	r3, #1
 800fb2e:	2a01      	cmp	r2, #1
 800fb30:	d012      	beq.n	800fb58 <USB_EPSetStall+0x38>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800fb32:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800fb36:	2a00      	cmp	r2, #0
 800fb38:	db06      	blt.n	800fb48 <USB_EPSetStall+0x28>
 800fb3a:	b12b      	cbz	r3, 800fb48 <USB_EPSetStall+0x28>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800fb3c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800fb40:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800fb44:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800fb48:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800fb4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fb50:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800fb54:	2000      	movs	r0, #0
 800fb56:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800fb58:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800fb5c:	2a00      	cmp	r2, #0
 800fb5e:	db06      	blt.n	800fb6e <USB_EPSetStall+0x4e>
 800fb60:	b12b      	cbz	r3, 800fb6e <USB_EPSetStall+0x4e>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800fb62:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800fb66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800fb6a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800fb6e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800fb72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fb76:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800fb7a:	2000      	movs	r0, #0
 800fb7c:	4770      	bx	lr
 800fb7e:	bf00      	nop

0800fb80 <USB_EPClearStall>:
{
 800fb80:	78cb      	ldrb	r3, [r1, #3]
 800fb82:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 800fb84:	7849      	ldrb	r1, [r1, #1]
 800fb86:	3b02      	subs	r3, #2
 800fb88:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 800fb8c:	2901      	cmp	r1, #1
 800fb8e:	b2db      	uxtb	r3, r3
 800fb90:	d011      	beq.n	800fbb6 <USB_EPClearStall+0x36>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800fb92:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800fb96:	2b01      	cmp	r3, #1
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800fb98:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800fb9c:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800fba0:	d901      	bls.n	800fba6 <USB_EPClearStall+0x26>
}
 800fba2:	2000      	movs	r0, #0
 800fba4:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800fba6:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800fbaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fbae:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800fbb2:	2000      	movs	r0, #0
 800fbb4:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800fbb6:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800fbba:	2b01      	cmp	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800fbbc:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800fbc0:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800fbc4:	d8ed      	bhi.n	800fba2 <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800fbc6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800fbca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fbce:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800fbd2:	2000      	movs	r0, #0
 800fbd4:	4770      	bx	lr
 800fbd6:	bf00      	nop

0800fbd8 <USB_SetDevAddress>:
{
 800fbd8:	4603      	mov	r3, r0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800fbda:	0109      	lsls	r1, r1, #4
}
 800fbdc:	2000      	movs	r0, #0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800fbde:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800fbe2:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800fbe6:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
 800fbea:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800fbee:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 800fbf2:	4311      	orrs	r1, r2
 800fbf4:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
}
 800fbf8:	4770      	bx	lr
 800fbfa:	bf00      	nop

0800fbfc <USB_DevConnect>:
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800fbfc:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  HAL_Delay(3U);
 800fc00:	2003      	movs	r0, #3
{
 800fc02:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800fc04:	6853      	ldr	r3, [r2, #4]
 800fc06:	f023 0302 	bic.w	r3, r3, #2
 800fc0a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800fc0c:	f7f5 fdac 	bl	8005768 <HAL_Delay>
}
 800fc10:	2000      	movs	r0, #0
 800fc12:	bd08      	pop	{r3, pc}

0800fc14 <USB_DevDisconnect>:
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fc14:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  HAL_Delay(3U);
 800fc18:	2003      	movs	r0, #3
{
 800fc1a:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fc1c:	6853      	ldr	r3, [r2, #4]
 800fc1e:	f043 0302 	orr.w	r3, r3, #2
 800fc22:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800fc24:	f7f5 fda0 	bl	8005768 <HAL_Delay>
}
 800fc28:	2000      	movs	r0, #0
 800fc2a:	bd08      	pop	{r3, pc}

0800fc2c <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800fc2c:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800fc2e:	6980      	ldr	r0, [r0, #24]
}
 800fc30:	4010      	ands	r0, r2
 800fc32:	4770      	bx	lr

0800fc34 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800fc34:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800fc38:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800fc3c:	69c0      	ldr	r0, [r0, #28]
 800fc3e:	4018      	ands	r0, r3
}
 800fc40:	0c00      	lsrs	r0, r0, #16
 800fc42:	4770      	bx	lr

0800fc44 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800fc44:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800fc48:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800fc4c:	69c0      	ldr	r0, [r0, #28]
 800fc4e:	4018      	ands	r0, r3
}
 800fc50:	b280      	uxth	r0, r0
 800fc52:	4770      	bx	lr

0800fc54 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800fc54:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800fc58:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800fc5c:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800fc60:	6940      	ldr	r0, [r0, #20]
}
 800fc62:	4010      	ands	r0, r2
 800fc64:	4770      	bx	lr
 800fc66:	bf00      	nop

0800fc68 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 800fc68:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800fc6c:	eb00 1041 	add.w	r0, r0, r1, lsl #5
{
 800fc70:	b410      	push	{r4}
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800fc72:	f001 040f 	and.w	r4, r1, #15
  msk = USBx_DEVICE->DIEPMSK;
 800fc76:	6911      	ldr	r1, [r2, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800fc78:	6b53      	ldr	r3, [r2, #52]	; 0x34
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800fc7a:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800fc7e:	40e3      	lsrs	r3, r4
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800fc80:	6880      	ldr	r0, [r0, #8]
}
 800fc82:	f85d 4b04 	ldr.w	r4, [sp], #4
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800fc86:	01db      	lsls	r3, r3, #7
 800fc88:	b2db      	uxtb	r3, r3
 800fc8a:	430b      	orrs	r3, r1
}
 800fc8c:	4018      	ands	r0, r3
 800fc8e:	4770      	bx	lr

0800fc90 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800fc90:	6940      	ldr	r0, [r0, #20]
}
 800fc92:	f000 0001 	and.w	r0, r0, #1
 800fc96:	4770      	bx	lr

0800fc98 <USB_ActivateSetup>:
{
 800fc98:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800fc9a:	4a09      	ldr	r2, [pc, #36]	; (800fcc0 <USB_ActivateSetup+0x28>)
}
 800fc9c:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800fc9e:	f503 6100 	add.w	r1, r3, #2048	; 0x800
{
 800fca2:	b410      	push	{r4}
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800fca4:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 800fca8:	4022      	ands	r2, r4
}
 800fcaa:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800fcae:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800fcb2:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800fcb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fcba:	604b      	str	r3, [r1, #4]
}
 800fcbc:	4770      	bx	lr
 800fcbe:	bf00      	nop
 800fcc0:	fffff800 	.word	0xfffff800

0800fcc4 <USB_EP0_OutStart>:
{
 800fcc4:	b430      	push	{r4, r5}
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800fcc6:	4c12      	ldr	r4, [pc, #72]	; (800fd10 <USB_EP0_OutStart+0x4c>)
 800fcc8:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800fccc:	6c05      	ldr	r5, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800fcce:	42a5      	cmp	r5, r4
 800fcd0:	d903      	bls.n	800fcda <USB_EP0_OutStart+0x16>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fcd2:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	; 0xb00
 800fcd6:	2c00      	cmp	r4, #0
 800fcd8:	db16      	blt.n	800fd08 <USB_EP0_OutStart+0x44>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800fcda:	2400      	movs	r4, #0
  if (dma == 1U)
 800fcdc:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800fcde:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fce0:	691c      	ldr	r4, [r3, #16]
 800fce2:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800fce6:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800fce8:	691c      	ldr	r4, [r3, #16]
 800fcea:	f044 0418 	orr.w	r4, r4, #24
 800fcee:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800fcf0:	691c      	ldr	r4, [r3, #16]
 800fcf2:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 800fcf6:	611c      	str	r4, [r3, #16]
  if (dma == 1U)
 800fcf8:	d106      	bne.n	800fd08 <USB_EP0_OutStart+0x44>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800fcfa:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800fcfc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800fd00:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800fd04:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800fd08:	2000      	movs	r0, #0
 800fd0a:	bc30      	pop	{r4, r5}
 800fd0c:	4770      	bx	lr
 800fd0e:	bf00      	nop
 800fd10:	4f54300a 	.word	0x4f54300a

0800fd14 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800fd14:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800fd16:	4903      	ldr	r1, [pc, #12]	; (800fd24 <MX_FATFS_Init+0x10>)
 800fd18:	4803      	ldr	r0, [pc, #12]	; (800fd28 <MX_FATFS_Init+0x14>)
 800fd1a:	f001 f97f 	bl	801101c <FATFS_LinkDriver>
 800fd1e:	4b03      	ldr	r3, [pc, #12]	; (800fd2c <MX_FATFS_Init+0x18>)
 800fd20:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800fd22:	bd08      	pop	{r3, pc}
 800fd24:	2002b4ec 	.word	0x2002b4ec
 800fd28:	200002ac 	.word	0x200002ac
 800fd2c:	2002b4f0 	.word	0x2002b4f0

0800fd30 <USER_initialize>:
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800fd30:	4b02      	ldr	r3, [pc, #8]	; (800fd3c <USER_initialize+0xc>)
 800fd32:	2201      	movs	r2, #1
 800fd34:	701a      	strb	r2, [r3, #0]
    return Stat;
 800fd36:	7818      	ldrb	r0, [r3, #0]
  /* USER CODE END INIT */
}
 800fd38:	4770      	bx	lr
 800fd3a:	bf00      	nop
 800fd3c:	200002a8 	.word	0x200002a8

0800fd40 <USER_read>:
)
{
  /* USER CODE BEGIN READ */
    return RES_OK;
  /* USER CODE END READ */
}
 800fd40:	2000      	movs	r0, #0
 800fd42:	4770      	bx	lr

0800fd44 <USER_ioctl>:
{
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
    return res;
  /* USER CODE END IOCTL */
}
 800fd44:	2001      	movs	r0, #1
 800fd46:	4770      	bx	lr

0800fd48 <USER_write>:
 800fd48:	2000      	movs	r0, #0
 800fd4a:	4770      	bx	lr

0800fd4c <USER_status>:
 800fd4c:	4b02      	ldr	r3, [pc, #8]	; (800fd58 <USER_status+0xc>)
 800fd4e:	2201      	movs	r2, #1
 800fd50:	701a      	strb	r2, [r3, #0]
 800fd52:	7818      	ldrb	r0, [r3, #0]
 800fd54:	4770      	bx	lr
 800fd56:	bf00      	nop
 800fd58:	200002a8 	.word	0x200002a8

0800fd5c <MX_LWIP_Init>:
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800fd5c:	2100      	movs	r1, #0
{
 800fd5e:	b5f0      	push	{r4, r5, r6, r7, lr}
  tcpip_init( NULL, NULL );
 800fd60:	4608      	mov	r0, r1
{
 800fd62:	b08f      	sub	sp, #60	; 0x3c
  tcpip_init( NULL, NULL );
 800fd64:	f003 fdae 	bl	80138c4 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800fd68:	2400      	movs	r4, #0
  netmask.addr = 0;
 800fd6a:	4f20      	ldr	r7, [pc, #128]	; (800fdec <MX_LWIP_Init+0x90>)
  gw.addr = 0;

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800fd6c:	4b20      	ldr	r3, [pc, #128]	; (800fdf0 <MX_LWIP_Init+0x94>)
 800fd6e:	4e21      	ldr	r6, [pc, #132]	; (800fdf4 <MX_LWIP_Init+0x98>)
 800fd70:	463a      	mov	r2, r7
 800fd72:	9302      	str	r3, [sp, #8]
 800fd74:	9400      	str	r4, [sp, #0]
  ipaddr.addr = 0;
 800fd76:	4820      	ldr	r0, [pc, #128]	; (800fdf8 <MX_LWIP_Init+0x9c>)
  netmask.addr = 0;
 800fd78:	603c      	str	r4, [r7, #0]
  gw.addr = 0;
 800fd7a:	4d20      	ldr	r5, [pc, #128]	; (800fdfc <MX_LWIP_Init+0xa0>)
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800fd7c:	4601      	mov	r1, r0
 800fd7e:	4f20      	ldr	r7, [pc, #128]	; (800fe00 <MX_LWIP_Init+0xa4>)
 800fd80:	462b      	mov	r3, r5
  ipaddr.addr = 0;
 800fd82:	6004      	str	r4, [r0, #0]
  gw.addr = 0;
 800fd84:	602c      	str	r4, [r5, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800fd86:	4630      	mov	r0, r6
 800fd88:	9701      	str	r7, [sp, #4]
 800fd8a:	f006 fb97 	bl	80164bc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800fd8e:	4630      	mov	r0, r6
 800fd90:	f006 fc40 	bl	8016614 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800fd94:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800fd98:	4630      	mov	r0, r6
  if (netif_is_link_up(&gnetif))
 800fd9a:	075b      	lsls	r3, r3, #29
 800fd9c:	d422      	bmi.n	800fde4 <MX_LWIP_Init+0x88>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800fd9e:	f006 fc61 	bl	8016664 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800fda2:	4918      	ldr	r1, [pc, #96]	; (800fe04 <MX_LWIP_Init+0xa8>)

  link_arg.netif = &gnetif;
  link_arg.semaphore = Netif_LinkSemaphore;
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 800fda4:	ac07      	add	r4, sp, #28
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800fda6:	4813      	ldr	r0, [pc, #76]	; (800fdf4 <MX_LWIP_Init+0x98>)
 800fda8:	f006 fcc4 	bl	8016734 <netif_set_link_callback>
  osSemaphoreDef(Netif_SEM);
 800fdac:	2300      	movs	r3, #0
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 800fdae:	2101      	movs	r1, #1
 800fdb0:	a805      	add	r0, sp, #20
  link_arg.netif = &gnetif;
 800fdb2:	4f15      	ldr	r7, [pc, #84]	; (800fe08 <MX_LWIP_Init+0xac>)
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 800fdb4:	4d15      	ldr	r5, [pc, #84]	; (800fe0c <MX_LWIP_Init+0xb0>)
  osSemaphoreDef(Netif_SEM);
 800fdb6:	e9cd 3305 	strd	r3, r3, [sp, #20]
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 800fdba:	f001 fa0f 	bl	80111dc <osSemaphoreCreate>
 800fdbe:	4b14      	ldr	r3, [pc, #80]	; (800fe10 <MX_LWIP_Init+0xb4>)
  link_arg.semaphore = Netif_LinkSemaphore;
 800fdc0:	6078      	str	r0, [r7, #4]
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 800fdc2:	6018      	str	r0, [r3, #0]
  link_arg.netif = &gnetif;
 800fdc4:	603e      	str	r6, [r7, #0]
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 800fdc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fdc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fdca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fdce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 800fdd2:	4639      	mov	r1, r7
 800fdd4:	a807      	add	r0, sp, #28
 800fdd6:	f001 f955 	bl	8011084 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800fdda:	4806      	ldr	r0, [pc, #24]	; (800fdf4 <MX_LWIP_Init+0x98>)
 800fddc:	f00d fa9c 	bl	801d318 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800fde0:	b00f      	add	sp, #60	; 0x3c
 800fde2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    netif_set_up(&gnetif);
 800fde4:	f006 fc1c 	bl	8016620 <netif_set_up>
 800fde8:	e7db      	b.n	800fda2 <MX_LWIP_Init+0x46>
 800fdea:	bf00      	nop
 800fdec:	2002b9a0 	.word	0x2002b9a0
 800fdf0:	0801383d 	.word	0x0801383d
 800fdf4:	2002b960 	.word	0x2002b960
 800fdf8:	2002b99c 	.word	0x2002b99c
 800fdfc:	2002b9a4 	.word	0x2002b9a4
 800fe00:	08010111 	.word	0x08010111
 800fe04:	08010301 	.word	0x08010301
 800fe08:	2002b958 	.word	0x2002b958
 800fe0c:	08024aa4 	.word	0x08024aa4
 800fe10:	200016ec 	.word	0x200016ec

0800fe14 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800fe14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800fe18:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 800fecc <low_level_output+0xb8>
{
 800fe1c:	b083      	sub	sp, #12
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800fe1e:	468b      	mov	fp, r1
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800fe20:	f8da 402c 	ldr.w	r4, [sl, #44]	; 0x2c
 800fe24:	68a3      	ldr	r3, [r4, #8]
  for(q = p; q != NULL; q = q->next)
 800fe26:	2900      	cmp	r1, #0
 800fe28:	d048      	beq.n	800febc <low_level_output+0xa8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800fe2a:	6822      	ldr	r2, [r4, #0]
 800fe2c:	2a00      	cmp	r2, #0
 800fe2e:	db1f      	blt.n	800fe70 <low_level_output+0x5c>
  bufferoffset = 0;
 800fe30:	2000      	movs	r0, #0
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800fe32:	f240 59f4 	movw	r9, #1524	; 0x5f4
  uint32_t framelength = 0;
 800fe36:	4680      	mov	r8, r0
      byteslefttocopy = q->len;
 800fe38:	f8bb 200a 	ldrh.w	r2, [fp, #10]
      payloadoffset = 0;
 800fe3c:	2700      	movs	r7, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800fe3e:	1816      	adds	r6, r2, r0
 800fe40:	454e      	cmp	r6, r9
 800fe42:	d803      	bhi.n	800fe4c <low_level_output+0x38>
 800fe44:	e027      	b.n	800fe96 <low_level_output+0x82>
 800fe46:	454e      	cmp	r6, r9
        {
          errval = ERR_USE;
          goto error;
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800fe48:	68a3      	ldr	r3, [r4, #8]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800fe4a:	d923      	bls.n	800fe94 <low_level_output+0x80>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800fe4c:	eba9 0500 	sub.w	r5, r9, r0
 800fe50:	f8db 1004 	ldr.w	r1, [fp, #4]
 800fe54:	4418      	add	r0, r3

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800fe56:	f2a6 56f4 	subw	r6, r6, #1524	; 0x5f4
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800fe5a:	4439      	add	r1, r7
 800fe5c:	462a      	mov	r2, r5
 800fe5e:	f00f ff06 	bl	801fc6e <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800fe62:	68e4      	ldr	r4, [r4, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
        bufferoffset = 0;
 800fe64:	2000      	movs	r0, #0
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800fe66:	442f      	add	r7, r5
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800fe68:	6823      	ldr	r3, [r4, #0]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800fe6a:	44a8      	add	r8, r5
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800fe6c:	4283      	cmp	r3, r0
 800fe6e:	daea      	bge.n	800fe46 <low_level_output+0x32>
        errval = ERR_USE;
 800fe70:	f06f 0007 	mvn.w	r0, #7
  errval = ERR_OK;

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800fe74:	f8da 3000 	ldr.w	r3, [sl]
 800fe78:	f241 0214 	movw	r2, #4116	; 0x1014
 800fe7c:	5899      	ldr	r1, [r3, r2]
 800fe7e:	0689      	lsls	r1, r1, #26
 800fe80:	d505      	bpl.n	800fe8e <low_level_output+0x7a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800fe82:	2520      	movs	r5, #32

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800fe84:	f241 0104 	movw	r1, #4100	; 0x1004
 800fe88:	2400      	movs	r4, #0
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800fe8a:	509d      	str	r5, [r3, r2]
    heth.Instance->DMATPDR = 0;
 800fe8c:	505c      	str	r4, [r3, r1]
  }
  return errval;
}
 800fe8e:	b003      	add	sp, #12
 800fe90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800fe94:	4632      	mov	r2, r6
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800fe96:	f8db 1004 	ldr.w	r1, [fp, #4]
 800fe9a:	4418      	add	r0, r3
 800fe9c:	9301      	str	r3, [sp, #4]
      framelength = framelength + byteslefttocopy;
 800fe9e:	4490      	add	r8, r2
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800fea0:	4439      	add	r1, r7
 800fea2:	f00f fee4 	bl	801fc6e <memcpy>
  for(q = p; q != NULL; q = q->next)
 800fea6:	f8db b000 	ldr.w	fp, [fp]
 800feaa:	9b01      	ldr	r3, [sp, #4]
 800feac:	f1bb 0f00 	cmp.w	fp, #0
 800feb0:	d005      	beq.n	800febe <low_level_output+0xaa>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800feb2:	6822      	ldr	r2, [r4, #0]
 800feb4:	4630      	mov	r0, r6
 800feb6:	2a00      	cmp	r2, #0
 800feb8:	dabe      	bge.n	800fe38 <low_level_output+0x24>
 800feba:	e7d9      	b.n	800fe70 <low_level_output+0x5c>
  uint32_t framelength = 0;
 800febc:	4688      	mov	r8, r1
  HAL_ETH_TransmitFrame(&heth, framelength);
 800febe:	4641      	mov	r1, r8
 800fec0:	4802      	ldr	r0, [pc, #8]	; (800fecc <low_level_output+0xb8>)
 800fec2:	f7f7 fd47 	bl	8007954 <HAL_ETH_TransmitFrame>
  errval = ERR_OK;
 800fec6:	2000      	movs	r0, #0
 800fec8:	e7d4      	b.n	800fe74 <low_level_output+0x60>
 800feca:	bf00      	nop
 800fecc:	2002d278 	.word	0x2002d278

0800fed0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800fed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fed4:	f8df a10c 	ldr.w	sl, [pc, #268]	; 800ffe4 <ethernetif_input+0x114>
 800fed8:	b083      	sub	sp, #12
 800feda:	9001      	str	r0, [sp, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800fedc:	4b3f      	ldr	r3, [pc, #252]	; (800ffdc <ethernetif_input+0x10c>)
 800fede:	f04f 31ff 	mov.w	r1, #4294967295
 800fee2:	6818      	ldr	r0, [r3, #0]
 800fee4:	f001 f9a4 	bl	8011230 <osSemaphoreWait>
 800fee8:	2800      	cmp	r0, #0
 800feea:	d1f7      	bne.n	800fedc <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 800feec:	483c      	ldr	r0, [pc, #240]	; (800ffe0 <ethernetif_input+0x110>)
 800feee:	f00f faaf 	bl	801f450 <sys_mutex_lock>
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800fef2:	483c      	ldr	r0, [pc, #240]	; (800ffe4 <ethernetif_input+0x114>)
 800fef4:	f7f7 fdac 	bl	8007a50 <HAL_ETH_GetReceivedFrame_IT>
 800fef8:	4604      	mov	r4, r0
 800fefa:	2800      	cmp	r0, #0
 800fefc:	d169      	bne.n	800ffd2 <ethernetif_input+0x102>
  len = heth.RxFrameInfos.length;
 800fefe:	f8ba 103c 	ldrh.w	r1, [sl, #60]	; 0x3c
  if (len > 0)
 800ff02:	bb71      	cbnz	r1, 800ff62 <ethernetif_input+0x92>
  struct pbuf *p = NULL;
 800ff04:	2300      	movs	r3, #0
 800ff06:	9300      	str	r3, [sp, #0]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800ff08:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800ff0c:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800ff10:	b140      	cbz	r0, 800ff24 <ethernetif_input+0x54>
 800ff12:	2100      	movs	r1, #0
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800ff14:	681a      	ldr	r2, [r3, #0]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800ff16:	3101      	adds	r1, #1
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800ff18:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800ff1c:	4281      	cmp	r1, r0
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800ff1e:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800ff20:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800ff22:	d1f7      	bne.n	800ff14 <ethernetif_input+0x44>
    heth.RxFrameInfos.SegCount =0;
 800ff24:	2100      	movs	r1, #0
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800ff26:	f8da 3000 	ldr.w	r3, [sl]
 800ff2a:	f241 0214 	movw	r2, #4116	; 0x1014
    heth.RxFrameInfos.SegCount =0;
 800ff2e:	f8ca 1038 	str.w	r1, [sl, #56]	; 0x38
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800ff32:	5899      	ldr	r1, [r3, r2]
 800ff34:	0609      	lsls	r1, r1, #24
 800ff36:	d505      	bpl.n	800ff44 <ethernetif_input+0x74>
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800ff38:	2080      	movs	r0, #128	; 0x80
    heth.Instance->DMARPDR = 0;
 800ff3a:	f241 0108 	movw	r1, #4104	; 0x1008
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800ff3e:	5098      	str	r0, [r3, r2]
    heth.Instance->DMARPDR = 0;
 800ff40:	2200      	movs	r2, #0
 800ff42:	505a      	str	r2, [r3, r1]
        p = low_level_input( netif );
        if   (p != NULL)
 800ff44:	9800      	ldr	r0, [sp, #0]
 800ff46:	2800      	cmp	r0, #0
 800ff48:	d043      	beq.n	800ffd2 <ethernetif_input+0x102>
        {
          if (netif->input( p, netif) != ERR_OK )
 800ff4a:	9901      	ldr	r1, [sp, #4]
 800ff4c:	690b      	ldr	r3, [r1, #16]
 800ff4e:	4798      	blx	r3
 800ff50:	b918      	cbnz	r0, 800ff5a <ethernetif_input+0x8a>
          {
            pbuf_free(p);
          }
        }
        UNLOCK_TCPIP_CORE();
 800ff52:	4823      	ldr	r0, [pc, #140]	; (800ffe0 <ethernetif_input+0x110>)
 800ff54:	f00f fa82 	bl	801f45c <sys_mutex_unlock>
 800ff58:	e7c8      	b.n	800feec <ethernetif_input+0x1c>
            pbuf_free(p);
 800ff5a:	9800      	ldr	r0, [sp, #0]
 800ff5c:	f006 fcd4 	bl	8016908 <pbuf_free>
 800ff60:	e7f7      	b.n	800ff52 <ethernetif_input+0x82>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800ff62:	f44f 72c1 	mov.w	r2, #386	; 0x182
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800ff66:	f8da 5040 	ldr.w	r5, [sl, #64]	; 0x40
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800ff6a:	f006 fd3b 	bl	80169e4 <pbuf_alloc>
  if (p != NULL)
 800ff6e:	9000      	str	r0, [sp, #0]
 800ff70:	2800      	cmp	r0, #0
 800ff72:	d0c7      	beq.n	800ff04 <ethernetif_input+0x34>
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800ff74:	46a8      	mov	r8, r5
    bufferoffset = 0;
 800ff76:	4621      	mov	r1, r4
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800ff78:	f8da 6030 	ldr.w	r6, [sl, #48]	; 0x30
 800ff7c:	4683      	mov	fp, r0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800ff7e:	f240 59f4 	movw	r9, #1524	; 0x5f4
      byteslefttocopy = q->len;
 800ff82:	f8bb 200a 	ldrh.w	r2, [fp, #10]
      payloadoffset = 0;
 800ff86:	2500      	movs	r5, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800ff88:	1854      	adds	r4, r2, r1
 800ff8a:	454c      	cmp	r4, r9
 800ff8c:	d914      	bls.n	800ffb8 <ethernetif_input+0xe8>
      payloadoffset = 0;
 800ff8e:	4643      	mov	r3, r8
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800ff90:	eba9 0701 	sub.w	r7, r9, r1
 800ff94:	f8db 0004 	ldr.w	r0, [fp, #4]
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800ff98:	f2a4 54f4 	subw	r4, r4, #1524	; 0x5f4
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800ff9c:	4419      	add	r1, r3
 800ff9e:	4428      	add	r0, r5
 800ffa0:	463a      	mov	r2, r7
 800ffa2:	f00f fe64 	bl	801fc6e <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800ffa6:	68f6      	ldr	r6, [r6, #12]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800ffa8:	454c      	cmp	r4, r9
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800ffaa:	443d      	add	r5, r7
        bufferoffset = 0;
 800ffac:	f04f 0100 	mov.w	r1, #0
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800ffb0:	68b3      	ldr	r3, [r6, #8]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800ffb2:	d8ed      	bhi.n	800ff90 <ethernetif_input+0xc0>
 800ffb4:	4698      	mov	r8, r3
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800ffb6:	4622      	mov	r2, r4
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800ffb8:	f8db 0004 	ldr.w	r0, [fp, #4]
 800ffbc:	4441      	add	r1, r8
 800ffbe:	4428      	add	r0, r5
 800ffc0:	f00f fe55 	bl	801fc6e <memcpy>
    for(q = p; q != NULL; q = q->next)
 800ffc4:	f8db b000 	ldr.w	fp, [fp]
 800ffc8:	4621      	mov	r1, r4
 800ffca:	f1bb 0f00 	cmp.w	fp, #0
 800ffce:	d1d8      	bne.n	800ff82 <ethernetif_input+0xb2>
 800ffd0:	e79a      	b.n	800ff08 <ethernetif_input+0x38>
        UNLOCK_TCPIP_CORE();
 800ffd2:	4803      	ldr	r0, [pc, #12]	; (800ffe0 <ethernetif_input+0x110>)
 800ffd4:	f00f fa42 	bl	801f45c <sys_mutex_unlock>
 800ffd8:	e780      	b.n	800fedc <ethernetif_input+0xc>
 800ffda:	bf00      	nop
 800ffdc:	200016f0 	.word	0x200016f0
 800ffe0:	2002ead0 	.word	0x2002ead0
 800ffe4:	2002d278 	.word	0x2002d278

0800ffe8 <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 800ffe8:	6802      	ldr	r2, [r0, #0]
 800ffea:	4b41      	ldr	r3, [pc, #260]	; (80100f0 <HAL_ETH_MspInit+0x108>)
{
 800ffec:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(ethHandle->Instance==ETH)
 800ffee:	429a      	cmp	r2, r3
{
 800fff0:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fff2:	f04f 0400 	mov.w	r4, #0
 800fff6:	e9cd 4407 	strd	r4, r4, [sp, #28]
 800fffa:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 800fffe:	940b      	str	r4, [sp, #44]	; 0x2c
  if(ethHandle->Instance==ETH)
 8010000:	d001      	beq.n	8010006 <HAL_ETH_MspInit+0x1e>
}
 8010002:	b00d      	add	sp, #52	; 0x34
 8010004:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH_CLK_ENABLE();
 8010006:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801000a:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 801000c:	2032      	movs	r0, #50	; 0x32
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801000e:	2603      	movs	r6, #3
    __HAL_RCC_ETH_CLK_ENABLE();
 8010010:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8010012:	250b      	movs	r5, #11
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010014:	a907      	add	r1, sp, #28
    __HAL_RCC_ETH_CLK_ENABLE();
 8010016:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 801001a:	631a      	str	r2, [r3, #48]	; 0x30
 801001c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801001e:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8010022:	9200      	str	r2, [sp, #0]
 8010024:	9a00      	ldr	r2, [sp, #0]
 8010026:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010028:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 801002c:	631a      	str	r2, [r3, #48]	; 0x30
 801002e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010030:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8010034:	9201      	str	r2, [sp, #4]
 8010036:	9a01      	ldr	r2, [sp, #4]
 8010038:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801003a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 801003e:	631a      	str	r2, [r3, #48]	; 0x30
 8010040:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010042:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8010046:	9202      	str	r2, [sp, #8]
 8010048:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801004a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801004c:	f042 0204 	orr.w	r2, r2, #4
 8010050:	631a      	str	r2, [r3, #48]	; 0x30
 8010052:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010054:	f002 0204 	and.w	r2, r2, #4
 8010058:	9203      	str	r2, [sp, #12]
 801005a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801005c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801005e:	f042 0201 	orr.w	r2, r2, #1
 8010062:	631a      	str	r2, [r3, #48]	; 0x30
 8010064:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010066:	f002 0201 	and.w	r2, r2, #1
 801006a:	9204      	str	r2, [sp, #16]
 801006c:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801006e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010070:	433a      	orrs	r2, r7
 8010072:	631a      	str	r2, [r3, #48]	; 0x30
 8010074:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010076:	403a      	ands	r2, r7
 8010078:	9205      	str	r2, [sp, #20]
 801007a:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801007c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801007e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010082:	631a      	str	r2, [r3, #48]	; 0x30
 8010084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8010086:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8010088:	f003 0340 	and.w	r3, r3, #64	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801008c:	4819      	ldr	r0, [pc, #100]	; (80100f4 <HAL_ETH_MspInit+0x10c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801008e:	9708      	str	r7, [sp, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8010090:	9306      	str	r3, [sp, #24]
 8010092:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8010094:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010098:	f7f8 fa24 	bl	80084e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 801009c:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801009e:	a907      	add	r1, sp, #28
 80100a0:	4815      	ldr	r0, [pc, #84]	; (80100f8 <HAL_ETH_MspInit+0x110>)
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80100a2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80100a4:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80100a6:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80100a8:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80100ac:	f7f8 fa1a 	bl	80084e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80100b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80100b4:	a907      	add	r1, sp, #28
 80100b6:	4811      	ldr	r0, [pc, #68]	; (80100fc <HAL_ETH_MspInit+0x114>)
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80100b8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80100ba:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80100bc:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80100be:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80100c2:	f7f8 fa0f 	bl	80084e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80100c6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80100ca:	a907      	add	r1, sp, #28
 80100cc:	480c      	ldr	r0, [pc, #48]	; (8010100 <HAL_ETH_MspInit+0x118>)
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80100ce:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80100d0:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80100d2:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80100d4:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80100d8:	f7f8 fa04 	bl	80084e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 6, 0);
 80100dc:	4622      	mov	r2, r4
 80100de:	2106      	movs	r1, #6
 80100e0:	203d      	movs	r0, #61	; 0x3d
 80100e2:	f7f5 ff9b 	bl	800601c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80100e6:	203d      	movs	r0, #61	; 0x3d
 80100e8:	f7f5 ffde 	bl	80060a8 <HAL_NVIC_EnableIRQ>
}
 80100ec:	b00d      	add	sp, #52	; 0x34
 80100ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100f0:	40028000 	.word	0x40028000
 80100f4:	40020800 	.word	0x40020800
 80100f8:	40020000 	.word	0x40020000
 80100fc:	40020400 	.word	0x40020400
 8010100:	40021800 	.word	0x40021800

08010104 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(s_xSemaphore);
 8010104:	4b01      	ldr	r3, [pc, #4]	; (801010c <HAL_ETH_RxCpltCallback+0x8>)
 8010106:	6818      	ldr	r0, [r3, #0]
 8010108:	f001 b8be 	b.w	8011288 <osSemaphoreRelease>
 801010c:	200016f0 	.word	0x200016f0

08010110 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8010110:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8010114:	4604      	mov	r4, r0
{
 8010116:	b08d      	sub	sp, #52	; 0x34
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8010118:	2800      	cmp	r0, #0
 801011a:	f000 8099 	beq.w	8010250 <ethernetif_init+0x140>
  uint32_t regvalue = 0;
 801011e:	f04f 0800 	mov.w	r8, #0
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8010122:	f247 4073 	movw	r0, #29811	; 0x7473
  MACAddr[0] = 0x00;
 8010126:	a90c      	add	r1, sp, #48	; 0x30
 8010128:	4b4d      	ldr	r3, [pc, #308]	; (8010260 <ethernetif_init+0x150>)
  heth.Instance = ETH;
 801012a:	4d4e      	ldr	r5, [pc, #312]	; (8010264 <ethernetif_init+0x154>)
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 801012c:	f44f 0900 	mov.w	r9, #8388608	; 0x800000
  heth.Instance = ETH;
 8010130:	4a4d      	ldr	r2, [pc, #308]	; (8010268 <ethernetif_init+0x158>)
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 8010132:	f8df e168 	ldr.w	lr, [pc, #360]	; 801029c <ethernetif_init+0x18c>
 8010136:	4f4d      	ldr	r7, [pc, #308]	; (801026c <ethernetif_init+0x15c>)
  netif->name[0] = IFNAME0;
 8010138:	86e0      	strh	r0, [r4, #54]	; 0x36
  uint32_t regvalue = 0;
 801013a:	f8cd 8000 	str.w	r8, [sp]
  MACAddr[0] = 0x00;
 801013e:	f841 3d2c 	str.w	r3, [r1, #-44]!
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 8010142:	683e      	ldr	r6, [r7, #0]
 8010144:	f8de 3000 	ldr.w	r3, [lr]
 8010148:	4849      	ldr	r0, [pc, #292]	; (8010270 <ethernetif_init+0x160>)
  heth.Instance = ETH;
 801014a:	602a      	str	r2, [r5, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 801014c:	2201      	movs	r2, #1
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 801014e:	4073      	eors	r3, r6
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8010150:	f8a5 8010 	strh.w	r8, [r5, #16]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8010154:	606a      	str	r2, [r5, #4]
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 8010156:	6806      	ldr	r6, [r0, #0]
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8010158:	f8df 8144 	ldr.w	r8, [pc, #324]	; 80102a0 <ethernetif_init+0x190>
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 801015c:	4073      	eors	r3, r6
 801015e:	f88d 3009 	strb.w	r3, [sp, #9]
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 8010162:	683f      	ldr	r7, [r7, #0]
 8010164:	f8de 3000 	ldr.w	r3, [lr]
 8010168:	f8d0 c000 	ldr.w	ip, [r0]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 801016c:	4628      	mov	r0, r5
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 801016e:	407b      	eors	r3, r7

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8010170:	4f40      	ldr	r7, [pc, #256]	; (8010274 <ethernetif_init+0x164>)
  netif->output = etharp_output;
 8010172:	f8c4 8014 	str.w	r8, [r4, #20]
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 8010176:	ea83 030c 	eor.w	r3, r3, ip
  netif->linkoutput = low_level_output;
 801017a:	61a7      	str	r7, [r4, #24]
  heth.Init.MACAddr = &MACAddr[0];
 801017c:	6169      	str	r1, [r5, #20]
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 801017e:	f88d 3008 	strb.w	r3, [sp, #8]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8010182:	f8c5 9020 	str.w	r9, [r5, #32]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_SOFTWARE;
 8010186:	e9c5 2206 	strd	r2, r2, [r5, #24]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 801018a:	f7f7 fd81 	bl	8007c90 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 801018e:	b928      	cbnz	r0, 801019c <ethernetif_init+0x8c>
    netif->flags |= NETIF_FLAG_LINK_UP;
 8010190:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8010194:	f043 0304 	orr.w	r3, r3, #4
 8010198:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 801019c:	2304      	movs	r3, #4
 801019e:	4a36      	ldr	r2, [pc, #216]	; (8010278 <ethernetif_init+0x168>)
 80101a0:	4936      	ldr	r1, [pc, #216]	; (801027c <ethernetif_init+0x16c>)
  osSemaphoreDef(SEM);
 80101a2:	2700      	movs	r7, #0
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80101a4:	482f      	ldr	r0, [pc, #188]	; (8010264 <ethernetif_init+0x154>)
 80101a6:	f7f7 fb49 	bl	800783c <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80101aa:	2304      	movs	r3, #4
 80101ac:	4a34      	ldr	r2, [pc, #208]	; (8010280 <ethernetif_init+0x170>)
 80101ae:	4935      	ldr	r1, [pc, #212]	; (8010284 <ethernetif_init+0x174>)
 80101b0:	482c      	ldr	r0, [pc, #176]	; (8010264 <ethernetif_init+0x154>)
 80101b2:	f7f7 fb8d 	bl	80078d0 <HAL_ETH_DMARxDescListInit>
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80101b6:	696b      	ldr	r3, [r5, #20]
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80101b8:	2006      	movs	r0, #6
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80101ba:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  netif->mtu = 1500;
 80101be:	f240 55dc 	movw	r5, #1500	; 0x5dc
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 80101c2:	2101      	movs	r1, #1
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80101c4:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80101c8:	f042 020a 	orr.w	r2, r2, #10
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80101cc:	781e      	ldrb	r6, [r3, #0]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 80101ce:	a803      	add	r0, sp, #12
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80101d0:	f884 602e 	strb.w	r6, [r4, #46]	; 0x2e
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80101d4:	785e      	ldrb	r6, [r3, #1]
 80101d6:	f884 602f 	strb.w	r6, [r4, #47]	; 0x2f
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80101da:	789e      	ldrb	r6, [r3, #2]
 80101dc:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80101e0:	78de      	ldrb	r6, [r3, #3]
  osSemaphoreDef(SEM);
 80101e2:	9703      	str	r7, [sp, #12]
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80101e4:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80101e8:	791e      	ldrb	r6, [r3, #4]
 80101ea:	f884 6032 	strb.w	r6, [r4, #50]	; 0x32
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80101ee:	795b      	ldrb	r3, [r3, #5]
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80101f0:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80101f4:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  netif->mtu = 1500;
 80101f8:	85a5      	strh	r5, [r4, #44]	; 0x2c
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80101fa:	ad05      	add	r5, sp, #20
  osSemaphoreDef(SEM);
 80101fc:	9704      	str	r7, [sp, #16]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 80101fe:	f000 ffed 	bl	80111dc <osSemaphoreCreate>
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8010202:	4e21      	ldr	r6, [pc, #132]	; (8010288 <ethernetif_init+0x178>)
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8010204:	4b21      	ldr	r3, [pc, #132]	; (801028c <ethernetif_init+0x17c>)
 8010206:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8010208:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801020a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801020c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8010210:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8010214:	4621      	mov	r1, r4
 8010216:	a805      	add	r0, sp, #20
 8010218:	f000 ff34 	bl	8011084 <osThreadCreate>
  HAL_ETH_Start(&heth);
 801021c:	4811      	ldr	r0, [pc, #68]	; (8010264 <ethernetif_init+0x154>)
 801021e:	f7f7 fe8d 	bl	8007f3c <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8010222:	466a      	mov	r2, sp
 8010224:	211d      	movs	r1, #29
 8010226:	480f      	ldr	r0, [pc, #60]	; (8010264 <ethernetif_init+0x154>)
 8010228:	f7f7 fca2 	bl	8007b70 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 801022c:	9b00      	ldr	r3, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 801022e:	211d      	movs	r1, #29
 8010230:	480c      	ldr	r0, [pc, #48]	; (8010264 <ethernetif_init+0x154>)
  regvalue |= (PHY_ISFR_INT4);
 8010232:	f043 030b 	orr.w	r3, r3, #11
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8010236:	461a      	mov	r2, r3
  regvalue |= (PHY_ISFR_INT4);
 8010238:	9300      	str	r3, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 801023a:	f7f7 fce1 	bl	8007c00 <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 801023e:	466a      	mov	r2, sp
 8010240:	211d      	movs	r1, #29
 8010242:	4808      	ldr	r0, [pc, #32]	; (8010264 <ethernetif_init+0x154>)
 8010244:	f7f7 fc94 	bl	8007b70 <HAL_ETH_ReadPHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 8010248:	4638      	mov	r0, r7
 801024a:	b00d      	add	sp, #52	; 0x34
 801024c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8010250:	4b0f      	ldr	r3, [pc, #60]	; (8010290 <ethernetif_init+0x180>)
 8010252:	f240 2237 	movw	r2, #567	; 0x237
 8010256:	490f      	ldr	r1, [pc, #60]	; (8010294 <ethernetif_init+0x184>)
 8010258:	480f      	ldr	r0, [pc, #60]	; (8010298 <ethernetif_init+0x188>)
 801025a:	f010 fcad 	bl	8020bb8 <iprintf>
 801025e:	e75e      	b.n	801011e <ethernetif_init+0xe>
 8010260:	00e18000 	.word	0x00e18000
 8010264:	2002d278 	.word	0x2002d278
 8010268:	40028000 	.word	0x40028000
 801026c:	1ff0f424 	.word	0x1ff0f424
 8010270:	1ff0f428 	.word	0x1ff0f428
 8010274:	0800fe15 	.word	0x0800fe15
 8010278:	2002d2c0 	.word	0x2002d2c0
 801027c:	2002b9a8 	.word	0x2002b9a8
 8010280:	2002ba28 	.word	0x2002ba28
 8010284:	2002d1f8 	.word	0x2002d1f8
 8010288:	08024ac0 	.word	0x08024ac0
 801028c:	200016f0 	.word	0x200016f0
 8010290:	08026b8c 	.word	0x08026b8c
 8010294:	08026ba8 	.word	0x08026ba8
 8010298:	08026bb8 	.word	0x08026bb8
 801029c:	1ff0f420 	.word	0x1ff0f420
 80102a0:	0801de19 	.word	0x0801de19

080102a4 <sys_now>:
 80102a4:	f7f5 ba5a 	b.w	800575c <HAL_GetTick>

080102a8 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 80102a8:	b570      	push	{r4, r5, r6, lr}
 80102aa:	b082      	sub	sp, #8
  uint32_t regvalue = 0;
 80102ac:	2300      	movs	r3, #0
{
 80102ae:	4606      	mov	r6, r0
  struct link_str *link_arg = (struct link_str *)argument;

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80102b0:	4d11      	ldr	r5, [pc, #68]	; (80102f8 <ethernetif_set_link+0x50>)
  uint32_t regvalue = 0;
 80102b2:	ac02      	add	r4, sp, #8
 80102b4:	f844 3d04 	str.w	r3, [r4, #-4]!
 80102b8:	e005      	b.n	80102c6 <ethernetif_set_link+0x1e>

    regvalue &= PHY_LINKED_STATUS;

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 80102ba:	b9cb      	cbnz	r3, 80102f0 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 80102bc:	0753      	lsls	r3, r2, #29
 80102be:	d414      	bmi.n	80102ea <ethernetif_set_link+0x42>
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 80102c0:	20c8      	movs	r0, #200	; 0xc8
 80102c2:	f000 ff09 	bl	80110d8 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80102c6:	4622      	mov	r2, r4
 80102c8:	2101      	movs	r1, #1
 80102ca:	4628      	mov	r0, r5
 80102cc:	f7f7 fc50 	bl	8007b70 <HAL_ETH_ReadPHYRegister>
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 80102d0:	6830      	ldr	r0, [r6, #0]
    regvalue &= PHY_LINKED_STATUS;
 80102d2:	9b01      	ldr	r3, [sp, #4]
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 80102d4:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
    regvalue &= PHY_LINKED_STATUS;
 80102d8:	f003 0304 	and.w	r3, r3, #4
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 80102dc:	0751      	lsls	r1, r2, #29
    regvalue &= PHY_LINKED_STATUS;
 80102de:	9301      	str	r3, [sp, #4]
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 80102e0:	d5eb      	bpl.n	80102ba <ethernetif_set_link+0x12>
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 80102e2:	0752      	lsls	r2, r2, #29
 80102e4:	d5ec      	bpl.n	80102c0 <ethernetif_set_link+0x18>
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d1ea      	bne.n	80102c0 <ethernetif_set_link+0x18>
      netif_set_link_down(link_arg->netif);
 80102ea:	f006 fa09 	bl	8016700 <netif_set_link_down>
 80102ee:	e7e7      	b.n	80102c0 <ethernetif_set_link+0x18>
      netif_set_link_up(link_arg->netif);
 80102f0:	f006 f9e0 	bl	80166b4 <netif_set_link_up>
 80102f4:	e7e4      	b.n	80102c0 <ethernetif_set_link+0x18>
 80102f6:	bf00      	nop
 80102f8:	2002d278 	.word	0x2002d278

080102fc <ethernetif_notify_conn_changed>:
{
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80102fc:	4770      	bx	lr
 80102fe:	bf00      	nop

08010300 <ethernetif_update_config>:
{
 8010300:	b570      	push	{r4, r5, r6, lr}
  if(netif_is_link_up(netif))
 8010302:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
{
 8010306:	b082      	sub	sp, #8
  __IO uint32_t tickstart = 0;
 8010308:	2100      	movs	r1, #0
{
 801030a:	4605      	mov	r5, r0
  if(netif_is_link_up(netif))
 801030c:	0758      	lsls	r0, r3, #29
  __IO uint32_t tickstart = 0;
 801030e:	9100      	str	r1, [sp, #0]
  uint32_t regvalue = 0;
 8010310:	9101      	str	r1, [sp, #4]
  if(netif_is_link_up(netif))
 8010312:	d539      	bpl.n	8010388 <ethernetif_update_config+0x88>
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8010314:	4c32      	ldr	r4, [pc, #200]	; (80103e0 <ethernetif_update_config+0xe0>)
 8010316:	6863      	ldr	r3, [r4, #4]
 8010318:	b9e3      	cbnz	r3, 8010354 <ethernetif_update_config+0x54>
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
 801031a:	68a3      	ldr	r3, [r4, #8]
 801031c:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 8010320:	d141      	bne.n	80103a6 <ethernetif_update_config+0xa6>
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 8010322:	68e3      	ldr	r3, [r4, #12]
 8010324:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8010328:	d136      	bne.n	8010398 <ethernetif_update_config+0x98>
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 801032a:	68a2      	ldr	r2, [r4, #8]
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 801032c:	08db      	lsrs	r3, r3, #3
 801032e:	2100      	movs	r1, #0
 8010330:	482b      	ldr	r0, [pc, #172]	; (80103e0 <ethernetif_update_config+0xe0>)
 8010332:	ea43 0252 	orr.w	r2, r3, r2, lsr #1
 8010336:	b292      	uxth	r2, r2
 8010338:	f7f7 fc62 	bl	8007c00 <HAL_ETH_WritePHYRegister>
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 801033c:	2100      	movs	r1, #0
 801033e:	4828      	ldr	r0, [pc, #160]	; (80103e0 <ethernetif_update_config+0xe0>)
 8010340:	f7f7 fe7c 	bl	800803c <HAL_ETH_ConfigMAC>
    HAL_ETH_Start(&heth);
 8010344:	4826      	ldr	r0, [pc, #152]	; (80103e0 <ethernetif_update_config+0xe0>)
 8010346:	f7f7 fdf9 	bl	8007f3c <HAL_ETH_Start>
  ethernetif_notify_conn_changed(netif);
 801034a:	4628      	mov	r0, r5
 801034c:	f7ff ffd6 	bl	80102fc <ethernetif_notify_conn_changed>
}
 8010350:	b002      	add	sp, #8
 8010352:	bd70      	pop	{r4, r5, r6, pc}
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8010354:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010358:	4620      	mov	r0, r4
 801035a:	f7f7 fc51 	bl	8007c00 <HAL_ETH_WritePHYRegister>
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 801035e:	4626      	mov	r6, r4
      tickstart = HAL_GetTick();
 8010360:	f7f5 f9fc 	bl	800575c <HAL_GetTick>
 8010364:	9000      	str	r0, [sp, #0]
 8010366:	e002      	b.n	801036e <ethernetif_update_config+0x6e>
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8010368:	9b01      	ldr	r3, [sp, #4]
 801036a:	069a      	lsls	r2, r3, #26
 801036c:	d425      	bmi.n	80103ba <ethernetif_update_config+0xba>
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 801036e:	aa01      	add	r2, sp, #4
 8010370:	2101      	movs	r1, #1
 8010372:	4630      	mov	r0, r6
 8010374:	f7f7 fbfc 	bl	8007b70 <HAL_ETH_ReadPHYRegister>
        if((HAL_GetTick() - tickstart ) > 1000)
 8010378:	f7f5 f9f0 	bl	800575c <HAL_GetTick>
 801037c:	9b00      	ldr	r3, [sp, #0]
 801037e:	1ac0      	subs	r0, r0, r3
 8010380:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8010384:	d9f0      	bls.n	8010368 <ethernetif_update_config+0x68>
    error :
 8010386:	e7c8      	b.n	801031a <ethernetif_update_config+0x1a>
    HAL_ETH_Stop(&heth);
 8010388:	4815      	ldr	r0, [pc, #84]	; (80103e0 <ethernetif_update_config+0xe0>)
 801038a:	f7f7 fe17 	bl	8007fbc <HAL_ETH_Stop>
  ethernetif_notify_conn_changed(netif);
 801038e:	4628      	mov	r0, r5
 8010390:	f7ff ffb4 	bl	80102fc <ethernetif_notify_conn_changed>
}
 8010394:	b002      	add	sp, #8
 8010396:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 8010398:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 801039c:	4811      	ldr	r0, [pc, #68]	; (80103e4 <ethernetif_update_config+0xe4>)
 801039e:	f7f2 fe33 	bl	8003008 <assert_failed>
 80103a2:	68e3      	ldr	r3, [r4, #12]
 80103a4:	e7c1      	b.n	801032a <ethernetif_update_config+0x2a>
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
 80103a6:	f240 21df 	movw	r1, #735	; 0x2df
 80103aa:	480e      	ldr	r0, [pc, #56]	; (80103e4 <ethernetif_update_config+0xe4>)
 80103ac:	f7f2 fe2c 	bl	8003008 <assert_failed>
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 80103b0:	68e3      	ldr	r3, [r4, #12]
 80103b2:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 80103b6:	d0b8      	beq.n	801032a <ethernetif_update_config+0x2a>
 80103b8:	e7ee      	b.n	8010398 <ethernetif_update_config+0x98>
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80103ba:	aa01      	add	r2, sp, #4
 80103bc:	211f      	movs	r1, #31
 80103be:	4808      	ldr	r0, [pc, #32]	; (80103e0 <ethernetif_update_config+0xe0>)
 80103c0:	f7f7 fbd6 	bl	8007b70 <HAL_ETH_ReadPHYRegister>
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80103c4:	9b01      	ldr	r3, [sp, #4]
 80103c6:	f013 0210 	ands.w	r2, r3, #16
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80103ca:	bf18      	it	ne
 80103cc:	f44f 6200 	movne.w	r2, #2048	; 0x800
      if(regvalue & PHY_SPEED_STATUS)
 80103d0:	075b      	lsls	r3, r3, #29
        heth.Init.Speed = ETH_SPEED_10M;
 80103d2:	bf4c      	ite	mi
 80103d4:	2300      	movmi	r3, #0
        heth.Init.Speed = ETH_SPEED_100M;
 80103d6:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80103da:	60e2      	str	r2, [r4, #12]
        heth.Init.Speed = ETH_SPEED_100M;
 80103dc:	60a3      	str	r3, [r4, #8]
 80103de:	e7ad      	b.n	801033c <ethernetif_update_config+0x3c>
 80103e0:	2002d278 	.word	0x2002d278
 80103e4:	08026b8c 	.word	0x08026b8c

080103e8 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80103e8:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 80103ec:	b183      	cbz	r3, 8010410 <USBD_CDC_EP0_RxReady+0x28>
{
 80103ee:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80103f0:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80103f4:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 80103f8:	28ff      	cmp	r0, #255	; 0xff
 80103fa:	d007      	beq.n	801040c <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80103fc:	689b      	ldr	r3, [r3, #8]
 80103fe:	4621      	mov	r1, r4
 8010400:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8010404:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8010406:	23ff      	movs	r3, #255	; 0xff
 8010408:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
}
 801040c:	2000      	movs	r0, #0
 801040e:	bd10      	pop	{r4, pc}
 8010410:	2000      	movs	r0, #0
 8010412:	4770      	bx	lr

08010414 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8010414:	2343      	movs	r3, #67	; 0x43
 8010416:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 8010418:	4800      	ldr	r0, [pc, #0]	; (801041c <USBD_CDC_GetFSCfgDesc+0x8>)
 801041a:	4770      	bx	lr
 801041c:	200002f8 	.word	0x200002f8

08010420 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8010420:	2343      	movs	r3, #67	; 0x43
 8010422:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 8010424:	4800      	ldr	r0, [pc, #0]	; (8010428 <USBD_CDC_GetHSCfgDesc+0x8>)
 8010426:	4770      	bx	lr
 8010428:	2000033c 	.word	0x2000033c

0801042c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801042c:	2343      	movs	r3, #67	; 0x43
 801042e:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 8010430:	4800      	ldr	r0, [pc, #0]	; (8010434 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8010432:	4770      	bx	lr
 8010434:	2000038c 	.word	0x2000038c

08010438 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8010438:	230a      	movs	r3, #10
 801043a:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 801043c:	4800      	ldr	r0, [pc, #0]	; (8010440 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 801043e:	4770      	bx	lr
 8010440:	20000380 	.word	0x20000380

08010444 <USBD_CDC_DataOut>:
{
 8010444:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010446:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 801044a:	b174      	cbz	r4, 801046a <USBD_CDC_DataOut+0x26>
 801044c:	4605      	mov	r5, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801044e:	f00f fa69 	bl	801f924 <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010452:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8010456:	f8d5 32c0 	ldr.w	r3, [r5, #704]	; 0x2c0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801045a:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801045e:	68db      	ldr	r3, [r3, #12]
 8010460:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8010464:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8010466:	2000      	movs	r0, #0
}
 8010468:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 801046a:	2003      	movs	r0, #3
}
 801046c:	bd38      	pop	{r3, r4, r5, pc}
 801046e:	bf00      	nop

08010470 <USBD_CDC_DataIn>:
{
 8010470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pdev->pClassData == NULL)
 8010472:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
 8010476:	b1a7      	cbz	r7, 80104a2 <USBD_CDC_DataIn+0x32>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8010478:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 801047c:	4603      	mov	r3, r0
 801047e:	460a      	mov	r2, r1
 8010480:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8010484:	69ae      	ldr	r6, [r5, #24]
 8010486:	b976      	cbnz	r6, 80104a6 <USBD_CDC_DataIn+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010488:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
    hcdc->TxState = 0U;
 801048c:	2400      	movs	r4, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801048e:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8010492:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 8010496:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 8010498:	f8c7 4214 	str.w	r4, [r7, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801049c:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 801049e:	4620      	mov	r0, r4
}
 80104a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 80104a2:	2003      	movs	r0, #3
}
 80104a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80104a6:	ebc1 0cc1 	rsb	ip, r1, r1, lsl #3
 80104aa:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
 80104ae:	eb04 048c 	add.w	r4, r4, ip, lsl #2
 80104b2:	f8d4 c044 	ldr.w	ip, [r4, #68]	; 0x44
 80104b6:	fbb6 f4fc 	udiv	r4, r6, ip
 80104ba:	fb0c 6414 	mls	r4, ip, r4, r6
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80104be:	2c00      	cmp	r4, #0
 80104c0:	d1e2      	bne.n	8010488 <USBD_CDC_DataIn+0x18>
    pdev->ep_in[epnum].total_length = 0U;
 80104c2:	61ac      	str	r4, [r5, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80104c4:	4623      	mov	r3, r4
 80104c6:	4622      	mov	r2, r4
 80104c8:	f00f fa10 	bl	801f8ec <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 80104cc:	4620      	mov	r0, r4
}
 80104ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080104d0 <USBD_CDC_Setup>:
{
 80104d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80104d4:	780b      	ldrb	r3, [r1, #0]
{
 80104d6:	b082      	sub	sp, #8
  uint8_t ifalt = 0U;
 80104d8:	2700      	movs	r7, #0
{
 80104da:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80104dc:	f013 0260 	ands.w	r2, r3, #96	; 0x60
{
 80104e0:	4606      	mov	r6, r0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80104e2:	f8d0 82bc 	ldr.w	r8, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 80104e6:	f88d 7005 	strb.w	r7, [sp, #5]
  uint16_t status_info = 0U;
 80104ea:	f8ad 7006 	strh.w	r7, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80104ee:	d01c      	beq.n	801052a <USBD_CDC_Setup+0x5a>
 80104f0:	2a20      	cmp	r2, #32
 80104f2:	d112      	bne.n	801051a <USBD_CDC_Setup+0x4a>
    if (req->wLength != 0U)
 80104f4:	88cd      	ldrh	r5, [r1, #6]
 80104f6:	f891 c001 	ldrb.w	ip, [r1, #1]
 80104fa:	2d00      	cmp	r5, #0
 80104fc:	d147      	bne.n	801058e <USBD_CDC_Setup+0xbe>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80104fe:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8010502:	462a      	mov	r2, r5
 8010504:	4660      	mov	r0, ip
 8010506:	689b      	ldr	r3, [r3, #8]
 8010508:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 801050a:	4628      	mov	r0, r5
}
 801050c:	b002      	add	sp, #8
 801050e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010512:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8010516:	2b03      	cmp	r3, #3
 8010518:	d049      	beq.n	80105ae <USBD_CDC_Setup+0xde>
      USBD_CtlError(pdev, req);
 801051a:	4630      	mov	r0, r6
 801051c:	4621      	mov	r1, r4
 801051e:	f000 fd05 	bl	8010f2c <USBD_CtlError>
      ret = USBD_FAIL;
 8010522:	2003      	movs	r0, #3
}
 8010524:	b002      	add	sp, #8
 8010526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (req->bRequest)
 801052a:	784b      	ldrb	r3, [r1, #1]
 801052c:	2b0b      	cmp	r3, #11
 801052e:	d8f4      	bhi.n	801051a <USBD_CDC_Setup+0x4a>
 8010530:	a201      	add	r2, pc, #4	; (adr r2, 8010538 <USBD_CDC_Setup+0x68>)
 8010532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010536:	bf00      	nop
 8010538:	08010513 	.word	0x08010513
 801053c:	08010571 	.word	0x08010571
 8010540:	0801051b 	.word	0x0801051b
 8010544:	0801051b 	.word	0x0801051b
 8010548:	0801051b 	.word	0x0801051b
 801054c:	0801051b 	.word	0x0801051b
 8010550:	0801051b 	.word	0x0801051b
 8010554:	0801051b 	.word	0x0801051b
 8010558:	0801051b 	.word	0x0801051b
 801055c:	0801051b 	.word	0x0801051b
 8010560:	08010579 	.word	0x08010579
 8010564:	08010569 	.word	0x08010569
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010568:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 801056c:	2b03      	cmp	r3, #3
 801056e:	d1d4      	bne.n	801051a <USBD_CDC_Setup+0x4a>
  USBD_StatusTypeDef ret = USBD_OK;
 8010570:	2000      	movs	r0, #0
}
 8010572:	b002      	add	sp, #8
 8010574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010578:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 801057c:	2b03      	cmp	r3, #3
 801057e:	d1cc      	bne.n	801051a <USBD_CDC_Setup+0x4a>
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8010580:	2201      	movs	r2, #1
 8010582:	f10d 0105 	add.w	r1, sp, #5
 8010586:	f000 fd03 	bl	8010f90 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 801058a:	2000      	movs	r0, #0
 801058c:	e7ca      	b.n	8010524 <USBD_CDC_Setup+0x54>
      if ((req->bmRequest & 0x80U) != 0U)
 801058e:	061b      	lsls	r3, r3, #24
 8010590:	d514      	bpl.n	80105bc <USBD_CDC_Setup+0xec>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010592:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8010596:	462a      	mov	r2, r5
 8010598:	4660      	mov	r0, ip
 801059a:	4641      	mov	r1, r8
 801059c:	689b      	ldr	r3, [r3, #8]
 801059e:	4798      	blx	r3
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80105a0:	88e2      	ldrh	r2, [r4, #6]
 80105a2:	4641      	mov	r1, r8
 80105a4:	4630      	mov	r0, r6
 80105a6:	f000 fcf3 	bl	8010f90 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80105aa:	4638      	mov	r0, r7
 80105ac:	e7ba      	b.n	8010524 <USBD_CDC_Setup+0x54>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80105ae:	2202      	movs	r2, #2
 80105b0:	f10d 0106 	add.w	r1, sp, #6
 80105b4:	f000 fcec 	bl	8010f90 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80105b8:	2000      	movs	r0, #0
 80105ba:	e7b3      	b.n	8010524 <USBD_CDC_Setup+0x54>
        hcdc->CmdOpCode = req->bRequest;
 80105bc:	f888 c200 	strb.w	ip, [r8, #512]	; 0x200
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80105c0:	462a      	mov	r2, r5
        hcdc->CmdLength = (uint8_t)req->wLength;
 80105c2:	f888 5201 	strb.w	r5, [r8, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80105c6:	4641      	mov	r1, r8
 80105c8:	f000 fcf8 	bl	8010fbc <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 80105cc:	4638      	mov	r0, r7
 80105ce:	e7a9      	b.n	8010524 <USBD_CDC_Setup+0x54>

080105d0 <USBD_CDC_DeInit>:
{
 80105d0:	b538      	push	{r3, r4, r5, lr}
 80105d2:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80105d4:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80105d6:	2181      	movs	r1, #129	; 0x81
 80105d8:	f00f f93c 	bl	801f854 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80105dc:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80105de:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80105e0:	4620      	mov	r0, r4
 80105e2:	f00f f937 	bl	801f854 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80105e6:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80105ea:	4620      	mov	r0, r4
 80105ec:	2182      	movs	r1, #130	; 0x82
 80105ee:	f00f f931 	bl	801f854 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 80105f2:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80105f6:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 80105f8:	b14b      	cbz	r3, 801060e <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80105fa:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 80105fe:	685b      	ldr	r3, [r3, #4]
 8010600:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8010602:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 8010606:	f00f fb09 	bl	801fc1c <free>
    pdev->pClassData = NULL;
 801060a:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 801060e:	2000      	movs	r0, #0
 8010610:	bd38      	pop	{r3, r4, r5, pc}
 8010612:	bf00      	nop

08010614 <USBD_CDC_Init>:
{
 8010614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010618:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801061a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801061e:	f00f faf5 	bl	801fc0c <malloc>
  if (hcdc == NULL)
 8010622:	4605      	mov	r5, r0
 8010624:	2800      	cmp	r0, #0
 8010626:	d04a      	beq.n	80106be <USBD_CDC_Init+0xaa>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010628:	7c23      	ldrb	r3, [r4, #16]
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801062a:	2601      	movs	r6, #1
  pdev->pClassData = (void *)hcdc;
 801062c:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010630:	b393      	cbz	r3, 8010698 <USBD_CDC_Init+0x84>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010632:	2340      	movs	r3, #64	; 0x40
 8010634:	2181      	movs	r1, #129	; 0x81
 8010636:	2202      	movs	r2, #2
 8010638:	4620      	mov	r0, r4
 801063a:	f00f f8f9 	bl	801f830 <USBD_LL_OpenEP>
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801063e:	4631      	mov	r1, r6
 8010640:	2340      	movs	r3, #64	; 0x40
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010642:	8726      	strh	r6, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010644:	2202      	movs	r2, #2
 8010646:	4620      	mov	r0, r4
 8010648:	f00f f8f2 	bl	801f830 <USBD_LL_OpenEP>
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801064c:	2310      	movs	r3, #16
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801064e:	2203      	movs	r2, #3
 8010650:	2182      	movs	r1, #130	; 0x82
      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010652:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010656:	4620      	mov	r0, r4
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8010658:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801065c:	2308      	movs	r3, #8
 801065e:	f00f f8e7 	bl	801f830 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8010662:	2701      	movs	r7, #1
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8010664:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  hcdc->TxState = 0U;
 8010668:	2600      	movs	r6, #0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801066a:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	4798      	blx	r3
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010672:	f894 8010 	ldrb.w	r8, [r4, #16]
  hcdc->TxState = 0U;
 8010676:	f8c5 6214 	str.w	r6, [r5, #532]	; 0x214
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801067a:	4639      	mov	r1, r7
  hcdc->RxState = 0U;
 801067c:	f8c5 6218 	str.w	r6, [r5, #536]	; 0x218
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010680:	4620      	mov	r0, r4
 8010682:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010686:	f1b8 0f00 	cmp.w	r8, #0
 801068a:	d011      	beq.n	80106b0 <USBD_CDC_Init+0x9c>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801068c:	2340      	movs	r3, #64	; 0x40
 801068e:	f00f f93b 	bl	801f908 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8010692:	4630      	mov	r0, r6
}
 8010694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010698:	f44f 7300 	mov.w	r3, #512	; 0x200
 801069c:	2181      	movs	r1, #129	; 0x81
 801069e:	2202      	movs	r2, #2
 80106a0:	4620      	mov	r0, r4
 80106a2:	f00f f8c5 	bl	801f830 <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80106a6:	8726      	strh	r6, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80106a8:	4631      	mov	r1, r6
 80106aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80106ae:	e7c9      	b.n	8010644 <USBD_CDC_Init+0x30>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80106b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80106b4:	f00f f928 	bl	801f908 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 80106b8:	4640      	mov	r0, r8
}
 80106ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->pClassData = NULL;
 80106be:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80106c2:	2002      	movs	r0, #2
}
 80106c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080106c8 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 80106c8:	b119      	cbz	r1, 80106d2 <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 80106ca:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80106ce:	2000      	movs	r0, #0
 80106d0:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 80106d2:	2003      	movs	r0, #3
}
 80106d4:	4770      	bx	lr
 80106d6:	bf00      	nop

080106d8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80106d8:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return (uint8_t)USBD_OK;
}
 80106dc:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 80106de:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80106e2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 80106e6:	4770      	bx	lr

080106e8 <USBD_CDC_SetRxBuffer>:
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 80106e8:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
}
 80106ec:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 80106ee:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 80106f2:	4770      	bx	lr

080106f4 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80106f4:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 80106f8:	b18a      	cbz	r2, 801071e <USBD_CDC_ReceivePacket+0x2a>
 80106fa:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
{
 80106fe:	b510      	push	{r4, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010700:	7c04      	ldrb	r4, [r0, #16]
 8010702:	b12c      	cbz	r4, 8010710 <USBD_CDC_ReceivePacket+0x1c>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010704:	2340      	movs	r3, #64	; 0x40
 8010706:	2101      	movs	r1, #1
 8010708:	f00f f8fe 	bl	801f908 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801070c:	2000      	movs	r0, #0
}
 801070e:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010710:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010714:	2101      	movs	r1, #1
 8010716:	f00f f8f7 	bl	801f908 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 801071a:	4620      	mov	r0, r4
}
 801071c:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 801071e:	2003      	movs	r0, #3
}
 8010720:	4770      	bx	lr
 8010722:	bf00      	nop

08010724 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010724:	4603      	mov	r3, r0
 8010726:	b1a8      	cbz	r0, 8010754 <USBD_Init+0x30>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8010728:	f8d0 02b8 	ldr.w	r0, [r0, #696]	; 0x2b8
 801072c:	b110      	cbz	r0, 8010734 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 801072e:	2000      	movs	r0, #0
 8010730:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8010734:	f8d3 02cc 	ldr.w	r0, [r3, #716]	; 0x2cc
 8010738:	b110      	cbz	r0, 8010740 <USBD_Init+0x1c>
  {
    pdev->pConfDesc = NULL;
 801073a:	2000      	movs	r0, #0
 801073c:	f8c3 02cc 	str.w	r0, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010740:	b109      	cbz	r1, 8010746 <USBD_Init+0x22>
  {
    pdev->pDesc = pdesc;
 8010742:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010746:	2101      	movs	r1, #1
  pdev->id = id;
 8010748:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801074a:	4618      	mov	r0, r3
  pdev->dev_state = USBD_STATE_DEFAULT;
 801074c:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  ret = USBD_LL_Init(pdev);
 8010750:	f00f b82e 	b.w	801f7b0 <USBD_LL_Init>

  return ret;
}
 8010754:	2003      	movs	r0, #3
 8010756:	4770      	bx	lr

08010758 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010758:	b530      	push	{r4, r5, lr}
  uint16_t len = 0U;
 801075a:	2400      	movs	r4, #0
{
 801075c:	b083      	sub	sp, #12
  uint16_t len = 0U;
 801075e:	f8ad 4006 	strh.w	r4, [sp, #6]

  if (pclass == NULL)
 8010762:	b159      	cbz	r1, 801077c <USBD_RegisterClass+0x24>
 8010764:	4605      	mov	r5, r0
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8010766:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 801076a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 801076c:	f10d 0006 	add.w	r0, sp, #6
 8010770:	4798      	blx	r3
 8010772:	f8c5 02cc 	str.w	r0, [r5, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
}
 8010776:	4620      	mov	r0, r4
 8010778:	b003      	add	sp, #12
 801077a:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 801077c:	2403      	movs	r4, #3
 801077e:	e7fa      	b.n	8010776 <USBD_RegisterClass+0x1e>

08010780 <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010780:	f00f b848 	b.w	801f814 <USBD_LL_Start>

08010784 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8010784:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8010788:	b10b      	cbz	r3, 801078e <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	4718      	bx	r3
  }

  return ret;
}
 801078e:	2003      	movs	r0, #3
 8010790:	4770      	bx	lr
 8010792:	bf00      	nop

08010794 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010794:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8010796:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 801079a:	b10b      	cbz	r3, 80107a0 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 801079c:	685b      	ldr	r3, [r3, #4]
 801079e:	4798      	blx	r3
  }

  return USBD_OK;
}
 80107a0:	2000      	movs	r0, #0
 80107a2:	bd08      	pop	{r3, pc}

080107a4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80107a4:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80107a6:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
{
 80107aa:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80107ac:	4628      	mov	r0, r5
 80107ae:	f000 fba9 	bl	8010f04 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 80107b2:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 80107b6:	2001      	movs	r0, #1
  pdev->ep0_data_len = pdev->request.wLength;
 80107b8:	f8b4 22b0 	ldrh.w	r2, [r4, #688]	; 0x2b0
  switch (pdev->request.bmRequest & 0x1FU)
 80107bc:	f001 031f 	and.w	r3, r1, #31
  pdev->ep0_state = USBD_EP0_SETUP;
 80107c0:	f8c4 0294 	str.w	r0, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 80107c4:	4283      	cmp	r3, r0
  pdev->ep0_data_len = pdev->request.wLength;
 80107c6:	f8c4 2298 	str.w	r2, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 80107ca:	d015      	beq.n	80107f8 <USBD_LL_SetupStage+0x54>
 80107cc:	d30e      	bcc.n	80107ec <USBD_LL_SetupStage+0x48>
 80107ce:	2b02      	cmp	r3, #2
 80107d0:	d105      	bne.n	80107de <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
      break;

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80107d2:	4629      	mov	r1, r5
 80107d4:	4620      	mov	r0, r4
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 80107d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80107da:	f000 baf5 	b.w	8010dc8 <USBD_StdEPReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80107de:	4620      	mov	r0, r4
 80107e0:	f001 0180 	and.w	r1, r1, #128	; 0x80
}
 80107e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80107e8:	f00f b842 	b.w	801f870 <USBD_LL_StallEP>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80107ec:	4629      	mov	r1, r5
 80107ee:	4620      	mov	r0, r4
}
 80107f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80107f4:	f000 b8fe 	b.w	80109f4 <USBD_StdDevReq>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80107f8:	4629      	mov	r1, r5
 80107fa:	4620      	mov	r0, r4
}
 80107fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8010800:	f000 baaa 	b.w	8010d58 <USBD_StdItfReq>

08010804 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010804:	b570      	push	{r4, r5, r6, lr}
 8010806:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010808:	b931      	cbnz	r1, 8010818 <USBD_LL_DataOutStage+0x14>
 801080a:	460d      	mov	r5, r1
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801080c:	f8d0 1294 	ldr.w	r1, [r0, #660]	; 0x294
 8010810:	2903      	cmp	r1, #3
 8010812:	d00c      	beq.n	801082e <USBD_LL_DataOutStage+0x2a>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8010814:	2000      	movs	r0, #0
}
 8010816:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataOut != NULL) &&
 8010818:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 801081c:	6992      	ldr	r2, [r2, #24]
 801081e:	b1da      	cbz	r2, 8010858 <USBD_LL_DataOutStage+0x54>
 8010820:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8010824:	2b03      	cmp	r3, #3
 8010826:	d117      	bne.n	8010858 <USBD_LL_DataOutStage+0x54>
}
 8010828:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 801082c:	4710      	bx	r2
 801082e:	4611      	mov	r1, r2
      if (pep->rem_length > pep->maxpacket)
 8010830:	f8d0 315c 	ldr.w	r3, [r0, #348]	; 0x15c
 8010834:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 8010838:	4293      	cmp	r3, r2
 801083a:	d80f      	bhi.n	801085c <USBD_LL_DataOutStage+0x58>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801083c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8010840:	691b      	ldr	r3, [r3, #16]
 8010842:	b123      	cbz	r3, 801084e <USBD_LL_DataOutStage+0x4a>
 8010844:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8010848:	2a03      	cmp	r2, #3
 801084a:	d100      	bne.n	801084e <USBD_LL_DataOutStage+0x4a>
          pdev->pClass->EP0_RxReady(pdev);
 801084c:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 801084e:	4620      	mov	r0, r4
 8010850:	f000 fbcc 	bl	8010fec <USBD_CtlSendStatus>
  return USBD_OK;
 8010854:	2000      	movs	r0, #0
 8010856:	e7de      	b.n	8010816 <USBD_LL_DataOutStage+0x12>
    return USBD_FAIL;
 8010858:	2003      	movs	r0, #3
}
 801085a:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 801085c:	1a9b      	subs	r3, r3, r2
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801085e:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 8010860:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8010864:	bf28      	it	cs
 8010866:	461a      	movcs	r2, r3
 8010868:	f000 fbb8 	bl	8010fdc <USBD_CtlContinueRx>
  return USBD_OK;
 801086c:	4628      	mov	r0, r5
}
 801086e:	bd70      	pop	{r4, r5, r6, pc}

08010870 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8010870:	b570      	push	{r4, r5, r6, lr}
 8010872:	4604      	mov	r4, r0
 8010874:	b082      	sub	sp, #8
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010876:	b951      	cbnz	r1, 801088e <USBD_LL_DataInStage+0x1e>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010878:	f8d0 5294 	ldr.w	r5, [r0, #660]	; 0x294
 801087c:	2d02      	cmp	r5, #2
 801087e:	d016      	beq.n	80108ae <USBD_LL_DataInStage+0x3e>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8010880:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8010884:	2000      	movs	r0, #0
    if (pdev->dev_test_mode == 1U)
 8010886:	2b01      	cmp	r3, #1
 8010888:	d00d      	beq.n	80108a6 <USBD_LL_DataInStage+0x36>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 801088a:	b002      	add	sp, #8
 801088c:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataIn != NULL) &&
 801088e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8010892:	695b      	ldr	r3, [r3, #20]
 8010894:	b33b      	cbz	r3, 80108e6 <USBD_LL_DataInStage+0x76>
 8010896:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 801089a:	2a03      	cmp	r2, #3
 801089c:	d123      	bne.n	80108e6 <USBD_LL_DataInStage+0x76>
}
 801089e:	b002      	add	sp, #8
 80108a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80108a4:	4718      	bx	r3
      pdev->dev_test_mode = 0U;
 80108a6:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
}
 80108aa:	b002      	add	sp, #8
 80108ac:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 80108ae:	e9d0 5607 	ldrd	r5, r6, [r0, #28]
 80108b2:	42b5      	cmp	r5, r6
 80108b4:	d81a      	bhi.n	80108ec <USBD_LL_DataInStage+0x7c>
        if ((pep->maxpacket == pep->rem_length) &&
 80108b6:	d027      	beq.n	8010908 <USBD_LL_DataInStage+0x98>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80108b8:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80108bc:	68db      	ldr	r3, [r3, #12]
 80108be:	b12b      	cbz	r3, 80108cc <USBD_LL_DataInStage+0x5c>
 80108c0:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 80108c4:	2a03      	cmp	r2, #3
 80108c6:	d101      	bne.n	80108cc <USBD_LL_DataInStage+0x5c>
            pdev->pClass->EP0_TxSent(pdev);
 80108c8:	4620      	mov	r0, r4
 80108ca:	4798      	blx	r3
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80108cc:	2180      	movs	r1, #128	; 0x80
 80108ce:	4620      	mov	r0, r4
 80108d0:	f00e ffce 	bl	801f870 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80108d4:	4620      	mov	r0, r4
 80108d6:	f000 fb95 	bl	8011004 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 80108da:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
      pdev->dev_test_mode = 0U;
 80108de:	2000      	movs	r0, #0
    if (pdev->dev_test_mode == 1U)
 80108e0:	2b01      	cmp	r3, #1
 80108e2:	d1d2      	bne.n	801088a <USBD_LL_DataInStage+0x1a>
 80108e4:	e7df      	b.n	80108a6 <USBD_LL_DataInStage+0x36>
    return USBD_FAIL;
 80108e6:	2003      	movs	r0, #3
}
 80108e8:	b002      	add	sp, #8
 80108ea:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 80108ec:	1bad      	subs	r5, r5, r6
 80108ee:	9101      	str	r1, [sp, #4]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80108f0:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 80108f2:	61c5      	str	r5, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80108f4:	462a      	mov	r2, r5
 80108f6:	f000 fb59 	bl	8010fac <USBD_CtlContinueSendData>
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80108fa:	9b01      	ldr	r3, [sp, #4]
 80108fc:	4620      	mov	r0, r4
 80108fe:	461a      	mov	r2, r3
 8010900:	4619      	mov	r1, r3
 8010902:	f00f f801 	bl	801f908 <USBD_LL_PrepareReceive>
 8010906:	e7bb      	b.n	8010880 <USBD_LL_DataInStage+0x10>
            (pep->total_length >= pep->maxpacket) &&
 8010908:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 801090a:	4295      	cmp	r5, r2
 801090c:	d8d4      	bhi.n	80108b8 <USBD_LL_DataInStage+0x48>
            (pep->total_length >= pep->maxpacket) &&
 801090e:	f8d0 5298 	ldr.w	r5, [r0, #664]	; 0x298
 8010912:	42aa      	cmp	r2, r5
 8010914:	d2d0      	bcs.n	80108b8 <USBD_LL_DataInStage+0x48>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010916:	460a      	mov	r2, r1
 8010918:	9101      	str	r1, [sp, #4]
 801091a:	f000 fb47 	bl	8010fac <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801091e:	9b01      	ldr	r3, [sp, #4]
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010920:	4620      	mov	r0, r4
          pdev->ep0_data_len = 0U;
 8010922:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010926:	461a      	mov	r2, r3
 8010928:	4619      	mov	r1, r3
 801092a:	f00e ffed 	bl	801f908 <USBD_LL_PrepareReceive>
 801092e:	e7a7      	b.n	8010880 <USBD_LL_DataInStage+0x10>

08010930 <USBD_LL_Reset>:

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8010930:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010932:	2201      	movs	r2, #1
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData != NULL)
 8010934:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 8010938:	b570      	push	{r4, r5, r6, lr}
 801093a:	4604      	mov	r4, r0
  pdev->dev_state = USBD_STATE_DEFAULT;
 801093c:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010940:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 8010944:	6041      	str	r1, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8010946:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClassData != NULL)
 801094a:	b11b      	cbz	r3, 8010954 <USBD_LL_Reset+0x24>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801094c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8010950:	685b      	ldr	r3, [r3, #4]
 8010952:	4798      	blx	r3

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010954:	2540      	movs	r5, #64	; 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010956:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010958:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801095a:	4620      	mov	r0, r4
 801095c:	462b      	mov	r3, r5
 801095e:	4611      	mov	r1, r2
 8010960:	f00e ff66 	bl	801f830 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010964:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010968:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801096c:	462b      	mov	r3, r5
 801096e:	2200      	movs	r2, #0
 8010970:	2180      	movs	r1, #128	; 0x80
 8010972:	4620      	mov	r0, r4
 8010974:	f00e ff5c 	bl	801f830 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010978:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801097a:	6225      	str	r5, [r4, #32]

  return USBD_OK;
}
 801097c:	2000      	movs	r0, #0
 801097e:	bd70      	pop	{r4, r5, r6, pc}

08010980 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8010980:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8010982:	2000      	movs	r0, #0
 8010984:	4770      	bx	lr
 8010986:	bf00      	nop

08010988 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010988:	4603      	mov	r3, r0
  pdev->dev_old_state = pdev->dev_state;
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801098a:	2104      	movs	r1, #4

  return USBD_OK;
}
 801098c:	2000      	movs	r0, #0
  pdev->dev_old_state = pdev->dev_state;
 801098e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8010992:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->dev_old_state = pdev->dev_state;
 8010996:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
}
 801099a:	4770      	bx	lr

0801099c <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801099c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80109a0:	2b04      	cmp	r3, #4
 80109a2:	d103      	bne.n	80109ac <USBD_LL_Resume+0x10>
  {
    pdev->dev_state = pdev->dev_old_state;
 80109a4:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 80109a8:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 80109ac:	2000      	movs	r0, #0
 80109ae:	4770      	bx	lr

080109b0 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80109b0:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80109b4:	2a03      	cmp	r2, #3
 80109b6:	d001      	beq.n	80109bc <USBD_LL_SOF+0xc>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 80109b8:	2000      	movs	r0, #0
 80109ba:	4770      	bx	lr
{
 80109bc:	b508      	push	{r3, lr}
    if (pdev->pClass->SOF != NULL)
 80109be:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80109c2:	69db      	ldr	r3, [r3, #28]
 80109c4:	b103      	cbz	r3, 80109c8 <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 80109c6:	4798      	blx	r3
}
 80109c8:	2000      	movs	r0, #0
 80109ca:	bd08      	pop	{r3, pc}

080109cc <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 80109cc:	2000      	movs	r0, #0
 80109ce:	4770      	bx	lr

080109d0 <USBD_LL_IsoOUTIncomplete>:
 80109d0:	2000      	movs	r0, #0
 80109d2:	4770      	bx	lr

080109d4 <USBD_LL_DevConnected>:
 80109d4:	2000      	movs	r0, #0
 80109d6:	4770      	bx	lr

080109d8 <USBD_LL_DevDisconnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80109d8:	2101      	movs	r1, #1

  if (pdev->pClass != NULL)
 80109da:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 80109de:	f880 129c 	strb.w	r1, [r0, #668]	; 0x29c
  if (pdev->pClass != NULL)
 80109e2:	b12a      	cbz	r2, 80109f0 <USBD_LL_DevDisconnected+0x18>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80109e4:	6852      	ldr	r2, [r2, #4]
 80109e6:	7901      	ldrb	r1, [r0, #4]
{
 80109e8:	b508      	push	{r3, lr}
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80109ea:	4790      	blx	r2
  }

  return USBD_OK;
}
 80109ec:	2000      	movs	r0, #0
 80109ee:	bd08      	pop	{r3, pc}
 80109f0:	2000      	movs	r0, #0
 80109f2:	4770      	bx	lr

080109f4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80109f4:	b570      	push	{r4, r5, r6, lr}
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80109f6:	780b      	ldrb	r3, [r1, #0]
{
 80109f8:	b082      	sub	sp, #8
 80109fa:	460d      	mov	r5, r1
 80109fc:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80109fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010a02:	2b20      	cmp	r3, #32
 8010a04:	d028      	beq.n	8010a58 <USBD_StdDevReq+0x64>
 8010a06:	2b40      	cmp	r3, #64	; 0x40
 8010a08:	d026      	beq.n	8010a58 <USBD_StdDevReq+0x64>
 8010a0a:	b15b      	cbz	r3, 8010a24 <USBD_StdDevReq+0x30>

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010a0c:	2180      	movs	r1, #128	; 0x80
 8010a0e:	4620      	mov	r0, r4
 8010a10:	f00e ff2e 	bl	801f870 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010a14:	2100      	movs	r1, #0
 8010a16:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 8010a18:	460d      	mov	r5, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 8010a1a:	f00e ff29 	bl	801f870 <USBD_LL_StallEP>
}
 8010a1e:	4628      	mov	r0, r5
 8010a20:	b002      	add	sp, #8
 8010a22:	bd70      	pop	{r4, r5, r6, pc}
    switch (req->bRequest)
 8010a24:	784b      	ldrb	r3, [r1, #1]
 8010a26:	2b09      	cmp	r3, #9
 8010a28:	d8f0      	bhi.n	8010a0c <USBD_StdDevReq+0x18>
 8010a2a:	a201      	add	r2, pc, #4	; (adr r2, 8010a30 <USBD_StdDevReq+0x3c>)
 8010a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a30:	08010acf 	.word	0x08010acf
 8010a34:	08010afd 	.word	0x08010afd
 8010a38:	08010a0d 	.word	0x08010a0d
 8010a3c:	08010b19 	.word	0x08010b19
 8010a40:	08010a0d 	.word	0x08010a0d
 8010a44:	08010b25 	.word	0x08010b25
 8010a48:	08010b67 	.word	0x08010b67
 8010a4c:	08010a0d 	.word	0x08010a0d
 8010a50:	08010b8b 	.word	0x08010b8b
 8010a54:	08010a6d 	.word	0x08010a6d
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010a58:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8010a5c:	4629      	mov	r1, r5
 8010a5e:	4620      	mov	r0, r4
 8010a60:	689b      	ldr	r3, [r3, #8]
 8010a62:	4798      	blx	r3
 8010a64:	4605      	mov	r5, r0
}
 8010a66:	4628      	mov	r0, r5
 8010a68:	b002      	add	sp, #8
 8010a6a:	bd70      	pop	{r4, r5, r6, pc}
  cfgidx = (uint8_t)(req->wValue);
 8010a6c:	7889      	ldrb	r1, [r1, #2]
 8010a6e:	4eae      	ldr	r6, [pc, #696]	; (8010d28 <USBD_StdDevReq+0x334>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010a70:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8010a72:	7031      	strb	r1, [r6, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010a74:	f200 8114 	bhi.w	8010ca0 <USBD_StdDevReq+0x2ac>
  switch (pdev->dev_state)
 8010a78:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8010a7c:	2b02      	cmp	r3, #2
 8010a7e:	f000 811c 	beq.w	8010cba <USBD_StdDevReq+0x2c6>
 8010a82:	2b03      	cmp	r3, #3
 8010a84:	f040 812a 	bne.w	8010cdc <USBD_StdDevReq+0x2e8>
    if (cfgidx == 0U)
 8010a88:	2900      	cmp	r1, #0
 8010a8a:	f000 814f 	beq.w	8010d2c <USBD_StdDevReq+0x338>
    else if (cfgidx != pdev->dev_config)
 8010a8e:	6841      	ldr	r1, [r0, #4]
 8010a90:	2901      	cmp	r1, #1
 8010a92:	f000 8130 	beq.w	8010cf6 <USBD_StdDevReq+0x302>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010a96:	b2c9      	uxtb	r1, r1
 8010a98:	f7ff fe7c 	bl	8010794 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8010a9c:	7831      	ldrb	r1, [r6, #0]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8010a9e:	4620      	mov	r0, r4
      pdev->dev_config = cfgidx;
 8010aa0:	6061      	str	r1, [r4, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8010aa2:	f7ff fe6f 	bl	8010784 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 8010aa6:	4605      	mov	r5, r0
 8010aa8:	2800      	cmp	r0, #0
 8010aaa:	f000 8124 	beq.w	8010cf6 <USBD_StdDevReq+0x302>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010aae:	2180      	movs	r1, #128	; 0x80
 8010ab0:	4620      	mov	r0, r4
 8010ab2:	f00e fedd 	bl	801f870 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010ab6:	2100      	movs	r1, #0
 8010ab8:	4620      	mov	r0, r4
 8010aba:	f00e fed9 	bl	801f870 <USBD_LL_StallEP>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010abe:	7921      	ldrb	r1, [r4, #4]
 8010ac0:	4620      	mov	r0, r4
 8010ac2:	f7ff fe67 	bl	8010794 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010ac6:	2302      	movs	r3, #2
 8010ac8:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8010acc:	e7a7      	b.n	8010a1e <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8010ace:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8010ad2:	2203      	movs	r2, #3
 8010ad4:	3b01      	subs	r3, #1
 8010ad6:	2b02      	cmp	r3, #2
 8010ad8:	d898      	bhi.n	8010a0c <USBD_StdDevReq+0x18>
    if (req->wLength != 0x2U)
 8010ada:	88cb      	ldrh	r3, [r1, #6]
 8010adc:	2b02      	cmp	r3, #2
 8010ade:	d195      	bne.n	8010a0c <USBD_StdDevReq+0x18>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010ae0:	2101      	movs	r1, #1
    if (pdev->dev_remote_wakeup != 0U)
 8010ae2:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010ae6:	60c1      	str	r1, [r0, #12]
    if (pdev->dev_remote_wakeup != 0U)
 8010ae8:	b103      	cbz	r3, 8010aec <USBD_StdDevReq+0xf8>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010aea:	60c2      	str	r2, [r0, #12]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010aec:	2202      	movs	r2, #2
 8010aee:	f104 010c 	add.w	r1, r4, #12
 8010af2:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 8010af4:	2500      	movs	r5, #0
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010af6:	f000 fa4b 	bl	8010f90 <USBD_CtlSendData>
 8010afa:	e790      	b.n	8010a1e <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8010afc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8010b00:	3b01      	subs	r3, #1
 8010b02:	2b02      	cmp	r3, #2
 8010b04:	d882      	bhi.n	8010a0c <USBD_StdDevReq+0x18>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010b06:	884b      	ldrh	r3, [r1, #2]
        pdev->dev_remote_wakeup = 0U;
 8010b08:	2500      	movs	r5, #0
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010b0a:	2b01      	cmp	r3, #1
 8010b0c:	d187      	bne.n	8010a1e <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 8010b0e:	f8c0 52a4 	str.w	r5, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010b12:	f000 fa6b 	bl	8010fec <USBD_CtlSendStatus>
 8010b16:	e782      	b.n	8010a1e <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010b18:	884b      	ldrh	r3, [r1, #2]
 8010b1a:	2b01      	cmp	r3, #1
 8010b1c:	f000 80f0 	beq.w	8010d00 <USBD_StdDevReq+0x30c>
  USBD_StatusTypeDef ret = USBD_OK;
 8010b20:	2500      	movs	r5, #0
 8010b22:	e77c      	b.n	8010a1e <USBD_StdDevReq+0x2a>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010b24:	888b      	ldrh	r3, [r1, #4]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	f47f af70 	bne.w	8010a0c <USBD_StdDevReq+0x18>
 8010b2c:	88ce      	ldrh	r6, [r1, #6]
 8010b2e:	2e00      	cmp	r6, #0
 8010b30:	f47f af6c 	bne.w	8010a0c <USBD_StdDevReq+0x18>
 8010b34:	884d      	ldrh	r5, [r1, #2]
 8010b36:	2d7f      	cmp	r5, #127	; 0x7f
 8010b38:	f63f af68 	bhi.w	8010a0c <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010b3c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8010b40:	2b03      	cmp	r3, #3
 8010b42:	f43f af63 	beq.w	8010a0c <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010b46:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8010b48:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010b4c:	f00e fec0 	bl	801f8d0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010b50:	4620      	mov	r0, r4
 8010b52:	f000 fa4b 	bl	8010fec <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8010b56:	2d00      	cmp	r5, #0
 8010b58:	f000 80fa 	beq.w	8010d50 <USBD_StdDevReq+0x35c>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010b5c:	2302      	movs	r3, #2
  USBD_StatusTypeDef ret = USBD_OK;
 8010b5e:	4635      	mov	r5, r6
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010b60:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8010b64:	e75b      	b.n	8010a1e <USBD_StdDevReq+0x2a>
      USBD_GetDescriptor(pdev, req);
 8010b66:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 8010b68:	2100      	movs	r1, #0
  switch (req->wValue >> 8)
 8010b6a:	0a13      	lsrs	r3, r2, #8
  uint16_t len = 0U;
 8010b6c:	f8ad 1006 	strh.w	r1, [sp, #6]
  switch (req->wValue >> 8)
 8010b70:	3b01      	subs	r3, #1
 8010b72:	2b0e      	cmp	r3, #14
 8010b74:	d86d      	bhi.n	8010c52 <USBD_StdDevReq+0x25e>
 8010b76:	e8df f003 	tbb	[pc, r3]
 8010b7a:	5b53      	.short	0x5b53
 8010b7c:	4a6c6c37 	.word	0x4a6c6c37
 8010b80:	6c6c6c3f 	.word	0x6c6c6c3f
 8010b84:	6c6c6c6c 	.word	0x6c6c6c6c
 8010b88:	1c          	.byte	0x1c
 8010b89:	00          	.byte	0x00
  if (req->wLength != 1U)
 8010b8a:	88ca      	ldrh	r2, [r1, #6]
 8010b8c:	2a01      	cmp	r2, #1
 8010b8e:	f47f af3d 	bne.w	8010a0c <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 8010b92:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	f43f af38 	beq.w	8010a0c <USBD_StdDevReq+0x18>
 8010b9c:	2b02      	cmp	r3, #2
 8010b9e:	f240 80b5 	bls.w	8010d0c <USBD_StdDevReq+0x318>
 8010ba2:	2b03      	cmp	r3, #3
 8010ba4:	f47f af32 	bne.w	8010a0c <USBD_StdDevReq+0x18>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010ba8:	1d01      	adds	r1, r0, #4
  USBD_StatusTypeDef ret = USBD_OK;
 8010baa:	2500      	movs	r5, #0
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010bac:	f000 f9f0 	bl	8010f90 <USBD_CtlSendData>
 8010bb0:	e735      	b.n	8010a1e <USBD_StdDevReq+0x2a>
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8010bb2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8010bb6:	69db      	ldr	r3, [r3, #28]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d04a      	beq.n	8010c52 <USBD_StdDevReq+0x25e>
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010bbc:	f10d 0106 	add.w	r1, sp, #6
 8010bc0:	7c20      	ldrb	r0, [r4, #16]
 8010bc2:	4798      	blx	r3
    if (req->wLength != 0U)
 8010bc4:	88eb      	ldrh	r3, [r5, #6]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d073      	beq.n	8010cb2 <USBD_StdDevReq+0x2be>
      if (len != 0U)
 8010bca:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010bce:	2a00      	cmp	r2, #0
 8010bd0:	d03f      	beq.n	8010c52 <USBD_StdDevReq+0x25e>
        len = MIN(len, req->wLength);
 8010bd2:	4293      	cmp	r3, r2
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8010bd4:	4601      	mov	r1, r0
 8010bd6:	4620      	mov	r0, r4
        len = MIN(len, req->wLength);
 8010bd8:	bf28      	it	cs
 8010bda:	4613      	movcs	r3, r2
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8010bdc:	461a      	mov	r2, r3
        len = MIN(len, req->wLength);
 8010bde:	f8ad 3006 	strh.w	r3, [sp, #6]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8010be2:	f000 f9d5 	bl	8010f90 <USBD_CtlSendData>
 8010be6:	e79b      	b.n	8010b20 <USBD_StdDevReq+0x12c>
    switch ((uint8_t)(req->wValue))
 8010be8:	b2d2      	uxtb	r2, r2
 8010bea:	2a05      	cmp	r2, #5
 8010bec:	d831      	bhi.n	8010c52 <USBD_StdDevReq+0x25e>
 8010bee:	e8df f002 	tbb	[pc, r2]
 8010bf2:	512b      	.short	0x512b
 8010bf4:	393f454b 	.word	0x393f454b
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010bf8:	7c03      	ldrb	r3, [r0, #16]
 8010bfa:	bb53      	cbnz	r3, 8010c52 <USBD_StdDevReq+0x25e>
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8010bfc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8010c00:	f10d 0006 	add.w	r0, sp, #6
 8010c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c06:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010c08:	2307      	movs	r3, #7
 8010c0a:	7043      	strb	r3, [r0, #1]
 8010c0c:	e7da      	b.n	8010bc4 <USBD_StdDevReq+0x1d0>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010c0e:	7c03      	ldrb	r3, [r0, #16]
 8010c10:	b9fb      	cbnz	r3, 8010c52 <USBD_StdDevReq+0x25e>
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8010c12:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8010c16:	f10d 0006 	add.w	r0, sp, #6
 8010c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c1c:	4798      	blx	r3
 8010c1e:	e7d1      	b.n	8010bc4 <USBD_StdDevReq+0x1d0>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010c20:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8010c24:	f10d 0106 	add.w	r1, sp, #6
 8010c28:	7c00      	ldrb	r0, [r0, #16]
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	4798      	blx	r3
 8010c2e:	e7c9      	b.n	8010bc4 <USBD_StdDevReq+0x1d0>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010c30:	7c02      	ldrb	r2, [r0, #16]
 8010c32:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8010c36:	2a00      	cmp	r2, #0
 8010c38:	d16f      	bne.n	8010d1a <USBD_StdDevReq+0x326>
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8010c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c3c:	f10d 0006 	add.w	r0, sp, #6
 8010c40:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010c42:	2302      	movs	r3, #2
 8010c44:	7043      	strb	r3, [r0, #1]
 8010c46:	e7bd      	b.n	8010bc4 <USBD_StdDevReq+0x1d0>
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010c48:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8010c4c:	685b      	ldr	r3, [r3, #4]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d1b4      	bne.n	8010bbc <USBD_StdDevReq+0x1c8>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010c52:	2180      	movs	r1, #128	; 0x80
 8010c54:	4620      	mov	r0, r4
 8010c56:	f00e fe0b 	bl	801f870 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010c5a:	4620      	mov	r0, r4
 8010c5c:	2100      	movs	r1, #0
 8010c5e:	f00e fe07 	bl	801f870 <USBD_LL_StallEP>
 8010c62:	e75d      	b.n	8010b20 <USBD_StdDevReq+0x12c>
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010c64:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8010c68:	699b      	ldr	r3, [r3, #24]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d1a6      	bne.n	8010bbc <USBD_StdDevReq+0x1c8>
 8010c6e:	e7f0      	b.n	8010c52 <USBD_StdDevReq+0x25e>
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010c70:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8010c74:	695b      	ldr	r3, [r3, #20]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d1a0      	bne.n	8010bbc <USBD_StdDevReq+0x1c8>
 8010c7a:	e7ea      	b.n	8010c52 <USBD_StdDevReq+0x25e>
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010c7c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8010c80:	691b      	ldr	r3, [r3, #16]
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d19a      	bne.n	8010bbc <USBD_StdDevReq+0x1c8>
 8010c86:	e7e4      	b.n	8010c52 <USBD_StdDevReq+0x25e>
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010c88:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8010c8c:	68db      	ldr	r3, [r3, #12]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d194      	bne.n	8010bbc <USBD_StdDevReq+0x1c8>
 8010c92:	e7de      	b.n	8010c52 <USBD_StdDevReq+0x25e>
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010c94:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8010c98:	689b      	ldr	r3, [r3, #8]
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d18e      	bne.n	8010bbc <USBD_StdDevReq+0x1c8>
 8010c9e:	e7d8      	b.n	8010c52 <USBD_StdDevReq+0x25e>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010ca0:	2180      	movs	r1, #128	; 0x80
    return USBD_FAIL;
 8010ca2:	2503      	movs	r5, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010ca4:	f00e fde4 	bl	801f870 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010ca8:	4620      	mov	r0, r4
 8010caa:	2100      	movs	r1, #0
 8010cac:	f00e fde0 	bl	801f870 <USBD_LL_StallEP>
 8010cb0:	e6b5      	b.n	8010a1e <USBD_StdDevReq+0x2a>
      (void)USBD_CtlSendStatus(pdev);
 8010cb2:	4620      	mov	r0, r4
 8010cb4:	f000 f99a 	bl	8010fec <USBD_CtlSendStatus>
 8010cb8:	e732      	b.n	8010b20 <USBD_StdDevReq+0x12c>
    if (cfgidx != 0U)
 8010cba:	b1e1      	cbz	r1, 8010cf6 <USBD_StdDevReq+0x302>
      pdev->dev_config = cfgidx;
 8010cbc:	2101      	movs	r1, #1
 8010cbe:	6041      	str	r1, [r0, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8010cc0:	f7ff fd60 	bl	8010784 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 8010cc4:	4605      	mov	r5, r0
 8010cc6:	2800      	cmp	r0, #0
 8010cc8:	d03b      	beq.n	8010d42 <USBD_StdDevReq+0x34e>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010cca:	2180      	movs	r1, #128	; 0x80
 8010ccc:	4620      	mov	r0, r4
 8010cce:	f00e fdcf 	bl	801f870 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010cd2:	4620      	mov	r0, r4
 8010cd4:	2100      	movs	r1, #0
 8010cd6:	f00e fdcb 	bl	801f870 <USBD_LL_StallEP>
 8010cda:	e6a0      	b.n	8010a1e <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010cdc:	2180      	movs	r1, #128	; 0x80
    ret = USBD_FAIL;
 8010cde:	2503      	movs	r5, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010ce0:	f00e fdc6 	bl	801f870 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010ce4:	2100      	movs	r1, #0
 8010ce6:	4620      	mov	r0, r4
 8010ce8:	f00e fdc2 	bl	801f870 <USBD_LL_StallEP>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010cec:	7831      	ldrb	r1, [r6, #0]
 8010cee:	4620      	mov	r0, r4
 8010cf0:	f7ff fd50 	bl	8010794 <USBD_ClrClassConfig>
 8010cf4:	e693      	b.n	8010a1e <USBD_StdDevReq+0x2a>
      (void)USBD_CtlSendStatus(pdev);
 8010cf6:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 8010cf8:	2500      	movs	r5, #0
      (void)USBD_CtlSendStatus(pdev);
 8010cfa:	f000 f977 	bl	8010fec <USBD_CtlSendStatus>
 8010cfe:	e68e      	b.n	8010a1e <USBD_StdDevReq+0x2a>
    pdev->dev_remote_wakeup = 1U;
 8010d00:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
  USBD_StatusTypeDef ret = USBD_OK;
 8010d04:	2500      	movs	r5, #0
    (void)USBD_CtlSendStatus(pdev);
 8010d06:	f000 f971 	bl	8010fec <USBD_CtlSendStatus>
 8010d0a:	e688      	b.n	8010a1e <USBD_StdDevReq+0x2a>
      pdev->dev_default_config = 0U;
 8010d0c:	2500      	movs	r5, #0
 8010d0e:	4601      	mov	r1, r0
 8010d10:	f841 5f08 	str.w	r5, [r1, #8]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010d14:	f000 f93c 	bl	8010f90 <USBD_CtlSendData>
 8010d18:	e681      	b.n	8010a1e <USBD_StdDevReq+0x2a>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8010d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d1c:	f10d 0006 	add.w	r0, sp, #6
 8010d20:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010d22:	2302      	movs	r3, #2
 8010d24:	7043      	strb	r3, [r0, #1]
 8010d26:	e74d      	b.n	8010bc4 <USBD_StdDevReq+0x1d0>
 8010d28:	200016f4 	.word	0x200016f4
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8010d2c:	2302      	movs	r3, #2
      pdev->dev_config = cfgidx;
 8010d2e:	6041      	str	r1, [r0, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8010d30:	460d      	mov	r5, r1
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8010d32:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010d36:	f7ff fd2d 	bl	8010794 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8010d3a:	4620      	mov	r0, r4
 8010d3c:	f000 f956 	bl	8010fec <USBD_CtlSendStatus>
 8010d40:	e66d      	b.n	8010a1e <USBD_StdDevReq+0x2a>
        (void)USBD_CtlSendStatus(pdev);
 8010d42:	4620      	mov	r0, r4
 8010d44:	f000 f952 	bl	8010fec <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8010d48:	2303      	movs	r3, #3
 8010d4a:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8010d4e:	e666      	b.n	8010a1e <USBD_StdDevReq+0x2a>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010d50:	2301      	movs	r3, #1
 8010d52:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8010d56:	e662      	b.n	8010a1e <USBD_StdDevReq+0x2a>

08010d58 <USBD_StdItfReq>:
{
 8010d58:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010d5a:	780b      	ldrb	r3, [r1, #0]
{
 8010d5c:	460d      	mov	r5, r1
 8010d5e:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010d60:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010d64:	2b20      	cmp	r3, #32
 8010d66:	d00d      	beq.n	8010d84 <USBD_StdItfReq+0x2c>
 8010d68:	2b40      	cmp	r3, #64	; 0x40
 8010d6a:	d00b      	beq.n	8010d84 <USBD_StdItfReq+0x2c>
 8010d6c:	b153      	cbz	r3, 8010d84 <USBD_StdItfReq+0x2c>
  USBD_StatusTypeDef ret = USBD_OK;
 8010d6e:	2600      	movs	r6, #0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010d70:	2180      	movs	r1, #128	; 0x80
 8010d72:	4620      	mov	r0, r4
 8010d74:	f00e fd7c 	bl	801f870 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010d78:	4620      	mov	r0, r4
 8010d7a:	4631      	mov	r1, r6
 8010d7c:	f00e fd78 	bl	801f870 <USBD_LL_StallEP>
}
 8010d80:	4630      	mov	r0, r6
 8010d82:	bd70      	pop	{r4, r5, r6, pc}
    switch (pdev->dev_state)
 8010d84:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8010d88:	3b01      	subs	r3, #1
 8010d8a:	2b02      	cmp	r3, #2
 8010d8c:	d8ef      	bhi.n	8010d6e <USBD_StdItfReq+0x16>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010d8e:	792b      	ldrb	r3, [r5, #4]
 8010d90:	2b01      	cmp	r3, #1
 8010d92:	d80f      	bhi.n	8010db4 <USBD_StdItfReq+0x5c>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010d94:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8010d98:	4629      	mov	r1, r5
 8010d9a:	4620      	mov	r0, r4
 8010d9c:	689b      	ldr	r3, [r3, #8]
 8010d9e:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8010da0:	88eb      	ldrh	r3, [r5, #6]
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010da2:	4606      	mov	r6, r0
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d1eb      	bne.n	8010d80 <USBD_StdItfReq+0x28>
 8010da8:	2800      	cmp	r0, #0
 8010daa:	d1e9      	bne.n	8010d80 <USBD_StdItfReq+0x28>
          (void)USBD_CtlSendStatus(pdev);
 8010dac:	4620      	mov	r0, r4
 8010dae:	f000 f91d 	bl	8010fec <USBD_CtlSendStatus>
 8010db2:	e7e5      	b.n	8010d80 <USBD_StdItfReq+0x28>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010db4:	2180      	movs	r1, #128	; 0x80
 8010db6:	4620      	mov	r0, r4
 8010db8:	f00e fd5a 	bl	801f870 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010dbc:	2100      	movs	r1, #0
 8010dbe:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 8010dc0:	460e      	mov	r6, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 8010dc2:	f00e fd55 	bl	801f870 <USBD_LL_StallEP>
 8010dc6:	e7db      	b.n	8010d80 <USBD_StdItfReq+0x28>

08010dc8 <USBD_StdEPReq>:
{
 8010dc8:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010dca:	780b      	ldrb	r3, [r1, #0]
{
 8010dcc:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010dce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010dd2:	2b20      	cmp	r3, #32
 8010dd4:	d027      	beq.n	8010e26 <USBD_StdEPReq+0x5e>
 8010dd6:	2b40      	cmp	r3, #64	; 0x40
 8010dd8:	d025      	beq.n	8010e26 <USBD_StdEPReq+0x5e>
 8010dda:	460c      	mov	r4, r1
 8010ddc:	b14b      	cbz	r3, 8010df2 <USBD_StdEPReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010dde:	2180      	movs	r1, #128	; 0x80
 8010de0:	4628      	mov	r0, r5
 8010de2:	f00e fd45 	bl	801f870 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010de6:	4628      	mov	r0, r5
 8010de8:	2100      	movs	r1, #0
 8010dea:	f00e fd41 	bl	801f870 <USBD_LL_StallEP>
}
 8010dee:	2000      	movs	r0, #0
 8010df0:	bd70      	pop	{r4, r5, r6, pc}
    switch (req->bRequest)
 8010df2:	784b      	ldrb	r3, [r1, #1]
  ep_addr = LOBYTE(req->wIndex);
 8010df4:	888a      	ldrh	r2, [r1, #4]
    switch (req->bRequest)
 8010df6:	2b01      	cmp	r3, #1
  ep_addr = LOBYTE(req->wIndex);
 8010df8:	b2d1      	uxtb	r1, r2
    switch (req->bRequest)
 8010dfa:	d03d      	beq.n	8010e78 <USBD_StdEPReq+0xb0>
 8010dfc:	d31a      	bcc.n	8010e34 <USBD_StdEPReq+0x6c>
 8010dfe:	2b03      	cmp	r3, #3
 8010e00:	d1ed      	bne.n	8010dde <USBD_StdEPReq+0x16>
      switch (pdev->dev_state)
 8010e02:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8010e06:	2b02      	cmp	r3, #2
 8010e08:	d04d      	beq.n	8010ea6 <USBD_StdEPReq+0xde>
 8010e0a:	2b03      	cmp	r3, #3
 8010e0c:	d1e7      	bne.n	8010dde <USBD_StdEPReq+0x16>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8010e0e:	8863      	ldrh	r3, [r4, #2]
 8010e10:	b92b      	cbnz	r3, 8010e1e <USBD_StdEPReq+0x56>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010e12:	064a      	lsls	r2, r1, #25
 8010e14:	d003      	beq.n	8010e1e <USBD_StdEPReq+0x56>
 8010e16:	88e3      	ldrh	r3, [r4, #6]
 8010e18:	b90b      	cbnz	r3, 8010e1e <USBD_StdEPReq+0x56>
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8010e1a:	f00e fd29 	bl	801f870 <USBD_LL_StallEP>
        (void)USBD_CtlSendStatus(pdev);
 8010e1e:	4628      	mov	r0, r5
 8010e20:	f000 f8e4 	bl	8010fec <USBD_CtlSendStatus>
        break;
 8010e24:	e7e3      	b.n	8010dee <USBD_StdEPReq+0x26>
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010e26:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 8010e2a:	4628      	mov	r0, r5
 8010e2c:	689b      	ldr	r3, [r3, #8]
}
 8010e2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010e32:	4718      	bx	r3
      switch (pdev->dev_state)
 8010e34:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8010e38:	2b02      	cmp	r3, #2
 8010e3a:	d03d      	beq.n	8010eb8 <USBD_StdEPReq+0xf0>
 8010e3c:	2b03      	cmp	r3, #3
 8010e3e:	d1ce      	bne.n	8010dde <USBD_StdEPReq+0x16>
 8010e40:	f001 030f 	and.w	r3, r1, #15
        if ((ep_addr & 0x80U) == 0x80U)
 8010e44:	0612      	lsls	r2, r2, #24
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010e46:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8010e4a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        if ((ep_addr & 0x80U) == 0x80U)
 8010e4e:	d445      	bmi.n	8010edc <USBD_StdEPReq+0x114>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010e50:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d0c2      	beq.n	8010dde <USBD_StdEPReq+0x16>
 8010e58:	f001 037f 	and.w	r3, r1, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010e5c:	2414      	movs	r4, #20
 8010e5e:	fb04 0403 	mla	r4, r4, r3, r0
 8010e62:	f504 74aa 	add.w	r4, r4, #340	; 0x154
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d144      	bne.n	8010ef4 <USBD_StdEPReq+0x12c>
            pep->status = 0x0001U;
 8010e6a:	6023      	str	r3, [r4, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010e6c:	4621      	mov	r1, r4
 8010e6e:	4628      	mov	r0, r5
 8010e70:	2202      	movs	r2, #2
 8010e72:	f000 f88d 	bl	8010f90 <USBD_CtlSendData>
          break;
 8010e76:	e7ba      	b.n	8010dee <USBD_StdEPReq+0x26>
      switch (pdev->dev_state)
 8010e78:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8010e7c:	2b02      	cmp	r3, #2
 8010e7e:	d012      	beq.n	8010ea6 <USBD_StdEPReq+0xde>
 8010e80:	2b03      	cmp	r3, #3
 8010e82:	d1ac      	bne.n	8010dde <USBD_StdEPReq+0x16>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8010e84:	8863      	ldrh	r3, [r4, #2]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d1b1      	bne.n	8010dee <USBD_StdEPReq+0x26>
          if ((ep_addr & 0x7FU) != 0x00U)
 8010e8a:	064e      	lsls	r6, r1, #25
 8010e8c:	d001      	beq.n	8010e92 <USBD_StdEPReq+0xca>
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010e8e:	f00e fcfd 	bl	801f88c <USBD_LL_ClearStallEP>
          (void)USBD_CtlSendStatus(pdev);
 8010e92:	4628      	mov	r0, r5
 8010e94:	f000 f8aa 	bl	8010fec <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010e98:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 8010e9c:	4621      	mov	r1, r4
 8010e9e:	4628      	mov	r0, r5
 8010ea0:	689b      	ldr	r3, [r3, #8]
 8010ea2:	4798      	blx	r3
 8010ea4:	e7a3      	b.n	8010dee <USBD_StdEPReq+0x26>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010ea6:	064b      	lsls	r3, r1, #25
 8010ea8:	d099      	beq.n	8010dde <USBD_StdEPReq+0x16>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8010eaa:	f00e fce1 	bl	801f870 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010eae:	4628      	mov	r0, r5
 8010eb0:	2180      	movs	r1, #128	; 0x80
 8010eb2:	f00e fcdd 	bl	801f870 <USBD_LL_StallEP>
 8010eb6:	e79a      	b.n	8010dee <USBD_StdEPReq+0x26>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010eb8:	0648      	lsls	r0, r1, #25
 8010eba:	d190      	bne.n	8010dde <USBD_StdEPReq+0x16>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010ebc:	0611      	lsls	r1, r2, #24
        pep->status = 0x0000U;
 8010ebe:	f04f 0400 	mov.w	r4, #0
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010ec2:	4628      	mov	r0, r5
 8010ec4:	f04f 0202 	mov.w	r2, #2
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010ec8:	bf4c      	ite	mi
 8010eca:	f105 0314 	addmi.w	r3, r5, #20
 8010ece:	f505 73aa 	addpl.w	r3, r5, #340	; 0x154
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010ed2:	4619      	mov	r1, r3
        pep->status = 0x0000U;
 8010ed4:	601c      	str	r4, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010ed6:	f000 f85b 	bl	8010f90 <USBD_CtlSendData>
        break;
 8010eda:	e788      	b.n	8010dee <USBD_StdEPReq+0x26>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010edc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	f43f af7d 	beq.w	8010dde <USBD_StdEPReq+0x16>
 8010ee4:	f001 037f 	and.w	r3, r1, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010ee8:	1c5c      	adds	r4, r3, #1
 8010eea:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8010eee:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8010ef2:	e7b8      	b.n	8010e66 <USBD_StdEPReq+0x9e>
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010ef4:	4628      	mov	r0, r5
 8010ef6:	f00e fcd7 	bl	801f8a8 <USBD_LL_IsStallEP>
 8010efa:	b108      	cbz	r0, 8010f00 <USBD_StdEPReq+0x138>
            pep->status = 0x0001U;
 8010efc:	2301      	movs	r3, #1
 8010efe:	e7b4      	b.n	8010e6a <USBD_StdEPReq+0xa2>
            pep->status = 0x0000U;
 8010f00:	6020      	str	r0, [r4, #0]
 8010f02:	e7b3      	b.n	8010e6c <USBD_StdEPReq+0xa4>

08010f04 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8010f04:	780b      	ldrb	r3, [r1, #0]
 8010f06:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8010f08:	784b      	ldrb	r3, [r1, #1]
 8010f0a:	7043      	strb	r3, [r0, #1]

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8010f0c:	78ca      	ldrb	r2, [r1, #3]
 8010f0e:	788b      	ldrb	r3, [r1, #2]
 8010f10:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 8010f14:	8043      	strh	r3, [r0, #2]
 8010f16:	794a      	ldrb	r2, [r1, #5]
 8010f18:	790b      	ldrb	r3, [r1, #4]
 8010f1a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 8010f1e:	8083      	strh	r3, [r0, #4]
 8010f20:	79ca      	ldrb	r2, [r1, #7]
 8010f22:	798b      	ldrb	r3, [r1, #6]
 8010f24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 8010f28:	80c3      	strh	r3, [r0, #6]
}
 8010f2a:	4770      	bx	lr

08010f2c <USBD_CtlError>:
{
 8010f2c:	b510      	push	{r4, lr}
 8010f2e:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010f30:	2180      	movs	r1, #128	; 0x80
 8010f32:	f00e fc9d 	bl	801f870 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010f36:	2100      	movs	r1, #0
 8010f38:	4620      	mov	r0, r4
}
 8010f3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8010f3e:	f00e bc97 	b.w	801f870 <USBD_LL_StallEP>
 8010f42:	bf00      	nop

08010f44 <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 8010f44:	b300      	cbz	r0, 8010f88 <USBD_GetString+0x44>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8010f46:	7803      	ldrb	r3, [r0, #0]
{
 8010f48:	b430      	push	{r4, r5}
  while (*pbuff != (uint8_t)'\0')
 8010f4a:	b1f3      	cbz	r3, 8010f8a <USBD_GetString+0x46>
 8010f4c:	4604      	mov	r4, r0
  uint8_t  len = 0U;
 8010f4e:	2300      	movs	r3, #0
  {
    len++;
 8010f50:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 8010f52:	f814 5f01 	ldrb.w	r5, [r4, #1]!
    len++;
 8010f56:	b2db      	uxtb	r3, r3
  while (*pbuff != (uint8_t)'\0')
 8010f58:	2d00      	cmp	r5, #0
 8010f5a:	d1f9      	bne.n	8010f50 <USBD_GetString+0xc>
 8010f5c:	005b      	lsls	r3, r3, #1
 8010f5e:	3302      	adds	r3, #2
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010f60:	2403      	movs	r4, #3
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010f62:	8013      	strh	r3, [r2, #0]
  unicode[idx] = *(uint8_t *)len;
 8010f64:	700b      	strb	r3, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010f66:	704c      	strb	r4, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 8010f68:	7804      	ldrb	r4, [r0, #0]
 8010f6a:	b15c      	cbz	r4, 8010f84 <USBD_GetString+0x40>
  idx++;
 8010f6c:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 8010f6e:	2500      	movs	r5, #0
    idx++;
 8010f70:	1c5a      	adds	r2, r3, #1
    unicode[idx] = *pdesc;
 8010f72:	54cc      	strb	r4, [r1, r3]
    idx++;
 8010f74:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 8010f76:	b2d2      	uxtb	r2, r2
    idx++;
 8010f78:	b2db      	uxtb	r3, r3
    unicode[idx] = 0U;
 8010f7a:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 8010f7c:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8010f80:	2c00      	cmp	r4, #0
 8010f82:	d1f5      	bne.n	8010f70 <USBD_GetString+0x2c>
}
 8010f84:	bc30      	pop	{r4, r5}
 8010f86:	4770      	bx	lr
 8010f88:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 8010f8a:	2302      	movs	r3, #2
 8010f8c:	e7e8      	b.n	8010f60 <USBD_GetString+0x1c>
 8010f8e:	bf00      	nop

08010f90 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010f90:	b570      	push	{r4, r5, r6, lr}
 8010f92:	4615      	mov	r5, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010f94:	2602      	movs	r6, #2
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010f96:	460a      	mov	r2, r1
 8010f98:	2100      	movs	r1, #0
  pdev->ep_in[0].total_length = len;
 8010f9a:	6185      	str	r5, [r0, #24]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010f9c:	462b      	mov	r3, r5
  pdev->ep_in[0].rem_length = len;
 8010f9e:	61c5      	str	r5, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010fa0:	f8c0 6294 	str.w	r6, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010fa4:	f00e fca2 	bl	801f8ec <USBD_LL_Transmit>

  return USBD_OK;
}
 8010fa8:	2000      	movs	r0, #0
 8010faa:	bd70      	pop	{r4, r5, r6, pc}

08010fac <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010fac:	b508      	push	{r3, lr}
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010fae:	4613      	mov	r3, r2
 8010fb0:	460a      	mov	r2, r1
 8010fb2:	2100      	movs	r1, #0
 8010fb4:	f00e fc9a 	bl	801f8ec <USBD_LL_Transmit>

  return USBD_OK;
}
 8010fb8:	2000      	movs	r0, #0
 8010fba:	bd08      	pop	{r3, pc}

08010fbc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8010fbc:	b570      	push	{r4, r5, r6, lr}
 8010fbe:	4615      	mov	r5, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010fc0:	2603      	movs	r6, #3
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010fc2:	460a      	mov	r2, r1
 8010fc4:	2100      	movs	r1, #0
  pdev->ep_out[0].total_length = len;
 8010fc6:	f8c0 5158 	str.w	r5, [r0, #344]	; 0x158
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010fca:	462b      	mov	r3, r5
  pdev->ep_out[0].rem_length = len;
 8010fcc:	f8c0 515c 	str.w	r5, [r0, #348]	; 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010fd0:	f8c0 6294 	str.w	r6, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010fd4:	f00e fc98 	bl	801f908 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8010fd8:	2000      	movs	r0, #0
 8010fda:	bd70      	pop	{r4, r5, r6, pc}

08010fdc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010fdc:	b508      	push	{r3, lr}
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010fde:	4613      	mov	r3, r2
 8010fe0:	460a      	mov	r2, r1
 8010fe2:	2100      	movs	r1, #0
 8010fe4:	f00e fc90 	bl	801f908 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8010fe8:	2000      	movs	r0, #0
 8010fea:	bd08      	pop	{r3, pc}

08010fec <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010fec:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010fee:	2204      	movs	r2, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010ff0:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010ff2:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010ff6:	4619      	mov	r1, r3
 8010ff8:	461a      	mov	r2, r3
 8010ffa:	f00e fc77 	bl	801f8ec <USBD_LL_Transmit>

  return USBD_OK;
}
 8010ffe:	2000      	movs	r0, #0
 8011000:	bd08      	pop	{r3, pc}
 8011002:	bf00      	nop

08011004 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8011004:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011006:	2205      	movs	r2, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011008:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801100a:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801100e:	4619      	mov	r1, r3
 8011010:	461a      	mov	r2, r3
 8011012:	f00e fc79 	bl	801f908 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8011016:	2000      	movs	r0, #0
 8011018:	bd08      	pop	{r3, pc}
 801101a:	bf00      	nop

0801101c <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 801101c:	4b11      	ldr	r3, [pc, #68]	; (8011064 <FATFS_LinkDriver+0x48>)
 801101e:	7a5a      	ldrb	r2, [r3, #9]
 8011020:	b10a      	cbz	r2, 8011026 <FATFS_LinkDriver+0xa>
  uint8_t ret = 1;
 8011022:	2001      	movs	r0, #1
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
}
 8011024:	4770      	bx	lr
{
 8011026:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011028:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    disk.is_initialized[disk.nbr] = 0;
 801102c:	f893 e009 	ldrb.w	lr, [r3, #9]
    disk.drv[disk.nbr] = drv;
 8011030:	7a5e      	ldrb	r6, [r3, #9]
    path[1] = ':';
 8011032:	f04f 0c3a 	mov.w	ip, #58	; 0x3a
    disk.lun[disk.nbr] = lun;
 8011036:	7a5d      	ldrb	r5, [r3, #9]
    path[2] = '/';
 8011038:	272f      	movs	r7, #47	; 0x2f
    DiskNum = disk.nbr++;
 801103a:	7a5a      	ldrb	r2, [r3, #9]
    disk.drv[disk.nbr] = drv;
 801103c:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    disk.lun[disk.nbr] = lun;
 8011040:	441d      	add	r5, r3
    disk.is_initialized[disk.nbr] = 0;
 8011042:	f803 400e 	strb.w	r4, [r3, lr]
    DiskNum = disk.nbr++;
 8011046:	b2d2      	uxtb	r2, r2
    disk.drv[disk.nbr] = drv;
 8011048:	6070      	str	r0, [r6, #4]
    disk.lun[disk.nbr] = lun;
 801104a:	722c      	strb	r4, [r5, #8]
    DiskNum = disk.nbr++;
 801104c:	1c50      	adds	r0, r2, #1
    path[0] = DiskNum + '0';
 801104e:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 8011050:	b2c0      	uxtb	r0, r0
 8011052:	7258      	strb	r0, [r3, #9]
    path[3] = 0;
 8011054:	4620      	mov	r0, r4
    path[0] = DiskNum + '0';
 8011056:	700a      	strb	r2, [r1, #0]
    path[3] = 0;
 8011058:	70cc      	strb	r4, [r1, #3]
    path[1] = ':';
 801105a:	f881 c001 	strb.w	ip, [r1, #1]
    path[2] = '/';
 801105e:	708f      	strb	r7, [r1, #2]
}
 8011060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011062:	bf00      	nop
 8011064:	200016f8 	.word	0x200016f8

08011068 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8011068:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 801106a:	f001 f929 	bl	80122c0 <vTaskStartScheduler>
  
  return osOK;
}
 801106e:	2000      	movs	r0, #0
 8011070:	bd08      	pop	{r3, pc}
 8011072:	bf00      	nop

08011074 <osKernelSysTick>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011074:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 8011078:	b90b      	cbnz	r3, 801107e <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
  }
  else {
    return xTaskGetTickCount();
 801107a:	f001 b971 	b.w	8012360 <xTaskGetTickCount>
    return xTaskGetTickCountFromISR();
 801107e:	f001 b975 	b.w	801236c <xTaskGetTickCountFromISR>
 8011082:	bf00      	nop

08011084 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8011084:	b570      	push	{r4, r5, r6, lr}
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8011086:	6945      	ldr	r5, [r0, #20]
{
 8011088:	460b      	mov	r3, r1
 801108a:	b086      	sub	sp, #24
 801108c:	6902      	ldr	r2, [r0, #16]
 801108e:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8011092:	e9d0 1600 	ldrd	r1, r6, [r0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8011096:	b16d      	cbz	r5, 80110b4 <osThreadCreate+0x30>
 8011098:	6980      	ldr	r0, [r0, #24]
 801109a:	b158      	cbz	r0, 80110b4 <osThreadCreate+0x30>
  if (priority != osPriorityError) {
 801109c:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 801109e:	bf14      	ite	ne
 80110a0:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80110a2:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80110a4:	e9cd 5001 	strd	r5, r0, [sp, #4]
 80110a8:	9400      	str	r4, [sp, #0]
 80110aa:	4630      	mov	r0, r6
 80110ac:	f001 f896 	bl	80121dc <xTaskCreateStatic>
    return NULL;
  }     
#endif
  
  return handle;
}
 80110b0:	b006      	add	sp, #24
 80110b2:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 80110b4:	2c84      	cmp	r4, #132	; 0x84
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80110b6:	ad05      	add	r5, sp, #20
 80110b8:	b292      	uxth	r2, r2
 80110ba:	4630      	mov	r0, r6
    fpriority += (priority - osPriorityIdle);
 80110bc:	bf14      	ite	ne
 80110be:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80110c0:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80110c2:	9501      	str	r5, [sp, #4]
 80110c4:	9400      	str	r4, [sp, #0]
 80110c6:	f001 f8c7 	bl	8012258 <xTaskCreate>
 80110ca:	2801      	cmp	r0, #1
 80110cc:	bf0c      	ite	eq
 80110ce:	9805      	ldreq	r0, [sp, #20]
      return NULL;
 80110d0:	2000      	movne	r0, #0
}
 80110d2:	b006      	add	sp, #24
 80110d4:	bd70      	pop	{r4, r5, r6, pc}
 80110d6:	bf00      	nop

080110d8 <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80110d8:	2800      	cmp	r0, #0
 80110da:	bf08      	it	eq
 80110dc:	2001      	moveq	r0, #1
{
 80110de:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80110e0:	f001 fa7c 	bl	80125dc <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80110e4:	2000      	movs	r0, #0
 80110e6:	bd08      	pop	{r3, pc}

080110e8 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80110e8:	f1a1 0101 	sub.w	r1, r1, #1
 80110ec:	4613      	mov	r3, r2
 80110ee:	b510      	push	{r4, lr}
 80110f0:	fab1 f181 	clz	r1, r1
 80110f4:	b082      	sub	sp, #8
 80110f6:	e9d0 2400 	ldrd	r2, r4, [r0]
 80110fa:	0949      	lsrs	r1, r1, #5
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 80110fc:	b144      	cbz	r4, 8011110 <osTimerCreate+0x28>
    return xTimerCreateStatic((const char *)"",
 80110fe:	4808      	ldr	r0, [pc, #32]	; (8011120 <osTimerCreate+0x38>)
 8011100:	e9cd 2400 	strd	r2, r4, [sp]
 8011104:	460a      	mov	r2, r1
 8011106:	2101      	movs	r1, #1
 8011108:	f001 fe5a 	bl	8012dc0 <xTimerCreateStatic>
#endif

#else 
	return NULL;
#endif
}
 801110c:	b002      	add	sp, #8
 801110e:	bd10      	pop	{r4, pc}
    return xTimerCreate((const char *)"",
 8011110:	9200      	str	r2, [sp, #0]
 8011112:	460a      	mov	r2, r1
 8011114:	2101      	movs	r1, #1
 8011116:	4802      	ldr	r0, [pc, #8]	; (8011120 <osTimerCreate+0x38>)
 8011118:	f001 fe22 	bl	8012d60 <xTimerCreate>
}
 801111c:	b002      	add	sp, #8
 801111e:	bd10      	pop	{r4, pc}
 8011120:	08024bf0 	.word	0x08024bf0

08011124 <osMutexCreate>:
{
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8011124:	6841      	ldr	r1, [r0, #4]
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8011126:	2001      	movs	r0, #1
  if (mutex_def->controlblock != NULL) {
 8011128:	b109      	cbz	r1, 801112e <osMutexCreate+0xa>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 801112a:	f000 bbb5 	b.w	8011898 <xQueueCreateMutexStatic>
     }
  else {
    return xSemaphoreCreateMutex(); 
 801112e:	f000 bbc9 	b.w	80118c4 <xQueueCreateMutex>
 8011132:	bf00      	nop

08011134 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8011134:	b510      	push	{r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8011136:	2400      	movs	r4, #0
{
 8011138:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;  
 801113a:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 801113c:	b300      	cbz	r0, 8011180 <osMutexWait+0x4c>
 801113e:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8011142:	b933      	cbnz	r3, 8011152 <osMutexWait+0x1e>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8011144:	f000 fd64 	bl	8011c10 <xQueueSemaphoreTake>
 8011148:	2801      	cmp	r0, #1
 801114a:	d116      	bne.n	801117a <osMutexWait+0x46>
    return osErrorOS;
  }
  
  return osOK;
 801114c:	2000      	movs	r0, #0
}
 801114e:	b002      	add	sp, #8
 8011150:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8011152:	aa01      	add	r2, sp, #4
 8011154:	4621      	mov	r1, r4
 8011156:	f000 fe31 	bl	8011dbc <xQueueReceiveFromISR>
 801115a:	2801      	cmp	r0, #1
 801115c:	d10d      	bne.n	801117a <osMutexWait+0x46>
	portEND_SWITCHING_ISR(taskWoken);
 801115e:	9b01      	ldr	r3, [sp, #4]
 8011160:	2b00      	cmp	r3, #0
 8011162:	d0f3      	beq.n	801114c <osMutexWait+0x18>
 8011164:	4b08      	ldr	r3, [pc, #32]	; (8011188 <osMutexWait+0x54>)
 8011166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801116a:	601a      	str	r2, [r3, #0]
 801116c:	f3bf 8f4f 	dsb	sy
 8011170:	f3bf 8f6f 	isb	sy
  return osOK;
 8011174:	4620      	mov	r0, r4
}
 8011176:	b002      	add	sp, #8
 8011178:	bd10      	pop	{r4, pc}
      return osErrorOS;
 801117a:	20ff      	movs	r0, #255	; 0xff
}
 801117c:	b002      	add	sp, #8
 801117e:	bd10      	pop	{r4, pc}
    return osErrorParameter;
 8011180:	2080      	movs	r0, #128	; 0x80
}
 8011182:	b002      	add	sp, #8
 8011184:	bd10      	pop	{r4, pc}
 8011186:	bf00      	nop
 8011188:	e000ed04 	.word	0xe000ed04

0801118c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 801118c:	b510      	push	{r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 801118e:	2400      	movs	r4, #0
{
 8011190:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;
 8011192:	9401      	str	r4, [sp, #4]
 8011194:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 8011198:	b14b      	cbz	r3, 80111ae <osMutexRelease+0x22>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 801119a:	a901      	add	r1, sp, #4
 801119c:	f000 fc16 	bl	80119cc <xQueueGiveFromISR>
 80111a0:	2801      	cmp	r0, #1
 80111a2:	d10a      	bne.n	80111ba <osMutexRelease+0x2e>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 80111a4:	9b01      	ldr	r3, [sp, #4]
 80111a6:	b95b      	cbnz	r3, 80111c0 <osMutexRelease+0x34>
  osStatus result = osOK;
 80111a8:	2000      	movs	r0, #0
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 80111aa:	b002      	add	sp, #8
 80111ac:	bd10      	pop	{r4, pc}
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80111ae:	461a      	mov	r2, r3
 80111b0:	4619      	mov	r1, r3
 80111b2:	f000 faa7 	bl	8011704 <xQueueGenericSend>
 80111b6:	2801      	cmp	r0, #1
 80111b8:	d0f6      	beq.n	80111a8 <osMutexRelease+0x1c>
    result = osErrorOS;
 80111ba:	20ff      	movs	r0, #255	; 0xff
}
 80111bc:	b002      	add	sp, #8
 80111be:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 80111c0:	4b05      	ldr	r3, [pc, #20]	; (80111d8 <osMutexRelease+0x4c>)
 80111c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80111c6:	601a      	str	r2, [r3, #0]
 80111c8:	f3bf 8f4f 	dsb	sy
 80111cc:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 80111d0:	4620      	mov	r0, r4
}
 80111d2:	b002      	add	sp, #8
 80111d4:	bd10      	pop	{r4, pc}
 80111d6:	bf00      	nop
 80111d8:	e000ed04 	.word	0xe000ed04

080111dc <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80111dc:	b530      	push	{r4, r5, lr}
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80111de:	6844      	ldr	r4, [r0, #4]
{ 
 80111e0:	b083      	sub	sp, #12
  if (semaphore_def->controlblock != NULL){
 80111e2:	b16c      	cbz	r4, 8011200 <osSemaphoreCreate+0x24>
    if (count == 1) {
 80111e4:	2901      	cmp	r1, #1
 80111e6:	d11d      	bne.n	8011224 <osSemaphoreCreate+0x48>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80111e8:	2503      	movs	r5, #3
 80111ea:	2200      	movs	r2, #0
 80111ec:	4608      	mov	r0, r1
 80111ee:	4623      	mov	r3, r4
 80111f0:	9500      	str	r5, [sp, #0]
 80111f2:	4611      	mov	r1, r2
 80111f4:	f000 f9fc 	bl	80115f0 <xQueueGenericCreateStatic>
 80111f8:	4605      	mov	r5, r0
#else
    return NULL;
#endif
  }
#endif
}
 80111fa:	4628      	mov	r0, r5
 80111fc:	b003      	add	sp, #12
 80111fe:	bd30      	pop	{r4, r5, pc}
    if (count == 1) {
 8011200:	2901      	cmp	r1, #1
 8011202:	d113      	bne.n	801122c <osSemaphoreCreate+0x50>
      vSemaphoreCreateBinary(sema);
 8011204:	4608      	mov	r0, r1
 8011206:	2203      	movs	r2, #3
 8011208:	4621      	mov	r1, r4
 801120a:	f000 fa49 	bl	80116a0 <xQueueGenericCreate>
 801120e:	4605      	mov	r5, r0
 8011210:	2800      	cmp	r0, #0
 8011212:	d0f2      	beq.n	80111fa <osSemaphoreCreate+0x1e>
 8011214:	4623      	mov	r3, r4
 8011216:	4622      	mov	r2, r4
 8011218:	4621      	mov	r1, r4
 801121a:	f000 fa73 	bl	8011704 <xQueueGenericSend>
}
 801121e:	4628      	mov	r0, r5
 8011220:	b003      	add	sp, #12
 8011222:	bd30      	pop	{r4, r5, pc}
      return NULL;
 8011224:	2500      	movs	r5, #0
}
 8011226:	4628      	mov	r0, r5
 8011228:	b003      	add	sp, #12
 801122a:	bd30      	pop	{r4, r5, pc}
      return NULL;
 801122c:	4625      	mov	r5, r4
 801122e:	e7e4      	b.n	80111fa <osSemaphoreCreate+0x1e>

08011230 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8011230:	b510      	push	{r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8011232:	2400      	movs	r4, #0
{
 8011234:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;  
 8011236:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 8011238:	b300      	cbz	r0, 801127c <osSemaphoreWait+0x4c>
 801123a:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 801123e:	b933      	cbnz	r3, 801124e <osSemaphoreWait+0x1e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8011240:	f000 fce6 	bl	8011c10 <xQueueSemaphoreTake>
 8011244:	2801      	cmp	r0, #1
 8011246:	d116      	bne.n	8011276 <osSemaphoreWait+0x46>
    return osErrorOS;
  }
  
  return osOK;
 8011248:	2000      	movs	r0, #0
}
 801124a:	b002      	add	sp, #8
 801124c:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801124e:	aa01      	add	r2, sp, #4
 8011250:	4621      	mov	r1, r4
 8011252:	f000 fdb3 	bl	8011dbc <xQueueReceiveFromISR>
 8011256:	2801      	cmp	r0, #1
 8011258:	d10d      	bne.n	8011276 <osSemaphoreWait+0x46>
	portEND_SWITCHING_ISR(taskWoken);
 801125a:	9b01      	ldr	r3, [sp, #4]
 801125c:	2b00      	cmp	r3, #0
 801125e:	d0f3      	beq.n	8011248 <osSemaphoreWait+0x18>
 8011260:	4b08      	ldr	r3, [pc, #32]	; (8011284 <osSemaphoreWait+0x54>)
 8011262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011266:	601a      	str	r2, [r3, #0]
 8011268:	f3bf 8f4f 	dsb	sy
 801126c:	f3bf 8f6f 	isb	sy
  return osOK;
 8011270:	4620      	mov	r0, r4
}
 8011272:	b002      	add	sp, #8
 8011274:	bd10      	pop	{r4, pc}
      return osErrorOS;
 8011276:	20ff      	movs	r0, #255	; 0xff
}
 8011278:	b002      	add	sp, #8
 801127a:	bd10      	pop	{r4, pc}
    return osErrorParameter;
 801127c:	2080      	movs	r0, #128	; 0x80
}
 801127e:	b002      	add	sp, #8
 8011280:	bd10      	pop	{r4, pc}
 8011282:	bf00      	nop
 8011284:	e000ed04 	.word	0xe000ed04

08011288 <osSemaphoreRelease>:
 8011288:	f7ff bf80 	b.w	801118c <osMutexRelease>

0801128c <osMessageCreate>:
{
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 801128c:	6882      	ldr	r2, [r0, #8]
{
 801128e:	b530      	push	{r4, r5, lr}
 8011290:	e9d0 4100 	ldrd	r4, r1, [r0]
 8011294:	b083      	sub	sp, #12
  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8011296:	b10a      	cbz	r2, 801129c <osMessageCreate+0x10>
 8011298:	68c3      	ldr	r3, [r0, #12]
 801129a:	b933      	cbnz	r3, 80112aa <osMessageCreate+0x1e>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 801129c:	4620      	mov	r0, r4
 801129e:	2200      	movs	r2, #0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80112a0:	b003      	add	sp, #12
 80112a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80112a6:	f000 b9fb 	b.w	80116a0 <xQueueGenericCreate>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80112aa:	2500      	movs	r5, #0
 80112ac:	4620      	mov	r0, r4
 80112ae:	9500      	str	r5, [sp, #0]
 80112b0:	f000 f99e 	bl	80115f0 <xQueueGenericCreateStatic>
}
 80112b4:	b003      	add	sp, #12
 80112b6:	bd30      	pop	{r4, r5, pc}

080112b8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80112b8:	b510      	push	{r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 80112ba:	2400      	movs	r4, #0
{
 80112bc:	b084      	sub	sp, #16
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
 80112be:	42a2      	cmp	r2, r4
 80112c0:	bf08      	it	eq
 80112c2:	2201      	moveq	r2, #1
{
 80112c4:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80112c6:	9403      	str	r4, [sp, #12]
 80112c8:	f3ef 8305 	mrs	r3, IPSR
  }
  
  if (inHandlerMode()) {
 80112cc:	b15b      	cbz	r3, 80112e6 <osMessagePut+0x2e>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80112ce:	4623      	mov	r3, r4
 80112d0:	aa03      	add	r2, sp, #12
 80112d2:	a901      	add	r1, sp, #4
 80112d4:	f000 fb08 	bl	80118e8 <xQueueGenericSendFromISR>
 80112d8:	2801      	cmp	r0, #1
 80112da:	d109      	bne.n	80112f0 <osMessagePut+0x38>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 80112dc:	9b03      	ldr	r3, [sp, #12]
 80112de:	b953      	cbnz	r3, 80112f6 <osMessagePut+0x3e>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 80112e0:	2000      	movs	r0, #0
}
 80112e2:	b004      	add	sp, #16
 80112e4:	bd10      	pop	{r4, pc}
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80112e6:	a901      	add	r1, sp, #4
 80112e8:	f000 fa0c 	bl	8011704 <xQueueGenericSend>
 80112ec:	2801      	cmp	r0, #1
 80112ee:	d0f7      	beq.n	80112e0 <osMessagePut+0x28>
      return osErrorOS;
 80112f0:	20ff      	movs	r0, #255	; 0xff
}
 80112f2:	b004      	add	sp, #16
 80112f4:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 80112f6:	4b05      	ldr	r3, [pc, #20]	; (801130c <osMessagePut+0x54>)
 80112f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80112fc:	601a      	str	r2, [r3, #0]
 80112fe:	f3bf 8f4f 	dsb	sy
 8011302:	f3bf 8f6f 	isb	sy
  return osOK;
 8011306:	4620      	mov	r0, r4
}
 8011308:	b004      	add	sp, #16
 801130a:	bd10      	pop	{r4, pc}
 801130c:	e000ed04 	.word	0xe000ed04

08011310 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8011310:	b570      	push	{r4, r5, r6, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 8011312:	2500      	movs	r5, #0
{
 8011314:	b084      	sub	sp, #16
 8011316:	4604      	mov	r4, r0
  event.value.v = 0;
 8011318:	e9cd 5102 	strd	r5, r1, [sp, #8]
  
  if (queue_id == NULL) {
 801131c:	b359      	cbz	r1, 8011376 <osMessageGet+0x66>
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 801131e:	9500      	str	r5, [sp, #0]
 8011320:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8011324:	b99b      	cbnz	r3, 801134e <osMessageGet+0x3e>
      event.status = osOK;
    }
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8011326:	4608      	mov	r0, r1
 8011328:	a902      	add	r1, sp, #8
 801132a:	4616      	mov	r6, r2
 801132c:	f000 fbae 	bl	8011a8c <xQueueReceive>
 8011330:	2801      	cmp	r0, #1
 8011332:	d02e      	beq.n	8011392 <osMessageGet+0x82>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8011334:	2e00      	cmp	r6, #0
 8011336:	bf0c      	ite	eq
 8011338:	2300      	moveq	r3, #0
 801133a:	2340      	movne	r3, #64	; 0x40
 801133c:	9301      	str	r3, [sp, #4]
    }
  }
  
  return event;
 801133e:	ab04      	add	r3, sp, #16
 8011340:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8011344:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8011348:	4620      	mov	r0, r4
 801134a:	b004      	add	sp, #16
 801134c:	bd70      	pop	{r4, r5, r6, pc}
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 801134e:	4608      	mov	r0, r1
 8011350:	466a      	mov	r2, sp
 8011352:	a902      	add	r1, sp, #8
 8011354:	f000 fd32 	bl	8011dbc <xQueueReceiveFromISR>
 8011358:	2801      	cmp	r0, #1
 801135a:	d017      	beq.n	801138c <osMessageGet+0x7c>
      event.status = osOK;
 801135c:	9501      	str	r5, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 801135e:	9b00      	ldr	r3, [sp, #0]
 8011360:	2b00      	cmp	r3, #0
 8011362:	d0ec      	beq.n	801133e <osMessageGet+0x2e>
 8011364:	4b0c      	ldr	r3, [pc, #48]	; (8011398 <osMessageGet+0x88>)
 8011366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801136a:	601a      	str	r2, [r3, #0]
 801136c:	f3bf 8f4f 	dsb	sy
 8011370:	f3bf 8f6f 	isb	sy
 8011374:	e7e3      	b.n	801133e <osMessageGet+0x2e>
    event.status = osErrorParameter;
 8011376:	ab04      	add	r3, sp, #16
 8011378:	2280      	movs	r2, #128	; 0x80
 801137a:	f843 2d0c 	str.w	r2, [r3, #-12]!
    return event;
 801137e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011382:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8011386:	4620      	mov	r0, r4
 8011388:	b004      	add	sp, #16
 801138a:	bd70      	pop	{r4, r5, r6, pc}
      event.status = osEventMessage;
 801138c:	2310      	movs	r3, #16
 801138e:	9301      	str	r3, [sp, #4]
 8011390:	e7e5      	b.n	801135e <osMessageGet+0x4e>
      event.status = osEventMessage;
 8011392:	2310      	movs	r3, #16
 8011394:	9301      	str	r3, [sp, #4]
 8011396:	e7d2      	b.n	801133e <osMessageGet+0x2e>
 8011398:	e000ed04 	.word	0xe000ed04

0801139c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801139c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80113a0:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80113a4:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80113a6:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80113a8:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80113aa:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80113ac:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80113b0:	4770      	bx	lr
 80113b2:	bf00      	nop

080113b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80113b4:	2300      	movs	r3, #0
 80113b6:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80113b8:	4770      	bx	lr
 80113ba:	bf00      	nop

080113bc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80113bc:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80113be:	6802      	ldr	r2, [r0, #0]
{
 80113c0:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80113c2:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
 80113c4:	3201      	adds	r2, #1
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80113c6:	e9c1 3401 	strd	r3, r4, [r1, #4]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80113ca:	689c      	ldr	r4, [r3, #8]
 80113cc:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80113ce:	6099      	str	r1, [r3, #8]
}
 80113d0:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 80113d4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80113d6:	6002      	str	r2, [r0, #0]
}
 80113d8:	4770      	bx	lr
 80113da:	bf00      	nop

080113dc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80113dc:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80113de:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80113e0:	1c6b      	adds	r3, r5, #1
 80113e2:	d011      	beq.n	8011408 <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80113e4:	f100 0208 	add.w	r2, r0, #8
 80113e8:	e000      	b.n	80113ec <vListInsert+0x10>
 80113ea:	461a      	mov	r2, r3
 80113ec:	6853      	ldr	r3, [r2, #4]
 80113ee:	681c      	ldr	r4, [r3, #0]
 80113f0:	42ac      	cmp	r4, r5
 80113f2:	d9fa      	bls.n	80113ea <vListInsert+0xe>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80113f4:	6804      	ldr	r4, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 80113f6:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 80113f8:	3401      	adds	r4, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80113fa:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80113fc:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80113fe:	6051      	str	r1, [r2, #4]
	pxNewListItem->pxContainer = pxList;
 8011400:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8011402:	6004      	str	r4, [r0, #0]
}
 8011404:	bc30      	pop	{r4, r5}
 8011406:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8011408:	6902      	ldr	r2, [r0, #16]
 801140a:	6853      	ldr	r3, [r2, #4]
 801140c:	e7f2      	b.n	80113f4 <vListInsert+0x18>
 801140e:	bf00      	nop

08011410 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011410:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011412:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
{
 8011416:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011418:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801141a:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801141c:	6881      	ldr	r1, [r0, #8]
	if( pxList->pxIndex == pxItemToRemove )
 801141e:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 8011420:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011424:	604a      	str	r2, [r1, #4]
	( pxList->uxNumberOfItems )--;
 8011426:	681a      	ldr	r2, [r3, #0]
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011428:	bf08      	it	eq
 801142a:	6059      	streq	r1, [r3, #4]
	pxItemToRemove->pxContainer = NULL;
 801142c:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 801142e:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
 8011430:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8011432:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 8011434:	6818      	ldr	r0, [r3, #0]
}
 8011436:	4770      	bx	lr

08011438 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011438:	b570      	push	{r4, r5, r6, lr}
 801143a:	4616      	mov	r6, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801143c:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 801143e:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011440:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011442:	b92a      	cbnz	r2, 8011450 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011444:	6806      	ldr	r6, [r0, #0]
 8011446:	3501      	adds	r5, #1
 8011448:	b366      	cbz	r6, 80114a4 <prvCopyDataToQueue+0x6c>
BaseType_t xReturn = pdFALSE;
 801144a:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801144c:	63a5      	str	r5, [r4, #56]	; 0x38

	return xReturn;
}
 801144e:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8011450:	b97e      	cbnz	r6, 8011472 <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011452:	6840      	ldr	r0, [r0, #4]
 8011454:	3501      	adds	r5, #1
 8011456:	f00e fc0a 	bl	801fc6e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801145a:	6863      	ldr	r3, [r4, #4]
 801145c:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801145e:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011460:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011462:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011464:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011466:	d3f0      	bcc.n	801144a <prvCopyDataToQueue+0x12>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011468:	6823      	ldr	r3, [r4, #0]
BaseType_t xReturn = pdFALSE;
 801146a:	4630      	mov	r0, r6
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801146c:	63a5      	str	r5, [r4, #56]	; 0x38
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801146e:	6063      	str	r3, [r4, #4]
}
 8011470:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011472:	68c0      	ldr	r0, [r0, #12]
 8011474:	f00e fbfb 	bl	801fc6e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011478:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801147a:	68e3      	ldr	r3, [r4, #12]
 801147c:	4252      	negs	r2, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801147e:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011480:	4413      	add	r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011482:	428b      	cmp	r3, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011484:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011486:	d202      	bcs.n	801148e <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011488:	68a3      	ldr	r3, [r4, #8]
 801148a:	441a      	add	r2, r3
 801148c:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 801148e:	2e02      	cmp	r6, #2
 8011490:	d003      	beq.n	801149a <prvCopyDataToQueue+0x62>
 8011492:	3501      	adds	r5, #1
BaseType_t xReturn = pdFALSE;
 8011494:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011496:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8011498:	bd70      	pop	{r4, r5, r6, pc}
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801149a:	2d00      	cmp	r5, #0
 801149c:	d1d5      	bne.n	801144a <prvCopyDataToQueue+0x12>
 801149e:	2501      	movs	r5, #1
BaseType_t xReturn = pdFALSE;
 80114a0:	2000      	movs	r0, #0
 80114a2:	e7d3      	b.n	801144c <prvCopyDataToQueue+0x14>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80114a4:	6880      	ldr	r0, [r0, #8]
 80114a6:	f001 fa57 	bl	8012958 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80114aa:	60a6      	str	r6, [r4, #8]
 80114ac:	e7ce      	b.n	801144c <prvCopyDataToQueue+0x14>
 80114ae:	bf00      	nop

080114b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80114b0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80114b2:	b172      	cbz	r2, 80114d2 <prvCopyDataFromQueue+0x22>
 80114b4:	460b      	mov	r3, r1
{
 80114b6:	b410      	push	{r4}
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80114b8:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80114bc:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80114be:	42a1      	cmp	r1, r4
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80114c0:	60c1      	str	r1, [r0, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80114c2:	d301      	bcc.n	80114c8 <prvCopyDataFromQueue+0x18>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80114c4:	6801      	ldr	r1, [r0, #0]
 80114c6:	60c1      	str	r1, [r0, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80114c8:	4618      	mov	r0, r3
	}
}
 80114ca:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80114ce:	f00e bbce 	b.w	801fc6e <memcpy>
 80114d2:	4770      	bx	lr

080114d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80114d4:	b570      	push	{r4, r5, r6, lr}
 80114d6:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80114d8:	f001 feb4 	bl	8013244 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80114dc:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 80114e0:	b264      	sxtb	r4, r4

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80114e2:	2c00      	cmp	r4, #0
 80114e4:	dd16      	ble.n	8011514 <prvUnlockQueue+0x40>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80114e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80114e8:	b1a3      	cbz	r3, 8011514 <prvUnlockQueue+0x40>
 80114ea:	f105 0624 	add.w	r6, r5, #36	; 0x24
 80114ee:	e005      	b.n	80114fc <prvUnlockQueue+0x28>
 80114f0:	3c01      	subs	r4, #1
 80114f2:	b2e3      	uxtb	r3, r4
 80114f4:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80114f6:	b16b      	cbz	r3, 8011514 <prvUnlockQueue+0x40>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80114f8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80114fa:	b15b      	cbz	r3, 8011514 <prvUnlockQueue+0x40>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80114fc:	4630      	mov	r0, r6
 80114fe:	f001 f919 	bl	8012734 <xTaskRemoveFromEventList>
 8011502:	2800      	cmp	r0, #0
 8011504:	d0f4      	beq.n	80114f0 <prvUnlockQueue+0x1c>
 8011506:	3c01      	subs	r4, #1
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011508:	f001 f9b2 	bl	8012870 <vTaskMissedYield>
 801150c:	b2e3      	uxtb	r3, r4
 801150e:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011510:	2b00      	cmp	r3, #0
 8011512:	d1f1      	bne.n	80114f8 <prvUnlockQueue+0x24>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011514:	23ff      	movs	r3, #255	; 0xff
 8011516:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801151a:	f001 feb9 	bl	8013290 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801151e:	f001 fe91 	bl	8013244 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011522:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8011526:	b264      	sxtb	r4, r4

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011528:	2c00      	cmp	r4, #0
 801152a:	dd16      	ble.n	801155a <prvUnlockQueue+0x86>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801152c:	692b      	ldr	r3, [r5, #16]
 801152e:	b1a3      	cbz	r3, 801155a <prvUnlockQueue+0x86>
 8011530:	f105 0610 	add.w	r6, r5, #16
 8011534:	e005      	b.n	8011542 <prvUnlockQueue+0x6e>
 8011536:	3c01      	subs	r4, #1
 8011538:	b2e3      	uxtb	r3, r4
 801153a:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801153c:	b16b      	cbz	r3, 801155a <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801153e:	692b      	ldr	r3, [r5, #16]
 8011540:	b15b      	cbz	r3, 801155a <prvUnlockQueue+0x86>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011542:	4630      	mov	r0, r6
 8011544:	f001 f8f6 	bl	8012734 <xTaskRemoveFromEventList>
 8011548:	2800      	cmp	r0, #0
 801154a:	d0f4      	beq.n	8011536 <prvUnlockQueue+0x62>
 801154c:	3c01      	subs	r4, #1
				{
					vTaskMissedYield();
 801154e:	f001 f98f 	bl	8012870 <vTaskMissedYield>
 8011552:	b2e3      	uxtb	r3, r4
 8011554:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011556:	2b00      	cmp	r3, #0
 8011558:	d1f1      	bne.n	801153e <prvUnlockQueue+0x6a>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801155a:	23ff      	movs	r3, #255	; 0xff
 801155c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8011560:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8011564:	f001 be94 	b.w	8013290 <vPortExitCritical>

08011568 <xQueueGenericReset>:
{
 8011568:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 801156a:	b1e0      	cbz	r0, 80115a6 <xQueueGenericReset+0x3e>
 801156c:	4604      	mov	r4, r0
 801156e:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8011570:	f001 fe68 	bl	8013244 <vPortEnterCritical>
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011574:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011576:	6822      	ldr	r2, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011578:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 801157a:	20ff      	movs	r0, #255	; 0xff
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801157c:	6062      	str	r2, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
 801157e:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011582:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011586:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
 801158a:	fb03 f301 	mul.w	r3, r3, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801158e:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011590:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011592:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011594:	60a3      	str	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011596:	60e2      	str	r2, [r4, #12]
		if( xNewQueue == pdFALSE )
 8011598:	b985      	cbnz	r5, 80115bc <xQueueGenericReset+0x54>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801159a:	6923      	ldr	r3, [r4, #16]
 801159c:	b9bb      	cbnz	r3, 80115ce <xQueueGenericReset+0x66>
	taskEXIT_CRITICAL();
 801159e:	f001 fe77 	bl	8013290 <vPortExitCritical>
}
 80115a2:	2001      	movs	r0, #1
 80115a4:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80115a6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80115aa:	b672      	cpsid	i
 80115ac:	f383 8811 	msr	BASEPRI, r3
 80115b0:	f3bf 8f6f 	isb	sy
 80115b4:	f3bf 8f4f 	dsb	sy
 80115b8:	b662      	cpsie	i
 80115ba:	e7fe      	b.n	80115ba <xQueueGenericReset+0x52>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80115bc:	f104 0010 	add.w	r0, r4, #16
 80115c0:	f7ff feec 	bl	801139c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80115c4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80115c8:	f7ff fee8 	bl	801139c <vListInitialise>
 80115cc:	e7e7      	b.n	801159e <xQueueGenericReset+0x36>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80115ce:	f104 0010 	add.w	r0, r4, #16
 80115d2:	f001 f8af 	bl	8012734 <xTaskRemoveFromEventList>
 80115d6:	2800      	cmp	r0, #0
 80115d8:	d0e1      	beq.n	801159e <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 80115da:	4b04      	ldr	r3, [pc, #16]	; (80115ec <xQueueGenericReset+0x84>)
 80115dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80115e0:	601a      	str	r2, [r3, #0]
 80115e2:	f3bf 8f4f 	dsb	sy
 80115e6:	f3bf 8f6f 	isb	sy
 80115ea:	e7d8      	b.n	801159e <xQueueGenericReset+0x36>
 80115ec:	e000ed04 	.word	0xe000ed04

080115f0 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80115f0:	b950      	cbnz	r0, 8011608 <xQueueGenericCreateStatic+0x18>
 80115f2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80115f6:	b672      	cpsid	i
 80115f8:	f383 8811 	msr	BASEPRI, r3
 80115fc:	f3bf 8f6f 	isb	sy
 8011600:	f3bf 8f4f 	dsb	sy
 8011604:	b662      	cpsie	i
 8011606:	e7fe      	b.n	8011606 <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 8011608:	b163      	cbz	r3, 8011624 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801160a:	b1b2      	cbz	r2, 801163a <xQueueGenericCreateStatic+0x4a>
 801160c:	b9a9      	cbnz	r1, 801163a <xQueueGenericCreateStatic+0x4a>
 801160e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011612:	b672      	cpsid	i
 8011614:	f383 8811 	msr	BASEPRI, r3
 8011618:	f3bf 8f6f 	isb	sy
 801161c:	f3bf 8f4f 	dsb	sy
 8011620:	b662      	cpsie	i
 8011622:	e7fe      	b.n	8011622 <xQueueGenericCreateStatic+0x32>
 8011624:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011628:	b672      	cpsid	i
 801162a:	f383 8811 	msr	BASEPRI, r3
 801162e:	f3bf 8f6f 	isb	sy
 8011632:	f3bf 8f4f 	dsb	sy
 8011636:	b662      	cpsie	i
 8011638:	e7fe      	b.n	8011638 <xQueueGenericCreateStatic+0x48>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801163a:	b95a      	cbnz	r2, 8011654 <xQueueGenericCreateStatic+0x64>
 801163c:	b151      	cbz	r1, 8011654 <xQueueGenericCreateStatic+0x64>
 801163e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011642:	b672      	cpsid	i
 8011644:	f383 8811 	msr	BASEPRI, r3
 8011648:	f3bf 8f6f 	isb	sy
 801164c:	f3bf 8f4f 	dsb	sy
 8011650:	b662      	cpsie	i
 8011652:	e7fe      	b.n	8011652 <xQueueGenericCreateStatic+0x62>
	{
 8011654:	b530      	push	{r4, r5, lr}
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011656:	2448      	movs	r4, #72	; 0x48
	{
 8011658:	b083      	sub	sp, #12
			volatile size_t xSize = sizeof( StaticQueue_t );
 801165a:	9401      	str	r4, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 801165c:	9c01      	ldr	r4, [sp, #4]
 801165e:	2c48      	cmp	r4, #72	; 0x48
 8011660:	d00a      	beq.n	8011678 <xQueueGenericCreateStatic+0x88>
 8011662:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011666:	b672      	cpsid	i
 8011668:	f383 8811 	msr	BASEPRI, r3
 801166c:	f3bf 8f6f 	isb	sy
 8011670:	f3bf 8f4f 	dsb	sy
 8011674:	b662      	cpsie	i
 8011676:	e7fe      	b.n	8011676 <xQueueGenericCreateStatic+0x86>
 8011678:	461c      	mov	r4, r3
 801167a:	4613      	mov	r3, r2
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801167c:	2501      	movs	r5, #1
 801167e:	460a      	mov	r2, r1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011680:	2900      	cmp	r1, #0
 8011682:	bf08      	it	eq
 8011684:	4623      	moveq	r3, r4
	pxNewQueue->uxLength = uxQueueLength;
 8011686:	63e0      	str	r0, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011688:	4629      	mov	r1, r5
 801168a:	4620      	mov	r0, r4
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801168c:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 801168e:	6422      	str	r2, [r4, #64]	; 0x40
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011690:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011694:	9b01      	ldr	r3, [sp, #4]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011696:	f7ff ff67 	bl	8011568 <xQueueGenericReset>
	}
 801169a:	4620      	mov	r0, r4
 801169c:	b003      	add	sp, #12
 801169e:	bd30      	pop	{r4, r5, pc}

080116a0 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80116a0:	b950      	cbnz	r0, 80116b8 <xQueueGenericCreate+0x18>
 80116a2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80116a6:	b672      	cpsid	i
 80116a8:	f383 8811 	msr	BASEPRI, r3
 80116ac:	f3bf 8f6f 	isb	sy
 80116b0:	f3bf 8f4f 	dsb	sy
 80116b4:	b662      	cpsie	i
 80116b6:	e7fe      	b.n	80116b6 <xQueueGenericCreate+0x16>
	{
 80116b8:	b570      	push	{r4, r5, r6, lr}
 80116ba:	4606      	mov	r6, r0
 80116bc:	460d      	mov	r5, r1
		if( uxItemSize == ( UBaseType_t ) 0 )
 80116be:	b169      	cbz	r1, 80116dc <xQueueGenericCreate+0x3c>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80116c0:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80116c4:	3048      	adds	r0, #72	; 0x48
 80116c6:	f001 ff25 	bl	8013514 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80116ca:	4604      	mov	r4, r0
 80116cc:	b1b0      	cbz	r0, 80116fc <xQueueGenericCreate+0x5c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80116ce:	2200      	movs	r2, #0
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80116d0:	f100 0348 	add.w	r3, r0, #72	; 0x48
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80116d4:	f880 2046 	strb.w	r2, [r0, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80116d8:	6003      	str	r3, [r0, #0]
 80116da:	e007      	b.n	80116ec <xQueueGenericCreate+0x4c>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80116dc:	2048      	movs	r0, #72	; 0x48
 80116de:	f001 ff19 	bl	8013514 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80116e2:	4604      	mov	r4, r0
 80116e4:	b150      	cbz	r0, 80116fc <xQueueGenericCreate+0x5c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80116e6:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80116ea:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80116ec:	63e6      	str	r6, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80116ee:	2101      	movs	r1, #1
	pxNewQueue->uxItemSize = uxItemSize;
 80116f0:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80116f2:	4620      	mov	r0, r4
 80116f4:	f7ff ff38 	bl	8011568 <xQueueGenericReset>
	}
 80116f8:	4620      	mov	r0, r4
 80116fa:	bd70      	pop	{r4, r5, r6, pc}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80116fc:	2400      	movs	r4, #0
	}
 80116fe:	4620      	mov	r0, r4
 8011700:	bd70      	pop	{r4, r5, r6, pc}
 8011702:	bf00      	nop

08011704 <xQueueGenericSend>:
{
 8011704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011708:	b084      	sub	sp, #16
 801170a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 801170c:	2800      	cmp	r0, #0
 801170e:	f000 80a3 	beq.w	8011858 <xQueueGenericSend+0x154>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011712:	2900      	cmp	r1, #0
 8011714:	f000 8091 	beq.w	801183a <xQueueGenericSend+0x136>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011718:	2b02      	cmp	r3, #2
 801171a:	d10d      	bne.n	8011738 <xQueueGenericSend+0x34>
 801171c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801171e:	2a01      	cmp	r2, #1
 8011720:	d00a      	beq.n	8011738 <xQueueGenericSend+0x34>
 8011722:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011726:	b672      	cpsid	i
 8011728:	f383 8811 	msr	BASEPRI, r3
 801172c:	f3bf 8f6f 	isb	sy
 8011730:	f3bf 8f4f 	dsb	sy
 8011734:	b662      	cpsie	i
 8011736:	e7fe      	b.n	8011736 <xQueueGenericSend+0x32>
 8011738:	4604      	mov	r4, r0
 801173a:	461e      	mov	r6, r3
 801173c:	4689      	mov	r9, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801173e:	f001 f8a3 	bl	8012888 <xTaskGetSchedulerState>
 8011742:	b960      	cbnz	r0, 801175e <xQueueGenericSend+0x5a>
 8011744:	9b01      	ldr	r3, [sp, #4]
 8011746:	b153      	cbz	r3, 801175e <xQueueGenericSend+0x5a>
 8011748:	f04f 0330 	mov.w	r3, #48	; 0x30
 801174c:	b672      	cpsid	i
 801174e:	f383 8811 	msr	BASEPRI, r3
 8011752:	f3bf 8f6f 	isb	sy
 8011756:	f3bf 8f4f 	dsb	sy
 801175a:	b662      	cpsie	i
 801175c:	e7fe      	b.n	801175c <xQueueGenericSend+0x58>
 801175e:	f1a6 0502 	sub.w	r5, r6, #2
{
 8011762:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8011764:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8011894 <xQueueGenericSend+0x190>
 8011768:	fab5 f585 	clz	r5, r5
		prvLockQueue( pxQueue );
 801176c:	46b8      	mov	r8, r7
 801176e:	096d      	lsrs	r5, r5, #5
 8011770:	e007      	b.n	8011782 <xQueueGenericSend+0x7e>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8011772:	f001 fd8d 	bl	8013290 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8011776:	4620      	mov	r0, r4
 8011778:	f7ff feac 	bl	80114d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801177c:	f000 fea8 	bl	80124d0 <xTaskResumeAll>
 8011780:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 8011782:	f001 fd5f 	bl	8013244 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011786:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8011788:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801178a:	429a      	cmp	r2, r3
 801178c:	d33f      	bcc.n	801180e <xQueueGenericSend+0x10a>
 801178e:	2d00      	cmp	r5, #0
 8011790:	d13d      	bne.n	801180e <xQueueGenericSend+0x10a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8011792:	9b01      	ldr	r3, [sp, #4]
 8011794:	2b00      	cmp	r3, #0
 8011796:	d06a      	beq.n	801186e <xQueueGenericSend+0x16a>
				else if( xEntryTimeSet == pdFALSE )
 8011798:	b917      	cbnz	r7, 80117a0 <xQueueGenericSend+0x9c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 801179a:	a802      	add	r0, sp, #8
 801179c:	f001 f812 	bl	80127c4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80117a0:	f001 fd76 	bl	8013290 <vPortExitCritical>
		vTaskSuspendAll();
 80117a4:	f000 fdd4 	bl	8012350 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80117a8:	f001 fd4c 	bl	8013244 <vPortEnterCritical>
 80117ac:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80117b0:	2bff      	cmp	r3, #255	; 0xff
 80117b2:	d101      	bne.n	80117b8 <xQueueGenericSend+0xb4>
 80117b4:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 80117b8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80117bc:	2bff      	cmp	r3, #255	; 0xff
 80117be:	d101      	bne.n	80117c4 <xQueueGenericSend+0xc0>
 80117c0:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 80117c4:	f001 fd64 	bl	8013290 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80117c8:	a901      	add	r1, sp, #4
 80117ca:	a802      	add	r0, sp, #8
 80117cc:	f001 f806 	bl	80127dc <xTaskCheckForTimeOut>
 80117d0:	2800      	cmp	r0, #0
 80117d2:	d157      	bne.n	8011884 <xQueueGenericSend+0x180>
	taskENTER_CRITICAL();
 80117d4:	f001 fd36 	bl	8013244 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80117d8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80117da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80117dc:	429a      	cmp	r2, r3
 80117de:	d1c8      	bne.n	8011772 <xQueueGenericSend+0x6e>
	taskEXIT_CRITICAL();
 80117e0:	f001 fd56 	bl	8013290 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80117e4:	9901      	ldr	r1, [sp, #4]
 80117e6:	f104 0010 	add.w	r0, r4, #16
 80117ea:	f000 ff67 	bl	80126bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80117ee:	4620      	mov	r0, r4
 80117f0:	f7ff fe70 	bl	80114d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80117f4:	f000 fe6c 	bl	80124d0 <xTaskResumeAll>
 80117f8:	2800      	cmp	r0, #0
 80117fa:	d1c1      	bne.n	8011780 <xQueueGenericSend+0x7c>
					portYIELD_WITHIN_API();
 80117fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011800:	f8ca 3000 	str.w	r3, [sl]
 8011804:	f3bf 8f4f 	dsb	sy
 8011808:	f3bf 8f6f 	isb	sy
 801180c:	e7b8      	b.n	8011780 <xQueueGenericSend+0x7c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801180e:	4632      	mov	r2, r6
 8011810:	4649      	mov	r1, r9
 8011812:	4620      	mov	r0, r4
 8011814:	f7ff fe10 	bl	8011438 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011818:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801181a:	bb63      	cbnz	r3, 8011876 <xQueueGenericSend+0x172>
					else if( xYieldRequired != pdFALSE )
 801181c:	b138      	cbz	r0, 801182e <xQueueGenericSend+0x12a>
						queueYIELD_IF_USING_PREEMPTION();
 801181e:	4b1d      	ldr	r3, [pc, #116]	; (8011894 <xQueueGenericSend+0x190>)
 8011820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011824:	601a      	str	r2, [r3, #0]
 8011826:	f3bf 8f4f 	dsb	sy
 801182a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 801182e:	f001 fd2f 	bl	8013290 <vPortExitCritical>
				return pdPASS;
 8011832:	2001      	movs	r0, #1
}
 8011834:	b004      	add	sp, #16
 8011836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801183a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 801183c:	2a00      	cmp	r2, #0
 801183e:	f43f af6b 	beq.w	8011718 <xQueueGenericSend+0x14>
 8011842:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011846:	b672      	cpsid	i
 8011848:	f383 8811 	msr	BASEPRI, r3
 801184c:	f3bf 8f6f 	isb	sy
 8011850:	f3bf 8f4f 	dsb	sy
 8011854:	b662      	cpsie	i
 8011856:	e7fe      	b.n	8011856 <xQueueGenericSend+0x152>
 8011858:	f04f 0330 	mov.w	r3, #48	; 0x30
 801185c:	b672      	cpsid	i
 801185e:	f383 8811 	msr	BASEPRI, r3
 8011862:	f3bf 8f6f 	isb	sy
 8011866:	f3bf 8f4f 	dsb	sy
 801186a:	b662      	cpsie	i
 801186c:	e7fe      	b.n	801186c <xQueueGenericSend+0x168>
					taskEXIT_CRITICAL();
 801186e:	f001 fd0f 	bl	8013290 <vPortExitCritical>
					return errQUEUE_FULL;
 8011872:	4628      	mov	r0, r5
 8011874:	e7de      	b.n	8011834 <xQueueGenericSend+0x130>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011876:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801187a:	f000 ff5b 	bl	8012734 <xTaskRemoveFromEventList>
 801187e:	2800      	cmp	r0, #0
 8011880:	d1cd      	bne.n	801181e <xQueueGenericSend+0x11a>
 8011882:	e7d4      	b.n	801182e <xQueueGenericSend+0x12a>
			prvUnlockQueue( pxQueue );
 8011884:	4620      	mov	r0, r4
 8011886:	f7ff fe25 	bl	80114d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801188a:	f000 fe21 	bl	80124d0 <xTaskResumeAll>
			return errQUEUE_FULL;
 801188e:	2000      	movs	r0, #0
 8011890:	e7d0      	b.n	8011834 <xQueueGenericSend+0x130>
 8011892:	bf00      	nop
 8011894:	e000ed04 	.word	0xe000ed04

08011898 <xQueueCreateMutexStatic>:
	{
 8011898:	b510      	push	{r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801189a:	2200      	movs	r2, #0
	{
 801189c:	b082      	sub	sp, #8
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801189e:	460b      	mov	r3, r1
 80118a0:	9000      	str	r0, [sp, #0]
 80118a2:	4611      	mov	r1, r2
 80118a4:	2001      	movs	r0, #1
 80118a6:	f7ff fea3 	bl	80115f0 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 80118aa:	4604      	mov	r4, r0
 80118ac:	b138      	cbz	r0, 80118be <xQueueCreateMutexStatic+0x26>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80118ae:	2300      	movs	r3, #0
 80118b0:	6083      	str	r3, [r0, #8]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80118b2:	461a      	mov	r2, r3
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80118b4:	6003      	str	r3, [r0, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80118b6:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80118b8:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80118ba:	f7ff ff23 	bl	8011704 <xQueueGenericSend>
	}
 80118be:	4620      	mov	r0, r4
 80118c0:	b002      	add	sp, #8
 80118c2:	bd10      	pop	{r4, pc}

080118c4 <xQueueCreateMutex>:
	{
 80118c4:	b510      	push	{r4, lr}
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80118c6:	4602      	mov	r2, r0
 80118c8:	2100      	movs	r1, #0
 80118ca:	2001      	movs	r0, #1
 80118cc:	f7ff fee8 	bl	80116a0 <xQueueGenericCreate>
		if( pxNewQueue != NULL )
 80118d0:	4604      	mov	r4, r0
 80118d2:	b138      	cbz	r0, 80118e4 <xQueueCreateMutex+0x20>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80118d4:	2300      	movs	r3, #0
 80118d6:	6083      	str	r3, [r0, #8]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80118d8:	461a      	mov	r2, r3
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80118da:	6003      	str	r3, [r0, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80118dc:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80118de:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80118e0:	f7ff ff10 	bl	8011704 <xQueueGenericSend>
	}
 80118e4:	4620      	mov	r0, r4
 80118e6:	bd10      	pop	{r4, pc}

080118e8 <xQueueGenericSendFromISR>:
{
 80118e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80118ec:	2800      	cmp	r0, #0
 80118ee:	d03e      	beq.n	801196e <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80118f0:	b379      	cbz	r1, 8011952 <xQueueGenericSendFromISR+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80118f2:	2b02      	cmp	r3, #2
 80118f4:	d10d      	bne.n	8011912 <xQueueGenericSendFromISR+0x2a>
 80118f6:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80118f8:	2c01      	cmp	r4, #1
 80118fa:	d00a      	beq.n	8011912 <xQueueGenericSendFromISR+0x2a>
 80118fc:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011900:	b672      	cpsid	i
 8011902:	f383 8811 	msr	BASEPRI, r3
 8011906:	f3bf 8f6f 	isb	sy
 801190a:	f3bf 8f4f 	dsb	sy
 801190e:	b662      	cpsie	i
 8011910:	e7fe      	b.n	8011910 <xQueueGenericSendFromISR+0x28>
 8011912:	4604      	mov	r4, r0
 8011914:	461f      	mov	r7, r3
 8011916:	4690      	mov	r8, r2
 8011918:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801191a:	f001 fda1 	bl	8013460 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801191e:	f3ef 8611 	mrs	r6, BASEPRI
 8011922:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011926:	b672      	cpsid	i
 8011928:	f383 8811 	msr	BASEPRI, r3
 801192c:	f3bf 8f6f 	isb	sy
 8011930:	f3bf 8f4f 	dsb	sy
 8011934:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011936:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8011938:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801193a:	429a      	cmp	r2, r3
 801193c:	d322      	bcc.n	8011984 <xQueueGenericSendFromISR+0x9c>
 801193e:	f1a7 0002 	sub.w	r0, r7, #2
 8011942:	fab0 f080 	clz	r0, r0
 8011946:	0940      	lsrs	r0, r0, #5
 8011948:	b9e0      	cbnz	r0, 8011984 <xQueueGenericSendFromISR+0x9c>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801194a:	f386 8811 	msr	BASEPRI, r6
}
 801194e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011952:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8011954:	2c00      	cmp	r4, #0
 8011956:	d0cc      	beq.n	80118f2 <xQueueGenericSendFromISR+0xa>
	__asm volatile
 8011958:	f04f 0330 	mov.w	r3, #48	; 0x30
 801195c:	b672      	cpsid	i
 801195e:	f383 8811 	msr	BASEPRI, r3
 8011962:	f3bf 8f6f 	isb	sy
 8011966:	f3bf 8f4f 	dsb	sy
 801196a:	b662      	cpsie	i
 801196c:	e7fe      	b.n	801196c <xQueueGenericSendFromISR+0x84>
 801196e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011972:	b672      	cpsid	i
 8011974:	f383 8811 	msr	BASEPRI, r3
 8011978:	f3bf 8f6f 	isb	sy
 801197c:	f3bf 8f4f 	dsb	sy
 8011980:	b662      	cpsie	i
 8011982:	e7fe      	b.n	8011982 <xQueueGenericSendFromISR+0x9a>
			const int8_t cTxLock = pxQueue->cTxLock;
 8011984:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011988:	463a      	mov	r2, r7
 801198a:	4649      	mov	r1, r9
 801198c:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 801198e:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011990:	f7ff fd52 	bl	8011438 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8011994:	1c6b      	adds	r3, r5, #1
 8011996:	d008      	beq.n	80119aa <xQueueGenericSendFromISR+0xc2>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011998:	1c6b      	adds	r3, r5, #1
			xReturn = pdPASS;
 801199a:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801199c:	b25b      	sxtb	r3, r3
 801199e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
 80119a2:	f386 8811 	msr	BASEPRI, r6
}
 80119a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80119aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80119ac:	b90b      	cbnz	r3, 80119b2 <xQueueGenericSendFromISR+0xca>
			xReturn = pdPASS;
 80119ae:	2001      	movs	r0, #1
 80119b0:	e7cb      	b.n	801194a <xQueueGenericSendFromISR+0x62>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80119b2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80119b6:	f000 febd 	bl	8012734 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 80119ba:	2800      	cmp	r0, #0
 80119bc:	d0f7      	beq.n	80119ae <xQueueGenericSendFromISR+0xc6>
 80119be:	f1b8 0f00 	cmp.w	r8, #0
 80119c2:	d0f4      	beq.n	80119ae <xQueueGenericSendFromISR+0xc6>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80119c4:	2001      	movs	r0, #1
 80119c6:	f8c8 0000 	str.w	r0, [r8]
 80119ca:	e7be      	b.n	801194a <xQueueGenericSendFromISR+0x62>

080119cc <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 80119cc:	2800      	cmp	r0, #0
 80119ce:	d032      	beq.n	8011a36 <xQueueGiveFromISR+0x6a>
	configASSERT( pxQueue->uxItemSize == 0 );
 80119d0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80119d2:	b153      	cbz	r3, 80119ea <xQueueGiveFromISR+0x1e>
	__asm volatile
 80119d4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80119d8:	b672      	cpsid	i
 80119da:	f383 8811 	msr	BASEPRI, r3
 80119de:	f3bf 8f6f 	isb	sy
 80119e2:	f3bf 8f4f 	dsb	sy
 80119e6:	b662      	cpsie	i
 80119e8:	e7fe      	b.n	80119e8 <xQueueGiveFromISR+0x1c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80119ea:	6803      	ldr	r3, [r0, #0]
 80119ec:	b373      	cbz	r3, 8011a4c <xQueueGiveFromISR+0x80>
{
 80119ee:	b570      	push	{r4, r5, r6, lr}
 80119f0:	4604      	mov	r4, r0
 80119f2:	460d      	mov	r5, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80119f4:	f001 fd34 	bl	8013460 <vPortValidateInterruptPriority>
	__asm volatile
 80119f8:	f3ef 8611 	mrs	r6, BASEPRI
 80119fc:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011a00:	b672      	cpsid	i
 8011a02:	f383 8811 	msr	BASEPRI, r3
 8011a06:	f3bf 8f6f 	isb	sy
 8011a0a:	f3bf 8f4f 	dsb	sy
 8011a0e:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011a10:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8011a12:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011a14:	4293      	cmp	r3, r2
 8011a16:	d92b      	bls.n	8011a70 <xQueueGiveFromISR+0xa4>
			const int8_t cTxLock = pxQueue->cTxLock;
 8011a18:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011a1c:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 8011a1e:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011a20:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8011a22:	1c5a      	adds	r2, r3, #1
 8011a24:	d020      	beq.n	8011a68 <xQueueGiveFromISR+0x9c>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011a26:	3301      	adds	r3, #1
			xReturn = pdPASS;
 8011a28:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011a2a:	b25b      	sxtb	r3, r3
 8011a2c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
 8011a30:	f386 8811 	msr	BASEPRI, r6
}
 8011a34:	bd70      	pop	{r4, r5, r6, pc}
	__asm volatile
 8011a36:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011a3a:	b672      	cpsid	i
 8011a3c:	f383 8811 	msr	BASEPRI, r3
 8011a40:	f3bf 8f6f 	isb	sy
 8011a44:	f3bf 8f4f 	dsb	sy
 8011a48:	b662      	cpsie	i
 8011a4a:	e7fe      	b.n	8011a4a <xQueueGiveFromISR+0x7e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8011a4c:	6883      	ldr	r3, [r0, #8]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d0cd      	beq.n	80119ee <xQueueGiveFromISR+0x22>
 8011a52:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011a56:	b672      	cpsid	i
 8011a58:	f383 8811 	msr	BASEPRI, r3
 8011a5c:	f3bf 8f6f 	isb	sy
 8011a60:	f3bf 8f4f 	dsb	sy
 8011a64:	b662      	cpsie	i
 8011a66:	e7fe      	b.n	8011a66 <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011a68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011a6a:	b91b      	cbnz	r3, 8011a74 <xQueueGiveFromISR+0xa8>
			xReturn = pdPASS;
 8011a6c:	2001      	movs	r0, #1
 8011a6e:	e7df      	b.n	8011a30 <xQueueGiveFromISR+0x64>
			xReturn = errQUEUE_FULL;
 8011a70:	2000      	movs	r0, #0
 8011a72:	e7dd      	b.n	8011a30 <xQueueGiveFromISR+0x64>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011a74:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8011a78:	f000 fe5c 	bl	8012734 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8011a7c:	2d00      	cmp	r5, #0
 8011a7e:	d0f5      	beq.n	8011a6c <xQueueGiveFromISR+0xa0>
 8011a80:	2800      	cmp	r0, #0
 8011a82:	d0f3      	beq.n	8011a6c <xQueueGiveFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011a84:	2001      	movs	r0, #1
 8011a86:	6028      	str	r0, [r5, #0]
 8011a88:	e7d2      	b.n	8011a30 <xQueueGiveFromISR+0x64>
 8011a8a:	bf00      	nop

08011a8c <xQueueReceive>:
{
 8011a8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011a90:	b085      	sub	sp, #20
 8011a92:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8011a94:	2800      	cmp	r0, #0
 8011a96:	f000 809f 	beq.w	8011bd8 <xQueueReceive+0x14c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011a9a:	2900      	cmp	r1, #0
 8011a9c:	f000 808d 	beq.w	8011bba <xQueueReceive+0x12e>
 8011aa0:	4604      	mov	r4, r0
 8011aa2:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011aa4:	f000 fef0 	bl	8012888 <xTaskGetSchedulerState>
 8011aa8:	b960      	cbnz	r0, 8011ac4 <xQueueReceive+0x38>
 8011aaa:	9b01      	ldr	r3, [sp, #4]
 8011aac:	b153      	cbz	r3, 8011ac4 <xQueueReceive+0x38>
 8011aae:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011ab2:	b672      	cpsid	i
 8011ab4:	f383 8811 	msr	BASEPRI, r3
 8011ab8:	f3bf 8f6f 	isb	sy
 8011abc:	f3bf 8f4f 	dsb	sy
 8011ac0:	b662      	cpsie	i
 8011ac2:	e7fe      	b.n	8011ac2 <xQueueReceive+0x36>
		taskENTER_CRITICAL();
 8011ac4:	f001 fbbe 	bl	8013244 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011ac8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011aca:	2d00      	cmp	r5, #0
 8011acc:	d144      	bne.n	8011b58 <xQueueReceive+0xcc>
				if( xTicksToWait == ( TickType_t ) 0 )
 8011ace:	9b01      	ldr	r3, [sp, #4]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d06c      	beq.n	8011bae <xQueueReceive+0x122>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011ad4:	a802      	add	r0, sp, #8
		prvLockQueue( pxQueue );
 8011ad6:	462e      	mov	r6, r5
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011ad8:	f104 0924 	add.w	r9, r4, #36	; 0x24
					portYIELD_WITHIN_API();
 8011adc:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8011c0c <xQueueReceive+0x180>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011ae0:	f000 fe70 	bl	80127c4 <vTaskInternalSetTimeOutState>
 8011ae4:	e012      	b.n	8011b0c <xQueueReceive+0x80>
	taskENTER_CRITICAL();
 8011ae6:	f001 fbad 	bl	8013244 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011aea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d048      	beq.n	8011b82 <xQueueReceive+0xf6>
	taskEXIT_CRITICAL();
 8011af0:	f001 fbce 	bl	8013290 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8011af4:	4620      	mov	r0, r4
 8011af6:	f7ff fced 	bl	80114d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011afa:	f000 fce9 	bl	80124d0 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8011afe:	f001 fba1 	bl	8013244 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011b02:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011b04:	bb45      	cbnz	r5, 8011b58 <xQueueReceive+0xcc>
				if( xTicksToWait == ( TickType_t ) 0 )
 8011b06:	9b01      	ldr	r3, [sp, #4]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d050      	beq.n	8011bae <xQueueReceive+0x122>
		taskEXIT_CRITICAL();
 8011b0c:	f001 fbc0 	bl	8013290 <vPortExitCritical>
		vTaskSuspendAll();
 8011b10:	f000 fc1e 	bl	8012350 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011b14:	f001 fb96 	bl	8013244 <vPortEnterCritical>
 8011b18:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8011b1c:	2bff      	cmp	r3, #255	; 0xff
 8011b1e:	d02d      	beq.n	8011b7c <xQueueReceive+0xf0>
 8011b20:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8011b24:	2bff      	cmp	r3, #255	; 0xff
 8011b26:	d026      	beq.n	8011b76 <xQueueReceive+0xea>
 8011b28:	f001 fbb2 	bl	8013290 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011b2c:	a901      	add	r1, sp, #4
 8011b2e:	a802      	add	r0, sp, #8
 8011b30:	f000 fe54 	bl	80127dc <xTaskCheckForTimeOut>
 8011b34:	2800      	cmp	r0, #0
 8011b36:	d0d6      	beq.n	8011ae6 <xQueueReceive+0x5a>
			prvUnlockQueue( pxQueue );
 8011b38:	4620      	mov	r0, r4
 8011b3a:	f7ff fccb 	bl	80114d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011b3e:	f000 fcc7 	bl	80124d0 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8011b42:	f001 fb7f 	bl	8013244 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011b46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011b48:	b38b      	cbz	r3, 8011bae <xQueueReceive+0x122>
	taskEXIT_CRITICAL();
 8011b4a:	f001 fba1 	bl	8013290 <vPortExitCritical>
		taskENTER_CRITICAL();
 8011b4e:	f001 fb79 	bl	8013244 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011b52:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011b54:	2d00      	cmp	r5, #0
 8011b56:	d0d6      	beq.n	8011b06 <xQueueReceive+0x7a>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011b58:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011b5a:	4639      	mov	r1, r7
 8011b5c:	4620      	mov	r0, r4
 8011b5e:	f7ff fca7 	bl	80114b0 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011b62:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011b64:	6923      	ldr	r3, [r4, #16]
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d141      	bne.n	8011bee <xQueueReceive+0x162>
				taskEXIT_CRITICAL();
 8011b6a:	f001 fb91 	bl	8013290 <vPortExitCritical>
				return pdPASS;
 8011b6e:	2001      	movs	r0, #1
}
 8011b70:	b005      	add	sp, #20
 8011b72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		prvLockQueue( pxQueue );
 8011b76:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
 8011b7a:	e7d5      	b.n	8011b28 <xQueueReceive+0x9c>
 8011b7c:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
 8011b80:	e7ce      	b.n	8011b20 <xQueueReceive+0x94>
	taskEXIT_CRITICAL();
 8011b82:	f001 fb85 	bl	8013290 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011b86:	9901      	ldr	r1, [sp, #4]
 8011b88:	4648      	mov	r0, r9
 8011b8a:	f000 fd97 	bl	80126bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011b8e:	4620      	mov	r0, r4
 8011b90:	f7ff fca0 	bl	80114d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011b94:	f000 fc9c 	bl	80124d0 <xTaskResumeAll>
 8011b98:	2800      	cmp	r0, #0
 8011b9a:	d1d8      	bne.n	8011b4e <xQueueReceive+0xc2>
					portYIELD_WITHIN_API();
 8011b9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011ba0:	f8c8 3000 	str.w	r3, [r8]
 8011ba4:	f3bf 8f4f 	dsb	sy
 8011ba8:	f3bf 8f6f 	isb	sy
 8011bac:	e7cf      	b.n	8011b4e <xQueueReceive+0xc2>
					taskEXIT_CRITICAL();
 8011bae:	f001 fb6f 	bl	8013290 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8011bb2:	2000      	movs	r0, #0
}
 8011bb4:	b005      	add	sp, #20
 8011bb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011bba:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	f43f af6f 	beq.w	8011aa0 <xQueueReceive+0x14>
 8011bc2:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011bc6:	b672      	cpsid	i
 8011bc8:	f383 8811 	msr	BASEPRI, r3
 8011bcc:	f3bf 8f6f 	isb	sy
 8011bd0:	f3bf 8f4f 	dsb	sy
 8011bd4:	b662      	cpsie	i
 8011bd6:	e7fe      	b.n	8011bd6 <xQueueReceive+0x14a>
 8011bd8:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011bdc:	b672      	cpsid	i
 8011bde:	f383 8811 	msr	BASEPRI, r3
 8011be2:	f3bf 8f6f 	isb	sy
 8011be6:	f3bf 8f4f 	dsb	sy
 8011bea:	b662      	cpsie	i
 8011bec:	e7fe      	b.n	8011bec <xQueueReceive+0x160>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011bee:	f104 0010 	add.w	r0, r4, #16
 8011bf2:	f000 fd9f 	bl	8012734 <xTaskRemoveFromEventList>
 8011bf6:	2800      	cmp	r0, #0
 8011bf8:	d0b7      	beq.n	8011b6a <xQueueReceive+0xde>
						queueYIELD_IF_USING_PREEMPTION();
 8011bfa:	4b04      	ldr	r3, [pc, #16]	; (8011c0c <xQueueReceive+0x180>)
 8011bfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c00:	601a      	str	r2, [r3, #0]
 8011c02:	f3bf 8f4f 	dsb	sy
 8011c06:	f3bf 8f6f 	isb	sy
 8011c0a:	e7ae      	b.n	8011b6a <xQueueReceive+0xde>
 8011c0c:	e000ed04 	.word	0xe000ed04

08011c10 <xQueueSemaphoreTake>:
{
 8011c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c14:	b084      	sub	sp, #16
 8011c16:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8011c18:	b160      	cbz	r0, 8011c34 <xQueueSemaphoreTake+0x24>
	configASSERT( pxQueue->uxItemSize == 0 );
 8011c1a:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8011c1c:	b1ad      	cbz	r5, 8011c4a <xQueueSemaphoreTake+0x3a>
 8011c1e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011c22:	b672      	cpsid	i
 8011c24:	f383 8811 	msr	BASEPRI, r3
 8011c28:	f3bf 8f6f 	isb	sy
 8011c2c:	f3bf 8f4f 	dsb	sy
 8011c30:	b662      	cpsie	i
 8011c32:	e7fe      	b.n	8011c32 <xQueueSemaphoreTake+0x22>
 8011c34:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011c38:	b672      	cpsid	i
 8011c3a:	f383 8811 	msr	BASEPRI, r3
 8011c3e:	f3bf 8f6f 	isb	sy
 8011c42:	f3bf 8f4f 	dsb	sy
 8011c46:	b662      	cpsie	i
 8011c48:	e7fe      	b.n	8011c48 <xQueueSemaphoreTake+0x38>
 8011c4a:	4604      	mov	r4, r0
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011c4c:	f000 fe1c 	bl	8012888 <xTaskGetSchedulerState>
 8011c50:	b960      	cbnz	r0, 8011c6c <xQueueSemaphoreTake+0x5c>
 8011c52:	9d01      	ldr	r5, [sp, #4]
 8011c54:	b155      	cbz	r5, 8011c6c <xQueueSemaphoreTake+0x5c>
 8011c56:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011c5a:	b672      	cpsid	i
 8011c5c:	f383 8811 	msr	BASEPRI, r3
 8011c60:	f3bf 8f6f 	isb	sy
 8011c64:	f3bf 8f4f 	dsb	sy
 8011c68:	b662      	cpsie	i
 8011c6a:	e7fe      	b.n	8011c6a <xQueueSemaphoreTake+0x5a>
 8011c6c:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8011c6e:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8011c70:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8011db8 <xQueueSemaphoreTake+0x1a8>
 8011c74:	e00c      	b.n	8011c90 <xQueueSemaphoreTake+0x80>
	taskENTER_CRITICAL();
 8011c76:	f001 fae5 	bl	8013244 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011c7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d039      	beq.n	8011cf4 <xQueueSemaphoreTake+0xe4>
	taskEXIT_CRITICAL();
 8011c80:	f001 fb06 	bl	8013290 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8011c84:	4620      	mov	r0, r4
 8011c86:	f7ff fc25 	bl	80114d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011c8a:	f000 fc21 	bl	80124d0 <xTaskResumeAll>
 8011c8e:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8011c90:	f001 fad8 	bl	8013244 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8011c94:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d171      	bne.n	8011d7e <xQueueSemaphoreTake+0x16e>
				if( xTicksToWait == ( TickType_t ) 0 )
 8011c9a:	9b01      	ldr	r3, [sp, #4]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d061      	beq.n	8011d64 <xQueueSemaphoreTake+0x154>
				else if( xEntryTimeSet == pdFALSE )
 8011ca0:	b916      	cbnz	r6, 8011ca8 <xQueueSemaphoreTake+0x98>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011ca2:	a802      	add	r0, sp, #8
 8011ca4:	f000 fd8e 	bl	80127c4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8011ca8:	f001 faf2 	bl	8013290 <vPortExitCritical>
		vTaskSuspendAll();
 8011cac:	f000 fb50 	bl	8012350 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011cb0:	f001 fac8 	bl	8013244 <vPortEnterCritical>
 8011cb4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8011cb8:	2bff      	cmp	r3, #255	; 0xff
 8011cba:	d101      	bne.n	8011cc0 <xQueueSemaphoreTake+0xb0>
 8011cbc:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8011cc0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8011cc4:	2bff      	cmp	r3, #255	; 0xff
 8011cc6:	d101      	bne.n	8011ccc <xQueueSemaphoreTake+0xbc>
 8011cc8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011ccc:	f001 fae0 	bl	8013290 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011cd0:	a901      	add	r1, sp, #4
 8011cd2:	a802      	add	r0, sp, #8
 8011cd4:	f000 fd82 	bl	80127dc <xTaskCheckForTimeOut>
 8011cd8:	2800      	cmp	r0, #0
 8011cda:	d0cc      	beq.n	8011c76 <xQueueSemaphoreTake+0x66>
			prvUnlockQueue( pxQueue );
 8011cdc:	4620      	mov	r0, r4
 8011cde:	f7ff fbf9 	bl	80114d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011ce2:	f000 fbf5 	bl	80124d0 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8011ce6:	f001 faad 	bl	8013244 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011cea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011cec:	b1db      	cbz	r3, 8011d26 <xQueueSemaphoreTake+0x116>
	taskEXIT_CRITICAL();
 8011cee:	f001 facf 	bl	8013290 <vPortExitCritical>
 8011cf2:	e7cc      	b.n	8011c8e <xQueueSemaphoreTake+0x7e>
 8011cf4:	f001 facc 	bl	8013290 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011cf8:	6823      	ldr	r3, [r4, #0]
 8011cfa:	b1db      	cbz	r3, 8011d34 <xQueueSemaphoreTake+0x124>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011cfc:	9901      	ldr	r1, [sp, #4]
 8011cfe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8011d02:	f000 fcdb 	bl	80126bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011d06:	4620      	mov	r0, r4
 8011d08:	f7ff fbe4 	bl	80114d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011d0c:	f000 fbe0 	bl	80124d0 <xTaskResumeAll>
 8011d10:	2800      	cmp	r0, #0
 8011d12:	d1bc      	bne.n	8011c8e <xQueueSemaphoreTake+0x7e>
					portYIELD_WITHIN_API();
 8011d14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011d18:	f8c8 3000 	str.w	r3, [r8]
 8011d1c:	f3bf 8f4f 	dsb	sy
 8011d20:	f3bf 8f6f 	isb	sy
 8011d24:	e7b3      	b.n	8011c8e <xQueueSemaphoreTake+0x7e>
	taskEXIT_CRITICAL();
 8011d26:	f001 fab3 	bl	8013290 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 8011d2a:	b965      	cbnz	r5, 8011d46 <xQueueSemaphoreTake+0x136>
}
 8011d2c:	4628      	mov	r0, r5
 8011d2e:	b004      	add	sp, #16
 8011d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						taskENTER_CRITICAL();
 8011d34:	f001 fa86 	bl	8013244 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011d38:	68a0      	ldr	r0, [r4, #8]
 8011d3a:	f000 fdb5 	bl	80128a8 <xTaskPriorityInherit>
 8011d3e:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8011d40:	f001 faa6 	bl	8013290 <vPortExitCritical>
 8011d44:	e7da      	b.n	8011cfc <xQueueSemaphoreTake+0xec>
						taskENTER_CRITICAL();
 8011d46:	f001 fa7d 	bl	8013244 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8011d4a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011d4c:	b119      	cbz	r1, 8011d56 <xQueueSemaphoreTake+0x146>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8011d4e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011d50:	6819      	ldr	r1, [r3, #0]
 8011d52:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8011d56:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 8011d58:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8011d5a:	f000 fe5b 	bl	8012a14 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8011d5e:	f001 fa97 	bl	8013290 <vPortExitCritical>
 8011d62:	e7e3      	b.n	8011d2c <xQueueSemaphoreTake+0x11c>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011d64:	2d00      	cmp	r5, #0
 8011d66:	d0fa      	beq.n	8011d5e <xQueueSemaphoreTake+0x14e>
 8011d68:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011d6c:	b672      	cpsid	i
 8011d6e:	f383 8811 	msr	BASEPRI, r3
 8011d72:	f3bf 8f6f 	isb	sy
 8011d76:	f3bf 8f4f 	dsb	sy
 8011d7a:	b662      	cpsie	i
 8011d7c:	e7fe      	b.n	8011d7c <xQueueSemaphoreTake+0x16c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011d7e:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011d80:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011d82:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011d84:	b912      	cbnz	r2, 8011d8c <xQueueSemaphoreTake+0x17c>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8011d86:	f000 fea7 	bl	8012ad8 <pvTaskIncrementMutexHeldCount>
 8011d8a:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011d8c:	6923      	ldr	r3, [r4, #16]
 8011d8e:	b91b      	cbnz	r3, 8011d98 <xQueueSemaphoreTake+0x188>
				taskEXIT_CRITICAL();
 8011d90:	f001 fa7e 	bl	8013290 <vPortExitCritical>
				return pdPASS;
 8011d94:	2501      	movs	r5, #1
 8011d96:	e7c9      	b.n	8011d2c <xQueueSemaphoreTake+0x11c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011d98:	f104 0010 	add.w	r0, r4, #16
 8011d9c:	f000 fcca 	bl	8012734 <xTaskRemoveFromEventList>
 8011da0:	2800      	cmp	r0, #0
 8011da2:	d0f5      	beq.n	8011d90 <xQueueSemaphoreTake+0x180>
						queueYIELD_IF_USING_PREEMPTION();
 8011da4:	4b04      	ldr	r3, [pc, #16]	; (8011db8 <xQueueSemaphoreTake+0x1a8>)
 8011da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011daa:	601a      	str	r2, [r3, #0]
 8011dac:	f3bf 8f4f 	dsb	sy
 8011db0:	f3bf 8f6f 	isb	sy
 8011db4:	e7ec      	b.n	8011d90 <xQueueSemaphoreTake+0x180>
 8011db6:	bf00      	nop
 8011db8:	e000ed04 	.word	0xe000ed04

08011dbc <xQueueReceiveFromISR>:
{
 8011dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8011dc0:	b1c8      	cbz	r0, 8011df6 <xQueueReceiveFromISR+0x3a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011dc2:	2900      	cmp	r1, #0
 8011dc4:	d033      	beq.n	8011e2e <xQueueReceiveFromISR+0x72>
 8011dc6:	4605      	mov	r5, r0
 8011dc8:	4690      	mov	r8, r2
 8011dca:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011dcc:	f001 fb48 	bl	8013460 <vPortValidateInterruptPriority>
	__asm volatile
 8011dd0:	f3ef 8711 	mrs	r7, BASEPRI
 8011dd4:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011dd8:	b672      	cpsid	i
 8011dda:	f383 8811 	msr	BASEPRI, r3
 8011dde:	f3bf 8f6f 	isb	sy
 8011de2:	f3bf 8f4f 	dsb	sy
 8011de6:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011de8:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011dea:	b97c      	cbnz	r4, 8011e0c <xQueueReceiveFromISR+0x50>
			xReturn = pdFAIL;
 8011dec:	4620      	mov	r0, r4
	__asm volatile
 8011dee:	f387 8811 	msr	BASEPRI, r7
}
 8011df2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 8011df6:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011dfa:	b672      	cpsid	i
 8011dfc:	f383 8811 	msr	BASEPRI, r3
 8011e00:	f3bf 8f6f 	isb	sy
 8011e04:	f3bf 8f4f 	dsb	sy
 8011e08:	b662      	cpsie	i
 8011e0a:	e7fe      	b.n	8011e0a <xQueueReceiveFromISR+0x4e>
			const int8_t cRxLock = pxQueue->cRxLock;
 8011e0c:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011e10:	4649      	mov	r1, r9
 8011e12:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011e14:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 8011e16:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011e18:	f7ff fb4a 	bl	80114b0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011e1c:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8011e1e:	1c73      	adds	r3, r6, #1
 8011e20:	d013      	beq.n	8011e4a <xQueueReceiveFromISR+0x8e>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011e22:	1c73      	adds	r3, r6, #1
			xReturn = pdPASS;
 8011e24:	2001      	movs	r0, #1
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011e26:	b25b      	sxtb	r3, r3
 8011e28:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8011e2c:	e7df      	b.n	8011dee <xQueueReceiveFromISR+0x32>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011e2e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d0c8      	beq.n	8011dc6 <xQueueReceiveFromISR+0xa>
 8011e34:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011e38:	b672      	cpsid	i
 8011e3a:	f383 8811 	msr	BASEPRI, r3
 8011e3e:	f3bf 8f6f 	isb	sy
 8011e42:	f3bf 8f4f 	dsb	sy
 8011e46:	b662      	cpsie	i
 8011e48:	e7fe      	b.n	8011e48 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011e4a:	692b      	ldr	r3, [r5, #16]
 8011e4c:	b90b      	cbnz	r3, 8011e52 <xQueueReceiveFromISR+0x96>
			xReturn = pdPASS;
 8011e4e:	2001      	movs	r0, #1
 8011e50:	e7cd      	b.n	8011dee <xQueueReceiveFromISR+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011e52:	f105 0010 	add.w	r0, r5, #16
 8011e56:	f000 fc6d 	bl	8012734 <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
 8011e5a:	f1b8 0f00 	cmp.w	r8, #0
 8011e5e:	d0f6      	beq.n	8011e4e <xQueueReceiveFromISR+0x92>
 8011e60:	2800      	cmp	r0, #0
 8011e62:	d0f4      	beq.n	8011e4e <xQueueReceiveFromISR+0x92>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011e64:	2001      	movs	r0, #1
 8011e66:	f8c8 0000 	str.w	r0, [r8]
 8011e6a:	e7c0      	b.n	8011dee <xQueueReceiveFromISR+0x32>

08011e6c <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011e6c:	2300      	movs	r3, #0
 8011e6e:	4a08      	ldr	r2, [pc, #32]	; (8011e90 <vQueueAddToRegistry+0x24>)
	{
 8011e70:	b430      	push	{r4, r5}
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8011e72:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8011e76:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8011e7a:	b124      	cbz	r4, 8011e86 <vQueueAddToRegistry+0x1a>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011e7c:	3301      	adds	r3, #1
 8011e7e:	2b08      	cmp	r3, #8
 8011e80:	d1f7      	bne.n	8011e72 <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011e82:	bc30      	pop	{r4, r5}
 8011e84:	4770      	bx	lr
				xQueueRegistry[ ux ].xHandle = xQueue;
 8011e86:	6068      	str	r0, [r5, #4]
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011e88:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	}
 8011e8c:	bc30      	pop	{r4, r5}
 8011e8e:	4770      	bx	lr
 8011e90:	2002ea90 	.word	0x2002ea90

08011e94 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011e94:	b570      	push	{r4, r5, r6, lr}
 8011e96:	4604      	mov	r4, r0
 8011e98:	460d      	mov	r5, r1
 8011e9a:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011e9c:	f001 f9d2 	bl	8013244 <vPortEnterCritical>
 8011ea0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8011ea4:	2bff      	cmp	r3, #255	; 0xff
 8011ea6:	d102      	bne.n	8011eae <vQueueWaitForMessageRestricted+0x1a>
 8011ea8:	2300      	movs	r3, #0
 8011eaa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8011eae:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8011eb2:	2bff      	cmp	r3, #255	; 0xff
 8011eb4:	d102      	bne.n	8011ebc <vQueueWaitForMessageRestricted+0x28>
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011ebc:	f001 f9e8 	bl	8013290 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011ec0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011ec2:	b92b      	cbnz	r3, 8011ed0 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8011ec4:	4632      	mov	r2, r6
 8011ec6:	4629      	mov	r1, r5
 8011ec8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8011ecc:	f000 fc12 	bl	80126f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8011ed0:	4620      	mov	r0, r4
	}
 8011ed2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8011ed6:	f7ff bafd 	b.w	80114d4 <prvUnlockQueue>
 8011eda:	bf00      	nop

08011edc <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ee0:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011ee2:	f001 f9af 	bl	8013244 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011ee6:	4a35      	ldr	r2, [pc, #212]	; (8011fbc <prvAddNewTaskToReadyList+0xe0>)
		if( pxCurrentTCB == NULL )
 8011ee8:	4d35      	ldr	r5, [pc, #212]	; (8011fc0 <prvAddNewTaskToReadyList+0xe4>)
		uxCurrentNumberOfTasks++;
 8011eea:	6813      	ldr	r3, [r2, #0]
 8011eec:	3301      	adds	r3, #1
 8011eee:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011ef0:	682b      	ldr	r3, [r5, #0]
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d034      	beq.n	8011f60 <prvAddNewTaskToReadyList+0x84>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011ef6:	4f33      	ldr	r7, [pc, #204]	; (8011fc4 <prvAddNewTaskToReadyList+0xe8>)
 8011ef8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8011efa:	683b      	ldr	r3, [r7, #0]
 8011efc:	b343      	cbz	r3, 8011f50 <prvAddNewTaskToReadyList+0x74>
 8011efe:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8011fe8 <prvAddNewTaskToReadyList+0x10c>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011f02:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 8011fec <prvAddNewTaskToReadyList+0x110>
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011f06:	2301      	movs	r3, #1
 8011f08:	4e2f      	ldr	r6, [pc, #188]	; (8011fc8 <prvAddNewTaskToReadyList+0xec>)
		uxTaskNumber++;
 8011f0a:	f8dc 2000 	ldr.w	r2, [ip]
		prvAddTaskToReadyList( pxNewTCB );
 8011f0e:	4083      	lsls	r3, r0
 8011f10:	6831      	ldr	r1, [r6, #0]
 8011f12:	eb00 0080 	add.w	r0, r0, r0, lsl #2
		uxTaskNumber++;
 8011f16:	3201      	adds	r2, #1
		prvAddTaskToReadyList( pxNewTCB );
 8011f18:	430b      	orrs	r3, r1
 8011f1a:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8011f1e:	1d21      	adds	r1, r4, #4
		uxTaskNumber++;
 8011f20:	f8cc 2000 	str.w	r2, [ip]
		prvAddTaskToReadyList( pxNewTCB );
 8011f24:	6033      	str	r3, [r6, #0]
 8011f26:	f7ff fa49 	bl	80113bc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011f2a:	f001 f9b1 	bl	8013290 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011f2e:	683b      	ldr	r3, [r7, #0]
 8011f30:	b163      	cbz	r3, 8011f4c <prvAddNewTaskToReadyList+0x70>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011f32:	682a      	ldr	r2, [r5, #0]
 8011f34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011f36:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8011f38:	429a      	cmp	r2, r3
 8011f3a:	d207      	bcs.n	8011f4c <prvAddNewTaskToReadyList+0x70>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011f3c:	4b23      	ldr	r3, [pc, #140]	; (8011fcc <prvAddNewTaskToReadyList+0xf0>)
 8011f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f42:	601a      	str	r2, [r3, #0]
 8011f44:	f3bf 8f4f 	dsb	sy
 8011f48:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011f4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011f50:	682b      	ldr	r3, [r5, #0]
 8011f52:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8011fe8 <prvAddNewTaskToReadyList+0x10c>
 8011f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f58:	4283      	cmp	r3, r0
 8011f5a:	d8d2      	bhi.n	8011f02 <prvAddNewTaskToReadyList+0x26>
					pxCurrentTCB = pxNewTCB;
 8011f5c:	602c      	str	r4, [r5, #0]
 8011f5e:	e7d0      	b.n	8011f02 <prvAddNewTaskToReadyList+0x26>
			pxCurrentTCB = pxNewTCB;
 8011f60:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011f62:	6813      	ldr	r3, [r2, #0]
 8011f64:	2b01      	cmp	r3, #1
 8011f66:	d004      	beq.n	8011f72 <prvAddNewTaskToReadyList+0x96>
 8011f68:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8011f6a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8011fe8 <prvAddNewTaskToReadyList+0x10c>
 8011f6e:	4f15      	ldr	r7, [pc, #84]	; (8011fc4 <prvAddNewTaskToReadyList+0xe8>)
 8011f70:	e7c7      	b.n	8011f02 <prvAddNewTaskToReadyList+0x26>
 8011f72:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8011fe8 <prvAddNewTaskToReadyList+0x10c>
 8011f76:	4646      	mov	r6, r8
 8011f78:	f108 078c 	add.w	r7, r8, #140	; 0x8c
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011f7c:	4630      	mov	r0, r6
 8011f7e:	3614      	adds	r6, #20
 8011f80:	f7ff fa0c 	bl	801139c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011f84:	42b7      	cmp	r7, r6
 8011f86:	d1f9      	bne.n	8011f7c <prvAddNewTaskToReadyList+0xa0>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011f88:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8011ff0 <prvAddNewTaskToReadyList+0x114>
	vListInitialise( &xDelayedTaskList2 );
 8011f8c:	4e10      	ldr	r6, [pc, #64]	; (8011fd0 <prvAddNewTaskToReadyList+0xf4>)
	vListInitialise( &xDelayedTaskList1 );
 8011f8e:	4648      	mov	r0, r9
 8011f90:	4f0c      	ldr	r7, [pc, #48]	; (8011fc4 <prvAddNewTaskToReadyList+0xe8>)
 8011f92:	f7ff fa03 	bl	801139c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011f96:	4630      	mov	r0, r6
 8011f98:	f7ff fa00 	bl	801139c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011f9c:	480d      	ldr	r0, [pc, #52]	; (8011fd4 <prvAddNewTaskToReadyList+0xf8>)
 8011f9e:	f7ff f9fd 	bl	801139c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011fa2:	480d      	ldr	r0, [pc, #52]	; (8011fd8 <prvAddNewTaskToReadyList+0xfc>)
 8011fa4:	f7ff f9fa 	bl	801139c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011fa8:	480c      	ldr	r0, [pc, #48]	; (8011fdc <prvAddNewTaskToReadyList+0x100>)
 8011faa:	f7ff f9f7 	bl	801139c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011fae:	4a0c      	ldr	r2, [pc, #48]	; (8011fe0 <prvAddNewTaskToReadyList+0x104>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011fb0:	4b0c      	ldr	r3, [pc, #48]	; (8011fe4 <prvAddNewTaskToReadyList+0x108>)
	pxDelayedTaskList = &xDelayedTaskList1;
 8011fb2:	f8c2 9000 	str.w	r9, [r2]
 8011fb6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011fb8:	601e      	str	r6, [r3, #0]
 8011fba:	e7a2      	b.n	8011f02 <prvAddNewTaskToReadyList+0x26>
 8011fbc:	2000179c 	.word	0x2000179c
 8011fc0:	20001704 	.word	0x20001704
 8011fc4:	200017f8 	.word	0x200017f8
 8011fc8:	200017b0 	.word	0x200017b0
 8011fcc:	e000ed04 	.word	0xe000ed04
 8011fd0:	200017c8 	.word	0x200017c8
 8011fd4:	200017e4 	.word	0x200017e4
 8011fd8:	20001810 	.word	0x20001810
 8011fdc:	200017fc 	.word	0x200017fc
 8011fe0:	20001708 	.word	0x20001708
 8011fe4:	2000170c 	.word	0x2000170c
 8011fe8:	20001710 	.word	0x20001710
 8011fec:	200017ac 	.word	0x200017ac
 8011ff0:	200017b4 	.word	0x200017b4

08011ff4 <prvDeleteTCB>:
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011ff4:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8011ff8:	b173      	cbz	r3, 8012018 <prvDeleteTCB+0x24>
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
				vPortFree( pxTCB );
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011ffa:	2b01      	cmp	r3, #1
 8011ffc:	d016      	beq.n	801202c <prvDeleteTCB+0x38>
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011ffe:	2b02      	cmp	r3, #2
 8012000:	d016      	beq.n	8012030 <prvDeleteTCB+0x3c>
 8012002:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012006:	b672      	cpsid	i
 8012008:	f383 8811 	msr	BASEPRI, r3
 801200c:	f3bf 8f6f 	isb	sy
 8012010:	f3bf 8f4f 	dsb	sy
 8012014:	b662      	cpsie	i
 8012016:	e7fe      	b.n	8012016 <prvDeleteTCB+0x22>
	{
 8012018:	b510      	push	{r4, lr}
 801201a:	4604      	mov	r4, r0
				vPortFree( pxTCB->pxStack );
 801201c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801201e:	f001 fb17 	bl	8013650 <vPortFree>
				vPortFree( pxTCB );
 8012022:	4620      	mov	r0, r4
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8012028:	f001 bb12 	b.w	8013650 <vPortFree>
				vPortFree( pxTCB );
 801202c:	f001 bb10 	b.w	8013650 <vPortFree>
 8012030:	4770      	bx	lr
 8012032:	bf00      	nop

08012034 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012036:	4b1a      	ldr	r3, [pc, #104]	; (80120a0 <prvAddCurrentTaskToDelayedList+0x6c>)
{
 8012038:	4606      	mov	r6, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801203a:	4d1a      	ldr	r5, [pc, #104]	; (80120a4 <prvAddCurrentTaskToDelayedList+0x70>)
{
 801203c:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 801203e:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012040:	6828      	ldr	r0, [r5, #0]
 8012042:	3004      	adds	r0, #4
 8012044:	f7ff f9e4 	bl	8011410 <uxListRemove>
 8012048:	b940      	cbnz	r0, 801205c <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801204a:	682b      	ldr	r3, [r5, #0]
 801204c:	2201      	movs	r2, #1
 801204e:	4916      	ldr	r1, [pc, #88]	; (80120a8 <prvAddCurrentTaskToDelayedList+0x74>)
 8012050:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8012052:	680b      	ldr	r3, [r1, #0]
 8012054:	4082      	lsls	r2, r0
 8012056:	ea23 0302 	bic.w	r3, r3, r2
 801205a:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801205c:	1c73      	adds	r3, r6, #1
 801205e:	d100      	bne.n	8012062 <prvAddCurrentTaskToDelayedList+0x2e>
 8012060:	b9bf      	cbnz	r7, 8012092 <prvAddCurrentTaskToDelayedList+0x5e>
 8012062:	19a4      	adds	r4, r4, r6
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012064:	682b      	ldr	r3, [r5, #0]
 8012066:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8012068:	d20b      	bcs.n	8012082 <prvAddCurrentTaskToDelayedList+0x4e>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801206a:	4b10      	ldr	r3, [pc, #64]	; (80120ac <prvAddCurrentTaskToDelayedList+0x78>)
 801206c:	6818      	ldr	r0, [r3, #0]
 801206e:	6829      	ldr	r1, [r5, #0]
 8012070:	3104      	adds	r1, #4
 8012072:	f7ff f9b3 	bl	80113dc <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8012076:	4b0e      	ldr	r3, [pc, #56]	; (80120b0 <prvAddCurrentTaskToDelayedList+0x7c>)
 8012078:	681a      	ldr	r2, [r3, #0]
 801207a:	42a2      	cmp	r2, r4
 801207c:	d900      	bls.n	8012080 <prvAddCurrentTaskToDelayedList+0x4c>
				{
					xNextTaskUnblockTime = xTimeToWake;
 801207e:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012082:	4b0c      	ldr	r3, [pc, #48]	; (80120b4 <prvAddCurrentTaskToDelayedList+0x80>)
 8012084:	6818      	ldr	r0, [r3, #0]
 8012086:	6829      	ldr	r1, [r5, #0]
}
 8012088:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801208c:	3104      	adds	r1, #4
 801208e:	f7ff b9a5 	b.w	80113dc <vListInsert>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012092:	6829      	ldr	r1, [r5, #0]
 8012094:	4808      	ldr	r0, [pc, #32]	; (80120b8 <prvAddCurrentTaskToDelayedList+0x84>)
 8012096:	3104      	adds	r1, #4
}
 8012098:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801209c:	f7ff b98e 	b.w	80113bc <vListInsertEnd>
 80120a0:	20001824 	.word	0x20001824
 80120a4:	20001704 	.word	0x20001704
 80120a8:	200017b0 	.word	0x200017b0
 80120ac:	20001708 	.word	0x20001708
 80120b0:	200017dc 	.word	0x200017dc
 80120b4:	2000170c 	.word	0x2000170c
 80120b8:	200017fc 	.word	0x200017fc

080120bc <prvIdleTask>:
{
 80120bc:	b580      	push	{r7, lr}
 80120be:	4c16      	ldr	r4, [pc, #88]	; (8012118 <prvIdleTask+0x5c>)
				taskYIELD();
 80120c0:	f04f 5980 	mov.w	r9, #268435456	; 0x10000000
 80120c4:	4e15      	ldr	r6, [pc, #84]	; (801211c <prvIdleTask+0x60>)
 80120c6:	4d16      	ldr	r5, [pc, #88]	; (8012120 <prvIdleTask+0x64>)
 80120c8:	f8df a058 	ldr.w	sl, [pc, #88]	; 8012124 <prvIdleTask+0x68>
 80120cc:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8012128 <prvIdleTask+0x6c>
 80120d0:	e011      	b.n	80120f6 <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 80120d2:	f001 f8b7 	bl	8013244 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80120d6:	68f3      	ldr	r3, [r6, #12]
 80120d8:	68df      	ldr	r7, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80120da:	1d38      	adds	r0, r7, #4
 80120dc:	f7ff f998 	bl	8011410 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80120e0:	682b      	ldr	r3, [r5, #0]
 80120e2:	3b01      	subs	r3, #1
 80120e4:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 80120e6:	6823      	ldr	r3, [r4, #0]
 80120e8:	3b01      	subs	r3, #1
 80120ea:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80120ec:	f001 f8d0 	bl	8013290 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80120f0:	4638      	mov	r0, r7
 80120f2:	f7ff ff7f 	bl	8011ff4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80120f6:	6823      	ldr	r3, [r4, #0]
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d1ea      	bne.n	80120d2 <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80120fc:	f8da 3000 	ldr.w	r3, [sl]
 8012100:	2b01      	cmp	r3, #1
 8012102:	d905      	bls.n	8012110 <prvIdleTask+0x54>
				taskYIELD();
 8012104:	f8c8 9000 	str.w	r9, [r8]
 8012108:	f3bf 8f4f 	dsb	sy
 801210c:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8012110:	f7ee fd4e 	bl	8000bb0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8012114:	e7ef      	b.n	80120f6 <prvIdleTask+0x3a>
 8012116:	bf00      	nop
 8012118:	200017a0 	.word	0x200017a0
 801211c:	20001810 	.word	0x20001810
 8012120:	2000179c 	.word	0x2000179c
 8012124:	20001710 	.word	0x20001710
 8012128:	e000ed04 	.word	0xe000ed04

0801212c <prvResetNextTaskUnblockTime.part.1>:
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801212c:	4a03      	ldr	r2, [pc, #12]	; (801213c <prvResetNextTaskUnblockTime.part.1+0x10>)
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801212e:	4b04      	ldr	r3, [pc, #16]	; (8012140 <prvResetNextTaskUnblockTime.part.1+0x14>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012130:	6812      	ldr	r2, [r2, #0]
 8012132:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012134:	68d2      	ldr	r2, [r2, #12]
 8012136:	6852      	ldr	r2, [r2, #4]
 8012138:	601a      	str	r2, [r3, #0]
}
 801213a:	4770      	bx	lr
 801213c:	20001708 	.word	0x20001708
 8012140:	200017dc 	.word	0x200017dc

08012144 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8012144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012148:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801214a:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 801214e:	4681      	mov	r9, r0
 8012150:	469a      	mov	sl, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012152:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8012154:	4415      	add	r5, r2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8012156:	9e08      	ldr	r6, [sp, #32]
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012158:	eb07 0785 	add.w	r7, r7, r5, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 801215c:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012160:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8012164:	2900      	cmp	r1, #0
 8012166:	d035      	beq.n	80121d4 <prvInitialiseNewTask.isra.2+0x90>
 8012168:	1e4a      	subs	r2, r1, #1
 801216a:	f104 0033 	add.w	r0, r4, #51	; 0x33
 801216e:	310f      	adds	r1, #15
 8012170:	e001      	b.n	8012176 <prvInitialiseNewTask.isra.2+0x32>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012172:	428a      	cmp	r2, r1
 8012174:	d006      	beq.n	8012184 <prvInitialiseNewTask.isra.2+0x40>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012176:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801217a:	f800 3f01 	strb.w	r3, [r0, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 801217e:	7815      	ldrb	r5, [r2, #0]
 8012180:	2d00      	cmp	r5, #0
 8012182:	d1f6      	bne.n	8012172 <prvInitialiseNewTask.isra.2+0x2e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012184:	2300      	movs	r3, #0
 8012186:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801218a:	2e06      	cmp	r6, #6
		pxNewTCB->uxMutexesHeld = 0;
 801218c:	f04f 0500 	mov.w	r5, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012190:	f104 0004 	add.w	r0, r4, #4
 8012194:	bf28      	it	cs
 8012196:	2606      	movcs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
 8012198:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
 801219a:	e9c4 6511 	strd	r6, r5, [r4, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801219e:	f1c6 0607 	rsb	r6, r6, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80121a2:	f7ff f907 	bl	80113b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80121a6:	f104 0018 	add.w	r0, r4, #24
 80121aa:	f7ff f903 	bl	80113b4 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80121ae:	64e5      	str	r5, [r4, #76]	; 0x4c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80121b0:	4652      	mov	r2, sl
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80121b2:	61a6      	str	r6, [r4, #24]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80121b4:	4649      	mov	r1, r9
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80121b6:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80121ba:	4638      	mov	r0, r7
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80121bc:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80121be:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80121c0:	f001 f814 	bl	80131ec <pxPortInitialiseStack>
 80121c4:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80121c6:	f1b8 0f00 	cmp.w	r8, #0
 80121ca:	d001      	beq.n	80121d0 <prvInitialiseNewTask.isra.2+0x8c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80121cc:	f8c8 4000 	str.w	r4, [r8]
}
 80121d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80121d4:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 80121d8:	e7d7      	b.n	801218a <prvInitialiseNewTask.isra.2+0x46>
 80121da:	bf00      	nop

080121dc <xTaskCreateStatic>:
	{
 80121dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80121de:	b087      	sub	sp, #28
 80121e0:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	; 0x30
 80121e4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
		configASSERT( puxStackBuffer != NULL );
 80121e6:	b1dd      	cbz	r5, 8012220 <xTaskCreateStatic+0x44>
		configASSERT( pxTaskBuffer != NULL );
 80121e8:	b17c      	cbz	r4, 801220a <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 80121ea:	2754      	movs	r7, #84	; 0x54
 80121ec:	9705      	str	r7, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80121ee:	9f05      	ldr	r7, [sp, #20]
 80121f0:	2f54      	cmp	r7, #84	; 0x54
 80121f2:	d020      	beq.n	8012236 <xTaskCreateStatic+0x5a>
 80121f4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80121f8:	b672      	cpsid	i
 80121fa:	f383 8811 	msr	BASEPRI, r3
 80121fe:	f3bf 8f6f 	isb	sy
 8012202:	f3bf 8f4f 	dsb	sy
 8012206:	b662      	cpsie	i
 8012208:	e7fe      	b.n	8012208 <xTaskCreateStatic+0x2c>
 801220a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801220e:	b672      	cpsid	i
 8012210:	f383 8811 	msr	BASEPRI, r3
 8012214:	f3bf 8f6f 	isb	sy
 8012218:	f3bf 8f4f 	dsb	sy
 801221c:	b662      	cpsie	i
 801221e:	e7fe      	b.n	801221e <xTaskCreateStatic+0x42>
 8012220:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012224:	b672      	cpsid	i
 8012226:	f383 8811 	msr	BASEPRI, r3
 801222a:	f3bf 8f6f 	isb	sy
 801222e:	f3bf 8f4f 	dsb	sy
 8012232:	b662      	cpsie	i
 8012234:	e7fe      	b.n	8012234 <xTaskCreateStatic+0x58>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012236:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8012238:	2702      	movs	r7, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801223a:	ad04      	add	r5, sp, #16
 801223c:	9402      	str	r4, [sp, #8]
 801223e:	9600      	str	r6, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8012240:	f884 7051 	strb.w	r7, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012244:	9501      	str	r5, [sp, #4]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8012246:	9d05      	ldr	r5, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012248:	f7ff ff7c 	bl	8012144 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 801224c:	4620      	mov	r0, r4
 801224e:	f7ff fe45 	bl	8011edc <prvAddNewTaskToReadyList>
	}
 8012252:	9804      	ldr	r0, [sp, #16]
 8012254:	b007      	add	sp, #28
 8012256:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012258 <xTaskCreate>:
	{
 8012258:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801225c:	4607      	mov	r7, r0
 801225e:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012260:	0090      	lsls	r0, r2, #2
	{
 8012262:	4616      	mov	r6, r2
 8012264:	4688      	mov	r8, r1
 8012266:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012268:	f001 f954 	bl	8013514 <pvPortMalloc>
			if( pxStack != NULL )
 801226c:	b320      	cbz	r0, 80122b8 <xTaskCreate+0x60>
 801226e:	4605      	mov	r5, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012270:	2054      	movs	r0, #84	; 0x54
 8012272:	f001 f94f 	bl	8013514 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8012276:	4604      	mov	r4, r0
 8012278:	b1b0      	cbz	r0, 80122a8 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 801227a:	6305      	str	r5, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801227c:	f04f 0c00 	mov.w	ip, #0
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012280:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8012282:	464b      	mov	r3, r9
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012284:	f884 c051 	strb.w	ip, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012288:	4632      	mov	r2, r6
 801228a:	9501      	str	r5, [sp, #4]
 801228c:	4641      	mov	r1, r8
 801228e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012290:	4638      	mov	r0, r7
 8012292:	9402      	str	r4, [sp, #8]
 8012294:	9500      	str	r5, [sp, #0]
 8012296:	f7ff ff55 	bl	8012144 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 801229a:	4620      	mov	r0, r4
 801229c:	f7ff fe1e 	bl	8011edc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80122a0:	2001      	movs	r0, #1
	}
 80122a2:	b005      	add	sp, #20
 80122a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80122a8:	4628      	mov	r0, r5
 80122aa:	f001 f9d1 	bl	8013650 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80122ae:	f04f 30ff 	mov.w	r0, #4294967295
	}
 80122b2:	b005      	add	sp, #20
 80122b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80122b8:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 80122bc:	e7f1      	b.n	80122a2 <xTaskCreate+0x4a>
 80122be:	bf00      	nop

080122c0 <vTaskStartScheduler>:
{
 80122c0:	b530      	push	{r4, r5, lr}
 80122c2:	b089      	sub	sp, #36	; 0x24
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80122c4:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80122c6:	aa07      	add	r2, sp, #28
 80122c8:	a906      	add	r1, sp, #24
 80122ca:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80122cc:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80122d0:	f7ee fc74 	bl	8000bbc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80122d4:	9a07      	ldr	r2, [sp, #28]
 80122d6:	4623      	mov	r3, r4
 80122d8:	9400      	str	r4, [sp, #0]
 80122da:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 80122de:	e9cd 1001 	strd	r1, r0, [sp, #4]
 80122e2:	4916      	ldr	r1, [pc, #88]	; (801233c <vTaskStartScheduler+0x7c>)
 80122e4:	4816      	ldr	r0, [pc, #88]	; (8012340 <vTaskStartScheduler+0x80>)
 80122e6:	f7ff ff79 	bl	80121dc <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80122ea:	b320      	cbz	r0, 8012336 <vTaskStartScheduler+0x76>
			xReturn = xTimerCreateTimerTask();
 80122ec:	f000 fd04 	bl	8012cf8 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80122f0:	2801      	cmp	r0, #1
 80122f2:	d00c      	beq.n	801230e <vTaskStartScheduler+0x4e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80122f4:	3001      	adds	r0, #1
 80122f6:	d11e      	bne.n	8012336 <vTaskStartScheduler+0x76>
 80122f8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80122fc:	b672      	cpsid	i
 80122fe:	f383 8811 	msr	BASEPRI, r3
 8012302:	f3bf 8f6f 	isb	sy
 8012306:	f3bf 8f4f 	dsb	sy
 801230a:	b662      	cpsie	i
 801230c:	e7fe      	b.n	801230c <vTaskStartScheduler+0x4c>
 801230e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012312:	b672      	cpsid	i
 8012314:	f383 8811 	msr	BASEPRI, r3
 8012318:	f3bf 8f6f 	isb	sy
 801231c:	f3bf 8f4f 	dsb	sy
 8012320:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8012322:	4908      	ldr	r1, [pc, #32]	; (8012344 <vTaskStartScheduler+0x84>)
 8012324:	f04f 35ff 	mov.w	r5, #4294967295
		xSchedulerRunning = pdTRUE;
 8012328:	4a07      	ldr	r2, [pc, #28]	; (8012348 <vTaskStartScheduler+0x88>)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801232a:	4b08      	ldr	r3, [pc, #32]	; (801234c <vTaskStartScheduler+0x8c>)
		xNextTaskUnblockTime = portMAX_DELAY;
 801232c:	600d      	str	r5, [r1, #0]
		xSchedulerRunning = pdTRUE;
 801232e:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012330:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8012332:	f001 f82d 	bl	8013390 <xPortStartScheduler>
}
 8012336:	b009      	add	sp, #36	; 0x24
 8012338:	bd30      	pop	{r4, r5, pc}
 801233a:	bf00      	nop
 801233c:	08026be8 	.word	0x08026be8
 8012340:	080120bd 	.word	0x080120bd
 8012344:	200017dc 	.word	0x200017dc
 8012348:	200017f8 	.word	0x200017f8
 801234c:	20001824 	.word	0x20001824

08012350 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8012350:	4a02      	ldr	r2, [pc, #8]	; (801235c <vTaskSuspendAll+0xc>)
 8012352:	6813      	ldr	r3, [r2, #0]
 8012354:	3301      	adds	r3, #1
 8012356:	6013      	str	r3, [r2, #0]
}
 8012358:	4770      	bx	lr
 801235a:	bf00      	nop
 801235c:	200017a8 	.word	0x200017a8

08012360 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8012360:	4b01      	ldr	r3, [pc, #4]	; (8012368 <xTaskGetTickCount+0x8>)
 8012362:	6818      	ldr	r0, [r3, #0]
}
 8012364:	4770      	bx	lr
 8012366:	bf00      	nop
 8012368:	20001824 	.word	0x20001824

0801236c <xTaskGetTickCountFromISR>:
{
 801236c:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801236e:	f001 f877 	bl	8013460 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8012372:	4b01      	ldr	r3, [pc, #4]	; (8012378 <xTaskGetTickCountFromISR+0xc>)
 8012374:	6818      	ldr	r0, [r3, #0]
}
 8012376:	bd08      	pop	{r3, pc}
 8012378:	20001824 	.word	0x20001824

0801237c <xTaskIncrementTick>:
{
 801237c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012380:	4b48      	ldr	r3, [pc, #288]	; (80124a4 <xTaskIncrementTick+0x128>)
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	b9bb      	cbnz	r3, 80123b6 <xTaskIncrementTick+0x3a>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012386:	4b48      	ldr	r3, [pc, #288]	; (80124a8 <xTaskIncrementTick+0x12c>)
 8012388:	681e      	ldr	r6, [r3, #0]
 801238a:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 801238c:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801238e:	b1fe      	cbz	r6, 80123d0 <xTaskIncrementTick+0x54>
 8012390:	4d46      	ldr	r5, [pc, #280]	; (80124ac <xTaskIncrementTick+0x130>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012392:	682b      	ldr	r3, [r5, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8012394:	2400      	movs	r4, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012396:	42b3      	cmp	r3, r6
 8012398:	d92c      	bls.n	80123f4 <xTaskIncrementTick+0x78>
 801239a:	4f45      	ldr	r7, [pc, #276]	; (80124b0 <xTaskIncrementTick+0x134>)
 801239c:	f8df 8128 	ldr.w	r8, [pc, #296]	; 80124c8 <xTaskIncrementTick+0x14c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80123a0:	f8d8 3000 	ldr.w	r3, [r8]
 80123a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80123aa:	009b      	lsls	r3, r3, #2
 80123ac:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 80123ae:	2b02      	cmp	r3, #2
 80123b0:	bf28      	it	cs
 80123b2:	2401      	movcs	r4, #1
 80123b4:	e004      	b.n	80123c0 <xTaskIncrementTick+0x44>
		++uxPendedTicks;
 80123b6:	4a3f      	ldr	r2, [pc, #252]	; (80124b4 <xTaskIncrementTick+0x138>)
BaseType_t xSwitchRequired = pdFALSE;
 80123b8:	2400      	movs	r4, #0
		++uxPendedTicks;
 80123ba:	6813      	ldr	r3, [r2, #0]
 80123bc:	3301      	adds	r3, #1
 80123be:	6013      	str	r3, [r2, #0]
		if( xYieldPending != pdFALSE )
 80123c0:	4b3d      	ldr	r3, [pc, #244]	; (80124b8 <xTaskIncrementTick+0x13c>)
 80123c2:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 80123c4:	2b00      	cmp	r3, #0
}
 80123c6:	bf0c      	ite	eq
 80123c8:	4620      	moveq	r0, r4
 80123ca:	2001      	movne	r0, #1
 80123cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 80123d0:	f8df b0f8 	ldr.w	fp, [pc, #248]	; 80124cc <xTaskIncrementTick+0x150>
 80123d4:	f8db 2000 	ldr.w	r2, [fp]
 80123d8:	6812      	ldr	r2, [r2, #0]
 80123da:	2a00      	cmp	r2, #0
 80123dc:	d04b      	beq.n	8012476 <xTaskIncrementTick+0xfa>
 80123de:	f04f 0330 	mov.w	r3, #48	; 0x30
 80123e2:	b672      	cpsid	i
 80123e4:	f383 8811 	msr	BASEPRI, r3
 80123e8:	f3bf 8f6f 	isb	sy
 80123ec:	f3bf 8f4f 	dsb	sy
 80123f0:	b662      	cpsie	i
 80123f2:	e7fe      	b.n	80123f2 <xTaskIncrementTick+0x76>
 80123f4:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 80124cc <xTaskIncrementTick+0x150>
 80123f8:	4f2d      	ldr	r7, [pc, #180]	; (80124b0 <xTaskIncrementTick+0x134>)
 80123fa:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 80124c8 <xTaskIncrementTick+0x14c>
 80123fe:	e02f      	b.n	8012460 <xTaskIncrementTick+0xe4>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012400:	f8db 2000 	ldr.w	r2, [fp]
 8012404:	68d2      	ldr	r2, [r2, #12]
 8012406:	f8d2 900c 	ldr.w	r9, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801240a:	f8d9 1004 	ldr.w	r1, [r9, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801240e:	f109 0a04 	add.w	sl, r9, #4
					if( xConstTickCount < xItemValue )
 8012412:	428e      	cmp	r6, r1
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012414:	4650      	mov	r0, sl
					if( xConstTickCount < xItemValue )
 8012416:	d32c      	bcc.n	8012472 <xTaskIncrementTick+0xf6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012418:	f7fe fffa 	bl	8011410 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801241c:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012420:	f109 0018 	add.w	r0, r9, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012424:	b109      	cbz	r1, 801242a <xTaskIncrementTick+0xae>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012426:	f7fe fff3 	bl	8011410 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801242a:	4a24      	ldr	r2, [pc, #144]	; (80124bc <xTaskIncrementTick+0x140>)
 801242c:	f04f 0c01 	mov.w	ip, #1
 8012430:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 8012434:	4651      	mov	r1, sl
 8012436:	6813      	ldr	r3, [r2, #0]
 8012438:	fa0c fc00 	lsl.w	ip, ip, r0
 801243c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012440:	ea4c 0c03 	orr.w	ip, ip, r3
 8012444:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8012448:	f8c2 c000 	str.w	ip, [r2]
 801244c:	f7fe ffb6 	bl	80113bc <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012450:	f8d8 0000 	ldr.w	r0, [r8]
 8012454:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
 8012458:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 801245a:	4291      	cmp	r1, r2
 801245c:	bf28      	it	cs
 801245e:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012460:	f8db 2000 	ldr.w	r2, [fp]
 8012464:	6812      	ldr	r2, [r2, #0]
 8012466:	2a00      	cmp	r2, #0
 8012468:	d1ca      	bne.n	8012400 <xTaskIncrementTick+0x84>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801246a:	f04f 33ff 	mov.w	r3, #4294967295
 801246e:	602b      	str	r3, [r5, #0]
					break;
 8012470:	e796      	b.n	80123a0 <xTaskIncrementTick+0x24>
						xNextTaskUnblockTime = xItemValue;
 8012472:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012474:	e794      	b.n	80123a0 <xTaskIncrementTick+0x24>
			taskSWITCH_DELAYED_LISTS();
 8012476:	4a12      	ldr	r2, [pc, #72]	; (80124c0 <xTaskIncrementTick+0x144>)
 8012478:	f8db 0000 	ldr.w	r0, [fp]
 801247c:	4911      	ldr	r1, [pc, #68]	; (80124c4 <xTaskIncrementTick+0x148>)
 801247e:	6814      	ldr	r4, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8012480:	4d0a      	ldr	r5, [pc, #40]	; (80124ac <xTaskIncrementTick+0x130>)
			taskSWITCH_DELAYED_LISTS();
 8012482:	f8cb 4000 	str.w	r4, [fp]
 8012486:	6010      	str	r0, [r2, #0]
 8012488:	680a      	ldr	r2, [r1, #0]
 801248a:	3201      	adds	r2, #1
 801248c:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801248e:	f8db 3000 	ldr.w	r3, [fp]
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	b91b      	cbnz	r3, 801249e <xTaskIncrementTick+0x122>
		xNextTaskUnblockTime = portMAX_DELAY;
 8012496:	f04f 33ff 	mov.w	r3, #4294967295
 801249a:	602b      	str	r3, [r5, #0]
 801249c:	e779      	b.n	8012392 <xTaskIncrementTick+0x16>
 801249e:	f7ff fe45 	bl	801212c <prvResetNextTaskUnblockTime.part.1>
 80124a2:	e776      	b.n	8012392 <xTaskIncrementTick+0x16>
 80124a4:	200017a8 	.word	0x200017a8
 80124a8:	20001824 	.word	0x20001824
 80124ac:	200017dc 	.word	0x200017dc
 80124b0:	20001710 	.word	0x20001710
 80124b4:	200017a4 	.word	0x200017a4
 80124b8:	20001828 	.word	0x20001828
 80124bc:	200017b0 	.word	0x200017b0
 80124c0:	2000170c 	.word	0x2000170c
 80124c4:	200017e0 	.word	0x200017e0
 80124c8:	20001704 	.word	0x20001704
 80124cc:	20001708 	.word	0x20001708

080124d0 <xTaskResumeAll>:
{
 80124d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
 80124d4:	4c36      	ldr	r4, [pc, #216]	; (80125b0 <xTaskResumeAll+0xe0>)
 80124d6:	6823      	ldr	r3, [r4, #0]
 80124d8:	b953      	cbnz	r3, 80124f0 <xTaskResumeAll+0x20>
 80124da:	f04f 0330 	mov.w	r3, #48	; 0x30
 80124de:	b672      	cpsid	i
 80124e0:	f383 8811 	msr	BASEPRI, r3
 80124e4:	f3bf 8f6f 	isb	sy
 80124e8:	f3bf 8f4f 	dsb	sy
 80124ec:	b662      	cpsie	i
 80124ee:	e7fe      	b.n	80124ee <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 80124f0:	f000 fea8 	bl	8013244 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80124f4:	6823      	ldr	r3, [r4, #0]
 80124f6:	3b01      	subs	r3, #1
 80124f8:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80124fa:	6824      	ldr	r4, [r4, #0]
 80124fc:	bb74      	cbnz	r4, 801255c <xTaskResumeAll+0x8c>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80124fe:	4b2d      	ldr	r3, [pc, #180]	; (80125b4 <xTaskResumeAll+0xe4>)
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	b35b      	cbz	r3, 801255c <xTaskResumeAll+0x8c>
 8012504:	4d2c      	ldr	r5, [pc, #176]	; (80125b8 <xTaskResumeAll+0xe8>)
 8012506:	4f2d      	ldr	r7, [pc, #180]	; (80125bc <xTaskResumeAll+0xec>)
					prvAddTaskToReadyList( pxTCB );
 8012508:	4e2d      	ldr	r6, [pc, #180]	; (80125c0 <xTaskResumeAll+0xf0>)
 801250a:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 80125d4 <xTaskResumeAll+0x104>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801250e:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 80125d8 <xTaskResumeAll+0x108>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012512:	683b      	ldr	r3, [r7, #0]
					prvAddTaskToReadyList( pxTCB );
 8012514:	f04f 0801 	mov.w	r8, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012518:	b333      	cbz	r3, 8012568 <xTaskResumeAll+0x98>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801251e:	f104 0a04 	add.w	sl, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012522:	f104 0018 	add.w	r0, r4, #24
 8012526:	f7fe ff73 	bl	8011410 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801252a:	4650      	mov	r0, sl
 801252c:	f7fe ff70 	bl	8011410 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012530:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8012532:	6832      	ldr	r2, [r6, #0]
 8012534:	4651      	mov	r1, sl
 8012536:	fa08 f300 	lsl.w	r3, r8, r0
 801253a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801253e:	4313      	orrs	r3, r2
 8012540:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8012544:	6033      	str	r3, [r6, #0]
 8012546:	f7fe ff39 	bl	80113bc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801254a:	f8db 3000 	ldr.w	r3, [fp]
 801254e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012552:	429a      	cmp	r2, r3
 8012554:	d3dd      	bcc.n	8012512 <xTaskResumeAll+0x42>
						xYieldPending = pdTRUE;
 8012556:	f8c5 8000 	str.w	r8, [r5]
 801255a:	e7da      	b.n	8012512 <xTaskResumeAll+0x42>
BaseType_t xAlreadyYielded = pdFALSE;
 801255c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 801255e:	f000 fe97 	bl	8013290 <vPortExitCritical>
}
 8012562:	4620      	mov	r0, r4
 8012564:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( pxTCB != NULL )
 8012568:	b13c      	cbz	r4, 801257a <xTaskResumeAll+0xaa>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801256a:	4b16      	ldr	r3, [pc, #88]	; (80125c4 <xTaskResumeAll+0xf4>)
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	b9db      	cbnz	r3, 80125aa <xTaskResumeAll+0xda>
		xNextTaskUnblockTime = portMAX_DELAY;
 8012572:	4b15      	ldr	r3, [pc, #84]	; (80125c8 <xTaskResumeAll+0xf8>)
 8012574:	f04f 32ff 	mov.w	r2, #4294967295
 8012578:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801257a:	4e14      	ldr	r6, [pc, #80]	; (80125cc <xTaskResumeAll+0xfc>)
 801257c:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801257e:	b13c      	cbz	r4, 8012590 <xTaskResumeAll+0xc0>
								xYieldPending = pdTRUE;
 8012580:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8012582:	f7ff fefb 	bl	801237c <xTaskIncrementTick>
 8012586:	b100      	cbz	r0, 801258a <xTaskResumeAll+0xba>
								xYieldPending = pdTRUE;
 8012588:	602f      	str	r7, [r5, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801258a:	3c01      	subs	r4, #1
 801258c:	d1f9      	bne.n	8012582 <xTaskResumeAll+0xb2>
						uxPendedTicks = 0;
 801258e:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8012590:	682b      	ldr	r3, [r5, #0]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d0e2      	beq.n	801255c <xTaskResumeAll+0x8c>
					taskYIELD_IF_USING_PREEMPTION();
 8012596:	4b0e      	ldr	r3, [pc, #56]	; (80125d0 <xTaskResumeAll+0x100>)
 8012598:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801259c:	601a      	str	r2, [r3, #0]
 801259e:	f3bf 8f4f 	dsb	sy
 80125a2:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80125a6:	2401      	movs	r4, #1
 80125a8:	e7d9      	b.n	801255e <xTaskResumeAll+0x8e>
 80125aa:	f7ff fdbf 	bl	801212c <prvResetNextTaskUnblockTime.part.1>
 80125ae:	e7e4      	b.n	801257a <xTaskResumeAll+0xaa>
 80125b0:	200017a8 	.word	0x200017a8
 80125b4:	2000179c 	.word	0x2000179c
 80125b8:	20001828 	.word	0x20001828
 80125bc:	200017e4 	.word	0x200017e4
 80125c0:	200017b0 	.word	0x200017b0
 80125c4:	20001708 	.word	0x20001708
 80125c8:	200017dc 	.word	0x200017dc
 80125cc:	200017a4 	.word	0x200017a4
 80125d0:	e000ed04 	.word	0xe000ed04
 80125d4:	20001710 	.word	0x20001710
 80125d8:	20001704 	.word	0x20001704

080125dc <vTaskDelay>:
	{
 80125dc:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80125de:	b1a8      	cbz	r0, 801260c <vTaskDelay+0x30>
			configASSERT( uxSchedulerSuspended == 0 );
 80125e0:	4b0f      	ldr	r3, [pc, #60]	; (8012620 <vTaskDelay+0x44>)
 80125e2:	6819      	ldr	r1, [r3, #0]
 80125e4:	b151      	cbz	r1, 80125fc <vTaskDelay+0x20>
 80125e6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80125ea:	b672      	cpsid	i
 80125ec:	f383 8811 	msr	BASEPRI, r3
 80125f0:	f3bf 8f6f 	isb	sy
 80125f4:	f3bf 8f4f 	dsb	sy
 80125f8:	b662      	cpsie	i
 80125fa:	e7fe      	b.n	80125fa <vTaskDelay+0x1e>
	++uxSchedulerSuspended;
 80125fc:	681a      	ldr	r2, [r3, #0]
 80125fe:	3201      	adds	r2, #1
 8012600:	601a      	str	r2, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012602:	f7ff fd17 	bl	8012034 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8012606:	f7ff ff63 	bl	80124d0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 801260a:	b938      	cbnz	r0, 801261c <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 801260c:	4b05      	ldr	r3, [pc, #20]	; (8012624 <vTaskDelay+0x48>)
 801260e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012612:	601a      	str	r2, [r3, #0]
 8012614:	f3bf 8f4f 	dsb	sy
 8012618:	f3bf 8f6f 	isb	sy
	}
 801261c:	bd08      	pop	{r3, pc}
 801261e:	bf00      	nop
 8012620:	200017a8 	.word	0x200017a8
 8012624:	e000ed04 	.word	0xe000ed04

08012628 <vTaskSwitchContext>:
{
 8012628:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801262a:	4b1f      	ldr	r3, [pc, #124]	; (80126a8 <vTaskSwitchContext+0x80>)
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	bb03      	cbnz	r3, 8012672 <vTaskSwitchContext+0x4a>
		xYieldPending = pdFALSE;
 8012630:	4a1e      	ldr	r2, [pc, #120]	; (80126ac <vTaskSwitchContext+0x84>)
		taskCHECK_FOR_STACK_OVERFLOW();
 8012632:	4c1f      	ldr	r4, [pc, #124]	; (80126b0 <vTaskSwitchContext+0x88>)
		xYieldPending = pdFALSE;
 8012634:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8012636:	6822      	ldr	r2, [r4, #0]
 8012638:	6823      	ldr	r3, [r4, #0]
 801263a:	6812      	ldr	r2, [r2, #0]
 801263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801263e:	429a      	cmp	r2, r3
 8012640:	d926      	bls.n	8012690 <vTaskSwitchContext+0x68>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012642:	4b1c      	ldr	r3, [pc, #112]	; (80126b4 <vTaskSwitchContext+0x8c>)
 8012644:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8012646:	fab3 f383 	clz	r3, r3
 801264a:	b2db      	uxtb	r3, r3
 801264c:	481a      	ldr	r0, [pc, #104]	; (80126b8 <vTaskSwitchContext+0x90>)
 801264e:	f1c3 031f 	rsb	r3, r3, #31
 8012652:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8012656:	0092      	lsls	r2, r2, #2
 8012658:	5881      	ldr	r1, [r0, r2]
 801265a:	1885      	adds	r5, r0, r2
 801265c:	b169      	cbz	r1, 801267a <vTaskSwitchContext+0x52>
 801265e:	6869      	ldr	r1, [r5, #4]
 8012660:	3208      	adds	r2, #8
 8012662:	6849      	ldr	r1, [r1, #4]
 8012664:	4402      	add	r2, r0
 8012666:	4291      	cmp	r1, r2
 8012668:	6069      	str	r1, [r5, #4]
 801266a:	d017      	beq.n	801269c <vTaskSwitchContext+0x74>
 801266c:	68cb      	ldr	r3, [r1, #12]
 801266e:	6023      	str	r3, [r4, #0]
}
 8012670:	bd38      	pop	{r3, r4, r5, pc}
		xYieldPending = pdTRUE;
 8012672:	4b0e      	ldr	r3, [pc, #56]	; (80126ac <vTaskSwitchContext+0x84>)
 8012674:	2201      	movs	r2, #1
 8012676:	601a      	str	r2, [r3, #0]
}
 8012678:	bd38      	pop	{r3, r4, r5, pc}
	__asm volatile
 801267a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801267e:	b672      	cpsid	i
 8012680:	f383 8811 	msr	BASEPRI, r3
 8012684:	f3bf 8f6f 	isb	sy
 8012688:	f3bf 8f4f 	dsb	sy
 801268c:	b662      	cpsie	i
 801268e:	e7fe      	b.n	801268e <vTaskSwitchContext+0x66>
		taskCHECK_FOR_STACK_OVERFLOW();
 8012690:	6820      	ldr	r0, [r4, #0]
 8012692:	6821      	ldr	r1, [r4, #0]
 8012694:	3134      	adds	r1, #52	; 0x34
 8012696:	f7ee fa8d 	bl	8000bb4 <vApplicationStackOverflowHook>
 801269a:	e7d2      	b.n	8012642 <vTaskSwitchContext+0x1a>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801269c:	2214      	movs	r2, #20
 801269e:	6849      	ldr	r1, [r1, #4]
 80126a0:	fb02 0303 	mla	r3, r2, r3, r0
 80126a4:	6059      	str	r1, [r3, #4]
 80126a6:	e7e1      	b.n	801266c <vTaskSwitchContext+0x44>
 80126a8:	200017a8 	.word	0x200017a8
 80126ac:	20001828 	.word	0x20001828
 80126b0:	20001704 	.word	0x20001704
 80126b4:	200017b0 	.word	0x200017b0
 80126b8:	20001710 	.word	0x20001710

080126bc <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 80126bc:	b950      	cbnz	r0, 80126d4 <vTaskPlaceOnEventList+0x18>
 80126be:	f04f 0330 	mov.w	r3, #48	; 0x30
 80126c2:	b672      	cpsid	i
 80126c4:	f383 8811 	msr	BASEPRI, r3
 80126c8:	f3bf 8f6f 	isb	sy
 80126cc:	f3bf 8f4f 	dsb	sy
 80126d0:	b662      	cpsie	i
 80126d2:	e7fe      	b.n	80126d2 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80126d4:	4b06      	ldr	r3, [pc, #24]	; (80126f0 <vTaskPlaceOnEventList+0x34>)
{
 80126d6:	b510      	push	{r4, lr}
 80126d8:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80126da:	6819      	ldr	r1, [r3, #0]
 80126dc:	3118      	adds	r1, #24
 80126de:	f7fe fe7d 	bl	80113dc <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80126e2:	4620      	mov	r0, r4
 80126e4:	2101      	movs	r1, #1
}
 80126e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80126ea:	f7ff bca3 	b.w	8012034 <prvAddCurrentTaskToDelayedList>
 80126ee:	bf00      	nop
 80126f0:	20001704 	.word	0x20001704

080126f4 <vTaskPlaceOnEventListRestricted>:
	{
 80126f4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 80126f6:	b180      	cbz	r0, 801271a <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80126f8:	4b0d      	ldr	r3, [pc, #52]	; (8012730 <vTaskPlaceOnEventListRestricted+0x3c>)
 80126fa:	460d      	mov	r5, r1
 80126fc:	4614      	mov	r4, r2
 80126fe:	6819      	ldr	r1, [r3, #0]
 8012700:	3118      	adds	r1, #24
 8012702:	f7fe fe5b 	bl	80113bc <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8012706:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8012708:	4621      	mov	r1, r4
 801270a:	bf0c      	ite	eq
 801270c:	4628      	moveq	r0, r5
 801270e:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8012712:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8012716:	f7ff bc8d 	b.w	8012034 <prvAddCurrentTaskToDelayedList>
 801271a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801271e:	b672      	cpsid	i
 8012720:	f383 8811 	msr	BASEPRI, r3
 8012724:	f3bf 8f6f 	isb	sy
 8012728:	f3bf 8f4f 	dsb	sy
 801272c:	b662      	cpsie	i
 801272e:	e7fe      	b.n	801272e <vTaskPlaceOnEventListRestricted+0x3a>
 8012730:	20001704 	.word	0x20001704

08012734 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012734:	68c3      	ldr	r3, [r0, #12]
{
 8012736:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012738:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 801273a:	b34c      	cbz	r4, 8012790 <xTaskRemoveFromEventList+0x5c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801273c:	f104 0518 	add.w	r5, r4, #24
 8012740:	4628      	mov	r0, r5
 8012742:	f7fe fe65 	bl	8011410 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012746:	4b19      	ldr	r3, [pc, #100]	; (80127ac <xTaskRemoveFromEventList+0x78>)
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	b9e3      	cbnz	r3, 8012786 <xTaskRemoveFromEventList+0x52>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801274c:	1d26      	adds	r6, r4, #4
		prvAddTaskToReadyList( pxUnblockedTCB );
 801274e:	4d18      	ldr	r5, [pc, #96]	; (80127b0 <xTaskRemoveFromEventList+0x7c>)
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012750:	4630      	mov	r0, r6
 8012752:	f7fe fe5d 	bl	8011410 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012756:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012758:	2301      	movs	r3, #1
 801275a:	4631      	mov	r1, r6
 801275c:	682e      	ldr	r6, [r5, #0]
 801275e:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 8012762:	4093      	lsls	r3, r2
 8012764:	4a13      	ldr	r2, [pc, #76]	; (80127b4 <xTaskRemoveFromEventList+0x80>)
 8012766:	4333      	orrs	r3, r6
 8012768:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 801276c:	602b      	str	r3, [r5, #0]
 801276e:	f7fe fe25 	bl	80113bc <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012772:	4b11      	ldr	r3, [pc, #68]	; (80127b8 <xTaskRemoveFromEventList+0x84>)
 8012774:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012776:	681b      	ldr	r3, [r3, #0]
 8012778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801277a:	429a      	cmp	r2, r3
 801277c:	d913      	bls.n	80127a6 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
 801277e:	4b0f      	ldr	r3, [pc, #60]	; (80127bc <xTaskRemoveFromEventList+0x88>)
 8012780:	2001      	movs	r0, #1
 8012782:	6018      	str	r0, [r3, #0]
}
 8012784:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012786:	4629      	mov	r1, r5
 8012788:	480d      	ldr	r0, [pc, #52]	; (80127c0 <xTaskRemoveFromEventList+0x8c>)
 801278a:	f7fe fe17 	bl	80113bc <vListInsertEnd>
 801278e:	e7f0      	b.n	8012772 <xTaskRemoveFromEventList+0x3e>
 8012790:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012794:	b672      	cpsid	i
 8012796:	f383 8811 	msr	BASEPRI, r3
 801279a:	f3bf 8f6f 	isb	sy
 801279e:	f3bf 8f4f 	dsb	sy
 80127a2:	b662      	cpsie	i
 80127a4:	e7fe      	b.n	80127a4 <xTaskRemoveFromEventList+0x70>
		xReturn = pdFALSE;
 80127a6:	2000      	movs	r0, #0
}
 80127a8:	bd70      	pop	{r4, r5, r6, pc}
 80127aa:	bf00      	nop
 80127ac:	200017a8 	.word	0x200017a8
 80127b0:	200017b0 	.word	0x200017b0
 80127b4:	20001710 	.word	0x20001710
 80127b8:	20001704 	.word	0x20001704
 80127bc:	20001828 	.word	0x20001828
 80127c0:	200017e4 	.word	0x200017e4

080127c4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80127c4:	4a03      	ldr	r2, [pc, #12]	; (80127d4 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 80127c6:	4b04      	ldr	r3, [pc, #16]	; (80127d8 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80127c8:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	e9c0 2300 	strd	r2, r3, [r0]
}
 80127d0:	4770      	bx	lr
 80127d2:	bf00      	nop
 80127d4:	200017e0 	.word	0x200017e0
 80127d8:	20001824 	.word	0x20001824

080127dc <xTaskCheckForTimeOut>:
{
 80127dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 80127de:	b350      	cbz	r0, 8012836 <xTaskCheckForTimeOut+0x5a>
	configASSERT( pxTicksToWait );
 80127e0:	b1f1      	cbz	r1, 8012820 <xTaskCheckForTimeOut+0x44>
 80127e2:	460d      	mov	r5, r1
 80127e4:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80127e6:	f000 fd2d 	bl	8013244 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80127ea:	f8df c080 	ldr.w	ip, [pc, #128]	; 801286c <xTaskCheckForTimeOut+0x90>
			if( *pxTicksToWait == portMAX_DELAY )
 80127ee:	682b      	ldr	r3, [r5, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80127f0:	6867      	ldr	r7, [r4, #4]
		const TickType_t xConstTickCount = xTickCount;
 80127f2:	f8dc 6000 	ldr.w	r6, [ip]
			if( *pxTicksToWait == portMAX_DELAY )
 80127f6:	1c5a      	adds	r2, r3, #1
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80127f8:	eba6 0007 	sub.w	r0, r6, r7
			if( *pxTicksToWait == portMAX_DELAY )
 80127fc:	d026      	beq.n	801284c <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80127fe:	491a      	ldr	r1, [pc, #104]	; (8012868 <xTaskCheckForTimeOut+0x8c>)
 8012800:	6822      	ldr	r2, [r4, #0]
 8012802:	f8d1 e000 	ldr.w	lr, [r1]
 8012806:	4572      	cmp	r2, lr
 8012808:	d001      	beq.n	801280e <xTaskCheckForTimeOut+0x32>
 801280a:	42b7      	cmp	r7, r6
 801280c:	d929      	bls.n	8012862 <xTaskCheckForTimeOut+0x86>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801280e:	4283      	cmp	r3, r0
 8012810:	d81e      	bhi.n	8012850 <xTaskCheckForTimeOut+0x74>
			*pxTicksToWait = 0;
 8012812:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 8012814:	2601      	movs	r6, #1
			*pxTicksToWait = 0;
 8012816:	602b      	str	r3, [r5, #0]
	taskEXIT_CRITICAL();
 8012818:	f000 fd3a 	bl	8013290 <vPortExitCritical>
}
 801281c:	4630      	mov	r0, r6
 801281e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012820:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012824:	b672      	cpsid	i
 8012826:	f383 8811 	msr	BASEPRI, r3
 801282a:	f3bf 8f6f 	isb	sy
 801282e:	f3bf 8f4f 	dsb	sy
 8012832:	b662      	cpsie	i
 8012834:	e7fe      	b.n	8012834 <xTaskCheckForTimeOut+0x58>
 8012836:	f04f 0330 	mov.w	r3, #48	; 0x30
 801283a:	b672      	cpsid	i
 801283c:	f383 8811 	msr	BASEPRI, r3
 8012840:	f3bf 8f6f 	isb	sy
 8012844:	f3bf 8f4f 	dsb	sy
 8012848:	b662      	cpsie	i
 801284a:	e7fe      	b.n	801284a <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 801284c:	2600      	movs	r6, #0
 801284e:	e7e3      	b.n	8012818 <xTaskCheckForTimeOut+0x3c>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012850:	6809      	ldr	r1, [r1, #0]
			*pxTicksToWait -= xElapsedTime;
 8012852:	1a1b      	subs	r3, r3, r0
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012854:	f8dc 2000 	ldr.w	r2, [ip]
			xReturn = pdFALSE;
 8012858:	2600      	movs	r6, #0
			*pxTicksToWait -= xElapsedTime;
 801285a:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801285c:	e9c4 1200 	strd	r1, r2, [r4]
 8012860:	e7da      	b.n	8012818 <xTaskCheckForTimeOut+0x3c>
			xReturn = pdTRUE;
 8012862:	2601      	movs	r6, #1
 8012864:	e7d8      	b.n	8012818 <xTaskCheckForTimeOut+0x3c>
 8012866:	bf00      	nop
 8012868:	200017e0 	.word	0x200017e0
 801286c:	20001824 	.word	0x20001824

08012870 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8012870:	4b01      	ldr	r3, [pc, #4]	; (8012878 <vTaskMissedYield+0x8>)
 8012872:	2201      	movs	r2, #1
 8012874:	601a      	str	r2, [r3, #0]
}
 8012876:	4770      	bx	lr
 8012878:	20001828 	.word	0x20001828

0801287c <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 801287c:	4b01      	ldr	r3, [pc, #4]	; (8012884 <xTaskGetCurrentTaskHandle+0x8>)
 801287e:	6818      	ldr	r0, [r3, #0]
	}
 8012880:	4770      	bx	lr
 8012882:	bf00      	nop
 8012884:	20001704 	.word	0x20001704

08012888 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8012888:	4b05      	ldr	r3, [pc, #20]	; (80128a0 <xTaskGetSchedulerState+0x18>)
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	b133      	cbz	r3, 801289c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801288e:	4b05      	ldr	r3, [pc, #20]	; (80128a4 <xTaskGetSchedulerState+0x1c>)
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8012894:	bf0c      	ite	eq
 8012896:	2002      	moveq	r0, #2
 8012898:	2000      	movne	r0, #0
 801289a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 801289c:	2001      	movs	r0, #1
	}
 801289e:	4770      	bx	lr
 80128a0:	200017f8 	.word	0x200017f8
 80128a4:	200017a8 	.word	0x200017a8

080128a8 <xTaskPriorityInherit>:
	{
 80128a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 80128ac:	4607      	mov	r7, r0
 80128ae:	b1c8      	cbz	r0, 80128e4 <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80128b0:	4c26      	ldr	r4, [pc, #152]	; (801294c <xTaskPriorityInherit+0xa4>)
 80128b2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80128b4:	6821      	ldr	r1, [r4, #0]
 80128b6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80128b8:	428a      	cmp	r2, r1
 80128ba:	d215      	bcs.n	80128e8 <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80128bc:	6981      	ldr	r1, [r0, #24]
 80128be:	2900      	cmp	r1, #0
 80128c0:	db04      	blt.n	80128cc <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80128c2:	6821      	ldr	r1, [r4, #0]
 80128c4:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80128c6:	f1c1 0107 	rsb	r1, r1, #7
 80128ca:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80128cc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80128d0:	4d1f      	ldr	r5, [pc, #124]	; (8012950 <xTaskPriorityInherit+0xa8>)
 80128d2:	6979      	ldr	r1, [r7, #20]
 80128d4:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80128d8:	4291      	cmp	r1, r2
 80128da:	d00e      	beq.n	80128fa <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80128dc:	6822      	ldr	r2, [r4, #0]
				xReturn = pdTRUE;
 80128de:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80128e0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80128e2:	62fa      	str	r2, [r7, #44]	; 0x2c
	}
 80128e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80128e8:	6822      	ldr	r2, [r4, #0]
 80128ea:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80128ec:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80128ee:	4298      	cmp	r0, r3
 80128f0:	bf2c      	ite	cs
 80128f2:	2000      	movcs	r0, #0
 80128f4:	2001      	movcc	r0, #1
	}
 80128f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80128fa:	f107 0804 	add.w	r8, r7, #4
 80128fe:	4640      	mov	r0, r8
 8012900:	f7fe fd86 	bl	8011410 <uxListRemove>
 8012904:	b9f8      	cbnz	r0, 8012946 <xTaskPriorityInherit+0x9e>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8012906:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012908:	4e12      	ldr	r6, [pc, #72]	; (8012954 <xTaskPriorityInherit+0xac>)
 801290a:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 801290e:	009b      	lsls	r3, r3, #2
 8012910:	58eb      	ldr	r3, [r5, r3]
 8012912:	b933      	cbnz	r3, 8012922 <xTaskPriorityInherit+0x7a>
 8012914:	2101      	movs	r1, #1
 8012916:	6833      	ldr	r3, [r6, #0]
 8012918:	fa01 f202 	lsl.w	r2, r1, r2
 801291c:	ea23 0202 	bic.w	r2, r3, r2
 8012920:	6032      	str	r2, [r6, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012922:	6822      	ldr	r2, [r4, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012924:	2401      	movs	r4, #1
 8012926:	6833      	ldr	r3, [r6, #0]
 8012928:	4641      	mov	r1, r8
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801292a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801292c:	fa04 f200 	lsl.w	r2, r4, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012930:	62f8      	str	r0, [r7, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012932:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012936:	4313      	orrs	r3, r2
 8012938:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 801293c:	6033      	str	r3, [r6, #0]
 801293e:	f7fe fd3d 	bl	80113bc <vListInsertEnd>
				xReturn = pdTRUE;
 8012942:	4620      	mov	r0, r4
 8012944:	e7ce      	b.n	80128e4 <xTaskPriorityInherit+0x3c>
 8012946:	4e03      	ldr	r6, [pc, #12]	; (8012954 <xTaskPriorityInherit+0xac>)
 8012948:	e7eb      	b.n	8012922 <xTaskPriorityInherit+0x7a>
 801294a:	bf00      	nop
 801294c:	20001704 	.word	0x20001704
 8012950:	20001710 	.word	0x20001710
 8012954:	200017b0 	.word	0x200017b0

08012958 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8012958:	b178      	cbz	r0, 801297a <xTaskPriorityDisinherit+0x22>
	{
 801295a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 801295c:	4b2a      	ldr	r3, [pc, #168]	; (8012a08 <xTaskPriorityDisinherit+0xb0>)
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	4283      	cmp	r3, r0
 8012962:	d00c      	beq.n	801297e <xTaskPriorityDisinherit+0x26>
 8012964:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012968:	b672      	cpsid	i
 801296a:	f383 8811 	msr	BASEPRI, r3
 801296e:	f3bf 8f6f 	isb	sy
 8012972:	f3bf 8f4f 	dsb	sy
 8012976:	b662      	cpsie	i
 8012978:	e7fe      	b.n	8012978 <xTaskPriorityDisinherit+0x20>
	BaseType_t xReturn = pdFALSE;
 801297a:	2000      	movs	r0, #0
	}
 801297c:	4770      	bx	lr
			configASSERT( pxTCB->uxMutexesHeld );
 801297e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012980:	b953      	cbnz	r3, 8012998 <xTaskPriorityDisinherit+0x40>
 8012982:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012986:	b672      	cpsid	i
 8012988:	f383 8811 	msr	BASEPRI, r3
 801298c:	f3bf 8f6f 	isb	sy
 8012990:	f3bf 8f4f 	dsb	sy
 8012994:	b662      	cpsie	i
 8012996:	e7fe      	b.n	8012996 <xTaskPriorityDisinherit+0x3e>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012998:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 801299a:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801299c:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 801299e:	6483      	str	r3, [r0, #72]	; 0x48
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80129a0:	4291      	cmp	r1, r2
 80129a2:	d000      	beq.n	80129a6 <xTaskPriorityDisinherit+0x4e>
 80129a4:	b10b      	cbz	r3, 80129aa <xTaskPriorityDisinherit+0x52>
	BaseType_t xReturn = pdFALSE;
 80129a6:	2000      	movs	r0, #0
	}
 80129a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80129aa:	1d07      	adds	r7, r0, #4
 80129ac:	4604      	mov	r4, r0
 80129ae:	4638      	mov	r0, r7
 80129b0:	f7fe fd2e 	bl	8011410 <uxListRemove>
 80129b4:	b1b8      	cbz	r0, 80129e6 <xTaskPriorityDisinherit+0x8e>
 80129b6:	4815      	ldr	r0, [pc, #84]	; (8012a0c <xTaskPriorityDisinherit+0xb4>)
 80129b8:	4a15      	ldr	r2, [pc, #84]	; (8012a10 <xTaskPriorityDisinherit+0xb8>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80129ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
					prvAddTaskToReadyList( pxTCB );
 80129bc:	2501      	movs	r5, #1
 80129be:	f04f 0c14 	mov.w	ip, #20
 80129c2:	f8d2 e000 	ldr.w	lr, [r2]
 80129c6:	fa05 f603 	lsl.w	r6, r5, r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80129ca:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80129cc:	fb0c 0003 	mla	r0, ip, r3, r0
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80129d0:	f1c3 0307 	rsb	r3, r3, #7
					prvAddTaskToReadyList( pxTCB );
 80129d4:	ea46 060e 	orr.w	r6, r6, lr
 80129d8:	4639      	mov	r1, r7
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80129da:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80129dc:	6016      	str	r6, [r2, #0]
 80129de:	f7fe fced 	bl	80113bc <vListInsertEnd>
					xReturn = pdTRUE;
 80129e2:	4628      	mov	r0, r5
	}
 80129e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80129e6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80129e8:	2314      	movs	r3, #20
 80129ea:	4808      	ldr	r0, [pc, #32]	; (8012a0c <xTaskPriorityDisinherit+0xb4>)
 80129ec:	fb03 f301 	mul.w	r3, r3, r1
 80129f0:	4a07      	ldr	r2, [pc, #28]	; (8012a10 <xTaskPriorityDisinherit+0xb8>)
 80129f2:	58c3      	ldr	r3, [r0, r3]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d1e0      	bne.n	80129ba <xTaskPriorityDisinherit+0x62>
 80129f8:	2501      	movs	r5, #1
 80129fa:	6813      	ldr	r3, [r2, #0]
 80129fc:	408d      	lsls	r5, r1
 80129fe:	ea23 0305 	bic.w	r3, r3, r5
 8012a02:	6013      	str	r3, [r2, #0]
 8012a04:	e7d9      	b.n	80129ba <xTaskPriorityDisinherit+0x62>
 8012a06:	bf00      	nop
 8012a08:	20001704 	.word	0x20001704
 8012a0c:	20001710 	.word	0x20001710
 8012a10:	200017b0 	.word	0x200017b0

08012a14 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8012a14:	b1b8      	cbz	r0, 8012a46 <vTaskPriorityDisinheritAfterTimeout+0x32>
	{
 8012a16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB->uxMutexesHeld );
 8012a18:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8012a1a:	b954      	cbnz	r4, 8012a32 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8012a1c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012a20:	b672      	cpsid	i
 8012a22:	f383 8811 	msr	BASEPRI, r3
 8012a26:	f3bf 8f6f 	isb	sy
 8012a2a:	f3bf 8f4f 	dsb	sy
 8012a2e:	b662      	cpsie	i
 8012a30:	e7fe      	b.n	8012a30 <vTaskPriorityDisinheritAfterTimeout+0x1c>
 8012a32:	6c43      	ldr	r3, [r0, #68]	; 0x44
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012a34:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8012a36:	428b      	cmp	r3, r1
 8012a38:	bf38      	it	cc
 8012a3a:	460b      	movcc	r3, r1
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012a3c:	429a      	cmp	r2, r3
 8012a3e:	d001      	beq.n	8012a44 <vTaskPriorityDisinheritAfterTimeout+0x30>
 8012a40:	2c01      	cmp	r4, #1
 8012a42:	d001      	beq.n	8012a48 <vTaskPriorityDisinheritAfterTimeout+0x34>
	}
 8012a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a46:	4770      	bx	lr
					configASSERT( pxTCB != pxCurrentTCB );
 8012a48:	4920      	ldr	r1, [pc, #128]	; (8012acc <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 8012a4a:	6809      	ldr	r1, [r1, #0]
 8012a4c:	4281      	cmp	r1, r0
 8012a4e:	d022      	beq.n	8012a96 <vTaskPriorityDisinheritAfterTimeout+0x82>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012a50:	6981      	ldr	r1, [r0, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 8012a52:	62c3      	str	r3, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012a54:	2900      	cmp	r1, #0
 8012a56:	db02      	blt.n	8012a5e <vTaskPriorityDisinheritAfterTimeout+0x4a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012a58:	f1c3 0307 	rsb	r3, r3, #7
 8012a5c:	6183      	str	r3, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012a5e:	4e1c      	ldr	r6, [pc, #112]	; (8012ad0 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 8012a60:	2514      	movs	r5, #20
 8012a62:	6943      	ldr	r3, [r0, #20]
 8012a64:	fb05 6202 	mla	r2, r5, r2, r6
 8012a68:	4293      	cmp	r3, r2
 8012a6a:	d1eb      	bne.n	8012a44 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012a6c:	1d07      	adds	r7, r0, #4
 8012a6e:	4604      	mov	r4, r0
 8012a70:	4638      	mov	r0, r7
 8012a72:	f7fe fccd 	bl	8011410 <uxListRemove>
 8012a76:	b1c8      	cbz	r0, 8012aac <vTaskPriorityDisinheritAfterTimeout+0x98>
 8012a78:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8012a7a:	4b16      	ldr	r3, [pc, #88]	; (8012ad4 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
						prvAddTaskToReadyList( pxTCB );
 8012a7c:	2201      	movs	r2, #1
 8012a7e:	681c      	ldr	r4, [r3, #0]
 8012a80:	2514      	movs	r5, #20
 8012a82:	4639      	mov	r1, r7
 8012a84:	4082      	lsls	r2, r0
 8012a86:	fb05 6000 	mla	r0, r5, r0, r6
 8012a8a:	4322      	orrs	r2, r4
 8012a8c:	601a      	str	r2, [r3, #0]
	}
 8012a8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 8012a92:	f7fe bc93 	b.w	80113bc <vListInsertEnd>
 8012a96:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012a9a:	b672      	cpsid	i
 8012a9c:	f383 8811 	msr	BASEPRI, r3
 8012aa0:	f3bf 8f6f 	isb	sy
 8012aa4:	f3bf 8f4f 	dsb	sy
 8012aa8:	b662      	cpsie	i
 8012aaa:	e7fe      	b.n	8012aaa <vTaskPriorityDisinheritAfterTimeout+0x96>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012aac:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8012aae:	2201      	movs	r2, #1
 8012ab0:	fb05 f500 	mul.w	r5, r5, r0
 8012ab4:	fa02 f400 	lsl.w	r4, r2, r0
 8012ab8:	5973      	ldr	r3, [r6, r5]
 8012aba:	b10b      	cbz	r3, 8012ac0 <vTaskPriorityDisinheritAfterTimeout+0xac>
 8012abc:	4b05      	ldr	r3, [pc, #20]	; (8012ad4 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 8012abe:	e7dd      	b.n	8012a7c <vTaskPriorityDisinheritAfterTimeout+0x68>
 8012ac0:	4b04      	ldr	r3, [pc, #16]	; (8012ad4 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 8012ac2:	681a      	ldr	r2, [r3, #0]
 8012ac4:	ea22 0204 	bic.w	r2, r2, r4
 8012ac8:	601a      	str	r2, [r3, #0]
 8012aca:	e7d7      	b.n	8012a7c <vTaskPriorityDisinheritAfterTimeout+0x68>
 8012acc:	20001704 	.word	0x20001704
 8012ad0:	20001710 	.word	0x20001710
 8012ad4:	200017b0 	.word	0x200017b0

08012ad8 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8012ad8:	4b04      	ldr	r3, [pc, #16]	; (8012aec <pvTaskIncrementMutexHeldCount+0x14>)
 8012ada:	681a      	ldr	r2, [r3, #0]
 8012adc:	b11a      	cbz	r2, 8012ae6 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8012ade:	6819      	ldr	r1, [r3, #0]
 8012ae0:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8012ae2:	3201      	adds	r2, #1
 8012ae4:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 8012ae6:	6818      	ldr	r0, [r3, #0]
	}
 8012ae8:	4770      	bx	lr
 8012aea:	bf00      	nop
 8012aec:	20001704 	.word	0x20001704

08012af0 <ulTaskNotifyTake>:
	{
 8012af0:	b570      	push	{r4, r5, r6, lr}
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8012af2:	4c17      	ldr	r4, [pc, #92]	; (8012b50 <ulTaskNotifyTake+0x60>)
	{
 8012af4:	4606      	mov	r6, r0
 8012af6:	460d      	mov	r5, r1
		taskENTER_CRITICAL();
 8012af8:	f000 fba4 	bl	8013244 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8012afc:	6823      	ldr	r3, [r4, #0]
 8012afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012b00:	b923      	cbnz	r3, 8012b0c <ulTaskNotifyTake+0x1c>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8012b02:	6823      	ldr	r3, [r4, #0]
 8012b04:	2101      	movs	r1, #1
 8012b06:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
				if( xTicksToWait > ( TickType_t ) 0 )
 8012b0a:	b9ad      	cbnz	r5, 8012b38 <ulTaskNotifyTake+0x48>
		taskEXIT_CRITICAL();
 8012b0c:	f000 fbc0 	bl	8013290 <vPortExitCritical>
		taskENTER_CRITICAL();
 8012b10:	f000 fb98 	bl	8013244 <vPortEnterCritical>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8012b14:	6823      	ldr	r3, [r4, #0]
 8012b16:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
			if( ulReturn != 0UL )
 8012b18:	b11d      	cbz	r5, 8012b22 <ulTaskNotifyTake+0x32>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8012b1a:	6823      	ldr	r3, [r4, #0]
				if( xClearCountOnExit != pdFALSE )
 8012b1c:	b94e      	cbnz	r6, 8012b32 <ulTaskNotifyTake+0x42>
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8012b1e:	1e6a      	subs	r2, r5, #1
 8012b20:	64da      	str	r2, [r3, #76]	; 0x4c
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012b22:	6823      	ldr	r3, [r4, #0]
 8012b24:	2200      	movs	r2, #0
 8012b26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		taskEXIT_CRITICAL();
 8012b2a:	f000 fbb1 	bl	8013290 <vPortExitCritical>
	}
 8012b2e:	4628      	mov	r0, r5
 8012b30:	bd70      	pop	{r4, r5, r6, pc}
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8012b32:	2200      	movs	r2, #0
 8012b34:	64da      	str	r2, [r3, #76]	; 0x4c
 8012b36:	e7f4      	b.n	8012b22 <ulTaskNotifyTake+0x32>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012b38:	4628      	mov	r0, r5
 8012b3a:	f7ff fa7b 	bl	8012034 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 8012b3e:	4b05      	ldr	r3, [pc, #20]	; (8012b54 <ulTaskNotifyTake+0x64>)
 8012b40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012b44:	601a      	str	r2, [r3, #0]
 8012b46:	f3bf 8f4f 	dsb	sy
 8012b4a:	f3bf 8f6f 	isb	sy
 8012b4e:	e7dd      	b.n	8012b0c <ulTaskNotifyTake+0x1c>
 8012b50:	20001704 	.word	0x20001704
 8012b54:	e000ed04 	.word	0xe000ed04

08012b58 <vTaskNotifyGiveFromISR>:
		configASSERT( xTaskToNotify );
 8012b58:	b308      	cbz	r0, 8012b9e <vTaskNotifyGiveFromISR+0x46>
	{
 8012b5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b5e:	4604      	mov	r4, r0
 8012b60:	460e      	mov	r6, r1
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012b62:	f000 fc7d 	bl	8013460 <vPortValidateInterruptPriority>
	__asm volatile
 8012b66:	f3ef 8711 	mrs	r7, BASEPRI
 8012b6a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012b6e:	b672      	cpsid	i
 8012b70:	f383 8811 	msr	BASEPRI, r3
 8012b74:	f3bf 8f6f 	isb	sy
 8012b78:	f3bf 8f4f 	dsb	sy
 8012b7c:	b662      	cpsie	i
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8012b7e:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8012b80:	f894 5050 	ldrb.w	r5, [r4, #80]	; 0x50
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8012b84:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8012b88:	b2ed      	uxtb	r5, r5
			( pxTCB->ulNotifiedValue )++;
 8012b8a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8012b8c:	2d01      	cmp	r5, #1
			( pxTCB->ulNotifiedValue )++;
 8012b8e:	f103 0301 	add.w	r3, r3, #1
 8012b92:	64e3      	str	r3, [r4, #76]	; 0x4c
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8012b94:	d00e      	beq.n	8012bb4 <vTaskNotifyGiveFromISR+0x5c>
	__asm volatile
 8012b96:	f387 8811 	msr	BASEPRI, r7
	}
 8012b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
 8012b9e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012ba2:	b672      	cpsid	i
 8012ba4:	f383 8811 	msr	BASEPRI, r3
 8012ba8:	f3bf 8f6f 	isb	sy
 8012bac:	f3bf 8f4f 	dsb	sy
 8012bb0:	b662      	cpsie	i
 8012bb2:	e7fe      	b.n	8012bb2 <vTaskNotifyGiveFromISR+0x5a>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8012bb4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012bb6:	b153      	cbz	r3, 8012bce <vTaskNotifyGiveFromISR+0x76>
 8012bb8:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012bbc:	b672      	cpsid	i
 8012bbe:	f383 8811 	msr	BASEPRI, r3
 8012bc2:	f3bf 8f6f 	isb	sy
 8012bc6:	f3bf 8f4f 	dsb	sy
 8012bca:	b662      	cpsie	i
 8012bcc:	e7fe      	b.n	8012bcc <vTaskNotifyGiveFromISR+0x74>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012bce:	4b16      	ldr	r3, [pc, #88]	; (8012c28 <vTaskNotifyGiveFromISR+0xd0>)
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	bb13      	cbnz	r3, 8012c1a <vTaskNotifyGiveFromISR+0xc2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012bd4:	f104 0804 	add.w	r8, r4, #4
 8012bd8:	4640      	mov	r0, r8
 8012bda:	f7fe fc19 	bl	8011410 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012bde:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8012be0:	4a12      	ldr	r2, [pc, #72]	; (8012c2c <vTaskNotifyGiveFromISR+0xd4>)
 8012be2:	f04f 0c14 	mov.w	ip, #20
 8012be6:	fa05 f300 	lsl.w	r3, r5, r0
 8012bea:	4d11      	ldr	r5, [pc, #68]	; (8012c30 <vTaskNotifyGiveFromISR+0xd8>)
 8012bec:	f8d2 e000 	ldr.w	lr, [r2]
 8012bf0:	4641      	mov	r1, r8
 8012bf2:	fb0c 5000 	mla	r0, ip, r0, r5
 8012bf6:	ea43 030e 	orr.w	r3, r3, lr
 8012bfa:	6013      	str	r3, [r2, #0]
 8012bfc:	f7fe fbde 	bl	80113bc <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012c00:	4b0c      	ldr	r3, [pc, #48]	; (8012c34 <vTaskNotifyGiveFromISR+0xdc>)
 8012c02:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c08:	429a      	cmp	r2, r3
 8012c0a:	d9c4      	bls.n	8012b96 <vTaskNotifyGiveFromISR+0x3e>
					if( pxHigherPriorityTaskWoken != NULL )
 8012c0c:	b10e      	cbz	r6, 8012c12 <vTaskNotifyGiveFromISR+0xba>
						*pxHigherPriorityTaskWoken = pdTRUE;
 8012c0e:	2301      	movs	r3, #1
 8012c10:	6033      	str	r3, [r6, #0]
					xYieldPending = pdTRUE;
 8012c12:	4b09      	ldr	r3, [pc, #36]	; (8012c38 <vTaskNotifyGiveFromISR+0xe0>)
 8012c14:	2201      	movs	r2, #1
 8012c16:	601a      	str	r2, [r3, #0]
 8012c18:	e7bd      	b.n	8012b96 <vTaskNotifyGiveFromISR+0x3e>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8012c1a:	f104 0118 	add.w	r1, r4, #24
 8012c1e:	4807      	ldr	r0, [pc, #28]	; (8012c3c <vTaskNotifyGiveFromISR+0xe4>)
 8012c20:	f7fe fbcc 	bl	80113bc <vListInsertEnd>
 8012c24:	e7ec      	b.n	8012c00 <vTaskNotifyGiveFromISR+0xa8>
 8012c26:	bf00      	nop
 8012c28:	200017a8 	.word	0x200017a8
 8012c2c:	200017b0 	.word	0x200017b0
 8012c30:	20001710 	.word	0x20001710
 8012c34:	20001704 	.word	0x20001704
 8012c38:	20001828 	.word	0x20001828
 8012c3c:	200017e4 	.word	0x200017e4

08012c40 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012c40:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8012c42:	4c14      	ldr	r4, [pc, #80]	; (8012c94 <prvCheckForValidListAndQueue+0x54>)
{
 8012c44:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 8012c46:	f000 fafd 	bl	8013244 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8012c4a:	6825      	ldr	r5, [r4, #0]
 8012c4c:	b125      	cbz	r5, 8012c58 <prvCheckForValidListAndQueue+0x18>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8012c4e:	b003      	add	sp, #12
 8012c50:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8012c54:	f000 bb1c 	b.w	8013290 <vPortExitCritical>
			vListInitialise( &xActiveTimerList1 );
 8012c58:	4f0f      	ldr	r7, [pc, #60]	; (8012c98 <prvCheckForValidListAndQueue+0x58>)
			vListInitialise( &xActiveTimerList2 );
 8012c5a:	4e10      	ldr	r6, [pc, #64]	; (8012c9c <prvCheckForValidListAndQueue+0x5c>)
			vListInitialise( &xActiveTimerList1 );
 8012c5c:	4638      	mov	r0, r7
 8012c5e:	f7fe fb9d 	bl	801139c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012c62:	4630      	mov	r0, r6
 8012c64:	f7fe fb9a 	bl	801139c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8012c68:	4b0d      	ldr	r3, [pc, #52]	; (8012ca0 <prvCheckForValidListAndQueue+0x60>)
			pxOverflowTimerList = &xActiveTimerList2;
 8012c6a:	4a0e      	ldr	r2, [pc, #56]	; (8012ca4 <prvCheckForValidListAndQueue+0x64>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012c6c:	2110      	movs	r1, #16
 8012c6e:	9500      	str	r5, [sp, #0]
 8012c70:	200a      	movs	r0, #10
			pxCurrentTimerList = &xActiveTimerList1;
 8012c72:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012c74:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012c76:	4b0c      	ldr	r3, [pc, #48]	; (8012ca8 <prvCheckForValidListAndQueue+0x68>)
 8012c78:	4a0c      	ldr	r2, [pc, #48]	; (8012cac <prvCheckForValidListAndQueue+0x6c>)
 8012c7a:	f7fe fcb9 	bl	80115f0 <xQueueGenericCreateStatic>
 8012c7e:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 8012c80:	2800      	cmp	r0, #0
 8012c82:	d0e4      	beq.n	8012c4e <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012c84:	490a      	ldr	r1, [pc, #40]	; (8012cb0 <prvCheckForValidListAndQueue+0x70>)
 8012c86:	f7ff f8f1 	bl	8011e6c <vQueueAddToRegistry>
}
 8012c8a:	b003      	add	sp, #12
 8012c8c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8012c90:	f000 bafe 	b.w	8013290 <vPortExitCritical>
 8012c94:	20001948 	.word	0x20001948
 8012c98:	200018d4 	.word	0x200018d4
 8012c9c:	200018e8 	.word	0x200018e8
 8012ca0:	2000182c 	.word	0x2000182c
 8012ca4:	20001830 	.word	0x20001830
 8012ca8:	20001900 	.word	0x20001900
 8012cac:	20001834 	.word	0x20001834
 8012cb0:	08026bf0 	.word	0x08026bf0

08012cb4 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8012cb4:	4291      	cmp	r1, r2
{
 8012cb6:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012cb8:	6100      	str	r0, [r0, #16]
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8012cba:	6041      	str	r1, [r0, #4]
	if( xNextExpiryTime <= xTimeNow )
 8012cbc:	d805      	bhi.n	8012cca <prvInsertTimerInActiveList+0x16>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012cbe:	1ad2      	subs	r2, r2, r3
 8012cc0:	6983      	ldr	r3, [r0, #24]
 8012cc2:	429a      	cmp	r2, r3
 8012cc4:	d30c      	bcc.n	8012ce0 <prvInsertTimerInActiveList+0x2c>
			xProcessTimerNow = pdTRUE;
 8012cc6:	2001      	movs	r0, #1
}
 8012cc8:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012cca:	429a      	cmp	r2, r3
 8012ccc:	d201      	bcs.n	8012cd2 <prvInsertTimerInActiveList+0x1e>
 8012cce:	4299      	cmp	r1, r3
 8012cd0:	d2f9      	bcs.n	8012cc6 <prvInsertTimerInActiveList+0x12>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012cd2:	4b07      	ldr	r3, [pc, #28]	; (8012cf0 <prvInsertTimerInActiveList+0x3c>)
 8012cd4:	1d01      	adds	r1, r0, #4
 8012cd6:	6818      	ldr	r0, [r3, #0]
 8012cd8:	f7fe fb80 	bl	80113dc <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8012cdc:	2000      	movs	r0, #0
}
 8012cde:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8012ce0:	4b04      	ldr	r3, [pc, #16]	; (8012cf4 <prvInsertTimerInActiveList+0x40>)
 8012ce2:	1d01      	adds	r1, r0, #4
 8012ce4:	6818      	ldr	r0, [r3, #0]
 8012ce6:	f7fe fb79 	bl	80113dc <vListInsert>
 8012cea:	2000      	movs	r0, #0
}
 8012cec:	bd08      	pop	{r3, pc}
 8012cee:	bf00      	nop
 8012cf0:	2000182c 	.word	0x2000182c
 8012cf4:	20001830 	.word	0x20001830

08012cf8 <xTimerCreateTimerTask>:
{
 8012cf8:	b530      	push	{r4, r5, lr}
 8012cfa:	b089      	sub	sp, #36	; 0x24
	prvCheckForValidListAndQueue();
 8012cfc:	f7ff ffa0 	bl	8012c40 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8012d00:	4b13      	ldr	r3, [pc, #76]	; (8012d50 <xTimerCreateTimerTask+0x58>)
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	b1cb      	cbz	r3, 8012d3a <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8012d06:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8012d08:	aa07      	add	r2, sp, #28
 8012d0a:	a906      	add	r1, sp, #24
 8012d0c:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8012d0e:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8012d12:	f7ed ff61 	bl	8000bd8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8012d16:	9806      	ldr	r0, [sp, #24]
 8012d18:	2102      	movs	r1, #2
 8012d1a:	9d05      	ldr	r5, [sp, #20]
 8012d1c:	4623      	mov	r3, r4
 8012d1e:	9a07      	ldr	r2, [sp, #28]
 8012d20:	9100      	str	r1, [sp, #0]
 8012d22:	490c      	ldr	r1, [pc, #48]	; (8012d54 <xTimerCreateTimerTask+0x5c>)
 8012d24:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8012d28:	480b      	ldr	r0, [pc, #44]	; (8012d58 <xTimerCreateTimerTask+0x60>)
 8012d2a:	f7ff fa57 	bl	80121dc <xTaskCreateStatic>
 8012d2e:	4b0b      	ldr	r3, [pc, #44]	; (8012d5c <xTimerCreateTimerTask+0x64>)
 8012d30:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8012d32:	b110      	cbz	r0, 8012d3a <xTimerCreateTimerTask+0x42>
}
 8012d34:	2001      	movs	r0, #1
 8012d36:	b009      	add	sp, #36	; 0x24
 8012d38:	bd30      	pop	{r4, r5, pc}
 8012d3a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012d3e:	b672      	cpsid	i
 8012d40:	f383 8811 	msr	BASEPRI, r3
 8012d44:	f3bf 8f6f 	isb	sy
 8012d48:	f3bf 8f4f 	dsb	sy
 8012d4c:	b662      	cpsie	i
 8012d4e:	e7fe      	b.n	8012d4e <xTimerCreateTimerTask+0x56>
 8012d50:	20001948 	.word	0x20001948
 8012d54:	08026bf8 	.word	0x08026bf8
 8012d58:	08012f45 	.word	0x08012f45
 8012d5c:	2000194c 	.word	0x2000194c

08012d60 <xTimerCreate>:
	{
 8012d60:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8012d64:	4681      	mov	r9, r0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8012d66:	2028      	movs	r0, #40	; 0x28
	{
 8012d68:	460d      	mov	r5, r1
 8012d6a:	4616      	mov	r6, r2
 8012d6c:	461f      	mov	r7, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8012d6e:	f000 fbd1 	bl	8013514 <pvPortMalloc>
		if( pxNewTimer != NULL )
 8012d72:	4604      	mov	r4, r0
 8012d74:	b300      	cbz	r0, 8012db8 <xTimerCreate+0x58>
			pxNewTimer->ucStatus = 0x00;
 8012d76:	2300      	movs	r3, #0
 8012d78:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8012d7c:	b955      	cbnz	r5, 8012d94 <xTimerCreate+0x34>
 8012d7e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012d82:	b672      	cpsid	i
 8012d84:	f383 8811 	msr	BASEPRI, r3
 8012d88:	f3bf 8f6f 	isb	sy
 8012d8c:	f3bf 8f4f 	dsb	sy
 8012d90:	b662      	cpsie	i
 8012d92:	e7fe      	b.n	8012d92 <xTimerCreate+0x32>
		prvCheckForValidListAndQueue();
 8012d94:	f7ff ff54 	bl	8012c40 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8012d98:	9b06      	ldr	r3, [sp, #24]
		pxNewTimer->pcTimerName = pcTimerName;
 8012d9a:	f8c4 9000 	str.w	r9, [r4]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8012d9e:	1d20      	adds	r0, r4, #4
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8012da0:	61a5      	str	r5, [r4, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8012da2:	61e7      	str	r7, [r4, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8012da4:	6223      	str	r3, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8012da6:	f7fe fb05 	bl	80113b4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8012daa:	b12e      	cbz	r6, 8012db8 <xTimerCreate+0x58>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8012dac:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8012db0:	f043 0304 	orr.w	r3, r3, #4
 8012db4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	}
 8012db8:	4620      	mov	r0, r4
 8012dba:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 8012dbe:	bf00      	nop

08012dc0 <xTimerCreateStatic>:
	{
 8012dc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
			volatile size_t xSize = sizeof( StaticTimer_t );
 8012dc4:	2428      	movs	r4, #40	; 0x28
	{
 8012dc6:	b083      	sub	sp, #12
			volatile size_t xSize = sizeof( StaticTimer_t );
 8012dc8:	9401      	str	r4, [sp, #4]
			configASSERT( xSize == sizeof( Timer_t ) );
 8012dca:	9d01      	ldr	r5, [sp, #4]
 8012dcc:	2d28      	cmp	r5, #40	; 0x28
	{
 8012dce:	e9dd 640a 	ldrd	r6, r4, [sp, #40]	; 0x28
			configASSERT( xSize == sizeof( Timer_t ) );
 8012dd2:	d00a      	beq.n	8012dea <xTimerCreateStatic+0x2a>
 8012dd4:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012dd8:	b672      	cpsid	i
 8012dda:	f383 8811 	msr	BASEPRI, r3
 8012dde:	f3bf 8f6f 	isb	sy
 8012de2:	f3bf 8f4f 	dsb	sy
 8012de6:	b662      	cpsie	i
 8012de8:	e7fe      	b.n	8012de8 <xTimerCreateStatic+0x28>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012dea:	9d01      	ldr	r5, [sp, #4]
		configASSERT( pxTimerBuffer );
 8012dec:	b954      	cbnz	r4, 8012e04 <xTimerCreateStatic+0x44>
 8012dee:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012df2:	b672      	cpsid	i
 8012df4:	f383 8811 	msr	BASEPRI, r3
 8012df8:	f3bf 8f6f 	isb	sy
 8012dfc:	f3bf 8f4f 	dsb	sy
 8012e00:	b662      	cpsie	i
 8012e02:	e7fe      	b.n	8012e02 <xTimerCreateStatic+0x42>
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8012e04:	2502      	movs	r5, #2
 8012e06:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8012e0a:	b951      	cbnz	r1, 8012e22 <xTimerCreateStatic+0x62>
 8012e0c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012e10:	b672      	cpsid	i
 8012e12:	f383 8811 	msr	BASEPRI, r3
 8012e16:	f3bf 8f6f 	isb	sy
 8012e1a:	f3bf 8f4f 	dsb	sy
 8012e1e:	b662      	cpsie	i
 8012e20:	e7fe      	b.n	8012e20 <xTimerCreateStatic+0x60>
 8012e22:	4681      	mov	r9, r0
 8012e24:	4698      	mov	r8, r3
 8012e26:	460d      	mov	r5, r1
 8012e28:	4617      	mov	r7, r2
		prvCheckForValidListAndQueue();
 8012e2a:	f7ff ff09 	bl	8012c40 <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
 8012e2e:	f8c4 9000 	str.w	r9, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8012e32:	61a5      	str	r5, [r4, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8012e34:	1d20      	adds	r0, r4, #4
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8012e36:	e9c4 8607 	strd	r8, r6, [r4, #28]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8012e3a:	f7fe fabb 	bl	80113b4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8012e3e:	b12f      	cbz	r7, 8012e4c <xTimerCreateStatic+0x8c>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8012e40:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8012e44:	f043 0304 	orr.w	r3, r3, #4
 8012e48:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	}
 8012e4c:	4620      	mov	r0, r4
 8012e4e:	b003      	add	sp, #12
 8012e50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08012e54 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8012e54:	b1c0      	cbz	r0, 8012e88 <xTimerGenericCommand+0x34>
{
 8012e56:	b570      	push	{r4, r5, r6, lr}
	if( xTimerQueue != NULL )
 8012e58:	4d17      	ldr	r5, [pc, #92]	; (8012eb8 <xTimerGenericCommand+0x64>)
 8012e5a:	4604      	mov	r4, r0
{
 8012e5c:	b084      	sub	sp, #16
	if( xTimerQueue != NULL )
 8012e5e:	6828      	ldr	r0, [r5, #0]
 8012e60:	b180      	cbz	r0, 8012e84 <xTimerGenericCommand+0x30>
 8012e62:	4616      	mov	r6, r2
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012e64:	2905      	cmp	r1, #5
 8012e66:	461a      	mov	r2, r3
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8012e68:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012e6a:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012e6e:	dc16      	bgt.n	8012e9e <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012e70:	f7ff fd0a 	bl	8012888 <xTaskGetSchedulerState>
 8012e74:	2802      	cmp	r0, #2
 8012e76:	d018      	beq.n	8012eaa <xTimerGenericCommand+0x56>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012e78:	2300      	movs	r3, #0
 8012e7a:	6828      	ldr	r0, [r5, #0]
 8012e7c:	4669      	mov	r1, sp
 8012e7e:	461a      	mov	r2, r3
 8012e80:	f7fe fc40 	bl	8011704 <xQueueGenericSend>
}
 8012e84:	b004      	add	sp, #16
 8012e86:	bd70      	pop	{r4, r5, r6, pc}
 8012e88:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012e8c:	b672      	cpsid	i
 8012e8e:	f383 8811 	msr	BASEPRI, r3
 8012e92:	f3bf 8f6f 	isb	sy
 8012e96:	f3bf 8f4f 	dsb	sy
 8012e9a:	b662      	cpsie	i
 8012e9c:	e7fe      	b.n	8012e9c <xTimerGenericCommand+0x48>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012e9e:	2300      	movs	r3, #0
 8012ea0:	4669      	mov	r1, sp
 8012ea2:	f7fe fd21 	bl	80118e8 <xQueueGenericSendFromISR>
}
 8012ea6:	b004      	add	sp, #16
 8012ea8:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012eaa:	6828      	ldr	r0, [r5, #0]
 8012eac:	2300      	movs	r3, #0
 8012eae:	9a08      	ldr	r2, [sp, #32]
 8012eb0:	4669      	mov	r1, sp
 8012eb2:	f7fe fc27 	bl	8011704 <xQueueGenericSend>
 8012eb6:	e7e5      	b.n	8012e84 <xTimerGenericCommand+0x30>
 8012eb8:	20001948 	.word	0x20001948

08012ebc <prvSwitchTimerLists>:
{
 8012ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ec0:	4e1e      	ldr	r6, [pc, #120]	; (8012f3c <prvSwitchTimerLists+0x80>)
 8012ec2:	b082      	sub	sp, #8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012ec4:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012ec8:	e00d      	b.n	8012ee6 <prvSwitchTimerLists+0x2a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012eca:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012ecc:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012ece:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012ed0:	1d25      	adds	r5, r4, #4
 8012ed2:	4628      	mov	r0, r5
 8012ed4:	f7fe fa9c 	bl	8011410 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012ed8:	6a23      	ldr	r3, [r4, #32]
 8012eda:	4620      	mov	r0, r4
 8012edc:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012ede:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8012ee2:	075b      	lsls	r3, r3, #29
 8012ee4:	d40a      	bmi.n	8012efc <prvSwitchTimerLists+0x40>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012ee6:	6833      	ldr	r3, [r6, #0]
 8012ee8:	681a      	ldr	r2, [r3, #0]
 8012eea:	2a00      	cmp	r2, #0
 8012eec:	d1ed      	bne.n	8012eca <prvSwitchTimerLists+0xe>
	pxCurrentTimerList = pxOverflowTimerList;
 8012eee:	4a14      	ldr	r2, [pc, #80]	; (8012f40 <prvSwitchTimerLists+0x84>)
 8012ef0:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012ef2:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 8012ef4:	6031      	str	r1, [r6, #0]
}
 8012ef6:	b002      	add	sp, #8
 8012ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012efc:	69a0      	ldr	r0, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012efe:	4629      	mov	r1, r5
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012f00:	2300      	movs	r3, #0
 8012f02:	463a      	mov	r2, r7
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012f04:	183d      	adds	r5, r7, r0
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012f06:	4620      	mov	r0, r4
			if( xReloadTime > xNextExpireTime )
 8012f08:	42af      	cmp	r7, r5
 8012f0a:	d205      	bcs.n	8012f18 <prvSwitchTimerLists+0x5c>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012f0c:	6065      	str	r5, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012f0e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012f10:	6830      	ldr	r0, [r6, #0]
 8012f12:	f7fe fa63 	bl	80113dc <vListInsert>
 8012f16:	e7e6      	b.n	8012ee6 <prvSwitchTimerLists+0x2a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012f18:	f8cd 8000 	str.w	r8, [sp]
 8012f1c:	4619      	mov	r1, r3
 8012f1e:	f7ff ff99 	bl	8012e54 <xTimerGenericCommand>
				configASSERT( xResult );
 8012f22:	2800      	cmp	r0, #0
 8012f24:	d1df      	bne.n	8012ee6 <prvSwitchTimerLists+0x2a>
 8012f26:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012f2a:	b672      	cpsid	i
 8012f2c:	f383 8811 	msr	BASEPRI, r3
 8012f30:	f3bf 8f6f 	isb	sy
 8012f34:	f3bf 8f4f 	dsb	sy
 8012f38:	b662      	cpsie	i
 8012f3a:	e7fe      	b.n	8012f3a <prvSwitchTimerLists+0x7e>
 8012f3c:	2000182c 	.word	0x2000182c
 8012f40:	20001830 	.word	0x20001830

08012f44 <prvTimerTask>:
{
 8012f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f48:	4f82      	ldr	r7, [pc, #520]	; (8013154 <prvTimerTask+0x210>)
 8012f4a:	b087      	sub	sp, #28
 8012f4c:	4e82      	ldr	r6, [pc, #520]	; (8013158 <prvTimerTask+0x214>)
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012f4e:	f04f 0900 	mov.w	r9, #0
 8012f52:	4c82      	ldr	r4, [pc, #520]	; (801315c <prvTimerTask+0x218>)
 8012f54:	f8df a20c 	ldr.w	sl, [pc, #524]	; 8013164 <prvTimerTask+0x220>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012f58:	683b      	ldr	r3, [r7, #0]
 8012f5a:	681d      	ldr	r5, [r3, #0]
 8012f5c:	2d00      	cmp	r5, #0
 8012f5e:	f000 8099 	beq.w	8013094 <prvTimerTask+0x150>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012f62:	68db      	ldr	r3, [r3, #12]
 8012f64:	681d      	ldr	r5, [r3, #0]
	vTaskSuspendAll();
 8012f66:	f7ff f9f3 	bl	8012350 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8012f6a:	f7ff f9f9 	bl	8012360 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8012f6e:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 8012f70:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 8012f72:	4298      	cmp	r0, r3
 8012f74:	f0c0 8096 	bcc.w	80130a4 <prvTimerTask+0x160>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012f78:	4285      	cmp	r5, r0
	xLastTime = xTimeNow;
 8012f7a:	6030      	str	r0, [r6, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012f7c:	f240 80a5 	bls.w	80130ca <prvTimerTask+0x186>
 8012f80:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012f82:	eba5 010b 	sub.w	r1, r5, fp
 8012f86:	6820      	ldr	r0, [r4, #0]
 8012f88:	f7fe ff84 	bl	8011e94 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8012f8c:	f7ff faa0 	bl	80124d0 <xTaskResumeAll>
 8012f90:	b938      	cbnz	r0, 8012fa2 <prvTimerTask+0x5e>
					portYIELD_WITHIN_API();
 8012f92:	4b73      	ldr	r3, [pc, #460]	; (8013160 <prvTimerTask+0x21c>)
 8012f94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f98:	601a      	str	r2, [r3, #0]
 8012f9a:	f3bf 8f4f 	dsb	sy
 8012f9e:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012fa2:	2200      	movs	r2, #0
 8012fa4:	a902      	add	r1, sp, #8
 8012fa6:	6820      	ldr	r0, [r4, #0]
 8012fa8:	f7fe fd70 	bl	8011a8c <xQueueReceive>
 8012fac:	2800      	cmp	r0, #0
 8012fae:	d0d3      	beq.n	8012f58 <prvTimerTask+0x14>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012fb0:	9b02      	ldr	r3, [sp, #8]
 8012fb2:	9d04      	ldr	r5, [sp, #16]
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	da07      	bge.n	8012fc8 <prvTimerTask+0x84>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8012fb8:	9b03      	ldr	r3, [sp, #12]
 8012fba:	4628      	mov	r0, r5
 8012fbc:	9905      	ldr	r1, [sp, #20]
 8012fbe:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8012fc0:	9b02      	ldr	r3, [sp, #8]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	dbed      	blt.n	8012fa2 <prvTimerTask+0x5e>
 8012fc6:	9d04      	ldr	r5, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8012fc8:	696b      	ldr	r3, [r5, #20]
 8012fca:	b113      	cbz	r3, 8012fd2 <prvTimerTask+0x8e>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012fcc:	1d28      	adds	r0, r5, #4
 8012fce:	f7fe fa1f 	bl	8011410 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8012fd2:	f7ff f9c5 	bl	8012360 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8012fd6:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 8012fd8:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
 8012fda:	4298      	cmp	r0, r3
 8012fdc:	d369      	bcc.n	80130b2 <prvTimerTask+0x16e>
			switch( xMessage.xMessageID )
 8012fde:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 8012fe0:	f8c6 8000 	str.w	r8, [r6]
			switch( xMessage.xMessageID )
 8012fe4:	2b09      	cmp	r3, #9
 8012fe6:	d8dc      	bhi.n	8012fa2 <prvTimerTask+0x5e>
 8012fe8:	e8df f003 	tbb	[pc, r3]
 8012fec:	20272727 	.word	0x20272727
 8012ff0:	2727050e 	.word	0x2727050e
 8012ff4:	0e20      	.short	0x0e20
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8012ff6:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8012ffa:	079a      	lsls	r2, r3, #30
 8012ffc:	d57c      	bpl.n	80130f8 <prvTimerTask+0x1b4>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012ffe:	f023 0301 	bic.w	r3, r3, #1
 8013002:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8013006:	e7cc      	b.n	8012fa2 <prvTimerTask+0x5e>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013008:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801300c:	9903      	ldr	r1, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801300e:	f043 0301 	orr.w	r3, r3, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013012:	61a9      	str	r1, [r5, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013014:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8013018:	2900      	cmp	r1, #0
 801301a:	f000 8090 	beq.w	801313e <prvTimerTask+0x1fa>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801301e:	4441      	add	r1, r8
 8013020:	4628      	mov	r0, r5
 8013022:	4643      	mov	r3, r8
 8013024:	4642      	mov	r2, r8
 8013026:	f7ff fe45 	bl	8012cb4 <prvInsertTimerInActiveList>
 801302a:	e7ba      	b.n	8012fa2 <prvTimerTask+0x5e>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801302c:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8013030:	f023 0301 	bic.w	r3, r3, #1
 8013034:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8013038:	e7b3      	b.n	8012fa2 <prvTimerTask+0x5e>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801303a:	f895 c024 	ldrb.w	ip, [r5, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801303e:	4642      	mov	r2, r8
 8013040:	9b03      	ldr	r3, [sp, #12]
 8013042:	4628      	mov	r0, r5
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013044:	f04c 0c01 	orr.w	ip, ip, #1
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8013048:	69a9      	ldr	r1, [r5, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801304a:	f885 c024 	strb.w	ip, [r5, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801304e:	4419      	add	r1, r3
 8013050:	f7ff fe30 	bl	8012cb4 <prvInsertTimerInActiveList>
 8013054:	2800      	cmp	r0, #0
 8013056:	d0a4      	beq.n	8012fa2 <prvTimerTask+0x5e>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013058:	6a2b      	ldr	r3, [r5, #32]
 801305a:	4628      	mov	r0, r5
 801305c:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801305e:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8013062:	0759      	lsls	r1, r3, #29
 8013064:	d59d      	bpl.n	8012fa2 <prvTimerTask+0x5e>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8013066:	69aa      	ldr	r2, [r5, #24]
 8013068:	2300      	movs	r3, #0
 801306a:	4628      	mov	r0, r5
 801306c:	9d03      	ldr	r5, [sp, #12]
 801306e:	f8cd 9000 	str.w	r9, [sp]
 8013072:	4619      	mov	r1, r3
 8013074:	442a      	add	r2, r5
 8013076:	f7ff feed 	bl	8012e54 <xTimerGenericCommand>
							configASSERT( xResult );
 801307a:	2800      	cmp	r0, #0
 801307c:	d191      	bne.n	8012fa2 <prvTimerTask+0x5e>
 801307e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013082:	b672      	cpsid	i
 8013084:	f383 8811 	msr	BASEPRI, r3
 8013088:	f3bf 8f6f 	isb	sy
 801308c:	f3bf 8f4f 	dsb	sy
 8013090:	b662      	cpsie	i
 8013092:	e7fe      	b.n	8013092 <prvTimerTask+0x14e>
	vTaskSuspendAll();
 8013094:	f7ff f95c 	bl	8012350 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8013098:	f7ff f962 	bl	8012360 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 801309c:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 801309e:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 80130a0:	4298      	cmp	r0, r3
 80130a2:	d209      	bcs.n	80130b8 <prvTimerTask+0x174>
		prvSwitchTimerLists();
 80130a4:	f7ff ff0a 	bl	8012ebc <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 80130a8:	f8c6 b000 	str.w	fp, [r6]
			( void ) xTaskResumeAll();
 80130ac:	f7ff fa10 	bl	80124d0 <xTaskResumeAll>
 80130b0:	e777      	b.n	8012fa2 <prvTimerTask+0x5e>
		prvSwitchTimerLists();
 80130b2:	f7ff ff03 	bl	8012ebc <prvSwitchTimerLists>
 80130b6:	e792      	b.n	8012fde <prvTimerTask+0x9a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80130b8:	f8da 3000 	ldr.w	r3, [sl]
	xLastTime = xTimeNow;
 80130bc:	f8c6 b000 	str.w	fp, [r6]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80130c0:	681a      	ldr	r2, [r3, #0]
 80130c2:	fab2 f282 	clz	r2, r2
 80130c6:	0952      	lsrs	r2, r2, #5
 80130c8:	e75b      	b.n	8012f82 <prvTimerTask+0x3e>
				( void ) xTaskResumeAll();
 80130ca:	f7ff fa01 	bl	80124d0 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80130ce:	683b      	ldr	r3, [r7, #0]
 80130d0:	68db      	ldr	r3, [r3, #12]
 80130d2:	f8d3 800c 	ldr.w	r8, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80130d6:	f108 0004 	add.w	r0, r8, #4
 80130da:	f7fe f999 	bl	8011410 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80130de:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
 80130e2:	0758      	lsls	r0, r3, #29
 80130e4:	d40c      	bmi.n	8013100 <prvTimerTask+0x1bc>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80130e6:	f023 0301 	bic.w	r3, r3, #1
 80130ea:	f888 3024 	strb.w	r3, [r8, #36]	; 0x24
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80130ee:	f8d8 3020 	ldr.w	r3, [r8, #32]
 80130f2:	4640      	mov	r0, r8
 80130f4:	4798      	blx	r3
 80130f6:	e754      	b.n	8012fa2 <prvTimerTask+0x5e>
							vPortFree( pxTimer );
 80130f8:	4628      	mov	r0, r5
 80130fa:	f000 faa9 	bl	8013650 <vPortFree>
 80130fe:	e750      	b.n	8012fa2 <prvTimerTask+0x5e>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8013100:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8013104:	465a      	mov	r2, fp
 8013106:	462b      	mov	r3, r5
 8013108:	4640      	mov	r0, r8
 801310a:	4429      	add	r1, r5
 801310c:	f7ff fdd2 	bl	8012cb4 <prvInsertTimerInActiveList>
 8013110:	2800      	cmp	r0, #0
 8013112:	d0ec      	beq.n	80130ee <prvTimerTask+0x1aa>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013114:	2300      	movs	r3, #0
 8013116:	f8cd 9000 	str.w	r9, [sp]
 801311a:	462a      	mov	r2, r5
 801311c:	4640      	mov	r0, r8
 801311e:	4619      	mov	r1, r3
 8013120:	f7ff fe98 	bl	8012e54 <xTimerGenericCommand>
			configASSERT( xResult );
 8013124:	2800      	cmp	r0, #0
 8013126:	d1e2      	bne.n	80130ee <prvTimerTask+0x1aa>
 8013128:	f04f 0330 	mov.w	r3, #48	; 0x30
 801312c:	b672      	cpsid	i
 801312e:	f383 8811 	msr	BASEPRI, r3
 8013132:	f3bf 8f6f 	isb	sy
 8013136:	f3bf 8f4f 	dsb	sy
 801313a:	b662      	cpsie	i
 801313c:	e7fe      	b.n	801313c <prvTimerTask+0x1f8>
 801313e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013142:	b672      	cpsid	i
 8013144:	f383 8811 	msr	BASEPRI, r3
 8013148:	f3bf 8f6f 	isb	sy
 801314c:	f3bf 8f4f 	dsb	sy
 8013150:	b662      	cpsie	i
 8013152:	e7fe      	b.n	8013152 <prvTimerTask+0x20e>
 8013154:	2000182c 	.word	0x2000182c
 8013158:	200018fc 	.word	0x200018fc
 801315c:	20001948 	.word	0x20001948
 8013160:	e000ed04 	.word	0xe000ed04
 8013164:	20001830 	.word	0x20001830

08013168 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013168:	4b10      	ldr	r3, [pc, #64]	; (80131ac <prvTaskExitError+0x44>)
{
 801316a:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 801316c:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 801316e:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
 8013170:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8013172:	3301      	adds	r3, #1
 8013174:	d00a      	beq.n	801318c <prvTaskExitError+0x24>
 8013176:	f04f 0330 	mov.w	r3, #48	; 0x30
 801317a:	b672      	cpsid	i
 801317c:	f383 8811 	msr	BASEPRI, r3
 8013180:	f3bf 8f6f 	isb	sy
 8013184:	f3bf 8f4f 	dsb	sy
 8013188:	b662      	cpsie	i
 801318a:	e7fe      	b.n	801318a <prvTaskExitError+0x22>
 801318c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013190:	b672      	cpsid	i
 8013192:	f383 8811 	msr	BASEPRI, r3
 8013196:	f3bf 8f6f 	isb	sy
 801319a:	f3bf 8f4f 	dsb	sy
 801319e:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80131a0:	9b01      	ldr	r3, [sp, #4]
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d0fc      	beq.n	80131a0 <prvTaskExitError+0x38>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80131a6:	b002      	add	sp, #8
 80131a8:	4770      	bx	lr
 80131aa:	bf00      	nop
 80131ac:	200003d0 	.word	0x200003d0

080131b0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80131b0:	4808      	ldr	r0, [pc, #32]	; (80131d4 <prvPortStartFirstTask+0x24>)
 80131b2:	6800      	ldr	r0, [r0, #0]
 80131b4:	6800      	ldr	r0, [r0, #0]
 80131b6:	f380 8808 	msr	MSP, r0
 80131ba:	f04f 0000 	mov.w	r0, #0
 80131be:	f380 8814 	msr	CONTROL, r0
 80131c2:	b662      	cpsie	i
 80131c4:	b661      	cpsie	f
 80131c6:	f3bf 8f4f 	dsb	sy
 80131ca:	f3bf 8f6f 	isb	sy
 80131ce:	df00      	svc	0
 80131d0:	bf00      	nop
 80131d2:	0000      	.short	0x0000
 80131d4:	e000ed08 	.word	0xe000ed08

080131d8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80131d8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80131e8 <vPortEnableVFP+0x10>
 80131dc:	6801      	ldr	r1, [r0, #0]
 80131de:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80131e2:	6001      	str	r1, [r0, #0]
 80131e4:	4770      	bx	lr
 80131e6:	0000      	.short	0x0000
 80131e8:	e000ed88 	.word	0xe000ed88

080131ec <pxPortInitialiseStack>:
{
 80131ec:	b470      	push	{r4, r5, r6}
 80131ee:	4603      	mov	r3, r0
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80131f0:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80131f4:	4d08      	ldr	r5, [pc, #32]	; (8013218 <pxPortInitialiseStack+0x2c>)
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80131f6:	f06f 0402 	mvn.w	r4, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80131fa:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80131fe:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8013202:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013204:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013206:	f843 6c04 	str.w	r6, [r3, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801320a:	f843 5c0c 	str.w	r5, [r3, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801320e:	f843 4c24 	str.w	r4, [r3, #-36]
}
 8013212:	bc70      	pop	{r4, r5, r6}
 8013214:	4770      	bx	lr
 8013216:	bf00      	nop
 8013218:	08013169 	.word	0x08013169
 801321c:	00000000 	.word	0x00000000

08013220 <SVC_Handler>:
	__asm volatile (
 8013220:	4b07      	ldr	r3, [pc, #28]	; (8013240 <pxCurrentTCBConst2>)
 8013222:	6819      	ldr	r1, [r3, #0]
 8013224:	6808      	ldr	r0, [r1, #0]
 8013226:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801322a:	f380 8809 	msr	PSP, r0
 801322e:	f3bf 8f6f 	isb	sy
 8013232:	f04f 0000 	mov.w	r0, #0
 8013236:	f380 8811 	msr	BASEPRI, r0
 801323a:	4770      	bx	lr
 801323c:	f3af 8000 	nop.w

08013240 <pxCurrentTCBConst2>:
 8013240:	20001704 	.word	0x20001704

08013244 <vPortEnterCritical>:
 8013244:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013248:	b672      	cpsid	i
 801324a:	f383 8811 	msr	BASEPRI, r3
 801324e:	f3bf 8f6f 	isb	sy
 8013252:	f3bf 8f4f 	dsb	sy
 8013256:	b662      	cpsie	i
	uxCriticalNesting++;
 8013258:	4a0b      	ldr	r2, [pc, #44]	; (8013288 <vPortEnterCritical+0x44>)
 801325a:	6813      	ldr	r3, [r2, #0]
 801325c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 801325e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8013260:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8013262:	d000      	beq.n	8013266 <vPortEnterCritical+0x22>
}
 8013264:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013266:	4b09      	ldr	r3, [pc, #36]	; (801328c <vPortEnterCritical+0x48>)
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801326e:	d0f9      	beq.n	8013264 <vPortEnterCritical+0x20>
 8013270:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013274:	b672      	cpsid	i
 8013276:	f383 8811 	msr	BASEPRI, r3
 801327a:	f3bf 8f6f 	isb	sy
 801327e:	f3bf 8f4f 	dsb	sy
 8013282:	b662      	cpsie	i
 8013284:	e7fe      	b.n	8013284 <vPortEnterCritical+0x40>
 8013286:	bf00      	nop
 8013288:	200003d0 	.word	0x200003d0
 801328c:	e000ed04 	.word	0xe000ed04

08013290 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8013290:	4a09      	ldr	r2, [pc, #36]	; (80132b8 <vPortExitCritical+0x28>)
 8013292:	6813      	ldr	r3, [r2, #0]
 8013294:	b953      	cbnz	r3, 80132ac <vPortExitCritical+0x1c>
 8013296:	f04f 0330 	mov.w	r3, #48	; 0x30
 801329a:	b672      	cpsid	i
 801329c:	f383 8811 	msr	BASEPRI, r3
 80132a0:	f3bf 8f6f 	isb	sy
 80132a4:	f3bf 8f4f 	dsb	sy
 80132a8:	b662      	cpsie	i
 80132aa:	e7fe      	b.n	80132aa <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 80132ac:	3b01      	subs	r3, #1
 80132ae:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80132b0:	b90b      	cbnz	r3, 80132b6 <vPortExitCritical+0x26>
	__asm volatile
 80132b2:	f383 8811 	msr	BASEPRI, r3
}
 80132b6:	4770      	bx	lr
 80132b8:	200003d0 	.word	0x200003d0
 80132bc:	00000000 	.word	0x00000000

080132c0 <PendSV_Handler>:
	__asm volatile
 80132c0:	f3ef 8009 	mrs	r0, PSP
 80132c4:	f3bf 8f6f 	isb	sy
 80132c8:	4b15      	ldr	r3, [pc, #84]	; (8013320 <pxCurrentTCBConst>)
 80132ca:	681a      	ldr	r2, [r3, #0]
 80132cc:	f01e 0f10 	tst.w	lr, #16
 80132d0:	bf08      	it	eq
 80132d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80132d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132da:	6010      	str	r0, [r2, #0]
 80132dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80132e0:	f04f 0030 	mov.w	r0, #48	; 0x30
 80132e4:	b672      	cpsid	i
 80132e6:	f380 8811 	msr	BASEPRI, r0
 80132ea:	f3bf 8f4f 	dsb	sy
 80132ee:	f3bf 8f6f 	isb	sy
 80132f2:	b662      	cpsie	i
 80132f4:	f7ff f998 	bl	8012628 <vTaskSwitchContext>
 80132f8:	f04f 0000 	mov.w	r0, #0
 80132fc:	f380 8811 	msr	BASEPRI, r0
 8013300:	bc09      	pop	{r0, r3}
 8013302:	6819      	ldr	r1, [r3, #0]
 8013304:	6808      	ldr	r0, [r1, #0]
 8013306:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801330a:	f01e 0f10 	tst.w	lr, #16
 801330e:	bf08      	it	eq
 8013310:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013314:	f380 8809 	msr	PSP, r0
 8013318:	f3bf 8f6f 	isb	sy
 801331c:	4770      	bx	lr
 801331e:	bf00      	nop

08013320 <pxCurrentTCBConst>:
 8013320:	20001704 	.word	0x20001704

08013324 <SysTick_Handler>:
{
 8013324:	b508      	push	{r3, lr}
	__asm volatile
 8013326:	f04f 0330 	mov.w	r3, #48	; 0x30
 801332a:	b672      	cpsid	i
 801332c:	f383 8811 	msr	BASEPRI, r3
 8013330:	f3bf 8f6f 	isb	sy
 8013334:	f3bf 8f4f 	dsb	sy
 8013338:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 801333a:	f7ff f81f 	bl	801237c <xTaskIncrementTick>
 801333e:	b118      	cbz	r0, 8013348 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8013340:	4b03      	ldr	r3, [pc, #12]	; (8013350 <SysTick_Handler+0x2c>)
 8013342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013346:	601a      	str	r2, [r3, #0]
	__asm volatile
 8013348:	2300      	movs	r3, #0
 801334a:	f383 8811 	msr	BASEPRI, r3
}
 801334e:	bd08      	pop	{r3, pc}
 8013350:	e000ed04 	.word	0xe000ed04

08013354 <vPortSetupTimerInterrupt>:
{
 8013354:	b410      	push	{r4}
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013356:	2300      	movs	r3, #0
 8013358:	4a08      	ldr	r2, [pc, #32]	; (801337c <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801335a:	4c09      	ldr	r4, [pc, #36]	; (8013380 <vPortSetupTimerInterrupt+0x2c>)
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801335c:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801335e:	4809      	ldr	r0, [pc, #36]	; (8013384 <vPortSetupTimerInterrupt+0x30>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013360:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013362:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013364:	4c08      	ldr	r4, [pc, #32]	; (8013388 <vPortSetupTimerInterrupt+0x34>)
 8013366:	6803      	ldr	r3, [r0, #0]
 8013368:	4808      	ldr	r0, [pc, #32]	; (801338c <vPortSetupTimerInterrupt+0x38>)
 801336a:	fba4 4303 	umull	r4, r3, r4, r3
}
 801336e:	f85d 4b04 	ldr.w	r4, [sp], #4
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013372:	099b      	lsrs	r3, r3, #6
 8013374:	3b01      	subs	r3, #1
 8013376:	6003      	str	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8013378:	6011      	str	r1, [r2, #0]
}
 801337a:	4770      	bx	lr
 801337c:	e000e010 	.word	0xe000e010
 8013380:	e000e018 	.word	0xe000e018
 8013384:	20000244 	.word	0x20000244
 8013388:	10624dd3 	.word	0x10624dd3
 801338c:	e000e014 	.word	0xe000e014

08013390 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8013390:	4b2d      	ldr	r3, [pc, #180]	; (8013448 <xPortStartScheduler+0xb8>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013392:	492e      	ldr	r1, [pc, #184]	; (801344c <xPortStartScheduler+0xbc>)
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8013394:	482e      	ldr	r0, [pc, #184]	; (8013450 <xPortStartScheduler+0xc0>)
{
 8013396:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8013398:	781a      	ldrb	r2, [r3, #0]
{
 801339a:	b083      	sub	sp, #12
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801339c:	25ff      	movs	r5, #255	; 0xff
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801339e:	2407      	movs	r4, #7
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80133a0:	b2d2      	uxtb	r2, r2
 80133a2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80133a4:	701d      	strb	r5, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80133a6:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80133a8:	6004      	str	r4, [r0, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80133aa:	b2db      	uxtb	r3, r3
 80133ac:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80133b0:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80133b4:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80133b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80133bc:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80133be:	0611      	lsls	r1, r2, #24
 80133c0:	d510      	bpl.n	80133e4 <xPortStartScheduler+0x54>
 80133c2:	2306      	movs	r3, #6
 80133c4:	e000      	b.n	80133c8 <xPortStartScheduler+0x38>
 80133c6:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80133c8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80133cc:	1e59      	subs	r1, r3, #1
 80133ce:	0052      	lsls	r2, r2, #1
 80133d0:	b2d2      	uxtb	r2, r2
 80133d2:	f88d 2003 	strb.w	r2, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80133d6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80133da:	0612      	lsls	r2, r2, #24
 80133dc:	d4f3      	bmi.n	80133c6 <xPortStartScheduler+0x36>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80133de:	2b03      	cmp	r3, #3
 80133e0:	6003      	str	r3, [r0, #0]
 80133e2:	d00a      	beq.n	80133fa <xPortStartScheduler+0x6a>
	__asm volatile
 80133e4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80133e8:	b672      	cpsid	i
 80133ea:	f383 8811 	msr	BASEPRI, r3
 80133ee:	f3bf 8f6f 	isb	sy
 80133f2:	f3bf 8f4f 	dsb	sy
 80133f6:	b662      	cpsie	i
 80133f8:	e7fe      	b.n	80133f8 <xPortStartScheduler+0x68>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80133fa:	9901      	ldr	r1, [sp, #4]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80133fc:	021b      	lsls	r3, r3, #8
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80133fe:	4a15      	ldr	r2, [pc, #84]	; (8013454 <xPortStartScheduler+0xc4>)
	uxCriticalNesting = 0;
 8013400:	2400      	movs	r4, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013402:	b2c9      	uxtb	r1, r1
 8013404:	4d10      	ldr	r5, [pc, #64]	; (8013448 <xPortStartScheduler+0xb8>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013406:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801340a:	6003      	str	r3, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801340c:	7029      	strb	r1, [r5, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801340e:	6813      	ldr	r3, [r2, #0]
 8013410:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013414:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013416:	6813      	ldr	r3, [r2, #0]
 8013418:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801341c:	6013      	str	r3, [r2, #0]
	vPortSetupTimerInterrupt();
 801341e:	f7ff ff99 	bl	8013354 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8013422:	4b0d      	ldr	r3, [pc, #52]	; (8013458 <xPortStartScheduler+0xc8>)
 8013424:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8013426:	f7ff fed7 	bl	80131d8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801342a:	4a0c      	ldr	r2, [pc, #48]	; (801345c <xPortStartScheduler+0xcc>)
 801342c:	6813      	ldr	r3, [r2, #0]
 801342e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8013432:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8013434:	f7ff febc 	bl	80131b0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8013438:	f7ff f8f6 	bl	8012628 <vTaskSwitchContext>
	prvTaskExitError();
 801343c:	f7ff fe94 	bl	8013168 <prvTaskExitError>
}
 8013440:	4620      	mov	r0, r4
 8013442:	b003      	add	sp, #12
 8013444:	bd30      	pop	{r4, r5, pc}
 8013446:	bf00      	nop
 8013448:	e000e400 	.word	0xe000e400
 801344c:	20001950 	.word	0x20001950
 8013450:	20001954 	.word	0x20001954
 8013454:	e000ed20 	.word	0xe000ed20
 8013458:	200003d0 	.word	0x200003d0
 801345c:	e000ef34 	.word	0xe000ef34

08013460 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8013460:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013464:	2b0f      	cmp	r3, #15
 8013466:	d910      	bls.n	801348a <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8013468:	4912      	ldr	r1, [pc, #72]	; (80134b4 <vPortValidateInterruptPriority+0x54>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801346a:	4a13      	ldr	r2, [pc, #76]	; (80134b8 <vPortValidateInterruptPriority+0x58>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801346c:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801346e:	7812      	ldrb	r2, [r2, #0]
 8013470:	429a      	cmp	r2, r3
 8013472:	d90a      	bls.n	801348a <vPortValidateInterruptPriority+0x2a>
 8013474:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013478:	b672      	cpsid	i
 801347a:	f383 8811 	msr	BASEPRI, r3
 801347e:	f3bf 8f6f 	isb	sy
 8013482:	f3bf 8f4f 	dsb	sy
 8013486:	b662      	cpsie	i
 8013488:	e7fe      	b.n	8013488 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801348a:	4b0c      	ldr	r3, [pc, #48]	; (80134bc <vPortValidateInterruptPriority+0x5c>)
 801348c:	4a0c      	ldr	r2, [pc, #48]	; (80134c0 <vPortValidateInterruptPriority+0x60>)
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	6812      	ldr	r2, [r2, #0]
 8013492:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013496:	4293      	cmp	r3, r2
 8013498:	d90a      	bls.n	80134b0 <vPortValidateInterruptPriority+0x50>
 801349a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801349e:	b672      	cpsid	i
 80134a0:	f383 8811 	msr	BASEPRI, r3
 80134a4:	f3bf 8f6f 	isb	sy
 80134a8:	f3bf 8f4f 	dsb	sy
 80134ac:	b662      	cpsie	i
 80134ae:	e7fe      	b.n	80134ae <vPortValidateInterruptPriority+0x4e>
	}
 80134b0:	4770      	bx	lr
 80134b2:	bf00      	nop
 80134b4:	e000e3f0 	.word	0xe000e3f0
 80134b8:	20001950 	.word	0x20001950
 80134bc:	e000ed0c 	.word	0xe000ed0c
 80134c0:	20001954 	.word	0x20001954

080134c4 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80134c4:	4b11      	ldr	r3, [pc, #68]	; (801350c <prvInsertBlockIntoFreeList+0x48>)
{
 80134c6:	b430      	push	{r4, r5}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80134c8:	681a      	ldr	r2, [r3, #0]
 80134ca:	4282      	cmp	r2, r0
 80134cc:	d201      	bcs.n	80134d2 <prvInsertBlockIntoFreeList+0xe>
 80134ce:	4613      	mov	r3, r2
 80134d0:	e7fa      	b.n	80134c8 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80134d2:	685c      	ldr	r4, [r3, #4]
 80134d4:	1919      	adds	r1, r3, r4
 80134d6:	4288      	cmp	r0, r1
 80134d8:	d103      	bne.n	80134e2 <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80134da:	6841      	ldr	r1, [r0, #4]
 80134dc:	4618      	mov	r0, r3
 80134de:	4421      	add	r1, r4
 80134e0:	6059      	str	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80134e2:	6844      	ldr	r4, [r0, #4]
 80134e4:	1901      	adds	r1, r0, r4
 80134e6:	428a      	cmp	r2, r1
 80134e8:	d109      	bne.n	80134fe <prvInsertBlockIntoFreeList+0x3a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80134ea:	4909      	ldr	r1, [pc, #36]	; (8013510 <prvInsertBlockIntoFreeList+0x4c>)
 80134ec:	6809      	ldr	r1, [r1, #0]
 80134ee:	428a      	cmp	r2, r1
 80134f0:	d005      	beq.n	80134fe <prvInsertBlockIntoFreeList+0x3a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80134f2:	e9d2 5100 	ldrd	r5, r1, [r2]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80134f6:	4421      	add	r1, r4
 80134f8:	e9c0 5100 	strd	r5, r1, [r0]
 80134fc:	e000      	b.n	8013500 <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80134fe:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013500:	4298      	cmp	r0, r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013502:	bc30      	pop	{r4, r5}
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013504:	bf18      	it	ne
 8013506:	6018      	strne	r0, [r3, #0]
}
 8013508:	4770      	bx	lr
 801350a:	bf00      	nop
 801350c:	20029968 	.word	0x20029968
 8013510:	20001958 	.word	0x20001958

08013514 <pvPortMalloc>:
{
 8013514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013518:	4604      	mov	r4, r0
	vTaskSuspendAll();
 801351a:	f7fe ff19 	bl	8012350 <vTaskSuspendAll>
		if( pxEnd == NULL )
 801351e:	4845      	ldr	r0, [pc, #276]	; (8013634 <pvPortMalloc+0x120>)
 8013520:	6803      	ldr	r3, [r0, #0]
 8013522:	2b00      	cmp	r3, #0
 8013524:	d037      	beq.n	8013596 <pvPortMalloc+0x82>
 8013526:	4b44      	ldr	r3, [pc, #272]	; (8013638 <pvPortMalloc+0x124>)
 8013528:	681f      	ldr	r7, [r3, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801352a:	423c      	tst	r4, r7
 801352c:	d156      	bne.n	80135dc <pvPortMalloc+0xc8>
			if( xWantedSize > 0 )
 801352e:	2c00      	cmp	r4, #0
 8013530:	d054      	beq.n	80135dc <pvPortMalloc+0xc8>
				xWantedSize += xHeapStructSize;
 8013532:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013536:	0759      	lsls	r1, r3, #29
 8013538:	d002      	beq.n	8013540 <pvPortMalloc+0x2c>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801353a:	f023 0307 	bic.w	r3, r3, #7
 801353e:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013540:	2b00      	cmp	r3, #0
 8013542:	d04b      	beq.n	80135dc <pvPortMalloc+0xc8>
 8013544:	f8df 8104 	ldr.w	r8, [pc, #260]	; 801364c <pvPortMalloc+0x138>
 8013548:	f8d8 6000 	ldr.w	r6, [r8]
 801354c:	429e      	cmp	r6, r3
 801354e:	d345      	bcc.n	80135dc <pvPortMalloc+0xc8>
				pxBlock = xStart.pxNextFreeBlock;
 8013550:	493a      	ldr	r1, [pc, #232]	; (801363c <pvPortMalloc+0x128>)
 8013552:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013554:	e003      	b.n	801355e <pvPortMalloc+0x4a>
 8013556:	6825      	ldr	r5, [r4, #0]
 8013558:	b125      	cbz	r5, 8013564 <pvPortMalloc+0x50>
 801355a:	4621      	mov	r1, r4
 801355c:	462c      	mov	r4, r5
 801355e:	6862      	ldr	r2, [r4, #4]
 8013560:	429a      	cmp	r2, r3
 8013562:	d3f8      	bcc.n	8013556 <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 8013564:	6800      	ldr	r0, [r0, #0]
 8013566:	42a0      	cmp	r0, r4
 8013568:	d038      	beq.n	80135dc <pvPortMalloc+0xc8>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801356a:	eba2 0c03 	sub.w	ip, r2, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801356e:	6820      	ldr	r0, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013570:	680d      	ldr	r5, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013572:	f1bc 0f10 	cmp.w	ip, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013576:	6008      	str	r0, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013578:	d93e      	bls.n	80135f8 <pvPortMalloc+0xe4>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801357a:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801357c:	0742      	lsls	r2, r0, #29
 801357e:	d035      	beq.n	80135ec <pvPortMalloc+0xd8>
 8013580:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013584:	b672      	cpsid	i
 8013586:	f383 8811 	msr	BASEPRI, r3
 801358a:	f3bf 8f6f 	isb	sy
 801358e:	f3bf 8f4f 	dsb	sy
 8013592:	b662      	cpsie	i
 8013594:	e7fe      	b.n	8013594 <pvPortMalloc+0x80>
	uxAddress = ( size_t ) ucHeap;
 8013596:	4b2a      	ldr	r3, [pc, #168]	; (8013640 <pvPortMalloc+0x12c>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013598:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
	uxAddress -= xHeapStructSize;
 801359c:	4a29      	ldr	r2, [pc, #164]	; (8013644 <pvPortMalloc+0x130>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801359e:	075d      	lsls	r5, r3, #29
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80135a0:	4f29      	ldr	r7, [pc, #164]	; (8013648 <pvPortMalloc+0x134>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80135a2:	f022 0207 	bic.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 80135a6:	f04f 0500 	mov.w	r5, #0
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80135aa:	bf18      	it	ne
 80135ac:	3307      	addne	r3, #7
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80135ae:	f8df c09c 	ldr.w	ip, [pc, #156]	; 801364c <pvPortMalloc+0x138>
	pxEnd = ( void * ) uxAddress;
 80135b2:	6002      	str	r2, [r0, #0]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80135b4:	bf18      	it	ne
 80135b6:	f023 0307 	bicne.w	r3, r3, #7
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80135ba:	4619      	mov	r1, r3
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80135bc:	1ad3      	subs	r3, r2, r3
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80135be:	603b      	str	r3, [r7, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80135c0:	4637      	mov	r7, r6
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80135c2:	f8cc 3000 	str.w	r3, [ip]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80135c6:	423c      	tst	r4, r7
	pxEnd->pxNextFreeBlock = NULL;
 80135c8:	e9c2 5500 	strd	r5, r5, [r2]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80135cc:	e9c1 2300 	strd	r2, r3, [r1]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80135d0:	4b1a      	ldr	r3, [pc, #104]	; (801363c <pvPortMalloc+0x128>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80135d2:	4a19      	ldr	r2, [pc, #100]	; (8013638 <pvPortMalloc+0x124>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80135d4:	e9c3 1500 	strd	r1, r5, [r3]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80135d8:	6016      	str	r6, [r2, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80135da:	d0a8      	beq.n	801352e <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
 80135dc:	f7fe ff78 	bl	80124d0 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 80135e0:	2500      	movs	r5, #0
 80135e2:	f7ed fae9 	bl	8000bb8 <vApplicationMallocFailedHook>
}
 80135e6:	4628      	mov	r0, r5
 80135e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80135ec:	f8c0 c004 	str.w	ip, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80135f0:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80135f2:	f7ff ff67 	bl	80134c4 <prvInsertBlockIntoFreeList>
 80135f6:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80135f8:	4913      	ldr	r1, [pc, #76]	; (8013648 <pvPortMalloc+0x134>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80135fa:	1ab6      	subs	r6, r6, r2
					pxBlock->pxNextFreeBlock = NULL;
 80135fc:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80135fe:	433a      	orrs	r2, r7
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013600:	6808      	ldr	r0, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013602:	3508      	adds	r5, #8
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013604:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013608:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 801360a:	e9c4 3200 	strd	r3, r2, [r4]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801360e:	bf38      	it	cc
 8013610:	600e      	strcc	r6, [r1, #0]
	( void ) xTaskResumeAll();
 8013612:	f7fe ff5d 	bl	80124d0 <xTaskResumeAll>
		if( pvReturn == NULL )
 8013616:	2d00      	cmp	r5, #0
 8013618:	d0e2      	beq.n	80135e0 <pvPortMalloc+0xcc>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801361a:	076b      	lsls	r3, r5, #29
 801361c:	d0e3      	beq.n	80135e6 <pvPortMalloc+0xd2>
 801361e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013622:	b672      	cpsid	i
 8013624:	f383 8811 	msr	BASEPRI, r3
 8013628:	f3bf 8f6f 	isb	sy
 801362c:	f3bf 8f4f 	dsb	sy
 8013630:	b662      	cpsie	i
 8013632:	e7fe      	b.n	8013632 <pvPortMalloc+0x11e>
 8013634:	20001958 	.word	0x20001958
 8013638:	2002995c 	.word	0x2002995c
 801363c:	20029968 	.word	0x20029968
 8013640:	2000195c 	.word	0x2000195c
 8013644:	20029954 	.word	0x20029954
 8013648:	20029964 	.word	0x20029964
 801364c:	20029960 	.word	0x20029960

08013650 <vPortFree>:
	if( pv != NULL )
 8013650:	b1f0      	cbz	r0, 8013690 <vPortFree+0x40>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013652:	4a1b      	ldr	r2, [pc, #108]	; (80136c0 <vPortFree+0x70>)
 8013654:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8013658:	6812      	ldr	r2, [r2, #0]
 801365a:	4213      	tst	r3, r2
 801365c:	d10a      	bne.n	8013674 <vPortFree+0x24>
 801365e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013662:	b672      	cpsid	i
 8013664:	f383 8811 	msr	BASEPRI, r3
 8013668:	f3bf 8f6f 	isb	sy
 801366c:	f3bf 8f4f 	dsb	sy
 8013670:	b662      	cpsie	i
 8013672:	e7fe      	b.n	8013672 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013674:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8013678:	b159      	cbz	r1, 8013692 <vPortFree+0x42>
 801367a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801367e:	b672      	cpsid	i
 8013680:	f383 8811 	msr	BASEPRI, r3
 8013684:	f3bf 8f6f 	isb	sy
 8013688:	f3bf 8f4f 	dsb	sy
 801368c:	b662      	cpsie	i
 801368e:	e7fe      	b.n	801368e <vPortFree+0x3e>
 8013690:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013692:	ea23 0302 	bic.w	r3, r3, r2
{
 8013696:	b510      	push	{r4, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013698:	f840 3c04 	str.w	r3, [r0, #-4]
 801369c:	4604      	mov	r4, r0
				vTaskSuspendAll();
 801369e:	f7fe fe57 	bl	8012350 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80136a2:	4a08      	ldr	r2, [pc, #32]	; (80136c4 <vPortFree+0x74>)
 80136a4:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80136a8:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80136ac:	6811      	ldr	r1, [r2, #0]
 80136ae:	440b      	add	r3, r1
 80136b0:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80136b2:	f7ff ff07 	bl	80134c4 <prvInsertBlockIntoFreeList>
}
 80136b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80136ba:	f7fe bf09 	b.w	80124d0 <xTaskResumeAll>
 80136be:	bf00      	nop
 80136c0:	2002995c 	.word	0x2002995c
 80136c4:	20029960 	.word	0x20029960

080136c8 <pbuf_free_int>:
 */
static void
pbuf_free_int(void *p)
{
  struct pbuf *q = (struct pbuf *)p;
  pbuf_free(q);
 80136c8:	f003 b91e 	b.w	8016908 <pbuf_free>

080136cc <tcpip_thread>:
{
 80136cc:	b580      	push	{r7, lr}
  LOCK_TCPIP_CORE();
 80136ce:	483a      	ldr	r0, [pc, #232]	; (80137b8 <tcpip_thread+0xec>)
{
 80136d0:	b082      	sub	sp, #8
  LOCK_TCPIP_CORE();
 80136d2:	f00b febd 	bl	801f450 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80136d6:	4b39      	ldr	r3, [pc, #228]	; (80137bc <tcpip_thread+0xf0>)
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	b113      	cbz	r3, 80136e2 <tcpip_thread+0x16>
    tcpip_init_done(tcpip_init_done_arg);
 80136dc:	4a38      	ldr	r2, [pc, #224]	; (80137c0 <tcpip_thread+0xf4>)
 80136de:	6810      	ldr	r0, [r2, #0]
 80136e0:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 80136e2:	4d35      	ldr	r5, [pc, #212]	; (80137b8 <tcpip_thread+0xec>)
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80136e4:	4e37      	ldr	r6, [pc, #220]	; (80137c4 <tcpip_thread+0xf8>)
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80136e6:	4f38      	ldr	r7, [pc, #224]	; (80137c8 <tcpip_thread+0xfc>)
 80136e8:	e010      	b.n	801370c <tcpip_thread+0x40>
  } else if (sleeptime == 0) {
 80136ea:	b168      	cbz	r0, 8013708 <tcpip_thread+0x3c>
  UNLOCK_TCPIP_CORE();
 80136ec:	4628      	mov	r0, r5
 80136ee:	f00b feb5 	bl	801f45c <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80136f2:	4622      	mov	r2, r4
 80136f4:	a901      	add	r1, sp, #4
 80136f6:	4630      	mov	r0, r6
 80136f8:	f00b fe50 	bl	801f39c <sys_arch_mbox_fetch>
 80136fc:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 80136fe:	4628      	mov	r0, r5
 8013700:	f00b fea6 	bl	801f450 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8013704:	3401      	adds	r4, #1
 8013706:	d111      	bne.n	801372c <tcpip_thread+0x60>
    sys_check_timeouts();
 8013708:	f008 f87e 	bl	801b808 <sys_check_timeouts>
  sleeptime = sys_timeouts_sleeptime();
 801370c:	f008 f8a0 	bl	801b850 <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8013710:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 8013712:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8013714:	d1e9      	bne.n	80136ea <tcpip_thread+0x1e>
    UNLOCK_TCPIP_CORE();
 8013716:	4628      	mov	r0, r5
 8013718:	f00b fea0 	bl	801f45c <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801371c:	2200      	movs	r2, #0
 801371e:	a901      	add	r1, sp, #4
 8013720:	4630      	mov	r0, r6
 8013722:	f00b fe3b 	bl	801f39c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8013726:	4628      	mov	r0, r5
 8013728:	f00b fe92 	bl	801f450 <sys_mutex_lock>
    if (msg == NULL) {
 801372c:	9c01      	ldr	r4, [sp, #4]
 801372e:	2c00      	cmp	r4, #0
 8013730:	d033      	beq.n	801379a <tcpip_thread+0xce>
  switch (msg->type) {
 8013732:	7823      	ldrb	r3, [r4, #0]
 8013734:	2b04      	cmp	r3, #4
 8013736:	d837      	bhi.n	80137a8 <tcpip_thread+0xdc>
 8013738:	e8df f003 	tbb	[pc, r3]
 801373c:	070f1822 	.word	0x070f1822
 8013740:	03          	.byte	0x03
 8013741:	00          	.byte	0x00
      msg->msg.cb.function(msg->msg.cb.ctx);
 8013742:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8013746:	4798      	blx	r3
 8013748:	e7e0      	b.n	801370c <tcpip_thread+0x40>
      msg->msg.cb.function(msg->msg.cb.ctx);
 801374a:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 801374e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8013750:	4621      	mov	r1, r4
 8013752:	2009      	movs	r0, #9
 8013754:	f002 fdfe 	bl	8016354 <memp_free>
 8013758:	e7d8      	b.n	801370c <tcpip_thread+0x40>
      sys_untimeout(msg->msg.tmo.h, msg->msg.tmo.arg);
 801375a:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 801375e:	f008 f835 	bl	801b7cc <sys_untimeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8013762:	4621      	mov	r1, r4
 8013764:	2009      	movs	r0, #9
 8013766:	f002 fdf5 	bl	8016354 <memp_free>
 801376a:	e7cf      	b.n	801370c <tcpip_thread+0x40>
      sys_timeout(msg->msg.tmo.msecs, msg->msg.tmo.h, msg->msg.tmo.arg);
 801376c:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8013770:	6860      	ldr	r0, [r4, #4]
 8013772:	f007 fff3 	bl	801b75c <sys_timeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8013776:	4621      	mov	r1, r4
 8013778:	2009      	movs	r0, #9
 801377a:	f002 fdeb 	bl	8016354 <memp_free>
 801377e:	e7c5      	b.n	801370c <tcpip_thread+0x40>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8013780:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8013784:	6860      	ldr	r0, [r4, #4]
 8013786:	4798      	blx	r3
 8013788:	b110      	cbz	r0, 8013790 <tcpip_thread+0xc4>
        pbuf_free(msg->msg.inp.p);
 801378a:	6860      	ldr	r0, [r4, #4]
 801378c:	f003 f8bc 	bl	8016908 <pbuf_free>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8013790:	4621      	mov	r1, r4
 8013792:	200a      	movs	r0, #10
 8013794:	f002 fdde 	bl	8016354 <memp_free>
 8013798:	e7b8      	b.n	801370c <tcpip_thread+0x40>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801379a:	463b      	mov	r3, r7
 801379c:	2291      	movs	r2, #145	; 0x91
 801379e:	490b      	ldr	r1, [pc, #44]	; (80137cc <tcpip_thread+0x100>)
 80137a0:	480b      	ldr	r0, [pc, #44]	; (80137d0 <tcpip_thread+0x104>)
 80137a2:	f00d fa09 	bl	8020bb8 <iprintf>
      continue;
 80137a6:	e7b1      	b.n	801370c <tcpip_thread+0x40>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80137a8:	463b      	mov	r3, r7
 80137aa:	22cf      	movs	r2, #207	; 0xcf
 80137ac:	4907      	ldr	r1, [pc, #28]	; (80137cc <tcpip_thread+0x100>)
 80137ae:	4808      	ldr	r0, [pc, #32]	; (80137d0 <tcpip_thread+0x104>)
 80137b0:	f00d fa02 	bl	8020bb8 <iprintf>
 80137b4:	e7aa      	b.n	801370c <tcpip_thread+0x40>
 80137b6:	bf00      	nop
 80137b8:	2002ead0 	.word	0x2002ead0
 80137bc:	20029970 	.word	0x20029970
 80137c0:	20029974 	.word	0x20029974
 80137c4:	20029978 	.word	0x20029978
 80137c8:	08026c68 	.word	0x08026c68
 80137cc:	08026c98 	.word	0x08026c98
 80137d0:	08026bb8 	.word	0x08026bb8

080137d4 <tcpip_inpkt>:
{
 80137d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137d6:	4607      	mov	r7, r0
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80137d8:	4814      	ldr	r0, [pc, #80]	; (801382c <tcpip_inpkt+0x58>)
{
 80137da:	460e      	mov	r6, r1
 80137dc:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80137de:	f00b fdff 	bl	801f3e0 <sys_mbox_valid>
 80137e2:	b188      	cbz	r0, 8013808 <tcpip_inpkt+0x34>
  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80137e4:	22fe      	movs	r2, #254	; 0xfe
 80137e6:	4912      	ldr	r1, [pc, #72]	; (8013830 <tcpip_inpkt+0x5c>)
 80137e8:	200a      	movs	r0, #10
 80137ea:	f002 fd8f 	bl	801630c <memp_malloc_fn>
  if (msg == NULL) {
 80137ee:	4604      	mov	r4, r0
 80137f0:	b1c0      	cbz	r0, 8013824 <tcpip_inpkt+0x50>
  msg->type = TCPIP_MSG_INPKT;
 80137f2:	2300      	movs	r3, #0
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80137f4:	4601      	mov	r1, r0
  msg->msg.inp.input_fn = input_fn;
 80137f6:	60c5      	str	r5, [r0, #12]
  msg->type = TCPIP_MSG_INPKT;
 80137f8:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.netif = inp;
 80137fa:	e9c0 7601 	strd	r7, r6, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80137fe:	480b      	ldr	r0, [pc, #44]	; (801382c <tcpip_inpkt+0x58>)
 8013800:	f00b fdba 	bl	801f378 <sys_mbox_trypost>
 8013804:	b938      	cbnz	r0, 8013816 <tcpip_inpkt+0x42>
}
 8013806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8013808:	4b09      	ldr	r3, [pc, #36]	; (8013830 <tcpip_inpkt+0x5c>)
 801380a:	22fc      	movs	r2, #252	; 0xfc
 801380c:	4909      	ldr	r1, [pc, #36]	; (8013834 <tcpip_inpkt+0x60>)
 801380e:	480a      	ldr	r0, [pc, #40]	; (8013838 <tcpip_inpkt+0x64>)
 8013810:	f00d f9d2 	bl	8020bb8 <iprintf>
 8013814:	e7e6      	b.n	80137e4 <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8013816:	4621      	mov	r1, r4
 8013818:	200a      	movs	r0, #10
 801381a:	f002 fd9b 	bl	8016354 <memp_free>
    return ERR_MEM;
 801381e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8013822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_MEM;
 8013824:	f04f 30ff 	mov.w	r0, #4294967295
}
 8013828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801382a:	bf00      	nop
 801382c:	20029978 	.word	0x20029978
 8013830:	08026c68 	.word	0x08026c68
 8013834:	08026c58 	.word	0x08026c58
 8013838:	08026bb8 	.word	0x08026bb8

0801383c <tcpip_input>:
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801383c:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
 8013840:	f013 0f18 	tst.w	r3, #24
 8013844:	d102      	bne.n	801384c <tcpip_input+0x10>
    return tcpip_inpkt(p, inp, ip_input);
 8013846:	4a03      	ldr	r2, [pc, #12]	; (8013854 <tcpip_input+0x18>)
 8013848:	f7ff bfc4 	b.w	80137d4 <tcpip_inpkt>
    return tcpip_inpkt(p, inp, ethernet_input);
 801384c:	4a02      	ldr	r2, [pc, #8]	; (8013858 <tcpip_input+0x1c>)
 801384e:	f7ff bfc1 	b.w	80137d4 <tcpip_inpkt>
 8013852:	bf00      	nop
 8013854:	0801e31d 	.word	0x0801e31d
 8013858:	0801f1f1 	.word	0x0801f1f1

0801385c <tcpip_try_callback>:
{
 801385c:	b570      	push	{r4, r5, r6, lr}
 801385e:	4606      	mov	r6, r0
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8013860:	4814      	ldr	r0, [pc, #80]	; (80138b4 <tcpip_try_callback+0x58>)
{
 8013862:	460d      	mov	r5, r1
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8013864:	f00b fdbc 	bl	801f3e0 <sys_mbox_valid>
 8013868:	b188      	cbz	r0, 801388e <tcpip_try_callback+0x32>
  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 801386a:	f240 125f 	movw	r2, #351	; 0x15f
 801386e:	4912      	ldr	r1, [pc, #72]	; (80138b8 <tcpip_try_callback+0x5c>)
 8013870:	2009      	movs	r0, #9
 8013872:	f002 fd4b 	bl	801630c <memp_malloc_fn>
  if (msg == NULL) {
 8013876:	4604      	mov	r4, r0
 8013878:	b1c0      	cbz	r0, 80138ac <tcpip_try_callback+0x50>
  msg->type = TCPIP_MSG_CALLBACK;
 801387a:	2303      	movs	r3, #3
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801387c:	4601      	mov	r1, r0
  msg->msg.cb.ctx = ctx;
 801387e:	e9c0 6501 	strd	r6, r5, [r0, #4]
  msg->type = TCPIP_MSG_CALLBACK;
 8013882:	7003      	strb	r3, [r0, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8013884:	480b      	ldr	r0, [pc, #44]	; (80138b4 <tcpip_try_callback+0x58>)
 8013886:	f00b fd77 	bl	801f378 <sys_mbox_trypost>
 801388a:	b940      	cbnz	r0, 801389e <tcpip_try_callback+0x42>
}
 801388c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801388e:	4b0a      	ldr	r3, [pc, #40]	; (80138b8 <tcpip_try_callback+0x5c>)
 8013890:	f240 125d 	movw	r2, #349	; 0x15d
 8013894:	4909      	ldr	r1, [pc, #36]	; (80138bc <tcpip_try_callback+0x60>)
 8013896:	480a      	ldr	r0, [pc, #40]	; (80138c0 <tcpip_try_callback+0x64>)
 8013898:	f00d f98e 	bl	8020bb8 <iprintf>
 801389c:	e7e5      	b.n	801386a <tcpip_try_callback+0xe>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 801389e:	4621      	mov	r1, r4
 80138a0:	2009      	movs	r0, #9
 80138a2:	f002 fd57 	bl	8016354 <memp_free>
    return ERR_MEM;
 80138a6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80138aa:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 80138ac:	f04f 30ff 	mov.w	r0, #4294967295
}
 80138b0:	bd70      	pop	{r4, r5, r6, pc}
 80138b2:	bf00      	nop
 80138b4:	20029978 	.word	0x20029978
 80138b8:	08026c68 	.word	0x08026c68
 80138bc:	08026c58 	.word	0x08026c58
 80138c0:	08026bb8 	.word	0x08026bb8

080138c4 <tcpip_init>:
{
 80138c4:	b530      	push	{r4, r5, lr}
 80138c6:	b083      	sub	sp, #12
 80138c8:	4605      	mov	r5, r0
 80138ca:	460c      	mov	r4, r1
  lwip_init();
 80138cc:	f001 ff9c 	bl	8015808 <lwip_init>
  tcpip_init_done = initfunc;
 80138d0:	4a12      	ldr	r2, [pc, #72]	; (801391c <tcpip_init+0x58>)
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80138d2:	2106      	movs	r1, #6
  tcpip_init_done_arg = arg;
 80138d4:	4b12      	ldr	r3, [pc, #72]	; (8013920 <tcpip_init+0x5c>)
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80138d6:	4813      	ldr	r0, [pc, #76]	; (8013924 <tcpip_init+0x60>)
  tcpip_init_done = initfunc;
 80138d8:	6015      	str	r5, [r2, #0]
  tcpip_init_done_arg = arg;
 80138da:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80138dc:	f00b fd28 	bl	801f330 <sys_mbox_new>
 80138e0:	b9a0      	cbnz	r0, 801390c <tcpip_init+0x48>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80138e2:	4811      	ldr	r0, [pc, #68]	; (8013928 <tcpip_init+0x64>)
 80138e4:	f00b fd8e 	bl	801f404 <sys_mutex_new>
 80138e8:	b130      	cbz	r0, 80138f8 <tcpip_init+0x34>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80138ea:	4b10      	ldr	r3, [pc, #64]	; (801392c <tcpip_init+0x68>)
 80138ec:	f240 2265 	movw	r2, #613	; 0x265
 80138f0:	490f      	ldr	r1, [pc, #60]	; (8013930 <tcpip_init+0x6c>)
 80138f2:	4810      	ldr	r0, [pc, #64]	; (8013934 <tcpip_init+0x70>)
 80138f4:	f00d f960 	bl	8020bb8 <iprintf>
  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80138f8:	2200      	movs	r2, #0
 80138fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80138fe:	490e      	ldr	r1, [pc, #56]	; (8013938 <tcpip_init+0x74>)
 8013900:	9200      	str	r2, [sp, #0]
 8013902:	480e      	ldr	r0, [pc, #56]	; (801393c <tcpip_init+0x78>)
 8013904:	f00b fdae 	bl	801f464 <sys_thread_new>
}
 8013908:	b003      	add	sp, #12
 801390a:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 801390c:	4b07      	ldr	r3, [pc, #28]	; (801392c <tcpip_init+0x68>)
 801390e:	f240 2261 	movw	r2, #609	; 0x261
 8013912:	490b      	ldr	r1, [pc, #44]	; (8013940 <tcpip_init+0x7c>)
 8013914:	4807      	ldr	r0, [pc, #28]	; (8013934 <tcpip_init+0x70>)
 8013916:	f00d f94f 	bl	8020bb8 <iprintf>
 801391a:	e7e2      	b.n	80138e2 <tcpip_init+0x1e>
 801391c:	20029970 	.word	0x20029970
 8013920:	20029974 	.word	0x20029974
 8013924:	20029978 	.word	0x20029978
 8013928:	2002ead0 	.word	0x2002ead0
 801392c:	08026c68 	.word	0x08026c68
 8013930:	08026c24 	.word	0x08026c24
 8013934:	08026bb8 	.word	0x08026bb8
 8013938:	080136cd 	.word	0x080136cd
 801393c:	08026c48 	.word	0x08026c48
 8013940:	08026c00 	.word	0x08026c00

08013944 <pbuf_free_callback>:
 * @return ERR_OK if callback could be enqueued, an err_t if not
 */
err_t
pbuf_free_callback(struct pbuf *p)
{
  return tcpip_try_callback(pbuf_free_int, p);
 8013944:	4601      	mov	r1, r0
 8013946:	4801      	ldr	r0, [pc, #4]	; (801394c <pbuf_free_callback+0x8>)
 8013948:	f7ff bf88 	b.w	801385c <tcpip_try_callback>
 801394c:	080136c9 	.word	0x080136c9

08013950 <fs_open>:
err_t
fs_open(struct fs_file *file, const char *name)
{
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8013950:	b1e8      	cbz	r0, 801398e <fs_open+0x3e>
 8013952:	b1e1      	cbz	r1, 801398e <fs_open+0x3e>
{
 8013954:	b570      	push	{r4, r5, r6, lr}
 8013956:	460d      	mov	r5, r1
 8013958:	4606      	mov	r6, r0
 801395a:	490f      	ldr	r1, [pc, #60]	; (8013998 <fs_open+0x48>)
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 801395c:	4c0f      	ldr	r4, [pc, #60]	; (801399c <fs_open+0x4c>)
 801395e:	e000      	b.n	8013962 <fs_open+0x12>
 8013960:	6861      	ldr	r1, [r4, #4]
    if (!strcmp(name, (const char *)f->name)) {
 8013962:	4628      	mov	r0, r5
 8013964:	f7ec fc6c 	bl	8000240 <strcmp>
 8013968:	b130      	cbz	r0, 8013978 <fs_open+0x28>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 801396a:	6824      	ldr	r4, [r4, #0]
 801396c:	2c00      	cmp	r4, #0
 801396e:	d1f7      	bne.n	8013960 <fs_open+0x10>
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
    }
  }
  /* file not found */
  return ERR_VAL;
 8013970:	f06f 0305 	mvn.w	r3, #5
}
 8013974:	4618      	mov	r0, r3
 8013976:	bd70      	pop	{r4, r5, r6, pc}
      file->len = f->len;
 8013978:	68e2      	ldr	r2, [r4, #12]
      return ERR_OK;
 801397a:	4603      	mov	r3, r0
      file->data = (const char *)f->data;
 801397c:	68a1      	ldr	r1, [r4, #8]
      file->pextension = NULL;
 801397e:	e9c6 2002 	strd	r2, r0, [r6, #8]
      file->len = f->len;
 8013982:	e9c6 1200 	strd	r1, r2, [r6]
      file->flags = f->flags;
 8013986:	7c22      	ldrb	r2, [r4, #16]
}
 8013988:	4618      	mov	r0, r3
      file->flags = f->flags;
 801398a:	7432      	strb	r2, [r6, #16]
}
 801398c:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_ARG;
 801398e:	f06f 030f 	mvn.w	r3, #15
}
 8013992:	4618      	mov	r0, r3
 8013994:	4770      	bx	lr
 8013996:	bf00      	nop
 8013998:	08031b3c 	.word	0x08031b3c
 801399c:	0803cca8 	.word	0x0803cca8

080139a0 <fs_close>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 80139a0:	4770      	bx	lr
 80139a2:	bf00      	nop

080139a4 <fs_bytes_left>:
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
  return file->len - file->index;
 80139a4:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
}
 80139a8:	1a10      	subs	r0, r2, r0
 80139aa:	4770      	bx	lr

080139ac <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 80139ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
  len = *length;
 80139b0:	8814      	ldrh	r4, [r2, #0]
  if (len == 0) {
 80139b2:	b374      	cbz	r4, 8013a12 <http_write+0x66>
 80139b4:	461f      	mov	r7, r3
  if (max_len < len) {
    len = max_len;
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 80139b6:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80139b8:	4605      	mov	r5, r0
 80139ba:	4690      	mov	r8, r2
 80139bc:	005b      	lsls	r3, r3, #1
 80139be:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
 80139c2:	460e      	mov	r6, r1
 80139c4:	b298      	uxth	r0, r3
 80139c6:	4290      	cmp	r0, r2
 80139c8:	bf28      	it	cs
 80139ca:	4610      	movcs	r0, r2
 80139cc:	4284      	cmp	r4, r0
 80139ce:	bf28      	it	cs
 80139d0:	4604      	movcs	r4, r0
    len = max_len;
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 80139d2:	463b      	mov	r3, r7
 80139d4:	4622      	mov	r2, r4
 80139d6:	4631      	mov	r1, r6
 80139d8:	4628      	mov	r0, r5
 80139da:	f006 fd41 	bl	801a460 <tcp_write>
    if (err == ERR_MEM) {
 80139de:	1c43      	adds	r3, r0, #1
 80139e0:	d003      	beq.n	80139ea <http_write+0x3e>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));

  if (err == ERR_OK) {
 80139e2:	b950      	cbnz	r0, 80139fa <http_write+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 80139e4:	f8a8 4000 	strh.w	r4, [r8]
 80139e8:	e00a      	b.n	8013a00 <http_write+0x54>
      if ((altcp_sndbuf(pcb) == 0) ||
 80139ea:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
 80139ee:	b123      	cbz	r3, 80139fa <http_write+0x4e>
 80139f0:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
        len /= 2;
 80139f4:	0864      	lsrs	r4, r4, #1
      if ((altcp_sndbuf(pcb) == 0) ||
 80139f6:	2b08      	cmp	r3, #8
 80139f8:	d908      	bls.n	8013a0c <http_write+0x60>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 80139fa:	2300      	movs	r3, #0
 80139fc:	f8a8 3000 	strh.w	r3, [r8]

#if LWIP_HTTPD_SUPPORT_11_KEEPALIVE
  /* ensure nagle is normally enabled (only disabled for persistent connections
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
 8013a00:	8b6b      	ldrh	r3, [r5, #26]
 8013a02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013a06:	836b      	strh	r3, [r5, #26]
#endif

  return err;
}
 8013a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } while ((err == ERR_MEM) && (len > 1));
 8013a0c:	2c01      	cmp	r4, #1
 8013a0e:	d8e0      	bhi.n	80139d2 <http_write+0x26>
 8013a10:	e7f3      	b.n	80139fa <http_write+0x4e>
    return ERR_OK;
 8013a12:	4620      	mov	r0, r4
}
 8013a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013a18 <http_state_eof>:
{
 8013a18:	b510      	push	{r4, lr}
 8013a1a:	4604      	mov	r4, r0
  if (hs->handle) {
 8013a1c:	6940      	ldr	r0, [r0, #20]
 8013a1e:	b118      	cbz	r0, 8013a28 <http_state_eof+0x10>
    fs_close(hs->handle);
 8013a20:	f7ff ffbe 	bl	80139a0 <fs_close>
    hs->handle = NULL;
 8013a24:	2300      	movs	r3, #0
 8013a26:	6163      	str	r3, [r4, #20]
  if (hs->ssi) {
 8013a28:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8013a2a:	b118      	cbz	r0, 8013a34 <http_state_eof+0x1c>
    HTTP_FREE_SSI_STATE(ssi);
 8013a2c:	f002 f8ac 	bl	8015b88 <mem_free>
    hs->ssi = NULL;
 8013a30:	2300      	movs	r3, #0
 8013a32:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (hs->req) {
 8013a34:	6a20      	ldr	r0, [r4, #32]
 8013a36:	b118      	cbz	r0, 8013a40 <http_state_eof+0x28>
    pbuf_free(hs->req);
 8013a38:	f002 ff66 	bl	8016908 <pbuf_free>
    hs->req = NULL;
 8013a3c:	2300      	movs	r3, #0
 8013a3e:	6223      	str	r3, [r4, #32]
}
 8013a40:	bd10      	pop	{r4, pc}
 8013a42:	bf00      	nop

08013a44 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8013a44:	b538      	push	{r3, r4, r5, lr}
 8013a46:	460d      	mov	r5, r1
  err_t err;

  *uri = "/404.html";
 8013a48:	490c      	ldr	r1, [pc, #48]	; (8013a7c <http_get_404_file+0x38>)
  err = fs_open(&hs->file_handle, *uri);
 8013a4a:	4604      	mov	r4, r0
  *uri = "/404.html";
 8013a4c:	6029      	str	r1, [r5, #0]
  err = fs_open(&hs->file_handle, *uri);
 8013a4e:	f7ff ff7f 	bl	8013950 <fs_open>
  if (err != ERR_OK) {
 8013a52:	b908      	cbnz	r0, 8013a58 <http_get_404_file+0x14>
      }
    }
  }

  return &hs->file_handle;
}
 8013a54:	4620      	mov	r0, r4
 8013a56:	bd38      	pop	{r3, r4, r5, pc}
    *uri = "/404.htm";
 8013a58:	4909      	ldr	r1, [pc, #36]	; (8013a80 <http_get_404_file+0x3c>)
    err = fs_open(&hs->file_handle, *uri);
 8013a5a:	4620      	mov	r0, r4
    *uri = "/404.htm";
 8013a5c:	6029      	str	r1, [r5, #0]
    err = fs_open(&hs->file_handle, *uri);
 8013a5e:	f7ff ff77 	bl	8013950 <fs_open>
    if (err != ERR_OK) {
 8013a62:	2800      	cmp	r0, #0
 8013a64:	d0f6      	beq.n	8013a54 <http_get_404_file+0x10>
      *uri = "/404.shtml";
 8013a66:	4907      	ldr	r1, [pc, #28]	; (8013a84 <http_get_404_file+0x40>)
      err = fs_open(&hs->file_handle, *uri);
 8013a68:	4620      	mov	r0, r4
      *uri = "/404.shtml";
 8013a6a:	6029      	str	r1, [r5, #0]
      err = fs_open(&hs->file_handle, *uri);
 8013a6c:	f7ff ff70 	bl	8013950 <fs_open>
      if (err != ERR_OK) {
 8013a70:	2800      	cmp	r0, #0
 8013a72:	d0ef      	beq.n	8013a54 <http_get_404_file+0x10>
        *uri = NULL;
 8013a74:	2300      	movs	r3, #0
        return NULL;
 8013a76:	461c      	mov	r4, r3
        *uri = NULL;
 8013a78:	602b      	str	r3, [r5, #0]
        return NULL;
 8013a7a:	e7eb      	b.n	8013a54 <http_get_404_file+0x10>
 8013a7c:	0803cd18 	.word	0x0803cd18
 8013a80:	0803cd24 	.word	0x0803cd24
 8013a84:	0803cd30 	.word	0x0803cd30

08013a88 <http_accept>:
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8013a88:	bb82      	cbnz	r2, 8013aec <http_accept+0x64>
{
 8013a8a:	b570      	push	{r4, r5, r6, lr}
  if ((err != ERR_OK) || (pcb == NULL)) {
 8013a8c:	fab1 f581 	clz	r5, r1
 8013a90:	096d      	lsrs	r5, r5, #5
 8013a92:	bb45      	cbnz	r5, 8013ae6 <http_accept+0x5e>
 8013a94:	460c      	mov	r4, r1
    return ERR_VAL;
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8013a96:	2101      	movs	r1, #1
 8013a98:	4620      	mov	r0, r4
 8013a9a:	f003 fd81 	bl	80175a0 <tcp_setprio>
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8013a9e:	2034      	movs	r0, #52	; 0x34
 8013aa0:	f002 fa42 	bl	8015f28 <mem_malloc>
  if (ret != NULL) {
 8013aa4:	4606      	mov	r6, r0
 8013aa6:	b1d8      	cbz	r0, 8013ae0 <http_accept+0x58>
  memset(hs, 0, sizeof(struct http_state));
 8013aa8:	2234      	movs	r2, #52	; 0x34
 8013aaa:	4629      	mov	r1, r5
 8013aac:	f00c f903 	bl	801fcb6 <memset>
  }
  hs->pcb = pcb;

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 8013ab0:	4631      	mov	r1, r6
 8013ab2:	4620      	mov	r0, r4
  hs->pcb = pcb;
 8013ab4:	61f4      	str	r4, [r6, #28]
  altcp_arg(pcb, hs);
 8013ab6:	f003 fda9 	bl	801760c <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8013aba:	4620      	mov	r0, r4
 8013abc:	490d      	ldr	r1, [pc, #52]	; (8013af4 <http_accept+0x6c>)
 8013abe:	f003 fda9 	bl	8017614 <tcp_recv>
  altcp_err(pcb, http_err);
 8013ac2:	4620      	mov	r0, r4
 8013ac4:	490c      	ldr	r1, [pc, #48]	; (8013af8 <http_accept+0x70>)
 8013ac6:	f003 fddd 	bl	8017684 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8013aca:	2204      	movs	r2, #4
 8013acc:	4620      	mov	r0, r4
 8013ace:	490b      	ldr	r1, [pc, #44]	; (8013afc <http_accept+0x74>)
 8013ad0:	f003 fdfa 	bl	80176c8 <tcp_poll>
  altcp_sent(pcb, http_sent);
 8013ad4:	4620      	mov	r0, r4
 8013ad6:	490a      	ldr	r1, [pc, #40]	; (8013b00 <http_accept+0x78>)
 8013ad8:	f003 fdb8 	bl	801764c <tcp_sent>

  return ERR_OK;
 8013adc:	4628      	mov	r0, r5
}
 8013ade:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 8013ae0:	f04f 30ff 	mov.w	r0, #4294967295
}
 8013ae4:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 8013ae6:	f06f 0005 	mvn.w	r0, #5
}
 8013aea:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 8013aec:	f06f 0005 	mvn.w	r0, #5
}
 8013af0:	4770      	bx	lr
 8013af2:	bf00      	nop
 8013af4:	080146c1 	.word	0x080146c1
 8013af8:	08014b15 	.word	0x08014b15
 8013afc:	08014669 	.word	0x08014669
 8013b00:	0801464d 	.word	0x0801464d

08013b04 <http_init_file>:
{
 8013b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b08:	b087      	sub	sp, #28
 8013b0a:	4604      	mov	r4, r0
  if (file != NULL) {
 8013b0c:	460d      	mov	r5, r1
{
 8013b0e:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8013b12:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8013b14:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (file != NULL) {
 8013b18:	2900      	cmp	r1, #0
 8013b1a:	f000 80ad 	beq.w	8013c78 <http_init_file+0x174>
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8013b1e:	680b      	ldr	r3, [r1, #0]
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	f000 80af 	beq.w	8013c84 <http_init_file+0x180>
    if (tag_check) {
 8013b26:	2f00      	cmp	r7, #0
 8013b28:	d16e      	bne.n	8013c08 <http_init_file+0x104>
    hs->handle = file;
 8013b2a:	6165      	str	r5, [r4, #20]
    if (params != NULL) {
 8013b2c:	2e00      	cmp	r6, #0
 8013b2e:	d04e      	beq.n	8013bce <http_init_file+0xca>
 8013b30:	4b64      	ldr	r3, [pc, #400]	; (8013cc4 <http_init_file+0x1c0>)
  if (!params || (params[0] == '\0')) {
 8013b32:	7837      	ldrb	r7, [r6, #0]
 8013b34:	9305      	str	r3, [sp, #20]
 8013b36:	2f00      	cmp	r7, #0
 8013b38:	d041      	beq.n	8013bbe <http_init_file+0xba>
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8013b3a:	2700      	movs	r7, #0
 8013b3c:	f8df a188 	ldr.w	sl, [pc, #392]	; 8013cc8 <http_init_file+0x1c4>
 8013b40:	4699      	mov	r9, r3
 8013b42:	46b3      	mov	fp, r6
 8013b44:	e016      	b.n	8013b74 <http_init_file+0x70>
      *pair = '\0';
 8013b46:	f04f 0300 	mov.w	r3, #0
 8013b4a:	f808 3b01 	strb.w	r3, [r8], #1
 8013b4e:	f1b8 0f00 	cmp.w	r8, #0
 8013b52:	bf08      	it	eq
 8013b54:	2600      	moveq	r6, #0
    equals = strchr(equals, '=');
 8013b56:	4658      	mov	r0, fp
 8013b58:	213d      	movs	r1, #61	; 0x3d
 8013b5a:	f00d fa1d 	bl	8020f98 <strchr>
    if (equals) {
 8013b5e:	b338      	cbz	r0, 8013bb0 <http_init_file+0xac>
      *equals = '\0';
 8013b60:	f04f 0300 	mov.w	r3, #0
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8013b64:	46c3      	mov	fp, r8
 8013b66:	f109 0904 	add.w	r9, r9, #4
      *equals = '\0';
 8013b6a:	f800 3b01 	strb.w	r3, [r0], #1
      http_cgi_param_vals[loop] = equals + 1;
 8013b6e:	f849 0c04 	str.w	r0, [r9, #-4]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8013b72:	b326      	cbz	r6, 8013bbe <http_init_file+0xba>
 8013b74:	3701      	adds	r7, #1
    pair = strchr(pair, '&');
 8013b76:	2126      	movs	r1, #38	; 0x26
 8013b78:	4658      	mov	r0, fp
    http_cgi_params[loop] = pair;
 8013b7a:	f84a bb04 	str.w	fp, [sl], #4
    pair = strchr(pair, '&');
 8013b7e:	f00d fa0b 	bl	8020f98 <strchr>
 8013b82:	2f0f      	cmp	r7, #15
    if (pair) {
 8013b84:	4680      	mov	r8, r0
 8013b86:	bfcc      	ite	gt
 8013b88:	2600      	movgt	r6, #0
 8013b8a:	2601      	movle	r6, #1
 8013b8c:	2800      	cmp	r0, #0
 8013b8e:	d1da      	bne.n	8013b46 <http_init_file+0x42>
      pair = strchr(equals, ' ');
 8013b90:	2120      	movs	r1, #32
 8013b92:	4658      	mov	r0, fp
 8013b94:	f00d fa00 	bl	8020f98 <strchr>
      if (pair) {
 8013b98:	2800      	cmp	r0, #0
 8013b9a:	f000 8090 	beq.w	8013cbe <http_init_file+0x1ba>
        *pair = '\0';
 8013b9e:	f880 8000 	strb.w	r8, [r0]
    equals = strchr(equals, '=');
 8013ba2:	213d      	movs	r1, #61	; 0x3d
 8013ba4:	4658      	mov	r0, fp
        *pair = '\0';
 8013ba6:	4646      	mov	r6, r8
    equals = strchr(equals, '=');
 8013ba8:	f00d f9f6 	bl	8020f98 <strchr>
    if (equals) {
 8013bac:	2800      	cmp	r0, #0
 8013bae:	d1d7      	bne.n	8013b60 <http_init_file+0x5c>
      http_cgi_param_vals[loop] = NULL;
 8013bb0:	f8c9 0000 	str.w	r0, [r9]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8013bb4:	46c3      	mov	fp, r8
 8013bb6:	f109 0904 	add.w	r9, r9, #4
 8013bba:	2e00      	cmp	r6, #0
 8013bbc:	d1da      	bne.n	8013b74 <http_init_file+0x70>
      httpd_cgi_handler(file, uri, count, http_cgi_params, http_cgi_param_vals
 8013bbe:	9b05      	ldr	r3, [sp, #20]
 8013bc0:	463a      	mov	r2, r7
 8013bc2:	9904      	ldr	r1, [sp, #16]
 8013bc4:	4628      	mov	r0, r5
 8013bc6:	9300      	str	r3, [sp, #0]
 8013bc8:	4b3f      	ldr	r3, [pc, #252]	; (8013cc8 <http_init_file+0x1c4>)
 8013bca:	f7f1 fbd7 	bl	800537c <httpd_cgi_handler>
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8013bce:	e9d5 3200 	ldrd	r3, r2, [r5]
 8013bd2:	2a00      	cmp	r2, #0
    hs->file = file->data;
 8013bd4:	61a3      	str	r3, [r4, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8013bd6:	db69      	blt.n	8013cac <http_init_file+0x1a8>
    hs->retries = 0;
 8013bd8:	2100      	movs	r1, #0
    LWIP_ASSERT("HTTP headers not included in file system",
 8013bda:	6963      	ldr	r3, [r4, #20]
      hs->left = (u32_t)file->len;
 8013bdc:	6262      	str	r2, [r4, #36]	; 0x24
    hs->retries = 0;
 8013bde:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    LWIP_ASSERT("HTTP headers not included in file system",
 8013be2:	7c1b      	ldrb	r3, [r3, #16]
 8013be4:	07d9      	lsls	r1, r3, #31
 8013be6:	d52a      	bpl.n	8013c3e <http_init_file+0x13a>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8013be8:	9b03      	ldr	r3, [sp, #12]
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d136      	bne.n	8013c5c <http_init_file+0x158>
  if (hs->keepalive) {
 8013bee:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8013bf2:	b12b      	cbz	r3, 8013c00 <http_init_file+0xfc>
    if (hs->ssi != NULL) {
 8013bf4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d04f      	beq.n	8013c9a <http_init_file+0x196>
      hs->keepalive = 0;
 8013bfa:	2300      	movs	r3, #0
 8013bfc:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
 8013c00:	2000      	movs	r0, #0
 8013c02:	b007      	add	sp, #28
 8013c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 8013c08:	f44f 7090 	mov.w	r0, #288	; 0x120
 8013c0c:	f002 f98c 	bl	8015f28 <mem_malloc>
  if (ret != NULL) {
 8013c10:	4607      	mov	r7, r0
 8013c12:	2800      	cmp	r0, #0
 8013c14:	d089      	beq.n	8013b2a <http_init_file+0x26>
    memset(ret, 0, sizeof(struct http_ssi_state));
 8013c16:	f44f 7290 	mov.w	r2, #288	; 0x120
 8013c1a:	2100      	movs	r1, #0
 8013c1c:	f00c f84b 	bl	801fcb6 <memset>
        ssi->tag_index = 0;
 8013c20:	2200      	movs	r2, #0
        ssi->parse_left = file->len;
 8013c22:	e9d5 3100 	ldrd	r3, r1, [r5]
        ssi->tag_index = 0;
 8013c26:	823a      	strh	r2, [r7, #16]
        ssi->tag_state = TAG_NONE;
 8013c28:	f887 211e 	strb.w	r2, [r7, #286]	; 0x11e
        ssi->parsed = file->data;
 8013c2c:	603b      	str	r3, [r7, #0]
        ssi->parse_left = file->len;
 8013c2e:	e9c7 3102 	strd	r3, r1, [r7, #8]
        hs->ssi = ssi;
 8013c32:	62e7      	str	r7, [r4, #44]	; 0x2c
    hs->handle = file;
 8013c34:	6165      	str	r5, [r4, #20]
    if (params != NULL) {
 8013c36:	2e00      	cmp	r6, #0
 8013c38:	f47f af7a 	bne.w	8013b30 <http_init_file+0x2c>
 8013c3c:	e7c7      	b.n	8013bce <http_init_file+0xca>
    LWIP_ASSERT("HTTP headers not included in file system",
 8013c3e:	4b23      	ldr	r3, [pc, #140]	; (8013ccc <http_init_file+0x1c8>)
 8013c40:	f640 1244 	movw	r2, #2372	; 0x944
 8013c44:	4922      	ldr	r1, [pc, #136]	; (8013cd0 <http_init_file+0x1cc>)
 8013c46:	4823      	ldr	r0, [pc, #140]	; (8013cd4 <http_init_file+0x1d0>)
 8013c48:	f00c ffb6 	bl	8020bb8 <iprintf>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8013c4c:	9b03      	ldr	r3, [sp, #12]
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d0cd      	beq.n	8013bee <http_init_file+0xea>
 8013c52:	6963      	ldr	r3, [r4, #20]
 8013c54:	7c1b      	ldrb	r3, [r3, #16]
 8013c56:	07db      	lsls	r3, r3, #31
 8013c58:	d5c9      	bpl.n	8013bee <http_init_file+0xea>
 8013c5a:	6a62      	ldr	r2, [r4, #36]	; 0x24
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8013c5c:	491e      	ldr	r1, [pc, #120]	; (8013cd8 <http_init_file+0x1d4>)
 8013c5e:	69a0      	ldr	r0, [r4, #24]
 8013c60:	f000 ffea 	bl	8014c38 <lwip_strnstr>
      if (file_start != NULL) {
 8013c64:	2800      	cmp	r0, #0
 8013c66:	d0c2      	beq.n	8013bee <http_init_file+0xea>
        int diff = file_start + 4 - hs->file;
 8013c68:	3004      	adds	r0, #4
 8013c6a:	69a2      	ldr	r2, [r4, #24]
        hs->left -= (u32_t)diff;
 8013c6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
        int diff = file_start + 4 - hs->file;
 8013c6e:	1a82      	subs	r2, r0, r2
        hs->file += diff;
 8013c70:	61a0      	str	r0, [r4, #24]
        hs->left -= (u32_t)diff;
 8013c72:	1a9b      	subs	r3, r3, r2
 8013c74:	6263      	str	r3, [r4, #36]	; 0x24
 8013c76:	e7ba      	b.n	8013bee <http_init_file+0xea>
    hs->file = NULL;
 8013c78:	e9c0 1105 	strd	r1, r1, [r0, #20]
    hs->left = 0;
 8013c7c:	6261      	str	r1, [r4, #36]	; 0x24
    hs->retries = 0;
 8013c7e:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 8013c82:	e7b4      	b.n	8013bee <http_init_file+0xea>
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8013c84:	4b11      	ldr	r3, [pc, #68]	; (8013ccc <http_init_file+0x1c8>)
 8013c86:	f640 120b 	movw	r2, #2315	; 0x90b
 8013c8a:	4914      	ldr	r1, [pc, #80]	; (8013cdc <http_init_file+0x1d8>)
 8013c8c:	4811      	ldr	r0, [pc, #68]	; (8013cd4 <http_init_file+0x1d0>)
 8013c8e:	f00c ff93 	bl	8020bb8 <iprintf>
    if (tag_check) {
 8013c92:	2f00      	cmp	r7, #0
 8013c94:	f43f af49 	beq.w	8013b2a <http_init_file+0x26>
 8013c98:	e7b6      	b.n	8013c08 <http_init_file+0x104>
      if ((hs->handle != NULL) &&
 8013c9a:	6963      	ldr	r3, [r4, #20]
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d0af      	beq.n	8013c00 <http_init_file+0xfc>
 8013ca0:	7c1b      	ldrb	r3, [r3, #16]
 8013ca2:	f003 0303 	and.w	r3, r3, #3
 8013ca6:	2b01      	cmp	r3, #1
 8013ca8:	d1aa      	bne.n	8013c00 <http_init_file+0xfc>
 8013caa:	e7a6      	b.n	8013bfa <http_init_file+0xf6>
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8013cac:	f640 1234 	movw	r2, #2356	; 0x934
 8013cb0:	4b06      	ldr	r3, [pc, #24]	; (8013ccc <http_init_file+0x1c8>)
 8013cb2:	490b      	ldr	r1, [pc, #44]	; (8013ce0 <http_init_file+0x1dc>)
 8013cb4:	4807      	ldr	r0, [pc, #28]	; (8013cd4 <http_init_file+0x1d0>)
 8013cb6:	f00c ff7f 	bl	8020bb8 <iprintf>
 8013cba:	686a      	ldr	r2, [r5, #4]
 8013cbc:	e78c      	b.n	8013bd8 <http_init_file+0xd4>
      if (pair) {
 8013cbe:	4646      	mov	r6, r8
 8013cc0:	e749      	b.n	8013b56 <http_init_file+0x52>
 8013cc2:	bf00      	nop
 8013cc4:	2002997c 	.word	0x2002997c
 8013cc8:	200299bc 	.word	0x200299bc
 8013ccc:	0803cd3c 	.word	0x0803cd3c
 8013cd0:	0803cda8 	.word	0x0803cda8
 8013cd4:	08026bb8 	.word	0x08026bb8
 8013cd8:	08024bec 	.word	0x08024bec
 8013cdc:	0803cd74 	.word	0x0803cd74
 8013ce0:	0803cd88 	.word	0x0803cd88

08013ce4 <http_find_file>:
{
 8013ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ce8:	4605      	mov	r5, r0
 8013cea:	b087      	sub	sp, #28
  size_t uri_len = strlen(uri);
 8013cec:	4608      	mov	r0, r1
 8013cee:	460c      	mov	r4, r1
{
 8013cf0:	9105      	str	r1, [sp, #20]
 8013cf2:	4690      	mov	r8, r2
 8013cf4:	462e      	mov	r6, r5
  size_t uri_len = strlen(uri);
 8013cf6:	f7ec faad 	bl	8000254 <strlen>
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8013cfa:	4607      	mov	r7, r0
 8013cfc:	b118      	cbz	r0, 8013d06 <http_find_file+0x22>
 8013cfe:	1e43      	subs	r3, r0, #1
 8013d00:	5ce2      	ldrb	r2, [r4, r3]
 8013d02:	2a2f      	cmp	r2, #47	; 0x2f
 8013d04:	d064      	beq.n	8013dd0 <http_find_file+0xec>
  u8_t tag_check = 0;
 8013d06:	f04f 0900 	mov.w	r9, #0
    params = (char *)strchr(uri, '?');
 8013d0a:	213f      	movs	r1, #63	; 0x3f
 8013d0c:	4620      	mov	r0, r4
 8013d0e:	f00d f943 	bl	8020f98 <strchr>
    if (params != NULL) {
 8013d12:	4607      	mov	r7, r0
 8013d14:	b118      	cbz	r0, 8013d1e <http_find_file+0x3a>
      *params = '\0';
 8013d16:	2300      	movs	r3, #0
 8013d18:	f807 3b01 	strb.w	r3, [r7], #1
 8013d1c:	9c05      	ldr	r4, [sp, #20]
    err = fs_open(&hs->file_handle, uri);
 8013d1e:	4621      	mov	r1, r4
 8013d20:	4628      	mov	r0, r5
 8013d22:	f7ff fe15 	bl	8013950 <fs_open>
    if (err == ERR_OK) {
 8013d26:	b998      	cbnz	r0, 8013d50 <http_find_file+0x6c>
    if (file != NULL) {
 8013d28:	b1ce      	cbz	r6, 8013d5e <http_find_file+0x7a>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 8013d2a:	7c33      	ldrb	r3, [r6, #16]
 8013d2c:	9c05      	ldr	r4, [sp, #20]
 8013d2e:	f013 0908 	ands.w	r9, r3, #8
 8013d32:	d01b      	beq.n	8013d6c <http_find_file+0x88>
        tag_check = 1;
 8013d34:	f04f 0901 	mov.w	r9, #1
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8013d38:	4623      	mov	r3, r4
 8013d3a:	4642      	mov	r2, r8
 8013d3c:	4631      	mov	r1, r6
 8013d3e:	9701      	str	r7, [sp, #4]
 8013d40:	f8cd 9000 	str.w	r9, [sp]
 8013d44:	4628      	mov	r0, r5
 8013d46:	f7ff fedd 	bl	8013b04 <http_init_file>
}
 8013d4a:	b007      	add	sp, #28
 8013d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      file = http_get_404_file(hs, &uri);
 8013d50:	a905      	add	r1, sp, #20
 8013d52:	4628      	mov	r0, r5
 8013d54:	f7ff fe76 	bl	8013a44 <http_get_404_file>
 8013d58:	4606      	mov	r6, r0
    if (file != NULL) {
 8013d5a:	2e00      	cmp	r6, #0
 8013d5c:	d1e5      	bne.n	8013d2a <http_find_file+0x46>
    file = http_get_404_file(hs, &uri);
 8013d5e:	a905      	add	r1, sp, #20
 8013d60:	4628      	mov	r0, r5
 8013d62:	f7ff fe6f 	bl	8013a44 <http_get_404_file>
 8013d66:	9c05      	ldr	r4, [sp, #20]
 8013d68:	4606      	mov	r6, r0
 8013d6a:	e7e5      	b.n	8013d38 <http_find_file+0x54>
    char *param = (char *)strstr(uri, "?");
 8013d6c:	213f      	movs	r1, #63	; 0x3f
 8013d6e:	4620      	mov	r0, r4
 8013d70:	f00d f912 	bl	8020f98 <strchr>
    if (param != NULL) {
 8013d74:	4682      	mov	sl, r0
 8013d76:	b108      	cbz	r0, 8013d7c <http_find_file+0x98>
      *param = 0;
 8013d78:	f880 9000 	strb.w	r9, [r0]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 8013d7c:	212e      	movs	r1, #46	; 0x2e
 8013d7e:	4620      	mov	r0, r4
 8013d80:	f00d f90a 	bl	8020f98 <strchr>
 8013d84:	4681      	mov	r9, r0
 8013d86:	b908      	cbnz	r0, 8013d8c <http_find_file+0xa8>
 8013d88:	e08b      	b.n	8013ea2 <http_find_file+0x1be>
 8013d8a:	4681      	mov	r9, r0
 8013d8c:	212e      	movs	r1, #46	; 0x2e
 8013d8e:	f109 0001 	add.w	r0, r9, #1
 8013d92:	f00d f901 	bl	8020f98 <strchr>
 8013d96:	2800      	cmp	r0, #0
 8013d98:	d1f7      	bne.n	8013d8a <http_find_file+0xa6>
 8013d9a:	4c43      	ldr	r4, [pc, #268]	; (8013ea8 <http_find_file+0x1c4>)
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 8013d9c:	4648      	mov	r0, r9
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 8013d9e:	4943      	ldr	r1, [pc, #268]	; (8013eac <http_find_file+0x1c8>)
 8013da0:	f104 0b10 	add.w	fp, r4, #16
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 8013da4:	f000 ff70 	bl	8014c88 <lwip_stricmp>
 8013da8:	b140      	cbz	r0, 8013dbc <http_find_file+0xd8>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8013daa:	455c      	cmp	r4, fp
 8013dac:	d04c      	beq.n	8013e48 <http_find_file+0x164>
 8013dae:	f854 1b04 	ldr.w	r1, [r4], #4
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 8013db2:	4648      	mov	r0, r9
 8013db4:	f000 ff68 	bl	8014c88 <lwip_stricmp>
 8013db8:	2800      	cmp	r0, #0
 8013dba:	d1f6      	bne.n	8013daa <http_find_file+0xc6>
        tag_check = 1;
 8013dbc:	f04f 0901 	mov.w	r9, #1
    if (param != NULL) {
 8013dc0:	f1ba 0f00 	cmp.w	sl, #0
 8013dc4:	d002      	beq.n	8013dcc <http_find_file+0xe8>
      *param = '?';
 8013dc6:	233f      	movs	r3, #63	; 0x3f
 8013dc8:	f88a 3000 	strb.w	r3, [sl]
 8013dcc:	9c05      	ldr	r4, [sp, #20]
 8013dce:	e7b3      	b.n	8013d38 <http_find_file+0x54>
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8013dd0:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8013eb0 <http_find_file+0x1cc>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8013dd4:	4554      	cmp	r4, sl
 8013dd6:	d106      	bne.n	8013de6 <http_find_file+0x102>
 8013dd8:	f1a0 0201 	sub.w	r2, r0, #1
 8013ddc:	fab2 f282 	clz	r2, r2
 8013de0:	0952      	lsrs	r2, r2, #5
 8013de2:	2a00      	cmp	r2, #0
 8013de4:	d05a      	beq.n	8013e9c <http_find_file+0x1b8>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8013de6:	2b3f      	cmp	r3, #63	; 0x3f
 8013de8:	bf28      	it	cs
 8013dea:	233f      	movcs	r3, #63	; 0x3f
    if (copy_len > 0) {
 8013dec:	2f01      	cmp	r7, #1
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8013dee:	9302      	str	r3, [sp, #8]
    if (copy_len > 0) {
 8013df0:	d008      	beq.n	8013e04 <http_find_file+0x120>
      MEMCPY(http_uri_buf, uri, copy_len);
 8013df2:	4621      	mov	r1, r4
 8013df4:	461a      	mov	r2, r3
 8013df6:	482e      	ldr	r0, [pc, #184]	; (8013eb0 <http_find_file+0x1cc>)
 8013df8:	461c      	mov	r4, r3
 8013dfa:	f00b ff38 	bl	801fc6e <memcpy>
      http_uri_buf[copy_len] = 0;
 8013dfe:	2300      	movs	r3, #0
 8013e00:	f80a 3004 	strb.w	r3, [sl, r4]
{
 8013e04:	f04f 0900 	mov.w	r9, #0
        file_name = http_uri_buf;
 8013e08:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 8013eb0 <http_find_file+0x1cc>
 8013e0c:	9603      	str	r6, [sp, #12]
 8013e0e:	9e02      	ldr	r6, [sp, #8]
 8013e10:	f8cd 8008 	str.w	r8, [sp, #8]
      if (copy_len > 0) {
 8013e14:	2f01      	cmp	r7, #1
        file_name = http_uri_buf;
 8013e16:	465c      	mov	r4, fp
      if (copy_len > 0) {
 8013e18:	d012      	beq.n	8013e40 <http_find_file+0x15c>
        if (len_left > 0) {
 8013e1a:	f1d6 033f 	rsbs	r3, r6, #63	; 0x3f
 8013e1e:	d116      	bne.n	8013e4e <http_find_file+0x16a>
      err = fs_open(&hs->file_handle, file_name);
 8013e20:	4621      	mov	r1, r4
 8013e22:	4628      	mov	r0, r5
 8013e24:	f7ff fd94 	bl	8013950 <fs_open>
      if (err == ERR_OK) {
 8013e28:	b358      	cbz	r0, 8013e82 <http_find_file+0x19e>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8013e2a:	f109 0901 	add.w	r9, r9, #1
 8013e2e:	f1b9 0f05 	cmp.w	r9, #5
 8013e32:	d1ef      	bne.n	8013e14 <http_find_file+0x130>
 8013e34:	9c05      	ldr	r4, [sp, #20]
  u8_t tag_check = 0;
 8013e36:	f04f 0900 	mov.w	r9, #0
 8013e3a:	e9dd 8602 	ldrd	r8, r6, [sp, #8]
 8013e3e:	e764      	b.n	8013d0a <http_find_file+0x26>
        file_name = httpd_default_filenames[loop].name;
 8013e40:	4b1c      	ldr	r3, [pc, #112]	; (8013eb4 <http_find_file+0x1d0>)
 8013e42:	f853 4039 	ldr.w	r4, [r3, r9, lsl #3]
 8013e46:	e7eb      	b.n	8013e20 <http_find_file+0x13c>
  u8_t tag_check = 0;
 8013e48:	f04f 0900 	mov.w	r9, #0
 8013e4c:	e7b8      	b.n	8013dc0 <http_find_file+0xdc>
 8013e4e:	9304      	str	r3, [sp, #16]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8013e50:	eb0a 0806 	add.w	r8, sl, r6
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8013e54:	4b17      	ldr	r3, [pc, #92]	; (8013eb4 <http_find_file+0x1d0>)
 8013e56:	f853 1039 	ldr.w	r1, [r3, r9, lsl #3]
 8013e5a:	4608      	mov	r0, r1
 8013e5c:	468a      	mov	sl, r1
 8013e5e:	f7ec f9f9 	bl	8000254 <strlen>
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8013e62:	9b04      	ldr	r3, [sp, #16]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8013e64:	4651      	mov	r1, sl
        file_name = http_uri_buf;
 8013e66:	46da      	mov	sl, fp
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8013e68:	4283      	cmp	r3, r0
 8013e6a:	bf28      	it	cs
 8013e6c:	4603      	movcs	r3, r0
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8013e6e:	4640      	mov	r0, r8
 8013e70:	461a      	mov	r2, r3
 8013e72:	9304      	str	r3, [sp, #16]
 8013e74:	f00b fefb 	bl	801fc6e <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8013e78:	2200      	movs	r2, #0
 8013e7a:	9b04      	ldr	r3, [sp, #16]
 8013e7c:	f808 2003 	strb.w	r2, [r8, r3]
 8013e80:	e7ce      	b.n	8013e20 <http_find_file+0x13c>
        tag_check = httpd_default_filenames[loop].shtml;
 8013e82:	4b0c      	ldr	r3, [pc, #48]	; (8013eb4 <http_find_file+0x1d0>)
        uri = file_name;
 8013e84:	9405      	str	r4, [sp, #20]
        tag_check = httpd_default_filenames[loop].shtml;
 8013e86:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8013e8a:	e9dd 8602 	ldrd	r8, r6, [sp, #8]
 8013e8e:	f899 9004 	ldrb.w	r9, [r9, #4]
  if (file == NULL) {
 8013e92:	2d00      	cmp	r5, #0
 8013e94:	f43f af39 	beq.w	8013d0a <http_find_file+0x26>
  char *params = NULL;
 8013e98:	4607      	mov	r7, r0
 8013e9a:	e74d      	b.n	8013d38 <http_find_file+0x54>
 8013e9c:	4654      	mov	r4, sl
  u8_t tag_check = 0;
 8013e9e:	4691      	mov	r9, r2
 8013ea0:	e733      	b.n	8013d0a <http_find_file+0x26>
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 8013ea2:	46a1      	mov	r9, r4
 8013ea4:	e779      	b.n	8013d9a <http_find_file+0xb6>
 8013ea6:	bf00      	nop
 8013ea8:	0803ccc0 	.word	0x0803ccc0
 8013eac:	0803ccf8 	.word	0x0803ccf8
 8013eb0:	200299fc 	.word	0x200299fc
 8013eb4:	0803cf44 	.word	0x0803cf44

08013eb8 <http_post_rxpbuf>:
{
 8013eb8:	b570      	push	{r4, r5, r6, lr}
 8013eba:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8013ebc:	4604      	mov	r4, r0
  if (p != NULL) {
 8013ebe:	b1d1      	cbz	r1, 8013ef6 <http_post_rxpbuf+0x3e>
    if (hs->post_content_len_left < p->tot_len) {
 8013ec0:	890a      	ldrh	r2, [r1, #8]
 8013ec2:	429a      	cmp	r2, r3
      hs->post_content_len_left = 0;
 8013ec4:	bf8c      	ite	hi
 8013ec6:	2300      	movhi	r3, #0
      hs->post_content_len_left -= p->tot_len;
 8013ec8:	1a9b      	subls	r3, r3, r2
 8013eca:	6303      	str	r3, [r0, #48]	; 0x30
    err = httpd_post_receive_data(hs, p);
 8013ecc:	f7f1 fb56 	bl	800557c <httpd_post_receive_data>
  if (err != ERR_OK) {
 8013ed0:	b180      	cbz	r0, 8013ef4 <http_post_rxpbuf+0x3c>
    hs->post_content_len_left = 0;
 8013ed2:	2300      	movs	r3, #0
 8013ed4:	6323      	str	r3, [r4, #48]	; 0x30
  http_uri_buf[0] = 0;
 8013ed6:	4d0a      	ldr	r5, [pc, #40]	; (8013f00 <http_post_rxpbuf+0x48>)
 8013ed8:	2600      	movs	r6, #0
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8013eda:	4620      	mov	r0, r4
 8013edc:	223f      	movs	r2, #63	; 0x3f
 8013ede:	4629      	mov	r1, r5
  http_uri_buf[0] = 0;
 8013ee0:	702e      	strb	r6, [r5, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8013ee2:	f7f1 fb5b 	bl	800559c <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 8013ee6:	4632      	mov	r2, r6
 8013ee8:	4629      	mov	r1, r5
 8013eea:	4620      	mov	r0, r4
}
 8013eec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return http_find_file(hs, http_uri_buf, 0);
 8013ef0:	f7ff bef8 	b.w	8013ce4 <http_find_file>
 8013ef4:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if (hs->post_content_len_left == 0) {
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d0ed      	beq.n	8013ed6 <http_post_rxpbuf+0x1e>
}
 8013efa:	2000      	movs	r0, #0
 8013efc:	bd70      	pop	{r4, r5, r6, pc}
 8013efe:	bf00      	nop
 8013f00:	200299fc 	.word	0x200299fc

08013f04 <http_find_error_file>:
  if (error_nr == 501) {
 8013f04:	f240 12f5 	movw	r2, #501	; 0x1f5
    uri3 = "/400.shtml";
 8013f08:	4b16      	ldr	r3, [pc, #88]	; (8013f64 <http_find_error_file+0x60>)
 8013f0a:	4291      	cmp	r1, r2
 8013f0c:	4a16      	ldr	r2, [pc, #88]	; (8013f68 <http_find_error_file+0x64>)
{
 8013f0e:	b5f0      	push	{r4, r5, r6, r7, lr}
    uri3 = "/400.shtml";
 8013f10:	4c16      	ldr	r4, [pc, #88]	; (8013f6c <http_find_error_file+0x68>)
 8013f12:	bf18      	it	ne
 8013f14:	461c      	movne	r4, r3
 8013f16:	4b16      	ldr	r3, [pc, #88]	; (8013f70 <http_find_error_file+0x6c>)
{
 8013f18:	b083      	sub	sp, #12
  if (fs_open(&hs->file_handle, uri1) == ERR_OK) {
 8013f1a:	4621      	mov	r1, r4
    uri3 = "/400.shtml";
 8013f1c:	4e15      	ldr	r6, [pc, #84]	; (8013f74 <http_find_error_file+0x70>)
 8013f1e:	4d16      	ldr	r5, [pc, #88]	; (8013f78 <http_find_error_file+0x74>)
 8013f20:	bf04      	itt	eq
 8013f22:	4616      	moveq	r6, r2
 8013f24:	461d      	moveq	r5, r3
{
 8013f26:	4607      	mov	r7, r0
  if (fs_open(&hs->file_handle, uri1) == ERR_OK) {
 8013f28:	f7ff fd12 	bl	8013950 <fs_open>
 8013f2c:	b128      	cbz	r0, 8013f3a <http_find_error_file+0x36>
  } else if (fs_open(&hs->file_handle, uri2) == ERR_OK) {
 8013f2e:	4629      	mov	r1, r5
 8013f30:	4638      	mov	r0, r7
 8013f32:	f7ff fd0d 	bl	8013950 <fs_open>
 8013f36:	b958      	cbnz	r0, 8013f50 <http_find_error_file+0x4c>
    uri = uri2;
 8013f38:	462c      	mov	r4, r5
  return http_init_file(hs, &hs->file_handle, 0, uri, 0, NULL);
 8013f3a:	2500      	movs	r5, #0
 8013f3c:	4623      	mov	r3, r4
 8013f3e:	4639      	mov	r1, r7
 8013f40:	4638      	mov	r0, r7
 8013f42:	9501      	str	r5, [sp, #4]
 8013f44:	462a      	mov	r2, r5
 8013f46:	9500      	str	r5, [sp, #0]
 8013f48:	f7ff fddc 	bl	8013b04 <http_init_file>
}
 8013f4c:	b003      	add	sp, #12
 8013f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } else if (fs_open(&hs->file_handle, uri3) == ERR_OK) {
 8013f50:	4631      	mov	r1, r6
 8013f52:	4638      	mov	r0, r7
 8013f54:	f7ff fcfc 	bl	8013950 <fs_open>
 8013f58:	b908      	cbnz	r0, 8013f5e <http_find_error_file+0x5a>
    uri = uri3;
 8013f5a:	4634      	mov	r4, r6
 8013f5c:	e7ed      	b.n	8013f3a <http_find_error_file+0x36>
    return ERR_ARG;
 8013f5e:	f06f 000f 	mvn.w	r0, #15
 8013f62:	e7f3      	b.n	8013f4c <http_find_error_file+0x48>
 8013f64:	0803cd0c 	.word	0x0803cd0c
 8013f68:	0803ccd0 	.word	0x0803ccd0
 8013f6c:	0803cce8 	.word	0x0803cce8
 8013f70:	0803ccdc 	.word	0x0803ccdc
 8013f74:	0803ccf4 	.word	0x0803ccf4
 8013f78:	0803cd00 	.word	0x0803cd00

08013f7c <http_close_or_abort_conn.constprop.9>:
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
 8013f7c:	b538      	push	{r3, r4, r5, lr}
 8013f7e:	4604      	mov	r4, r0
  if (hs != NULL) {
 8013f80:	460d      	mov	r5, r1
 8013f82:	b381      	cbz	r1, 8013fe6 <http_close_or_abort_conn.constprop.9+0x6a>
    if ((hs->post_content_len_left != 0)
 8013f84:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8013f86:	bb33      	cbnz	r3, 8013fd6 <http_close_or_abort_conn.constprop.9+0x5a>
  altcp_arg(pcb, NULL);
 8013f88:	2100      	movs	r1, #0
 8013f8a:	4620      	mov	r0, r4
 8013f8c:	f003 fb3e 	bl	801760c <tcp_arg>
  altcp_recv(pcb, NULL);
 8013f90:	2100      	movs	r1, #0
 8013f92:	4620      	mov	r0, r4
 8013f94:	f003 fb3e 	bl	8017614 <tcp_recv>
  altcp_err(pcb, NULL);
 8013f98:	2100      	movs	r1, #0
 8013f9a:	4620      	mov	r0, r4
 8013f9c:	f003 fb72 	bl	8017684 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8013fa0:	2200      	movs	r2, #0
 8013fa2:	4620      	mov	r0, r4
 8013fa4:	4611      	mov	r1, r2
 8013fa6:	f003 fb8f 	bl	80176c8 <tcp_poll>
  altcp_sent(pcb, NULL);
 8013faa:	2100      	movs	r1, #0
 8013fac:	4620      	mov	r0, r4
 8013fae:	f003 fb4d 	bl	801764c <tcp_sent>
    http_state_eof(hs);
 8013fb2:	4628      	mov	r0, r5
 8013fb4:	f7ff fd30 	bl	8013a18 <http_state_eof>
    HTTP_FREE_HTTP_STATE(hs);
 8013fb8:	4628      	mov	r0, r5
 8013fba:	f001 fde5 	bl	8015b88 <mem_free>
  err = altcp_close(pcb);
 8013fbe:	4620      	mov	r0, r4
 8013fc0:	f004 f988 	bl	80182d4 <tcp_close>
  if (err != ERR_OK) {
 8013fc4:	4605      	mov	r5, r0
 8013fc6:	b120      	cbz	r0, 8013fd2 <http_close_or_abort_conn.constprop.9+0x56>
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8013fc8:	4620      	mov	r0, r4
 8013fca:	2204      	movs	r2, #4
 8013fcc:	4910      	ldr	r1, [pc, #64]	; (8014010 <http_close_or_abort_conn.constprop.9+0x94>)
 8013fce:	f003 fb7b 	bl	80176c8 <tcp_poll>
}
 8013fd2:	4628      	mov	r0, r5
 8013fd4:	bd38      	pop	{r3, r4, r5, pc}
      http_uri_buf[0] = 0;
 8013fd6:	490f      	ldr	r1, [pc, #60]	; (8014014 <http_close_or_abort_conn.constprop.9+0x98>)
 8013fd8:	2300      	movs	r3, #0
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8013fda:	223f      	movs	r2, #63	; 0x3f
 8013fdc:	4628      	mov	r0, r5
      http_uri_buf[0] = 0;
 8013fde:	700b      	strb	r3, [r1, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8013fe0:	f7f1 fadc 	bl	800559c <httpd_post_finished>
 8013fe4:	e7d0      	b.n	8013f88 <http_close_or_abort_conn.constprop.9+0xc>
  altcp_arg(pcb, NULL);
 8013fe6:	f003 fb11 	bl	801760c <tcp_arg>
  altcp_recv(pcb, NULL);
 8013fea:	4629      	mov	r1, r5
 8013fec:	4620      	mov	r0, r4
 8013fee:	f003 fb11 	bl	8017614 <tcp_recv>
  altcp_err(pcb, NULL);
 8013ff2:	4629      	mov	r1, r5
 8013ff4:	4620      	mov	r0, r4
 8013ff6:	f003 fb45 	bl	8017684 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8013ffa:	4629      	mov	r1, r5
 8013ffc:	4620      	mov	r0, r4
 8013ffe:	462a      	mov	r2, r5
 8014000:	f003 fb62 	bl	80176c8 <tcp_poll>
  altcp_sent(pcb, NULL);
 8014004:	4629      	mov	r1, r5
 8014006:	4620      	mov	r0, r4
 8014008:	f003 fb20 	bl	801764c <tcp_sent>
 801400c:	e7d7      	b.n	8013fbe <http_close_or_abort_conn.constprop.9+0x42>
 801400e:	bf00      	nop
 8014010:	08014669 	.word	0x08014669
 8014014:	200299fc 	.word	0x200299fc

08014018 <http_eof>:
  if (hs->keepalive) {
 8014018:	f891 2029 	ldrb.w	r2, [r1, #41]	; 0x29
 801401c:	b90a      	cbnz	r2, 8014022 <http_eof+0xa>
  return http_close_or_abort_conn(pcb, hs, 0);
 801401e:	f7ff bfad 	b.w	8013f7c <http_close_or_abort_conn.constprop.9>
{
 8014022:	b538      	push	{r3, r4, r5, lr}
 8014024:	460c      	mov	r4, r1
 8014026:	4605      	mov	r5, r0
    http_state_eof(hs);
 8014028:	4608      	mov	r0, r1
 801402a:	f7ff fcf5 	bl	8013a18 <http_state_eof>
  memset(hs, 0, sizeof(struct http_state));
 801402e:	2234      	movs	r2, #52	; 0x34
 8014030:	2100      	movs	r1, #0
 8014032:	4620      	mov	r0, r4
 8014034:	f00b fe3f 	bl	801fcb6 <memset>
    hs->keepalive = 1;
 8014038:	2301      	movs	r3, #1
    hs->pcb = pcb;
 801403a:	61e5      	str	r5, [r4, #28]
    hs->keepalive = 1;
 801403c:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    altcp_nagle_disable(pcb);
 8014040:	8b6b      	ldrh	r3, [r5, #26]
 8014042:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014046:	836b      	strh	r3, [r5, #26]
}
 8014048:	bd38      	pop	{r3, r4, r5, pc}
 801404a:	bf00      	nop

0801404c <http_send>:
{
 801404c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014050:	b089      	sub	sp, #36	; 0x24
  if (hs == NULL) {
 8014052:	2900      	cmp	r1, #0
 8014054:	d05f      	beq.n	8014116 <http_send+0xca>
  if (hs->left == 0) {
 8014056:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8014058:	460d      	mov	r5, r1
 801405a:	4683      	mov	fp, r0
 801405c:	b323      	cbz	r3, 80140a8 <http_send+0x5c>
  if (hs->ssi) {
 801405e:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 8014060:	69a9      	ldr	r1, [r5, #24]
 8014062:	2c00      	cmp	r4, #0
 8014064:	d032      	beq.n	80140cc <http_send+0x80>
  if (ssi->parsed > hs->file) {
 8014066:	6826      	ldr	r6, [r4, #0]
  len = altcp_sndbuf(pcb);
 8014068:	f8bb 2064 	ldrh.w	r2, [fp, #100]	; 0x64
  if (ssi->parsed > hs->file) {
 801406c:	428e      	cmp	r6, r1
  len = altcp_sndbuf(pcb);
 801406e:	f8ad 201e 	strh.w	r2, [sp, #30]
  if (ssi->parsed > hs->file) {
 8014072:	d955      	bls.n	8014120 <http_send+0xd4>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8014074:	1a76      	subs	r6, r6, r1
 8014076:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801407a:	aa08      	add	r2, sp, #32
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 801407c:	4658      	mov	r0, fp
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 801407e:	429e      	cmp	r6, r3
 8014080:	bfa8      	it	ge
 8014082:	461e      	movge	r6, r3
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8014084:	2300      	movs	r3, #0
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8014086:	f822 6d02 	strh.w	r6, [r2, #-2]!
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 801408a:	f7ff fc8f 	bl	80139ac <http_write>
    if (err == ERR_OK) {
 801408e:	4606      	mov	r6, r0
 8014090:	2800      	cmp	r0, #0
 8014092:	f000 81c0 	beq.w	8014416 <http_send+0x3ca>
    if (altcp_sndbuf(pcb) == 0) {
 8014096:	f8bb 3064 	ldrh.w	r3, [fp, #100]	; 0x64
  u8_t data_to_send = 0;
 801409a:	2700      	movs	r7, #0
    if (altcp_sndbuf(pcb) == 0) {
 801409c:	2b00      	cmp	r3, #0
 801409e:	f000 81c8 	beq.w	8014432 <http_send+0x3e6>
 80140a2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80140a6:	e03d      	b.n	8014124 <http_send+0xd8>
  if (hs->handle == NULL) {
 80140a8:	6948      	ldr	r0, [r1, #20]
 80140aa:	2800      	cmp	r0, #0
 80140ac:	d02f      	beq.n	801410e <http_send+0xc2>
  bytes_left = fs_bytes_left(hs->handle);
 80140ae:	f7ff fc79 	bl	80139a4 <fs_bytes_left>
  if (bytes_left <= 0) {
 80140b2:	2800      	cmp	r0, #0
 80140b4:	dd2b      	ble.n	801410e <http_send+0xc2>
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 80140b6:	49b2      	ldr	r1, [pc, #712]	; (8014380 <http_send+0x334>)
 80140b8:	f240 429d 	movw	r2, #1181	; 0x49d
 80140bc:	4bb1      	ldr	r3, [pc, #708]	; (8014384 <http_send+0x338>)
 80140be:	48b2      	ldr	r0, [pc, #712]	; (8014388 <http_send+0x33c>)
 80140c0:	f00c fd7a 	bl	8020bb8 <iprintf>
  if (hs->ssi) {
 80140c4:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 80140c6:	69a9      	ldr	r1, [r5, #24]
 80140c8:	2c00      	cmp	r4, #0
 80140ca:	d1cc      	bne.n	8014066 <http_send+0x1a>
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 80140cc:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 80140d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80140d4:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 80140d6:	aa08      	add	r2, sp, #32
 80140d8:	4286      	cmp	r6, r0
 80140da:	bf88      	it	hi
 80140dc:	461e      	movhi	r6, r3
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80140de:	4623      	mov	r3, r4
 80140e0:	4658      	mov	r0, fp
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 80140e2:	f822 6d02 	strh.w	r6, [r2, #-2]!
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80140e6:	f7ff fc61 	bl	80139ac <http_write>
  if (err == ERR_OK) {
 80140ea:	2800      	cmp	r0, #0
 80140ec:	f040 8278 	bne.w	80145e0 <http_send+0x594>
    hs->file += len;
 80140f0:	f8bd 101e 	ldrh.w	r1, [sp, #30]
    data_to_send = 1;
 80140f4:	2701      	movs	r7, #1
    hs->file += len;
 80140f6:	69aa      	ldr	r2, [r5, #24]
    hs->left -= len;
 80140f8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    hs->file += len;
 80140fa:	440a      	add	r2, r1
    hs->left -= len;
 80140fc:	1a5b      	subs	r3, r3, r1
    hs->file += len;
 80140fe:	61aa      	str	r2, [r5, #24]
    hs->left -= len;
 8014100:	626b      	str	r3, [r5, #36]	; 0x24
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8014102:	b94b      	cbnz	r3, 8014118 <http_send+0xcc>
 8014104:	6968      	ldr	r0, [r5, #20]
 8014106:	f7ff fc4d 	bl	80139a4 <fs_bytes_left>
 801410a:	2800      	cmp	r0, #0
 801410c:	dc04      	bgt.n	8014118 <http_send+0xcc>
    http_eof(pcb, hs);
 801410e:	4629      	mov	r1, r5
 8014110:	4658      	mov	r0, fp
 8014112:	f7ff ff81 	bl	8014018 <http_eof>
      return 0;
 8014116:	2700      	movs	r7, #0
}
 8014118:	4638      	mov	r0, r7
 801411a:	b009      	add	sp, #36	; 0x24
 801411c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u8_t data_to_send = 0;
 8014120:	2700      	movs	r7, #0
  err_t err = ERR_OK;
 8014122:	463e      	mov	r6, r7
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 8014124:	46d9      	mov	r9, fp
 8014126:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
              ssi->tag_index = 0;
 801412a:	f04f 0a00 	mov.w	sl, #0
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 801412e:	46bb      	mov	fp, r7
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8014130:	2b04      	cmp	r3, #4
 8014132:	d003      	beq.n	801413c <http_send+0xf0>
 8014134:	68e1      	ldr	r1, [r4, #12]
 8014136:	2900      	cmp	r1, #0
 8014138:	f000 8196 	beq.w	8014468 <http_send+0x41c>
 801413c:	2e00      	cmp	r6, #0
 801413e:	f040 8245 	bne.w	80145cc <http_send+0x580>
    if (len == 0) {
 8014142:	2a00      	cmp	r2, #0
 8014144:	f000 8248 	beq.w	80145d8 <http_send+0x58c>
    switch (ssi->tag_state) {
 8014148:	2b04      	cmp	r3, #4
 801414a:	d8f1      	bhi.n	8014130 <http_send+0xe4>
 801414c:	e8df f003 	tbb	[pc, r3]
 8014150:	253d606e 	.word	0x253d606e
 8014154:	03          	.byte	0x03
 8014155:	00          	.byte	0x00
        if (ssi->tag_end > hs->file) {
 8014156:	68a0      	ldr	r0, [r4, #8]
 8014158:	69a9      	ldr	r1, [r5, #24]
 801415a:	4288      	cmp	r0, r1
 801415c:	f240 8086 	bls.w	801426c <http_send+0x220>
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 8014160:	6863      	ldr	r3, [r4, #4]
 8014162:	4299      	cmp	r1, r3
 8014164:	f200 8228 	bhi.w	80145b8 <http_send+0x56c>
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8014168:	1a5a      	subs	r2, r3, r1
 801416a:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 801416e:	4282      	cmp	r2, r0
 8014170:	f340 80ed 	ble.w	801434e <http_send+0x302>
 8014174:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014178:	f8ad 301e 	strh.w	r3, [sp, #30]
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 801417c:	2300      	movs	r3, #0
 801417e:	f10d 021e 	add.w	r2, sp, #30
 8014182:	4648      	mov	r0, r9
 8014184:	f7ff fc12 	bl	80139ac <http_write>
          if (err == ERR_OK) {
 8014188:	2800      	cmp	r0, #0
 801418a:	f000 8184 	beq.w	8014496 <http_send+0x44a>
 801418e:	4606      	mov	r6, r0
 8014190:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8014194:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
 8014198:	e7ca      	b.n	8014130 <http_send+0xe4>
 801419a:	6820      	ldr	r0, [r4, #0]
 801419c:	68e7      	ldr	r7, [r4, #12]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 801419e:	8a21      	ldrh	r1, [r4, #16]
 80141a0:	f810 cb01 	ldrb.w	ip, [r0], #1
 80141a4:	f107 3eff 	add.w	lr, r7, #4294967295
 80141a8:	2900      	cmp	r1, #0
 80141aa:	d14d      	bne.n	8014248 <http_send+0x1fc>
 80141ac:	f1ac 0709 	sub.w	r7, ip, #9
 80141b0:	b2ff      	uxtb	r7, r7
 80141b2:	2f17      	cmp	r7, #23
 80141b4:	d848      	bhi.n	8014248 <http_send+0x1fc>
 80141b6:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 8014390 <http_send+0x344>
 80141ba:	fa28 f707 	lsr.w	r7, r8, r7
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80141be:	07ff      	lsls	r7, r7, #31
 80141c0:	d542      	bpl.n	8014248 <http_send+0x1fc>
          ssi->parse_left--;
 80141c2:	f8c4 e00c 	str.w	lr, [r4, #12]
          ssi->parsed++;
 80141c6:	6020      	str	r0, [r4, #0]
 80141c8:	e7b2      	b.n	8014130 <http_send+0xe4>
 80141ca:	6820      	ldr	r0, [r4, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80141cc:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 80141d0:	f890 e000 	ldrb.w	lr, [r0]
 80141d4:	f1bc 0f00 	cmp.w	ip, #0
 80141d8:	d163      	bne.n	80142a2 <http_send+0x256>
 80141da:	f1ae 0709 	sub.w	r7, lr, #9
 80141de:	b2ff      	uxtb	r7, r7
 80141e0:	2f17      	cmp	r7, #23
 80141e2:	d94f      	bls.n	8014284 <http_send+0x238>
 80141e4:	68e1      	ldr	r1, [r4, #12]
 80141e6:	f100 0801 	add.w	r8, r0, #1
 80141ea:	3901      	subs	r1, #1
 80141ec:	9101      	str	r1, [sp, #4]
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 80141ee:	7d27      	ldrb	r7, [r4, #20]
 80141f0:	4966      	ldr	r1, [pc, #408]	; (801438c <http_send+0x340>)
 80141f2:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 80141f6:	687f      	ldr	r7, [r7, #4]
 80141f8:	783f      	ldrb	r7, [r7, #0]
 80141fa:	4577      	cmp	r7, lr
 80141fc:	f000 80a2 	beq.w	8014344 <http_send+0x2f8>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 8014200:	f10c 0701 	add.w	r7, ip, #1
 8014204:	44a4      	add	ip, r4
 8014206:	8227      	strh	r7, [r4, #16]
 8014208:	7800      	ldrb	r0, [r0, #0]
 801420a:	f88c 0016 	strb.w	r0, [ip, #22]
 801420e:	e09c      	b.n	801434a <http_send+0x2fe>
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 8014210:	495e      	ldr	r1, [pc, #376]	; (801438c <http_send+0x340>)
 8014212:	7d20      	ldrb	r0, [r4, #20]
 8014214:	8a27      	ldrh	r7, [r4, #16]
 8014216:	f851 1030 	ldr.w	r1, [r1, r0, lsl #3]
 801421a:	5dc9      	ldrb	r1, [r1, r7]
 801421c:	2900      	cmp	r1, #0
 801421e:	f040 8082 	bne.w	8014326 <http_send+0x2da>
          ssi->tag_state = TAG_FOUND;
 8014222:	2302      	movs	r3, #2
          ssi->tag_index = 0;
 8014224:	8221      	strh	r1, [r4, #16]
          ssi->tag_state = TAG_FOUND;
 8014226:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
 801422a:	e783      	b.n	8014134 <http_send+0xe8>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 801422c:	6821      	ldr	r1, [r4, #0]
 801422e:	7808      	ldrb	r0, [r1, #0]
 8014230:	283c      	cmp	r0, #60	; 0x3c
 8014232:	f000 81d7 	beq.w	80145e4 <http_send+0x598>
 8014236:	282f      	cmp	r0, #47	; 0x2f
 8014238:	f000 81dd 	beq.w	80145f6 <http_send+0x5aa>
        ssi->parse_left--;
 801423c:	68e0      	ldr	r0, [r4, #12]
        ssi->parsed++;
 801423e:	3101      	adds	r1, #1
        ssi->parse_left--;
 8014240:	3801      	subs	r0, #1
        ssi->parsed++;
 8014242:	6021      	str	r1, [r4, #0]
        ssi->parse_left--;
 8014244:	60e0      	str	r0, [r4, #12]
 8014246:	e773      	b.n	8014130 <http_send+0xe4>
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 8014248:	f894 8014 	ldrb.w	r8, [r4, #20]
 801424c:	4f4f      	ldr	r7, [pc, #316]	; (801438c <http_send+0x340>)
 801424e:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8014252:	687f      	ldr	r7, [r7, #4]
 8014254:	f817 8001 	ldrb.w	r8, [r7, r1]
 8014258:	45e0      	cmp	r8, ip
 801425a:	f000 809b 	beq.w	8014394 <http_send+0x348>
          ssi->parse_left--;
 801425e:	f8c4 e00c 	str.w	lr, [r4, #12]
          ssi->tag_state = TAG_NONE;
 8014262:	2300      	movs	r3, #0
          ssi->parsed++;
 8014264:	6020      	str	r0, [r4, #0]
          ssi->tag_state = TAG_NONE;
 8014266:	f884 a11e 	strb.w	sl, [r4, #286]	; 0x11e
 801426a:	e763      	b.n	8014134 <http_send+0xe8>
          if (ssi->tag_index < ssi->tag_insert_len) {
 801426c:	8a21      	ldrh	r1, [r4, #16]
 801426e:	8a63      	ldrh	r3, [r4, #18]
 8014270:	4299      	cmp	r1, r3
 8014272:	f0c0 8189 	bcc.w	8014588 <http_send+0x53c>
              ssi->tag_index = 0;
 8014276:	f8a4 a010 	strh.w	sl, [r4, #16]
              ssi->parsed = ssi->tag_end;
 801427a:	2300      	movs	r3, #0
              ssi->tag_state = TAG_NONE;
 801427c:	f884 a11e 	strb.w	sl, [r4, #286]	; 0x11e
              ssi->parsed = ssi->tag_end;
 8014280:	6020      	str	r0, [r4, #0]
 8014282:	e757      	b.n	8014134 <http_send+0xe8>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8014284:	4942      	ldr	r1, [pc, #264]	; (8014390 <http_send+0x344>)
 8014286:	f100 0801 	add.w	r8, r0, #1
 801428a:	fa21 f707 	lsr.w	r7, r1, r7
 801428e:	68e1      	ldr	r1, [r4, #12]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8014290:	07ff      	lsls	r7, r7, #31
 8014292:	f101 31ff 	add.w	r1, r1, #4294967295
 8014296:	9101      	str	r1, [sp, #4]
 8014298:	d5a9      	bpl.n	80141ee <http_send+0x1a2>
        ssi->parse_left--;
 801429a:	60e1      	str	r1, [r4, #12]
        ssi->parsed++;
 801429c:	f8c4 8000 	str.w	r8, [r4]
 80142a0:	e746      	b.n	8014130 <http_send+0xe4>
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 80142a2:	4f3a      	ldr	r7, [pc, #232]	; (801438c <http_send+0x340>)
 80142a4:	7d21      	ldrb	r1, [r4, #20]
 80142a6:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 80142aa:	6849      	ldr	r1, [r1, #4]
 80142ac:	f891 8000 	ldrb.w	r8, [r1]
 80142b0:	45f0      	cmp	r8, lr
 80142b2:	d01a      	beq.n	80142ea <http_send+0x29e>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 80142b4:	f1ae 0e09 	sub.w	lr, lr, #9
 80142b8:	fa5f fe8e 	uxtb.w	lr, lr
 80142bc:	f1be 0f17 	cmp.w	lr, #23
 80142c0:	d90c      	bls.n	80142dc <http_send+0x290>
 80142c2:	68e1      	ldr	r1, [r4, #12]
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 80142c4:	f1bc 0f07 	cmp.w	ip, #7
 80142c8:	f100 0801 	add.w	r8, r0, #1
 80142cc:	f101 31ff 	add.w	r1, r1, #4294967295
 80142d0:	9101      	str	r1, [sp, #4]
 80142d2:	d995      	bls.n	8014200 <http_send+0x1b4>
            ssi->tag_state = TAG_NONE;
 80142d4:	2300      	movs	r3, #0
 80142d6:	f884 a11e 	strb.w	sl, [r4, #286]	; 0x11e
 80142da:	e036      	b.n	801434a <http_send+0x2fe>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 80142dc:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8014390 <http_send+0x344>
 80142e0:	fa28 fe0e 	lsr.w	lr, r8, lr
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 80142e4:	f01e 0f01 	tst.w	lr, #1
 80142e8:	d0eb      	beq.n	80142c2 <http_send+0x276>
            ssi->tag_state = TAG_LEADOUT;
 80142ea:	2303      	movs	r3, #3
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 80142ec:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
            ssi->tag_state = TAG_LEADOUT;
 80142f0:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 80142f4:	f200 80a9 	bhi.w	801444a <http_send+0x3fe>
            ssi->tag_name[ssi->tag_index] = '\0';
 80142f8:	eb04 030c 	add.w	r3, r4, ip
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 80142fc:	f884 c015 	strb.w	ip, [r4, #21]
 8014300:	f100 0801 	add.w	r8, r0, #1
            ssi->tag_name[ssi->tag_index] = '\0';
 8014304:	f883 a016 	strb.w	sl, [r3, #22]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 8014308:	780b      	ldrb	r3, [r1, #0]
 801430a:	7802      	ldrb	r2, [r0, #0]
 801430c:	429a      	cmp	r2, r3
 801430e:	f000 8092 	beq.w	8014436 <http_send+0x3ea>
 8014312:	68e1      	ldr	r1, [r4, #12]
              ssi->tag_index = 0;
 8014314:	f8a4 a010 	strh.w	sl, [r4, #16]
 8014318:	1e4b      	subs	r3, r1, #1
 801431a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801431e:	9301      	str	r3, [sp, #4]
 8014320:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
 8014324:	e011      	b.n	801434a <http_send+0x2fe>
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 8014326:	6820      	ldr	r0, [r4, #0]
 8014328:	f890 c000 	ldrb.w	ip, [r0]
 801432c:	458c      	cmp	ip, r1
 801432e:	f000 8128 	beq.w	8014582 <http_send+0x536>
            ssi->tag_state = TAG_NONE;
 8014332:	2300      	movs	r3, #0
 8014334:	f884 a11e 	strb.w	sl, [r4, #286]	; 0x11e
          ssi->parse_left--;
 8014338:	68e1      	ldr	r1, [r4, #12]
          ssi->parsed++;
 801433a:	3001      	adds	r0, #1
          ssi->parse_left--;
 801433c:	3901      	subs	r1, #1
          ssi->parsed++;
 801433e:	6020      	str	r0, [r4, #0]
          ssi->parse_left--;
 8014340:	60e1      	str	r1, [r4, #12]
 8014342:	e6f5      	b.n	8014130 <http_send+0xe4>
            ssi->tag_state = TAG_NONE;
 8014344:	2300      	movs	r3, #0
 8014346:	f884 a11e 	strb.w	sl, [r4, #286]	; 0x11e
        ssi->parse_left--;
 801434a:	9901      	ldr	r1, [sp, #4]
 801434c:	e7a5      	b.n	801429a <http_send+0x24e>
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 801434e:	b292      	uxth	r2, r2
 8014350:	f8ad 201e 	strh.w	r2, [sp, #30]
          if (len != 0) {
 8014354:	2a00      	cmp	r2, #0
 8014356:	f47f af11 	bne.w	801417c <http_send+0x130>
            if (ssi->tag_started <= hs->file) {
 801435a:	428b      	cmp	r3, r1
 801435c:	d805      	bhi.n	801436a <http_send+0x31e>
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
 801435e:	68a0      	ldr	r0, [r4, #8]
 8014360:	1ac3      	subs	r3, r0, r3
 8014362:	441a      	add	r2, r3
 8014364:	b292      	uxth	r2, r2
 8014366:	f8ad 201e 	strh.w	r2, [sp, #30]
            hs->left -= len;
 801436a:	6a68      	ldr	r0, [r5, #36]	; 0x24
            hs->file += len;
 801436c:	4411      	add	r1, r2
 801436e:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
            data_to_send = 1;
 8014372:	f04f 0b01 	mov.w	fp, #1
            hs->left -= len;
 8014376:	1a80      	subs	r0, r0, r2
            hs->file += len;
 8014378:	61a9      	str	r1, [r5, #24]
            hs->left -= len;
 801437a:	6268      	str	r0, [r5, #36]	; 0x24
 801437c:	e6d8      	b.n	8014130 <http_send+0xe4>
 801437e:	bf00      	nop
 8014380:	0803ce54 	.word	0x0803ce54
 8014384:	0803cd3c 	.word	0x0803cd3c
 8014388:	08026bb8 	.word	0x08026bb8
 801438c:	0803cf34 	.word	0x0803cf34
 8014390:	00800013 	.word	0x00800013
          ssi->tag_index++;
 8014394:	3101      	adds	r1, #1
          ssi->parse_left--;
 8014396:	f8c4 e00c 	str.w	lr, [r4, #12]
          ssi->parsed++;
 801439a:	6020      	str	r0, [r4, #0]
          ssi->tag_index++;
 801439c:	b289      	uxth	r1, r1
 801439e:	8221      	strh	r1, [r4, #16]
          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 80143a0:	5c79      	ldrb	r1, [r7, r1]
 80143a2:	2900      	cmp	r1, #0
 80143a4:	f47f aec4 	bne.w	8014130 <http_send+0xe4>
  ssi = hs->ssi;
 80143a8:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 80143ac:	f1b8 0f00 	cmp.w	r8, #0
 80143b0:	f000 812e 	beq.w	8014610 <http_send+0x5c4>
  if (httpd_ssi_handler
 80143b4:	4b9a      	ldr	r3, [pc, #616]	; (8014620 <http_send+0x5d4>)
 80143b6:	f108 0116 	add.w	r1, r8, #22
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	9101      	str	r1, [sp, #4]
 80143be:	9302      	str	r3, [sp, #8]
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d070      	beq.n	80144a6 <http_send+0x45a>
      && httpd_tags && httpd_num_tags
 80143c4:	4b97      	ldr	r3, [pc, #604]	; (8014624 <http_send+0x5d8>)
 80143c6:	681b      	ldr	r3, [r3, #0]
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d06c      	beq.n	80144a6 <http_send+0x45a>
 80143cc:	4a96      	ldr	r2, [pc, #600]	; (8014628 <http_send+0x5dc>)
 80143ce:	6812      	ldr	r2, [r2, #0]
    for (tag = 0; tag < httpd_num_tags; tag++) {
 80143d0:	2a00      	cmp	r2, #0
 80143d2:	dd68      	ble.n	80144a6 <http_send+0x45a>
 80143d4:	2700      	movs	r7, #0
 80143d6:	3b04      	subs	r3, #4
 80143d8:	9505      	str	r5, [sp, #20]
 80143da:	463d      	mov	r5, r7
 80143dc:	4617      	mov	r7, r2
 80143de:	e9cd 4603 	strd	r4, r6, [sp, #12]
 80143e2:	461c      	mov	r4, r3
 80143e4:	460e      	mov	r6, r1
 80143e6:	e002      	b.n	80143ee <http_send+0x3a2>
 80143e8:	3501      	adds	r5, #1
 80143ea:	42af      	cmp	r7, r5
 80143ec:	d058      	beq.n	80144a0 <http_send+0x454>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 80143ee:	f854 1f04 	ldr.w	r1, [r4, #4]!
 80143f2:	4630      	mov	r0, r6
 80143f4:	f7eb ff24 	bl	8000240 <strcmp>
 80143f8:	2800      	cmp	r0, #0
 80143fa:	d1f5      	bne.n	80143e8 <http_send+0x39c>
 80143fc:	462f      	mov	r7, r5
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 80143fe:	22fe      	movs	r2, #254	; 0xfe
 8014400:	f108 011f 	add.w	r1, r8, #31
 8014404:	9b02      	ldr	r3, [sp, #8]
 8014406:	4638      	mov	r0, r7
 8014408:	9d05      	ldr	r5, [sp, #20]
 801440a:	e9dd 4603 	ldrd	r4, r6, [sp, #12]
 801440e:	4798      	blx	r3
 8014410:	f8a8 0012 	strh.w	r0, [r8, #18]
 8014414:	e082      	b.n	801451c <http_send+0x4d0>
      hs->file += len;
 8014416:	f8bd 101e 	ldrh.w	r1, [sp, #30]
      data_to_send = 1;
 801441a:	2701      	movs	r7, #1
      hs->left -= len;
 801441c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      hs->file += len;
 801441e:	69aa      	ldr	r2, [r5, #24]
      hs->left -= len;
 8014420:	1a5b      	subs	r3, r3, r1
      hs->file += len;
 8014422:	440a      	add	r2, r1
      hs->left -= len;
 8014424:	626b      	str	r3, [r5, #36]	; 0x24
    if (altcp_sndbuf(pcb) == 0) {
 8014426:	f8bb 3064 	ldrh.w	r3, [fp, #100]	; 0x64
      hs->file += len;
 801442a:	61aa      	str	r2, [r5, #24]
    if (altcp_sndbuf(pcb) == 0) {
 801442c:	2b00      	cmp	r3, #0
 801442e:	f47f ae38 	bne.w	80140a2 <http_send+0x56>
 8014432:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014434:	e665      	b.n	8014102 <http_send+0xb6>
              ssi->tag_index = 1;
 8014436:	2201      	movs	r2, #1
 8014438:	68e1      	ldr	r1, [r4, #12]
 801443a:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
 801443e:	8222      	strh	r2, [r4, #16]
 8014440:	1e4a      	subs	r2, r1, #1
 8014442:	9201      	str	r2, [sp, #4]
 8014444:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8014448:	e77f      	b.n	801434a <http_send+0x2fe>
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 801444a:	4b78      	ldr	r3, [pc, #480]	; (801462c <http_send+0x5e0>)
 801444c:	f240 523a 	movw	r2, #1338	; 0x53a
 8014450:	4977      	ldr	r1, [pc, #476]	; (8014630 <http_send+0x5e4>)
 8014452:	4878      	ldr	r0, [pc, #480]	; (8014634 <http_send+0x5e8>)
 8014454:	f00c fbb0 	bl	8020bb8 <iprintf>
 8014458:	7d23      	ldrb	r3, [r4, #20]
 801445a:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801445e:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
 8014462:	6820      	ldr	r0, [r4, #0]
 8014464:	6879      	ldr	r1, [r7, #4]
 8014466:	e747      	b.n	80142f8 <http_send+0x2ac>
 8014468:	465f      	mov	r7, fp
 801446a:	46cb      	mov	fp, r9
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 801446c:	6824      	ldr	r4, [r4, #0]
 801446e:	69a9      	ldr	r1, [r5, #24]
 8014470:	428c      	cmp	r4, r1
 8014472:	d9de      	bls.n	8014432 <http_send+0x3e6>
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8014474:	1a64      	subs	r4, r4, r1
 8014476:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801447a:	aa08      	add	r2, sp, #32
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 801447c:	4658      	mov	r0, fp
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 801447e:	429c      	cmp	r4, r3
 8014480:	bfa8      	it	ge
 8014482:	461c      	movge	r4, r3
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8014484:	2300      	movs	r3, #0
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8014486:	f822 4d02 	strh.w	r4, [r2, #-2]!
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 801448a:	f7ff fa8f 	bl	80139ac <http_write>
    if (err == ERR_OK) {
 801448e:	2800      	cmp	r0, #0
 8014490:	f43f ae2e 	beq.w	80140f0 <http_send+0xa4>
 8014494:	e7cd      	b.n	8014432 <http_send+0x3e6>
 8014496:	6863      	ldr	r3, [r4, #4]
 8014498:	69a9      	ldr	r1, [r5, #24]
 801449a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801449e:	e75c      	b.n	801435a <http_send+0x30e>
 80144a0:	e9dd 4603 	ldrd	r4, r6, [sp, #12]
 80144a4:	9d05      	ldr	r5, [sp, #20]
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 80144a6:	9801      	ldr	r0, [sp, #4]
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 80144a8:	f108 071f 	add.w	r7, r8, #31
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 80144ac:	f7eb fed2 	bl	8000254 <strlen>
 80144b0:	2809      	cmp	r0, #9
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 80144b2:	f8df c194 	ldr.w	ip, [pc, #404]	; 8014648 <http_send+0x5fc>
 80144b6:	bf28      	it	cs
 80144b8:	2009      	movcs	r0, #9
 80144ba:	9002      	str	r0, [sp, #8]
 80144bc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80144c0:	f8bc c000 	ldrh.w	ip, [ip]
 80144c4:	f8c8 001f 	str.w	r0, [r8, #31]
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 80144c8:	f108 0031 	add.w	r0, r8, #49	; 0x31
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 80144cc:	f8a8 c02f 	strh.w	ip, [r8, #47]	; 0x2f
 80144d0:	f8c8 1023 	str.w	r1, [r8, #35]	; 0x23
 80144d4:	f8c8 2027 	str.w	r2, [r8, #39]	; 0x27
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 80144d8:	9901      	ldr	r1, [sp, #4]
 80144da:	9a02      	ldr	r2, [sp, #8]
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 80144dc:	f8c8 302b 	str.w	r3, [r8, #43]	; 0x2b
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 80144e0:	f00b fbc5 	bl	801fc6e <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 80144e4:	9802      	ldr	r0, [sp, #8]
 80144e6:	4b54      	ldr	r3, [pc, #336]	; (8014638 <http_send+0x5ec>)
 80144e8:	f100 0131 	add.w	r1, r0, #49	; 0x31
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 80144ec:	eb08 0e00 	add.w	lr, r8, r0
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 80144f0:	f8b3 c004 	ldrh.w	ip, [r3, #4]
 80144f4:	eb08 0201 	add.w	r2, r8, r1
 80144f8:	6818      	ldr	r0, [r3, #0]
 80144fa:	799b      	ldrb	r3, [r3, #6]
 80144fc:	f848 0001 	str.w	r0, [r8, r1]
  len = strlen(ssi->tag_insert);
 8014500:	4638      	mov	r0, r7
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8014502:	f8a2 c004 	strh.w	ip, [r2, #4]
 8014506:	7193      	strb	r3, [r2, #6]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8014508:	f88e a038 	strb.w	sl, [lr, #56]	; 0x38
  len = strlen(ssi->tag_insert);
 801450c:	f7eb fea2 	bl	8000254 <strlen>
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8014510:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  len = strlen(ssi->tag_insert);
 8014514:	4607      	mov	r7, r0
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8014516:	d273      	bcs.n	8014600 <http_send+0x5b4>
  ssi->tag_insert_len = (u16_t)len;
 8014518:	f8a8 7012 	strh.w	r7, [r8, #18]
            if (ssi->tag_end > hs->file) {
 801451c:	69a9      	ldr	r1, [r5, #24]
            ssi->tag_state = TAG_SENDING;
 801451e:	2304      	movs	r3, #4
            ssi->tag_index = 0;
 8014520:	f8a4 a010 	strh.w	sl, [r4, #16]
            ssi->tag_state = TAG_SENDING;
 8014524:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
            ssi->parsed = ssi->tag_started;
 8014528:	e9d4 0200 	ldrd	r0, r2, [r4]
            if (ssi->tag_end > hs->file) {
 801452c:	4288      	cmp	r0, r1
            ssi->tag_end = ssi->parsed;
 801452e:	60a0      	str	r0, [r4, #8]
            ssi->parsed = ssi->tag_started;
 8014530:	6022      	str	r2, [r4, #0]
            if (ssi->tag_end > hs->file) {
 8014532:	d962      	bls.n	80145fa <http_send+0x5ae>
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8014534:	1a56      	subs	r6, r2, r1
 8014536:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801453a:	aa08      	add	r2, sp, #32
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 801453c:	4648      	mov	r0, r9
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 801453e:	429e      	cmp	r6, r3
 8014540:	bfa8      	it	ge
 8014542:	461e      	movge	r6, r3
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8014544:	2300      	movs	r3, #0
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8014546:	f822 6d02 	strh.w	r6, [r2, #-2]!
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 801454a:	f7ff fa2f 	bl	80139ac <http_write>
              if (err == ERR_OK) {
 801454e:	4606      	mov	r6, r0
 8014550:	2800      	cmp	r0, #0
 8014552:	f47f ae1d 	bne.w	8014190 <http_send+0x144>
                if (ssi->tag_started <= hs->file) {
 8014556:	6860      	ldr	r0, [r4, #4]
 8014558:	69ab      	ldr	r3, [r5, #24]
 801455a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801455e:	4298      	cmp	r0, r3
 8014560:	d805      	bhi.n	801456e <http_send+0x522>
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
 8014562:	68a1      	ldr	r1, [r4, #8]
 8014564:	1a09      	subs	r1, r1, r0
 8014566:	440a      	add	r2, r1
 8014568:	b292      	uxth	r2, r2
 801456a:	f8ad 201e 	strh.w	r2, [sp, #30]
                hs->left -= len;
 801456e:	6a69      	ldr	r1, [r5, #36]	; 0x24
                hs->file += len;
 8014570:	1898      	adds	r0, r3, r2
                data_to_send = 1;
 8014572:	f04f 0b01 	mov.w	fp, #1
 8014576:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
                hs->left -= len;
 801457a:	1a89      	subs	r1, r1, r2
                hs->file += len;
 801457c:	61a8      	str	r0, [r5, #24]
                hs->left -= len;
 801457e:	6269      	str	r1, [r5, #36]	; 0x24
 8014580:	e5d6      	b.n	8014130 <http_send+0xe4>
            ssi->tag_index++;
 8014582:	3701      	adds	r7, #1
 8014584:	8227      	strh	r7, [r4, #16]
 8014586:	e6d7      	b.n	8014338 <http_send+0x2ec>
            len = (ssi->tag_insert_len - ssi->tag_index);
 8014588:	1a5e      	subs	r6, r3, r1
 801458a:	aa08      	add	r2, sp, #32
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 801458c:	311f      	adds	r1, #31
 801458e:	2301      	movs	r3, #1
            len = (ssi->tag_insert_len - ssi->tag_index);
 8014590:	f822 6d02 	strh.w	r6, [r2, #-2]!
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 8014594:	4648      	mov	r0, r9
 8014596:	4421      	add	r1, r4
 8014598:	f7ff fa08 	bl	80139ac <http_write>
              ssi->tag_index += len;
 801459c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
            if (err == ERR_OK) {
 80145a0:	4606      	mov	r6, r0
 80145a2:	2800      	cmp	r0, #0
 80145a4:	f47f adf6 	bne.w	8014194 <http_send+0x148>
              ssi->tag_index += len;
 80145a8:	8a21      	ldrh	r1, [r4, #16]
              data_to_send = 1;
 80145aa:	f04f 0b01 	mov.w	fp, #1
 80145ae:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
              ssi->tag_index += len;
 80145b2:	4411      	add	r1, r2
 80145b4:	8221      	strh	r1, [r4, #16]
 80145b6:	e5bb      	b.n	8014130 <http_send+0xe4>
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 80145b8:	4b1c      	ldr	r3, [pc, #112]	; (801462c <http_send+0x5e0>)
 80145ba:	f240 52ac 	movw	r2, #1452	; 0x5ac
 80145be:	491f      	ldr	r1, [pc, #124]	; (801463c <http_send+0x5f0>)
 80145c0:	481c      	ldr	r0, [pc, #112]	; (8014634 <http_send+0x5e8>)
 80145c2:	f00c faf9 	bl	8020bb8 <iprintf>
 80145c6:	6863      	ldr	r3, [r4, #4]
 80145c8:	69a9      	ldr	r1, [r5, #24]
 80145ca:	e5cd      	b.n	8014168 <http_send+0x11c>
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 80145cc:	2b04      	cmp	r3, #4
 80145ce:	465f      	mov	r7, fp
 80145d0:	46cb      	mov	fp, r9
 80145d2:	f43f af2e 	beq.w	8014432 <http_send+0x3e6>
 80145d6:	e749      	b.n	801446c <http_send+0x420>
 80145d8:	465f      	mov	r7, fp
 80145da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80145dc:	46cb      	mov	fp, r9
 80145de:	e590      	b.n	8014102 <http_send+0xb6>
  u8_t data_to_send = 0;
 80145e0:	4627      	mov	r7, r4
 80145e2:	e726      	b.n	8014432 <http_send+0x3e6>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 80145e4:	2300      	movs	r3, #0
            ssi->tag_state = TAG_LEADIN;
 80145e6:	2001      	movs	r0, #1
            ssi->tag_type = tag_type;
 80145e8:	7523      	strb	r3, [r4, #20]
            ssi->tag_started = ssi->parsed;
 80145ea:	6061      	str	r1, [r4, #4]
 80145ec:	4603      	mov	r3, r0
            ssi->tag_state = TAG_LEADIN;
 80145ee:	f884 011e 	strb.w	r0, [r4, #286]	; 0x11e
            ssi->tag_index = 1;
 80145f2:	8220      	strh	r0, [r4, #16]
 80145f4:	e622      	b.n	801423c <http_send+0x1f0>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 80145f6:	2301      	movs	r3, #1
 80145f8:	e7f5      	b.n	80145e6 <http_send+0x59a>
 80145fa:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80145fe:	e59d      	b.n	801413c <http_send+0xf0>
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8014600:	4b0a      	ldr	r3, [pc, #40]	; (801462c <http_send+0x5e0>)
 8014602:	f240 323f 	movw	r2, #831	; 0x33f
 8014606:	490e      	ldr	r1, [pc, #56]	; (8014640 <http_send+0x5f4>)
 8014608:	480a      	ldr	r0, [pc, #40]	; (8014634 <http_send+0x5e8>)
 801460a:	f00c fad5 	bl	8020bb8 <iprintf>
 801460e:	e783      	b.n	8014518 <http_send+0x4cc>
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8014610:	4b06      	ldr	r3, [pc, #24]	; (801462c <http_send+0x5e0>)
 8014612:	f240 3206 	movw	r2, #774	; 0x306
 8014616:	490b      	ldr	r1, [pc, #44]	; (8014644 <http_send+0x5f8>)
 8014618:	4806      	ldr	r0, [pc, #24]	; (8014634 <http_send+0x5e8>)
 801461a:	f00c facd 	bl	8020bb8 <iprintf>
 801461e:	e6c9      	b.n	80143b4 <http_send+0x368>
 8014620:	20029e40 	.word	0x20029e40
 8014624:	20029e44 	.word	0x20029e44
 8014628:	20029a3c 	.word	0x20029a3c
 801462c:	0803cd3c 	.word	0x0803cd3c
 8014630:	0803ce8c 	.word	0x0803ce8c
 8014634:	08026bb8 	.word	0x08026bb8
 8014638:	0803cec4 	.word	0x0803cec4
 801463c:	0803cedc 	.word	0x0803cedc
 8014640:	0803cecc 	.word	0x0803cecc
 8014644:	0803cea4 	.word	0x0803cea4
 8014648:	0803ceb0 	.word	0x0803ceb0

0801464c <http_sent>:
  if (hs == NULL) {
 801464c:	b150      	cbz	r0, 8014664 <http_sent+0x18>
  hs->retries = 0;
 801464e:	2200      	movs	r2, #0
{
 8014650:	b508      	push	{r3, lr}
 8014652:	4603      	mov	r3, r0
 8014654:	4608      	mov	r0, r1
  hs->retries = 0;
 8014656:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  http_send(pcb, hs);
 801465a:	4619      	mov	r1, r3
 801465c:	f7ff fcf6 	bl	801404c <http_send>
}
 8014660:	2000      	movs	r0, #0
 8014662:	bd08      	pop	{r3, pc}
 8014664:	2000      	movs	r0, #0
 8014666:	4770      	bx	lr

08014668 <http_poll>:
{
 8014668:	b510      	push	{r4, lr}
 801466a:	460c      	mov	r4, r1
  if (hs == NULL) {
 801466c:	b1a8      	cbz	r0, 801469a <http_poll+0x32>
    hs->retries++;
 801466e:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8014672:	3301      	adds	r3, #1
 8014674:	b2db      	uxtb	r3, r3
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8014676:	2b04      	cmp	r3, #4
    hs->retries++;
 8014678:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 801467c:	d019      	beq.n	80146b2 <http_poll+0x4a>
    if (hs->handle) {
 801467e:	6943      	ldr	r3, [r0, #20]
 8014680:	b123      	cbz	r3, 801468c <http_poll+0x24>
      if (http_send(pcb, hs)) {
 8014682:	4601      	mov	r1, r0
 8014684:	4620      	mov	r0, r4
 8014686:	f7ff fce1 	bl	801404c <http_send>
 801468a:	b908      	cbnz	r0, 8014690 <http_poll+0x28>
  return ERR_OK;
 801468c:	2000      	movs	r0, #0
}
 801468e:	bd10      	pop	{r4, pc}
        altcp_output(pcb);
 8014690:	4620      	mov	r0, r4
 8014692:	f006 fd0f 	bl	801b0b4 <tcp_output>
  return ERR_OK;
 8014696:	2000      	movs	r0, #0
 8014698:	e7f9      	b.n	801468e <http_poll+0x26>
  return http_close_or_abort_conn(pcb, hs, 0);
 801469a:	4601      	mov	r1, r0
 801469c:	4620      	mov	r0, r4
 801469e:	f7ff fc6d 	bl	8013f7c <http_close_or_abort_conn.constprop.9>
    if (closed == ERR_MEM) {
 80146a2:	3001      	adds	r0, #1
 80146a4:	d1f2      	bne.n	801468c <http_poll+0x24>
      altcp_abort(pcb);
 80146a6:	4620      	mov	r0, r4
 80146a8:	f003 fbfe 	bl	8017ea8 <tcp_abort>
      return ERR_ABRT;
 80146ac:	f06f 000c 	mvn.w	r0, #12
}
 80146b0:	bd10      	pop	{r4, pc}
  return http_close_or_abort_conn(pcb, hs, 0);
 80146b2:	4601      	mov	r1, r0
 80146b4:	4620      	mov	r0, r4
 80146b6:	f7ff fc61 	bl	8013f7c <http_close_or_abort_conn.constprop.9>
      return ERR_OK;
 80146ba:	2000      	movs	r0, #0
}
 80146bc:	bd10      	pop	{r4, pc}
 80146be:	bf00      	nop

080146c0 <http_recv>:
{
 80146c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146c4:	4605      	mov	r5, r0
 80146c6:	b08d      	sub	sp, #52	; 0x34
 80146c8:	460e      	mov	r6, r1
 80146ca:	4614      	mov	r4, r2
  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 80146cc:	b99b      	cbnz	r3, 80146f6 <http_recv+0x36>
 80146ce:	fab2 f782 	clz	r7, r2
 80146d2:	097f      	lsrs	r7, r7, #5
 80146d4:	b97f      	cbnz	r7, 80146f6 <http_recv+0x36>
 80146d6:	8911      	ldrh	r1, [r2, #8]
 80146d8:	b1b8      	cbz	r0, 801470a <http_recv+0x4a>
    altcp_recved(pcb, p->tot_len);
 80146da:	4630      	mov	r0, r6
 80146dc:	f002 ff08 	bl	80174f0 <tcp_recved>
  if (hs->post_content_len_left > 0) {
 80146e0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80146e2:	b9cb      	cbnz	r3, 8014718 <http_recv+0x58>
    if (hs->handle == NULL) {
 80146e4:	696f      	ldr	r7, [r5, #20]
 80146e6:	b32f      	cbz	r7, 8014734 <http_recv+0x74>
      pbuf_free(p);
 80146e8:	4620      	mov	r0, r4
 80146ea:	f002 f90d 	bl	8016908 <pbuf_free>
}
 80146ee:	2000      	movs	r0, #0
 80146f0:	b00d      	add	sp, #52	; 0x34
 80146f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (p != NULL) {
 80146f6:	b93c      	cbnz	r4, 8014708 <http_recv+0x48>
  return http_close_or_abort_conn(pcb, hs, 0);
 80146f8:	4629      	mov	r1, r5
 80146fa:	4630      	mov	r0, r6
 80146fc:	f7ff fc3e 	bl	8013f7c <http_close_or_abort_conn.constprop.9>
}
 8014700:	2000      	movs	r0, #0
 8014702:	b00d      	add	sp, #52	; 0x34
 8014704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014708:	8921      	ldrh	r1, [r4, #8]
      altcp_recved(pcb, p->tot_len);
 801470a:	4630      	mov	r0, r6
 801470c:	f002 fef0 	bl	80174f0 <tcp_recved>
      pbuf_free(p);
 8014710:	4620      	mov	r0, r4
 8014712:	f002 f8f9 	bl	8016908 <pbuf_free>
 8014716:	e7ef      	b.n	80146f8 <http_recv+0x38>
    hs->retries = 0;
 8014718:	f885 7028 	strb.w	r7, [r5, #40]	; 0x28
    http_post_rxpbuf(hs, p);
 801471c:	4621      	mov	r1, r4
 801471e:	4628      	mov	r0, r5
 8014720:	f7ff fbca 	bl	8013eb8 <http_post_rxpbuf>
    if (hs->post_content_len_left == 0) {
 8014724:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8014726:	2b00      	cmp	r3, #0
 8014728:	d1ea      	bne.n	8014700 <http_recv+0x40>
      http_send(pcb, hs);
 801472a:	4629      	mov	r1, r5
 801472c:	4630      	mov	r0, r6
 801472e:	f7ff fc8d 	bl	801404c <http_send>
 8014732:	e7e5      	b.n	8014700 <http_recv+0x40>
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8014734:	69ab      	ldr	r3, [r5, #24]
 8014736:	6a28      	ldr	r0, [r5, #32]
 8014738:	2b00      	cmp	r3, #0
 801473a:	f040 814b 	bne.w	80149d4 <http_recv+0x314>
  if (hs->req == NULL) {
 801473e:	2800      	cmp	r0, #0
 8014740:	f000 80e9 	beq.w	8014916 <http_recv+0x256>
    pbuf_cat(hs->req, p);
 8014744:	4621      	mov	r1, r4
 8014746:	f002 fa67 	bl	8016c18 <pbuf_cat>
  pbuf_ref(p);
 801474a:	4620      	mov	r0, r4
 801474c:	f002 fa50 	bl	8016bf0 <pbuf_ref>
  if (hs->req->next != NULL) {
 8014750:	6a28      	ldr	r0, [r5, #32]
 8014752:	6803      	ldr	r3, [r0, #0]
 8014754:	2b00      	cmp	r3, #0
 8014756:	f000 8110 	beq.w	801497a <http_recv+0x2ba>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 801475a:	8907      	ldrh	r7, [r0, #8]
 801475c:	f240 32ff 	movw	r2, #1023	; 0x3ff
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8014760:	49bb      	ldr	r1, [pc, #748]	; (8014a50 <http_recv+0x390>)
 8014762:	2300      	movs	r3, #0
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8014764:	4297      	cmp	r7, r2
    data = httpd_req_buf;
 8014766:	4688      	mov	r8, r1
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8014768:	bf28      	it	cs
 801476a:	4617      	movcs	r7, r2
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 801476c:	463a      	mov	r2, r7
 801476e:	f002 fb5b 	bl	8016e28 <pbuf_copy_partial>
  if (data_len >= MIN_REQ_LEN) {
 8014772:	2f06      	cmp	r7, #6
 8014774:	f240 80d1 	bls.w	801491a <http_recv+0x25a>
    crlf = lwip_strnstr(data, CRLF, data_len);
 8014778:	463a      	mov	r2, r7
 801477a:	49b6      	ldr	r1, [pc, #728]	; (8014a54 <http_recv+0x394>)
 801477c:	4640      	mov	r0, r8
 801477e:	f000 fa5b 	bl	8014c38 <lwip_strnstr>
    if (crlf != NULL) {
 8014782:	2800      	cmp	r0, #0
 8014784:	f000 80c9 	beq.w	801491a <http_recv+0x25a>
      if (!strncmp(data, "GET ", 4)) {
 8014788:	2204      	movs	r2, #4
 801478a:	49b3      	ldr	r1, [pc, #716]	; (8014a58 <http_recv+0x398>)
 801478c:	4640      	mov	r0, r8
 801478e:	f00d f98f 	bl	8021ab0 <strncmp>
 8014792:	9005      	str	r0, [sp, #20]
 8014794:	2800      	cmp	r0, #0
 8014796:	f040 80fa 	bne.w	801498e <http_recv+0x2ce>
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 801479a:	f1a7 0a04 	sub.w	sl, r7, #4
 801479e:	f108 0b04 	add.w	fp, r8, #4
        sp1 = data + 3;
 80147a2:	f108 0303 	add.w	r3, r8, #3
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 80147a6:	49ad      	ldr	r1, [pc, #692]	; (8014a5c <http_recv+0x39c>)
 80147a8:	fa1f fa8a 	uxth.w	sl, sl
 80147ac:	4658      	mov	r0, fp
        sp1 = data + 3;
 80147ae:	9304      	str	r3, [sp, #16]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 80147b0:	4652      	mov	r2, sl
 80147b2:	f000 fa41 	bl	8014c38 <lwip_strnstr>
      if (sp2 == NULL) {
 80147b6:	9b05      	ldr	r3, [sp, #20]
 80147b8:	4681      	mov	r9, r0
 80147ba:	2800      	cmp	r0, #0
 80147bc:	f000 811b 	beq.w	80149f6 <http_recv+0x336>
      int is_09 = 0;
 80147c0:	469a      	mov	sl, r3
 80147c2:	9305      	str	r3, [sp, #20]
      if ((sp2 != 0) && (sp2 > sp1)) {
 80147c4:	f1b9 0f00 	cmp.w	r9, #0
 80147c8:	f000 80a7 	beq.w	801491a <http_recv+0x25a>
 80147cc:	9b04      	ldr	r3, [sp, #16]
 80147ce:	4599      	cmp	r9, r3
 80147d0:	f240 80a3 	bls.w	801491a <http_recv+0x25a>
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 80147d4:	463a      	mov	r2, r7
 80147d6:	49a2      	ldr	r1, [pc, #648]	; (8014a60 <http_recv+0x3a0>)
 80147d8:	4640      	mov	r0, r8
 80147da:	f000 fa2d 	bl	8014c38 <lwip_strnstr>
 80147de:	2800      	cmp	r0, #0
 80147e0:	f000 809b 	beq.w	801491a <http_recv+0x25a>
          if (!is_09 && (lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE, data_len) ||
 80147e4:	9b05      	ldr	r3, [sp, #20]
 80147e6:	f1ba 0f00 	cmp.w	sl, #0
 80147ea:	f000 8115 	beq.w	8014a18 <http_recv+0x358>
            hs->keepalive = 0;
 80147ee:	2200      	movs	r2, #0
 80147f0:	f885 2029 	strb.w	r2, [r5, #41]	; 0x29
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 80147f4:	eba9 020b 	sub.w	r2, r9, fp
          *sp1 = 0;
 80147f8:	2100      	movs	r1, #0
 80147fa:	9804      	ldr	r0, [sp, #16]
          uri[uri_len] = 0;
 80147fc:	b292      	uxth	r2, r2
          *sp1 = 0;
 80147fe:	7001      	strb	r1, [r0, #0]
          uri[uri_len] = 0;
 8014800:	eb0b 0002 	add.w	r0, fp, r2
 8014804:	f80b 1002 	strb.w	r1, [fp, r2]
 8014808:	9005      	str	r0, [sp, #20]
          if (is_post) {
 801480a:	2b00      	cmp	r3, #0
 801480c:	f000 80ec 	beq.w	80149e8 <http_recv+0x328>
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 8014810:	f109 0301 	add.w	r3, r9, #1
 8014814:	4992      	ldr	r1, [pc, #584]	; (8014a60 <http_recv+0x3a0>)
            struct pbuf *q = hs->req;
 8014816:	f8d5 a020 	ldr.w	sl, [r5, #32]
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 801481a:	eba3 0208 	sub.w	r2, r3, r8
 801481e:	4618      	mov	r0, r3
 8014820:	9306      	str	r3, [sp, #24]
 8014822:	1aba      	subs	r2, r7, r2
 8014824:	f000 fa08 	bl	8014c38 <lwip_strnstr>
  if (crlfcrlf != NULL) {
 8014828:	9008      	str	r0, [sp, #32]
 801482a:	2800      	cmp	r0, #0
 801482c:	f000 8166 	beq.w	8014afc <http_recv+0x43c>
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 8014830:	9b06      	ldr	r3, [sp, #24]
 8014832:	498c      	ldr	r1, [pc, #560]	; (8014a64 <http_recv+0x3a4>)
 8014834:	1ac2      	subs	r2, r0, r3
 8014836:	4618      	mov	r0, r3
 8014838:	f000 f9fe 	bl	8014c38 <lwip_strnstr>
    if (scontent_len != NULL) {
 801483c:	2800      	cmp	r0, #0
 801483e:	f000 80ff 	beq.w	8014a40 <http_recv+0x380>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 8014842:	f100 0310 	add.w	r3, r0, #16
 8014846:	9009      	str	r0, [sp, #36]	; 0x24
 8014848:	220a      	movs	r2, #10
 801484a:	4982      	ldr	r1, [pc, #520]	; (8014a54 <http_recv+0x394>)
 801484c:	4618      	mov	r0, r3
 801484e:	9307      	str	r3, [sp, #28]
 8014850:	f000 f9f2 	bl	8014c38 <lwip_strnstr>
      if (scontent_len_end != NULL) {
 8014854:	2800      	cmp	r0, #0
 8014856:	f000 80f3 	beq.w	8014a40 <http_recv+0x380>
        content_len = atoi(content_len_num);
 801485a:	9b07      	ldr	r3, [sp, #28]
 801485c:	4618      	mov	r0, r3
 801485e:	f00b f895 	bl	801f98c <atoi>
        if (content_len == 0) {
 8014862:	1e01      	subs	r1, r0, #0
 8014864:	9107      	str	r1, [sp, #28]
 8014866:	f000 80e3 	beq.w	8014a30 <http_recv+0x370>
        if (content_len >= 0) {
 801486a:	f2c0 80e9 	blt.w	8014a40 <http_recv+0x380>
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 801486e:	9b08      	ldr	r3, [sp, #32]
          u8_t post_auto_wnd = 1;
 8014870:	2001      	movs	r0, #1
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8014872:	9a06      	ldr	r2, [sp, #24]
          u8_t post_auto_wnd = 1;
 8014874:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8014878:	3304      	adds	r3, #4
          http_uri_buf[0] = 0;
 801487a:	f04f 0e00 	mov.w	lr, #0
          u8_t post_auto_wnd = 1;
 801487e:	f80c 0d01 	strb.w	r0, [ip, #-1]!
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8014882:	4659      	mov	r1, fp
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8014884:	eba3 0808 	sub.w	r8, r3, r8
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8014888:	1a9b      	subs	r3, r3, r2
          http_uri_buf[0] = 0;
 801488a:	4877      	ldr	r0, [pc, #476]	; (8014a68 <http_recv+0x3a8>)
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 801488c:	f04f 0b3f 	mov.w	fp, #63	; 0x3f
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8014890:	4547      	cmp	r7, r8
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8014892:	9a06      	ldr	r2, [sp, #24]
          http_uri_buf[0] = 0;
 8014894:	f880 e000 	strb.w	lr, [r0]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8014898:	bfb4      	ite	lt
 801489a:	46b8      	movlt	r8, r7
 801489c:	fa1f f888 	uxthge.w	r8, r8
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 80148a0:	429f      	cmp	r7, r3
 80148a2:	bfa8      	it	ge
 80148a4:	b29f      	uxthge	r7, r3
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 80148a6:	463b      	mov	r3, r7
          http_uri_buf[0] = 0;
 80148a8:	4607      	mov	r7, r0
          *crlfcrlf = 0;
 80148aa:	9808      	ldr	r0, [sp, #32]
 80148ac:	f880 e000 	strb.w	lr, [r0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 80148b0:	4628      	mov	r0, r5
 80148b2:	9701      	str	r7, [sp, #4]
 80148b4:	9f07      	ldr	r7, [sp, #28]
 80148b6:	f8cd c00c 	str.w	ip, [sp, #12]
 80148ba:	9700      	str	r7, [sp, #0]
 80148bc:	f8cd b008 	str.w	fp, [sp, #8]
 80148c0:	f7f0 fe64 	bl	800558c <httpd_post_begin>
          if (err == ERR_OK) {
 80148c4:	2800      	cmp	r0, #0
 80148c6:	f040 80f9 	bne.w	8014abc <http_recv+0x3fc>
            hs->post_content_len_left = (u32_t)content_len;
 80148ca:	632f      	str	r7, [r5, #48]	; 0x30
            while ((q != NULL) && (q->len <= start_offset)) {
 80148cc:	f1ba 0f00 	cmp.w	sl, #0
 80148d0:	d011      	beq.n	80148f6 <http_recv+0x236>
 80148d2:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 80148d6:	4598      	cmp	r8, r3
 80148d8:	f0c0 80d5 	bcc.w	8014a86 <http_recv+0x3c6>
 80148dc:	4652      	mov	r2, sl
 80148de:	e003      	b.n	80148e8 <http_recv+0x228>
 80148e0:	8953      	ldrh	r3, [r2, #10]
 80148e2:	4543      	cmp	r3, r8
 80148e4:	f200 80ce 	bhi.w	8014a84 <http_recv+0x3c4>
              start_offset -= q->len;
 80148e8:	eba8 0803 	sub.w	r8, r8, r3
              q = q->next;
 80148ec:	6812      	ldr	r2, [r2, #0]
              start_offset -= q->len;
 80148ee:	fa1f f888 	uxth.w	r8, r8
            while ((q != NULL) && (q->len <= start_offset)) {
 80148f2:	2a00      	cmp	r2, #0
 80148f4:	d1f4      	bne.n	80148e0 <http_recv+0x220>
            } else if (hs->post_content_len_left == 0) {
 80148f6:	9b07      	ldr	r3, [sp, #28]
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	f000 80f4 	beq.w	8014ae6 <http_recv+0x426>
        if (hs->req != NULL) {
 80148fe:	6a28      	ldr	r0, [r5, #32]
 8014900:	2800      	cmp	r0, #0
 8014902:	f000 80ec 	beq.w	8014ade <http_recv+0x41e>
          pbuf_free(hs->req);
 8014906:	f001 ffff 	bl	8016908 <pbuf_free>
          hs->req = NULL;
 801490a:	2300      	movs	r3, #0
      pbuf_free(p);
 801490c:	4620      	mov	r0, r4
          hs->req = NULL;
 801490e:	622b      	str	r3, [r5, #32]
      pbuf_free(p);
 8014910:	f001 fffa 	bl	8016908 <pbuf_free>
 8014914:	e706      	b.n	8014724 <http_recv+0x64>
    hs->req = p;
 8014916:	622c      	str	r4, [r5, #32]
 8014918:	e717      	b.n	801474a <http_recv+0x8a>
  clen = pbuf_clen(hs->req);
 801491a:	6a28      	ldr	r0, [r5, #32]
 801491c:	f002 f95c 	bl	8016bd8 <pbuf_clen>
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8014920:	6a2b      	ldr	r3, [r5, #32]
 8014922:	891b      	ldrh	r3, [r3, #8]
 8014924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014928:	d202      	bcs.n	8014930 <http_recv+0x270>
 801492a:	2805      	cmp	r0, #5
 801492c:	f67f aedc 	bls.w	80146e8 <http_recv+0x28>
    return http_find_error_file(hs, 400);
 8014930:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8014934:	4628      	mov	r0, r5
 8014936:	f7ff fae5 	bl	8013f04 <http_find_error_file>
 801493a:	4607      	mov	r7, r0
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 801493c:	f107 0310 	add.w	r3, r7, #16
 8014940:	b2db      	uxtb	r3, r3
 8014942:	2b10      	cmp	r3, #16
 8014944:	d91d      	bls.n	8014982 <http_recv+0x2c2>
 8014946:	4b49      	ldr	r3, [pc, #292]	; (8014a6c <http_recv+0x3ac>)
 8014948:	f640 2205 	movw	r2, #2565	; 0xa05
 801494c:	4948      	ldr	r1, [pc, #288]	; (8014a70 <http_recv+0x3b0>)
 801494e:	4849      	ldr	r0, [pc, #292]	; (8014a74 <http_recv+0x3b4>)
 8014950:	f00c f932 	bl	8020bb8 <iprintf>
      if (parsed != ERR_INPROGRESS) {
 8014954:	1d7b      	adds	r3, r7, #5
 8014956:	f43f aec7 	beq.w	80146e8 <http_recv+0x28>
        if (hs->req != NULL) {
 801495a:	6a28      	ldr	r0, [r5, #32]
 801495c:	b118      	cbz	r0, 8014966 <http_recv+0x2a6>
          pbuf_free(hs->req);
 801495e:	f001 ffd3 	bl	8016908 <pbuf_free>
          hs->req = NULL;
 8014962:	2300      	movs	r3, #0
 8014964:	622b      	str	r3, [r5, #32]
      pbuf_free(p);
 8014966:	4620      	mov	r0, r4
 8014968:	f001 ffce 	bl	8016908 <pbuf_free>
      if (parsed == ERR_OK) {
 801496c:	2f00      	cmp	r7, #0
 801496e:	f43f aed9 	beq.w	8014724 <http_recv+0x64>
      } else if (parsed == ERR_ARG) {
 8014972:	3710      	adds	r7, #16
 8014974:	f43f aec0 	beq.w	80146f8 <http_recv+0x38>
 8014978:	e6c2      	b.n	8014700 <http_recv+0x40>
    data = (char *)p->payload;
 801497a:	f8d4 8004 	ldr.w	r8, [r4, #4]
    data_len = p->len;
 801497e:	8967      	ldrh	r7, [r4, #10]
 8014980:	e6f7      	b.n	8014772 <http_recv+0xb2>
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8014982:	4a3d      	ldr	r2, [pc, #244]	; (8014a78 <http_recv+0x3b8>)
 8014984:	fa22 f303 	lsr.w	r3, r2, r3
 8014988:	07da      	lsls	r2, r3, #31
 801498a:	d4e3      	bmi.n	8014954 <http_recv+0x294>
 801498c:	e7db      	b.n	8014946 <http_recv+0x286>
      } else if (!strncmp(data, "POST ", 5)) {
 801498e:	2205      	movs	r2, #5
 8014990:	493a      	ldr	r1, [pc, #232]	; (8014a7c <http_recv+0x3bc>)
 8014992:	4640      	mov	r0, r8
 8014994:	f00d f88c 	bl	8021ab0 <strncmp>
 8014998:	4682      	mov	sl, r0
 801499a:	b988      	cbnz	r0, 80149c0 <http_recv+0x300>
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 801499c:	1f7b      	subs	r3, r7, #5
        sp1 = data + 4;
 801499e:	f108 0204 	add.w	r2, r8, #4
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 80149a2:	f108 0b05 	add.w	fp, r8, #5
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 80149a6:	492d      	ldr	r1, [pc, #180]	; (8014a5c <http_recv+0x39c>)
 80149a8:	b29b      	uxth	r3, r3
        sp1 = data + 4;
 80149aa:	9204      	str	r2, [sp, #16]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 80149ac:	4658      	mov	r0, fp
 80149ae:	461a      	mov	r2, r3
 80149b0:	9305      	str	r3, [sp, #20]
 80149b2:	f000 f941 	bl	8014c38 <lwip_strnstr>
      if (sp2 == NULL) {
 80149b6:	9b05      	ldr	r3, [sp, #20]
 80149b8:	4681      	mov	r9, r0
 80149ba:	b338      	cbz	r0, 8014a0c <http_recv+0x34c>
        is_post = 1;
 80149bc:	2301      	movs	r3, #1
 80149be:	e700      	b.n	80147c2 <http_recv+0x102>
        data[4] = 0;
 80149c0:	2300      	movs	r3, #0
        return http_find_error_file(hs, 501);
 80149c2:	f240 11f5 	movw	r1, #501	; 0x1f5
 80149c6:	4628      	mov	r0, r5
        data[4] = 0;
 80149c8:	f888 3004 	strb.w	r3, [r8, #4]
        return http_find_error_file(hs, 501);
 80149cc:	f7ff fa9a 	bl	8013f04 <http_find_error_file>
 80149d0:	4607      	mov	r7, r0
 80149d2:	e7b3      	b.n	801493c <http_recv+0x27c>
        if (hs->req != NULL) {
 80149d4:	2800      	cmp	r0, #0
 80149d6:	f43f ae87 	beq.w	80146e8 <http_recv+0x28>
          pbuf_free(hs->req);
 80149da:	f001 ff95 	bl	8016908 <pbuf_free>
          hs->req = NULL;
 80149de:	622f      	str	r7, [r5, #32]
      pbuf_free(p);
 80149e0:	4620      	mov	r0, r4
 80149e2:	f001 ff91 	bl	8016908 <pbuf_free>
 80149e6:	e68b      	b.n	8014700 <http_recv+0x40>
            return http_find_file(hs, uri, is_09);
 80149e8:	4652      	mov	r2, sl
 80149ea:	4659      	mov	r1, fp
 80149ec:	4628      	mov	r0, r5
 80149ee:	f7ff f979 	bl	8013ce4 <http_find_file>
 80149f2:	4607      	mov	r7, r0
 80149f4:	e7a2      	b.n	801493c <http_recv+0x27c>
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 80149f6:	4652      	mov	r2, sl
 80149f8:	4916      	ldr	r1, [pc, #88]	; (8014a54 <http_recv+0x394>)
 80149fa:	4658      	mov	r0, fp
 80149fc:	9305      	str	r3, [sp, #20]
        is_09 = 1;
 80149fe:	f04f 0a01 	mov.w	sl, #1
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8014a02:	f000 f919 	bl	8014c38 <lwip_strnstr>
 8014a06:	9b05      	ldr	r3, [sp, #20]
 8014a08:	4681      	mov	r9, r0
 8014a0a:	e6da      	b.n	80147c2 <http_recv+0x102>
 8014a0c:	461a      	mov	r2, r3
 8014a0e:	4658      	mov	r0, fp
 8014a10:	4910      	ldr	r1, [pc, #64]	; (8014a54 <http_recv+0x394>)
 8014a12:	f000 f911 	bl	8014c38 <lwip_strnstr>
 8014a16:	e78b      	b.n	8014930 <http_recv+0x270>
          if (!is_09 && (lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE, data_len) ||
 8014a18:	463a      	mov	r2, r7
 8014a1a:	4919      	ldr	r1, [pc, #100]	; (8014a80 <http_recv+0x3c0>)
 8014a1c:	4640      	mov	r0, r8
 8014a1e:	f000 f90b 	bl	8014c38 <lwip_strnstr>
 8014a22:	9b05      	ldr	r3, [sp, #20]
 8014a24:	2800      	cmp	r0, #0
 8014a26:	d050      	beq.n	8014aca <http_recv+0x40a>
            hs->keepalive = 1;
 8014a28:	2201      	movs	r2, #1
 8014a2a:	f885 2029 	strb.w	r2, [r5, #41]	; 0x29
 8014a2e:	e6e1      	b.n	80147f4 <http_recv+0x134>
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 8014a30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014a32:	7c13      	ldrb	r3, [r2, #16]
 8014a34:	2b30      	cmp	r3, #48	; 0x30
 8014a36:	d103      	bne.n	8014a40 <http_recv+0x380>
 8014a38:	7c53      	ldrb	r3, [r2, #17]
 8014a3a:	2b0d      	cmp	r3, #13
 8014a3c:	f43f af17 	beq.w	801486e <http_recv+0x1ae>
              *sp1 = ' ';
 8014a40:	2320      	movs	r3, #32
 8014a42:	9a04      	ldr	r2, [sp, #16]
 8014a44:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 8014a46:	9a05      	ldr	r2, [sp, #20]
              *sp2 = ' ';
 8014a48:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 8014a4c:	7013      	strb	r3, [r2, #0]
 8014a4e:	e76f      	b.n	8014930 <http_recv+0x270>
 8014a50:	20029a40 	.word	0x20029a40
 8014a54:	08025d14 	.word	0x08025d14
 8014a58:	0803cdd4 	.word	0x0803cdd4
 8014a5c:	080263dc 	.word	0x080263dc
 8014a60:	08024bec 	.word	0x08024bec
 8014a64:	0803ce14 	.word	0x0803ce14
 8014a68:	200299fc 	.word	0x200299fc
 8014a6c:	0803cd3c 	.word	0x0803cd3c
 8014a70:	0803ce28 	.word	0x0803ce28
 8014a74:	08026bb8 	.word	0x08026bb8
 8014a78:	00010901 	.word	0x00010901
 8014a7c:	0803cddc 	.word	0x0803cddc
 8014a80:	0803cde4 	.word	0x0803cde4
 8014a84:	4692      	mov	sl, r2
              pbuf_remove_header(q, start_offset);
 8014a86:	4641      	mov	r1, r8
 8014a88:	4650      	mov	r0, sl
 8014a8a:	f001 ff01 	bl	8016890 <pbuf_remove_header>
              pbuf_ref(q);
 8014a8e:	4650      	mov	r0, sl
 8014a90:	f002 f8ae 	bl	8016bf0 <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 8014a94:	4651      	mov	r1, sl
 8014a96:	4628      	mov	r0, r5
 8014a98:	f7ff fa0e 	bl	8013eb8 <http_post_rxpbuf>
 8014a9c:	4607      	mov	r7, r0
            if (err != ERR_OK) {
 8014a9e:	2f00      	cmp	r7, #0
 8014aa0:	f43f af2d 	beq.w	80148fe <http_recv+0x23e>
              *sp1 = ' ';
 8014aa4:	2320      	movs	r3, #32
 8014aa6:	9a04      	ldr	r2, [sp, #16]
            if (err == ERR_ARG) {
 8014aa8:	f117 0f10 	cmn.w	r7, #16
              *sp1 = ' ';
 8014aac:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 8014aae:	9a05      	ldr	r2, [sp, #20]
              *sp2 = ' ';
 8014ab0:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 8014ab4:	7013      	strb	r3, [r2, #0]
            if (err == ERR_ARG) {
 8014ab6:	f43f af3b 	beq.w	8014930 <http_recv+0x270>
 8014aba:	e73f      	b.n	801493c <http_recv+0x27c>
            return http_find_file(hs, http_uri_buf, 0);
 8014abc:	2200      	movs	r2, #0
 8014abe:	4913      	ldr	r1, [pc, #76]	; (8014b0c <http_recv+0x44c>)
 8014ac0:	4628      	mov	r0, r5
 8014ac2:	f7ff f90f 	bl	8013ce4 <http_find_file>
 8014ac6:	4607      	mov	r7, r0
 8014ac8:	e7e9      	b.n	8014a9e <http_recv+0x3de>
                         lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE2, data_len))) {
 8014aca:	463a      	mov	r2, r7
 8014acc:	4910      	ldr	r1, [pc, #64]	; (8014b10 <http_recv+0x450>)
 8014ace:	4640      	mov	r0, r8
 8014ad0:	9305      	str	r3, [sp, #20]
 8014ad2:	f000 f8b1 	bl	8014c38 <lwip_strnstr>
          if (!is_09 && (lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE, data_len) ||
 8014ad6:	9b05      	ldr	r3, [sp, #20]
 8014ad8:	2800      	cmp	r0, #0
 8014ada:	d1a5      	bne.n	8014a28 <http_recv+0x368>
 8014adc:	e687      	b.n	80147ee <http_recv+0x12e>
      pbuf_free(p);
 8014ade:	4620      	mov	r0, r4
 8014ae0:	f001 ff12 	bl	8016908 <pbuf_free>
 8014ae4:	e61e      	b.n	8014724 <http_recv+0x64>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 8014ae6:	9907      	ldr	r1, [sp, #28]
 8014ae8:	2241      	movs	r2, #65	; 0x41
 8014aea:	4608      	mov	r0, r1
 8014aec:	f001 ff7a 	bl	80169e4 <pbuf_alloc>
              return http_post_rxpbuf(hs, q);
 8014af0:	4601      	mov	r1, r0
 8014af2:	4628      	mov	r0, r5
 8014af4:	f7ff f9e0 	bl	8013eb8 <http_post_rxpbuf>
 8014af8:	4607      	mov	r7, r0
 8014afa:	e7d0      	b.n	8014a9e <http_recv+0x3de>
              *sp1 = ' ';
 8014afc:	2320      	movs	r3, #32
 8014afe:	9a04      	ldr	r2, [sp, #16]
 8014b00:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 8014b02:	9a05      	ldr	r2, [sp, #20]
              *sp2 = ' ';
 8014b04:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 8014b08:	7013      	strb	r3, [r2, #0]
 8014b0a:	e5ed      	b.n	80146e8 <http_recv+0x28>
 8014b0c:	200299fc 	.word	0x200299fc
 8014b10:	0803cdfc 	.word	0x0803cdfc

08014b14 <http_err>:
  if (hs != NULL) {
 8014b14:	b140      	cbz	r0, 8014b28 <http_err+0x14>
{
 8014b16:	b510      	push	{r4, lr}
 8014b18:	4604      	mov	r4, r0
    http_state_eof(hs);
 8014b1a:	f7fe ff7d 	bl	8013a18 <http_state_eof>
    HTTP_FREE_HTTP_STATE(hs);
 8014b1e:	4620      	mov	r0, r4
}
 8014b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HTTP_FREE_HTTP_STATE(hs);
 8014b24:	f001 b830 	b.w	8015b88 <mem_free>
 8014b28:	4770      	bx	lr
 8014b2a:	bf00      	nop

08014b2c <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8014b2c:	b510      	push	{r4, lr}
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 8014b2e:	202e      	movs	r0, #46	; 0x2e
 8014b30:	f003 fafe 	bl	8018130 <tcp_new_ip_type>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8014b34:	b310      	cbz	r0, 8014b7c <httpd_init+0x50>
 8014b36:	4604      	mov	r4, r0
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8014b38:	2101      	movs	r1, #1
 8014b3a:	f002 fd31 	bl	80175a0 <tcp_setprio>
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 8014b3e:	2250      	movs	r2, #80	; 0x50
 8014b40:	4917      	ldr	r1, [pc, #92]	; (8014ba0 <httpd_init+0x74>)
 8014b42:	4620      	mov	r0, r4
 8014b44:	f002 fbca 	bl	80172dc <tcp_bind>
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8014b48:	bb08      	cbnz	r0, 8014b8e <httpd_init+0x62>
    pcb = altcp_listen(pcb);
 8014b4a:	4620      	mov	r0, r4
 8014b4c:	21ff      	movs	r1, #255	; 0xff
 8014b4e:	f002 fc93 	bl	8017478 <tcp_listen_with_backlog>
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8014b52:	4604      	mov	r4, r0
 8014b54:	b128      	cbz	r0, 8014b62 <httpd_init+0x36>
    altcp_accept(pcb, http_accept);
 8014b56:	4620      	mov	r0, r4
 8014b58:	4912      	ldr	r1, [pc, #72]	; (8014ba4 <httpd_init+0x78>)
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
}
 8014b5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    altcp_accept(pcb, http_accept);
 8014b5e:	f002 bdad 	b.w	80176bc <tcp_accept>
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8014b62:	4911      	ldr	r1, [pc, #68]	; (8014ba8 <httpd_init+0x7c>)
 8014b64:	f640 2259 	movw	r2, #2649	; 0xa59
 8014b68:	4b10      	ldr	r3, [pc, #64]	; (8014bac <httpd_init+0x80>)
 8014b6a:	4811      	ldr	r0, [pc, #68]	; (8014bb0 <httpd_init+0x84>)
 8014b6c:	f00c f824 	bl	8020bb8 <iprintf>
    altcp_accept(pcb, http_accept);
 8014b70:	4620      	mov	r0, r4
 8014b72:	490c      	ldr	r1, [pc, #48]	; (8014ba4 <httpd_init+0x78>)
}
 8014b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    altcp_accept(pcb, http_accept);
 8014b78:	f002 bda0 	b.w	80176bc <tcp_accept>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8014b7c:	4b0b      	ldr	r3, [pc, #44]	; (8014bac <httpd_init+0x80>)
 8014b7e:	f640 2272 	movw	r2, #2674	; 0xa72
 8014b82:	490c      	ldr	r1, [pc, #48]	; (8014bb4 <httpd_init+0x88>)
 8014b84:	480a      	ldr	r0, [pc, #40]	; (8014bb0 <httpd_init+0x84>)
}
 8014b86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8014b8a:	f00c b815 	b.w	8020bb8 <iprintf>
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8014b8e:	4b07      	ldr	r3, [pc, #28]	; (8014bac <httpd_init+0x80>)
 8014b90:	f640 2257 	movw	r2, #2647	; 0xa57
 8014b94:	4908      	ldr	r1, [pc, #32]	; (8014bb8 <httpd_init+0x8c>)
 8014b96:	4806      	ldr	r0, [pc, #24]	; (8014bb0 <httpd_init+0x84>)
 8014b98:	f00c f80e 	bl	8020bb8 <iprintf>
 8014b9c:	e7d5      	b.n	8014b4a <httpd_init+0x1e>
 8014b9e:	bf00      	nop
 8014ba0:	0803f8a8 	.word	0x0803f8a8
 8014ba4:	08013a89 	.word	0x08013a89
 8014ba8:	0803cfa4 	.word	0x0803cfa4
 8014bac:	0803cd3c 	.word	0x0803cd3c
 8014bb0:	08026bb8 	.word	0x08026bb8
 8014bb4:	0803cf6c 	.word	0x0803cf6c
 8014bb8:	0803cf88 	.word	0x0803cf88

08014bbc <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 8014bbc:	b570      	push	{r4, r5, r6, lr}
 8014bbe:	460d      	mov	r5, r1
 8014bc0:	4614      	mov	r4, r2
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 8014bc2:	4606      	mov	r6, r0
 8014bc4:	b1c8      	cbz	r0, 8014bfa <http_set_ssi_handler+0x3e>
  httpd_ssi_handler = ssi_handler;
 8014bc6:	4b11      	ldr	r3, [pc, #68]	; (8014c0c <http_set_ssi_handler+0x50>)
 8014bc8:	601e      	str	r6, [r3, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 8014bca:	b175      	cbz	r5, 8014bea <http_set_ssi_handler+0x2e>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 8014bcc:	2c00      	cmp	r4, #0
 8014bce:	dd04      	ble.n	8014bda <http_set_ssi_handler+0x1e>

  httpd_tags = tags;
 8014bd0:	4a0f      	ldr	r2, [pc, #60]	; (8014c10 <http_set_ssi_handler+0x54>)
  httpd_num_tags = num_tags;
 8014bd2:	4b10      	ldr	r3, [pc, #64]	; (8014c14 <http_set_ssi_handler+0x58>)
  httpd_tags = tags;
 8014bd4:	6015      	str	r5, [r2, #0]
  httpd_num_tags = num_tags;
 8014bd6:	601c      	str	r4, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 8014bd8:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 8014bda:	4b0f      	ldr	r3, [pc, #60]	; (8014c18 <http_set_ssi_handler+0x5c>)
 8014bdc:	f640 229f 	movw	r2, #2719	; 0xa9f
 8014be0:	490e      	ldr	r1, [pc, #56]	; (8014c1c <http_set_ssi_handler+0x60>)
 8014be2:	480f      	ldr	r0, [pc, #60]	; (8014c20 <http_set_ssi_handler+0x64>)
 8014be4:	f00b ffe8 	bl	8020bb8 <iprintf>
 8014be8:	e7f2      	b.n	8014bd0 <http_set_ssi_handler+0x14>
  LWIP_ASSERT("no tags given", tags != NULL);
 8014bea:	4b0b      	ldr	r3, [pc, #44]	; (8014c18 <http_set_ssi_handler+0x5c>)
 8014bec:	f640 229e 	movw	r2, #2718	; 0xa9e
 8014bf0:	490c      	ldr	r1, [pc, #48]	; (8014c24 <http_set_ssi_handler+0x68>)
 8014bf2:	480b      	ldr	r0, [pc, #44]	; (8014c20 <http_set_ssi_handler+0x64>)
 8014bf4:	f00b ffe0 	bl	8020bb8 <iprintf>
 8014bf8:	e7e8      	b.n	8014bcc <http_set_ssi_handler+0x10>
  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 8014bfa:	4b07      	ldr	r3, [pc, #28]	; (8014c18 <http_set_ssi_handler+0x5c>)
 8014bfc:	f640 2297 	movw	r2, #2711	; 0xa97
 8014c00:	4909      	ldr	r1, [pc, #36]	; (8014c28 <http_set_ssi_handler+0x6c>)
 8014c02:	4807      	ldr	r0, [pc, #28]	; (8014c20 <http_set_ssi_handler+0x64>)
 8014c04:	f00b ffd8 	bl	8020bb8 <iprintf>
 8014c08:	e7dd      	b.n	8014bc6 <http_set_ssi_handler+0xa>
 8014c0a:	bf00      	nop
 8014c0c:	20029e40 	.word	0x20029e40
 8014c10:	20029e44 	.word	0x20029e44
 8014c14:	20029a3c 	.word	0x20029a3c
 8014c18:	0803cd3c 	.word	0x0803cd3c
 8014c1c:	0803cf1c 	.word	0x0803cf1c
 8014c20:	08026bb8 	.word	0x08026bb8
 8014c24:	0803cf0c 	.word	0x0803cf0c
 8014c28:	0803cef4 	.word	0x0803cef4

08014c2c <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 8014c2c:	ba40      	rev16	r0, r0
}
 8014c2e:	b280      	uxth	r0, r0
 8014c30:	4770      	bx	lr
 8014c32:	bf00      	nop

08014c34 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 8014c34:	ba00      	rev	r0, r0
 8014c36:	4770      	bx	lr

08014c38 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8014c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c3c:	4604      	mov	r4, r0
  const char *p;
  size_t tokenlen = strlen(token);
 8014c3e:	4608      	mov	r0, r1
{
 8014c40:	4688      	mov	r8, r1
 8014c42:	4616      	mov	r6, r2
  size_t tokenlen = strlen(token);
 8014c44:	f7eb fb06 	bl	8000254 <strlen>
  if (tokenlen == 0) {
 8014c48:	b1c0      	cbz	r0, 8014c7c <lwip_strnstr+0x44>
 8014c4a:	4605      	mov	r5, r0
    return LWIP_CONST_CAST(char *, buffer);
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8014c4c:	7820      	ldrb	r0, [r4, #0]
 8014c4e:	b1b0      	cbz	r0, 8014c7e <lwip_strnstr+0x46>
 8014c50:	4426      	add	r6, r4
 8014c52:	1963      	adds	r3, r4, r5
 8014c54:	429e      	cmp	r6, r3
 8014c56:	d314      	bcc.n	8014c82 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8014c58:	f898 7000 	ldrb.w	r7, [r8]
 8014c5c:	e005      	b.n	8014c6a <lwip_strnstr+0x32>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8014c5e:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8014c62:	1963      	adds	r3, r4, r5
 8014c64:	b158      	cbz	r0, 8014c7e <lwip_strnstr+0x46>
 8014c66:	429e      	cmp	r6, r3
 8014c68:	d30b      	bcc.n	8014c82 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8014c6a:	4287      	cmp	r7, r0
 8014c6c:	d1f7      	bne.n	8014c5e <lwip_strnstr+0x26>
 8014c6e:	462a      	mov	r2, r5
 8014c70:	4641      	mov	r1, r8
 8014c72:	4620      	mov	r0, r4
 8014c74:	f00c ff1c 	bl	8021ab0 <strncmp>
 8014c78:	2800      	cmp	r0, #0
 8014c7a:	d1f0      	bne.n	8014c5e <lwip_strnstr+0x26>
 8014c7c:	4620      	mov	r0, r4
      return LWIP_CONST_CAST(char *, p);
    }
  }
  return NULL;
}
 8014c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return NULL;
 8014c82:	2000      	movs	r0, #0
}
 8014c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014c88 <lwip_stricmp>:
lwip_stricmp(const char *str1, const char *str2)
{
  char c1, c2;

  do {
    c1 = *str1++;
 8014c88:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 8014c8c:	f811 2b01 	ldrb.w	r2, [r1], #1
    if (c1 != c2) {
 8014c90:	4293      	cmp	r3, r2
 8014c92:	d01c      	beq.n	8014cce <lwip_stricmp+0x46>
{
 8014c94:	b430      	push	{r4, r5}
 8014c96:	f043 0420 	orr.w	r4, r3, #32
 8014c9a:	f042 0520 	orr.w	r5, r2, #32
 8014c9e:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
      char c1_upc = c1 | 0x20;
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8014ca2:	2a19      	cmp	r2, #25
 8014ca4:	d810      	bhi.n	8014cc8 <lwip_stricmp+0x40>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
        if (c1_upc != c2_upc) {
 8014ca6:	42ac      	cmp	r4, r5
 8014ca8:	d10e      	bne.n	8014cc8 <lwip_stricmp+0x40>
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
  } while (c1 != 0);
 8014caa:	b1a3      	cbz	r3, 8014cd6 <lwip_stricmp+0x4e>
    c1 = *str1++;
 8014cac:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 8014cb0:	f811 2b01 	ldrb.w	r2, [r1], #1
    if (c1 != c2) {
 8014cb4:	4293      	cmp	r3, r2
 8014cb6:	d0f8      	beq.n	8014caa <lwip_stricmp+0x22>
 8014cb8:	f043 0420 	orr.w	r4, r3, #32
 8014cbc:	f042 0520 	orr.w	r5, r2, #32
 8014cc0:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8014cc4:	2a19      	cmp	r2, #25
 8014cc6:	d9ee      	bls.n	8014ca6 <lwip_stricmp+0x1e>
        return 1;
 8014cc8:	2001      	movs	r0, #1
  return 0;
}
 8014cca:	bc30      	pop	{r4, r5}
 8014ccc:	4770      	bx	lr
  } while (c1 != 0);
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d1da      	bne.n	8014c88 <lwip_stricmp>
  return 0;
 8014cd2:	4618      	mov	r0, r3
}
 8014cd4:	4770      	bx	lr
  return 0;
 8014cd6:	4618      	mov	r0, r3
}
 8014cd8:	bc30      	pop	{r4, r5}
 8014cda:	4770      	bx	lr

08014cdc <lwip_strnicmp>:
 * lwIP default implementation for strnicmp() non-standard function.
 * This can be \#defined to strnicmp() depending on your platform port.
 */
int
lwip_strnicmp(const char *str1, const char *str2, size_t len)
{
 8014cdc:	b470      	push	{r4, r5, r6}
 8014cde:	e005      	b.n	8014cec <lwip_strnicmp+0x10>
      char c1_upc = c1 | 0x20;
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
        if (c1_upc != c2_upc) {
 8014ce0:	42b5      	cmp	r5, r6
 8014ce2:	d111      	bne.n	8014d08 <lwip_strnicmp+0x2c>
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
    len--;
  } while ((len != 0) && (c1 != 0));
 8014ce4:	f112 32ff 	adds.w	r2, r2, #4294967295
 8014ce8:	d011      	beq.n	8014d0e <lwip_strnicmp+0x32>
 8014cea:	b183      	cbz	r3, 8014d0e <lwip_strnicmp+0x32>
    c1 = *str1++;
 8014cec:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 8014cf0:	f811 4b01 	ldrb.w	r4, [r1], #1
    if (c1 != c2) {
 8014cf4:	42a3      	cmp	r3, r4
 8014cf6:	d0f5      	beq.n	8014ce4 <lwip_strnicmp+0x8>
 8014cf8:	f043 0520 	orr.w	r5, r3, #32
 8014cfc:	f044 0620 	orr.w	r6, r4, #32
 8014d00:	f1a5 0461 	sub.w	r4, r5, #97	; 0x61
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8014d04:	2c19      	cmp	r4, #25
 8014d06:	d9eb      	bls.n	8014ce0 <lwip_strnicmp+0x4>
        return 1;
 8014d08:	2001      	movs	r0, #1
  return 0;
}
 8014d0a:	bc70      	pop	{r4, r5, r6}
 8014d0c:	4770      	bx	lr
  return 0;
 8014d0e:	2000      	movs	r0, #0
}
 8014d10:	bc70      	pop	{r4, r5, r6}
 8014d12:	4770      	bx	lr

08014d14 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 8014d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d18:	0106      	lsls	r6, r0, #4
 8014d1a:	4c24      	ldr	r4, [pc, #144]	; (8014dac <dns_call_found+0x98>)
 8014d1c:	4605      	mov	r5, r0
 8014d1e:	468a      	mov	sl, r1
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8014d20:	eb06 0800 	add.w	r8, r6, r0
 8014d24:	4f22      	ldr	r7, [pc, #136]	; (8014db0 <dns_call_found+0x9c>)
 8014d26:	f104 0930 	add.w	r9, r4, #48	; 0x30
 8014d2a:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8014d2e:	f108 0810 	add.w	r8, r8, #16
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 8014d32:	6823      	ldr	r3, [r4, #0]
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8014d34:	4651      	mov	r1, sl
 8014d36:	eb07 0008 	add.w	r0, r7, r8
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 8014d3a:	b133      	cbz	r3, 8014d4a <dns_call_found+0x36>
 8014d3c:	7a22      	ldrb	r2, [r4, #8]
 8014d3e:	42aa      	cmp	r2, r5
 8014d40:	d103      	bne.n	8014d4a <dns_call_found+0x36>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8014d42:	6862      	ldr	r2, [r4, #4]
 8014d44:	4798      	blx	r3
      /* flush this entry */
      dns_requests[i].found = NULL;
 8014d46:	2300      	movs	r3, #0
 8014d48:	6023      	str	r3, [r4, #0]
 8014d4a:	340c      	adds	r4, #12
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8014d4c:	454c      	cmp	r4, r9
 8014d4e:	d1f0      	bne.n	8014d32 <dns_call_found+0x1e>
 8014d50:	1973      	adds	r3, r6, r5
 8014d52:	2400      	movs	r4, #0
 8014d54:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 8014d58:	4f15      	ldr	r7, [pc, #84]	; (8014db0 <dns_call_found+0x9c>)
 8014d5a:	7bd9      	ldrb	r1, [r3, #15]
 8014d5c:	463a      	mov	r2, r7
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (i == idx) {
 8014d5e:	b2e3      	uxtb	r3, r4
 8014d60:	3401      	adds	r4, #1
 8014d62:	42ab      	cmp	r3, r5
 8014d64:	d002      	beq.n	8014d6c <dns_call_found+0x58>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 8014d66:	7a93      	ldrb	r3, [r2, #10]
 8014d68:	2b02      	cmp	r3, #2
 8014d6a:	d015      	beq.n	8014d98 <dns_call_found+0x84>
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8014d6c:	2c04      	cmp	r4, #4
 8014d6e:	f502 7288 	add.w	r2, r2, #272	; 0x110
 8014d72:	d1f4      	bne.n	8014d5e <dns_call_found+0x4a>
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
        break;
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 8014d74:	2903      	cmp	r1, #3
 8014d76:	d80d      	bhi.n	8014d94 <dns_call_found+0x80>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8014d78:	4435      	add	r5, r6
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 8014d7a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 8014db4 <dns_call_found+0xa0>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8014d7e:	eb07 1705 	add.w	r7, r7, r5, lsl #4
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 8014d82:	f858 0021 	ldr.w	r0, [r8, r1, lsl #2]
 8014d86:	f007 f8d9 	bl	801bf3c <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8014d8a:	2200      	movs	r2, #0
 8014d8c:	7bfb      	ldrb	r3, [r7, #15]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8014d8e:	73fc      	strb	r4, [r7, #15]
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8014d90:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
  }
#endif
}
 8014d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 8014d98:	7bd3      	ldrb	r3, [r2, #15]
 8014d9a:	428b      	cmp	r3, r1
 8014d9c:	d1e6      	bne.n	8014d6c <dns_call_found+0x58>
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8014d9e:	4435      	add	r5, r6
 8014da0:	2304      	movs	r3, #4
 8014da2:	eb07 1705 	add.w	r7, r7, r5, lsl #4
 8014da6:	73fb      	strb	r3, [r7, #15]
 8014da8:	e7f4      	b.n	8014d94 <dns_call_found+0x80>
 8014daa:	bf00      	nop
 8014dac:	20029e5c 	.word	0x20029e5c
 8014db0:	20029e98 	.word	0x20029e98
 8014db4:	20029e4c 	.word	0x20029e4c

08014db8 <dns_send>:
{
 8014db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8014dbc:	0103      	lsls	r3, r0, #4
{
 8014dbe:	b087      	sub	sp, #28
 8014dc0:	4681      	mov	r9, r0
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8014dc2:	181c      	adds	r4, r3, r0
 8014dc4:	9301      	str	r3, [sp, #4]
 8014dc6:	4b60      	ldr	r3, [pc, #384]	; (8014f48 <dns_send+0x190>)
 8014dc8:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8014dcc:	7ae3      	ldrb	r3, [r4, #11]
 8014dce:	2b01      	cmp	r3, #1
 8014dd0:	d907      	bls.n	8014de2 <dns_send+0x2a>
 8014dd2:	4b5e      	ldr	r3, [pc, #376]	; (8014f4c <dns_send+0x194>)
 8014dd4:	f240 22fa 	movw	r2, #762	; 0x2fa
 8014dd8:	495d      	ldr	r1, [pc, #372]	; (8014f50 <dns_send+0x198>)
 8014dda:	485e      	ldr	r0, [pc, #376]	; (8014f54 <dns_send+0x19c>)
 8014ddc:	f00b feec 	bl	8020bb8 <iprintf>
 8014de0:	7ae3      	ldrb	r3, [r4, #11]
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 8014de2:	4a5d      	ldr	r2, [pc, #372]	; (8014f58 <dns_send+0x1a0>)
 8014de4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014de8:	2c00      	cmp	r4, #0
 8014dea:	f000 8099 	beq.w	8014f20 <dns_send+0x168>
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 8014dee:	9b01      	ldr	r3, [sp, #4]
 8014df0:	4e55      	ldr	r6, [pc, #340]	; (8014f48 <dns_send+0x190>)
 8014df2:	eb03 0409 	add.w	r4, r3, r9
 8014df6:	0124      	lsls	r4, r4, #4
 8014df8:	f104 0510 	add.w	r5, r4, #16
 8014dfc:	4435      	add	r5, r6
 8014dfe:	4628      	mov	r0, r5
 8014e00:	f7eb fa28 	bl	8000254 <strlen>
 8014e04:	f100 0112 	add.w	r1, r0, #18
 8014e08:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014e0c:	2036      	movs	r0, #54	; 0x36
 8014e0e:	b289      	uxth	r1, r1
 8014e10:	f001 fde8 	bl	80169e4 <pbuf_alloc>
  if (p != NULL) {
 8014e14:	4680      	mov	r8, r0
 8014e16:	2800      	cmp	r0, #0
 8014e18:	f000 8093 	beq.w	8014f42 <dns_send+0x18a>
    hdr.id = lwip_htons(entry->txid);
 8014e1c:	4434      	add	r4, r6
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 8014e1e:	2300      	movs	r3, #0
    query_idx = SIZEOF_DNS_HDR;
 8014e20:	260c      	movs	r6, #12
    --hostname;
 8014e22:	3d01      	subs	r5, #1
    hdr.id = lwip_htons(entry->txid);
 8014e24:	8920      	ldrh	r0, [r4, #8]
      if (query_idx + n + 1 > 0xFFFF) {
 8014e26:	f64f 7bfe 	movw	fp, #65534	; 0xfffe
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 8014e2a:	9304      	str	r3, [sp, #16]
 8014e2c:	9303      	str	r3, [sp, #12]
 8014e2e:	9305      	str	r3, [sp, #20]
    hdr.id = lwip_htons(entry->txid);
 8014e30:	f7ff fefc 	bl	8014c2c <lwip_htons>
    hdr.flags1 = DNS_FLAG1_RD;
 8014e34:	2201      	movs	r2, #1
    hdr.numquestions = PP_HTONS(1);
 8014e36:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdr.id = lwip_htons(entry->txid);
 8014e3a:	f8ad 000c 	strh.w	r0, [sp, #12]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 8014e3e:	eb0d 0106 	add.w	r1, sp, r6
    hdr.flags1 = DNS_FLAG1_RD;
 8014e42:	f88d 200e 	strb.w	r2, [sp, #14]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 8014e46:	4640      	mov	r0, r8
 8014e48:	4632      	mov	r2, r6
    hdr.numquestions = PP_HTONS(1);
 8014e4a:	f8ad 3010 	strh.w	r3, [sp, #16]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 8014e4e:	f002 f83f 	bl	8016ed0 <pbuf_take>
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8014e52:	786b      	ldrb	r3, [r5, #1]
      ++hostname;
 8014e54:	1c6f      	adds	r7, r5, #1
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8014e56:	2b2e      	cmp	r3, #46	; 0x2e
 8014e58:	d051      	beq.n	8014efe <dns_send+0x146>
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d04f      	beq.n	8014efe <dns_send+0x146>
      ++hostname;
 8014e5e:	463d      	mov	r5, r7
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8014e60:	2400      	movs	r4, #0
 8014e62:	e000      	b.n	8014e66 <dns_send+0xae>
 8014e64:	b12b      	cbz	r3, 8014e72 <dns_send+0xba>
 8014e66:	f815 3f01 	ldrb.w	r3, [r5, #1]!
        ++n;
 8014e6a:	3401      	adds	r4, #1
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8014e6c:	2b2e      	cmp	r3, #46	; 0x2e
        ++n;
 8014e6e:	b2e4      	uxtb	r4, r4
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8014e70:	d1f8      	bne.n	8014e64 <dns_send+0xac>
 8014e72:	4623      	mov	r3, r4
 8014e74:	eba5 0a07 	sub.w	sl, r5, r7
      if (query_idx + n + 1 > 0xFFFF) {
 8014e78:	4433      	add	r3, r6
 8014e7a:	fa1f fa8a 	uxth.w	sl, sl
 8014e7e:	455b      	cmp	r3, fp
 8014e80:	dc45      	bgt.n	8014f0e <dns_send+0x156>
      pbuf_put_at(p, query_idx, n);
 8014e82:	4622      	mov	r2, r4
 8014e84:	4631      	mov	r1, r6
 8014e86:	4640      	mov	r0, r8
      query_idx = (u16_t)(query_idx + n + 1);
 8014e88:	4434      	add	r4, r6
      pbuf_put_at(p, query_idx, n);
 8014e8a:	f002 f8ef 	bl	801706c <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 8014e8e:	1c73      	adds	r3, r6, #1
      query_idx = (u16_t)(query_idx + n + 1);
 8014e90:	b2a4      	uxth	r4, r4
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 8014e92:	4652      	mov	r2, sl
 8014e94:	4639      	mov	r1, r7
 8014e96:	b29b      	uxth	r3, r3
 8014e98:	4640      	mov	r0, r8
      query_idx = (u16_t)(query_idx + n + 1);
 8014e9a:	1c66      	adds	r6, r4, #1
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 8014e9c:	f002 f880 	bl	8016fa0 <pbuf_take_at>
    } while (*hostname != 0);
 8014ea0:	782a      	ldrb	r2, [r5, #0]
      query_idx = (u16_t)(query_idx + n + 1);
 8014ea2:	b2b6      	uxth	r6, r6
    } while (*hostname != 0);
 8014ea4:	2a00      	cmp	r2, #0
 8014ea6:	d1d4      	bne.n	8014e52 <dns_send+0x9a>
    pbuf_put_at(p, query_idx, 0);
 8014ea8:	4631      	mov	r1, r6
 8014eaa:	4640      	mov	r0, r8
 8014eac:	f002 f8de 	bl	801706c <pbuf_put_at>
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 8014eb0:	a906      	add	r1, sp, #24
    query_idx++;
 8014eb2:	1ca3      	adds	r3, r4, #2
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 8014eb4:	f04f 2001 	mov.w	r0, #16777472	; 0x1000100
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 8014eb8:	2204      	movs	r2, #4
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8014eba:	4d27      	ldr	r5, [pc, #156]	; (8014f58 <dns_send+0x1a0>)
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 8014ebc:	f841 0d10 	str.w	r0, [r1, #-16]!
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 8014ec0:	b29b      	uxth	r3, r3
 8014ec2:	4640      	mov	r0, r8
 8014ec4:	f002 f86c 	bl	8016fa0 <pbuf_take_at>
      dst = &dns_servers[entry->server_idx];
 8014ec8:	9b01      	ldr	r3, [sp, #4]
 8014eca:	4a1f      	ldr	r2, [pc, #124]	; (8014f48 <dns_send+0x190>)
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8014ecc:	4641      	mov	r1, r8
      dst = &dns_servers[entry->server_idx];
 8014ece:	444b      	add	r3, r9
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8014ed0:	4822      	ldr	r0, [pc, #136]	; (8014f5c <dns_send+0x1a4>)
      dst = &dns_servers[entry->server_idx];
 8014ed2:	4699      	mov	r9, r3
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8014ed4:	2335      	movs	r3, #53	; 0x35
      dst = &dns_servers[entry->server_idx];
 8014ed6:	eb02 1a09 	add.w	sl, r2, r9, lsl #4
 8014eda:	f89a 200b 	ldrb.w	r2, [sl, #11]
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8014ede:	f89a 400f 	ldrb.w	r4, [sl, #15]
 8014ee2:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8014ee6:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8014eea:	f006 ff81 	bl	801bdf0 <udp_sendto>
 8014eee:	4605      	mov	r5, r0
    pbuf_free(p);
 8014ef0:	4640      	mov	r0, r8
 8014ef2:	f001 fd09 	bl	8016908 <pbuf_free>
}
 8014ef6:	4628      	mov	r0, r5
 8014ef8:	b007      	add	sp, #28
 8014efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8014efe:	f04f 0a00 	mov.w	sl, #0
      ++hostname;
 8014f02:	463d      	mov	r5, r7
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8014f04:	4653      	mov	r3, sl
 8014f06:	4654      	mov	r4, sl
      if (query_idx + n + 1 > 0xFFFF) {
 8014f08:	4433      	add	r3, r6
 8014f0a:	455b      	cmp	r3, fp
 8014f0c:	ddb9      	ble.n	8014e82 <dns_send+0xca>
  return ERR_VAL;
 8014f0e:	f06f 0505 	mvn.w	r5, #5
  pbuf_free(p);
 8014f12:	4640      	mov	r0, r8
 8014f14:	f001 fcf8 	bl	8016908 <pbuf_free>
}
 8014f18:	4628      	mov	r0, r5
 8014f1a:	b007      	add	sp, #28
 8014f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dns_call_found(idx, NULL);
 8014f20:	4648      	mov	r0, r9
 8014f22:	4621      	mov	r1, r4
 8014f24:	f7ff fef6 	bl	8014d14 <dns_call_found>
    entry->state = DNS_STATE_UNUSED;
 8014f28:	9b01      	ldr	r3, [sp, #4]
    return ERR_OK;
 8014f2a:	4625      	mov	r5, r4
    entry->state = DNS_STATE_UNUSED;
 8014f2c:	444b      	add	r3, r9
}
 8014f2e:	4628      	mov	r0, r5
    entry->state = DNS_STATE_UNUSED;
 8014f30:	4699      	mov	r9, r3
 8014f32:	4b05      	ldr	r3, [pc, #20]	; (8014f48 <dns_send+0x190>)
 8014f34:	eb03 1a09 	add.w	sl, r3, r9, lsl #4
 8014f38:	f88a 400a 	strb.w	r4, [sl, #10]
}
 8014f3c:	b007      	add	sp, #28
 8014f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    err = ERR_MEM;
 8014f42:	f04f 35ff 	mov.w	r5, #4294967295
 8014f46:	e7d6      	b.n	8014ef6 <dns_send+0x13e>
 8014f48:	20029e98 	.word	0x20029e98
 8014f4c:	0803d074 	.word	0x0803d074
 8014f50:	0803d0a4 	.word	0x0803d0a4
 8014f54:	08026bb8 	.word	0x08026bb8
 8014f58:	20029e90 	.word	0x20029e90
 8014f5c:	20029e4c 	.word	0x20029e4c

08014f60 <dns_check_entry>:
dns_check_entry(u8_t i)
{
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8014f60:	2803      	cmp	r0, #3
{
 8014f62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f66:	4604      	mov	r4, r0
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8014f68:	d84a      	bhi.n	8015000 <dns_check_entry+0xa0>

  switch (entry->state) {
 8014f6a:	0125      	lsls	r5, r4, #4
 8014f6c:	4e39      	ldr	r6, [pc, #228]	; (8015054 <dns_check_entry+0xf4>)
 8014f6e:	192b      	adds	r3, r5, r4
 8014f70:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 8014f74:	7a9b      	ldrb	r3, [r3, #10]
 8014f76:	2b03      	cmp	r3, #3
 8014f78:	d84e      	bhi.n	8015018 <dns_check_entry+0xb8>
 8014f7a:	e8df f003 	tbb	[pc, r3]
 8014f7e:	100e      	.short	0x100e
 8014f80:	022c      	.short	0x022c
        }
      }
      break;
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 8014f82:	192b      	adds	r3, r5, r4
 8014f84:	011b      	lsls	r3, r3, #4
 8014f86:	58f2      	ldr	r2, [r6, r3]
 8014f88:	b112      	cbz	r2, 8014f90 <dns_check_entry+0x30>
 8014f8a:	3a01      	subs	r2, #1
 8014f8c:	50f2      	str	r2, [r6, r3]
 8014f8e:	b922      	cbnz	r2, 8014f9a <dns_check_entry+0x3a>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 8014f90:	442c      	add	r4, r5
 8014f92:	2300      	movs	r3, #0
 8014f94:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 8014f98:	72b3      	strb	r3, [r6, #10]
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
      break;
  }
}
 8014f9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f9e:	4f2e      	ldr	r7, [pc, #184]	; (8015058 <dns_check_entry+0xf8>)
  txid = (u16_t)DNS_RAND_TXID();
 8014fa0:	f00b fe9a 	bl	8020cd8 <rand>
 8014fa4:	4b2b      	ldr	r3, [pc, #172]	; (8015054 <dns_check_entry+0xf4>)
 8014fa6:	b281      	uxth	r1, r0
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8014fa8:	7a9a      	ldrb	r2, [r3, #10]
 8014faa:	2a02      	cmp	r2, #2
 8014fac:	d030      	beq.n	8015010 <dns_check_entry+0xb0>
 8014fae:	f503 7388 	add.w	r3, r3, #272	; 0x110
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8014fb2:	429f      	cmp	r7, r3
 8014fb4:	d1f8      	bne.n	8014fa8 <dns_check_entry+0x48>
      entry->txid = dns_create_txid();
 8014fb6:	4425      	add	r5, r4
      err = dns_send(i);
 8014fb8:	4620      	mov	r0, r4
      entry->server_idx = 0;
 8014fba:	2201      	movs	r2, #1
      entry->state = DNS_STATE_ASKING;
 8014fbc:	2402      	movs	r4, #2
      entry->txid = dns_create_txid();
 8014fbe:	012d      	lsls	r5, r5, #4
 8014fc0:	f105 0308 	add.w	r3, r5, #8
 8014fc4:	4435      	add	r5, r6
 8014fc6:	441e      	add	r6, r3
 8014fc8:	8129      	strh	r1, [r5, #8]
      entry->state = DNS_STATE_ASKING;
 8014fca:	8074      	strh	r4, [r6, #2]
      entry->server_idx = 0;
 8014fcc:	80b2      	strh	r2, [r6, #4]
}
 8014fce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      err = dns_send(i);
 8014fd2:	f7ff bef1 	b.w	8014db8 <dns_send>
      if (--entry->tmr == 0) {
 8014fd6:	192a      	adds	r2, r5, r4
 8014fd8:	eb06 1202 	add.w	r2, r6, r2, lsl #4
 8014fdc:	7b13      	ldrb	r3, [r2, #12]
 8014fde:	3b01      	subs	r3, #1
 8014fe0:	b2db      	uxtb	r3, r3
 8014fe2:	7313      	strb	r3, [r2, #12]
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d1d8      	bne.n	8014f9a <dns_check_entry+0x3a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 8014fe8:	7b53      	ldrb	r3, [r2, #13]
 8014fea:	3301      	adds	r3, #1
 8014fec:	b2db      	uxtb	r3, r3
 8014fee:	2b04      	cmp	r3, #4
 8014ff0:	7353      	strb	r3, [r2, #13]
 8014ff2:	d01a      	beq.n	801502a <dns_check_entry+0xca>
          entry->tmr = entry->retries;
 8014ff4:	7313      	strb	r3, [r2, #12]
        err = dns_send(i);
 8014ff6:	4620      	mov	r0, r4
}
 8014ff8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        err = dns_send(i);
 8014ffc:	f7ff bedc 	b.w	8014db8 <dns_send>
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8015000:	4b16      	ldr	r3, [pc, #88]	; (801505c <dns_check_entry+0xfc>)
 8015002:	f240 421c 	movw	r2, #1052	; 0x41c
 8015006:	4916      	ldr	r1, [pc, #88]	; (8015060 <dns_check_entry+0x100>)
 8015008:	4816      	ldr	r0, [pc, #88]	; (8015064 <dns_check_entry+0x104>)
 801500a:	f00b fdd5 	bl	8020bb8 <iprintf>
 801500e:	e7ac      	b.n	8014f6a <dns_check_entry+0xa>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8015010:	891a      	ldrh	r2, [r3, #8]
 8015012:	428a      	cmp	r2, r1
 8015014:	d1cb      	bne.n	8014fae <dns_check_entry+0x4e>
 8015016:	e7c3      	b.n	8014fa0 <dns_check_entry+0x40>
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 8015018:	4b10      	ldr	r3, [pc, #64]	; (801505c <dns_check_entry+0xfc>)
 801501a:	f240 425b 	movw	r2, #1115	; 0x45b
 801501e:	4912      	ldr	r1, [pc, #72]	; (8015068 <dns_check_entry+0x108>)
 8015020:	4810      	ldr	r0, [pc, #64]	; (8015064 <dns_check_entry+0x104>)
}
 8015022:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 8015026:	f00b bdc7 	b.w	8020bb8 <iprintf>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 801502a:	7ad3      	ldrb	r3, [r2, #11]
 801502c:	b93b      	cbnz	r3, 801503e <dns_check_entry+0xde>
 801502e:	490f      	ldr	r1, [pc, #60]	; (801506c <dns_check_entry+0x10c>)
 8015030:	6849      	ldr	r1, [r1, #4]
 8015032:	b121      	cbz	r1, 801503e <dns_check_entry+0xde>
            entry->server_idx++;
 8015034:	2101      	movs	r1, #1
            entry->retries = 0;
 8015036:	7353      	strb	r3, [r2, #13]
            entry->server_idx++;
 8015038:	72d1      	strb	r1, [r2, #11]
            entry->tmr = 1;
 801503a:	7311      	strb	r1, [r2, #12]
 801503c:	e7db      	b.n	8014ff6 <dns_check_entry+0x96>
            dns_call_found(i, NULL);
 801503e:	4620      	mov	r0, r4
            entry->state = DNS_STATE_UNUSED;
 8015040:	442c      	add	r4, r5
            dns_call_found(i, NULL);
 8015042:	2100      	movs	r1, #0
 8015044:	f7ff fe66 	bl	8014d14 <dns_call_found>
            entry->state = DNS_STATE_UNUSED;
 8015048:	2300      	movs	r3, #0
 801504a:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 801504e:	72b3      	strb	r3, [r6, #10]
            break;
 8015050:	e7a3      	b.n	8014f9a <dns_check_entry+0x3a>
 8015052:	bf00      	nop
 8015054:	20029e98 	.word	0x20029e98
 8015058:	2002a2d8 	.word	0x2002a2d8
 801505c:	0803d074 	.word	0x0803d074
 8015060:	0803d038 	.word	0x0803d038
 8015064:	08026bb8 	.word	0x08026bb8
 8015068:	0803d054 	.word	0x0803d054
 801506c:	20029e90 	.word	0x20029e90

08015070 <dns_recv>:
/**
 * Receive input function for DNS response packets arriving for the dns UDP pcb.
 */
static void
dns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8015070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015074:	4699      	mov	r9, r3
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(port);

  /* is the dns message big enough ? */
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 8015076:	8913      	ldrh	r3, [r2, #8]
{
 8015078:	b08d      	sub	sp, #52	; 0x34
 801507a:	4614      	mov	r4, r2
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 801507c:	2b0f      	cmp	r3, #15
 801507e:	d908      	bls.n	8015092 <dns_recv+0x22>
    /* free pbuf and return */
    goto ignore_packet;
  }

  /* copy dns payload inside static buffer for processing */
  if (pbuf_copy_partial(p, &hdr, SIZEOF_DNS_HDR, 0) == SIZEOF_DNS_HDR) {
 8015080:	2300      	movs	r3, #0
 8015082:	220c      	movs	r2, #12
 8015084:	a906      	add	r1, sp, #24
 8015086:	4620      	mov	r0, r4
 8015088:	f001 fece 	bl	8016e28 <pbuf_copy_partial>
 801508c:	280c      	cmp	r0, #12
 801508e:	4606      	mov	r6, r0
 8015090:	d005      	beq.n	801509e <dns_recv+0x2e>
    }
  }

ignore_packet:
  /* deallocate memory and return */
  pbuf_free(p);
 8015092:	4620      	mov	r0, r4
 8015094:	f001 fc38 	bl	8016908 <pbuf_free>
  return;
}
 8015098:	b00d      	add	sp, #52	; 0x34
 801509a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801509e:	f8df 8300 	ldr.w	r8, [pc, #768]	; 80153a0 <dns_recv+0x330>
    txid = lwip_htons(hdr.id);
 80150a2:	2500      	movs	r5, #0
 80150a4:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 80150a8:	f7ff fdc0 	bl	8014c2c <lwip_htons>
 80150ac:	4643      	mov	r3, r8
 80150ae:	b2ef      	uxtb	r7, r5
      if ((entry->state == DNS_STATE_ASKING) &&
 80150b0:	7a9a      	ldrb	r2, [r3, #10]
 80150b2:	2a02      	cmp	r2, #2
 80150b4:	d008      	beq.n	80150c8 <dns_recv+0x58>
 80150b6:	3501      	adds	r5, #1
 80150b8:	f503 7388 	add.w	r3, r3, #272	; 0x110
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 80150bc:	2d04      	cmp	r5, #4
 80150be:	d0e8      	beq.n	8015092 <dns_recv+0x22>
      if ((entry->state == DNS_STATE_ASKING) &&
 80150c0:	7a9a      	ldrb	r2, [r3, #10]
 80150c2:	b2ef      	uxtb	r7, r5
 80150c4:	2a02      	cmp	r2, #2
 80150c6:	d1f6      	bne.n	80150b6 <dns_recv+0x46>
 80150c8:	891a      	ldrh	r2, [r3, #8]
 80150ca:	4282      	cmp	r2, r0
 80150cc:	d1f3      	bne.n	80150b6 <dns_recv+0x46>
        nquestions = lwip_htons(hdr.numquestions);
 80150ce:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 80150d2:	f7ff fdab 	bl	8014c2c <lwip_htons>
 80150d6:	4682      	mov	sl, r0
        nanswers   = lwip_htons(hdr.numanswers);
 80150d8:	f8bd 001e 	ldrh.w	r0, [sp, #30]
 80150dc:	f7ff fda6 	bl	8014c2c <lwip_htons>
        if ((hdr.flags1 & DNS_FLAG1_RESPONSE) == 0) {
 80150e0:	f89d 301a 	ldrb.w	r3, [sp, #26]
        nanswers   = lwip_htons(hdr.numanswers);
 80150e4:	4683      	mov	fp, r0
        if (nquestions != 1) {
 80150e6:	09db      	lsrs	r3, r3, #7
 80150e8:	d0d3      	beq.n	8015092 <dns_recv+0x22>
 80150ea:	f1ba 0f01 	cmp.w	sl, #1
 80150ee:	d1d0      	bne.n	8015092 <dns_recv+0x22>
          if (!ip_addr_cmp(addr, &dns_servers[entry->server_idx])) {
 80150f0:	eb05 1305 	add.w	r3, r5, r5, lsl #4
 80150f4:	49a8      	ldr	r1, [pc, #672]	; (8015398 <dns_recv+0x328>)
 80150f6:	f8d9 2000 	ldr.w	r2, [r9]
 80150fa:	eb08 1303 	add.w	r3, r8, r3, lsl #4
 80150fe:	7adb      	ldrb	r3, [r3, #11]
 8015100:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8015104:	429a      	cmp	r2, r3
 8015106:	d1c4      	bne.n	8015092 <dns_recv+0x22>
 8015108:	f44f 7388 	mov.w	r3, #272	; 0x110
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 801510c:	9502      	str	r5, [sp, #8]
 801510e:	fb03 f305 	mul.w	r3, r3, r5
 8015112:	4625      	mov	r5, r4
 8015114:	9301      	str	r3, [sp, #4]
 8015116:	3310      	adds	r3, #16
 8015118:	4443      	add	r3, r8
 801511a:	9300      	str	r3, [sp, #0]
    n = pbuf_try_get_at(p, response_offset);
 801511c:	4631      	mov	r1, r6
 801511e:	4628      	mov	r0, r5
 8015120:	f001 ff90 	bl	8017044 <pbuf_try_get_at>
    if ((n < 0) || (response_offset == 0xFFFF)) {
 8015124:	2800      	cmp	r0, #0
 8015126:	db3c      	blt.n	80151a2 <dns_recv+0x132>
 8015128:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801512c:	429e      	cmp	r6, r3
 801512e:	d038      	beq.n	80151a2 <dns_recv+0x132>
    if ((n & 0xc0) == 0xc0) {
 8015130:	f000 02c0 	and.w	r2, r0, #192	; 0xc0
    response_offset++;
 8015134:	1c73      	adds	r3, r6, #1
    if ((n & 0xc0) == 0xc0) {
 8015136:	2ac0      	cmp	r2, #192	; 0xc0
    response_offset++;
 8015138:	b29e      	uxth	r6, r3
    if ((n & 0xc0) == 0xc0) {
 801513a:	d032      	beq.n	80151a2 <dns_recv+0x132>
      while (n > 0) {
 801513c:	b398      	cbz	r0, 80151a6 <dns_recv+0x136>
 801513e:	9c00      	ldr	r4, [sp, #0]
 8015140:	eb04 0a00 	add.w	sl, r4, r0
 8015144:	e026      	b.n	8015194 <dns_recv+0x124>
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 8015146:	f814 2b01 	ldrb.w	r2, [r4], #1
 801514a:	9200      	str	r2, [sp, #0]
 801514c:	f00a fd50 	bl	801fbf0 <__locale_ctype_ptr>
 8015150:	9a00      	ldr	r2, [sp, #0]
        ++query;
 8015152:	9400      	str	r4, [sp, #0]
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 8015154:	4410      	add	r0, r2
 8015156:	7843      	ldrb	r3, [r0, #1]
 8015158:	f003 0303 	and.w	r3, r3, #3
 801515c:	2b01      	cmp	r3, #1
 801515e:	bf08      	it	eq
 8015160:	3220      	addeq	r2, #32
 8015162:	9203      	str	r2, [sp, #12]
 8015164:	f00a fd44 	bl	801fbf0 <__locale_ctype_ptr>
 8015168:	fa5f f389 	uxtb.w	r3, r9
 801516c:	9a03      	ldr	r2, [sp, #12]
        response_offset++;
 801516e:	f106 0c01 	add.w	ip, r6, #1
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 8015172:	4418      	add	r0, r3
 8015174:	7841      	ldrb	r1, [r0, #1]
 8015176:	f001 0103 	and.w	r1, r1, #3
 801517a:	2901      	cmp	r1, #1
 801517c:	bf08      	it	eq
 801517e:	3320      	addeq	r3, #32
        if (response_offset == 0xFFFF) {
 8015180:	429a      	cmp	r2, r3
 8015182:	d10e      	bne.n	80151a2 <dns_recv+0x132>
 8015184:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015188:	429e      	cmp	r6, r3
        response_offset++;
 801518a:	fa1f f68c 	uxth.w	r6, ip
        if (response_offset == 0xFFFF) {
 801518e:	d008      	beq.n	80151a2 <dns_recv+0x132>
      while (n > 0) {
 8015190:	45a2      	cmp	sl, r4
 8015192:	d008      	beq.n	80151a6 <dns_recv+0x136>
        int c = pbuf_try_get_at(p, response_offset);
 8015194:	4631      	mov	r1, r6
 8015196:	4628      	mov	r0, r5
 8015198:	f001 ff54 	bl	8017044 <pbuf_try_get_at>
        if (c < 0) {
 801519c:	f1b0 0900 	subs.w	r9, r0, #0
 80151a0:	dad1      	bge.n	8015146 <dns_recv+0xd6>
 80151a2:	462c      	mov	r4, r5
 80151a4:	e775      	b.n	8015092 <dns_recv+0x22>
      ++query;
 80151a6:	9b00      	ldr	r3, [sp, #0]
    n = pbuf_try_get_at(p, response_offset);
 80151a8:	4631      	mov	r1, r6
 80151aa:	4628      	mov	r0, r5
      ++query;
 80151ac:	3301      	adds	r3, #1
 80151ae:	9300      	str	r3, [sp, #0]
    n = pbuf_try_get_at(p, response_offset);
 80151b0:	f001 ff48 	bl	8017044 <pbuf_try_get_at>
    if (n < 0) {
 80151b4:	2800      	cmp	r0, #0
 80151b6:	dbf4      	blt.n	80151a2 <dns_recv+0x132>
  } while (n != 0);
 80151b8:	d1b0      	bne.n	801511c <dns_recv+0xac>
  if (response_offset == 0xFFFF) {
 80151ba:	f64f 79ff 	movw	r9, #65535	; 0xffff
 80151be:	462c      	mov	r4, r5
 80151c0:	9d02      	ldr	r5, [sp, #8]
 80151c2:	454e      	cmp	r6, r9
 80151c4:	f43f af65 	beq.w	8015092 <dns_recv+0x22>
  return (u16_t)(response_offset + 1);
 80151c8:	f106 0a01 	add.w	sl, r6, #1
 80151cc:	fa1f fa8a 	uxth.w	sl, sl
        if (res_idx == 0xFFFF) {
 80151d0:	45ca      	cmp	sl, r9
 80151d2:	f43f af5e 	beq.w	8015092 <dns_recv+0x22>
        if (pbuf_copy_partial(p, &qry, SIZEOF_DNS_QUERY, res_idx) != SIZEOF_DNS_QUERY) {
 80151d6:	4653      	mov	r3, sl
 80151d8:	2204      	movs	r2, #4
 80151da:	a904      	add	r1, sp, #16
 80151dc:	4620      	mov	r0, r4
 80151de:	f001 fe23 	bl	8016e28 <pbuf_copy_partial>
 80151e2:	2804      	cmp	r0, #4
 80151e4:	f47f af55 	bne.w	8015092 <dns_recv+0x22>
        if ((qry.cls != PP_HTONS(DNS_RRCLASS_IN)) ||
 80151e8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80151ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80151f0:	f47f af4f 	bne.w	8015092 <dns_recv+0x22>
            (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
 80151f4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
        if (res_idx + SIZEOF_DNS_QUERY > 0xFFFF) {
 80151f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80151fc:	f47f af49 	bne.w	8015092 <dns_recv+0x22>
 8015200:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8015204:	459a      	cmp	sl, r3
 8015206:	f63f af44 	bhi.w	8015092 <dns_recv+0x22>
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 801520a:	f89d 301b 	ldrb.w	r3, [sp, #27]
        res_idx = (u16_t)(res_idx + SIZEOF_DNS_QUERY);
 801520e:	3605      	adds	r6, #5
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 8015210:	071b      	lsls	r3, r3, #28
        res_idx = (u16_t)(res_idx + SIZEOF_DNS_QUERY);
 8015212:	b2b6      	uxth	r6, r6
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 8015214:	d04d      	beq.n	80152b2 <dns_recv+0x242>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 8015216:	f44f 7388 	mov.w	r3, #272	; 0x110
 801521a:	fb03 8305 	mla	r3, r3, r5, r8
 801521e:	7adb      	ldrb	r3, [r3, #11]
 8015220:	2b00      	cmp	r3, #0
 8015222:	d16e      	bne.n	8015302 <dns_recv+0x292>
 8015224:	4b5c      	ldr	r3, [pc, #368]	; (8015398 <dns_recv+0x328>)
 8015226:	685b      	ldr	r3, [r3, #4]
 8015228:	2b00      	cmp	r3, #0
 801522a:	d06a      	beq.n	8015302 <dns_recv+0x292>
            entry->tmr     = 1;
 801522c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8015230:	f240 3201 	movw	r2, #769	; 0x301
            dns_check_entry(i);
 8015234:	4638      	mov	r0, r7
            entry->tmr     = 1;
 8015236:	fb03 8505 	mla	r5, r3, r5, r8
 801523a:	81aa      	strh	r2, [r5, #12]
            dns_check_entry(i);
 801523c:	f7ff fe90 	bl	8014f60 <dns_check_entry>
            goto ignore_packet;
 8015240:	e727      	b.n	8015092 <dns_recv+0x22>
    n = pbuf_try_get_at(p, offset++);
 8015242:	4656      	mov	r6, sl
  if (offset == 0xFFFF) {
 8015244:	454e      	cmp	r6, r9
 8015246:	f43f af24 	beq.w	8015092 <dns_recv+0x22>
  return (u16_t)(offset + 1);
 801524a:	f106 0a01 	add.w	sl, r6, #1
 801524e:	fa1f fa8a 	uxth.w	sl, sl
            if (res_idx == 0xFFFF) {
 8015252:	45ca      	cmp	sl, r9
 8015254:	f43f af1d 	beq.w	8015092 <dns_recv+0x22>
            if (pbuf_copy_partial(p, &ans, SIZEOF_DNS_ANSWER, res_idx) != SIZEOF_DNS_ANSWER) {
 8015258:	4653      	mov	r3, sl
 801525a:	220a      	movs	r2, #10
 801525c:	a909      	add	r1, sp, #36	; 0x24
 801525e:	4620      	mov	r0, r4
 8015260:	f001 fde2 	bl	8016e28 <pbuf_copy_partial>
            if (res_idx + SIZEOF_DNS_ANSWER > 0xFFFF) {
 8015264:	280a      	cmp	r0, #10
 8015266:	f47f af14 	bne.w	8015092 <dns_recv+0x22>
 801526a:	f64f 73f5 	movw	r3, #65525	; 0xfff5
 801526e:	459a      	cmp	sl, r3
 8015270:	f63f af0f 	bhi.w	8015092 <dns_recv+0x22>
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 8015274:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 8015278:	360b      	adds	r6, #11
 801527a:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 801527e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 8015282:	b2b6      	uxth	r6, r6
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 8015284:	d104      	bne.n	8015290 <dns_recv+0x220>
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
 8015286:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801528a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801528e:	d046      	beq.n	801531e <dns_recv+0x2ae>
            if ((int)(res_idx + lwip_htons(ans.len)) > 0xFFFF) {
 8015290:	f7ff fccc 	bl	8014c2c <lwip_htons>
 8015294:	4430      	add	r0, r6
 8015296:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 801529a:	f6bf aefa 	bge.w	8015092 <dns_recv+0x22>
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 801529e:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
            --nanswers;
 80152a2:	f10b 3bff 	add.w	fp, fp, #4294967295
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 80152a6:	f7ff fcc1 	bl	8014c2c <lwip_htons>
 80152aa:	4406      	add	r6, r0
            --nanswers;
 80152ac:	fa1f fb8b 	uxth.w	fp, fp
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 80152b0:	b2b6      	uxth	r6, r6
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
 80152b2:	f1bb 0f00 	cmp.w	fp, #0
 80152b6:	d024      	beq.n	8015302 <dns_recv+0x292>
 80152b8:	8923      	ldrh	r3, [r4, #8]
 80152ba:	42b3      	cmp	r3, r6
 80152bc:	d812      	bhi.n	80152e4 <dns_recv+0x274>
 80152be:	e020      	b.n	8015302 <dns_recv+0x292>
      offset = (u16_t)(offset + n);
 80152c0:	b29e      	uxth	r6, r3
    if ((n < 0) || (offset == 0)) {
 80152c2:	f1ba 0f00 	cmp.w	sl, #0
 80152c6:	f43f aee4 	beq.w	8015092 <dns_recv+0x22>
    if ((n & 0xc0) == 0xc0) {
 80152ca:	2ac0      	cmp	r2, #192	; 0xc0
    n = pbuf_try_get_at(p, offset);
 80152cc:	4631      	mov	r1, r6
    if ((n & 0xc0) == 0xc0) {
 80152ce:	d0b8      	beq.n	8015242 <dns_recv+0x1d2>
      if (offset + n >= p->tot_len) {
 80152d0:	8922      	ldrh	r2, [r4, #8]
 80152d2:	4293      	cmp	r3, r2
 80152d4:	f6bf aedd 	bge.w	8015092 <dns_recv+0x22>
    n = pbuf_try_get_at(p, offset);
 80152d8:	f001 feb4 	bl	8017044 <pbuf_try_get_at>
    if (n < 0) {
 80152dc:	2800      	cmp	r0, #0
 80152de:	f6ff aed8 	blt.w	8015092 <dns_recv+0x22>
  } while (n != 0);
 80152e2:	d0af      	beq.n	8015244 <dns_recv+0x1d4>
    n = pbuf_try_get_at(p, offset++);
 80152e4:	f106 0a01 	add.w	sl, r6, #1
 80152e8:	4631      	mov	r1, r6
 80152ea:	4620      	mov	r0, r4
 80152ec:	f001 feaa 	bl	8017044 <pbuf_try_get_at>
    if ((n < 0) || (offset == 0)) {
 80152f0:	1e03      	subs	r3, r0, #0
    n = pbuf_try_get_at(p, offset++);
 80152f2:	fa1f fa8a 	uxth.w	sl, sl
    n = pbuf_try_get_at(p, offset);
 80152f6:	4620      	mov	r0, r4
    if ((n & 0xc0) == 0xc0) {
 80152f8:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
      if (offset + n >= p->tot_len) {
 80152fc:	4453      	add	r3, sl
    if ((n < 0) || (offset == 0)) {
 80152fe:	dadf      	bge.n	80152c0 <dns_recv+0x250>
 8015300:	e6c7      	b.n	8015092 <dns_recv+0x22>
        pbuf_free(p);
 8015302:	4620      	mov	r0, r4
 8015304:	f001 fb00 	bl	8016908 <pbuf_free>
        dns_call_found(i, NULL);
 8015308:	4638      	mov	r0, r7
 801530a:	2100      	movs	r1, #0
 801530c:	f7ff fd02 	bl	8014d14 <dns_call_found>
        dns_table[i].state = DNS_STATE_UNUSED;
 8015310:	f44f 7388 	mov.w	r3, #272	; 0x110
 8015314:	2200      	movs	r2, #0
 8015316:	fb03 8505 	mla	r5, r3, r5, r8
 801531a:	72aa      	strb	r2, [r5, #10]
        return;
 801531c:	e6bc      	b.n	8015098 <dns_recv+0x28>
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
 801531e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8015322:	d1b5      	bne.n	8015290 <dns_recv+0x220>
                  if (pbuf_copy_partial(p, &ip4addr, sizeof(ip4_addr_t), res_idx) != sizeof(ip4_addr_t)) {
 8015324:	4633      	mov	r3, r6
 8015326:	2204      	movs	r2, #4
 8015328:	a905      	add	r1, sp, #20
 801532a:	4620      	mov	r0, r4
 801532c:	f001 fd7c 	bl	8016e28 <pbuf_copy_partial>
 8015330:	2804      	cmp	r0, #4
 8015332:	f47f aeae 	bne.w	8015092 <dns_recv+0x22>
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 8015336:	f44f 7388 	mov.w	r3, #272	; 0x110
                  pbuf_free(p);
 801533a:	4620      	mov	r0, r4
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 801533c:	9a05      	ldr	r2, [sp, #20]
 801533e:	fb03 f405 	mul.w	r4, r3, r5
 8015342:	eb08 0604 	add.w	r6, r8, r4
 8015346:	6072      	str	r2, [r6, #4]
                  pbuf_free(p);
 8015348:	f001 fade 	bl	8016908 <pbuf_free>
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
 801534c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801534e:	f7ff fc71 	bl	8014c34 <lwip_htonl>
  if (entry->ttl > DNS_MAX_TTL) {
 8015352:	4b12      	ldr	r3, [pc, #72]	; (801539c <dns_recv+0x32c>)
  dns_call_found(idx, &entry->ipaddr);
 8015354:	9901      	ldr	r1, [sp, #4]
  entry->state = DNS_STATE_DONE;
 8015356:	2203      	movs	r2, #3
  if (entry->ttl > DNS_MAX_TTL) {
 8015358:	4298      	cmp	r0, r3
  entry->ttl = ttl;
 801535a:	f848 0004 	str.w	r0, [r8, r4]
  dns_call_found(idx, &entry->ipaddr);
 801535e:	f101 0104 	add.w	r1, r1, #4
  entry->state = DNS_STATE_DONE;
 8015362:	72b2      	strb	r2, [r6, #10]
    entry->ttl = DNS_MAX_TTL;
 8015364:	bf88      	it	hi
 8015366:	f848 3004 	strhi.w	r3, [r8, r4]
  dns_call_found(idx, &entry->ipaddr);
 801536a:	4638      	mov	r0, r7
 801536c:	4441      	add	r1, r8
 801536e:	f7ff fcd1 	bl	8014d14 <dns_call_found>
  if (entry->ttl == 0) {
 8015372:	f44f 7388 	mov.w	r3, #272	; 0x110
 8015376:	fb03 f505 	mul.w	r5, r3, r5
 801537a:	f858 3005 	ldr.w	r3, [r8, r5]
 801537e:	44a8      	add	r8, r5
 8015380:	2b00      	cmp	r3, #0
 8015382:	f47f ae89 	bne.w	8015098 <dns_recv+0x28>
    if (entry->state == DNS_STATE_DONE) {
 8015386:	f898 200a 	ldrb.w	r2, [r8, #10]
 801538a:	2a03      	cmp	r2, #3
 801538c:	f47f ae84 	bne.w	8015098 <dns_recv+0x28>
      entry->state = DNS_STATE_UNUSED;
 8015390:	f888 300a 	strb.w	r3, [r8, #10]
 8015394:	e680      	b.n	8015098 <dns_recv+0x28>
 8015396:	bf00      	nop
 8015398:	20029e90 	.word	0x20029e90
 801539c:	00093a80 	.word	0x00093a80
 80153a0:	20029e98 	.word	0x20029e98

080153a4 <dns_init>:
}
 80153a4:	4770      	bx	lr
 80153a6:	bf00      	nop

080153a8 <dns_setserver>:
  if (numdns < DNS_MAX_SERVERS) {
 80153a8:	2801      	cmp	r0, #1
 80153aa:	d900      	bls.n	80153ae <dns_setserver+0x6>
}
 80153ac:	4770      	bx	lr
    if (dnsserver != NULL) {
 80153ae:	b121      	cbz	r1, 80153ba <dns_setserver+0x12>
      dns_servers[numdns] = (*dnsserver);
 80153b0:	680a      	ldr	r2, [r1, #0]
 80153b2:	4b05      	ldr	r3, [pc, #20]	; (80153c8 <dns_setserver+0x20>)
 80153b4:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 80153b8:	4770      	bx	lr
      dns_servers[numdns] = *IP_ADDR_ANY;
 80153ba:	4a04      	ldr	r2, [pc, #16]	; (80153cc <dns_setserver+0x24>)
 80153bc:	4b02      	ldr	r3, [pc, #8]	; (80153c8 <dns_setserver+0x20>)
 80153be:	6812      	ldr	r2, [r2, #0]
 80153c0:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
 80153c4:	4770      	bx	lr
 80153c6:	bf00      	nop
 80153c8:	20029e90 	.word	0x20029e90
 80153cc:	0803f8a8 	.word	0x0803f8a8

080153d0 <dns_tmr>:
{
 80153d0:	b508      	push	{r3, lr}
    dns_check_entry(i);
 80153d2:	2000      	movs	r0, #0
 80153d4:	f7ff fdc4 	bl	8014f60 <dns_check_entry>
 80153d8:	2001      	movs	r0, #1
 80153da:	f7ff fdc1 	bl	8014f60 <dns_check_entry>
 80153de:	2002      	movs	r0, #2
 80153e0:	f7ff fdbe 	bl	8014f60 <dns_check_entry>
 80153e4:	2003      	movs	r0, #3
}
 80153e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dns_check_entry(i);
 80153ea:	f7ff bdb9 	b.w	8014f60 <dns_check_entry>
 80153ee:	bf00      	nop

080153f0 <dns_gethostbyname_addrtype>:
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  u8_t is_mdns;
#endif
  /* not initialized or no valid server yet, or invalid addr pointer
   * or invalid hostname or invalid hostname length */
  if ((addr == NULL) ||
 80153f0:	2900      	cmp	r1, #0
 80153f2:	f000 8139 	beq.w	8015668 <dns_gethostbyname_addrtype+0x278>
{
 80153f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((addr == NULL) ||
 80153fa:	fab0 f580 	clz	r5, r0
{
 80153fe:	b083      	sub	sp, #12
 8015400:	4604      	mov	r4, r0
  if ((addr == NULL) ||
 8015402:	096d      	lsrs	r5, r5, #5
 8015404:	2d00      	cmp	r5, #0
 8015406:	f040 808c 	bne.w	8015522 <dns_gethostbyname_addrtype+0x132>
      (!hostname) || (!hostname[0])) {
 801540a:	7806      	ldrb	r6, [r0, #0]
 801540c:	2e00      	cmp	r6, #0
 801540e:	f000 8088 	beq.w	8015522 <dns_gethostbyname_addrtype+0x132>
 8015412:	468b      	mov	fp, r1
 8015414:	461f      	mov	r7, r3
 8015416:	4616      	mov	r6, r2
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) == 0)
  if (dns_pcbs[0] == NULL) {
    return ERR_ARG;
  }
#endif
  hostnamelen = strlen(hostname);
 8015418:	f7ea ff1c 	bl	8000254 <strlen>
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 801541c:	28ff      	cmp	r0, #255	; 0xff
  hostnamelen = strlen(hostname);
 801541e:	4680      	mov	r8, r0
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 8015420:	d87f      	bhi.n	8015522 <dns_gethostbyname_addrtype+0x132>
    return ERR_OK;
  }
#endif /* LWIP_HAVE_LOOPIF */

  /* host name already in octet notation? set ip addr and return ERR_OK */
  if (ipaddr_aton(hostname, addr)) {
 8015422:	4659      	mov	r1, fp
 8015424:	4620      	mov	r0, r4
 8015426:	f009 f985 	bl	801e734 <ip4addr_aton>
 801542a:	b118      	cbz	r0, 8015434 <dns_gethostbyname_addrtype+0x44>
#if LWIP_IPV4 && LWIP_IPV6
    if ((IP_IS_V6(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV4)) ||
        (IP_IS_V4(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV6)))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
    {
      return ERR_OK;
 801542c:	4628      	mov	r0, r5
  }

  /* queue query with specified callback */
  return dns_enqueue(hostname, hostnamelen, found, callback_arg LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)
                     LWIP_DNS_ISMDNS_ARG(is_mdns));
}
 801542e:	b003      	add	sp, #12
 8015430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015434:	f8df a244 	ldr.w	sl, [pc, #580]	; 801567c <dns_gethostbyname_addrtype+0x28c>
  if (ipaddr_aton(hostname, addr)) {
 8015438:	4605      	mov	r5, r0
 801543a:	46d1      	mov	r9, sl
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 801543c:	f899 300a 	ldrb.w	r3, [r9, #10]
 8015440:	2b03      	cmp	r3, #3
 8015442:	d03b      	beq.n	80154bc <dns_gethostbyname_addrtype+0xcc>
 8015444:	3501      	adds	r5, #1
 8015446:	f509 7988 	add.w	r9, r9, #272	; 0x110
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 801544a:	2d04      	cmp	r5, #4
 801544c:	d1f6      	bne.n	801543c <dns_gethostbyname_addrtype+0x4c>
    if (ip_addr_isany_val(dns_servers[0])) {
 801544e:	4b88      	ldr	r3, [pc, #544]	; (8015670 <dns_gethostbyname_addrtype+0x280>)
 8015450:	681b      	ldr	r3, [r3, #0]
 8015452:	2b00      	cmp	r3, #0
 8015454:	f000 80f2 	beq.w	801563c <dns_gethostbyname_addrtype+0x24c>
 8015458:	f8df b220 	ldr.w	fp, [pc, #544]	; 801567c <dns_gethostbyname_addrtype+0x28c>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 801545c:	2500      	movs	r5, #0
 801545e:	4b85      	ldr	r3, [pc, #532]	; (8015674 <dns_gethostbyname_addrtype+0x284>)
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8015460:	f89b 200a 	ldrb.w	r2, [fp, #10]
 8015464:	2a02      	cmp	r2, #2
 8015466:	d045      	beq.n	80154f4 <dns_gethostbyname_addrtype+0x104>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8015468:	3501      	adds	r5, #1
 801546a:	f50b 7b88 	add.w	fp, fp, #272	; 0x110
 801546e:	b2ed      	uxtb	r5, r5
 8015470:	2d04      	cmp	r5, #4
 8015472:	d1f5      	bne.n	8015460 <dns_gethostbyname_addrtype+0x70>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 8015474:	2300      	movs	r3, #0
 8015476:	4a80      	ldr	r2, [pc, #512]	; (8015678 <dns_gethostbyname_addrtype+0x288>)
  lseqi = DNS_TABLE_SIZE;
 8015478:	4629      	mov	r1, r5
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 801547a:	7810      	ldrb	r0, [r2, #0]
  lseq = 0;
 801547c:	469c      	mov	ip, r3
    if (entry->state == DNS_STATE_UNUSED) {
 801547e:	f89a 200a 	ldrb.w	r2, [sl, #10]
 8015482:	fa5f fb83 	uxtb.w	fp, r3
 8015486:	2a00      	cmp	r2, #0
 8015488:	f000 80a9 	beq.w	80155de <dns_gethostbyname_addrtype+0x1ee>
    if (entry->state == DNS_STATE_DONE) {
 801548c:	2a03      	cmp	r2, #3
 801548e:	f103 0301 	add.w	r3, r3, #1
 8015492:	d026      	beq.n	80154e2 <dns_gethostbyname_addrtype+0xf2>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8015494:	2b04      	cmp	r3, #4
 8015496:	f50a 7a88 	add.w	sl, sl, #272	; 0x110
 801549a:	d1f0      	bne.n	801547e <dns_gethostbyname_addrtype+0x8e>
    if ((lseqi >= DNS_TABLE_SIZE) || (dns_table[lseqi].state != DNS_STATE_DONE)) {
 801549c:	2904      	cmp	r1, #4
 801549e:	d008      	beq.n	80154b2 <dns_gethostbyname_addrtype+0xc2>
 80154a0:	eb01 1301 	add.w	r3, r1, r1, lsl #4
 80154a4:	4a75      	ldr	r2, [pc, #468]	; (801567c <dns_gethostbyname_addrtype+0x28c>)
 80154a6:	eb02 1903 	add.w	r9, r2, r3, lsl #4
 80154aa:	f899 300a 	ldrb.w	r3, [r9, #10]
 80154ae:	2b03      	cmp	r3, #3
 80154b0:	d03a      	beq.n	8015528 <dns_gethostbyname_addrtype+0x138>
      return ERR_MEM;
 80154b2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80154b6:	b003      	add	sp, #12
 80154b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0) &&
 80154bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80154c0:	f109 0110 	add.w	r1, r9, #16
 80154c4:	4620      	mov	r0, r4
 80154c6:	f7ff fc09 	bl	8014cdc <lwip_strnicmp>
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 80154ca:	2800      	cmp	r0, #0
 80154cc:	d1ba      	bne.n	8015444 <dns_gethostbyname_addrtype+0x54>
        ip_addr_copy(*addr, dns_table[i].ipaddr);
 80154ce:	4b6b      	ldr	r3, [pc, #428]	; (801567c <dns_gethostbyname_addrtype+0x28c>)
 80154d0:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80154d4:	eb03 1905 	add.w	r9, r3, r5, lsl #4
 80154d8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80154dc:	f8cb 3000 	str.w	r3, [fp]
 80154e0:	e7a5      	b.n	801542e <dns_gethostbyname_addrtype+0x3e>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 80154e2:	f89a 200e 	ldrb.w	r2, [sl, #14]
 80154e6:	1a82      	subs	r2, r0, r2
 80154e8:	b2d2      	uxtb	r2, r2
      if (age > lseq) {
 80154ea:	4562      	cmp	r2, ip
 80154ec:	d9d2      	bls.n	8015494 <dns_gethostbyname_addrtype+0xa4>
 80154ee:	4659      	mov	r1, fp
 80154f0:	4694      	mov	ip, r2
 80154f2:	e7cf      	b.n	8015494 <dns_gethostbyname_addrtype+0xa4>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0)) {
 80154f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80154f8:	f10b 0110 	add.w	r1, fp, #16
 80154fc:	4620      	mov	r0, r4
 80154fe:	9300      	str	r3, [sp, #0]
 8015500:	f7ff fbec 	bl	8014cdc <lwip_strnicmp>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8015504:	9b00      	ldr	r3, [sp, #0]
 8015506:	2800      	cmp	r0, #0
 8015508:	d1ae      	bne.n	8015468 <dns_gethostbyname_addrtype+0x78>
        if (dns_requests[r].found == 0) {
 801550a:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 801550e:	3001      	adds	r0, #1
 8015510:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015514:	0092      	lsls	r2, r2, #2
 8015516:	2900      	cmp	r1, #0
 8015518:	f000 8095 	beq.w	8015646 <dns_gethostbyname_addrtype+0x256>
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 801551c:	2804      	cmp	r0, #4
 801551e:	d1f4      	bne.n	801550a <dns_gethostbyname_addrtype+0x11a>
 8015520:	e7a2      	b.n	8015468 <dns_gethostbyname_addrtype+0x78>
    return ERR_ARG;
 8015522:	f06f 000f 	mvn.w	r0, #15
 8015526:	e782      	b.n	801542e <dns_gethostbyname_addrtype+0x3e>
      entry = &dns_table[i];
 8015528:	468b      	mov	fp, r1
 801552a:	f8cd 9000 	str.w	r9, [sp]
 801552e:	f04f 0900 	mov.w	r9, #0
    if (dns_requests[r].found == NULL) {
 8015532:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8015536:	4b4f      	ldr	r3, [pc, #316]	; (8015674 <dns_gethostbyname_addrtype+0x284>)
 8015538:	eb0a 0209 	add.w	r2, sl, r9
 801553c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015540:	0092      	lsls	r2, r2, #2
 8015542:	b12b      	cbz	r3, 8015550 <dns_gethostbyname_addrtype+0x160>
 8015544:	f109 0901 	add.w	r9, r9, #1
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8015548:	f1b9 0f04 	cmp.w	r9, #4
 801554c:	d1f1      	bne.n	8015532 <dns_gethostbyname_addrtype+0x142>
 801554e:	e7b0      	b.n	80154b2 <dns_gethostbyname_addrtype+0xc2>
 8015550:	4611      	mov	r1, r2
  req->dns_table_idx = i;
 8015552:	4a48      	ldr	r2, [pc, #288]	; (8015674 <dns_gethostbyname_addrtype+0x284>)
  entry->state = DNS_STATE_NEW;
 8015554:	f04f 0e01 	mov.w	lr, #1
  req->dns_table_idx = i;
 8015558:	eb02 0c01 	add.w	ip, r2, r1
 801555c:	9101      	str	r1, [sp, #4]
  MEMCPY(entry->name, name, namelen);
 801555e:	4621      	mov	r1, r4
  entry->seqno = dns_seqno;
 8015560:	9c00      	ldr	r4, [sp, #0]
  req->found = found;
 8015562:	4a44      	ldr	r2, [pc, #272]	; (8015674 <dns_gethostbyname_addrtype+0x284>)
  entry->seqno = dns_seqno;
 8015564:	73a0      	strb	r0, [r4, #14]
  req->found = found;
 8015566:	9801      	ldr	r0, [sp, #4]
  req->arg   = callback_arg;
 8015568:	f8cc 7004 	str.w	r7, [ip, #4]
  req->found = found;
 801556c:	5016      	str	r6, [r2, r0]
  MEMCPY(entry->name, name, namelen);
 801556e:	4626      	mov	r6, r4
 8015570:	4620      	mov	r0, r4
 8015572:	4642      	mov	r2, r8
  entry->state = DNS_STATE_NEW;
 8015574:	4637      	mov	r7, r6
 8015576:	f886 e00a 	strb.w	lr, [r6, #10]
 801557a:	4e41      	ldr	r6, [pc, #260]	; (8015680 <dns_gethostbyname_addrtype+0x290>)
  MEMCPY(entry->name, name, namelen);
 801557c:	3010      	adds	r0, #16
  req->dns_table_idx = i;
 801557e:	f88c b008 	strb.w	fp, [ip, #8]
  entry->name[namelen] = 0;
 8015582:	461c      	mov	r4, r3
 8015584:	9301      	str	r3, [sp, #4]
 8015586:	44b8      	add	r8, r7
  MEMCPY(entry->name, name, namelen);
 8015588:	f00a fb71 	bl	801fc6e <memcpy>
  entry->name[namelen] = 0;
 801558c:	9b01      	ldr	r3, [sp, #4]
 801558e:	4632      	mov	r2, r6
 8015590:	f888 3010 	strb.w	r3, [r8, #16]
    if (dns_pcbs[i] == NULL) {
 8015594:	f852 3b04 	ldr.w	r3, [r2], #4
 8015598:	b2e7      	uxtb	r7, r4
 801559a:	b33b      	cbz	r3, 80155ec <dns_gethostbyname_addrtype+0x1fc>
 801559c:	3401      	adds	r4, #1
  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 801559e:	2c04      	cmp	r4, #4
 80155a0:	d1f8      	bne.n	8015594 <dns_gethostbyname_addrtype+0x1a4>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 80155a2:	4938      	ldr	r1, [pc, #224]	; (8015684 <dns_gethostbyname_addrtype+0x294>)
 80155a4:	780f      	ldrb	r7, [r1, #0]
 80155a6:	3701      	adds	r7, #1
 80155a8:	b2ff      	uxtb	r7, r7
    if (idx >= DNS_MAX_SOURCE_PORTS) {
 80155aa:	2f03      	cmp	r7, #3
 80155ac:	463b      	mov	r3, r7
 80155ae:	d901      	bls.n	80155b4 <dns_gethostbyname_addrtype+0x1c4>
 80155b0:	2700      	movs	r7, #0
      idx = 0;
 80155b2:	463b      	mov	r3, r7
    if (dns_pcbs[idx] != NULL) {
 80155b4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 80155b8:	1c7a      	adds	r2, r7, #1
 80155ba:	3d01      	subs	r5, #1
    if (dns_pcbs[idx] != NULL) {
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d140      	bne.n	8015642 <dns_gethostbyname_addrtype+0x252>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 80155c0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 80155c4:	b2d7      	uxtb	r7, r2
 80155c6:	d1f0      	bne.n	80155aa <dns_gethostbyname_addrtype+0x1ba>
    entry->state = DNS_STATE_UNUSED;
 80155c8:	9a00      	ldr	r2, [sp, #0]
    req->found = NULL;
 80155ca:	44d1      	add	r9, sl
  entry->pcb_idx = dns_alloc_pcb();
 80155cc:	2304      	movs	r3, #4
    req->found = NULL;
 80155ce:	4929      	ldr	r1, [pc, #164]	; (8015674 <dns_gethostbyname_addrtype+0x284>)
    entry->state = DNS_STATE_UNUSED;
 80155d0:	7295      	strb	r5, [r2, #10]
    return ERR_MEM;
 80155d2:	f04f 30ff 	mov.w	r0, #4294967295
    req->found = NULL;
 80155d6:	f841 5029 	str.w	r5, [r1, r9, lsl #2]
  entry->pcb_idx = dns_alloc_pcb();
 80155da:	73d3      	strb	r3, [r2, #15]
 80155dc:	e727      	b.n	801542e <dns_gethostbyname_addrtype+0x3e>
    entry = &dns_table[i];
 80155de:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80155e2:	4a26      	ldr	r2, [pc, #152]	; (801567c <dns_gethostbyname_addrtype+0x28c>)
 80155e4:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 80155e8:	9300      	str	r3, [sp, #0]
 80155ea:	e7a0      	b.n	801552e <dns_gethostbyname_addrtype+0x13e>
  pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 80155ec:	202e      	movs	r0, #46	; 0x2e
 80155ee:	f006 fce5 	bl	801bfbc <udp_new_ip_type>
  if (pcb == NULL) {
 80155f2:	4680      	mov	r8, r0
 80155f4:	b3a8      	cbz	r0, 8015662 <dns_gethostbyname_addrtype+0x272>
    u16_t port = (u16_t)DNS_RAND_TXID();
 80155f6:	f00b fb6f 	bl	8020cd8 <rand>
 80155fa:	b282      	uxth	r2, r0
    if (DNS_PORT_ALLOWED(port)) {
 80155fc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8015600:	d3f9      	bcc.n	80155f6 <dns_gethostbyname_addrtype+0x206>
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 8015602:	4921      	ldr	r1, [pc, #132]	; (8015688 <dns_gethostbyname_addrtype+0x298>)
 8015604:	4640      	mov	r0, r8
 8015606:	f006 fa63 	bl	801bad0 <udp_bind>
  } while (err == ERR_USE);
 801560a:	f110 0f08 	cmn.w	r0, #8
 801560e:	d0f2      	beq.n	80155f6 <dns_gethostbyname_addrtype+0x206>
  if (err != ERR_OK) {
 8015610:	bb00      	cbnz	r0, 8015654 <dns_gethostbyname_addrtype+0x264>
  udp_recv(pcb, dns_recv, NULL);
 8015612:	4602      	mov	r2, r0
 8015614:	491d      	ldr	r1, [pc, #116]	; (801568c <dns_gethostbyname_addrtype+0x29c>)
 8015616:	4640      	mov	r0, r8
 8015618:	f006 fc7e 	bl	801bf18 <udp_recv>
      dns_last_pcb_idx = i;
 801561c:	4b19      	ldr	r3, [pc, #100]	; (8015684 <dns_gethostbyname_addrtype+0x294>)
    dns_pcbs[i] = dns_alloc_random_port();
 801561e:	f846 8024 	str.w	r8, [r6, r4, lsl #2]
      dns_last_pcb_idx = i;
 8015622:	701f      	strb	r7, [r3, #0]
  dns_seqno++;
 8015624:	4a14      	ldr	r2, [pc, #80]	; (8015678 <dns_gethostbyname_addrtype+0x288>)
  dns_check_entry(i);
 8015626:	4658      	mov	r0, fp
  entry->pcb_idx = dns_alloc_pcb();
 8015628:	9900      	ldr	r1, [sp, #0]
  dns_seqno++;
 801562a:	7813      	ldrb	r3, [r2, #0]
  entry->pcb_idx = dns_alloc_pcb();
 801562c:	73cf      	strb	r7, [r1, #15]
  dns_seqno++;
 801562e:	3301      	adds	r3, #1
 8015630:	7013      	strb	r3, [r2, #0]
  dns_check_entry(i);
 8015632:	f7ff fc95 	bl	8014f60 <dns_check_entry>
  return ERR_INPROGRESS;
 8015636:	f06f 0004 	mvn.w	r0, #4
 801563a:	e6f8      	b.n	801542e <dns_gethostbyname_addrtype+0x3e>
      return ERR_VAL;
 801563c:	f06f 0005 	mvn.w	r0, #5
 8015640:	e6f5      	b.n	801542e <dns_gethostbyname_addrtype+0x3e>
      dns_last_pcb_idx = idx;
 8015642:	700f      	strb	r7, [r1, #0]
 8015644:	e7ee      	b.n	8015624 <dns_gethostbyname_addrtype+0x234>
          dns_requests[r].found = found;
 8015646:	1899      	adds	r1, r3, r2
 8015648:	509e      	str	r6, [r3, r2]
          return ERR_INPROGRESS;
 801564a:	f06f 0004 	mvn.w	r0, #4
          dns_requests[r].arg = callback_arg;
 801564e:	604f      	str	r7, [r1, #4]
          dns_requests[r].dns_table_idx = i;
 8015650:	720d      	strb	r5, [r1, #8]
 8015652:	e6ec      	b.n	801542e <dns_gethostbyname_addrtype+0x3e>
    udp_remove(pcb);
 8015654:	4640      	mov	r0, r8
 8015656:	f006 fc71 	bl	801bf3c <udp_remove>
    dns_pcbs[i] = dns_alloc_random_port();
 801565a:	2300      	movs	r3, #0
 801565c:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
 8015660:	e79f      	b.n	80155a2 <dns_gethostbyname_addrtype+0x1b2>
 8015662:	f846 8024 	str.w	r8, [r6, r4, lsl #2]
 8015666:	e79c      	b.n	80155a2 <dns_gethostbyname_addrtype+0x1b2>
    return ERR_ARG;
 8015668:	f06f 000f 	mvn.w	r0, #15
}
 801566c:	4770      	bx	lr
 801566e:	bf00      	nop
 8015670:	20029e90 	.word	0x20029e90
 8015674:	20029e5c 	.word	0x20029e5c
 8015678:	20029e8c 	.word	0x20029e8c
 801567c:	20029e98 	.word	0x20029e98
 8015680:	20029e4c 	.word	0x20029e4c
 8015684:	20029e48 	.word	0x20029e48
 8015688:	0803f8a8 	.word	0x0803f8a8
 801568c:	08015071 	.word	0x08015071

08015690 <dns_gethostbyname>:
{
 8015690:	b510      	push	{r4, lr}
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
 8015692:	2400      	movs	r4, #0
{
 8015694:	b082      	sub	sp, #8
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
 8015696:	9400      	str	r4, [sp, #0]
 8015698:	f7ff feaa 	bl	80153f0 <dns_gethostbyname_addrtype>
}
 801569c:	b002      	add	sp, #8
 801569e:	bd10      	pop	{r4, pc}

080156a0 <lwip_standard_chksum>:
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 80156a0:	2300      	movs	r3, #0
{
 80156a2:	b470      	push	{r4, r5, r6}
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80156a4:	4299      	cmp	r1, r3
{
 80156a6:	b083      	sub	sp, #12
  int odd = ((mem_ptr_t)pb & 1);
 80156a8:	f000 0601 	and.w	r6, r0, #1
  u16_t t = 0;
 80156ac:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (odd && len > 0) {
 80156b0:	dd05      	ble.n	80156be <lwip_standard_chksum+0x1e>
 80156b2:	b126      	cbz	r6, 80156be <lwip_standard_chksum+0x1e>
    ((u8_t *)&t)[1] = *pb++;
 80156b4:	7803      	ldrb	r3, [r0, #0]
    len--;
 80156b6:	3901      	subs	r1, #1
    ((u8_t *)&t)[1] = *pb++;
 80156b8:	3001      	adds	r0, #1
 80156ba:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 80156be:	2901      	cmp	r1, #1
 80156c0:	dd26      	ble.n	8015710 <lwip_standard_chksum+0x70>
 80156c2:	3902      	subs	r1, #2
  u32_t sum = 0;
 80156c4:	2300      	movs	r3, #0
 80156c6:	084d      	lsrs	r5, r1, #1
 80156c8:	1c6c      	adds	r4, r5, #1
 80156ca:	eb00 0444 	add.w	r4, r0, r4, lsl #1
    sum += *ps++;
 80156ce:	f830 2b02 	ldrh.w	r2, [r0], #2
  while (len > 1) {
 80156d2:	4284      	cmp	r4, r0
    sum += *ps++;
 80156d4:	4413      	add	r3, r2
  while (len > 1) {
 80156d6:	d1fa      	bne.n	80156ce <lwip_standard_chksum+0x2e>
 80156d8:	ebc5 75c5 	rsb	r5, r5, r5, lsl #31
 80156dc:	eb01 0145 	add.w	r1, r1, r5, lsl #1
    len -= 2;
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 80156e0:	2901      	cmp	r1, #1
 80156e2:	d102      	bne.n	80156ea <lwip_standard_chksum+0x4a>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80156e4:	7802      	ldrb	r2, [r0, #0]
 80156e6:	f88d 2006 	strb.w	r2, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
 80156ea:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80156ee:	4403      	add	r3, r0

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 80156f0:	b298      	uxth	r0, r3
 80156f2:	eb00 4313 	add.w	r3, r0, r3, lsr #16
  sum = FOLD_U32T(sum);
 80156f6:	b298      	uxth	r0, r3
 80156f8:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 80156fc:	b126      	cbz	r6, 8015708 <lwip_standard_chksum+0x68>
    sum = SWAP_BYTES_IN_WORD(sum);
 80156fe:	0203      	lsls	r3, r0, #8
 8015700:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8015704:	b29b      	uxth	r3, r3
 8015706:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 8015708:	b280      	uxth	r0, r0
 801570a:	b003      	add	sp, #12
 801570c:	bc70      	pop	{r4, r5, r6}
 801570e:	4770      	bx	lr
  u32_t sum = 0;
 8015710:	2300      	movs	r3, #0
 8015712:	e7e5      	b.n	80156e0 <lwip_standard_chksum+0x40>

08015714 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 8015714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015718:	9d06      	ldr	r5, [sp, #24]
 801571a:	4617      	mov	r7, r2
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 801571c:	681c      	ldr	r4, [r3, #0]
{
 801571e:	4688      	mov	r8, r1
  acc = (addr & 0xffffUL);
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
  addr = ip4_addr_get_u32(dest);
 8015720:	682b      	ldr	r3, [r5, #0]
  acc = (u32_t)(acc + (addr & 0xffffUL));
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 8015722:	0c1a      	lsrs	r2, r3, #16
 8015724:	fa12 f383 	uxtah	r3, r2, r3
 8015728:	fa13 f384 	uxtah	r3, r3, r4
 801572c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 8015730:	b29c      	uxth	r4, r3
 8015732:	eb04 4313 	add.w	r3, r4, r3, lsr #16
  acc = FOLD_U32T(acc);
 8015736:	b29c      	uxth	r4, r3
 8015738:	eb04 4413 	add.w	r4, r4, r3, lsr #16
  for (q = p; q != NULL; q = q->next) {
 801573c:	b1f8      	cbz	r0, 801577e <inet_chksum_pseudo+0x6a>
 801573e:	4605      	mov	r5, r0
  int swapped = 0;
 8015740:	2600      	movs	r6, #0
    acc += LWIP_CHKSUM(q->payload, q->len);
 8015742:	8969      	ldrh	r1, [r5, #10]
 8015744:	6868      	ldr	r0, [r5, #4]
 8015746:	f7ff ffab 	bl	80156a0 <lwip_standard_chksum>
 801574a:	4404      	add	r4, r0
    if (q->len % 2 != 0) {
 801574c:	896b      	ldrh	r3, [r5, #10]
    acc = FOLD_U32T(acc);
 801574e:	b2a0      	uxth	r0, r4
    if (q->len % 2 != 0) {
 8015750:	f013 0f01 	tst.w	r3, #1
    acc = FOLD_U32T(acc);
 8015754:	eb00 4414 	add.w	r4, r0, r4, lsr #16
      acc = SWAP_BYTES_IN_WORD(acc);
 8015758:	ea4f 2004 	mov.w	r0, r4, lsl #8
 801575c:	f3c4 2307 	ubfx	r3, r4, #8, #8
    if (q->len % 2 != 0) {
 8015760:	d004      	beq.n	801576c <inet_chksum_pseudo+0x58>
      acc = SWAP_BYTES_IN_WORD(acc);
 8015762:	b280      	uxth	r0, r0
 8015764:	f086 0601 	eor.w	r6, r6, #1
 8015768:	ea40 0403 	orr.w	r4, r0, r3
  for (q = p; q != NULL; q = q->next) {
 801576c:	682d      	ldr	r5, [r5, #0]
 801576e:	2d00      	cmp	r5, #0
 8015770:	d1e7      	bne.n	8015742 <inet_chksum_pseudo+0x2e>
  if (swapped) {
 8015772:	b126      	cbz	r6, 801577e <inet_chksum_pseudo+0x6a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8015774:	0223      	lsls	r3, r4, #8
 8015776:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801577a:	b29b      	uxth	r3, r3
 801577c:	431c      	orrs	r4, r3
  acc += (u32_t)lwip_htons((u16_t)proto);
 801577e:	4640      	mov	r0, r8
 8015780:	f7ff fa54 	bl	8014c2c <lwip_htons>
 8015784:	4605      	mov	r5, r0
  acc += (u32_t)lwip_htons(proto_len);
 8015786:	4638      	mov	r0, r7
 8015788:	f7ff fa50 	bl	8014c2c <lwip_htons>
 801578c:	4428      	add	r0, r5
 801578e:	4404      	add	r4, r0
  acc = FOLD_U32T(acc);
 8015790:	b2a0      	uxth	r0, r4
 8015792:	eb00 4414 	add.w	r4, r0, r4, lsr #16
  acc = FOLD_U32T(acc);
 8015796:	b2a0      	uxth	r0, r4
 8015798:	eb00 4014 	add.w	r0, r0, r4, lsr #16
  return (u16_t)~(acc & 0xffffUL);
 801579c:	43c0      	mvns	r0, r0

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
}
 801579e:	b280      	uxth	r0, r0
 80157a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080157a4 <ip_chksum_pseudo>:
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 80157a4:	f7ff bfb6 	b.w	8015714 <inet_chksum_pseudo>

080157a8 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80157a8:	b508      	push	{r3, lr}
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 80157aa:	f7ff ff79 	bl	80156a0 <lwip_standard_chksum>
 80157ae:	43c0      	mvns	r0, r0
}
 80157b0:	b280      	uxth	r0, r0
 80157b2:	bd08      	pop	{r3, pc}

080157b4 <inet_chksum_pbuf>:
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;

  acc = 0;
  for (q = p; q != NULL; q = q->next) {
 80157b4:	b320      	cbz	r0, 8015800 <inet_chksum_pbuf+0x4c>
{
 80157b6:	b570      	push	{r4, r5, r6, lr}
  int swapped = 0;
 80157b8:	2600      	movs	r6, #0
 80157ba:	4605      	mov	r5, r0
  acc = 0;
 80157bc:	4634      	mov	r4, r6
    acc += LWIP_CHKSUM(q->payload, q->len);
 80157be:	8969      	ldrh	r1, [r5, #10]
 80157c0:	6868      	ldr	r0, [r5, #4]
 80157c2:	f7ff ff6d 	bl	80156a0 <lwip_standard_chksum>
 80157c6:	4404      	add	r4, r0
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
 80157c8:	896b      	ldrh	r3, [r5, #10]
    acc = FOLD_U32T(acc);
 80157ca:	b2a0      	uxth	r0, r4
    if (q->len % 2 != 0) {
 80157cc:	f013 0f01 	tst.w	r3, #1
    acc = FOLD_U32T(acc);
 80157d0:	eb00 4414 	add.w	r4, r0, r4, lsr #16
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
 80157d4:	ea4f 2004 	mov.w	r0, r4, lsl #8
 80157d8:	f3c4 2307 	ubfx	r3, r4, #8, #8
    if (q->len % 2 != 0) {
 80157dc:	d004      	beq.n	80157e8 <inet_chksum_pbuf+0x34>
      acc = SWAP_BYTES_IN_WORD(acc);
 80157de:	b280      	uxth	r0, r0
 80157e0:	f086 0601 	eor.w	r6, r6, #1
 80157e4:	ea40 0403 	orr.w	r4, r0, r3
  for (q = p; q != NULL; q = q->next) {
 80157e8:	682d      	ldr	r5, [r5, #0]
 80157ea:	2d00      	cmp	r5, #0
 80157ec:	d1e7      	bne.n	80157be <inet_chksum_pbuf+0xa>
    }
  }

  if (swapped) {
 80157ee:	b126      	cbz	r6, 80157fa <inet_chksum_pbuf+0x46>
    acc = SWAP_BYTES_IN_WORD(acc);
 80157f0:	0220      	lsls	r0, r4, #8
 80157f2:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80157f6:	b280      	uxth	r0, r0
 80157f8:	4304      	orrs	r4, r0
 80157fa:	43e4      	mvns	r4, r4
 80157fc:	b2a0      	uxth	r0, r4
  }
  return (u16_t)~(acc & 0xffffUL);
}
 80157fe:	bd70      	pop	{r4, r5, r6, pc}
  for (q = p; q != NULL; q = q->next) {
 8015800:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 8015804:	4770      	bx	lr
 8015806:	bf00      	nop

08015808 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8015808:	b508      	push	{r3, lr}
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
 801580a:	f001 fcd3 	bl	80171b4 <stats_init>
#if !NO_SYS
  sys_init();
 801580e:	f009 fded 	bl	801f3ec <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8015812:	f000 f97b 	bl	8015b0c <mem_init>
  memp_init();
 8015816:	f000 fd5d 	bl	80162d4 <memp_init>
  pbuf_init();
  netif_init();
 801581a:	f000 fe21 	bl	8016460 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801581e:	f006 f829 	bl	801b874 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8015822:	f001 fd31 	bl	8017288 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 8015826:	f7ff fdbd 	bl	80153a4 <dns_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 801582a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 801582e:	f005 bfb3 	b.w	801b798 <sys_timeouts_init>
 8015832:	bf00      	nop

08015834 <mem_link_valid>:
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
  nmem = ptr_to_mem(mem->next);
  pmem = ptr_to_mem(mem->prev);
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8015834:	f642 63e0 	movw	r3, #12000	; 0x2ee0
  pmem = ptr_to_mem(mem->prev);
 8015838:	8841      	ldrh	r1, [r0, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801583a:	4299      	cmp	r1, r3
{
 801583c:	b430      	push	{r4, r5}
  nmem = ptr_to_mem(mem->next);
 801583e:	8804      	ldrh	r4, [r0, #0]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8015840:	d804      	bhi.n	801584c <mem_link_valid+0x18>
 8015842:	429c      	cmp	r4, r3
 8015844:	bf94      	ite	ls
 8015846:	2300      	movls	r3, #0
 8015848:	2301      	movhi	r3, #1
 801584a:	b113      	cbz	r3, 8015852 <mem_link_valid+0x1e>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
    return 0;
 801584c:	2000      	movs	r0, #0
  }
  return 1;
}
 801584e:	bc30      	pop	{r4, r5}
 8015850:	4770      	bx	lr
  return (mem_size_t)((u8_t *)mem - ram);
 8015852:	4a0b      	ldr	r2, [pc, #44]	; (8015880 <mem_link_valid+0x4c>)
 8015854:	6815      	ldr	r5, [r2, #0]
 8015856:	1b40      	subs	r0, r0, r5
 8015858:	b282      	uxth	r2, r0
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801585a:	4291      	cmp	r1, r2
 801585c:	d002      	beq.n	8015864 <mem_link_valid+0x30>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801585e:	5a69      	ldrh	r1, [r5, r1]
 8015860:	4291      	cmp	r1, r2
 8015862:	d1f3      	bne.n	801584c <mem_link_valid+0x18>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8015864:	4b07      	ldr	r3, [pc, #28]	; (8015884 <mem_link_valid+0x50>)
  return (struct mem *)(void *)&ram[ptr];
 8015866:	442c      	add	r4, r5
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8015868:	681b      	ldr	r3, [r3, #0]
 801586a:	42a3      	cmp	r3, r4
 801586c:	d006      	beq.n	801587c <mem_link_valid+0x48>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801586e:	8860      	ldrh	r0, [r4, #2]
 8015870:	1a80      	subs	r0, r0, r2
 8015872:	fab0 f080 	clz	r0, r0
}
 8015876:	bc30      	pop	{r4, r5}
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8015878:	0940      	lsrs	r0, r0, #5
}
 801587a:	4770      	bx	lr
  return 1;
 801587c:	2001      	movs	r0, #1
 801587e:	e7e6      	b.n	801584e <mem_link_valid+0x1a>
 8015880:	2002a2e4 	.word	0x2002a2e4
 8015884:	2002a2e8 	.word	0x2002a2e8

08015888 <mem_sanity>:

#if MEM_SANITY_CHECK
static void
mem_sanity(void)
{
 8015888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  struct mem *mem;
  u8_t last_used;

  /* begin with first element here */
  mem = (struct mem *)ram;
 801588c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8015a40 <mem_sanity+0x1b8>
 8015890:	f8d8 6000 	ldr.w	r6, [r8]
  LWIP_ASSERT("heap element used valid", (mem->used == 0) || (mem->used == 1));
 8015894:	7935      	ldrb	r5, [r6, #4]
 8015896:	2d01      	cmp	r5, #1
 8015898:	d907      	bls.n	80158aa <mem_sanity+0x22>
 801589a:	4b60      	ldr	r3, [pc, #384]	; (8015a1c <mem_sanity+0x194>)
 801589c:	f240 223f 	movw	r2, #575	; 0x23f
 80158a0:	495f      	ldr	r1, [pc, #380]	; (8015a20 <mem_sanity+0x198>)
 80158a2:	4860      	ldr	r0, [pc, #384]	; (8015a24 <mem_sanity+0x19c>)
 80158a4:	f00b f988 	bl	8020bb8 <iprintf>
 80158a8:	7935      	ldrb	r5, [r6, #4]
  last_used = mem->used;
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == 0);
 80158aa:	8873      	ldrh	r3, [r6, #2]
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	f040 80ac 	bne.w	8015a0a <mem_sanity+0x182>
  LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 80158b2:	8834      	ldrh	r4, [r6, #0]
 80158b4:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 80158b8:	429c      	cmp	r4, r3
 80158ba:	f200 809d 	bhi.w	80159f8 <mem_sanity+0x170>
  return (struct mem *)(void *)&ram[ptr];
 80158be:	f8d8 3000 	ldr.w	r3, [r8]
 80158c2:	441c      	add	r4, r3
  LWIP_ASSERT("heap element next ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->next) == ptr_to_mem(mem->next)));

  /* check all elements before the end of the heap */
  for (mem = ptr_to_mem(mem->next);
 80158c4:	429c      	cmp	r4, r3
 80158c6:	d965      	bls.n	8015994 <mem_sanity+0x10c>
       ((u8_t *)mem > ram) && (mem < ram_end);
 80158c8:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8015a44 <mem_sanity+0x1bc>
 80158cc:	f8d9 2000 	ldr.w	r2, [r9]
 80158d0:	4294      	cmp	r4, r2
 80158d2:	d25f      	bcs.n	8015994 <mem_sanity+0x10c>
       mem = ptr_to_mem(mem->next)) {
    LWIP_ASSERT("heap element aligned", LWIP_MEM_ALIGN(mem) == mem);
 80158d4:	4f51      	ldr	r7, [pc, #324]	; (8015a1c <mem_sanity+0x194>)
 80158d6:	f8df a170 	ldr.w	sl, [pc, #368]	; 8015a48 <mem_sanity+0x1c0>
 80158da:	4e52      	ldr	r6, [pc, #328]	; (8015a24 <mem_sanity+0x19c>)
 80158dc:	e017      	b.n	801590e <mem_sanity+0x86>
    LWIP_ASSERT("heap element prev ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->prev) == ptr_to_mem(mem->prev)));
    LWIP_ASSERT("heap element next ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->next) == ptr_to_mem(mem->next)));

    if (last_used == 0) {
      /* 2 unused elements in a row? */
      LWIP_ASSERT("heap element unused?", mem->used == 1);
 80158de:	2b01      	cmp	r3, #1
 80158e0:	d006      	beq.n	80158f0 <mem_sanity+0x68>
 80158e2:	463b      	mov	r3, r7
 80158e4:	f240 2251 	movw	r2, #593	; 0x251
 80158e8:	494f      	ldr	r1, [pc, #316]	; (8015a28 <mem_sanity+0x1a0>)
 80158ea:	4630      	mov	r0, r6
 80158ec:	f00b f964 	bl	8020bb8 <iprintf>
    } else {
      LWIP_ASSERT("heap element unused member", (mem->used == 0) || (mem->used == 1));
    }

    LWIP_ASSERT("heap element link valid", mem_link_valid(mem));
 80158f0:	4620      	mov	r0, r4
 80158f2:	f7ff ff9f 	bl	8015834 <mem_link_valid>
 80158f6:	b388      	cbz	r0, 801595c <mem_sanity+0xd4>
  return (struct mem *)(void *)&ram[ptr];
 80158f8:	f8d8 3000 	ldr.w	r3, [r8]
 80158fc:	8822      	ldrh	r2, [r4, #0]

    /* used/unused altering */
    last_used = mem->used;
 80158fe:	7925      	ldrb	r5, [r4, #4]
  return (struct mem *)(void *)&ram[ptr];
 8015900:	189c      	adds	r4, r3, r2
  for (mem = ptr_to_mem(mem->next);
 8015902:	42a3      	cmp	r3, r4
 8015904:	d246      	bcs.n	8015994 <mem_sanity+0x10c>
       ((u8_t *)mem > ram) && (mem < ram_end);
 8015906:	f8d9 2000 	ldr.w	r2, [r9]
 801590a:	42a2      	cmp	r2, r4
 801590c:	d942      	bls.n	8015994 <mem_sanity+0x10c>
    LWIP_ASSERT("heap element aligned", LWIP_MEM_ALIGN(mem) == mem);
 801590e:	1ce3      	adds	r3, r4, #3
 8015910:	f023 0303 	bic.w	r3, r3, #3
 8015914:	429c      	cmp	r4, r3
 8015916:	d006      	beq.n	8015926 <mem_sanity+0x9e>
 8015918:	463b      	mov	r3, r7
 801591a:	f240 2249 	movw	r2, #585	; 0x249
 801591e:	4651      	mov	r1, sl
 8015920:	4630      	mov	r0, r6
 8015922:	f00b f949 	bl	8020bb8 <iprintf>
    LWIP_ASSERT("heap element prev ptr valid", mem->prev <= MEM_SIZE_ALIGNED);
 8015926:	8862      	ldrh	r2, [r4, #2]
 8015928:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 801592c:	429a      	cmp	r2, r3
 801592e:	d81d      	bhi.n	801596c <mem_sanity+0xe4>
    LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 8015930:	8822      	ldrh	r2, [r4, #0]
 8015932:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8015936:	429a      	cmp	r2, r3
 8015938:	d824      	bhi.n	8015984 <mem_sanity+0xfc>
 801593a:	7923      	ldrb	r3, [r4, #4]
    if (last_used == 0) {
 801593c:	2d00      	cmp	r5, #0
 801593e:	d0ce      	beq.n	80158de <mem_sanity+0x56>
      LWIP_ASSERT("heap element unused member", (mem->used == 0) || (mem->used == 1));
 8015940:	2b01      	cmp	r3, #1
 8015942:	d9d5      	bls.n	80158f0 <mem_sanity+0x68>
 8015944:	463b      	mov	r3, r7
 8015946:	f240 2253 	movw	r2, #595	; 0x253
 801594a:	4938      	ldr	r1, [pc, #224]	; (8015a2c <mem_sanity+0x1a4>)
 801594c:	4630      	mov	r0, r6
 801594e:	f00b f933 	bl	8020bb8 <iprintf>
    LWIP_ASSERT("heap element link valid", mem_link_valid(mem));
 8015952:	4620      	mov	r0, r4
 8015954:	f7ff ff6e 	bl	8015834 <mem_link_valid>
 8015958:	2800      	cmp	r0, #0
 801595a:	d1cd      	bne.n	80158f8 <mem_sanity+0x70>
 801595c:	463b      	mov	r3, r7
 801595e:	f240 2256 	movw	r2, #598	; 0x256
 8015962:	4933      	ldr	r1, [pc, #204]	; (8015a30 <mem_sanity+0x1a8>)
 8015964:	4630      	mov	r0, r6
 8015966:	f00b f927 	bl	8020bb8 <iprintf>
 801596a:	e7c5      	b.n	80158f8 <mem_sanity+0x70>
    LWIP_ASSERT("heap element prev ptr valid", mem->prev <= MEM_SIZE_ALIGNED);
 801596c:	463b      	mov	r3, r7
 801596e:	f240 224a 	movw	r2, #586	; 0x24a
 8015972:	4930      	ldr	r1, [pc, #192]	; (8015a34 <mem_sanity+0x1ac>)
 8015974:	4630      	mov	r0, r6
 8015976:	f00b f91f 	bl	8020bb8 <iprintf>
    LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 801597a:	8822      	ldrh	r2, [r4, #0]
 801597c:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8015980:	429a      	cmp	r2, r3
 8015982:	d9da      	bls.n	801593a <mem_sanity+0xb2>
 8015984:	463b      	mov	r3, r7
 8015986:	f240 224b 	movw	r2, #587	; 0x24b
 801598a:	492b      	ldr	r1, [pc, #172]	; (8015a38 <mem_sanity+0x1b0>)
 801598c:	4630      	mov	r0, r6
 801598e:	f00b f913 	bl	8020bb8 <iprintf>
 8015992:	e7d2      	b.n	801593a <mem_sanity+0xb2>
  return (struct mem *)(void *)&ram[ptr];
 8015994:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8015998:	441a      	add	r2, r3
  }
  LWIP_ASSERT("heap end ptr sanity", mem == ptr_to_mem(MEM_SIZE_ALIGNED));
 801599a:	4294      	cmp	r4, r2
 801599c:	d006      	beq.n	80159ac <mem_sanity+0x124>
 801599e:	4b1f      	ldr	r3, [pc, #124]	; (8015a1c <mem_sanity+0x194>)
 80159a0:	f240 225b 	movw	r2, #603	; 0x25b
 80159a4:	4925      	ldr	r1, [pc, #148]	; (8015a3c <mem_sanity+0x1b4>)
 80159a6:	481f      	ldr	r0, [pc, #124]	; (8015a24 <mem_sanity+0x19c>)
 80159a8:	f00b f906 	bl	8020bb8 <iprintf>
  LWIP_ASSERT("heap element used valid", mem->used == 1);
 80159ac:	7923      	ldrb	r3, [r4, #4]
 80159ae:	2b01      	cmp	r3, #1
 80159b0:	d006      	beq.n	80159c0 <mem_sanity+0x138>
 80159b2:	4b1a      	ldr	r3, [pc, #104]	; (8015a1c <mem_sanity+0x194>)
 80159b4:	f44f 7217 	mov.w	r2, #604	; 0x25c
 80159b8:	4919      	ldr	r1, [pc, #100]	; (8015a20 <mem_sanity+0x198>)
 80159ba:	481a      	ldr	r0, [pc, #104]	; (8015a24 <mem_sanity+0x19c>)
 80159bc:	f00b f8fc 	bl	8020bb8 <iprintf>
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == MEM_SIZE_ALIGNED);
 80159c0:	8862      	ldrh	r2, [r4, #2]
 80159c2:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 80159c6:	429a      	cmp	r2, r3
 80159c8:	d006      	beq.n	80159d8 <mem_sanity+0x150>
 80159ca:	4b14      	ldr	r3, [pc, #80]	; (8015a1c <mem_sanity+0x194>)
 80159cc:	f240 225d 	movw	r2, #605	; 0x25d
 80159d0:	4918      	ldr	r1, [pc, #96]	; (8015a34 <mem_sanity+0x1ac>)
 80159d2:	4814      	ldr	r0, [pc, #80]	; (8015a24 <mem_sanity+0x19c>)
 80159d4:	f00b f8f0 	bl	8020bb8 <iprintf>
  LWIP_ASSERT("heap element next ptr valid", mem->next == MEM_SIZE_ALIGNED);
 80159d8:	8822      	ldrh	r2, [r4, #0]
 80159da:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 80159de:	429a      	cmp	r2, r3
 80159e0:	d008      	beq.n	80159f4 <mem_sanity+0x16c>
 80159e2:	4b0e      	ldr	r3, [pc, #56]	; (8015a1c <mem_sanity+0x194>)
 80159e4:	f240 225e 	movw	r2, #606	; 0x25e
 80159e8:	4913      	ldr	r1, [pc, #76]	; (8015a38 <mem_sanity+0x1b0>)
 80159ea:	480e      	ldr	r0, [pc, #56]	; (8015a24 <mem_sanity+0x19c>)
}
 80159ec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("heap element next ptr valid", mem->next == MEM_SIZE_ALIGNED);
 80159f0:	f00b b8e2 	b.w	8020bb8 <iprintf>
}
 80159f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 80159f8:	4b08      	ldr	r3, [pc, #32]	; (8015a1c <mem_sanity+0x194>)
 80159fa:	f240 2242 	movw	r2, #578	; 0x242
 80159fe:	490e      	ldr	r1, [pc, #56]	; (8015a38 <mem_sanity+0x1b0>)
 8015a00:	4808      	ldr	r0, [pc, #32]	; (8015a24 <mem_sanity+0x19c>)
 8015a02:	f00b f8d9 	bl	8020bb8 <iprintf>
 8015a06:	8834      	ldrh	r4, [r6, #0]
 8015a08:	e759      	b.n	80158be <mem_sanity+0x36>
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == 0);
 8015a0a:	4b04      	ldr	r3, [pc, #16]	; (8015a1c <mem_sanity+0x194>)
 8015a0c:	f240 2241 	movw	r2, #577	; 0x241
 8015a10:	4908      	ldr	r1, [pc, #32]	; (8015a34 <mem_sanity+0x1ac>)
 8015a12:	4804      	ldr	r0, [pc, #16]	; (8015a24 <mem_sanity+0x19c>)
 8015a14:	f00b f8d0 	bl	8020bb8 <iprintf>
 8015a18:	e74b      	b.n	80158b2 <mem_sanity+0x2a>
 8015a1a:	bf00      	nop
 8015a1c:	0803d2d8 	.word	0x0803d2d8
 8015a20:	0803d308 	.word	0x0803d308
 8015a24:	08026bb8 	.word	0x08026bb8
 8015a28:	0803d370 	.word	0x0803d370
 8015a2c:	0803d388 	.word	0x0803d388
 8015a30:	0803d3a4 	.word	0x0803d3a4
 8015a34:	0803d320 	.word	0x0803d320
 8015a38:	0803d33c 	.word	0x0803d33c
 8015a3c:	0803d3bc 	.word	0x0803d3bc
 8015a40:	2002a2e4 	.word	0x2002a2e4
 8015a44:	2002a2e8 	.word	0x2002a2e8
 8015a48:	0803d358 	.word	0x0803d358

08015a4c <mem_overflow_check_raw>:
{
 8015a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a50:	1e4c      	subs	r4, r1, #1
 8015a52:	310f      	adds	r1, #15
 8015a54:	b0a3      	sub	sp, #140	; 0x8c
 8015a56:	4606      	mov	r6, r0
 8015a58:	4615      	mov	r5, r2
 8015a5a:	4699      	mov	r9, r3
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 8015a5c:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8015ad8 <mem_overflow_check_raw+0x8c>
 8015a60:	4404      	add	r4, r0
 8015a62:	180f      	adds	r7, r1, r0
      LWIP_ASSERT(errstr, 0);
 8015a64:	f8df b074 	ldr.w	fp, [pc, #116]	; 8015adc <mem_overflow_check_raw+0x90>
 8015a68:	f8df a074 	ldr.w	sl, [pc, #116]	; 8015ae0 <mem_overflow_check_raw+0x94>
    if (m[k] != 0xcd) {
 8015a6c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 8015a70:	4642      	mov	r2, r8
 8015a72:	2180      	movs	r1, #128	; 0x80
 8015a74:	a802      	add	r0, sp, #8
    if (m[k] != 0xcd) {
 8015a76:	2bcd      	cmp	r3, #205	; 0xcd
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 8015a78:	462b      	mov	r3, r5
    if (m[k] != 0xcd) {
 8015a7a:	d009      	beq.n	8015a90 <mem_overflow_check_raw+0x44>
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 8015a7c:	f8cd 9000 	str.w	r9, [sp]
 8015a80:	f00b f9be 	bl	8020e00 <sniprintf>
      LWIP_ASSERT(errstr, 0);
 8015a84:	465b      	mov	r3, fp
 8015a86:	a902      	add	r1, sp, #8
 8015a88:	226d      	movs	r2, #109	; 0x6d
 8015a8a:	4650      	mov	r0, sl
 8015a8c:	f00b f894 	bl	8020bb8 <iprintf>
  for (k = 0; k < MEM_SANITY_REGION_AFTER_ALIGNED; k++) {
 8015a90:	42bc      	cmp	r4, r7
 8015a92:	d1eb      	bne.n	8015a6c <mem_overflow_check_raw+0x20>
 8015a94:	f1a6 0411 	sub.w	r4, r6, #17
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 8015a98:	4f0e      	ldr	r7, [pc, #56]	; (8015ad4 <mem_overflow_check_raw+0x88>)
 8015a9a:	3e01      	subs	r6, #1
      LWIP_ASSERT(errstr, 0);
 8015a9c:	f8df a03c 	ldr.w	sl, [pc, #60]	; 8015adc <mem_overflow_check_raw+0x90>
 8015aa0:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8015ae0 <mem_overflow_check_raw+0x94>
    if (m[k] != 0xcd) {
 8015aa4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 8015aa8:	463a      	mov	r2, r7
 8015aaa:	2180      	movs	r1, #128	; 0x80
 8015aac:	a802      	add	r0, sp, #8
    if (m[k] != 0xcd) {
 8015aae:	2bcd      	cmp	r3, #205	; 0xcd
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 8015ab0:	462b      	mov	r3, r5
    if (m[k] != 0xcd) {
 8015ab2:	d009      	beq.n	8015ac8 <mem_overflow_check_raw+0x7c>
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 8015ab4:	f8cd 9000 	str.w	r9, [sp]
 8015ab8:	f00b f9a2 	bl	8020e00 <sniprintf>
      LWIP_ASSERT(errstr, 0);
 8015abc:	4653      	mov	r3, sl
 8015abe:	a902      	add	r1, sp, #8
 8015ac0:	2278      	movs	r2, #120	; 0x78
 8015ac2:	4640      	mov	r0, r8
 8015ac4:	f00b f878 	bl	8020bb8 <iprintf>
  for (k = 0; k < MEM_SANITY_REGION_BEFORE_ALIGNED; k++) {
 8015ac8:	42b4      	cmp	r4, r6
 8015aca:	d1eb      	bne.n	8015aa4 <mem_overflow_check_raw+0x58>
}
 8015acc:	b023      	add	sp, #140	; 0x8c
 8015ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ad2:	bf00      	nop
 8015ad4:	0803d2b8 	.word	0x0803d2b8
 8015ad8:	0803d298 	.word	0x0803d298
 8015adc:	0803d2d8 	.word	0x0803d2d8
 8015ae0:	08026bb8 	.word	0x08026bb8

08015ae4 <mem_overflow_init_raw>:
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 8015ae4:	f04f 33cd 	mov.w	r3, #3452816845	; 0xcdcdcdcd
  m = (u8_t *)p + size;
 8015ae8:	1842      	adds	r2, r0, r1
{
 8015aea:	b410      	push	{r4}
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 8015aec:	f840 3c10 	str.w	r3, [r0, #-16]
 8015af0:	f840 3c0c 	str.w	r3, [r0, #-12]
 8015af4:	f840 3c08 	str.w	r3, [r0, #-8]
 8015af8:	f840 3c04 	str.w	r3, [r0, #-4]
  memset(m, 0xcd, MEM_SANITY_REGION_AFTER_ALIGNED);
 8015afc:	5043      	str	r3, [r0, r1]
 8015afe:	6053      	str	r3, [r2, #4]
 8015b00:	6093      	str	r3, [r2, #8]
 8015b02:	60d3      	str	r3, [r2, #12]
}
 8015b04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015b08:	4770      	bx	lr
 8015b0a:	bf00      	nop

08015b0c <mem_init>:
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8015b0c:	4b14      	ldr	r3, [pc, #80]	; (8015b60 <mem_init+0x54>)
  ram_end->prev = MEM_SIZE_ALIGNED;
 8015b0e:	f642 60e4 	movw	r0, #12004	; 0x2ee4
  mem->prev = 0;
 8015b12:	2100      	movs	r1, #0
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8015b14:	4a13      	ldr	r2, [pc, #76]	; (8015b64 <mem_init+0x58>)
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8015b16:	f023 0303 	bic.w	r3, r3, #3
{
 8015b1a:	b570      	push	{r4, r5, r6, lr}
  mem->next = MEM_SIZE_ALIGNED;
 8015b1c:	f642 64e0 	movw	r4, #12000	; 0x2ee0
  ram_end->prev = MEM_SIZE_ALIGNED;
 8015b20:	2501      	movs	r5, #1
  ram_end->next = MEM_SIZE_ALIGNED;
 8015b22:	4e11      	ldr	r6, [pc, #68]	; (8015b68 <mem_init+0x5c>)
  mem->prev = 0;
 8015b24:	7119      	strb	r1, [r3, #4]
  return (struct mem *)(void *)&ram[ptr];
 8015b26:	1919      	adds	r1, r3, r4
  mem->next = MEM_SIZE_ALIGNED;
 8015b28:	601c      	str	r4, [r3, #0]
  ram_end->next = MEM_SIZE_ALIGNED;
 8015b2a:	511e      	str	r6, [r3, r4]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8015b2c:	541d      	strb	r5, [r3, r0]
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8015b2e:	4d0f      	ldr	r5, [pc, #60]	; (8015b6c <mem_init+0x60>)
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8015b30:	6011      	str	r1, [r2, #0]
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8015b32:	602b      	str	r3, [r5, #0]
  MEM_SANITY();
 8015b34:	f7ff fea8 	bl	8015888 <mem_sanity>
  lfree = (struct mem *)(void *)ram;
 8015b38:	682a      	ldr	r2, [r5, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 8015b3a:	490d      	ldr	r1, [pc, #52]	; (8015b70 <mem_init+0x64>)
  lfree = (struct mem *)(void *)ram;
 8015b3c:	4b0d      	ldr	r3, [pc, #52]	; (8015b74 <mem_init+0x68>)
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8015b3e:	480e      	ldr	r0, [pc, #56]	; (8015b78 <mem_init+0x6c>)
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 8015b40:	f8a1 40aa 	strh.w	r4, [r1, #170]	; 0xaa
  lfree = (struct mem *)(void *)ram;
 8015b44:	601a      	str	r2, [r3, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8015b46:	f009 fc5d 	bl	801f404 <sys_mutex_new>
 8015b4a:	b900      	cbnz	r0, 8015b4e <mem_init+0x42>
}
 8015b4c:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8015b4e:	4b0b      	ldr	r3, [pc, #44]	; (8015b7c <mem_init+0x70>)
 8015b50:	f240 221f 	movw	r2, #543	; 0x21f
 8015b54:	490a      	ldr	r1, [pc, #40]	; (8015b80 <mem_init+0x74>)
 8015b56:	480b      	ldr	r0, [pc, #44]	; (8015b84 <mem_init+0x78>)
}
 8015b58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8015b5c:	f00b b82c 	b.w	8020bb8 <iprintf>
 8015b60:	2002eaef 	.word	0x2002eaef
 8015b64:	2002a2e8 	.word	0x2002a2e8
 8015b68:	2ee02ee0 	.word	0x2ee02ee0
 8015b6c:	2002a2e4 	.word	0x2002a2e4
 8015b70:	2003e1cc 	.word	0x2003e1cc
 8015b74:	2002a2d8 	.word	0x2002a2d8
 8015b78:	2002a2e0 	.word	0x2002a2e0
 8015b7c:	0803d2d8 	.word	0x0803d2d8
 8015b80:	0803d1dc 	.word	0x0803d1dc
 8015b84:	08026bb8 	.word	0x08026bb8

08015b88 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8015b88:	b300      	cbz	r0, 8015bcc <mem_free+0x44>
{
 8015b8a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8015b8e:	f010 0803 	ands.w	r8, r0, #3
 8015b92:	4604      	mov	r4, r0
 8015b94:	d11b      	bne.n	8015bce <mem_free+0x46>

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8015b96:	4e5e      	ldr	r6, [pc, #376]	; (8015d10 <mem_free+0x188>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8015b98:	f1a0 0518 	sub.w	r5, r0, #24
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8015b9c:	6833      	ldr	r3, [r6, #0]
 8015b9e:	42ab      	cmp	r3, r5
 8015ba0:	d805      	bhi.n	8015bae <mem_free+0x26>
 8015ba2:	4f5c      	ldr	r7, [pc, #368]	; (8015d14 <mem_free+0x18c>)
 8015ba4:	f100 030c 	add.w	r3, r0, #12
 8015ba8:	683a      	ldr	r2, [r7, #0]
 8015baa:	429a      	cmp	r2, r3
 8015bac:	d214      	bcs.n	8015bd8 <mem_free+0x50>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8015bae:	4b5a      	ldr	r3, [pc, #360]	; (8015d18 <mem_free+0x190>)
 8015bb0:	f240 227f 	movw	r2, #639	; 0x27f
 8015bb4:	4959      	ldr	r1, [pc, #356]	; (8015d1c <mem_free+0x194>)
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  if (!mem_link_valid(mem)) {
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8015bb6:	485a      	ldr	r0, [pc, #360]	; (8015d20 <mem_free+0x198>)
 8015bb8:	f00a fffe 	bl	8020bb8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8015bbc:	4a59      	ldr	r2, [pc, #356]	; (8015d24 <mem_free+0x19c>)
 8015bbe:	f8b2 30b0 	ldrh.w	r3, [r2, #176]	; 0xb0
 8015bc2:	3301      	adds	r3, #1
 8015bc4:	f8a2 30b0 	strh.w	r3, [r2, #176]	; 0xb0
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8015bc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015bcc:	4770      	bx	lr
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8015bce:	4b52      	ldr	r3, [pc, #328]	; (8015d18 <mem_free+0x190>)
 8015bd0:	f240 2273 	movw	r2, #627	; 0x273
 8015bd4:	4954      	ldr	r1, [pc, #336]	; (8015d28 <mem_free+0x1a0>)
 8015bd6:	e7ee      	b.n	8015bb6 <mem_free+0x2e>
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 8015bd8:	4b54      	ldr	r3, [pc, #336]	; (8015d2c <mem_free+0x1a4>)
 8015bda:	4a55      	ldr	r2, [pc, #340]	; (8015d30 <mem_free+0x1a8>)
 8015bdc:	f830 1c12 	ldrh.w	r1, [r0, #-18]
 8015be0:	f7ff ff34 	bl	8015a4c <mem_overflow_check_raw>
  if (!mem->used) {
 8015be4:	f814 3c14 	ldrb.w	r3, [r4, #-20]
 8015be8:	2b00      	cmp	r3, #0
 8015bea:	d06e      	beq.n	8015cca <mem_free+0x142>
  if (!mem_link_valid(mem)) {
 8015bec:	4628      	mov	r0, r5
 8015bee:	f7ff fe21 	bl	8015834 <mem_link_valid>
 8015bf2:	2800      	cmp	r0, #0
 8015bf4:	d06e      	beq.n	8015cd4 <mem_free+0x14c>
  if (mem < lfree) {
 8015bf6:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8015d50 <mem_free+0x1c8>
  mem->used = 0;
 8015bfa:	f804 8c14 	strb.w	r8, [r4, #-20]
  if (mem < lfree) {
 8015bfe:	f8d9 3000 	ldr.w	r3, [r9]
 8015c02:	42ab      	cmp	r3, r5
 8015c04:	d901      	bls.n	8015c0a <mem_free+0x82>
    lfree = mem;
 8015c06:	f8c9 5000 	str.w	r5, [r9]
  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 8015c0a:	4846      	ldr	r0, [pc, #280]	; (8015d24 <mem_free+0x19c>)
 8015c0c:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 8015c10:	f8b0 20ac 	ldrh.w	r2, [r0, #172]	; 0xac
 8015c14:	6831      	ldr	r1, [r6, #0]
 8015c16:	1ad2      	subs	r2, r2, r3
 8015c18:	eba5 0c01 	sub.w	ip, r5, r1
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8015c1c:	42a9      	cmp	r1, r5
  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 8015c1e:	4462      	add	r2, ip
 8015c20:	f8a0 20ac 	strh.w	r2, [r0, #172]	; 0xac
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8015c24:	d83a      	bhi.n	8015c9c <mem_free+0x114>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8015c26:	683a      	ldr	r2, [r7, #0]
 8015c28:	4295      	cmp	r5, r2
 8015c2a:	d258      	bcs.n	8015cde <mem_free+0x156>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8015c2c:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8015c30:	4293      	cmp	r3, r2
 8015c32:	d85c      	bhi.n	8015cee <mem_free+0x166>
  return (struct mem *)(void *)&ram[ptr];
 8015c34:	6832      	ldr	r2, [r6, #0]
 8015c36:	4413      	add	r3, r2
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8015c38:	429d      	cmp	r5, r3
 8015c3a:	d013      	beq.n	8015c64 <mem_free+0xdc>
 8015c3c:	7919      	ldrb	r1, [r3, #4]
 8015c3e:	b989      	cbnz	r1, 8015c64 <mem_free+0xdc>
 8015c40:	6839      	ldr	r1, [r7, #0]
 8015c42:	428b      	cmp	r3, r1
 8015c44:	d00e      	beq.n	8015c64 <mem_free+0xdc>
    if (lfree == nmem) {
 8015c46:	f8d9 1000 	ldr.w	r1, [r9]
 8015c4a:	428b      	cmp	r3, r1
 8015c4c:	d05c      	beq.n	8015d08 <mem_free+0x180>
    mem->next = nmem->next;
 8015c4e:	8818      	ldrh	r0, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8015c50:	f642 61e0 	movw	r1, #12000	; 0x2ee0
    mem->next = nmem->next;
 8015c54:	f824 0c18 	strh.w	r0, [r4, #-24]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8015c58:	881b      	ldrh	r3, [r3, #0]
 8015c5a:	428b      	cmp	r3, r1
 8015c5c:	d002      	beq.n	8015c64 <mem_free+0xdc>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8015c5e:	4413      	add	r3, r2
  return (mem_size_t)((u8_t *)mem - ram);
 8015c60:	1aa9      	subs	r1, r5, r2
 8015c62:	8059      	strh	r1, [r3, #2]
  pmem = ptr_to_mem(mem->prev);
 8015c64:	f834 1c16 	ldrh.w	r1, [r4, #-22]
  return (struct mem *)(void *)&ram[ptr];
 8015c68:	1853      	adds	r3, r2, r1
  if (pmem != mem && pmem->used == 0) {
 8015c6a:	429d      	cmp	r5, r3
 8015c6c:	d010      	beq.n	8015c90 <mem_free+0x108>
 8015c6e:	7918      	ldrb	r0, [r3, #4]
 8015c70:	b970      	cbnz	r0, 8015c90 <mem_free+0x108>
    if (lfree == mem) {
 8015c72:	f8d9 0000 	ldr.w	r0, [r9]
 8015c76:	4285      	cmp	r5, r0
 8015c78:	d043      	beq.n	8015d02 <mem_free+0x17a>
    pmem->next = mem->next;
 8015c7a:	f834 3c18 	ldrh.w	r3, [r4, #-24]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8015c7e:	f642 60e0 	movw	r0, #12000	; 0x2ee0
    pmem->next = mem->next;
 8015c82:	5253      	strh	r3, [r2, r1]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8015c84:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 8015c88:	4283      	cmp	r3, r0
 8015c8a:	d001      	beq.n	8015c90 <mem_free+0x108>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8015c8c:	441a      	add	r2, r3
 8015c8e:	8051      	strh	r1, [r2, #2]
  MEM_SANITY();
 8015c90:	f7ff fdfa 	bl	8015888 <mem_sanity>
  mem_free_count = 1;
 8015c94:	4b27      	ldr	r3, [pc, #156]	; (8015d34 <mem_free+0x1ac>)
 8015c96:	2201      	movs	r2, #1
 8015c98:	701a      	strb	r2, [r3, #0]
 8015c9a:	e795      	b.n	8015bc8 <mem_free+0x40>
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8015c9c:	4b1e      	ldr	r3, [pc, #120]	; (8015d18 <mem_free+0x190>)
 8015c9e:	f240 12df 	movw	r2, #479	; 0x1df
 8015ca2:	4925      	ldr	r1, [pc, #148]	; (8015d38 <mem_free+0x1b0>)
 8015ca4:	481e      	ldr	r0, [pc, #120]	; (8015d20 <mem_free+0x198>)
 8015ca6:	f00a ff87 	bl	8020bb8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8015caa:	683b      	ldr	r3, [r7, #0]
 8015cac:	429d      	cmp	r5, r3
 8015cae:	d216      	bcs.n	8015cde <mem_free+0x156>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8015cb0:	f814 3c14 	ldrb.w	r3, [r4, #-20]
 8015cb4:	b133      	cbz	r3, 8015cc4 <mem_free+0x13c>
 8015cb6:	4b18      	ldr	r3, [pc, #96]	; (8015d18 <mem_free+0x190>)
 8015cb8:	f240 12e1 	movw	r2, #481	; 0x1e1
 8015cbc:	491f      	ldr	r1, [pc, #124]	; (8015d3c <mem_free+0x1b4>)
 8015cbe:	4818      	ldr	r0, [pc, #96]	; (8015d20 <mem_free+0x198>)
 8015cc0:	f00a ff7a 	bl	8020bb8 <iprintf>
 8015cc4:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 8015cc8:	e7b0      	b.n	8015c2c <mem_free+0xa4>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8015cca:	4b13      	ldr	r3, [pc, #76]	; (8015d18 <mem_free+0x190>)
 8015ccc:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8015cd0:	491b      	ldr	r1, [pc, #108]	; (8015d40 <mem_free+0x1b8>)
 8015cd2:	e770      	b.n	8015bb6 <mem_free+0x2e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8015cd4:	4b10      	ldr	r3, [pc, #64]	; (8015d18 <mem_free+0x190>)
 8015cd6:	f240 2295 	movw	r2, #661	; 0x295
 8015cda:	491a      	ldr	r1, [pc, #104]	; (8015d44 <mem_free+0x1bc>)
 8015cdc:	e76b      	b.n	8015bb6 <mem_free+0x2e>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8015cde:	4b0e      	ldr	r3, [pc, #56]	; (8015d18 <mem_free+0x190>)
 8015ce0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8015ce4:	4918      	ldr	r1, [pc, #96]	; (8015d48 <mem_free+0x1c0>)
 8015ce6:	480e      	ldr	r0, [pc, #56]	; (8015d20 <mem_free+0x198>)
 8015ce8:	f00a ff66 	bl	8020bb8 <iprintf>
 8015cec:	e7e0      	b.n	8015cb0 <mem_free+0x128>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8015cee:	4b0a      	ldr	r3, [pc, #40]	; (8015d18 <mem_free+0x190>)
 8015cf0:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8015cf4:	4915      	ldr	r1, [pc, #84]	; (8015d4c <mem_free+0x1c4>)
 8015cf6:	480a      	ldr	r0, [pc, #40]	; (8015d20 <mem_free+0x198>)
 8015cf8:	f00a ff5e 	bl	8020bb8 <iprintf>
 8015cfc:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 8015d00:	e798      	b.n	8015c34 <mem_free+0xac>
      lfree = pmem;
 8015d02:	f8c9 3000 	str.w	r3, [r9]
 8015d06:	e7b8      	b.n	8015c7a <mem_free+0xf2>
      lfree = mem;
 8015d08:	f8c9 5000 	str.w	r5, [r9]
 8015d0c:	e79f      	b.n	8015c4e <mem_free+0xc6>
 8015d0e:	bf00      	nop
 8015d10:	2002a2e4 	.word	0x2002a2e4
 8015d14:	2002a2e8 	.word	0x2002a2e8
 8015d18:	0803d2d8 	.word	0x0803d2d8
 8015d1c:	0803d0e0 	.word	0x0803d0e0
 8015d20:	08026bb8 	.word	0x08026bb8
 8015d24:	2003e1cc 	.word	0x2003e1cc
 8015d28:	0803d0bc 	.word	0x0803d0bc
 8015d2c:	08024bf0 	.word	0x08024bf0
 8015d30:	0803d0fc 	.word	0x0803d0fc
 8015d34:	2002a2dc 	.word	0x2002a2dc
 8015d38:	0803d160 	.word	0x0803d160
 8015d3c:	0803d194 	.word	0x0803d194
 8015d40:	0803d104 	.word	0x0803d104
 8015d44:	0803d12c 	.word	0x0803d12c
 8015d48:	0803d178 	.word	0x0803d178
 8015d4c:	0803d1b0 	.word	0x0803d1b0
 8015d50:	2002a2d8 	.word	0x2002a2d8

08015d54 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8015d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8015d58:	1ccc      	adds	r4, r1, #3
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8015d5a:	f642 63e0 	movw	r3, #12000	; 0x2ee0
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8015d5e:	f024 0403 	bic.w	r4, r4, #3
 8015d62:	b2a4      	uxth	r4, r4
 8015d64:	2c0c      	cmp	r4, #12
 8015d66:	bf38      	it	cc
 8015d68:	240c      	movcc	r4, #12
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
 8015d6a:	3420      	adds	r4, #32
 8015d6c:	b2a4      	uxth	r4, r4
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8015d6e:	429c      	cmp	r4, r3
 8015d70:	d87a      	bhi.n	8015e68 <mem_trim+0x114>
 8015d72:	42a1      	cmp	r1, r4
 8015d74:	d878      	bhi.n	8015e68 <mem_trim+0x114>
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8015d76:	4f60      	ldr	r7, [pc, #384]	; (8015ef8 <mem_trim+0x1a4>)
 8015d78:	4605      	mov	r5, r0
 8015d7a:	460e      	mov	r6, r1
 8015d7c:	683b      	ldr	r3, [r7, #0]
 8015d7e:	4283      	cmp	r3, r0
 8015d80:	d85a      	bhi.n	8015e38 <mem_trim+0xe4>
 8015d82:	4b5e      	ldr	r3, [pc, #376]	; (8015efc <mem_trim+0x1a8>)
 8015d84:	681b      	ldr	r3, [r3, #0]
 8015d86:	4283      	cmp	r3, r0
 8015d88:	d956      	bls.n	8015e38 <mem_trim+0xe4>
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 8015d8a:	4b5d      	ldr	r3, [pc, #372]	; (8015f00 <mem_trim+0x1ac>)
 8015d8c:	4628      	mov	r0, r5
 8015d8e:	4a5d      	ldr	r2, [pc, #372]	; (8015f04 <mem_trim+0x1b0>)
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8015d90:	f1a5 0818 	sub.w	r8, r5, #24
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 8015d94:	f835 1c12 	ldrh.w	r1, [r5, #-18]
 8015d98:	f7ff fe58 	bl	8015a4c <mem_overflow_check_raw>
  return (mem_size_t)((u8_t *)mem - ram);
 8015d9c:	683b      	ldr	r3, [r7, #0]
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8015d9e:	f835 2c18 	ldrh.w	r2, [r5, #-24]
  return (mem_size_t)((u8_t *)mem - ram);
 8015da2:	eba8 0803 	sub.w	r8, r8, r3
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8015da6:	f1a2 0928 	sub.w	r9, r2, #40	; 0x28
  return (mem_size_t)((u8_t *)mem - ram);
 8015daa:	fa1f f888 	uxth.w	r8, r8
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8015dae:	eba9 0908 	sub.w	r9, r9, r8
 8015db2:	fa1f f989 	uxth.w	r9, r9
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8015db6:	454c      	cmp	r4, r9
 8015db8:	d858      	bhi.n	8015e6c <mem_trim+0x118>
  if (newsize > size) {
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
 8015dba:	f000 8084 	beq.w	8015ec6 <mem_trim+0x172>
  return (struct mem *)(void *)&ram[ptr];
 8015dbe:	eb03 0a02 	add.w	sl, r3, r2

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
  if (mem2->used == 0) {
 8015dc2:	f89a 1004 	ldrb.w	r1, [sl, #4]
 8015dc6:	2900      	cmp	r1, #0
 8015dc8:	d159      	bne.n	8015e7e <mem_trim+0x12a>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8015dca:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 8015dce:	428a      	cmp	r2, r1
 8015dd0:	d07d      	beq.n	8015ece <mem_trim+0x17a>
    /* remember the old next pointer */
    next = mem2->next;
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8015dd2:	f108 0208 	add.w	r2, r8, #8
    if (lfree == mem2) {
 8015dd6:	484c      	ldr	r0, [pc, #304]	; (8015f08 <mem_trim+0x1b4>)
    next = mem2->next;
 8015dd8:	f8ba 7000 	ldrh.w	r7, [sl]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8015ddc:	4422      	add	r2, r4
    if (lfree == mem2) {
 8015dde:	f8d0 c000 	ldr.w	ip, [r0]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8015de2:	b292      	uxth	r2, r2
    if (lfree == mem2) {
 8015de4:	45d4      	cmp	ip, sl
 8015de6:	eb03 0102 	add.w	r1, r3, r2
 8015dea:	d06e      	beq.n	8015eca <mem_trim+0x176>
      lfree = ptr_to_mem(ptr2);
    }
    mem2 = ptr_to_mem(ptr2);
    mem2->used = 0;
 8015dec:	f04f 0c00 	mov.w	ip, #0
    /* restore the next pointer */
    mem2->next = next;
 8015df0:	800f      	strh	r7, [r1, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8015df2:	f8a1 8002 	strh.w	r8, [r1, #2]
    /* link mem to it */
    mem->next = ptr2;
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8015df6:	f642 60e0 	movw	r0, #12000	; 0x2ee0
    mem2->used = 0;
 8015dfa:	f881 c004 	strb.w	ip, [r1, #4]
    mem->next = ptr2;
 8015dfe:	f825 2c18 	strh.w	r2, [r5, #-24]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8015e02:	8809      	ldrh	r1, [r1, #0]
 8015e04:	4281      	cmp	r1, r0
 8015e06:	d001      	beq.n	8015e0c <mem_trim+0xb8>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8015e08:	440b      	add	r3, r1
 8015e0a:	805a      	strh	r2, [r3, #2]
    mem2->prev = ptr;
    mem->next = ptr2;
    if (mem2->next != MEM_SIZE_ALIGNED) {
      ptr_to_mem(mem2->next)->prev = ptr2;
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 8015e0c:	4a3f      	ldr	r2, [pc, #252]	; (8015f0c <mem_trim+0x1b8>)
 8015e0e:	f8b2 30ac 	ldrh.w	r3, [r2, #172]	; 0xac
 8015e12:	441c      	add	r4, r3
 8015e14:	eba4 0909 	sub.w	r9, r4, r9
 8015e18:	f8a2 90ac 	strh.w	r9, [r2, #172]	; 0xac
  mem_overflow_init_raw(p, user_size);
 8015e1c:	4628      	mov	r0, r5
 8015e1e:	4631      	mov	r1, r6
  mem->user_size = user_size;
 8015e20:	f825 6c12 	strh.w	r6, [r5, #-18]
  mem_overflow_init_raw(p, user_size);
 8015e24:	f7ff fe5e 	bl	8015ae4 <mem_overflow_init_raw>
    -> the remaining space stays unused since it is too small
  } */
#if MEM_OVERFLOW_CHECK
  mem_overflow_init_element(mem, new_size);
#endif
  MEM_SANITY();
 8015e28:	f7ff fd2e 	bl	8015888 <mem_sanity>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
 8015e2c:	4b38      	ldr	r3, [pc, #224]	; (8015f10 <mem_trim+0x1bc>)
 8015e2e:	2201      	movs	r2, #1
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8015e30:	4628      	mov	r0, r5
  mem_free_count = 1;
 8015e32:	701a      	strb	r2, [r3, #0]
}
 8015e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8015e38:	4b36      	ldr	r3, [pc, #216]	; (8015f14 <mem_trim+0x1c0>)
 8015e3a:	f240 22d2 	movw	r2, #722	; 0x2d2
 8015e3e:	4936      	ldr	r1, [pc, #216]	; (8015f18 <mem_trim+0x1c4>)
 8015e40:	4836      	ldr	r0, [pc, #216]	; (8015f1c <mem_trim+0x1c8>)
 8015e42:	f00a feb9 	bl	8020bb8 <iprintf>
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8015e46:	683b      	ldr	r3, [r7, #0]
 8015e48:	42ab      	cmp	r3, r5
 8015e4a:	d908      	bls.n	8015e5e <mem_trim+0x10a>
    MEM_STATS_INC_LOCKED(illegal);
 8015e4c:	4a2f      	ldr	r2, [pc, #188]	; (8015f0c <mem_trim+0x1b8>)
    return rmem;
 8015e4e:	4628      	mov	r0, r5
    MEM_STATS_INC_LOCKED(illegal);
 8015e50:	f8b2 30b0 	ldrh.w	r3, [r2, #176]	; 0xb0
 8015e54:	3301      	adds	r3, #1
 8015e56:	f8a2 30b0 	strh.w	r3, [r2, #176]	; 0xb0
}
 8015e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8015e5e:	4b27      	ldr	r3, [pc, #156]	; (8015efc <mem_trim+0x1a8>)
 8015e60:	681b      	ldr	r3, [r3, #0]
 8015e62:	429d      	cmp	r5, r3
 8015e64:	d2f2      	bcs.n	8015e4c <mem_trim+0xf8>
 8015e66:	e790      	b.n	8015d8a <mem_trim+0x36>
    return NULL;
 8015e68:	2000      	movs	r0, #0
 8015e6a:	e7f6      	b.n	8015e5a <mem_trim+0x106>
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8015e6c:	4b29      	ldr	r3, [pc, #164]	; (8015f14 <mem_trim+0x1c0>)
 8015e6e:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8015e72:	492b      	ldr	r1, [pc, #172]	; (8015f20 <mem_trim+0x1cc>)
 8015e74:	4829      	ldr	r0, [pc, #164]	; (8015f1c <mem_trim+0x1c8>)
 8015e76:	f00a fe9f 	bl	8020bb8 <iprintf>
    return NULL;
 8015e7a:	2000      	movs	r0, #0
 8015e7c:	e7ed      	b.n	8015e5a <mem_trim+0x106>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8015e7e:	f104 0114 	add.w	r1, r4, #20
 8015e82:	4549      	cmp	r1, r9
 8015e84:	d8ca      	bhi.n	8015e1c <mem_trim+0xc8>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8015e86:	f108 0a08 	add.w	sl, r8, #8
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8015e8a:	f642 61e0 	movw	r1, #12000	; 0x2ee0
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8015e8e:	44a2      	add	sl, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8015e90:	428a      	cmp	r2, r1
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8015e92:	fa1f fa8a 	uxth.w	sl, sl
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8015e96:	d023      	beq.n	8015ee0 <mem_trim+0x18c>
    if (mem2 < lfree) {
 8015e98:	481b      	ldr	r0, [pc, #108]	; (8015f08 <mem_trim+0x1b4>)
  return (struct mem *)(void *)&ram[ptr];
 8015e9a:	eb03 010a 	add.w	r1, r3, sl
    if (mem2 < lfree) {
 8015e9e:	6807      	ldr	r7, [r0, #0]
 8015ea0:	428f      	cmp	r7, r1
 8015ea2:	d900      	bls.n	8015ea6 <mem_trim+0x152>
      lfree = mem2;
 8015ea4:	6001      	str	r1, [r0, #0]
    mem2->used = 0;
 8015ea6:	2700      	movs	r7, #0
    mem2->next = mem->next;
 8015ea8:	800a      	strh	r2, [r1, #0]
    mem2->prev = ptr;
 8015eaa:	f8a1 8002 	strh.w	r8, [r1, #2]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8015eae:	f642 60e0 	movw	r0, #12000	; 0x2ee0
    mem2->used = 0;
 8015eb2:	710f      	strb	r7, [r1, #4]
    mem->next = ptr2;
 8015eb4:	f825 ac18 	strh.w	sl, [r5, #-24]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8015eb8:	880a      	ldrh	r2, [r1, #0]
 8015eba:	4282      	cmp	r2, r0
 8015ebc:	d0a6      	beq.n	8015e0c <mem_trim+0xb8>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8015ebe:	4413      	add	r3, r2
 8015ec0:	f8a3 a002 	strh.w	sl, [r3, #2]
 8015ec4:	e7a2      	b.n	8015e0c <mem_trim+0xb8>
 8015ec6:	4628      	mov	r0, r5
 8015ec8:	e7c7      	b.n	8015e5a <mem_trim+0x106>
      lfree = ptr_to_mem(ptr2);
 8015eca:	6001      	str	r1, [r0, #0]
 8015ecc:	e78e      	b.n	8015dec <mem_trim+0x98>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8015ece:	4b11      	ldr	r3, [pc, #68]	; (8015f14 <mem_trim+0x1c0>)
 8015ed0:	f240 22f5 	movw	r2, #757	; 0x2f5
 8015ed4:	4913      	ldr	r1, [pc, #76]	; (8015f24 <mem_trim+0x1d0>)
 8015ed6:	4811      	ldr	r0, [pc, #68]	; (8015f1c <mem_trim+0x1c8>)
 8015ed8:	f00a fe6e 	bl	8020bb8 <iprintf>
 8015edc:	683b      	ldr	r3, [r7, #0]
 8015ede:	e778      	b.n	8015dd2 <mem_trim+0x7e>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8015ee0:	4b0c      	ldr	r3, [pc, #48]	; (8015f14 <mem_trim+0x1c0>)
 8015ee2:	f240 3216 	movw	r2, #790	; 0x316
 8015ee6:	490f      	ldr	r1, [pc, #60]	; (8015f24 <mem_trim+0x1d0>)
 8015ee8:	480c      	ldr	r0, [pc, #48]	; (8015f1c <mem_trim+0x1c8>)
 8015eea:	f00a fe65 	bl	8020bb8 <iprintf>
 8015eee:	683b      	ldr	r3, [r7, #0]
 8015ef0:	f835 2c18 	ldrh.w	r2, [r5, #-24]
 8015ef4:	e7d0      	b.n	8015e98 <mem_trim+0x144>
 8015ef6:	bf00      	nop
 8015ef8:	2002a2e4 	.word	0x2002a2e4
 8015efc:	2002a2e8 	.word	0x2002a2e8
 8015f00:	08024bf0 	.word	0x08024bf0
 8015f04:	0803d0fc 	.word	0x0803d0fc
 8015f08:	2002a2d8 	.word	0x2002a2d8
 8015f0c:	2003e1cc 	.word	0x2003e1cc
 8015f10:	2002a2dc 	.word	0x2002a2dc
 8015f14:	0803d2d8 	.word	0x0803d2d8
 8015f18:	0803d3d0 	.word	0x0803d3d0
 8015f1c:	08026bb8 	.word	0x08026bb8
 8015f20:	0803d3e8 	.word	0x0803d3e8
 8015f24:	0803d408 	.word	0x0803d408

08015f28 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8015f28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8015f2c:	2800      	cmp	r0, #0
 8015f2e:	f000 80e0 	beq.w	80160f2 <mem_malloc+0x1ca>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8015f32:	f100 0a03 	add.w	sl, r0, #3
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8015f36:	f642 64e0 	movw	r4, #12000	; 0x2ee0
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8015f3a:	f02a 0a03 	bic.w	sl, sl, #3
 8015f3e:	fa1f fa8a 	uxth.w	sl, sl
 8015f42:	f1ba 0f0c 	cmp.w	sl, #12
 8015f46:	bf38      	it	cc
 8015f48:	f04f 0a0c 	movcc.w	sl, #12
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
 8015f4c:	f10a 0720 	add.w	r7, sl, #32
 8015f50:	b2bf      	uxth	r7, r7
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8015f52:	42a7      	cmp	r7, r4
 8015f54:	f200 80cd 	bhi.w	80160f2 <mem_malloc+0x1ca>
 8015f58:	42b8      	cmp	r0, r7
 8015f5a:	bf94      	ite	ls
 8015f5c:	2500      	movls	r5, #0
 8015f5e:	2501      	movhi	r5, #1
 8015f60:	2d00      	cmp	r5, #0
 8015f62:	f040 80c6 	bne.w	80160f2 <mem_malloc+0x1ca>
 8015f66:	4681      	mov	r9, r0
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8015f68:	4871      	ldr	r0, [pc, #452]	; (8016130 <mem_malloc+0x208>)
 8015f6a:	f009 fa71 	bl	801f450 <sys_mutex_lock>
  return (mem_size_t)((u8_t *)mem - ram);
 8015f6e:	4b71      	ldr	r3, [pc, #452]	; (8016134 <mem_malloc+0x20c>)
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
      mem_free_count = 0;
 8015f70:	46ae      	mov	lr, r5
 8015f72:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 8016160 <mem_malloc+0x238>
 8015f76:	eba4 0c07 	sub.w	ip, r4, r7
  return (mem_size_t)((u8_t *)mem - ram);
 8015f7a:	6818      	ldr	r0, [r3, #0]
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8015f7c:	f06f 0b07 	mvn.w	fp, #7
      mem_free_count = 0;
 8015f80:	4d6d      	ldr	r5, [pc, #436]	; (8016138 <mem_malloc+0x210>)
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8015f82:	f8d8 6000 	ldr.w	r6, [r8]
  return (mem_size_t)((u8_t *)mem - ram);
 8015f86:	1a36      	subs	r6, r6, r0
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8015f88:	b2b3      	uxth	r3, r6
 8015f8a:	459c      	cmp	ip, r3
  return (mem_size_t)((u8_t *)mem - ram);
 8015f8c:	461e      	mov	r6, r3
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8015f8e:	d918      	bls.n	8015fc2 <mem_malloc+0x9a>
      mem_free_count = 0;
 8015f90:	f885 e000 	strb.w	lr, [r5]
  return (struct mem *)(void *)&ram[ptr];
 8015f94:	18c4      	adds	r4, r0, r3
      if (mem_free_count != 0) {
 8015f96:	782a      	ldrb	r2, [r5, #0]
 8015f98:	b132      	cbz	r2, 8015fa8 <mem_malloc+0x80>
 8015f9a:	e7f2      	b.n	8015f82 <mem_malloc+0x5a>
      mem_free_count = 0;
 8015f9c:	f885 e000 	strb.w	lr, [r5]
 8015fa0:	461e      	mov	r6, r3
      if (mem_free_count != 0) {
 8015fa2:	782a      	ldrb	r2, [r5, #0]
 8015fa4:	2a00      	cmp	r2, #0
 8015fa6:	d1ec      	bne.n	8015f82 <mem_malloc+0x5a>
      if ((!mem->used) &&
 8015fa8:	7921      	ldrb	r1, [r4, #4]
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8015faa:	ebab 0303 	sub.w	r3, fp, r3
 8015fae:	8822      	ldrh	r2, [r4, #0]
      if ((!mem->used) &&
 8015fb0:	b911      	cbnz	r1, 8015fb8 <mem_malloc+0x90>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8015fb2:	4413      	add	r3, r2
      if ((!mem->used) &&
 8015fb4:	42bb      	cmp	r3, r7
 8015fb6:	d211      	bcs.n	8015fdc <mem_malloc+0xb4>
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8015fb8:	4594      	cmp	ip, r2
 8015fba:	4613      	mov	r3, r2
  return (struct mem *)(void *)&ram[ptr];
 8015fbc:	eb00 0402 	add.w	r4, r0, r2
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8015fc0:	d8ec      	bhi.n	8015f9c <mem_malloc+0x74>
    }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
 8015fc2:	4a5e      	ldr	r2, [pc, #376]	; (801613c <mem_malloc+0x214>)
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8015fc4:	2500      	movs	r5, #0
  sys_mutex_unlock(&mem_mutex);
 8015fc6:	485a      	ldr	r0, [pc, #360]	; (8016130 <mem_malloc+0x208>)
  MEM_STATS_INC(err);
 8015fc8:	f8b2 30a8 	ldrh.w	r3, [r2, #168]	; 0xa8
 8015fcc:	3301      	adds	r3, #1
 8015fce:	f8a2 30a8 	strh.w	r3, [r2, #168]	; 0xa8
  sys_mutex_unlock(&mem_mutex);
 8015fd2:	f009 fa43 	bl	801f45c <sys_mutex_unlock>
}
 8015fd6:	4628      	mov	r0, r5
 8015fd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8015fdc:	f107 0114 	add.w	r1, r7, #20
 8015fe0:	428b      	cmp	r3, r1
 8015fe2:	d258      	bcs.n	8016096 <mem_malloc+0x16e>
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
 8015fe4:	4955      	ldr	r1, [pc, #340]	; (801613c <mem_malloc+0x214>)
          mem->used = 1;
 8015fe6:	2301      	movs	r3, #1
 8015fe8:	7123      	strb	r3, [r4, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
 8015fea:	f8b1 30ac 	ldrh.w	r3, [r1, #172]	; 0xac
 8015fee:	f8b1 c0ae 	ldrh.w	ip, [r1, #174]	; 0xae
 8015ff2:	4413      	add	r3, r2
 8015ff4:	1b9b      	subs	r3, r3, r6
 8015ff6:	b29b      	uxth	r3, r3
 8015ff8:	459c      	cmp	ip, r3
 8015ffa:	f8a1 30ac 	strh.w	r3, [r1, #172]	; 0xac
 8015ffe:	bf38      	it	cc
 8016000:	f8a1 30ae 	strhcc.w	r3, [r1, #174]	; 0xae
          while (cur->used && cur != ram_end) {
 8016004:	4e4e      	ldr	r6, [pc, #312]	; (8016140 <mem_malloc+0x218>)
            mem_free_count = 0;
 8016006:	f04f 0c00 	mov.w	ip, #0
          while (cur->used && cur != ram_end) {
 801600a:	6831      	ldr	r1, [r6, #0]
        if (mem == lfree) {
 801600c:	f8d8 3000 	ldr.w	r3, [r8]
 8016010:	42a3      	cmp	r3, r4
 8016012:	d11b      	bne.n	801604c <mem_malloc+0x124>
          struct mem *cur = lfree;
 8016014:	f8d8 3000 	ldr.w	r3, [r8]
          while (cur->used && cur != ram_end) {
 8016018:	791a      	ldrb	r2, [r3, #4]
 801601a:	b94a      	cbnz	r2, 8016030 <mem_malloc+0x108>
 801601c:	e00b      	b.n	8016036 <mem_malloc+0x10e>
            mem_free_count = 0;
 801601e:	f885 c000 	strb.w	ip, [r5]
            if (mem_free_count != 0) {
 8016022:	782a      	ldrb	r2, [r5, #0]
 8016024:	2a00      	cmp	r2, #0
 8016026:	d1f1      	bne.n	801600c <mem_malloc+0xe4>
  return (struct mem *)(void *)&ram[ptr];
 8016028:	881b      	ldrh	r3, [r3, #0]
 801602a:	4403      	add	r3, r0
          while (cur->used && cur != ram_end) {
 801602c:	791a      	ldrb	r2, [r3, #4]
 801602e:	b112      	cbz	r2, 8016036 <mem_malloc+0x10e>
 8016030:	4299      	cmp	r1, r3
 8016032:	d1f4      	bne.n	801601e <mem_malloc+0xf6>
 8016034:	460b      	mov	r3, r1
          lfree = cur;
 8016036:	f8c8 3000 	str.w	r3, [r8]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801603a:	f8d8 3000 	ldr.w	r3, [r8]
 801603e:	428b      	cmp	r3, r1
 8016040:	d004      	beq.n	801604c <mem_malloc+0x124>
 8016042:	f8d8 3000 	ldr.w	r3, [r8]
 8016046:	791b      	ldrb	r3, [r3, #4]
 8016048:	2b00      	cmp	r3, #0
 801604a:	d15e      	bne.n	801610a <mem_malloc+0x1e2>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801604c:	3708      	adds	r7, #8
        sys_mutex_unlock(&mem_mutex);
 801604e:	4838      	ldr	r0, [pc, #224]	; (8016130 <mem_malloc+0x208>)
 8016050:	f009 fa04 	bl	801f45c <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8016054:	6833      	ldr	r3, [r6, #0]
 8016056:	4427      	add	r7, r4
 8016058:	42bb      	cmp	r3, r7
 801605a:	d34e      	bcc.n	80160fa <mem_malloc+0x1d2>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801605c:	07a3      	lsls	r3, r4, #30
 801605e:	d00d      	beq.n	801607c <mem_malloc+0x154>
 8016060:	4b38      	ldr	r3, [pc, #224]	; (8016144 <mem_malloc+0x21c>)
 8016062:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8016066:	4938      	ldr	r1, [pc, #224]	; (8016148 <mem_malloc+0x220>)
 8016068:	4838      	ldr	r0, [pc, #224]	; (801614c <mem_malloc+0x224>)
 801606a:	f00a fda5 	bl	8020bb8 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801606e:	4b35      	ldr	r3, [pc, #212]	; (8016144 <mem_malloc+0x21c>)
 8016070:	f240 32be 	movw	r2, #958	; 0x3be
 8016074:	4936      	ldr	r1, [pc, #216]	; (8016150 <mem_malloc+0x228>)
 8016076:	4835      	ldr	r0, [pc, #212]	; (801614c <mem_malloc+0x224>)
 8016078:	f00a fd9e 	bl	8020bb8 <iprintf>
  void *p = (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 801607c:	f104 0518 	add.w	r5, r4, #24
  mem_overflow_init_raw(p, user_size);
 8016080:	4649      	mov	r1, r9
  mem->user_size = user_size;
 8016082:	f8a4 9006 	strh.w	r9, [r4, #6]
  mem_overflow_init_raw(p, user_size);
 8016086:	4628      	mov	r0, r5
 8016088:	f7ff fd2c 	bl	8015ae4 <mem_overflow_init_raw>
        MEM_SANITY();
 801608c:	f7ff fbfc 	bl	8015888 <mem_sanity>
}
 8016090:	4628      	mov	r0, r5
 8016092:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8016096:	f10a 0a28 	add.w	sl, sl, #40	; 0x28
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801609a:	f642 63e0 	movw	r3, #12000	; 0x2ee0
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801609e:	44b2      	add	sl, r6
 80160a0:	fa1f fa8a 	uxth.w	sl, sl
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80160a4:	459a      	cmp	sl, r3
 80160a6:	d038      	beq.n	801611a <mem_malloc+0x1f2>
  return (struct mem *)(void *)&ram[ptr];
 80160a8:	eb00 030a 	add.w	r3, r0, sl
          mem2->used = 0;
 80160ac:	2100      	movs	r1, #0
          mem->used = 1;
 80160ae:	f04f 0c01 	mov.w	ip, #1
          mem2->used = 0;
 80160b2:	7119      	strb	r1, [r3, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 80160b4:	f642 61e0 	movw	r1, #12000	; 0x2ee0
          mem2->next = mem->next;
 80160b8:	f820 200a 	strh.w	r2, [r0, sl]
          mem2->prev = ptr;
 80160bc:	805e      	strh	r6, [r3, #2]
          mem->next = ptr2;
 80160be:	f8a4 a000 	strh.w	sl, [r4]
          mem->used = 1;
 80160c2:	f884 c004 	strb.w	ip, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 80160c6:	f830 300a 	ldrh.w	r3, [r0, sl]
 80160ca:	428b      	cmp	r3, r1
 80160cc:	d002      	beq.n	80160d4 <mem_malloc+0x1ac>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80160ce:	4403      	add	r3, r0
 80160d0:	f8a3 a002 	strh.w	sl, [r3, #2]
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 80160d4:	4a19      	ldr	r2, [pc, #100]	; (801613c <mem_malloc+0x214>)
 80160d6:	f8b2 30ac 	ldrh.w	r3, [r2, #172]	; 0xac
 80160da:	f8b2 10ae 	ldrh.w	r1, [r2, #174]	; 0xae
 80160de:	3308      	adds	r3, #8
 80160e0:	443b      	add	r3, r7
 80160e2:	b29b      	uxth	r3, r3
 80160e4:	4299      	cmp	r1, r3
 80160e6:	f8a2 30ac 	strh.w	r3, [r2, #172]	; 0xac
 80160ea:	d28b      	bcs.n	8016004 <mem_malloc+0xdc>
 80160ec:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 80160f0:	e788      	b.n	8016004 <mem_malloc+0xdc>
    return NULL;
 80160f2:	2500      	movs	r5, #0
}
 80160f4:	4628      	mov	r0, r5
 80160f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80160fa:	4b12      	ldr	r3, [pc, #72]	; (8016144 <mem_malloc+0x21c>)
 80160fc:	f240 32ba 	movw	r2, #954	; 0x3ba
 8016100:	4914      	ldr	r1, [pc, #80]	; (8016154 <mem_malloc+0x22c>)
 8016102:	4812      	ldr	r0, [pc, #72]	; (801614c <mem_malloc+0x224>)
 8016104:	f00a fd58 	bl	8020bb8 <iprintf>
 8016108:	e7a8      	b.n	801605c <mem_malloc+0x134>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801610a:	4b0e      	ldr	r3, [pc, #56]	; (8016144 <mem_malloc+0x21c>)
 801610c:	f240 32b5 	movw	r2, #949	; 0x3b5
 8016110:	4911      	ldr	r1, [pc, #68]	; (8016158 <mem_malloc+0x230>)
 8016112:	480e      	ldr	r0, [pc, #56]	; (801614c <mem_malloc+0x224>)
 8016114:	f00a fd50 	bl	8020bb8 <iprintf>
 8016118:	e798      	b.n	801604c <mem_malloc+0x124>
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801611a:	4b0a      	ldr	r3, [pc, #40]	; (8016144 <mem_malloc+0x21c>)
 801611c:	f240 3287 	movw	r2, #903	; 0x387
 8016120:	490e      	ldr	r1, [pc, #56]	; (801615c <mem_malloc+0x234>)
 8016122:	480a      	ldr	r0, [pc, #40]	; (801614c <mem_malloc+0x224>)
 8016124:	f00a fd48 	bl	8020bb8 <iprintf>
 8016128:	4b02      	ldr	r3, [pc, #8]	; (8016134 <mem_malloc+0x20c>)
 801612a:	8822      	ldrh	r2, [r4, #0]
 801612c:	6818      	ldr	r0, [r3, #0]
 801612e:	e7bb      	b.n	80160a8 <mem_malloc+0x180>
 8016130:	2002a2e0 	.word	0x2002a2e0
 8016134:	2002a2e4 	.word	0x2002a2e4
 8016138:	2002a2dc 	.word	0x2002a2dc
 801613c:	2003e1cc 	.word	0x2003e1cc
 8016140:	2002a2e8 	.word	0x2002a2e8
 8016144:	0803d2d8 	.word	0x0803d2d8
 8016148:	0803d244 	.word	0x0803d244
 801614c:	08026bb8 	.word	0x08026bb8
 8016150:	0803d274 	.word	0x0803d274
 8016154:	0803d214 	.word	0x0803d214
 8016158:	0803d1f8 	.word	0x0803d1f8
 801615c:	0803d408 	.word	0x0803d408
 8016160:	2002a2d8 	.word	0x2002a2d8

08016164 <memp_overflow_check_all>:
 *
 * @see memp_overflow_check_element for a description of the check
 */
static void
memp_overflow_check_all(void)
{
 8016164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016168:	f8df 8054 	ldr.w	r8, [pc, #84]	; 80161c0 <memp_overflow_check_all+0x5c>
 801616c:	2308      	movs	r3, #8
 801616e:	4d11      	ldr	r5, [pc, #68]	; (80161b4 <memp_overflow_check_all+0x50>)
 8016170:	f108 093c 	add.w	r9, r8, #60	; 0x3c
 8016174:	4e10      	ldr	r6, [pc, #64]	; (80161b8 <memp_overflow_check_all+0x54>)
  mem_overflow_check_raw((u8_t *)p + MEMP_SIZE, desc->size, "pool ", desc->desc);
 8016176:	4f11      	ldr	r7, [pc, #68]	; (80161bc <memp_overflow_check_all+0x58>)
  struct memp *p;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);

  for (i = 0; i < MEMP_MAX; ++i) {
    p = (struct memp *)LWIP_MEM_ALIGN(memp_pools[i]->base);
 8016178:	3503      	adds	r5, #3
 801617a:	f025 0503 	bic.w	r5, r5, #3
    for (j = 0; j < memp_pools[i]->num; ++j) {
 801617e:	b183      	cbz	r3, 80161a2 <memp_overflow_check_all+0x3e>
 8016180:	8931      	ldrh	r1, [r6, #8]
 8016182:	2400      	movs	r4, #0
 8016184:	3401      	adds	r4, #1
  mem_overflow_check_raw((u8_t *)p + MEMP_SIZE, desc->size, "pool ", desc->desc);
 8016186:	6833      	ldr	r3, [r6, #0]
 8016188:	463a      	mov	r2, r7
 801618a:	f105 001c 	add.w	r0, r5, #28
 801618e:	f7ff fc5d 	bl	8015a4c <mem_overflow_check_raw>
      memp_overflow_check_element(p, memp_pools[i]);
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 8016192:	8931      	ldrh	r1, [r6, #8]
    for (j = 0; j < memp_pools[i]->num; ++j) {
 8016194:	b2a4      	uxth	r4, r4
 8016196:	8973      	ldrh	r3, [r6, #10]
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 8016198:	f101 022c 	add.w	r2, r1, #44	; 0x2c
    for (j = 0; j < memp_pools[i]->num; ++j) {
 801619c:	42a3      	cmp	r3, r4
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 801619e:	4415      	add	r5, r2
    for (j = 0; j < memp_pools[i]->num; ++j) {
 80161a0:	d8f0      	bhi.n	8016184 <memp_overflow_check_all+0x20>
  for (i = 0; i < MEMP_MAX; ++i) {
 80161a2:	45c1      	cmp	r9, r8
 80161a4:	d004      	beq.n	80161b0 <memp_overflow_check_all+0x4c>
 80161a6:	f858 6b04 	ldr.w	r6, [r8], #4
 80161aa:	68f5      	ldr	r5, [r6, #12]
 80161ac:	8973      	ldrh	r3, [r6, #10]
 80161ae:	e7e3      	b.n	8016178 <memp_overflow_check_all+0x14>
    }
  }
  SYS_ARCH_UNPROTECT(old_level);
}
 80161b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80161b4:	200323c0 	.word	0x200323c0
 80161b8:	0803d528 	.word	0x0803d528
 80161bc:	0803d618 	.word	0x0803d618
 80161c0:	0803d624 	.word	0x0803d624

080161c4 <do_memp_malloc_pool_fn.isra.3>:

static void *
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
 80161c4:	b570      	push	{r4, r5, r6, lr}
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80161c6:	680c      	ldr	r4, [r1, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80161c8:	b1e4      	cbz	r4, 8016204 <do_memp_malloc_pool_fn.isra.3+0x40>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80161ca:	6826      	ldr	r6, [r4, #0]
 80161cc:	4605      	mov	r5, r0
#if MEMP_OVERFLOW_CHECK
    memp->next = NULL;
 80161ce:	2000      	movs	r0, #0
    *desc->tab = memp->next;
 80161d0:	600e      	str	r6, [r1, #0]
    memp->next = NULL;
 80161d2:	6020      	str	r0, [r4, #0]
#endif /* MEMP_OVERFLOW_CHECK */
#endif /* !MEMP_MEM_MALLOC */
#if MEMP_OVERFLOW_CHECK
    memp->file = file;
    memp->line = line;
 80161d4:	e9c4 2301 	strd	r2, r3, [r4, #4]
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80161d8:	07a3      	lsls	r3, r4, #30
 80161da:	d10b      	bne.n	80161f4 <do_memp_malloc_pool_fn.isra.3+0x30>
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
 80161dc:	682a      	ldr	r2, [r5, #0]
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80161de:	f104 001c 	add.w	r0, r4, #28
    desc->stats->used++;
 80161e2:	8893      	ldrh	r3, [r2, #4]
    if (desc->stats->used > desc->stats->max) {
 80161e4:	88d1      	ldrh	r1, [r2, #6]
    desc->stats->used++;
 80161e6:	3301      	adds	r3, #1
 80161e8:	b29b      	uxth	r3, r3
    if (desc->stats->used > desc->stats->max) {
 80161ea:	4299      	cmp	r1, r3
    desc->stats->used++;
 80161ec:	8093      	strh	r3, [r2, #4]
      desc->stats->max = desc->stats->used;
 80161ee:	bf38      	it	cc
 80161f0:	80d3      	strhcc	r3, [r2, #6]
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 80161f2:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80161f4:	4b06      	ldr	r3, [pc, #24]	; (8016210 <do_memp_malloc_pool_fn.isra.3+0x4c>)
 80161f6:	f240 1219 	movw	r2, #281	; 0x119
 80161fa:	4906      	ldr	r1, [pc, #24]	; (8016214 <do_memp_malloc_pool_fn.isra.3+0x50>)
 80161fc:	4806      	ldr	r0, [pc, #24]	; (8016218 <do_memp_malloc_pool_fn.isra.3+0x54>)
 80161fe:	f00a fcdb 	bl	8020bb8 <iprintf>
 8016202:	e7eb      	b.n	80161dc <do_memp_malloc_pool_fn.isra.3+0x18>
    desc->stats->err++;
 8016204:	6802      	ldr	r2, [r0, #0]
 8016206:	4620      	mov	r0, r4
 8016208:	8813      	ldrh	r3, [r2, #0]
 801620a:	3301      	adds	r3, #1
 801620c:	8013      	strh	r3, [r2, #0]
}
 801620e:	bd70      	pop	{r4, r5, r6, pc}
 8016210:	0803d448 	.word	0x0803d448
 8016214:	0803d478 	.word	0x0803d478
 8016218:	08026bb8 	.word	0x08026bb8

0801621c <do_memp_free_pool.isra.5>:
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801621c:	0793      	lsls	r3, r2, #30
do_memp_free_pool(const struct memp_desc *desc, void *mem)
 801621e:	b570      	push	{r4, r5, r6, lr}
 8016220:	4614      	mov	r4, r2
 8016222:	4606      	mov	r6, r0
 8016224:	460d      	mov	r5, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 8016226:	d122      	bne.n	801626e <do_memp_free_pool.isra.5+0x52>
#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
 8016228:	6830      	ldr	r0, [r6, #0]
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801622a:	f1a4 021c 	sub.w	r2, r4, #28
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801622e:	6829      	ldr	r1, [r5, #0]
  desc->stats->used--;
 8016230:	8883      	ldrh	r3, [r0, #4]
  memp->next = *desc->tab;
 8016232:	680d      	ldr	r5, [r1, #0]
  desc->stats->used--;
 8016234:	3b01      	subs	r3, #1
 8016236:	8083      	strh	r3, [r0, #4]
  memp->next = *desc->tab;
 8016238:	f844 5c1c 	str.w	r5, [r4, #-28]
  *desc->tab = memp;
 801623c:	600a      	str	r2, [r1, #0]
  if (t != NULL) {
 801623e:	b162      	cbz	r2, 801625a <do_memp_free_pool.isra.5+0x3e>
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 8016240:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 8016244:	b14a      	cbz	r2, 801625a <do_memp_free_pool.isra.5+0x3e>
 8016246:	b143      	cbz	r3, 801625a <do_memp_free_pool.isra.5+0x3e>
      if (t == h) {
 8016248:	429a      	cmp	r2, r3
 801624a:	d007      	beq.n	801625c <do_memp_free_pool.isra.5+0x40>
         h = ((h->next != NULL) ? h->next->next : NULL)) {
 801624c:	681b      	ldr	r3, [r3, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 801624e:	6812      	ldr	r2, [r2, #0]
         h = ((h->next != NULL) ? h->next->next : NULL)) {
 8016250:	2b00      	cmp	r3, #0
 8016252:	d0f7      	beq.n	8016244 <do_memp_free_pool.isra.5+0x28>
 8016254:	681b      	ldr	r3, [r3, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 8016256:	2a00      	cmp	r2, #0
 8016258:	d1f5      	bne.n	8016246 <do_memp_free_pool.isra.5+0x2a>
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 801625a:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
 801625c:	4b08      	ldr	r3, [pc, #32]	; (8016280 <do_memp_free_pool.isra.5+0x64>)
 801625e:	f240 1285 	movw	r2, #389	; 0x185
 8016262:	4908      	ldr	r1, [pc, #32]	; (8016284 <do_memp_free_pool.isra.5+0x68>)
 8016264:	4808      	ldr	r0, [pc, #32]	; (8016288 <do_memp_free_pool.isra.5+0x6c>)
}
 8016266:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
 801626a:	f00a bca5 	b.w	8020bb8 <iprintf>
  LWIP_ASSERT("memp_free: mem properly aligned",
 801626e:	4b04      	ldr	r3, [pc, #16]	; (8016280 <do_memp_free_pool.isra.5+0x64>)
 8016270:	f240 126d 	movw	r2, #365	; 0x16d
 8016274:	4905      	ldr	r1, [pc, #20]	; (801628c <do_memp_free_pool.isra.5+0x70>)
 8016276:	4804      	ldr	r0, [pc, #16]	; (8016288 <do_memp_free_pool.isra.5+0x6c>)
 8016278:	f00a fc9e 	bl	8020bb8 <iprintf>
 801627c:	e7d4      	b.n	8016228 <do_memp_free_pool.isra.5+0xc>
 801627e:	bf00      	nop
 8016280:	0803d448 	.word	0x0803d448
 8016284:	0803d43c 	.word	0x0803d43c
 8016288:	08026bb8 	.word	0x08026bb8
 801628c:	0803d41c 	.word	0x0803d41c

08016290 <memp_init_pool>:
{
 8016290:	b570      	push	{r4, r5, r6, lr}
  *desc->tab = NULL;
 8016292:	2200      	movs	r2, #0
{
 8016294:	4605      	mov	r5, r0
  *desc->tab = NULL;
 8016296:	e9d0 4303 	ldrd	r4, r3, [r0, #12]
  for (i = 0; i < desc->num; ++i) {
 801629a:	8940      	ldrh	r0, [r0, #10]
  *desc->tab = NULL;
 801629c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < desc->num; ++i) {
 801629e:	b1a8      	cbz	r0, 80162cc <memp_init_pool+0x3c>
 80162a0:	3403      	adds	r4, #3
 80162a2:	8929      	ldrh	r1, [r5, #8]
 80162a4:	4616      	mov	r6, r2
 80162a6:	f024 0403 	bic.w	r4, r4, #3
 80162aa:	e001      	b.n	80162b0 <memp_init_pool+0x20>
 80162ac:	692b      	ldr	r3, [r5, #16]
 80162ae:	681a      	ldr	r2, [r3, #0]
    memp->next = *desc->tab;
 80162b0:	6022      	str	r2, [r4, #0]
  mem_overflow_init_raw((u8_t *)p + MEMP_SIZE, desc->size);
 80162b2:	f104 001c 	add.w	r0, r4, #28
    *desc->tab = memp;
 80162b6:	601c      	str	r4, [r3, #0]
  for (i = 0; i < desc->num; ++i) {
 80162b8:	3601      	adds	r6, #1
  mem_overflow_init_raw((u8_t *)p + MEMP_SIZE, desc->size);
 80162ba:	f7ff fc13 	bl	8015ae4 <mem_overflow_init_raw>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80162be:	8929      	ldrh	r1, [r5, #8]
  for (i = 0; i < desc->num; ++i) {
 80162c0:	8968      	ldrh	r0, [r5, #10]
                                   + MEM_SANITY_REGION_AFTER_ALIGNED
 80162c2:	f101 032c 	add.w	r3, r1, #44	; 0x2c
  for (i = 0; i < desc->num; ++i) {
 80162c6:	42b0      	cmp	r0, r6
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80162c8:	441c      	add	r4, r3
  for (i = 0; i < desc->num; ++i) {
 80162ca:	dcef      	bgt.n	80162ac <memp_init_pool+0x1c>
  desc->stats->avail = desc->num;
 80162cc:	686b      	ldr	r3, [r5, #4]
 80162ce:	8058      	strh	r0, [r3, #2]
}
 80162d0:	bd70      	pop	{r4, r5, r6, pc}
 80162d2:	bf00      	nop

080162d4 <memp_init>:
{
 80162d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80162d6:	4c0a      	ldr	r4, [pc, #40]	; (8016300 <memp_init+0x2c>)
 80162d8:	4e0a      	ldr	r6, [pc, #40]	; (8016304 <memp_init+0x30>)
 80162da:	f104 0740 	add.w	r7, r4, #64	; 0x40
 80162de:	4d0a      	ldr	r5, [pc, #40]	; (8016308 <memp_init+0x34>)
 80162e0:	e001      	b.n	80162e6 <memp_init+0x12>
 80162e2:	f856 5b04 	ldr.w	r5, [r6], #4
    memp_init_pool(memp_pools[i]);
 80162e6:	4628      	mov	r0, r5
 80162e8:	f7ff ffd2 	bl	8016290 <memp_init_pool>
    lwip_stats.memp[i] = memp_pools[i]->stats;
 80162ec:	686b      	ldr	r3, [r5, #4]
 80162ee:	f844 3b04 	str.w	r3, [r4], #4
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80162f2:	42bc      	cmp	r4, r7
 80162f4:	d1f5      	bne.n	80162e2 <memp_init+0xe>
}
 80162f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  memp_overflow_check_all();
 80162fa:	f7ff bf33 	b.w	8016164 <memp_overflow_check_all>
 80162fe:	bf00      	nop
 8016300:	2003e280 	.word	0x2003e280
 8016304:	0803d624 	.word	0x0803d624
 8016308:	0803d528 	.word	0x0803d528

0801630c <memp_malloc_fn>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801630c:	280f      	cmp	r0, #15
{
 801630e:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8016310:	d80f      	bhi.n	8016332 <memp_malloc_fn+0x26>
 8016312:	460d      	mov	r5, r1
 8016314:	4616      	mov	r6, r2
 8016316:	4604      	mov	r4, r0
  memp_overflow_check_all();
 8016318:	f7ff ff24 	bl	8016164 <memp_overflow_check_all>
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
 801631c:	4909      	ldr	r1, [pc, #36]	; (8016344 <memp_malloc_fn+0x38>)
 801631e:	4633      	mov	r3, r6
 8016320:	462a      	mov	r2, r5
 8016322:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
}
 8016326:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
 801632a:	6901      	ldr	r1, [r0, #16]
 801632c:	3004      	adds	r0, #4
 801632e:	f7ff bf49 	b.w	80161c4 <do_memp_malloc_pool_fn.isra.3>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8016332:	4b05      	ldr	r3, [pc, #20]	; (8016348 <memp_malloc_fn+0x3c>)
 8016334:	f240 1257 	movw	r2, #343	; 0x157
 8016338:	4904      	ldr	r1, [pc, #16]	; (801634c <memp_malloc_fn+0x40>)
 801633a:	4805      	ldr	r0, [pc, #20]	; (8016350 <memp_malloc_fn+0x44>)
 801633c:	f00a fc3c 	bl	8020bb8 <iprintf>
}
 8016340:	2000      	movs	r0, #0
 8016342:	bd70      	pop	{r4, r5, r6, pc}
 8016344:	0803d620 	.word	0x0803d620
 8016348:	0803d448 	.word	0x0803d448
 801634c:	0803d5f8 	.word	0x0803d5f8
 8016350:	08026bb8 	.word	0x08026bb8

08016354 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8016354:	280f      	cmp	r0, #15
 8016356:	d811      	bhi.n	801637c <memp_free+0x28>

  if (mem == NULL) {
 8016358:	b179      	cbz	r1, 801637a <memp_free+0x26>
{
 801635a:	b570      	push	{r4, r5, r6, lr}
 801635c:	460d      	mov	r5, r1
 801635e:	4604      	mov	r4, r0
    return;
  }

#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
 8016360:	f7ff ff00 	bl	8016164 <memp_overflow_check_all>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8016364:	4b09      	ldr	r3, [pc, #36]	; (801638c <memp_free+0x38>)
 8016366:	462a      	mov	r2, r5
 8016368:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801636c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  do_memp_free_pool(memp_pools[type], mem);
 8016370:	f100 0110 	add.w	r1, r0, #16
 8016374:	3004      	adds	r0, #4
 8016376:	f7ff bf51 	b.w	801621c <do_memp_free_pool.isra.5>
 801637a:	4770      	bx	lr
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801637c:	4b04      	ldr	r3, [pc, #16]	; (8016390 <memp_free+0x3c>)
 801637e:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8016382:	4904      	ldr	r1, [pc, #16]	; (8016394 <memp_free+0x40>)
 8016384:	4804      	ldr	r0, [pc, #16]	; (8016398 <memp_free+0x44>)
 8016386:	f00a bc17 	b.w	8020bb8 <iprintf>
 801638a:	bf00      	nop
 801638c:	0803d620 	.word	0x0803d620
 8016390:	0803d448 	.word	0x0803d448
 8016394:	0803d5dc 	.word	0x0803d5dc
 8016398:	08026bb8 	.word	0x08026bb8

0801639c <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 801639c:	f06f 000b 	mvn.w	r0, #11
 80163a0:	4770      	bx	lr
 80163a2:	bf00      	nop

080163a4 <netif_issue_reports>:
{
 80163a4:	b538      	push	{r3, r4, r5, lr}
 80163a6:	460d      	mov	r5, r1
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80163a8:	4604      	mov	r4, r0
 80163aa:	b198      	cbz	r0, 80163d4 <netif_issue_reports+0x30>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80163ac:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80163b0:	f003 0205 	and.w	r2, r3, #5
 80163b4:	2a05      	cmp	r2, #5
 80163b6:	d000      	beq.n	80163ba <netif_issue_reports+0x16>
}
 80163b8:	bd38      	pop	{r3, r4, r5, pc}
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80163ba:	07ea      	lsls	r2, r5, #31
 80163bc:	d5fc      	bpl.n	80163b8 <netif_issue_reports+0x14>
 80163be:	6862      	ldr	r2, [r4, #4]
 80163c0:	2a00      	cmp	r2, #0
 80163c2:	d0f9      	beq.n	80163b8 <netif_issue_reports+0x14>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80163c4:	071b      	lsls	r3, r3, #28
 80163c6:	d5f7      	bpl.n	80163b8 <netif_issue_reports+0x14>
      etharp_gratuitous(netif);
 80163c8:	1d21      	adds	r1, r4, #4
 80163ca:	4620      	mov	r0, r4
}
 80163cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      etharp_gratuitous(netif);
 80163d0:	f007 bdd6 	b.w	801df80 <etharp_request>
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80163d4:	4b03      	ldr	r3, [pc, #12]	; (80163e4 <netif_issue_reports+0x40>)
 80163d6:	f240 326d 	movw	r2, #877	; 0x36d
 80163da:	4903      	ldr	r1, [pc, #12]	; (80163e8 <netif_issue_reports+0x44>)
 80163dc:	4803      	ldr	r0, [pc, #12]	; (80163ec <netif_issue_reports+0x48>)
 80163de:	f00a fbeb 	bl	8020bb8 <iprintf>
 80163e2:	e7e3      	b.n	80163ac <netif_issue_reports+0x8>
 80163e4:	0803d7a8 	.word	0x0803d7a8
 80163e8:	0803d7dc 	.word	0x0803d7dc
 80163ec:	08026bb8 	.word	0x08026bb8

080163f0 <netif_do_set_ipaddr>:
{
 80163f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80163f2:	4604      	mov	r4, r0
 80163f4:	b083      	sub	sp, #12
 80163f6:	4617      	mov	r7, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80163f8:	460d      	mov	r5, r1
 80163fa:	b319      	cbz	r1, 8016444 <netif_do_set_ipaddr+0x54>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80163fc:	6863      	ldr	r3, [r4, #4]
 80163fe:	682a      	ldr	r2, [r5, #0]
 8016400:	429a      	cmp	r2, r3
 8016402:	d01c      	beq.n	801643e <netif_do_set_ipaddr+0x4e>
    *ip_2_ip4(&new_addr) = *ipaddr;
 8016404:	ae02      	add	r6, sp, #8
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8016406:	603b      	str	r3, [r7, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8016408:	4638      	mov	r0, r7
    *ip_2_ip4(&new_addr) = *ipaddr;
 801640a:	f846 2d04 	str.w	r2, [r6, #-4]!
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801640e:	4631      	mov	r1, r6
 8016410:	f002 f928 	bl	8018664 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8016414:	4631      	mov	r1, r6
 8016416:	4638      	mov	r0, r7
 8016418:	f005 fdd2 	bl	801bfc0 <udp_netif_ip_addr_changed>
  raw_netif_ip_addr_changed(old_addr, new_addr);
 801641c:	4631      	mov	r1, r6
 801641e:	4638      	mov	r0, r7
 8016420:	f000 feae 	bl	8017180 <raw_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8016424:	682b      	ldr	r3, [r5, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8016426:	2101      	movs	r1, #1
 8016428:	4620      	mov	r0, r4
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801642a:	6063      	str	r3, [r4, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801642c:	f7ff ffba 	bl	80163a4 <netif_issue_reports>
    NETIF_STATUS_CALLBACK(netif);
 8016430:	69e3      	ldr	r3, [r4, #28]
 8016432:	b10b      	cbz	r3, 8016438 <netif_do_set_ipaddr+0x48>
 8016434:	4620      	mov	r0, r4
 8016436:	4798      	blx	r3
    return 1; /* address changed */
 8016438:	2001      	movs	r0, #1
}
 801643a:	b003      	add	sp, #12
 801643c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return 0; /* address unchanged */
 801643e:	2000      	movs	r0, #0
}
 8016440:	b003      	add	sp, #12
 8016442:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8016444:	4b03      	ldr	r3, [pc, #12]	; (8016454 <netif_do_set_ipaddr+0x64>)
 8016446:	f240 12cb 	movw	r2, #459	; 0x1cb
 801644a:	4903      	ldr	r1, [pc, #12]	; (8016458 <netif_do_set_ipaddr+0x68>)
 801644c:	4803      	ldr	r0, [pc, #12]	; (801645c <netif_do_set_ipaddr+0x6c>)
 801644e:	f00a fbb3 	bl	8020bb8 <iprintf>
 8016452:	e7d3      	b.n	80163fc <netif_do_set_ipaddr+0xc>
 8016454:	0803d7a8 	.word	0x0803d7a8
 8016458:	0803d798 	.word	0x0803d798
 801645c:	08026bb8 	.word	0x08026bb8

08016460 <netif_init>:
}
 8016460:	4770      	bx	lr
 8016462:	bf00      	nop

08016464 <netif_set_addr>:
{
 8016464:	b5f0      	push	{r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY4;
 8016466:	4c14      	ldr	r4, [pc, #80]	; (80164b8 <netif_set_addr+0x54>)
{
 8016468:	b083      	sub	sp, #12
 801646a:	4605      	mov	r5, r0
    ipaddr = IP4_ADDR_ANY4;
 801646c:	2900      	cmp	r1, #0
 801646e:	bf14      	ite	ne
 8016470:	460e      	movne	r6, r1
 8016472:	4626      	moveq	r6, r4
    netmask = IP4_ADDR_ANY4;
 8016474:	2a00      	cmp	r2, #0
 8016476:	bf14      	ite	ne
 8016478:	4617      	movne	r7, r2
 801647a:	4627      	moveq	r7, r4
    gw = IP4_ADDR_ANY4;
 801647c:	2b00      	cmp	r3, #0
 801647e:	bf18      	it	ne
 8016480:	461c      	movne	r4, r3
  remove = ip4_addr_isany(ipaddr);
 8016482:	6833      	ldr	r3, [r6, #0]
 8016484:	b193      	cbz	r3, 80164ac <netif_set_addr+0x48>
 8016486:	2200      	movs	r2, #0
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8016488:	683b      	ldr	r3, [r7, #0]
 801648a:	68a9      	ldr	r1, [r5, #8]
 801648c:	428b      	cmp	r3, r1
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801648e:	68e9      	ldr	r1, [r5, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8016490:	bf18      	it	ne
 8016492:	60ab      	strne	r3, [r5, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8016494:	6823      	ldr	r3, [r4, #0]
 8016496:	428b      	cmp	r3, r1
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8016498:	bf18      	it	ne
 801649a:	60eb      	strne	r3, [r5, #12]
  if (!remove) {
 801649c:	b922      	cbnz	r2, 80164a8 <netif_set_addr+0x44>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801649e:	4631      	mov	r1, r6
 80164a0:	4628      	mov	r0, r5
 80164a2:	aa01      	add	r2, sp, #4
 80164a4:	f7ff ffa4 	bl	80163f0 <netif_do_set_ipaddr>
}
 80164a8:	b003      	add	sp, #12
 80164aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80164ac:	aa01      	add	r2, sp, #4
 80164ae:	4631      	mov	r1, r6
 80164b0:	f7ff ff9e 	bl	80163f0 <netif_do_set_ipaddr>
 80164b4:	2201      	movs	r2, #1
 80164b6:	e7e7      	b.n	8016488 <netif_set_addr+0x24>
 80164b8:	0803f8a8 	.word	0x0803f8a8

080164bc <netif_add>:
{
 80164bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164c0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80164c2:	4606      	mov	r6, r0
 80164c4:	2800      	cmp	r0, #0
 80164c6:	f000 8087 	beq.w	80165d8 <netif_add+0x11c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80164ca:	2f00      	cmp	r7, #0
 80164cc:	d07b      	beq.n	80165c6 <netif_add+0x10a>
 80164ce:	4688      	mov	r8, r1
  netif->num = netif_num;
 80164d0:	f8df b130 	ldr.w	fp, [pc, #304]	; 8016604 <netif_add+0x148>
  netif->state = state;
 80164d4:	990a      	ldr	r1, [sp, #40]	; 0x28
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80164d6:	2400      	movs	r4, #0
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80164d8:	4d44      	ldr	r5, [pc, #272]	; (80165ec <netif_add+0x130>)
  netif->state = state;
 80164da:	6241      	str	r1, [r0, #36]	; 0x24
  netif->num = netif_num;
 80164dc:	f89b e000 	ldrb.w	lr, [fp]
  netif_set_addr(netif, ipaddr, netmask, gw);
 80164e0:	42a3      	cmp	r3, r4
 80164e2:	bf08      	it	eq
 80164e4:	462b      	moveq	r3, r5
  netif->input = input;
 80164e6:	990c      	ldr	r1, [sp, #48]	; 0x30
  netif_set_addr(netif, ipaddr, netmask, gw);
 80164e8:	42a2      	cmp	r2, r4
 80164ea:	bf08      	it	eq
 80164ec:	462a      	moveq	r2, r5
  netif->output = netif_null_output_ip4;
 80164ee:	f8df c118 	ldr.w	ip, [pc, #280]	; 8016608 <netif_add+0x14c>
  netif->input = input;
 80164f2:	6101      	str	r1, [r0, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 80164f4:	45a0      	cmp	r8, r4
 80164f6:	bf14      	ite	ne
 80164f8:	4641      	movne	r1, r8
 80164fa:	4629      	moveq	r1, r5
  netif->num = netif_num;
 80164fc:	f880 e038 	strb.w	lr, [r0, #56]	; 0x38
  ip_addr_set_zero_ip4(&netif->gw);
 8016500:	60c4      	str	r4, [r0, #12]
  netif->mtu = 0;
 8016502:	8584      	strh	r4, [r0, #44]	; 0x2c
  netif->flags = 0;
 8016504:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8016508:	6284      	str	r4, [r0, #40]	; 0x28
  netif->output = netif_null_output_ip4;
 801650a:	f8c0 c014 	str.w	ip, [r0, #20]
  ip_addr_set_zero_ip4(&netif->netmask);
 801650e:	e9c0 4401 	strd	r4, r4, [r0, #4]
  netif->link_callback = NULL;
 8016512:	e9c0 4407 	strd	r4, r4, [r0, #28]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8016516:	f7ff ffa5 	bl	8016464 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 801651a:	4630      	mov	r0, r6
 801651c:	47b8      	blx	r7
 801651e:	2800      	cmp	r0, #0
 8016520:	d14f      	bne.n	80165c2 <netif_add+0x106>
 8016522:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 8016526:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 801660c <netif_add+0x150>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801652a:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 80165f8 <netif_add+0x13c>
 801652e:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8016610 <netif_add+0x154>
 8016532:	4f2f      	ldr	r7, [pc, #188]	; (80165f0 <netif_add+0x134>)
      if (netif->num == 255) {
 8016534:	2bff      	cmp	r3, #255	; 0xff
 8016536:	d102      	bne.n	801653e <netif_add+0x82>
        netif->num = 0;
 8016538:	2300      	movs	r3, #0
 801653a:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801653e:	f8d9 4000 	ldr.w	r4, [r9]
 8016542:	b3b4      	cbz	r4, 80165b2 <netif_add+0xf6>
      num_netifs = 0;
 8016544:	2500      	movs	r5, #0
 8016546:	e007      	b.n	8016558 <netif_add+0x9c>
        if (netif2->num == netif->num) {
 8016548:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801654c:	f896 2038 	ldrb.w	r2, [r6, #56]	; 0x38
 8016550:	4293      	cmp	r3, r2
 8016552:	d014      	beq.n	801657e <netif_add+0xc2>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8016554:	6824      	ldr	r4, [r4, #0]
 8016556:	b1fc      	cbz	r4, 8016598 <netif_add+0xdc>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8016558:	42a6      	cmp	r6, r4
        num_netifs++;
 801655a:	f105 0501 	add.w	r5, r5, #1
        LWIP_ASSERT("netif already added", netif2 != netif);
 801655e:	d013      	beq.n	8016588 <netif_add+0xcc>
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8016560:	2dff      	cmp	r5, #255	; 0xff
 8016562:	ddf1      	ble.n	8016548 <netif_add+0x8c>
 8016564:	4643      	mov	r3, r8
 8016566:	f240 128d 	movw	r2, #397	; 0x18d
 801656a:	4922      	ldr	r1, [pc, #136]	; (80165f4 <netif_add+0x138>)
 801656c:	4638      	mov	r0, r7
 801656e:	f00a fb23 	bl	8020bb8 <iprintf>
        if (netif2->num == netif->num) {
 8016572:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8016576:	f896 2038 	ldrb.w	r2, [r6, #56]	; 0x38
 801657a:	4293      	cmp	r3, r2
 801657c:	d1ea      	bne.n	8016554 <netif_add+0x98>
          netif->num++;
 801657e:	3301      	adds	r3, #1
 8016580:	b2db      	uxtb	r3, r3
 8016582:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
 8016586:	e7d5      	b.n	8016534 <netif_add+0x78>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8016588:	4643      	mov	r3, r8
 801658a:	f240 128b 	movw	r2, #395	; 0x18b
 801658e:	4651      	mov	r1, sl
 8016590:	4638      	mov	r0, r7
 8016592:	f00a fb11 	bl	8020bb8 <iprintf>
 8016596:	e7e3      	b.n	8016560 <netif_add+0xa4>
  if (netif->num == 254) {
 8016598:	2afe      	cmp	r2, #254	; 0xfe
 801659a:	f8d9 4000 	ldr.w	r4, [r9]
 801659e:	d00c      	beq.n	80165ba <netif_add+0xfe>
    netif_num = (u8_t)(netif->num + 1);
 80165a0:	3201      	adds	r2, #1
 80165a2:	f88b 2000 	strb.w	r2, [fp]
  return netif;
 80165a6:	4630      	mov	r0, r6
  netif->next = netif_list;
 80165a8:	6034      	str	r4, [r6, #0]
  netif_list = netif;
 80165aa:	f8c9 6000 	str.w	r6, [r9]
}
 80165ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165b2:	f896 2038 	ldrb.w	r2, [r6, #56]	; 0x38
  if (netif->num == 254) {
 80165b6:	2afe      	cmp	r2, #254	; 0xfe
 80165b8:	d1f2      	bne.n	80165a0 <netif_add+0xe4>
    netif_num = 0;
 80165ba:	2300      	movs	r3, #0
 80165bc:	f88b 3000 	strb.w	r3, [fp]
 80165c0:	e7f1      	b.n	80165a6 <netif_add+0xea>
    return NULL;
 80165c2:	4620      	mov	r0, r4
 80165c4:	e7f3      	b.n	80165ae <netif_add+0xf2>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80165c6:	4b0c      	ldr	r3, [pc, #48]	; (80165f8 <netif_add+0x13c>)
 80165c8:	f44f 7294 	mov.w	r2, #296	; 0x128
 80165cc:	490b      	ldr	r1, [pc, #44]	; (80165fc <netif_add+0x140>)
 80165ce:	4808      	ldr	r0, [pc, #32]	; (80165f0 <netif_add+0x134>)
 80165d0:	f00a faf2 	bl	8020bb8 <iprintf>
 80165d4:	4638      	mov	r0, r7
 80165d6:	e7ea      	b.n	80165ae <netif_add+0xf2>
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80165d8:	4b07      	ldr	r3, [pc, #28]	; (80165f8 <netif_add+0x13c>)
 80165da:	f240 1227 	movw	r2, #295	; 0x127
 80165de:	4908      	ldr	r1, [pc, #32]	; (8016600 <netif_add+0x144>)
 80165e0:	4803      	ldr	r0, [pc, #12]	; (80165f0 <netif_add+0x134>)
 80165e2:	f00a fae9 	bl	8020bb8 <iprintf>
 80165e6:	4630      	mov	r0, r6
 80165e8:	e7e1      	b.n	80165ae <netif_add+0xf2>
 80165ea:	bf00      	nop
 80165ec:	0803f8a8 	.word	0x0803f8a8
 80165f0:	08026bb8 	.word	0x08026bb8
 80165f4:	0803d768 	.word	0x0803d768
 80165f8:	0803d7a8 	.word	0x0803d7a8
 80165fc:	0803d730 	.word	0x0803d730
 8016600:	0803d714 	.word	0x0803d714
 8016604:	2002a3ec 	.word	0x2002a3ec
 8016608:	0801639d 	.word	0x0801639d
 801660c:	2003e1c0 	.word	0x2003e1c0
 8016610:	0803d754 	.word	0x0803d754

08016614 <netif_set_default>:
  netif_default = netif;
 8016614:	4b01      	ldr	r3, [pc, #4]	; (801661c <netif_set_default+0x8>)
 8016616:	6018      	str	r0, [r3, #0]
}
 8016618:	4770      	bx	lr
 801661a:	bf00      	nop
 801661c:	2003e1c4 	.word	0x2003e1c4

08016620 <netif_set_up>:
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8016620:	b198      	cbz	r0, 801664a <netif_set_up+0x2a>
{
 8016622:	b510      	push	{r4, lr}
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8016624:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8016628:	4604      	mov	r4, r0
 801662a:	07d3      	lsls	r3, r2, #31
 801662c:	d40c      	bmi.n	8016648 <netif_set_up+0x28>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801662e:	f042 0201 	orr.w	r2, r2, #1
    NETIF_STATUS_CALLBACK(netif);
 8016632:	69c3      	ldr	r3, [r0, #28]
    netif_set_flags(netif, NETIF_FLAG_UP);
 8016634:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    NETIF_STATUS_CALLBACK(netif);
 8016638:	b103      	cbz	r3, 801663c <netif_set_up+0x1c>
 801663a:	4798      	blx	r3
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801663c:	4620      	mov	r0, r4
 801663e:	2103      	movs	r1, #3
}
 8016640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8016644:	f7ff beae 	b.w	80163a4 <netif_issue_reports>
}
 8016648:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801664a:	4b03      	ldr	r3, [pc, #12]	; (8016658 <netif_set_up+0x38>)
 801664c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8016650:	4902      	ldr	r1, [pc, #8]	; (801665c <netif_set_up+0x3c>)
 8016652:	4803      	ldr	r0, [pc, #12]	; (8016660 <netif_set_up+0x40>)
 8016654:	f00a bab0 	b.w	8020bb8 <iprintf>
 8016658:	0803d7a8 	.word	0x0803d7a8
 801665c:	0803d868 	.word	0x0803d868
 8016660:	08026bb8 	.word	0x08026bb8

08016664 <netif_set_down>:
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8016664:	b190      	cbz	r0, 801668c <netif_set_down+0x28>
{
 8016666:	b510      	push	{r4, lr}
  if (netif->flags & NETIF_FLAG_UP) {
 8016668:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 801666c:	4604      	mov	r4, r0
 801666e:	07d1      	lsls	r1, r2, #31
 8016670:	d50b      	bpl.n	801668a <netif_set_down+0x26>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 8016672:	f022 0301 	bic.w	r3, r2, #1
 8016676:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801667a:	0713      	lsls	r3, r2, #28
 801667c:	d40d      	bmi.n	801669a <netif_set_down+0x36>
    NETIF_STATUS_CALLBACK(netif);
 801667e:	69e3      	ldr	r3, [r4, #28]
 8016680:	b11b      	cbz	r3, 801668a <netif_set_down+0x26>
 8016682:	4620      	mov	r0, r4
}
 8016684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_STATUS_CALLBACK(netif);
 8016688:	4718      	bx	r3
}
 801668a:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801668c:	4b04      	ldr	r3, [pc, #16]	; (80166a0 <netif_set_down+0x3c>)
 801668e:	f240 329b 	movw	r2, #923	; 0x39b
 8016692:	4904      	ldr	r1, [pc, #16]	; (80166a4 <netif_set_down+0x40>)
 8016694:	4804      	ldr	r0, [pc, #16]	; (80166a8 <netif_set_down+0x44>)
 8016696:	f00a ba8f 	b.w	8020bb8 <iprintf>
      etharp_cleanup_netif(netif);
 801669a:	f007 f9c3 	bl	801da24 <etharp_cleanup_netif>
 801669e:	e7ee      	b.n	801667e <netif_set_down+0x1a>
 80166a0:	0803d7a8 	.word	0x0803d7a8
 80166a4:	0803d800 	.word	0x0803d800
 80166a8:	08026bb8 	.word	0x08026bb8

080166ac <netif_set_status_callback>:
  if (netif) {
 80166ac:	b100      	cbz	r0, 80166b0 <netif_set_status_callback+0x4>
    netif->status_callback = status_callback;
 80166ae:	61c1      	str	r1, [r0, #28]
}
 80166b0:	4770      	bx	lr
 80166b2:	bf00      	nop

080166b4 <netif_set_link_up>:
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80166b4:	b1b8      	cbz	r0, 80166e6 <netif_set_link_up+0x32>
{
 80166b6:	b510      	push	{r4, lr}
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80166b8:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 80166bc:	4604      	mov	r4, r0
 80166be:	0753      	lsls	r3, r2, #29
 80166c0:	d500      	bpl.n	80166c4 <netif_set_link_up+0x10>
}
 80166c2:	bd10      	pop	{r4, pc}
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80166c4:	f042 0204 	orr.w	r2, r2, #4
 80166c8:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    dhcp_network_changed(netif);
 80166cc:	f006 fc9c 	bl	801d008 <dhcp_network_changed>
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80166d0:	2103      	movs	r1, #3
 80166d2:	4620      	mov	r0, r4
 80166d4:	f7ff fe66 	bl	80163a4 <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 80166d8:	6a23      	ldr	r3, [r4, #32]
 80166da:	2b00      	cmp	r3, #0
 80166dc:	d0f1      	beq.n	80166c2 <netif_set_link_up+0xe>
 80166de:	4620      	mov	r0, r4
}
 80166e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 80166e4:	4718      	bx	r3
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80166e6:	4b03      	ldr	r3, [pc, #12]	; (80166f4 <netif_set_link_up+0x40>)
 80166e8:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80166ec:	4902      	ldr	r1, [pc, #8]	; (80166f8 <netif_set_link_up+0x44>)
 80166ee:	4803      	ldr	r0, [pc, #12]	; (80166fc <netif_set_link_up+0x48>)
 80166f0:	f00a ba62 	b.w	8020bb8 <iprintf>
 80166f4:	0803d7a8 	.word	0x0803d7a8
 80166f8:	0803d844 	.word	0x0803d844
 80166fc:	08026bb8 	.word	0x08026bb8

08016700 <netif_set_link_down>:
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8016700:	b158      	cbz	r0, 801671a <netif_set_link_down+0x1a>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8016702:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8016706:	0759      	lsls	r1, r3, #29
 8016708:	d506      	bpl.n	8016718 <netif_set_link_down+0x18>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801670a:	f023 0304 	bic.w	r3, r3, #4
    NETIF_LINK_CALLBACK(netif);
 801670e:	6a01      	ldr	r1, [r0, #32]
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8016710:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    NETIF_LINK_CALLBACK(netif);
 8016714:	b101      	cbz	r1, 8016718 <netif_set_link_down+0x18>
 8016716:	4708      	bx	r1
}
 8016718:	4770      	bx	lr
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801671a:	4b03      	ldr	r3, [pc, #12]	; (8016728 <netif_set_link_down+0x28>)
 801671c:	f240 4206 	movw	r2, #1030	; 0x406
 8016720:	4902      	ldr	r1, [pc, #8]	; (801672c <netif_set_link_down+0x2c>)
 8016722:	4803      	ldr	r0, [pc, #12]	; (8016730 <netif_set_link_down+0x30>)
 8016724:	f00a ba48 	b.w	8020bb8 <iprintf>
 8016728:	0803d7a8 	.word	0x0803d7a8
 801672c:	0803d820 	.word	0x0803d820
 8016730:	08026bb8 	.word	0x08026bb8

08016734 <netif_set_link_callback>:
  if (netif) {
 8016734:	b100      	cbz	r0, 8016738 <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 8016736:	6201      	str	r1, [r0, #32]
}
 8016738:	4770      	bx	lr
 801673a:	bf00      	nop

0801673c <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801673c:	b1a0      	cbz	r0, 8016768 <netif_get_by_index+0x2c>
    NETIF_FOREACH(netif) {
 801673e:	4b0b      	ldr	r3, [pc, #44]	; (801676c <netif_get_by_index+0x30>)
 8016740:	681a      	ldr	r2, [r3, #0]
 8016742:	b17a      	cbz	r2, 8016764 <netif_get_by_index+0x28>
      if (idx == netif_get_index(netif)) {
 8016744:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8016748:	3301      	adds	r3, #1
 801674a:	b2db      	uxtb	r3, r3
 801674c:	4298      	cmp	r0, r3
 801674e:	d106      	bne.n	801675e <netif_get_by_index+0x22>
 8016750:	e008      	b.n	8016764 <netif_get_by_index+0x28>
 8016752:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8016756:	3301      	adds	r3, #1
 8016758:	b2db      	uxtb	r3, r3
 801675a:	4283      	cmp	r3, r0
 801675c:	d002      	beq.n	8016764 <netif_get_by_index+0x28>
    NETIF_FOREACH(netif) {
 801675e:	6812      	ldr	r2, [r2, #0]
 8016760:	2a00      	cmp	r2, #0
 8016762:	d1f6      	bne.n	8016752 <netif_get_by_index+0x16>
      }
    }
  }

  return NULL;
}
 8016764:	4610      	mov	r0, r2
 8016766:	4770      	bx	lr
  return NULL;
 8016768:	4602      	mov	r2, r0
 801676a:	e7fb      	b.n	8016764 <netif_get_by_index+0x28>
 801676c:	2003e1c0 	.word	0x2003e1c0

08016770 <pbuf_free_ooseq_callback>:
pbuf_free_ooseq(void)
{
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8016770:	4907      	ldr	r1, [pc, #28]	; (8016790 <pbuf_free_ooseq_callback+0x20>)
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8016772:	2200      	movs	r2, #0
 8016774:	4b07      	ldr	r3, [pc, #28]	; (8016794 <pbuf_free_ooseq_callback+0x24>)
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8016776:	6808      	ldr	r0, [r1, #0]
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8016778:	701a      	strb	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801677a:	b910      	cbnz	r0, 8016782 <pbuf_free_ooseq_callback+0x12>
 801677c:	e006      	b.n	801678c <pbuf_free_ooseq_callback+0x1c>
 801677e:	68c0      	ldr	r0, [r0, #12]
 8016780:	b120      	cbz	r0, 801678c <pbuf_free_ooseq_callback+0x1c>
    if (pcb->ooseq != NULL) {
 8016782:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8016784:	2b00      	cmp	r3, #0
 8016786:	d0fa      	beq.n	801677e <pbuf_free_ooseq_callback+0xe>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8016788:	f001 bf96 	b.w	80186b8 <tcp_free_ooseq>
static void
pbuf_free_ooseq_callback(void *arg)
{
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
}
 801678c:	4770      	bx	lr
 801678e:	bf00      	nop
 8016790:	2003e2d8 	.word	0x2003e2d8
 8016794:	2003e1c8 	.word	0x2003e1c8

08016798 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8016798:	b538      	push	{r3, r4, r5, lr}
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801679a:	b308      	cbz	r0, 80167e0 <pbuf_add_header_impl+0x48>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801679c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80167a0:	d21b      	bcs.n	80167da <pbuf_add_header_impl+0x42>
    return 1;
  }
  if (header_size_increment == 0) {
 80167a2:	b191      	cbz	r1, 80167ca <pbuf_add_header_impl+0x32>
    return 0;
  }

  increment_magnitude = (u16_t)header_size_increment;
 80167a4:	b28c      	uxth	r4, r1
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80167a6:	8903      	ldrh	r3, [r0, #8]
 80167a8:	4423      	add	r3, r4
 80167aa:	b29b      	uxth	r3, r3
 80167ac:	429c      	cmp	r4, r3
 80167ae:	d814      	bhi.n	80167da <pbuf_add_header_impl+0x42>
  }

  type_internal = p->type_internal;

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80167b0:	f990 500c 	ldrsb.w	r5, [r0, #12]
 80167b4:	2d00      	cmp	r5, #0
 80167b6:	db0a      	blt.n	80167ce <pbuf_add_header_impl+0x36>
      return 1;
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80167b8:	b17a      	cbz	r2, 80167da <pbuf_add_header_impl+0x42>
      payload = (u8_t *)p->payload - header_size_increment;
 80167ba:	6842      	ldr	r2, [r0, #4]
 80167bc:	1a52      	subs	r2, r2, r1
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
  p->len = (u16_t)(p->len + increment_magnitude);
 80167be:	8945      	ldrh	r5, [r0, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);


  return 0;
 80167c0:	2100      	movs	r1, #0
  p->payload = payload;
 80167c2:	6042      	str	r2, [r0, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80167c4:	442c      	add	r4, r5
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80167c6:	8103      	strh	r3, [r0, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 80167c8:	8144      	strh	r4, [r0, #10]
}
 80167ca:	4608      	mov	r0, r1
 80167cc:	bd38      	pop	{r3, r4, r5, pc}
    payload = (u8_t *)p->payload - header_size_increment;
 80167ce:	6842      	ldr	r2, [r0, #4]
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80167d0:	f100 0510 	add.w	r5, r0, #16
    payload = (u8_t *)p->payload - header_size_increment;
 80167d4:	1a52      	subs	r2, r2, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80167d6:	42aa      	cmp	r2, r5
 80167d8:	d2f1      	bcs.n	80167be <pbuf_add_header_impl+0x26>
    return 1;
 80167da:	2101      	movs	r1, #1
}
 80167dc:	4608      	mov	r0, r1
 80167de:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 80167e0:	4b04      	ldr	r3, [pc, #16]	; (80167f4 <pbuf_add_header_impl+0x5c>)
 80167e2:	f240 12df 	movw	r2, #479	; 0x1df
 80167e6:	4904      	ldr	r1, [pc, #16]	; (80167f8 <pbuf_add_header_impl+0x60>)
 80167e8:	4804      	ldr	r0, [pc, #16]	; (80167fc <pbuf_add_header_impl+0x64>)
 80167ea:	f00a f9e5 	bl	8020bb8 <iprintf>
    return 1;
 80167ee:	2101      	movs	r1, #1
}
 80167f0:	4608      	mov	r0, r1
 80167f2:	bd38      	pop	{r3, r4, r5, pc}
 80167f4:	0803d884 	.word	0x0803d884
 80167f8:	0803f25c 	.word	0x0803f25c
 80167fc:	08026bb8 	.word	0x08026bb8

08016800 <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8016800:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8016804:	2b01      	cmp	r3, #1
{
 8016806:	b570      	push	{r4, r5, r6, lr}
 8016808:	4614      	mov	r4, r2
 801680a:	4606      	mov	r6, r0
 801680c:	460d      	mov	r5, r1
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801680e:	d111      	bne.n	8016834 <pbuf_alloc_reference+0x34>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8016810:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8016814:	490b      	ldr	r1, [pc, #44]	; (8016844 <pbuf_alloc_reference+0x44>)
 8016816:	200e      	movs	r0, #14
 8016818:	f7ff fd78 	bl	801630c <memp_malloc_fn>
  if (p == NULL) {
 801681c:	b148      	cbz	r0, 8016832 <pbuf_alloc_reference+0x32>
  p->next = NULL;
 801681e:	2300      	movs	r3, #0
  p->ref = 1;
 8016820:	2201      	movs	r2, #1
  p->payload = payload;
 8016822:	6046      	str	r6, [r0, #4]
  p->tot_len = tot_len;
 8016824:	8105      	strh	r5, [r0, #8]
  p->len = len;
 8016826:	8145      	strh	r5, [r0, #10]
  p->type_internal = (u8_t)type;
 8016828:	7304      	strb	r4, [r0, #12]
  p->next = NULL;
 801682a:	6003      	str	r3, [r0, #0]
  p->flags = flags;
 801682c:	7343      	strb	r3, [r0, #13]
  p->if_idx = NETIF_NO_INDEX;
 801682e:	73c3      	strb	r3, [r0, #15]
  p->ref = 1;
 8016830:	7382      	strb	r2, [r0, #14]
}
 8016832:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8016834:	4b03      	ldr	r3, [pc, #12]	; (8016844 <pbuf_alloc_reference+0x44>)
 8016836:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801683a:	4903      	ldr	r1, [pc, #12]	; (8016848 <pbuf_alloc_reference+0x48>)
 801683c:	4803      	ldr	r0, [pc, #12]	; (801684c <pbuf_alloc_reference+0x4c>)
 801683e:	f00a f9bb 	bl	8020bb8 <iprintf>
 8016842:	e7e5      	b.n	8016810 <pbuf_alloc_reference+0x10>
 8016844:	0803d884 	.word	0x0803d884
 8016848:	0803d8d0 	.word	0x0803d8d0
 801684c:	08026bb8 	.word	0x08026bb8

08016850 <pbuf_alloced_custom>:
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8016850:	3003      	adds	r0, #3
 8016852:	f020 0003 	bic.w	r0, r0, #3
{
 8016856:	b470      	push	{r4, r5, r6}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8016858:	180e      	adds	r6, r1, r0
{
 801685a:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 801685e:	9c03      	ldr	r4, [sp, #12]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8016860:	42ae      	cmp	r6, r5
 8016862:	d80f      	bhi.n	8016884 <pbuf_alloced_custom+0x34>
  if (payload_mem != NULL) {
 8016864:	b104      	cbz	r4, 8016868 <pbuf_alloced_custom+0x18>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8016866:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8016868:	4618      	mov	r0, r3
  p->flags = flags;
 801686a:	2602      	movs	r6, #2
  p->next = NULL;
 801686c:	2300      	movs	r3, #0
  p->ref = 1;
 801686e:	2501      	movs	r5, #1
  p->payload = payload;
 8016870:	6044      	str	r4, [r0, #4]
  p->tot_len = tot_len;
 8016872:	8101      	strh	r1, [r0, #8]
  p->len = len;
 8016874:	8141      	strh	r1, [r0, #10]
  p->type_internal = (u8_t)type;
 8016876:	7302      	strb	r2, [r0, #12]
  p->flags = flags;
 8016878:	7346      	strb	r6, [r0, #13]
  p->ref = 1;
 801687a:	7385      	strb	r5, [r0, #14]
  p->next = NULL;
 801687c:	6003      	str	r3, [r0, #0]
  p->if_idx = NETIF_NO_INDEX;
 801687e:	73c3      	strb	r3, [r0, #15]
}
 8016880:	bc70      	pop	{r4, r5, r6}
 8016882:	4770      	bx	lr
    return NULL;
 8016884:	2000      	movs	r0, #0
 8016886:	e7fb      	b.n	8016880 <pbuf_alloced_custom+0x30>

08016888 <pbuf_add_header>:
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8016888:	2200      	movs	r2, #0
 801688a:	f7ff bf85 	b.w	8016798 <pbuf_add_header_impl>
 801688e:	bf00      	nop

08016890 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8016890:	b538      	push	{r3, r4, r5, lr}
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8016892:	b1a8      	cbz	r0, 80168c0 <pbuf_remove_header+0x30>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8016894:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8016898:	d20f      	bcs.n	80168ba <pbuf_remove_header+0x2a>
    return 1;
  }
  if (header_size_decrement == 0) {
 801689a:	b161      	cbz	r1, 80168b6 <pbuf_remove_header+0x26>
    return 0;
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801689c:	b28a      	uxth	r2, r1
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801689e:	8943      	ldrh	r3, [r0, #10]
 80168a0:	4293      	cmp	r3, r2
 80168a2:	d317      	bcc.n	80168d4 <pbuf_remove_header+0x44>
  /* remember current payload pointer */
  payload = p->payload;
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80168a4:	6845      	ldr	r5, [r0, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80168a6:	1a9b      	subs	r3, r3, r2
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80168a8:	8904      	ldrh	r4, [r0, #8]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80168aa:	440d      	add	r5, r1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80168ac:	2100      	movs	r1, #0
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80168ae:	1aa2      	subs	r2, r4, r2
  p->len = (u16_t)(p->len - increment_magnitude);
 80168b0:	8143      	strh	r3, [r0, #10]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80168b2:	6045      	str	r5, [r0, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80168b4:	8102      	strh	r2, [r0, #8]
}
 80168b6:	4608      	mov	r0, r1
 80168b8:	bd38      	pop	{r3, r4, r5, pc}
    return 1;
 80168ba:	2101      	movs	r1, #1
}
 80168bc:	4608      	mov	r0, r1
 80168be:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 80168c0:	4b09      	ldr	r3, [pc, #36]	; (80168e8 <pbuf_remove_header+0x58>)
 80168c2:	f240 224b 	movw	r2, #587	; 0x24b
 80168c6:	4909      	ldr	r1, [pc, #36]	; (80168ec <pbuf_remove_header+0x5c>)
 80168c8:	4809      	ldr	r0, [pc, #36]	; (80168f0 <pbuf_remove_header+0x60>)
 80168ca:	f00a f975 	bl	8020bb8 <iprintf>
    return 1;
 80168ce:	2101      	movs	r1, #1
}
 80168d0:	4608      	mov	r0, r1
 80168d2:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80168d4:	4907      	ldr	r1, [pc, #28]	; (80168f4 <pbuf_remove_header+0x64>)
 80168d6:	f240 2255 	movw	r2, #597	; 0x255
 80168da:	4b03      	ldr	r3, [pc, #12]	; (80168e8 <pbuf_remove_header+0x58>)
 80168dc:	4804      	ldr	r0, [pc, #16]	; (80168f0 <pbuf_remove_header+0x60>)
 80168de:	f00a f96b 	bl	8020bb8 <iprintf>
 80168e2:	2101      	movs	r1, #1
 80168e4:	e7e7      	b.n	80168b6 <pbuf_remove_header+0x26>
 80168e6:	bf00      	nop
 80168e8:	0803d884 	.word	0x0803d884
 80168ec:	0803f25c 	.word	0x0803f25c
 80168f0:	08026bb8 	.word	0x08026bb8
 80168f4:	0803db04 	.word	0x0803db04

080168f8 <pbuf_header_force>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
  if (header_size_increment < 0) {
 80168f8:	1e0b      	subs	r3, r1, #0
 80168fa:	db02      	blt.n	8016902 <pbuf_header_force+0xa>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80168fc:	2201      	movs	r2, #1
 80168fe:	f7ff bf4b 	b.w	8016798 <pbuf_add_header_impl>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8016902:	4259      	negs	r1, r3
 8016904:	f7ff bfc4 	b.w	8016890 <pbuf_remove_header>

08016908 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8016908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801690c:	4604      	mov	r4, r0
 801690e:	2800      	cmp	r0, #0
 8016910:	d050      	beq.n	80169b4 <pbuf_free+0xac>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8016912:	2500      	movs	r5, #0
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8016914:	4f2d      	ldr	r7, [pc, #180]	; (80169cc <pbuf_free+0xc4>)
 8016916:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 80169e0 <pbuf_free+0xd8>
 801691a:	4e2d      	ldr	r6, [pc, #180]	; (80169d0 <pbuf_free+0xc8>)
 801691c:	e008      	b.n	8016930 <pbuf_free+0x28>
      alloc_src = pbuf_get_allocsrc(p);
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801691e:	6923      	ldr	r3, [r4, #16]
 8016920:	2b00      	cmp	r3, #0
 8016922:	d039      	beq.n	8016998 <pbuf_free+0x90>
        pc->custom_free_function(p);
 8016924:	4620      	mov	r0, r4
 8016926:	4798      	blx	r3
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
        }
      }
      count++;
 8016928:	3501      	adds	r5, #1
  while (p != NULL) {
 801692a:	464c      	mov	r4, r9
      count++;
 801692c:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 801692e:	b1d4      	cbz	r4, 8016966 <pbuf_free+0x5e>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8016930:	7ba3      	ldrb	r3, [r4, #14]
 8016932:	b1db      	cbz	r3, 801696c <pbuf_free+0x64>
    ref = --(p->ref);
 8016934:	3b01      	subs	r3, #1
 8016936:	b2db      	uxtb	r3, r3
 8016938:	73a3      	strb	r3, [r4, #14]
    if (ref == 0) {
 801693a:	b9a3      	cbnz	r3, 8016966 <pbuf_free+0x5e>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801693c:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 801693e:	f8d4 9000 	ldr.w	r9, [r4]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8016942:	079b      	lsls	r3, r3, #30
 8016944:	d4eb      	bmi.n	801691e <pbuf_free+0x16>
      alloc_src = pbuf_get_allocsrc(p);
 8016946:	7b23      	ldrb	r3, [r4, #12]
 8016948:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801694c:	2b02      	cmp	r3, #2
 801694e:	d01e      	beq.n	801698e <pbuf_free+0x86>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8016950:	2b01      	cmp	r3, #1
 8016952:	d02a      	beq.n	80169aa <pbuf_free+0xa2>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8016954:	b99b      	cbnz	r3, 801697e <pbuf_free+0x76>
          mem_free(p);
 8016956:	4620      	mov	r0, r4
      count++;
 8016958:	3501      	adds	r5, #1
  while (p != NULL) {
 801695a:	464c      	mov	r4, r9
          mem_free(p);
 801695c:	f7ff f914 	bl	8015b88 <mem_free>
      count++;
 8016960:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 8016962:	2c00      	cmp	r4, #0
 8016964:	d1e4      	bne.n	8016930 <pbuf_free+0x28>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8016966:	4628      	mov	r0, r5
 8016968:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801696c:	463b      	mov	r3, r7
 801696e:	f240 22f1 	movw	r2, #753	; 0x2f1
 8016972:	4641      	mov	r1, r8
 8016974:	4630      	mov	r0, r6
 8016976:	f00a f91f 	bl	8020bb8 <iprintf>
 801697a:	7ba3      	ldrb	r3, [r4, #14]
 801697c:	e7da      	b.n	8016934 <pbuf_free+0x2c>
          LWIP_ASSERT("invalid pbuf type", 0);
 801697e:	463b      	mov	r3, r7
 8016980:	f240 320f 	movw	r2, #783	; 0x30f
 8016984:	4913      	ldr	r1, [pc, #76]	; (80169d4 <pbuf_free+0xcc>)
 8016986:	4630      	mov	r0, r6
 8016988:	f00a f916 	bl	8020bb8 <iprintf>
 801698c:	e7cc      	b.n	8016928 <pbuf_free+0x20>
          memp_free(MEMP_PBUF_POOL, p);
 801698e:	4621      	mov	r1, r4
 8016990:	200f      	movs	r0, #15
 8016992:	f7ff fcdf 	bl	8016354 <memp_free>
 8016996:	e7c7      	b.n	8016928 <pbuf_free+0x20>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8016998:	463b      	mov	r3, r7
 801699a:	f240 22ff 	movw	r2, #767	; 0x2ff
 801699e:	490e      	ldr	r1, [pc, #56]	; (80169d8 <pbuf_free+0xd0>)
 80169a0:	4630      	mov	r0, r6
 80169a2:	f00a f909 	bl	8020bb8 <iprintf>
 80169a6:	6923      	ldr	r3, [r4, #16]
 80169a8:	e7bc      	b.n	8016924 <pbuf_free+0x1c>
          memp_free(MEMP_PBUF, p);
 80169aa:	4621      	mov	r1, r4
 80169ac:	200e      	movs	r0, #14
 80169ae:	f7ff fcd1 	bl	8016354 <memp_free>
 80169b2:	e7b9      	b.n	8016928 <pbuf_free+0x20>
    return 0;
 80169b4:	4605      	mov	r5, r0
    LWIP_ASSERT("p != NULL", p != NULL);
 80169b6:	4b05      	ldr	r3, [pc, #20]	; (80169cc <pbuf_free+0xc4>)
 80169b8:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80169bc:	4907      	ldr	r1, [pc, #28]	; (80169dc <pbuf_free+0xd4>)
 80169be:	4804      	ldr	r0, [pc, #16]	; (80169d0 <pbuf_free+0xc8>)
 80169c0:	f00a f8fa 	bl	8020bb8 <iprintf>
}
 80169c4:	4628      	mov	r0, r5
 80169c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80169ca:	bf00      	nop
 80169cc:	0803d884 	.word	0x0803d884
 80169d0:	08026bb8 	.word	0x08026bb8
 80169d4:	0803da90 	.word	0x0803da90
 80169d8:	0803da6c 	.word	0x0803da6c
 80169dc:	0803f25c 	.word	0x0803f25c
 80169e0:	0803da54 	.word	0x0803da54

080169e4 <pbuf_alloc>:
  switch (type) {
 80169e4:	2a41      	cmp	r2, #65	; 0x41
{
 80169e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80169ea:	4688      	mov	r8, r1
  switch (type) {
 80169ec:	d06a      	beq.n	8016ac4 <pbuf_alloc+0xe0>
 80169ee:	d95c      	bls.n	8016aaa <pbuf_alloc+0xc6>
 80169f0:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
 80169f4:	fa1f f980 	uxth.w	r9, r0
 80169f8:	d027      	beq.n	8016a4a <pbuf_alloc+0x66>
 80169fa:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 80169fe:	d156      	bne.n	8016aae <pbuf_alloc+0xca>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8016a00:	f109 0303 	add.w	r3, r9, #3
 8016a04:	1cca      	adds	r2, r1, #3
 8016a06:	4605      	mov	r5, r0
 8016a08:	f022 0203 	bic.w	r2, r2, #3
 8016a0c:	f023 0303 	bic.w	r3, r3, #3
 8016a10:	4413      	add	r3, r2
 8016a12:	b29b      	uxth	r3, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8016a14:	f103 0010 	add.w	r0, r3, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8016a18:	4293      	cmp	r3, r2
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8016a1a:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8016a1c:	d358      	bcc.n	8016ad0 <pbuf_alloc+0xec>
 8016a1e:	4282      	cmp	r2, r0
 8016a20:	d856      	bhi.n	8016ad0 <pbuf_alloc+0xec>
      p = (struct pbuf *)mem_malloc(alloc_len);
 8016a22:	f7ff fa81 	bl	8015f28 <mem_malloc>
      if (p == NULL) {
 8016a26:	4604      	mov	r4, r0
 8016a28:	b160      	cbz	r0, 8016a44 <pbuf_alloc+0x60>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8016a2a:	4405      	add	r5, r0
  p->next = NULL;
 8016a2c:	2200      	movs	r2, #0
  p->type_internal = (u8_t)type;
 8016a2e:	4b35      	ldr	r3, [pc, #212]	; (8016b04 <pbuf_alloc+0x120>)
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8016a30:	3513      	adds	r5, #19
  p->tot_len = tot_len;
 8016a32:	f8a0 8008 	strh.w	r8, [r0, #8]
  p->len = len;
 8016a36:	f8a0 800a 	strh.w	r8, [r0, #10]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8016a3a:	f025 0503 	bic.w	r5, r5, #3
  p->next = NULL;
 8016a3e:	6002      	str	r2, [r0, #0]
  p->type_internal = (u8_t)type;
 8016a40:	60c3      	str	r3, [r0, #12]
  p->payload = payload;
 8016a42:	6045      	str	r5, [r0, #4]
}
 8016a44:	4620      	mov	r0, r4
 8016a46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      last = NULL;
 8016a4a:	2500      	movs	r5, #0
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8016a4c:	4e2e      	ldr	r6, [pc, #184]	; (8016b08 <pbuf_alloc+0x124>)
  p->type_internal = (u8_t)type;
 8016a4e:	4f2f      	ldr	r7, [pc, #188]	; (8016b0c <pbuf_alloc+0x128>)
      p = NULL;
 8016a50:	462c      	mov	r4, r5
 8016a52:	e00a      	b.n	8016a6a <pbuf_alloc+0x86>
          last->next = q;
 8016a54:	6028      	str	r0, [r5, #0]
        rem_len = (u16_t)(rem_len - qlen);
 8016a56:	eba8 0101 	sub.w	r1, r8, r1
 8016a5a:	4605      	mov	r5, r0
        offset = 0;
 8016a5c:	f04f 0900 	mov.w	r9, #0
        rem_len = (u16_t)(rem_len - qlen);
 8016a60:	fa1f f881 	uxth.w	r8, r1
      } while (rem_len > 0);
 8016a64:	f1b8 0f00 	cmp.w	r8, #0
 8016a68:	d0ec      	beq.n	8016a44 <pbuf_alloc+0x60>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8016a6a:	22f3      	movs	r2, #243	; 0xf3
 8016a6c:	4631      	mov	r1, r6
 8016a6e:	200f      	movs	r0, #15
 8016a70:	f7ff fc4c 	bl	801630c <memp_malloc_fn>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8016a74:	f109 0303 	add.w	r3, r9, #3
  p->next = NULL;
 8016a78:	2200      	movs	r2, #0
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8016a7a:	4481      	add	r9, r0
        if (q == NULL) {
 8016a7c:	b360      	cbz	r0, 8016ad8 <pbuf_alloc+0xf4>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8016a7e:	f023 0103 	bic.w	r1, r3, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8016a82:	f109 0913 	add.w	r9, r9, #19
  p->next = NULL;
 8016a86:	6002      	str	r2, [r0, #0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8016a88:	f5c1 7114 	rsb	r1, r1, #592	; 0x250
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8016a8c:	f029 0303 	bic.w	r3, r9, #3
  p->tot_len = tot_len;
 8016a90:	f8a0 8008 	strh.w	r8, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8016a94:	b289      	uxth	r1, r1
  p->type_internal = (u8_t)type;
 8016a96:	60c7      	str	r7, [r0, #12]
  p->payload = payload;
 8016a98:	6043      	str	r3, [r0, #4]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8016a9a:	4541      	cmp	r1, r8
 8016a9c:	bf28      	it	cs
 8016a9e:	4641      	movcs	r1, r8
  p->len = len;
 8016aa0:	8141      	strh	r1, [r0, #10]
        if (p == NULL) {
 8016aa2:	2c00      	cmp	r4, #0
 8016aa4:	d1d6      	bne.n	8016a54 <pbuf_alloc+0x70>
 8016aa6:	4604      	mov	r4, r0
 8016aa8:	e7d5      	b.n	8016a56 <pbuf_alloc+0x72>
  switch (type) {
 8016aaa:	2a01      	cmp	r2, #1
 8016aac:	d00a      	beq.n	8016ac4 <pbuf_alloc+0xe0>
      return NULL;
 8016aae:	2400      	movs	r4, #0
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8016ab0:	4b15      	ldr	r3, [pc, #84]	; (8016b08 <pbuf_alloc+0x124>)
 8016ab2:	f240 1227 	movw	r2, #295	; 0x127
 8016ab6:	4916      	ldr	r1, [pc, #88]	; (8016b10 <pbuf_alloc+0x12c>)
 8016ab8:	4816      	ldr	r0, [pc, #88]	; (8016b14 <pbuf_alloc+0x130>)
 8016aba:	f00a f87d 	bl	8020bb8 <iprintf>
}
 8016abe:	4620      	mov	r0, r4
 8016ac0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      p = pbuf_alloc_reference(NULL, length, type);
 8016ac4:	4641      	mov	r1, r8
 8016ac6:	2000      	movs	r0, #0
}
 8016ac8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 8016acc:	f7ff be98 	b.w	8016800 <pbuf_alloc_reference>
          return NULL;
 8016ad0:	2400      	movs	r4, #0
}
 8016ad2:	4620      	mov	r0, r4
 8016ad4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  queued = pbuf_free_ooseq_pending;
 8016ad8:	4d0f      	ldr	r5, [pc, #60]	; (8016b18 <pbuf_alloc+0x134>)
  pbuf_free_ooseq_pending = 1;
 8016ada:	2201      	movs	r2, #1
  queued = pbuf_free_ooseq_pending;
 8016adc:	782b      	ldrb	r3, [r5, #0]
  pbuf_free_ooseq_pending = 1;
 8016ade:	702a      	strb	r2, [r5, #0]
  if (!queued) {
 8016ae0:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 8016ae4:	b133      	cbz	r3, 8016af4 <pbuf_alloc+0x110>
          if (p) {
 8016ae6:	2c00      	cmp	r4, #0
 8016ae8:	d0f2      	beq.n	8016ad0 <pbuf_alloc+0xec>
            pbuf_free(p);
 8016aea:	4620      	mov	r0, r4
          return NULL;
 8016aec:	2400      	movs	r4, #0
            pbuf_free(p);
 8016aee:	f7ff ff0b 	bl	8016908 <pbuf_free>
 8016af2:	e7a7      	b.n	8016a44 <pbuf_alloc+0x60>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8016af4:	4631      	mov	r1, r6
 8016af6:	4809      	ldr	r0, [pc, #36]	; (8016b1c <pbuf_alloc+0x138>)
 8016af8:	f7fc feb0 	bl	801385c <tcpip_try_callback>
 8016afc:	2800      	cmp	r0, #0
 8016afe:	d0f2      	beq.n	8016ae6 <pbuf_alloc+0x102>
 8016b00:	702e      	strb	r6, [r5, #0]
 8016b02:	e7f0      	b.n	8016ae6 <pbuf_alloc+0x102>
 8016b04:	00010080 	.word	0x00010080
 8016b08:	0803d884 	.word	0x0803d884
 8016b0c:	00010082 	.word	0x00010082
 8016b10:	0803d8b4 	.word	0x0803d8b4
 8016b14:	08026bb8 	.word	0x08026bb8
 8016b18:	2003e1c8 	.word	0x2003e1c8
 8016b1c:	08016771 	.word	0x08016771

08016b20 <pbuf_realloc>:
{
 8016b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016b24:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8016b26:	4604      	mov	r4, r0
 8016b28:	2800      	cmp	r0, #0
 8016b2a:	d043      	beq.n	8016bb4 <pbuf_realloc+0x94>
  if (new_len >= p->tot_len) {
 8016b2c:	8926      	ldrh	r6, [r4, #8]
 8016b2e:	42ae      	cmp	r6, r5
 8016b30:	d928      	bls.n	8016b84 <pbuf_realloc+0x64>
  shrink = (u16_t)(p->tot_len - new_len);
 8016b32:	1b76      	subs	r6, r6, r5
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8016b34:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8016bc8 <pbuf_realloc+0xa8>
 8016b38:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8016bd4 <pbuf_realloc+0xb4>
  shrink = (u16_t)(p->tot_len - new_len);
 8016b3c:	b2b6      	uxth	r6, r6
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8016b3e:	4f21      	ldr	r7, [pc, #132]	; (8016bc4 <pbuf_realloc+0xa4>)
  while (rem_len > q->len) {
 8016b40:	8961      	ldrh	r1, [r4, #10]
 8016b42:	42a9      	cmp	r1, r5
 8016b44:	d211      	bcs.n	8016b6a <pbuf_realloc+0x4a>
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8016b46:	8923      	ldrh	r3, [r4, #8]
    rem_len = (u16_t)(rem_len - q->len);
 8016b48:	1a69      	subs	r1, r5, r1
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8016b4a:	1b9b      	subs	r3, r3, r6
    rem_len = (u16_t)(rem_len - q->len);
 8016b4c:	b28d      	uxth	r5, r1
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8016b4e:	8123      	strh	r3, [r4, #8]
    q = q->next;
 8016b50:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8016b52:	2c00      	cmp	r4, #0
 8016b54:	d1f4      	bne.n	8016b40 <pbuf_realloc+0x20>
 8016b56:	4641      	mov	r1, r8
 8016b58:	464b      	mov	r3, r9
 8016b5a:	f240 12af 	movw	r2, #431	; 0x1af
 8016b5e:	4638      	mov	r0, r7
 8016b60:	f00a f82a 	bl	8020bb8 <iprintf>
  while (rem_len > q->len) {
 8016b64:	8961      	ldrh	r1, [r4, #10]
 8016b66:	42a9      	cmp	r1, r5
 8016b68:	d3ed      	bcc.n	8016b46 <pbuf_realloc+0x26>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8016b6a:	7b23      	ldrb	r3, [r4, #12]
 8016b6c:	071a      	lsls	r2, r3, #28
 8016b6e:	d101      	bne.n	8016b74 <pbuf_realloc+0x54>
 8016b70:	42a9      	cmp	r1, r5
 8016b72:	d109      	bne.n	8016b88 <pbuf_realloc+0x68>
  if (q->next != NULL) {
 8016b74:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 8016b76:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8016b78:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8016b7a:	b108      	cbz	r0, 8016b80 <pbuf_realloc+0x60>
    pbuf_free(q->next);
 8016b7c:	f7ff fec4 	bl	8016908 <pbuf_free>
  q->next = NULL;
 8016b80:	2300      	movs	r3, #0
 8016b82:	6023      	str	r3, [r4, #0]
}
 8016b84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8016b88:	7b63      	ldrb	r3, [r4, #13]
 8016b8a:	079b      	lsls	r3, r3, #30
 8016b8c:	d4f2      	bmi.n	8016b74 <pbuf_realloc+0x54>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8016b8e:	6863      	ldr	r3, [r4, #4]
 8016b90:	4620      	mov	r0, r4
 8016b92:	1b1c      	subs	r4, r3, r4
 8016b94:	1929      	adds	r1, r5, r4
 8016b96:	b289      	uxth	r1, r1
 8016b98:	f7ff f8dc 	bl	8015d54 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8016b9c:	4604      	mov	r4, r0
 8016b9e:	2800      	cmp	r0, #0
 8016ba0:	d1e8      	bne.n	8016b74 <pbuf_realloc+0x54>
 8016ba2:	4b09      	ldr	r3, [pc, #36]	; (8016bc8 <pbuf_realloc+0xa8>)
 8016ba4:	f240 12bd 	movw	r2, #445	; 0x1bd
 8016ba8:	4908      	ldr	r1, [pc, #32]	; (8016bcc <pbuf_realloc+0xac>)
 8016baa:	4806      	ldr	r0, [pc, #24]	; (8016bc4 <pbuf_realloc+0xa4>)
 8016bac:	f00a f804 	bl	8020bb8 <iprintf>
  q->len = rem_len;
 8016bb0:	8164      	strh	r4, [r4, #10]
 8016bb2:	deff      	udf	#255	; 0xff
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8016bb4:	4b04      	ldr	r3, [pc, #16]	; (8016bc8 <pbuf_realloc+0xa8>)
 8016bb6:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8016bba:	4905      	ldr	r1, [pc, #20]	; (8016bd0 <pbuf_realloc+0xb0>)
 8016bbc:	4801      	ldr	r0, [pc, #4]	; (8016bc4 <pbuf_realloc+0xa4>)
 8016bbe:	f009 fffb 	bl	8020bb8 <iprintf>
 8016bc2:	e7b3      	b.n	8016b2c <pbuf_realloc+0xc>
 8016bc4:	08026bb8 	.word	0x08026bb8
 8016bc8:	0803d884 	.word	0x0803d884
 8016bcc:	0803dad4 	.word	0x0803dad4
 8016bd0:	0803daa4 	.word	0x0803daa4
 8016bd4:	0803dabc 	.word	0x0803dabc

08016bd8 <pbuf_clen>:
pbuf_clen(const struct pbuf *p)
{
  u16_t len;

  len = 0;
  while (p != NULL) {
 8016bd8:	b138      	cbz	r0, 8016bea <pbuf_clen+0x12>
  len = 0;
 8016bda:	2300      	movs	r3, #0
    ++len;
 8016bdc:	3301      	adds	r3, #1
    p = p->next;
 8016bde:	6800      	ldr	r0, [r0, #0]
    ++len;
 8016be0:	b29b      	uxth	r3, r3
  while (p != NULL) {
 8016be2:	2800      	cmp	r0, #0
 8016be4:	d1fa      	bne.n	8016bdc <pbuf_clen+0x4>
  }
  return len;
}
 8016be6:	4618      	mov	r0, r3
 8016be8:	4770      	bx	lr
  len = 0;
 8016bea:	4603      	mov	r3, r0
}
 8016bec:	4618      	mov	r0, r3
 8016bee:	4770      	bx	lr

08016bf0 <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 8016bf0:	b120      	cbz	r0, 8016bfc <pbuf_ref+0xc>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8016bf2:	7b83      	ldrb	r3, [r0, #14]
 8016bf4:	3301      	adds	r3, #1
 8016bf6:	b2db      	uxtb	r3, r3
 8016bf8:	7383      	strb	r3, [r0, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8016bfa:	b103      	cbz	r3, 8016bfe <pbuf_ref+0xe>
  }
}
 8016bfc:	4770      	bx	lr
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8016bfe:	4b03      	ldr	r3, [pc, #12]	; (8016c0c <pbuf_ref+0x1c>)
 8016c00:	f240 3242 	movw	r2, #834	; 0x342
 8016c04:	4902      	ldr	r1, [pc, #8]	; (8016c10 <pbuf_ref+0x20>)
 8016c06:	4803      	ldr	r0, [pc, #12]	; (8016c14 <pbuf_ref+0x24>)
 8016c08:	f009 bfd6 	b.w	8020bb8 <iprintf>
 8016c0c:	0803d884 	.word	0x0803d884
 8016c10:	0803daf0 	.word	0x0803daf0
 8016c14:	08026bb8 	.word	0x08026bb8

08016c18 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8016c18:	b570      	push	{r4, r5, r6, lr}
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8016c1a:	b338      	cbz	r0, 8016c6c <pbuf_cat+0x54>
 8016c1c:	460d      	mov	r5, r1
 8016c1e:	b329      	cbz	r1, 8016c6c <pbuf_cat+0x54>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8016c20:	6804      	ldr	r4, [r0, #0]
 8016c22:	b90c      	cbnz	r4, 8016c28 <pbuf_cat+0x10>
 8016c24:	e02b      	b.n	8016c7e <pbuf_cat+0x66>
 8016c26:	4614      	mov	r4, r2
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8016c28:	8903      	ldrh	r3, [r0, #8]
 8016c2a:	8929      	ldrh	r1, [r5, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8016c2c:	6822      	ldr	r2, [r4, #0]
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8016c2e:	440b      	add	r3, r1
 8016c30:	8103      	strh	r3, [r0, #8]
 8016c32:	4620      	mov	r0, r4
  for (p = h; p->next != NULL; p = p->next) {
 8016c34:	2a00      	cmp	r2, #0
 8016c36:	d1f6      	bne.n	8016c26 <pbuf_cat+0xe>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8016c38:	8963      	ldrh	r3, [r4, #10]
 8016c3a:	8922      	ldrh	r2, [r4, #8]
 8016c3c:	429a      	cmp	r2, r3
 8016c3e:	d010      	beq.n	8016c62 <pbuf_cat+0x4a>
 8016c40:	4b12      	ldr	r3, [pc, #72]	; (8016c8c <pbuf_cat+0x74>)
 8016c42:	f240 3262 	movw	r2, #866	; 0x362
 8016c46:	4912      	ldr	r1, [pc, #72]	; (8016c90 <pbuf_cat+0x78>)
 8016c48:	4812      	ldr	r0, [pc, #72]	; (8016c94 <pbuf_cat+0x7c>)
 8016c4a:	f009 ffb5 	bl	8020bb8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8016c4e:	6823      	ldr	r3, [r4, #0]
 8016c50:	b133      	cbz	r3, 8016c60 <pbuf_cat+0x48>
 8016c52:	4b0e      	ldr	r3, [pc, #56]	; (8016c8c <pbuf_cat+0x74>)
 8016c54:	f240 3263 	movw	r2, #867	; 0x363
 8016c58:	490f      	ldr	r1, [pc, #60]	; (8016c98 <pbuf_cat+0x80>)
 8016c5a:	480e      	ldr	r0, [pc, #56]	; (8016c94 <pbuf_cat+0x7c>)
 8016c5c:	f009 ffac 	bl	8020bb8 <iprintf>
 8016c60:	8923      	ldrh	r3, [r4, #8]
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8016c62:	892a      	ldrh	r2, [r5, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8016c64:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8016c66:	4413      	add	r3, r2
 8016c68:	8123      	strh	r3, [r4, #8]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8016c6a:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8016c6c:	4b07      	ldr	r3, [pc, #28]	; (8016c8c <pbuf_cat+0x74>)
 8016c6e:	f240 325a 	movw	r2, #858	; 0x35a
 8016c72:	490a      	ldr	r1, [pc, #40]	; (8016c9c <pbuf_cat+0x84>)
 8016c74:	4807      	ldr	r0, [pc, #28]	; (8016c94 <pbuf_cat+0x7c>)
}
 8016c76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8016c7a:	f009 bf9d 	b.w	8020bb8 <iprintf>
  for (p = h; p->next != NULL; p = p->next) {
 8016c7e:	4604      	mov	r4, r0
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8016c80:	8963      	ldrh	r3, [r4, #10]
 8016c82:	8922      	ldrh	r2, [r4, #8]
 8016c84:	429a      	cmp	r2, r3
 8016c86:	d1db      	bne.n	8016c40 <pbuf_cat+0x28>
 8016c88:	e7eb      	b.n	8016c62 <pbuf_cat+0x4a>
 8016c8a:	bf00      	nop
 8016c8c:	0803d884 	.word	0x0803d884
 8016c90:	0803d91c 	.word	0x0803d91c
 8016c94:	08026bb8 	.word	0x08026bb8
 8016c98:	0803d94c 	.word	0x0803d94c
 8016c9c:	0803d8e4 	.word	0x0803d8e4

08016ca0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8016ca0:	b510      	push	{r4, lr}
 8016ca2:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 8016ca4:	f7ff ffb8 	bl	8016c18 <pbuf_cat>
  if (p != NULL) {
 8016ca8:	b124      	cbz	r4, 8016cb4 <pbuf_chain+0x14>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8016caa:	7ba3      	ldrb	r3, [r4, #14]
 8016cac:	3301      	adds	r3, #1
 8016cae:	b2db      	uxtb	r3, r3
 8016cb0:	73a3      	strb	r3, [r4, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8016cb2:	b103      	cbz	r3, 8016cb6 <pbuf_chain+0x16>
  /* t is now referenced by h */
  pbuf_ref(t);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8016cb4:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8016cb6:	4b04      	ldr	r3, [pc, #16]	; (8016cc8 <pbuf_chain+0x28>)
 8016cb8:	f240 3242 	movw	r2, #834	; 0x342
 8016cbc:	4903      	ldr	r1, [pc, #12]	; (8016ccc <pbuf_chain+0x2c>)
 8016cbe:	4804      	ldr	r0, [pc, #16]	; (8016cd0 <pbuf_chain+0x30>)
}
 8016cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8016cc4:	f009 bf78 	b.w	8020bb8 <iprintf>
 8016cc8:	0803d884 	.word	0x0803d884
 8016ccc:	0803daf0 	.word	0x0803daf0
 8016cd0:	08026bb8 	.word	0x08026bb8

08016cd4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8016cd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8016cd8:	2800      	cmp	r0, #0
 8016cda:	f000 808c 	beq.w	8016df6 <pbuf_copy+0x122>
 8016cde:	fab1 f681 	clz	r6, r1
 8016ce2:	460f      	mov	r7, r1
 8016ce4:	0976      	lsrs	r6, r6, #5
 8016ce6:	2e00      	cmp	r6, #0
 8016ce8:	f040 8085 	bne.w	8016df6 <pbuf_copy+0x122>
 8016cec:	8902      	ldrh	r2, [r0, #8]
 8016cee:	4605      	mov	r5, r0
 8016cf0:	890b      	ldrh	r3, [r1, #8]
 8016cf2:	429a      	cmp	r2, r3
 8016cf4:	d37f      	bcc.n	8016df6 <pbuf_copy+0x122>
 8016cf6:	8943      	ldrh	r3, [r0, #10]
  size_t offset_to = 0, offset_from = 0, len;
 8016cf8:	46b0      	mov	r8, r6
 8016cfa:	894c      	ldrh	r4, [r1, #10]
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8016cfc:	f8df a10c 	ldr.w	sl, [pc, #268]	; 8016e0c <pbuf_copy+0x138>
 8016d00:	f8df b120 	ldr.w	fp, [pc, #288]	; 8016e24 <pbuf_copy+0x150>
 8016d04:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8016e14 <pbuf_copy+0x140>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8016d08:	eba3 0308 	sub.w	r3, r3, r8
 8016d0c:	1ba4      	subs	r4, r4, r6
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8016d0e:	6868      	ldr	r0, [r5, #4]
 8016d10:	429c      	cmp	r4, r3
 8016d12:	6879      	ldr	r1, [r7, #4]
 8016d14:	4440      	add	r0, r8
 8016d16:	bf28      	it	cs
 8016d18:	461c      	movcs	r4, r3
 8016d1a:	4431      	add	r1, r6
 8016d1c:	4622      	mov	r2, r4
    offset_to += len;
 8016d1e:	44a0      	add	r8, r4
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8016d20:	f008 ffa5 	bl	801fc6e <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8016d24:	896b      	ldrh	r3, [r5, #10]
    offset_from += len;
 8016d26:	4426      	add	r6, r4
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8016d28:	4598      	cmp	r8, r3
 8016d2a:	d83d      	bhi.n	8016da8 <pbuf_copy+0xd4>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8016d2c:	897b      	ldrh	r3, [r7, #10]
 8016d2e:	429e      	cmp	r6, r3
 8016d30:	d831      	bhi.n	8016d96 <pbuf_copy+0xc2>
    if (offset_from >= p_from->len) {
 8016d32:	429e      	cmp	r6, r3
 8016d34:	d301      	bcc.n	8016d3a <pbuf_copy+0x66>
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
 8016d36:	683f      	ldr	r7, [r7, #0]
      offset_from = 0;
 8016d38:	2600      	movs	r6, #0
    }
    if (offset_to == p_to->len) {
 8016d3a:	896b      	ldrh	r3, [r5, #10]
 8016d3c:	4598      	cmp	r8, r3
 8016d3e:	d011      	beq.n	8016d64 <pbuf_copy+0x90>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8016d40:	2f00      	cmp	r7, #0
 8016d42:	d03b      	beq.n	8016dbc <pbuf_copy+0xe8>
 8016d44:	897c      	ldrh	r4, [r7, #10]
 8016d46:	893b      	ldrh	r3, [r7, #8]
 8016d48:	429c      	cmp	r4, r3
 8016d4a:	d016      	beq.n	8016d7a <pbuf_copy+0xa6>
 8016d4c:	896b      	ldrh	r3, [r5, #10]
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8016d4e:	892a      	ldrh	r2, [r5, #8]
 8016d50:	429a      	cmp	r2, r3
 8016d52:	d1d9      	bne.n	8016d08 <pbuf_copy+0x34>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8016d54:	682a      	ldr	r2, [r5, #0]
 8016d56:	2a00      	cmp	r2, #0
 8016d58:	d137      	bne.n	8016dca <pbuf_copy+0xf6>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8016d5a:	2f00      	cmp	r7, #0
 8016d5c:	d1d4      	bne.n	8016d08 <pbuf_copy+0x34>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8016d5e:	2000      	movs	r0, #0
}
 8016d60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p_to = p_to->next;
 8016d64:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8016d66:	b90d      	cbnz	r5, 8016d6c <pbuf_copy+0x98>
 8016d68:	2f00      	cmp	r7, #0
 8016d6a:	d139      	bne.n	8016de0 <pbuf_copy+0x10c>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8016d6c:	b327      	cbz	r7, 8016db8 <pbuf_copy+0xe4>
 8016d6e:	897c      	ldrh	r4, [r7, #10]
      offset_to = 0;
 8016d70:	f04f 0800 	mov.w	r8, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8016d74:	893b      	ldrh	r3, [r7, #8]
 8016d76:	429c      	cmp	r4, r3
 8016d78:	d1e8      	bne.n	8016d4c <pbuf_copy+0x78>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8016d7a:	683b      	ldr	r3, [r7, #0]
 8016d7c:	2b00      	cmp	r3, #0
 8016d7e:	d0e5      	beq.n	8016d4c <pbuf_copy+0x78>
 8016d80:	4b22      	ldr	r3, [pc, #136]	; (8016e0c <pbuf_copy+0x138>)
 8016d82:	f240 32ea 	movw	r2, #1002	; 0x3ea
 8016d86:	4922      	ldr	r1, [pc, #136]	; (8016e10 <pbuf_copy+0x13c>)
 8016d88:	4822      	ldr	r0, [pc, #136]	; (8016e14 <pbuf_copy+0x140>)
 8016d8a:	f009 ff15 	bl	8020bb8 <iprintf>
 8016d8e:	f06f 0005 	mvn.w	r0, #5
}
 8016d92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8016d96:	4653      	mov	r3, sl
 8016d98:	f240 32da 	movw	r2, #986	; 0x3da
 8016d9c:	491e      	ldr	r1, [pc, #120]	; (8016e18 <pbuf_copy+0x144>)
 8016d9e:	4648      	mov	r0, r9
 8016da0:	f009 ff0a 	bl	8020bb8 <iprintf>
 8016da4:	897b      	ldrh	r3, [r7, #10]
 8016da6:	e7c4      	b.n	8016d32 <pbuf_copy+0x5e>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8016da8:	4653      	mov	r3, sl
 8016daa:	f240 32d9 	movw	r2, #985	; 0x3d9
 8016dae:	4659      	mov	r1, fp
 8016db0:	4648      	mov	r0, r9
 8016db2:	f009 ff01 	bl	8020bb8 <iprintf>
 8016db6:	e7b9      	b.n	8016d2c <pbuf_copy+0x58>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8016db8:	2d00      	cmp	r5, #0
 8016dba:	d0d0      	beq.n	8016d5e <pbuf_copy+0x8a>
 8016dbc:	892a      	ldrh	r2, [r5, #8]
 8016dbe:	896b      	ldrh	r3, [r5, #10]
 8016dc0:	429a      	cmp	r2, r3
 8016dc2:	d1cc      	bne.n	8016d5e <pbuf_copy+0x8a>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8016dc4:	6828      	ldr	r0, [r5, #0]
 8016dc6:	2800      	cmp	r0, #0
 8016dc8:	d0ca      	beq.n	8016d60 <pbuf_copy+0x8c>
 8016dca:	4b10      	ldr	r3, [pc, #64]	; (8016e0c <pbuf_copy+0x138>)
 8016dcc:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8016dd0:	490f      	ldr	r1, [pc, #60]	; (8016e10 <pbuf_copy+0x13c>)
 8016dd2:	4810      	ldr	r0, [pc, #64]	; (8016e14 <pbuf_copy+0x140>)
 8016dd4:	f009 fef0 	bl	8020bb8 <iprintf>
 8016dd8:	f06f 0005 	mvn.w	r0, #5
}
 8016ddc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8016de0:	4b0a      	ldr	r3, [pc, #40]	; (8016e0c <pbuf_copy+0x138>)
 8016de2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8016de6:	490d      	ldr	r1, [pc, #52]	; (8016e1c <pbuf_copy+0x148>)
 8016de8:	480a      	ldr	r0, [pc, #40]	; (8016e14 <pbuf_copy+0x140>)
 8016dea:	f009 fee5 	bl	8020bb8 <iprintf>
 8016dee:	f06f 000f 	mvn.w	r0, #15
}
 8016df2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8016df6:	4b05      	ldr	r3, [pc, #20]	; (8016e0c <pbuf_copy+0x138>)
 8016df8:	f240 32ca 	movw	r2, #970	; 0x3ca
 8016dfc:	4908      	ldr	r1, [pc, #32]	; (8016e20 <pbuf_copy+0x14c>)
 8016dfe:	4805      	ldr	r0, [pc, #20]	; (8016e14 <pbuf_copy+0x140>)
 8016e00:	f009 feda 	bl	8020bb8 <iprintf>
 8016e04:	f06f 000f 	mvn.w	r0, #15
 8016e08:	e7aa      	b.n	8016d60 <pbuf_copy+0x8c>
 8016e0a:	bf00      	nop
 8016e0c:	0803d884 	.word	0x0803d884
 8016e10:	0803d9e4 	.word	0x0803d9e4
 8016e14:	08026bb8 	.word	0x08026bb8
 8016e18:	0803d9b8 	.word	0x0803d9b8
 8016e1c:	0803d9d4 	.word	0x0803d9d4
 8016e20:	0803d970 	.word	0x0803d970
 8016e24:	0803d9a0 	.word	0x0803d9a0

08016e28 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8016e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8016e2c:	4605      	mov	r5, r0
 8016e2e:	b368      	cbz	r0, 8016e8c <pbuf_copy_partial+0x64>
 8016e30:	460f      	mov	r7, r1
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8016e32:	2900      	cmp	r1, #0
 8016e34:	d035      	beq.n	8016ea2 <pbuf_copy_partial+0x7a>
 8016e36:	4690      	mov	r8, r2

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8016e38:	2a00      	cmp	r2, #0
 8016e3a:	d03d      	beq.n	8016eb8 <pbuf_copy_partial+0x90>
  u16_t left = 0;
 8016e3c:	2600      	movs	r6, #0
 8016e3e:	e009      	b.n	8016e54 <pbuf_copy_partial+0x2c>
    if ((offset != 0) && (offset >= p->len)) {
 8016e40:	429a      	cmp	r2, r3
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8016e42:	eba3 0102 	sub.w	r1, r3, r2
    if ((offset != 0) && (offset >= p->len)) {
 8016e46:	d809      	bhi.n	8016e5c <pbuf_copy_partial+0x34>
      offset = (u16_t)(offset - p->len);
 8016e48:	b28b      	uxth	r3, r1
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8016e4a:	682d      	ldr	r5, [r5, #0]
 8016e4c:	f1b8 0f00 	cmp.w	r8, #0
 8016e50:	d019      	beq.n	8016e86 <pbuf_copy_partial+0x5e>
 8016e52:	b1c5      	cbz	r5, 8016e86 <pbuf_copy_partial+0x5e>
      buf_copy_len = (u16_t)(p->len - offset);
      if (buf_copy_len > len) {
        buf_copy_len = len;
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8016e54:	19b8      	adds	r0, r7, r6
 8016e56:	896a      	ldrh	r2, [r5, #10]
    if ((offset != 0) && (offset >= p->len)) {
 8016e58:	2b00      	cmp	r3, #0
 8016e5a:	d1f1      	bne.n	8016e40 <pbuf_copy_partial+0x18>
      buf_copy_len = (u16_t)(p->len - offset);
 8016e5c:	1ad4      	subs	r4, r2, r3
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8016e5e:	6869      	ldr	r1, [r5, #4]
      buf_copy_len = (u16_t)(p->len - offset);
 8016e60:	b2a4      	uxth	r4, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8016e62:	4419      	add	r1, r3
 8016e64:	4544      	cmp	r4, r8
 8016e66:	bf28      	it	cs
 8016e68:	4644      	movcs	r4, r8
 8016e6a:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8016e6c:	4426      	add	r6, r4
      left = (u16_t)(left + buf_copy_len);
      len = (u16_t)(len - buf_copy_len);
 8016e6e:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8016e72:	f008 fefc 	bl	801fc6e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8016e76:	b2b6      	uxth	r6, r6
      offset = 0;
 8016e78:	2300      	movs	r3, #0
      len = (u16_t)(len - buf_copy_len);
 8016e7a:	fa1f f884 	uxth.w	r8, r4
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8016e7e:	682d      	ldr	r5, [r5, #0]
 8016e80:	f1b8 0f00 	cmp.w	r8, #0
 8016e84:	d1e5      	bne.n	8016e52 <pbuf_copy_partial+0x2a>
    }
  }
  return copied_total;
}
 8016e86:	4630      	mov	r0, r6
 8016e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8016e8c:	4606      	mov	r6, r0
 8016e8e:	4b0c      	ldr	r3, [pc, #48]	; (8016ec0 <pbuf_copy_partial+0x98>)
 8016e90:	f240 420a 	movw	r2, #1034	; 0x40a
 8016e94:	490b      	ldr	r1, [pc, #44]	; (8016ec4 <pbuf_copy_partial+0x9c>)
 8016e96:	480c      	ldr	r0, [pc, #48]	; (8016ec8 <pbuf_copy_partial+0xa0>)
 8016e98:	f009 fe8e 	bl	8020bb8 <iprintf>
}
 8016e9c:	4630      	mov	r0, r6
 8016e9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8016ea2:	463e      	mov	r6, r7
 8016ea4:	4b06      	ldr	r3, [pc, #24]	; (8016ec0 <pbuf_copy_partial+0x98>)
 8016ea6:	f240 420b 	movw	r2, #1035	; 0x40b
 8016eaa:	4908      	ldr	r1, [pc, #32]	; (8016ecc <pbuf_copy_partial+0xa4>)
 8016eac:	4806      	ldr	r0, [pc, #24]	; (8016ec8 <pbuf_copy_partial+0xa0>)
 8016eae:	f009 fe83 	bl	8020bb8 <iprintf>
}
 8016eb2:	4630      	mov	r0, r6
 8016eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  u16_t left = 0;
 8016eb8:	4616      	mov	r6, r2
}
 8016eba:	4630      	mov	r0, r6
 8016ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ec0:	0803d884 	.word	0x0803d884
 8016ec4:	0803da10 	.word	0x0803da10
 8016ec8:	08026bb8 	.word	0x08026bb8
 8016ecc:	0803da30 	.word	0x0803da30

08016ed0 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8016ed0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
  size_t copied_total = 0;

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8016ed4:	2800      	cmp	r0, #0
 8016ed6:	d04a      	beq.n	8016f6e <pbuf_take+0x9e>
 8016ed8:	460f      	mov	r7, r1
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8016eda:	2900      	cmp	r1, #0
 8016edc:	d03d      	beq.n	8016f5a <pbuf_take+0x8a>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8016ede:	8903      	ldrh	r3, [r0, #8]
 8016ee0:	4690      	mov	r8, r2
 8016ee2:	4604      	mov	r4, r0
 8016ee4:	4293      	cmp	r3, r2
 8016ee6:	d32e      	bcc.n	8016f46 <pbuf_take+0x76>
  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
    return ERR_ARG;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8016ee8:	b352      	cbz	r2, 8016f40 <pbuf_take+0x70>
 8016eea:	4615      	mov	r5, r2
  size_t copied_total = 0;
 8016eec:	2600      	movs	r6, #0
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8016eee:	f8df b098 	ldr.w	fp, [pc, #152]	; 8016f88 <pbuf_take+0xb8>
 8016ef2:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8016f9c <pbuf_take+0xcc>
    buf_copy_len = total_copy_len;
    if (buf_copy_len > p->len) {
 8016ef6:	8963      	ldrh	r3, [r4, #10]
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8016ef8:	19b9      	adds	r1, r7, r6
 8016efa:	6860      	ldr	r0, [r4, #4]
 8016efc:	42ab      	cmp	r3, r5
 8016efe:	bf28      	it	cs
 8016f00:	462b      	movcs	r3, r5
 8016f02:	4699      	mov	r9, r3
 8016f04:	461a      	mov	r2, r3
    total_copy_len -= buf_copy_len;
    copied_total += buf_copy_len;
 8016f06:	441e      	add	r6, r3
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8016f08:	f008 feb1 	bl	801fc6e <memcpy>
  for (p = buf; total_copy_len != 0; p = p->next) {
 8016f0c:	ebb5 0509 	subs.w	r5, r5, r9
 8016f10:	6824      	ldr	r4, [r4, #0]
 8016f12:	d009      	beq.n	8016f28 <pbuf_take+0x58>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8016f14:	2c00      	cmp	r4, #0
 8016f16:	d1ee      	bne.n	8016ef6 <pbuf_take+0x26>
 8016f18:	465b      	mov	r3, fp
 8016f1a:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8016f1e:	4651      	mov	r1, sl
 8016f20:	4818      	ldr	r0, [pc, #96]	; (8016f84 <pbuf_take+0xb4>)
 8016f22:	f009 fe49 	bl	8020bb8 <iprintf>
 8016f26:	e7e6      	b.n	8016ef6 <pbuf_take+0x26>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8016f28:	45b0      	cmp	r8, r6
 8016f2a:	d009      	beq.n	8016f40 <pbuf_take+0x70>
 8016f2c:	4b16      	ldr	r3, [pc, #88]	; (8016f88 <pbuf_take+0xb8>)
 8016f2e:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8016f32:	4916      	ldr	r1, [pc, #88]	; (8016f8c <pbuf_take+0xbc>)
 8016f34:	4813      	ldr	r0, [pc, #76]	; (8016f84 <pbuf_take+0xb4>)
 8016f36:	f009 fe3f 	bl	8020bb8 <iprintf>
  return ERR_OK;
 8016f3a:	4628      	mov	r0, r5
}
 8016f3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_OK;
 8016f40:	2000      	movs	r0, #0
}
 8016f42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8016f46:	4b10      	ldr	r3, [pc, #64]	; (8016f88 <pbuf_take+0xb8>)
 8016f48:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8016f4c:	4910      	ldr	r1, [pc, #64]	; (8016f90 <pbuf_take+0xc0>)
 8016f4e:	480d      	ldr	r0, [pc, #52]	; (8016f84 <pbuf_take+0xb4>)
 8016f50:	f009 fe32 	bl	8020bb8 <iprintf>
 8016f54:	f04f 30ff 	mov.w	r0, #4294967295
 8016f58:	e7f0      	b.n	8016f3c <pbuf_take+0x6c>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8016f5a:	4b0b      	ldr	r3, [pc, #44]	; (8016f88 <pbuf_take+0xb8>)
 8016f5c:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8016f60:	490c      	ldr	r1, [pc, #48]	; (8016f94 <pbuf_take+0xc4>)
 8016f62:	4808      	ldr	r0, [pc, #32]	; (8016f84 <pbuf_take+0xb4>)
 8016f64:	f009 fe28 	bl	8020bb8 <iprintf>
 8016f68:	f06f 000f 	mvn.w	r0, #15
 8016f6c:	e7e6      	b.n	8016f3c <pbuf_take+0x6c>
  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8016f6e:	4b06      	ldr	r3, [pc, #24]	; (8016f88 <pbuf_take+0xb8>)
 8016f70:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8016f74:	4908      	ldr	r1, [pc, #32]	; (8016f98 <pbuf_take+0xc8>)
 8016f76:	4803      	ldr	r0, [pc, #12]	; (8016f84 <pbuf_take+0xb4>)
 8016f78:	f009 fe1e 	bl	8020bb8 <iprintf>
 8016f7c:	f06f 000f 	mvn.w	r0, #15
 8016f80:	e7dc      	b.n	8016f3c <pbuf_take+0x6c>
 8016f82:	bf00      	nop
 8016f84:	08026bb8 	.word	0x08026bb8
 8016f88:	0803d884 	.word	0x0803d884
 8016f8c:	0803db90 	.word	0x0803db90
 8016f90:	0803db58 	.word	0x0803db58
 8016f94:	0803db3c 	.word	0x0803db3c
 8016f98:	0803db24 	.word	0x0803db24
 8016f9c:	0803db78 	.word	0x0803db78

08016fa0 <pbuf_take_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 8016fa0:	b380      	cbz	r0, 8017004 <pbuf_take_at+0x64>
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 8016fa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016fa4:	4604      	mov	r4, r0
  while ((q != NULL) && (q->len <= offset_left)) {
 8016fa6:	8940      	ldrh	r0, [r0, #10]
 8016fa8:	460e      	mov	r6, r1
 8016faa:	4615      	mov	r5, r2
 8016fac:	4283      	cmp	r3, r0
 8016fae:	d203      	bcs.n	8016fb8 <pbuf_take_at+0x18>
 8016fb0:	e00a      	b.n	8016fc8 <pbuf_take_at+0x28>
 8016fb2:	8960      	ldrh	r0, [r4, #10]
 8016fb4:	4298      	cmp	r0, r3
 8016fb6:	d807      	bhi.n	8016fc8 <pbuf_take_at+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 8016fb8:	1a1b      	subs	r3, r3, r0
    q = q->next;
 8016fba:	6824      	ldr	r4, [r4, #0]
    offset_left = (u16_t)(offset_left - q->len);
 8016fbc:	b29b      	uxth	r3, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 8016fbe:	2c00      	cmp	r4, #0
 8016fc0:	d1f7      	bne.n	8016fb2 <pbuf_take_at+0x12>
    if (remaining_len > 0) {
      return pbuf_take(q->next, src_ptr, remaining_len);
    }
    return ERR_OK;
  }
  return ERR_MEM;
 8016fc2:	f04f 30ff 	mov.w	r0, #4294967295
}
 8016fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 8016fc8:	8921      	ldrh	r1, [r4, #8]
 8016fca:	195a      	adds	r2, r3, r5
 8016fcc:	4291      	cmp	r1, r2
 8016fce:	dbf8      	blt.n	8016fc2 <pbuf_take_at+0x22>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 8016fd0:	8962      	ldrh	r2, [r4, #10]
 8016fd2:	6860      	ldr	r0, [r4, #4]
 8016fd4:	1ad2      	subs	r2, r2, r3
 8016fd6:	4418      	add	r0, r3
 8016fd8:	42aa      	cmp	r2, r5
 8016fda:	da0d      	bge.n	8016ff8 <pbuf_take_at+0x58>
 8016fdc:	b297      	uxth	r7, r2
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 8016fde:	4631      	mov	r1, r6
 8016fe0:	463a      	mov	r2, r7
 8016fe2:	f008 fe44 	bl	801fc6e <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 8016fe6:	1be8      	subs	r0, r5, r7
 8016fe8:	b282      	uxth	r2, r0
    if (remaining_len > 0) {
 8016fea:	b14a      	cbz	r2, 8017000 <pbuf_take_at+0x60>
      return pbuf_take(q->next, src_ptr, remaining_len);
 8016fec:	19f1      	adds	r1, r6, r7
 8016fee:	6820      	ldr	r0, [r4, #0]
}
 8016ff0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      return pbuf_take(q->next, src_ptr, remaining_len);
 8016ff4:	f7ff bf6c 	b.w	8016ed0 <pbuf_take>
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 8016ff8:	462a      	mov	r2, r5
 8016ffa:	4631      	mov	r1, r6
 8016ffc:	f008 fe37 	bl	801fc6e <memcpy>
    return ERR_OK;
 8017000:	2000      	movs	r0, #0
}
 8017002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return ERR_MEM;
 8017004:	f04f 30ff 	mov.w	r0, #4294967295
}
 8017008:	4770      	bx	lr
 801700a:	bf00      	nop

0801700c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801700c:	b538      	push	{r3, r4, r5, lr}
 801700e:	4614      	mov	r4, r2
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8017010:	460a      	mov	r2, r1
 8017012:	8921      	ldrh	r1, [r4, #8]
 8017014:	f7ff fce6 	bl	80169e4 <pbuf_alloc>
  if (q == NULL) {
 8017018:	4605      	mov	r5, r0
 801701a:	b150      	cbz	r0, 8017032 <pbuf_clone+0x26>
    return NULL;
  }
  err = pbuf_copy(q, p);
 801701c:	4621      	mov	r1, r4
 801701e:	f7ff fe59 	bl	8016cd4 <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8017022:	b130      	cbz	r0, 8017032 <pbuf_clone+0x26>
 8017024:	4b04      	ldr	r3, [pc, #16]	; (8017038 <pbuf_clone+0x2c>)
 8017026:	f240 5224 	movw	r2, #1316	; 0x524
 801702a:	4904      	ldr	r1, [pc, #16]	; (801703c <pbuf_clone+0x30>)
 801702c:	4804      	ldr	r0, [pc, #16]	; (8017040 <pbuf_clone+0x34>)
 801702e:	f009 fdc3 	bl	8020bb8 <iprintf>
  return q;
}
 8017032:	4628      	mov	r0, r5
 8017034:	bd38      	pop	{r3, r4, r5, pc}
 8017036:	bf00      	nop
 8017038:	0803d884 	.word	0x0803d884
 801703c:	0803d95c 	.word	0x0803d95c
 8017040:	08026bb8 	.word	0x08026bb8

08017044 <pbuf_try_get_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 8017044:	b158      	cbz	r0, 801705e <pbuf_try_get_at+0x1a>
 8017046:	8943      	ldrh	r3, [r0, #10]
 8017048:	4299      	cmp	r1, r3
 801704a:	d203      	bcs.n	8017054 <pbuf_try_get_at+0x10>
 801704c:	e00a      	b.n	8017064 <pbuf_try_get_at+0x20>
 801704e:	8943      	ldrh	r3, [r0, #10]
 8017050:	428b      	cmp	r3, r1
 8017052:	d807      	bhi.n	8017064 <pbuf_try_get_at+0x20>
    offset_left = (u16_t)(offset_left - q->len);
 8017054:	1ac9      	subs	r1, r1, r3
    q = q->next;
 8017056:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
 8017058:	b289      	uxth	r1, r1
  while ((q != NULL) && (q->len <= offset_left)) {
 801705a:	2800      	cmp	r0, #0
 801705c:	d1f7      	bne.n	801704e <pbuf_try_get_at+0xa>

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
    return ((u8_t *)q->payload)[q_idx];
  }
  return -1;
 801705e:	f04f 30ff 	mov.w	r0, #4294967295
 8017062:	4770      	bx	lr
    return ((u8_t *)q->payload)[q_idx];
 8017064:	6843      	ldr	r3, [r0, #4]
 8017066:	5c58      	ldrb	r0, [r3, r1]
}
 8017068:	4770      	bx	lr
 801706a:	bf00      	nop

0801706c <pbuf_put_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 801706c:	b158      	cbz	r0, 8017086 <pbuf_put_at+0x1a>
 801706e:	8943      	ldrh	r3, [r0, #10]
 8017070:	4299      	cmp	r1, r3
 8017072:	d203      	bcs.n	801707c <pbuf_put_at+0x10>
 8017074:	e008      	b.n	8017088 <pbuf_put_at+0x1c>
 8017076:	8943      	ldrh	r3, [r0, #10]
 8017078:	428b      	cmp	r3, r1
 801707a:	d805      	bhi.n	8017088 <pbuf_put_at+0x1c>
    offset_left = (u16_t)(offset_left - q->len);
 801707c:	1ac9      	subs	r1, r1, r3
    q = q->next;
 801707e:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
 8017080:	b289      	uxth	r1, r1
  while ((q != NULL) && (q->len <= offset_left)) {
 8017082:	2800      	cmp	r0, #0
 8017084:	d1f7      	bne.n	8017076 <pbuf_put_at+0xa>

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
    ((u8_t *)q->payload)[q_idx] = data;
  }
}
 8017086:	4770      	bx	lr
    ((u8_t *)q->payload)[q_idx] = data;
 8017088:	6843      	ldr	r3, [r0, #4]
 801708a:	545a      	strb	r2, [r3, r1]
}
 801708c:	4770      	bx	lr
 801708e:	bf00      	nop

08017090 <raw_input>:
 *           caller).
 *
 */
raw_input_state_t
raw_input(struct pbuf *p, struct netif *inp)
{
 8017090:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct raw_pcb *pcb, *prev;
  s16_t proto;
  raw_input_state_t ret = RAW_INPUT_NONE;
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8017094:	4b34      	ldr	r3, [pc, #208]	; (8017168 <raw_input+0xd8>)
{
 8017096:	4680      	mov	r8, r0
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
  }
#endif /* LWIP_IPV4 */

  prev = NULL;
  pcb = raw_pcbs;
 8017098:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 801717c <raw_input+0xec>
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801709c:	6819      	ldr	r1, [r3, #0]
 801709e:	6958      	ldr	r0, [r3, #20]
 80170a0:	f007 fb2e 	bl	801e700 <ip4_addr_isbroadcast_u32>
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
 80170a4:	f8d8 3004 	ldr.w	r3, [r8, #4]
  pcb = raw_pcbs;
 80170a8:	f8db 4000 	ldr.w	r4, [fp]
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
 80170ac:	7a5d      	ldrb	r5, [r3, #9]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while (pcb != NULL) {
 80170ae:	2c00      	cmp	r4, #0
 80170b0:	d04b      	beq.n	801714a <raw_input+0xba>
 80170b2:	4681      	mov	r9, r0
  raw_input_state_t ret = RAW_INPUT_NONE;
 80170b4:	2000      	movs	r0, #0
 80170b6:	46ca      	mov	sl, r9
  prev = NULL;
 80170b8:	4606      	mov	r6, r0
 80170ba:	e004      	b.n	80170c6 <raw_input+0x36>
      }
      /* no receive callback function was set for this raw PCB */
    }
    /* drop the packet */
    prev = pcb;
    pcb = pcb->next;
 80170bc:	68e3      	ldr	r3, [r4, #12]
 80170be:	4626      	mov	r6, r4
  while (pcb != NULL) {
 80170c0:	2b00      	cmp	r3, #0
 80170c2:	d037      	beq.n	8017134 <raw_input+0xa4>
 80170c4:	461c      	mov	r4, r3
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 80170c6:	7c23      	ldrb	r3, [r4, #16]
 80170c8:	42ab      	cmp	r3, r5
 80170ca:	d1f7      	bne.n	80170bc <raw_input+0x2c>
 80170cc:	7a22      	ldrb	r2, [r4, #8]
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80170ce:	b13a      	cbz	r2, 80170e0 <raw_input+0x50>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80170d0:	4b25      	ldr	r3, [pc, #148]	; (8017168 <raw_input+0xd8>)
 80170d2:	685b      	ldr	r3, [r3, #4]
 80170d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80170d8:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80170da:	b2db      	uxtb	r3, r3
 80170dc:	429a      	cmp	r2, r3
 80170de:	d1ed      	bne.n	80170bc <raw_input+0x2c>
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 80170e0:	6823      	ldr	r3, [r4, #0]
    if (broadcast != 0) {
 80170e2:	f1ba 0f00 	cmp.w	sl, #0
 80170e6:	d027      	beq.n	8017138 <raw_input+0xa8>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
 80170e8:	2b00      	cmp	r3, #0
 80170ea:	d1e7      	bne.n	80170bc <raw_input+0x2c>
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 80170ec:	7c63      	ldrb	r3, [r4, #17]
 80170ee:	07db      	lsls	r3, r3, #31
 80170f0:	d504      	bpl.n	80170fc <raw_input+0x6c>
        (((pcb->flags & RAW_FLAGS_CONNECTED) == 0) ||
 80170f2:	4b1d      	ldr	r3, [pc, #116]	; (8017168 <raw_input+0xd8>)
 80170f4:	6862      	ldr	r2, [r4, #4]
 80170f6:	691b      	ldr	r3, [r3, #16]
 80170f8:	429a      	cmp	r2, r3
 80170fa:	d1df      	bne.n	80170bc <raw_input+0x2c>
      if (pcb->recv != NULL) {
 80170fc:	f8d4 9014 	ldr.w	r9, [r4, #20]
 8017100:	f1b9 0f00 	cmp.w	r9, #0
 8017104:	d0da      	beq.n	80170bc <raw_input+0x2c>
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 8017106:	4b19      	ldr	r3, [pc, #100]	; (801716c <raw_input+0xdc>)
 8017108:	4642      	mov	r2, r8
 801710a:	4621      	mov	r1, r4
 801710c:	69a0      	ldr	r0, [r4, #24]
        void *old_payload = p->payload;
 801710e:	f8d8 7004 	ldr.w	r7, [r8, #4]
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 8017112:	47c8      	blx	r9
        if (eaten != 0) {
 8017114:	b9d8      	cbnz	r0, 801714e <raw_input+0xbe>
          LWIP_ASSERT("raw pcb recv callback altered pbuf payload pointer without eating packet",
 8017116:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801711a:	42bb      	cmp	r3, r7
 801711c:	d013      	beq.n	8017146 <raw_input+0xb6>
 801711e:	4b14      	ldr	r3, [pc, #80]	; (8017170 <raw_input+0xe0>)
 8017120:	22c1      	movs	r2, #193	; 0xc1
 8017122:	4914      	ldr	r1, [pc, #80]	; (8017174 <raw_input+0xe4>)
 8017124:	4626      	mov	r6, r4
 8017126:	4814      	ldr	r0, [pc, #80]	; (8017178 <raw_input+0xe8>)
 8017128:	f009 fd46 	bl	8020bb8 <iprintf>
    pcb = pcb->next;
 801712c:	68e3      	ldr	r3, [r4, #12]
        ret = RAW_INPUT_DELIVERED;
 801712e:	2002      	movs	r0, #2
  while (pcb != NULL) {
 8017130:	2b00      	cmp	r3, #0
 8017132:	d1c7      	bne.n	80170c4 <raw_input+0x34>
  }
  return ret;
}
 8017134:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ip_addr_isany(&pcb->local_ip) ||
 8017138:	2b00      	cmp	r3, #0
 801713a:	d0d7      	beq.n	80170ec <raw_input+0x5c>
 801713c:	4a0a      	ldr	r2, [pc, #40]	; (8017168 <raw_input+0xd8>)
 801713e:	6952      	ldr	r2, [r2, #20]
 8017140:	4293      	cmp	r3, r2
 8017142:	d1bb      	bne.n	80170bc <raw_input+0x2c>
 8017144:	e7d2      	b.n	80170ec <raw_input+0x5c>
        ret = RAW_INPUT_DELIVERED;
 8017146:	2002      	movs	r0, #2
 8017148:	e7b8      	b.n	80170bc <raw_input+0x2c>
  raw_input_state_t ret = RAW_INPUT_NONE;
 801714a:	4620      	mov	r0, r4
 801714c:	e7f2      	b.n	8017134 <raw_input+0xa4>
          if (prev != NULL) {
 801714e:	b146      	cbz	r6, 8017162 <raw_input+0xd2>
            prev->next = pcb->next;
 8017150:	68e2      	ldr	r2, [r4, #12]
          return RAW_INPUT_EATEN;
 8017152:	2001      	movs	r0, #1
            pcb->next = raw_pcbs;
 8017154:	f8db 3000 	ldr.w	r3, [fp]
            prev->next = pcb->next;
 8017158:	60f2      	str	r2, [r6, #12]
            raw_pcbs = pcb;
 801715a:	f8cb 4000 	str.w	r4, [fp]
            pcb->next = raw_pcbs;
 801715e:	60e3      	str	r3, [r4, #12]
 8017160:	e7e8      	b.n	8017134 <raw_input+0xa4>
          return RAW_INPUT_EATEN;
 8017162:	2001      	movs	r0, #1
 8017164:	e7e6      	b.n	8017134 <raw_input+0xa4>
 8017166:	bf00      	nop
 8017168:	2002ead4 	.word	0x2002ead4
 801716c:	2002eae4 	.word	0x2002eae4
 8017170:	0803dba8 	.word	0x0803dba8
 8017174:	0803dbd8 	.word	0x0803dbd8
 8017178:	08026bb8 	.word	0x08026bb8
 801717c:	2002a3f0 	.word	0x2002a3f0

08017180 <raw_netif_ip_addr_changed>:
 */
void raw_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct raw_pcb *rpcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8017180:	b1a8      	cbz	r0, 80171ae <raw_netif_ip_addr_changed+0x2e>
 8017182:	6802      	ldr	r2, [r0, #0]
 8017184:	b199      	cbz	r1, 80171ae <raw_netif_ip_addr_changed+0x2e>
 8017186:	b192      	cbz	r2, 80171ae <raw_netif_ip_addr_changed+0x2e>
 8017188:	680b      	ldr	r3, [r1, #0]
 801718a:	b183      	cbz	r3, 80171ae <raw_netif_ip_addr_changed+0x2e>
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 801718c:	4b08      	ldr	r3, [pc, #32]	; (80171b0 <raw_netif_ip_addr_changed+0x30>)
 801718e:	681b      	ldr	r3, [r3, #0]
 8017190:	b16b      	cbz	r3, 80171ae <raw_netif_ip_addr_changed+0x2e>
{
 8017192:	b410      	push	{r4}
 8017194:	e000      	b.n	8017198 <raw_netif_ip_addr_changed+0x18>
 8017196:	6802      	ldr	r2, [r0, #0]
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&rpcb->local_ip, old_addr)) {
 8017198:	681c      	ldr	r4, [r3, #0]
 801719a:	4294      	cmp	r4, r2
 801719c:	d101      	bne.n	80171a2 <raw_netif_ip_addr_changed+0x22>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(rpcb->local_ip, *new_addr);
 801719e:	680a      	ldr	r2, [r1, #0]
 80171a0:	601a      	str	r2, [r3, #0]
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 80171a2:	68db      	ldr	r3, [r3, #12]
 80171a4:	2b00      	cmp	r3, #0
 80171a6:	d1f6      	bne.n	8017196 <raw_netif_ip_addr_changed+0x16>
      }
    }
  }
}
 80171a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80171ac:	4770      	bx	lr
 80171ae:	4770      	bx	lr
 80171b0:	2002a3f0 	.word	0x2002a3f0

080171b4 <stats_init>:
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 80171b4:	4770      	bx	lr
 80171b6:	bf00      	nop

080171b8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80171b8:	f8df c060 	ldr.w	ip, [pc, #96]	; 801721c <tcp_new_port+0x64>
 80171bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80171c0:	b4f0      	push	{r4, r5, r6, r7}
 80171c2:	f8bc 0000 	ldrh.w	r0, [ip]
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80171c6:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80171ca:	4f11      	ldr	r7, [pc, #68]	; (8017210 <tcp_new_port+0x58>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80171cc:	4d11      	ldr	r5, [pc, #68]	; (8017214 <tcp_new_port+0x5c>)
  tcp_port++;
 80171ce:	3001      	adds	r0, #1
 80171d0:	4c11      	ldr	r4, [pc, #68]	; (8017218 <tcp_new_port+0x60>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80171d2:	462b      	mov	r3, r5
  tcp_port++;
 80171d4:	b280      	uxth	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80171d6:	42b0      	cmp	r0, r6
 80171d8:	bf08      	it	eq
 80171da:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80171de:	681b      	ldr	r3, [r3, #0]
 80171e0:	b913      	cbnz	r3, 80171e8 <tcp_new_port+0x30>
 80171e2:	e00c      	b.n	80171fe <tcp_new_port+0x46>
 80171e4:	68db      	ldr	r3, [r3, #12]
 80171e6:	b153      	cbz	r3, 80171fe <tcp_new_port+0x46>
      if (pcb->local_port == tcp_port) {
 80171e8:	8ada      	ldrh	r2, [r3, #22]
 80171ea:	4282      	cmp	r2, r0
 80171ec:	d1fa      	bne.n	80171e4 <tcp_new_port+0x2c>
 80171ee:	3901      	subs	r1, #1
 80171f0:	b289      	uxth	r1, r1
        n++;
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80171f2:	2900      	cmp	r1, #0
 80171f4:	d1eb      	bne.n	80171ce <tcp_new_port+0x16>
 80171f6:	f8ac 0000 	strh.w	r0, [ip]
          return 0;
 80171fa:	4608      	mov	r0, r1
 80171fc:	e006      	b.n	801720c <tcp_new_port+0x54>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80171fe:	42a7      	cmp	r7, r4
 8017200:	d002      	beq.n	8017208 <tcp_new_port+0x50>
 8017202:	f854 3b04 	ldr.w	r3, [r4], #4
 8017206:	e7ea      	b.n	80171de <tcp_new_port+0x26>
 8017208:	f8ac 0000 	strh.w	r0, [ip]
        goto again;
      }
    }
  }
  return tcp_port;
}
 801720c:	bcf0      	pop	{r4, r5, r6, r7}
 801720e:	4770      	bx	lr
 8017210:	0803df24 	.word	0x0803df24
 8017214:	2003e2e0 	.word	0x2003e2e0
 8017218:	0803df18 	.word	0x0803df18
 801721c:	200003d8 	.word	0x200003d8

08017220 <tcp_close_shutdown_fin>:
{
 8017220:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8017222:	4604      	mov	r4, r0
 8017224:	b310      	cbz	r0, 801726c <tcp_close_shutdown_fin+0x4c>
  switch (pcb->state) {
 8017226:	7d23      	ldrb	r3, [r4, #20]
 8017228:	2b04      	cmp	r3, #4
 801722a:	d005      	beq.n	8017238 <tcp_close_shutdown_fin+0x18>
 801722c:	2b07      	cmp	r3, #7
 801722e:	d00e      	beq.n	801724e <tcp_close_shutdown_fin+0x2e>
 8017230:	2b03      	cmp	r3, #3
 8017232:	d001      	beq.n	8017238 <tcp_close_shutdown_fin+0x18>
      return ERR_OK;
 8017234:	2000      	movs	r0, #0
}
 8017236:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 8017238:	4620      	mov	r0, r4
 801723a:	f003 fdcd 	bl	801add8 <tcp_send_fin>
      if (err == ERR_OK) {
 801723e:	b950      	cbnz	r0, 8017256 <tcp_close_shutdown_fin+0x36>
        pcb->state = FIN_WAIT_1;
 8017240:	2305      	movs	r3, #5
 8017242:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 8017244:	4620      	mov	r0, r4
 8017246:	f003 ff35 	bl	801b0b4 <tcp_output>
 801724a:	2000      	movs	r0, #0
}
 801724c:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 801724e:	4620      	mov	r0, r4
 8017250:	f003 fdc2 	bl	801add8 <tcp_send_fin>
      if (err == ERR_OK) {
 8017254:	b138      	cbz	r0, 8017266 <tcp_close_shutdown_fin+0x46>
  } else if (err == ERR_MEM) {
 8017256:	1c43      	adds	r3, r0, #1
 8017258:	d1ed      	bne.n	8017236 <tcp_close_shutdown_fin+0x16>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801725a:	8b63      	ldrh	r3, [r4, #26]
    return ERR_OK;
 801725c:	2000      	movs	r0, #0
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801725e:	f043 0308 	orr.w	r3, r3, #8
 8017262:	8363      	strh	r3, [r4, #26]
}
 8017264:	bd10      	pop	{r4, pc}
        pcb->state = LAST_ACK;
 8017266:	2309      	movs	r3, #9
 8017268:	7523      	strb	r3, [r4, #20]
 801726a:	e7eb      	b.n	8017244 <tcp_close_shutdown_fin+0x24>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801726c:	4b03      	ldr	r3, [pc, #12]	; (801727c <tcp_close_shutdown_fin+0x5c>)
 801726e:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8017272:	4903      	ldr	r1, [pc, #12]	; (8017280 <tcp_close_shutdown_fin+0x60>)
 8017274:	4803      	ldr	r0, [pc, #12]	; (8017284 <tcp_close_shutdown_fin+0x64>)
 8017276:	f009 fc9f 	bl	8020bb8 <iprintf>
 801727a:	e7d4      	b.n	8017226 <tcp_close_shutdown_fin+0x6>
 801727c:	0803dd54 	.word	0x0803dd54
 8017280:	0803dd84 	.word	0x0803dd84
 8017284:	08026bb8 	.word	0x08026bb8

08017288 <tcp_init>:
{
 8017288:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801728a:	f009 fd25 	bl	8020cd8 <rand>
 801728e:	4b02      	ldr	r3, [pc, #8]	; (8017298 <tcp_init+0x10>)
 8017290:	4a02      	ldr	r2, [pc, #8]	; (801729c <tcp_init+0x14>)
 8017292:	4303      	orrs	r3, r0
 8017294:	8013      	strh	r3, [r2, #0]
}
 8017296:	bd08      	pop	{r3, pc}
 8017298:	ffffc000 	.word	0xffffc000
 801729c:	200003d8 	.word	0x200003d8

080172a0 <tcp_free>:
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80172a0:	7d03      	ldrb	r3, [r0, #20]
 80172a2:	2b01      	cmp	r3, #1
{
 80172a4:	b510      	push	{r4, lr}
 80172a6:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80172a8:	d005      	beq.n	80172b6 <tcp_free+0x16>
  memp_free(MEMP_TCP_PCB, pcb);
 80172aa:	4621      	mov	r1, r4
 80172ac:	2002      	movs	r0, #2
}
 80172ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 80172b2:	f7ff b84f 	b.w	8016354 <memp_free>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80172b6:	4906      	ldr	r1, [pc, #24]	; (80172d0 <tcp_free+0x30>)
 80172b8:	22d4      	movs	r2, #212	; 0xd4
 80172ba:	4b06      	ldr	r3, [pc, #24]	; (80172d4 <tcp_free+0x34>)
 80172bc:	4806      	ldr	r0, [pc, #24]	; (80172d8 <tcp_free+0x38>)
 80172be:	f009 fc7b 	bl	8020bb8 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 80172c2:	4621      	mov	r1, r4
 80172c4:	2002      	movs	r0, #2
}
 80172c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 80172ca:	f7ff b843 	b.w	8016354 <memp_free>
 80172ce:	bf00      	nop
 80172d0:	0803de48 	.word	0x0803de48
 80172d4:	0803dd54 	.word	0x0803dd54
 80172d8:	08026bb8 	.word	0x08026bb8

080172dc <tcp_bind>:
{
 80172dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 80172de:	4d25      	ldr	r5, [pc, #148]	; (8017374 <tcp_bind+0x98>)
 80172e0:	2900      	cmp	r1, #0
 80172e2:	bf18      	it	ne
 80172e4:	460d      	movne	r5, r1
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80172e6:	2800      	cmp	r0, #0
 80172e8:	d03a      	beq.n	8017360 <tcp_bind+0x84>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80172ea:	7d01      	ldrb	r1, [r0, #20]
 80172ec:	4606      	mov	r6, r0
 80172ee:	bb69      	cbnz	r1, 801734c <tcp_bind+0x70>
  if (port == 0) {
 80172f0:	b30a      	cbz	r2, 8017336 <tcp_bind+0x5a>
 80172f2:	4b21      	ldr	r3, [pc, #132]	; (8017378 <tcp_bind+0x9c>)
 80172f4:	4f21      	ldr	r7, [pc, #132]	; (801737c <tcp_bind+0xa0>)
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80172f6:	681b      	ldr	r3, [r3, #0]
 80172f8:	b913      	cbnz	r3, 8017300 <tcp_bind+0x24>
 80172fa:	e00d      	b.n	8017318 <tcp_bind+0x3c>
 80172fc:	68db      	ldr	r3, [r3, #12]
 80172fe:	b15b      	cbz	r3, 8017318 <tcp_bind+0x3c>
        if (cpcb->local_port == port) {
 8017300:	8ad8      	ldrh	r0, [r3, #22]
 8017302:	4290      	cmp	r0, r2
 8017304:	d1fa      	bne.n	80172fc <tcp_bind+0x20>
                (ip_addr_isany(&cpcb->local_ip) ||
 8017306:	6818      	ldr	r0, [r3, #0]
 8017308:	b118      	cbz	r0, 8017312 <tcp_bind+0x36>
                 ip_addr_isany(ipaddr) ||
 801730a:	682c      	ldr	r4, [r5, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801730c:	b10c      	cbz	r4, 8017312 <tcp_bind+0x36>
 801730e:	42a0      	cmp	r0, r4
 8017310:	d1f4      	bne.n	80172fc <tcp_bind+0x20>
              return ERR_USE;
 8017312:	f06f 0007 	mvn.w	r0, #7
}
 8017316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < max_pcb_list; i++) {
 8017318:	3101      	adds	r1, #1
 801731a:	2904      	cmp	r1, #4
 801731c:	d113      	bne.n	8017346 <tcp_bind+0x6a>
  if (!ip_addr_isany(ipaddr)
 801731e:	682b      	ldr	r3, [r5, #0]
 8017320:	b103      	cbz	r3, 8017324 <tcp_bind+0x48>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8017322:	6033      	str	r3, [r6, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8017324:	4b16      	ldr	r3, [pc, #88]	; (8017380 <tcp_bind+0xa4>)
  pcb->local_port = port;
 8017326:	82f2      	strh	r2, [r6, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8017328:	681a      	ldr	r2, [r3, #0]
 801732a:	601e      	str	r6, [r3, #0]
 801732c:	60f2      	str	r2, [r6, #12]
 801732e:	f004 f9f5 	bl	801b71c <tcp_timer_needed>
  return ERR_OK;
 8017332:	2000      	movs	r0, #0
}
 8017334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    port = tcp_new_port();
 8017336:	f7ff ff3f 	bl	80171b8 <tcp_new_port>
    if (port == 0) {
 801733a:	4602      	mov	r2, r0
 801733c:	2800      	cmp	r0, #0
 801733e:	d1ee      	bne.n	801731e <tcp_bind+0x42>
      return ERR_BUF;
 8017340:	f06f 0001 	mvn.w	r0, #1
}
 8017344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017346:	f857 3021 	ldr.w	r3, [r7, r1, lsl #2]
 801734a:	e7d4      	b.n	80172f6 <tcp_bind+0x1a>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801734c:	4b0d      	ldr	r3, [pc, #52]	; (8017384 <tcp_bind+0xa8>)
 801734e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8017352:	490d      	ldr	r1, [pc, #52]	; (8017388 <tcp_bind+0xac>)
 8017354:	480d      	ldr	r0, [pc, #52]	; (801738c <tcp_bind+0xb0>)
 8017356:	f009 fc2f 	bl	8020bb8 <iprintf>
 801735a:	f06f 0005 	mvn.w	r0, #5
}
 801735e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8017360:	4b08      	ldr	r3, [pc, #32]	; (8017384 <tcp_bind+0xa8>)
 8017362:	f240 22a9 	movw	r2, #681	; 0x2a9
 8017366:	490a      	ldr	r1, [pc, #40]	; (8017390 <tcp_bind+0xb4>)
 8017368:	4808      	ldr	r0, [pc, #32]	; (801738c <tcp_bind+0xb0>)
 801736a:	f009 fc25 	bl	8020bb8 <iprintf>
 801736e:	f06f 000f 	mvn.w	r0, #15
}
 8017372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017374:	0803f8a8 	.word	0x0803f8a8
 8017378:	2003e2e0 	.word	0x2003e2e0
 801737c:	0803df14 	.word	0x0803df14
 8017380:	2003e2e4 	.word	0x2003e2e4
 8017384:	0803dd54 	.word	0x0803dd54
 8017388:	0803dcbc 	.word	0x0803dcbc
 801738c:	08026bb8 	.word	0x08026bb8
 8017390:	0803dca4 	.word	0x0803dca4

08017394 <tcp_listen_with_backlog_and_err>:
{
 8017394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017396:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8017398:	4605      	mov	r5, r0
 801739a:	2800      	cmp	r0, #0
 801739c:	d053      	beq.n	8017446 <tcp_listen_with_backlog_and_err+0xb2>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801739e:	7d07      	ldrb	r7, [r0, #20]
 80173a0:	2f00      	cmp	r7, #0
 80173a2:	d145      	bne.n	8017430 <tcp_listen_with_backlog_and_err+0x9c>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80173a4:	f240 3272 	movw	r2, #882	; 0x372
 80173a8:	492c      	ldr	r1, [pc, #176]	; (801745c <tcp_listen_with_backlog_and_err+0xc8>)
 80173aa:	2003      	movs	r0, #3
 80173ac:	f7fe ffae 	bl	801630c <memp_malloc_fn>
  if (lpcb == NULL) {
 80173b0:	4604      	mov	r4, r0
 80173b2:	2800      	cmp	r0, #0
 80173b4:	d033      	beq.n	801741e <tcp_listen_with_backlog_and_err+0x8a>
  lpcb->callback_arg = pcb->callback_arg;
 80173b6:	6929      	ldr	r1, [r5, #16]
  lpcb->state = LISTEN;
 80173b8:	2201      	movs	r2, #1
  lpcb->local_port = pcb->local_port;
 80173ba:	8aeb      	ldrh	r3, [r5, #22]
  lpcb->callback_arg = pcb->callback_arg;
 80173bc:	6101      	str	r1, [r0, #16]
  lpcb->local_port = pcb->local_port;
 80173be:	82c3      	strh	r3, [r0, #22]
  lpcb->state = LISTEN;
 80173c0:	7502      	strb	r2, [r0, #20]
  lpcb->prio = pcb->prio;
 80173c2:	7d6a      	ldrb	r2, [r5, #21]
 80173c4:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 80173c6:	7a6a      	ldrb	r2, [r5, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 80173c8:	7207      	strb	r7, [r0, #8]
  lpcb->so_options = pcb->so_options;
 80173ca:	7242      	strb	r2, [r0, #9]
  lpcb->ttl = pcb->ttl;
 80173cc:	7aea      	ldrb	r2, [r5, #11]
 80173ce:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
 80173d0:	7aaa      	ldrb	r2, [r5, #10]
 80173d2:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80173d4:	682a      	ldr	r2, [r5, #0]
 80173d6:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 80173d8:	b18b      	cbz	r3, 80173fe <tcp_listen_with_backlog_and_err+0x6a>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80173da:	4b21      	ldr	r3, [pc, #132]	; (8017460 <tcp_listen_with_backlog_and_err+0xcc>)
 80173dc:	681a      	ldr	r2, [r3, #0]
 80173de:	42aa      	cmp	r2, r5
 80173e0:	d009      	beq.n	80173f6 <tcp_listen_with_backlog_and_err+0x62>
 80173e2:	b152      	cbz	r2, 80173fa <tcp_listen_with_backlog_and_err+0x66>
 80173e4:	68d3      	ldr	r3, [r2, #12]
 80173e6:	429d      	cmp	r5, r3
 80173e8:	d01c      	beq.n	8017424 <tcp_listen_with_backlog_and_err+0x90>
 80173ea:	b133      	cbz	r3, 80173fa <tcp_listen_with_backlog_and_err+0x66>
 80173ec:	68da      	ldr	r2, [r3, #12]
 80173ee:	42aa      	cmp	r2, r5
 80173f0:	d019      	beq.n	8017426 <tcp_listen_with_backlog_and_err+0x92>
 80173f2:	4613      	mov	r3, r2
 80173f4:	e7f9      	b.n	80173ea <tcp_listen_with_backlog_and_err+0x56>
 80173f6:	68ea      	ldr	r2, [r5, #12]
 80173f8:	601a      	str	r2, [r3, #0]
 80173fa:	2300      	movs	r3, #0
 80173fc:	60eb      	str	r3, [r5, #12]
  tcp_free(pcb);
 80173fe:	4628      	mov	r0, r5
 8017400:	f7ff ff4e 	bl	80172a0 <tcp_free>
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8017404:	4b17      	ldr	r3, [pc, #92]	; (8017464 <tcp_listen_with_backlog_and_err+0xd0>)
  lpcb->accept = tcp_accept_null;
 8017406:	4918      	ldr	r1, [pc, #96]	; (8017468 <tcp_listen_with_backlog_and_err+0xd4>)
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8017408:	681a      	ldr	r2, [r3, #0]
  lpcb->accept = tcp_accept_null;
 801740a:	61a1      	str	r1, [r4, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801740c:	60e2      	str	r2, [r4, #12]
 801740e:	601c      	str	r4, [r3, #0]
 8017410:	f004 f984 	bl	801b71c <tcp_timer_needed>
  res = ERR_OK;
 8017414:	2300      	movs	r3, #0
  if (err != NULL) {
 8017416:	b106      	cbz	r6, 801741a <tcp_listen_with_backlog_and_err+0x86>
    *err = res;
 8017418:	7033      	strb	r3, [r6, #0]
}
 801741a:	4620      	mov	r0, r4
 801741c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    res = ERR_MEM;
 801741e:	f04f 33ff 	mov.w	r3, #4294967295
 8017422:	e7f8      	b.n	8017416 <tcp_listen_with_backlog_and_err+0x82>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8017424:	4613      	mov	r3, r2
 8017426:	68ea      	ldr	r2, [r5, #12]
 8017428:	60da      	str	r2, [r3, #12]
 801742a:	2300      	movs	r3, #0
 801742c:	60eb      	str	r3, [r5, #12]
 801742e:	e7e6      	b.n	80173fe <tcp_listen_with_backlog_and_err+0x6a>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8017430:	4b0a      	ldr	r3, [pc, #40]	; (801745c <tcp_listen_with_backlog_and_err+0xc8>)
 8017432:	f240 325a 	movw	r2, #858	; 0x35a
 8017436:	490d      	ldr	r1, [pc, #52]	; (801746c <tcp_listen_with_backlog_and_err+0xd8>)
  struct tcp_pcb_listen *lpcb = NULL;
 8017438:	2400      	movs	r4, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801743a:	480d      	ldr	r0, [pc, #52]	; (8017470 <tcp_listen_with_backlog_and_err+0xdc>)
 801743c:	f009 fbbc 	bl	8020bb8 <iprintf>
 8017440:	f06f 030e 	mvn.w	r3, #14
 8017444:	e7e7      	b.n	8017416 <tcp_listen_with_backlog_and_err+0x82>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8017446:	4b05      	ldr	r3, [pc, #20]	; (801745c <tcp_listen_with_backlog_and_err+0xc8>)
 8017448:	f240 3259 	movw	r2, #857	; 0x359
 801744c:	4909      	ldr	r1, [pc, #36]	; (8017474 <tcp_listen_with_backlog_and_err+0xe0>)
  struct tcp_pcb_listen *lpcb = NULL;
 801744e:	4604      	mov	r4, r0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8017450:	4807      	ldr	r0, [pc, #28]	; (8017470 <tcp_listen_with_backlog_and_err+0xdc>)
 8017452:	f009 fbb1 	bl	8020bb8 <iprintf>
 8017456:	f06f 030f 	mvn.w	r3, #15
 801745a:	e7dc      	b.n	8017416 <tcp_listen_with_backlog_and_err+0x82>
 801745c:	0803dd54 	.word	0x0803dd54
 8017460:	2003e2e4 	.word	0x2003e2e4
 8017464:	2003e2e0 	.word	0x2003e2e0
 8017468:	08017eb1 	.word	0x08017eb1
 801746c:	0803de8c 	.word	0x0803de8c
 8017470:	08026bb8 	.word	0x08026bb8
 8017474:	0803de5c 	.word	0x0803de5c

08017478 <tcp_listen_with_backlog>:
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8017478:	2200      	movs	r2, #0
 801747a:	f7ff bf8b 	b.w	8017394 <tcp_listen_with_backlog_and_err>
 801747e:	bf00      	nop

08017480 <tcp_update_rcv_ann_wnd>:
{
 8017480:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8017482:	4604      	mov	r4, r0
 8017484:	b1a8      	cbz	r0, 80174b2 <tcp_update_rcv_ann_wnd+0x32>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8017486:	8d21      	ldrh	r1, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8017488:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801748a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801748c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801748e:	1a88      	subs	r0, r1, r2
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8017490:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8017494:	4428      	add	r0, r5
 8017496:	bf94      	ite	ls
 8017498:	1ac3      	subls	r3, r0, r3
 801749a:	f5a0 6386 	subhi.w	r3, r0, #1072	; 0x430
 801749e:	2b00      	cmp	r3, #0
 80174a0:	db01      	blt.n	80174a6 <tcp_update_rcv_ann_wnd+0x26>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80174a2:	8561      	strh	r1, [r4, #42]	; 0x2a
}
 80174a4:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80174a6:	1aab      	subs	r3, r5, r2
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	dd0a      	ble.n	80174c2 <tcp_update_rcv_ann_wnd+0x42>
      pcb->rcv_ann_wnd = 0;
 80174ac:	2000      	movs	r0, #0
 80174ae:	8560      	strh	r0, [r4, #42]	; 0x2a
}
 80174b0:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80174b2:	4b0b      	ldr	r3, [pc, #44]	; (80174e0 <tcp_update_rcv_ann_wnd+0x60>)
 80174b4:	f240 32a6 	movw	r2, #934	; 0x3a6
 80174b8:	490a      	ldr	r1, [pc, #40]	; (80174e4 <tcp_update_rcv_ann_wnd+0x64>)
 80174ba:	480b      	ldr	r0, [pc, #44]	; (80174e8 <tcp_update_rcv_ann_wnd+0x68>)
 80174bc:	f009 fb7c 	bl	8020bb8 <iprintf>
 80174c0:	e7e1      	b.n	8017486 <tcp_update_rcv_ann_wnd+0x6>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80174c2:	1b55      	subs	r5, r2, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80174c4:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 80174c8:	d202      	bcs.n	80174d0 <tcp_update_rcv_ann_wnd+0x50>
    return 0;
 80174ca:	2000      	movs	r0, #0
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80174cc:	8565      	strh	r5, [r4, #42]	; 0x2a
}
 80174ce:	bd38      	pop	{r3, r4, r5, pc}
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80174d0:	4b03      	ldr	r3, [pc, #12]	; (80174e0 <tcp_update_rcv_ann_wnd+0x60>)
 80174d2:	f240 32b6 	movw	r2, #950	; 0x3b6
 80174d6:	4905      	ldr	r1, [pc, #20]	; (80174ec <tcp_update_rcv_ann_wnd+0x6c>)
 80174d8:	4803      	ldr	r0, [pc, #12]	; (80174e8 <tcp_update_rcv_ann_wnd+0x68>)
 80174da:	f009 fb6d 	bl	8020bb8 <iprintf>
 80174de:	e7f4      	b.n	80174ca <tcp_update_rcv_ann_wnd+0x4a>
 80174e0:	0803dd54 	.word	0x0803dd54
 80174e4:	0803e2e0 	.word	0x0803e2e0
 80174e8:	08026bb8 	.word	0x08026bb8
 80174ec:	0803e304 	.word	0x0803e304

080174f0 <tcp_recved>:
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80174f0:	b378      	cbz	r0, 8017552 <tcp_recved+0x62>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80174f2:	7d03      	ldrb	r3, [r0, #20]
 80174f4:	2b01      	cmp	r3, #1
{
 80174f6:	b570      	push	{r4, r5, r6, lr}
 80174f8:	4604      	mov	r4, r0
 80174fa:	460d      	mov	r5, r1
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80174fc:	d021      	beq.n	8017542 <tcp_recved+0x52>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80174fe:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8017500:	1959      	adds	r1, r3, r5
 8017502:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8017504:	428b      	cmp	r3, r1
 8017506:	d802      	bhi.n	801750e <tcp_recved+0x1e>
 8017508:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
 801750c:	d909      	bls.n	8017522 <tcp_recved+0x32>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801750e:	f44f 6306 	mov.w	r3, #2144	; 0x860
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8017512:	4620      	mov	r0, r4
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8017514:	8523      	strh	r3, [r4, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8017516:	f7ff ffb3 	bl	8017480 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801751a:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 801751e:	d207      	bcs.n	8017530 <tcp_recved+0x40>
}
 8017520:	bd70      	pop	{r4, r5, r6, pc}
    pcb->rcv_wnd = rcv_wnd;
 8017522:	8521      	strh	r1, [r4, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8017524:	4620      	mov	r0, r4
 8017526:	f7ff ffab 	bl	8017480 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801752a:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 801752e:	d3f7      	bcc.n	8017520 <tcp_recved+0x30>
    tcp_ack_now(pcb);
 8017530:	8b63      	ldrh	r3, [r4, #26]
    tcp_output(pcb);
 8017532:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 8017534:	f043 0302 	orr.w	r3, r3, #2
 8017538:	8363      	strh	r3, [r4, #26]
}
 801753a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 801753e:	f003 bdb9 	b.w	801b0b4 <tcp_output>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8017542:	4b07      	ldr	r3, [pc, #28]	; (8017560 <tcp_recved+0x70>)
 8017544:	f240 32d3 	movw	r2, #979	; 0x3d3
 8017548:	4906      	ldr	r1, [pc, #24]	; (8017564 <tcp_recved+0x74>)
 801754a:	4807      	ldr	r0, [pc, #28]	; (8017568 <tcp_recved+0x78>)
 801754c:	f009 fb34 	bl	8020bb8 <iprintf>
 8017550:	e7d5      	b.n	80174fe <tcp_recved+0xe>
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8017552:	4b03      	ldr	r3, [pc, #12]	; (8017560 <tcp_recved+0x70>)
 8017554:	f240 32cf 	movw	r2, #975	; 0x3cf
 8017558:	4904      	ldr	r1, [pc, #16]	; (801756c <tcp_recved+0x7c>)
 801755a:	4803      	ldr	r0, [pc, #12]	; (8017568 <tcp_recved+0x78>)
 801755c:	f009 bb2c 	b.w	8020bb8 <iprintf>
 8017560:	0803dd54 	.word	0x0803dd54
 8017564:	0803e08c 	.word	0x0803e08c
 8017568:	08026bb8 	.word	0x08026bb8
 801756c:	0803e074 	.word	0x0803e074

08017570 <tcp_seg_free>:
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  if (seg != NULL) {
 8017570:	b158      	cbz	r0, 801758a <tcp_seg_free+0x1a>
{
 8017572:	b510      	push	{r4, lr}
 8017574:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 8017576:	6840      	ldr	r0, [r0, #4]
 8017578:	b108      	cbz	r0, 801757e <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 801757a:	f7ff f9c5 	bl	8016908 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801757e:	4621      	mov	r1, r4
 8017580:	2004      	movs	r0, #4
  }
}
 8017582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 8017586:	f7fe bee5 	b.w	8016354 <memp_free>
 801758a:	4770      	bx	lr

0801758c <tcp_segs_free>:
  while (seg != NULL) {
 801758c:	b138      	cbz	r0, 801759e <tcp_segs_free+0x12>
{
 801758e:	b510      	push	{r4, lr}
    struct tcp_seg *next = seg->next;
 8017590:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 8017592:	f7ff ffed 	bl	8017570 <tcp_seg_free>
  while (seg != NULL) {
 8017596:	4620      	mov	r0, r4
 8017598:	2c00      	cmp	r4, #0
 801759a:	d1f9      	bne.n	8017590 <tcp_segs_free+0x4>
}
 801759c:	bd10      	pop	{r4, pc}
 801759e:	4770      	bx	lr

080175a0 <tcp_setprio>:
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 80175a0:	b108      	cbz	r0, 80175a6 <tcp_setprio+0x6>

  pcb->prio = prio;
 80175a2:	7541      	strb	r1, [r0, #21]
}
 80175a4:	4770      	bx	lr
  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 80175a6:	4b03      	ldr	r3, [pc, #12]	; (80175b4 <tcp_setprio+0x14>)
 80175a8:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 80175ac:	4902      	ldr	r1, [pc, #8]	; (80175b8 <tcp_setprio+0x18>)
 80175ae:	4803      	ldr	r0, [pc, #12]	; (80175bc <tcp_setprio+0x1c>)
 80175b0:	f009 bb02 	b.w	8020bb8 <iprintf>
 80175b4:	0803dd54 	.word	0x0803dd54
 80175b8:	0803e0f8 	.word	0x0803e0f8
 80175bc:	08026bb8 	.word	0x08026bb8

080175c0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80175c0:	b538      	push	{r3, r4, r5, lr}
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80175c2:	4605      	mov	r5, r0
 80175c4:	b1a0      	cbz	r0, 80175f0 <tcp_seg_copy+0x30>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80175c6:	f240 6284 	movw	r2, #1668	; 0x684
 80175ca:	490d      	ldr	r1, [pc, #52]	; (8017600 <tcp_seg_copy+0x40>)
 80175cc:	2004      	movs	r0, #4
 80175ce:	f7fe fe9d 	bl	801630c <memp_malloc_fn>
  if (cseg == NULL) {
 80175d2:	4604      	mov	r4, r0
 80175d4:	b150      	cbz	r0, 80175ec <tcp_seg_copy+0x2c>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80175d6:	6828      	ldr	r0, [r5, #0]
 80175d8:	6869      	ldr	r1, [r5, #4]
 80175da:	68aa      	ldr	r2, [r5, #8]
 80175dc:	68eb      	ldr	r3, [r5, #12]
 80175de:	6020      	str	r0, [r4, #0]
 80175e0:	6061      	str	r1, [r4, #4]
 80175e2:	60a2      	str	r2, [r4, #8]
 80175e4:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 80175e6:	6860      	ldr	r0, [r4, #4]
 80175e8:	f7ff fb02 	bl	8016bf0 <pbuf_ref>
  return cseg;
}
 80175ec:	4620      	mov	r0, r4
 80175ee:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80175f0:	4b03      	ldr	r3, [pc, #12]	; (8017600 <tcp_seg_copy+0x40>)
 80175f2:	f240 6282 	movw	r2, #1666	; 0x682
 80175f6:	4903      	ldr	r1, [pc, #12]	; (8017604 <tcp_seg_copy+0x44>)
 80175f8:	4803      	ldr	r0, [pc, #12]	; (8017608 <tcp_seg_copy+0x48>)
 80175fa:	f009 fadd 	bl	8020bb8 <iprintf>
 80175fe:	e7e2      	b.n	80175c6 <tcp_seg_copy+0x6>
 8017600:	0803dd54 	.word	0x0803dd54
 8017604:	0803e0b4 	.word	0x0803e0b4
 8017608:	08026bb8 	.word	0x08026bb8

0801760c <tcp_arg>:
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801760c:	b100      	cbz	r0, 8017610 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 801760e:	6101      	str	r1, [r0, #16]
  }
}
 8017610:	4770      	bx	lr
 8017612:	bf00      	nop

08017614 <tcp_recv>:
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8017614:	b140      	cbz	r0, 8017628 <tcp_recv+0x14>
{
 8017616:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8017618:	7d03      	ldrb	r3, [r0, #20]
 801761a:	4604      	mov	r4, r0
 801761c:	460d      	mov	r5, r1
 801761e:	2b01      	cmp	r3, #1
 8017620:	d003      	beq.n	801762a <tcp_recv+0x16>
    pcb->recv = recv;
 8017622:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  }
}
 8017626:	bd38      	pop	{r3, r4, r5, pc}
 8017628:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801762a:	4b05      	ldr	r3, [pc, #20]	; (8017640 <tcp_recv+0x2c>)
 801762c:	f240 72df 	movw	r2, #2015	; 0x7df
 8017630:	4904      	ldr	r1, [pc, #16]	; (8017644 <tcp_recv+0x30>)
 8017632:	4805      	ldr	r0, [pc, #20]	; (8017648 <tcp_recv+0x34>)
 8017634:	f009 fac0 	bl	8020bb8 <iprintf>
    pcb->recv = recv;
 8017638:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 801763c:	bd38      	pop	{r3, r4, r5, pc}
 801763e:	bf00      	nop
 8017640:	0803dd54 	.word	0x0803dd54
 8017644:	0803e030 	.word	0x0803e030
 8017648:	08026bb8 	.word	0x08026bb8

0801764c <tcp_sent>:
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801764c:	b140      	cbz	r0, 8017660 <tcp_sent+0x14>
{
 801764e:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8017650:	7d03      	ldrb	r3, [r0, #20]
 8017652:	4604      	mov	r4, r0
 8017654:	460d      	mov	r5, r1
 8017656:	2b01      	cmp	r3, #1
 8017658:	d003      	beq.n	8017662 <tcp_sent+0x16>
    pcb->sent = sent;
 801765a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  }
}
 801765e:	bd38      	pop	{r3, r4, r5, pc}
 8017660:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8017662:	4b05      	ldr	r3, [pc, #20]	; (8017678 <tcp_sent+0x2c>)
 8017664:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8017668:	4904      	ldr	r1, [pc, #16]	; (801767c <tcp_sent+0x30>)
 801766a:	4805      	ldr	r0, [pc, #20]	; (8017680 <tcp_sent+0x34>)
 801766c:	f009 faa4 	bl	8020bb8 <iprintf>
    pcb->sent = sent;
 8017670:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 8017674:	bd38      	pop	{r3, r4, r5, pc}
 8017676:	bf00      	nop
 8017678:	0803dd54 	.word	0x0803dd54
 801767c:	0803e0d0 	.word	0x0803e0d0
 8017680:	08026bb8 	.word	0x08026bb8

08017684 <tcp_err>:
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8017684:	b140      	cbz	r0, 8017698 <tcp_err+0x14>
{
 8017686:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8017688:	7d03      	ldrb	r3, [r0, #20]
 801768a:	4604      	mov	r4, r0
 801768c:	460d      	mov	r5, r1
 801768e:	2b01      	cmp	r3, #1
 8017690:	d003      	beq.n	801769a <tcp_err+0x16>
    pcb->errf = err;
 8017692:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
  }
}
 8017696:	bd38      	pop	{r3, r4, r5, pc}
 8017698:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801769a:	4b05      	ldr	r3, [pc, #20]	; (80176b0 <tcp_err+0x2c>)
 801769c:	f640 020d 	movw	r2, #2061	; 0x80d
 80176a0:	4904      	ldr	r1, [pc, #16]	; (80176b4 <tcp_err+0x30>)
 80176a2:	4805      	ldr	r0, [pc, #20]	; (80176b8 <tcp_err+0x34>)
 80176a4:	f009 fa88 	bl	8020bb8 <iprintf>
    pcb->errf = err;
 80176a8:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
 80176ac:	bd38      	pop	{r3, r4, r5, pc}
 80176ae:	bf00      	nop
 80176b0:	0803dd54 	.word	0x0803dd54
 80176b4:	0803de20 	.word	0x0803de20
 80176b8:	08026bb8 	.word	0x08026bb8

080176bc <tcp_accept>:
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80176bc:	b118      	cbz	r0, 80176c6 <tcp_accept+0xa>
 80176be:	7d03      	ldrb	r3, [r0, #20]
 80176c0:	2b01      	cmp	r3, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
    lpcb->accept = accept;
 80176c2:	bf08      	it	eq
 80176c4:	6181      	streq	r1, [r0, #24]
  }
}
 80176c6:	4770      	bx	lr

080176c8 <tcp_poll>:
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80176c8:	b1a8      	cbz	r0, 80176f6 <tcp_poll+0x2e>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80176ca:	7d03      	ldrb	r3, [r0, #20]
 80176cc:	2b01      	cmp	r3, #1
{
 80176ce:	b570      	push	{r4, r5, r6, lr}
 80176d0:	4604      	mov	r4, r0
 80176d2:	4615      	mov	r5, r2
 80176d4:	460e      	mov	r6, r1
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80176d6:	d003      	beq.n	80176e0 <tcp_poll+0x18>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80176d8:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80176dc:	7765      	strb	r5, [r4, #29]
}
 80176de:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80176e0:	4b08      	ldr	r3, [pc, #32]	; (8017704 <tcp_poll+0x3c>)
 80176e2:	f640 023e 	movw	r2, #2110	; 0x83e
 80176e6:	4908      	ldr	r1, [pc, #32]	; (8017708 <tcp_poll+0x40>)
 80176e8:	4808      	ldr	r0, [pc, #32]	; (801770c <tcp_poll+0x44>)
 80176ea:	f009 fa65 	bl	8020bb8 <iprintf>
  pcb->poll = poll;
 80176ee:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  pcb->pollinterval = interval;
 80176f2:	7765      	strb	r5, [r4, #29]
}
 80176f4:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80176f6:	4b03      	ldr	r3, [pc, #12]	; (8017704 <tcp_poll+0x3c>)
 80176f8:	f640 023d 	movw	r2, #2109	; 0x83d
 80176fc:	4904      	ldr	r1, [pc, #16]	; (8017710 <tcp_poll+0x48>)
 80176fe:	4803      	ldr	r0, [pc, #12]	; (801770c <tcp_poll+0x44>)
 8017700:	f009 ba5a 	b.w	8020bb8 <iprintf>
 8017704:	0803dd54 	.word	0x0803dd54
 8017708:	0803dfe8 	.word	0x0803dfe8
 801770c:	08026bb8 	.word	0x08026bb8
 8017710:	0803dfd0 	.word	0x0803dfd0

08017714 <tcp_pcb_purge>:
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8017714:	2800      	cmp	r0, #0
 8017716:	d02f      	beq.n	8017778 <tcp_pcb_purge+0x64>

  if (pcb->state != CLOSED &&
 8017718:	7d03      	ldrb	r3, [r0, #20]
      pcb->state != TIME_WAIT &&
 801771a:	2b0a      	cmp	r3, #10
 801771c:	d02b      	beq.n	8017776 <tcp_pcb_purge+0x62>
 801771e:	2b01      	cmp	r3, #1
 8017720:	d929      	bls.n	8017776 <tcp_pcb_purge+0x62>
{
 8017722:	b570      	push	{r4, r5, r6, lr}
 8017724:	4604      	mov	r4, r0

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8017726:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8017728:	b118      	cbz	r0, 8017732 <tcp_pcb_purge+0x1e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801772a:	f7ff f8ed 	bl	8016908 <pbuf_free>
      pcb->refused_data = NULL;
 801772e:	2300      	movs	r3, #0
 8017730:	67a3      	str	r3, [r4, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8017732:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8017734:	b130      	cbz	r0, 8017744 <tcp_pcb_purge+0x30>
    struct tcp_seg *next = seg->next;
 8017736:	6805      	ldr	r5, [r0, #0]
    tcp_seg_free(seg);
 8017738:	f7ff ff1a 	bl	8017570 <tcp_seg_free>
  while (seg != NULL) {
 801773c:	4628      	mov	r0, r5
 801773e:	2d00      	cmp	r5, #0
 8017740:	d1f9      	bne.n	8017736 <tcp_pcb_purge+0x22>
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
  if (pcb->ooseq) {
    tcp_segs_free(pcb->ooseq);
    pcb->ooseq = NULL;
 8017742:	6765      	str	r5, [r4, #116]	; 0x74
    pcb->rtime = -1;
 8017744:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tcp_segs_free(pcb->unsent);
 8017748:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    pcb->rtime = -1;
 801774a:	8623      	strh	r3, [r4, #48]	; 0x30
  while (seg != NULL) {
 801774c:	b128      	cbz	r0, 801775a <tcp_pcb_purge+0x46>
    struct tcp_seg *next = seg->next;
 801774e:	6805      	ldr	r5, [r0, #0]
    tcp_seg_free(seg);
 8017750:	f7ff ff0e 	bl	8017570 <tcp_seg_free>
  while (seg != NULL) {
 8017754:	4628      	mov	r0, r5
 8017756:	2d00      	cmp	r5, #0
 8017758:	d1f9      	bne.n	801774e <tcp_pcb_purge+0x3a>
    tcp_segs_free(pcb->unacked);
 801775a:	6f20      	ldr	r0, [r4, #112]	; 0x70
  while (seg != NULL) {
 801775c:	b128      	cbz	r0, 801776a <tcp_pcb_purge+0x56>
    struct tcp_seg *next = seg->next;
 801775e:	6805      	ldr	r5, [r0, #0]
    tcp_seg_free(seg);
 8017760:	f7ff ff06 	bl	8017570 <tcp_seg_free>
  while (seg != NULL) {
 8017764:	4628      	mov	r0, r5
 8017766:	2d00      	cmp	r5, #0
 8017768:	d1f9      	bne.n	801775e <tcp_pcb_purge+0x4a>
    pcb->unacked = pcb->unsent = NULL;
 801776a:	2300      	movs	r3, #0
 801776c:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
    pcb->unsent_oversize = 0;
 8017770:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
}
 8017774:	bd70      	pop	{r4, r5, r6, pc}
 8017776:	4770      	bx	lr
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8017778:	4b03      	ldr	r3, [pc, #12]	; (8017788 <tcp_pcb_purge+0x74>)
 801777a:	f640 0251 	movw	r2, #2129	; 0x851
 801777e:	4903      	ldr	r1, [pc, #12]	; (801778c <tcp_pcb_purge+0x78>)
 8017780:	4803      	ldr	r0, [pc, #12]	; (8017790 <tcp_pcb_purge+0x7c>)
 8017782:	f009 ba19 	b.w	8020bb8 <iprintf>
 8017786:	bf00      	nop
 8017788:	0803dd54 	.word	0x0803dd54
 801778c:	0803df24 	.word	0x0803df24
 8017790:	08026bb8 	.word	0x08026bb8

08017794 <tcp_slowtmr>:
{
 8017794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 8017798:	4e9d      	ldr	r6, [pc, #628]	; (8017a10 <tcp_slowtmr+0x27c>)
{
 801779a:	b087      	sub	sp, #28
  ++tcp_timer_ctr;
 801779c:	f8df 829c 	ldr.w	r8, [pc, #668]	; 8017a3c <tcp_slowtmr+0x2a8>
  ++tcp_ticks;
 80177a0:	6832      	ldr	r2, [r6, #0]
  ++tcp_timer_ctr;
 80177a2:	f898 3000 	ldrb.w	r3, [r8]
  ++tcp_ticks;
 80177a6:	3201      	adds	r2, #1
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80177a8:	f8df 9294 	ldr.w	r9, [pc, #660]	; 8017a40 <tcp_slowtmr+0x2ac>
  ++tcp_timer_ctr;
 80177ac:	3301      	adds	r3, #1
  ++tcp_ticks;
 80177ae:	6032      	str	r2, [r6, #0]
  ++tcp_timer_ctr;
 80177b0:	f888 3000 	strb.w	r3, [r8]
  pcb = tcp_active_pcbs;
 80177b4:	4b97      	ldr	r3, [pc, #604]	; (8017a14 <tcp_slowtmr+0x280>)
 80177b6:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 80177b8:	2c00      	cmp	r4, #0
 80177ba:	d07f      	beq.n	80178bc <tcp_slowtmr+0x128>
  prev = NULL;
 80177bc:	2700      	movs	r7, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80177be:	7d23      	ldrb	r3, [r4, #20]
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	f000 80f6 	beq.w	80179b2 <tcp_slowtmr+0x21e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80177c6:	2b01      	cmp	r3, #1
 80177c8:	f000 80fe 	beq.w	80179c8 <tcp_slowtmr+0x234>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80177cc:	2b0a      	cmp	r3, #10
 80177ce:	f000 8106 	beq.w	80179de <tcp_slowtmr+0x24a>
    if (pcb->last_timer == tcp_timer_ctr) {
 80177d2:	f898 2000 	ldrb.w	r2, [r8]
 80177d6:	7fa3      	ldrb	r3, [r4, #30]
 80177d8:	4293      	cmp	r3, r2
 80177da:	f000 810d 	beq.w	80179f8 <tcp_slowtmr+0x264>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80177de:	7d23      	ldrb	r3, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 80177e0:	77a2      	strb	r2, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80177e2:	2b02      	cmp	r3, #2
 80177e4:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 80177e8:	f000 810c 	beq.w	8017a04 <tcp_slowtmr+0x270>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80177ec:	2a0b      	cmp	r2, #11
 80177ee:	f240 80c7 	bls.w	8017980 <tcp_slowtmr+0x1ec>
      ++pcb_remove;
 80177f2:	2501      	movs	r5, #1
    if (pcb->state == FIN_WAIT_2) {
 80177f4:	2b06      	cmp	r3, #6
 80177f6:	f000 80b6 	beq.w	8017966 <tcp_slowtmr+0x1d2>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80177fa:	f894 a009 	ldrb.w	sl, [r4, #9]
 80177fe:	f01a 0a08 	ands.w	sl, sl, #8
 8017802:	d01d      	beq.n	8017840 <tcp_slowtmr+0xac>
 8017804:	2b04      	cmp	r3, #4
 8017806:	d007      	beq.n	8017818 <tcp_slowtmr+0x84>
 8017808:	f1a3 0307 	sub.w	r3, r3, #7
 801780c:	fab3 f383 	clz	r3, r3
 8017810:	095b      	lsrs	r3, r3, #5
 8017812:	2b00      	cmp	r3, #0
 8017814:	f000 80b1 	beq.w	801797a <tcp_slowtmr+0x1e6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017818:	6832      	ldr	r2, [r6, #0]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801781a:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 801781e:	4b7e      	ldr	r3, [pc, #504]	; (8017a18 <tcp_slowtmr+0x284>)
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017820:	9205      	str	r2, [sp, #20]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8017822:	4403      	add	r3, r0
 8017824:	4a7d      	ldr	r2, [pc, #500]	; (8017a1c <tcp_slowtmr+0x288>)
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017826:	6a21      	ldr	r1, [r4, #32]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8017828:	fba2 2303 	umull	r2, r3, r2, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801782c:	9a05      	ldr	r2, [sp, #20]
 801782e:	1a52      	subs	r2, r2, r1
 8017830:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8017834:	f240 8157 	bls.w	8017ae6 <tcp_slowtmr+0x352>
        ++pcb_remove;
 8017838:	3501      	adds	r5, #1
        ++pcb_reset;
 801783a:	f04f 0a01 	mov.w	sl, #1
        ++pcb_remove;
 801783e:	b2ed      	uxtb	r5, r5
    if (pcb->ooseq != NULL &&
 8017840:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8017842:	b148      	cbz	r0, 8017858 <tcp_slowtmr+0xc4>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8017844:	6833      	ldr	r3, [r6, #0]
 8017846:	6a22      	ldr	r2, [r4, #32]
 8017848:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 801784c:	1a9b      	subs	r3, r3, r2
 801784e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    if (pcb->ooseq != NULL &&
 8017852:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
 8017856:	d252      	bcs.n	80178fe <tcp_slowtmr+0x16a>
    if (pcb->state == SYN_RCVD) {
 8017858:	7d23      	ldrb	r3, [r4, #20]
 801785a:	2b03      	cmp	r3, #3
 801785c:	d05b      	beq.n	8017916 <tcp_slowtmr+0x182>
    if (pcb->state == LAST_ACK) {
 801785e:	2b09      	cmp	r3, #9
 8017860:	d15e      	bne.n	8017920 <tcp_slowtmr+0x18c>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8017862:	6833      	ldr	r3, [r6, #0]
 8017864:	6a22      	ldr	r2, [r4, #32]
 8017866:	1a9b      	subs	r3, r3, r2
 8017868:	2bf0      	cmp	r3, #240	; 0xf0
 801786a:	d959      	bls.n	8017920 <tcp_slowtmr+0x18c>
      tcp_pcb_purge(pcb);
 801786c:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 801786e:	f8d4 b090 	ldr.w	fp, [r4, #144]	; 0x90
      tcp_pcb_purge(pcb);
 8017872:	f7ff ff4f 	bl	8017714 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8017876:	4b67      	ldr	r3, [pc, #412]	; (8017a14 <tcp_slowtmr+0x280>)
 8017878:	681b      	ldr	r3, [r3, #0]
      if (prev != NULL) {
 801787a:	2f00      	cmp	r7, #0
 801787c:	f000 8197 	beq.w	8017bae <tcp_slowtmr+0x41a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8017880:	42a3      	cmp	r3, r4
 8017882:	f000 81aa 	beq.w	8017bda <tcp_slowtmr+0x446>
        prev->next = pcb->next;
 8017886:	68e3      	ldr	r3, [r4, #12]
 8017888:	60fb      	str	r3, [r7, #12]
      if (pcb_reset) {
 801788a:	f1ba 0f00 	cmp.w	sl, #0
 801788e:	f040 8157 	bne.w	8017b40 <tcp_slowtmr+0x3ac>
      tcp_free(pcb2);
 8017892:	4620      	mov	r0, r4
      tcp_active_pcbs_changed = 0;
 8017894:	4d62      	ldr	r5, [pc, #392]	; (8017a20 <tcp_slowtmr+0x28c>)
      pcb = pcb->next;
 8017896:	e9d4 4a03 	ldrd	r4, sl, [r4, #12]
      tcp_free(pcb2);
 801789a:	f7ff fd01 	bl	80172a0 <tcp_free>
      tcp_active_pcbs_changed = 0;
 801789e:	2300      	movs	r3, #0
 80178a0:	702b      	strb	r3, [r5, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80178a2:	f1bb 0f00 	cmp.w	fp, #0
 80178a6:	d007      	beq.n	80178b8 <tcp_slowtmr+0x124>
 80178a8:	4650      	mov	r0, sl
 80178aa:	f06f 010c 	mvn.w	r1, #12
 80178ae:	47d8      	blx	fp
      if (tcp_active_pcbs_changed) {
 80178b0:	782b      	ldrb	r3, [r5, #0]
 80178b2:	2b00      	cmp	r3, #0
 80178b4:	f47f af7e 	bne.w	80177b4 <tcp_slowtmr+0x20>
  while (pcb != NULL) {
 80178b8:	2c00      	cmp	r4, #0
 80178ba:	d180      	bne.n	80177be <tcp_slowtmr+0x2a>
  pcb = tcp_tw_pcbs;
 80178bc:	4f59      	ldr	r7, [pc, #356]	; (8017a24 <tcp_slowtmr+0x290>)
 80178be:	683c      	ldr	r4, [r7, #0]
  while (pcb != NULL) {
 80178c0:	b1d4      	cbz	r4, 80178f8 <tcp_slowtmr+0x164>
  prev = NULL;
 80178c2:	2500      	movs	r5, #0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80178c4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8017a40 <tcp_slowtmr+0x2ac>
 80178c8:	f8df a178 	ldr.w	sl, [pc, #376]	; 8017a44 <tcp_slowtmr+0x2b0>
 80178cc:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8017a2c <tcp_slowtmr+0x298>
 80178d0:	7d23      	ldrb	r3, [r4, #20]
 80178d2:	2b0a      	cmp	r3, #10
 80178d4:	d006      	beq.n	80178e4 <tcp_slowtmr+0x150>
 80178d6:	464b      	mov	r3, r9
 80178d8:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80178dc:	4651      	mov	r1, sl
 80178de:	4640      	mov	r0, r8
 80178e0:	f009 f96a 	bl	8020bb8 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80178e4:	6833      	ldr	r3, [r6, #0]
 80178e6:	6a22      	ldr	r2, [r4, #32]
 80178e8:	1a9b      	subs	r3, r3, r2
 80178ea:	2bf0      	cmp	r3, #240	; 0xf0
 80178ec:	f200 8114 	bhi.w	8017b18 <tcp_slowtmr+0x384>
      pcb = pcb->next;
 80178f0:	4625      	mov	r5, r4
 80178f2:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 80178f4:	2c00      	cmp	r4, #0
 80178f6:	d1eb      	bne.n	80178d0 <tcp_slowtmr+0x13c>
}
 80178f8:	b007      	add	sp, #28
 80178fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    struct tcp_seg *next = seg->next;
 80178fe:	f8d0 b000 	ldr.w	fp, [r0]
    tcp_seg_free(seg);
 8017902:	f7ff fe35 	bl	8017570 <tcp_seg_free>
  while (seg != NULL) {
 8017906:	4658      	mov	r0, fp
 8017908:	2800      	cmp	r0, #0
 801790a:	d1f8      	bne.n	80178fe <tcp_slowtmr+0x16a>
    if (pcb->state == SYN_RCVD) {
 801790c:	7d23      	ldrb	r3, [r4, #20]
    pcb->ooseq = NULL;
 801790e:	f8c4 b074 	str.w	fp, [r4, #116]	; 0x74
    if (pcb->state == SYN_RCVD) {
 8017912:	2b03      	cmp	r3, #3
 8017914:	d1a3      	bne.n	801785e <tcp_slowtmr+0xca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017916:	6833      	ldr	r3, [r6, #0]
 8017918:	6a22      	ldr	r2, [r4, #32]
 801791a:	1a9b      	subs	r3, r3, r2
 801791c:	2b28      	cmp	r3, #40	; 0x28
 801791e:	d8a5      	bhi.n	801786c <tcp_slowtmr+0xd8>
    if (pcb_remove) {
 8017920:	2d00      	cmp	r5, #0
 8017922:	d1a3      	bne.n	801786c <tcp_slowtmr+0xd8>
      ++prev->polltmr;
 8017924:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8017926:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 8017928:	3301      	adds	r3, #1
      pcb = pcb->next;
 801792a:	f8d4 a00c 	ldr.w	sl, [r4, #12]
      ++prev->polltmr;
 801792e:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 8017930:	429a      	cmp	r2, r3
      ++prev->polltmr;
 8017932:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8017934:	d811      	bhi.n	801795a <tcp_slowtmr+0x1c6>
        tcp_active_pcbs_changed = 0;
 8017936:	4f3a      	ldr	r7, [pc, #232]	; (8017a20 <tcp_slowtmr+0x28c>)
        TCP_EVENT_POLL(prev, err);
 8017938:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        prev->polltmr = 0;
 801793c:	7725      	strb	r5, [r4, #28]
        tcp_active_pcbs_changed = 0;
 801793e:	703d      	strb	r5, [r7, #0]
        TCP_EVENT_POLL(prev, err);
 8017940:	2b00      	cmp	r3, #0
 8017942:	f000 810a 	beq.w	8017b5a <tcp_slowtmr+0x3c6>
 8017946:	4621      	mov	r1, r4
 8017948:	6920      	ldr	r0, [r4, #16]
 801794a:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 801794c:	783b      	ldrb	r3, [r7, #0]
 801794e:	2b00      	cmp	r3, #0
 8017950:	f47f af30 	bne.w	80177b4 <tcp_slowtmr+0x20>
        if (err == ERR_OK) {
 8017954:	2800      	cmp	r0, #0
 8017956:	f000 8100 	beq.w	8017b5a <tcp_slowtmr+0x3c6>
 801795a:	4627      	mov	r7, r4
      pcb = pcb->next;
 801795c:	4654      	mov	r4, sl
  while (pcb != NULL) {
 801795e:	2c00      	cmp	r4, #0
 8017960:	f47f af2d 	bne.w	80177be <tcp_slowtmr+0x2a>
 8017964:	e7aa      	b.n	80178bc <tcp_slowtmr+0x128>
      if (pcb->flags & TF_RXCLOSED) {
 8017966:	8b63      	ldrh	r3, [r4, #26]
 8017968:	06db      	lsls	r3, r3, #27
 801796a:	d506      	bpl.n	801797a <tcp_slowtmr+0x1e6>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801796c:	6833      	ldr	r3, [r6, #0]
 801796e:	6a22      	ldr	r2, [r4, #32]
 8017970:	1a9b      	subs	r3, r3, r2
 8017972:	2b28      	cmp	r3, #40	; 0x28
 8017974:	d901      	bls.n	801797a <tcp_slowtmr+0x1e6>
          ++pcb_remove;
 8017976:	3501      	adds	r5, #1
 8017978:	b2ed      	uxtb	r5, r5
    pcb_reset = 0;
 801797a:	f04f 0a00 	mov.w	sl, #0
 801797e:	e75f      	b.n	8017840 <tcp_slowtmr+0xac>
      if (pcb->persist_backoff > 0) {
 8017980:	f894 5099 	ldrb.w	r5, [r4, #153]	; 0x99
 8017984:	2d00      	cmp	r5, #0
 8017986:	d05f      	beq.n	8017a48 <tcp_slowtmr+0x2b4>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8017988:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801798a:	b133      	cbz	r3, 801799a <tcp_slowtmr+0x206>
 801798c:	464b      	mov	r3, r9
 801798e:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8017992:	4925      	ldr	r1, [pc, #148]	; (8017a28 <tcp_slowtmr+0x294>)
 8017994:	4825      	ldr	r0, [pc, #148]	; (8017a2c <tcp_slowtmr+0x298>)
 8017996:	f009 f90f 	bl	8020bb8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801799a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801799c:	2b00      	cmp	r3, #0
 801799e:	f000 8131 	beq.w	8017c04 <tcp_slowtmr+0x470>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80179a2:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 80179a6:	2b0b      	cmp	r3, #11
 80179a8:	f240 80e0 	bls.w	8017b6c <tcp_slowtmr+0x3d8>
 80179ac:	7d23      	ldrb	r3, [r4, #20]
          ++pcb_remove; /* max probes reached */
 80179ae:	2501      	movs	r5, #1
 80179b0:	e720      	b.n	80177f4 <tcp_slowtmr+0x60>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80179b2:	464b      	mov	r3, r9
 80179b4:	f240 42be 	movw	r2, #1214	; 0x4be
 80179b8:	491d      	ldr	r1, [pc, #116]	; (8017a30 <tcp_slowtmr+0x29c>)
 80179ba:	481c      	ldr	r0, [pc, #112]	; (8017a2c <tcp_slowtmr+0x298>)
 80179bc:	f009 f8fc 	bl	8020bb8 <iprintf>
 80179c0:	7d23      	ldrb	r3, [r4, #20]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80179c2:	2b01      	cmp	r3, #1
 80179c4:	f47f af02 	bne.w	80177cc <tcp_slowtmr+0x38>
 80179c8:	464b      	mov	r3, r9
 80179ca:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80179ce:	4919      	ldr	r1, [pc, #100]	; (8017a34 <tcp_slowtmr+0x2a0>)
 80179d0:	4816      	ldr	r0, [pc, #88]	; (8017a2c <tcp_slowtmr+0x298>)
 80179d2:	f009 f8f1 	bl	8020bb8 <iprintf>
 80179d6:	7d23      	ldrb	r3, [r4, #20]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80179d8:	2b0a      	cmp	r3, #10
 80179da:	f47f aefa 	bne.w	80177d2 <tcp_slowtmr+0x3e>
 80179de:	464b      	mov	r3, r9
 80179e0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80179e4:	4914      	ldr	r1, [pc, #80]	; (8017a38 <tcp_slowtmr+0x2a4>)
 80179e6:	4811      	ldr	r0, [pc, #68]	; (8017a2c <tcp_slowtmr+0x298>)
 80179e8:	f009 f8e6 	bl	8020bb8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80179ec:	f898 2000 	ldrb.w	r2, [r8]
 80179f0:	7fa3      	ldrb	r3, [r4, #30]
 80179f2:	4293      	cmp	r3, r2
 80179f4:	f47f aef3 	bne.w	80177de <tcp_slowtmr+0x4a>
      continue;
 80179f8:	4627      	mov	r7, r4
      pcb = pcb->next;
 80179fa:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 80179fc:	2c00      	cmp	r4, #0
 80179fe:	f47f aede 	bne.w	80177be <tcp_slowtmr+0x2a>
 8017a02:	e75b      	b.n	80178bc <tcp_slowtmr+0x128>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8017a04:	2a05      	cmp	r2, #5
 8017a06:	d9bb      	bls.n	8017980 <tcp_slowtmr+0x1ec>
    pcb_reset = 0;
 8017a08:	f04f 0a00 	mov.w	sl, #0
      ++pcb_remove;
 8017a0c:	2501      	movs	r5, #1
 8017a0e:	e717      	b.n	8017840 <tcp_slowtmr+0xac>
 8017a10:	2003e2dc 	.word	0x2003e2dc
 8017a14:	2003e2d8 	.word	0x2003e2d8
 8017a18:	000a4cb8 	.word	0x000a4cb8
 8017a1c:	10624dd3 	.word	0x10624dd3
 8017a20:	2003e2d4 	.word	0x2003e2d4
 8017a24:	2003e2e8 	.word	0x2003e2e8
 8017a28:	0803e19c 	.word	0x0803e19c
 8017a2c:	08026bb8 	.word	0x08026bb8
 8017a30:	0803e114 	.word	0x0803e114
 8017a34:	0803e140 	.word	0x0803e140
 8017a38:	0803e16c 	.word	0x0803e16c
 8017a3c:	2002a3f5 	.word	0x2002a3f5
 8017a40:	0803dd54 	.word	0x0803dd54
 8017a44:	0803e260 	.word	0x0803e260
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8017a48:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 8017a4c:	2a00      	cmp	r2, #0
 8017a4e:	db06      	blt.n	8017a5e <tcp_slowtmr+0x2ca>
 8017a50:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8017a54:	428a      	cmp	r2, r1
 8017a56:	d002      	beq.n	8017a5e <tcp_slowtmr+0x2ca>
          ++pcb->rtime;
 8017a58:	3201      	adds	r2, #1
 8017a5a:	b212      	sxth	r2, r2
 8017a5c:	8622      	strh	r2, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 8017a5e:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 8017a62:	4291      	cmp	r1, r2
 8017a64:	f73f aec6 	bgt.w	80177f4 <tcp_slowtmr+0x60>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8017a68:	4620      	mov	r0, r4
 8017a6a:	f003 f9e9 	bl	801ae40 <tcp_rexmit_rto_prepare>
 8017a6e:	2800      	cmp	r0, #0
 8017a70:	f040 80d0 	bne.w	8017c14 <tcp_slowtmr+0x480>
 8017a74:	7d23      	ldrb	r3, [r4, #20]
            if (pcb->state != SYN_SENT) {
 8017a76:	2b02      	cmp	r3, #2
 8017a78:	d016      	beq.n	8017aa8 <tcp_slowtmr+0x314>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8017a7a:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8017a7e:	f647 71ff 	movw	r1, #32767	; 0x7fff
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8017a82:	f8df c1f8 	ldr.w	ip, [pc, #504]	; 8017c7c <tcp_slowtmr+0x4e8>
 8017a86:	2a0c      	cmp	r2, #12
 8017a88:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 8017a8c:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 8017a90:	bf28      	it	cs
 8017a92:	220c      	movcs	r2, #12
 8017a94:	eb03 03e0 	add.w	r3, r3, r0, asr #3
 8017a98:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017a9c:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8017a9e:	428b      	cmp	r3, r1
 8017aa0:	bfa8      	it	ge
 8017aa2:	460b      	movge	r3, r1
 8017aa4:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8017aa8:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
            pcb->rtime = 0;
 8017aac:	2200      	movs	r2, #0
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8017aae:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8017ab2:	8e61      	ldrh	r1, [r4, #50]	; 0x32
            pcb->ssthresh = eff_wnd >> 1;
 8017ab4:	4283      	cmp	r3, r0
            pcb->rtime = 0;
 8017ab6:	8622      	strh	r2, [r4, #48]	; 0x30
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8017ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
            pcb->cwnd = pcb->mss;
 8017abc:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
            pcb->ssthresh = eff_wnd >> 1;
 8017ac0:	bf28      	it	cs
 8017ac2:	4603      	movcs	r3, r0
            tcp_rexmit_rto_commit(pcb);
 8017ac4:	4620      	mov	r0, r4
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8017ac6:	b292      	uxth	r2, r2
            pcb->ssthresh = eff_wnd >> 1;
 8017ac8:	085b      	lsrs	r3, r3, #1
 8017aca:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8017ace:	4293      	cmp	r3, r2
            pcb->bytes_acked = 0;
 8017ad0:	f04f 0300 	mov.w	r3, #0
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8017ad4:	bf38      	it	cc
 8017ad6:	f8a4 204a 	strhcc.w	r2, [r4, #74]	; 0x4a
            pcb->bytes_acked = 0;
 8017ada:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
 8017ade:	f003 fce1 	bl	801b4a4 <tcp_rexmit_rto_commit>
 8017ae2:	7d23      	ldrb	r3, [r4, #20]
 8017ae4:	e686      	b.n	80177f4 <tcp_slowtmr+0x60>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8017ae6:	495b      	ldr	r1, [pc, #364]	; (8017c54 <tcp_slowtmr+0x4c0>)
 8017ae8:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 8017aec:	fb01 0303 	mla	r3, r1, r3, r0
                 / TCP_SLOW_INTERVAL) {
 8017af0:	4959      	ldr	r1, [pc, #356]	; (8017c58 <tcp_slowtmr+0x4c4>)
 8017af2:	fba1 1303 	umull	r1, r3, r1, r3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017af6:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8017afa:	f67f af3e 	bls.w	801797a <tcp_slowtmr+0x1e6>
        err = tcp_keepalive(pcb);
 8017afe:	4620      	mov	r0, r4
 8017b00:	f003 fd0a 	bl	801b518 <tcp_keepalive>
        if (err == ERR_OK) {
 8017b04:	2800      	cmp	r0, #0
 8017b06:	f47f af38 	bne.w	801797a <tcp_slowtmr+0x1e6>
          pcb->keep_cnt_sent++;
 8017b0a:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
    pcb_reset = 0;
 8017b0e:	4682      	mov	sl, r0
          pcb->keep_cnt_sent++;
 8017b10:	3301      	adds	r3, #1
 8017b12:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
 8017b16:	e693      	b.n	8017840 <tcp_slowtmr+0xac>
      tcp_pcb_purge(pcb);
 8017b18:	4620      	mov	r0, r4
 8017b1a:	f7ff fdfb 	bl	8017714 <tcp_pcb_purge>
      if (prev != NULL) {
 8017b1e:	2d00      	cmp	r5, #0
 8017b20:	d063      	beq.n	8017bea <tcp_slowtmr+0x456>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8017b22:	683b      	ldr	r3, [r7, #0]
 8017b24:	42a3      	cmp	r3, r4
 8017b26:	f000 8086 	beq.w	8017c36 <tcp_slowtmr+0x4a2>
        prev->next = pcb->next;
 8017b2a:	68e3      	ldr	r3, [r4, #12]
 8017b2c:	60eb      	str	r3, [r5, #12]
 8017b2e:	68e3      	ldr	r3, [r4, #12]
      tcp_free(pcb2);
 8017b30:	4620      	mov	r0, r4
      pcb = pcb->next;
 8017b32:	461c      	mov	r4, r3
      tcp_free(pcb2);
 8017b34:	f7ff fbb4 	bl	80172a0 <tcp_free>
  while (pcb != NULL) {
 8017b38:	2c00      	cmp	r4, #0
 8017b3a:	f47f aec9 	bne.w	80178d0 <tcp_slowtmr+0x13c>
 8017b3e:	e6db      	b.n	80178f8 <tcp_slowtmr+0x164>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8017b40:	8b25      	ldrh	r5, [r4, #24]
 8017b42:	1d20      	adds	r0, r4, #4
 8017b44:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8017b46:	4623      	mov	r3, r4
 8017b48:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8017b4a:	9502      	str	r5, [sp, #8]
 8017b4c:	8ae5      	ldrh	r5, [r4, #22]
 8017b4e:	9000      	str	r0, [sp, #0]
 8017b50:	4620      	mov	r0, r4
 8017b52:	9501      	str	r5, [sp, #4]
 8017b54:	f003 fa32 	bl	801afbc <tcp_rst>
 8017b58:	e69b      	b.n	8017892 <tcp_slowtmr+0xfe>
          tcp_output(prev);
 8017b5a:	4620      	mov	r0, r4
 8017b5c:	4627      	mov	r7, r4
      pcb = pcb->next;
 8017b5e:	4654      	mov	r4, sl
          tcp_output(prev);
 8017b60:	f003 faa8 	bl	801b0b4 <tcp_output>
  while (pcb != NULL) {
 8017b64:	2c00      	cmp	r4, #0
 8017b66:	f47f ae2a 	bne.w	80177be <tcp_slowtmr+0x2a>
 8017b6a:	e6a7      	b.n	80178bc <tcp_slowtmr+0x128>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8017b6c:	4a3b      	ldr	r2, [pc, #236]	; (8017c5c <tcp_slowtmr+0x4c8>)
 8017b6e:	f894 1099 	ldrb.w	r1, [r4, #153]	; 0x99
          if (pcb->persist_cnt < backoff_cnt) {
 8017b72:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8017b76:	440a      	add	r2, r1
 8017b78:	f812 2c01 	ldrb.w	r2, [r2, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 8017b7c:	4293      	cmp	r3, r2
 8017b7e:	d323      	bcc.n	8017bc8 <tcp_slowtmr+0x434>
            if (pcb->snd_wnd == 0) {
 8017b80:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8017b84:	2d00      	cmp	r5, #0
 8017b86:	d04f      	beq.n	8017c28 <tcp_slowtmr+0x494>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8017b88:	4629      	mov	r1, r5
 8017b8a:	4620      	mov	r0, r4
 8017b8c:	f002 ff9a 	bl	801aac4 <tcp_split_unsent_seg>
 8017b90:	2800      	cmp	r0, #0
 8017b92:	d058      	beq.n	8017c46 <tcp_slowtmr+0x4b2>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8017b94:	f894 2099 	ldrb.w	r2, [r4, #153]	; 0x99
              pcb->persist_cnt = 0;
 8017b98:	2500      	movs	r5, #0
 8017b9a:	7d23      	ldrb	r3, [r4, #20]
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8017b9c:	2a06      	cmp	r2, #6
              pcb->persist_cnt = 0;
 8017b9e:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8017ba2:	f63f ae27 	bhi.w	80177f4 <tcp_slowtmr+0x60>
                pcb->persist_backoff++;
 8017ba6:	3201      	adds	r2, #1
 8017ba8:	f884 2099 	strb.w	r2, [r4, #153]	; 0x99
 8017bac:	e622      	b.n	80177f4 <tcp_slowtmr+0x60>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8017bae:	42a3      	cmp	r3, r4
 8017bb0:	d006      	beq.n	8017bc0 <tcp_slowtmr+0x42c>
 8017bb2:	464b      	mov	r3, r9
 8017bb4:	f240 5271 	movw	r2, #1393	; 0x571
 8017bb8:	4929      	ldr	r1, [pc, #164]	; (8017c60 <tcp_slowtmr+0x4cc>)
 8017bba:	482a      	ldr	r0, [pc, #168]	; (8017c64 <tcp_slowtmr+0x4d0>)
 8017bbc:	f008 fffc 	bl	8020bb8 <iprintf>
        tcp_active_pcbs = pcb->next;
 8017bc0:	68e3      	ldr	r3, [r4, #12]
 8017bc2:	4a29      	ldr	r2, [pc, #164]	; (8017c68 <tcp_slowtmr+0x4d4>)
 8017bc4:	6013      	str	r3, [r2, #0]
 8017bc6:	e660      	b.n	801788a <tcp_slowtmr+0xf6>
            pcb->persist_cnt++;
 8017bc8:	3301      	adds	r3, #1
 8017bca:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 8017bcc:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 8017bce:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8017bd2:	d2d5      	bcs.n	8017b80 <tcp_slowtmr+0x3ec>
 8017bd4:	7d23      	ldrb	r3, [r4, #20]
    pcb_remove = 0;
 8017bd6:	2500      	movs	r5, #0
 8017bd8:	e60c      	b.n	80177f4 <tcp_slowtmr+0x60>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8017bda:	464b      	mov	r3, r9
 8017bdc:	f240 526d 	movw	r2, #1389	; 0x56d
 8017be0:	4922      	ldr	r1, [pc, #136]	; (8017c6c <tcp_slowtmr+0x4d8>)
 8017be2:	4820      	ldr	r0, [pc, #128]	; (8017c64 <tcp_slowtmr+0x4d0>)
 8017be4:	f008 ffe8 	bl	8020bb8 <iprintf>
 8017be8:	e64d      	b.n	8017886 <tcp_slowtmr+0xf2>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8017bea:	683b      	ldr	r3, [r7, #0]
 8017bec:	42a3      	cmp	r3, r4
 8017bee:	d006      	beq.n	8017bfe <tcp_slowtmr+0x46a>
 8017bf0:	464b      	mov	r3, r9
 8017bf2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8017bf6:	491e      	ldr	r1, [pc, #120]	; (8017c70 <tcp_slowtmr+0x4dc>)
 8017bf8:	4640      	mov	r0, r8
 8017bfa:	f008 ffdd 	bl	8020bb8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8017bfe:	68e3      	ldr	r3, [r4, #12]
 8017c00:	603b      	str	r3, [r7, #0]
 8017c02:	e795      	b.n	8017b30 <tcp_slowtmr+0x39c>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8017c04:	464b      	mov	r3, r9
 8017c06:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8017c0a:	491a      	ldr	r1, [pc, #104]	; (8017c74 <tcp_slowtmr+0x4e0>)
 8017c0c:	4815      	ldr	r0, [pc, #84]	; (8017c64 <tcp_slowtmr+0x4d0>)
 8017c0e:	f008 ffd3 	bl	8020bb8 <iprintf>
 8017c12:	e6c6      	b.n	80179a2 <tcp_slowtmr+0x20e>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8017c14:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8017c16:	7d23      	ldrb	r3, [r4, #20]
 8017c18:	2a00      	cmp	r2, #0
 8017c1a:	f47f adeb 	bne.w	80177f4 <tcp_slowtmr+0x60>
 8017c1e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8017c20:	2a00      	cmp	r2, #0
 8017c22:	f47f af28 	bne.w	8017a76 <tcp_slowtmr+0x2e2>
 8017c26:	e5e5      	b.n	80177f4 <tcp_slowtmr+0x60>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8017c28:	4620      	mov	r0, r4
 8017c2a:	f003 fc9f 	bl	801b56c <tcp_zero_window_probe>
 8017c2e:	2800      	cmp	r0, #0
 8017c30:	d0b0      	beq.n	8017b94 <tcp_slowtmr+0x400>
 8017c32:	7d23      	ldrb	r3, [r4, #20]
 8017c34:	e5de      	b.n	80177f4 <tcp_slowtmr+0x60>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8017c36:	464b      	mov	r3, r9
 8017c38:	f240 52af 	movw	r2, #1455	; 0x5af
 8017c3c:	490e      	ldr	r1, [pc, #56]	; (8017c78 <tcp_slowtmr+0x4e4>)
 8017c3e:	4640      	mov	r0, r8
 8017c40:	f008 ffba 	bl	8020bb8 <iprintf>
 8017c44:	e771      	b.n	8017b2a <tcp_slowtmr+0x396>
                if (tcp_output(pcb) == ERR_OK) {
 8017c46:	4620      	mov	r0, r4
 8017c48:	f003 fa34 	bl	801b0b4 <tcp_output>
 8017c4c:	2800      	cmp	r0, #0
 8017c4e:	d1a1      	bne.n	8017b94 <tcp_slowtmr+0x400>
    pcb_remove = 0;
 8017c50:	4605      	mov	r5, r0
 8017c52:	e7ee      	b.n	8017c32 <tcp_slowtmr+0x49e>
 8017c54:	000124f8 	.word	0x000124f8
 8017c58:	10624dd3 	.word	0x10624dd3
 8017c5c:	0803dfc8 	.word	0x0803dfc8
 8017c60:	0803e234 	.word	0x0803e234
 8017c64:	08026bb8 	.word	0x08026bb8
 8017c68:	2003e2d8 	.word	0x2003e2d8
 8017c6c:	0803e208 	.word	0x0803e208
 8017c70:	0803e2b8 	.word	0x0803e2b8
 8017c74:	0803e1d0 	.word	0x0803e1d0
 8017c78:	0803e290 	.word	0x0803e290
 8017c7c:	0803dc94 	.word	0x0803dc94

08017c80 <tcp_pcb_remove>:
{
 8017c80:	b538      	push	{r3, r4, r5, lr}
 8017c82:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8017c84:	460c      	mov	r4, r1
 8017c86:	2900      	cmp	r1, #0
 8017c88:	d04f      	beq.n	8017d2a <tcp_pcb_remove+0xaa>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8017c8a:	2d00      	cmp	r5, #0
 8017c8c:	d056      	beq.n	8017d3c <tcp_pcb_remove+0xbc>
  TCP_RMV(pcblist, pcb);
 8017c8e:	682a      	ldr	r2, [r5, #0]
 8017c90:	42a2      	cmp	r2, r4
 8017c92:	d047      	beq.n	8017d24 <tcp_pcb_remove+0xa4>
 8017c94:	b14a      	cbz	r2, 8017caa <tcp_pcb_remove+0x2a>
 8017c96:	68d3      	ldr	r3, [r2, #12]
 8017c98:	429c      	cmp	r4, r3
 8017c9a:	d03f      	beq.n	8017d1c <tcp_pcb_remove+0x9c>
 8017c9c:	b12b      	cbz	r3, 8017caa <tcp_pcb_remove+0x2a>
 8017c9e:	68da      	ldr	r2, [r3, #12]
 8017ca0:	42a2      	cmp	r2, r4
 8017ca2:	d03c      	beq.n	8017d1e <tcp_pcb_remove+0x9e>
 8017ca4:	4613      	mov	r3, r2
 8017ca6:	2b00      	cmp	r3, #0
 8017ca8:	d1f9      	bne.n	8017c9e <tcp_pcb_remove+0x1e>
 8017caa:	2300      	movs	r3, #0
  tcp_pcb_purge(pcb);
 8017cac:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 8017cae:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 8017cb0:	f7ff fd30 	bl	8017714 <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 8017cb4:	7d23      	ldrb	r3, [r4, #20]
 8017cb6:	2b0a      	cmp	r3, #10
 8017cb8:	d02a      	beq.n	8017d10 <tcp_pcb_remove+0x90>
 8017cba:	2b01      	cmp	r3, #1
 8017cbc:	d028      	beq.n	8017d10 <tcp_pcb_remove+0x90>
      (pcb->flags & TF_ACK_DELAY)) {
 8017cbe:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 8017cc0:	07da      	lsls	r2, r3, #31
 8017cc2:	d41e      	bmi.n	8017d02 <tcp_pcb_remove+0x82>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8017cc4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8017cc6:	b133      	cbz	r3, 8017cd6 <tcp_pcb_remove+0x56>
 8017cc8:	4b20      	ldr	r3, [pc, #128]	; (8017d4c <tcp_pcb_remove+0xcc>)
 8017cca:	f640 0293 	movw	r2, #2195	; 0x893
 8017cce:	4920      	ldr	r1, [pc, #128]	; (8017d50 <tcp_pcb_remove+0xd0>)
 8017cd0:	4820      	ldr	r0, [pc, #128]	; (8017d54 <tcp_pcb_remove+0xd4>)
 8017cd2:	f008 ff71 	bl	8020bb8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8017cd6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017cd8:	b133      	cbz	r3, 8017ce8 <tcp_pcb_remove+0x68>
 8017cda:	4b1c      	ldr	r3, [pc, #112]	; (8017d4c <tcp_pcb_remove+0xcc>)
 8017cdc:	f640 0294 	movw	r2, #2196	; 0x894
 8017ce0:	491d      	ldr	r1, [pc, #116]	; (8017d58 <tcp_pcb_remove+0xd8>)
 8017ce2:	481c      	ldr	r0, [pc, #112]	; (8017d54 <tcp_pcb_remove+0xd4>)
 8017ce4:	f008 ff68 	bl	8020bb8 <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8017ce8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8017cea:	b133      	cbz	r3, 8017cfa <tcp_pcb_remove+0x7a>
 8017cec:	4b17      	ldr	r3, [pc, #92]	; (8017d4c <tcp_pcb_remove+0xcc>)
 8017cee:	f640 0296 	movw	r2, #2198	; 0x896
 8017cf2:	491a      	ldr	r1, [pc, #104]	; (8017d5c <tcp_pcb_remove+0xdc>)
 8017cf4:	4817      	ldr	r0, [pc, #92]	; (8017d54 <tcp_pcb_remove+0xd4>)
 8017cf6:	f008 ff5f 	bl	8020bb8 <iprintf>
  pcb->state = CLOSED;
 8017cfa:	2300      	movs	r3, #0
 8017cfc:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 8017cfe:	82e3      	strh	r3, [r4, #22]
}
 8017d00:	bd38      	pop	{r3, r4, r5, pc}
    tcp_ack_now(pcb);
 8017d02:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 8017d06:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 8017d08:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 8017d0a:	f003 f9d3 	bl	801b0b4 <tcp_output>
 8017d0e:	7d23      	ldrb	r3, [r4, #20]
  if (pcb->state != LISTEN) {
 8017d10:	2b01      	cmp	r3, #1
 8017d12:	d0f2      	beq.n	8017cfa <tcp_pcb_remove+0x7a>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8017d14:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8017d16:	2b00      	cmp	r3, #0
 8017d18:	d1d6      	bne.n	8017cc8 <tcp_pcb_remove+0x48>
 8017d1a:	e7dc      	b.n	8017cd6 <tcp_pcb_remove+0x56>
  TCP_RMV(pcblist, pcb);
 8017d1c:	4613      	mov	r3, r2
 8017d1e:	68e2      	ldr	r2, [r4, #12]
 8017d20:	60da      	str	r2, [r3, #12]
 8017d22:	e7c2      	b.n	8017caa <tcp_pcb_remove+0x2a>
 8017d24:	68e3      	ldr	r3, [r4, #12]
 8017d26:	602b      	str	r3, [r5, #0]
 8017d28:	e7bf      	b.n	8017caa <tcp_pcb_remove+0x2a>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8017d2a:	4b08      	ldr	r3, [pc, #32]	; (8017d4c <tcp_pcb_remove+0xcc>)
 8017d2c:	f640 0283 	movw	r2, #2179	; 0x883
 8017d30:	490b      	ldr	r1, [pc, #44]	; (8017d60 <tcp_pcb_remove+0xe0>)
 8017d32:	4808      	ldr	r0, [pc, #32]	; (8017d54 <tcp_pcb_remove+0xd4>)
 8017d34:	f008 ff40 	bl	8020bb8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8017d38:	2d00      	cmp	r5, #0
 8017d3a:	d1a8      	bne.n	8017c8e <tcp_pcb_remove+0xe>
 8017d3c:	4b03      	ldr	r3, [pc, #12]	; (8017d4c <tcp_pcb_remove+0xcc>)
 8017d3e:	f640 0284 	movw	r2, #2180	; 0x884
 8017d42:	4908      	ldr	r1, [pc, #32]	; (8017d64 <tcp_pcb_remove+0xe4>)
 8017d44:	4803      	ldr	r0, [pc, #12]	; (8017d54 <tcp_pcb_remove+0xd4>)
 8017d46:	f008 ff37 	bl	8020bb8 <iprintf>
 8017d4a:	e7a0      	b.n	8017c8e <tcp_pcb_remove+0xe>
 8017d4c:	0803dd54 	.word	0x0803dd54
 8017d50:	0803df7c 	.word	0x0803df7c
 8017d54:	08026bb8 	.word	0x08026bb8
 8017d58:	0803df94 	.word	0x0803df94
 8017d5c:	0803dfb0 	.word	0x0803dfb0
 8017d60:	0803df40 	.word	0x0803df40
 8017d64:	0803df5c 	.word	0x0803df5c

08017d68 <tcp_abandon>:
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8017d68:	2800      	cmp	r0, #0
 8017d6a:	d07e      	beq.n	8017e6a <tcp_abandon+0x102>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8017d6c:	7d03      	ldrb	r3, [r0, #20]
 8017d6e:	2b01      	cmp	r3, #1
{
 8017d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d74:	460d      	mov	r5, r1
 8017d76:	b085      	sub	sp, #20
 8017d78:	4604      	mov	r4, r0
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8017d7a:	d062      	beq.n	8017e42 <tcp_abandon+0xda>
  if (pcb->state == TIME_WAIT) {
 8017d7c:	2b0a      	cmp	r3, #10
 8017d7e:	d06a      	beq.n	8017e56 <tcp_abandon+0xee>
    seqno = pcb->snd_nxt;
 8017d80:	f8d4 9050 	ldr.w	r9, [r4, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 8017d84:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    errf = pcb->errf;
 8017d88:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
    errf_arg = pcb->callback_arg;
 8017d8c:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8017d90:	8ae7      	ldrh	r7, [r4, #22]
    if (pcb->state == CLOSED) {
 8017d92:	b98b      	cbnz	r3, 8017db8 <tcp_abandon+0x50>
      if (pcb->local_port != 0) {
 8017d94:	2f00      	cmp	r7, #0
 8017d96:	d03f      	beq.n	8017e18 <tcp_abandon+0xb0>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8017d98:	4b3b      	ldr	r3, [pc, #236]	; (8017e88 <tcp_abandon+0x120>)
 8017d9a:	681a      	ldr	r2, [r3, #0]
 8017d9c:	42a2      	cmp	r2, r4
 8017d9e:	d049      	beq.n	8017e34 <tcp_abandon+0xcc>
 8017da0:	2a00      	cmp	r2, #0
 8017da2:	d049      	beq.n	8017e38 <tcp_abandon+0xd0>
 8017da4:	68d3      	ldr	r3, [r2, #12]
 8017da6:	429c      	cmp	r4, r3
 8017da8:	d066      	beq.n	8017e78 <tcp_abandon+0x110>
 8017daa:	2b00      	cmp	r3, #0
 8017dac:	d044      	beq.n	8017e38 <tcp_abandon+0xd0>
 8017dae:	68da      	ldr	r2, [r3, #12]
 8017db0:	42a2      	cmp	r2, r4
 8017db2:	d062      	beq.n	8017e7a <tcp_abandon+0x112>
 8017db4:	4613      	mov	r3, r2
 8017db6:	e7f8      	b.n	8017daa <tcp_abandon+0x42>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8017db8:	4621      	mov	r1, r4
 8017dba:	4834      	ldr	r0, [pc, #208]	; (8017e8c <tcp_abandon+0x124>)
 8017dbc:	f7ff ff60 	bl	8017c80 <tcp_pcb_remove>
 8017dc0:	4b33      	ldr	r3, [pc, #204]	; (8017e90 <tcp_abandon+0x128>)
 8017dc2:	2201      	movs	r2, #1
 8017dc4:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8017dc6:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8017dc8:	b130      	cbz	r0, 8017dd8 <tcp_abandon+0x70>
    struct tcp_seg *next = seg->next;
 8017dca:	f8d0 b000 	ldr.w	fp, [r0]
    tcp_seg_free(seg);
 8017dce:	f7ff fbcf 	bl	8017570 <tcp_seg_free>
  while (seg != NULL) {
 8017dd2:	4658      	mov	r0, fp
 8017dd4:	2800      	cmp	r0, #0
 8017dd6:	d1f8      	bne.n	8017dca <tcp_abandon+0x62>
    if (pcb->unsent != NULL) {
 8017dd8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8017dda:	b130      	cbz	r0, 8017dea <tcp_abandon+0x82>
    struct tcp_seg *next = seg->next;
 8017ddc:	f8d0 b000 	ldr.w	fp, [r0]
    tcp_seg_free(seg);
 8017de0:	f7ff fbc6 	bl	8017570 <tcp_seg_free>
  while (seg != NULL) {
 8017de4:	4658      	mov	r0, fp
 8017de6:	2800      	cmp	r0, #0
 8017de8:	d1f8      	bne.n	8017ddc <tcp_abandon+0x74>
    if (pcb->ooseq != NULL) {
 8017dea:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8017dec:	b130      	cbz	r0, 8017dfc <tcp_abandon+0x94>
    struct tcp_seg *next = seg->next;
 8017dee:	f8d0 b000 	ldr.w	fp, [r0]
    tcp_seg_free(seg);
 8017df2:	f7ff fbbd 	bl	8017570 <tcp_seg_free>
  while (seg != NULL) {
 8017df6:	4658      	mov	r0, fp
 8017df8:	2800      	cmp	r0, #0
 8017dfa:	d1f8      	bne.n	8017dee <tcp_abandon+0x86>
    if (send_rst) {
 8017dfc:	b975      	cbnz	r5, 8017e1c <tcp_abandon+0xb4>
    tcp_free(pcb);
 8017dfe:	4620      	mov	r0, r4
 8017e00:	f7ff fa4e 	bl	80172a0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8017e04:	2e00      	cmp	r6, #0
 8017e06:	d03b      	beq.n	8017e80 <tcp_abandon+0x118>
 8017e08:	4640      	mov	r0, r8
 8017e0a:	f06f 010c 	mvn.w	r1, #12
 8017e0e:	4633      	mov	r3, r6
}
 8017e10:	b005      	add	sp, #20
 8017e12:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8017e16:	4718      	bx	r3
    int send_rst = 0;
 8017e18:	461d      	mov	r5, r3
 8017e1a:	e7d4      	b.n	8017dc6 <tcp_abandon+0x5e>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8017e1c:	8b23      	ldrh	r3, [r4, #24]
 8017e1e:	1d25      	adds	r5, r4, #4
 8017e20:	4652      	mov	r2, sl
 8017e22:	4649      	mov	r1, r9
 8017e24:	9302      	str	r3, [sp, #8]
 8017e26:	4620      	mov	r0, r4
 8017e28:	4623      	mov	r3, r4
 8017e2a:	9701      	str	r7, [sp, #4]
 8017e2c:	9500      	str	r5, [sp, #0]
 8017e2e:	f003 f8c5 	bl	801afbc <tcp_rst>
 8017e32:	e7e4      	b.n	8017dfe <tcp_abandon+0x96>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8017e34:	68e2      	ldr	r2, [r4, #12]
 8017e36:	601a      	str	r2, [r3, #0]
 8017e38:	2300      	movs	r3, #0
    u16_t local_port = 0;
 8017e3a:	461f      	mov	r7, r3
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8017e3c:	60e3      	str	r3, [r4, #12]
    int send_rst = 0;
 8017e3e:	461d      	mov	r5, r3
 8017e40:	e7c1      	b.n	8017dc6 <tcp_abandon+0x5e>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8017e42:	4b14      	ldr	r3, [pc, #80]	; (8017e94 <tcp_abandon+0x12c>)
 8017e44:	f240 2241 	movw	r2, #577	; 0x241
 8017e48:	4913      	ldr	r1, [pc, #76]	; (8017e98 <tcp_abandon+0x130>)
 8017e4a:	4814      	ldr	r0, [pc, #80]	; (8017e9c <tcp_abandon+0x134>)
 8017e4c:	f008 feb4 	bl	8020bb8 <iprintf>
 8017e50:	7d23      	ldrb	r3, [r4, #20]
  if (pcb->state == TIME_WAIT) {
 8017e52:	2b0a      	cmp	r3, #10
 8017e54:	d194      	bne.n	8017d80 <tcp_abandon+0x18>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8017e56:	4621      	mov	r1, r4
 8017e58:	4811      	ldr	r0, [pc, #68]	; (8017ea0 <tcp_abandon+0x138>)
 8017e5a:	f7ff ff11 	bl	8017c80 <tcp_pcb_remove>
    tcp_free(pcb);
 8017e5e:	4620      	mov	r0, r4
}
 8017e60:	b005      	add	sp, #20
 8017e62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    tcp_free(pcb);
 8017e66:	f7ff ba1b 	b.w	80172a0 <tcp_free>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8017e6a:	4b0a      	ldr	r3, [pc, #40]	; (8017e94 <tcp_abandon+0x12c>)
 8017e6c:	f240 223d 	movw	r2, #573	; 0x23d
 8017e70:	490c      	ldr	r1, [pc, #48]	; (8017ea4 <tcp_abandon+0x13c>)
 8017e72:	480a      	ldr	r0, [pc, #40]	; (8017e9c <tcp_abandon+0x134>)
 8017e74:	f008 bea0 	b.w	8020bb8 <iprintf>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8017e78:	4613      	mov	r3, r2
 8017e7a:	68e2      	ldr	r2, [r4, #12]
 8017e7c:	60da      	str	r2, [r3, #12]
 8017e7e:	e7db      	b.n	8017e38 <tcp_abandon+0xd0>
}
 8017e80:	b005      	add	sp, #20
 8017e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e86:	bf00      	nop
 8017e88:	2003e2e4 	.word	0x2003e2e4
 8017e8c:	2003e2d8 	.word	0x2003e2d8
 8017e90:	2003e2d4 	.word	0x2003e2d4
 8017e94:	0803dd54 	.word	0x0803dd54
 8017e98:	0803dc40 	.word	0x0803dc40
 8017e9c:	08026bb8 	.word	0x08026bb8
 8017ea0:	2003e2e8 	.word	0x2003e2e8
 8017ea4:	0803dc24 	.word	0x0803dc24

08017ea8 <tcp_abort>:
  tcp_abandon(pcb, 1);
 8017ea8:	2101      	movs	r1, #1
 8017eaa:	f7ff bf5d 	b.w	8017d68 <tcp_abandon>
 8017eae:	bf00      	nop

08017eb0 <tcp_accept_null>:
{
 8017eb0:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8017eb2:	460c      	mov	r4, r1
 8017eb4:	b131      	cbz	r1, 8017ec4 <tcp_accept_null+0x14>
  tcp_abandon(pcb, 1);
 8017eb6:	4620      	mov	r0, r4
 8017eb8:	2101      	movs	r1, #1
 8017eba:	f7ff ff55 	bl	8017d68 <tcp_abandon>
}
 8017ebe:	f06f 000c 	mvn.w	r0, #12
 8017ec2:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8017ec4:	4b06      	ldr	r3, [pc, #24]	; (8017ee0 <tcp_accept_null+0x30>)
 8017ec6:	f240 320f 	movw	r2, #783	; 0x30f
 8017eca:	4906      	ldr	r1, [pc, #24]	; (8017ee4 <tcp_accept_null+0x34>)
 8017ecc:	4806      	ldr	r0, [pc, #24]	; (8017ee8 <tcp_accept_null+0x38>)
 8017ece:	f008 fe73 	bl	8020bb8 <iprintf>
  tcp_abandon(pcb, 1);
 8017ed2:	4620      	mov	r0, r4
 8017ed4:	2101      	movs	r1, #1
 8017ed6:	f7ff ff47 	bl	8017d68 <tcp_abandon>
}
 8017eda:	f06f 000c 	mvn.w	r0, #12
 8017ede:	bd10      	pop	{r4, pc}
 8017ee0:	0803dd54 	.word	0x0803dd54
 8017ee4:	0803dc74 	.word	0x0803dc74
 8017ee8:	08026bb8 	.word	0x08026bb8

08017eec <tcp_netif_ip_addr_changed_pcblist>:
{
 8017eec:	b570      	push	{r4, r5, r6, lr}
 8017eee:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8017ef0:	4606      	mov	r6, r0
 8017ef2:	b178      	cbz	r0, 8017f14 <tcp_netif_ip_addr_changed_pcblist+0x28>
  while (pcb != NULL) {
 8017ef4:	b13c      	cbz	r4, 8017f06 <tcp_netif_ip_addr_changed_pcblist+0x1a>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8017ef6:	6822      	ldr	r2, [r4, #0]
 8017ef8:	6833      	ldr	r3, [r6, #0]
 8017efa:	68e5      	ldr	r5, [r4, #12]
 8017efc:	429a      	cmp	r2, r3
 8017efe:	d003      	beq.n	8017f08 <tcp_netif_ip_addr_changed_pcblist+0x1c>
  while (pcb != NULL) {
 8017f00:	462c      	mov	r4, r5
 8017f02:	2c00      	cmp	r4, #0
 8017f04:	d1f7      	bne.n	8017ef6 <tcp_netif_ip_addr_changed_pcblist+0xa>
}
 8017f06:	bd70      	pop	{r4, r5, r6, pc}
  tcp_abandon(pcb, 1);
 8017f08:	4620      	mov	r0, r4
 8017f0a:	2101      	movs	r1, #1
 8017f0c:	f7ff ff2c 	bl	8017d68 <tcp_abandon>
  while (pcb != NULL) {
 8017f10:	462c      	mov	r4, r5
 8017f12:	e7f6      	b.n	8017f02 <tcp_netif_ip_addr_changed_pcblist+0x16>
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8017f14:	4b03      	ldr	r3, [pc, #12]	; (8017f24 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 8017f16:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8017f1a:	4903      	ldr	r1, [pc, #12]	; (8017f28 <tcp_netif_ip_addr_changed_pcblist+0x3c>)
 8017f1c:	4803      	ldr	r0, [pc, #12]	; (8017f2c <tcp_netif_ip_addr_changed_pcblist+0x40>)
 8017f1e:	f008 fe4b 	bl	8020bb8 <iprintf>
 8017f22:	e7e7      	b.n	8017ef4 <tcp_netif_ip_addr_changed_pcblist+0x8>
 8017f24:	0803dd54 	.word	0x0803dd54
 8017f28:	0803dec4 	.word	0x0803dec4
 8017f2c:	08026bb8 	.word	0x08026bb8

08017f30 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017f30:	4b0f      	ldr	r3, [pc, #60]	; (8017f70 <tcp_kill_state+0x40>)
 8017f32:	6819      	ldr	r1, [r3, #0]
 8017f34:	b1d1      	cbz	r1, 8017f6c <tcp_kill_state+0x3c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8017f36:	4b0f      	ldr	r3, [pc, #60]	; (8017f74 <tcp_kill_state+0x44>)
  inactivity = 0;
 8017f38:	2200      	movs	r2, #0
{
 8017f3a:	b430      	push	{r4, r5}
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8017f3c:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 8017f3e:	4614      	mov	r4, r2
 8017f40:	e001      	b.n	8017f46 <tcp_kill_state+0x16>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017f42:	68c9      	ldr	r1, [r1, #12]
 8017f44:	b159      	cbz	r1, 8017f5e <tcp_kill_state+0x2e>
    if (pcb->state == state) {
 8017f46:	7d0b      	ldrb	r3, [r1, #20]
 8017f48:	4283      	cmp	r3, r0
 8017f4a:	d1fa      	bne.n	8017f42 <tcp_kill_state+0x12>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8017f4c:	6a0b      	ldr	r3, [r1, #32]
 8017f4e:	1aeb      	subs	r3, r5, r3
 8017f50:	4293      	cmp	r3, r2
 8017f52:	d3f6      	bcc.n	8017f42 <tcp_kill_state+0x12>
 8017f54:	460c      	mov	r4, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017f56:	68c9      	ldr	r1, [r1, #12]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8017f58:	461a      	mov	r2, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017f5a:	2900      	cmp	r1, #0
 8017f5c:	d1f3      	bne.n	8017f46 <tcp_kill_state+0x16>
  if (inactive != NULL) {
 8017f5e:	b11c      	cbz	r4, 8017f68 <tcp_kill_state+0x38>
    tcp_abandon(inactive, 0);
 8017f60:	4620      	mov	r0, r4
}
 8017f62:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 8017f64:	f7ff bf00 	b.w	8017d68 <tcp_abandon>
}
 8017f68:	bc30      	pop	{r4, r5}
 8017f6a:	4770      	bx	lr
 8017f6c:	4770      	bx	lr
 8017f6e:	bf00      	nop
 8017f70:	2003e2d8 	.word	0x2003e2d8
 8017f74:	2003e2dc 	.word	0x2003e2dc

08017f78 <tcp_alloc>:
{
 8017f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017f7a:	f44f 62e6 	mov.w	r2, #1840	; 0x730
{
 8017f7e:	4604      	mov	r4, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017f80:	495f      	ldr	r1, [pc, #380]	; (8018100 <tcp_alloc+0x188>)
 8017f82:	2002      	movs	r0, #2
 8017f84:	f7fe f9c2 	bl	801630c <memp_malloc_fn>
  if (pcb == NULL) {
 8017f88:	b340      	cbz	r0, 8017fdc <tcp_alloc+0x64>
 8017f8a:	4603      	mov	r3, r0
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8017f8c:	229c      	movs	r2, #156	; 0x9c
 8017f8e:	2100      	movs	r1, #0
 8017f90:	4618      	mov	r0, r3
    pcb->ttl = TCP_TTL;
 8017f92:	26ff      	movs	r6, #255	; 0xff
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8017f94:	f007 fe8f 	bl	801fcb6 <memset>
    pcb->last_timer = tcp_timer_ctr;
 8017f98:	4a5a      	ldr	r2, [pc, #360]	; (8018104 <tcp_alloc+0x18c>)
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8017f9a:	4603      	mov	r3, r0
    pcb->tmr = tcp_ticks;
 8017f9c:	485a      	ldr	r0, [pc, #360]	; (8018108 <tcp_alloc+0x190>)
    pcb->snd_buf = TCP_SND_BUF;
 8017f9e:	f44f 6186 	mov.w	r1, #1072	; 0x430
    pcb->tmr = tcp_ticks;
 8017fa2:	6805      	ldr	r5, [r0, #0]
    pcb->last_timer = tcp_timer_ctr;
 8017fa4:	7810      	ldrb	r0, [r2, #0]
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8017fa6:	2206      	movs	r2, #6
    pcb->prio = prio;
 8017fa8:	755c      	strb	r4, [r3, #21]
    pcb->cwnd = 1;
 8017faa:	2401      	movs	r4, #1
    pcb->last_timer = tcp_timer_ctr;
 8017fac:	7798      	strb	r0, [r3, #30]
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8017fae:	4857      	ldr	r0, [pc, #348]	; (801810c <tcp_alloc+0x194>)
    pcb->tmr = tcp_ticks;
 8017fb0:	621d      	str	r5, [r3, #32]
    pcb->snd_buf = TCP_SND_BUF;
 8017fb2:	f8a3 1064 	strh.w	r1, [r3, #100]	; 0x64
    pcb->ssthresh = TCP_SND_BUF;
 8017fb6:	f8a3 104a 	strh.w	r1, [r3, #74]	; 0x4a
    pcb->rtime = -1;
 8017fba:	4d55      	ldr	r5, [pc, #340]	; (8018110 <tcp_alloc+0x198>)
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8017fbc:	6298      	str	r0, [r3, #40]	; 0x28
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8017fbe:	4955      	ldr	r1, [pc, #340]	; (8018114 <tcp_alloc+0x19c>)
    pcb->recv = tcp_recv_null;
 8017fc0:	4855      	ldr	r0, [pc, #340]	; (8018118 <tcp_alloc+0x1a0>)
    pcb->ttl = TCP_TTL;
 8017fc2:	72de      	strb	r6, [r3, #11]
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8017fc4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8017fc8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8017fca:	631d      	str	r5, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8017fcc:	f8a3 4048 	strh.w	r4, [r3, #72]	; 0x48
    pcb->recv = tcp_recv_null;
 8017fd0:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8017fd4:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
 8017fd8:	4618      	mov	r0, r3
 8017fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8017fdc:	4d4f      	ldr	r5, [pc, #316]	; (801811c <tcp_alloc+0x1a4>)
 8017fde:	682b      	ldr	r3, [r5, #0]
  while (pcb != NULL) {
 8017fe0:	b913      	cbnz	r3, 8017fe8 <tcp_alloc+0x70>
 8017fe2:	e00e      	b.n	8018002 <tcp_alloc+0x8a>
 8017fe4:	4633      	mov	r3, r6
 8017fe6:	b166      	cbz	r6, 8018002 <tcp_alloc+0x8a>
    if (pcb->flags & TF_CLOSEPEND) {
 8017fe8:	8b5a      	ldrh	r2, [r3, #26]
    struct tcp_pcb *next = pcb->next;
 8017fea:	68de      	ldr	r6, [r3, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 8017fec:	0711      	lsls	r1, r2, #28
 8017fee:	d5f9      	bpl.n	8017fe4 <tcp_alloc+0x6c>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8017ff0:	f022 0208 	bic.w	r2, r2, #8
      tcp_close_shutdown_fin(pcb);
 8017ff4:	4618      	mov	r0, r3
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8017ff6:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8017ff8:	f7ff f912 	bl	8017220 <tcp_close_shutdown_fin>
  while (pcb != NULL) {
 8017ffc:	4633      	mov	r3, r6
 8017ffe:	2e00      	cmp	r6, #0
 8018000:	d1f2      	bne.n	8017fe8 <tcp_alloc+0x70>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8018002:	4b47      	ldr	r3, [pc, #284]	; (8018120 <tcp_alloc+0x1a8>)
 8018004:	681b      	ldr	r3, [r3, #0]
 8018006:	b193      	cbz	r3, 801802e <tcp_alloc+0xb6>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8018008:	4a3f      	ldr	r2, [pc, #252]	; (8018108 <tcp_alloc+0x190>)
 801800a:	4618      	mov	r0, r3
 801800c:	6a19      	ldr	r1, [r3, #32]
 801800e:	6816      	ldr	r6, [r2, #0]
 8018010:	1a71      	subs	r1, r6, r1
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8018012:	68db      	ldr	r3, [r3, #12]
 8018014:	b143      	cbz	r3, 8018028 <tcp_alloc+0xb0>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8018016:	6a1a      	ldr	r2, [r3, #32]
 8018018:	1ab2      	subs	r2, r6, r2
 801801a:	428a      	cmp	r2, r1
 801801c:	d3f9      	bcc.n	8018012 <tcp_alloc+0x9a>
 801801e:	4618      	mov	r0, r3
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8018020:	68db      	ldr	r3, [r3, #12]
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8018022:	4611      	mov	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8018024:	2b00      	cmp	r3, #0
 8018026:	d1f6      	bne.n	8018016 <tcp_alloc+0x9e>
  tcp_abandon(pcb, 1);
 8018028:	2101      	movs	r1, #1
 801802a:	f7ff fe9d 	bl	8017d68 <tcp_abandon>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801802e:	f240 7239 	movw	r2, #1849	; 0x739
 8018032:	4933      	ldr	r1, [pc, #204]	; (8018100 <tcp_alloc+0x188>)
 8018034:	2002      	movs	r0, #2
 8018036:	f7fe f969 	bl	801630c <memp_malloc_fn>
    if (pcb == NULL) {
 801803a:	4603      	mov	r3, r0
 801803c:	b130      	cbz	r0, 801804c <tcp_alloc+0xd4>
 801803e:	4a39      	ldr	r2, [pc, #228]	; (8018124 <tcp_alloc+0x1ac>)
 8018040:	f8d2 10bc 	ldr.w	r1, [r2, #188]	; 0xbc
 8018044:	880a      	ldrh	r2, [r1, #0]
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8018046:	3a01      	subs	r2, #1
 8018048:	800a      	strh	r2, [r1, #0]
 801804a:	e79f      	b.n	8017f8c <tcp_alloc+0x14>
      tcp_kill_state(LAST_ACK);
 801804c:	2009      	movs	r0, #9
 801804e:	f7ff ff6f 	bl	8017f30 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8018052:	f240 723f 	movw	r2, #1855	; 0x73f
 8018056:	492a      	ldr	r1, [pc, #168]	; (8018100 <tcp_alloc+0x188>)
 8018058:	2002      	movs	r0, #2
 801805a:	f7fe f957 	bl	801630c <memp_malloc_fn>
      if (pcb == NULL) {
 801805e:	4603      	mov	r3, r0
 8018060:	b138      	cbz	r0, 8018072 <tcp_alloc+0xfa>
 8018062:	4a30      	ldr	r2, [pc, #192]	; (8018124 <tcp_alloc+0x1ac>)
 8018064:	f8d2 10bc 	ldr.w	r1, [r2, #188]	; 0xbc
 8018068:	880a      	ldrh	r2, [r1, #0]
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 801806a:	3a01      	subs	r2, #1
 801806c:	b292      	uxth	r2, r2
 801806e:	800a      	strh	r2, [r1, #0]
 8018070:	e7e9      	b.n	8018046 <tcp_alloc+0xce>
        tcp_kill_state(CLOSING);
 8018072:	2008      	movs	r0, #8
 8018074:	f7ff ff5c 	bl	8017f30 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8018078:	f240 7245 	movw	r2, #1861	; 0x745
 801807c:	4920      	ldr	r1, [pc, #128]	; (8018100 <tcp_alloc+0x188>)
 801807e:	2002      	movs	r0, #2
 8018080:	f7fe f944 	bl	801630c <memp_malloc_fn>
        if (pcb == NULL) {
 8018084:	4603      	mov	r3, r0
 8018086:	b138      	cbz	r0, 8018098 <tcp_alloc+0x120>
 8018088:	4a26      	ldr	r2, [pc, #152]	; (8018124 <tcp_alloc+0x1ac>)
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 801808a:	f8d2 10bc 	ldr.w	r1, [r2, #188]	; 0xbc
 801808e:	880a      	ldrh	r2, [r1, #0]
 8018090:	3a01      	subs	r2, #1
 8018092:	b292      	uxth	r2, r2
 8018094:	800a      	strh	r2, [r1, #0]
 8018096:	e7e8      	b.n	801806a <tcp_alloc+0xf2>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8018098:	0622      	lsls	r2, r4, #24
 801809a:	d42f      	bmi.n	80180fc <tcp_alloc+0x184>
  if (mprio == 0) {
 801809c:	b1ec      	cbz	r4, 80180da <tcp_alloc+0x162>
 801809e:	4622      	mov	r2, r4
  mprio--;
 80180a0:	1e51      	subs	r1, r2, #1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80180a2:	682a      	ldr	r2, [r5, #0]
  mprio--;
 80180a4:	b2c9      	uxtb	r1, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80180a6:	b1c2      	cbz	r2, 80180da <tcp_alloc+0x162>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80180a8:	4817      	ldr	r0, [pc, #92]	; (8018108 <tcp_alloc+0x190>)
  inactivity = 0;
 80180aa:	2700      	movs	r7, #0
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80180ac:	6806      	ldr	r6, [r0, #0]
 80180ae:	e005      	b.n	80180bc <tcp_alloc+0x144>
 80180b0:	6a15      	ldr	r5, [r2, #32]
      inactivity = tcp_ticks - pcb->tmr;
 80180b2:	1b77      	subs	r7, r6, r5
    if ((pcb->prio < mprio) ||
 80180b4:	4601      	mov	r1, r0
      inactivity = tcp_ticks - pcb->tmr;
 80180b6:	4613      	mov	r3, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80180b8:	68d2      	ldr	r2, [r2, #12]
 80180ba:	b14a      	cbz	r2, 80180d0 <tcp_alloc+0x158>
    if ((pcb->prio < mprio) ||
 80180bc:	7d50      	ldrb	r0, [r2, #21]
 80180be:	4281      	cmp	r1, r0
 80180c0:	d8f6      	bhi.n	80180b0 <tcp_alloc+0x138>
 80180c2:	d1f9      	bne.n	80180b8 <tcp_alloc+0x140>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80180c4:	6a15      	ldr	r5, [r2, #32]
 80180c6:	eba6 0c05 	sub.w	ip, r6, r5
 80180ca:	4567      	cmp	r7, ip
 80180cc:	d8f4      	bhi.n	80180b8 <tcp_alloc+0x140>
 80180ce:	e7f0      	b.n	80180b2 <tcp_alloc+0x13a>
  if (inactive != NULL) {
 80180d0:	b11b      	cbz	r3, 80180da <tcp_alloc+0x162>
  tcp_abandon(pcb, 1);
 80180d2:	4618      	mov	r0, r3
 80180d4:	2101      	movs	r1, #1
 80180d6:	f7ff fe47 	bl	8017d68 <tcp_abandon>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80180da:	f240 724b 	movw	r2, #1867	; 0x74b
 80180de:	4908      	ldr	r1, [pc, #32]	; (8018100 <tcp_alloc+0x188>)
 80180e0:	2002      	movs	r0, #2
 80180e2:	f7fe f913 	bl	801630c <memp_malloc_fn>
          if (pcb != NULL) {
 80180e6:	4603      	mov	r3, r0
 80180e8:	2800      	cmp	r0, #0
 80180ea:	f43f af75 	beq.w	8017fd8 <tcp_alloc+0x60>
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80180ee:	4a0d      	ldr	r2, [pc, #52]	; (8018124 <tcp_alloc+0x1ac>)
 80180f0:	f8d2 00bc 	ldr.w	r0, [r2, #188]	; 0xbc
 80180f4:	8801      	ldrh	r1, [r0, #0]
 80180f6:	3901      	subs	r1, #1
 80180f8:	8001      	strh	r1, [r0, #0]
 80180fa:	e7c6      	b.n	801808a <tcp_alloc+0x112>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80180fc:	227f      	movs	r2, #127	; 0x7f
 80180fe:	e7cf      	b.n	80180a0 <tcp_alloc+0x128>
 8018100:	0803dd54 	.word	0x0803dd54
 8018104:	2002a3f5 	.word	0x2002a3f5
 8018108:	2003e2dc 	.word	0x2003e2dc
 801810c:	08600860 	.word	0x08600860
 8018110:	0218ffff 	.word	0x0218ffff
 8018114:	006ddd00 	.word	0x006ddd00
 8018118:	08018311 	.word	0x08018311
 801811c:	2003e2d8 	.word	0x2003e2d8
 8018120:	2003e2e8 	.word	0x2003e2e8
 8018124:	2003e1cc 	.word	0x2003e1cc

08018128 <tcp_new>:
  return tcp_alloc(TCP_PRIO_NORMAL);
 8018128:	2040      	movs	r0, #64	; 0x40
 801812a:	f7ff bf25 	b.w	8017f78 <tcp_alloc>
 801812e:	bf00      	nop

08018130 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8018130:	2040      	movs	r0, #64	; 0x40
 8018132:	f7ff bf21 	b.w	8017f78 <tcp_alloc>
 8018136:	bf00      	nop

08018138 <tcp_close_shutdown>:
{
 8018138:	b530      	push	{r4, r5, lr}
 801813a:	460d      	mov	r5, r1
 801813c:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801813e:	4604      	mov	r4, r0
 8018140:	2800      	cmp	r0, #0
 8018142:	d070      	beq.n	8018226 <tcp_close_shutdown+0xee>
 8018144:	7d23      	ldrb	r3, [r4, #20]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8018146:	b11d      	cbz	r5, 8018150 <tcp_close_shutdown+0x18>
 8018148:	2b04      	cmp	r3, #4
 801814a:	d013      	beq.n	8018174 <tcp_close_shutdown+0x3c>
 801814c:	2b07      	cmp	r3, #7
 801814e:	d011      	beq.n	8018174 <tcp_close_shutdown+0x3c>
  switch (pcb->state) {
 8018150:	2b01      	cmp	r3, #1
 8018152:	d070      	beq.n	8018236 <tcp_close_shutdown+0xfe>
 8018154:	d331      	bcc.n	80181ba <tcp_close_shutdown+0x82>
 8018156:	2b02      	cmp	r3, #2
 8018158:	d15f      	bne.n	801821a <tcp_close_shutdown+0xe2>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801815a:	4853      	ldr	r0, [pc, #332]	; (80182a8 <tcp_close_shutdown+0x170>)
 801815c:	4621      	mov	r1, r4
 801815e:	f7ff fd8f 	bl	8017c80 <tcp_pcb_remove>
 8018162:	4b52      	ldr	r3, [pc, #328]	; (80182ac <tcp_close_shutdown+0x174>)
 8018164:	2201      	movs	r2, #1
      tcp_free(pcb);
 8018166:	4620      	mov	r0, r4
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8018168:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801816a:	f7ff f899 	bl	80172a0 <tcp_free>
}
 801816e:	2000      	movs	r0, #0
 8018170:	b005      	add	sp, #20
 8018172:	bd30      	pop	{r4, r5, pc}
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8018174:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8018176:	2a00      	cmp	r2, #0
 8018178:	d031      	beq.n	80181de <tcp_close_shutdown+0xa6>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801817a:	8b63      	ldrh	r3, [r4, #26]
 801817c:	06db      	lsls	r3, r3, #27
 801817e:	d533      	bpl.n	80181e8 <tcp_close_shutdown+0xb0>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8018180:	8b25      	ldrh	r5, [r4, #24]
 8018182:	1d20      	adds	r0, r4, #4
 8018184:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8018186:	4623      	mov	r3, r4
 8018188:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801818a:	9502      	str	r5, [sp, #8]
 801818c:	8ae5      	ldrh	r5, [r4, #22]
 801818e:	9000      	str	r0, [sp, #0]
 8018190:	4620      	mov	r0, r4
 8018192:	9501      	str	r5, [sp, #4]
 8018194:	f002 ff12 	bl	801afbc <tcp_rst>
      tcp_pcb_purge(pcb);
 8018198:	4620      	mov	r0, r4
 801819a:	f7ff fabb 	bl	8017714 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801819e:	4b42      	ldr	r3, [pc, #264]	; (80182a8 <tcp_close_shutdown+0x170>)
 80181a0:	681a      	ldr	r2, [r3, #0]
 80181a2:	42a2      	cmp	r2, r4
 80181a4:	d028      	beq.n	80181f8 <tcp_close_shutdown+0xc0>
 80181a6:	b34a      	cbz	r2, 80181fc <tcp_close_shutdown+0xc4>
 80181a8:	68d3      	ldr	r3, [r2, #12]
 80181aa:	429c      	cmp	r4, r3
 80181ac:	d06a      	beq.n	8018284 <tcp_close_shutdown+0x14c>
 80181ae:	b32b      	cbz	r3, 80181fc <tcp_close_shutdown+0xc4>
 80181b0:	68da      	ldr	r2, [r3, #12]
 80181b2:	42a2      	cmp	r2, r4
 80181b4:	d067      	beq.n	8018286 <tcp_close_shutdown+0x14e>
 80181b6:	4613      	mov	r3, r2
 80181b8:	e7f9      	b.n	80181ae <tcp_close_shutdown+0x76>
      if (pcb->local_port != 0) {
 80181ba:	8ae3      	ldrh	r3, [r4, #22]
 80181bc:	b33b      	cbz	r3, 801820e <tcp_close_shutdown+0xd6>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80181be:	4b3c      	ldr	r3, [pc, #240]	; (80182b0 <tcp_close_shutdown+0x178>)
 80181c0:	681a      	ldr	r2, [r3, #0]
 80181c2:	42a2      	cmp	r2, r4
 80181c4:	d06c      	beq.n	80182a0 <tcp_close_shutdown+0x168>
 80181c6:	2a00      	cmp	r2, #0
 80181c8:	d059      	beq.n	801827e <tcp_close_shutdown+0x146>
 80181ca:	68d3      	ldr	r3, [r2, #12]
 80181cc:	429c      	cmp	r4, r3
 80181ce:	d053      	beq.n	8018278 <tcp_close_shutdown+0x140>
 80181d0:	2b00      	cmp	r3, #0
 80181d2:	d054      	beq.n	801827e <tcp_close_shutdown+0x146>
 80181d4:	68da      	ldr	r2, [r3, #12]
 80181d6:	42a2      	cmp	r2, r4
 80181d8:	d04f      	beq.n	801827a <tcp_close_shutdown+0x142>
 80181da:	4613      	mov	r3, r2
 80181dc:	e7f8      	b.n	80181d0 <tcp_close_shutdown+0x98>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80181de:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80181e0:	f5b2 6f06 	cmp.w	r2, #2144	; 0x860
 80181e4:	d1c9      	bne.n	801817a <tcp_close_shutdown+0x42>
 80181e6:	e7b3      	b.n	8018150 <tcp_close_shutdown+0x18>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80181e8:	4b32      	ldr	r3, [pc, #200]	; (80182b4 <tcp_close_shutdown+0x17c>)
 80181ea:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80181ee:	4932      	ldr	r1, [pc, #200]	; (80182b8 <tcp_close_shutdown+0x180>)
 80181f0:	4832      	ldr	r0, [pc, #200]	; (80182bc <tcp_close_shutdown+0x184>)
 80181f2:	f008 fce1 	bl	8020bb8 <iprintf>
 80181f6:	e7c3      	b.n	8018180 <tcp_close_shutdown+0x48>
      TCP_RMV_ACTIVE(pcb);
 80181f8:	68e2      	ldr	r2, [r4, #12]
 80181fa:	601a      	str	r2, [r3, #0]
      if (tcp_input_pcb == pcb) {
 80181fc:	4b30      	ldr	r3, [pc, #192]	; (80182c0 <tcp_close_shutdown+0x188>)
      TCP_RMV_ACTIVE(pcb);
 80181fe:	2000      	movs	r0, #0
 8018200:	4a2a      	ldr	r2, [pc, #168]	; (80182ac <tcp_close_shutdown+0x174>)
 8018202:	2101      	movs	r1, #1
      if (tcp_input_pcb == pcb) {
 8018204:	681b      	ldr	r3, [r3, #0]
      TCP_RMV_ACTIVE(pcb);
 8018206:	60e0      	str	r0, [r4, #12]
      if (tcp_input_pcb == pcb) {
 8018208:	42a3      	cmp	r3, r4
      TCP_RMV_ACTIVE(pcb);
 801820a:	7011      	strb	r1, [r2, #0]
      if (tcp_input_pcb == pcb) {
 801820c:	d03e      	beq.n	801828c <tcp_close_shutdown+0x154>
        tcp_free(pcb);
 801820e:	4620      	mov	r0, r4
 8018210:	f7ff f846 	bl	80172a0 <tcp_free>
}
 8018214:	2000      	movs	r0, #0
 8018216:	b005      	add	sp, #20
 8018218:	bd30      	pop	{r4, r5, pc}
      return tcp_close_shutdown_fin(pcb);
 801821a:	4620      	mov	r0, r4
}
 801821c:	b005      	add	sp, #20
 801821e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 8018222:	f7fe bffd 	b.w	8017220 <tcp_close_shutdown_fin>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8018226:	4b23      	ldr	r3, [pc, #140]	; (80182b4 <tcp_close_shutdown+0x17c>)
 8018228:	f44f 72af 	mov.w	r2, #350	; 0x15e
 801822c:	4925      	ldr	r1, [pc, #148]	; (80182c4 <tcp_close_shutdown+0x18c>)
 801822e:	4823      	ldr	r0, [pc, #140]	; (80182bc <tcp_close_shutdown+0x184>)
 8018230:	f008 fcc2 	bl	8020bb8 <iprintf>
 8018234:	e786      	b.n	8018144 <tcp_close_shutdown+0xc>
  switch (pcb->state) {
 8018236:	4619      	mov	r1, r3
      pcb->listener = NULL;
 8018238:	2000      	movs	r0, #0
  switch (pcb->state) {
 801823a:	4b1d      	ldr	r3, [pc, #116]	; (80182b0 <tcp_close_shutdown+0x178>)
 801823c:	4d22      	ldr	r5, [pc, #136]	; (80182c8 <tcp_close_shutdown+0x190>)
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801823e:	681b      	ldr	r3, [r3, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8018240:	b133      	cbz	r3, 8018250 <tcp_close_shutdown+0x118>
    if (pcb->listener == lpcb) {
 8018242:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8018244:	4294      	cmp	r4, r2
      pcb->listener = NULL;
 8018246:	bf08      	it	eq
 8018248:	67d8      	streq	r0, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801824a:	68db      	ldr	r3, [r3, #12]
 801824c:	2b00      	cmp	r3, #0
 801824e:	d1f8      	bne.n	8018242 <tcp_close_shutdown+0x10a>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8018250:	3101      	adds	r1, #1
 8018252:	2904      	cmp	r1, #4
 8018254:	d002      	beq.n	801825c <tcp_close_shutdown+0x124>
 8018256:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
 801825a:	e7f0      	b.n	801823e <tcp_close_shutdown+0x106>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801825c:	4621      	mov	r1, r4
 801825e:	481b      	ldr	r0, [pc, #108]	; (80182cc <tcp_close_shutdown+0x194>)
 8018260:	f7ff fd0e 	bl	8017c80 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8018264:	7d23      	ldrb	r3, [r4, #20]
 8018266:	2b01      	cmp	r3, #1
 8018268:	d013      	beq.n	8018292 <tcp_close_shutdown+0x15a>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801826a:	4621      	mov	r1, r4
 801826c:	2003      	movs	r0, #3
 801826e:	f7fe f871 	bl	8016354 <memp_free>
}
 8018272:	2000      	movs	r0, #0
 8018274:	b005      	add	sp, #20
 8018276:	bd30      	pop	{r4, r5, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8018278:	4613      	mov	r3, r2
 801827a:	68e2      	ldr	r2, [r4, #12]
 801827c:	60da      	str	r2, [r3, #12]
 801827e:	2300      	movs	r3, #0
 8018280:	60e3      	str	r3, [r4, #12]
 8018282:	e7c4      	b.n	801820e <tcp_close_shutdown+0xd6>
      TCP_RMV_ACTIVE(pcb);
 8018284:	4613      	mov	r3, r2
 8018286:	68e2      	ldr	r2, [r4, #12]
 8018288:	60da      	str	r2, [r3, #12]
 801828a:	e7b7      	b.n	80181fc <tcp_close_shutdown+0xc4>
        tcp_trigger_input_pcb_close();
 801828c:	f001 ff02 	bl	801a094 <tcp_trigger_input_pcb_close>
 8018290:	e76d      	b.n	801816e <tcp_close_shutdown+0x36>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8018292:	4b08      	ldr	r3, [pc, #32]	; (80182b4 <tcp_close_shutdown+0x17c>)
 8018294:	22df      	movs	r2, #223	; 0xdf
 8018296:	490e      	ldr	r1, [pc, #56]	; (80182d0 <tcp_close_shutdown+0x198>)
 8018298:	4808      	ldr	r0, [pc, #32]	; (80182bc <tcp_close_shutdown+0x184>)
 801829a:	f008 fc8d 	bl	8020bb8 <iprintf>
 801829e:	e7e4      	b.n	801826a <tcp_close_shutdown+0x132>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80182a0:	68e2      	ldr	r2, [r4, #12]
 80182a2:	601a      	str	r2, [r3, #0]
 80182a4:	e7eb      	b.n	801827e <tcp_close_shutdown+0x146>
 80182a6:	bf00      	nop
 80182a8:	2003e2d8 	.word	0x2003e2d8
 80182ac:	2003e2d4 	.word	0x2003e2d4
 80182b0:	2003e2e4 	.word	0x2003e2e4
 80182b4:	0803dd54 	.word	0x0803dd54
 80182b8:	0803dd1c 	.word	0x0803dd1c
 80182bc:	08026bb8 	.word	0x08026bb8
 80182c0:	2003e2ec 	.word	0x2003e2ec
 80182c4:	0803dcfc 	.word	0x0803dcfc
 80182c8:	0803df14 	.word	0x0803df14
 80182cc:	2003e2e0 	.word	0x2003e2e0
 80182d0:	0803dd38 	.word	0x0803dd38

080182d4 <tcp_close>:
{
 80182d4:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80182d6:	b158      	cbz	r0, 80182f0 <tcp_close+0x1c>
  if (pcb->state != LISTEN) {
 80182d8:	7d03      	ldrb	r3, [r0, #20]
 80182da:	2b01      	cmp	r3, #1
 80182dc:	d003      	beq.n	80182e6 <tcp_close+0x12>
    tcp_set_flags(pcb, TF_RXCLOSED);
 80182de:	8b43      	ldrh	r3, [r0, #26]
 80182e0:	f043 0310 	orr.w	r3, r3, #16
 80182e4:	8343      	strh	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 80182e6:	2101      	movs	r1, #1
}
 80182e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return tcp_close_shutdown(pcb, 1);
 80182ec:	f7ff bf24 	b.w	8018138 <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80182f0:	4b04      	ldr	r3, [pc, #16]	; (8018304 <tcp_close+0x30>)
 80182f2:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80182f6:	4904      	ldr	r1, [pc, #16]	; (8018308 <tcp_close+0x34>)
 80182f8:	4804      	ldr	r0, [pc, #16]	; (801830c <tcp_close+0x38>)
 80182fa:	f008 fc5d 	bl	8020bb8 <iprintf>
}
 80182fe:	f06f 000f 	mvn.w	r0, #15
 8018302:	bd08      	pop	{r3, pc}
 8018304:	0803dd54 	.word	0x0803dd54
 8018308:	0803dce4 	.word	0x0803dce4
 801830c:	08026bb8 	.word	0x08026bb8

08018310 <tcp_recv_null>:
{
 8018310:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8018312:	b191      	cbz	r1, 801833a <tcp_recv_null+0x2a>
 8018314:	4614      	mov	r4, r2
  if (p != NULL) {
 8018316:	b912      	cbnz	r2, 801831e <tcp_recv_null+0xe>
  } else if (err == ERR_OK) {
 8018318:	b153      	cbz	r3, 8018330 <tcp_recv_null+0x20>
  return ERR_OK;
 801831a:	4610      	mov	r0, r2
}
 801831c:	bd10      	pop	{r4, pc}
    tcp_recved(pcb, p->tot_len);
 801831e:	4608      	mov	r0, r1
 8018320:	8911      	ldrh	r1, [r2, #8]
 8018322:	f7ff f8e5 	bl	80174f0 <tcp_recved>
    pbuf_free(p);
 8018326:	4620      	mov	r0, r4
 8018328:	f7fe faee 	bl	8016908 <pbuf_free>
  return ERR_OK;
 801832c:	2000      	movs	r0, #0
}
 801832e:	bd10      	pop	{r4, pc}
    return tcp_close(pcb);
 8018330:	4608      	mov	r0, r1
}
 8018332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 8018336:	f7ff bfcd 	b.w	80182d4 <tcp_close>
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801833a:	4b05      	ldr	r3, [pc, #20]	; (8018350 <tcp_recv_null+0x40>)
 801833c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8018340:	4904      	ldr	r1, [pc, #16]	; (8018354 <tcp_recv_null+0x44>)
 8018342:	4805      	ldr	r0, [pc, #20]	; (8018358 <tcp_recv_null+0x48>)
 8018344:	f008 fc38 	bl	8020bb8 <iprintf>
 8018348:	f06f 000f 	mvn.w	r0, #15
}
 801834c:	bd10      	pop	{r4, pc}
 801834e:	bf00      	nop
 8018350:	0803dd54 	.word	0x0803dd54
 8018354:	0803e058 	.word	0x0803e058
 8018358:	08026bb8 	.word	0x08026bb8

0801835c <tcp_process_refused_data>:
{
 801835c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801835e:	2800      	cmp	r0, #0
 8018360:	d035      	beq.n	80183ce <tcp_process_refused_data+0x72>
    u8_t refused_flags = pcb->refused_data->flags;
 8018362:	6f86      	ldr	r6, [r0, #120]	; 0x78
    pcb->refused_data = NULL;
 8018364:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8018366:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 801836a:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 801836c:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 801836e:	6783      	str	r3, [r0, #120]	; 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8018370:	b31d      	cbz	r5, 80183ba <tcp_process_refused_data+0x5e>
 8018372:	4601      	mov	r1, r0
 8018374:	4632      	mov	r2, r6
 8018376:	6900      	ldr	r0, [r0, #16]
 8018378:	47a8      	blx	r5
 801837a:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 801837c:	b135      	cbz	r5, 801838c <tcp_process_refused_data+0x30>
    } else if (err == ERR_ABRT) {
 801837e:	350d      	adds	r5, #13
 8018380:	d017      	beq.n	80183b2 <tcp_process_refused_data+0x56>
      return ERR_INPROGRESS;
 8018382:	f06f 0504 	mvn.w	r5, #4
      pcb->refused_data = refused_data;
 8018386:	67a6      	str	r6, [r4, #120]	; 0x78
}
 8018388:	4628      	mov	r0, r5
 801838a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801838c:	06bb      	lsls	r3, r7, #26
 801838e:	d5fb      	bpl.n	8018388 <tcp_process_refused_data+0x2c>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8018390:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8018392:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8018396:	d001      	beq.n	801839c <tcp_process_refused_data+0x40>
          pcb->rcv_wnd++;
 8018398:	3301      	adds	r3, #1
 801839a:	8523      	strh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 801839c:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
 80183a0:	2e00      	cmp	r6, #0
 80183a2:	d0f1      	beq.n	8018388 <tcp_process_refused_data+0x2c>
 80183a4:	2300      	movs	r3, #0
 80183a6:	4621      	mov	r1, r4
 80183a8:	6920      	ldr	r0, [r4, #16]
 80183aa:	461a      	mov	r2, r3
 80183ac:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 80183ae:	300d      	adds	r0, #13
 80183b0:	d1ea      	bne.n	8018388 <tcp_process_refused_data+0x2c>
          return ERR_ABRT;
 80183b2:	f06f 050c 	mvn.w	r5, #12
}
 80183b6:	4628      	mov	r0, r5
 80183b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80183ba:	462b      	mov	r3, r5
 80183bc:	4628      	mov	r0, r5
 80183be:	4632      	mov	r2, r6
 80183c0:	4621      	mov	r1, r4
 80183c2:	f7ff ffa5 	bl	8018310 <tcp_recv_null>
 80183c6:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 80183c8:	2d00      	cmp	r5, #0
 80183ca:	d1d8      	bne.n	801837e <tcp_process_refused_data+0x22>
 80183cc:	e7de      	b.n	801838c <tcp_process_refused_data+0x30>
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80183ce:	4b05      	ldr	r3, [pc, #20]	; (80183e4 <tcp_process_refused_data+0x88>)
 80183d0:	f240 6209 	movw	r2, #1545	; 0x609
 80183d4:	4904      	ldr	r1, [pc, #16]	; (80183e8 <tcp_process_refused_data+0x8c>)
 80183d6:	f06f 050f 	mvn.w	r5, #15
 80183da:	4804      	ldr	r0, [pc, #16]	; (80183ec <tcp_process_refused_data+0x90>)
 80183dc:	f008 fbec 	bl	8020bb8 <iprintf>
 80183e0:	e7d2      	b.n	8018388 <tcp_process_refused_data+0x2c>
 80183e2:	bf00      	nop
 80183e4:	0803dd54 	.word	0x0803dd54
 80183e8:	0803e008 	.word	0x0803e008
 80183ec:	08026bb8 	.word	0x08026bb8

080183f0 <tcp_fasttmr>:
{
 80183f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 80183f4:	4d1c      	ldr	r5, [pc, #112]	; (8018468 <tcp_fasttmr+0x78>)
        tcp_active_pcbs_changed = 0;
 80183f6:	2700      	movs	r7, #0
 80183f8:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8018470 <tcp_fasttmr+0x80>
  ++tcp_timer_ctr;
 80183fc:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 80183fe:	4e1b      	ldr	r6, [pc, #108]	; (801846c <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 8018400:	3301      	adds	r3, #1
 8018402:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 8018404:	f8d8 4000 	ldr.w	r4, [r8]
  while (pcb != NULL) {
 8018408:	b1bc      	cbz	r4, 801843a <tcp_fasttmr+0x4a>
    if (pcb->last_timer != tcp_timer_ctr) {
 801840a:	782a      	ldrb	r2, [r5, #0]
 801840c:	7fa3      	ldrb	r3, [r4, #30]
 801840e:	4293      	cmp	r3, r2
 8018410:	d015      	beq.n	801843e <tcp_fasttmr+0x4e>
      if (pcb->flags & TF_ACK_DELAY) {
 8018412:	8b63      	ldrh	r3, [r4, #26]
      pcb->last_timer = tcp_timer_ctr;
 8018414:	77a2      	strb	r2, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 8018416:	07d9      	lsls	r1, r3, #31
 8018418:	d41a      	bmi.n	8018450 <tcp_fasttmr+0x60>
      if (pcb->flags & TF_CLOSEPEND) {
 801841a:	071a      	lsls	r2, r3, #28
 801841c:	d411      	bmi.n	8018442 <tcp_fasttmr+0x52>
      if (pcb->refused_data != NULL) {
 801841e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
      next = pcb->next;
 8018420:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 8018424:	b133      	cbz	r3, 8018434 <tcp_fasttmr+0x44>
        tcp_process_refused_data(pcb);
 8018426:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 8018428:	7037      	strb	r7, [r6, #0]
        tcp_process_refused_data(pcb);
 801842a:	f7ff ff97 	bl	801835c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801842e:	7833      	ldrb	r3, [r6, #0]
 8018430:	2b00      	cmp	r3, #0
 8018432:	d1e7      	bne.n	8018404 <tcp_fasttmr+0x14>
      pcb = next;
 8018434:	464c      	mov	r4, r9
  while (pcb != NULL) {
 8018436:	2c00      	cmp	r4, #0
 8018438:	d1e7      	bne.n	801840a <tcp_fasttmr+0x1a>
}
 801843a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      pcb = pcb->next;
 801843e:	68e4      	ldr	r4, [r4, #12]
 8018440:	e7e2      	b.n	8018408 <tcp_fasttmr+0x18>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8018442:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 8018446:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8018448:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 801844a:	f7fe fee9 	bl	8017220 <tcp_close_shutdown_fin>
 801844e:	e7e6      	b.n	801841e <tcp_fasttmr+0x2e>
        tcp_ack_now(pcb);
 8018450:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 8018454:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 8018456:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 8018458:	f002 fe2c 	bl	801b0b4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801845c:	8b63      	ldrh	r3, [r4, #26]
 801845e:	f023 0303 	bic.w	r3, r3, #3
 8018462:	b29b      	uxth	r3, r3
 8018464:	8363      	strh	r3, [r4, #26]
 8018466:	e7d8      	b.n	801841a <tcp_fasttmr+0x2a>
 8018468:	2002a3f5 	.word	0x2002a3f5
 801846c:	2003e2d4 	.word	0x2003e2d4
 8018470:	2003e2d8 	.word	0x2003e2d8

08018474 <tcp_tmr>:
{
 8018474:	b508      	push	{r3, lr}
  tcp_fasttmr();
 8018476:	f7ff ffbb 	bl	80183f0 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 801847a:	4a06      	ldr	r2, [pc, #24]	; (8018494 <tcp_tmr+0x20>)
 801847c:	7813      	ldrb	r3, [r2, #0]
 801847e:	3301      	adds	r3, #1
 8018480:	b2db      	uxtb	r3, r3
 8018482:	7013      	strb	r3, [r2, #0]
 8018484:	07db      	lsls	r3, r3, #31
 8018486:	d400      	bmi.n	801848a <tcp_tmr+0x16>
}
 8018488:	bd08      	pop	{r3, pc}
 801848a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 801848e:	f7ff b981 	b.w	8017794 <tcp_slowtmr>
 8018492:	bf00      	nop
 8018494:	2002a3f4 	.word	0x2002a3f4

08018498 <tcp_next_iss>:
{
 8018498:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801849a:	b130      	cbz	r0, 80184aa <tcp_next_iss+0x12>
  iss += tcp_ticks;       /* XXX */
 801849c:	4b07      	ldr	r3, [pc, #28]	; (80184bc <tcp_next_iss+0x24>)
 801849e:	4a08      	ldr	r2, [pc, #32]	; (80184c0 <tcp_next_iss+0x28>)
 80184a0:	6818      	ldr	r0, [r3, #0]
 80184a2:	6812      	ldr	r2, [r2, #0]
 80184a4:	4410      	add	r0, r2
 80184a6:	6018      	str	r0, [r3, #0]
}
 80184a8:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80184aa:	4b06      	ldr	r3, [pc, #24]	; (80184c4 <tcp_next_iss+0x2c>)
 80184ac:	f640 02af 	movw	r2, #2223	; 0x8af
 80184b0:	4905      	ldr	r1, [pc, #20]	; (80184c8 <tcp_next_iss+0x30>)
 80184b2:	4806      	ldr	r0, [pc, #24]	; (80184cc <tcp_next_iss+0x34>)
 80184b4:	f008 fb80 	bl	8020bb8 <iprintf>
 80184b8:	e7f0      	b.n	801849c <tcp_next_iss+0x4>
 80184ba:	bf00      	nop
 80184bc:	200003d4 	.word	0x200003d4
 80184c0:	2003e2dc 	.word	0x2003e2dc
 80184c4:	0803dd54 	.word	0x0803dd54
 80184c8:	0803def8 	.word	0x0803def8
 80184cc:	08026bb8 	.word	0x08026bb8

080184d0 <tcp_eff_send_mss_netif>:
{
 80184d0:	b538      	push	{r3, r4, r5, lr}
 80184d2:	4605      	mov	r5, r0
 80184d4:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80184d6:	b172      	cbz	r2, 80184f6 <tcp_eff_send_mss_netif+0x26>
    if (outif == NULL) {
 80184d8:	b144      	cbz	r4, 80184ec <tcp_eff_send_mss_netif+0x1c>
    mtu = outif->mtu;
 80184da:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  if (mtu != 0) {
 80184dc:	b133      	cbz	r3, 80184ec <tcp_eff_send_mss_netif+0x1c>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80184de:	2b28      	cmp	r3, #40	; 0x28
 80184e0:	d906      	bls.n	80184f0 <tcp_eff_send_mss_netif+0x20>
 80184e2:	3b28      	subs	r3, #40	; 0x28
 80184e4:	b29b      	uxth	r3, r3
 80184e6:	429d      	cmp	r5, r3
 80184e8:	bf28      	it	cs
 80184ea:	461d      	movcs	r5, r3
}
 80184ec:	4628      	mov	r0, r5
 80184ee:	bd38      	pop	{r3, r4, r5, pc}
 80184f0:	2500      	movs	r5, #0
 80184f2:	4628      	mov	r0, r5
 80184f4:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80184f6:	4b04      	ldr	r3, [pc, #16]	; (8018508 <tcp_eff_send_mss_netif+0x38>)
 80184f8:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80184fc:	4903      	ldr	r1, [pc, #12]	; (801850c <tcp_eff_send_mss_netif+0x3c>)
 80184fe:	4804      	ldr	r0, [pc, #16]	; (8018510 <tcp_eff_send_mss_netif+0x40>)
 8018500:	f008 fb5a 	bl	8020bb8 <iprintf>
 8018504:	e7e8      	b.n	80184d8 <tcp_eff_send_mss_netif+0x8>
 8018506:	bf00      	nop
 8018508:	0803dd54 	.word	0x0803dd54
 801850c:	0803ddf8 	.word	0x0803ddf8
 8018510:	08026bb8 	.word	0x08026bb8

08018514 <tcp_connect>:
{
 8018514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8018516:	2800      	cmp	r0, #0
 8018518:	d07d      	beq.n	8018616 <tcp_connect+0x102>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801851a:	2900      	cmp	r1, #0
 801851c:	f000 8085 	beq.w	801862a <tcp_connect+0x116>
 8018520:	461f      	mov	r7, r3
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8018522:	7d03      	ldrb	r3, [r0, #20]
 8018524:	4604      	mov	r4, r0
 8018526:	2b00      	cmp	r3, #0
 8018528:	d165      	bne.n	80185f6 <tcp_connect+0xe2>
  ip_addr_set(&pcb->remote_ip, ipaddr);
 801852a:	680b      	ldr	r3, [r1, #0]
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801852c:	7a00      	ldrb	r0, [r0, #8]
  ip_addr_set(&pcb->remote_ip, ipaddr);
 801852e:	6063      	str	r3, [r4, #4]
  pcb->remote_port = port;
 8018530:	8322      	strh	r2, [r4, #24]
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8018532:	2800      	cmp	r0, #0
 8018534:	d046      	beq.n	80185c4 <tcp_connect+0xb0>
    netif = netif_get_by_index(pcb->netif_idx);
 8018536:	f7fe f901 	bl	801673c <netif_get_by_index>
 801853a:	4605      	mov	r5, r0
  if (netif == NULL) {
 801853c:	2d00      	cmp	r5, #0
 801853e:	d067      	beq.n	8018610 <tcp_connect+0xfc>
  if (ip_addr_isany(&pcb->local_ip)) {
 8018540:	6823      	ldr	r3, [r4, #0]
 8018542:	b90b      	cbnz	r3, 8018548 <tcp_connect+0x34>
    ip_addr_copy(pcb->local_ip, *local_ip);
 8018544:	686b      	ldr	r3, [r5, #4]
 8018546:	6023      	str	r3, [r4, #0]
  old_local_port = pcb->local_port;
 8018548:	8ae6      	ldrh	r6, [r4, #22]
  if (pcb->local_port == 0) {
 801854a:	b926      	cbnz	r6, 8018556 <tcp_connect+0x42>
    pcb->local_port = tcp_new_port();
 801854c:	f7fe fe34 	bl	80171b8 <tcp_new_port>
 8018550:	82e0      	strh	r0, [r4, #22]
    if (pcb->local_port == 0) {
 8018552:	2800      	cmp	r0, #0
 8018554:	d059      	beq.n	801860a <tcp_connect+0xf6>
  iss = tcp_next_iss(pcb);
 8018556:	4620      	mov	r0, r4
 8018558:	f7ff ff9e 	bl	8018498 <tcp_next_iss>
  pcb->rcv_nxt = 0;
 801855c:	2200      	movs	r2, #0
  pcb->lastack = iss - 1;
 801855e:	1e43      	subs	r3, r0, #1
  pcb->rcv_nxt = 0;
 8018560:	f8df e0fc 	ldr.w	lr, [pc, #252]	; 8018660 <tcp_connect+0x14c>
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8018564:	4629      	mov	r1, r5
  pcb->snd_wnd = TCP_WND;
 8018566:	f44f 6c06 	mov.w	ip, #2144	; 0x860
  pcb->mss = INITIAL_MSS;
 801856a:	f44f 7506 	mov.w	r5, #536	; 0x218
  pcb->snd_nxt = iss;
 801856e:	6520      	str	r0, [r4, #80]	; 0x50
  pcb->rcv_nxt = 0;
 8018570:	6262      	str	r2, [r4, #36]	; 0x24
  pcb->lastack = iss - 1;
 8018572:	6463      	str	r3, [r4, #68]	; 0x44
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8018574:	4628      	mov	r0, r5
  pcb->snd_wl2 = iss - 1;
 8018576:	65a3      	str	r3, [r4, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 8018578:	65e3      	str	r3, [r4, #92]	; 0x5c
  pcb->snd_wnd = TCP_WND;
 801857a:	f8a4 c060 	strh.w	ip, [r4, #96]	; 0x60
  pcb->mss = INITIAL_MSS;
 801857e:	8665      	strh	r5, [r4, #50]	; 0x32
  pcb->rcv_nxt = 0;
 8018580:	e9c4 e20a 	strd	lr, r2, [r4, #40]	; 0x28
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8018584:	1d22      	adds	r2, r4, #4
 8018586:	f7ff ffa3 	bl	80184d0 <tcp_eff_send_mss_netif>
  pcb->cwnd = 1;
 801858a:	2301      	movs	r3, #1
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 801858c:	8660      	strh	r0, [r4, #50]	; 0x32
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 801858e:	2102      	movs	r1, #2
  pcb->connected = connected;
 8018590:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8018594:	4620      	mov	r0, r4
  pcb->cwnd = 1;
 8018596:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 801859a:	f002 fb71 	bl	801ac80 <tcp_enqueue_flags>
  if (ret == ERR_OK) {
 801859e:	4605      	mov	r5, r0
 80185a0:	bb18      	cbnz	r0, 80185ea <tcp_connect+0xd6>
    pcb->state = SYN_SENT;
 80185a2:	2302      	movs	r3, #2
 80185a4:	7523      	strb	r3, [r4, #20]
    if (old_local_port != 0) {
 80185a6:	b1a6      	cbz	r6, 80185d2 <tcp_connect+0xbe>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80185a8:	4b25      	ldr	r3, [pc, #148]	; (8018640 <tcp_connect+0x12c>)
 80185aa:	681a      	ldr	r2, [r3, #0]
 80185ac:	42a2      	cmp	r2, r4
 80185ae:	d00e      	beq.n	80185ce <tcp_connect+0xba>
 80185b0:	b17a      	cbz	r2, 80185d2 <tcp_connect+0xbe>
 80185b2:	68d3      	ldr	r3, [r2, #12]
 80185b4:	429c      	cmp	r4, r3
 80185b6:	d01a      	beq.n	80185ee <tcp_connect+0xda>
 80185b8:	b15b      	cbz	r3, 80185d2 <tcp_connect+0xbe>
 80185ba:	68da      	ldr	r2, [r3, #12]
 80185bc:	42a2      	cmp	r2, r4
 80185be:	d017      	beq.n	80185f0 <tcp_connect+0xdc>
 80185c0:	4613      	mov	r3, r2
 80185c2:	e7f9      	b.n	80185b8 <tcp_connect+0xa4>
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80185c4:	1d20      	adds	r0, r4, #4
 80185c6:	f005 fe71 	bl	801e2ac <ip4_route>
 80185ca:	4605      	mov	r5, r0
 80185cc:	e7b6      	b.n	801853c <tcp_connect+0x28>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80185ce:	68e2      	ldr	r2, [r4, #12]
 80185d0:	601a      	str	r2, [r3, #0]
    TCP_REG_ACTIVE(pcb);
 80185d2:	4b1c      	ldr	r3, [pc, #112]	; (8018644 <tcp_connect+0x130>)
 80185d4:	681a      	ldr	r2, [r3, #0]
 80185d6:	601c      	str	r4, [r3, #0]
 80185d8:	60e2      	str	r2, [r4, #12]
 80185da:	f003 f89f 	bl	801b71c <tcp_timer_needed>
 80185de:	4b1a      	ldr	r3, [pc, #104]	; (8018648 <tcp_connect+0x134>)
 80185e0:	2201      	movs	r2, #1
    tcp_output(pcb);
 80185e2:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(pcb);
 80185e4:	701a      	strb	r2, [r3, #0]
    tcp_output(pcb);
 80185e6:	f002 fd65 	bl	801b0b4 <tcp_output>
}
 80185ea:	4628      	mov	r0, r5
 80185ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80185ee:	4613      	mov	r3, r2
 80185f0:	68e2      	ldr	r2, [r4, #12]
 80185f2:	60da      	str	r2, [r3, #12]
 80185f4:	e7ed      	b.n	80185d2 <tcp_connect+0xbe>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 80185f6:	4b15      	ldr	r3, [pc, #84]	; (801864c <tcp_connect+0x138>)
 80185f8:	f44f 6287 	mov.w	r2, #1080	; 0x438
 80185fc:	4914      	ldr	r1, [pc, #80]	; (8018650 <tcp_connect+0x13c>)
 80185fe:	f06f 0509 	mvn.w	r5, #9
 8018602:	4814      	ldr	r0, [pc, #80]	; (8018654 <tcp_connect+0x140>)
 8018604:	f008 fad8 	bl	8020bb8 <iprintf>
 8018608:	e7ef      	b.n	80185ea <tcp_connect+0xd6>
      return ERR_BUF;
 801860a:	f06f 0501 	mvn.w	r5, #1
 801860e:	e7ec      	b.n	80185ea <tcp_connect+0xd6>
    return ERR_RTE;
 8018610:	f06f 0503 	mvn.w	r5, #3
 8018614:	e7e9      	b.n	80185ea <tcp_connect+0xd6>
  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8018616:	4b0d      	ldr	r3, [pc, #52]	; (801864c <tcp_connect+0x138>)
 8018618:	f240 4235 	movw	r2, #1077	; 0x435
 801861c:	490e      	ldr	r1, [pc, #56]	; (8018658 <tcp_connect+0x144>)
 801861e:	f06f 050f 	mvn.w	r5, #15
 8018622:	480c      	ldr	r0, [pc, #48]	; (8018654 <tcp_connect+0x140>)
 8018624:	f008 fac8 	bl	8020bb8 <iprintf>
 8018628:	e7df      	b.n	80185ea <tcp_connect+0xd6>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801862a:	4b08      	ldr	r3, [pc, #32]	; (801864c <tcp_connect+0x138>)
 801862c:	f240 4236 	movw	r2, #1078	; 0x436
 8018630:	490a      	ldr	r1, [pc, #40]	; (801865c <tcp_connect+0x148>)
 8018632:	f06f 050f 	mvn.w	r5, #15
 8018636:	4807      	ldr	r0, [pc, #28]	; (8018654 <tcp_connect+0x140>)
 8018638:	f008 fabe 	bl	8020bb8 <iprintf>
 801863c:	e7d5      	b.n	80185ea <tcp_connect+0xd6>
 801863e:	bf00      	nop
 8018640:	2003e2e4 	.word	0x2003e2e4
 8018644:	2003e2d8 	.word	0x2003e2d8
 8018648:	2003e2d4 	.word	0x2003e2d4
 801864c:	0803dd54 	.word	0x0803dd54
 8018650:	0803ddc8 	.word	0x0803ddc8
 8018654:	08026bb8 	.word	0x08026bb8
 8018658:	0803dd90 	.word	0x0803dd90
 801865c:	0803ddac 	.word	0x0803ddac
 8018660:	08600860 	.word	0x08600860

08018664 <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
 8018664:	b308      	cbz	r0, 80186aa <tcp_netif_ip_addr_changed+0x46>
 8018666:	6802      	ldr	r2, [r0, #0]
{
 8018668:	b538      	push	{r3, r4, r5, lr}
 801866a:	4605      	mov	r5, r0
  if (!ip_addr_isany(old_addr)) {
 801866c:	b902      	cbnz	r2, 8018670 <tcp_netif_ip_addr_changed+0xc>
}
 801866e:	bd38      	pop	{r3, r4, r5, pc}
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8018670:	4b0e      	ldr	r3, [pc, #56]	; (80186ac <tcp_netif_ip_addr_changed+0x48>)
 8018672:	460c      	mov	r4, r1
 8018674:	6819      	ldr	r1, [r3, #0]
 8018676:	f7ff fc39 	bl	8017eec <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801867a:	4b0d      	ldr	r3, [pc, #52]	; (80186b0 <tcp_netif_ip_addr_changed+0x4c>)
 801867c:	4628      	mov	r0, r5
 801867e:	6819      	ldr	r1, [r3, #0]
 8018680:	f7ff fc34 	bl	8017eec <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 8018684:	2c00      	cmp	r4, #0
 8018686:	d0f2      	beq.n	801866e <tcp_netif_ip_addr_changed+0xa>
 8018688:	6823      	ldr	r3, [r4, #0]
 801868a:	2b00      	cmp	r3, #0
 801868c:	d0ef      	beq.n	801866e <tcp_netif_ip_addr_changed+0xa>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801868e:	4b09      	ldr	r3, [pc, #36]	; (80186b4 <tcp_netif_ip_addr_changed+0x50>)
 8018690:	681b      	ldr	r3, [r3, #0]
 8018692:	2b00      	cmp	r3, #0
 8018694:	d0eb      	beq.n	801866e <tcp_netif_ip_addr_changed+0xa>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8018696:	6819      	ldr	r1, [r3, #0]
 8018698:	682a      	ldr	r2, [r5, #0]
 801869a:	4291      	cmp	r1, r2
 801869c:	d101      	bne.n	80186a2 <tcp_netif_ip_addr_changed+0x3e>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801869e:	6822      	ldr	r2, [r4, #0]
 80186a0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80186a2:	68db      	ldr	r3, [r3, #12]
 80186a4:	2b00      	cmp	r3, #0
 80186a6:	d1f6      	bne.n	8018696 <tcp_netif_ip_addr_changed+0x32>
}
 80186a8:	bd38      	pop	{r3, r4, r5, pc}
 80186aa:	4770      	bx	lr
 80186ac:	2003e2d8 	.word	0x2003e2d8
 80186b0:	2003e2e4 	.word	0x2003e2e4
 80186b4:	2003e2e0 	.word	0x2003e2e0

080186b8 <tcp_free_ooseq>:
{
 80186b8:	b538      	push	{r3, r4, r5, lr}
 80186ba:	4605      	mov	r5, r0
  if (pcb->ooseq) {
 80186bc:	6f40      	ldr	r0, [r0, #116]	; 0x74
 80186be:	b130      	cbz	r0, 80186ce <tcp_free_ooseq+0x16>
    struct tcp_seg *next = seg->next;
 80186c0:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 80186c2:	f7fe ff55 	bl	8017570 <tcp_seg_free>
  while (seg != NULL) {
 80186c6:	4620      	mov	r0, r4
 80186c8:	2c00      	cmp	r4, #0
 80186ca:	d1f9      	bne.n	80186c0 <tcp_free_ooseq+0x8>
    pcb->ooseq = NULL;
 80186cc:	676c      	str	r4, [r5, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80186ce:	bd38      	pop	{r3, r4, r5, pc}

080186d0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80186d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80186d4:	4606      	mov	r6, r0
 80186d6:	2800      	cmp	r0, #0
 80186d8:	f000 808a 	beq.w	80187f0 <tcp_parseopt+0x120>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80186dc:	4b51      	ldr	r3, [pc, #324]	; (8018824 <tcp_parseopt+0x154>)
 80186de:	881f      	ldrh	r7, [r3, #0]
 80186e0:	2f00      	cmp	r7, #0
 80186e2:	d063      	beq.n	80187ac <tcp_parseopt+0xdc>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80186e4:	4a50      	ldr	r2, [pc, #320]	; (8018828 <tcp_parseopt+0x158>)
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80186e6:	2300      	movs	r3, #0
 80186e8:	4c50      	ldr	r4, [pc, #320]	; (801882c <tcp_parseopt+0x15c>)
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80186ea:	f8b2 c000 	ldrh.w	ip, [r2]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80186ee:	461a      	mov	r2, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80186f0:	484f      	ldr	r0, [pc, #316]	; (8018830 <tcp_parseopt+0x160>)
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80186f2:	4950      	ldr	r1, [pc, #320]	; (8018834 <tcp_parseopt+0x164>)
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80186f4:	fa5f fa8c 	uxtb.w	sl, ip
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80186f8:	8023      	strh	r3, [r4, #0]
 80186fa:	461c      	mov	r4, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80186fc:	6805      	ldr	r5, [r0, #0]
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80186fe:	f8d1 8000 	ldr.w	r8, [r1]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018702:	4613      	mov	r3, r2
 8018704:	f04f 0e00 	mov.w	lr, #0
    return tcphdr_opt2[idx];
 8018708:	eba2 090a 	sub.w	r9, r2, sl
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801870c:	eb02 000e 	add.w	r0, r2, lr
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018710:	429f      	cmp	r7, r3
  u16_t optidx = tcp_optidx++;
 8018712:	f103 0101 	add.w	r1, r3, #1
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8018716:	fa1f fb80 	uxth.w	fp, r0
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801871a:	d977      	bls.n	801880c <tcp_parseopt+0x13c>
  u16_t optidx = tcp_optidx++;
 801871c:	b289      	uxth	r1, r1
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801871e:	2d00      	cmp	r5, #0
 8018720:	d034      	beq.n	801878c <tcp_parseopt+0xbc>
    return tcphdr_opt2[idx];
 8018722:	eb09 040e 	add.w	r4, r9, lr
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8018726:	45dc      	cmp	ip, fp
    return tcphdr_opt2[idx];
 8018728:	b2e4      	uxtb	r4, r4
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801872a:	d831      	bhi.n	8018790 <tcp_parseopt+0xc0>
    return tcphdr_opt2[idx];
 801872c:	f815 b004 	ldrb.w	fp, [r5, r4]
      u8_t opt = tcp_get_next_optbyte();
      switch (opt) {
 8018730:	f1bb 0f01 	cmp.w	fp, #1
 8018734:	d032      	beq.n	801879c <tcp_parseopt+0xcc>
 8018736:	d371      	bcc.n	801881c <tcp_parseopt+0x14c>
 8018738:	f1bb 0f02 	cmp.w	fp, #2
 801873c:	d138      	bne.n	80187b0 <tcp_parseopt+0xe0>
  u16_t optidx = tcp_optidx++;
 801873e:	1c98      	adds	r0, r3, #2
 8018740:	b280      	uxth	r0, r0
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8018742:	b10d      	cbz	r5, 8018748 <tcp_parseopt+0x78>
 8018744:	4561      	cmp	r1, ip
 8018746:	d23e      	bcs.n	80187c6 <tcp_parseopt+0xf6>
    return opts[optidx];
 8018748:	4441      	add	r1, r8
 801874a:	7d0a      	ldrb	r2, [r1, #20]
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801874c:	2a04      	cmp	r2, #4
 801874e:	d162      	bne.n	8018816 <tcp_parseopt+0x146>
 8018750:	1c42      	adds	r2, r0, #1
 8018752:	42ba      	cmp	r2, r7
 8018754:	da5f      	bge.n	8018816 <tcp_parseopt+0x146>
  u16_t optidx = tcp_optidx++;
 8018756:	1cd9      	adds	r1, r3, #3
 8018758:	1d1a      	adds	r2, r3, #4
 801875a:	b289      	uxth	r1, r1
 801875c:	b292      	uxth	r2, r2
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801875e:	2d00      	cmp	r5, #0
 8018760:	d04e      	beq.n	8018800 <tcp_parseopt+0x130>
 8018762:	4584      	cmp	ip, r0
 8018764:	d939      	bls.n	80187da <tcp_parseopt+0x10a>
    return opts[optidx];
 8018766:	4440      	add	r0, r8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8018768:	458c      	cmp	ip, r1
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801876a:	7d03      	ldrb	r3, [r0, #20]
 801876c:	ea4f 2303 	mov.w	r3, r3, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8018770:	d83b      	bhi.n	80187ea <tcp_parseopt+0x11a>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8018772:	eba1 010a 	sub.w	r1, r1, sl
    return tcphdr_opt2[idx];
 8018776:	b2c9      	uxtb	r1, r1
 8018778:	5c69      	ldrb	r1, [r5, r1]
          mss |= tcp_get_next_optbyte();
 801877a:	430b      	orrs	r3, r1
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801877c:	1e59      	subs	r1, r3, #1
 801877e:	f5b1 7f06 	cmp.w	r1, #536	; 0x218
 8018782:	bf28      	it	cs
 8018784:	f44f 7306 	movcs.w	r3, #536	; 0x218
 8018788:	8673      	strh	r3, [r6, #50]	; 0x32
          break;
 801878a:	e01a      	b.n	80187c2 <tcp_parseopt+0xf2>
 801878c:	eb02 000e 	add.w	r0, r2, lr
    return opts[optidx];
 8018790:	4440      	add	r0, r8
 8018792:	f890 b014 	ldrb.w	fp, [r0, #20]
      switch (opt) {
 8018796:	f1bb 0f01 	cmp.w	fp, #1
 801879a:	d1cc      	bne.n	8018736 <tcp_parseopt+0x66>
 801879c:	f10e 0e01 	add.w	lr, lr, #1
  u16_t optidx = tcp_optidx++;
 80187a0:	460b      	mov	r3, r1
 80187a2:	465c      	mov	r4, fp
 80187a4:	e7b2      	b.n	801870c <tcp_parseopt+0x3c>
 80187a6:	3302      	adds	r3, #2
 80187a8:	4a20      	ldr	r2, [pc, #128]	; (801882c <tcp_parseopt+0x15c>)
 80187aa:	8013      	strh	r3, [r2, #0]
             can skip past them. */
          tcp_optidx += data - 2;
      }
    }
  }
}
 80187ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80187b0:	b10d      	cbz	r5, 80187b6 <tcp_parseopt+0xe6>
 80187b2:	4561      	cmp	r1, ip
 80187b4:	d20c      	bcs.n	80187d0 <tcp_parseopt+0x100>
    return opts[optidx];
 80187b6:	4441      	add	r1, r8
 80187b8:	7d0a      	ldrb	r2, [r1, #20]
          if (data < 2) {
 80187ba:	2a01      	cmp	r2, #1
 80187bc:	d9f3      	bls.n	80187a6 <tcp_parseopt+0xd6>
          tcp_optidx += data - 2;
 80187be:	441a      	add	r2, r3
 80187c0:	b292      	uxth	r2, r2
 80187c2:	2401      	movs	r4, #1
 80187c4:	e79d      	b.n	8018702 <tcp_parseopt+0x32>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80187c6:	eba1 010a 	sub.w	r1, r1, sl
    return tcphdr_opt2[idx];
 80187ca:	b2c9      	uxtb	r1, r1
 80187cc:	5c6a      	ldrb	r2, [r5, r1]
 80187ce:	e7bd      	b.n	801874c <tcp_parseopt+0x7c>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80187d0:	eba1 010a 	sub.w	r1, r1, sl
    return tcphdr_opt2[idx];
 80187d4:	b2c9      	uxtb	r1, r1
 80187d6:	5c6a      	ldrb	r2, [r5, r1]
 80187d8:	e7ef      	b.n	80187ba <tcp_parseopt+0xea>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80187da:	eba0 000a 	sub.w	r0, r0, sl
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80187de:	458c      	cmp	ip, r1
    return tcphdr_opt2[idx];
 80187e0:	b2c0      	uxtb	r0, r0
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80187e2:	5c2b      	ldrb	r3, [r5, r0]
 80187e4:	ea4f 2303 	mov.w	r3, r3, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80187e8:	d9c3      	bls.n	8018772 <tcp_parseopt+0xa2>
    return opts[optidx];
 80187ea:	4441      	add	r1, r8
 80187ec:	7d09      	ldrb	r1, [r1, #20]
 80187ee:	e7c4      	b.n	801877a <tcp_parseopt+0xaa>
  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80187f0:	4b11      	ldr	r3, [pc, #68]	; (8018838 <tcp_parseopt+0x168>)
 80187f2:	f240 727d 	movw	r2, #1917	; 0x77d
 80187f6:	4911      	ldr	r1, [pc, #68]	; (801883c <tcp_parseopt+0x16c>)
 80187f8:	4811      	ldr	r0, [pc, #68]	; (8018840 <tcp_parseopt+0x170>)
 80187fa:	f008 f9dd 	bl	8020bb8 <iprintf>
 80187fe:	e76d      	b.n	80186dc <tcp_parseopt+0xc>
    return opts[optidx];
 8018800:	4440      	add	r0, r8
 8018802:	4441      	add	r1, r8
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8018804:	7d03      	ldrb	r3, [r0, #20]
    return opts[optidx];
 8018806:	7d09      	ldrb	r1, [r1, #20]
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8018808:	021b      	lsls	r3, r3, #8
 801880a:	e7b6      	b.n	801877a <tcp_parseopt+0xaa>
 801880c:	2c00      	cmp	r4, #0
 801880e:	d0cd      	beq.n	80187ac <tcp_parseopt+0xdc>
 8018810:	4a06      	ldr	r2, [pc, #24]	; (801882c <tcp_parseopt+0x15c>)
 8018812:	8013      	strh	r3, [r2, #0]
 8018814:	e7ca      	b.n	80187ac <tcp_parseopt+0xdc>
 8018816:	4b05      	ldr	r3, [pc, #20]	; (801882c <tcp_parseopt+0x15c>)
 8018818:	8018      	strh	r0, [r3, #0]
 801881a:	e7c7      	b.n	80187ac <tcp_parseopt+0xdc>
 801881c:	4b03      	ldr	r3, [pc, #12]	; (801882c <tcp_parseopt+0x15c>)
 801881e:	8019      	strh	r1, [r3, #0]
 8018820:	e7c4      	b.n	80187ac <tcp_parseopt+0xdc>
 8018822:	bf00      	nop
 8018824:	2002a430 	.word	0x2002a430
 8018828:	2002a428 	.word	0x2002a428
 801882c:	2002a420 	.word	0x2002a420
 8018830:	2002a42c 	.word	0x2002a42c
 8018834:	2002a424 	.word	0x2002a424
 8018838:	0803e598 	.word	0x0803e598
 801883c:	0803e5cc 	.word	0x0803e5cc
 8018840:	08026bb8 	.word	0x08026bb8

08018844 <tcp_oos_insert_segment>:
{
 8018844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018846:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8018848:	4605      	mov	r5, r0
 801884a:	2800      	cmp	r0, #0
 801884c:	d03e      	beq.n	80188cc <tcp_oos_insert_segment+0x88>
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801884e:	68eb      	ldr	r3, [r5, #12]
 8018850:	8998      	ldrh	r0, [r3, #12]
 8018852:	f7fc f9eb 	bl	8014c2c <lwip_htons>
 8018856:	07c2      	lsls	r2, r0, #31
 8018858:	d432      	bmi.n	80188c0 <tcp_oos_insert_segment+0x7c>
 801885a:	4e20      	ldr	r6, [pc, #128]	; (80188dc <tcp_oos_insert_segment+0x98>)
 801885c:	e005      	b.n	801886a <tcp_oos_insert_segment+0x26>
      next = next->next;
 801885e:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 8018860:	4620      	mov	r0, r4
 8018862:	f7fe fe85 	bl	8017570 <tcp_seg_free>
 8018866:	463c      	mov	r4, r7
    while (next &&
 8018868:	b1ef      	cbz	r7, 80188a6 <tcp_oos_insert_segment+0x62>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801886a:	68e1      	ldr	r1, [r4, #12]
 801886c:	8923      	ldrh	r3, [r4, #8]
 801886e:	6848      	ldr	r0, [r1, #4]
 8018870:	6837      	ldr	r7, [r6, #0]
 8018872:	892a      	ldrh	r2, [r5, #8]
 8018874:	4403      	add	r3, r0
 8018876:	443a      	add	r2, r7
 8018878:	1ad3      	subs	r3, r2, r3
    while (next &&
 801887a:	2b00      	cmp	r3, #0
 801887c:	db15      	blt.n	80188aa <tcp_oos_insert_segment+0x66>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801887e:	8988      	ldrh	r0, [r1, #12]
 8018880:	f7fc f9d4 	bl	8014c2c <lwip_htons>
 8018884:	07c3      	lsls	r3, r0, #31
 8018886:	d5ea      	bpl.n	801885e <tcp_oos_insert_segment+0x1a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8018888:	68eb      	ldr	r3, [r5, #12]
 801888a:	2001      	movs	r0, #1
 801888c:	899f      	ldrh	r7, [r3, #12]
 801888e:	f7fc f9cd 	bl	8014c2c <lwip_htons>
 8018892:	68eb      	ldr	r3, [r5, #12]
 8018894:	4338      	orrs	r0, r7
      next = next->next;
 8018896:	6827      	ldr	r7, [r4, #0]
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8018898:	8198      	strh	r0, [r3, #12]
      tcp_seg_free(old_seg);
 801889a:	4620      	mov	r0, r4
 801889c:	f7fe fe68 	bl	8017570 <tcp_seg_free>
 80188a0:	463c      	mov	r4, r7
    while (next &&
 80188a2:	2f00      	cmp	r7, #0
 80188a4:	d1e1      	bne.n	801886a <tcp_oos_insert_segment+0x26>
  cseg->next = next;
 80188a6:	602c      	str	r4, [r5, #0]
}
 80188a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80188aa:	1a12      	subs	r2, r2, r0
    if (next &&
 80188ac:	2a00      	cmp	r2, #0
 80188ae:	ddfa      	ble.n	80188a6 <tcp_oos_insert_segment+0x62>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80188b0:	1bc1      	subs	r1, r0, r7
      pbuf_realloc(cseg->p, cseg->len);
 80188b2:	6868      	ldr	r0, [r5, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80188b4:	b289      	uxth	r1, r1
 80188b6:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80188b8:	f7fe f932 	bl	8016b20 <pbuf_realloc>
  cseg->next = next;
 80188bc:	602c      	str	r4, [r5, #0]
}
 80188be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_segs_free(next);
 80188c0:	4620      	mov	r0, r4
    next = NULL;
 80188c2:	2400      	movs	r4, #0
    tcp_segs_free(next);
 80188c4:	f7fe fe62 	bl	801758c <tcp_segs_free>
  cseg->next = next;
 80188c8:	602c      	str	r4, [r5, #0]
}
 80188ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80188cc:	4b04      	ldr	r3, [pc, #16]	; (80188e0 <tcp_oos_insert_segment+0x9c>)
 80188ce:	f240 421f 	movw	r2, #1055	; 0x41f
 80188d2:	4904      	ldr	r1, [pc, #16]	; (80188e4 <tcp_oos_insert_segment+0xa0>)
 80188d4:	4804      	ldr	r0, [pc, #16]	; (80188e8 <tcp_oos_insert_segment+0xa4>)
 80188d6:	f008 f96f 	bl	8020bb8 <iprintf>
 80188da:	e7b8      	b.n	801884e <tcp_oos_insert_segment+0xa>
 80188dc:	2002a41c 	.word	0x2002a41c
 80188e0:	0803e598 	.word	0x0803e598
 80188e4:	0803e570 	.word	0x0803e570
 80188e8:	08026bb8 	.word	0x08026bb8

080188ec <tcp_input_delayed_close>:
{
 80188ec:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80188ee:	4604      	mov	r4, r0
 80188f0:	b930      	cbnz	r0, 8018900 <tcp_input_delayed_close+0x14>
 80188f2:	4b0f      	ldr	r3, [pc, #60]	; (8018930 <tcp_input_delayed_close+0x44>)
 80188f4:	f240 225a 	movw	r2, #602	; 0x25a
 80188f8:	490e      	ldr	r1, [pc, #56]	; (8018934 <tcp_input_delayed_close+0x48>)
 80188fa:	480f      	ldr	r0, [pc, #60]	; (8018938 <tcp_input_delayed_close+0x4c>)
 80188fc:	f008 f95c 	bl	8020bb8 <iprintf>
  if (recv_flags & TF_CLOSED) {
 8018900:	4b0e      	ldr	r3, [pc, #56]	; (801893c <tcp_input_delayed_close+0x50>)
 8018902:	7818      	ldrb	r0, [r3, #0]
 8018904:	f010 0010 	ands.w	r0, r0, #16
 8018908:	d011      	beq.n	801892e <tcp_input_delayed_close+0x42>
    if (!(pcb->flags & TF_RXCLOSED)) {
 801890a:	8b63      	ldrh	r3, [r4, #26]
 801890c:	06db      	lsls	r3, r3, #27
 801890e:	d406      	bmi.n	801891e <tcp_input_delayed_close+0x32>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8018910:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8018914:	b11b      	cbz	r3, 801891e <tcp_input_delayed_close+0x32>
 8018916:	f06f 010e 	mvn.w	r1, #14
 801891a:	6920      	ldr	r0, [r4, #16]
 801891c:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801891e:	4621      	mov	r1, r4
 8018920:	4807      	ldr	r0, [pc, #28]	; (8018940 <tcp_input_delayed_close+0x54>)
 8018922:	f7ff f9ad 	bl	8017c80 <tcp_pcb_remove>
    tcp_free(pcb);
 8018926:	4620      	mov	r0, r4
 8018928:	f7fe fcba 	bl	80172a0 <tcp_free>
 801892c:	2001      	movs	r0, #1
}
 801892e:	bd10      	pop	{r4, pc}
 8018930:	0803e598 	.word	0x0803e598
 8018934:	0803e548 	.word	0x0803e548
 8018938:	08026bb8 	.word	0x08026bb8
 801893c:	2002a418 	.word	0x2002a418
 8018940:	2003e2d8 	.word	0x2003e2d8

08018944 <tcp_free_acked_segments.isra.1>:
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 8018944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018948:	b083      	sub	sp, #12
 801894a:	9201      	str	r2, [sp, #4]
  while (seg_list != NULL &&
 801894c:	2900      	cmp	r1, #0
 801894e:	d03e      	beq.n	80189ce <tcp_free_acked_segments.isra.1+0x8a>
 8018950:	4606      	mov	r6, r0
 8018952:	460c      	mov	r4, r1
 8018954:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8018a08 <tcp_free_acked_segments.isra.1+0xc4>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8018958:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 80189fc <tcp_free_acked_segments.isra.1+0xb8>
 801895c:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8018a0c <tcp_free_acked_segments.isra.1+0xc8>
 8018960:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8018a04 <tcp_free_acked_segments.isra.1+0xc0>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8018964:	68e3      	ldr	r3, [r4, #12]
 8018966:	6858      	ldr	r0, [r3, #4]
 8018968:	f7fc f964 	bl	8014c34 <lwip_htonl>
 801896c:	68e3      	ldr	r3, [r4, #12]
 801896e:	4605      	mov	r5, r0
 8018970:	8927      	ldrh	r7, [r4, #8]
 8018972:	8998      	ldrh	r0, [r3, #12]
 8018974:	f7fc f95a 	bl	8014c2c <lwip_htons>
 8018978:	f8d8 3000 	ldr.w	r3, [r8]
 801897c:	f010 0003 	ands.w	r0, r0, #3
 8018980:	eba5 0503 	sub.w	r5, r5, r3
 8018984:	bf18      	it	ne
 8018986:	2001      	movne	r0, #1
 8018988:	443d      	add	r5, r7
 801898a:	4428      	add	r0, r5
  while (seg_list != NULL &&
 801898c:	2800      	cmp	r0, #0
 801898e:	dc2e      	bgt.n	80189ee <tcp_free_acked_segments.isra.1+0xaa>
    seg_list = seg_list->next;
 8018990:	e9d4 5000 	ldrd	r5, r0, [r4]
    clen = pbuf_clen(next->p);
 8018994:	f7fe f920 	bl	8016bd8 <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8018998:	8833      	ldrh	r3, [r6, #0]
    clen = pbuf_clen(next->p);
 801899a:	4607      	mov	r7, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801899c:	4298      	cmp	r0, r3
 801899e:	d81d      	bhi.n	80189dc <tcp_free_acked_segments.isra.1+0x98>
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80189a0:	4a15      	ldr	r2, [pc, #84]	; (80189f8 <tcp_free_acked_segments.isra.1+0xb4>)
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80189a2:	1bdf      	subs	r7, r3, r7
    tcp_seg_free(next);
 80189a4:	4620      	mov	r0, r4
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80189a6:	8811      	ldrh	r1, [r2, #0]
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80189a8:	8037      	strh	r7, [r6, #0]
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80189aa:	8923      	ldrh	r3, [r4, #8]
  while (seg_list != NULL &&
 80189ac:	462c      	mov	r4, r5
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80189ae:	440b      	add	r3, r1
 80189b0:	8013      	strh	r3, [r2, #0]
    tcp_seg_free(next);
 80189b2:	f7fe fddd 	bl	8017570 <tcp_seg_free>
    if (pcb->snd_queuelen != 0) {
 80189b6:	8833      	ldrh	r3, [r6, #0]
 80189b8:	b16b      	cbz	r3, 80189d6 <tcp_free_acked_segments.isra.1+0x92>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80189ba:	b965      	cbnz	r5, 80189d6 <tcp_free_acked_segments.isra.1+0x92>
 80189bc:	9b01      	ldr	r3, [sp, #4]
 80189be:	b953      	cbnz	r3, 80189d6 <tcp_free_acked_segments.isra.1+0x92>
 80189c0:	4b0e      	ldr	r3, [pc, #56]	; (80189fc <tcp_free_acked_segments.isra.1+0xb8>)
 80189c2:	f240 4262 	movw	r2, #1122	; 0x462
 80189c6:	490e      	ldr	r1, [pc, #56]	; (8018a00 <tcp_free_acked_segments.isra.1+0xbc>)
 80189c8:	480e      	ldr	r0, [pc, #56]	; (8018a04 <tcp_free_acked_segments.isra.1+0xc0>)
 80189ca:	f008 f8f5 	bl	8020bb8 <iprintf>
  while (seg_list != NULL &&
 80189ce:	2000      	movs	r0, #0
}
 80189d0:	b003      	add	sp, #12
 80189d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (seg_list != NULL &&
 80189d6:	2d00      	cmp	r5, #0
 80189d8:	d1c4      	bne.n	8018964 <tcp_free_acked_segments.isra.1+0x20>
 80189da:	e7f8      	b.n	80189ce <tcp_free_acked_segments.isra.1+0x8a>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80189dc:	465b      	mov	r3, fp
 80189de:	f240 4257 	movw	r2, #1111	; 0x457
 80189e2:	4651      	mov	r1, sl
 80189e4:	4648      	mov	r0, r9
 80189e6:	f008 f8e7 	bl	8020bb8 <iprintf>
 80189ea:	8833      	ldrh	r3, [r6, #0]
 80189ec:	e7d8      	b.n	80189a0 <tcp_free_acked_segments.isra.1+0x5c>
  while (seg_list != NULL &&
 80189ee:	4620      	mov	r0, r4
}
 80189f0:	b003      	add	sp, #12
 80189f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189f6:	bf00      	nop
 80189f8:	2002a410 	.word	0x2002a410
 80189fc:	0803e598 	.word	0x0803e598
 8018a00:	0803e348 	.word	0x0803e348
 8018a04:	08026bb8 	.word	0x08026bb8
 8018a08:	2002a3f8 	.word	0x2002a3f8
 8018a0c:	0803e320 	.word	0x0803e320

08018a10 <tcp_receive>:
{
 8018a10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8018a14:	4604      	mov	r4, r0
 8018a16:	2800      	cmp	r0, #0
 8018a18:	f000 8119 	beq.w	8018c4e <tcp_receive+0x23e>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8018a1c:	7d23      	ldrb	r3, [r4, #20]
 8018a1e:	2b03      	cmp	r3, #3
 8018a20:	f240 8085 	bls.w	8018b2e <tcp_receive+0x11e>
  if (flags & TCP_ACK) {
 8018a24:	4bb5      	ldr	r3, [pc, #724]	; (8018cfc <tcp_receive+0x2ec>)
 8018a26:	4db6      	ldr	r5, [pc, #728]	; (8018d00 <tcp_receive+0x2f0>)
 8018a28:	781a      	ldrb	r2, [r3, #0]
 8018a2a:	682b      	ldr	r3, [r5, #0]
 8018a2c:	06d6      	lsls	r6, r2, #27
 8018a2e:	d46a      	bmi.n	8018b06 <tcp_receive+0xf6>
 8018a30:	4eb4      	ldr	r6, [pc, #720]	; (8018d04 <tcp_receive+0x2f4>)
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8018a32:	8832      	ldrh	r2, [r6, #0]
 8018a34:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8018a36:	2a00      	cmp	r2, #0
 8018a38:	d055      	beq.n	8018ae6 <tcp_receive+0xd6>
 8018a3a:	7d20      	ldrb	r0, [r4, #20]
 8018a3c:	2806      	cmp	r0, #6
 8018a3e:	d852      	bhi.n	8018ae6 <tcp_receive+0xd6>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8018a40:	1acf      	subs	r7, r1, r3
 8018a42:	2f01      	cmp	r7, #1
 8018a44:	d406      	bmi.n	8018a54 <tcp_receive+0x44>
 8018a46:	1a8a      	subs	r2, r1, r2
 8018a48:	f1c3 0001 	rsb	r0, r3, #1
 8018a4c:	4402      	add	r2, r0
 8018a4e:	2a00      	cmp	r2, #0
 8018a50:	f340 81c5 	ble.w	8018dde <tcp_receive+0x3ce>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8018a54:	1a5a      	subs	r2, r3, r1
 8018a56:	2a00      	cmp	r2, #0
 8018a58:	f2c0 8101 	blt.w	8018c5e <tcp_receive+0x24e>
 8018a5c:	f103 0c01 	add.w	ip, r3, #1
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018a60:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 8018a62:	ebac 0201 	sub.w	r2, ip, r1
 8018a66:	1a12      	subs	r2, r2, r0
 8018a68:	2a00      	cmp	r2, #0
 8018a6a:	f340 80fd 	ble.w	8018c68 <tcp_receive+0x258>
        tcp_send_empty_ack(pcb);
 8018a6e:	4620      	mov	r0, r4
}
 8018a70:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        tcp_send_empty_ack(pcb);
 8018a74:	f002 baea 	b.w	801b04c <tcp_send_empty_ack>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8018a78:	ebac 0102 	sub.w	r1, ip, r2
 8018a7c:	2900      	cmp	r1, #0
 8018a7e:	da4e      	bge.n	8018b1e <tcp_receive+0x10e>
 8018a80:	49a1      	ldr	r1, [pc, #644]	; (8018d08 <tcp_receive+0x2f8>)
 8018a82:	6809      	ldr	r1, [r1, #0]
 8018a84:	89c9      	ldrh	r1, [r1, #14]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8018a86:	f8b4 0062 	ldrh.w	r0, [r4, #98]	; 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8018a8a:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8018a8e:	4288      	cmp	r0, r1
      pcb->snd_wl2 = ackno;
 8018a90:	e9c4 3215 	strd	r3, r2, [r4, #84]	; 0x54
        pcb->snd_wnd_max = pcb->snd_wnd;
 8018a94:	bf38      	it	cc
 8018a96:	f8a4 1062 	strhcc.w	r1, [r4, #98]	; 0x62
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8018a9a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8018a9c:	1a11      	subs	r1, r2, r0
 8018a9e:	2900      	cmp	r1, #0
 8018aa0:	dc4d      	bgt.n	8018b3e <tcp_receive+0x12e>
      if (tcplen == 0) {
 8018aa2:	4e98      	ldr	r6, [pc, #608]	; (8018d04 <tcp_receive+0x2f4>)
 8018aa4:	8831      	ldrh	r1, [r6, #0]
 8018aa6:	2900      	cmp	r1, #0
 8018aa8:	d15a      	bne.n	8018b60 <tcp_receive+0x150>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8018aaa:	f8b4 8060 	ldrh.w	r8, [r4, #96]	; 0x60
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8018aae:	44f4      	add	ip, lr
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8018ab0:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8018ab2:	4441      	add	r1, r8
 8018ab4:	4561      	cmp	r1, ip
 8018ab6:	d153      	bne.n	8018b60 <tcp_receive+0x150>
          if (pcb->rtime >= 0) {
 8018ab8:	8e21      	ldrh	r1, [r4, #48]	; 0x30
            if (pcb->lastack == ackno) {
 8018aba:	0bc9      	lsrs	r1, r1, #15
 8018abc:	d150      	bne.n	8018b60 <tcp_receive+0x150>
 8018abe:	4290      	cmp	r0, r2
 8018ac0:	d14e      	bne.n	8018b60 <tcp_receive+0x150>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8018ac2:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
 8018ac6:	29ff      	cmp	r1, #255	; 0xff
 8018ac8:	f000 83c2 	beq.w	8019250 <tcp_receive+0x840>
                ++pcb->dupacks;
 8018acc:	3101      	adds	r1, #1
 8018ace:	b2c9      	uxtb	r1, r1
              if (pcb->dupacks > 3) {
 8018ad0:	2903      	cmp	r1, #3
                ++pcb->dupacks;
 8018ad2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 8018ad6:	f200 83bb 	bhi.w	8019250 <tcp_receive+0x840>
              if (pcb->dupacks >= 3) {
 8018ada:	f000 83c4 	beq.w	8019266 <tcp_receive+0x856>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8018ade:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018ae0:	2900      	cmp	r1, #0
 8018ae2:	d137      	bne.n	8018b54 <tcp_receive+0x144>
 8018ae4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8018ae6:	1a5a      	subs	r2, r3, r1
 8018ae8:	2a00      	cmp	r2, #0
 8018aea:	db06      	blt.n	8018afa <tcp_receive+0xea>
 8018aec:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8018aee:	f1c2 0201 	rsb	r2, r2, #1
 8018af2:	4413      	add	r3, r2
 8018af4:	1a5b      	subs	r3, r3, r1
 8018af6:	2b00      	cmp	r3, #0
 8018af8:	dd03      	ble.n	8018b02 <tcp_receive+0xf2>
      tcp_ack_now(pcb);
 8018afa:	8b63      	ldrh	r3, [r4, #26]
 8018afc:	f043 0302 	orr.w	r3, r3, #2
 8018b00:	8363      	strh	r3, [r4, #26]
}
 8018b02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8018b06:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8018b08:	4f80      	ldr	r7, [pc, #512]	; (8018d0c <tcp_receive+0x2fc>)
 8018b0a:	1ac8      	subs	r0, r1, r3
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8018b0c:	f8b4 e060 	ldrh.w	lr, [r4, #96]	; 0x60
 8018b10:	683a      	ldr	r2, [r7, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8018b12:	2800      	cmp	r0, #0
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8018b14:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8018b18:	dbb2      	blt.n	8018a80 <tcp_receive+0x70>
 8018b1a:	4299      	cmp	r1, r3
 8018b1c:	d0ac      	beq.n	8018a78 <tcp_receive+0x68>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8018b1e:	4594      	cmp	ip, r2
 8018b20:	d1bb      	bne.n	8018a9a <tcp_receive+0x8a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8018b22:	4979      	ldr	r1, [pc, #484]	; (8018d08 <tcp_receive+0x2f8>)
 8018b24:	6809      	ldr	r1, [r1, #0]
 8018b26:	89c9      	ldrh	r1, [r1, #14]
 8018b28:	458e      	cmp	lr, r1
 8018b2a:	d2b6      	bcs.n	8018a9a <tcp_receive+0x8a>
 8018b2c:	e7ab      	b.n	8018a86 <tcp_receive+0x76>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8018b2e:	4b78      	ldr	r3, [pc, #480]	; (8018d10 <tcp_receive+0x300>)
 8018b30:	f240 427c 	movw	r2, #1148	; 0x47c
 8018b34:	4977      	ldr	r1, [pc, #476]	; (8018d14 <tcp_receive+0x304>)
 8018b36:	4878      	ldr	r0, [pc, #480]	; (8018d18 <tcp_receive+0x308>)
 8018b38:	f008 f83e 	bl	8020bb8 <iprintf>
 8018b3c:	e772      	b.n	8018a24 <tcp_receive+0x14>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018b3e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8018b40:	1ad3      	subs	r3, r2, r3
 8018b42:	2b00      	cmp	r3, #0
 8018b44:	dd10      	ble.n	8018b68 <tcp_receive+0x158>
      tcp_send_empty_ack(pcb);
 8018b46:	4620      	mov	r0, r4
 8018b48:	4e6e      	ldr	r6, [pc, #440]	; (8018d04 <tcp_receive+0x2f4>)
 8018b4a:	f002 fa7f 	bl	801b04c <tcp_send_empty_ack>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8018b4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018b50:	b121      	cbz	r1, 8018b5c <tcp_receive+0x14c>
 8018b52:	683a      	ldr	r2, [r7, #0]
 8018b54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018b56:	1a9a      	subs	r2, r3, r2
 8018b58:	2a00      	cmp	r2, #0
 8018b5a:	db57      	blt.n	8018c0c <tcp_receive+0x1fc>
 8018b5c:	682b      	ldr	r3, [r5, #0]
 8018b5e:	e768      	b.n	8018a32 <tcp_receive+0x22>
        pcb->dupacks = 0;
 8018b60:	2300      	movs	r3, #0
 8018b62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018b66:	e7f2      	b.n	8018b4e <tcp_receive+0x13e>
      if (pcb->flags & TF_INFR) {
 8018b68:	8b63      	ldrh	r3, [r4, #26]
 8018b6a:	0758      	lsls	r0, r3, #29
 8018b6c:	d509      	bpl.n	8018b82 <tcp_receive+0x172>
        tcp_clear_flags(pcb, TF_INFR);
 8018b6e:	f023 0304 	bic.w	r3, r3, #4
        pcb->cwnd = pcb->ssthresh;
 8018b72:	f8b4 604a 	ldrh.w	r6, [r4, #74]	; 0x4a
        pcb->bytes_acked = 0;
 8018b76:	2000      	movs	r0, #0
        tcp_clear_flags(pcb, TF_INFR);
 8018b78:	8363      	strh	r3, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 8018b7a:	f8a4 6048 	strh.w	r6, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 8018b7e:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8018b82:	f9b4 603c 	ldrsh.w	r6, [r4, #60]	; 0x3c
      pcb->nrtx = 0;
 8018b86:	2000      	movs	r0, #0
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8018b88:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      pcb->lastack = ackno;
 8018b8a:	6462      	str	r2, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
 8018b8c:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8018b8e:	eb03 03e6 	add.w	r3, r3, r6, asr #3
      pcb->nrtx = 0;
 8018b92:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
      if (pcb->state >= ESTABLISHED) {
 8018b96:	2a03      	cmp	r2, #3
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8018b98:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->dupacks = 0;
 8018b9c:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
      if (pcb->state >= ESTABLISHED) {
 8018ba0:	f200 81c7 	bhi.w	8018f32 <tcp_receive+0x522>
 8018ba4:	f104 0666 	add.w	r6, r4, #102	; 0x66
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8018ba8:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
 8018bac:	4630      	mov	r0, r6
 8018bae:	f7ff fec9 	bl	8018944 <tcp_free_acked_segments.isra.1>
 8018bb2:	4602      	mov	r2, r0
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8018bb4:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8018bb6:	4630      	mov	r0, r6
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8018bb8:	6722      	str	r2, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8018bba:	f7ff fec3 	bl	8018944 <tcp_free_acked_segments.isra.1>
      if (pcb->unacked == NULL) {
 8018bbe:	6f22      	ldr	r2, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8018bc0:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 8018bc2:	2a00      	cmp	r2, #0
 8018bc4:	f000 8299 	beq.w	80190fa <tcp_receive+0x6ea>
        pcb->rtime = 0;
 8018bc8:	2300      	movs	r3, #0
 8018bca:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 8018bcc:	2300      	movs	r3, #0
 8018bce:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 8018bd0:	2800      	cmp	r0, #0
 8018bd2:	f000 828f 	beq.w	80190f4 <tcp_receive+0x6e4>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8018bd6:	4951      	ldr	r1, [pc, #324]	; (8018d1c <tcp_receive+0x30c>)
 8018bd8:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 8018bdc:	880e      	ldrh	r6, [r1, #0]
      if (pcb->flags & TF_RTO) {
 8018bde:	8b61      	ldrh	r1, [r4, #26]
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8018be0:	4433      	add	r3, r6
      if (pcb->flags & TF_RTO) {
 8018be2:	050e      	lsls	r6, r1, #20
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8018be4:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 8018be8:	d52f      	bpl.n	8018c4a <tcp_receive+0x23a>
        if (pcb->unacked == NULL) {
 8018bea:	2a00      	cmp	r2, #0
 8018bec:	f000 82a1 	beq.w	8019132 <tcp_receive+0x722>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8018bf0:	68d3      	ldr	r3, [r2, #12]
 8018bf2:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 8018bf4:	6858      	ldr	r0, [r3, #4]
 8018bf6:	f7fc f81d 	bl	8014c34 <lwip_htonl>
 8018bfa:	1a30      	subs	r0, r6, r0
 8018bfc:	2800      	cmp	r0, #0
 8018bfe:	dc24      	bgt.n	8018c4a <tcp_receive+0x23a>
          tcp_clear_flags(pcb, TF_RTO);
 8018c00:	8b63      	ldrh	r3, [r4, #26]
 8018c02:	4e40      	ldr	r6, [pc, #256]	; (8018d04 <tcp_receive+0x2f4>)
 8018c04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8018c08:	8363      	strh	r3, [r4, #26]
 8018c0a:	e7a0      	b.n	8018b4e <tcp_receive+0x13e>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8018c0c:	4b44      	ldr	r3, [pc, #272]	; (8018d20 <tcp_receive+0x310>)
      m = (s16_t)(m - (pcb->sa >> 3));
 8018c0e:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8018c12:	681b      	ldr	r3, [r3, #0]
 8018c14:	1a59      	subs	r1, r3, r1
      m = (s16_t)(m - (pcb->sa >> 3));
 8018c16:	eba1 01e2 	sub.w	r1, r1, r2, asr #3
 8018c1a:	b289      	uxth	r1, r1
      pcb->sa = (s16_t)(pcb->sa + m);
 8018c1c:	440a      	add	r2, r1
      m = (s16_t)(m - (pcb->sa >> 3));
 8018c1e:	b208      	sxth	r0, r1
      pcb->sa = (s16_t)(pcb->sa + m);
 8018c20:	b212      	sxth	r2, r2
      if (m < 0) {
 8018c22:	2800      	cmp	r0, #0
      pcb->sa = (s16_t)(pcb->sa + m);
 8018c24:	87a2      	strh	r2, [r4, #60]	; 0x3c
      if (m < 0) {
 8018c26:	da01      	bge.n	8018c2c <tcp_receive+0x21c>
        m = (s16_t) - m;
 8018c28:	4249      	negs	r1, r1
 8018c2a:	b208      	sxth	r0, r1
      m = (s16_t)(m - (pcb->sv >> 2));
 8018c2c:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
      pcb->rttest = 0;
 8018c30:	2700      	movs	r7, #0
      pcb->sv = (s16_t)(pcb->sv + m);
 8018c32:	eba3 01a3 	sub.w	r1, r3, r3, asr #2
      pcb->rttest = 0;
 8018c36:	6367      	str	r7, [r4, #52]	; 0x34
 8018c38:	682b      	ldr	r3, [r5, #0]
      pcb->sv = (s16_t)(pcb->sv + m);
 8018c3a:	4401      	add	r1, r0
 8018c3c:	b289      	uxth	r1, r1
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8018c3e:	eb01 02e2 	add.w	r2, r1, r2, asr #3
      pcb->sv = (s16_t)(pcb->sv + m);
 8018c42:	87e1      	strh	r1, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8018c44:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
 8018c48:	e6f3      	b.n	8018a32 <tcp_receive+0x22>
 8018c4a:	4e2e      	ldr	r6, [pc, #184]	; (8018d04 <tcp_receive+0x2f4>)
 8018c4c:	e77f      	b.n	8018b4e <tcp_receive+0x13e>
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8018c4e:	4b30      	ldr	r3, [pc, #192]	; (8018d10 <tcp_receive+0x300>)
 8018c50:	f240 427b 	movw	r2, #1147	; 0x47b
 8018c54:	4933      	ldr	r1, [pc, #204]	; (8018d24 <tcp_receive+0x314>)
 8018c56:	4830      	ldr	r0, [pc, #192]	; (8018d18 <tcp_receive+0x308>)
 8018c58:	f007 ffae 	bl	8020bb8 <iprintf>
 8018c5c:	e6de      	b.n	8018a1c <tcp_receive+0xc>
        tcp_ack_now(pcb);
 8018c5e:	8b63      	ldrh	r3, [r4, #26]
 8018c60:	f043 0302 	orr.w	r3, r3, #2
 8018c64:	8363      	strh	r3, [r4, #26]
 8018c66:	e702      	b.n	8018a6e <tcp_receive+0x5e>
      if (pcb->rcv_nxt == seqno) {
 8018c68:	428b      	cmp	r3, r1
 8018c6a:	f000 8363 	beq.w	8019334 <tcp_receive+0x924>
        if (pcb->ooseq == NULL) {
 8018c6e:	6f67      	ldr	r7, [r4, #116]	; 0x74
 8018c70:	2f00      	cmp	r7, #0
 8018c72:	f000 827f 	beq.w	8019174 <tcp_receive+0x764>
            if (seqno == next->tcphdr->seqno) {
 8018c76:	68f8      	ldr	r0, [r7, #12]
          struct tcp_seg *next, *prev = NULL;
 8018c78:	f04f 0800 	mov.w	r8, #0
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8018c7c:	f103 3eff 	add.w	lr, r3, #4294967295
            if (seqno == next->tcphdr->seqno) {
 8018c80:	6842      	ldr	r2, [r0, #4]
 8018c82:	429a      	cmp	r2, r3
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8018c84:	ebac 0902 	sub.w	r9, ip, r2
            if (seqno == next->tcphdr->seqno) {
 8018c88:	d018      	beq.n	8018cbc <tcp_receive+0x2ac>
              if (prev == NULL) {
 8018c8a:	f1b8 0f00 	cmp.w	r8, #0
 8018c8e:	d02a      	beq.n	8018ce6 <tcp_receive+0x2d6>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8018c90:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8018c94:	6849      	ldr	r1, [r1, #4]
 8018c96:	ebae 0101 	sub.w	r1, lr, r1
 8018c9a:	2900      	cmp	r1, #0
 8018c9c:	db03      	blt.n	8018ca6 <tcp_receive+0x296>
 8018c9e:	f1b9 0f00 	cmp.w	r9, #0
 8018ca2:	f340 8270 	ble.w	8019186 <tcp_receive+0x776>
              if (next->next == NULL &&
 8018ca6:	6839      	ldr	r1, [r7, #0]
 8018ca8:	46b8      	mov	r8, r7
 8018caa:	2900      	cmp	r1, #0
 8018cac:	d03e      	beq.n	8018d2c <tcp_receive+0x31c>
 8018cae:	460f      	mov	r7, r1
            if (seqno == next->tcphdr->seqno) {
 8018cb0:	68f8      	ldr	r0, [r7, #12]
 8018cb2:	6842      	ldr	r2, [r0, #4]
 8018cb4:	429a      	cmp	r2, r3
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8018cb6:	ebac 0902 	sub.w	r9, ip, r2
            if (seqno == next->tcphdr->seqno) {
 8018cba:	d1e6      	bne.n	8018c8a <tcp_receive+0x27a>
              if (inseg.len > next->len) {
 8018cbc:	481a      	ldr	r0, [pc, #104]	; (8018d28 <tcp_receive+0x318>)
 8018cbe:	893b      	ldrh	r3, [r7, #8]
 8018cc0:	8902      	ldrh	r2, [r0, #8]
 8018cc2:	429a      	cmp	r2, r3
 8018cc4:	f67f aed3 	bls.w	8018a6e <tcp_receive+0x5e>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018cc8:	f7fe fc7a 	bl	80175c0 <tcp_seg_copy>
                if (cseg != NULL) {
 8018ccc:	2800      	cmp	r0, #0
 8018cce:	f43f aece 	beq.w	8018a6e <tcp_receive+0x5e>
                  if (prev != NULL) {
 8018cd2:	f1b8 0f00 	cmp.w	r8, #0
 8018cd6:	f000 8315 	beq.w	8019304 <tcp_receive+0x8f4>
                    prev->next = cseg;
 8018cda:	f8c8 0000 	str.w	r0, [r8]
                    tcp_oos_insert_segment(cseg, next);
 8018cde:	4639      	mov	r1, r7
 8018ce0:	f7ff fdb0 	bl	8018844 <tcp_oos_insert_segment>
 8018ce4:	e6c3      	b.n	8018a6e <tcp_receive+0x5e>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8018ce6:	1a99      	subs	r1, r3, r2
 8018ce8:	2900      	cmp	r1, #0
 8018cea:	dadc      	bge.n	8018ca6 <tcp_receive+0x296>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018cec:	480e      	ldr	r0, [pc, #56]	; (8018d28 <tcp_receive+0x318>)
 8018cee:	f7fe fc67 	bl	80175c0 <tcp_seg_copy>
                  if (cseg != NULL) {
 8018cf2:	2800      	cmp	r0, #0
 8018cf4:	f43f aebb 	beq.w	8018a6e <tcp_receive+0x5e>
                    pcb->ooseq = cseg;
 8018cf8:	6760      	str	r0, [r4, #116]	; 0x74
 8018cfa:	e7f0      	b.n	8018cde <tcp_receive+0x2ce>
 8018cfc:	2002a3fc 	.word	0x2002a3fc
 8018d00:	2002a41c 	.word	0x2002a41c
 8018d04:	2002a432 	.word	0x2002a432
 8018d08:	2002a424 	.word	0x2002a424
 8018d0c:	2002a3f8 	.word	0x2002a3f8
 8018d10:	0803e598 	.word	0x0803e598
 8018d14:	0803e604 	.word	0x0803e604
 8018d18:	08026bb8 	.word	0x08026bb8
 8018d1c:	2002a410 	.word	0x2002a410
 8018d20:	2003e2dc 	.word	0x2003e2dc
 8018d24:	0803e5e8 	.word	0x0803e5e8
 8018d28:	2002a400 	.word	0x2002a400
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8018d2c:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 8018d2e:	2b00      	cmp	r3, #0
 8018d30:	f77f ae9d 	ble.w	8018a6e <tcp_receive+0x5e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8018d34:	8980      	ldrh	r0, [r0, #12]
 8018d36:	f7fb ff79 	bl	8014c2c <lwip_htons>
 8018d3a:	07c2      	lsls	r2, r0, #31
 8018d3c:	f53f ae97 	bmi.w	8018a6e <tcp_receive+0x5e>
                next->next = tcp_seg_copy(&inseg);
 8018d40:	48b0      	ldr	r0, [pc, #704]	; (8019004 <tcp_receive+0x5f4>)
 8018d42:	f7fe fc3d 	bl	80175c0 <tcp_seg_copy>
 8018d46:	6038      	str	r0, [r7, #0]
                if (next->next != NULL) {
 8018d48:	2800      	cmp	r0, #0
 8018d4a:	f43f ae90 	beq.w	8018a6e <tcp_receive+0x5e>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8018d4e:	68fb      	ldr	r3, [r7, #12]
 8018d50:	893a      	ldrh	r2, [r7, #8]
 8018d52:	6859      	ldr	r1, [r3, #4]
 8018d54:	682b      	ldr	r3, [r5, #0]
 8018d56:	440a      	add	r2, r1
 8018d58:	1ad2      	subs	r2, r2, r3
 8018d5a:	2a00      	cmp	r2, #0
 8018d5c:	dd05      	ble.n	8018d6a <tcp_receive+0x35a>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8018d5e:	1a5b      	subs	r3, r3, r1
                    pbuf_realloc(next->p, next->len);
 8018d60:	6878      	ldr	r0, [r7, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8018d62:	b299      	uxth	r1, r3
 8018d64:	8139      	strh	r1, [r7, #8]
                    pbuf_realloc(next->p, next->len);
 8018d66:	f7fd fedb 	bl	8016b20 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8018d6a:	682a      	ldr	r2, [r5, #0]
 8018d6c:	8833      	ldrh	r3, [r6, #0]
 8018d6e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8018d70:	4413      	add	r3, r2
 8018d72:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8018d74:	1a5b      	subs	r3, r3, r1
 8018d76:	1a9b      	subs	r3, r3, r2
 8018d78:	2b00      	cmp	r3, #0
 8018d7a:	f77f ae78 	ble.w	8018a6e <tcp_receive+0x5e>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8018d7e:	683b      	ldr	r3, [r7, #0]
 8018d80:	68db      	ldr	r3, [r3, #12]
 8018d82:	8998      	ldrh	r0, [r3, #12]
 8018d84:	f7fb ff52 	bl	8014c2c <lwip_htons>
 8018d88:	07c3      	lsls	r3, r0, #31
 8018d8a:	f100 82bf 	bmi.w	801930c <tcp_receive+0x8fc>
 8018d8e:	683a      	ldr	r2, [r7, #0]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8018d90:	6828      	ldr	r0, [r5, #0]
 8018d92:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8018d94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018d96:	1a09      	subs	r1, r1, r0
                    pbuf_realloc(next->next->p, next->next->len);
 8018d98:	6850      	ldr	r0, [r2, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8018d9a:	4419      	add	r1, r3
 8018d9c:	b289      	uxth	r1, r1
 8018d9e:	8111      	strh	r1, [r2, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8018da0:	f7fd febe 	bl	8016b20 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8018da4:	683b      	ldr	r3, [r7, #0]
 8018da6:	68da      	ldr	r2, [r3, #12]
 8018da8:	891f      	ldrh	r7, [r3, #8]
 8018daa:	8990      	ldrh	r0, [r2, #12]
 8018dac:	f7fb ff3e 	bl	8014c2c <lwip_htons>
 8018db0:	f010 0303 	ands.w	r3, r0, #3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018db4:	6829      	ldr	r1, [r5, #0]
                    tcplen = TCP_TCPLEN(next->next);
 8018db6:	bf18      	it	ne
 8018db8:	2301      	movne	r3, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018dba:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8018dbc:	6a60      	ldr	r0, [r4, #36]	; 0x24
                    tcplen = TCP_TCPLEN(next->next);
 8018dbe:	443b      	add	r3, r7
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018dc0:	4402      	add	r2, r0
                    tcplen = TCP_TCPLEN(next->next);
 8018dc2:	b29b      	uxth	r3, r3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018dc4:	4419      	add	r1, r3
                    tcplen = TCP_TCPLEN(next->next);
 8018dc6:	8033      	strh	r3, [r6, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018dc8:	4291      	cmp	r1, r2
 8018dca:	f43f ae50 	beq.w	8018a6e <tcp_receive+0x5e>
 8018dce:	4b8e      	ldr	r3, [pc, #568]	; (8019008 <tcp_receive+0x5f8>)
 8018dd0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8018dd4:	498d      	ldr	r1, [pc, #564]	; (801900c <tcp_receive+0x5fc>)
 8018dd6:	488e      	ldr	r0, [pc, #568]	; (8019010 <tcp_receive+0x600>)
 8018dd8:	f007 feee 	bl	8020bb8 <iprintf>
 8018ddc:	e647      	b.n	8018a6e <tcp_receive+0x5e>
      struct pbuf *p = inseg.p;
 8018dde:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8019004 <tcp_receive+0x5f4>
 8018de2:	f8d9 8004 	ldr.w	r8, [r9, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8018de6:	f1b8 0f00 	cmp.w	r8, #0
 8018dea:	f000 817b 	beq.w	80190e4 <tcp_receive+0x6d4>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8018dee:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8018df2:	429f      	cmp	r7, r3
 8018df4:	f200 80c5 	bhi.w	8018f82 <tcp_receive+0x572>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8018df8:	f8d9 3004 	ldr.w	r3, [r9, #4]
      off = (u16_t)off32;
 8018dfc:	b2bf      	uxth	r7, r7
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8018dfe:	891a      	ldrh	r2, [r3, #8]
 8018e00:	42ba      	cmp	r2, r7
 8018e02:	f0c0 80b3 	bcc.w	8018f6c <tcp_receive+0x55c>
      inseg.len -= off;
 8018e06:	f8b9 1008 	ldrh.w	r1, [r9, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8018e0a:	1bd2      	subs	r2, r2, r7
      while (p->len < off) {
 8018e0c:	f8b8 300a 	ldrh.w	r3, [r8, #10]
      inseg.len -= off;
 8018e10:	1bc9      	subs	r1, r1, r7
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8018e12:	b292      	uxth	r2, r2
      while (p->len < off) {
 8018e14:	429f      	cmp	r7, r3
      inseg.len -= off;
 8018e16:	f8a9 1008 	strh.w	r1, [r9, #8]
      while (p->len < off) {
 8018e1a:	d90c      	bls.n	8018e36 <tcp_receive+0x426>
        p->len = 0;
 8018e1c:	2100      	movs	r1, #0
        off -= p->len;
 8018e1e:	1afb      	subs	r3, r7, r3
        p->len = 0;
 8018e20:	f8a8 100a 	strh.w	r1, [r8, #10]
        p->tot_len = new_tot_len;
 8018e24:	f8a8 2008 	strh.w	r2, [r8, #8]
        p = p->next;
 8018e28:	f8d8 8000 	ldr.w	r8, [r8]
        off -= p->len;
 8018e2c:	b29f      	uxth	r7, r3
      while (p->len < off) {
 8018e2e:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8018e32:	42bb      	cmp	r3, r7
 8018e34:	d3f3      	bcc.n	8018e1e <tcp_receive+0x40e>
      pbuf_remove_header(p, off);
 8018e36:	4639      	mov	r1, r7
 8018e38:	4640      	mov	r0, r8
 8018e3a:	f7fd fd29 	bl	8016890 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8018e3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018e40:	f8d9 100c 	ldr.w	r1, [r9, #12]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018e44:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8018e46:	602b      	str	r3, [r5, #0]
 8018e48:	604b      	str	r3, [r1, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018e4a:	2a00      	cmp	r2, #0
 8018e4c:	f43f ae0f 	beq.w	8018a6e <tcp_receive+0x5e>
        tcplen = TCP_TCPLEN(&inseg);
 8018e50:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8018e54:	f8b9 7008 	ldrh.w	r7, [r9, #8]
 8018e58:	8998      	ldrh	r0, [r3, #12]
 8018e5a:	f7fb fee7 	bl	8014c2c <lwip_htons>
 8018e5e:	f010 0303 	ands.w	r3, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 8018e62:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 8018e64:	bf18      	it	ne
 8018e66:	2301      	movne	r3, #1
 8018e68:	443b      	add	r3, r7
 8018e6a:	b29b      	uxth	r3, r3
        if (tcplen > pcb->rcv_wnd) {
 8018e6c:	429a      	cmp	r2, r3
        tcplen = TCP_TCPLEN(&inseg);
 8018e6e:	8033      	strh	r3, [r6, #0]
        if (tcplen > pcb->rcv_wnd) {
 8018e70:	f0c0 81a9 	bcc.w	80191c6 <tcp_receive+0x7b6>
        if (pcb->ooseq != NULL) {
 8018e74:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8018e76:	2b00      	cmp	r3, #0
 8018e78:	f000 8092 	beq.w	8018fa0 <tcp_receive+0x590>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018e7c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8018e80:	8998      	ldrh	r0, [r3, #12]
 8018e82:	f7fb fed3 	bl	8014c2c <lwip_htons>
 8018e86:	07c0      	lsls	r0, r0, #31
 8018e88:	f100 8087 	bmi.w	8018f9a <tcp_receive+0x58a>
 8018e8c:	8833      	ldrh	r3, [r6, #0]
 8018e8e:	f8d5 c000 	ldr.w	ip, [r5]
            struct tcp_seg *next = pcb->ooseq;
 8018e92:	f8d4 8074 	ldr.w	r8, [r4, #116]	; 0x74
 8018e96:	eb03 020c 	add.w	r2, r3, ip
            while (next &&
 8018e9a:	f1b8 0f00 	cmp.w	r8, #0
 8018e9e:	f000 8233 	beq.w	8019308 <tcp_receive+0x8f8>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8018ea2:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8018ea6:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 8018eaa:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8018eae:	eba2 0e0a 	sub.w	lr, r2, sl
 8018eb2:	ebae 0101 	sub.w	r1, lr, r1
            while (next &&
 8018eb6:	2900      	cmp	r1, #0
 8018eb8:	da19      	bge.n	8018eee <tcp_receive+0x4de>
 8018eba:	e1d8      	b.n	801926e <tcp_receive+0x85e>
              next = next->next;
 8018ebc:	f8d8 7000 	ldr.w	r7, [r8]
              tcp_seg_free(tmp);
 8018ec0:	4640      	mov	r0, r8
 8018ec2:	f7fe fb55 	bl	8017570 <tcp_seg_free>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8018ec6:	8833      	ldrh	r3, [r6, #0]
 8018ec8:	46b8      	mov	r8, r7
            while (next &&
 8018eca:	2f00      	cmp	r7, #0
 8018ecc:	f000 8207 	beq.w	80192de <tcp_receive+0x8ce>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8018ed0:	f8d5 c000 	ldr.w	ip, [r5]
 8018ed4:	68f8      	ldr	r0, [r7, #12]
 8018ed6:	eb03 020c 	add.w	r2, r3, ip
 8018eda:	8939      	ldrh	r1, [r7, #8]
 8018edc:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8018ee0:	eba2 0e0a 	sub.w	lr, r2, sl
 8018ee4:	ebae 0101 	sub.w	r1, lr, r1
            while (next &&
 8018ee8:	2900      	cmp	r1, #0
 8018eea:	f2c0 81c1 	blt.w	8019270 <tcp_receive+0x860>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8018eee:	8980      	ldrh	r0, [r0, #12]
 8018ef0:	f7fb fe9c 	bl	8014c2c <lwip_htons>
 8018ef4:	07c1      	lsls	r1, r0, #31
 8018ef6:	d5e1      	bpl.n	8018ebc <tcp_receive+0x4ac>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8018ef8:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8018efc:	8998      	ldrh	r0, [r3, #12]
 8018efe:	f7fb fe95 	bl	8014c2c <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8018f02:	0782      	lsls	r2, r0, #30
 8018f04:	d4da      	bmi.n	8018ebc <tcp_receive+0x4ac>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8018f06:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8018f0a:	2001      	movs	r0, #1
 8018f0c:	899f      	ldrh	r7, [r3, #12]
 8018f0e:	f7fb fe8d 	bl	8014c2c <lwip_htons>
 8018f12:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8018f16:	4338      	orrs	r0, r7
                tcplen = TCP_TCPLEN(&inseg);
 8018f18:	f8b9 7008 	ldrh.w	r7, [r9, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8018f1c:	b280      	uxth	r0, r0
 8018f1e:	8198      	strh	r0, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8018f20:	f7fb fe84 	bl	8014c2c <lwip_htons>
 8018f24:	f010 0003 	ands.w	r0, r0, #3
 8018f28:	bf18      	it	ne
 8018f2a:	2001      	movne	r0, #1
 8018f2c:	4407      	add	r7, r0
 8018f2e:	8037      	strh	r7, [r6, #0]
 8018f30:	e7c4      	b.n	8018ebc <tcp_receive+0x4ac>
        if (pcb->cwnd < pcb->ssthresh) {
 8018f32:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8018f36:	b289      	uxth	r1, r1
        if (pcb->cwnd < pcb->ssthresh) {
 8018f38:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 8018f3c:	4293      	cmp	r3, r2
 8018f3e:	f240 80e0 	bls.w	8019102 <tcp_receive+0x6f2>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8018f42:	8b60      	ldrh	r0, [r4, #26]
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8018f44:	8e63      	ldrh	r3, [r4, #50]	; 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8018f46:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8018f4a:	bf0c      	ite	eq
 8018f4c:	2002      	moveq	r0, #2
 8018f4e:	2001      	movne	r0, #1
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8018f50:	fb13 f300 	smulbb	r3, r3, r0
 8018f54:	b29b      	uxth	r3, r3
          TCP_WND_INC(pcb->cwnd, increase);
 8018f56:	428b      	cmp	r3, r1
 8018f58:	bf94      	ite	ls
 8018f5a:	18d1      	addls	r1, r2, r3
 8018f5c:	1851      	addhi	r1, r2, r1
 8018f5e:	b289      	uxth	r1, r1
 8018f60:	428a      	cmp	r2, r1
 8018f62:	f200 80f6 	bhi.w	8019152 <tcp_receive+0x742>
 8018f66:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
 8018f6a:	e61b      	b.n	8018ba4 <tcp_receive+0x194>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8018f6c:	4b26      	ldr	r3, [pc, #152]	; (8019008 <tcp_receive+0x5f8>)
 8018f6e:	f240 5297 	movw	r2, #1431	; 0x597
 8018f72:	4928      	ldr	r1, [pc, #160]	; (8019014 <tcp_receive+0x604>)
 8018f74:	4826      	ldr	r0, [pc, #152]	; (8019010 <tcp_receive+0x600>)
 8018f76:	f007 fe1f 	bl	8020bb8 <iprintf>
 8018f7a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8018f7e:	891a      	ldrh	r2, [r3, #8]
 8018f80:	e741      	b.n	8018e06 <tcp_receive+0x3f6>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8018f82:	4b21      	ldr	r3, [pc, #132]	; (8019008 <tcp_receive+0x5f8>)
 8018f84:	f240 5295 	movw	r2, #1429	; 0x595
 8018f88:	4923      	ldr	r1, [pc, #140]	; (8019018 <tcp_receive+0x608>)
 8018f8a:	4821      	ldr	r0, [pc, #132]	; (8019010 <tcp_receive+0x600>)
 8018f8c:	f007 fe14 	bl	8020bb8 <iprintf>
 8018f90:	e732      	b.n	8018df8 <tcp_receive+0x3e8>
              pcb->ooseq = pcb->ooseq->next;
 8018f92:	6803      	ldr	r3, [r0, #0]
 8018f94:	6763      	str	r3, [r4, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8018f96:	f7fe faeb 	bl	8017570 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8018f9a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8018f9c:	2800      	cmp	r0, #0
 8018f9e:	d1f8      	bne.n	8018f92 <tcp_receive+0x582>
 8018fa0:	8833      	ldrh	r3, [r6, #0]
 8018fa2:	682a      	ldr	r2, [r5, #0]
 8018fa4:	441a      	add	r2, r3
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8018fa6:	8d21      	ldrh	r1, [r4, #40]	; 0x28
        pcb->rcv_nxt = seqno + tcplen;
 8018fa8:	6262      	str	r2, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8018faa:	4299      	cmp	r1, r3
 8018fac:	f0c0 8146 	bcc.w	801923c <tcp_receive+0x82c>
        pcb->rcv_wnd -= tcplen;
 8018fb0:	1acb      	subs	r3, r1, r3
        tcp_update_rcv_ann_wnd(pcb);
 8018fb2:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 8018fb4:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 8018fb6:	f7fe fa63 	bl	8017480 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 8018fba:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8018fbe:	891a      	ldrh	r2, [r3, #8]
 8018fc0:	b122      	cbz	r2, 8018fcc <tcp_receive+0x5bc>
          recv_data = inseg.p;
 8018fc2:	4916      	ldr	r1, [pc, #88]	; (801901c <tcp_receive+0x60c>)
          inseg.p = NULL;
 8018fc4:	2200      	movs	r2, #0
          recv_data = inseg.p;
 8018fc6:	600b      	str	r3, [r1, #0]
          inseg.p = NULL;
 8018fc8:	f8c9 2004 	str.w	r2, [r9, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018fcc:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8018fd0:	8998      	ldrh	r0, [r3, #12]
 8018fd2:	f7fb fe2b 	bl	8014c2c <lwip_htons>
 8018fd6:	07c6      	lsls	r6, r0, #31
 8018fd8:	d504      	bpl.n	8018fe4 <tcp_receive+0x5d4>
          recv_flags |= TF_GOT_FIN;
 8018fda:	4a11      	ldr	r2, [pc, #68]	; (8019020 <tcp_receive+0x610>)
 8018fdc:	7813      	ldrb	r3, [r2, #0]
 8018fde:	f043 0320 	orr.w	r3, r3, #32
 8018fe2:	7013      	strb	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 8018fe4:	6f66      	ldr	r6, [r4, #116]	; 0x74
 8018fe6:	2e00      	cmp	r6, #0
 8018fe8:	f000 80b8 	beq.w	801915c <tcp_receive+0x74c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8018fec:	68f3      	ldr	r3, [r6, #12]
 8018fee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8018ff0:	6859      	ldr	r1, [r3, #4]
        while (pcb->ooseq != NULL &&
 8018ff2:	428a      	cmp	r2, r1
 8018ff4:	f040 80b2 	bne.w	801915c <tcp_receive+0x74c>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8018ff8:	f8df 900c 	ldr.w	r9, [pc, #12]	; 8019008 <tcp_receive+0x5f8>
 8018ffc:	f8df 8024 	ldr.w	r8, [pc, #36]	; 8019024 <tcp_receive+0x614>
 8019000:	4f03      	ldr	r7, [pc, #12]	; (8019010 <tcp_receive+0x600>)
 8019002:	e04a      	b.n	801909a <tcp_receive+0x68a>
 8019004:	2002a400 	.word	0x2002a400
 8019008:	0803e598 	.word	0x0803e598
 801900c:	0803e650 	.word	0x0803e650
 8019010:	08026bb8 	.word	0x08026bb8
 8019014:	0803e640 	.word	0x0803e640
 8019018:	0803e630 	.word	0x0803e630
 801901c:	2002a414 	.word	0x2002a414
 8019020:	2002a418 	.word	0x2002a418
 8019024:	0803e6e4 	.word	0x0803e6e4
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8019028:	68f3      	ldr	r3, [r6, #12]
 801902a:	f8b6 a008 	ldrh.w	sl, [r6, #8]
 801902e:	8998      	ldrh	r0, [r3, #12]
 8019030:	f7fb fdfc 	bl	8014c2c <lwip_htons>
 8019034:	f010 0303 	ands.w	r3, r0, #3
 8019038:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 801903a:	4620      	mov	r0, r4
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801903c:	bf18      	it	ne
 801903e:	2301      	movne	r3, #1
 8019040:	4453      	add	r3, sl
 8019042:	1ad3      	subs	r3, r2, r3
 8019044:	8523      	strh	r3, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 8019046:	f7fe fa1b 	bl	8017480 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 801904a:	6871      	ldr	r1, [r6, #4]
 801904c:	890b      	ldrh	r3, [r1, #8]
 801904e:	b13b      	cbz	r3, 8019060 <tcp_receive+0x650>
            if (recv_data) {
 8019050:	4bba      	ldr	r3, [pc, #744]	; (801933c <tcp_receive+0x92c>)
 8019052:	6818      	ldr	r0, [r3, #0]
 8019054:	2800      	cmp	r0, #0
 8019056:	d06a      	beq.n	801912e <tcp_receive+0x71e>
              pbuf_cat(recv_data, cseg->p);
 8019058:	f7fd fdde 	bl	8016c18 <pbuf_cat>
            cseg->p = NULL;
 801905c:	2300      	movs	r3, #0
 801905e:	6073      	str	r3, [r6, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8019060:	68f3      	ldr	r3, [r6, #12]
 8019062:	8998      	ldrh	r0, [r3, #12]
 8019064:	f7fb fde2 	bl	8014c2c <lwip_htons>
 8019068:	07c0      	lsls	r0, r0, #31
 801906a:	d509      	bpl.n	8019080 <tcp_receive+0x670>
            recv_flags |= TF_GOT_FIN;
 801906c:	4ab4      	ldr	r2, [pc, #720]	; (8019340 <tcp_receive+0x930>)
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801906e:	7d21      	ldrb	r1, [r4, #20]
            recv_flags |= TF_GOT_FIN;
 8019070:	7813      	ldrb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8019072:	2904      	cmp	r1, #4
            recv_flags |= TF_GOT_FIN;
 8019074:	f043 0320 	orr.w	r3, r3, #32
 8019078:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801907a:	d101      	bne.n	8019080 <tcp_receive+0x670>
              pcb->state = CLOSE_WAIT;
 801907c:	2307      	movs	r3, #7
 801907e:	7523      	strb	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 8019080:	6833      	ldr	r3, [r6, #0]
          tcp_seg_free(cseg);
 8019082:	4630      	mov	r0, r6
          pcb->ooseq = cseg->next;
 8019084:	6763      	str	r3, [r4, #116]	; 0x74
          tcp_seg_free(cseg);
 8019086:	f7fe fa73 	bl	8017570 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801908a:	6f66      	ldr	r6, [r4, #116]	; 0x74
 801908c:	2e00      	cmp	r6, #0
 801908e:	d065      	beq.n	801915c <tcp_receive+0x74c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8019090:	68f3      	ldr	r3, [r6, #12]
        while (pcb->ooseq != NULL &&
 8019092:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8019094:	685a      	ldr	r2, [r3, #4]
        while (pcb->ooseq != NULL &&
 8019096:	428a      	cmp	r2, r1
 8019098:	d160      	bne.n	801915c <tcp_receive+0x74c>
          seqno = pcb->ooseq->tcphdr->seqno;
 801909a:	602a      	str	r2, [r5, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801909c:	8998      	ldrh	r0, [r3, #12]
 801909e:	f8b6 a008 	ldrh.w	sl, [r6, #8]
 80190a2:	f7fb fdc3 	bl	8014c2c <lwip_htons>
 80190a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80190a8:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80190ac:	68f2      	ldr	r2, [r6, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80190ae:	bf18      	it	ne
 80190b0:	2001      	movne	r0, #1
 80190b2:	449a      	add	sl, r3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80190b4:	f8b4 b028 	ldrh.w	fp, [r4, #40]	; 0x28
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80190b8:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80190ba:	f8b6 a008 	ldrh.w	sl, [r6, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80190be:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80190c0:	8990      	ldrh	r0, [r2, #12]
 80190c2:	f7fb fdb3 	bl	8014c2c <lwip_htons>
 80190c6:	f010 0003 	ands.w	r0, r0, #3
 80190ca:	bf18      	it	ne
 80190cc:	2001      	movne	r0, #1
 80190ce:	4450      	add	r0, sl
 80190d0:	4583      	cmp	fp, r0
 80190d2:	d2a9      	bcs.n	8019028 <tcp_receive+0x618>
 80190d4:	464b      	mov	r3, r9
 80190d6:	f240 622c 	movw	r2, #1580	; 0x62c
 80190da:	4641      	mov	r1, r8
 80190dc:	4638      	mov	r0, r7
 80190de:	f007 fd6b 	bl	8020bb8 <iprintf>
 80190e2:	e7a1      	b.n	8019028 <tcp_receive+0x618>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80190e4:	4b97      	ldr	r3, [pc, #604]	; (8019344 <tcp_receive+0x934>)
 80190e6:	f240 5294 	movw	r2, #1428	; 0x594
 80190ea:	4997      	ldr	r1, [pc, #604]	; (8019348 <tcp_receive+0x938>)
 80190ec:	4897      	ldr	r0, [pc, #604]	; (801934c <tcp_receive+0x93c>)
 80190ee:	f007 fd63 	bl	8020bb8 <iprintf>
 80190f2:	e67c      	b.n	8018dee <tcp_receive+0x3de>
        pcb->unsent_oversize = 0;
 80190f4:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
 80190f8:	e56d      	b.n	8018bd6 <tcp_receive+0x1c6>
        pcb->rtime = -1;
 80190fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80190fe:	8623      	strh	r3, [r4, #48]	; 0x30
 8019100:	e564      	b.n	8018bcc <tcp_receive+0x1bc>
          TCP_WND_INC(pcb->bytes_acked, acked);
 8019102:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8019106:	4419      	add	r1, r3
 8019108:	b289      	uxth	r1, r1
 801910a:	428b      	cmp	r3, r1
 801910c:	d82f      	bhi.n	801916e <tcp_receive+0x75e>
          if (pcb->bytes_acked >= pcb->cwnd) {
 801910e:	428a      	cmp	r2, r1
          TCP_WND_INC(pcb->bytes_acked, acked);
 8019110:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8019114:	f63f ad46 	bhi.w	8018ba4 <tcp_receive+0x194>
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8019118:	8e63      	ldrh	r3, [r4, #50]	; 0x32
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801911a:	1a89      	subs	r1, r1, r2
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801911c:	4413      	add	r3, r2
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801911e:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8019122:	b29b      	uxth	r3, r3
 8019124:	429a      	cmp	r2, r3
 8019126:	d814      	bhi.n	8019152 <tcp_receive+0x742>
 8019128:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 801912c:	e53a      	b.n	8018ba4 <tcp_receive+0x194>
              recv_data = cseg->p;
 801912e:	6019      	str	r1, [r3, #0]
 8019130:	e794      	b.n	801905c <tcp_receive+0x64c>
          if ((pcb->unsent == NULL) ||
 8019132:	b148      	cbz	r0, 8019148 <tcp_receive+0x738>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8019134:	68c3      	ldr	r3, [r0, #12]
 8019136:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 8019138:	6858      	ldr	r0, [r3, #4]
 801913a:	f7fb fd7b 	bl	8014c34 <lwip_htonl>
 801913e:	1a30      	subs	r0, r6, r0
          if ((pcb->unsent == NULL) ||
 8019140:	2800      	cmp	r0, #0
 8019142:	f73f ad82 	bgt.w	8018c4a <tcp_receive+0x23a>
 8019146:	8b61      	ldrh	r1, [r4, #26]
            tcp_clear_flags(pcb, TF_RTO);
 8019148:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 801914c:	4e80      	ldr	r6, [pc, #512]	; (8019350 <tcp_receive+0x940>)
 801914e:	8361      	strh	r1, [r4, #26]
 8019150:	e4fd      	b.n	8018b4e <tcp_receive+0x13e>
          TCP_WND_INC(pcb->cwnd, increase);
 8019152:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019156:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 801915a:	e523      	b.n	8018ba4 <tcp_receive+0x194>
        tcp_ack(pcb);
 801915c:	8b63      	ldrh	r3, [r4, #26]
 801915e:	07d9      	lsls	r1, r3, #31
 8019160:	d50d      	bpl.n	801917e <tcp_receive+0x76e>
 8019162:	f023 0301 	bic.w	r3, r3, #1
 8019166:	f043 0302 	orr.w	r3, r3, #2
 801916a:	8363      	strh	r3, [r4, #26]
 801916c:	e4c9      	b.n	8018b02 <tcp_receive+0xf2>
          if (pcb->bytes_acked >= pcb->cwnd) {
 801916e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019172:	e7d1      	b.n	8019118 <tcp_receive+0x708>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8019174:	4877      	ldr	r0, [pc, #476]	; (8019354 <tcp_receive+0x944>)
 8019176:	f7fe fa23 	bl	80175c0 <tcp_seg_copy>
 801917a:	6760      	str	r0, [r4, #116]	; 0x74
 801917c:	e477      	b.n	8018a6e <tcp_receive+0x5e>
        tcp_ack(pcb);
 801917e:	f043 0301 	orr.w	r3, r3, #1
 8019182:	8363      	strh	r3, [r4, #26]
 8019184:	e4bd      	b.n	8018b02 <tcp_receive+0xf2>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8019186:	4873      	ldr	r0, [pc, #460]	; (8019354 <tcp_receive+0x944>)
 8019188:	f7fe fa1a 	bl	80175c0 <tcp_seg_copy>
                  if (cseg != NULL) {
 801918c:	4606      	mov	r6, r0
 801918e:	2800      	cmp	r0, #0
 8019190:	f43f ac6d 	beq.w	8018a6e <tcp_receive+0x5e>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8019194:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8019198:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 801919c:	6851      	ldr	r1, [r2, #4]
 801919e:	682a      	ldr	r2, [r5, #0]
 80191a0:	440b      	add	r3, r1
 80191a2:	1a9b      	subs	r3, r3, r2
 80191a4:	2b00      	cmp	r3, #0
 80191a6:	dd07      	ble.n	80191b8 <tcp_receive+0x7a8>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80191a8:	1a52      	subs	r2, r2, r1
                      pbuf_realloc(prev->p, prev->len);
 80191aa:	f8d8 0004 	ldr.w	r0, [r8, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80191ae:	b291      	uxth	r1, r2
 80191b0:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 80191b4:	f7fd fcb4 	bl	8016b20 <pbuf_realloc>
                    prev->next = cseg;
 80191b8:	f8c8 6000 	str.w	r6, [r8]
                    tcp_oos_insert_segment(cseg, next);
 80191bc:	4639      	mov	r1, r7
 80191be:	4630      	mov	r0, r6
 80191c0:	f7ff fb40 	bl	8018844 <tcp_oos_insert_segment>
 80191c4:	e453      	b.n	8018a6e <tcp_receive+0x5e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80191c6:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80191ca:	8998      	ldrh	r0, [r3, #12]
 80191cc:	f7fb fd2e 	bl	8014c2c <lwip_htons>
 80191d0:	07c2      	lsls	r2, r0, #31
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80191d2:	f8d9 300c 	ldr.w	r3, [r9, #12]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80191d6:	f100 8085 	bmi.w	80192e4 <tcp_receive+0x8d4>
 80191da:	8998      	ldrh	r0, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 80191dc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80191de:	f8a9 3008 	strh.w	r3, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80191e2:	f7fb fd23 	bl	8014c2c <lwip_htons>
 80191e6:	0787      	lsls	r7, r0, #30
            inseg.len -= 1;
 80191e8:	f8b9 1008 	ldrh.w	r1, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80191ec:	d503      	bpl.n	80191f6 <tcp_receive+0x7e6>
            inseg.len -= 1;
 80191ee:	3901      	subs	r1, #1
 80191f0:	b289      	uxth	r1, r1
 80191f2:	f8a9 1008 	strh.w	r1, [r9, #8]
          pbuf_realloc(inseg.p, inseg.len);
 80191f6:	f8d9 0004 	ldr.w	r0, [r9, #4]
 80191fa:	f7fd fc91 	bl	8016b20 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80191fe:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8019202:	f8b9 7008 	ldrh.w	r7, [r9, #8]
 8019206:	8998      	ldrh	r0, [r3, #12]
 8019208:	f7fb fd10 	bl	8014c2c <lwip_htons>
 801920c:	f010 0303 	ands.w	r3, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019210:	682a      	ldr	r2, [r5, #0]
          tcplen = TCP_TCPLEN(&inseg);
 8019212:	bf18      	it	ne
 8019214:	2301      	movne	r3, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019216:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
 801921a:	6a61      	ldr	r1, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 801921c:	443b      	add	r3, r7
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801921e:	4461      	add	r1, ip
          tcplen = TCP_TCPLEN(&inseg);
 8019220:	b29b      	uxth	r3, r3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019222:	441a      	add	r2, r3
          tcplen = TCP_TCPLEN(&inseg);
 8019224:	8033      	strh	r3, [r6, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019226:	428a      	cmp	r2, r1
 8019228:	f43f ae24 	beq.w	8018e74 <tcp_receive+0x464>
 801922c:	4b45      	ldr	r3, [pc, #276]	; (8019344 <tcp_receive+0x934>)
 801922e:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8019232:	4949      	ldr	r1, [pc, #292]	; (8019358 <tcp_receive+0x948>)
 8019234:	4845      	ldr	r0, [pc, #276]	; (801934c <tcp_receive+0x93c>)
 8019236:	f007 fcbf 	bl	8020bb8 <iprintf>
 801923a:	e61b      	b.n	8018e74 <tcp_receive+0x464>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801923c:	4b41      	ldr	r3, [pc, #260]	; (8019344 <tcp_receive+0x934>)
 801923e:	f240 6207 	movw	r2, #1543	; 0x607
 8019242:	4946      	ldr	r1, [pc, #280]	; (801935c <tcp_receive+0x94c>)
 8019244:	4841      	ldr	r0, [pc, #260]	; (801934c <tcp_receive+0x93c>)
 8019246:	f007 fcb7 	bl	8020bb8 <iprintf>
 801924a:	8833      	ldrh	r3, [r6, #0]
 801924c:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801924e:	e6af      	b.n	8018fb0 <tcp_receive+0x5a0>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8019250:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8019254:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8019256:	4413      	add	r3, r2
 8019258:	b29b      	uxth	r3, r3
 801925a:	429a      	cmp	r2, r3
 801925c:	d901      	bls.n	8019262 <tcp_receive+0x852>
 801925e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019262:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 8019266:	4620      	mov	r0, r4
 8019268:	f001 fe6e 	bl	801af48 <tcp_rexmit_fast>
 801926c:	e46f      	b.n	8018b4e <tcp_receive+0x13e>
            while (next &&
 801926e:	4647      	mov	r7, r8
            if (next &&
 8019270:	f1be 0f00 	cmp.w	lr, #0
 8019274:	dc01      	bgt.n	801927a <tcp_receive+0x86a>
            pcb->ooseq = next;
 8019276:	6767      	str	r7, [r4, #116]	; 0x74
 8019278:	e695      	b.n	8018fa6 <tcp_receive+0x596>
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801927a:	f8d9 300c 	ldr.w	r3, [r9, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801927e:	ebaa 0c0c 	sub.w	ip, sl, ip
 8019282:	f8a9 c008 	strh.w	ip, [r9, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8019286:	8998      	ldrh	r0, [r3, #12]
 8019288:	f7fb fcd0 	bl	8014c2c <lwip_htons>
 801928c:	0783      	lsls	r3, r0, #30
 801928e:	d504      	bpl.n	801929a <tcp_receive+0x88a>
                inseg.len -= 1;
 8019290:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 8019294:	3b01      	subs	r3, #1
 8019296:	f8a9 3008 	strh.w	r3, [r9, #8]
              pbuf_realloc(inseg.p, inseg.len);
 801929a:	f8b9 1008 	ldrh.w	r1, [r9, #8]
 801929e:	f8d9 0004 	ldr.w	r0, [r9, #4]
 80192a2:	f7fd fc3d 	bl	8016b20 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80192a6:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80192aa:	f8b9 8008 	ldrh.w	r8, [r9, #8]
 80192ae:	8998      	ldrh	r0, [r3, #12]
 80192b0:	f7fb fcbc 	bl	8014c2c <lwip_htons>
 80192b4:	f010 0303 	ands.w	r3, r0, #3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80192b8:	682a      	ldr	r2, [r5, #0]
              tcplen = TCP_TCPLEN(&inseg);
 80192ba:	bf18      	it	ne
 80192bc:	2301      	movne	r3, #1
 80192be:	4443      	add	r3, r8
 80192c0:	b29b      	uxth	r3, r3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80192c2:	1899      	adds	r1, r3, r2
 80192c4:	68fa      	ldr	r2, [r7, #12]
              tcplen = TCP_TCPLEN(&inseg);
 80192c6:	8033      	strh	r3, [r6, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80192c8:	6852      	ldr	r2, [r2, #4]
 80192ca:	4291      	cmp	r1, r2
 80192cc:	d0d3      	beq.n	8019276 <tcp_receive+0x866>
 80192ce:	4b1d      	ldr	r3, [pc, #116]	; (8019344 <tcp_receive+0x934>)
 80192d0:	f240 52fd 	movw	r2, #1533	; 0x5fd
 80192d4:	4922      	ldr	r1, [pc, #136]	; (8019360 <tcp_receive+0x950>)
 80192d6:	481d      	ldr	r0, [pc, #116]	; (801934c <tcp_receive+0x93c>)
 80192d8:	f007 fc6e 	bl	8020bb8 <iprintf>
 80192dc:	8833      	ldrh	r3, [r6, #0]
 80192de:	682a      	ldr	r2, [r5, #0]
 80192e0:	441a      	add	r2, r3
 80192e2:	e7c8      	b.n	8019276 <tcp_receive+0x866>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80192e4:	899f      	ldrh	r7, [r3, #12]
 80192e6:	4638      	mov	r0, r7
 80192e8:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 80192ec:	f7fb fc9e 	bl	8014c2c <lwip_htons>
 80192f0:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 80192f4:	f7fb fc9a 	bl	8014c2c <lwip_htons>
 80192f8:	4338      	orrs	r0, r7
 80192fa:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80192fe:	b280      	uxth	r0, r0
 8019300:	8198      	strh	r0, [r3, #12]
 8019302:	e76b      	b.n	80191dc <tcp_receive+0x7cc>
                    pcb->ooseq = cseg;
 8019304:	6760      	str	r0, [r4, #116]	; 0x74
 8019306:	e4ea      	b.n	8018cde <tcp_receive+0x2ce>
            while (next &&
 8019308:	4647      	mov	r7, r8
 801930a:	e7b4      	b.n	8019276 <tcp_receive+0x866>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801930c:	683b      	ldr	r3, [r7, #0]
 801930e:	68db      	ldr	r3, [r3, #12]
 8019310:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 8019314:	4640      	mov	r0, r8
 8019316:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 801931a:	f7fb fc87 	bl	8014c2c <lwip_htons>
 801931e:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8019322:	f7fb fc83 	bl	8014c2c <lwip_htons>
 8019326:	683a      	ldr	r2, [r7, #0]
 8019328:	ea48 0800 	orr.w	r8, r8, r0
 801932c:	68d3      	ldr	r3, [r2, #12]
 801932e:	f8a3 800c 	strh.w	r8, [r3, #12]
 8019332:	e52d      	b.n	8018d90 <tcp_receive+0x380>
 8019334:	f8df 901c 	ldr.w	r9, [pc, #28]	; 8019354 <tcp_receive+0x944>
 8019338:	e58a      	b.n	8018e50 <tcp_receive+0x440>
 801933a:	bf00      	nop
 801933c:	2002a414 	.word	0x2002a414
 8019340:	2002a418 	.word	0x2002a418
 8019344:	0803e598 	.word	0x0803e598
 8019348:	0803e620 	.word	0x0803e620
 801934c:	08026bb8 	.word	0x08026bb8
 8019350:	2002a432 	.word	0x2002a432
 8019354:	2002a400 	.word	0x2002a400
 8019358:	0803e650 	.word	0x0803e650
 801935c:	0803e6c4 	.word	0x0803e6c4
 8019360:	0803e688 	.word	0x0803e688

08019364 <tcp_input>:
{
 8019364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8019368:	4605      	mov	r5, r0
{
 801936a:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801936c:	2800      	cmp	r0, #0
 801936e:	d040      	beq.n	80193f2 <tcp_input+0x8e>
  TCP_STATS_INC(tcp.recv);
 8019370:	4cbf      	ldr	r4, [pc, #764]	; (8019670 <tcp_input+0x30c>)
  if (p->len < TCP_HLEN) {
 8019372:	896a      	ldrh	r2, [r5, #10]
  TCP_STATS_INC(tcp.recv);
 8019374:	f8b4 3092 	ldrh.w	r3, [r4, #146]	; 0x92
  tcphdr = (struct tcp_hdr *)p->payload;
 8019378:	6869      	ldr	r1, [r5, #4]
  if (p->len < TCP_HLEN) {
 801937a:	2a13      	cmp	r2, #19
  tcphdr = (struct tcp_hdr *)p->payload;
 801937c:	4ebd      	ldr	r6, [pc, #756]	; (8019674 <tcp_input+0x310>)
  TCP_STATS_INC(tcp.recv);
 801937e:	f103 0301 	add.w	r3, r3, #1
  tcphdr = (struct tcp_hdr *)p->payload;
 8019382:	6031      	str	r1, [r6, #0]
  TCP_STATS_INC(tcp.recv);
 8019384:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
  if (p->len < TCP_HLEN) {
 8019388:	d80f      	bhi.n	80193aa <tcp_input+0x46>
      TCP_STATS_INC(tcp.lenerr);
 801938a:	f8b4 309a 	ldrh.w	r3, [r4, #154]	; 0x9a
 801938e:	3301      	adds	r3, #1
 8019390:	f8a4 309a 	strh.w	r3, [r4, #154]	; 0x9a
  TCP_STATS_INC(tcp.drop);
 8019394:	f8b4 3096 	ldrh.w	r3, [r4, #150]	; 0x96
  pbuf_free(p);
 8019398:	4628      	mov	r0, r5
  TCP_STATS_INC(tcp.drop);
 801939a:	3301      	adds	r3, #1
 801939c:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
}
 80193a0:	b007      	add	sp, #28
 80193a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 80193a6:	f7fd baaf 	b.w	8016908 <pbuf_free>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80193aa:	4fb3      	ldr	r7, [pc, #716]	; (8019678 <tcp_input+0x314>)
 80193ac:	6839      	ldr	r1, [r7, #0]
 80193ae:	6978      	ldr	r0, [r7, #20]
 80193b0:	f005 f9a6 	bl	801e700 <ip4_addr_isbroadcast_u32>
 80193b4:	b9b8      	cbnz	r0, 80193e6 <tcp_input+0x82>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80193b6:	697b      	ldr	r3, [r7, #20]
 80193b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80193bc:	2be0      	cmp	r3, #224	; 0xe0
 80193be:	d012      	beq.n	80193e6 <tcp_input+0x82>
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 80193c0:	f107 0014 	add.w	r0, r7, #20
 80193c4:	f107 0910 	add.w	r9, r7, #16
 80193c8:	892a      	ldrh	r2, [r5, #8]
 80193ca:	2106      	movs	r1, #6
 80193cc:	9000      	str	r0, [sp, #0]
 80193ce:	464b      	mov	r3, r9
 80193d0:	4628      	mov	r0, r5
 80193d2:	f7fc f9e7 	bl	80157a4 <ip_chksum_pseudo>
    if (chksum != 0) {
 80193d6:	4680      	mov	r8, r0
 80193d8:	b190      	cbz	r0, 8019400 <tcp_input+0x9c>
      TCP_STATS_INC(tcp.chkerr);
 80193da:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
 80193de:	3301      	adds	r3, #1
 80193e0:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
      goto dropped;
 80193e4:	e7d6      	b.n	8019394 <tcp_input+0x30>
    TCP_STATS_INC(tcp.proterr);
 80193e6:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
 80193ea:	3301      	adds	r3, #1
 80193ec:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
    goto dropped;
 80193f0:	e7d0      	b.n	8019394 <tcp_input+0x30>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80193f2:	4ba2      	ldr	r3, [pc, #648]	; (801967c <tcp_input+0x318>)
 80193f4:	2283      	movs	r2, #131	; 0x83
 80193f6:	49a2      	ldr	r1, [pc, #648]	; (8019680 <tcp_input+0x31c>)
 80193f8:	48a2      	ldr	r0, [pc, #648]	; (8019684 <tcp_input+0x320>)
 80193fa:	f007 fbdd 	bl	8020bb8 <iprintf>
 80193fe:	e7b7      	b.n	8019370 <tcp_input+0xc>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8019400:	6833      	ldr	r3, [r6, #0]
 8019402:	8998      	ldrh	r0, [r3, #12]
 8019404:	f7fb fc12 	bl	8014c2c <lwip_htons>
 8019408:	0a81      	lsrs	r1, r0, #10
 801940a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801940e:	2913      	cmp	r1, #19
 8019410:	d9bb      	bls.n	801938a <tcp_input+0x26>
 8019412:	b28b      	uxth	r3, r1
 8019414:	892a      	ldrh	r2, [r5, #8]
 8019416:	429a      	cmp	r2, r3
 8019418:	d3b7      	bcc.n	801938a <tcp_input+0x26>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801941a:	f1a3 0214 	sub.w	r2, r3, #20
  if (p->len >= hdrlen_bytes) {
 801941e:	8968      	ldrh	r0, [r5, #10]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8019420:	f8df a294 	ldr.w	sl, [pc, #660]	; 80196b8 <tcp_input+0x354>
  tcphdr_opt2 = NULL;
 8019424:	f8df b294 	ldr.w	fp, [pc, #660]	; 80196bc <tcp_input+0x358>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8019428:	b292      	uxth	r2, r2
  if (p->len >= hdrlen_bytes) {
 801942a:	4298      	cmp	r0, r3
  tcphdr_opt2 = NULL;
 801942c:	f8cb 8000 	str.w	r8, [fp]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8019430:	f8aa 2000 	strh.w	r2, [sl]
  if (p->len >= hdrlen_bytes) {
 8019434:	f080 81ab 	bcs.w	801978e <tcp_input+0x42a>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8019438:	682b      	ldr	r3, [r5, #0]
 801943a:	2b00      	cmp	r3, #0
 801943c:	f000 8288 	beq.w	8019950 <tcp_input+0x5ec>
    pbuf_remove_header(p, TCP_HLEN);
 8019440:	2114      	movs	r1, #20
 8019442:	4628      	mov	r0, r5
 8019444:	f7fd fa24 	bl	8016890 <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 8019448:	896b      	ldrh	r3, [r5, #10]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801944a:	f8ba 8000 	ldrh.w	r8, [sl]
    pbuf_remove_header(p, tcphdr_opt1len);
 801944e:	4628      	mov	r0, r5
    tcphdr_opt1len = p->len;
 8019450:	4a8d      	ldr	r2, [pc, #564]	; (8019688 <tcp_input+0x324>)
    pbuf_remove_header(p, tcphdr_opt1len);
 8019452:	4619      	mov	r1, r3
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8019454:	eba8 0803 	sub.w	r8, r8, r3
    tcphdr_opt1len = p->len;
 8019458:	8013      	strh	r3, [r2, #0]
    pbuf_remove_header(p, tcphdr_opt1len);
 801945a:	f7fd fa19 	bl	8016890 <pbuf_remove_header>
    if (opt2len > p->next->len) {
 801945e:	6828      	ldr	r0, [r5, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8019460:	fa1f f888 	uxth.w	r8, r8
    if (opt2len > p->next->len) {
 8019464:	8943      	ldrh	r3, [r0, #10]
 8019466:	4543      	cmp	r3, r8
 8019468:	d38f      	bcc.n	801938a <tcp_input+0x26>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801946a:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 801946c:	4641      	mov	r1, r8
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801946e:	f8cb 3000 	str.w	r3, [fp]
    pbuf_remove_header(p->next, opt2len);
 8019472:	f7fd fa0d 	bl	8016890 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8019476:	892b      	ldrh	r3, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8019478:	896a      	ldrh	r2, [r5, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801947a:	eba3 0308 	sub.w	r3, r3, r8
 801947e:	b29b      	uxth	r3, r3
 8019480:	812b      	strh	r3, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8019482:	b132      	cbz	r2, 8019492 <tcp_input+0x12e>
 8019484:	4b7d      	ldr	r3, [pc, #500]	; (801967c <tcp_input+0x318>)
 8019486:	22df      	movs	r2, #223	; 0xdf
 8019488:	4980      	ldr	r1, [pc, #512]	; (801968c <tcp_input+0x328>)
 801948a:	487e      	ldr	r0, [pc, #504]	; (8019684 <tcp_input+0x320>)
 801948c:	f007 fb94 	bl	8020bb8 <iprintf>
 8019490:	892b      	ldrh	r3, [r5, #8]
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8019492:	682a      	ldr	r2, [r5, #0]
 8019494:	8912      	ldrh	r2, [r2, #8]
 8019496:	429a      	cmp	r2, r3
 8019498:	d005      	beq.n	80194a6 <tcp_input+0x142>
 801949a:	4b78      	ldr	r3, [pc, #480]	; (801967c <tcp_input+0x318>)
 801949c:	22e0      	movs	r2, #224	; 0xe0
 801949e:	497c      	ldr	r1, [pc, #496]	; (8019690 <tcp_input+0x32c>)
 80194a0:	4878      	ldr	r0, [pc, #480]	; (8019684 <tcp_input+0x320>)
 80194a2:	f007 fb89 	bl	8020bb8 <iprintf>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80194a6:	f8d6 8000 	ldr.w	r8, [r6]
 80194aa:	f8b8 0000 	ldrh.w	r0, [r8]
 80194ae:	f7fb fbbd 	bl	8014c2c <lwip_htons>
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80194b2:	f8d6 a000 	ldr.w	sl, [r6]
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80194b6:	f8a8 0000 	strh.w	r0, [r8]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80194ba:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 80194be:	f7fb fbb5 	bl	8014c2c <lwip_htons>
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80194c2:	f8d6 8000 	ldr.w	r8, [r6]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80194c6:	f8aa 0002 	strh.w	r0, [sl, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80194ca:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80194ce:	f7fb fbb1 	bl	8014c34 <lwip_htonl>
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80194d2:	f8d6 a000 	ldr.w	sl, [r6]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80194d6:	4b6f      	ldr	r3, [pc, #444]	; (8019694 <tcp_input+0x330>)
 80194d8:	f8c8 0004 	str.w	r0, [r8, #4]
 80194dc:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80194de:	f8da 0008 	ldr.w	r0, [sl, #8]
 80194e2:	f7fb fba7 	bl	8014c34 <lwip_htonl>
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80194e6:	f8d6 8000 	ldr.w	r8, [r6]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80194ea:	4b6b      	ldr	r3, [pc, #428]	; (8019698 <tcp_input+0x334>)
 80194ec:	f8ca 0008 	str.w	r0, [sl, #8]
 80194f0:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80194f2:	f8b8 000e 	ldrh.w	r0, [r8, #14]
 80194f6:	f7fb fb99 	bl	8014c2c <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 80194fa:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80194fc:	f8a8 000e 	strh.w	r0, [r8, #14]
  flags = TCPH_FLAGS(tcphdr);
 8019500:	8998      	ldrh	r0, [r3, #12]
 8019502:	f7fb fb93 	bl	8014c2c <lwip_htons>
 8019506:	4965      	ldr	r1, [pc, #404]	; (801969c <tcp_input+0x338>)
 8019508:	b2c0      	uxtb	r0, r0
  tcplen = p->tot_len;
 801950a:	892b      	ldrh	r3, [r5, #8]
  flags = TCPH_FLAGS(tcphdr);
 801950c:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8019510:	700a      	strb	r2, [r1, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8019512:	0782      	lsls	r2, r0, #30
 8019514:	f000 8141 	beq.w	801979a <tcp_input+0x436>
    tcplen++;
 8019518:	1c5a      	adds	r2, r3, #1
 801951a:	4961      	ldr	r1, [pc, #388]	; (80196a0 <tcp_input+0x33c>)
 801951c:	b292      	uxth	r2, r2
 801951e:	9105      	str	r1, [sp, #20]
    if (tcplen < p->tot_len) {
 8019520:	4293      	cmp	r3, r2
    tcplen++;
 8019522:	800a      	strh	r2, [r1, #0]
    if (tcplen < p->tot_len) {
 8019524:	f63f af31 	bhi.w	801938a <tcp_input+0x26>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8019528:	4b5e      	ldr	r3, [pc, #376]	; (80196a4 <tcp_input+0x340>)
 801952a:	f8d3 8000 	ldr.w	r8, [r3]
 801952e:	f1b8 0f00 	cmp.w	r8, #0
 8019532:	f000 80d9 	beq.w	80196e8 <tcp_input+0x384>
  prev = NULL;
 8019536:	f04f 0a00 	mov.w	sl, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801953a:	f8df b140 	ldr.w	fp, [pc, #320]	; 801967c <tcp_input+0x318>
 801953e:	e01c      	b.n	801957a <tcp_input+0x216>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8019540:	2b0a      	cmp	r3, #10
 8019542:	f000 80c8 	beq.w	80196d6 <tcp_input+0x372>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8019546:	2b01      	cmp	r3, #1
 8019548:	f000 80be 	beq.w	80196c8 <tcp_input+0x364>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801954c:	f898 2008 	ldrb.w	r2, [r8, #8]
 8019550:	b132      	cbz	r2, 8019560 <tcp_input+0x1fc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8019552:	687b      	ldr	r3, [r7, #4]
 8019554:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8019558:	3301      	adds	r3, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801955a:	b2db      	uxtb	r3, r3
 801955c:	429a      	cmp	r2, r3
 801955e:	d105      	bne.n	801956c <tcp_input+0x208>
    if (pcb->remote_port == tcphdr->src &&
 8019560:	6833      	ldr	r3, [r6, #0]
 8019562:	f8b8 1018 	ldrh.w	r1, [r8, #24]
 8019566:	881a      	ldrh	r2, [r3, #0]
 8019568:	4291      	cmp	r1, r2
 801956a:	d013      	beq.n	8019594 <tcp_input+0x230>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801956c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019570:	46c2      	mov	sl, r8
 8019572:	2b00      	cmp	r3, #0
 8019574:	f000 80b8 	beq.w	80196e8 <tcp_input+0x384>
 8019578:	4698      	mov	r8, r3
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801957a:	f898 3014 	ldrb.w	r3, [r8, #20]
 801957e:	2b00      	cmp	r3, #0
 8019580:	d1de      	bne.n	8019540 <tcp_input+0x1dc>
 8019582:	465b      	mov	r3, fp
 8019584:	22fb      	movs	r2, #251	; 0xfb
 8019586:	4948      	ldr	r1, [pc, #288]	; (80196a8 <tcp_input+0x344>)
 8019588:	483e      	ldr	r0, [pc, #248]	; (8019684 <tcp_input+0x320>)
 801958a:	f007 fb15 	bl	8020bb8 <iprintf>
 801958e:	f898 3014 	ldrb.w	r3, [r8, #20]
 8019592:	e7d5      	b.n	8019540 <tcp_input+0x1dc>
    if (pcb->remote_port == tcphdr->src &&
 8019594:	885b      	ldrh	r3, [r3, #2]
 8019596:	f8b8 2016 	ldrh.w	r2, [r8, #22]
 801959a:	429a      	cmp	r2, r3
 801959c:	d1e6      	bne.n	801956c <tcp_input+0x208>
        pcb->local_port == tcphdr->dest &&
 801959e:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80195a2:	693b      	ldr	r3, [r7, #16]
 80195a4:	429a      	cmp	r2, r3
 80195a6:	d1e1      	bne.n	801956c <tcp_input+0x208>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80195a8:	f8d8 2000 	ldr.w	r2, [r8]
 80195ac:	697b      	ldr	r3, [r7, #20]
 80195ae:	429a      	cmp	r2, r3
 80195b0:	d1dc      	bne.n	801956c <tcp_input+0x208>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80195b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80195b6:	4543      	cmp	r3, r8
 80195b8:	f000 8460 	beq.w	8019e7c <tcp_input+0xb18>
      if (prev != NULL) {
 80195bc:	f1ba 0f00 	cmp.w	sl, #0
 80195c0:	f000 8455 	beq.w	8019e6e <tcp_input+0xb0a>
        pcb->next = tcp_active_pcbs;
 80195c4:	4937      	ldr	r1, [pc, #220]	; (80196a4 <tcp_input+0x340>)
        prev->next = pcb->next;
 80195c6:	f8ca 300c 	str.w	r3, [sl, #12]
        pcb->next = tcp_active_pcbs;
 80195ca:	680a      	ldr	r2, [r1, #0]
        tcp_active_pcbs = pcb;
 80195cc:	f8c1 8000 	str.w	r8, [r1]
 80195d0:	4613      	mov	r3, r2
        pcb->next = tcp_active_pcbs;
 80195d2:	f8c8 200c 	str.w	r2, [r8, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80195d6:	4543      	cmp	r3, r8
 80195d8:	f000 8440 	beq.w	8019e5c <tcp_input+0xaf8>
    inseg.next = NULL;
 80195dc:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 80196c0 <tcp_input+0x35c>
 80195e0:	2300      	movs	r3, #0
    inseg.tcphdr = tcphdr;
 80195e2:	6832      	ldr	r2, [r6, #0]
    inseg.len = p->tot_len;
 80195e4:	8929      	ldrh	r1, [r5, #8]
    inseg.tcphdr = tcphdr;
 80195e6:	f8ca 200c 	str.w	r2, [sl, #12]
    if (flags & TCP_PSH) {
 80195ea:	4a2c      	ldr	r2, [pc, #176]	; (801969c <tcp_input+0x338>)
    recv_data = NULL;
 80195ec:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 80196c4 <tcp_input+0x360>
    recv_flags = 0;
 80195f0:	4f2e      	ldr	r7, [pc, #184]	; (80196ac <tcp_input+0x348>)
    inseg.len = p->tot_len;
 80195f2:	f8aa 1008 	strh.w	r1, [sl, #8]
    if (flags & TCP_PSH) {
 80195f6:	7812      	ldrb	r2, [r2, #0]
    recv_acked = 0;
 80195f8:	492d      	ldr	r1, [pc, #180]	; (80196b0 <tcp_input+0x34c>)
    inseg.next = NULL;
 80195fa:	f8ca 3000 	str.w	r3, [sl]
    recv_data = NULL;
 80195fe:	f8cb 3000 	str.w	r3, [fp]
    recv_flags = 0;
 8019602:	703b      	strb	r3, [r7, #0]
    recv_acked = 0;
 8019604:	800b      	strh	r3, [r1, #0]
    if (flags & TCP_PSH) {
 8019606:	0713      	lsls	r3, r2, #28
    inseg.p = p;
 8019608:	f8ca 5004 	str.w	r5, [sl, #4]
    if (flags & TCP_PSH) {
 801960c:	d503      	bpl.n	8019616 <tcp_input+0x2b2>
      p->flags |= PBUF_FLAG_PUSH;
 801960e:	7b6b      	ldrb	r3, [r5, #13]
 8019610:	f043 0301 	orr.w	r3, r3, #1
 8019614:	736b      	strb	r3, [r5, #13]
    if (pcb->refused_data != NULL) {
 8019616:	f8d8 3078 	ldr.w	r3, [r8, #120]	; 0x78
 801961a:	2b00      	cmp	r3, #0
 801961c:	f000 80c1 	beq.w	80197a2 <tcp_input+0x43e>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8019620:	4640      	mov	r0, r8
 8019622:	f7fe fe9b 	bl	801835c <tcp_process_refused_data>
 8019626:	300d      	adds	r0, #13
 8019628:	d009      	beq.n	801963e <tcp_input+0x2da>
 801962a:	f8d8 3078 	ldr.w	r3, [r8, #120]	; 0x78
 801962e:	2b00      	cmp	r3, #0
 8019630:	f000 80b7 	beq.w	80197a2 <tcp_input+0x43e>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8019634:	9b05      	ldr	r3, [sp, #20]
 8019636:	881b      	ldrh	r3, [r3, #0]
 8019638:	2b00      	cmp	r3, #0
 801963a:	f000 80b2 	beq.w	80197a2 <tcp_input+0x43e>
        if (pcb->rcv_ann_wnd == 0) {
 801963e:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
 8019642:	2b00      	cmp	r3, #0
 8019644:	f000 8331 	beq.w	8019caa <tcp_input+0x946>
        TCP_STATS_INC(tcp.drop);
 8019648:	f8b4 3096 	ldrh.w	r3, [r4, #150]	; 0x96
 801964c:	4d19      	ldr	r5, [pc, #100]	; (80196b4 <tcp_input+0x350>)
 801964e:	3301      	adds	r3, #1
 8019650:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
    tcp_input_pcb = NULL;
 8019654:	2400      	movs	r4, #0
    if (inseg.p != NULL) {
 8019656:	f8da 0004 	ldr.w	r0, [sl, #4]
    tcp_input_pcb = NULL;
 801965a:	602c      	str	r4, [r5, #0]
    recv_data = NULL;
 801965c:	f8cb 4000 	str.w	r4, [fp]
    if (inseg.p != NULL) {
 8019660:	b118      	cbz	r0, 801966a <tcp_input+0x306>
      pbuf_free(inseg.p);
 8019662:	f7fd f951 	bl	8016908 <pbuf_free>
      inseg.p = NULL;
 8019666:	f8ca 4004 	str.w	r4, [sl, #4]
}
 801966a:	b007      	add	sp, #28
 801966c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019670:	2003e1cc 	.word	0x2003e1cc
 8019674:	2002a424 	.word	0x2002a424
 8019678:	2002ead4 	.word	0x2002ead4
 801967c:	0803e598 	.word	0x0803e598
 8019680:	0803e368 	.word	0x0803e368
 8019684:	08026bb8 	.word	0x08026bb8
 8019688:	2002a428 	.word	0x2002a428
 801968c:	0803e390 	.word	0x0803e390
 8019690:	0803e39c 	.word	0x0803e39c
 8019694:	2002a41c 	.word	0x2002a41c
 8019698:	2002a3f8 	.word	0x2002a3f8
 801969c:	2002a3fc 	.word	0x2002a3fc
 80196a0:	2002a432 	.word	0x2002a432
 80196a4:	2003e2d8 	.word	0x2003e2d8
 80196a8:	0803e3bc 	.word	0x0803e3bc
 80196ac:	2002a418 	.word	0x2002a418
 80196b0:	2002a410 	.word	0x2002a410
 80196b4:	2003e2ec 	.word	0x2003e2ec
 80196b8:	2002a430 	.word	0x2002a430
 80196bc:	2002a42c 	.word	0x2002a42c
 80196c0:	2002a400 	.word	0x2002a400
 80196c4:	2002a414 	.word	0x2002a414
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80196c8:	465b      	mov	r3, fp
 80196ca:	22fd      	movs	r2, #253	; 0xfd
 80196cc:	49bd      	ldr	r1, [pc, #756]	; (80199c4 <tcp_input+0x660>)
 80196ce:	48be      	ldr	r0, [pc, #760]	; (80199c8 <tcp_input+0x664>)
 80196d0:	f007 fa72 	bl	8020bb8 <iprintf>
 80196d4:	e73a      	b.n	801954c <tcp_input+0x1e8>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80196d6:	465b      	mov	r3, fp
 80196d8:	22fc      	movs	r2, #252	; 0xfc
 80196da:	49bc      	ldr	r1, [pc, #752]	; (80199cc <tcp_input+0x668>)
 80196dc:	48ba      	ldr	r0, [pc, #744]	; (80199c8 <tcp_input+0x664>)
 80196de:	f007 fa6b 	bl	8020bb8 <iprintf>
 80196e2:	f898 3014 	ldrb.w	r3, [r8, #20]
 80196e6:	e72e      	b.n	8019546 <tcp_input+0x1e2>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80196e8:	4bb9      	ldr	r3, [pc, #740]	; (80199d0 <tcp_input+0x66c>)
 80196ea:	f8d3 8000 	ldr.w	r8, [r3]
 80196ee:	f1b8 0f00 	cmp.w	r8, #0
 80196f2:	f000 8087 	beq.w	8019804 <tcp_input+0x4a0>
 80196f6:	462b      	mov	r3, r5
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80196f8:	f8df b2f4 	ldr.w	fp, [pc, #756]	; 80199f0 <tcp_input+0x68c>
 80196fc:	4645      	mov	r5, r8
 80196fe:	f8df a300 	ldr.w	sl, [pc, #768]	; 8019a00 <tcp_input+0x69c>
 8019702:	4698      	mov	r8, r3
 8019704:	e002      	b.n	801970c <tcp_input+0x3a8>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8019706:	68ed      	ldr	r5, [r5, #12]
 8019708:	2d00      	cmp	r5, #0
 801970a:	d07a      	beq.n	8019802 <tcp_input+0x49e>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801970c:	7d28      	ldrb	r0, [r5, #20]
 801970e:	465b      	mov	r3, fp
 8019710:	f240 121f 	movw	r2, #287	; 0x11f
 8019714:	4651      	mov	r1, sl
 8019716:	280a      	cmp	r0, #10
 8019718:	48ab      	ldr	r0, [pc, #684]	; (80199c8 <tcp_input+0x664>)
 801971a:	d001      	beq.n	8019720 <tcp_input+0x3bc>
 801971c:	f007 fa4c 	bl	8020bb8 <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8019720:	7a2a      	ldrb	r2, [r5, #8]
 8019722:	b132      	cbz	r2, 8019732 <tcp_input+0x3ce>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801972a:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801972c:	b2db      	uxtb	r3, r3
 801972e:	429a      	cmp	r2, r3
 8019730:	d1e9      	bne.n	8019706 <tcp_input+0x3a2>
      if (pcb->remote_port == tcphdr->src &&
 8019732:	6833      	ldr	r3, [r6, #0]
 8019734:	8b2a      	ldrh	r2, [r5, #24]
 8019736:	8819      	ldrh	r1, [r3, #0]
 8019738:	4291      	cmp	r1, r2
 801973a:	d1e4      	bne.n	8019706 <tcp_input+0x3a2>
 801973c:	8858      	ldrh	r0, [r3, #2]
          pcb->local_port == tcphdr->dest &&
 801973e:	8aeb      	ldrh	r3, [r5, #22]
      if (pcb->remote_port == tcphdr->src &&
 8019740:	4298      	cmp	r0, r3
 8019742:	d1e0      	bne.n	8019706 <tcp_input+0x3a2>
          pcb->local_port == tcphdr->dest &&
 8019744:	686a      	ldr	r2, [r5, #4]
 8019746:	693b      	ldr	r3, [r7, #16]
 8019748:	429a      	cmp	r2, r3
 801974a:	d1dc      	bne.n	8019706 <tcp_input+0x3a2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801974c:	682a      	ldr	r2, [r5, #0]
 801974e:	697b      	ldr	r3, [r7, #20]
 8019750:	429a      	cmp	r2, r3
 8019752:	d1d8      	bne.n	8019706 <tcp_input+0x3a2>
 8019754:	4643      	mov	r3, r8
 8019756:	46a8      	mov	r8, r5
 8019758:	461d      	mov	r5, r3
  if (flags & TCP_RST) {
 801975a:	4b9e      	ldr	r3, [pc, #632]	; (80199d4 <tcp_input+0x670>)
 801975c:	781b      	ldrb	r3, [r3, #0]
 801975e:	075f      	lsls	r7, r3, #29
 8019760:	d413      	bmi.n	801978a <tcp_input+0x426>
 8019762:	9a05      	ldr	r2, [sp, #20]
  if (flags & TCP_SYN) {
 8019764:	079e      	lsls	r6, r3, #30
 8019766:	8814      	ldrh	r4, [r2, #0]
 8019768:	f140 8370 	bpl.w	8019e4c <tcp_input+0xae8>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801976c:	4b9a      	ldr	r3, [pc, #616]	; (80199d8 <tcp_input+0x674>)
 801976e:	681a      	ldr	r2, [r3, #0]
 8019770:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8019774:	1ad3      	subs	r3, r2, r3
 8019776:	d405      	bmi.n	8019784 <tcp_input+0x420>
 8019778:	f8b8 6028 	ldrh.w	r6, [r8, #40]	; 0x28
 801977c:	1b9b      	subs	r3, r3, r6
 801977e:	2b00      	cmp	r3, #0
 8019780:	f340 8330 	ble.w	8019de4 <tcp_input+0xa80>
  if ((tcplen > 0)) {
 8019784:	2c00      	cmp	r4, #0
 8019786:	f040 833b 	bne.w	8019e00 <tcp_input+0xa9c>
        pbuf_free(p);
 801978a:	4628      	mov	r0, r5
 801978c:	e608      	b.n	80193a0 <tcp_input+0x3c>
    tcphdr_opt1len = tcphdr_optlen;
 801978e:	4b93      	ldr	r3, [pc, #588]	; (80199dc <tcp_input+0x678>)
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8019790:	4628      	mov	r0, r5
    tcphdr_opt1len = tcphdr_optlen;
 8019792:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8019794:	f7fd f87c 	bl	8016890 <pbuf_remove_header>
 8019798:	e685      	b.n	80194a6 <tcp_input+0x142>
  tcplen = p->tot_len;
 801979a:	4a91      	ldr	r2, [pc, #580]	; (80199e0 <tcp_input+0x67c>)
 801979c:	9205      	str	r2, [sp, #20]
 801979e:	8013      	strh	r3, [r2, #0]
 80197a0:	e6c2      	b.n	8019528 <tcp_input+0x1c4>
  if (flags & TCP_RST) {
 80197a2:	4b8c      	ldr	r3, [pc, #560]	; (80199d4 <tcp_input+0x670>)
    tcp_input_pcb = pcb;
 80197a4:	4d8f      	ldr	r5, [pc, #572]	; (80199e4 <tcp_input+0x680>)
  if (flags & TCP_RST) {
 80197a6:	781a      	ldrb	r2, [r3, #0]
    tcp_input_pcb = pcb;
 80197a8:	f8c5 8000 	str.w	r8, [r5]
  if (flags & TCP_RST) {
 80197ac:	0753      	lsls	r3, r2, #29
 80197ae:	f140 80f9 	bpl.w	80199a4 <tcp_input+0x640>
    if (pcb->state == SYN_SENT) {
 80197b2:	f898 1014 	ldrb.w	r1, [r8, #20]
 80197b6:	2902      	cmp	r1, #2
 80197b8:	f000 8265 	beq.w	8019c86 <tcp_input+0x922>
      if (seqno == pcb->rcv_nxt) {
 80197bc:	4b86      	ldr	r3, [pc, #536]	; (80199d8 <tcp_input+0x674>)
 80197be:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 80197c2:	681b      	ldr	r3, [r3, #0]
 80197c4:	429a      	cmp	r2, r3
 80197c6:	f000 83b0 	beq.w	8019f2a <tcp_input+0xbc6>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80197ca:	1a9b      	subs	r3, r3, r2
 80197cc:	d405      	bmi.n	80197da <tcp_input+0x476>
 80197ce:	f8b8 2028 	ldrh.w	r2, [r8, #40]	; 0x28
 80197d2:	1a9b      	subs	r3, r3, r2
 80197d4:	2b00      	cmp	r3, #0
 80197d6:	f340 8302 	ble.w	8019dde <tcp_input+0xa7a>
      if (recv_flags & TF_RESET) {
 80197da:	783b      	ldrb	r3, [r7, #0]
 80197dc:	0719      	lsls	r1, r3, #28
 80197de:	f140 8113 	bpl.w	8019a08 <tcp_input+0x6a4>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80197e2:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 80197e6:	b123      	cbz	r3, 80197f2 <tcp_input+0x48e>
 80197e8:	f06f 010d 	mvn.w	r1, #13
 80197ec:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80197f0:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80197f2:	4641      	mov	r1, r8
 80197f4:	487c      	ldr	r0, [pc, #496]	; (80199e8 <tcp_input+0x684>)
 80197f6:	f7fe fa43 	bl	8017c80 <tcp_pcb_remove>
        tcp_free(pcb);
 80197fa:	4640      	mov	r0, r8
 80197fc:	f7fd fd50 	bl	80172a0 <tcp_free>
 8019800:	e728      	b.n	8019654 <tcp_input+0x2f0>
 8019802:	4645      	mov	r5, r8
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8019804:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8019a04 <tcp_input+0x6a0>
 8019808:	6830      	ldr	r0, [r6, #0]
 801980a:	f8db e000 	ldr.w	lr, [fp]
 801980e:	f1be 0f00 	cmp.w	lr, #0
 8019812:	f000 80a4 	beq.w	801995e <tcp_input+0x5fa>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8019816:	f8d7 c004 	ldr.w	ip, [r7, #4]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801981a:	46f2      	mov	sl, lr
 801981c:	f8d7 8014 	ldr.w	r8, [r7, #20]
    prev = NULL;
 8019820:	2100      	movs	r1, #0
 8019822:	e006      	b.n	8019832 <tcp_input+0x4ce>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8019824:	f8da 300c 	ldr.w	r3, [sl, #12]
 8019828:	4651      	mov	r1, sl
 801982a:	469a      	mov	sl, r3
 801982c:	2b00      	cmp	r3, #0
 801982e:	f000 8096 	beq.w	801995e <tcp_input+0x5fa>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8019832:	f89a 2008 	ldrb.w	r2, [sl, #8]
 8019836:	b12a      	cbz	r2, 8019844 <tcp_input+0x4e0>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8019838:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 801983c:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801983e:	b2db      	uxtb	r3, r3
 8019840:	429a      	cmp	r2, r3
 8019842:	d1ef      	bne.n	8019824 <tcp_input+0x4c0>
      if (lpcb->local_port == tcphdr->dest) {
 8019844:	f8ba 2016 	ldrh.w	r2, [sl, #22]
 8019848:	8843      	ldrh	r3, [r0, #2]
 801984a:	429a      	cmp	r2, r3
 801984c:	d1ea      	bne.n	8019824 <tcp_input+0x4c0>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801984e:	f8da 3000 	ldr.w	r3, [sl]
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8019852:	b10b      	cbz	r3, 8019858 <tcp_input+0x4f4>
 8019854:	4543      	cmp	r3, r8
 8019856:	d1e5      	bne.n	8019824 <tcp_input+0x4c0>
      if (prev != NULL) {
 8019858:	2900      	cmp	r1, #0
 801985a:	f000 822a 	beq.w	8019cb2 <tcp_input+0x94e>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801985e:	f8da 300c 	ldr.w	r3, [sl, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8019862:	f8cb a000 	str.w	sl, [fp]
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8019866:	60cb      	str	r3, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8019868:	f8ca e00c 	str.w	lr, [sl, #12]
  if (flags & TCP_RST) {
 801986c:	4b59      	ldr	r3, [pc, #356]	; (80199d4 <tcp_input+0x670>)
 801986e:	781b      	ldrb	r3, [r3, #0]
 8019870:	0759      	lsls	r1, r3, #29
 8019872:	d48a      	bmi.n	801978a <tcp_input+0x426>
  if (flags & TCP_ACK) {
 8019874:	f013 0810 	ands.w	r8, r3, #16
 8019878:	f040 8221 	bne.w	8019cbe <tcp_input+0x95a>
  } else if (flags & TCP_SYN) {
 801987c:	079a      	lsls	r2, r3, #30
 801987e:	d584      	bpl.n	801978a <tcp_input+0x426>
    npcb = tcp_alloc(pcb->prio);
 8019880:	f89a 0015 	ldrb.w	r0, [sl, #21]
 8019884:	f7fe fb78 	bl	8017f78 <tcp_alloc>
    if (npcb == NULL) {
 8019888:	4681      	mov	r9, r0
 801988a:	2800      	cmp	r0, #0
 801988c:	f000 82cb 	beq.w	8019e26 <tcp_input+0xac2>
    npcb->remote_port = tcphdr->src;
 8019890:	6832      	ldr	r2, [r6, #0]
    npcb->state = SYN_RCVD;
 8019892:	f04f 0c03 	mov.w	ip, #3
    npcb->rcv_nxt = seqno + 1;
 8019896:	4b50      	ldr	r3, [pc, #320]	; (80199d8 <tcp_input+0x674>)
    npcb->local_port = pcb->local_port;
 8019898:	f8ba 4016 	ldrh.w	r4, [sl, #22]
    npcb->rcv_nxt = seqno + 1;
 801989c:	6819      	ldr	r1, [r3, #0]
    npcb->remote_port = tcphdr->src;
 801989e:	7813      	ldrb	r3, [r2, #0]
 80198a0:	7852      	ldrb	r2, [r2, #1]
    npcb->rcv_nxt = seqno + 1;
 80198a2:	3101      	adds	r1, #1
    npcb->remote_port = tcphdr->src;
 80198a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    npcb->rcv_nxt = seqno + 1;
 80198a8:	6241      	str	r1, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80198aa:	62c1      	str	r1, [r0, #44]	; 0x2c
    npcb->remote_port = tcphdr->src;
 80198ac:	8303      	strh	r3, [r0, #24]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80198ae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    npcb->state = SYN_RCVD;
 80198b2:	f880 c014 	strb.w	ip, [r0, #20]
    npcb->local_port = pcb->local_port;
 80198b6:	82c4      	strh	r4, [r0, #22]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80198b8:	1d04      	adds	r4, r0, #4
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80198ba:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80198bc:	6042      	str	r2, [r0, #4]
    iss = tcp_next_iss(npcb);
 80198be:	f7fe fdeb 	bl	8018498 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80198c2:	4b45      	ldr	r3, [pc, #276]	; (80199d8 <tcp_input+0x674>)
    TCP_REG_ACTIVE(npcb);
 80198c4:	4948      	ldr	r1, [pc, #288]	; (80199e8 <tcp_input+0x684>)
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80198c6:	681a      	ldr	r2, [r3, #0]
    npcb->callback_arg = pcb->callback_arg;
 80198c8:	f8da 3010 	ldr.w	r3, [sl, #16]
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80198cc:	3a01      	subs	r2, #1
    npcb->snd_wl2 = iss;
 80198ce:	f8c9 0058 	str.w	r0, [r9, #88]	; 0x58
    npcb->lastack = iss;
 80198d2:	f8c9 0044 	str.w	r0, [r9, #68]	; 0x44
    npcb->snd_lbb = iss;
 80198d6:	f8c9 005c 	str.w	r0, [r9, #92]	; 0x5c
    npcb->callback_arg = pcb->callback_arg;
 80198da:	f8c9 3010 	str.w	r3, [r9, #16]
    npcb->listener = pcb;
 80198de:	f8c9 a07c 	str.w	sl, [r9, #124]	; 0x7c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80198e2:	e9c9 0214 	strd	r0, r2, [r9, #80]	; 0x50
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80198e6:	f89a 3009 	ldrb.w	r3, [sl, #9]
    TCP_REG_ACTIVE(npcb);
 80198ea:	680a      	ldr	r2, [r1, #0]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80198ec:	f003 030c 	and.w	r3, r3, #12
    TCP_REG_ACTIVE(npcb);
 80198f0:	f8c1 9000 	str.w	r9, [r1]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80198f4:	f889 3009 	strb.w	r3, [r9, #9]
    npcb->netif_idx = pcb->netif_idx;
 80198f8:	f89a 3008 	ldrb.w	r3, [sl, #8]
    TCP_REG_ACTIVE(npcb);
 80198fc:	f8c9 200c 	str.w	r2, [r9, #12]
    npcb->netif_idx = pcb->netif_idx;
 8019900:	f889 3008 	strb.w	r3, [r9, #8]
    TCP_REG_ACTIVE(npcb);
 8019904:	f001 ff0a 	bl	801b71c <tcp_timer_needed>
 8019908:	2201      	movs	r2, #1
 801990a:	4b38      	ldr	r3, [pc, #224]	; (80199ec <tcp_input+0x688>)
    tcp_parseopt(npcb);
 801990c:	4648      	mov	r0, r9
    TCP_REG_ACTIVE(npcb);
 801990e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8019910:	f7fe fede 	bl	80186d0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8019914:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8019916:	4620      	mov	r0, r4
 8019918:	f8b9 6032 	ldrh.w	r6, [r9, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 801991c:	89db      	ldrh	r3, [r3, #14]
 801991e:	f8a9 3060 	strh.w	r3, [r9, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8019922:	f8a9 3062 	strh.w	r3, [r9, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8019926:	f004 fcc1 	bl	801e2ac <ip4_route>
 801992a:	4622      	mov	r2, r4
 801992c:	4601      	mov	r1, r0
 801992e:	4630      	mov	r0, r6
 8019930:	f7fe fdce 	bl	80184d0 <tcp_eff_send_mss_netif>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8019934:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8019936:	f8a9 0032 	strh.w	r0, [r9, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801993a:	4648      	mov	r0, r9
 801993c:	f001 f9a0 	bl	801ac80 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 8019940:	2800      	cmp	r0, #0
 8019942:	f040 8269 	bne.w	8019e18 <tcp_input+0xab4>
    tcp_output(npcb);
 8019946:	4648      	mov	r0, r9
 8019948:	f001 fbb4 	bl	801b0b4 <tcp_output>
        pbuf_free(p);
 801994c:	4628      	mov	r0, r5
 801994e:	e527      	b.n	80193a0 <tcp_input+0x3c>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8019950:	4b27      	ldr	r3, [pc, #156]	; (80199f0 <tcp_input+0x68c>)
 8019952:	22c2      	movs	r2, #194	; 0xc2
 8019954:	4927      	ldr	r1, [pc, #156]	; (80199f4 <tcp_input+0x690>)
 8019956:	481c      	ldr	r0, [pc, #112]	; (80199c8 <tcp_input+0x664>)
 8019958:	f007 f92e 	bl	8020bb8 <iprintf>
 801995c:	e570      	b.n	8019440 <tcp_input+0xdc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801995e:	8980      	ldrh	r0, [r0, #12]
 8019960:	f7fb f964 	bl	8014c2c <lwip_htons>
 8019964:	f010 0004 	ands.w	r0, r0, #4
 8019968:	f47f af0f 	bne.w	801978a <tcp_input+0x426>
      TCP_STATS_INC(tcp.proterr);
 801996c:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
      TCP_STATS_INC(tcp.drop);
 8019970:	f8b4 3096 	ldrh.w	r3, [r4, #150]	; 0x96
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019974:	6836      	ldr	r6, [r6, #0]
      TCP_STATS_INC(tcp.proterr);
 8019976:	3101      	adds	r1, #1
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019978:	9a05      	ldr	r2, [sp, #20]
      TCP_STATS_INC(tcp.drop);
 801997a:	3301      	adds	r3, #1
      TCP_STATS_INC(tcp.proterr);
 801997c:	f8a4 10a0 	strh.w	r1, [r4, #160]	; 0xa0
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019980:	8817      	ldrh	r7, [r2, #0]
      TCP_STATS_INC(tcp.drop);
 8019982:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019986:	4a14      	ldr	r2, [pc, #80]	; (80199d8 <tcp_input+0x674>)
 8019988:	8833      	ldrh	r3, [r6, #0]
 801998a:	491b      	ldr	r1, [pc, #108]	; (80199f8 <tcp_input+0x694>)
 801998c:	6812      	ldr	r2, [r2, #0]
 801998e:	6809      	ldr	r1, [r1, #0]
 8019990:	9302      	str	r3, [sp, #8]
 8019992:	443a      	add	r2, r7
 8019994:	8874      	ldrh	r4, [r6, #2]
 8019996:	4b19      	ldr	r3, [pc, #100]	; (80199fc <tcp_input+0x698>)
 8019998:	e9cd 9400 	strd	r9, r4, [sp]
 801999c:	f001 fb0e 	bl	801afbc <tcp_rst>
        pbuf_free(p);
 80199a0:	4628      	mov	r0, r5
 80199a2:	e4fd      	b.n	80193a0 <tcp_input+0x3c>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80199a4:	0794      	lsls	r4, r2, #30
 80199a6:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 80199aa:	f140 8082 	bpl.w	8019ab2 <tcp_input+0x74e>
 80199ae:	f898 2014 	ldrb.w	r2, [r8, #20]
 80199b2:	3a02      	subs	r2, #2
 80199b4:	2a01      	cmp	r2, #1
 80199b6:	d97c      	bls.n	8019ab2 <tcp_input+0x74e>
        tcp_ack_now(pcb);
 80199b8:	f043 0302 	orr.w	r3, r3, #2
 80199bc:	f8a8 301a 	strh.w	r3, [r8, #26]
 80199c0:	e70b      	b.n	80197da <tcp_input+0x476>
 80199c2:	bf00      	nop
 80199c4:	0803e410 	.word	0x0803e410
 80199c8:	08026bb8 	.word	0x08026bb8
 80199cc:	0803e3e4 	.word	0x0803e3e4
 80199d0:	2003e2e8 	.word	0x2003e2e8
 80199d4:	2002a3fc 	.word	0x2002a3fc
 80199d8:	2002a41c 	.word	0x2002a41c
 80199dc:	2002a428 	.word	0x2002a428
 80199e0:	2002a432 	.word	0x2002a432
 80199e4:	2003e2ec 	.word	0x2003e2ec
 80199e8:	2003e2d8 	.word	0x2003e2d8
 80199ec:	2003e2d4 	.word	0x2003e2d4
 80199f0:	0803e598 	.word	0x0803e598
 80199f4:	0803e380 	.word	0x0803e380
 80199f8:	2002a3f8 	.word	0x2002a3f8
 80199fc:	2002eae8 	.word	0x2002eae8
 8019a00:	0803e490 	.word	0x0803e490
 8019a04:	2003e2e0 	.word	0x2003e2e0
        if (recv_acked > 0) {
 8019a08:	4bb7      	ldr	r3, [pc, #732]	; (8019ce8 <tcp_input+0x984>)
 8019a0a:	881a      	ldrh	r2, [r3, #0]
 8019a0c:	b162      	cbz	r2, 8019a28 <tcp_input+0x6c4>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8019a0e:	f8d8 3080 	ldr.w	r3, [r8, #128]	; 0x80
 8019a12:	b133      	cbz	r3, 8019a22 <tcp_input+0x6be>
 8019a14:	4641      	mov	r1, r8
 8019a16:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8019a1a:	4798      	blx	r3
            if (err == ERR_ABRT) {
 8019a1c:	300d      	adds	r0, #13
 8019a1e:	f43f ae19 	beq.w	8019654 <tcp_input+0x2f0>
          recv_acked = 0;
 8019a22:	2300      	movs	r3, #0
 8019a24:	4ab0      	ldr	r2, [pc, #704]	; (8019ce8 <tcp_input+0x984>)
 8019a26:	8013      	strh	r3, [r2, #0]
        if (tcp_input_delayed_close(pcb)) {
 8019a28:	4640      	mov	r0, r8
 8019a2a:	f7fe ff5f 	bl	80188ec <tcp_input_delayed_close>
 8019a2e:	2800      	cmp	r0, #0
 8019a30:	f47f ae10 	bne.w	8019654 <tcp_input+0x2f0>
        if (recv_data != NULL) {
 8019a34:	f8db 3000 	ldr.w	r3, [fp]
 8019a38:	b31b      	cbz	r3, 8019a82 <tcp_input+0x71e>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8019a3a:	f8d8 3078 	ldr.w	r3, [r8, #120]	; 0x78
 8019a3e:	b133      	cbz	r3, 8019a4e <tcp_input+0x6ea>
 8019a40:	4baa      	ldr	r3, [pc, #680]	; (8019cec <tcp_input+0x988>)
 8019a42:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8019a46:	49aa      	ldr	r1, [pc, #680]	; (8019cf0 <tcp_input+0x98c>)
 8019a48:	48aa      	ldr	r0, [pc, #680]	; (8019cf4 <tcp_input+0x990>)
 8019a4a:	f007 f8b5 	bl	8020bb8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8019a4e:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 8019a52:	f8db 2000 	ldr.w	r2, [fp]
 8019a56:	f013 0310 	ands.w	r3, r3, #16
 8019a5a:	f040 8238 	bne.w	8019ece <tcp_input+0xb6a>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8019a5e:	f8d8 4084 	ldr.w	r4, [r8, #132]	; 0x84
 8019a62:	2c00      	cmp	r4, #0
 8019a64:	f000 8215 	beq.w	8019e92 <tcp_input+0xb2e>
 8019a68:	4641      	mov	r1, r8
 8019a6a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8019a6e:	47a0      	blx	r4
          if (err == ERR_ABRT) {
 8019a70:	f110 0f0d 	cmn.w	r0, #13
 8019a74:	f43f adee 	beq.w	8019654 <tcp_input+0x2f0>
          if (err != ERR_OK) {
 8019a78:	b118      	cbz	r0, 8019a82 <tcp_input+0x71e>
            pcb->refused_data = recv_data;
 8019a7a:	f8db 3000 	ldr.w	r3, [fp]
 8019a7e:	f8c8 3078 	str.w	r3, [r8, #120]	; 0x78
        if (recv_flags & TF_GOT_FIN) {
 8019a82:	783b      	ldrb	r3, [r7, #0]
 8019a84:	069a      	lsls	r2, r3, #26
 8019a86:	d508      	bpl.n	8019a9a <tcp_input+0x736>
          if (pcb->refused_data != NULL) {
 8019a88:	f8d8 3078 	ldr.w	r3, [r8, #120]	; 0x78
 8019a8c:	2b00      	cmp	r3, #0
 8019a8e:	f000 8206 	beq.w	8019e9e <tcp_input+0xb3a>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8019a92:	7b5a      	ldrb	r2, [r3, #13]
 8019a94:	f042 0220 	orr.w	r2, r2, #32
 8019a98:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 8019a9a:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 8019a9c:	4640      	mov	r0, r8
        tcp_input_pcb = NULL;
 8019a9e:	602b      	str	r3, [r5, #0]
        if (tcp_input_delayed_close(pcb)) {
 8019aa0:	f7fe ff24 	bl	80188ec <tcp_input_delayed_close>
 8019aa4:	2800      	cmp	r0, #0
 8019aa6:	f47f add5 	bne.w	8019654 <tcp_input+0x2f0>
        tcp_output(pcb);
 8019aaa:	4640      	mov	r0, r8
 8019aac:	f001 fb02 	bl	801b0b4 <tcp_output>
 8019ab0:	e5d0      	b.n	8019654 <tcp_input+0x2f0>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8019ab2:	06d8      	lsls	r0, r3, #27
 8019ab4:	d403      	bmi.n	8019abe <tcp_input+0x75a>
    pcb->tmr = tcp_ticks;
 8019ab6:	4b90      	ldr	r3, [pc, #576]	; (8019cf8 <tcp_input+0x994>)
 8019ab8:	681b      	ldr	r3, [r3, #0]
 8019aba:	f8c8 3020 	str.w	r3, [r8, #32]
  pcb->persist_probe = 0;
 8019abe:	2300      	movs	r3, #0
  tcp_parseopt(pcb);
 8019ac0:	4640      	mov	r0, r8
  pcb->persist_probe = 0;
 8019ac2:	f8a8 309a 	strh.w	r3, [r8, #154]	; 0x9a
  tcp_parseopt(pcb);
 8019ac6:	f7fe fe03 	bl	80186d0 <tcp_parseopt>
  switch (pcb->state) {
 8019aca:	f898 3014 	ldrb.w	r3, [r8, #20]
 8019ace:	3b02      	subs	r3, #2
 8019ad0:	2b07      	cmp	r3, #7
 8019ad2:	f63f ae82 	bhi.w	80197da <tcp_input+0x476>
 8019ad6:	e8df f003 	tbb	[pc, r3]
 8019ada:	8eb0      	.short	0x8eb0
 8019adc:	7d42607d 	.word	0x7d42607d
 8019ae0:	041d      	.short	0x041d
      tcp_receive(pcb);
 8019ae2:	4640      	mov	r0, r8
 8019ae4:	f7fe ff94 	bl	8018a10 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8019ae8:	4b84      	ldr	r3, [pc, #528]	; (8019cfc <tcp_input+0x998>)
 8019aea:	781b      	ldrb	r3, [r3, #0]
 8019aec:	06d8      	lsls	r0, r3, #27
 8019aee:	f57f ae74 	bpl.w	80197da <tcp_input+0x476>
 8019af2:	4b83      	ldr	r3, [pc, #524]	; (8019d00 <tcp_input+0x99c>)
 8019af4:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 8019af8:	681a      	ldr	r2, [r3, #0]
 8019afa:	783b      	ldrb	r3, [r7, #0]
 8019afc:	4291      	cmp	r1, r2
 8019afe:	f47f ae6c 	bne.w	80197da <tcp_input+0x476>
 8019b02:	f8d8 206c 	ldr.w	r2, [r8, #108]	; 0x6c
 8019b06:	2a00      	cmp	r2, #0
 8019b08:	f47f ae67 	bne.w	80197da <tcp_input+0x476>
        recv_flags |= TF_CLOSED;
 8019b0c:	f043 0310 	orr.w	r3, r3, #16
 8019b10:	703b      	strb	r3, [r7, #0]
 8019b12:	e662      	b.n	80197da <tcp_input+0x476>
      tcp_receive(pcb);
 8019b14:	4640      	mov	r0, r8
 8019b16:	f7fe ff7b 	bl	8018a10 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8019b1a:	4b78      	ldr	r3, [pc, #480]	; (8019cfc <tcp_input+0x998>)
 8019b1c:	781b      	ldrb	r3, [r3, #0]
 8019b1e:	06dc      	lsls	r4, r3, #27
 8019b20:	f57f ae5b 	bpl.w	80197da <tcp_input+0x476>
 8019b24:	4b76      	ldr	r3, [pc, #472]	; (8019d00 <tcp_input+0x99c>)
 8019b26:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
 8019b2a:	681b      	ldr	r3, [r3, #0]
 8019b2c:	429a      	cmp	r2, r3
 8019b2e:	f47f ae54 	bne.w	80197da <tcp_input+0x476>
 8019b32:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 8019b36:	2b00      	cmp	r3, #0
 8019b38:	f47f ae4f 	bne.w	80197da <tcp_input+0x476>
        tcp_pcb_purge(pcb);
 8019b3c:	4640      	mov	r0, r8
 8019b3e:	f7fd fde9 	bl	8017714 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8019b42:	4b70      	ldr	r3, [pc, #448]	; (8019d04 <tcp_input+0x9a0>)
 8019b44:	681b      	ldr	r3, [r3, #0]
 8019b46:	4543      	cmp	r3, r8
 8019b48:	f000 8222 	beq.w	8019f90 <tcp_input+0xc2c>
 8019b4c:	2b00      	cmp	r3, #0
 8019b4e:	f000 8223 	beq.w	8019f98 <tcp_input+0xc34>
 8019b52:	68da      	ldr	r2, [r3, #12]
 8019b54:	4542      	cmp	r2, r8
 8019b56:	f000 822e 	beq.w	8019fb6 <tcp_input+0xc52>
 8019b5a:	4613      	mov	r3, r2
 8019b5c:	e7f6      	b.n	8019b4c <tcp_input+0x7e8>
      tcp_receive(pcb);
 8019b5e:	4640      	mov	r0, r8
 8019b60:	f7fe ff56 	bl	8018a10 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8019b64:	783b      	ldrb	r3, [r7, #0]
 8019b66:	069e      	lsls	r6, r3, #26
 8019b68:	f57f ae37 	bpl.w	80197da <tcp_input+0x476>
        tcp_ack_now(pcb);
 8019b6c:	f8b8 301a 	ldrh.w	r3, [r8, #26]
        tcp_pcb_purge(pcb);
 8019b70:	4640      	mov	r0, r8
        tcp_ack_now(pcb);
 8019b72:	f043 0302 	orr.w	r3, r3, #2
 8019b76:	f8a8 301a 	strh.w	r3, [r8, #26]
        tcp_pcb_purge(pcb);
 8019b7a:	f7fd fdcb 	bl	8017714 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8019b7e:	4b61      	ldr	r3, [pc, #388]	; (8019d04 <tcp_input+0x9a0>)
 8019b80:	681b      	ldr	r3, [r3, #0]
 8019b82:	4543      	cmp	r3, r8
 8019b84:	f000 8204 	beq.w	8019f90 <tcp_input+0xc2c>
 8019b88:	2b00      	cmp	r3, #0
 8019b8a:	f000 8205 	beq.w	8019f98 <tcp_input+0xc34>
 8019b8e:	68da      	ldr	r2, [r3, #12]
 8019b90:	4542      	cmp	r2, r8
 8019b92:	f000 8210 	beq.w	8019fb6 <tcp_input+0xc52>
 8019b96:	4613      	mov	r3, r2
 8019b98:	e7f6      	b.n	8019b88 <tcp_input+0x824>
      tcp_receive(pcb);
 8019b9a:	4640      	mov	r0, r8
 8019b9c:	f7fe ff38 	bl	8018a10 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8019ba0:	783b      	ldrb	r3, [r7, #0]
 8019ba2:	f013 0f20 	tst.w	r3, #32
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8019ba6:	4b55      	ldr	r3, [pc, #340]	; (8019cfc <tcp_input+0x998>)
 8019ba8:	781b      	ldrb	r3, [r3, #0]
      if (recv_flags & TF_GOT_FIN) {
 8019baa:	f000 81c9 	beq.w	8019f40 <tcp_input+0xbdc>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8019bae:	06da      	lsls	r2, r3, #27
 8019bb0:	d506      	bpl.n	8019bc0 <tcp_input+0x85c>
 8019bb2:	4b53      	ldr	r3, [pc, #332]	; (8019d00 <tcp_input+0x99c>)
 8019bb4:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
 8019bb8:	681b      	ldr	r3, [r3, #0]
 8019bba:	429a      	cmp	r2, r3
 8019bbc:	f000 81ff 	beq.w	8019fbe <tcp_input+0xc5a>
          tcp_ack_now(pcb);
 8019bc0:	f8b8 301a 	ldrh.w	r3, [r8, #26]
          pcb->state = CLOSING;
 8019bc4:	2208      	movs	r2, #8
          tcp_ack_now(pcb);
 8019bc6:	f043 0302 	orr.w	r3, r3, #2
          pcb->state = CLOSING;
 8019bca:	f888 2014 	strb.w	r2, [r8, #20]
          tcp_ack_now(pcb);
 8019bce:	f8a8 301a 	strh.w	r3, [r8, #26]
 8019bd2:	e602      	b.n	80197da <tcp_input+0x476>
      tcp_receive(pcb);
 8019bd4:	4640      	mov	r0, r8
 8019bd6:	f7fe ff1b 	bl	8018a10 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8019bda:	783b      	ldrb	r3, [r7, #0]
 8019bdc:	0699      	lsls	r1, r3, #26
 8019bde:	f57f adfc 	bpl.w	80197da <tcp_input+0x476>
        tcp_ack_now(pcb);
 8019be2:	f8b8 301a 	ldrh.w	r3, [r8, #26]
        pcb->state = CLOSE_WAIT;
 8019be6:	2207      	movs	r2, #7
        tcp_ack_now(pcb);
 8019be8:	f043 0302 	orr.w	r3, r3, #2
        pcb->state = CLOSE_WAIT;
 8019bec:	f888 2014 	strb.w	r2, [r8, #20]
        tcp_ack_now(pcb);
 8019bf0:	f8a8 301a 	strh.w	r3, [r8, #26]
 8019bf4:	e5f1      	b.n	80197da <tcp_input+0x476>
      if (flags & TCP_ACK) {
 8019bf6:	4b41      	ldr	r3, [pc, #260]	; (8019cfc <tcp_input+0x998>)
 8019bf8:	781b      	ldrb	r3, [r3, #0]
 8019bfa:	06da      	lsls	r2, r3, #27
 8019bfc:	f140 8186 	bpl.w	8019f0c <tcp_input+0xba8>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019c00:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8019c04:	4a3e      	ldr	r2, [pc, #248]	; (8019d00 <tcp_input+0x99c>)
 8019c06:	43db      	mvns	r3, r3
 8019c08:	6811      	ldr	r1, [r2, #0]
 8019c0a:	42cb      	cmn	r3, r1
 8019c0c:	d405      	bmi.n	8019c1a <tcp_input+0x8b6>
 8019c0e:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
 8019c12:	1acb      	subs	r3, r1, r3
 8019c14:	2b00      	cmp	r3, #0
 8019c16:	f340 81a6 	ble.w	8019f66 <tcp_input+0xc02>
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019c1a:	6833      	ldr	r3, [r6, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019c1c:	4640      	mov	r0, r8
 8019c1e:	9a05      	ldr	r2, [sp, #20]
 8019c20:	881e      	ldrh	r6, [r3, #0]
 8019c22:	8814      	ldrh	r4, [r2, #0]
 8019c24:	4a38      	ldr	r2, [pc, #224]	; (8019d08 <tcp_input+0x9a4>)
 8019c26:	6812      	ldr	r2, [r2, #0]
 8019c28:	9602      	str	r6, [sp, #8]
 8019c2a:	885b      	ldrh	r3, [r3, #2]
 8019c2c:	4422      	add	r2, r4
 8019c2e:	e9cd 9300 	strd	r9, r3, [sp]
 8019c32:	4b36      	ldr	r3, [pc, #216]	; (8019d0c <tcp_input+0x9a8>)
 8019c34:	f001 f9c2 	bl	801afbc <tcp_rst>
 8019c38:	e5cf      	b.n	80197da <tcp_input+0x476>
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8019c3a:	4b30      	ldr	r3, [pc, #192]	; (8019cfc <tcp_input+0x998>)
 8019c3c:	781b      	ldrb	r3, [r3, #0]
 8019c3e:	f003 0212 	and.w	r2, r3, #18
 8019c42:	2a12      	cmp	r2, #18
 8019c44:	d064      	beq.n	8019d10 <tcp_input+0x9ac>
      else if (flags & TCP_ACK) {
 8019c46:	06d9      	lsls	r1, r3, #27
 8019c48:	f57f adc7 	bpl.w	80197da <tcp_input+0x476>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019c4c:	9a05      	ldr	r2, [sp, #20]
 8019c4e:	4640      	mov	r0, r8
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019c50:	6833      	ldr	r3, [r6, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019c52:	8811      	ldrh	r1, [r2, #0]
 8019c54:	4a2c      	ldr	r2, [pc, #176]	; (8019d08 <tcp_input+0x9a4>)
 8019c56:	881c      	ldrh	r4, [r3, #0]
 8019c58:	6812      	ldr	r2, [r2, #0]
 8019c5a:	9402      	str	r4, [sp, #8]
 8019c5c:	440a      	add	r2, r1
 8019c5e:	885b      	ldrh	r3, [r3, #2]
 8019c60:	4927      	ldr	r1, [pc, #156]	; (8019d00 <tcp_input+0x99c>)
 8019c62:	6809      	ldr	r1, [r1, #0]
 8019c64:	e9cd 9300 	strd	r9, r3, [sp]
 8019c68:	4b28      	ldr	r3, [pc, #160]	; (8019d0c <tcp_input+0x9a8>)
 8019c6a:	f001 f9a7 	bl	801afbc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8019c6e:	f898 3042 	ldrb.w	r3, [r8, #66]	; 0x42
 8019c72:	2b05      	cmp	r3, #5
 8019c74:	f63f adb1 	bhi.w	80197da <tcp_input+0x476>
          pcb->rtime = 0;
 8019c78:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 8019c7a:	4640      	mov	r0, r8
          pcb->rtime = 0;
 8019c7c:	f8a8 3030 	strh.w	r3, [r8, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8019c80:	f001 fc2e 	bl	801b4e0 <tcp_rexmit_rto>
 8019c84:	e5a9      	b.n	80197da <tcp_input+0x476>
      if (ackno == pcb->snd_nxt) {
 8019c86:	4b1e      	ldr	r3, [pc, #120]	; (8019d00 <tcp_input+0x99c>)
 8019c88:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
 8019c8c:	681b      	ldr	r3, [r3, #0]
 8019c8e:	429a      	cmp	r2, r3
 8019c90:	f47f ada3 	bne.w	80197da <tcp_input+0x476>
      recv_flags |= TF_RESET;
 8019c94:	783a      	ldrb	r2, [r7, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8019c96:	f8b8 301a 	ldrh.w	r3, [r8, #26]
      recv_flags |= TF_RESET;
 8019c9a:	f042 0208 	orr.w	r2, r2, #8
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8019c9e:	f023 0301 	bic.w	r3, r3, #1
      recv_flags |= TF_RESET;
 8019ca2:	703a      	strb	r2, [r7, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8019ca4:	f8a8 301a 	strh.w	r3, [r8, #26]
 8019ca8:	e597      	b.n	80197da <tcp_input+0x476>
          tcp_send_empty_ack(pcb);
 8019caa:	4640      	mov	r0, r8
 8019cac:	f001 f9ce 	bl	801b04c <tcp_send_empty_ack>
 8019cb0:	e4ca      	b.n	8019648 <tcp_input+0x2e4>
        TCP_STATS_INC(tcp.cachehit);
 8019cb2:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
 8019cb6:	3301      	adds	r3, #1
 8019cb8:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 8019cbc:	e5d6      	b.n	801986c <tcp_input+0x508>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019cbe:	9a05      	ldr	r2, [sp, #20]
 8019cc0:	4650      	mov	r0, sl
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019cc2:	6833      	ldr	r3, [r6, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019cc4:	8811      	ldrh	r1, [r2, #0]
 8019cc6:	4a10      	ldr	r2, [pc, #64]	; (8019d08 <tcp_input+0x9a4>)
 8019cc8:	881c      	ldrh	r4, [r3, #0]
 8019cca:	6812      	ldr	r2, [r2, #0]
 8019ccc:	9402      	str	r4, [sp, #8]
 8019cce:	440a      	add	r2, r1
 8019cd0:	885b      	ldrh	r3, [r3, #2]
 8019cd2:	490b      	ldr	r1, [pc, #44]	; (8019d00 <tcp_input+0x99c>)
 8019cd4:	6809      	ldr	r1, [r1, #0]
 8019cd6:	e9cd 9300 	strd	r9, r3, [sp]
 8019cda:	4b0c      	ldr	r3, [pc, #48]	; (8019d0c <tcp_input+0x9a8>)
 8019cdc:	f001 f96e 	bl	801afbc <tcp_rst>
        pbuf_free(p);
 8019ce0:	4628      	mov	r0, r5
 8019ce2:	f7ff bb5d 	b.w	80193a0 <tcp_input+0x3c>
 8019ce6:	bf00      	nop
 8019ce8:	2002a410 	.word	0x2002a410
 8019cec:	0803e598 	.word	0x0803e598
 8019cf0:	0803e52c 	.word	0x0803e52c
 8019cf4:	08026bb8 	.word	0x08026bb8
 8019cf8:	2003e2dc 	.word	0x2003e2dc
 8019cfc:	2002a3fc 	.word	0x2002a3fc
 8019d00:	2002a3f8 	.word	0x2002a3f8
 8019d04:	2003e2d8 	.word	0x2003e2d8
 8019d08:	2002a41c 	.word	0x2002a41c
 8019d0c:	2002eae8 	.word	0x2002eae8
          && (ackno == pcb->lastack + 1)) {
 8019d10:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
 8019d14:	49c4      	ldr	r1, [pc, #784]	; (801a028 <tcp_input+0xcc4>)
 8019d16:	3201      	adds	r2, #1
 8019d18:	6809      	ldr	r1, [r1, #0]
 8019d1a:	428a      	cmp	r2, r1
 8019d1c:	d193      	bne.n	8019c46 <tcp_input+0x8e2>
        pcb->rcv_nxt = seqno + 1;
 8019d1e:	4bc3      	ldr	r3, [pc, #780]	; (801a02c <tcp_input+0xcc8>)
        pcb->state = ESTABLISHED;
 8019d20:	2104      	movs	r1, #4
        pcb->snd_wnd = tcphdr->wnd;
 8019d22:	6836      	ldr	r6, [r6, #0]
        pcb->rcv_nxt = seqno + 1;
 8019d24:	681b      	ldr	r3, [r3, #0]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8019d26:	eb08 0401 	add.w	r4, r8, r1
        pcb->lastack = ackno;
 8019d2a:	f8c8 2044 	str.w	r2, [r8, #68]	; 0x44
        pcb->rcv_nxt = seqno + 1;
 8019d2e:	1c5a      	adds	r2, r3, #1
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8019d30:	3b01      	subs	r3, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8019d32:	4620      	mov	r0, r4
        pcb->rcv_nxt = seqno + 1;
 8019d34:	f8c8 2024 	str.w	r2, [r8, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8019d38:	f8c8 202c 	str.w	r2, [r8, #44]	; 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 8019d3c:	89f2      	ldrh	r2, [r6, #14]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8019d3e:	f8b8 6032 	ldrh.w	r6, [r8, #50]	; 0x32
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8019d42:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
        pcb->snd_wnd = tcphdr->wnd;
 8019d46:	f8a8 2060 	strh.w	r2, [r8, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8019d4a:	f8a8 2062 	strh.w	r2, [r8, #98]	; 0x62
        pcb->state = ESTABLISHED;
 8019d4e:	f888 1014 	strb.w	r1, [r8, #20]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8019d52:	f004 faab 	bl	801e2ac <ip4_route>
 8019d56:	4622      	mov	r2, r4
 8019d58:	4601      	mov	r1, r0
 8019d5a:	4630      	mov	r0, r6
 8019d5c:	f7fe fbb8 	bl	80184d0 <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8019d60:	f241 131c 	movw	r3, #4380	; 0x111c
 8019d64:	0042      	lsls	r2, r0, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8019d66:	f8a8 0032 	strh.w	r0, [r8, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8019d6a:	0080      	lsls	r0, r0, #2
 8019d6c:	429a      	cmp	r2, r3
 8019d6e:	4611      	mov	r1, r2
 8019d70:	bf38      	it	cc
 8019d72:	4619      	movcc	r1, r3
 8019d74:	4288      	cmp	r0, r1
 8019d76:	f080 80b2 	bcs.w	8019ede <tcp_input+0xb7a>
 8019d7a:	b283      	uxth	r3, r0
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8019d7c:	f8b8 2066 	ldrh.w	r2, [r8, #102]	; 0x66
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8019d80:	f8a8 3048 	strh.w	r3, [r8, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8019d84:	b932      	cbnz	r2, 8019d94 <tcp_input+0xa30>
 8019d86:	4baa      	ldr	r3, [pc, #680]	; (801a030 <tcp_input+0xccc>)
 8019d88:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8019d8c:	49a9      	ldr	r1, [pc, #676]	; (801a034 <tcp_input+0xcd0>)
 8019d8e:	48aa      	ldr	r0, [pc, #680]	; (801a038 <tcp_input+0xcd4>)
 8019d90:	f006 ff12 	bl	8020bb8 <iprintf>
        --pcb->snd_queuelen;
 8019d94:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
        rseg = pcb->unacked;
 8019d98:	f8d8 4070 	ldr.w	r4, [r8, #112]	; 0x70
        --pcb->snd_queuelen;
 8019d9c:	3b01      	subs	r3, #1
 8019d9e:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
        if (rseg == NULL) {
 8019da2:	2c00      	cmp	r4, #0
 8019da4:	f000 80a4 	beq.w	8019ef0 <tcp_input+0xb8c>
          pcb->unacked = rseg->next;
 8019da8:	6823      	ldr	r3, [r4, #0]
 8019daa:	f8c8 3070 	str.w	r3, [r8, #112]	; 0x70
        tcp_seg_free(rseg);
 8019dae:	4620      	mov	r0, r4
 8019db0:	f7fd fbde 	bl	8017570 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 8019db4:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8019db8:	2b00      	cmp	r3, #0
 8019dba:	f000 8094 	beq.w	8019ee6 <tcp_input+0xb82>
          pcb->rtime = 0;
 8019dbe:	2300      	movs	r3, #0
 8019dc0:	f8a8 3030 	strh.w	r3, [r8, #48]	; 0x30
          pcb->nrtx = 0;
 8019dc4:	f888 3042 	strb.w	r3, [r8, #66]	; 0x42
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8019dc8:	f8d8 3088 	ldr.w	r3, [r8, #136]	; 0x88
 8019dcc:	b13b      	cbz	r3, 8019dde <tcp_input+0xa7a>
 8019dce:	2200      	movs	r2, #0
 8019dd0:	4641      	mov	r1, r8
 8019dd2:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8019dd6:	4798      	blx	r3
        if (err == ERR_ABRT) {
 8019dd8:	300d      	adds	r0, #13
 8019dda:	f43f ac3b 	beq.w	8019654 <tcp_input+0x2f0>
        tcp_ack_now(pcb);
 8019dde:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 8019de2:	e5e9      	b.n	80199b8 <tcp_input+0x654>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019de4:	4b90      	ldr	r3, [pc, #576]	; (801a028 <tcp_input+0xcc4>)
 8019de6:	4422      	add	r2, r4
 8019de8:	9001      	str	r0, [sp, #4]
 8019dea:	4640      	mov	r0, r8
 8019dec:	9102      	str	r1, [sp, #8]
 8019dee:	f8cd 9000 	str.w	r9, [sp]
 8019df2:	6819      	ldr	r1, [r3, #0]
 8019df4:	4b91      	ldr	r3, [pc, #580]	; (801a03c <tcp_input+0xcd8>)
 8019df6:	f001 f8e1 	bl	801afbc <tcp_rst>
        pbuf_free(p);
 8019dfa:	4628      	mov	r0, r5
 8019dfc:	f7ff bad0 	b.w	80193a0 <tcp_input+0x3c>
    tcp_ack_now(pcb);
 8019e00:	f8b8 301a 	ldrh.w	r3, [r8, #26]
    tcp_output(pcb);
 8019e04:	4640      	mov	r0, r8
    tcp_ack_now(pcb);
 8019e06:	f043 0302 	orr.w	r3, r3, #2
 8019e0a:	f8a8 301a 	strh.w	r3, [r8, #26]
    tcp_output(pcb);
 8019e0e:	f001 f951 	bl	801b0b4 <tcp_output>
        pbuf_free(p);
 8019e12:	4628      	mov	r0, r5
 8019e14:	f7ff bac4 	b.w	80193a0 <tcp_input+0x3c>
      tcp_abandon(npcb, 0);
 8019e18:	4648      	mov	r0, r9
 8019e1a:	4641      	mov	r1, r8
 8019e1c:	f7fd ffa4 	bl	8017d68 <tcp_abandon>
        pbuf_free(p);
 8019e20:	4628      	mov	r0, r5
 8019e22:	f7ff babd 	b.w	80193a0 <tcp_input+0x3c>
      TCP_STATS_INC(tcp.memerr);
 8019e26:	f8b4 309c 	ldrh.w	r3, [r4, #156]	; 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8019e2a:	f8da 6018 	ldr.w	r6, [sl, #24]
      TCP_STATS_INC(tcp.memerr);
 8019e2e:	3301      	adds	r3, #1
 8019e30:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8019e34:	2e00      	cmp	r6, #0
 8019e36:	f43f aca8 	beq.w	801978a <tcp_input+0x426>
 8019e3a:	4601      	mov	r1, r0
 8019e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8019e40:	f8da 0010 	ldr.w	r0, [sl, #16]
 8019e44:	47b0      	blx	r6
        pbuf_free(p);
 8019e46:	4628      	mov	r0, r5
 8019e48:	f7ff baaa 	b.w	80193a0 <tcp_input+0x3c>
  } else if (flags & TCP_FIN) {
 8019e4c:	07d8      	lsls	r0, r3, #31
 8019e4e:	f57f ac99 	bpl.w	8019784 <tcp_input+0x420>
    pcb->tmr = tcp_ticks;
 8019e52:	4b7b      	ldr	r3, [pc, #492]	; (801a040 <tcp_input+0xcdc>)
 8019e54:	681b      	ldr	r3, [r3, #0]
 8019e56:	f8c8 3020 	str.w	r3, [r8, #32]
 8019e5a:	e493      	b.n	8019784 <tcp_input+0x420>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8019e5c:	4b74      	ldr	r3, [pc, #464]	; (801a030 <tcp_input+0xccc>)
 8019e5e:	f240 1215 	movw	r2, #277	; 0x115
 8019e62:	4978      	ldr	r1, [pc, #480]	; (801a044 <tcp_input+0xce0>)
 8019e64:	4874      	ldr	r0, [pc, #464]	; (801a038 <tcp_input+0xcd4>)
 8019e66:	f006 fea7 	bl	8020bb8 <iprintf>
 8019e6a:	f7ff bbb7 	b.w	80195dc <tcp_input+0x278>
        TCP_STATS_INC(tcp.cachehit);
 8019e6e:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 8019e72:	3201      	adds	r2, #1
 8019e74:	f8a4 20a6 	strh.w	r2, [r4, #166]	; 0xa6
 8019e78:	f7ff bbad 	b.w	80195d6 <tcp_input+0x272>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8019e7c:	4b6c      	ldr	r3, [pc, #432]	; (801a030 <tcp_input+0xccc>)
 8019e7e:	f240 120d 	movw	r2, #269	; 0x10d
 8019e82:	4971      	ldr	r1, [pc, #452]	; (801a048 <tcp_input+0xce4>)
 8019e84:	486c      	ldr	r0, [pc, #432]	; (801a038 <tcp_input+0xcd4>)
 8019e86:	f006 fe97 	bl	8020bb8 <iprintf>
 8019e8a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019e8e:	f7ff bb95 	b.w	80195bc <tcp_input+0x258>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8019e92:	4623      	mov	r3, r4
 8019e94:	4620      	mov	r0, r4
 8019e96:	4641      	mov	r1, r8
 8019e98:	f7fe fa3a 	bl	8018310 <tcp_recv_null>
 8019e9c:	e5e8      	b.n	8019a70 <tcp_input+0x70c>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8019e9e:	f8b8 3028 	ldrh.w	r3, [r8, #40]	; 0x28
 8019ea2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8019ea6:	d002      	beq.n	8019eae <tcp_input+0xb4a>
              pcb->rcv_wnd++;
 8019ea8:	3301      	adds	r3, #1
 8019eaa:	f8a8 3028 	strh.w	r3, [r8, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 8019eae:	f8d8 4084 	ldr.w	r4, [r8, #132]	; 0x84
 8019eb2:	2c00      	cmp	r4, #0
 8019eb4:	f43f adf1 	beq.w	8019a9a <tcp_input+0x736>
 8019eb8:	2300      	movs	r3, #0
 8019eba:	4641      	mov	r1, r8
 8019ebc:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8019ec0:	461a      	mov	r2, r3
 8019ec2:	47a0      	blx	r4
            if (err == ERR_ABRT) {
 8019ec4:	300d      	adds	r0, #13
 8019ec6:	f47f ade8 	bne.w	8019a9a <tcp_input+0x736>
aborted:
 8019eca:	f7ff bbc3 	b.w	8019654 <tcp_input+0x2f0>
            pbuf_free(recv_data);
 8019ece:	4610      	mov	r0, r2
 8019ed0:	f7fc fd1a 	bl	8016908 <pbuf_free>
            tcp_abort(pcb);
 8019ed4:	4640      	mov	r0, r8
 8019ed6:	f7fd ffe7 	bl	8017ea8 <tcp_abort>
            goto aborted;
 8019eda:	f7ff bbbb 	b.w	8019654 <tcp_input+0x2f0>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8019ede:	429a      	cmp	r2, r3
 8019ee0:	bf88      	it	hi
 8019ee2:	b293      	uxthhi	r3, r2
 8019ee4:	e74a      	b.n	8019d7c <tcp_input+0xa18>
          pcb->rtime = -1;
 8019ee6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019eea:	f8a8 3030 	strh.w	r3, [r8, #48]	; 0x30
 8019eee:	e76b      	b.n	8019dc8 <tcp_input+0xa64>
          rseg = pcb->unsent;
 8019ef0:	f8d8 406c 	ldr.w	r4, [r8, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8019ef4:	b934      	cbnz	r4, 8019f04 <tcp_input+0xba0>
 8019ef6:	4b4e      	ldr	r3, [pc, #312]	; (801a030 <tcp_input+0xccc>)
 8019ef8:	f44f 725d 	mov.w	r2, #884	; 0x374
 8019efc:	4953      	ldr	r1, [pc, #332]	; (801a04c <tcp_input+0xce8>)
 8019efe:	484e      	ldr	r0, [pc, #312]	; (801a038 <tcp_input+0xcd4>)
 8019f00:	f006 fe5a 	bl	8020bb8 <iprintf>
          pcb->unsent = rseg->next;
 8019f04:	6823      	ldr	r3, [r4, #0]
 8019f06:	f8c8 306c 	str.w	r3, [r8, #108]	; 0x6c
 8019f0a:	e750      	b.n	8019dae <tcp_input+0xa4a>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8019f0c:	0798      	lsls	r0, r3, #30
 8019f0e:	f57f ac64 	bpl.w	80197da <tcp_input+0x476>
 8019f12:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8019f16:	4a45      	ldr	r2, [pc, #276]	; (801a02c <tcp_input+0xcc8>)
 8019f18:	3b01      	subs	r3, #1
 8019f1a:	6812      	ldr	r2, [r2, #0]
 8019f1c:	4293      	cmp	r3, r2
 8019f1e:	f47f ac5c 	bne.w	80197da <tcp_input+0x476>
        tcp_rexmit(pcb);
 8019f22:	4640      	mov	r0, r8
 8019f24:	f000 ffcc 	bl	801aec0 <tcp_rexmit>
 8019f28:	e457      	b.n	80197da <tcp_input+0x476>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8019f2a:	2900      	cmp	r1, #0
 8019f2c:	f47f aeb2 	bne.w	8019c94 <tcp_input+0x930>
 8019f30:	4b3f      	ldr	r3, [pc, #252]	; (801a030 <tcp_input+0xccc>)
 8019f32:	f44f 724e 	mov.w	r2, #824	; 0x338
 8019f36:	4946      	ldr	r1, [pc, #280]	; (801a050 <tcp_input+0xcec>)
 8019f38:	483f      	ldr	r0, [pc, #252]	; (801a038 <tcp_input+0xcd4>)
 8019f3a:	f006 fe3d 	bl	8020bb8 <iprintf>
 8019f3e:	e6a9      	b.n	8019c94 <tcp_input+0x930>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8019f40:	06db      	lsls	r3, r3, #27
 8019f42:	f57f ac4a 	bpl.w	80197da <tcp_input+0x476>
 8019f46:	4b38      	ldr	r3, [pc, #224]	; (801a028 <tcp_input+0xcc4>)
 8019f48:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
 8019f4c:	681b      	ldr	r3, [r3, #0]
 8019f4e:	429a      	cmp	r2, r3
 8019f50:	f47f ac43 	bne.w	80197da <tcp_input+0x476>
 8019f54:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 8019f58:	2b00      	cmp	r3, #0
 8019f5a:	f47f ac3e 	bne.w	80197da <tcp_input+0x476>
        pcb->state = FIN_WAIT_2;
 8019f5e:	2306      	movs	r3, #6
 8019f60:	f888 3014 	strb.w	r3, [r8, #20]
 8019f64:	e439      	b.n	80197da <tcp_input+0x476>
          pcb->state = ESTABLISHED;
 8019f66:	2204      	movs	r2, #4
          if (pcb->listener == NULL) {
 8019f68:	f8d8 307c 	ldr.w	r3, [r8, #124]	; 0x7c
          pcb->state = ESTABLISHED;
 8019f6c:	f888 2014 	strb.w	r2, [r8, #20]
          if (pcb->listener == NULL) {
 8019f70:	2b00      	cmp	r3, #0
 8019f72:	d0af      	beq.n	8019ed4 <tcp_input+0xb70>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8019f74:	699b      	ldr	r3, [r3, #24]
 8019f76:	2b00      	cmp	r3, #0
 8019f78:	d074      	beq.n	801a064 <tcp_input+0xd00>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8019f7a:	2200      	movs	r2, #0
 8019f7c:	4641      	mov	r1, r8
 8019f7e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8019f82:	4798      	blx	r3
          if (err != ERR_OK) {
 8019f84:	2800      	cmp	r0, #0
 8019f86:	d033      	beq.n	8019ff0 <tcp_input+0xc8c>
            if (err != ERR_ABRT) {
 8019f88:	300d      	adds	r0, #13
 8019f8a:	f43f ab63 	beq.w	8019654 <tcp_input+0x2f0>
 8019f8e:	e7a1      	b.n	8019ed4 <tcp_input+0xb70>
        TCP_RMV_ACTIVE(pcb);
 8019f90:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019f94:	4a2f      	ldr	r2, [pc, #188]	; (801a054 <tcp_input+0xcf0>)
 8019f96:	6013      	str	r3, [r2, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8019f98:	4b2f      	ldr	r3, [pc, #188]	; (801a058 <tcp_input+0xcf4>)
        pcb->state = TIME_WAIT;
 8019f9a:	200a      	movs	r0, #10
        TCP_RMV_ACTIVE(pcb);
 8019f9c:	2101      	movs	r1, #1
        TCP_REG(&tcp_tw_pcbs, pcb);
 8019f9e:	681a      	ldr	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8019fa0:	f888 0014 	strb.w	r0, [r8, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8019fa4:	f8c8 200c 	str.w	r2, [r8, #12]
        TCP_RMV_ACTIVE(pcb);
 8019fa8:	4a2c      	ldr	r2, [pc, #176]	; (801a05c <tcp_input+0xcf8>)
        TCP_REG(&tcp_tw_pcbs, pcb);
 8019faa:	f8c3 8000 	str.w	r8, [r3]
        TCP_RMV_ACTIVE(pcb);
 8019fae:	7011      	strb	r1, [r2, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8019fb0:	f001 fbb4 	bl	801b71c <tcp_timer_needed>
 8019fb4:	e411      	b.n	80197da <tcp_input+0x476>
        TCP_RMV_ACTIVE(pcb);
 8019fb6:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8019fba:	60da      	str	r2, [r3, #12]
 8019fbc:	e7ec      	b.n	8019f98 <tcp_input+0xc34>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8019fbe:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 8019fc2:	2b00      	cmp	r3, #0
 8019fc4:	f47f adfc 	bne.w	8019bc0 <tcp_input+0x85c>
          tcp_ack_now(pcb);
 8019fc8:	f8b8 301a 	ldrh.w	r3, [r8, #26]
          tcp_pcb_purge(pcb);
 8019fcc:	4640      	mov	r0, r8
          tcp_ack_now(pcb);
 8019fce:	f043 0302 	orr.w	r3, r3, #2
 8019fd2:	f8a8 301a 	strh.w	r3, [r8, #26]
          tcp_pcb_purge(pcb);
 8019fd6:	f7fd fb9d 	bl	8017714 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8019fda:	4b1e      	ldr	r3, [pc, #120]	; (801a054 <tcp_input+0xcf0>)
 8019fdc:	681b      	ldr	r3, [r3, #0]
 8019fde:	4543      	cmp	r3, r8
 8019fe0:	d0d6      	beq.n	8019f90 <tcp_input+0xc2c>
 8019fe2:	2b00      	cmp	r3, #0
 8019fe4:	d0d8      	beq.n	8019f98 <tcp_input+0xc34>
 8019fe6:	68da      	ldr	r2, [r3, #12]
 8019fe8:	4542      	cmp	r2, r8
 8019fea:	d0e4      	beq.n	8019fb6 <tcp_input+0xc52>
 8019fec:	4613      	mov	r3, r2
 8019fee:	e7f8      	b.n	8019fe2 <tcp_input+0xc7e>
          tcp_receive(pcb);
 8019ff0:	4640      	mov	r0, r8
 8019ff2:	f7fe fd0d 	bl	8018a10 <tcp_receive>
          if (recv_acked != 0) {
 8019ff6:	4a1a      	ldr	r2, [pc, #104]	; (801a060 <tcp_input+0xcfc>)
 8019ff8:	8813      	ldrh	r3, [r2, #0]
 8019ffa:	b10b      	cbz	r3, 801a000 <tcp_input+0xc9c>
            recv_acked--;
 8019ffc:	3b01      	subs	r3, #1
 8019ffe:	8013      	strh	r3, [r2, #0]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801a000:	f8b8 2032 	ldrh.w	r2, [r8, #50]	; 0x32
 801a004:	f241 131c 	movw	r3, #4380	; 0x111c
 801a008:	0051      	lsls	r1, r2, #1
 801a00a:	0092      	lsls	r2, r2, #2
 801a00c:	4299      	cmp	r1, r3
 801a00e:	4608      	mov	r0, r1
 801a010:	bf38      	it	cc
 801a012:	4618      	movcc	r0, r3
 801a014:	4282      	cmp	r2, r0
 801a016:	d233      	bcs.n	801a080 <tcp_input+0xd1c>
 801a018:	b293      	uxth	r3, r2
          if (recv_flags & TF_GOT_FIN) {
 801a01a:	783a      	ldrb	r2, [r7, #0]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801a01c:	f8a8 3048 	strh.w	r3, [r8, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 801a020:	0694      	lsls	r4, r2, #26
 801a022:	f57f abda 	bpl.w	80197da <tcp_input+0x476>
 801a026:	e5dc      	b.n	8019be2 <tcp_input+0x87e>
 801a028:	2002a3f8 	.word	0x2002a3f8
 801a02c:	2002a41c 	.word	0x2002a41c
 801a030:	0803e598 	.word	0x0803e598
 801a034:	0803e4e0 	.word	0x0803e4e0
 801a038:	08026bb8 	.word	0x08026bb8
 801a03c:	2002eae8 	.word	0x2002eae8
 801a040:	2003e2dc 	.word	0x2003e2dc
 801a044:	0803e464 	.word	0x0803e464
 801a048:	0803e438 	.word	0x0803e438
 801a04c:	0803e4f8 	.word	0x0803e4f8
 801a050:	0803e4c0 	.word	0x0803e4c0
 801a054:	2003e2d8 	.word	0x2003e2d8
 801a058:	2003e2e8 	.word	0x2003e2e8
 801a05c:	2003e2d4 	.word	0x2003e2d4
 801a060:	2002a410 	.word	0x2002a410
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801a064:	4b08      	ldr	r3, [pc, #32]	; (801a088 <tcp_input+0xd24>)
 801a066:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801a06a:	4908      	ldr	r1, [pc, #32]	; (801a08c <tcp_input+0xd28>)
 801a06c:	4808      	ldr	r0, [pc, #32]	; (801a090 <tcp_input+0xd2c>)
 801a06e:	f006 fda3 	bl	8020bb8 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801a072:	f8d8 307c 	ldr.w	r3, [r8, #124]	; 0x7c
 801a076:	699b      	ldr	r3, [r3, #24]
 801a078:	2b00      	cmp	r3, #0
 801a07a:	f47f af7e 	bne.w	8019f7a <tcp_input+0xc16>
 801a07e:	e729      	b.n	8019ed4 <tcp_input+0xb70>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801a080:	4299      	cmp	r1, r3
 801a082:	bf88      	it	hi
 801a084:	b28b      	uxthhi	r3, r1
 801a086:	e7c8      	b.n	801a01a <tcp_input+0xcb6>
 801a088:	0803e598 	.word	0x0803e598
 801a08c:	0803e50c 	.word	0x0803e50c
 801a090:	08026bb8 	.word	0x08026bb8

0801a094 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 801a094:	4a02      	ldr	r2, [pc, #8]	; (801a0a0 <tcp_trigger_input_pcb_close+0xc>)
 801a096:	7813      	ldrb	r3, [r2, #0]
 801a098:	f043 0310 	orr.w	r3, r3, #16
 801a09c:	7013      	strb	r3, [r2, #0]
}
 801a09e:	4770      	bx	lr
 801a0a0:	2002a418 	.word	0x2002a418

0801a0a4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801a0a4:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801a0a6:	4604      	mov	r4, r0
 801a0a8:	b130      	cbz	r0, 801a0b8 <tcp_output_segment_busy+0x14>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801a0aa:	6863      	ldr	r3, [r4, #4]
 801a0ac:	7b98      	ldrb	r0, [r3, #14]
    /* other reference found */
    return 1;
  }
  /* no other references found */
  return 0;
}
 801a0ae:	f110 30ff 	adds.w	r0, r0, #4294967295
 801a0b2:	bf18      	it	ne
 801a0b4:	2001      	movne	r0, #1
 801a0b6:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801a0b8:	4b03      	ldr	r3, [pc, #12]	; (801a0c8 <tcp_output_segment_busy+0x24>)
 801a0ba:	f240 529a 	movw	r2, #1434	; 0x59a
 801a0be:	4903      	ldr	r1, [pc, #12]	; (801a0cc <tcp_output_segment_busy+0x28>)
 801a0c0:	4803      	ldr	r0, [pc, #12]	; (801a0d0 <tcp_output_segment_busy+0x2c>)
 801a0c2:	f006 fd79 	bl	8020bb8 <iprintf>
 801a0c6:	e7f0      	b.n	801a0aa <tcp_output_segment_busy+0x6>
 801a0c8:	0803e9bc 	.word	0x0803e9bc
 801a0cc:	0803e9f0 	.word	0x0803e9f0
 801a0d0:	08026bb8 	.word	0x08026bb8

0801a0d4 <tcp_pbuf_prealloc>:
{
 801a0d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a0d8:	9c08      	ldr	r4, [sp, #32]
 801a0da:	4607      	mov	r7, r0
 801a0dc:	460d      	mov	r5, r1
 801a0de:	4690      	mov	r8, r2
 801a0e0:	461e      	mov	r6, r3
 801a0e2:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 801a0e6:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801a0ea:	2c00      	cmp	r4, #0
 801a0ec:	d034      	beq.n	801a158 <tcp_pbuf_prealloc+0x84>
  if (length < max_length) {
 801a0ee:	4545      	cmp	r5, r8
 801a0f0:	d20f      	bcs.n	801a112 <tcp_pbuf_prealloc+0x3e>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801a0f2:	f019 0f02 	tst.w	r9, #2
 801a0f6:	d009      	beq.n	801a10c <tcp_pbuf_prealloc+0x38>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801a0f8:	f205 211b 	addw	r1, r5, #539	; 0x21b
 801a0fc:	f021 0103 	bic.w	r1, r1, #3
 801a100:	4541      	cmp	r1, r8
 801a102:	460a      	mov	r2, r1
 801a104:	bf28      	it	cs
 801a106:	4642      	movcs	r2, r8
 801a108:	b291      	uxth	r1, r2
 801a10a:	e003      	b.n	801a114 <tcp_pbuf_prealloc+0x40>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801a10c:	8b63      	ldrh	r3, [r4, #26]
 801a10e:	065b      	lsls	r3, r3, #25
 801a110:	d518      	bpl.n	801a144 <tcp_pbuf_prealloc+0x70>
 801a112:	4629      	mov	r1, r5
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801a114:	4638      	mov	r0, r7
 801a116:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a11a:	f7fc fc63 	bl	80169e4 <pbuf_alloc>
  if (p == NULL) {
 801a11e:	4604      	mov	r4, r0
 801a120:	b168      	cbz	r0, 801a13e <tcp_pbuf_prealloc+0x6a>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801a122:	6803      	ldr	r3, [r0, #0]
 801a124:	b133      	cbz	r3, 801a134 <tcp_pbuf_prealloc+0x60>
 801a126:	4b10      	ldr	r3, [pc, #64]	; (801a168 <tcp_pbuf_prealloc+0x94>)
 801a128:	f240 120b 	movw	r2, #267	; 0x10b
 801a12c:	490f      	ldr	r1, [pc, #60]	; (801a16c <tcp_pbuf_prealloc+0x98>)
 801a12e:	4810      	ldr	r0, [pc, #64]	; (801a170 <tcp_pbuf_prealloc+0x9c>)
 801a130:	f006 fd42 	bl	8020bb8 <iprintf>
  *oversize = p->len - length;
 801a134:	8963      	ldrh	r3, [r4, #10]
 801a136:	1b5b      	subs	r3, r3, r5
 801a138:	8033      	strh	r3, [r6, #0]
  p->len = p->tot_len = length;
 801a13a:	8125      	strh	r5, [r4, #8]
 801a13c:	8165      	strh	r5, [r4, #10]
}
 801a13e:	4620      	mov	r0, r4
 801a140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        (!(pcb->flags & TF_NODELAY) &&
 801a144:	f1ba 0f00 	cmp.w	sl, #0
 801a148:	d0d6      	beq.n	801a0f8 <tcp_pbuf_prealloc+0x24>
         (!first_seg ||
 801a14a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801a14c:	2b00      	cmp	r3, #0
 801a14e:	d1d3      	bne.n	801a0f8 <tcp_pbuf_prealloc+0x24>
          pcb->unsent != NULL ||
 801a150:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801a152:	2b00      	cmp	r3, #0
 801a154:	d1d0      	bne.n	801a0f8 <tcp_pbuf_prealloc+0x24>
 801a156:	e7dc      	b.n	801a112 <tcp_pbuf_prealloc+0x3e>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801a158:	4b03      	ldr	r3, [pc, #12]	; (801a168 <tcp_pbuf_prealloc+0x94>)
 801a15a:	22e9      	movs	r2, #233	; 0xe9
 801a15c:	4905      	ldr	r1, [pc, #20]	; (801a174 <tcp_pbuf_prealloc+0xa0>)
 801a15e:	4804      	ldr	r0, [pc, #16]	; (801a170 <tcp_pbuf_prealloc+0x9c>)
 801a160:	f006 fd2a 	bl	8020bb8 <iprintf>
 801a164:	e7c3      	b.n	801a0ee <tcp_pbuf_prealloc+0x1a>
 801a166:	bf00      	nop
 801a168:	0803e9bc 	.word	0x0803e9bc
 801a16c:	0803ea38 	.word	0x0803ea38
 801a170:	08026bb8 	.word	0x08026bb8
 801a174:	0803ea18 	.word	0x0803ea18

0801a178 <tcp_create_segment>:
{
 801a178:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a17c:	460e      	mov	r6, r1
 801a17e:	4617      	mov	r7, r2
 801a180:	4699      	mov	r9, r3
 801a182:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801a186:	4680      	mov	r8, r0
 801a188:	2800      	cmp	r0, #0
 801a18a:	d052      	beq.n	801a232 <tcp_create_segment+0xba>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801a18c:	2e00      	cmp	r6, #0
 801a18e:	d058      	beq.n	801a242 <tcp_create_segment+0xca>
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801a190:	2004      	movs	r0, #4
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a192:	ea4f 058a 	mov.w	r5, sl, lsl #2
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801a196:	22a8      	movs	r2, #168	; 0xa8
 801a198:	4935      	ldr	r1, [pc, #212]	; (801a270 <tcp_create_segment+0xf8>)
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a19a:	4005      	ands	r5, r0
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801a19c:	f7fc f8b6 	bl	801630c <memp_malloc_fn>
 801a1a0:	4604      	mov	r4, r0
 801a1a2:	2800      	cmp	r0, #0
 801a1a4:	d05f      	beq.n	801a266 <tcp_create_segment+0xee>
  seg->flags = optflags;
 801a1a6:	f880 a00a 	strb.w	sl, [r0, #10]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801a1aa:	fa1f fa85 	uxth.w	sl, r5
 801a1ae:	8933      	ldrh	r3, [r6, #8]
  seg->next = NULL;
 801a1b0:	2200      	movs	r2, #0
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801a1b2:	4553      	cmp	r3, sl
  seg->next = NULL;
 801a1b4:	e9c0 2600 	strd	r2, r6, [r0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801a1b8:	d333      	bcc.n	801a222 <tcp_create_segment+0xaa>
  seg->len = p->tot_len - optlen;
 801a1ba:	eba3 030a 	sub.w	r3, r3, sl
  if (pbuf_add_header(p, TCP_HLEN)) {
 801a1be:	4630      	mov	r0, r6
 801a1c0:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 801a1c2:	8123      	strh	r3, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 801a1c4:	f7fc fb60 	bl	8016888 <pbuf_add_header>
 801a1c8:	4606      	mov	r6, r0
 801a1ca:	2800      	cmp	r0, #0
 801a1cc:	d140      	bne.n	801a250 <tcp_create_segment+0xd8>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801a1ce:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801a1d0:	08ad      	lsrs	r5, r5, #2
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801a1d2:	f8b8 0016 	ldrh.w	r0, [r8, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801a1d6:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801a1da:	3505      	adds	r5, #5
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801a1dc:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801a1e0:	f7fa fd24 	bl	8014c2c <lwip_htons>
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801a1e4:	f8d4 b00c 	ldr.w	fp, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801a1e8:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801a1ec:	f8b8 0018 	ldrh.w	r0, [r8, #24]
 801a1f0:	f7fa fd1c 	bl	8014c2c <lwip_htons>
 801a1f4:	f8ab 0002 	strh.w	r0, [fp, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801a1f8:	4648      	mov	r0, r9
 801a1fa:	f8d4 900c 	ldr.w	r9, [r4, #12]
 801a1fe:	f7fa fd19 	bl	8014c34 <lwip_htonl>
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801a202:	f8d4 800c 	ldr.w	r8, [r4, #12]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801a206:	f8c9 0004 	str.w	r0, [r9, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801a20a:	ea47 3005 	orr.w	r0, r7, r5, lsl #12
 801a20e:	f7fa fd0d 	bl	8014c2c <lwip_htons>
  seg->tcphdr->urgp = 0;
 801a212:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801a214:	f8a8 000c 	strh.w	r0, [r8, #12]
  seg->tcphdr->urgp = 0;
 801a218:	749e      	strb	r6, [r3, #18]
 801a21a:	74de      	strb	r6, [r3, #19]
}
 801a21c:	4620      	mov	r0, r4
 801a21e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801a222:	4b13      	ldr	r3, [pc, #76]	; (801a270 <tcp_create_segment+0xf8>)
 801a224:	22b0      	movs	r2, #176	; 0xb0
 801a226:	4913      	ldr	r1, [pc, #76]	; (801a274 <tcp_create_segment+0xfc>)
 801a228:	4813      	ldr	r0, [pc, #76]	; (801a278 <tcp_create_segment+0x100>)
 801a22a:	f006 fcc5 	bl	8020bb8 <iprintf>
 801a22e:	8933      	ldrh	r3, [r6, #8]
 801a230:	e7c3      	b.n	801a1ba <tcp_create_segment+0x42>
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801a232:	4b0f      	ldr	r3, [pc, #60]	; (801a270 <tcp_create_segment+0xf8>)
 801a234:	22a3      	movs	r2, #163	; 0xa3
 801a236:	4911      	ldr	r1, [pc, #68]	; (801a27c <tcp_create_segment+0x104>)
 801a238:	480f      	ldr	r0, [pc, #60]	; (801a278 <tcp_create_segment+0x100>)
 801a23a:	f006 fcbd 	bl	8020bb8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801a23e:	2e00      	cmp	r6, #0
 801a240:	d1a6      	bne.n	801a190 <tcp_create_segment+0x18>
 801a242:	4b0b      	ldr	r3, [pc, #44]	; (801a270 <tcp_create_segment+0xf8>)
 801a244:	22a4      	movs	r2, #164	; 0xa4
 801a246:	490e      	ldr	r1, [pc, #56]	; (801a280 <tcp_create_segment+0x108>)
 801a248:	480b      	ldr	r0, [pc, #44]	; (801a278 <tcp_create_segment+0x100>)
 801a24a:	f006 fcb5 	bl	8020bb8 <iprintf>
 801a24e:	e79f      	b.n	801a190 <tcp_create_segment+0x18>
    TCP_STATS_INC(tcp.err);
 801a250:	4a0c      	ldr	r2, [pc, #48]	; (801a284 <tcp_create_segment+0x10c>)
    tcp_seg_free(seg);
 801a252:	4620      	mov	r0, r4
    return NULL;
 801a254:	2400      	movs	r4, #0
    TCP_STATS_INC(tcp.err);
 801a256:	f8b2 30a4 	ldrh.w	r3, [r2, #164]	; 0xa4
 801a25a:	3301      	adds	r3, #1
 801a25c:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
    tcp_seg_free(seg);
 801a260:	f7fd f986 	bl	8017570 <tcp_seg_free>
    return NULL;
 801a264:	e7da      	b.n	801a21c <tcp_create_segment+0xa4>
    pbuf_free(p);
 801a266:	4630      	mov	r0, r6
 801a268:	f7fc fb4e 	bl	8016908 <pbuf_free>
    return NULL;
 801a26c:	e7d6      	b.n	801a21c <tcp_create_segment+0xa4>
 801a26e:	bf00      	nop
 801a270:	0803e9bc 	.word	0x0803e9bc
 801a274:	0803e750 	.word	0x0803e750
 801a278:	08026bb8 	.word	0x08026bb8
 801a27c:	0803e70c 	.word	0x0803e70c
 801a280:	0803e72c 	.word	0x0803e72c
 801a284:	2003e1cc 	.word	0x2003e1cc

0801a288 <tcp_output_alloc_header_common.constprop.4>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801a288:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 801a28a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801a28e:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 801a290:	4680      	mov	r8, r0
 801a292:	4691      	mov	r9, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801a294:	2022      	movs	r0, #34	; 0x22
 801a296:	f44f 7220 	mov.w	r2, #640	; 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 801a29a:	469b      	mov	fp, r3
 801a29c:	f8bd a028 	ldrh.w	sl, [sp, #40]	; 0x28
 801a2a0:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 801a2a4:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801a2a8:	f7fc fb9c 	bl	80169e4 <pbuf_alloc>
  if (p != NULL) {
 801a2ac:	4605      	mov	r5, r0
 801a2ae:	b1f8      	cbz	r0, 801a2f0 <tcp_output_alloc_header_common.constprop.4+0x68>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801a2b0:	8943      	ldrh	r3, [r0, #10]
 801a2b2:	2b13      	cmp	r3, #19
 801a2b4:	d91f      	bls.n	801a2f6 <tcp_output_alloc_header_common.constprop.4+0x6e>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801a2b6:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 801a2b8:	4658      	mov	r0, fp
 801a2ba:	f7fa fcb7 	bl	8014c2c <lwip_htons>
 801a2be:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801a2c0:	4650      	mov	r0, sl
 801a2c2:	f7fa fcb3 	bl	8014c2c <lwip_htons>
    tcphdr->seqno = seqno_be;
 801a2c6:	f8c4 9004 	str.w	r9, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 801a2ca:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 801a2cc:	4640      	mov	r0, r8
 801a2ce:	f7fa fcb1 	bl	8014c34 <lwip_htonl>
 801a2d2:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801a2d4:	f447 40a0 	orr.w	r0, r7, #20480	; 0x5000
 801a2d8:	f7fa fca8 	bl	8014c2c <lwip_htons>
 801a2dc:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801a2de:	4630      	mov	r0, r6
 801a2e0:	f7fa fca4 	bl	8014c2c <lwip_htons>
    tcphdr->chksum = 0;
 801a2e4:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 801a2e6:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 801a2e8:	7423      	strb	r3, [r4, #16]
 801a2ea:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 801a2ec:	74a3      	strb	r3, [r4, #18]
 801a2ee:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 801a2f0:	4628      	mov	r0, r5
 801a2f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801a2f6:	4b04      	ldr	r3, [pc, #16]	; (801a308 <tcp_output_alloc_header_common.constprop.4+0x80>)
 801a2f8:	f240 7224 	movw	r2, #1828	; 0x724
 801a2fc:	4903      	ldr	r1, [pc, #12]	; (801a30c <tcp_output_alloc_header_common.constprop.4+0x84>)
 801a2fe:	4804      	ldr	r0, [pc, #16]	; (801a310 <tcp_output_alloc_header_common.constprop.4+0x88>)
 801a300:	f006 fc5a 	bl	8020bb8 <iprintf>
 801a304:	e7d7      	b.n	801a2b6 <tcp_output_alloc_header_common.constprop.4+0x2e>
 801a306:	bf00      	nop
 801a308:	0803e9bc 	.word	0x0803e9bc
 801a30c:	0803e938 	.word	0x0803e938
 801a310:	08026bb8 	.word	0x08026bb8

0801a314 <tcp_output_alloc_header.constprop.3>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 801a314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a318:	460f      	mov	r7, r1
 801a31a:	b084      	sub	sp, #16
 801a31c:	4690      	mov	r8, r2
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801a31e:	4604      	mov	r4, r0
 801a320:	b198      	cbz	r0, 801a34a <tcp_output_alloc_header.constprop.3+0x36>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801a322:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
 801a324:	2510      	movs	r5, #16
 801a326:	8ae3      	ldrh	r3, [r4, #22]
 801a328:	4642      	mov	r2, r8
 801a32a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801a32c:	4639      	mov	r1, r7
 801a32e:	e9cd 5601 	strd	r5, r6, [sp, #4]
 801a332:	8b25      	ldrh	r5, [r4, #24]
 801a334:	9500      	str	r5, [sp, #0]
 801a336:	f7ff ffa7 	bl	801a288 <tcp_output_alloc_header_common.constprop.4>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801a33a:	b118      	cbz	r0, 801a344 <tcp_output_alloc_header.constprop.3+0x30>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801a33c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 801a33e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a340:	4413      	add	r3, r2
 801a342:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  return p;
}
 801a344:	b004      	add	sp, #16
 801a346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801a34a:	4b04      	ldr	r3, [pc, #16]	; (801a35c <tcp_output_alloc_header.constprop.3+0x48>)
 801a34c:	f240 7242 	movw	r2, #1858	; 0x742
 801a350:	4903      	ldr	r1, [pc, #12]	; (801a360 <tcp_output_alloc_header.constprop.3+0x4c>)
 801a352:	4804      	ldr	r0, [pc, #16]	; (801a364 <tcp_output_alloc_header.constprop.3+0x50>)
 801a354:	f006 fc30 	bl	8020bb8 <iprintf>
 801a358:	e7e3      	b.n	801a322 <tcp_output_alloc_header.constprop.3+0xe>
 801a35a:	bf00      	nop
 801a35c:	0803e9bc 	.word	0x0803e9bc
 801a360:	0803e910 	.word	0x0803e910
 801a364:	08026bb8 	.word	0x08026bb8

0801a368 <tcp_output_fill_options.isra.0.constprop.5>:
{
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801a368:	b100      	cbz	r0, 801a36c <tcp_output_fill_options.isra.0.constprop.5+0x4>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801a36a:	4770      	bx	lr
  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801a36c:	4b03      	ldr	r3, [pc, #12]	; (801a37c <tcp_output_fill_options.isra.0.constprop.5+0x14>)
 801a36e:	f240 7256 	movw	r2, #1878	; 0x756
 801a372:	4903      	ldr	r1, [pc, #12]	; (801a380 <tcp_output_fill_options.isra.0.constprop.5+0x18>)
 801a374:	4803      	ldr	r0, [pc, #12]	; (801a384 <tcp_output_fill_options.isra.0.constprop.5+0x1c>)
 801a376:	f006 bc1f 	b.w	8020bb8 <iprintf>
 801a37a:	bf00      	nop
 801a37c:	0803e9bc 	.word	0x0803e9bc
 801a380:	0803e994 	.word	0x0803e994
 801a384:	08026bb8 	.word	0x08026bb8

0801a388 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801a388:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a38c:	4605      	mov	r5, r0
 801a38e:	b085      	sub	sp, #20
 801a390:	4690      	mov	r8, r2
 801a392:	461e      	mov	r6, r3
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801a394:	460c      	mov	r4, r1
 801a396:	2900      	cmp	r1, #0
 801a398:	d03d      	beq.n	801a416 <tcp_output_control_segment+0x8e>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801a39a:	2d00      	cmp	r5, #0
 801a39c:	d044      	beq.n	801a428 <tcp_output_control_segment+0xa0>
 801a39e:	7a28      	ldrb	r0, [r5, #8]
 801a3a0:	bb58      	cbnz	r0, 801a3fa <tcp_output_control_segment+0x72>
    return ip_route(src, dst);
 801a3a2:	4630      	mov	r0, r6
 801a3a4:	f003 ff82 	bl	801e2ac <ip4_route>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 801a3a8:	4607      	mov	r7, r0
 801a3aa:	b358      	cbz	r0, 801a404 <tcp_output_control_segment+0x7c>
    err = ERR_RTE;
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 801a3ac:	f8d4 9004 	ldr.w	r9, [r4, #4]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801a3b0:	4643      	mov	r3, r8
 801a3b2:	8922      	ldrh	r2, [r4, #8]
 801a3b4:	2106      	movs	r1, #6
 801a3b6:	9600      	str	r6, [sp, #0]
 801a3b8:	4620      	mov	r0, r4
 801a3ba:	f7fb f9f3 	bl	80157a4 <ip_chksum_pseudo>
 801a3be:	f8a9 0010 	strh.w	r0, [r9, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801a3c2:	7aeb      	ldrb	r3, [r5, #11]
      tos = pcb->tos;
 801a3c4:	7aad      	ldrb	r5, [r5, #10]
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
 801a3c6:	f8df c094 	ldr.w	ip, [pc, #148]	; 801a45c <tcp_output_control_segment+0xd4>
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801a3ca:	f04f 0e06 	mov.w	lr, #6
 801a3ce:	9500      	str	r5, [sp, #0]
 801a3d0:	4632      	mov	r2, r6
    TCP_STATS_INC(tcp.xmit);
 801a3d2:	f8bc 0090 	ldrh.w	r0, [ip, #144]	; 0x90
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801a3d6:	4641      	mov	r1, r8
 801a3d8:	f8cd e004 	str.w	lr, [sp, #4]
    TCP_STATS_INC(tcp.xmit);
 801a3dc:	1c45      	adds	r5, r0, #1
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801a3de:	9702      	str	r7, [sp, #8]
 801a3e0:	4620      	mov	r0, r4
    TCP_STATS_INC(tcp.xmit);
 801a3e2:	f8ac 5090 	strh.w	r5, [ip, #144]	; 0x90
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801a3e6:	f004 f979 	bl	801e6dc <ip4_output_if>
 801a3ea:	4605      	mov	r5, r0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801a3ec:	4620      	mov	r0, r4
 801a3ee:	f7fc fa8b 	bl	8016908 <pbuf_free>
  return err;
}
 801a3f2:	4628      	mov	r0, r5
 801a3f4:	b005      	add	sp, #20
 801a3f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return netif_get_by_index(pcb->netif_idx);
 801a3fa:	f7fc f99f 	bl	801673c <netif_get_by_index>
  if (netif == NULL) {
 801a3fe:	4607      	mov	r7, r0
 801a400:	2800      	cmp	r0, #0
 801a402:	d1d3      	bne.n	801a3ac <tcp_output_control_segment+0x24>
    err = ERR_RTE;
 801a404:	f06f 0503 	mvn.w	r5, #3
  pbuf_free(p);
 801a408:	4620      	mov	r0, r4
 801a40a:	f7fc fa7d 	bl	8016908 <pbuf_free>
}
 801a40e:	4628      	mov	r0, r5
 801a410:	b005      	add	sp, #20
 801a412:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801a416:	4b0e      	ldr	r3, [pc, #56]	; (801a450 <tcp_output_control_segment+0xc8>)
 801a418:	f240 7287 	movw	r2, #1927	; 0x787
 801a41c:	490d      	ldr	r1, [pc, #52]	; (801a454 <tcp_output_control_segment+0xcc>)
 801a41e:	480e      	ldr	r0, [pc, #56]	; (801a458 <tcp_output_control_segment+0xd0>)
 801a420:	f006 fbca 	bl	8020bb8 <iprintf>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801a424:	2d00      	cmp	r5, #0
 801a426:	d1ba      	bne.n	801a39e <tcp_output_control_segment+0x16>
    return ip_route(src, dst);
 801a428:	4630      	mov	r0, r6
 801a42a:	f003 ff3f 	bl	801e2ac <ip4_route>
  if (netif == NULL) {
 801a42e:	4607      	mov	r7, r0
 801a430:	2800      	cmp	r0, #0
 801a432:	d0e7      	beq.n	801a404 <tcp_output_control_segment+0x7c>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 801a434:	f8d4 9004 	ldr.w	r9, [r4, #4]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801a438:	4643      	mov	r3, r8
 801a43a:	8922      	ldrh	r2, [r4, #8]
 801a43c:	2106      	movs	r1, #6
 801a43e:	9600      	str	r6, [sp, #0]
 801a440:	4620      	mov	r0, r4
 801a442:	f7fb f9af 	bl	80157a4 <ip_chksum_pseudo>
      ttl = TCP_TTL;
 801a446:	23ff      	movs	r3, #255	; 0xff
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801a448:	f8a9 0010 	strh.w	r0, [r9, #16]
 801a44c:	e7bb      	b.n	801a3c6 <tcp_output_control_segment+0x3e>
 801a44e:	bf00      	nop
 801a450:	0803e9bc 	.word	0x0803e9bc
 801a454:	0803e968 	.word	0x0803e968
 801a458:	08026bb8 	.word	0x08026bb8
 801a45c:	2003e1cc 	.word	0x2003e1cc

0801a460 <tcp_write>:
{
 801a460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t oversize = 0;
 801a464:	2400      	movs	r4, #0
{
 801a466:	b091      	sub	sp, #68	; 0x44
 801a468:	9105      	str	r1, [sp, #20]
 801a46a:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t oversize = 0;
 801a46c:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801a470:	2800      	cmp	r0, #0
 801a472:	f000 82f2 	beq.w	801aa5a <tcp_write+0x5fa>
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801a476:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 801a47a:	4607      	mov	r7, r0
 801a47c:	f8b0 b032 	ldrh.w	fp, [r0, #50]	; 0x32
 801a480:	085b      	lsrs	r3, r3, #1
 801a482:	455b      	cmp	r3, fp
 801a484:	bf28      	it	cs
 801a486:	465b      	movcs	r3, fp
  mss_local = mss_local ? mss_local : pcb->mss;
 801a488:	2b00      	cmp	r3, #0
 801a48a:	bf18      	it	ne
 801a48c:	469b      	movne	fp, r3
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801a48e:	9b05      	ldr	r3, [sp, #20]
 801a490:	2b00      	cmp	r3, #0
 801a492:	f000 82ce 	beq.w	801aa32 <tcp_write+0x5d2>
  if ((pcb->state != ESTABLISHED) &&
 801a496:	7d03      	ldrb	r3, [r0, #20]
 801a498:	4692      	mov	sl, r2
      (pcb->state != CLOSE_WAIT) &&
 801a49a:	1e9a      	subs	r2, r3, #2
      (pcb->state != SYN_SENT) &&
 801a49c:	2a02      	cmp	r2, #2
 801a49e:	d902      	bls.n	801a4a6 <tcp_write+0x46>
 801a4a0:	2b07      	cmp	r3, #7
 801a4a2:	f040 8289 	bne.w	801a9b8 <tcp_write+0x558>
  } else if (len == 0) {
 801a4a6:	f1ba 0f00 	cmp.w	sl, #0
 801a4aa:	d078      	beq.n	801a59e <tcp_write+0x13e>
  if (len > pcb->snd_buf) {
 801a4ac:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801a4b0:	4553      	cmp	r3, sl
 801a4b2:	f0c0 82aa 	bcc.w	801aa0a <tcp_write+0x5aa>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801a4b6:	f8b7 6066 	ldrh.w	r6, [r7, #102]	; 0x66
 801a4ba:	2e08      	cmp	r6, #8
 801a4bc:	f200 82ac 	bhi.w	801aa18 <tcp_write+0x5b8>
 801a4c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
  if (pcb->snd_queuelen != 0) {
 801a4c2:	2e00      	cmp	r6, #0
 801a4c4:	d05e      	beq.n	801a584 <tcp_write+0x124>
 801a4c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801a4c8:	9209      	str	r2, [sp, #36]	; 0x24
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801a4ca:	2b00      	cmp	r3, #0
 801a4cc:	d16b      	bne.n	801a5a6 <tcp_write+0x146>
 801a4ce:	2a00      	cmp	r2, #0
 801a4d0:	f000 826d 	beq.w	801a9ae <tcp_write+0x54e>
 801a4d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a4d6:	e000      	b.n	801a4da <tcp_write+0x7a>
 801a4d8:	461a      	mov	r2, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a4da:	6813      	ldr	r3, [r2, #0]
 801a4dc:	2b00      	cmp	r3, #0
 801a4de:	d1fb      	bne.n	801a4d8 <tcp_write+0x78>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801a4e0:	7a95      	ldrb	r5, [r2, #10]
 801a4e2:	4699      	mov	r9, r3
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801a4e4:	8913      	ldrh	r3, [r2, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801a4e6:	00ad      	lsls	r5, r5, #2
 801a4e8:	9209      	str	r2, [sp, #36]	; 0x24
 801a4ea:	f005 0504 	and.w	r5, r5, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801a4ee:	195a      	adds	r2, r3, r5
 801a4f0:	4593      	cmp	fp, r2
 801a4f2:	f2c0 81d3 	blt.w	801a89c <tcp_write+0x43c>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801a4f6:	ebab 0403 	sub.w	r4, fp, r3
    oversize = pcb->unsent_oversize;
 801a4fa:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
    space = mss_local - (last_unsent->len + unsent_optlen);
 801a4fe:	1b64      	subs	r4, r4, r5
    oversize = pcb->unsent_oversize;
 801a500:	930b      	str	r3, [sp, #44]	; 0x2c
 801a502:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    space = mss_local - (last_unsent->len + unsent_optlen);
 801a506:	b2a4      	uxth	r4, r4
    if (oversize > 0) {
 801a508:	2b00      	cmp	r3, #0
 801a50a:	f040 8100 	bne.w	801a70e <tcp_write+0x2ae>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801a50e:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801a512:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a514:	459a      	cmp	sl, r3
 801a516:	f240 8153 	bls.w	801a7c0 <tcp_write+0x360>
 801a51a:	2c00      	cmp	r4, #0
 801a51c:	f000 8150 	beq.w	801a7c0 <tcp_write+0x360>
 801a520:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a522:	8912      	ldrh	r2, [r2, #8]
 801a524:	920d      	str	r2, [sp, #52]	; 0x34
 801a526:	2a00      	cmp	r2, #0
 801a528:	f000 81c2 	beq.w	801a8b0 <tcp_write+0x450>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801a52c:	ebaa 0503 	sub.w	r5, sl, r3
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801a530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
      u16_t seglen = LWIP_MIN(space, len - pos);
 801a532:	42a5      	cmp	r5, r4
 801a534:	bfa8      	it	ge
 801a536:	4625      	movge	r5, r4
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801a538:	07db      	lsls	r3, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 801a53a:	fa1f f885 	uxth.w	r8, r5
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801a53e:	f100 823e 	bmi.w	801a9be <tcp_write+0x55e>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801a542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a544:	685b      	ldr	r3, [r3, #4]
 801a546:	e000      	b.n	801a54a <tcp_write+0xea>
 801a548:	4613      	mov	r3, r2
 801a54a:	681a      	ldr	r2, [r3, #0]
 801a54c:	2a00      	cmp	r2, #0
 801a54e:	d1fb      	bne.n	801a548 <tcp_write+0xe8>
 801a550:	920c      	str	r2, [sp, #48]	; 0x30
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801a552:	7b1a      	ldrb	r2, [r3, #12]
 801a554:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 801a558:	f040 8104 	bne.w	801a764 <tcp_write+0x304>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801a55c:	895a      	ldrh	r2, [r3, #10]
 801a55e:	685b      	ldr	r3, [r3, #4]
 801a560:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801a562:	9a05      	ldr	r2, [sp, #20]
 801a564:	429a      	cmp	r2, r3
 801a566:	f040 80fd 	bne.w	801a764 <tcp_write+0x304>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801a56a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a56c:	2b00      	cmp	r3, #0
 801a56e:	f040 827e 	bne.w	801aa6e <tcp_write+0x60e>
          extendlen = seglen;
 801a572:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
      pos += seglen;
 801a576:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a578:	eb08 0403 	add.w	r4, r8, r3
 801a57c:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 801a580:	b2a4      	uxth	r4, r4
 801a582:	e121      	b.n	801a7c8 <tcp_write+0x368>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801a584:	b923      	cbnz	r3, 801a590 <tcp_write+0x130>
 801a586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a588:	9309      	str	r3, [sp, #36]	; 0x24
 801a58a:	2b00      	cmp	r3, #0
 801a58c:	f000 81c1 	beq.w	801a912 <tcp_write+0x4b2>
 801a590:	4b97      	ldr	r3, [pc, #604]	; (801a7f0 <tcp_write+0x390>)
 801a592:	f240 1259 	movw	r2, #345	; 0x159
 801a596:	4997      	ldr	r1, [pc, #604]	; (801a7f4 <tcp_write+0x394>)
 801a598:	4897      	ldr	r0, [pc, #604]	; (801a7f8 <tcp_write+0x398>)
 801a59a:	f006 fb0d 	bl	8020bb8 <iprintf>
 801a59e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a5a0:	f8b7 6066 	ldrh.w	r6, [r7, #102]	; 0x66
 801a5a4:	9309      	str	r3, [sp, #36]	; 0x24
  if (pcb->unsent != NULL) {
 801a5a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a5a8:	2b00      	cmp	r3, #0
 801a5aa:	d193      	bne.n	801a4d4 <tcp_write+0x74>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801a5ac:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 801a5b0:	2b00      	cmp	r3, #0
 801a5b2:	f040 80cf 	bne.w	801a754 <tcp_write+0x2f4>
  while (pos < len) {
 801a5b6:	f1ba 0f00 	cmp.w	sl, #0
 801a5ba:	f000 8262 	beq.w	801aa82 <tcp_write+0x622>
 801a5be:	2300      	movs	r3, #0
 801a5c0:	461c      	mov	r4, r3
 801a5c2:	930d      	str	r3, [sp, #52]	; 0x34
 801a5c4:	930b      	str	r3, [sp, #44]	; 0x2c
 801a5c6:	9309      	str	r3, [sp, #36]	; 0x24
 801a5c8:	930c      	str	r3, [sp, #48]	; 0x30
 801a5ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a5cc:	f04f 0900 	mov.w	r9, #0
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801a5d0:	f8cd b018 	str.w	fp, [sp, #24]
 801a5d4:	f003 0301 	and.w	r3, r3, #1
 801a5d8:	46cb      	mov	fp, r9
 801a5da:	9308      	str	r3, [sp, #32]
 801a5dc:	e042      	b.n	801a664 <tcp_write+0x204>
 801a5de:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801a5e2:	2b00      	cmp	r3, #0
 801a5e4:	f040 80d4 	bne.w	801a790 <tcp_write+0x330>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801a5e8:	2201      	movs	r2, #1
 801a5ea:	4629      	mov	r1, r5
 801a5ec:	2036      	movs	r0, #54	; 0x36
 801a5ee:	f7fc f9f9 	bl	80169e4 <pbuf_alloc>
 801a5f2:	4603      	mov	r3, r0
 801a5f4:	2800      	cmp	r0, #0
 801a5f6:	d067      	beq.n	801a6c8 <tcp_write+0x268>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801a5f8:	9a05      	ldr	r2, [sp, #20]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801a5fa:	2100      	movs	r1, #0
 801a5fc:	2036      	movs	r0, #54	; 0x36
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801a5fe:	9307      	str	r3, [sp, #28]
 801a600:	eb02 0c04 	add.w	ip, r2, r4
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801a604:	f44f 7220 	mov.w	r2, #640	; 0x280
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801a608:	f8c3 c004 	str.w	ip, [r3, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801a60c:	f7fc f9ea 	bl	80169e4 <pbuf_alloc>
 801a610:	9b07      	ldr	r3, [sp, #28]
 801a612:	4680      	mov	r8, r0
 801a614:	2800      	cmp	r0, #0
 801a616:	f000 814f 	beq.w	801a8b8 <tcp_write+0x458>
      pbuf_cat(p/*header*/, p2/*data*/);
 801a61a:	4619      	mov	r1, r3
 801a61c:	f7fc fafc 	bl	8016c18 <pbuf_cat>
    queuelen += pbuf_clen(p);
 801a620:	4640      	mov	r0, r8
 801a622:	f7fc fad9 	bl	8016bd8 <pbuf_clen>
 801a626:	4406      	add	r6, r0
 801a628:	b2b6      	uxth	r6, r6
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801a62a:	2e09      	cmp	r6, #9
 801a62c:	d849      	bhi.n	801a6c2 <tcp_write+0x262>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801a62e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a630:	2200      	movs	r2, #0
 801a632:	4641      	mov	r1, r8
 801a634:	4638      	mov	r0, r7
 801a636:	4423      	add	r3, r4
 801a638:	9200      	str	r2, [sp, #0]
 801a63a:	f7ff fd9d 	bl	801a178 <tcp_create_segment>
 801a63e:	4680      	mov	r8, r0
 801a640:	2800      	cmp	r0, #0
 801a642:	d041      	beq.n	801a6c8 <tcp_write+0x268>
    if (queue == NULL) {
 801a644:	f1b9 0f00 	cmp.w	r9, #0
 801a648:	f000 80a0 	beq.w	801a78c <tcp_write+0x32c>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801a64c:	f1bb 0f00 	cmp.w	fp, #0
 801a650:	f000 80a6 	beq.w	801a7a0 <tcp_write+0x340>
      prev_seg->next = seg;
 801a654:	f8cb 8000 	str.w	r8, [fp]
    pos += seglen;
 801a658:	442c      	add	r4, r5
 801a65a:	46c3      	mov	fp, r8
 801a65c:	b2a4      	uxth	r4, r4
  while (pos < len) {
 801a65e:	45a2      	cmp	sl, r4
 801a660:	f240 80b5 	bls.w	801a7ce <tcp_write+0x36e>
    u16_t left = len - pos;
 801a664:	ebaa 0504 	sub.w	r5, sl, r4
    u16_t seglen = LWIP_MIN(left, max_len);
 801a668:	9b06      	ldr	r3, [sp, #24]
 801a66a:	b2ad      	uxth	r5, r5
 801a66c:	429d      	cmp	r5, r3
 801a66e:	bf28      	it	cs
 801a670:	461d      	movcs	r5, r3
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801a672:	9b08      	ldr	r3, [sp, #32]
    u16_t seglen = LWIP_MIN(left, max_len);
 801a674:	b2ad      	uxth	r5, r5
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801a676:	2b00      	cmp	r3, #0
 801a678:	d0b1      	beq.n	801a5de <tcp_write+0x17e>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801a67a:	fab9 fc89 	clz	ip, r9
 801a67e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a680:	9a06      	ldr	r2, [sp, #24]
 801a682:	4629      	mov	r1, r5
 801a684:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801a688:	2036      	movs	r0, #54	; 0x36
 801a68a:	e9cd 7300 	strd	r7, r3, [sp]
 801a68e:	f8cd c008 	str.w	ip, [sp, #8]
 801a692:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 801a696:	f7ff fd1d 	bl	801a0d4 <tcp_pbuf_prealloc>
 801a69a:	4680      	mov	r8, r0
 801a69c:	b1a0      	cbz	r0, 801a6c8 <tcp_write+0x268>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801a69e:	8943      	ldrh	r3, [r0, #10]
 801a6a0:	42ab      	cmp	r3, r5
 801a6a2:	f0c0 8085 	bcc.w	801a7b0 <tcp_write+0x350>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801a6a6:	9b05      	ldr	r3, [sp, #20]
 801a6a8:	462a      	mov	r2, r5
 801a6aa:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801a6ae:	1919      	adds	r1, r3, r4
 801a6b0:	f005 fadd 	bl	801fc6e <memcpy>
    queuelen += pbuf_clen(p);
 801a6b4:	4640      	mov	r0, r8
 801a6b6:	f7fc fa8f 	bl	8016bd8 <pbuf_clen>
 801a6ba:	4406      	add	r6, r0
 801a6bc:	b2b6      	uxth	r6, r6
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801a6be:	2e09      	cmp	r6, #9
 801a6c0:	d9b5      	bls.n	801a62e <tcp_write+0x1ce>
      pbuf_free(p);
 801a6c2:	4640      	mov	r0, r8
 801a6c4:	f7fc f920 	bl	8016908 <pbuf_free>
  TCP_STATS_INC(tcp.memerr);
 801a6c8:	494c      	ldr	r1, [pc, #304]	; (801a7fc <tcp_write+0x39c>)
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a6ca:	8b7a      	ldrh	r2, [r7, #26]
  TCP_STATS_INC(tcp.memerr);
 801a6cc:	f8b1 309c 	ldrh.w	r3, [r1, #156]	; 0x9c
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a6d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  TCP_STATS_INC(tcp.memerr);
 801a6d4:	3301      	adds	r3, #1
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a6d6:	837a      	strh	r2, [r7, #26]
  TCP_STATS_INC(tcp.memerr);
 801a6d8:	f8a1 309c 	strh.w	r3, [r1, #156]	; 0x9c
  if (concat_p != NULL) {
 801a6dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a6de:	b113      	cbz	r3, 801a6e6 <tcp_write+0x286>
    pbuf_free(concat_p);
 801a6e0:	4618      	mov	r0, r3
 801a6e2:	f7fc f911 	bl	8016908 <pbuf_free>
  if (queue != NULL) {
 801a6e6:	f1b9 0f00 	cmp.w	r9, #0
 801a6ea:	d002      	beq.n	801a6f2 <tcp_write+0x292>
    tcp_segs_free(queue);
 801a6ec:	4648      	mov	r0, r9
 801a6ee:	f7fc ff4d 	bl	801758c <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 801a6f2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801a6f6:	b12b      	cbz	r3, 801a704 <tcp_write+0x2a4>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801a6f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a6fa:	b91b      	cbnz	r3, 801a704 <tcp_write+0x2a4>
 801a6fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a6fe:	2b00      	cmp	r3, #0
 801a700:	f000 80de 	beq.w	801a8c0 <tcp_write+0x460>
  return ERR_MEM;
 801a704:	f04f 30ff 	mov.w	r0, #4294967295
}
 801a708:	b011      	add	sp, #68	; 0x44
 801a70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801a70e:	42a3      	cmp	r3, r4
 801a710:	f200 80e3 	bhi.w	801a8da <tcp_write+0x47a>
 801a714:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801a716:	4553      	cmp	r3, sl
 801a718:	461a      	mov	r2, r3
 801a71a:	bf28      	it	cs
 801a71c:	4652      	movcs	r2, sl
 801a71e:	42a2      	cmp	r2, r4
 801a720:	bfa8      	it	ge
 801a722:	4622      	movge	r2, r4
 801a724:	b292      	uxth	r2, r2
      oversize -= oversize_used;
 801a726:	1a9b      	subs	r3, r3, r2
      space -= oversize_used;
 801a728:	1aa4      	subs	r4, r4, r2
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801a72a:	920b      	str	r2, [sp, #44]	; 0x2c
      oversize -= oversize_used;
 801a72c:	b29b      	uxth	r3, r3
      space -= oversize_used;
 801a72e:	b2a4      	uxth	r4, r4
      oversize -= oversize_used;
 801a730:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801a734:	2b00      	cmp	r3, #0
 801a736:	f000 80cd 	beq.w	801a8d4 <tcp_write+0x474>
 801a73a:	4592      	cmp	sl, r2
 801a73c:	f000 80ca 	beq.w	801a8d4 <tcp_write+0x474>
 801a740:	4b2b      	ldr	r3, [pc, #172]	; (801a7f0 <tcp_write+0x390>)
 801a742:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a746:	492e      	ldr	r1, [pc, #184]	; (801a800 <tcp_write+0x3a0>)
 801a748:	482b      	ldr	r0, [pc, #172]	; (801a7f8 <tcp_write+0x398>)
 801a74a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 801a74e:	f006 fa33 	bl	8020bb8 <iprintf>
 801a752:	e6de      	b.n	801a512 <tcp_write+0xb2>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801a754:	4b26      	ldr	r3, [pc, #152]	; (801a7f0 <tcp_write+0x390>)
 801a756:	f240 224b 	movw	r2, #587	; 0x24b
 801a75a:	492a      	ldr	r1, [pc, #168]	; (801a804 <tcp_write+0x3a4>)
 801a75c:	4826      	ldr	r0, [pc, #152]	; (801a7f8 <tcp_write+0x398>)
 801a75e:	f006 fa2b 	bl	8020bb8 <iprintf>
 801a762:	e728      	b.n	801a5b6 <tcp_write+0x156>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801a764:	2201      	movs	r2, #1
 801a766:	4641      	mov	r1, r8
 801a768:	2000      	movs	r0, #0
 801a76a:	f7fc f93b 	bl	80169e4 <pbuf_alloc>
 801a76e:	900c      	str	r0, [sp, #48]	; 0x30
 801a770:	2800      	cmp	r0, #0
 801a772:	f000 80d8 	beq.w	801a926 <tcp_write+0x4c6>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801a776:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a778:	9b05      	ldr	r3, [sp, #20]
 801a77a:	4413      	add	r3, r2
  u16_t extendlen = 0;
 801a77c:	2200      	movs	r2, #0
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801a77e:	6043      	str	r3, [r0, #4]
  u16_t extendlen = 0;
 801a780:	920d      	str	r2, [sp, #52]	; 0x34
          queuelen += pbuf_clen(concat_p);
 801a782:	f7fc fa29 	bl	8016bd8 <pbuf_clen>
 801a786:	4406      	add	r6, r0
 801a788:	b2b6      	uxth	r6, r6
 801a78a:	e6f4      	b.n	801a576 <tcp_write+0x116>
 801a78c:	4681      	mov	r9, r0
 801a78e:	e763      	b.n	801a658 <tcp_write+0x1f8>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801a790:	4b17      	ldr	r3, [pc, #92]	; (801a7f0 <tcp_write+0x390>)
 801a792:	f240 2271 	movw	r2, #625	; 0x271
 801a796:	491c      	ldr	r1, [pc, #112]	; (801a808 <tcp_write+0x3a8>)
 801a798:	4817      	ldr	r0, [pc, #92]	; (801a7f8 <tcp_write+0x398>)
 801a79a:	f006 fa0d 	bl	8020bb8 <iprintf>
 801a79e:	e723      	b.n	801a5e8 <tcp_write+0x188>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801a7a0:	4b13      	ldr	r3, [pc, #76]	; (801a7f0 <tcp_write+0x390>)
 801a7a2:	f240 22ab 	movw	r2, #683	; 0x2ab
 801a7a6:	4919      	ldr	r1, [pc, #100]	; (801a80c <tcp_write+0x3ac>)
 801a7a8:	4813      	ldr	r0, [pc, #76]	; (801a7f8 <tcp_write+0x398>)
 801a7aa:	f006 fa05 	bl	8020bb8 <iprintf>
 801a7ae:	e751      	b.n	801a654 <tcp_write+0x1f4>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801a7b0:	4b0f      	ldr	r3, [pc, #60]	; (801a7f0 <tcp_write+0x390>)
 801a7b2:	f240 2267 	movw	r2, #615	; 0x267
 801a7b6:	4916      	ldr	r1, [pc, #88]	; (801a810 <tcp_write+0x3b0>)
 801a7b8:	480f      	ldr	r0, [pc, #60]	; (801a7f8 <tcp_write+0x398>)
 801a7ba:	f006 f9fd 	bl	8020bb8 <iprintf>
 801a7be:	e772      	b.n	801a6a6 <tcp_write+0x246>
  u16_t extendlen = 0;
 801a7c0:	2300      	movs	r3, #0
 801a7c2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a7c4:	930d      	str	r3, [sp, #52]	; 0x34
  struct pbuf *concat_p = NULL;
 801a7c6:	930c      	str	r3, [sp, #48]	; 0x30
  while (pos < len) {
 801a7c8:	45a2      	cmp	sl, r4
 801a7ca:	f63f aefe 	bhi.w	801a5ca <tcp_write+0x16a>
  if (oversize_used > 0) {
 801a7ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a7d0:	2b00      	cmp	r3, #0
 801a7d2:	f000 808c 	beq.w	801a8ee <tcp_write+0x48e>
    for (p = last_unsent->p; p; p = p->next) {
 801a7d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a7d8:	685c      	ldr	r4, [r3, #4]
 801a7da:	b344      	cbz	r4, 801a82e <tcp_write+0x3ce>
 801a7dc:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 801a7e0:	9d05      	ldr	r5, [sp, #20]
      p->tot_len += oversize_used;
 801a7e2:	8923      	ldrh	r3, [r4, #8]
      if (p->next == NULL) {
 801a7e4:	6822      	ldr	r2, [r4, #0]
      p->tot_len += oversize_used;
 801a7e6:	445b      	add	r3, fp
 801a7e8:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 801a7ea:	b19a      	cbz	r2, 801a814 <tcp_write+0x3b4>
  struct pbuf *concat_p = NULL;
 801a7ec:	4614      	mov	r4, r2
 801a7ee:	e7f8      	b.n	801a7e2 <tcp_write+0x382>
 801a7f0:	0803e9bc 	.word	0x0803e9bc
 801a7f4:	0803ec4c 	.word	0x0803ec4c
 801a7f8:	08026bb8 	.word	0x08026bb8
 801a7fc:	2003e1cc 	.word	0x2003e1cc
 801a800:	0803ecb8 	.word	0x0803ecb8
 801a804:	0803ed04 	.word	0x0803ed04
 801a808:	0803ed74 	.word	0x0803ed74
 801a80c:	0803ed84 	.word	0x0803ed84
 801a810:	0803ed34 	.word	0x0803ed34
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801a814:	6863      	ldr	r3, [r4, #4]
 801a816:	465a      	mov	r2, fp
 801a818:	8960      	ldrh	r0, [r4, #10]
 801a81a:	4629      	mov	r1, r5
 801a81c:	4418      	add	r0, r3
 801a81e:	f005 fa26 	bl	801fc6e <memcpy>
        p->len += oversize_used;
 801a822:	8963      	ldrh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801a824:	6822      	ldr	r2, [r4, #0]
        p->len += oversize_used;
 801a826:	445b      	add	r3, fp
 801a828:	8163      	strh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801a82a:	2a00      	cmp	r2, #0
 801a82c:	d1de      	bne.n	801a7ec <tcp_write+0x38c>
    last_unsent->len += oversize_used;
 801a82e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a830:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801a832:	890b      	ldrh	r3, [r1, #8]
  pcb->unsent_oversize = oversize;
 801a834:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
    last_unsent->len += oversize_used;
 801a838:	4418      	add	r0, r3
  if (concat_p != NULL) {
 801a83a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    last_unsent->len += oversize_used;
 801a83c:	8108      	strh	r0, [r1, #8]
  pcb->unsent_oversize = oversize;
 801a83e:	f8a7 2068 	strh.w	r2, [r7, #104]	; 0x68
  if (concat_p != NULL) {
 801a842:	2b00      	cmp	r3, #0
 801a844:	f000 808f 	beq.w	801a966 <tcp_write+0x506>
    pbuf_cat(last_unsent->p, concat_p);
 801a848:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801a84a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a84c:	6860      	ldr	r0, [r4, #4]
 801a84e:	4629      	mov	r1, r5
 801a850:	f7fc f9e2 	bl	8016c18 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801a854:	892a      	ldrh	r2, [r5, #8]
 801a856:	8923      	ldrh	r3, [r4, #8]
 801a858:	4413      	add	r3, r2
 801a85a:	8123      	strh	r3, [r4, #8]
    last_unsent->next = queue;
 801a85c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a85e:	f8c3 9000 	str.w	r9, [r3]
  pcb->snd_lbb += len;
 801a862:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
  pcb->snd_buf -= len;
 801a864:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
  pcb->snd_lbb += len;
 801a868:	4452      	add	r2, sl
  pcb->snd_queuelen = queuelen;
 801a86a:	f8a7 6066 	strh.w	r6, [r7, #102]	; 0x66
  pcb->snd_buf -= len;
 801a86e:	eba3 0a0a 	sub.w	sl, r3, sl
  pcb->snd_lbb += len;
 801a872:	65fa      	str	r2, [r7, #92]	; 0x5c
  pcb->snd_buf -= len;
 801a874:	f8a7 a064 	strh.w	sl, [r7, #100]	; 0x64
  if (pcb->snd_queuelen != 0) {
 801a878:	b116      	cbz	r6, 801a880 <tcp_write+0x420>
    LWIP_ASSERT("tcp_write: valid queue length",
 801a87a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a87c:	2b00      	cmp	r3, #0
 801a87e:	d067      	beq.n	801a950 <tcp_write+0x4f0>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801a880:	f1b8 0f00 	cmp.w	r8, #0
 801a884:	d008      	beq.n	801a898 <tcp_write+0x438>
 801a886:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801a88a:	2800      	cmp	r0, #0
 801a88c:	f43f af3c 	beq.w	801a708 <tcp_write+0x2a8>
 801a890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a892:	f013 0402 	ands.w	r4, r3, #2
 801a896:	d051      	beq.n	801a93c <tcp_write+0x4dc>
  return ERR_OK;
 801a898:	2000      	movs	r0, #0
 801a89a:	e735      	b.n	801a708 <tcp_write+0x2a8>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801a89c:	4b7d      	ldr	r3, [pc, #500]	; (801aa94 <tcp_write+0x634>)
 801a89e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801a8a2:	497d      	ldr	r1, [pc, #500]	; (801aa98 <tcp_write+0x638>)
 801a8a4:	487d      	ldr	r0, [pc, #500]	; (801aa9c <tcp_write+0x63c>)
 801a8a6:	f006 f987 	bl	8020bb8 <iprintf>
 801a8aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a8ac:	891b      	ldrh	r3, [r3, #8]
 801a8ae:	e622      	b.n	801a4f6 <tcp_write+0x96>
  struct pbuf *concat_p = NULL;
 801a8b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a8b2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a8b4:	930c      	str	r3, [sp, #48]	; 0x30
 801a8b6:	e787      	b.n	801a7c8 <tcp_write+0x368>
        pbuf_free(p2);
 801a8b8:	4618      	mov	r0, r3
 801a8ba:	f7fc f825 	bl	8016908 <pbuf_free>
        goto memerr;
 801a8be:	e703      	b.n	801a6c8 <tcp_write+0x268>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801a8c0:	4b74      	ldr	r3, [pc, #464]	; (801aa94 <tcp_write+0x634>)
 801a8c2:	f44f 724a 	mov.w	r2, #808	; 0x328
 801a8c6:	4976      	ldr	r1, [pc, #472]	; (801aaa0 <tcp_write+0x640>)
 801a8c8:	4874      	ldr	r0, [pc, #464]	; (801aa9c <tcp_write+0x63c>)
 801a8ca:	f006 f975 	bl	8020bb8 <iprintf>
  return ERR_MEM;
 801a8ce:	f04f 30ff 	mov.w	r0, #4294967295
 801a8d2:	e719      	b.n	801a708 <tcp_write+0x2a8>
 801a8d4:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 801a8d8:	e61b      	b.n	801a512 <tcp_write+0xb2>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801a8da:	4b6e      	ldr	r3, [pc, #440]	; (801aa94 <tcp_write+0x634>)
 801a8dc:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801a8e0:	4970      	ldr	r1, [pc, #448]	; (801aaa4 <tcp_write+0x644>)
 801a8e2:	486e      	ldr	r0, [pc, #440]	; (801aa9c <tcp_write+0x63c>)
 801a8e4:	f006 f968 	bl	8020bb8 <iprintf>
 801a8e8:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801a8ec:	e713      	b.n	801a716 <tcp_write+0x2b6>
  pcb->unsent_oversize = oversize;
 801a8ee:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801a8f2:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
  if (concat_p != NULL) {
 801a8f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a8f8:	2b00      	cmp	r3, #0
 801a8fa:	d034      	beq.n	801a966 <tcp_write+0x506>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801a8fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a8fe:	2b00      	cmp	r3, #0
 801a900:	d1a2      	bne.n	801a848 <tcp_write+0x3e8>
 801a902:	4b64      	ldr	r3, [pc, #400]	; (801aa94 <tcp_write+0x634>)
 801a904:	f240 22e1 	movw	r2, #737	; 0x2e1
 801a908:	4967      	ldr	r1, [pc, #412]	; (801aaa8 <tcp_write+0x648>)
 801a90a:	4864      	ldr	r0, [pc, #400]	; (801aa9c <tcp_write+0x63c>)
 801a90c:	f006 f954 	bl	8020bb8 <iprintf>
 801a910:	e79a      	b.n	801a848 <tcp_write+0x3e8>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801a912:	f8b7 4068 	ldrh.w	r4, [r7, #104]	; 0x68
 801a916:	2c00      	cmp	r4, #0
 801a918:	f47f af1c 	bne.w	801a754 <tcp_write+0x2f4>
 801a91c:	940d      	str	r4, [sp, #52]	; 0x34
  queuelen = pcb->snd_queuelen;
 801a91e:	4626      	mov	r6, r4
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801a920:	940b      	str	r4, [sp, #44]	; 0x2c
 801a922:	940c      	str	r4, [sp, #48]	; 0x30
 801a924:	e651      	b.n	801a5ca <tcp_write+0x16a>
  TCP_STATS_INC(tcp.memerr);
 801a926:	4961      	ldr	r1, [pc, #388]	; (801aaac <tcp_write+0x64c>)
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a928:	8b7a      	ldrh	r2, [r7, #26]
  TCP_STATS_INC(tcp.memerr);
 801a92a:	f8b1 309c 	ldrh.w	r3, [r1, #156]	; 0x9c
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a92e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  TCP_STATS_INC(tcp.memerr);
 801a932:	3301      	adds	r3, #1
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a934:	837a      	strh	r2, [r7, #26]
  TCP_STATS_INC(tcp.memerr);
 801a936:	f8a1 309c 	strh.w	r3, [r1, #156]	; 0x9c
 801a93a:	e6da      	b.n	801a6f2 <tcp_write+0x292>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801a93c:	8985      	ldrh	r5, [r0, #12]
 801a93e:	2008      	movs	r0, #8
 801a940:	f7fa f974 	bl	8014c2c <lwip_htons>
 801a944:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801a948:	4305      	orrs	r5, r0
  return ERR_OK;
 801a94a:	4620      	mov	r0, r4
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801a94c:	819d      	strh	r5, [r3, #12]
 801a94e:	e6db      	b.n	801a708 <tcp_write+0x2a8>
    LWIP_ASSERT("tcp_write: valid queue length",
 801a950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a952:	2b00      	cmp	r3, #0
 801a954:	d194      	bne.n	801a880 <tcp_write+0x420>
 801a956:	4b4f      	ldr	r3, [pc, #316]	; (801aa94 <tcp_write+0x634>)
 801a958:	f240 3213 	movw	r2, #787	; 0x313
 801a95c:	4950      	ldr	r1, [pc, #320]	; (801aaa0 <tcp_write+0x640>)
 801a95e:	484f      	ldr	r0, [pc, #316]	; (801aa9c <tcp_write+0x63c>)
 801a960:	f006 f92a 	bl	8020bb8 <iprintf>
 801a964:	e78c      	b.n	801a880 <tcp_write+0x420>
  } else if (extendlen > 0) {
 801a966:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a968:	2b00      	cmp	r3, #0
 801a96a:	d047      	beq.n	801a9fc <tcp_write+0x59c>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801a96c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a96e:	2b00      	cmp	r3, #0
 801a970:	d069      	beq.n	801aa46 <tcp_write+0x5e6>
 801a972:	6859      	ldr	r1, [r3, #4]
 801a974:	2900      	cmp	r1, #0
 801a976:	d066      	beq.n	801aa46 <tcp_write+0x5e6>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801a978:	680a      	ldr	r2, [r1, #0]
 801a97a:	2a00      	cmp	r2, #0
 801a97c:	f000 8088 	beq.w	801aa90 <tcp_write+0x630>
 801a980:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a982:	e000      	b.n	801a986 <tcp_write+0x526>
 801a984:	4602      	mov	r2, r0
      p->tot_len += extendlen;
 801a986:	890b      	ldrh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801a988:	6810      	ldr	r0, [r2, #0]
      p->tot_len += extendlen;
 801a98a:	4423      	add	r3, r4
 801a98c:	810b      	strh	r3, [r1, #8]
 801a98e:	4611      	mov	r1, r2
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801a990:	2800      	cmp	r0, #0
 801a992:	d1f7      	bne.n	801a984 <tcp_write+0x524>
    p->tot_len += extendlen;
 801a994:	8910      	ldrh	r0, [r2, #8]
    p->len += extendlen;
 801a996:	8951      	ldrh	r1, [r2, #10]
    p->tot_len += extendlen;
 801a998:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    last_unsent->len += extendlen;
 801a99a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    p->tot_len += extendlen;
 801a99c:	4420      	add	r0, r4
    p->len += extendlen;
 801a99e:	4421      	add	r1, r4
    last_unsent->len += extendlen;
 801a9a0:	891b      	ldrh	r3, [r3, #8]
    p->tot_len += extendlen;
 801a9a2:	8110      	strh	r0, [r2, #8]
    last_unsent->len += extendlen;
 801a9a4:	4423      	add	r3, r4
    p->len += extendlen;
 801a9a6:	8151      	strh	r1, [r2, #10]
    last_unsent->len += extendlen;
 801a9a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a9aa:	8113      	strh	r3, [r2, #8]
 801a9ac:	e756      	b.n	801a85c <tcp_write+0x3fc>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801a9ae:	4b39      	ldr	r3, [pc, #228]	; (801aa94 <tcp_write+0x634>)
 801a9b0:	f44f 72ab 	mov.w	r2, #342	; 0x156
 801a9b4:	493e      	ldr	r1, [pc, #248]	; (801aab0 <tcp_write+0x650>)
 801a9b6:	e5ef      	b.n	801a598 <tcp_write+0x138>
    return ERR_CONN;
 801a9b8:	f06f 000a 	mvn.w	r0, #10
 801a9bc:	e6a4      	b.n	801a708 <tcp_write+0x2a8>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801a9be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a9c0:	2301      	movs	r3, #1
 801a9c2:	4641      	mov	r1, r8
 801a9c4:	2000      	movs	r0, #0
 801a9c6:	9302      	str	r3, [sp, #8]
 801a9c8:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 801a9cc:	e9cd 7200 	strd	r7, r2, [sp]
 801a9d0:	4622      	mov	r2, r4
 801a9d2:	f7ff fb7f 	bl	801a0d4 <tcp_pbuf_prealloc>
 801a9d6:	4604      	mov	r4, r0
 801a9d8:	900c      	str	r0, [sp, #48]	; 0x30
 801a9da:	2800      	cmp	r0, #0
 801a9dc:	d0a3      	beq.n	801a926 <tcp_write+0x4c6>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801a9de:	9b05      	ldr	r3, [sp, #20]
 801a9e0:	4642      	mov	r2, r8
 801a9e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a9e4:	6840      	ldr	r0, [r0, #4]
 801a9e6:	1859      	adds	r1, r3, r1
  u16_t extendlen = 0;
 801a9e8:	2300      	movs	r3, #0
 801a9ea:	930d      	str	r3, [sp, #52]	; 0x34
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801a9ec:	f005 f93f 	bl	801fc6e <memcpy>
        queuelen += pbuf_clen(concat_p);
 801a9f0:	4620      	mov	r0, r4
 801a9f2:	f7fc f8f1 	bl	8016bd8 <pbuf_clen>
 801a9f6:	4406      	add	r6, r0
 801a9f8:	b2b6      	uxth	r6, r6
 801a9fa:	e5bc      	b.n	801a576 <tcp_write+0x116>
  if (last_unsent == NULL) {
 801a9fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a9fe:	2b00      	cmp	r3, #0
 801aa00:	f47f af2c 	bne.w	801a85c <tcp_write+0x3fc>
    pcb->unsent = queue;
 801aa04:	f8c7 906c 	str.w	r9, [r7, #108]	; 0x6c
 801aa08:	e72b      	b.n	801a862 <tcp_write+0x402>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801aa0a:	8b7b      	ldrh	r3, [r7, #26]
    return ERR_MEM;
 801aa0c:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801aa10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801aa14:	837b      	strh	r3, [r7, #26]
 801aa16:	e677      	b.n	801a708 <tcp_write+0x2a8>
    TCP_STATS_INC(tcp.memerr);
 801aa18:	4924      	ldr	r1, [pc, #144]	; (801aaac <tcp_write+0x64c>)
    return ERR_MEM;
 801aa1a:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801aa1e:	8b7b      	ldrh	r3, [r7, #26]
    TCP_STATS_INC(tcp.memerr);
 801aa20:	f8b1 209c 	ldrh.w	r2, [r1, #156]	; 0x9c
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801aa24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    TCP_STATS_INC(tcp.memerr);
 801aa28:	3201      	adds	r2, #1
 801aa2a:	f8a1 209c 	strh.w	r2, [r1, #156]	; 0x9c
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801aa2e:	837b      	strh	r3, [r7, #26]
 801aa30:	e66a      	b.n	801a708 <tcp_write+0x2a8>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801aa32:	4b18      	ldr	r3, [pc, #96]	; (801aa94 <tcp_write+0x634>)
 801aa34:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 801aa38:	491e      	ldr	r1, [pc, #120]	; (801aab4 <tcp_write+0x654>)
 801aa3a:	4818      	ldr	r0, [pc, #96]	; (801aa9c <tcp_write+0x63c>)
 801aa3c:	f006 f8bc 	bl	8020bb8 <iprintf>
 801aa40:	f06f 000f 	mvn.w	r0, #15
 801aa44:	e660      	b.n	801a708 <tcp_write+0x2a8>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801aa46:	4b13      	ldr	r3, [pc, #76]	; (801aa94 <tcp_write+0x634>)
 801aa48:	f240 22e7 	movw	r2, #743	; 0x2e7
 801aa4c:	491a      	ldr	r1, [pc, #104]	; (801aab8 <tcp_write+0x658>)
 801aa4e:	4813      	ldr	r0, [pc, #76]	; (801aa9c <tcp_write+0x63c>)
 801aa50:	f006 f8b2 	bl	8020bb8 <iprintf>
 801aa54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aa56:	6859      	ldr	r1, [r3, #4]
 801aa58:	e78e      	b.n	801a978 <tcp_write+0x518>
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801aa5a:	4b0e      	ldr	r3, [pc, #56]	; (801aa94 <tcp_write+0x634>)
 801aa5c:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801aa60:	4916      	ldr	r1, [pc, #88]	; (801aabc <tcp_write+0x65c>)
 801aa62:	480e      	ldr	r0, [pc, #56]	; (801aa9c <tcp_write+0x63c>)
 801aa64:	f006 f8a8 	bl	8020bb8 <iprintf>
 801aa68:	f06f 000f 	mvn.w	r0, #15
 801aa6c:	e64c      	b.n	801a708 <tcp_write+0x2a8>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801aa6e:	4b09      	ldr	r3, [pc, #36]	; (801aa94 <tcp_write+0x634>)
 801aa70:	f240 2231 	movw	r2, #561	; 0x231
 801aa74:	4912      	ldr	r1, [pc, #72]	; (801aac0 <tcp_write+0x660>)
 801aa76:	4809      	ldr	r0, [pc, #36]	; (801aa9c <tcp_write+0x63c>)
          extendlen = seglen;
 801aa78:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801aa7c:	f006 f89c 	bl	8020bb8 <iprintf>
 801aa80:	e579      	b.n	801a576 <tcp_write+0x116>
  pcb->unsent_oversize = oversize;
 801aa82:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801aa86:	46d0      	mov	r8, sl
 801aa88:	46d1      	mov	r9, sl
 801aa8a:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 801aa8e:	e7b9      	b.n	801aa04 <tcp_write+0x5a4>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801aa90:	460a      	mov	r2, r1
 801aa92:	e77f      	b.n	801a994 <tcp_write+0x534>
 801aa94:	0803e9bc 	.word	0x0803e9bc
 801aa98:	0803ec80 	.word	0x0803ec80
 801aa9c:	08026bb8 	.word	0x08026bb8
 801aaa0:	0803ee08 	.word	0x0803ee08
 801aaa4:	0803ec98 	.word	0x0803ec98
 801aaa8:	0803ed98 	.word	0x0803ed98
 801aaac:	2003e1cc 	.word	0x2003e1cc
 801aab0:	0803ec10 	.word	0x0803ec10
 801aab4:	0803ebdc 	.word	0x0803ebdc
 801aab8:	0803edd0 	.word	0x0803edd0
 801aabc:	0803ebc4 	.word	0x0803ebc4
 801aac0:	0803ecd8 	.word	0x0803ecd8

0801aac4 <tcp_split_unsent_seg>:
{
 801aac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aac8:	460e      	mov	r6, r1
 801aaca:	b083      	sub	sp, #12
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801aacc:	4607      	mov	r7, r0
 801aace:	2800      	cmp	r0, #0
 801aad0:	d05d      	beq.n	801ab8e <tcp_split_unsent_seg+0xca>
  useg = pcb->unsent;
 801aad2:	6efd      	ldr	r5, [r7, #108]	; 0x6c
  if (useg == NULL) {
 801aad4:	b39d      	cbz	r5, 801ab3e <tcp_split_unsent_seg+0x7a>
  if (split == 0) {
 801aad6:	2e00      	cmp	r6, #0
 801aad8:	f000 80b9 	beq.w	801ac4e <tcp_split_unsent_seg+0x18a>
  if (useg->len <= split) {
 801aadc:	892c      	ldrh	r4, [r5, #8]
 801aade:	42b4      	cmp	r4, r6
 801aae0:	d93d      	bls.n	801ab5e <tcp_split_unsent_seg+0x9a>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801aae2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801aae4:	42b3      	cmp	r3, r6
 801aae6:	d347      	bcc.n	801ab78 <tcp_split_unsent_seg+0xb4>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801aae8:	2c00      	cmp	r4, #0
 801aaea:	d03c      	beq.n	801ab66 <tcp_split_unsent_seg+0xa2>
  optflags = useg->flags;
 801aaec:	f895 900a 	ldrb.w	r9, [r5, #10]
  remainder = useg->len - split;
 801aaf0:	1ba4      	subs	r4, r4, r6
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801aaf2:	f44f 7220 	mov.w	r2, #640	; 0x280
 801aaf6:	2036      	movs	r0, #54	; 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801aaf8:	ea4f 0889 	mov.w	r8, r9, lsl #2
  remainder = useg->len - split;
 801aafc:	b2a4      	uxth	r4, r4
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801aafe:	f008 0804 	and.w	r8, r8, #4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801ab02:	eb04 0108 	add.w	r1, r4, r8
 801ab06:	b289      	uxth	r1, r1
 801ab08:	f7fb ff6c 	bl	80169e4 <pbuf_alloc>
  if (p == NULL) {
 801ab0c:	4682      	mov	sl, r0
 801ab0e:	b1d8      	cbz	r0, 801ab48 <tcp_split_unsent_seg+0x84>
  offset = useg->p->tot_len - useg->len + split;
 801ab10:	6868      	ldr	r0, [r5, #4]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801ab12:	4622      	mov	r2, r4
  offset = useg->p->tot_len - useg->len + split;
 801ab14:	8929      	ldrh	r1, [r5, #8]
 801ab16:	8903      	ldrh	r3, [r0, #8]
 801ab18:	1a5b      	subs	r3, r3, r1
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801ab1a:	f8da 1004 	ldr.w	r1, [sl, #4]
  offset = useg->p->tot_len - useg->len + split;
 801ab1e:	4433      	add	r3, r6
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801ab20:	4441      	add	r1, r8
 801ab22:	b29b      	uxth	r3, r3
 801ab24:	f7fc f980 	bl	8016e28 <pbuf_copy_partial>
 801ab28:	42a0      	cmp	r0, r4
 801ab2a:	d038      	beq.n	801ab9e <tcp_split_unsent_seg+0xda>
  TCP_STATS_INC(tcp.memerr);
 801ab2c:	4a4d      	ldr	r2, [pc, #308]	; (801ac64 <tcp_split_unsent_seg+0x1a0>)
    pbuf_free(p);
 801ab2e:	4650      	mov	r0, sl
  TCP_STATS_INC(tcp.memerr);
 801ab30:	f8b2 309c 	ldrh.w	r3, [r2, #156]	; 0x9c
 801ab34:	3301      	adds	r3, #1
 801ab36:	f8a2 309c 	strh.w	r3, [r2, #156]	; 0x9c
    pbuf_free(p);
 801ab3a:	f7fb fee5 	bl	8016908 <pbuf_free>
  return ERR_MEM;
 801ab3e:	f04f 30ff 	mov.w	r0, #4294967295
}
 801ab42:	b003      	add	sp, #12
 801ab44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TCP_STATS_INC(tcp.memerr);
 801ab48:	4a46      	ldr	r2, [pc, #280]	; (801ac64 <tcp_split_unsent_seg+0x1a0>)
  return ERR_MEM;
 801ab4a:	f04f 30ff 	mov.w	r0, #4294967295
  TCP_STATS_INC(tcp.memerr);
 801ab4e:	f8b2 309c 	ldrh.w	r3, [r2, #156]	; 0x9c
 801ab52:	3301      	adds	r3, #1
 801ab54:	f8a2 309c 	strh.w	r3, [r2, #156]	; 0x9c
}
 801ab58:	b003      	add	sp, #12
 801ab5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return ERR_OK;
 801ab5e:	2000      	movs	r0, #0
}
 801ab60:	b003      	add	sp, #12
 801ab62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801ab66:	4b40      	ldr	r3, [pc, #256]	; (801ac68 <tcp_split_unsent_seg+0x1a4>)
 801ab68:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801ab6c:	493f      	ldr	r1, [pc, #252]	; (801ac6c <tcp_split_unsent_seg+0x1a8>)
 801ab6e:	4840      	ldr	r0, [pc, #256]	; (801ac70 <tcp_split_unsent_seg+0x1ac>)
 801ab70:	f006 f822 	bl	8020bb8 <iprintf>
 801ab74:	892c      	ldrh	r4, [r5, #8]
 801ab76:	e7b9      	b.n	801aaec <tcp_split_unsent_seg+0x28>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801ab78:	4b3b      	ldr	r3, [pc, #236]	; (801ac68 <tcp_split_unsent_seg+0x1a4>)
 801ab7a:	f240 325b 	movw	r2, #859	; 0x35b
 801ab7e:	493d      	ldr	r1, [pc, #244]	; (801ac74 <tcp_split_unsent_seg+0x1b0>)
 801ab80:	483b      	ldr	r0, [pc, #236]	; (801ac70 <tcp_split_unsent_seg+0x1ac>)
 801ab82:	f006 f819 	bl	8020bb8 <iprintf>
 801ab86:	892c      	ldrh	r4, [r5, #8]
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801ab88:	2c00      	cmp	r4, #0
 801ab8a:	d1af      	bne.n	801aaec <tcp_split_unsent_seg+0x28>
 801ab8c:	e7eb      	b.n	801ab66 <tcp_split_unsent_seg+0xa2>
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801ab8e:	4b36      	ldr	r3, [pc, #216]	; (801ac68 <tcp_split_unsent_seg+0x1a4>)
 801ab90:	f240 324b 	movw	r2, #843	; 0x34b
 801ab94:	4938      	ldr	r1, [pc, #224]	; (801ac78 <tcp_split_unsent_seg+0x1b4>)
 801ab96:	4836      	ldr	r0, [pc, #216]	; (801ac70 <tcp_split_unsent_seg+0x1ac>)
 801ab98:	f006 f80e 	bl	8020bb8 <iprintf>
 801ab9c:	e799      	b.n	801aad2 <tcp_split_unsent_seg+0xe>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801ab9e:	68eb      	ldr	r3, [r5, #12]
 801aba0:	8998      	ldrh	r0, [r3, #12]
 801aba2:	f7fa f843 	bl	8014c2c <lwip_htons>
 801aba6:	b2c0      	uxtb	r0, r0
  if (split_flags & TCP_PSH) {
 801aba8:	f010 0b08 	ands.w	fp, r0, #8
 801abac:	d14a      	bne.n	801ac44 <tcp_split_unsent_seg+0x180>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801abae:	f000 083f 	and.w	r8, r0, #63	; 0x3f
  if (split_flags & TCP_FIN) {
 801abb2:	f018 0f01 	tst.w	r8, #1
 801abb6:	d003      	beq.n	801abc0 <tcp_split_unsent_seg+0xfc>
    split_flags &= ~TCP_FIN;
 801abb8:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
    remainder_flags |= TCP_FIN;
 801abbc:	f04b 0b01 	orr.w	fp, fp, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801abc0:	68eb      	ldr	r3, [r5, #12]
 801abc2:	6858      	ldr	r0, [r3, #4]
 801abc4:	f7fa f836 	bl	8014c34 <lwip_htonl>
 801abc8:	f8cd 9000 	str.w	r9, [sp]
 801abcc:	1833      	adds	r3, r6, r0
 801abce:	465a      	mov	r2, fp
 801abd0:	4651      	mov	r1, sl
 801abd2:	4638      	mov	r0, r7
 801abd4:	f7ff fad0 	bl	801a178 <tcp_create_segment>
  if (seg == NULL) {
 801abd8:	4606      	mov	r6, r0
 801abda:	2800      	cmp	r0, #0
 801abdc:	d0a6      	beq.n	801ab2c <tcp_split_unsent_seg+0x68>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801abde:	6868      	ldr	r0, [r5, #4]
 801abe0:	f7fb fffa 	bl	8016bd8 <pbuf_clen>
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801abe4:	686a      	ldr	r2, [r5, #4]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801abe6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801abea:	8911      	ldrh	r1, [r2, #8]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801abec:	1a1b      	subs	r3, r3, r0
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801abee:	4610      	mov	r0, r2
 801abf0:	1b09      	subs	r1, r1, r4
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801abf2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801abf6:	b289      	uxth	r1, r1
 801abf8:	f7fb ff92 	bl	8016b20 <pbuf_realloc>
  useg->len -= remainder;
 801abfc:	892a      	ldrh	r2, [r5, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801abfe:	68eb      	ldr	r3, [r5, #12]
 801ac00:	4640      	mov	r0, r8
  useg->len -= remainder;
 801ac02:	1b14      	subs	r4, r2, r4
 801ac04:	812c      	strh	r4, [r5, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801ac06:	899c      	ldrh	r4, [r3, #12]
 801ac08:	f7fa f810 	bl	8014c2c <lwip_htons>
 801ac0c:	68eb      	ldr	r3, [r5, #12]
 801ac0e:	4304      	orrs	r4, r0
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801ac10:	6868      	ldr	r0, [r5, #4]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801ac12:	819c      	strh	r4, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801ac14:	f7fb ffe0 	bl	8016bd8 <pbuf_clen>
 801ac18:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801ac1c:	4403      	add	r3, r0
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801ac1e:	6870      	ldr	r0, [r6, #4]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801ac20:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801ac24:	f7fb ffd8 	bl	8016bd8 <pbuf_clen>
 801ac28:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
  seg->next = useg->next;
 801ac2c:	682a      	ldr	r2, [r5, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801ac2e:	4418      	add	r0, r3
 801ac30:	f8a7 0066 	strh.w	r0, [r7, #102]	; 0x66
  seg->next = useg->next;
 801ac34:	6032      	str	r2, [r6, #0]
  useg->next = seg;
 801ac36:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 801ac38:	6830      	ldr	r0, [r6, #0]
 801ac3a:	2800      	cmp	r0, #0
 801ac3c:	d18f      	bne.n	801ab5e <tcp_split_unsent_seg+0x9a>
    pcb->unsent_oversize = 0;
 801ac3e:	f8a7 0068 	strh.w	r0, [r7, #104]	; 0x68
 801ac42:	e77e      	b.n	801ab42 <tcp_split_unsent_seg+0x7e>
    split_flags &= ~TCP_PSH;
 801ac44:	f000 0837 	and.w	r8, r0, #55	; 0x37
    remainder_flags |= TCP_PSH;
 801ac48:	f04f 0b08 	mov.w	fp, #8
 801ac4c:	e7b1      	b.n	801abb2 <tcp_split_unsent_seg+0xee>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801ac4e:	4b06      	ldr	r3, [pc, #24]	; (801ac68 <tcp_split_unsent_seg+0x1a4>)
 801ac50:	f240 3253 	movw	r2, #851	; 0x353
 801ac54:	4909      	ldr	r1, [pc, #36]	; (801ac7c <tcp_split_unsent_seg+0x1b8>)
 801ac56:	4806      	ldr	r0, [pc, #24]	; (801ac70 <tcp_split_unsent_seg+0x1ac>)
 801ac58:	f005 ffae 	bl	8020bb8 <iprintf>
    return ERR_VAL;
 801ac5c:	f06f 0005 	mvn.w	r0, #5
 801ac60:	e76f      	b.n	801ab42 <tcp_split_unsent_seg+0x7e>
 801ac62:	bf00      	nop
 801ac64:	2003e1cc 	.word	0x2003e1cc
 801ac68:	0803e9bc 	.word	0x0803e9bc
 801ac6c:	0803ebb4 	.word	0x0803ebb4
 801ac70:	08026bb8 	.word	0x08026bb8
 801ac74:	0803eba4 	.word	0x0803eba4
 801ac78:	0803eb5c 	.word	0x0803eb5c
 801ac7c:	0803eb80 	.word	0x0803eb80

0801ac80 <tcp_enqueue_flags>:
{
 801ac80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801ac84:	f011 0803 	ands.w	r8, r1, #3
{
 801ac88:	b083      	sub	sp, #12
 801ac8a:	460d      	mov	r5, r1
 801ac8c:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801ac8e:	d04a      	beq.n	801ad26 <tcp_enqueue_flags+0xa6>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801ac90:	2c00      	cmp	r4, #0
 801ac92:	d051      	beq.n	801ad38 <tcp_enqueue_flags+0xb8>
  if (flags & TCP_SYN) {
 801ac94:	f3c5 0740 	ubfx	r7, r5, #1, #1
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801ac98:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ac9c:	2036      	movs	r0, #54	; 0x36
 801ac9e:	ea4f 0987 	mov.w	r9, r7, lsl #2
 801aca2:	4649      	mov	r1, r9
 801aca4:	f7fb fe9e 	bl	80169e4 <pbuf_alloc>
 801aca8:	4606      	mov	r6, r0
 801acaa:	2800      	cmp	r0, #0
 801acac:	d074      	beq.n	801ad98 <tcp_enqueue_flags+0x118>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801acae:	8943      	ldrh	r3, [r0, #10]
 801acb0:	454b      	cmp	r3, r9
 801acb2:	d349      	bcc.n	801ad48 <tcp_enqueue_flags+0xc8>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801acb4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801acb6:	4631      	mov	r1, r6
 801acb8:	9700      	str	r7, [sp, #0]
 801acba:	462a      	mov	r2, r5
 801acbc:	4620      	mov	r0, r4
 801acbe:	f7ff fa5b 	bl	801a178 <tcp_create_segment>
 801acc2:	4606      	mov	r6, r0
 801acc4:	2800      	cmp	r0, #0
 801acc6:	d067      	beq.n	801ad98 <tcp_enqueue_flags+0x118>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801acc8:	68c3      	ldr	r3, [r0, #12]
 801acca:	079a      	lsls	r2, r3, #30
 801accc:	d150      	bne.n	801ad70 <tcp_enqueue_flags+0xf0>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801acce:	8933      	ldrh	r3, [r6, #8]
 801acd0:	2b00      	cmp	r3, #0
 801acd2:	d141      	bne.n	801ad58 <tcp_enqueue_flags+0xd8>
  if (pcb->unsent == NULL) {
 801acd4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 801acd6:	b90a      	cbnz	r2, 801acdc <tcp_enqueue_flags+0x5c>
 801acd8:	e048      	b.n	801ad6c <tcp_enqueue_flags+0xec>
 801acda:	461a      	mov	r2, r3
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801acdc:	6813      	ldr	r3, [r2, #0]
 801acde:	2b00      	cmp	r3, #0
 801ace0:	d1fb      	bne.n	801acda <tcp_enqueue_flags+0x5a>
    useg->next = seg;
 801ace2:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 801ace4:	2300      	movs	r3, #0
 801ace6:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801acea:	f1b8 0f00 	cmp.w	r8, #0
 801acee:	d002      	beq.n	801acf6 <tcp_enqueue_flags+0x76>
    pcb->snd_lbb++;
 801acf0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801acf2:	3301      	adds	r3, #1
 801acf4:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 801acf6:	07eb      	lsls	r3, r5, #31
 801acf8:	d410      	bmi.n	801ad1c <tcp_enqueue_flags+0x9c>
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801acfa:	6870      	ldr	r0, [r6, #4]
 801acfc:	f7fb ff6c 	bl	8016bd8 <pbuf_clen>
 801ad00:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 801ad04:	4418      	add	r0, r3
 801ad06:	b280      	uxth	r0, r0
 801ad08:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 801ad0c:	b118      	cbz	r0, 801ad16 <tcp_enqueue_flags+0x96>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801ad0e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 801ad10:	2800      	cmp	r0, #0
 801ad12:	d035      	beq.n	801ad80 <tcp_enqueue_flags+0x100>
  return ERR_OK;
 801ad14:	2000      	movs	r0, #0
}
 801ad16:	b003      	add	sp, #12
 801ad18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tcp_set_flags(pcb, TF_FIN);
 801ad1c:	8b63      	ldrh	r3, [r4, #26]
 801ad1e:	f043 0320 	orr.w	r3, r3, #32
 801ad22:	8363      	strh	r3, [r4, #26]
 801ad24:	e7e9      	b.n	801acfa <tcp_enqueue_flags+0x7a>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801ad26:	4b23      	ldr	r3, [pc, #140]	; (801adb4 <tcp_enqueue_flags+0x134>)
 801ad28:	f240 4212 	movw	r2, #1042	; 0x412
 801ad2c:	4922      	ldr	r1, [pc, #136]	; (801adb8 <tcp_enqueue_flags+0x138>)
 801ad2e:	4823      	ldr	r0, [pc, #140]	; (801adbc <tcp_enqueue_flags+0x13c>)
 801ad30:	f005 ff42 	bl	8020bb8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801ad34:	2c00      	cmp	r4, #0
 801ad36:	d1ad      	bne.n	801ac94 <tcp_enqueue_flags+0x14>
 801ad38:	4b1e      	ldr	r3, [pc, #120]	; (801adb4 <tcp_enqueue_flags+0x134>)
 801ad3a:	f240 4213 	movw	r2, #1043	; 0x413
 801ad3e:	4920      	ldr	r1, [pc, #128]	; (801adc0 <tcp_enqueue_flags+0x140>)
 801ad40:	481e      	ldr	r0, [pc, #120]	; (801adbc <tcp_enqueue_flags+0x13c>)
 801ad42:	f005 ff39 	bl	8020bb8 <iprintf>
 801ad46:	e7a5      	b.n	801ac94 <tcp_enqueue_flags+0x14>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801ad48:	4b1a      	ldr	r3, [pc, #104]	; (801adb4 <tcp_enqueue_flags+0x134>)
 801ad4a:	f240 423a 	movw	r2, #1082	; 0x43a
 801ad4e:	491d      	ldr	r1, [pc, #116]	; (801adc4 <tcp_enqueue_flags+0x144>)
 801ad50:	481a      	ldr	r0, [pc, #104]	; (801adbc <tcp_enqueue_flags+0x13c>)
 801ad52:	f005 ff31 	bl	8020bb8 <iprintf>
 801ad56:	e7ad      	b.n	801acb4 <tcp_enqueue_flags+0x34>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801ad58:	f240 4243 	movw	r2, #1091	; 0x443
 801ad5c:	4b15      	ldr	r3, [pc, #84]	; (801adb4 <tcp_enqueue_flags+0x134>)
 801ad5e:	491a      	ldr	r1, [pc, #104]	; (801adc8 <tcp_enqueue_flags+0x148>)
 801ad60:	4816      	ldr	r0, [pc, #88]	; (801adbc <tcp_enqueue_flags+0x13c>)
 801ad62:	f005 ff29 	bl	8020bb8 <iprintf>
  if (pcb->unsent == NULL) {
 801ad66:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 801ad68:	2a00      	cmp	r2, #0
 801ad6a:	d1b7      	bne.n	801acdc <tcp_enqueue_flags+0x5c>
    pcb->unsent = seg;
 801ad6c:	66e6      	str	r6, [r4, #108]	; 0x6c
 801ad6e:	e7b9      	b.n	801ace4 <tcp_enqueue_flags+0x64>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801ad70:	4b10      	ldr	r3, [pc, #64]	; (801adb4 <tcp_enqueue_flags+0x134>)
 801ad72:	f240 4242 	movw	r2, #1090	; 0x442
 801ad76:	4915      	ldr	r1, [pc, #84]	; (801adcc <tcp_enqueue_flags+0x14c>)
 801ad78:	4810      	ldr	r0, [pc, #64]	; (801adbc <tcp_enqueue_flags+0x13c>)
 801ad7a:	f005 ff1d 	bl	8020bb8 <iprintf>
 801ad7e:	e7a6      	b.n	801acce <tcp_enqueue_flags+0x4e>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801ad80:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
 801ad82:	2c00      	cmp	r4, #0
 801ad84:	d1c7      	bne.n	801ad16 <tcp_enqueue_flags+0x96>
 801ad86:	4b0b      	ldr	r3, [pc, #44]	; (801adb4 <tcp_enqueue_flags+0x134>)
 801ad88:	f240 4266 	movw	r2, #1126	; 0x466
 801ad8c:	4910      	ldr	r1, [pc, #64]	; (801add0 <tcp_enqueue_flags+0x150>)
 801ad8e:	480b      	ldr	r0, [pc, #44]	; (801adbc <tcp_enqueue_flags+0x13c>)
 801ad90:	f005 ff12 	bl	8020bb8 <iprintf>
  return ERR_OK;
 801ad94:	4620      	mov	r0, r4
 801ad96:	e7be      	b.n	801ad16 <tcp_enqueue_flags+0x96>
    TCP_STATS_INC(tcp.memerr);
 801ad98:	490e      	ldr	r1, [pc, #56]	; (801add4 <tcp_enqueue_flags+0x154>)
    return ERR_MEM;
 801ad9a:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ad9e:	8b62      	ldrh	r2, [r4, #26]
    TCP_STATS_INC(tcp.memerr);
 801ada0:	f8b1 309c 	ldrh.w	r3, [r1, #156]	; 0x9c
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ada4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    TCP_STATS_INC(tcp.memerr);
 801ada8:	3301      	adds	r3, #1
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801adaa:	8362      	strh	r2, [r4, #26]
    TCP_STATS_INC(tcp.memerr);
 801adac:	f8a1 309c 	strh.w	r3, [r1, #156]	; 0x9c
    return ERR_MEM;
 801adb0:	e7b1      	b.n	801ad16 <tcp_enqueue_flags+0x96>
 801adb2:	bf00      	nop
 801adb4:	0803e9bc 	.word	0x0803e9bc
 801adb8:	0803e768 	.word	0x0803e768
 801adbc:	08026bb8 	.word	0x08026bb8
 801adc0:	0803e7c0 	.word	0x0803e7c0
 801adc4:	0803e7e0 	.word	0x0803e7e0
 801adc8:	0803e834 	.word	0x0803e834
 801adcc:	0803e81c 	.word	0x0803e81c
 801add0:	0803e860 	.word	0x0803e860
 801add4:	2003e1cc 	.word	0x2003e1cc

0801add8 <tcp_send_fin>:
{
 801add8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801adda:	4605      	mov	r5, r0
 801addc:	b308      	cbz	r0, 801ae22 <tcp_send_fin+0x4a>
  if (pcb->unsent != NULL) {
 801adde:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 801ade0:	b90c      	cbnz	r4, 801ade6 <tcp_send_fin+0xe>
 801ade2:	e00a      	b.n	801adfa <tcp_send_fin+0x22>
 801ade4:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801ade6:	6823      	ldr	r3, [r4, #0]
 801ade8:	2b00      	cmp	r3, #0
 801adea:	d1fb      	bne.n	801ade4 <tcp_send_fin+0xc>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801adec:	68e3      	ldr	r3, [r4, #12]
 801adee:	8998      	ldrh	r0, [r3, #12]
 801adf0:	f7f9 ff1c 	bl	8014c2c <lwip_htons>
 801adf4:	f010 0607 	ands.w	r6, r0, #7
 801adf8:	d005      	beq.n	801ae06 <tcp_send_fin+0x2e>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801adfa:	4628      	mov	r0, r5
 801adfc:	2101      	movs	r1, #1
}
 801adfe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801ae02:	f7ff bf3d 	b.w	801ac80 <tcp_enqueue_flags>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801ae06:	68e3      	ldr	r3, [r4, #12]
 801ae08:	2001      	movs	r0, #1
 801ae0a:	899f      	ldrh	r7, [r3, #12]
 801ae0c:	f7f9 ff0e 	bl	8014c2c <lwip_htons>
      tcp_set_flags(pcb, TF_FIN);
 801ae10:	8b6b      	ldrh	r3, [r5, #26]
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801ae12:	4338      	orrs	r0, r7
 801ae14:	68e2      	ldr	r2, [r4, #12]
      tcp_set_flags(pcb, TF_FIN);
 801ae16:	f043 0320 	orr.w	r3, r3, #32
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801ae1a:	8190      	strh	r0, [r2, #12]
}
 801ae1c:	4630      	mov	r0, r6
      tcp_set_flags(pcb, TF_FIN);
 801ae1e:	836b      	strh	r3, [r5, #26]
}
 801ae20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801ae22:	4b04      	ldr	r3, [pc, #16]	; (801ae34 <tcp_send_fin+0x5c>)
 801ae24:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801ae28:	4903      	ldr	r1, [pc, #12]	; (801ae38 <tcp_send_fin+0x60>)
 801ae2a:	4804      	ldr	r0, [pc, #16]	; (801ae3c <tcp_send_fin+0x64>)
 801ae2c:	f005 fec4 	bl	8020bb8 <iprintf>
 801ae30:	e7d5      	b.n	801adde <tcp_send_fin+0x6>
 801ae32:	bf00      	nop
 801ae34:	0803e9bc 	.word	0x0803e9bc
 801ae38:	0803eb40 	.word	0x0803eb40
 801ae3c:	08026bb8 	.word	0x08026bb8

0801ae40 <tcp_rexmit_rto_prepare>:
{
 801ae40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801ae42:	4605      	mov	r5, r0
 801ae44:	b370      	cbz	r0, 801aea4 <tcp_rexmit_rto_prepare+0x64>
  if (pcb->unacked == NULL) {
 801ae46:	6f2c      	ldr	r4, [r5, #112]	; 0x70
 801ae48:	b924      	cbnz	r4, 801ae54 <tcp_rexmit_rto_prepare+0x14>
 801ae4a:	e028      	b.n	801ae9e <tcp_rexmit_rto_prepare+0x5e>
    if (tcp_output_segment_busy(seg)) {
 801ae4c:	f7ff f92a 	bl	801a0a4 <tcp_output_segment_busy>
 801ae50:	bb28      	cbnz	r0, 801ae9e <tcp_rexmit_rto_prepare+0x5e>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801ae52:	6824      	ldr	r4, [r4, #0]
 801ae54:	6823      	ldr	r3, [r4, #0]
    if (tcp_output_segment_busy(seg)) {
 801ae56:	4620      	mov	r0, r4
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801ae58:	2b00      	cmp	r3, #0
 801ae5a:	d1f7      	bne.n	801ae4c <tcp_rexmit_rto_prepare+0xc>
  if (tcp_output_segment_busy(seg)) {
 801ae5c:	f7ff f922 	bl	801a0a4 <tcp_output_segment_busy>
 801ae60:	4606      	mov	r6, r0
 801ae62:	b9e0      	cbnz	r0, 801ae9e <tcp_rexmit_rto_prepare+0x5e>
  tcp_set_flags(pcb, TF_RTO);
 801ae64:	8b6b      	ldrh	r3, [r5, #26]
  seg->next = pcb->unsent;
 801ae66:	6eea      	ldr	r2, [r5, #108]	; 0x6c
  pcb->unsent = pcb->unacked;
 801ae68:	6f29      	ldr	r1, [r5, #112]	; 0x70
  tcp_set_flags(pcb, TF_RTO);
 801ae6a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  seg->next = pcb->unsent;
 801ae6e:	6022      	str	r2, [r4, #0]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801ae70:	68e2      	ldr	r2, [r4, #12]
  tcp_set_flags(pcb, TF_RTO);
 801ae72:	836b      	strh	r3, [r5, #26]
  pcb->unacked = NULL;
 801ae74:	e9c5 101b 	strd	r1, r0, [r5, #108]	; 0x6c
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801ae78:	6850      	ldr	r0, [r2, #4]
 801ae7a:	f7f9 fedb 	bl	8014c34 <lwip_htonl>
 801ae7e:	68e3      	ldr	r3, [r4, #12]
 801ae80:	4607      	mov	r7, r0
 801ae82:	8924      	ldrh	r4, [r4, #8]
 801ae84:	8998      	ldrh	r0, [r3, #12]
 801ae86:	f7f9 fed1 	bl	8014c2c <lwip_htons>
 801ae8a:	f010 0303 	ands.w	r3, r0, #3
 801ae8e:	4427      	add	r7, r4
  return ERR_OK;
 801ae90:	4630      	mov	r0, r6
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801ae92:	bf18      	it	ne
 801ae94:	2301      	movne	r3, #1
  pcb->rttest = 0;
 801ae96:	636e      	str	r6, [r5, #52]	; 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801ae98:	443b      	add	r3, r7
 801ae9a:	64eb      	str	r3, [r5, #76]	; 0x4c
}
 801ae9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_VAL;
 801ae9e:	f06f 0005 	mvn.w	r0, #5
}
 801aea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801aea4:	4b03      	ldr	r3, [pc, #12]	; (801aeb4 <tcp_rexmit_rto_prepare+0x74>)
 801aea6:	f240 6263 	movw	r2, #1635	; 0x663
 801aeaa:	4903      	ldr	r1, [pc, #12]	; (801aeb8 <tcp_rexmit_rto_prepare+0x78>)
 801aeac:	4803      	ldr	r0, [pc, #12]	; (801aebc <tcp_rexmit_rto_prepare+0x7c>)
 801aeae:	f005 fe83 	bl	8020bb8 <iprintf>
 801aeb2:	e7c8      	b.n	801ae46 <tcp_rexmit_rto_prepare+0x6>
 801aeb4:	0803e9bc 	.word	0x0803e9bc
 801aeb8:	0803eac4 	.word	0x0803eac4
 801aebc:	08026bb8 	.word	0x08026bb8

0801aec0 <tcp_rexmit>:
{
 801aec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801aec2:	4607      	mov	r7, r0
 801aec4:	b378      	cbz	r0, 801af26 <tcp_rexmit+0x66>
  if (pcb->unacked == NULL) {
 801aec6:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 801aec8:	2e00      	cmp	r6, #0
 801aeca:	d034      	beq.n	801af36 <tcp_rexmit+0x76>
  if (tcp_output_segment_busy(seg)) {
 801aecc:	4630      	mov	r0, r6
 801aece:	f7ff f8e9 	bl	801a0a4 <tcp_output_segment_busy>
 801aed2:	bb80      	cbnz	r0, 801af36 <tcp_rexmit+0x76>
  pcb->unacked = seg->next;
 801aed4:	6832      	ldr	r2, [r6, #0]
  cur_seg = &(pcb->unsent);
 801aed6:	f107 056c 	add.w	r5, r7, #108	; 0x6c
  while (*cur_seg &&
 801aeda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  pcb->unacked = seg->next;
 801aedc:	673a      	str	r2, [r7, #112]	; 0x70
  while (*cur_seg &&
 801aede:	b91b      	cbnz	r3, 801aee8 <tcp_rexmit+0x28>
 801aee0:	e00f      	b.n	801af02 <tcp_rexmit+0x42>
    cur_seg = &((*cur_seg)->next );
 801aee2:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 801aee4:	682b      	ldr	r3, [r5, #0]
 801aee6:	b163      	cbz	r3, 801af02 <tcp_rexmit+0x42>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801aee8:	68db      	ldr	r3, [r3, #12]
 801aeea:	6858      	ldr	r0, [r3, #4]
 801aeec:	f7f9 fea2 	bl	8014c34 <lwip_htonl>
 801aef0:	68f3      	ldr	r3, [r6, #12]
 801aef2:	4604      	mov	r4, r0
 801aef4:	6858      	ldr	r0, [r3, #4]
 801aef6:	f7f9 fe9d 	bl	8014c34 <lwip_htonl>
 801aefa:	1a20      	subs	r0, r4, r0
  while (*cur_seg &&
 801aefc:	2800      	cmp	r0, #0
 801aefe:	dbf0      	blt.n	801aee2 <tcp_rexmit+0x22>
 801af00:	682b      	ldr	r3, [r5, #0]
  seg->next = *cur_seg;
 801af02:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 801af04:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 801af06:	6833      	ldr	r3, [r6, #0]
 801af08:	b153      	cbz	r3, 801af20 <tcp_rexmit+0x60>
  if (pcb->nrtx < 0xFF) {
 801af0a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 801af0e:	2bff      	cmp	r3, #255	; 0xff
 801af10:	d002      	beq.n	801af18 <tcp_rexmit+0x58>
    ++pcb->nrtx;
 801af12:	3301      	adds	r3, #1
 801af14:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  pcb->rttest = 0;
 801af18:	2300      	movs	r3, #0
  return ERR_OK;
 801af1a:	4618      	mov	r0, r3
  pcb->rttest = 0;
 801af1c:	637b      	str	r3, [r7, #52]	; 0x34
}
 801af1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 801af20:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 801af24:	e7f1      	b.n	801af0a <tcp_rexmit+0x4a>
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801af26:	4b05      	ldr	r3, [pc, #20]	; (801af3c <tcp_rexmit+0x7c>)
 801af28:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801af2c:	4904      	ldr	r1, [pc, #16]	; (801af40 <tcp_rexmit+0x80>)
 801af2e:	4805      	ldr	r0, [pc, #20]	; (801af44 <tcp_rexmit+0x84>)
 801af30:	f005 fe42 	bl	8020bb8 <iprintf>
 801af34:	e7c7      	b.n	801aec6 <tcp_rexmit+0x6>
    return ERR_VAL;
 801af36:	f06f 0005 	mvn.w	r0, #5
}
 801af3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801af3c:	0803e9bc 	.word	0x0803e9bc
 801af40:	0803ea4c 	.word	0x0803ea4c
 801af44:	08026bb8 	.word	0x08026bb8

0801af48 <tcp_rexmit_fast>:
{
 801af48:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801af4a:	4604      	mov	r4, r0
 801af4c:	b338      	cbz	r0, 801af9e <tcp_rexmit_fast+0x56>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801af4e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801af50:	b113      	cbz	r3, 801af58 <tcp_rexmit_fast+0x10>
 801af52:	8b63      	ldrh	r3, [r4, #26]
 801af54:	075b      	lsls	r3, r3, #29
 801af56:	d500      	bpl.n	801af5a <tcp_rexmit_fast+0x12>
}
 801af58:	bd10      	pop	{r4, pc}
    if (tcp_rexmit(pcb) == ERR_OK) {
 801af5a:	4620      	mov	r0, r4
 801af5c:	f7ff ffb0 	bl	801aec0 <tcp_rexmit>
 801af60:	2800      	cmp	r0, #0
 801af62:	d1f9      	bne.n	801af58 <tcp_rexmit_fast+0x10>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801af64:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 801af68:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 801af6c:	429a      	cmp	r2, r3
 801af6e:	bf38      	it	cc
 801af70:	0853      	lsrcc	r3, r2, #1
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801af72:	8e62      	ldrh	r2, [r4, #50]	; 0x32
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801af74:	bf28      	it	cs
 801af76:	085b      	lsrcs	r3, r3, #1
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801af78:	0051      	lsls	r1, r2, #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801af7a:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801af7e:	428b      	cmp	r3, r1
 801af80:	d202      	bcs.n	801af88 <tcp_rexmit_fast+0x40>
        pcb->ssthresh = 2 * pcb->mss;
 801af82:	b28b      	uxth	r3, r1
 801af84:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801af88:	440a      	add	r2, r1
      tcp_set_flags(pcb, TF_INFR);
 801af8a:	8b61      	ldrh	r1, [r4, #26]
      pcb->rtime = 0;
 801af8c:	2000      	movs	r0, #0
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801af8e:	4413      	add	r3, r2
      tcp_set_flags(pcb, TF_INFR);
 801af90:	f041 0204 	orr.w	r2, r1, #4
      pcb->rtime = 0;
 801af94:	8620      	strh	r0, [r4, #48]	; 0x30
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801af96:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801af9a:	8362      	strh	r2, [r4, #26]
}
 801af9c:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801af9e:	4b04      	ldr	r3, [pc, #16]	; (801afb0 <tcp_rexmit_fast+0x68>)
 801afa0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801afa4:	4903      	ldr	r1, [pc, #12]	; (801afb4 <tcp_rexmit_fast+0x6c>)
 801afa6:	4804      	ldr	r0, [pc, #16]	; (801afb8 <tcp_rexmit_fast+0x70>)
 801afa8:	f005 fe06 	bl	8020bb8 <iprintf>
 801afac:	e7cf      	b.n	801af4e <tcp_rexmit_fast+0x6>
 801afae:	bf00      	nop
 801afb0:	0803e9bc 	.word	0x0803e9bc
 801afb4:	0803ea64 	.word	0x0803ea64
 801afb8:	08026bb8 	.word	0x08026bb8

0801afbc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801afbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801afc0:	b084      	sub	sp, #16
 801afc2:	4682      	mov	sl, r0
 801afc4:	460e      	mov	r6, r1
 801afc6:	4617      	mov	r7, r2
 801afc8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801afca:	461c      	mov	r4, r3
{
 801afcc:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
 801afd0:	f8bd 9038 	ldrh.w	r9, [sp, #56]	; 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801afd4:	b303      	cbz	r3, 801b018 <tcp_rst+0x5c>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801afd6:	b345      	cbz	r5, 801b02a <tcp_rst+0x6e>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801afd8:	4630      	mov	r0, r6
 801afda:	f246 0608 	movw	r6, #24584	; 0x6008
 801afde:	f7f9 fe29 	bl	8014c34 <lwip_htonl>
 801afe2:	2114      	movs	r1, #20
 801afe4:	4602      	mov	r2, r0
 801afe6:	f8cd 9000 	str.w	r9, [sp]
 801afea:	4643      	mov	r3, r8
 801afec:	4638      	mov	r0, r7
 801afee:	e9cd 1601 	strd	r1, r6, [sp, #4]
 801aff2:	2100      	movs	r1, #0
 801aff4:	f7ff f948 	bl	801a288 <tcp_output_alloc_header_common.constprop.4>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801aff8:	4606      	mov	r6, r0
 801affa:	b150      	cbz	r0, 801b012 <tcp_rst+0x56>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801affc:	f7ff f9b4 	bl	801a368 <tcp_output_fill_options.isra.0.constprop.5>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801b000:	462b      	mov	r3, r5
 801b002:	4622      	mov	r2, r4
 801b004:	4631      	mov	r1, r6
 801b006:	4650      	mov	r0, sl
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801b008:	b004      	add	sp, #16
 801b00a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801b00e:	f7ff b9bb 	b.w	801a388 <tcp_output_control_segment>
}
 801b012:	b004      	add	sp, #16
 801b014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801b018:	4b08      	ldr	r3, [pc, #32]	; (801b03c <tcp_rst+0x80>)
 801b01a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801b01e:	4908      	ldr	r1, [pc, #32]	; (801b040 <tcp_rst+0x84>)
 801b020:	4808      	ldr	r0, [pc, #32]	; (801b044 <tcp_rst+0x88>)
 801b022:	f005 fdc9 	bl	8020bb8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801b026:	2d00      	cmp	r5, #0
 801b028:	d1d6      	bne.n	801afd8 <tcp_rst+0x1c>
 801b02a:	4b04      	ldr	r3, [pc, #16]	; (801b03c <tcp_rst+0x80>)
 801b02c:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801b030:	4905      	ldr	r1, [pc, #20]	; (801b048 <tcp_rst+0x8c>)
 801b032:	4804      	ldr	r0, [pc, #16]	; (801b044 <tcp_rst+0x88>)
 801b034:	f005 fdc0 	bl	8020bb8 <iprintf>
 801b038:	e7ce      	b.n	801afd8 <tcp_rst+0x1c>
 801b03a:	bf00      	nop
 801b03c:	0803e9bc 	.word	0x0803e9bc
 801b040:	0803eae8 	.word	0x0803eae8
 801b044:	08026bb8 	.word	0x08026bb8
 801b048:	0803eb04 	.word	0x0803eb04

0801b04c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801b04c:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801b04e:	4604      	mov	r4, r0
 801b050:	b1d8      	cbz	r0, 801b08a <tcp_send_empty_ack+0x3e>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801b052:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801b054:	f7f9 fdee 	bl	8014c34 <lwip_htonl>
 801b058:	2100      	movs	r1, #0
 801b05a:	4602      	mov	r2, r0
 801b05c:	4620      	mov	r0, r4
 801b05e:	f7ff f959 	bl	801a314 <tcp_output_alloc_header.constprop.3>
  if (p == NULL) {
 801b062:	4605      	mov	r5, r0
 801b064:	b1c8      	cbz	r0, 801b09a <tcp_send_empty_ack+0x4e>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801b066:	f7ff f97f 	bl	801a368 <tcp_output_fill_options.isra.0.constprop.5>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b06a:	1d23      	adds	r3, r4, #4
 801b06c:	4629      	mov	r1, r5
 801b06e:	4622      	mov	r2, r4
 801b070:	4620      	mov	r0, r4
 801b072:	f7ff f989 	bl	801a388 <tcp_output_control_segment>
  if (err != ERR_OK) {
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b076:	8b63      	ldrh	r3, [r4, #26]
  if (err != ERR_OK) {
 801b078:	b918      	cbnz	r0, 801b082 <tcp_send_empty_ack+0x36>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b07a:	f023 0303 	bic.w	r3, r3, #3
 801b07e:	8363      	strh	r3, [r4, #26]
  }

  return err;
}
 801b080:	bd38      	pop	{r3, r4, r5, pc}
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b082:	f043 0303 	orr.w	r3, r3, #3
 801b086:	8363      	strh	r3, [r4, #26]
}
 801b088:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801b08a:	4b07      	ldr	r3, [pc, #28]	; (801b0a8 <tcp_send_empty_ack+0x5c>)
 801b08c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801b090:	4906      	ldr	r1, [pc, #24]	; (801b0ac <tcp_send_empty_ack+0x60>)
 801b092:	4807      	ldr	r0, [pc, #28]	; (801b0b0 <tcp_send_empty_ack+0x64>)
 801b094:	f005 fd90 	bl	8020bb8 <iprintf>
 801b098:	e7db      	b.n	801b052 <tcp_send_empty_ack+0x6>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b09a:	8b63      	ldrh	r3, [r4, #26]
    return ERR_BUF;
 801b09c:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b0a0:	f043 0303 	orr.w	r3, r3, #3
 801b0a4:	8363      	strh	r3, [r4, #26]
}
 801b0a6:	bd38      	pop	{r3, r4, r5, pc}
 801b0a8:	0803e9bc 	.word	0x0803e9bc
 801b0ac:	0803eb20 	.word	0x0803eb20
 801b0b0:	08026bb8 	.word	0x08026bb8

0801b0b4 <tcp_output>:
{
 801b0b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801b0b8:	4604      	mov	r4, r0
{
 801b0ba:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801b0bc:	2800      	cmp	r0, #0
 801b0be:	f000 81b3 	beq.w	801b428 <tcp_output+0x374>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801b0c2:	7d23      	ldrb	r3, [r4, #20]
 801b0c4:	2b01      	cmp	r3, #1
 801b0c6:	f000 8137 	beq.w	801b338 <tcp_output+0x284>
  if (tcp_input_pcb == pcb) {
 801b0ca:	4bc2      	ldr	r3, [pc, #776]	; (801b3d4 <tcp_output+0x320>)
 801b0cc:	681b      	ldr	r3, [r3, #0]
 801b0ce:	42a3      	cmp	r3, r4
 801b0d0:	f000 812e 	beq.w	801b330 <tcp_output+0x27c>
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801b0d4:	f8b4 7060 	ldrh.w	r7, [r4, #96]	; 0x60
 801b0d8:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
  seg = pcb->unsent;
 801b0dc:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801b0de:	429f      	cmp	r7, r3
 801b0e0:	bf28      	it	cs
 801b0e2:	461f      	movcs	r7, r3
  if (seg == NULL) {
 801b0e4:	b955      	cbnz	r5, 801b0fc <tcp_output+0x48>
    if (pcb->flags & TF_ACK_NOW) {
 801b0e6:	8b63      	ldrh	r3, [r4, #26]
 801b0e8:	0799      	lsls	r1, r3, #30
 801b0ea:	f100 8142 	bmi.w	801b372 <tcp_output+0x2be>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801b0ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  return ERR_OK;
 801b0f2:	2000      	movs	r0, #0
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801b0f4:	8363      	strh	r3, [r4, #26]
}
 801b0f6:	b005      	add	sp, #20
 801b0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801b0fc:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801b0fe:	f104 0904 	add.w	r9, r4, #4
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801b102:	2800      	cmp	r0, #0
 801b104:	f040 81b5 	bne.w	801b472 <tcp_output+0x3be>
    return ip_route(src, dst);
 801b108:	4648      	mov	r0, r9
 801b10a:	f003 f8cf 	bl	801e2ac <ip4_route>
 801b10e:	4682      	mov	sl, r0
  if (netif == NULL) {
 801b110:	f1ba 0f00 	cmp.w	sl, #0
 801b114:	f000 81ba 	beq.w	801b48c <tcp_output+0x3d8>
  if (ip_addr_isany(&pcb->local_ip)) {
 801b118:	6823      	ldr	r3, [r4, #0]
 801b11a:	b913      	cbnz	r3, 801b122 <tcp_output+0x6e>
    ip_addr_copy(pcb->local_ip, *local_ip);
 801b11c:	f8da 3004 	ldr.w	r3, [sl, #4]
 801b120:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801b122:	68eb      	ldr	r3, [r5, #12]
 801b124:	6858      	ldr	r0, [r3, #4]
 801b126:	f7f9 fd85 	bl	8014c34 <lwip_htonl>
 801b12a:	892b      	ldrh	r3, [r5, #8]
 801b12c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 801b12e:	1a9b      	subs	r3, r3, r2
 801b130:	4418      	add	r0, r3
 801b132:	42b8      	cmp	r0, r7
 801b134:	f200 8108 	bhi.w	801b348 <tcp_output+0x294>
  pcb->persist_backoff = 0;
 801b138:	2300      	movs	r3, #0
  useg = pcb->unacked;
 801b13a:	f8d4 8070 	ldr.w	r8, [r4, #112]	; 0x70
  pcb->persist_backoff = 0;
 801b13e:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
  if (useg != NULL) {
 801b142:	f1b8 0f00 	cmp.w	r8, #0
 801b146:	d101      	bne.n	801b14c <tcp_output+0x98>
 801b148:	e004      	b.n	801b154 <tcp_output+0xa0>
 801b14a:	4698      	mov	r8, r3
    for (; useg->next != NULL; useg = useg->next);
 801b14c:	f8d8 3000 	ldr.w	r3, [r8]
 801b150:	2b00      	cmp	r3, #0
 801b152:	d1fa      	bne.n	801b14a <tcp_output+0x96>
    LWIP_ASSERT("RST not expected here!",
 801b154:	464e      	mov	r6, r9
 801b156:	e048      	b.n	801b1ea <tcp_output+0x136>
    if (pcb->state != SYN_SENT) {
 801b158:	7d23      	ldrb	r3, [r4, #20]
    pcb->unsent = seg->next;
 801b15a:	682a      	ldr	r2, [r5, #0]
    if (pcb->state != SYN_SENT) {
 801b15c:	2b02      	cmp	r3, #2
    pcb->unsent = seg->next;
 801b15e:	66e2      	str	r2, [r4, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801b160:	d003      	beq.n	801b16a <tcp_output+0xb6>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b162:	8b63      	ldrh	r3, [r4, #26]
 801b164:	f023 0303 	bic.w	r3, r3, #3
 801b168:	8363      	strh	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801b16a:	68eb      	ldr	r3, [r5, #12]
 801b16c:	6858      	ldr	r0, [r3, #4]
 801b16e:	f7f9 fd61 	bl	8014c34 <lwip_htonl>
 801b172:	68eb      	ldr	r3, [r5, #12]
 801b174:	4681      	mov	r9, r0
 801b176:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 801b17a:	8998      	ldrh	r0, [r3, #12]
 801b17c:	f7f9 fd56 	bl	8014c2c <lwip_htons>
 801b180:	f010 0003 	ands.w	r0, r0, #3
 801b184:	44d9      	add	r9, fp
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801b186:	6d23      	ldr	r3, [r4, #80]	; 0x50
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801b188:	bf18      	it	ne
 801b18a:	2001      	movne	r0, #1
 801b18c:	4448      	add	r0, r9
    if (TCP_TCPLEN(seg) > 0) {
 801b18e:	f8b5 9008 	ldrh.w	r9, [r5, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801b192:	1a1b      	subs	r3, r3, r0
 801b194:	2b00      	cmp	r3, #0
    if (TCP_TCPLEN(seg) > 0) {
 801b196:	68eb      	ldr	r3, [r5, #12]
      pcb->snd_nxt = snd_nxt;
 801b198:	bfb8      	it	lt
 801b19a:	6520      	strlt	r0, [r4, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 801b19c:	8998      	ldrh	r0, [r3, #12]
 801b19e:	f7f9 fd45 	bl	8014c2c <lwip_htons>
 801b1a2:	f010 0003 	ands.w	r0, r0, #3
 801b1a6:	bf18      	it	ne
 801b1a8:	2001      	movne	r0, #1
 801b1aa:	eb10 0f09 	cmn.w	r0, r9
 801b1ae:	f000 80ee 	beq.w	801b38e <tcp_output+0x2da>
      seg->next = NULL;
 801b1b2:	2200      	movs	r2, #0
      if (pcb->unacked == NULL) {
 801b1b4:	6f23      	ldr	r3, [r4, #112]	; 0x70
      seg->next = NULL;
 801b1b6:	602a      	str	r2, [r5, #0]
      if (pcb->unacked == NULL) {
 801b1b8:	2b00      	cmp	r3, #0
 801b1ba:	f000 80ec 	beq.w	801b396 <tcp_output+0x2e2>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801b1be:	68eb      	ldr	r3, [r5, #12]
 801b1c0:	6858      	ldr	r0, [r3, #4]
 801b1c2:	f7f9 fd37 	bl	8014c34 <lwip_htonl>
 801b1c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801b1ca:	4681      	mov	r9, r0
 801b1cc:	6858      	ldr	r0, [r3, #4]
 801b1ce:	f7f9 fd31 	bl	8014c34 <lwip_htonl>
 801b1d2:	eba9 0000 	sub.w	r0, r9, r0
 801b1d6:	2800      	cmp	r0, #0
 801b1d8:	f2c0 812e 	blt.w	801b438 <tcp_output+0x384>
          useg->next = seg;
 801b1dc:	f8c8 5000 	str.w	r5, [r8]
 801b1e0:	46a8      	mov	r8, r5
    seg = pcb->unsent;
 801b1e2:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  while (seg != NULL &&
 801b1e4:	2d00      	cmp	r5, #0
 801b1e6:	f000 8148 	beq.w	801b47a <tcp_output+0x3c6>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801b1ea:	68eb      	ldr	r3, [r5, #12]
 801b1ec:	6858      	ldr	r0, [r3, #4]
 801b1ee:	f7f9 fd21 	bl	8014c34 <lwip_htonl>
 801b1f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801b1f4:	892a      	ldrh	r2, [r5, #8]
 801b1f6:	1ac0      	subs	r0, r0, r3
 801b1f8:	4410      	add	r0, r2
  while (seg != NULL &&
 801b1fa:	42b8      	cmp	r0, r7
 801b1fc:	f200 813f 	bhi.w	801b47e <tcp_output+0x3ca>
    LWIP_ASSERT("RST not expected here!",
 801b200:	68eb      	ldr	r3, [r5, #12]
 801b202:	8998      	ldrh	r0, [r3, #12]
 801b204:	f7f9 fd12 	bl	8014c2c <lwip_htons>
 801b208:	0742      	lsls	r2, r0, #29
 801b20a:	f100 80b8 	bmi.w	801b37e <tcp_output+0x2ca>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801b20e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801b210:	b163      	cbz	r3, 801b22c <tcp_output+0x178>
 801b212:	8b62      	ldrh	r2, [r4, #26]
 801b214:	f012 0f44 	tst.w	r2, #68	; 0x44
 801b218:	4613      	mov	r3, r2
 801b21a:	d107      	bne.n	801b22c <tcp_output+0x178>
 801b21c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801b21e:	2900      	cmp	r1, #0
 801b220:	f000 80c2 	beq.w	801b3a8 <tcp_output+0x2f4>
 801b224:	6808      	ldr	r0, [r1, #0]
 801b226:	2800      	cmp	r0, #0
 801b228:	f000 80b8 	beq.w	801b39c <tcp_output+0x2e8>
    if (pcb->state != SYN_SENT) {
 801b22c:	7d23      	ldrb	r3, [r4, #20]
 801b22e:	2b02      	cmp	r3, #2
 801b230:	d009      	beq.n	801b246 <tcp_output+0x192>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801b232:	68eb      	ldr	r3, [r5, #12]
 801b234:	2010      	movs	r0, #16
 801b236:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 801b23a:	f7f9 fcf7 	bl	8014c2c <lwip_htons>
 801b23e:	68eb      	ldr	r3, [r5, #12]
 801b240:	ea49 0000 	orr.w	r0, r9, r0
 801b244:	8198      	strh	r0, [r3, #12]
  if (tcp_output_segment_busy(seg)) {
 801b246:	4628      	mov	r0, r5
 801b248:	f7fe ff2c 	bl	801a0a4 <tcp_output_segment_busy>
 801b24c:	2800      	cmp	r0, #0
 801b24e:	d183      	bne.n	801b158 <tcp_output+0xa4>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801b250:	f8d5 900c 	ldr.w	r9, [r5, #12]
 801b254:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801b256:	f7f9 fced 	bl	8014c34 <lwip_htonl>
 801b25a:	f8c9 0008 	str.w	r0, [r9, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801b25e:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 801b260:	f8d5 900c 	ldr.w	r9, [r5, #12]
 801b264:	f7f9 fce2 	bl	8014c2c <lwip_htons>
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801b268:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 801b26a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801b26c:	f8a9 000e 	strh.w	r0, [r9, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801b270:	4413      	add	r3, r2
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801b272:	f8d5 900c 	ldr.w	r9, [r5, #12]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801b276:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801b278:	7aab      	ldrb	r3, [r5, #10]
 801b27a:	07db      	lsls	r3, r3, #31
 801b27c:	f100 80c3 	bmi.w	801b406 <tcp_output+0x352>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801b280:	f109 0b14 	add.w	fp, r9, #20
  if (pcb->rtime < 0) {
 801b284:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 801b288:	2b00      	cmp	r3, #0
 801b28a:	da01      	bge.n	801b290 <tcp_output+0x1dc>
    pcb->rtime = 0;
 801b28c:	2300      	movs	r3, #0
 801b28e:	8623      	strh	r3, [r4, #48]	; 0x30
  if (pcb->rttest == 0) {
 801b290:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b292:	2b00      	cmp	r3, #0
 801b294:	f000 80ac 	beq.w	801b3f0 <tcp_output+0x33c>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801b298:	6868      	ldr	r0, [r5, #4]
  seg->tcphdr->chksum = 0;
 801b29a:	2100      	movs	r1, #0
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801b29c:	6843      	ldr	r3, [r0, #4]
  seg->p->tot_len -= len;
 801b29e:	8902      	ldrh	r2, [r0, #8]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801b2a0:	eba9 0303 	sub.w	r3, r9, r3
  seg->p->len -= len;
 801b2a4:	f8b0 c00a 	ldrh.w	ip, [r0, #10]
  seg->p->payload = seg->tcphdr;
 801b2a8:	f8c0 9004 	str.w	r9, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801b2ac:	b29b      	uxth	r3, r3
  seg->p->tot_len -= len;
 801b2ae:	1ad2      	subs	r2, r2, r3
  seg->p->len -= len;
 801b2b0:	ebac 0303 	sub.w	r3, ip, r3
  seg->p->tot_len -= len;
 801b2b4:	b292      	uxth	r2, r2
  seg->p->len -= len;
 801b2b6:	8143      	strh	r3, [r0, #10]
  seg->p->tot_len -= len;
 801b2b8:	8102      	strh	r2, [r0, #8]
  seg->tcphdr->chksum = 0;
 801b2ba:	f889 1010 	strb.w	r1, [r9, #16]
 801b2be:	f889 1011 	strb.w	r1, [r9, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801b2c2:	7aab      	ldrb	r3, [r5, #10]
 801b2c4:	009b      	lsls	r3, r3, #2
 801b2c6:	f003 0304 	and.w	r3, r3, #4
 801b2ca:	3314      	adds	r3, #20
 801b2cc:	444b      	add	r3, r9
 801b2ce:	459b      	cmp	fp, r3
 801b2d0:	d00a      	beq.n	801b2e8 <tcp_output+0x234>
 801b2d2:	f240 621c 	movw	r2, #1564	; 0x61c
 801b2d6:	4b40      	ldr	r3, [pc, #256]	; (801b3d8 <tcp_output+0x324>)
 801b2d8:	4940      	ldr	r1, [pc, #256]	; (801b3dc <tcp_output+0x328>)
 801b2da:	4841      	ldr	r0, [pc, #260]	; (801b3e0 <tcp_output+0x32c>)
 801b2dc:	f005 fc6c 	bl	8020bb8 <iprintf>
 801b2e0:	6868      	ldr	r0, [r5, #4]
 801b2e2:	f8d5 900c 	ldr.w	r9, [r5, #12]
 801b2e6:	8902      	ldrh	r2, [r0, #8]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 801b2e8:	4623      	mov	r3, r4
 801b2ea:	2106      	movs	r1, #6
 801b2ec:	9600      	str	r6, [sp, #0]
 801b2ee:	f7fa fa59 	bl	80157a4 <ip_chksum_pseudo>
  TCP_STATS_INC(tcp.xmit);
 801b2f2:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 801b3ec <tcp_output+0x338>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801b2f6:	f04f 0e06 	mov.w	lr, #6
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 801b2fa:	f8a9 0010 	strh.w	r0, [r9, #16]
  TCP_STATS_INC(tcp.xmit);
 801b2fe:	f8bc 3090 	ldrh.w	r3, [ip, #144]	; 0x90
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801b302:	4632      	mov	r2, r6
 801b304:	6868      	ldr	r0, [r5, #4]
 801b306:	4621      	mov	r1, r4
  TCP_STATS_INC(tcp.xmit);
 801b308:	3301      	adds	r3, #1
 801b30a:	f8ac 3090 	strh.w	r3, [ip, #144]	; 0x90
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801b30e:	7ae3      	ldrb	r3, [r4, #11]
 801b310:	e9cd ea01 	strd	lr, sl, [sp, #4]
 801b314:	f894 c00a 	ldrb.w	ip, [r4, #10]
 801b318:	f8cd c000 	str.w	ip, [sp]
 801b31c:	f003 f9de 	bl	801e6dc <ip4_output_if>
    if (err != ERR_OK) {
 801b320:	2800      	cmp	r0, #0
 801b322:	f43f af19 	beq.w	801b158 <tcp_output+0xa4>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b326:	8b63      	ldrh	r3, [r4, #26]
 801b328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b32c:	8363      	strh	r3, [r4, #26]
      return err;
 801b32e:	e6e2      	b.n	801b0f6 <tcp_output+0x42>
    return ERR_OK;
 801b330:	2000      	movs	r0, #0
}
 801b332:	b005      	add	sp, #20
 801b334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801b338:	4b27      	ldr	r3, [pc, #156]	; (801b3d8 <tcp_output+0x324>)
 801b33a:	f240 42e4 	movw	r2, #1252	; 0x4e4
 801b33e:	4929      	ldr	r1, [pc, #164]	; (801b3e4 <tcp_output+0x330>)
 801b340:	4827      	ldr	r0, [pc, #156]	; (801b3e0 <tcp_output+0x32c>)
 801b342:	f005 fc39 	bl	8020bb8 <iprintf>
 801b346:	e6c0      	b.n	801b0ca <tcp_output+0x16>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801b348:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 801b34c:	42bb      	cmp	r3, r7
 801b34e:	f47f aeca 	bne.w	801b0e6 <tcp_output+0x32>
 801b352:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801b354:	2b00      	cmp	r3, #0
 801b356:	f47f aec6 	bne.w	801b0e6 <tcp_output+0x32>
 801b35a:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 801b35e:	2b00      	cmp	r3, #0
 801b360:	f47f aec1 	bne.w	801b0e6 <tcp_output+0x32>
      pcb->persist_cnt = 0;
 801b364:	f44f 7280 	mov.w	r2, #256	; 0x100
      pcb->persist_backoff = 1;
 801b368:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
      pcb->persist_cnt = 0;
 801b36c:	f8a4 2098 	strh.w	r2, [r4, #152]	; 0x98
 801b370:	e6b9      	b.n	801b0e6 <tcp_output+0x32>
      return tcp_send_empty_ack(pcb);
 801b372:	4620      	mov	r0, r4
}
 801b374:	b005      	add	sp, #20
 801b376:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 801b37a:	f7ff be67 	b.w	801b04c <tcp_send_empty_ack>
    LWIP_ASSERT("RST not expected here!",
 801b37e:	4b16      	ldr	r3, [pc, #88]	; (801b3d8 <tcp_output+0x324>)
 801b380:	f240 5237 	movw	r2, #1335	; 0x537
 801b384:	4918      	ldr	r1, [pc, #96]	; (801b3e8 <tcp_output+0x334>)
 801b386:	4816      	ldr	r0, [pc, #88]	; (801b3e0 <tcp_output+0x32c>)
 801b388:	f005 fc16 	bl	8020bb8 <iprintf>
 801b38c:	e73f      	b.n	801b20e <tcp_output+0x15a>
      tcp_seg_free(seg);
 801b38e:	4628      	mov	r0, r5
 801b390:	f7fc f8ee 	bl	8017570 <tcp_seg_free>
 801b394:	e725      	b.n	801b1e2 <tcp_output+0x12e>
        pcb->unacked = seg;
 801b396:	6725      	str	r5, [r4, #112]	; 0x70
 801b398:	46a8      	mov	r8, r5
 801b39a:	e722      	b.n	801b1e2 <tcp_output+0x12e>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801b39c:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801b3a0:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 801b3a2:	4584      	cmp	ip, r0
 801b3a4:	f4bf af42 	bcs.w	801b22c <tcp_output+0x178>
 801b3a8:	f8b4 0064 	ldrh.w	r0, [r4, #100]	; 0x64
 801b3ac:	2800      	cmp	r0, #0
 801b3ae:	f43f af3d 	beq.w	801b22c <tcp_output+0x178>
 801b3b2:	f8b4 0066 	ldrh.w	r0, [r4, #102]	; 0x66
 801b3b6:	2808      	cmp	r0, #8
 801b3b8:	f63f af38 	bhi.w	801b22c <tcp_output+0x178>
 801b3bc:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 801b3c0:	f47f af34 	bne.w	801b22c <tcp_output+0x178>
  if (pcb->unsent == NULL) {
 801b3c4:	2900      	cmp	r1, #0
 801b3c6:	f47f ae92 	bne.w	801b0ee <tcp_output+0x3a>
    pcb->unsent_oversize = 0;
 801b3ca:	2100      	movs	r1, #0
 801b3cc:	4613      	mov	r3, r2
 801b3ce:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68
 801b3d2:	e68c      	b.n	801b0ee <tcp_output+0x3a>
 801b3d4:	2003e2ec 	.word	0x2003e2ec
 801b3d8:	0803e9bc 	.word	0x0803e9bc
 801b3dc:	0803e8fc 	.word	0x0803e8fc
 801b3e0:	08026bb8 	.word	0x08026bb8
 801b3e4:	0803e8bc 	.word	0x0803e8bc
 801b3e8:	0803e8e4 	.word	0x0803e8e4
 801b3ec:	2003e1cc 	.word	0x2003e1cc
    pcb->rttest = tcp_ticks;
 801b3f0:	4b28      	ldr	r3, [pc, #160]	; (801b494 <tcp_output+0x3e0>)
 801b3f2:	681b      	ldr	r3, [r3, #0]
 801b3f4:	6363      	str	r3, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801b3f6:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801b3fa:	f7f9 fc1b 	bl	8014c34 <lwip_htonl>
 801b3fe:	f8d5 900c 	ldr.w	r9, [r5, #12]
 801b402:	63a0      	str	r0, [r4, #56]	; 0x38
 801b404:	e748      	b.n	801b298 <tcp_output+0x1e4>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801b406:	4632      	mov	r2, r6
 801b408:	4651      	mov	r1, sl
 801b40a:	f44f 7006 	mov.w	r0, #536	; 0x218
    opts += 1;
 801b40e:	f109 0b18 	add.w	fp, r9, #24
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801b412:	f7fd f85d 	bl	80184d0 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801b416:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 801b41a:	f7f9 fc0b 	bl	8014c34 <lwip_htonl>
 801b41e:	f8c9 0014 	str.w	r0, [r9, #20]
 801b422:	f8d5 900c 	ldr.w	r9, [r5, #12]
 801b426:	e72d      	b.n	801b284 <tcp_output+0x1d0>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801b428:	4b1b      	ldr	r3, [pc, #108]	; (801b498 <tcp_output+0x3e4>)
 801b42a:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801b42e:	491b      	ldr	r1, [pc, #108]	; (801b49c <tcp_output+0x3e8>)
 801b430:	481b      	ldr	r0, [pc, #108]	; (801b4a0 <tcp_output+0x3ec>)
 801b432:	f005 fbc1 	bl	8020bb8 <iprintf>
 801b436:	e644      	b.n	801b0c2 <tcp_output+0xe>
          while (*cur_seg &&
 801b438:	6f23      	ldr	r3, [r4, #112]	; 0x70
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801b43a:	f104 0b70 	add.w	fp, r4, #112	; 0x70
          while (*cur_seg &&
 801b43e:	b92b      	cbnz	r3, 801b44c <tcp_output+0x398>
 801b440:	e013      	b.n	801b46a <tcp_output+0x3b6>
            cur_seg = &((*cur_seg)->next );
 801b442:	f8db b000 	ldr.w	fp, [fp]
          while (*cur_seg &&
 801b446:	f8db 3000 	ldr.w	r3, [fp]
 801b44a:	b173      	cbz	r3, 801b46a <tcp_output+0x3b6>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801b44c:	68db      	ldr	r3, [r3, #12]
 801b44e:	6858      	ldr	r0, [r3, #4]
 801b450:	f7f9 fbf0 	bl	8014c34 <lwip_htonl>
 801b454:	68eb      	ldr	r3, [r5, #12]
 801b456:	4681      	mov	r9, r0
 801b458:	6858      	ldr	r0, [r3, #4]
 801b45a:	f7f9 fbeb 	bl	8014c34 <lwip_htonl>
 801b45e:	eba9 0000 	sub.w	r0, r9, r0
          while (*cur_seg &&
 801b462:	2800      	cmp	r0, #0
 801b464:	dbed      	blt.n	801b442 <tcp_output+0x38e>
 801b466:	f8db 3000 	ldr.w	r3, [fp]
          seg->next = (*cur_seg);
 801b46a:	602b      	str	r3, [r5, #0]
          (*cur_seg) = seg;
 801b46c:	f8cb 5000 	str.w	r5, [fp]
 801b470:	e6b7      	b.n	801b1e2 <tcp_output+0x12e>
    return netif_get_by_index(pcb->netif_idx);
 801b472:	f7fb f963 	bl	801673c <netif_get_by_index>
 801b476:	4682      	mov	sl, r0
 801b478:	e64a      	b.n	801b110 <tcp_output+0x5c>
 801b47a:	8b62      	ldrh	r2, [r4, #26]
 801b47c:	e7a5      	b.n	801b3ca <tcp_output+0x316>
 801b47e:	8b62      	ldrh	r2, [r4, #26]
 801b480:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801b482:	4613      	mov	r3, r2
  if (pcb->unsent == NULL) {
 801b484:	2900      	cmp	r1, #0
 801b486:	f47f ae32 	bne.w	801b0ee <tcp_output+0x3a>
 801b48a:	e79e      	b.n	801b3ca <tcp_output+0x316>
    return ERR_RTE;
 801b48c:	f06f 0003 	mvn.w	r0, #3
 801b490:	e631      	b.n	801b0f6 <tcp_output+0x42>
 801b492:	bf00      	nop
 801b494:	2003e2dc 	.word	0x2003e2dc
 801b498:	0803e9bc 	.word	0x0803e9bc
 801b49c:	0803e8a4 	.word	0x0803e8a4
 801b4a0:	08026bb8 	.word	0x08026bb8

0801b4a4 <tcp_rexmit_rto_commit>:
{
 801b4a4:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801b4a6:	4604      	mov	r4, r0
 801b4a8:	b158      	cbz	r0, 801b4c2 <tcp_rexmit_rto_commit+0x1e>
  if (pcb->nrtx < 0xFF) {
 801b4aa:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 801b4ae:	2bff      	cmp	r3, #255	; 0xff
 801b4b0:	d002      	beq.n	801b4b8 <tcp_rexmit_rto_commit+0x14>
    ++pcb->nrtx;
 801b4b2:	3301      	adds	r3, #1
 801b4b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 801b4b8:	4620      	mov	r0, r4
}
 801b4ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 801b4be:	f7ff bdf9 	b.w	801b0b4 <tcp_output>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801b4c2:	4b04      	ldr	r3, [pc, #16]	; (801b4d4 <tcp_rexmit_rto_commit+0x30>)
 801b4c4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801b4c8:	4903      	ldr	r1, [pc, #12]	; (801b4d8 <tcp_rexmit_rto_commit+0x34>)
 801b4ca:	4804      	ldr	r0, [pc, #16]	; (801b4dc <tcp_rexmit_rto_commit+0x38>)
 801b4cc:	f005 fb74 	bl	8020bb8 <iprintf>
 801b4d0:	e7eb      	b.n	801b4aa <tcp_rexmit_rto_commit+0x6>
 801b4d2:	bf00      	nop
 801b4d4:	0803e9bc 	.word	0x0803e9bc
 801b4d8:	0803eaa0 	.word	0x0803eaa0
 801b4dc:	08026bb8 	.word	0x08026bb8

0801b4e0 <tcp_rexmit_rto>:
{
 801b4e0:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801b4e2:	4604      	mov	r4, r0
 801b4e4:	b148      	cbz	r0, 801b4fa <tcp_rexmit_rto+0x1a>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801b4e6:	4620      	mov	r0, r4
 801b4e8:	f7ff fcaa 	bl	801ae40 <tcp_rexmit_rto_prepare>
 801b4ec:	b100      	cbz	r0, 801b4f0 <tcp_rexmit_rto+0x10>
}
 801b4ee:	bd10      	pop	{r4, pc}
    tcp_rexmit_rto_commit(pcb);
 801b4f0:	4620      	mov	r0, r4
}
 801b4f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tcp_rexmit_rto_commit(pcb);
 801b4f6:	f7ff bfd5 	b.w	801b4a4 <tcp_rexmit_rto_commit>
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801b4fa:	4b04      	ldr	r3, [pc, #16]	; (801b50c <tcp_rexmit_rto+0x2c>)
 801b4fc:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801b500:	4903      	ldr	r1, [pc, #12]	; (801b510 <tcp_rexmit_rto+0x30>)
 801b502:	4804      	ldr	r0, [pc, #16]	; (801b514 <tcp_rexmit_rto+0x34>)
 801b504:	f005 fb58 	bl	8020bb8 <iprintf>
 801b508:	e7ed      	b.n	801b4e6 <tcp_rexmit_rto+0x6>
 801b50a:	bf00      	nop
 801b50c:	0803e9bc 	.word	0x0803e9bc
 801b510:	0803ea84 	.word	0x0803ea84
 801b514:	08026bb8 	.word	0x08026bb8

0801b518 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801b518:	b570      	push	{r4, r5, r6, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801b51a:	4604      	mov	r4, r0
 801b51c:	b1a0      	cbz	r0, 801b548 <tcp_keepalive+0x30>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801b51e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801b520:	3801      	subs	r0, #1
 801b522:	f7f9 fb87 	bl	8014c34 <lwip_htonl>
 801b526:	2100      	movs	r1, #0
 801b528:	4602      	mov	r2, r0
 801b52a:	4620      	mov	r0, r4
 801b52c:	f7fe fef2 	bl	801a314 <tcp_output_alloc_header.constprop.3>
  if (p == NULL) {
 801b530:	4605      	mov	r5, r0
 801b532:	b188      	cbz	r0, 801b558 <tcp_keepalive+0x40>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b534:	f7fe ff18 	bl	801a368 <tcp_output_fill_options.isra.0.constprop.5>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b538:	4629      	mov	r1, r5
 801b53a:	1d23      	adds	r3, r4, #4
 801b53c:	4622      	mov	r2, r4
 801b53e:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 801b540:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b544:	f7fe bf20 	b.w	801a388 <tcp_output_control_segment>
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801b548:	4b05      	ldr	r3, [pc, #20]	; (801b560 <tcp_keepalive+0x48>)
 801b54a:	f640 0224 	movw	r2, #2084	; 0x824
 801b54e:	4905      	ldr	r1, [pc, #20]	; (801b564 <tcp_keepalive+0x4c>)
 801b550:	4805      	ldr	r0, [pc, #20]	; (801b568 <tcp_keepalive+0x50>)
 801b552:	f005 fb31 	bl	8020bb8 <iprintf>
 801b556:	e7e2      	b.n	801b51e <tcp_keepalive+0x6>
}
 801b558:	f04f 30ff 	mov.w	r0, #4294967295
 801b55c:	bd70      	pop	{r4, r5, r6, pc}
 801b55e:	bf00      	nop
 801b560:	0803e9bc 	.word	0x0803e9bc
 801b564:	0803e888 	.word	0x0803e888
 801b568:	08026bb8 	.word	0x08026bb8

0801b56c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801b56c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801b570:	4604      	mov	r4, r0
 801b572:	2800      	cmp	r0, #0
 801b574:	d054      	beq.n	801b620 <tcp_zero_window_probe+0xb4>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801b576:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 801b578:	2d00      	cmp	r5, #0
 801b57a:	d04a      	beq.n	801b612 <tcp_zero_window_probe+0xa6>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801b57c:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 801b580:	2bff      	cmp	r3, #255	; 0xff
 801b582:	d002      	beq.n	801b58a <tcp_zero_window_probe+0x1e>
    ++pcb->persist_probe;
 801b584:	3301      	adds	r3, #1
 801b586:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801b58a:	68eb      	ldr	r3, [r5, #12]
 801b58c:	8998      	ldrh	r0, [r3, #12]
 801b58e:	f7f9 fb4d 	bl	8014c2c <lwip_htons>
 801b592:	07c2      	lsls	r2, r0, #31
 801b594:	68eb      	ldr	r3, [r5, #12]
 801b596:	d426      	bmi.n	801b5e6 <tcp_zero_window_probe+0x7a>
 801b598:	685a      	ldr	r2, [r3, #4]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801b59a:	2101      	movs	r1, #1
 801b59c:	4620      	mov	r0, r4
 801b59e:	f7fe feb9 	bl	801a314 <tcp_output_alloc_header.constprop.3>
  if (p == NULL) {
 801b5a2:	4606      	mov	r6, r0
 801b5a4:	2800      	cmp	r0, #0
 801b5a6:	d037      	beq.n	801b618 <tcp_zero_window_probe+0xac>
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801b5a8:	6868      	ldr	r0, [r5, #4]
 801b5aa:	2201      	movs	r2, #1
 801b5ac:	892f      	ldrh	r7, [r5, #8]
 801b5ae:	8903      	ldrh	r3, [r0, #8]
    char *d = ((char *)p->payload + TCP_HLEN);
 801b5b0:	6871      	ldr	r1, [r6, #4]
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801b5b2:	1bdb      	subs	r3, r3, r7
 801b5b4:	3114      	adds	r1, #20
 801b5b6:	b29b      	uxth	r3, r3
 801b5b8:	f7fb fc36 	bl	8016e28 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801b5bc:	68eb      	ldr	r3, [r5, #12]
 801b5be:	6858      	ldr	r0, [r3, #4]
 801b5c0:	f7f9 fb38 	bl	8014c34 <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801b5c4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801b5c6:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801b5c8:	1a1b      	subs	r3, r3, r0
 801b5ca:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 801b5cc:	bfb8      	it	lt
 801b5ce:	6520      	strlt	r0, [r4, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b5d0:	4630      	mov	r0, r6
 801b5d2:	f7fe fec9 	bl	801a368 <tcp_output_fill_options.isra.0.constprop.5>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b5d6:	4631      	mov	r1, r6
 801b5d8:	1d23      	adds	r3, r4, #4
 801b5da:	4622      	mov	r2, r4
 801b5dc:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 801b5de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b5e2:	f7fe bed1 	b.w	801a388 <tcp_output_control_segment>
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801b5e6:	8929      	ldrh	r1, [r5, #8]
 801b5e8:	685a      	ldr	r2, [r3, #4]
 801b5ea:	2900      	cmp	r1, #0
 801b5ec:	d1d5      	bne.n	801b59a <tcp_zero_window_probe+0x2e>
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801b5ee:	4620      	mov	r0, r4
 801b5f0:	f7fe fe90 	bl	801a314 <tcp_output_alloc_header.constprop.3>
  if (p == NULL) {
 801b5f4:	4606      	mov	r6, r0
 801b5f6:	b178      	cbz	r0, 801b618 <tcp_zero_window_probe+0xac>
  tcphdr = (struct tcp_hdr *)p->payload;
 801b5f8:	f8d6 8004 	ldr.w	r8, [r6, #4]
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801b5fc:	2011      	movs	r0, #17
 801b5fe:	f9b8 700c 	ldrsh.w	r7, [r8, #12]
 801b602:	f7f9 fb13 	bl	8014c2c <lwip_htons>
 801b606:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 801b60a:	4338      	orrs	r0, r7
 801b60c:	f8a8 000c 	strh.w	r0, [r8, #12]
 801b610:	e7d4      	b.n	801b5bc <tcp_zero_window_probe+0x50>
    return ERR_OK;
 801b612:	4628      	mov	r0, r5
}
 801b614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_MEM;
 801b618:	f04f 30ff 	mov.w	r0, #4294967295
}
 801b61c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801b620:	4b03      	ldr	r3, [pc, #12]	; (801b630 <tcp_zero_window_probe+0xc4>)
 801b622:	f640 024f 	movw	r2, #2127	; 0x84f
 801b626:	4903      	ldr	r1, [pc, #12]	; (801b634 <tcp_zero_window_probe+0xc8>)
 801b628:	4803      	ldr	r0, [pc, #12]	; (801b638 <tcp_zero_window_probe+0xcc>)
 801b62a:	f005 fac5 	bl	8020bb8 <iprintf>
 801b62e:	e7a2      	b.n	801b576 <tcp_zero_window_probe+0xa>
 801b630:	0803e9bc 	.word	0x0803e9bc
 801b634:	0803ee28 	.word	0x0803ee28
 801b638:	08026bb8 	.word	0x08026bb8

0801b63c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801b63c:	b570      	push	{r4, r5, r6, lr}
 801b63e:	4604      	mov	r4, r0
 801b640:	460e      	mov	r6, r1
 801b642:	4615      	mov	r5, r2
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801b644:	4913      	ldr	r1, [pc, #76]	; (801b694 <sys_timeout_abs+0x58>)
 801b646:	22bc      	movs	r2, #188	; 0xbc
 801b648:	200c      	movs	r0, #12
 801b64a:	f7fa fe5f 	bl	801630c <memp_malloc_fn>
  if (timeout == NULL) {
 801b64e:	b1c8      	cbz	r0, 801b684 <sys_timeout_abs+0x48>
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801b650:	4a11      	ldr	r2, [pc, #68]	; (801b698 <sys_timeout_abs+0x5c>)
  timeout->next = NULL;
 801b652:	2300      	movs	r3, #0
  timeout->h = handler;
 801b654:	6086      	str	r6, [r0, #8]
  if (next_timeout == NULL) {
 801b656:	6811      	ldr	r1, [r2, #0]
  timeout->arg = arg;
 801b658:	60c5      	str	r5, [r0, #12]
  timeout->next = NULL;
 801b65a:	e9c0 3400 	strd	r3, r4, [r0]
  if (next_timeout == NULL) {
 801b65e:	b121      	cbz	r1, 801b66a <sys_timeout_abs+0x2e>
    next_timeout = timeout;
    return;
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801b660:	684b      	ldr	r3, [r1, #4]
 801b662:	1ae3      	subs	r3, r4, r3
 801b664:	2b00      	cmp	r3, #0
 801b666:	da07      	bge.n	801b678 <sys_timeout_abs+0x3c>
    timeout->next = next_timeout;
 801b668:	6001      	str	r1, [r0, #0]
    next_timeout = timeout;
 801b66a:	6010      	str	r0, [r2, #0]
        t->next = timeout;
        break;
      }
    }
  }
}
 801b66c:	bd70      	pop	{r4, r5, r6, pc}
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801b66e:	685a      	ldr	r2, [r3, #4]
 801b670:	1aa2      	subs	r2, r4, r2
 801b672:	2a00      	cmp	r2, #0
 801b674:	db03      	blt.n	801b67e <sys_timeout_abs+0x42>
 801b676:	4619      	mov	r1, r3
 801b678:	680b      	ldr	r3, [r1, #0]
 801b67a:	2b00      	cmp	r3, #0
 801b67c:	d1f7      	bne.n	801b66e <sys_timeout_abs+0x32>
        timeout->next = t->next;
 801b67e:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 801b680:	6008      	str	r0, [r1, #0]
}
 801b682:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801b684:	4b03      	ldr	r3, [pc, #12]	; (801b694 <sys_timeout_abs+0x58>)
 801b686:	22be      	movs	r2, #190	; 0xbe
 801b688:	4904      	ldr	r1, [pc, #16]	; (801b69c <sys_timeout_abs+0x60>)
 801b68a:	4805      	ldr	r0, [pc, #20]	; (801b6a0 <sys_timeout_abs+0x64>)
}
 801b68c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801b690:	f005 ba92 	b.w	8020bb8 <iprintf>
 801b694:	0803eeb4 	.word	0x0803eeb4
 801b698:	2002a438 	.word	0x2002a438
 801b69c:	0803eee8 	.word	0x0803eee8
 801b6a0:	08026bb8 	.word	0x08026bb8

0801b6a4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801b6a4:	b510      	push	{r4, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801b6a6:	6843      	ldr	r3, [r0, #4]
{
 801b6a8:	4604      	mov	r4, r0
  cyclic->handler();
 801b6aa:	4798      	blx	r3

  now = sys_now();
 801b6ac:	f7f4 fdfa 	bl	80102a4 <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801b6b0:	4b09      	ldr	r3, [pc, #36]	; (801b6d8 <lwip_cyclic_timer+0x34>)
 801b6b2:	6821      	ldr	r1, [r4, #0]
 801b6b4:	681b      	ldr	r3, [r3, #0]
 801b6b6:	440b      	add	r3, r1
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801b6b8:	1a1a      	subs	r2, r3, r0
 801b6ba:	2a00      	cmp	r2, #0
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801b6bc:	4622      	mov	r2, r4
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801b6be:	db05      	blt.n	801b6cc <lwip_cyclic_timer+0x28>
  } else {
    /* correct cyclic interval with handler execution delay and sys_check_timeouts jitter */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801b6c0:	4618      	mov	r0, r3
 801b6c2:	4906      	ldr	r1, [pc, #24]	; (801b6dc <lwip_cyclic_timer+0x38>)
#endif
  }
}
 801b6c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801b6c8:	f7ff bfb8 	b.w	801b63c <sys_timeout_abs>
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801b6cc:	4408      	add	r0, r1
 801b6ce:	4903      	ldr	r1, [pc, #12]	; (801b6dc <lwip_cyclic_timer+0x38>)
}
 801b6d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801b6d4:	f7ff bfb2 	b.w	801b63c <sys_timeout_abs>
 801b6d8:	2002a434 	.word	0x2002a434
 801b6dc:	0801b6a5 	.word	0x0801b6a5

0801b6e0 <tcpip_tcp_timer>:
{
 801b6e0:	b508      	push	{r3, lr}
  tcp_tmr();
 801b6e2:	f7fc fec7 	bl	8018474 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801b6e6:	4b09      	ldr	r3, [pc, #36]	; (801b70c <tcpip_tcp_timer+0x2c>)
 801b6e8:	681b      	ldr	r3, [r3, #0]
 801b6ea:	b913      	cbnz	r3, 801b6f2 <tcpip_tcp_timer+0x12>
 801b6ec:	4b08      	ldr	r3, [pc, #32]	; (801b710 <tcpip_tcp_timer+0x30>)
 801b6ee:	681b      	ldr	r3, [r3, #0]
 801b6f0:	b143      	cbz	r3, 801b704 <tcpip_tcp_timer+0x24>

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801b6f2:	f7f4 fdd7 	bl	80102a4 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801b6f6:	2200      	movs	r2, #0
 801b6f8:	30fa      	adds	r0, #250	; 0xfa
 801b6fa:	4906      	ldr	r1, [pc, #24]	; (801b714 <tcpip_tcp_timer+0x34>)
}
 801b6fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 801b700:	f7ff bf9c 	b.w	801b63c <sys_timeout_abs>
    tcpip_tcp_timer_active = 0;
 801b704:	4a04      	ldr	r2, [pc, #16]	; (801b718 <tcpip_tcp_timer+0x38>)
 801b706:	6013      	str	r3, [r2, #0]
}
 801b708:	bd08      	pop	{r3, pc}
 801b70a:	bf00      	nop
 801b70c:	2003e2d8 	.word	0x2003e2d8
 801b710:	2003e2e8 	.word	0x2003e2e8
 801b714:	0801b6e1 	.word	0x0801b6e1
 801b718:	2002a43c 	.word	0x2002a43c

0801b71c <tcp_timer_needed>:
{
 801b71c:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801b71e:	4b0b      	ldr	r3, [pc, #44]	; (801b74c <tcp_timer_needed+0x30>)
 801b720:	681a      	ldr	r2, [r3, #0]
 801b722:	b98a      	cbnz	r2, 801b748 <tcp_timer_needed+0x2c>
 801b724:	4a0a      	ldr	r2, [pc, #40]	; (801b750 <tcp_timer_needed+0x34>)
 801b726:	6812      	ldr	r2, [r2, #0]
 801b728:	b152      	cbz	r2, 801b740 <tcp_timer_needed+0x24>
    tcpip_tcp_timer_active = 1;
 801b72a:	2201      	movs	r2, #1
 801b72c:	601a      	str	r2, [r3, #0]
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801b72e:	f7f4 fdb9 	bl	80102a4 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 801b732:	2200      	movs	r2, #0
 801b734:	30fa      	adds	r0, #250	; 0xfa
 801b736:	4907      	ldr	r1, [pc, #28]	; (801b754 <tcp_timer_needed+0x38>)
}
 801b738:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 801b73c:	f7ff bf7e 	b.w	801b63c <sys_timeout_abs>
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801b740:	4a05      	ldr	r2, [pc, #20]	; (801b758 <tcp_timer_needed+0x3c>)
 801b742:	6812      	ldr	r2, [r2, #0]
 801b744:	2a00      	cmp	r2, #0
 801b746:	d1f0      	bne.n	801b72a <tcp_timer_needed+0xe>
}
 801b748:	bd08      	pop	{r3, pc}
 801b74a:	bf00      	nop
 801b74c:	2002a43c 	.word	0x2002a43c
 801b750:	2003e2d8 	.word	0x2003e2d8
 801b754:	0801b6e1 	.word	0x0801b6e1
 801b758:	2003e2e8 	.word	0x2003e2e8

0801b75c <sys_timeout>:
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801b75c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 801b760:	b570      	push	{r4, r5, r6, lr}
 801b762:	4604      	mov	r4, r0
 801b764:	460d      	mov	r5, r1
 801b766:	4616      	mov	r6, r2
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801b768:	d306      	bcc.n	801b778 <sys_timeout+0x1c>
 801b76a:	4b08      	ldr	r3, [pc, #32]	; (801b78c <sys_timeout+0x30>)
 801b76c:	f240 1229 	movw	r2, #297	; 0x129
 801b770:	4907      	ldr	r1, [pc, #28]	; (801b790 <sys_timeout+0x34>)
 801b772:	4808      	ldr	r0, [pc, #32]	; (801b794 <sys_timeout+0x38>)
 801b774:	f005 fa20 	bl	8020bb8 <iprintf>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801b778:	f7f4 fd94 	bl	80102a4 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 801b77c:	4632      	mov	r2, r6
 801b77e:	4629      	mov	r1, r5
 801b780:	4420      	add	r0, r4
#endif
}
 801b782:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 801b786:	f7ff bf59 	b.w	801b63c <sys_timeout_abs>
 801b78a:	bf00      	nop
 801b78c:	0803eeb4 	.word	0x0803eeb4
 801b790:	0803ee7c 	.word	0x0803ee7c
 801b794:	08026bb8 	.word	0x08026bb8

0801b798 <sys_timeouts_init>:
{
 801b798:	b570      	push	{r4, r5, r6, lr}
 801b79a:	4c0a      	ldr	r4, [pc, #40]	; (801b7c4 <sys_timeouts_init+0x2c>)
 801b79c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801b7a0:	4e09      	ldr	r6, [pc, #36]	; (801b7c8 <sys_timeouts_init+0x30>)
 801b7a2:	f104 0520 	add.w	r5, r4, #32
 801b7a6:	4622      	mov	r2, r4
 801b7a8:	4631      	mov	r1, r6
 801b7aa:	f7ff ffd7 	bl	801b75c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801b7ae:	42ac      	cmp	r4, r5
 801b7b0:	d007      	beq.n	801b7c2 <sys_timeouts_init+0x2a>
 801b7b2:	f854 0f08 	ldr.w	r0, [r4, #8]!
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801b7b6:	4631      	mov	r1, r6
 801b7b8:	4622      	mov	r2, r4
 801b7ba:	f7ff ffcf 	bl	801b75c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801b7be:	42ac      	cmp	r4, r5
 801b7c0:	d1f7      	bne.n	801b7b2 <sys_timeouts_init+0x1a>
}
 801b7c2:	bd70      	pop	{r4, r5, r6, pc}
 801b7c4:	0803ee54 	.word	0x0803ee54
 801b7c8:	0801b6a5 	.word	0x0801b6a5

0801b7cc <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 801b7cc:	b430      	push	{r4, r5}
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801b7ce:	4d0d      	ldr	r5, [pc, #52]	; (801b804 <sys_untimeout+0x38>)
 801b7d0:	682b      	ldr	r3, [r5, #0]
 801b7d2:	b19b      	cbz	r3, 801b7fc <sys_untimeout+0x30>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 801b7d4:	2400      	movs	r4, #0
 801b7d6:	e003      	b.n	801b7e0 <sys_untimeout+0x14>
 801b7d8:	681a      	ldr	r2, [r3, #0]
 801b7da:	461c      	mov	r4, r3
 801b7dc:	4613      	mov	r3, r2
 801b7de:	b16a      	cbz	r2, 801b7fc <sys_untimeout+0x30>
    if ((t->h == handler) && (t->arg == arg)) {
 801b7e0:	689a      	ldr	r2, [r3, #8]
 801b7e2:	4282      	cmp	r2, r0
 801b7e4:	d1f8      	bne.n	801b7d8 <sys_untimeout+0xc>
 801b7e6:	68da      	ldr	r2, [r3, #12]
 801b7e8:	428a      	cmp	r2, r1
 801b7ea:	d1f5      	bne.n	801b7d8 <sys_untimeout+0xc>
 801b7ec:	681a      	ldr	r2, [r3, #0]
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 801b7ee:	b13c      	cbz	r4, 801b800 <sys_untimeout+0x34>
        next_timeout = t->next;
      } else {
        prev_t->next = t->next;
 801b7f0:	6022      	str	r2, [r4, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 801b7f2:	4619      	mov	r1, r3
 801b7f4:	200c      	movs	r0, #12
      return;
    }
  }
  return;
}
 801b7f6:	bc30      	pop	{r4, r5}
      memp_free(MEMP_SYS_TIMEOUT, t);
 801b7f8:	f7fa bdac 	b.w	8016354 <memp_free>
}
 801b7fc:	bc30      	pop	{r4, r5}
 801b7fe:	4770      	bx	lr
        next_timeout = t->next;
 801b800:	602a      	str	r2, [r5, #0]
 801b802:	e7f6      	b.n	801b7f2 <sys_untimeout+0x26>
 801b804:	2002a438 	.word	0x2002a438

0801b808 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801b808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801b80c:	f7f4 fd4a 	bl	80102a4 <sys_now>
 801b810:	4c0d      	ldr	r4, [pc, #52]	; (801b848 <sys_check_timeouts+0x40>)
 801b812:	4607      	mov	r7, r0

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 801b814:	f8df 8034 	ldr.w	r8, [pc, #52]	; 801b84c <sys_check_timeouts+0x44>
 801b818:	e00c      	b.n	801b834 <sys_check_timeouts+0x2c>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801b81a:	685a      	ldr	r2, [r3, #4]
 801b81c:	1abd      	subs	r5, r7, r2
 801b81e:	2d00      	cmp	r5, #0
 801b820:	db0d      	blt.n	801b83e <sys_check_timeouts+0x36>
    next_timeout = tmptimeout->next;
 801b822:	681e      	ldr	r6, [r3, #0]
    handler = tmptimeout->h;
 801b824:	689d      	ldr	r5, [r3, #8]
    next_timeout = tmptimeout->next;
 801b826:	6026      	str	r6, [r4, #0]
    current_timeout_due_time = tmptimeout->time;
 801b828:	f8c8 2000 	str.w	r2, [r8]
    arg = tmptimeout->arg;
 801b82c:	68de      	ldr	r6, [r3, #12]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801b82e:	f7fa fd91 	bl	8016354 <memp_free>
    if (handler != NULL) {
 801b832:	b935      	cbnz	r5, 801b842 <sys_check_timeouts+0x3a>
    tmptimeout = next_timeout;
 801b834:	6823      	ldr	r3, [r4, #0]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801b836:	200c      	movs	r0, #12
 801b838:	4619      	mov	r1, r3
    if (tmptimeout == NULL) {
 801b83a:	2b00      	cmp	r3, #0
 801b83c:	d1ed      	bne.n	801b81a <sys_check_timeouts+0x12>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801b83e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      handler(arg);
 801b842:	4630      	mov	r0, r6
 801b844:	47a8      	blx	r5
 801b846:	e7f5      	b.n	801b834 <sys_check_timeouts+0x2c>
 801b848:	2002a438 	.word	0x2002a438
 801b84c:	2002a434 	.word	0x2002a434

0801b850 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801b850:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801b852:	4c07      	ldr	r4, [pc, #28]	; (801b870 <sys_timeouts_sleeptime+0x20>)
 801b854:	6823      	ldr	r3, [r4, #0]
 801b856:	b13b      	cbz	r3, 801b868 <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 801b858:	f7f4 fd24 	bl	80102a4 <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801b85c:	6823      	ldr	r3, [r4, #0]
 801b85e:	685b      	ldr	r3, [r3, #4]
 801b860:	1a18      	subs	r0, r3, r0
    return 0;
 801b862:	bf48      	it	mi
 801b864:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 801b866:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801b868:	f04f 30ff 	mov.w	r0, #4294967295
}
 801b86c:	bd10      	pop	{r4, pc}
 801b86e:	bf00      	nop
 801b870:	2002a438 	.word	0x2002a438

0801b874 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801b874:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801b876:	f005 fa2f 	bl	8020cd8 <rand>
 801b87a:	4b02      	ldr	r3, [pc, #8]	; (801b884 <udp_init+0x10>)
 801b87c:	4a02      	ldr	r2, [pc, #8]	; (801b888 <udp_init+0x14>)
 801b87e:	4303      	orrs	r3, r0
 801b880:	8013      	strh	r3, [r2, #0]
#endif /* LWIP_RAND */
}
 801b882:	bd08      	pop	{r3, pc}
 801b884:	ffffc000 	.word	0xffffc000
 801b888:	200003da 	.word	0x200003da

0801b88c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801b88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b890:	4689      	mov	r9, r1
 801b892:	b085      	sub	sp, #20

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801b894:	4680      	mov	r8, r0
 801b896:	2800      	cmp	r0, #0
 801b898:	f000 80d8 	beq.w	801ba4c <udp_input+0x1c0>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801b89c:	f1b9 0f00 	cmp.w	r9, #0
 801b8a0:	f000 80de 	beq.w	801ba60 <udp_input+0x1d4>

  PERF_START;

  UDP_STATS_INC(udp.recv);
 801b8a4:	4f80      	ldr	r7, [pc, #512]	; (801baa8 <udp_input+0x21c>)

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801b8a6:	f8b8 200a 	ldrh.w	r2, [r8, #10]
  UDP_STATS_INC(udp.recv);
 801b8aa:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
  if (p->len < UDP_HLEN) {
 801b8ae:	2a07      	cmp	r2, #7
  UDP_STATS_INC(udp.recv);
 801b8b0:	f103 0301 	add.w	r3, r3, #1
 801b8b4:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
  if (p->len < UDP_HLEN) {
 801b8b8:	f240 80b1 	bls.w	801ba1e <udp_input+0x192>
  }

  udphdr = (struct udp_hdr *)p->payload;

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801b8bc:	f8df a20c 	ldr.w	sl, [pc, #524]	; 801bacc <udp_input+0x240>
  udphdr = (struct udp_hdr *)p->payload;
 801b8c0:	f8d8 4004 	ldr.w	r4, [r8, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801b8c4:	f8da 1000 	ldr.w	r1, [sl]
 801b8c8:	f8da 0014 	ldr.w	r0, [sl, #20]
 801b8cc:	f002 ff18 	bl	801e700 <ip4_addr_isbroadcast_u32>
 801b8d0:	9002      	str	r0, [sp, #8]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801b8d2:	8820      	ldrh	r0, [r4, #0]
 801b8d4:	f7f9 f9aa 	bl	8014c2c <lwip_htons>
 801b8d8:	9003      	str	r0, [sp, #12]
  dest = lwip_ntohs(udphdr->dest);
 801b8da:	8860      	ldrh	r0, [r4, #2]
 801b8dc:	f7f9 f9a6 	bl	8014c2c <lwip_htons>
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b8e0:	4b72      	ldr	r3, [pc, #456]	; (801baac <udp_input+0x220>)
  dest = lwip_ntohs(udphdr->dest);
 801b8e2:	4605      	mov	r5, r0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b8e4:	681c      	ldr	r4, [r3, #0]
 801b8e6:	2c00      	cmp	r4, #0
 801b8e8:	d070      	beq.n	801b9cc <udp_input+0x140>
  uncon_pcb = NULL;
 801b8ea:	f04f 0b00 	mov.w	fp, #0
  prev = NULL;
 801b8ee:	465e      	mov	r6, fp
 801b8f0:	e004      	b.n	801b8fc <udp_input+0x70>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b8f2:	68e3      	ldr	r3, [r4, #12]
 801b8f4:	4626      	mov	r6, r4
 801b8f6:	2b00      	cmp	r3, #0
 801b8f8:	d065      	beq.n	801b9c6 <udp_input+0x13a>
 801b8fa:	461c      	mov	r4, r3
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801b8fc:	8a63      	ldrh	r3, [r4, #18]
 801b8fe:	42ab      	cmp	r3, r5
 801b900:	d1f7      	bne.n	801b8f2 <udp_input+0x66>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801b902:	f1b9 0f00 	cmp.w	r9, #0
 801b906:	f000 809a 	beq.w	801ba3e <udp_input+0x1b2>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b90a:	7a22      	ldrb	r2, [r4, #8]
 801b90c:	b13a      	cbz	r2, 801b91e <udp_input+0x92>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801b90e:	f8da 3004 	ldr.w	r3, [sl, #4]
 801b912:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801b916:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b918:	b2db      	uxtb	r3, r3
 801b91a:	429a      	cmp	r2, r3
 801b91c:	d1e9      	bne.n	801b8f2 <udp_input+0x66>
    if (broadcast != 0) {
 801b91e:	9a02      	ldr	r2, [sp, #8]
 801b920:	6823      	ldr	r3, [r4, #0]
 801b922:	2a00      	cmp	r2, #0
 801b924:	d045      	beq.n	801b9b2 <udp_input+0x126>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b926:	b143      	cbz	r3, 801b93a <udp_input+0xae>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801b928:	f8da 2014 	ldr.w	r2, [sl, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b92c:	1c51      	adds	r1, r2, #1
 801b92e:	d004      	beq.n	801b93a <udp_input+0xae>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801b930:	405a      	eors	r2, r3
 801b932:	f8d9 1008 	ldr.w	r1, [r9, #8]
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801b936:	420a      	tst	r2, r1
 801b938:	d1db      	bne.n	801b8f2 <udp_input+0x66>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801b93a:	7c22      	ldrb	r2, [r4, #16]
 801b93c:	0752      	lsls	r2, r2, #29
 801b93e:	d412      	bmi.n	801b966 <udp_input+0xda>
        if (uncon_pcb == NULL) {
 801b940:	f1bb 0f00 	cmp.w	fp, #0
 801b944:	f000 8095 	beq.w	801ba72 <udp_input+0x1e6>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801b948:	9a02      	ldr	r2, [sp, #8]
 801b94a:	b162      	cbz	r2, 801b966 <udp_input+0xda>
 801b94c:	f8da 2014 	ldr.w	r2, [sl, #20]
 801b950:	3201      	adds	r2, #1
 801b952:	d108      	bne.n	801b966 <udp_input+0xda>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801b954:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801b958:	f8db 1000 	ldr.w	r1, [fp]
 801b95c:	4291      	cmp	r1, r2
 801b95e:	d002      	beq.n	801b966 <udp_input+0xda>
 801b960:	429a      	cmp	r2, r3
 801b962:	bf08      	it	eq
 801b964:	46a3      	moveq	fp, r4
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801b966:	8aa3      	ldrh	r3, [r4, #20]
 801b968:	9a03      	ldr	r2, [sp, #12]
 801b96a:	4293      	cmp	r3, r2
 801b96c:	d1c1      	bne.n	801b8f2 <udp_input+0x66>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801b96e:	6863      	ldr	r3, [r4, #4]
      if ((pcb->remote_port == src) &&
 801b970:	b11b      	cbz	r3, 801b97a <udp_input+0xee>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801b972:	f8da 2010 	ldr.w	r2, [sl, #16]
 801b976:	4293      	cmp	r3, r2
 801b978:	d1bb      	bne.n	801b8f2 <udp_input+0x66>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
        /* the first fully matching PCB */
        if (prev != NULL) {
 801b97a:	2e00      	cmp	r6, #0
 801b97c:	f000 808c 	beq.w	801ba98 <udp_input+0x20c>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
          pcb->next = udp_pcbs;
 801b980:	494a      	ldr	r1, [pc, #296]	; (801baac <udp_input+0x220>)
          prev->next = pcb->next;
 801b982:	68e2      	ldr	r2, [r4, #12]
          pcb->next = udp_pcbs;
 801b984:	680b      	ldr	r3, [r1, #0]
          prev->next = pcb->next;
 801b986:	60f2      	str	r2, [r6, #12]
          udp_pcbs = pcb;
 801b988:	600c      	str	r4, [r1, #0]
          pcb->next = udp_pcbs;
 801b98a:	60e3      	str	r3, [r4, #12]
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801b98c:	2108      	movs	r1, #8
 801b98e:	4640      	mov	r0, r8
 801b990:	f7fa ff7e 	bl	8016890 <pbuf_remove_header>
 801b994:	2800      	cmp	r0, #0
 801b996:	d173      	bne.n	801ba80 <udp_input+0x1f4>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801b998:	69a5      	ldr	r5, [r4, #24]
 801b99a:	2d00      	cmp	r5, #0
 801b99c:	d067      	beq.n	801ba6e <udp_input+0x1e2>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801b99e:	9b03      	ldr	r3, [sp, #12]
 801b9a0:	4642      	mov	r2, r8
 801b9a2:	69e0      	ldr	r0, [r4, #28]
 801b9a4:	4621      	mov	r1, r4
 801b9a6:	9300      	str	r3, [sp, #0]
 801b9a8:	4b41      	ldr	r3, [pc, #260]	; (801bab0 <udp_input+0x224>)
 801b9aa:	47a8      	blx	r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801b9ac:	b005      	add	sp, #20
 801b9ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801b9b2:	2b00      	cmp	r3, #0
 801b9b4:	d0c1      	beq.n	801b93a <udp_input+0xae>
 801b9b6:	f8da 2014 	ldr.w	r2, [sl, #20]
 801b9ba:	429a      	cmp	r2, r3
 801b9bc:	d0bd      	beq.n	801b93a <udp_input+0xae>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b9be:	68e3      	ldr	r3, [r4, #12]
 801b9c0:	4626      	mov	r6, r4
 801b9c2:	2b00      	cmp	r3, #0
 801b9c4:	d199      	bne.n	801b8fa <udp_input+0x6e>
  if (pcb != NULL) {
 801b9c6:	f1bb 0f00 	cmp.w	fp, #0
 801b9ca:	d16b      	bne.n	801baa4 <udp_input+0x218>
  if (for_us) {
 801b9cc:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801b9d0:	f8da 3014 	ldr.w	r3, [sl, #20]
 801b9d4:	429a      	cmp	r2, r3
 801b9d6:	d14a      	bne.n	801ba6e <udp_input+0x1e2>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801b9d8:	2108      	movs	r1, #8
 801b9da:	4640      	mov	r0, r8
 801b9dc:	f7fa ff58 	bl	8016890 <pbuf_remove_header>
 801b9e0:	2800      	cmp	r0, #0
 801b9e2:	d14d      	bne.n	801ba80 <udp_input+0x1f4>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801b9e4:	9b02      	ldr	r3, [sp, #8]
 801b9e6:	b983      	cbnz	r3, 801ba0a <udp_input+0x17e>
 801b9e8:	f8da 3014 	ldr.w	r3, [sl, #20]
 801b9ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801b9f0:	2be0      	cmp	r3, #224	; 0xe0
 801b9f2:	d00a      	beq.n	801ba0a <udp_input+0x17e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801b9f4:	f8ba 100c 	ldrh.w	r1, [sl, #12]
 801b9f8:	4640      	mov	r0, r8
 801b9fa:	3108      	adds	r1, #8
 801b9fc:	b209      	sxth	r1, r1
 801b9fe:	f7fa ff7b 	bl	80168f8 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801ba02:	2103      	movs	r1, #3
 801ba04:	4640      	mov	r0, r8
 801ba06:	f002 fc2f 	bl	801e268 <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
 801ba0a:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
      pbuf_free(p);
 801ba0e:	4640      	mov	r0, r8
      UDP_STATS_INC(udp.drop);
 801ba10:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
      UDP_STATS_INC(udp.proterr);
 801ba14:	3201      	adds	r2, #1
      UDP_STATS_INC(udp.drop);
 801ba16:	3301      	adds	r3, #1
      UDP_STATS_INC(udp.proterr);
 801ba18:	f8a7 2088 	strh.w	r2, [r7, #136]	; 0x88
 801ba1c:	e008      	b.n	801ba30 <udp_input+0x1a4>
    UDP_STATS_INC(udp.lenerr);
 801ba1e:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
    pbuf_free(p);
 801ba22:	4640      	mov	r0, r8
    UDP_STATS_INC(udp.drop);
 801ba24:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
    UDP_STATS_INC(udp.lenerr);
 801ba28:	3201      	adds	r2, #1
    UDP_STATS_INC(udp.drop);
 801ba2a:	3301      	adds	r3, #1
    UDP_STATS_INC(udp.lenerr);
 801ba2c:	f8a7 2082 	strh.w	r2, [r7, #130]	; 0x82
      UDP_STATS_INC(udp.drop);
 801ba30:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
}
 801ba34:	b005      	add	sp, #20
 801ba36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 801ba3a:	f7fa bf65 	b.w	8016908 <pbuf_free>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801ba3e:	4b1d      	ldr	r3, [pc, #116]	; (801bab4 <udp_input+0x228>)
 801ba40:	2288      	movs	r2, #136	; 0x88
 801ba42:	491d      	ldr	r1, [pc, #116]	; (801bab8 <udp_input+0x22c>)
 801ba44:	481d      	ldr	r0, [pc, #116]	; (801babc <udp_input+0x230>)
 801ba46:	f005 f8b7 	bl	8020bb8 <iprintf>
 801ba4a:	e75e      	b.n	801b90a <udp_input+0x7e>
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801ba4c:	4b19      	ldr	r3, [pc, #100]	; (801bab4 <udp_input+0x228>)
 801ba4e:	22cf      	movs	r2, #207	; 0xcf
 801ba50:	491b      	ldr	r1, [pc, #108]	; (801bac0 <udp_input+0x234>)
 801ba52:	481a      	ldr	r0, [pc, #104]	; (801babc <udp_input+0x230>)
 801ba54:	f005 f8b0 	bl	8020bb8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801ba58:	f1b9 0f00 	cmp.w	r9, #0
 801ba5c:	f47f af22 	bne.w	801b8a4 <udp_input+0x18>
 801ba60:	4b14      	ldr	r3, [pc, #80]	; (801bab4 <udp_input+0x228>)
 801ba62:	22d0      	movs	r2, #208	; 0xd0
 801ba64:	4917      	ldr	r1, [pc, #92]	; (801bac4 <udp_input+0x238>)
 801ba66:	4815      	ldr	r0, [pc, #84]	; (801babc <udp_input+0x230>)
 801ba68:	f005 f8a6 	bl	8020bb8 <iprintf>
 801ba6c:	e71a      	b.n	801b8a4 <udp_input+0x18>
        pbuf_free(p);
 801ba6e:	4640      	mov	r0, r8
 801ba70:	e7e0      	b.n	801ba34 <udp_input+0x1a8>
      if ((pcb->remote_port == src) &&
 801ba72:	8aa3      	ldrh	r3, [r4, #20]
 801ba74:	46a3      	mov	fp, r4
 801ba76:	9a03      	ldr	r2, [sp, #12]
 801ba78:	4293      	cmp	r3, r2
 801ba7a:	f47f af3a 	bne.w	801b8f2 <udp_input+0x66>
 801ba7e:	e776      	b.n	801b96e <udp_input+0xe2>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801ba80:	4b0c      	ldr	r3, [pc, #48]	; (801bab4 <udp_input+0x228>)
 801ba82:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801ba86:	4910      	ldr	r1, [pc, #64]	; (801bac8 <udp_input+0x23c>)
 801ba88:	480c      	ldr	r0, [pc, #48]	; (801babc <udp_input+0x230>)
 801ba8a:	f005 f895 	bl	8020bb8 <iprintf>
      UDP_STATS_INC(udp.drop);
 801ba8e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
      pbuf_free(p);
 801ba92:	4640      	mov	r0, r8
      UDP_STATS_INC(udp.drop);
 801ba94:	3301      	adds	r3, #1
 801ba96:	e7cb      	b.n	801ba30 <udp_input+0x1a4>
          UDP_STATS_INC(udp.cachehit);
 801ba98:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 801ba9c:	3301      	adds	r3, #1
 801ba9e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 801baa2:	e773      	b.n	801b98c <udp_input+0x100>
 801baa4:	465c      	mov	r4, fp
 801baa6:	e771      	b.n	801b98c <udp_input+0x100>
 801baa8:	2003e1cc 	.word	0x2003e1cc
 801baac:	2003e2f0 	.word	0x2003e2f0
 801bab0:	2002eae4 	.word	0x2002eae4
 801bab4:	0803ef78 	.word	0x0803ef78
 801bab8:	0803efdc 	.word	0x0803efdc
 801babc:	08026bb8 	.word	0x08026bb8
 801bac0:	0803efa8 	.word	0x0803efa8
 801bac4:	0803efc0 	.word	0x0803efc0
 801bac8:	0803f004 	.word	0x0803f004
 801bacc:	2002ead4 	.word	0x2002ead4

0801bad0 <udp_bind>:
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 801bad0:	4b39      	ldr	r3, [pc, #228]	; (801bbb8 <udp_bind+0xe8>)
{
 801bad2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ipaddr = IP4_ADDR_ANY;
 801bad6:	2900      	cmp	r1, #0
 801bad8:	bf08      	it	eq
 801bada:	4619      	moveq	r1, r3
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801badc:	2800      	cmp	r0, #0
 801bade:	d060      	beq.n	801bba2 <udp_bind+0xd2>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801bae0:	4f36      	ldr	r7, [pc, #216]	; (801bbbc <udp_bind+0xec>)
 801bae2:	683e      	ldr	r6, [r7, #0]
 801bae4:	b1fe      	cbz	r6, 801bb26 <udp_bind+0x56>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801bae6:	42b0      	cmp	r0, r6
 801bae8:	d048      	beq.n	801bb7c <udp_bind+0xac>
 801baea:	4634      	mov	r4, r6
 801baec:	e001      	b.n	801baf2 <udp_bind+0x22>
 801baee:	42a0      	cmp	r0, r4
 801baf0:	d044      	beq.n	801bb7c <udp_bind+0xac>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801baf2:	68e4      	ldr	r4, [r4, #12]
 801baf4:	2c00      	cmp	r4, #0
 801baf6:	d1fa      	bne.n	801baee <udp_bind+0x1e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801baf8:	b1c2      	cbz	r2, 801bb2c <udp_bind+0x5c>
 801bafa:	680d      	ldr	r5, [r1, #0]
 801bafc:	4633      	mov	r3, r6
 801bafe:	e001      	b.n	801bb04 <udp_bind+0x34>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801bb00:	68db      	ldr	r3, [r3, #12]
 801bb02:	b373      	cbz	r3, 801bb62 <udp_bind+0x92>
      if (pcb != ipcb) {
 801bb04:	4298      	cmp	r0, r3
 801bb06:	d0fb      	beq.n	801bb00 <udp_bind+0x30>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801bb08:	8a59      	ldrh	r1, [r3, #18]
 801bb0a:	4291      	cmp	r1, r2
 801bb0c:	d1f8      	bne.n	801bb00 <udp_bind+0x30>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801bb0e:	6819      	ldr	r1, [r3, #0]
              ip_addr_isany(&ipcb->local_ip))) {
 801bb10:	42a9      	cmp	r1, r5
 801bb12:	bf18      	it	ne
 801bb14:	2900      	cmpne	r1, #0
 801bb16:	d001      	beq.n	801bb1c <udp_bind+0x4c>
 801bb18:	2d00      	cmp	r5, #0
 801bb1a:	d1f1      	bne.n	801bb00 <udp_bind+0x30>
      return ERR_USE;
 801bb1c:	f06f 0307 	mvn.w	r3, #7
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
}
 801bb20:	4618      	mov	r0, r3
 801bb22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (port == 0) {
 801bb26:	2a00      	cmp	r2, #0
 801bb28:	d137      	bne.n	801bb9a <udp_bind+0xca>
  rebind = 0;
 801bb2a:	4634      	mov	r4, r6
 801bb2c:	f8df 809c 	ldr.w	r8, [pc, #156]	; 801bbcc <udp_bind+0xfc>
again:
 801bb30:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801bb34:	f64f 7eff 	movw	lr, #65535	; 0xffff
 801bb38:	f8b8 2000 	ldrh.w	r2, [r8]
 801bb3c:	4572      	cmp	r2, lr
 801bb3e:	d029      	beq.n	801bb94 <udp_bind+0xc4>
 801bb40:	3201      	adds	r2, #1
 801bb42:	b292      	uxth	r2, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801bb44:	b156      	cbz	r6, 801bb5c <udp_bind+0x8c>
    if (pcb->local_port == udp_port) {
 801bb46:	8a73      	ldrh	r3, [r6, #18]
 801bb48:	4293      	cmp	r3, r2
 801bb4a:	d019      	beq.n	801bb80 <udp_bind+0xb0>
 801bb4c:	4633      	mov	r3, r6
 801bb4e:	e002      	b.n	801bb56 <udp_bind+0x86>
 801bb50:	8a5d      	ldrh	r5, [r3, #18]
 801bb52:	4295      	cmp	r5, r2
 801bb54:	d014      	beq.n	801bb80 <udp_bind+0xb0>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801bb56:	68db      	ldr	r3, [r3, #12]
 801bb58:	2b00      	cmp	r3, #0
 801bb5a:	d1f9      	bne.n	801bb50 <udp_bind+0x80>
 801bb5c:	680d      	ldr	r5, [r1, #0]
 801bb5e:	f8a8 2000 	strh.w	r2, [r8]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801bb62:	6005      	str	r5, [r0, #0]
  pcb->local_port = port;
 801bb64:	8242      	strh	r2, [r0, #18]
  if (rebind == 0) {
 801bb66:	b92c      	cbnz	r4, 801bb74 <udp_bind+0xa4>
  return ERR_OK;
 801bb68:	2300      	movs	r3, #0
    pcb->next = udp_pcbs;
 801bb6a:	60c6      	str	r6, [r0, #12]
    udp_pcbs = pcb;
 801bb6c:	6038      	str	r0, [r7, #0]
}
 801bb6e:	4618      	mov	r0, r3
 801bb70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ERR_OK;
 801bb74:	2300      	movs	r3, #0
}
 801bb76:	4618      	mov	r0, r3
 801bb78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      rebind = 1;
 801bb7c:	2401      	movs	r4, #1
 801bb7e:	e7bb      	b.n	801baf8 <udp_bind+0x28>
 801bb80:	f10c 3cff 	add.w	ip, ip, #4294967295
 801bb84:	fa1f fc8c 	uxth.w	ip, ip
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801bb88:	f1bc 0f00 	cmp.w	ip, #0
 801bb8c:	d1d6      	bne.n	801bb3c <udp_bind+0x6c>
 801bb8e:	f8a8 2000 	strh.w	r2, [r8]
 801bb92:	e7c3      	b.n	801bb1c <udp_bind+0x4c>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801bb94:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801bb98:	e7d4      	b.n	801bb44 <udp_bind+0x74>
 801bb9a:	680b      	ldr	r3, [r1, #0]
  pcb->local_port = port;
 801bb9c:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801bb9e:	6003      	str	r3, [r0, #0]
 801bba0:	e7e2      	b.n	801bb68 <udp_bind+0x98>
  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801bba2:	4b07      	ldr	r3, [pc, #28]	; (801bbc0 <udp_bind+0xf0>)
 801bba4:	f240 32b7 	movw	r2, #951	; 0x3b7
 801bba8:	4906      	ldr	r1, [pc, #24]	; (801bbc4 <udp_bind+0xf4>)
 801bbaa:	4807      	ldr	r0, [pc, #28]	; (801bbc8 <udp_bind+0xf8>)
 801bbac:	f005 f804 	bl	8020bb8 <iprintf>
 801bbb0:	f06f 030f 	mvn.w	r3, #15
 801bbb4:	e7db      	b.n	801bb6e <udp_bind+0x9e>
 801bbb6:	bf00      	nop
 801bbb8:	0803f8a8 	.word	0x0803f8a8
 801bbbc:	2003e2f0 	.word	0x2003e2f0
 801bbc0:	0803ef78 	.word	0x0803ef78
 801bbc4:	0803ef28 	.word	0x0803ef28
 801bbc8:	08026bb8 	.word	0x08026bb8
 801bbcc:	200003da 	.word	0x200003da

0801bbd0 <udp_sendto_if_src>:
{
 801bbd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bbd4:	b085      	sub	sp, #20
 801bbd6:	e9dd a90e 	ldrd	sl, r9, [sp, #56]	; 0x38
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801bbda:	2800      	cmp	r0, #0
 801bbdc:	d07e      	beq.n	801bcdc <udp_sendto_if_src+0x10c>
 801bbde:	460c      	mov	r4, r1
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801bbe0:	2900      	cmp	r1, #0
 801bbe2:	d071      	beq.n	801bcc8 <udp_sendto_if_src+0xf8>
 801bbe4:	4690      	mov	r8, r2
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801bbe6:	2a00      	cmp	r2, #0
 801bbe8:	f000 8082 	beq.w	801bcf0 <udp_sendto_if_src+0x120>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801bbec:	f1b9 0f00 	cmp.w	r9, #0
 801bbf0:	f000 8092 	beq.w	801bd18 <udp_sendto_if_src+0x148>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801bbf4:	f1ba 0f00 	cmp.w	sl, #0
 801bbf8:	f000 8084 	beq.w	801bd04 <udp_sendto_if_src+0x134>
  if (pcb->local_port == 0) {
 801bbfc:	8a42      	ldrh	r2, [r0, #18]
 801bbfe:	469b      	mov	fp, r3
 801bc00:	4607      	mov	r7, r0
 801bc02:	2a00      	cmp	r2, #0
 801bc04:	d03c      	beq.n	801bc80 <udp_sendto_if_src+0xb0>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801bc06:	8922      	ldrh	r2, [r4, #8]
 801bc08:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 801bc0c:	429a      	cmp	r2, r3
 801bc0e:	d858      	bhi.n	801bcc2 <udp_sendto_if_src+0xf2>
  if (pbuf_add_header(p, UDP_HLEN)) {
 801bc10:	2108      	movs	r1, #8
 801bc12:	4620      	mov	r0, r4
 801bc14:	f7fa fe38 	bl	8016888 <pbuf_add_header>
 801bc18:	2800      	cmp	r0, #0
 801bc1a:	d13b      	bne.n	801bc94 <udp_sendto_if_src+0xc4>
 801bc1c:	4625      	mov	r5, r4
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801bc1e:	896b      	ldrh	r3, [r5, #10]
 801bc20:	2b07      	cmp	r3, #7
 801bc22:	d946      	bls.n	801bcb2 <udp_sendto_if_src+0xe2>
  udphdr = (struct udp_hdr *)q->payload;
 801bc24:	686e      	ldr	r6, [r5, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 801bc26:	8a78      	ldrh	r0, [r7, #18]
 801bc28:	f7f9 f800 	bl	8014c2c <lwip_htons>
 801bc2c:	8030      	strh	r0, [r6, #0]
  udphdr->dest = lwip_htons(dst_port);
 801bc2e:	4658      	mov	r0, fp
 801bc30:	f7f8 fffc 	bl	8014c2c <lwip_htons>
  udphdr->chksum = 0x0000;
 801bc34:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 801bc36:	8070      	strh	r0, [r6, #2]
  udphdr->chksum = 0x0000;
 801bc38:	71b3      	strb	r3, [r6, #6]
 801bc3a:	71f3      	strb	r3, [r6, #7]
    udphdr->len = lwip_htons(q->tot_len);
 801bc3c:	8928      	ldrh	r0, [r5, #8]
 801bc3e:	f7f8 fff5 	bl	8014c2c <lwip_htons>
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801bc42:	f04f 0c11 	mov.w	ip, #17
    udphdr->len = lwip_htons(q->tot_len);
 801bc46:	80b0      	strh	r0, [r6, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801bc48:	4642      	mov	r2, r8
 801bc4a:	7afb      	ldrb	r3, [r7, #11]
 801bc4c:	4649      	mov	r1, r9
 801bc4e:	f8cd a008 	str.w	sl, [sp, #8]
 801bc52:	4628      	mov	r0, r5
 801bc54:	f8cd c004 	str.w	ip, [sp, #4]
 801bc58:	7abe      	ldrb	r6, [r7, #10]
 801bc5a:	9600      	str	r6, [sp, #0]
 801bc5c:	f002 fc90 	bl	801e580 <ip4_output_if_src>
  if (q != p) {
 801bc60:	42a5      	cmp	r5, r4
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801bc62:	4606      	mov	r6, r0
  if (q != p) {
 801bc64:	d002      	beq.n	801bc6c <udp_sendto_if_src+0x9c>
    pbuf_free(q);
 801bc66:	4628      	mov	r0, r5
 801bc68:	f7fa fe4e 	bl	8016908 <pbuf_free>
  UDP_STATS_INC(udp.xmit);
 801bc6c:	4a2f      	ldr	r2, [pc, #188]	; (801bd2c <udp_sendto_if_src+0x15c>)
 801bc6e:	f8b2 3078 	ldrh.w	r3, [r2, #120]	; 0x78
 801bc72:	3301      	adds	r3, #1
 801bc74:	f8a2 3078 	strh.w	r3, [r2, #120]	; 0x78
}
 801bc78:	4630      	mov	r0, r6
 801bc7a:	b005      	add	sp, #20
 801bc7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801bc80:	4601      	mov	r1, r0
 801bc82:	f7ff ff25 	bl	801bad0 <udp_bind>
    if (err != ERR_OK) {
 801bc86:	4606      	mov	r6, r0
 801bc88:	2800      	cmp	r0, #0
 801bc8a:	d0bc      	beq.n	801bc06 <udp_sendto_if_src+0x36>
}
 801bc8c:	4630      	mov	r0, r6
 801bc8e:	b005      	add	sp, #20
 801bc90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801bc94:	f44f 7220 	mov.w	r2, #640	; 0x280
 801bc98:	2108      	movs	r1, #8
 801bc9a:	2022      	movs	r0, #34	; 0x22
 801bc9c:	f7fa fea2 	bl	80169e4 <pbuf_alloc>
    if (q == NULL) {
 801bca0:	4605      	mov	r5, r0
 801bca2:	b170      	cbz	r0, 801bcc2 <udp_sendto_if_src+0xf2>
    if (p->tot_len != 0) {
 801bca4:	8923      	ldrh	r3, [r4, #8]
 801bca6:	2b00      	cmp	r3, #0
 801bca8:	d0b9      	beq.n	801bc1e <udp_sendto_if_src+0x4e>
      pbuf_chain(q, p);
 801bcaa:	4621      	mov	r1, r4
 801bcac:	f7fa fff8 	bl	8016ca0 <pbuf_chain>
 801bcb0:	e7b5      	b.n	801bc1e <udp_sendto_if_src+0x4e>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801bcb2:	4b1f      	ldr	r3, [pc, #124]	; (801bd30 <udp_sendto_if_src+0x160>)
 801bcb4:	f240 320e 	movw	r2, #782	; 0x30e
 801bcb8:	491e      	ldr	r1, [pc, #120]	; (801bd34 <udp_sendto_if_src+0x164>)
 801bcba:	481f      	ldr	r0, [pc, #124]	; (801bd38 <udp_sendto_if_src+0x168>)
 801bcbc:	f004 ff7c 	bl	8020bb8 <iprintf>
 801bcc0:	e7b0      	b.n	801bc24 <udp_sendto_if_src+0x54>
    return ERR_MEM;
 801bcc2:	f04f 36ff 	mov.w	r6, #4294967295
 801bcc6:	e7d7      	b.n	801bc78 <udp_sendto_if_src+0xa8>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801bcc8:	4b19      	ldr	r3, [pc, #100]	; (801bd30 <udp_sendto_if_src+0x160>)
 801bcca:	f240 22d2 	movw	r2, #722	; 0x2d2
 801bcce:	491b      	ldr	r1, [pc, #108]	; (801bd3c <udp_sendto_if_src+0x16c>)
 801bcd0:	f06f 060f 	mvn.w	r6, #15
 801bcd4:	4818      	ldr	r0, [pc, #96]	; (801bd38 <udp_sendto_if_src+0x168>)
 801bcd6:	f004 ff6f 	bl	8020bb8 <iprintf>
 801bcda:	e7cd      	b.n	801bc78 <udp_sendto_if_src+0xa8>
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801bcdc:	4b14      	ldr	r3, [pc, #80]	; (801bd30 <udp_sendto_if_src+0x160>)
 801bcde:	f240 22d1 	movw	r2, #721	; 0x2d1
 801bce2:	4917      	ldr	r1, [pc, #92]	; (801bd40 <udp_sendto_if_src+0x170>)
 801bce4:	f06f 060f 	mvn.w	r6, #15
 801bce8:	4813      	ldr	r0, [pc, #76]	; (801bd38 <udp_sendto_if_src+0x168>)
 801bcea:	f004 ff65 	bl	8020bb8 <iprintf>
 801bcee:	e7c3      	b.n	801bc78 <udp_sendto_if_src+0xa8>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801bcf0:	4b0f      	ldr	r3, [pc, #60]	; (801bd30 <udp_sendto_if_src+0x160>)
 801bcf2:	f240 22d3 	movw	r2, #723	; 0x2d3
 801bcf6:	4913      	ldr	r1, [pc, #76]	; (801bd44 <udp_sendto_if_src+0x174>)
 801bcf8:	f06f 060f 	mvn.w	r6, #15
 801bcfc:	480e      	ldr	r0, [pc, #56]	; (801bd38 <udp_sendto_if_src+0x168>)
 801bcfe:	f004 ff5b 	bl	8020bb8 <iprintf>
 801bd02:	e7b9      	b.n	801bc78 <udp_sendto_if_src+0xa8>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801bd04:	4b0a      	ldr	r3, [pc, #40]	; (801bd30 <udp_sendto_if_src+0x160>)
 801bd06:	f240 22d5 	movw	r2, #725	; 0x2d5
 801bd0a:	490f      	ldr	r1, [pc, #60]	; (801bd48 <udp_sendto_if_src+0x178>)
 801bd0c:	f06f 060f 	mvn.w	r6, #15
 801bd10:	4809      	ldr	r0, [pc, #36]	; (801bd38 <udp_sendto_if_src+0x168>)
 801bd12:	f004 ff51 	bl	8020bb8 <iprintf>
 801bd16:	e7af      	b.n	801bc78 <udp_sendto_if_src+0xa8>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801bd18:	4b05      	ldr	r3, [pc, #20]	; (801bd30 <udp_sendto_if_src+0x160>)
 801bd1a:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801bd1e:	490b      	ldr	r1, [pc, #44]	; (801bd4c <udp_sendto_if_src+0x17c>)
 801bd20:	f06f 060f 	mvn.w	r6, #15
 801bd24:	4804      	ldr	r0, [pc, #16]	; (801bd38 <udp_sendto_if_src+0x168>)
 801bd26:	f004 ff47 	bl	8020bb8 <iprintf>
 801bd2a:	e7a5      	b.n	801bc78 <udp_sendto_if_src+0xa8>
 801bd2c:	2003e1cc 	.word	0x2003e1cc
 801bd30:	0803ef78 	.word	0x0803ef78
 801bd34:	0803f1c4 	.word	0x0803f1c4
 801bd38:	08026bb8 	.word	0x08026bb8
 801bd3c:	0803f138 	.word	0x0803f138
 801bd40:	0803f118 	.word	0x0803f118
 801bd44:	0803f158 	.word	0x0803f158
 801bd48:	0803f1a0 	.word	0x0803f1a0
 801bd4c:	0803f17c 	.word	0x0803f17c

0801bd50 <udp_sendto_if>:
{
 801bd50:	b570      	push	{r4, r5, r6, lr}
 801bd52:	b082      	sub	sp, #8
 801bd54:	9c06      	ldr	r4, [sp, #24]
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801bd56:	b358      	cbz	r0, 801bdb0 <udp_sendto_if+0x60>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801bd58:	b301      	cbz	r1, 801bd9c <udp_sendto_if+0x4c>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801bd5a:	b1aa      	cbz	r2, 801bd88 <udp_sendto_if+0x38>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801bd5c:	b394      	cbz	r4, 801bdc4 <udp_sendto_if+0x74>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801bd5e:	6805      	ldr	r5, [r0, #0]
 801bd60:	b935      	cbnz	r5, 801bd70 <udp_sendto_if+0x20>
      src_ip = netif_ip_addr4(netif);
 801bd62:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801bd64:	e9cd 4500 	strd	r4, r5, [sp]
 801bd68:	f7ff ff32 	bl	801bbd0 <udp_sendto_if_src>
}
 801bd6c:	b002      	add	sp, #8
 801bd6e:	bd70      	pop	{r4, r5, r6, pc}
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801bd70:	f005 06f0 	and.w	r6, r5, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801bd74:	2ee0      	cmp	r6, #224	; 0xe0
 801bd76:	d0f4      	beq.n	801bd62 <udp_sendto_if+0x12>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801bd78:	6866      	ldr	r6, [r4, #4]
 801bd7a:	42b5      	cmp	r5, r6
 801bd7c:	d101      	bne.n	801bd82 <udp_sendto_if+0x32>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801bd7e:	4605      	mov	r5, r0
 801bd80:	e7f0      	b.n	801bd64 <udp_sendto_if+0x14>
        return ERR_RTE;
 801bd82:	f06f 0003 	mvn.w	r0, #3
 801bd86:	e7f1      	b.n	801bd6c <udp_sendto_if+0x1c>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801bd88:	4b13      	ldr	r3, [pc, #76]	; (801bdd8 <udp_sendto_if+0x88>)
 801bd8a:	f240 2282 	movw	r2, #642	; 0x282
 801bd8e:	4913      	ldr	r1, [pc, #76]	; (801bddc <udp_sendto_if+0x8c>)
 801bd90:	4813      	ldr	r0, [pc, #76]	; (801bde0 <udp_sendto_if+0x90>)
 801bd92:	f004 ff11 	bl	8020bb8 <iprintf>
 801bd96:	f06f 000f 	mvn.w	r0, #15
 801bd9a:	e7e7      	b.n	801bd6c <udp_sendto_if+0x1c>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801bd9c:	4b0e      	ldr	r3, [pc, #56]	; (801bdd8 <udp_sendto_if+0x88>)
 801bd9e:	f240 2281 	movw	r2, #641	; 0x281
 801bda2:	4910      	ldr	r1, [pc, #64]	; (801bde4 <udp_sendto_if+0x94>)
 801bda4:	480e      	ldr	r0, [pc, #56]	; (801bde0 <udp_sendto_if+0x90>)
 801bda6:	f004 ff07 	bl	8020bb8 <iprintf>
 801bdaa:	f06f 000f 	mvn.w	r0, #15
 801bdae:	e7dd      	b.n	801bd6c <udp_sendto_if+0x1c>
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801bdb0:	4b09      	ldr	r3, [pc, #36]	; (801bdd8 <udp_sendto_if+0x88>)
 801bdb2:	f44f 7220 	mov.w	r2, #640	; 0x280
 801bdb6:	490c      	ldr	r1, [pc, #48]	; (801bde8 <udp_sendto_if+0x98>)
 801bdb8:	4809      	ldr	r0, [pc, #36]	; (801bde0 <udp_sendto_if+0x90>)
 801bdba:	f004 fefd 	bl	8020bb8 <iprintf>
 801bdbe:	f06f 000f 	mvn.w	r0, #15
 801bdc2:	e7d3      	b.n	801bd6c <udp_sendto_if+0x1c>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801bdc4:	4b04      	ldr	r3, [pc, #16]	; (801bdd8 <udp_sendto_if+0x88>)
 801bdc6:	f240 2283 	movw	r2, #643	; 0x283
 801bdca:	4908      	ldr	r1, [pc, #32]	; (801bdec <udp_sendto_if+0x9c>)
 801bdcc:	4804      	ldr	r0, [pc, #16]	; (801bde0 <udp_sendto_if+0x90>)
 801bdce:	f004 fef3 	bl	8020bb8 <iprintf>
 801bdd2:	f06f 000f 	mvn.w	r0, #15
 801bdd6:	e7c9      	b.n	801bd6c <udp_sendto_if+0x1c>
 801bdd8:	0803ef78 	.word	0x0803ef78
 801bddc:	0803f0d8 	.word	0x0803f0d8
 801bde0:	08026bb8 	.word	0x08026bb8
 801bde4:	0803f0bc 	.word	0x0803f0bc
 801bde8:	0803f0a0 	.word	0x0803f0a0
 801bdec:	0803f0f8 	.word	0x0803f0f8

0801bdf0 <udp_sendto>:
{
 801bdf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bdf2:	b083      	sub	sp, #12
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801bdf4:	b3a0      	cbz	r0, 801be60 <udp_sendto+0x70>
 801bdf6:	460e      	mov	r6, r1
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801bdf8:	b341      	cbz	r1, 801be4c <udp_sendto+0x5c>
 801bdfa:	4615      	mov	r5, r2
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801bdfc:	b1e2      	cbz	r2, 801be38 <udp_sendto+0x48>
 801bdfe:	4604      	mov	r4, r0
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801be00:	7a00      	ldrb	r0, [r0, #8]
 801be02:	461f      	mov	r7, r3
 801be04:	b158      	cbz	r0, 801be1e <udp_sendto+0x2e>
    netif = netif_get_by_index(pcb->netif_idx);
 801be06:	f7fa fc99 	bl	801673c <netif_get_by_index>
  if (netif == NULL) {
 801be0a:	b160      	cbz	r0, 801be26 <udp_sendto+0x36>
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801be0c:	9000      	str	r0, [sp, #0]
 801be0e:	463b      	mov	r3, r7
 801be10:	462a      	mov	r2, r5
 801be12:	4631      	mov	r1, r6
 801be14:	4620      	mov	r0, r4
 801be16:	f7ff ff9b 	bl	801bd50 <udp_sendto_if>
}
 801be1a:	b003      	add	sp, #12
 801be1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      netif = ip_route(&pcb->local_ip, dst_ip);
 801be1e:	4610      	mov	r0, r2
 801be20:	f002 fa44 	bl	801e2ac <ip4_route>
 801be24:	e7f1      	b.n	801be0a <udp_sendto+0x1a>
    UDP_STATS_INC(udp.rterr);
 801be26:	4a13      	ldr	r2, [pc, #76]	; (801be74 <udp_sendto+0x84>)
    return ERR_RTE;
 801be28:	f06f 0003 	mvn.w	r0, #3
    UDP_STATS_INC(udp.rterr);
 801be2c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 801be30:	3301      	adds	r3, #1
 801be32:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
    return ERR_RTE;
 801be36:	e7f0      	b.n	801be1a <udp_sendto+0x2a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801be38:	4b0f      	ldr	r3, [pc, #60]	; (801be78 <udp_sendto+0x88>)
 801be3a:	f240 221a 	movw	r2, #538	; 0x21a
 801be3e:	490f      	ldr	r1, [pc, #60]	; (801be7c <udp_sendto+0x8c>)
 801be40:	480f      	ldr	r0, [pc, #60]	; (801be80 <udp_sendto+0x90>)
 801be42:	f004 feb9 	bl	8020bb8 <iprintf>
 801be46:	f06f 000f 	mvn.w	r0, #15
 801be4a:	e7e6      	b.n	801be1a <udp_sendto+0x2a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801be4c:	4b0a      	ldr	r3, [pc, #40]	; (801be78 <udp_sendto+0x88>)
 801be4e:	f240 2219 	movw	r2, #537	; 0x219
 801be52:	490c      	ldr	r1, [pc, #48]	; (801be84 <udp_sendto+0x94>)
 801be54:	480a      	ldr	r0, [pc, #40]	; (801be80 <udp_sendto+0x90>)
 801be56:	f004 feaf 	bl	8020bb8 <iprintf>
 801be5a:	f06f 000f 	mvn.w	r0, #15
 801be5e:	e7dc      	b.n	801be1a <udp_sendto+0x2a>
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801be60:	4b05      	ldr	r3, [pc, #20]	; (801be78 <udp_sendto+0x88>)
 801be62:	f44f 7206 	mov.w	r2, #536	; 0x218
 801be66:	4908      	ldr	r1, [pc, #32]	; (801be88 <udp_sendto+0x98>)
 801be68:	4805      	ldr	r0, [pc, #20]	; (801be80 <udp_sendto+0x90>)
 801be6a:	f004 fea5 	bl	8020bb8 <iprintf>
 801be6e:	f06f 000f 	mvn.w	r0, #15
 801be72:	e7d2      	b.n	801be1a <udp_sendto+0x2a>
 801be74:	2003e1cc 	.word	0x2003e1cc
 801be78:	0803ef78 	.word	0x0803ef78
 801be7c:	0803f084 	.word	0x0803f084
 801be80:	08026bb8 	.word	0x08026bb8
 801be84:	0803f068 	.word	0x0803f068
 801be88:	0803f050 	.word	0x0803f050

0801be8c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801be8c:	b570      	push	{r4, r5, r6, lr}
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801be8e:	b320      	cbz	r0, 801beda <udp_connect+0x4e>
 801be90:	460d      	mov	r5, r1
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801be92:	b361      	cbz	r1, 801beee <udp_connect+0x62>
 801be94:	4616      	mov	r6, r2

  if (pcb->local_port == 0) {
 801be96:	8a42      	ldrh	r2, [r0, #18]
 801be98:	4604      	mov	r4, r0
 801be9a:	b1c2      	cbz	r2, 801bece <udp_connect+0x42>
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801be9c:	7c23      	ldrb	r3, [r4, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801be9e:	4919      	ldr	r1, [pc, #100]	; (801bf04 <udp_connect+0x78>)
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801bea0:	6828      	ldr	r0, [r5, #0]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801bea2:	f043 0304 	orr.w	r3, r3, #4
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801bea6:	680a      	ldr	r2, [r1, #0]
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801bea8:	6060      	str	r0, [r4, #4]
  pcb->remote_port = port;
 801beaa:	82a6      	strh	r6, [r4, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801beac:	7423      	strb	r3, [r4, #16]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801beae:	b142      	cbz	r2, 801bec2 <udp_connect+0x36>
    if (pcb == ipcb) {
 801beb0:	4294      	cmp	r4, r2
 801beb2:	d00a      	beq.n	801beca <udp_connect+0x3e>
 801beb4:	4613      	mov	r3, r2
 801beb6:	e001      	b.n	801bebc <udp_connect+0x30>
 801beb8:	429c      	cmp	r4, r3
 801beba:	d006      	beq.n	801beca <udp_connect+0x3e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801bebc:	68db      	ldr	r3, [r3, #12]
 801bebe:	2b00      	cmp	r3, #0
 801bec0:	d1fa      	bne.n	801beb8 <udp_connect+0x2c>
      /* already on the list, just return */
      return ERR_OK;
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801bec2:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
  return ERR_OK;
 801bec4:	2000      	movs	r0, #0
  udp_pcbs = pcb;
 801bec6:	600c      	str	r4, [r1, #0]
}
 801bec8:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_OK;
 801beca:	2000      	movs	r0, #0
}
 801becc:	bd70      	pop	{r4, r5, r6, pc}
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801bece:	4601      	mov	r1, r0
 801bed0:	f7ff fdfe 	bl	801bad0 <udp_bind>
    if (err != ERR_OK) {
 801bed4:	2800      	cmp	r0, #0
 801bed6:	d0e1      	beq.n	801be9c <udp_connect+0x10>
}
 801bed8:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801beda:	4b0b      	ldr	r3, [pc, #44]	; (801bf08 <udp_connect+0x7c>)
 801bedc:	f240 4235 	movw	r2, #1077	; 0x435
 801bee0:	490a      	ldr	r1, [pc, #40]	; (801bf0c <udp_connect+0x80>)
 801bee2:	480b      	ldr	r0, [pc, #44]	; (801bf10 <udp_connect+0x84>)
 801bee4:	f004 fe68 	bl	8020bb8 <iprintf>
 801bee8:	f06f 000f 	mvn.w	r0, #15
}
 801beec:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801beee:	4b06      	ldr	r3, [pc, #24]	; (801bf08 <udp_connect+0x7c>)
 801bef0:	f240 4236 	movw	r2, #1078	; 0x436
 801bef4:	4907      	ldr	r1, [pc, #28]	; (801bf14 <udp_connect+0x88>)
 801bef6:	4806      	ldr	r0, [pc, #24]	; (801bf10 <udp_connect+0x84>)
 801bef8:	f004 fe5e 	bl	8020bb8 <iprintf>
 801befc:	f06f 000f 	mvn.w	r0, #15
}
 801bf00:	bd70      	pop	{r4, r5, r6, pc}
 801bf02:	bf00      	nop
 801bf04:	2003e2f0 	.word	0x2003e2f0
 801bf08:	0803ef78 	.word	0x0803ef78
 801bf0c:	0803ef40 	.word	0x0803ef40
 801bf10:	08026bb8 	.word	0x08026bb8
 801bf14:	0803ef5c 	.word	0x0803ef5c

0801bf18 <udp_recv>:
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801bf18:	b110      	cbz	r0, 801bf20 <udp_recv+0x8>

  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 801bf1a:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
 801bf1e:	4770      	bx	lr
  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801bf20:	4b03      	ldr	r3, [pc, #12]	; (801bf30 <udp_recv+0x18>)
 801bf22:	f240 428a 	movw	r2, #1162	; 0x48a
 801bf26:	4903      	ldr	r1, [pc, #12]	; (801bf34 <udp_recv+0x1c>)
 801bf28:	4803      	ldr	r0, [pc, #12]	; (801bf38 <udp_recv+0x20>)
 801bf2a:	f004 be45 	b.w	8020bb8 <iprintf>
 801bf2e:	bf00      	nop
 801bf30:	0803ef78 	.word	0x0803ef78
 801bf34:	0803f020 	.word	0x0803f020
 801bf38:	08026bb8 	.word	0x08026bb8

0801bf3c <udp_remove>:
{
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801bf3c:	b1d8      	cbz	r0, 801bf76 <udp_remove+0x3a>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801bf3e:	4b11      	ldr	r3, [pc, #68]	; (801bf84 <udp_remove+0x48>)
 801bf40:	681a      	ldr	r2, [r3, #0]
 801bf42:	4282      	cmp	r2, r0
 801bf44:	d00b      	beq.n	801bf5e <udp_remove+0x22>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801bf46:	b132      	cbz	r2, 801bf56 <udp_remove+0x1a>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801bf48:	68d3      	ldr	r3, [r2, #12]
 801bf4a:	b123      	cbz	r3, 801bf56 <udp_remove+0x1a>
 801bf4c:	4298      	cmp	r0, r3
 801bf4e:	d00c      	beq.n	801bf6a <udp_remove+0x2e>
 801bf50:	461a      	mov	r2, r3
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801bf52:	2a00      	cmp	r2, #0
 801bf54:	d1f8      	bne.n	801bf48 <udp_remove+0xc>
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801bf56:	4601      	mov	r1, r0
 801bf58:	2001      	movs	r0, #1
 801bf5a:	f7fa b9fb 	b.w	8016354 <memp_free>
    udp_pcbs = udp_pcbs->next;
 801bf5e:	68c2      	ldr	r2, [r0, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 801bf60:	4601      	mov	r1, r0
 801bf62:	2001      	movs	r0, #1
    udp_pcbs = udp_pcbs->next;
 801bf64:	601a      	str	r2, [r3, #0]
  memp_free(MEMP_UDP_PCB, pcb);
 801bf66:	f7fa b9f5 	b.w	8016354 <memp_free>
        pcb2->next = pcb->next;
 801bf6a:	68c3      	ldr	r3, [r0, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 801bf6c:	4601      	mov	r1, r0
 801bf6e:	2001      	movs	r0, #1
        pcb2->next = pcb->next;
 801bf70:	60d3      	str	r3, [r2, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 801bf72:	f7fa b9ef 	b.w	8016354 <memp_free>
  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801bf76:	4b04      	ldr	r3, [pc, #16]	; (801bf88 <udp_remove+0x4c>)
 801bf78:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801bf7c:	4903      	ldr	r1, [pc, #12]	; (801bf8c <udp_remove+0x50>)
 801bf7e:	4804      	ldr	r0, [pc, #16]	; (801bf90 <udp_remove+0x54>)
 801bf80:	f004 be1a 	b.w	8020bb8 <iprintf>
 801bf84:	2003e2f0 	.word	0x2003e2f0
 801bf88:	0803ef78 	.word	0x0803ef78
 801bf8c:	0803f038 	.word	0x0803f038
 801bf90:	08026bb8 	.word	0x08026bb8

0801bf94 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801bf94:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801bf96:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 801bf9a:	4907      	ldr	r1, [pc, #28]	; (801bfb8 <udp_new+0x24>)
 801bf9c:	2001      	movs	r0, #1
 801bf9e:	f7fa f9b5 	bl	801630c <memp_malloc_fn>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801bfa2:	4604      	mov	r4, r0
 801bfa4:	b128      	cbz	r0, 801bfb2 <udp_new+0x1e>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801bfa6:	2220      	movs	r2, #32
 801bfa8:	2100      	movs	r1, #0
 801bfaa:	f003 fe84 	bl	801fcb6 <memset>
    pcb->ttl = UDP_TTL;
 801bfae:	23ff      	movs	r3, #255	; 0xff
 801bfb0:	72e3      	strb	r3, [r4, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 801bfb2:	4620      	mov	r0, r4
 801bfb4:	bd10      	pop	{r4, pc}
 801bfb6:	bf00      	nop
 801bfb8:	0803ef78 	.word	0x0803ef78

0801bfbc <udp_new_ip_type>:
{
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801bfbc:	f7ff bfea 	b.w	801bf94 <udp_new>

0801bfc0 <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801bfc0:	b1a8      	cbz	r0, 801bfee <udp_netif_ip_addr_changed+0x2e>
 801bfc2:	6802      	ldr	r2, [r0, #0]
 801bfc4:	b199      	cbz	r1, 801bfee <udp_netif_ip_addr_changed+0x2e>
 801bfc6:	b192      	cbz	r2, 801bfee <udp_netif_ip_addr_changed+0x2e>
 801bfc8:	680b      	ldr	r3, [r1, #0]
 801bfca:	b183      	cbz	r3, 801bfee <udp_netif_ip_addr_changed+0x2e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801bfcc:	4b08      	ldr	r3, [pc, #32]	; (801bff0 <udp_netif_ip_addr_changed+0x30>)
 801bfce:	681b      	ldr	r3, [r3, #0]
 801bfd0:	b16b      	cbz	r3, 801bfee <udp_netif_ip_addr_changed+0x2e>
{
 801bfd2:	b410      	push	{r4}
 801bfd4:	e000      	b.n	801bfd8 <udp_netif_ip_addr_changed+0x18>
 801bfd6:	6802      	ldr	r2, [r0, #0]
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801bfd8:	681c      	ldr	r4, [r3, #0]
 801bfda:	4294      	cmp	r4, r2
 801bfdc:	d101      	bne.n	801bfe2 <udp_netif_ip_addr_changed+0x22>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801bfde:	680a      	ldr	r2, [r1, #0]
 801bfe0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801bfe2:	68db      	ldr	r3, [r3, #12]
 801bfe4:	2b00      	cmp	r3, #0
 801bfe6:	d1f6      	bne.n	801bfd6 <udp_netif_ip_addr_changed+0x16>
      }
    }
  }
}
 801bfe8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bfec:	4770      	bx	lr
 801bfee:	4770      	bx	lr
 801bff0:	2003e2f0 	.word	0x2003e2f0

0801bff4 <dhcp_option_short>:
  return options_out_len;
}

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 801bff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801bff6:	1c87      	adds	r7, r0, #2
{
 801bff8:	4604      	mov	r4, r0
 801bffa:	460d      	mov	r5, r1
 801bffc:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801bffe:	2f44      	cmp	r7, #68	; 0x44
 801c000:	d906      	bls.n	801c010 <dhcp_option_short+0x1c>
 801c002:	4b07      	ldr	r3, [pc, #28]	; (801c020 <dhcp_option_short+0x2c>)
 801c004:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801c008:	4906      	ldr	r1, [pc, #24]	; (801c024 <dhcp_option_short+0x30>)
 801c00a:	4807      	ldr	r0, [pc, #28]	; (801c028 <dhcp_option_short+0x34>)
 801c00c:	f004 fdd4 	bl	8020bb8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801c010:	1c63      	adds	r3, r4, #1
 801c012:	0a32      	lsrs	r2, r6, #8
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
  return options_out_len;
}
 801c014:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801c016:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801c018:	552a      	strb	r2, [r5, r4]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801c01a:	54ee      	strb	r6, [r5, r3]
}
 801c01c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c01e:	bf00      	nop
 801c020:	0803f38c 	.word	0x0803f38c
 801c024:	0803f3c4 	.word	0x0803f3c4
 801c028:	08026bb8 	.word	0x08026bb8

0801c02c <dhcp_option>:
{
 801c02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c02e:	461e      	mov	r6, r3
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801c030:	3302      	adds	r3, #2
{
 801c032:	4604      	mov	r4, r0
 801c034:	460d      	mov	r5, r1
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801c036:	4403      	add	r3, r0
{
 801c038:	4617      	mov	r7, r2
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801c03a:	2b44      	cmp	r3, #68	; 0x44
 801c03c:	d906      	bls.n	801c04c <dhcp_option+0x20>
 801c03e:	4b07      	ldr	r3, [pc, #28]	; (801c05c <dhcp_option+0x30>)
 801c040:	f240 529a 	movw	r2, #1434	; 0x59a
 801c044:	4906      	ldr	r1, [pc, #24]	; (801c060 <dhcp_option+0x34>)
 801c046:	4807      	ldr	r0, [pc, #28]	; (801c064 <dhcp_option+0x38>)
 801c048:	f004 fdb6 	bl	8020bb8 <iprintf>
  options[options_out_len++] = option_type;
 801c04c:	1c63      	adds	r3, r4, #1
  options[options_out_len++] = option_len;
 801c04e:	1ca0      	adds	r0, r4, #2
  options[options_out_len++] = option_type;
 801c050:	552f      	strb	r7, [r5, r4]
  options[options_out_len++] = option_len;
 801c052:	b29b      	uxth	r3, r3
}
 801c054:	b280      	uxth	r0, r0
  options[options_out_len++] = option_len;
 801c056:	54ee      	strb	r6, [r5, r3]
}
 801c058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c05a:	bf00      	nop
 801c05c:	0803f38c 	.word	0x0803f38c
 801c060:	0803f30c 	.word	0x0803f30c
 801c064:	08026bb8 	.word	0x08026bb8

0801c068 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801c068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801c06a:	1d07      	adds	r7, r0, #4
{
 801c06c:	4604      	mov	r4, r0
 801c06e:	460d      	mov	r5, r1
 801c070:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801c072:	2f44      	cmp	r7, #68	; 0x44
 801c074:	d906      	bls.n	801c084 <dhcp_option_long+0x1c>
 801c076:	4b0b      	ldr	r3, [pc, #44]	; (801c0a4 <dhcp_option_long+0x3c>)
 801c078:	f240 52b7 	movw	r2, #1463	; 0x5b7
 801c07c:	490a      	ldr	r1, [pc, #40]	; (801c0a8 <dhcp_option_long+0x40>)
 801c07e:	480b      	ldr	r0, [pc, #44]	; (801c0ac <dhcp_option_long+0x44>)
 801c080:	f004 fd9a 	bl	8020bb8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801c084:	0e30      	lsrs	r0, r6, #24
 801c086:	1c61      	adds	r1, r4, #1
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801c088:	1ca2      	adds	r2, r4, #2
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801c08a:	1ce3      	adds	r3, r4, #3
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801c08c:	5528      	strb	r0, [r5, r4]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801c08e:	b289      	uxth	r1, r1
 801c090:	0c34      	lsrs	r4, r6, #16
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801c092:	b292      	uxth	r2, r2
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801c094:	546c      	strb	r4, [r5, r1]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801c096:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801c098:	0a31      	lsrs	r1, r6, #8
  return options_out_len;
}
 801c09a:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801c09c:	54a9      	strb	r1, [r5, r2]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801c09e:	54ee      	strb	r6, [r5, r3]
}
 801c0a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c0a2:	bf00      	nop
 801c0a4:	0803f38c 	.word	0x0803f38c
 801c0a8:	0803f350 	.word	0x0803f350
 801c0ac:	08026bb8 	.word	0x08026bb8

0801c0b0 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801c0b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801c0b4:	4680      	mov	r8, r0
 801c0b6:	2800      	cmp	r0, #0
 801c0b8:	f000 8092 	beq.w	801c1e0 <dhcp_create_msg+0x130>
 801c0bc:	4689      	mov	r9, r1
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801c0be:	2900      	cmp	r1, #0
 801c0c0:	f000 8085 	beq.w	801c1ce <dhcp_create_msg+0x11e>
 801c0c4:	4616      	mov	r6, r2
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801c0c6:	f44f 719a 	mov.w	r1, #308	; 0x134
 801c0ca:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c0ce:	2036      	movs	r0, #54	; 0x36
 801c0d0:	461f      	mov	r7, r3
 801c0d2:	f7fa fc87 	bl	80169e4 <pbuf_alloc>
  if (p_out == NULL) {
 801c0d6:	4605      	mov	r5, r0
 801c0d8:	2800      	cmp	r0, #0
 801c0da:	d046      	beq.n	801c16a <dhcp_create_msg+0xba>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801c0dc:	8943      	ldrh	r3, [r0, #10]
 801c0de:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801c0e2:	d366      	bcc.n	801c1b2 <dhcp_create_msg+0x102>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801c0e4:	2e03      	cmp	r6, #3
 801c0e6:	d048      	beq.n	801c17a <dhcp_create_msg+0xca>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801c0e8:	f899 3006 	ldrb.w	r3, [r9, #6]
 801c0ec:	2b00      	cmp	r3, #0
 801c0ee:	d03f      	beq.n	801c170 <dhcp_create_msg+0xc0>
 801c0f0:	4b40      	ldr	r3, [pc, #256]	; (801c1f4 <dhcp_create_msg+0x144>)
 801c0f2:	6818      	ldr	r0, [r3, #0]
    dhcp->xid = xid;
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801c0f4:	686c      	ldr	r4, [r5, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801c0f6:	f44f 729a 	mov.w	r2, #308	; 0x134
    dhcp->xid = xid;
 801c0fa:	f8c9 0000 	str.w	r0, [r9]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801c0fe:	2100      	movs	r1, #0
 801c100:	4620      	mov	r0, r4
 801c102:	f003 fdd8 	bl	801fcb6 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801c106:	2301      	movs	r3, #1
 801c108:	7023      	strb	r3, [r4, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801c10a:	7063      	strb	r3, [r4, #1]
  msg_out->hlen = netif->hwaddr_len;
 801c10c:	f898 3034 	ldrb.w	r3, [r8, #52]	; 0x34
 801c110:	70a3      	strb	r3, [r4, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801c112:	f8d9 0000 	ldr.w	r0, [r9]
 801c116:	f7f8 fd8d 	bl	8014c34 <lwip_htonl>
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801c11a:	2e04      	cmp	r6, #4
  msg_out->xid = lwip_htonl(dhcp->xid);
 801c11c:	6060      	str	r0, [r4, #4]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801c11e:	d150      	bne.n	801c1c2 <dhcp_create_msg+0x112>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801c120:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801c124:	60e3      	str	r3, [r4, #12]
 801c126:	f108 032e 	add.w	r3, r8, #46	; 0x2e
 801c12a:	f108 0034 	add.w	r0, r8, #52	; 0x34
 801c12e:	f104 021c 	add.w	r2, r4, #28
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801c132:	f813 1b01 	ldrb.w	r1, [r3], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801c136:	4283      	cmp	r3, r0
    msg_out->chaddr[i] = netif->hwaddr[i];
 801c138:	f802 1b01 	strb.w	r1, [r2], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801c13c:	d1f9      	bne.n	801c132 <dhcp_create_msg+0x82>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801c13e:	2363      	movs	r3, #99	; 0x63
 801c140:	f06f 0c7d 	mvn.w	ip, #125	; 0x7d
 801c144:	2053      	movs	r0, #83	; 0x53
  options[options_out_len++] = option_type;
 801c146:	2135      	movs	r1, #53	; 0x35
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801c148:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
  options[options_out_len++] = option_len;
 801c14c:	2201      	movs	r2, #1
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801c14e:	f884 30ef 	strb.w	r3, [r4, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
  if (options_out_len) {
    *options_out_len = options_out_len_loc;
 801c152:	2303      	movs	r3, #3
  options[options_out_len++] = value;
 801c154:	f884 60f2 	strb.w	r6, [r4, #242]	; 0xf2
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801c158:	f884 c0ed 	strb.w	ip, [r4, #237]	; 0xed
 801c15c:	f884 00ee 	strb.w	r0, [r4, #238]	; 0xee
  options[options_out_len++] = option_type;
 801c160:	f884 10f0 	strb.w	r1, [r4, #240]	; 0xf0
  options[options_out_len++] = option_len;
 801c164:	f884 20f1 	strb.w	r2, [r4, #241]	; 0xf1
    *options_out_len = options_out_len_loc;
 801c168:	803b      	strh	r3, [r7, #0]
  }
  return p_out;
}
 801c16a:	4628      	mov	r0, r5
 801c16c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      xid = LWIP_RAND();
 801c170:	f004 fdb2 	bl	8020cd8 <rand>
 801c174:	4b1f      	ldr	r3, [pc, #124]	; (801c1f4 <dhcp_create_msg+0x144>)
 801c176:	6018      	str	r0, [r3, #0]
 801c178:	e7bc      	b.n	801c0f4 <dhcp_create_msg+0x44>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801c17a:	f899 3005 	ldrb.w	r3, [r9, #5]
 801c17e:	2b03      	cmp	r3, #3
 801c180:	d0b2      	beq.n	801c0e8 <dhcp_create_msg+0x38>
  msg_out = (struct dhcp_msg *)p_out->payload;
 801c182:	686c      	ldr	r4, [r5, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801c184:	f44f 729a 	mov.w	r2, #308	; 0x134
 801c188:	2100      	movs	r1, #0
 801c18a:	4620      	mov	r0, r4
 801c18c:	f003 fd93 	bl	801fcb6 <memset>
  msg_out->op = DHCP_BOOTREQUEST;
 801c190:	2301      	movs	r3, #1
 801c192:	7023      	strb	r3, [r4, #0]
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801c194:	7063      	strb	r3, [r4, #1]
  msg_out->hlen = netif->hwaddr_len;
 801c196:	f898 3034 	ldrb.w	r3, [r8, #52]	; 0x34
 801c19a:	70a3      	strb	r3, [r4, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801c19c:	f8d9 0000 	ldr.w	r0, [r9]
 801c1a0:	f7f8 fd48 	bl	8014c34 <lwip_htonl>
 801c1a4:	6060      	str	r0, [r4, #4]
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801c1a6:	f899 3005 	ldrb.w	r3, [r9, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801c1aa:	3b04      	subs	r3, #4
 801c1ac:	2b01      	cmp	r3, #1
 801c1ae:	d8ba      	bhi.n	801c126 <dhcp_create_msg+0x76>
 801c1b0:	e7b6      	b.n	801c120 <dhcp_create_msg+0x70>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801c1b2:	4b11      	ldr	r3, [pc, #68]	; (801c1f8 <dhcp_create_msg+0x148>)
 801c1b4:	f240 7272 	movw	r2, #1906	; 0x772
 801c1b8:	4910      	ldr	r1, [pc, #64]	; (801c1fc <dhcp_create_msg+0x14c>)
 801c1ba:	4811      	ldr	r0, [pc, #68]	; (801c200 <dhcp_create_msg+0x150>)
 801c1bc:	f004 fcfc 	bl	8020bb8 <iprintf>
 801c1c0:	e790      	b.n	801c0e4 <dhcp_create_msg+0x34>
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801c1c2:	1ff3      	subs	r3, r6, #7
 801c1c4:	2b01      	cmp	r3, #1
 801c1c6:	d9ab      	bls.n	801c120 <dhcp_create_msg+0x70>
 801c1c8:	2e03      	cmp	r6, #3
 801c1ca:	d1ac      	bne.n	801c126 <dhcp_create_msg+0x76>
 801c1cc:	e7eb      	b.n	801c1a6 <dhcp_create_msg+0xf6>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801c1ce:	4b0a      	ldr	r3, [pc, #40]	; (801c1f8 <dhcp_create_msg+0x148>)
 801c1d0:	f240 726a 	movw	r2, #1898	; 0x76a
 801c1d4:	490b      	ldr	r1, [pc, #44]	; (801c204 <dhcp_create_msg+0x154>)
 801c1d6:	464d      	mov	r5, r9
 801c1d8:	4809      	ldr	r0, [pc, #36]	; (801c200 <dhcp_create_msg+0x150>)
 801c1da:	f004 fced 	bl	8020bb8 <iprintf>
 801c1de:	e7c4      	b.n	801c16a <dhcp_create_msg+0xba>
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801c1e0:	4605      	mov	r5, r0
 801c1e2:	4b05      	ldr	r3, [pc, #20]	; (801c1f8 <dhcp_create_msg+0x148>)
 801c1e4:	f240 7269 	movw	r2, #1897	; 0x769
 801c1e8:	4907      	ldr	r1, [pc, #28]	; (801c208 <dhcp_create_msg+0x158>)
 801c1ea:	4805      	ldr	r0, [pc, #20]	; (801c200 <dhcp_create_msg+0x150>)
 801c1ec:	f004 fce4 	bl	8020bb8 <iprintf>
 801c1f0:	e7bb      	b.n	801c16a <dhcp_create_msg+0xba>
 801c1f2:	bf00      	nop
 801c1f4:	2002a448 	.word	0x2002a448
 801c1f8:	0803f38c 	.word	0x0803f38c
 801c1fc:	0803f268 	.word	0x0803f268
 801c200:	08026bb8 	.word	0x08026bb8
 801c204:	0803f248 	.word	0x0803f248
 801c208:	0803f228 	.word	0x0803f228

0801c20c <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801c20c:	b470      	push	{r4, r5, r6}
  options[options_out_len++] = DHCP_OPTION_END;
 801c20e:	1c45      	adds	r5, r0, #1
 801c210:	23ff      	movs	r3, #255	; 0xff
 801c212:	b2ae      	uxth	r6, r5
 801c214:	540b      	strb	r3, [r1, r0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801c216:	2e43      	cmp	r6, #67	; 0x43
 801c218:	d80c      	bhi.n	801c234 <dhcp_option_trailer+0x28>
 801c21a:	f1c0 0542 	rsb	r5, r0, #66	; 0x42
 801c21e:	1e73      	subs	r3, r6, #1
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801c220:	2400      	movs	r4, #0
 801c222:	fa16 f585 	uxtah	r5, r6, r5
 801c226:	440b      	add	r3, r1
 801c228:	4429      	add	r1, r5
 801c22a:	f803 4f01 	strb.w	r4, [r3, #1]!
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801c22e:	428b      	cmp	r3, r1
 801c230:	d1fb      	bne.n	801c22a <dhcp_option_trailer+0x1e>
    options[options_out_len++] = 0;
 801c232:	2644      	movs	r6, #68	; 0x44
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801c234:	f106 01f0 	add.w	r1, r6, #240	; 0xf0
 801c238:	4610      	mov	r0, r2
 801c23a:	b289      	uxth	r1, r1
}
 801c23c:	bc70      	pop	{r4, r5, r6}
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801c23e:	f7fa bc6f 	b.w	8016b20 <pbuf_realloc>
 801c242:	bf00      	nop

0801c244 <dhcp_reboot>:
{
 801c244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c248:	6a86      	ldr	r6, [r0, #40]	; 0x28
{
 801c24a:	b085      	sub	sp, #20
 801c24c:	4683      	mov	fp, r0
  if (new_state != dhcp->state) {
 801c24e:	7973      	ldrb	r3, [r6, #5]
 801c250:	2b03      	cmp	r3, #3
 801c252:	d004      	beq.n	801c25e <dhcp_reboot+0x1a>
    dhcp->tries = 0;
 801c254:	2300      	movs	r3, #0
    dhcp->state = new_state;
 801c256:	2203      	movs	r2, #3
    dhcp->tries = 0;
 801c258:	71b3      	strb	r3, [r6, #6]
    dhcp->state = new_state;
 801c25a:	7172      	strb	r2, [r6, #5]
    dhcp->request_timeout = 0;
 801c25c:	8133      	strh	r3, [r6, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801c25e:	f10d 030e 	add.w	r3, sp, #14
 801c262:	2203      	movs	r2, #3
 801c264:	4631      	mov	r1, r6
 801c266:	4658      	mov	r0, fp
 801c268:	f7ff ff22 	bl	801c0b0 <dhcp_create_msg>
  if (p_out != NULL) {
 801c26c:	4682      	mov	sl, r0
 801c26e:	2800      	cmp	r0, #0
 801c270:	d078      	beq.n	801c364 <dhcp_reboot+0x120>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801c272:	6845      	ldr	r5, [r0, #4]
 801c274:	2302      	movs	r3, #2
 801c276:	2239      	movs	r2, #57	; 0x39
 801c278:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 801c27c:	35f0      	adds	r5, #240	; 0xf0
 801c27e:	f8df 9104 	ldr.w	r9, [pc, #260]	; 801c384 <dhcp_reboot+0x140>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801c282:	f04f 0801 	mov.w	r8, #1
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801c286:	4629      	mov	r1, r5
 801c288:	f7ff fed0 	bl	801c02c <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801c28c:	4629      	mov	r1, r5
 801c28e:	f44f 7210 	mov.w	r2, #576	; 0x240
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801c292:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801c296:	f7ff fead 	bl	801bff4 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801c29a:	2304      	movs	r3, #4
 801c29c:	4629      	mov	r1, r5
 801c29e:	2232      	movs	r2, #50	; 0x32
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801c2a0:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801c2a4:	f7ff fec2 	bl	801c02c <dhcp_option>
 801c2a8:	4604      	mov	r4, r0
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801c2aa:	69f0      	ldr	r0, [r6, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801c2ac:	f8ad 400e 	strh.w	r4, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801c2b0:	f7f8 fcc0 	bl	8014c34 <lwip_htonl>
 801c2b4:	4629      	mov	r1, r5
 801c2b6:	4602      	mov	r2, r0
 801c2b8:	4620      	mov	r0, r4
 801c2ba:	f7ff fed5 	bl	801c068 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801c2be:	4629      	mov	r1, r5
 801c2c0:	2304      	movs	r3, #4
 801c2c2:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801c2c4:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801c2c8:	f7ff feb0 	bl	801c02c <dhcp_option>
 801c2cc:	4604      	mov	r4, r0
 801c2ce:	1d07      	adds	r7, r0, #4
 801c2d0:	f8ad 000e 	strh.w	r0, [sp, #14]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801c2d4:	2c43      	cmp	r4, #67	; 0x43
 801c2d6:	b2bf      	uxth	r7, r7
 801c2d8:	d80b      	bhi.n	801c2f2 <dhcp_reboot+0xae>
  options[options_out_len++] = value;
 801c2da:	1c63      	adds	r3, r4, #1
 801c2dc:	f805 8004 	strb.w	r8, [r5, r4]
 801c2e0:	b29c      	uxth	r4, r3
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c2e2:	42bc      	cmp	r4, r7
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801c2e4:	f8ad 400e 	strh.w	r4, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c2e8:	d00b      	beq.n	801c302 <dhcp_reboot+0xbe>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801c2ea:	2c43      	cmp	r4, #67	; 0x43
 801c2ec:	f819 8b01 	ldrb.w	r8, [r9], #1
 801c2f0:	d9f3      	bls.n	801c2da <dhcp_reboot+0x96>
 801c2f2:	4b1e      	ldr	r3, [pc, #120]	; (801c36c <dhcp_reboot+0x128>)
 801c2f4:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801c2f8:	491d      	ldr	r1, [pc, #116]	; (801c370 <dhcp_reboot+0x12c>)
 801c2fa:	481e      	ldr	r0, [pc, #120]	; (801c374 <dhcp_reboot+0x130>)
 801c2fc:	f004 fc5c 	bl	8020bb8 <iprintf>
 801c300:	e7eb      	b.n	801c2da <dhcp_reboot+0x96>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801c302:	4629      	mov	r1, r5
 801c304:	4638      	mov	r0, r7
 801c306:	4652      	mov	r2, sl
 801c308:	f7ff ff80 	bl	801c20c <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801c30c:	4a1a      	ldr	r2, [pc, #104]	; (801c378 <dhcp_reboot+0x134>)
 801c30e:	f8cd b000 	str.w	fp, [sp]
 801c312:	2343      	movs	r3, #67	; 0x43
 801c314:	6810      	ldr	r0, [r2, #0]
 801c316:	4651      	mov	r1, sl
 801c318:	4a18      	ldr	r2, [pc, #96]	; (801c37c <dhcp_reboot+0x138>)
 801c31a:	f7ff fd19 	bl	801bd50 <udp_sendto_if>
 801c31e:	4604      	mov	r4, r0
    pbuf_free(p_out);
 801c320:	4650      	mov	r0, sl
 801c322:	f7fa faf1 	bl	8016908 <pbuf_free>
  if (dhcp->tries < 255) {
 801c326:	79b3      	ldrb	r3, [r6, #6]
 801c328:	2bff      	cmp	r3, #255	; 0xff
 801c32a:	d015      	beq.n	801c358 <dhcp_reboot+0x114>
    dhcp->tries++;
 801c32c:	3301      	adds	r3, #1
 801c32e:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801c330:	2b09      	cmp	r3, #9
    dhcp->tries++;
 801c332:	71b3      	strb	r3, [r6, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801c334:	d810      	bhi.n	801c358 <dhcp_reboot+0x114>
 801c336:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
 801c33a:	4a11      	ldr	r2, [pc, #68]	; (801c380 <dhcp_reboot+0x13c>)
}
 801c33c:	4620      	mov	r0, r4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801c33e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801c342:	00db      	lsls	r3, r3, #3
 801c344:	b29b      	uxth	r3, r3
 801c346:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801c34a:	fba2 2303 	umull	r2, r3, r2, r3
 801c34e:	095b      	lsrs	r3, r3, #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801c350:	8133      	strh	r3, [r6, #8]
}
 801c352:	b005      	add	sp, #20
 801c354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    result = ERR_MEM;
 801c358:	2314      	movs	r3, #20
}
 801c35a:	4620      	mov	r0, r4
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801c35c:	8133      	strh	r3, [r6, #8]
}
 801c35e:	b005      	add	sp, #20
 801c360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    result = ERR_MEM;
 801c364:	f04f 34ff 	mov.w	r4, #4294967295
 801c368:	e7dd      	b.n	801c326 <dhcp_reboot+0xe2>
 801c36a:	bf00      	nop
 801c36c:	0803f38c 	.word	0x0803f38c
 801c370:	0803f400 	.word	0x0803f400
 801c374:	08026bb8 	.word	0x08026bb8
 801c378:	2002a440 	.word	0x2002a440
 801c37c:	0803f8ac 	.word	0x0803f8ac
 801c380:	10624dd3 	.word	0x10624dd3
 801c384:	0803f2cd 	.word	0x0803f2cd

0801c388 <dhcp_select>:
{
 801c388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c38c:	b085      	sub	sp, #20
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 801c38e:	2800      	cmp	r0, #0
 801c390:	f000 80ac 	beq.w	801c4ec <dhcp_select+0x164>
  dhcp = netif_dhcp_data(netif);
 801c394:	6a85      	ldr	r5, [r0, #40]	; 0x28
 801c396:	4607      	mov	r7, r0
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801c398:	2d00      	cmp	r5, #0
 801c39a:	f000 809d 	beq.w	801c4d8 <dhcp_select+0x150>
  if (new_state != dhcp->state) {
 801c39e:	796b      	ldrb	r3, [r5, #5]
 801c3a0:	2b01      	cmp	r3, #1
 801c3a2:	d004      	beq.n	801c3ae <dhcp_select+0x26>
    dhcp->tries = 0;
 801c3a4:	2300      	movs	r3, #0
    dhcp->state = new_state;
 801c3a6:	2201      	movs	r2, #1
    dhcp->tries = 0;
 801c3a8:	71ab      	strb	r3, [r5, #6]
    dhcp->state = new_state;
 801c3aa:	716a      	strb	r2, [r5, #5]
    dhcp->request_timeout = 0;
 801c3ac:	812b      	strh	r3, [r5, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801c3ae:	f10d 030e 	add.w	r3, sp, #14
 801c3b2:	2203      	movs	r2, #3
 801c3b4:	4629      	mov	r1, r5
 801c3b6:	4638      	mov	r0, r7
 801c3b8:	f7ff fe7a 	bl	801c0b0 <dhcp_create_msg>
  if (p_out != NULL) {
 801c3bc:	4682      	mov	sl, r0
 801c3be:	2800      	cmp	r0, #0
 801c3c0:	f000 8087 	beq.w	801c4d2 <dhcp_select+0x14a>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801c3c4:	6846      	ldr	r6, [r0, #4]
 801c3c6:	2302      	movs	r3, #2
 801c3c8:	2239      	movs	r2, #57	; 0x39
 801c3ca:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 801c3ce:	36f0      	adds	r6, #240	; 0xf0
 801c3d0:	f8df b150 	ldr.w	fp, [pc, #336]	; 801c524 <dhcp_select+0x19c>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801c3d4:	f04f 0901 	mov.w	r9, #1
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801c3d8:	4631      	mov	r1, r6
 801c3da:	f7ff fe27 	bl	801c02c <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801c3de:	4631      	mov	r1, r6
 801c3e0:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801c3e2:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801c3e6:	f7ff fe05 	bl	801bff4 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801c3ea:	2304      	movs	r3, #4
 801c3ec:	4631      	mov	r1, r6
 801c3ee:	2232      	movs	r2, #50	; 0x32
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801c3f0:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801c3f4:	f7ff fe1a 	bl	801c02c <dhcp_option>
 801c3f8:	4604      	mov	r4, r0
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801c3fa:	69e8      	ldr	r0, [r5, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801c3fc:	f8ad 400e 	strh.w	r4, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801c400:	f7f8 fc18 	bl	8014c34 <lwip_htonl>
 801c404:	4631      	mov	r1, r6
 801c406:	4602      	mov	r2, r0
 801c408:	4620      	mov	r0, r4
 801c40a:	f7ff fe2d 	bl	801c068 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801c40e:	2304      	movs	r3, #4
 801c410:	4631      	mov	r1, r6
 801c412:	2236      	movs	r2, #54	; 0x36
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801c414:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801c418:	f7ff fe08 	bl	801c02c <dhcp_option>
 801c41c:	4604      	mov	r4, r0
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801c41e:	69a8      	ldr	r0, [r5, #24]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801c420:	f8ad 400e 	strh.w	r4, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801c424:	f7f8 fc06 	bl	8014c34 <lwip_htonl>
 801c428:	4631      	mov	r1, r6
 801c42a:	4602      	mov	r2, r0
 801c42c:	4620      	mov	r0, r4
 801c42e:	f7ff fe1b 	bl	801c068 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801c432:	4631      	mov	r1, r6
 801c434:	2304      	movs	r3, #4
 801c436:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801c438:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801c43c:	f7ff fdf6 	bl	801c02c <dhcp_option>
 801c440:	4604      	mov	r4, r0
 801c442:	f100 0804 	add.w	r8, r0, #4
 801c446:	f8ad 000e 	strh.w	r0, [sp, #14]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801c44a:	2c43      	cmp	r4, #67	; 0x43
 801c44c:	fa1f f888 	uxth.w	r8, r8
 801c450:	d80b      	bhi.n	801c46a <dhcp_select+0xe2>
  options[options_out_len++] = value;
 801c452:	1c63      	adds	r3, r4, #1
 801c454:	f806 9004 	strb.w	r9, [r6, r4]
 801c458:	b29c      	uxth	r4, r3
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c45a:	4544      	cmp	r4, r8
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801c45c:	f8ad 400e 	strh.w	r4, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c460:	d00b      	beq.n	801c47a <dhcp_select+0xf2>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801c462:	2c43      	cmp	r4, #67	; 0x43
 801c464:	f81b 9b01 	ldrb.w	r9, [fp], #1
 801c468:	d9f3      	bls.n	801c452 <dhcp_select+0xca>
 801c46a:	4b25      	ldr	r3, [pc, #148]	; (801c500 <dhcp_select+0x178>)
 801c46c:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801c470:	4924      	ldr	r1, [pc, #144]	; (801c504 <dhcp_select+0x17c>)
 801c472:	4825      	ldr	r0, [pc, #148]	; (801c508 <dhcp_select+0x180>)
 801c474:	f004 fba0 	bl	8020bb8 <iprintf>
 801c478:	e7eb      	b.n	801c452 <dhcp_select+0xca>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801c47a:	4631      	mov	r1, r6
 801c47c:	4640      	mov	r0, r8
 801c47e:	4652      	mov	r2, sl
 801c480:	f7ff fec4 	bl	801c20c <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801c484:	4921      	ldr	r1, [pc, #132]	; (801c50c <dhcp_select+0x184>)
 801c486:	4a22      	ldr	r2, [pc, #136]	; (801c510 <dhcp_select+0x188>)
 801c488:	2343      	movs	r3, #67	; 0x43
 801c48a:	6808      	ldr	r0, [r1, #0]
 801c48c:	4651      	mov	r1, sl
 801c48e:	e9cd 7200 	strd	r7, r2, [sp]
 801c492:	4a20      	ldr	r2, [pc, #128]	; (801c514 <dhcp_select+0x18c>)
 801c494:	f7ff fb9c 	bl	801bbd0 <udp_sendto_if_src>
 801c498:	4604      	mov	r4, r0
    pbuf_free(p_out);
 801c49a:	4650      	mov	r0, sl
 801c49c:	f7fa fa34 	bl	8016908 <pbuf_free>
  if (dhcp->tries < 255) {
 801c4a0:	79ab      	ldrb	r3, [r5, #6]
 801c4a2:	2bff      	cmp	r3, #255	; 0xff
 801c4a4:	d013      	beq.n	801c4ce <dhcp_select+0x146>
    dhcp->tries++;
 801c4a6:	3301      	adds	r3, #1
 801c4a8:	b2da      	uxtb	r2, r3
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801c4aa:	2a05      	cmp	r2, #5
    dhcp->tries++;
 801c4ac:	71aa      	strb	r2, [r5, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801c4ae:	d80e      	bhi.n	801c4ce <dhcp_select+0x146>
 801c4b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801c4b4:	4918      	ldr	r1, [pc, #96]	; (801c518 <dhcp_select+0x190>)
 801c4b6:	4093      	lsls	r3, r2
 801c4b8:	b29b      	uxth	r3, r3
 801c4ba:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801c4be:	fba1 2303 	umull	r2, r3, r1, r3
 801c4c2:	095b      	lsrs	r3, r3, #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801c4c4:	812b      	strh	r3, [r5, #8]
}
 801c4c6:	4620      	mov	r0, r4
 801c4c8:	b005      	add	sp, #20
 801c4ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    result = ERR_MEM;
 801c4ce:	2378      	movs	r3, #120	; 0x78
 801c4d0:	e7f8      	b.n	801c4c4 <dhcp_select+0x13c>
 801c4d2:	f04f 34ff 	mov.w	r4, #4294967295
 801c4d6:	e7e3      	b.n	801c4a0 <dhcp_select+0x118>
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801c4d8:	4b09      	ldr	r3, [pc, #36]	; (801c500 <dhcp_select+0x178>)
 801c4da:	f240 1279 	movw	r2, #377	; 0x179
 801c4de:	490f      	ldr	r1, [pc, #60]	; (801c51c <dhcp_select+0x194>)
 801c4e0:	f06f 0405 	mvn.w	r4, #5
 801c4e4:	4808      	ldr	r0, [pc, #32]	; (801c508 <dhcp_select+0x180>)
 801c4e6:	f004 fb67 	bl	8020bb8 <iprintf>
 801c4ea:	e7ec      	b.n	801c4c6 <dhcp_select+0x13e>
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 801c4ec:	4b04      	ldr	r3, [pc, #16]	; (801c500 <dhcp_select+0x178>)
 801c4ee:	f240 1277 	movw	r2, #375	; 0x177
 801c4f2:	490b      	ldr	r1, [pc, #44]	; (801c520 <dhcp_select+0x198>)
 801c4f4:	f06f 040f 	mvn.w	r4, #15
 801c4f8:	4803      	ldr	r0, [pc, #12]	; (801c508 <dhcp_select+0x180>)
 801c4fa:	f004 fb5d 	bl	8020bb8 <iprintf>
 801c4fe:	e7e2      	b.n	801c4c6 <dhcp_select+0x13e>
 801c500:	0803f38c 	.word	0x0803f38c
 801c504:	0803f400 	.word	0x0803f400
 801c508:	08026bb8 	.word	0x08026bb8
 801c50c:	2002a440 	.word	0x2002a440
 801c510:	0803f8a8 	.word	0x0803f8a8
 801c514:	0803f8ac 	.word	0x0803f8ac
 801c518:	10624dd3 	.word	0x10624dd3
 801c51c:	0803f4fc 	.word	0x0803f4fc
 801c520:	0803f4e0 	.word	0x0803f4e0
 801c524:	0803f2cd 	.word	0x0803f2cd

0801c528 <dhcp_discover>:
{
 801c528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c52c:	6a85      	ldr	r5, [r0, #40]	; 0x28
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801c52e:	2300      	movs	r3, #0
{
 801c530:	b085      	sub	sp, #20
 801c532:	4682      	mov	sl, r0
  if (new_state != dhcp->state) {
 801c534:	796a      	ldrb	r2, [r5, #5]
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801c536:	61eb      	str	r3, [r5, #28]
  if (new_state != dhcp->state) {
 801c538:	2a06      	cmp	r2, #6
 801c53a:	d003      	beq.n	801c544 <dhcp_discover+0x1c>
    dhcp->state = new_state;
 801c53c:	2206      	movs	r2, #6
    dhcp->tries = 0;
 801c53e:	71ab      	strb	r3, [r5, #6]
    dhcp->request_timeout = 0;
 801c540:	812b      	strh	r3, [r5, #8]
    dhcp->state = new_state;
 801c542:	716a      	strb	r2, [r5, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 801c544:	f10d 030e 	add.w	r3, sp, #14
 801c548:	2201      	movs	r2, #1
 801c54a:	4629      	mov	r1, r5
 801c54c:	4650      	mov	r0, sl
 801c54e:	f7ff fdaf 	bl	801c0b0 <dhcp_create_msg>
  if (p_out != NULL) {
 801c552:	4681      	mov	r9, r0
 801c554:	2800      	cmp	r0, #0
 801c556:	d047      	beq.n	801c5e8 <dhcp_discover+0xc0>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801c558:	6846      	ldr	r6, [r0, #4]
 801c55a:	2302      	movs	r3, #2
 801c55c:	2239      	movs	r2, #57	; 0x39
 801c55e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 801c562:	36f0      	adds	r6, #240	; 0xf0
 801c564:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 801c640 <dhcp_discover+0x118>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801c568:	f04f 0801 	mov.w	r8, #1
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801c56c:	4631      	mov	r1, r6
 801c56e:	f7ff fd5d 	bl	801c02c <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801c572:	4631      	mov	r1, r6
 801c574:	f8ba 202c 	ldrh.w	r2, [sl, #44]	; 0x2c
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801c578:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801c57c:	f7ff fd3a 	bl	801bff4 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801c580:	4631      	mov	r1, r6
 801c582:	2304      	movs	r3, #4
 801c584:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801c586:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801c58a:	f7ff fd4f 	bl	801c02c <dhcp_option>
 801c58e:	4604      	mov	r4, r0
 801c590:	1d07      	adds	r7, r0, #4
 801c592:	f8ad 000e 	strh.w	r0, [sp, #14]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801c596:	2c43      	cmp	r4, #67	; 0x43
 801c598:	b2bf      	uxth	r7, r7
 801c59a:	d80b      	bhi.n	801c5b4 <dhcp_discover+0x8c>
  options[options_out_len++] = value;
 801c59c:	1c63      	adds	r3, r4, #1
 801c59e:	f806 8004 	strb.w	r8, [r6, r4]
 801c5a2:	b29c      	uxth	r4, r3
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c5a4:	42bc      	cmp	r4, r7
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801c5a6:	f8ad 400e 	strh.w	r4, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c5aa:	d00b      	beq.n	801c5c4 <dhcp_discover+0x9c>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801c5ac:	2c43      	cmp	r4, #67	; 0x43
 801c5ae:	f81b 8b01 	ldrb.w	r8, [fp], #1
 801c5b2:	d9f3      	bls.n	801c59c <dhcp_discover+0x74>
 801c5b4:	4b1b      	ldr	r3, [pc, #108]	; (801c624 <dhcp_discover+0xfc>)
 801c5b6:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801c5ba:	491b      	ldr	r1, [pc, #108]	; (801c628 <dhcp_discover+0x100>)
 801c5bc:	481b      	ldr	r0, [pc, #108]	; (801c62c <dhcp_discover+0x104>)
 801c5be:	f004 fafb 	bl	8020bb8 <iprintf>
 801c5c2:	e7eb      	b.n	801c59c <dhcp_discover+0x74>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801c5c4:	4631      	mov	r1, r6
 801c5c6:	4638      	mov	r0, r7
 801c5c8:	464a      	mov	r2, r9
 801c5ca:	f7ff fe1f 	bl	801c20c <dhcp_option_trailer>
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801c5ce:	4918      	ldr	r1, [pc, #96]	; (801c630 <dhcp_discover+0x108>)
 801c5d0:	4a18      	ldr	r2, [pc, #96]	; (801c634 <dhcp_discover+0x10c>)
 801c5d2:	2343      	movs	r3, #67	; 0x43
 801c5d4:	6808      	ldr	r0, [r1, #0]
 801c5d6:	4649      	mov	r1, r9
 801c5d8:	e9cd a200 	strd	sl, r2, [sp]
 801c5dc:	4a16      	ldr	r2, [pc, #88]	; (801c638 <dhcp_discover+0x110>)
 801c5de:	f7ff faf7 	bl	801bbd0 <udp_sendto_if_src>
    pbuf_free(p_out);
 801c5e2:	4648      	mov	r0, r9
 801c5e4:	f7fa f990 	bl	8016908 <pbuf_free>
  if (dhcp->tries < 255) {
 801c5e8:	79ab      	ldrb	r3, [r5, #6]
 801c5ea:	2bff      	cmp	r3, #255	; 0xff
 801c5ec:	d013      	beq.n	801c616 <dhcp_discover+0xee>
    dhcp->tries++;
 801c5ee:	3301      	adds	r3, #1
 801c5f0:	b2da      	uxtb	r2, r3
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801c5f2:	2a05      	cmp	r2, #5
    dhcp->tries++;
 801c5f4:	71aa      	strb	r2, [r5, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801c5f6:	d80e      	bhi.n	801c616 <dhcp_discover+0xee>
 801c5f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801c5fc:	490f      	ldr	r1, [pc, #60]	; (801c63c <dhcp_discover+0x114>)
}
 801c5fe:	2000      	movs	r0, #0
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801c600:	4093      	lsls	r3, r2
 801c602:	b29b      	uxth	r3, r3
 801c604:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801c608:	fba1 2303 	umull	r2, r3, r1, r3
 801c60c:	095b      	lsrs	r3, r3, #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801c60e:	812b      	strh	r3, [r5, #8]
}
 801c610:	b005      	add	sp, #20
 801c612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801c616:	2378      	movs	r3, #120	; 0x78
}
 801c618:	2000      	movs	r0, #0
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801c61a:	812b      	strh	r3, [r5, #8]
}
 801c61c:	b005      	add	sp, #20
 801c61e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c622:	bf00      	nop
 801c624:	0803f38c 	.word	0x0803f38c
 801c628:	0803f400 	.word	0x0803f400
 801c62c:	08026bb8 	.word	0x08026bb8
 801c630:	2002a440 	.word	0x2002a440
 801c634:	0803f8a8 	.word	0x0803f8a8
 801c638:	0803f8ac 	.word	0x0803f8ac
 801c63c:	10624dd3 	.word	0x10624dd3
 801c640:	0803f2cd 	.word	0x0803f2cd

0801c644 <dhcp_check>:
{
 801c644:	b510      	push	{r4, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c646:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (new_state != dhcp->state) {
 801c648:	7963      	ldrb	r3, [r4, #5]
 801c64a:	2b08      	cmp	r3, #8
 801c64c:	d004      	beq.n	801c658 <dhcp_check+0x14>
    dhcp->tries = 0;
 801c64e:	2300      	movs	r3, #0
    dhcp->state = new_state;
 801c650:	2208      	movs	r2, #8
    dhcp->tries = 0;
 801c652:	71a3      	strb	r3, [r4, #6]
    dhcp->state = new_state;
 801c654:	7162      	strb	r2, [r4, #5]
    dhcp->request_timeout = 0;
 801c656:	8123      	strh	r3, [r4, #8]
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801c658:	2200      	movs	r2, #0
 801c65a:	f104 011c 	add.w	r1, r4, #28
 801c65e:	f001 fad3 	bl	801dc08 <etharp_query>
  if (dhcp->tries < 255) {
 801c662:	79a3      	ldrb	r3, [r4, #6]
 801c664:	2bff      	cmp	r3, #255	; 0xff
 801c666:	d001      	beq.n	801c66c <dhcp_check+0x28>
    dhcp->tries++;
 801c668:	3301      	adds	r3, #1
 801c66a:	71a3      	strb	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801c66c:	2301      	movs	r3, #1
 801c66e:	8123      	strh	r3, [r4, #8]
}
 801c670:	bd10      	pop	{r4, pc}
 801c672:	bf00      	nop

0801c674 <dhcp_bind>:
{
 801c674:	b510      	push	{r4, lr}
 801c676:	b082      	sub	sp, #8
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801c678:	2800      	cmp	r0, #0
 801c67a:	d075      	beq.n	801c768 <dhcp_bind+0xf4>
  dhcp = netif_dhcp_data(netif);
 801c67c:	6a81      	ldr	r1, [r0, #40]	; 0x28
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801c67e:	2900      	cmp	r1, #0
 801c680:	d07b      	beq.n	801c77a <dhcp_bind+0x106>
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801c682:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  dhcp->lease_used = 0;
 801c684:	2200      	movs	r2, #0
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801c686:	1c5c      	adds	r4, r3, #1
  dhcp->lease_used = 0;
 801c688:	824a      	strh	r2, [r1, #18]
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801c68a:	d00b      	beq.n	801c6a4 <dhcp_bind+0x30>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801c68c:	331e      	adds	r3, #30
 801c68e:	f1a2 3277 	sub.w	r2, r2, #2004318071	; 0x77777777
 801c692:	fba2 2303 	umull	r2, r3, r2, r3
 801c696:	095b      	lsrs	r3, r3, #5
    if (timeout > 0xffff) {
 801c698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c69c:	d259      	bcs.n	801c752 <dhcp_bind+0xde>
    if (dhcp->t0_timeout == 0) {
 801c69e:	b903      	cbnz	r3, 801c6a2 <dhcp_bind+0x2e>
      dhcp->t0_timeout = 1;
 801c6a0:	2301      	movs	r3, #1
 801c6a2:	828b      	strh	r3, [r1, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801c6a4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801c6a6:	1c53      	adds	r3, r2, #1
 801c6a8:	d040      	beq.n	801c72c <dhcp_bind+0xb8>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801c6aa:	321e      	adds	r2, #30
 801c6ac:	4b3e      	ldr	r3, [pc, #248]	; (801c7a8 <dhcp_bind+0x134>)
 801c6ae:	fba3 3202 	umull	r3, r2, r3, r2
 801c6b2:	0952      	lsrs	r2, r2, #5
    if (timeout > 0xffff) {
 801c6b4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 801c6b8:	d247      	bcs.n	801c74a <dhcp_bind+0xd6>
    if (dhcp->t1_timeout == 0) {
 801c6ba:	2a00      	cmp	r2, #0
 801c6bc:	d171      	bne.n	801c7a2 <dhcp_bind+0x12e>
      dhcp->t1_timeout = 1;
 801c6be:	2301      	movs	r3, #1
 801c6c0:	461a      	mov	r2, r3
 801c6c2:	814b      	strh	r3, [r1, #10]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801c6c4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801c6c6:	81ca      	strh	r2, [r1, #14]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801c6c8:	1c5c      	adds	r4, r3, #1
 801c6ca:	d033      	beq.n	801c734 <dhcp_bind+0xc0>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801c6cc:	331e      	adds	r3, #30
 801c6ce:	4c36      	ldr	r4, [pc, #216]	; (801c7a8 <dhcp_bind+0x134>)
 801c6d0:	fba4 4303 	umull	r4, r3, r4, r3
 801c6d4:	095b      	lsrs	r3, r3, #5
    if (timeout > 0xffff) {
 801c6d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c6da:	d241      	bcs.n	801c760 <dhcp_bind+0xec>
    if (dhcp->t2_timeout == 0) {
 801c6dc:	2b00      	cmp	r3, #0
 801c6de:	d15d      	bne.n	801c79c <dhcp_bind+0x128>
      dhcp->t2_timeout = 1;
 801c6e0:	2401      	movs	r4, #1
 801c6e2:	4623      	mov	r3, r4
 801c6e4:	818c      	strh	r4, [r1, #12]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801c6e6:	2401      	movs	r4, #1
 801c6e8:	820b      	strh	r3, [r1, #16]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801c6ea:	4293      	cmp	r3, r2
 801c6ec:	d802      	bhi.n	801c6f4 <dhcp_bind+0x80>
 801c6ee:	b10c      	cbz	r4, 801c6f4 <dhcp_bind+0x80>
    dhcp->t1_timeout = 0;
 801c6f0:	2300      	movs	r3, #0
 801c6f2:	814b      	strh	r3, [r1, #10]
  if (dhcp->subnet_mask_given) {
 801c6f4:	79cb      	ldrb	r3, [r1, #7]
 801c6f6:	b313      	cbz	r3, 801c73e <dhcp_bind+0xca>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801c6f8:	6a0b      	ldr	r3, [r1, #32]
 801c6fa:	9300      	str	r3, [sp, #0]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801c6fc:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 801c6fe:	9301      	str	r3, [sp, #4]
  if (ip4_addr_isany_val(gw_addr)) {
 801c700:	b92b      	cbnz	r3, 801c70e <dhcp_bind+0x9a>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801c702:	69cb      	ldr	r3, [r1, #28]
 801c704:	9a00      	ldr	r2, [sp, #0]
 801c706:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801c708:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801c70c:	9301      	str	r3, [sp, #4]
  if (new_state != dhcp->state) {
 801c70e:	794b      	ldrb	r3, [r1, #5]
 801c710:	2b0a      	cmp	r3, #10
 801c712:	d004      	beq.n	801c71e <dhcp_bind+0xaa>
    dhcp->tries = 0;
 801c714:	2300      	movs	r3, #0
    dhcp->state = new_state;
 801c716:	220a      	movs	r2, #10
    dhcp->tries = 0;
 801c718:	718b      	strb	r3, [r1, #6]
    dhcp->state = new_state;
 801c71a:	714a      	strb	r2, [r1, #5]
    dhcp->request_timeout = 0;
 801c71c:	810b      	strh	r3, [r1, #8]
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801c71e:	311c      	adds	r1, #28
 801c720:	ab01      	add	r3, sp, #4
 801c722:	466a      	mov	r2, sp
 801c724:	f7f9 fe9e 	bl	8016464 <netif_set_addr>
}
 801c728:	b002      	add	sp, #8
 801c72a:	bd10      	pop	{r4, pc}
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801c72c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 801c72e:	894a      	ldrh	r2, [r1, #10]
 801c730:	1c5c      	adds	r4, r3, #1
 801c732:	d1cb      	bne.n	801c6cc <dhcp_bind+0x58>
 801c734:	898b      	ldrh	r3, [r1, #12]
 801c736:	1c1c      	adds	r4, r3, #0
 801c738:	bf18      	it	ne
 801c73a:	2401      	movne	r4, #1
 801c73c:	e7d5      	b.n	801c6ea <dhcp_bind+0x76>
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801c73e:	7f0b      	ldrb	r3, [r1, #28]
    if (first_octet <= 127) {
 801c740:	061a      	lsls	r2, r3, #24
 801c742:	d423      	bmi.n	801c78c <dhcp_bind+0x118>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801c744:	23ff      	movs	r3, #255	; 0xff
 801c746:	9300      	str	r3, [sp, #0]
 801c748:	e7d8      	b.n	801c6fc <dhcp_bind+0x88>
    dhcp->t1_timeout = (u16_t)timeout;
 801c74a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c74e:	814a      	strh	r2, [r1, #10]
 801c750:	e7b8      	b.n	801c6c4 <dhcp_bind+0x50>
    dhcp->t0_timeout = (u16_t)timeout;
 801c752:	f64f 73ff 	movw	r3, #65535	; 0xffff
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801c756:	6aca      	ldr	r2, [r1, #44]	; 0x2c
    dhcp->t0_timeout = (u16_t)timeout;
 801c758:	828b      	strh	r3, [r1, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801c75a:	1c53      	adds	r3, r2, #1
 801c75c:	d1a5      	bne.n	801c6aa <dhcp_bind+0x36>
 801c75e:	e7e5      	b.n	801c72c <dhcp_bind+0xb8>
    dhcp->t2_timeout = (u16_t)timeout;
 801c760:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c764:	818b      	strh	r3, [r1, #12]
 801c766:	e7be      	b.n	801c6e6 <dhcp_bind+0x72>
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801c768:	4b10      	ldr	r3, [pc, #64]	; (801c7ac <dhcp_bind+0x138>)
 801c76a:	f240 4215 	movw	r2, #1045	; 0x415
 801c76e:	4910      	ldr	r1, [pc, #64]	; (801c7b0 <dhcp_bind+0x13c>)
 801c770:	4810      	ldr	r0, [pc, #64]	; (801c7b4 <dhcp_bind+0x140>)
 801c772:	f004 fa21 	bl	8020bb8 <iprintf>
}
 801c776:	b002      	add	sp, #8
 801c778:	bd10      	pop	{r4, pc}
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801c77a:	4b0c      	ldr	r3, [pc, #48]	; (801c7ac <dhcp_bind+0x138>)
 801c77c:	f240 4217 	movw	r2, #1047	; 0x417
 801c780:	490d      	ldr	r1, [pc, #52]	; (801c7b8 <dhcp_bind+0x144>)
 801c782:	480c      	ldr	r0, [pc, #48]	; (801c7b4 <dhcp_bind+0x140>)
 801c784:	f004 fa18 	bl	8020bb8 <iprintf>
}
 801c788:	b002      	add	sp, #8
 801c78a:	bd10      	pop	{r4, pc}
    } else if (first_octet >= 192) {
 801c78c:	2bbf      	cmp	r3, #191	; 0xbf
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801c78e:	bf8c      	ite	hi
 801c790:	f06f 437f 	mvnhi.w	r3, #4278190080	; 0xff000000
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801c794:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 801c798:	9300      	str	r3, [sp, #0]
 801c79a:	e7af      	b.n	801c6fc <dhcp_bind+0x88>
    dhcp->t2_timeout = (u16_t)timeout;
 801c79c:	b29b      	uxth	r3, r3
 801c79e:	818b      	strh	r3, [r1, #12]
 801c7a0:	e7a1      	b.n	801c6e6 <dhcp_bind+0x72>
    dhcp->t1_timeout = (u16_t)timeout;
 801c7a2:	b292      	uxth	r2, r2
 801c7a4:	814a      	strh	r2, [r1, #10]
 801c7a6:	e78d      	b.n	801c6c4 <dhcp_bind+0x50>
 801c7a8:	88888889 	.word	0x88888889
 801c7ac:	0803f38c 	.word	0x0803f38c
 801c7b0:	0803f1f4 	.word	0x0803f1f4
 801c7b4:	08026bb8 	.word	0x08026bb8
 801c7b8:	0803f210 	.word	0x0803f210

0801c7bc <dhcp_inc_pcb_refcount>:
{
 801c7bc:	b570      	push	{r4, r5, r6, lr}
  if (dhcp_pcb_refcount == 0) {
 801c7be:	4c15      	ldr	r4, [pc, #84]	; (801c814 <dhcp_inc_pcb_refcount+0x58>)
 801c7c0:	7823      	ldrb	r3, [r4, #0]
 801c7c2:	b9fb      	cbnz	r3, 801c804 <dhcp_inc_pcb_refcount+0x48>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 801c7c4:	4d14      	ldr	r5, [pc, #80]	; (801c818 <dhcp_inc_pcb_refcount+0x5c>)
 801c7c6:	682b      	ldr	r3, [r5, #0]
 801c7c8:	b12b      	cbz	r3, 801c7d6 <dhcp_inc_pcb_refcount+0x1a>
 801c7ca:	4b14      	ldr	r3, [pc, #80]	; (801c81c <dhcp_inc_pcb_refcount+0x60>)
 801c7cc:	22e5      	movs	r2, #229	; 0xe5
 801c7ce:	4914      	ldr	r1, [pc, #80]	; (801c820 <dhcp_inc_pcb_refcount+0x64>)
 801c7d0:	4814      	ldr	r0, [pc, #80]	; (801c824 <dhcp_inc_pcb_refcount+0x68>)
 801c7d2:	f004 f9f1 	bl	8020bb8 <iprintf>
    dhcp_pcb = udp_new();
 801c7d6:	f7ff fbdd 	bl	801bf94 <udp_new>
 801c7da:	6028      	str	r0, [r5, #0]
    if (dhcp_pcb == NULL) {
 801c7dc:	b1b0      	cbz	r0, 801c80c <dhcp_inc_pcb_refcount+0x50>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801c7de:	7a46      	ldrb	r6, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801c7e0:	2244      	movs	r2, #68	; 0x44
 801c7e2:	4911      	ldr	r1, [pc, #68]	; (801c828 <dhcp_inc_pcb_refcount+0x6c>)
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801c7e4:	f046 0620 	orr.w	r6, r6, #32
 801c7e8:	7246      	strb	r6, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801c7ea:	f7ff f971 	bl	801bad0 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 801c7ee:	2243      	movs	r2, #67	; 0x43
 801c7f0:	490d      	ldr	r1, [pc, #52]	; (801c828 <dhcp_inc_pcb_refcount+0x6c>)
 801c7f2:	6828      	ldr	r0, [r5, #0]
 801c7f4:	f7ff fb4a 	bl	801be8c <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801c7f8:	6828      	ldr	r0, [r5, #0]
 801c7fa:	2200      	movs	r2, #0
 801c7fc:	490b      	ldr	r1, [pc, #44]	; (801c82c <dhcp_inc_pcb_refcount+0x70>)
 801c7fe:	f7ff fb8b 	bl	801bf18 <udp_recv>
 801c802:	7823      	ldrb	r3, [r4, #0]
  dhcp_pcb_refcount++;
 801c804:	3301      	adds	r3, #1
  return ERR_OK;
 801c806:	2000      	movs	r0, #0
  dhcp_pcb_refcount++;
 801c808:	7023      	strb	r3, [r4, #0]
}
 801c80a:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_MEM;
 801c80c:	f04f 30ff 	mov.w	r0, #4294967295
}
 801c810:	bd70      	pop	{r4, r5, r6, pc}
 801c812:	bf00      	nop
 801c814:	2002a444 	.word	0x2002a444
 801c818:	2002a440 	.word	0x2002a440
 801c81c:	0803f38c 	.word	0x0803f38c
 801c820:	0803f2d0 	.word	0x0803f2d0
 801c824:	08026bb8 	.word	0x08026bb8
 801c828:	0803f8a8 	.word	0x0803f8a8
 801c82c:	0801c919 	.word	0x0801c919

0801c830 <dhcp_dec_pcb_refcount>:
{
 801c830:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801c832:	4d0b      	ldr	r5, [pc, #44]	; (801c860 <dhcp_dec_pcb_refcount+0x30>)
 801c834:	782c      	ldrb	r4, [r5, #0]
 801c836:	b154      	cbz	r4, 801c84e <dhcp_dec_pcb_refcount+0x1e>
  dhcp_pcb_refcount--;
 801c838:	3c01      	subs	r4, #1
 801c83a:	b2e4      	uxtb	r4, r4
 801c83c:	702c      	strb	r4, [r5, #0]
  if (dhcp_pcb_refcount == 0) {
 801c83e:	b104      	cbz	r4, 801c842 <dhcp_dec_pcb_refcount+0x12>
}
 801c840:	bd38      	pop	{r3, r4, r5, pc}
    udp_remove(dhcp_pcb);
 801c842:	4d08      	ldr	r5, [pc, #32]	; (801c864 <dhcp_dec_pcb_refcount+0x34>)
 801c844:	6828      	ldr	r0, [r5, #0]
 801c846:	f7ff fb79 	bl	801bf3c <udp_remove>
    dhcp_pcb = NULL;
 801c84a:	602c      	str	r4, [r5, #0]
}
 801c84c:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801c84e:	4b06      	ldr	r3, [pc, #24]	; (801c868 <dhcp_dec_pcb_refcount+0x38>)
 801c850:	22ff      	movs	r2, #255	; 0xff
 801c852:	4906      	ldr	r1, [pc, #24]	; (801c86c <dhcp_dec_pcb_refcount+0x3c>)
 801c854:	4806      	ldr	r0, [pc, #24]	; (801c870 <dhcp_dec_pcb_refcount+0x40>)
 801c856:	f004 f9af 	bl	8020bb8 <iprintf>
 801c85a:	782c      	ldrb	r4, [r5, #0]
 801c85c:	e7ec      	b.n	801c838 <dhcp_dec_pcb_refcount+0x8>
 801c85e:	bf00      	nop
 801c860:	2002a444 	.word	0x2002a444
 801c864:	2002a440 	.word	0x2002a440
 801c868:	0803f38c 	.word	0x0803f38c
 801c86c:	0803f2a8 	.word	0x0803f2a8
 801c870:	08026bb8 	.word	0x08026bb8

0801c874 <dhcp_handle_ack.isra.2>:
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 801c874:	b570      	push	{r4, r5, r6, lr}
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801c876:	4d26      	ldr	r5, [pc, #152]	; (801c910 <dhcp_handle_ack.isra.2+0x9c>)
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801c878:	2300      	movs	r3, #0
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 801c87a:	b082      	sub	sp, #8
 801c87c:	4604      	mov	r4, r0
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801c87e:	78ea      	ldrb	r2, [r5, #3]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801c880:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801c884:	b112      	cbz	r2, 801c88c <dhcp_handle_ack.isra.2+0x18>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801c886:	4b23      	ldr	r3, [pc, #140]	; (801c914 <dhcp_handle_ack.isra.2+0xa0>)
 801c888:	68db      	ldr	r3, [r3, #12]
 801c88a:	6283      	str	r3, [r0, #40]	; 0x28
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801c88c:	792b      	ldrb	r3, [r5, #4]
 801c88e:	b11b      	cbz	r3, 801c898 <dhcp_handle_ack.isra.2+0x24>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801c890:	4b20      	ldr	r3, [pc, #128]	; (801c914 <dhcp_handle_ack.isra.2+0xa0>)
 801c892:	691b      	ldr	r3, [r3, #16]
 801c894:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c896:	e002      	b.n	801c89e <dhcp_handle_ack.isra.2+0x2a>
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801c898:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801c89a:	085b      	lsrs	r3, r3, #1
 801c89c:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801c89e:	796b      	ldrb	r3, [r5, #5]
 801c8a0:	b11b      	cbz	r3, 801c8aa <dhcp_handle_ack.isra.2+0x36>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801c8a2:	4b1c      	ldr	r3, [pc, #112]	; (801c914 <dhcp_handle_ack.isra.2+0xa0>)
 801c8a4:	695b      	ldr	r3, [r3, #20]
 801c8a6:	6323      	str	r3, [r4, #48]	; 0x30
 801c8a8:	e004      	b.n	801c8b4 <dhcp_handle_ack.isra.2+0x40>
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801c8aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801c8ac:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801c8b0:	08db      	lsrs	r3, r3, #3
 801c8b2:	6323      	str	r3, [r4, #48]	; 0x30
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801c8b4:	690a      	ldr	r2, [r1, #16]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801c8b6:	79ab      	ldrb	r3, [r5, #6]
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801c8b8:	61e2      	str	r2, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801c8ba:	b13b      	cbz	r3, 801c8cc <dhcp_handle_ack.isra.2+0x58>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801c8bc:	4b15      	ldr	r3, [pc, #84]	; (801c914 <dhcp_handle_ack.isra.2+0xa0>)
 801c8be:	6998      	ldr	r0, [r3, #24]
 801c8c0:	f7f8 f9b8 	bl	8014c34 <lwip_htonl>
    dhcp->subnet_mask_given = 1;
 801c8c4:	2301      	movs	r3, #1
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801c8c6:	6220      	str	r0, [r4, #32]
    dhcp->subnet_mask_given = 1;
 801c8c8:	71e3      	strb	r3, [r4, #7]
 801c8ca:	e000      	b.n	801c8ce <dhcp_handle_ack.isra.2+0x5a>
    dhcp->subnet_mask_given = 0;
 801c8cc:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801c8ce:	79eb      	ldrb	r3, [r5, #7]
 801c8d0:	b123      	cbz	r3, 801c8dc <dhcp_handle_ack.isra.2+0x68>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801c8d2:	4b10      	ldr	r3, [pc, #64]	; (801c914 <dhcp_handle_ack.isra.2+0xa0>)
 801c8d4:	69d8      	ldr	r0, [r3, #28]
 801c8d6:	f7f8 f9ad 	bl	8014c34 <lwip_htonl>
 801c8da:	6260      	str	r0, [r4, #36]	; 0x24
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 801c8dc:	7a2b      	ldrb	r3, [r5, #8]
 801c8de:	b1a3      	cbz	r3, 801c90a <dhcp_handle_ack.isra.2+0x96>
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 801c8e0:	4e0c      	ldr	r6, [pc, #48]	; (801c914 <dhcp_handle_ack.isra.2+0xa0>)
 801c8e2:	ac02      	add	r4, sp, #8
 801c8e4:	6a30      	ldr	r0, [r6, #32]
 801c8e6:	f7f8 f9a5 	bl	8014c34 <lwip_htonl>
 801c8ea:	f844 0d04 	str.w	r0, [r4, #-4]!
    dns_setserver(n, &dns_addr);
 801c8ee:	2000      	movs	r0, #0
 801c8f0:	4621      	mov	r1, r4
 801c8f2:	f7f8 fd59 	bl	80153a8 <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 801c8f6:	7a6b      	ldrb	r3, [r5, #9]
 801c8f8:	b13b      	cbz	r3, 801c90a <dhcp_handle_ack.isra.2+0x96>
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 801c8fa:	6a70      	ldr	r0, [r6, #36]	; 0x24
 801c8fc:	f7f8 f99a 	bl	8014c34 <lwip_htonl>
    dns_setserver(n, &dns_addr);
 801c900:	4621      	mov	r1, r4
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 801c902:	9001      	str	r0, [sp, #4]
    dns_setserver(n, &dns_addr);
 801c904:	2001      	movs	r0, #1
 801c906:	f7f8 fd4f 	bl	80153a8 <dns_setserver>
}
 801c90a:	b002      	add	sp, #8
 801c90c:	bd70      	pop	{r4, r5, r6, pc}
 801c90e:	bf00      	nop
 801c910:	2003e2f4 	.word	0x2003e2f4
 801c914:	2003e300 	.word	0x2003e300

0801c918 <dhcp_recv>:
  struct netif *netif = ip_current_input_netif();
 801c918:	4bae      	ldr	r3, [pc, #696]	; (801cbd4 <dhcp_recv+0x2bc>)
{
 801c91a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct netif *netif = ip_current_input_netif();
 801c91e:	f8d3 a004 	ldr.w	sl, [r3, #4]
{
 801c922:	b08b      	sub	sp, #44	; 0x2c
 801c924:	4693      	mov	fp, r2
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c926:	f8da 9028 	ldr.w	r9, [sl, #40]	; 0x28
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801c92a:	f1b9 0f00 	cmp.w	r9, #0
 801c92e:	d009      	beq.n	801c944 <dhcp_recv+0x2c>
 801c930:	f899 3004 	ldrb.w	r3, [r9, #4]
 801c934:	b133      	cbz	r3, 801c944 <dhcp_recv+0x2c>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 801c936:	8953      	ldrh	r3, [r2, #10]
 801c938:	2b2b      	cmp	r3, #43	; 0x2b
 801c93a:	d903      	bls.n	801c944 <dhcp_recv+0x2c>
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801c93c:	6851      	ldr	r1, [r2, #4]
  if (reply_msg->op != DHCP_BOOTREPLY) {
 801c93e:	780b      	ldrb	r3, [r1, #0]
 801c940:	2b02      	cmp	r3, #2
 801c942:	d005      	beq.n	801c950 <dhcp_recv+0x38>
  pbuf_free(p);
 801c944:	4658      	mov	r0, fp
 801c946:	f7f9 ffdf 	bl	8016908 <pbuf_free>
}
 801c94a:	b00b      	add	sp, #44	; 0x2c
 801c94c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801c950:	f89a 6034 	ldrb.w	r6, [sl, #52]	; 0x34
 801c954:	b1b6      	cbz	r6, 801c984 <dhcp_recv+0x6c>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801c956:	7f0a      	ldrb	r2, [r1, #28]
 801c958:	f89a 302e 	ldrb.w	r3, [sl, #46]	; 0x2e
 801c95c:	429a      	cmp	r2, r3
 801c95e:	d1f1      	bne.n	801c944 <dhcp_recv+0x2c>
 801c960:	f10a 042f 	add.w	r4, sl, #47	; 0x2f
 801c964:	f101 001d 	add.w	r0, r1, #29
 801c968:	2301      	movs	r3, #1
 801c96a:	b2da      	uxtb	r2, r3
 801c96c:	3301      	adds	r3, #1
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801c96e:	2a05      	cmp	r2, #5
 801c970:	d808      	bhi.n	801c984 <dhcp_recv+0x6c>
 801c972:	42b2      	cmp	r2, r6
 801c974:	d206      	bcs.n	801c984 <dhcp_recv+0x6c>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801c976:	f814 5b01 	ldrb.w	r5, [r4], #1
 801c97a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c97e:	4295      	cmp	r5, r2
 801c980:	d0f3      	beq.n	801c96a <dhcp_recv+0x52>
free_pbuf_and_return:
 801c982:	e7df      	b.n	801c944 <dhcp_recv+0x2c>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801c984:	6848      	ldr	r0, [r1, #4]
 801c986:	f7f8 f955 	bl	8014c34 <lwip_htonl>
 801c98a:	f8d9 3000 	ldr.w	r3, [r9]
 801c98e:	4298      	cmp	r0, r3
 801c990:	d1d8      	bne.n	801c944 <dhcp_recv+0x2c>
  dhcp_clear_all_options(dhcp);
 801c992:	2200      	movs	r2, #0
 801c994:	4990      	ldr	r1, [pc, #576]	; (801cbd8 <dhcp_recv+0x2c0>)
 801c996:	604a      	str	r2, [r1, #4]
 801c998:	810a      	strh	r2, [r1, #8]
  if (p->len < DHCP_SNAME_OFS) {
 801c99a:	f8bb 300a 	ldrh.w	r3, [fp, #10]
  dhcp_clear_all_options(dhcp);
 801c99e:	600a      	str	r2, [r1, #0]
  if (p->len < DHCP_SNAME_OFS) {
 801c9a0:	2b2b      	cmp	r3, #43	; 0x2b
 801c9a2:	d9cf      	bls.n	801c944 <dhcp_recv+0x2c>
  int parse_sname_as_options = 0;
 801c9a4:	9204      	str	r2, [sp, #16]
  options_idx = DHCP_OPTIONS_OFS;
 801c9a6:	21f0      	movs	r1, #240	; 0xf0
  options_idx_max = p->tot_len;
 801c9a8:	f8bb 2008 	ldrh.w	r2, [fp, #8]
  options_idx = DHCP_OPTIONS_OFS;
 801c9ac:	9103      	str	r1, [sp, #12]
 801c9ae:	4690      	mov	r8, r2
 801c9b0:	f8cd b008 	str.w	fp, [sp, #8]
 801c9b4:	e9cd a906 	strd	sl, r9, [sp, #24]
 801c9b8:	e9dd 7b02 	ldrd	r7, fp, [sp, #8]
 801c9bc:	e000      	b.n	801c9c0 <dhcp_recv+0xa8>
 801c9be:	897b      	ldrh	r3, [r7, #10]
  while ((q != NULL) && (options_idx >= q->len)) {
 801c9c0:	455b      	cmp	r3, fp
    options_idx = (u16_t)(options_idx - q->len);
 801c9c2:	ebab 0203 	sub.w	r2, fp, r3
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801c9c6:	eba8 0303 	sub.w	r3, r8, r3
  while ((q != NULL) && (options_idx >= q->len)) {
 801c9ca:	d809      	bhi.n	801c9e0 <dhcp_recv+0xc8>
    q = q->next;
 801c9cc:	683f      	ldr	r7, [r7, #0]
    options_idx = (u16_t)(options_idx - q->len);
 801c9ce:	fa1f fb82 	uxth.w	fp, r2
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801c9d2:	fa1f f883 	uxth.w	r8, r3
  while ((q != NULL) && (options_idx >= q->len)) {
 801c9d6:	2f00      	cmp	r7, #0
 801c9d8:	d1f1      	bne.n	801c9be <dhcp_recv+0xa6>
 801c9da:	f8dd b008 	ldr.w	fp, [sp, #8]
 801c9de:	e7b1      	b.n	801c944 <dhcp_recv+0x2c>
  options = (u8_t *)q->payload;
 801c9e0:	687b      	ldr	r3, [r7, #4]
 801c9e2:	465c      	mov	r4, fp
 801c9e4:	f8cd b00c 	str.w	fp, [sp, #12]
 801c9e8:	9301      	str	r3, [sp, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801c9ea:	4544      	cmp	r4, r8
 801c9ec:	f080 8219 	bcs.w	801ce22 <dhcp_recv+0x50a>
 801c9f0:	9b01      	ldr	r3, [sp, #4]
 801c9f2:	5d1a      	ldrb	r2, [r3, r4]
 801c9f4:	2aff      	cmp	r2, #255	; 0xff
 801c9f6:	f000 8214 	beq.w	801ce22 <dhcp_recv+0x50a>
    u16_t val_offset = (u16_t)(offset + 2);
 801c9fa:	1ca6      	adds	r6, r4, #2
 801c9fc:	b2b6      	uxth	r6, r6
    if (val_offset < offset) {
 801c9fe:	42b4      	cmp	r4, r6
 801ca00:	d8eb      	bhi.n	801c9da <dhcp_recv+0xc2>
    if ((offset + 1) < q->len) {
 801ca02:	1c61      	adds	r1, r4, #1
 801ca04:	897b      	ldrh	r3, [r7, #10]
 801ca06:	4299      	cmp	r1, r3
 801ca08:	f280 8132 	bge.w	801cc70 <dhcp_recv+0x358>
      len = options[offset + 1];
 801ca0c:	9801      	ldr	r0, [sp, #4]
 801ca0e:	4420      	add	r0, r4
 801ca10:	7845      	ldrb	r5, [r0, #1]
    switch (op) {
 801ca12:	2a3b      	cmp	r2, #59	; 0x3b
 801ca14:	f200 8123 	bhi.w	801cc5e <dhcp_recv+0x346>
 801ca18:	e8df f012 	tbh	[pc, r2, lsl #1]
 801ca1c:	003c0088 	.word	0x003c0088
 801ca20:	01050121 	.word	0x01050121
 801ca24:	01210121 	.word	0x01210121
 801ca28:	012100aa 	.word	0x012100aa
 801ca2c:	01210121 	.word	0x01210121
 801ca30:	01210121 	.word	0x01210121
 801ca34:	01210121 	.word	0x01210121
 801ca38:	01210121 	.word	0x01210121
 801ca3c:	01210121 	.word	0x01210121
 801ca40:	01210121 	.word	0x01210121
 801ca44:	01210121 	.word	0x01210121
 801ca48:	01210121 	.word	0x01210121
 801ca4c:	01210121 	.word	0x01210121
 801ca50:	01210121 	.word	0x01210121
 801ca54:	01210121 	.word	0x01210121
 801ca58:	01210121 	.word	0x01210121
 801ca5c:	01210121 	.word	0x01210121
 801ca60:	01210121 	.word	0x01210121
 801ca64:	01210121 	.word	0x01210121
 801ca68:	01210121 	.word	0x01210121
 801ca6c:	01210121 	.word	0x01210121
 801ca70:	01210121 	.word	0x01210121
 801ca74:	01210121 	.word	0x01210121
 801ca78:	01210121 	.word	0x01210121
 801ca7c:	01210121 	.word	0x01210121
 801ca80:	01140121 	.word	0x01140121
 801ca84:	00d000f4 	.word	0x00d000f4
 801ca88:	012100c3 	.word	0x012100c3
 801ca8c:	01210121 	.word	0x01210121
 801ca90:	009c00e8 	.word	0x009c00e8
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801ca94:	2d04      	cmp	r5, #4
 801ca96:	f040 81ba 	bne.w	801ce0e <dhcp_recv+0x4f6>
      if (offset + len + 2 > 0xFFFF) {
 801ca9a:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 801ca9e:	429c      	cmp	r4, r3
 801caa0:	d89b      	bhi.n	801c9da <dhcp_recv+0xc2>
      offset = (u16_t)(offset + len + 2);
 801caa2:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801caa4:	f04f 0a06 	mov.w	sl, #6
      offset = (u16_t)(offset + len + 2);
 801caa8:	b2a4      	uxth	r4, r4
        u32_t value = 0;
 801caaa:	2300      	movs	r3, #0
 801caac:	4a4a      	ldr	r2, [pc, #296]	; (801cbd8 <dhcp_recv+0x2c0>)
 801caae:	9405      	str	r4, [sp, #20]
 801cab0:	eb02 0b0a 	add.w	fp, r2, sl
 801cab4:	9309      	str	r3, [sp, #36]	; 0x24
 801cab6:	e02e      	b.n	801cb16 <dhcp_recv+0x1fe>
          copy_len = LWIP_MIN(decode_len, 4);
 801cab8:	2d04      	cmp	r5, #4
 801caba:	46a9      	mov	r9, r5
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801cabc:	f89b 4000 	ldrb.w	r4, [fp]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801cac0:	4633      	mov	r3, r6
          copy_len = LWIP_MIN(decode_len, 4);
 801cac2:	bf28      	it	cs
 801cac4:	f04f 0904 	movcs.w	r9, #4
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801cac8:	a909      	add	r1, sp, #36	; 0x24
 801caca:	4638      	mov	r0, r7
          copy_len = LWIP_MIN(decode_len, 4);
 801cacc:	fa5f f989 	uxtb.w	r9, r9
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801cad0:	464a      	mov	r2, r9
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801cad2:	2c00      	cmp	r4, #0
 801cad4:	f040 81bf 	bne.w	801ce56 <dhcp_recv+0x53e>
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801cad8:	f7fa f9a6 	bl	8016e28 <pbuf_copy_partial>
 801cadc:	4581      	cmp	r9, r0
            dhcp_got_option(dhcp, decode_idx);
 801cade:	f04f 0301 	mov.w	r3, #1
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801cae2:	f47f af7a 	bne.w	801c9da <dhcp_recv+0xc2>
          if (decode_len > 4) {
 801cae6:	2d04      	cmp	r5, #4
 801cae8:	f240 81b8 	bls.w	801ce5c <dhcp_recv+0x544>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801caec:	07aa      	lsls	r2, r5, #30
 801caee:	f040 81c4 	bne.w	801ce7a <dhcp_recv+0x562>
            dhcp_got_option(dhcp, decode_idx);
 801caf2:	f80b 3b01 	strb.w	r3, [fp], #1
            decode_len = (u8_t)(decode_len - 4);
 801caf6:	3d04      	subs	r5, #4
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801caf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801cafa:	f7f8 f89b 	bl	8014c34 <lwip_htonl>
            next_val_offset = (u16_t)(val_offset + 4);
 801cafe:	1d33      	adds	r3, r6, #4
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801cb00:	4a36      	ldr	r2, [pc, #216]	; (801cbdc <dhcp_recv+0x2c4>)
            decode_len = (u8_t)(decode_len - 4);
 801cb02:	b2ed      	uxtb	r5, r5
            next_val_offset = (u16_t)(val_offset + 4);
 801cb04:	b29b      	uxth	r3, r3
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801cb06:	f842 002a 	str.w	r0, [r2, sl, lsl #2]
            decode_idx++;
 801cb0a:	f10a 0a01 	add.w	sl, sl, #1
            if (next_val_offset < val_offset) {
 801cb0e:	429e      	cmp	r6, r3
 801cb10:	461e      	mov	r6, r3
 801cb12:	f63f af62 	bhi.w	801c9da <dhcp_recv+0xc2>
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801cb16:	f1ba 0f09 	cmp.w	sl, #9
 801cb1a:	d9cd      	bls.n	801cab8 <dhcp_recv+0x1a0>
 801cb1c:	4b30      	ldr	r3, [pc, #192]	; (801cbe0 <dhcp_recv+0x2c8>)
 801cb1e:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 801cb22:	4930      	ldr	r1, [pc, #192]	; (801cbe4 <dhcp_recv+0x2cc>)
 801cb24:	4830      	ldr	r0, [pc, #192]	; (801cbe8 <dhcp_recv+0x2d0>)
 801cb26:	f004 f847 	bl	8020bb8 <iprintf>
 801cb2a:	e7c5      	b.n	801cab8 <dhcp_recv+0x1a0>
      offset++;
 801cb2c:	b28c      	uxth	r4, r1
    if (offset >= q->len) {
 801cb2e:	429c      	cmp	r4, r3
 801cb30:	f4ff af5b 	bcc.w	801c9ea <dhcp_recv+0xd2>
      offset = (u16_t)(offset - q->len);
 801cb34:	1ae4      	subs	r4, r4, r3
      offset_max = (u16_t)(offset_max - q->len);
 801cb36:	eba8 0803 	sub.w	r8, r8, r3
      offset = (u16_t)(offset - q->len);
 801cb3a:	b2a4      	uxth	r4, r4
      offset_max = (u16_t)(offset_max - q->len);
 801cb3c:	fa1f f888 	uxth.w	r8, r8
      if (offset < offset_max) {
 801cb40:	4544      	cmp	r4, r8
 801cb42:	f4bf af4a 	bcs.w	801c9da <dhcp_recv+0xc2>
        q = q->next;
 801cb46:	683f      	ldr	r7, [r7, #0]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801cb48:	2f00      	cmp	r7, #0
 801cb4a:	f000 81a7 	beq.w	801ce9c <dhcp_recv+0x584>
        options = (u8_t *)q->payload;
 801cb4e:	687b      	ldr	r3, [r7, #4]
 801cb50:	9301      	str	r3, [sp, #4]
 801cb52:	e74a      	b.n	801c9ea <dhcp_recv+0xd2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801cb54:	2d04      	cmp	r5, #4
 801cb56:	f040 810f 	bne.w	801cd78 <dhcp_recv+0x460>
      if (offset + len + 2 > 0xFFFF) {
 801cb5a:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 801cb5e:	429c      	cmp	r4, r3
 801cb60:	f63f af3b 	bhi.w	801c9da <dhcp_recv+0xc2>
      offset = (u16_t)(offset + len + 2);
 801cb64:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_T2;
 801cb66:	f04f 0a05 	mov.w	sl, #5
      offset = (u16_t)(offset + len + 2);
 801cb6a:	b2a4      	uxth	r4, r4
 801cb6c:	e79d      	b.n	801caaa <dhcp_recv+0x192>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801cb6e:	2500      	movs	r5, #0
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 801cb70:	07a9      	lsls	r1, r5, #30
 801cb72:	f040 81b5 	bne.w	801cee0 <dhcp_recv+0x5c8>
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 801cb76:	2d08      	cmp	r5, #8
 801cb78:	462a      	mov	r2, r5
 801cb7a:	bf28      	it	cs
 801cb7c:	2208      	movcs	r2, #8
 801cb7e:	b2d2      	uxtb	r2, r2
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801cb80:	42aa      	cmp	r2, r5
 801cb82:	f200 81a3 	bhi.w	801cecc <dhcp_recv+0x5b4>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 801cb86:	f04f 0a08 	mov.w	sl, #8
      if (offset + len + 2 > 0xFFFF) {
 801cb8a:	442c      	add	r4, r5
 801cb8c:	f64f 71fd 	movw	r1, #65533	; 0xfffd
 801cb90:	428c      	cmp	r4, r1
 801cb92:	f73f af22 	bgt.w	801c9da <dhcp_recv+0xc2>
      offset = (u16_t)(offset + len + 2);
 801cb96:	1974      	adds	r4, r6, r5
 801cb98:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 801cb9a:	2a00      	cmp	r2, #0
 801cb9c:	d0c7      	beq.n	801cb2e <dhcp_recv+0x216>
 801cb9e:	4615      	mov	r5, r2
 801cba0:	e783      	b.n	801caaa <dhcp_recv+0x192>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801cba2:	2d04      	cmp	r5, #4
 801cba4:	f040 80fc 	bne.w	801cda0 <dhcp_recv+0x488>
      if (offset + len + 2 > 0xFFFF) {
 801cba8:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 801cbac:	429c      	cmp	r4, r3
 801cbae:	f63f af14 	bhi.w	801c9da <dhcp_recv+0xc2>
      offset = (u16_t)(offset + len + 2);
 801cbb2:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801cbb4:	f04f 0a02 	mov.w	sl, #2
      offset = (u16_t)(offset + len + 2);
 801cbb8:	b2a4      	uxth	r4, r4
 801cbba:	e776      	b.n	801caaa <dhcp_recv+0x192>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801cbbc:	2d01      	cmp	r5, #1
 801cbbe:	f040 80f9 	bne.w	801cdb4 <dhcp_recv+0x49c>
      if (offset + len + 2 > 0xFFFF) {
 801cbc2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 801cbc6:	4299      	cmp	r1, r3
 801cbc8:	f43f af07 	beq.w	801c9da <dhcp_recv+0xc2>
      offset = (u16_t)(offset + len + 2);
 801cbcc:	3403      	adds	r4, #3
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801cbce:	46aa      	mov	sl, r5
      offset = (u16_t)(offset + len + 2);
 801cbd0:	b2a4      	uxth	r4, r4
 801cbd2:	e76a      	b.n	801caaa <dhcp_recv+0x192>
 801cbd4:	2002ead4 	.word	0x2002ead4
 801cbd8:	2003e2f4 	.word	0x2003e2f4
 801cbdc:	2003e300 	.word	0x2003e300
 801cbe0:	0803f38c 	.word	0x0803f38c
 801cbe4:	0803f48c 	.word	0x0803f48c
 801cbe8:	08026bb8 	.word	0x08026bb8
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801cbec:	2d04      	cmp	r5, #4
 801cbee:	f040 80cd 	bne.w	801cd8c <dhcp_recv+0x474>
      if (offset + len + 2 > 0xFFFF) {
 801cbf2:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 801cbf6:	429c      	cmp	r4, r3
 801cbf8:	f63f aeef 	bhi.w	801c9da <dhcp_recv+0xc2>
      offset = (u16_t)(offset + len + 2);
 801cbfc:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_T1;
 801cbfe:	46aa      	mov	sl, r5
      offset = (u16_t)(offset + len + 2);
 801cc00:	b2a4      	uxth	r4, r4
 801cc02:	e752      	b.n	801caaa <dhcp_recv+0x192>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801cc04:	2d01      	cmp	r5, #1
 801cc06:	f040 80df 	bne.w	801cdc8 <dhcp_recv+0x4b0>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801cc0a:	9b03      	ldr	r3, [sp, #12]
 801cc0c:	2bf0      	cmp	r3, #240	; 0xf0
 801cc0e:	f040 8153 	bne.w	801ceb8 <dhcp_recv+0x5a0>
      if (offset + len + 2 > 0xFFFF) {
 801cc12:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 801cc16:	4299      	cmp	r1, r3
 801cc18:	f43f aedf 	beq.w	801c9da <dhcp_recv+0xc2>
      offset = (u16_t)(offset + len + 2);
 801cc1c:	3403      	adds	r4, #3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801cc1e:	f04f 0a00 	mov.w	sl, #0
      offset = (u16_t)(offset + len + 2);
 801cc22:	b2a4      	uxth	r4, r4
 801cc24:	e741      	b.n	801caaa <dhcp_recv+0x192>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801cc26:	2d03      	cmp	r5, #3
 801cc28:	f240 80e2 	bls.w	801cdf0 <dhcp_recv+0x4d8>
      if (offset + len + 2 > 0xFFFF) {
 801cc2c:	442c      	add	r4, r5
 801cc2e:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801cc32:	429c      	cmp	r4, r3
 801cc34:	f73f aed1 	bgt.w	801c9da <dhcp_recv+0xc2>
      offset = (u16_t)(offset + len + 2);
 801cc38:	1974      	adds	r4, r6, r5
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801cc3a:	f04f 0a07 	mov.w	sl, #7
        decode_len = 4; /* only copy the first given router */
 801cc3e:	2504      	movs	r5, #4
      offset = (u16_t)(offset + len + 2);
 801cc40:	b2a4      	uxth	r4, r4
 801cc42:	e732      	b.n	801caaa <dhcp_recv+0x192>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801cc44:	2d04      	cmp	r5, #4
 801cc46:	f040 80c9 	bne.w	801cddc <dhcp_recv+0x4c4>
      if (offset + len + 2 > 0xFFFF) {
 801cc4a:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 801cc4e:	429c      	cmp	r4, r3
 801cc50:	f63f aec3 	bhi.w	801c9da <dhcp_recv+0xc2>
      offset = (u16_t)(offset + len + 2);
 801cc54:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801cc56:	f04f 0a03 	mov.w	sl, #3
      offset = (u16_t)(offset + len + 2);
 801cc5a:	b2a4      	uxth	r4, r4
 801cc5c:	e725      	b.n	801caaa <dhcp_recv+0x192>
      if (offset + len + 2 > 0xFFFF) {
 801cc5e:	442c      	add	r4, r5
 801cc60:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801cc64:	4294      	cmp	r4, r2
 801cc66:	f73f aeb8 	bgt.w	801c9da <dhcp_recv+0xc2>
      offset = (u16_t)(offset + len + 2);
 801cc6a:	1974      	adds	r4, r6, r5
 801cc6c:	b2a4      	uxth	r4, r4
 801cc6e:	e75e      	b.n	801cb2e <dhcp_recv+0x216>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801cc70:	6838      	ldr	r0, [r7, #0]
 801cc72:	b110      	cbz	r0, 801cc7a <dhcp_recv+0x362>
 801cc74:	6840      	ldr	r0, [r0, #4]
 801cc76:	7805      	ldrb	r5, [r0, #0]
 801cc78:	e6cb      	b.n	801ca12 <dhcp_recv+0xfa>
    switch (op) {
 801cc7a:	2a3b      	cmp	r2, #59	; 0x3b
 801cc7c:	f200 80c2 	bhi.w	801ce04 <dhcp_recv+0x4ec>
 801cc80:	a001      	add	r0, pc, #4	; (adr r0, 801cc88 <dhcp_recv+0x370>)
 801cc82:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 801cc86:	bf00      	nop
 801cc88:	0801cb2d 	.word	0x0801cb2d
 801cc8c:	0801ce0f 	.word	0x0801ce0f
 801cc90:	0801ce05 	.word	0x0801ce05
 801cc94:	0801cdf1 	.word	0x0801cdf1
 801cc98:	0801ce05 	.word	0x0801ce05
 801cc9c:	0801ce05 	.word	0x0801ce05
 801cca0:	0801cb6f 	.word	0x0801cb6f
 801cca4:	0801ce05 	.word	0x0801ce05
 801cca8:	0801ce05 	.word	0x0801ce05
 801ccac:	0801ce05 	.word	0x0801ce05
 801ccb0:	0801ce05 	.word	0x0801ce05
 801ccb4:	0801ce05 	.word	0x0801ce05
 801ccb8:	0801ce05 	.word	0x0801ce05
 801ccbc:	0801ce05 	.word	0x0801ce05
 801ccc0:	0801ce05 	.word	0x0801ce05
 801ccc4:	0801ce05 	.word	0x0801ce05
 801ccc8:	0801ce05 	.word	0x0801ce05
 801cccc:	0801ce05 	.word	0x0801ce05
 801ccd0:	0801ce05 	.word	0x0801ce05
 801ccd4:	0801ce05 	.word	0x0801ce05
 801ccd8:	0801ce05 	.word	0x0801ce05
 801ccdc:	0801ce05 	.word	0x0801ce05
 801cce0:	0801ce05 	.word	0x0801ce05
 801cce4:	0801ce05 	.word	0x0801ce05
 801cce8:	0801ce05 	.word	0x0801ce05
 801ccec:	0801ce05 	.word	0x0801ce05
 801ccf0:	0801ce05 	.word	0x0801ce05
 801ccf4:	0801ce05 	.word	0x0801ce05
 801ccf8:	0801ce05 	.word	0x0801ce05
 801ccfc:	0801ce05 	.word	0x0801ce05
 801cd00:	0801ce05 	.word	0x0801ce05
 801cd04:	0801ce05 	.word	0x0801ce05
 801cd08:	0801ce05 	.word	0x0801ce05
 801cd0c:	0801ce05 	.word	0x0801ce05
 801cd10:	0801ce05 	.word	0x0801ce05
 801cd14:	0801ce05 	.word	0x0801ce05
 801cd18:	0801ce05 	.word	0x0801ce05
 801cd1c:	0801ce05 	.word	0x0801ce05
 801cd20:	0801ce05 	.word	0x0801ce05
 801cd24:	0801ce05 	.word	0x0801ce05
 801cd28:	0801ce05 	.word	0x0801ce05
 801cd2c:	0801ce05 	.word	0x0801ce05
 801cd30:	0801ce05 	.word	0x0801ce05
 801cd34:	0801ce05 	.word	0x0801ce05
 801cd38:	0801ce05 	.word	0x0801ce05
 801cd3c:	0801ce05 	.word	0x0801ce05
 801cd40:	0801ce05 	.word	0x0801ce05
 801cd44:	0801ce05 	.word	0x0801ce05
 801cd48:	0801ce05 	.word	0x0801ce05
 801cd4c:	0801ce05 	.word	0x0801ce05
 801cd50:	0801ce05 	.word	0x0801ce05
 801cd54:	0801cddd 	.word	0x0801cddd
 801cd58:	0801cdc9 	.word	0x0801cdc9
 801cd5c:	0801cdb5 	.word	0x0801cdb5
 801cd60:	0801cda1 	.word	0x0801cda1
 801cd64:	0801ce05 	.word	0x0801ce05
 801cd68:	0801ce05 	.word	0x0801ce05
 801cd6c:	0801ce05 	.word	0x0801ce05
 801cd70:	0801cd8d 	.word	0x0801cd8d
 801cd74:	0801cd79 	.word	0x0801cd79
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801cd78:	4b96      	ldr	r3, [pc, #600]	; (801cfd4 <dhcp_recv+0x6bc>)
 801cd7a:	f240 6261 	movw	r2, #1633	; 0x661
 801cd7e:	4996      	ldr	r1, [pc, #600]	; (801cfd8 <dhcp_recv+0x6c0>)
 801cd80:	4896      	ldr	r0, [pc, #600]	; (801cfdc <dhcp_recv+0x6c4>)
 801cd82:	f8dd b008 	ldr.w	fp, [sp, #8]
 801cd86:	f003 ff17 	bl	8020bb8 <iprintf>
 801cd8a:	e5db      	b.n	801c944 <dhcp_recv+0x2c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801cd8c:	4b91      	ldr	r3, [pc, #580]	; (801cfd4 <dhcp_recv+0x6bc>)
 801cd8e:	f240 625d 	movw	r2, #1629	; 0x65d
 801cd92:	4991      	ldr	r1, [pc, #580]	; (801cfd8 <dhcp_recv+0x6c0>)
 801cd94:	4891      	ldr	r0, [pc, #580]	; (801cfdc <dhcp_recv+0x6c4>)
 801cd96:	f8dd b008 	ldr.w	fp, [sp, #8]
 801cd9a:	f003 ff0d 	bl	8020bb8 <iprintf>
 801cd9e:	e5d1      	b.n	801c944 <dhcp_recv+0x2c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801cda0:	4b8c      	ldr	r3, [pc, #560]	; (801cfd4 <dhcp_recv+0x6bc>)
 801cda2:	f240 6259 	movw	r2, #1625	; 0x659
 801cda6:	498c      	ldr	r1, [pc, #560]	; (801cfd8 <dhcp_recv+0x6c0>)
 801cda8:	488c      	ldr	r0, [pc, #560]	; (801cfdc <dhcp_recv+0x6c4>)
 801cdaa:	f8dd b008 	ldr.w	fp, [sp, #8]
 801cdae:	f003 ff03 	bl	8020bb8 <iprintf>
 801cdb2:	e5c7      	b.n	801c944 <dhcp_recv+0x2c>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801cdb4:	4b87      	ldr	r3, [pc, #540]	; (801cfd4 <dhcp_recv+0x6bc>)
 801cdb6:	f240 6255 	movw	r2, #1621	; 0x655
 801cdba:	4989      	ldr	r1, [pc, #548]	; (801cfe0 <dhcp_recv+0x6c8>)
 801cdbc:	4887      	ldr	r0, [pc, #540]	; (801cfdc <dhcp_recv+0x6c4>)
 801cdbe:	f8dd b008 	ldr.w	fp, [sp, #8]
 801cdc2:	f003 fef9 	bl	8020bb8 <iprintf>
 801cdc6:	e5bd      	b.n	801c944 <dhcp_recv+0x2c>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801cdc8:	4b82      	ldr	r3, [pc, #520]	; (801cfd4 <dhcp_recv+0x6bc>)
 801cdca:	f240 624f 	movw	r2, #1615	; 0x64f
 801cdce:	4984      	ldr	r1, [pc, #528]	; (801cfe0 <dhcp_recv+0x6c8>)
 801cdd0:	4882      	ldr	r0, [pc, #520]	; (801cfdc <dhcp_recv+0x6c4>)
 801cdd2:	f8dd b008 	ldr.w	fp, [sp, #8]
 801cdd6:	f003 feef 	bl	8020bb8 <iprintf>
 801cdda:	e5b3      	b.n	801c944 <dhcp_recv+0x2c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801cddc:	4b7d      	ldr	r3, [pc, #500]	; (801cfd4 <dhcp_recv+0x6bc>)
 801cdde:	f240 6241 	movw	r2, #1601	; 0x641
 801cde2:	497d      	ldr	r1, [pc, #500]	; (801cfd8 <dhcp_recv+0x6c0>)
 801cde4:	487d      	ldr	r0, [pc, #500]	; (801cfdc <dhcp_recv+0x6c4>)
 801cde6:	f8dd b008 	ldr.w	fp, [sp, #8]
 801cdea:	f003 fee5 	bl	8020bb8 <iprintf>
 801cdee:	e5a9      	b.n	801c944 <dhcp_recv+0x2c>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801cdf0:	4b78      	ldr	r3, [pc, #480]	; (801cfd4 <dhcp_recv+0x6bc>)
 801cdf2:	f240 6233 	movw	r2, #1587	; 0x633
 801cdf6:	497b      	ldr	r1, [pc, #492]	; (801cfe4 <dhcp_recv+0x6cc>)
 801cdf8:	4878      	ldr	r0, [pc, #480]	; (801cfdc <dhcp_recv+0x6c4>)
 801cdfa:	f8dd b008 	ldr.w	fp, [sp, #8]
 801cdfe:	f003 fedb 	bl	8020bb8 <iprintf>
 801ce02:	e59f      	b.n	801c944 <dhcp_recv+0x2c>
        decode_len = 0;
 801ce04:	2200      	movs	r2, #0
    int decode_idx = -1;
 801ce06:	f04f 3aff 	mov.w	sl, #4294967295
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801ce0a:	4615      	mov	r5, r2
 801ce0c:	e6bd      	b.n	801cb8a <dhcp_recv+0x272>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801ce0e:	4b71      	ldr	r3, [pc, #452]	; (801cfd4 <dhcp_recv+0x6bc>)
 801ce10:	f240 622e 	movw	r2, #1582	; 0x62e
 801ce14:	4970      	ldr	r1, [pc, #448]	; (801cfd8 <dhcp_recv+0x6c0>)
 801ce16:	4871      	ldr	r0, [pc, #452]	; (801cfdc <dhcp_recv+0x6c4>)
 801ce18:	f8dd b008 	ldr.w	fp, [sp, #8]
 801ce1c:	f003 fecc 	bl	8020bb8 <iprintf>
 801ce20:	e590      	b.n	801c944 <dhcp_recv+0x2c>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801ce22:	4b71      	ldr	r3, [pc, #452]	; (801cfe8 <dhcp_recv+0x6d0>)
 801ce24:	781b      	ldrb	r3, [r3, #0]
 801ce26:	b153      	cbz	r3, 801ce3e <dhcp_recv+0x526>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801ce28:	4b70      	ldr	r3, [pc, #448]	; (801cfec <dhcp_recv+0x6d4>)
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801ce2a:	2200      	movs	r2, #0
 801ce2c:	496e      	ldr	r1, [pc, #440]	; (801cfe8 <dhcp_recv+0x6d0>)
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801ce2e:	681b      	ldr	r3, [r3, #0]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801ce30:	700a      	strb	r2, [r1, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801ce32:	2b01      	cmp	r3, #1
 801ce34:	d02d      	beq.n	801ce92 <dhcp_recv+0x57a>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801ce36:	2b02      	cmp	r3, #2
 801ce38:	d004      	beq.n	801ce44 <dhcp_recv+0x52c>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801ce3a:	2b03      	cmp	r3, #3
 801ce3c:	d027      	beq.n	801ce8e <dhcp_recv+0x576>
  } else if (parse_sname_as_options) {
 801ce3e:	9b04      	ldr	r3, [sp, #16]
 801ce40:	2b00      	cmp	r3, #0
 801ce42:	d057      	beq.n	801cef4 <dhcp_recv+0x5dc>
    parse_sname_as_options = 0;
 801ce44:	2300      	movs	r3, #0
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801ce46:	f04f 086c 	mov.w	r8, #108	; 0x6c
    parse_sname_as_options = 0;
 801ce4a:	9304      	str	r3, [sp, #16]
    options_idx = DHCP_SNAME_OFS;
 801ce4c:	232c      	movs	r3, #44	; 0x2c
 801ce4e:	9303      	str	r3, [sp, #12]
 801ce50:	9b02      	ldr	r3, [sp, #8]
 801ce52:	895b      	ldrh	r3, [r3, #10]
 801ce54:	e5b0      	b.n	801c9b8 <dhcp_recv+0xa0>
 801ce56:	9c05      	ldr	r4, [sp, #20]
 801ce58:	897b      	ldrh	r3, [r7, #10]
 801ce5a:	e668      	b.n	801cb2e <dhcp_recv+0x216>
 801ce5c:	9c05      	ldr	r4, [sp, #20]
          } else if (decode_len == 4) {
 801ce5e:	d027      	beq.n	801ceb0 <dhcp_recv+0x598>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801ce60:	2d01      	cmp	r5, #1
 801ce62:	f040 80ad 	bne.w	801cfc0 <dhcp_recv+0x6a8>
            value = ((u8_t *)&value)[0];
 801ce66:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
          dhcp_set_option_value(dhcp, decode_idx, value);
 801ce6a:	4a60      	ldr	r2, [pc, #384]	; (801cfec <dhcp_recv+0x6d4>)
          dhcp_got_option(dhcp, decode_idx);
 801ce6c:	2301      	movs	r3, #1
          dhcp_set_option_value(dhcp, decode_idx, value);
 801ce6e:	f842 002a 	str.w	r0, [r2, sl, lsl #2]
          dhcp_got_option(dhcp, decode_idx);
 801ce72:	4a5d      	ldr	r2, [pc, #372]	; (801cfe8 <dhcp_recv+0x6d0>)
 801ce74:	f802 300a 	strb.w	r3, [r2, sl]
 801ce78:	e7ee      	b.n	801ce58 <dhcp_recv+0x540>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801ce7a:	4b56      	ldr	r3, [pc, #344]	; (801cfd4 <dhcp_recv+0x6bc>)
 801ce7c:	f240 6281 	movw	r2, #1665	; 0x681
 801ce80:	495b      	ldr	r1, [pc, #364]	; (801cff0 <dhcp_recv+0x6d8>)
 801ce82:	4856      	ldr	r0, [pc, #344]	; (801cfdc <dhcp_recv+0x6c4>)
 801ce84:	f8dd b008 	ldr.w	fp, [sp, #8]
 801ce88:	f003 fe96 	bl	8020bb8 <iprintf>
 801ce8c:	e55a      	b.n	801c944 <dhcp_recv+0x2c>
      parse_sname_as_options = 1;
 801ce8e:	2301      	movs	r3, #1
 801ce90:	9304      	str	r3, [sp, #16]
    options_idx = DHCP_FILE_OFS;
 801ce92:	236c      	movs	r3, #108	; 0x6c
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801ce94:	f04f 08ec 	mov.w	r8, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 801ce98:	9303      	str	r3, [sp, #12]
 801ce9a:	e7d9      	b.n	801ce50 <dhcp_recv+0x538>
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801ce9c:	4b4d      	ldr	r3, [pc, #308]	; (801cfd4 <dhcp_recv+0x6bc>)
 801ce9e:	f240 629d 	movw	r2, #1693	; 0x69d
 801cea2:	4954      	ldr	r1, [pc, #336]	; (801cff4 <dhcp_recv+0x6dc>)
 801cea4:	484d      	ldr	r0, [pc, #308]	; (801cfdc <dhcp_recv+0x6c4>)
 801cea6:	f8dd b008 	ldr.w	fp, [sp, #8]
 801ceaa:	f003 fe85 	bl	8020bb8 <iprintf>
 801ceae:	e549      	b.n	801c944 <dhcp_recv+0x2c>
            value = lwip_ntohl(value);
 801ceb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ceb2:	f7f7 febf 	bl	8014c34 <lwip_htonl>
 801ceb6:	e7d8      	b.n	801ce6a <dhcp_recv+0x552>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801ceb8:	4b46      	ldr	r3, [pc, #280]	; (801cfd4 <dhcp_recv+0x6bc>)
 801ceba:	f240 6251 	movw	r2, #1617	; 0x651
 801cebe:	494e      	ldr	r1, [pc, #312]	; (801cff8 <dhcp_recv+0x6e0>)
 801cec0:	4846      	ldr	r0, [pc, #280]	; (801cfdc <dhcp_recv+0x6c4>)
 801cec2:	f8dd b008 	ldr.w	fp, [sp, #8]
 801cec6:	f003 fe77 	bl	8020bb8 <iprintf>
 801ceca:	e53b      	b.n	801c944 <dhcp_recv+0x2c>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801cecc:	4b41      	ldr	r3, [pc, #260]	; (801cfd4 <dhcp_recv+0x6bc>)
 801cece:	f240 623c 	movw	r2, #1596	; 0x63c
 801ced2:	4944      	ldr	r1, [pc, #272]	; (801cfe4 <dhcp_recv+0x6cc>)
 801ced4:	4841      	ldr	r0, [pc, #260]	; (801cfdc <dhcp_recv+0x6c4>)
 801ced6:	f8dd b008 	ldr.w	fp, [sp, #8]
 801ceda:	f003 fe6d 	bl	8020bb8 <iprintf>
 801cede:	e531      	b.n	801c944 <dhcp_recv+0x2c>
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 801cee0:	4b3c      	ldr	r3, [pc, #240]	; (801cfd4 <dhcp_recv+0x6bc>)
 801cee2:	f240 6239 	movw	r2, #1593	; 0x639
 801cee6:	4945      	ldr	r1, [pc, #276]	; (801cffc <dhcp_recv+0x6e4>)
 801cee8:	483c      	ldr	r0, [pc, #240]	; (801cfdc <dhcp_recv+0x6c4>)
 801ceea:	f8dd b008 	ldr.w	fp, [sp, #8]
 801ceee:	f003 fe63 	bl	8020bb8 <iprintf>
 801cef2:	e527      	b.n	801c944 <dhcp_recv+0x2c>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801cef4:	4b3c      	ldr	r3, [pc, #240]	; (801cfe8 <dhcp_recv+0x6d0>)
 801cef6:	f8dd b008 	ldr.w	fp, [sp, #8]
 801cefa:	785b      	ldrb	r3, [r3, #1]
 801cefc:	e9dd a906 	ldrd	sl, r9, [sp, #24]
 801cf00:	2b00      	cmp	r3, #0
 801cf02:	f43f ad1f 	beq.w	801c944 <dhcp_recv+0x2c>
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801cf06:	4a39      	ldr	r2, [pc, #228]	; (801cfec <dhcp_recv+0x6d4>)
  msg_in = (struct dhcp_msg *)p->payload;
 801cf08:	f8db 4004 	ldr.w	r4, [fp, #4]
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801cf0c:	7913      	ldrb	r3, [r2, #4]
  if (msg_type == DHCP_ACK) {
 801cf0e:	2b05      	cmp	r3, #5
 801cf10:	d01c      	beq.n	801cf4c <dhcp_recv+0x634>
  else if ((msg_type == DHCP_NAK) &&
 801cf12:	2b06      	cmp	r3, #6
 801cf14:	d02b      	beq.n	801cf6e <dhcp_recv+0x656>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801cf16:	2b02      	cmp	r3, #2
 801cf18:	f47f ad14 	bne.w	801c944 <dhcp_recv+0x2c>
 801cf1c:	f899 3005 	ldrb.w	r3, [r9, #5]
 801cf20:	2b06      	cmp	r3, #6
 801cf22:	f47f ad0f 	bne.w	801c944 <dhcp_recv+0x2c>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801cf26:	4b30      	ldr	r3, [pc, #192]	; (801cfe8 <dhcp_recv+0x6d0>)
 801cf28:	789b      	ldrb	r3, [r3, #2]
 801cf2a:	2b00      	cmp	r3, #0
 801cf2c:	f43f ad0a 	beq.w	801c944 <dhcp_recv+0x2c>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801cf30:	f8da 5028 	ldr.w	r5, [sl, #40]	; 0x28
    dhcp->request_timeout = 0; /* stop timer */
 801cf34:	9b04      	ldr	r3, [sp, #16]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801cf36:	6890      	ldr	r0, [r2, #8]
    dhcp->request_timeout = 0; /* stop timer */
 801cf38:	812b      	strh	r3, [r5, #8]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801cf3a:	f7f7 fe7b 	bl	8014c34 <lwip_htonl>
 801cf3e:	61a8      	str	r0, [r5, #24]
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801cf40:	6923      	ldr	r3, [r4, #16]
    dhcp_select(netif);
 801cf42:	4650      	mov	r0, sl
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801cf44:	61eb      	str	r3, [r5, #28]
    dhcp_select(netif);
 801cf46:	f7ff fa1f 	bl	801c388 <dhcp_select>
 801cf4a:	e4fb      	b.n	801c944 <dhcp_recv+0x2c>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801cf4c:	f899 3005 	ldrb.w	r3, [r9, #5]
 801cf50:	2b01      	cmp	r3, #1
 801cf52:	d028      	beq.n	801cfa6 <dhcp_recv+0x68e>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801cf54:	3b03      	subs	r3, #3
 801cf56:	2b02      	cmp	r3, #2
 801cf58:	f63f acf4 	bhi.w	801c944 <dhcp_recv+0x2c>
      dhcp_handle_ack(netif, msg_in);
 801cf5c:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 801cf60:	4621      	mov	r1, r4
 801cf62:	f7ff fc87 	bl	801c874 <dhcp_handle_ack.isra.2>
      dhcp_bind(netif);
 801cf66:	4650      	mov	r0, sl
 801cf68:	f7ff fb84 	bl	801c674 <dhcp_bind>
 801cf6c:	e4ea      	b.n	801c944 <dhcp_recv+0x2c>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801cf6e:	f899 3005 	ldrb.w	r3, [r9, #5]
 801cf72:	1eda      	subs	r2, r3, #3
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801cf74:	2a02      	cmp	r2, #2
 801cf76:	d902      	bls.n	801cf7e <dhcp_recv+0x666>
 801cf78:	2b01      	cmp	r3, #1
 801cf7a:	f47f ace3 	bne.w	801c944 <dhcp_recv+0x2c>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801cf7e:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
  if (new_state != dhcp->state) {
 801cf82:	795a      	ldrb	r2, [r3, #5]
 801cf84:	2a0c      	cmp	r2, #12
 801cf86:	d004      	beq.n	801cf92 <dhcp_recv+0x67a>
    dhcp->tries = 0;
 801cf88:	2200      	movs	r2, #0
    dhcp->state = new_state;
 801cf8a:	210c      	movs	r1, #12
    dhcp->tries = 0;
 801cf8c:	719a      	strb	r2, [r3, #6]
    dhcp->state = new_state;
 801cf8e:	7159      	strb	r1, [r3, #5]
    dhcp->request_timeout = 0;
 801cf90:	811a      	strh	r2, [r3, #8]
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801cf92:	4b1b      	ldr	r3, [pc, #108]	; (801d000 <dhcp_recv+0x6e8>)
 801cf94:	4650      	mov	r0, sl
 801cf96:	461a      	mov	r2, r3
 801cf98:	4619      	mov	r1, r3
 801cf9a:	f7f9 fa63 	bl	8016464 <netif_set_addr>
  dhcp_discover(netif);
 801cf9e:	4650      	mov	r0, sl
 801cfa0:	f7ff fac2 	bl	801c528 <dhcp_discover>
 801cfa4:	e4ce      	b.n	801c944 <dhcp_recv+0x2c>
      dhcp_handle_ack(netif, msg_in);
 801cfa6:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 801cfaa:	4621      	mov	r1, r4
 801cfac:	f7ff fc62 	bl	801c874 <dhcp_handle_ack.isra.2>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801cfb0:	f89a 3035 	ldrb.w	r3, [sl, #53]	; 0x35
        dhcp_check(netif);
 801cfb4:	4650      	mov	r0, sl
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801cfb6:	071b      	lsls	r3, r3, #28
 801cfb8:	d5d6      	bpl.n	801cf68 <dhcp_recv+0x650>
        dhcp_check(netif);
 801cfba:	f7ff fb43 	bl	801c644 <dhcp_check>
 801cfbe:	e4c1      	b.n	801c944 <dhcp_recv+0x2c>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801cfc0:	4b04      	ldr	r3, [pc, #16]	; (801cfd4 <dhcp_recv+0x6bc>)
 801cfc2:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 801cfc6:	490f      	ldr	r1, [pc, #60]	; (801d004 <dhcp_recv+0x6ec>)
 801cfc8:	4804      	ldr	r0, [pc, #16]	; (801cfdc <dhcp_recv+0x6c4>)
 801cfca:	f8dd b008 	ldr.w	fp, [sp, #8]
 801cfce:	f003 fdf3 	bl	8020bb8 <iprintf>
 801cfd2:	e4b7      	b.n	801c944 <dhcp_recv+0x2c>
 801cfd4:	0803f38c 	.word	0x0803f38c
 801cfd8:	0803f438 	.word	0x0803f438
 801cfdc:	08026bb8 	.word	0x08026bb8
 801cfe0:	0803f468 	.word	0x0803f468
 801cfe4:	0803f444 	.word	0x0803f444
 801cfe8:	2003e2f4 	.word	0x2003e2f4
 801cfec:	2003e300 	.word	0x2003e300
 801cff0:	0803f4a0 	.word	0x0803f4a0
 801cff4:	0803f4cc 	.word	0x0803f4cc
 801cff8:	0803f474 	.word	0x0803f474
 801cffc:	0803f458 	.word	0x0803f458
 801d000:	0803f8a8 	.word	0x0803f8a8
 801d004:	0803f4b8 	.word	0x0803f4b8

0801d008 <dhcp_network_changed>:
{
 801d008:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d00a:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (!dhcp) {
 801d00c:	b154      	cbz	r4, 801d024 <dhcp_network_changed+0x1c>
  switch (dhcp->state) {
 801d00e:	7963      	ldrb	r3, [r4, #5]
 801d010:	2b0a      	cmp	r3, #10
 801d012:	d80e      	bhi.n	801d032 <dhcp_network_changed+0x2a>
 801d014:	e8df f003 	tbb	[pc, r3]
 801d018:	070d0d06 	.word	0x070d0d06
 801d01c:	0d0d0707 	.word	0x0d0d0707
 801d020:	0d0d      	.short	0x0d0d
 801d022:	07          	.byte	0x07
 801d023:	00          	.byte	0x00
}
 801d024:	bd38      	pop	{r3, r4, r5, pc}
      dhcp->tries = 0;
 801d026:	2300      	movs	r3, #0
 801d028:	71a3      	strb	r3, [r4, #6]
}
 801d02a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      dhcp_reboot(netif);
 801d02e:	f7ff b909 	b.w	801c244 <dhcp_reboot>
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 801d032:	2b0c      	cmp	r3, #12
 801d034:	4605      	mov	r5, r0
 801d036:	d806      	bhi.n	801d046 <dhcp_network_changed+0x3e>
      dhcp->tries = 0;
 801d038:	2300      	movs	r3, #0
      dhcp_discover(netif);
 801d03a:	4628      	mov	r0, r5
      dhcp->tries = 0;
 801d03c:	71a3      	strb	r3, [r4, #6]
}
 801d03e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      dhcp_discover(netif);
 801d042:	f7ff ba71 	b.w	801c528 <dhcp_discover>
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 801d046:	4b04      	ldr	r3, [pc, #16]	; (801d058 <dhcp_network_changed+0x50>)
 801d048:	f240 326d 	movw	r2, #877	; 0x36d
 801d04c:	4903      	ldr	r1, [pc, #12]	; (801d05c <dhcp_network_changed+0x54>)
 801d04e:	4804      	ldr	r0, [pc, #16]	; (801d060 <dhcp_network_changed+0x58>)
 801d050:	f003 fdb2 	bl	8020bb8 <iprintf>
 801d054:	e7f0      	b.n	801d038 <dhcp_network_changed+0x30>
 801d056:	bf00      	nop
 801d058:	0803f38c 	.word	0x0803f38c
 801d05c:	0803f2f8 	.word	0x0803f2f8
 801d060:	08026bb8 	.word	0x08026bb8

0801d064 <dhcp_arp_reply>:
{
 801d064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d068:	b084      	sub	sp, #16
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801d06a:	2800      	cmp	r0, #0
 801d06c:	d048      	beq.n	801d100 <dhcp_arp_reply+0x9c>
  dhcp = netif_dhcp_data(netif);
 801d06e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801d070:	4605      	mov	r5, r0
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801d072:	b114      	cbz	r4, 801d07a <dhcp_arp_reply+0x16>
 801d074:	7963      	ldrb	r3, [r4, #5]
 801d076:	2b08      	cmp	r3, #8
 801d078:	d002      	beq.n	801d080 <dhcp_arp_reply+0x1c>
}
 801d07a:	b004      	add	sp, #16
 801d07c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801d080:	680a      	ldr	r2, [r1, #0]
 801d082:	69e3      	ldr	r3, [r4, #28]
 801d084:	429a      	cmp	r2, r3
 801d086:	d1f8      	bne.n	801d07a <dhcp_arp_reply+0x16>
    dhcp->tries = 0;
 801d088:	2600      	movs	r6, #0
    dhcp->state = new_state;
 801d08a:	210c      	movs	r1, #12
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801d08c:	f10d 030e 	add.w	r3, sp, #14
 801d090:	2204      	movs	r2, #4
    dhcp->state = new_state;
 801d092:	7161      	strb	r1, [r4, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801d094:	4621      	mov	r1, r4
    dhcp->tries = 0;
 801d096:	71a6      	strb	r6, [r4, #6]
    dhcp->request_timeout = 0;
 801d098:	8126      	strh	r6, [r4, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801d09a:	f7ff f809 	bl	801c0b0 <dhcp_create_msg>
  if (p_out != NULL) {
 801d09e:	4606      	mov	r6, r0
 801d0a0:	b330      	cbz	r0, 801d0f0 <dhcp_arp_reply+0x8c>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801d0a2:	6847      	ldr	r7, [r0, #4]
 801d0a4:	2304      	movs	r3, #4
 801d0a6:	2232      	movs	r2, #50	; 0x32
 801d0a8:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 801d0ac:	37f0      	adds	r7, #240	; 0xf0
 801d0ae:	4639      	mov	r1, r7
 801d0b0:	f7fe ffbc 	bl	801c02c <dhcp_option>
 801d0b4:	4680      	mov	r8, r0
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801d0b6:	69e0      	ldr	r0, [r4, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801d0b8:	f8ad 800e 	strh.w	r8, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801d0bc:	f7f7 fdba 	bl	8014c34 <lwip_htonl>
 801d0c0:	4639      	mov	r1, r7
 801d0c2:	4602      	mov	r2, r0
 801d0c4:	4640      	mov	r0, r8
 801d0c6:	f7fe ffcf 	bl	801c068 <dhcp_option_long>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801d0ca:	4639      	mov	r1, r7
 801d0cc:	4632      	mov	r2, r6
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801d0ce:	f8ad 000e 	strh.w	r0, [sp, #14]
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801d0d2:	f7ff f89b 	bl	801c20c <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801d0d6:	490f      	ldr	r1, [pc, #60]	; (801d114 <dhcp_arp_reply+0xb0>)
 801d0d8:	4a0f      	ldr	r2, [pc, #60]	; (801d118 <dhcp_arp_reply+0xb4>)
 801d0da:	2343      	movs	r3, #67	; 0x43
 801d0dc:	6808      	ldr	r0, [r1, #0]
 801d0de:	4631      	mov	r1, r6
 801d0e0:	e9cd 5200 	strd	r5, r2, [sp]
 801d0e4:	4a0d      	ldr	r2, [pc, #52]	; (801d11c <dhcp_arp_reply+0xb8>)
 801d0e6:	f7fe fd73 	bl	801bbd0 <udp_sendto_if_src>
    pbuf_free(p_out);
 801d0ea:	4630      	mov	r0, r6
 801d0ec:	f7f9 fc0c 	bl	8016908 <pbuf_free>
  if (dhcp->tries < 255) {
 801d0f0:	79a3      	ldrb	r3, [r4, #6]
 801d0f2:	2bff      	cmp	r3, #255	; 0xff
 801d0f4:	d001      	beq.n	801d0fa <dhcp_arp_reply+0x96>
    dhcp->tries++;
 801d0f6:	3301      	adds	r3, #1
 801d0f8:	71a3      	strb	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801d0fa:	2314      	movs	r3, #20
 801d0fc:	8123      	strh	r3, [r4, #8]
 801d0fe:	e7bc      	b.n	801d07a <dhcp_arp_reply+0x16>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801d100:	4b07      	ldr	r3, [pc, #28]	; (801d120 <dhcp_arp_reply+0xbc>)
 801d102:	f240 328b 	movw	r2, #907	; 0x38b
 801d106:	4907      	ldr	r1, [pc, #28]	; (801d124 <dhcp_arp_reply+0xc0>)
 801d108:	4807      	ldr	r0, [pc, #28]	; (801d128 <dhcp_arp_reply+0xc4>)
 801d10a:	f003 fd55 	bl	8020bb8 <iprintf>
}
 801d10e:	b004      	add	sp, #16
 801d110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d114:	2002a440 	.word	0x2002a440
 801d118:	0803f8a8 	.word	0x0803f8a8
 801d11c:	0803f8ac 	.word	0x0803f8ac
 801d120:	0803f38c 	.word	0x0803f38c
 801d124:	08026ba8 	.word	0x08026ba8
 801d128:	08026bb8 	.word	0x08026bb8

0801d12c <dhcp_renew>:
{
 801d12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d130:	6a86      	ldr	r6, [r0, #40]	; 0x28
{
 801d132:	b085      	sub	sp, #20
 801d134:	4683      	mov	fp, r0
  if (new_state != dhcp->state) {
 801d136:	7973      	ldrb	r3, [r6, #5]
 801d138:	2b05      	cmp	r3, #5
 801d13a:	d004      	beq.n	801d146 <dhcp_renew+0x1a>
    dhcp->tries = 0;
 801d13c:	2300      	movs	r3, #0
    dhcp->state = new_state;
 801d13e:	2205      	movs	r2, #5
    dhcp->tries = 0;
 801d140:	71b3      	strb	r3, [r6, #6]
    dhcp->state = new_state;
 801d142:	7172      	strb	r2, [r6, #5]
    dhcp->request_timeout = 0;
 801d144:	8133      	strh	r3, [r6, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801d146:	f10d 030e 	add.w	r3, sp, #14
 801d14a:	2203      	movs	r2, #3
 801d14c:	4631      	mov	r1, r6
 801d14e:	4658      	mov	r0, fp
 801d150:	f7fe ffae 	bl	801c0b0 <dhcp_create_msg>
  if (p_out != NULL) {
 801d154:	4682      	mov	sl, r0
 801d156:	2800      	cmp	r0, #0
 801d158:	d067      	beq.n	801d22a <dhcp_renew+0xfe>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801d15a:	6845      	ldr	r5, [r0, #4]
 801d15c:	2302      	movs	r3, #2
 801d15e:	2239      	movs	r2, #57	; 0x39
 801d160:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 801d164:	35f0      	adds	r5, #240	; 0xf0
 801d166:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 801d244 <dhcp_renew+0x118>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801d16a:	f04f 0801 	mov.w	r8, #1
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801d16e:	4629      	mov	r1, r5
 801d170:	f7fe ff5c 	bl	801c02c <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801d174:	4629      	mov	r1, r5
 801d176:	f8bb 202c 	ldrh.w	r2, [fp, #44]	; 0x2c
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801d17a:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801d17e:	f7fe ff39 	bl	801bff4 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801d182:	4629      	mov	r1, r5
 801d184:	2304      	movs	r3, #4
 801d186:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801d188:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801d18c:	f7fe ff4e 	bl	801c02c <dhcp_option>
 801d190:	4604      	mov	r4, r0
 801d192:	1d07      	adds	r7, r0, #4
 801d194:	f8ad 000e 	strh.w	r0, [sp, #14]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801d198:	2c43      	cmp	r4, #67	; 0x43
 801d19a:	b2bf      	uxth	r7, r7
 801d19c:	d80b      	bhi.n	801d1b6 <dhcp_renew+0x8a>
  options[options_out_len++] = value;
 801d19e:	1c63      	adds	r3, r4, #1
 801d1a0:	f805 8004 	strb.w	r8, [r5, r4]
 801d1a4:	b29c      	uxth	r4, r3
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d1a6:	42bc      	cmp	r4, r7
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801d1a8:	f8ad 400e 	strh.w	r4, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d1ac:	d00b      	beq.n	801d1c6 <dhcp_renew+0x9a>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801d1ae:	2c43      	cmp	r4, #67	; 0x43
 801d1b0:	f819 8b01 	ldrb.w	r8, [r9], #1
 801d1b4:	d9f3      	bls.n	801d19e <dhcp_renew+0x72>
 801d1b6:	4b1e      	ldr	r3, [pc, #120]	; (801d230 <dhcp_renew+0x104>)
 801d1b8:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801d1bc:	491d      	ldr	r1, [pc, #116]	; (801d234 <dhcp_renew+0x108>)
 801d1be:	481e      	ldr	r0, [pc, #120]	; (801d238 <dhcp_renew+0x10c>)
 801d1c0:	f003 fcfa 	bl	8020bb8 <iprintf>
 801d1c4:	e7eb      	b.n	801d19e <dhcp_renew+0x72>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801d1c6:	4629      	mov	r1, r5
 801d1c8:	4638      	mov	r0, r7
 801d1ca:	4652      	mov	r2, sl
 801d1cc:	f7ff f81e 	bl	801c20c <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801d1d0:	4a1a      	ldr	r2, [pc, #104]	; (801d23c <dhcp_renew+0x110>)
 801d1d2:	f8cd b000 	str.w	fp, [sp]
 801d1d6:	2343      	movs	r3, #67	; 0x43
 801d1d8:	6810      	ldr	r0, [r2, #0]
 801d1da:	4651      	mov	r1, sl
 801d1dc:	f106 0218 	add.w	r2, r6, #24
 801d1e0:	f7fe fdb6 	bl	801bd50 <udp_sendto_if>
 801d1e4:	4604      	mov	r4, r0
    pbuf_free(p_out);
 801d1e6:	4650      	mov	r0, sl
 801d1e8:	f7f9 fb8e 	bl	8016908 <pbuf_free>
  if (dhcp->tries < 255) {
 801d1ec:	79b3      	ldrb	r3, [r6, #6]
 801d1ee:	2bff      	cmp	r3, #255	; 0xff
 801d1f0:	d015      	beq.n	801d21e <dhcp_renew+0xf2>
    dhcp->tries++;
 801d1f2:	3301      	adds	r3, #1
 801d1f4:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801d1f6:	2b09      	cmp	r3, #9
    dhcp->tries++;
 801d1f8:	71b3      	strb	r3, [r6, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801d1fa:	d810      	bhi.n	801d21e <dhcp_renew+0xf2>
 801d1fc:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
 801d200:	4a0f      	ldr	r2, [pc, #60]	; (801d240 <dhcp_renew+0x114>)
}
 801d202:	4620      	mov	r0, r4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801d204:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801d208:	011b      	lsls	r3, r3, #4
 801d20a:	b29b      	uxth	r3, r3
 801d20c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801d210:	fba2 2303 	umull	r2, r3, r2, r3
 801d214:	095b      	lsrs	r3, r3, #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801d216:	8133      	strh	r3, [r6, #8]
}
 801d218:	b005      	add	sp, #20
 801d21a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    result = ERR_MEM;
 801d21e:	2328      	movs	r3, #40	; 0x28
}
 801d220:	4620      	mov	r0, r4
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801d222:	8133      	strh	r3, [r6, #8]
}
 801d224:	b005      	add	sp, #20
 801d226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    result = ERR_MEM;
 801d22a:	f04f 34ff 	mov.w	r4, #4294967295
 801d22e:	e7dd      	b.n	801d1ec <dhcp_renew+0xc0>
 801d230:	0803f38c 	.word	0x0803f38c
 801d234:	0803f400 	.word	0x0803f400
 801d238:	08026bb8 	.word	0x08026bb8
 801d23c:	2002a440 	.word	0x2002a440
 801d240:	10624dd3 	.word	0x10624dd3
 801d244:	0803f2cd 	.word	0x0803f2cd

0801d248 <dhcp_release_and_stop>:
{
 801d248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d24c:	6a84      	ldr	r4, [r0, #40]	; 0x28
{
 801d24e:	b084      	sub	sp, #16
  if (dhcp == NULL) {
 801d250:	2c00      	cmp	r4, #0
 801d252:	d052      	beq.n	801d2fa <dhcp_release_and_stop+0xb2>
  if (dhcp->state == DHCP_STATE_OFF) {
 801d254:	7962      	ldrb	r2, [r4, #5]
 801d256:	2a00      	cmp	r2, #0
 801d258:	d04f      	beq.n	801d2fa <dhcp_release_and_stop+0xb2>
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
    struct dhcp *dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801d25a:	1f11      	subs	r1, r2, #4
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801d25c:	2300      	movs	r3, #0
 801d25e:	4605      	mov	r5, r0
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801d260:	69a0      	ldr	r0, [r4, #24]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801d262:	2901      	cmp	r1, #1
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801d264:	62a3      	str	r3, [r4, #40]	; 0x28
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801d266:	9003      	str	r0, [sp, #12]
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 801d268:	82a3      	strh	r3, [r4, #20]
 801d26a:	8263      	strh	r3, [r4, #18]
 801d26c:	8223      	strh	r3, [r4, #16]
 801d26e:	81e3      	strh	r3, [r4, #14]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 801d270:	e9c4 3306 	strd	r3, r3, [r4, #24]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801d274:	e9c4 3308 	strd	r3, r3, [r4, #32]
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801d278:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801d27c:	d901      	bls.n	801d282 <dhcp_release_and_stop+0x3a>
 801d27e:	2a0a      	cmp	r2, #10
 801d280:	d12d      	bne.n	801d2de <dhcp_release_and_stop+0x96>
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801d282:	f10d 030a 	add.w	r3, sp, #10
 801d286:	2207      	movs	r2, #7
 801d288:	4621      	mov	r1, r4
 801d28a:	4628      	mov	r0, r5
 801d28c:	f7fe ff10 	bl	801c0b0 <dhcp_create_msg>
    if (p_out != NULL) {
 801d290:	4606      	mov	r6, r0
 801d292:	b320      	cbz	r0, 801d2de <dhcp_release_and_stop+0x96>
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801d294:	6877      	ldr	r7, [r6, #4]
 801d296:	2304      	movs	r3, #4
 801d298:	2236      	movs	r2, #54	; 0x36
 801d29a:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 801d29e:	37f0      	adds	r7, #240	; 0xf0
 801d2a0:	4639      	mov	r1, r7
 801d2a2:	f7fe fec3 	bl	801c02c <dhcp_option>
 801d2a6:	4680      	mov	r8, r0
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801d2a8:	9803      	ldr	r0, [sp, #12]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801d2aa:	f8ad 800a 	strh.w	r8, [sp, #10]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801d2ae:	f7f7 fcc1 	bl	8014c34 <lwip_htonl>
 801d2b2:	4639      	mov	r1, r7
 801d2b4:	4602      	mov	r2, r0
 801d2b6:	4640      	mov	r0, r8
 801d2b8:	f7fe fed6 	bl	801c068 <dhcp_option_long>
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801d2bc:	4639      	mov	r1, r7
 801d2be:	4632      	mov	r2, r6
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801d2c0:	f8ad 000a 	strh.w	r0, [sp, #10]
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801d2c4:	f7fe ffa2 	bl	801c20c <dhcp_option_trailer>
      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801d2c8:	4a11      	ldr	r2, [pc, #68]	; (801d310 <dhcp_release_and_stop+0xc8>)
 801d2ca:	9500      	str	r5, [sp, #0]
 801d2cc:	2343      	movs	r3, #67	; 0x43
 801d2ce:	6810      	ldr	r0, [r2, #0]
 801d2d0:	4631      	mov	r1, r6
 801d2d2:	aa03      	add	r2, sp, #12
 801d2d4:	f7fe fd3c 	bl	801bd50 <udp_sendto_if>
      pbuf_free(p_out);
 801d2d8:	4630      	mov	r0, r6
 801d2da:	f7f9 fb15 	bl	8016908 <pbuf_free>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801d2de:	4b0d      	ldr	r3, [pc, #52]	; (801d314 <dhcp_release_and_stop+0xcc>)
 801d2e0:	4628      	mov	r0, r5
 801d2e2:	461a      	mov	r2, r3
 801d2e4:	4619      	mov	r1, r3
 801d2e6:	f7f9 f8bd 	bl	8016464 <netif_set_addr>
  if (new_state != dhcp->state) {
 801d2ea:	7963      	ldrb	r3, [r4, #5]
 801d2ec:	b11b      	cbz	r3, 801d2f6 <dhcp_release_and_stop+0xae>
    dhcp->state = new_state;
 801d2ee:	2300      	movs	r3, #0
 801d2f0:	7163      	strb	r3, [r4, #5]
    dhcp->tries = 0;
 801d2f2:	71a3      	strb	r3, [r4, #6]
    dhcp->request_timeout = 0;
 801d2f4:	8123      	strh	r3, [r4, #8]
  if (dhcp->pcb_allocated != 0) {
 801d2f6:	7923      	ldrb	r3, [r4, #4]
 801d2f8:	b913      	cbnz	r3, 801d300 <dhcp_release_and_stop+0xb8>
}
 801d2fa:	b004      	add	sp, #16
 801d2fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801d300:	f7ff fa96 	bl	801c830 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801d304:	2300      	movs	r3, #0
 801d306:	7123      	strb	r3, [r4, #4]
}
 801d308:	b004      	add	sp, #16
 801d30a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d30e:	bf00      	nop
 801d310:	2002a440 	.word	0x2002a440
 801d314:	0803f8a8 	.word	0x0803f8a8

0801d318 <dhcp_start>:
{
 801d318:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801d31a:	2800      	cmp	r0, #0
 801d31c:	d046      	beq.n	801d3ac <dhcp_start+0x94>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801d31e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 801d322:	4605      	mov	r5, r0
 801d324:	07da      	lsls	r2, r3, #31
 801d326:	d537      	bpl.n	801d398 <dhcp_start+0x80>
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801d328:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
  dhcp = netif_dhcp_data(netif);
 801d32a:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801d32c:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801d330:	d32f      	bcc.n	801d392 <dhcp_start+0x7a>
  if (dhcp == NULL) {
 801d332:	b33c      	cbz	r4, 801d384 <dhcp_start+0x6c>
    if (dhcp->pcb_allocated != 0) {
 801d334:	7923      	ldrb	r3, [r4, #4]
 801d336:	bb13      	cbnz	r3, 801d37e <dhcp_start+0x66>
  memset(dhcp, 0, sizeof(struct dhcp));
 801d338:	2234      	movs	r2, #52	; 0x34
 801d33a:	2100      	movs	r1, #0
 801d33c:	4620      	mov	r0, r4
 801d33e:	f002 fcba 	bl	801fcb6 <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801d342:	f7ff fa3b 	bl	801c7bc <dhcp_inc_pcb_refcount>
 801d346:	4606      	mov	r6, r0
 801d348:	bb18      	cbnz	r0, 801d392 <dhcp_start+0x7a>
  dhcp->pcb_allocated = 1;
 801d34a:	2301      	movs	r3, #1
 801d34c:	7123      	strb	r3, [r4, #4]
  if (!netif_is_link_up(netif)) {
 801d34e:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 801d352:	075b      	lsls	r3, r3, #29
 801d354:	d408      	bmi.n	801d368 <dhcp_start+0x50>
  if (new_state != dhcp->state) {
 801d356:	7963      	ldrb	r3, [r4, #5]
 801d358:	2b02      	cmp	r3, #2
 801d35a:	d003      	beq.n	801d364 <dhcp_start+0x4c>
    dhcp->state = new_state;
 801d35c:	2302      	movs	r3, #2
    dhcp->tries = 0;
 801d35e:	71a0      	strb	r0, [r4, #6]
    dhcp->request_timeout = 0;
 801d360:	8120      	strh	r0, [r4, #8]
    dhcp->state = new_state;
 801d362:	7163      	strb	r3, [r4, #5]
}
 801d364:	4630      	mov	r0, r6
 801d366:	bd70      	pop	{r4, r5, r6, pc}
  result = dhcp_discover(netif);
 801d368:	4628      	mov	r0, r5
 801d36a:	f7ff f8dd 	bl	801c528 <dhcp_discover>
  if (result != ERR_OK) {
 801d36e:	2800      	cmp	r0, #0
 801d370:	d0f8      	beq.n	801d364 <dhcp_start+0x4c>
    dhcp_release_and_stop(netif);
 801d372:	4628      	mov	r0, r5
    return ERR_MEM;
 801d374:	f04f 36ff 	mov.w	r6, #4294967295
    dhcp_release_and_stop(netif);
 801d378:	f7ff ff66 	bl	801d248 <dhcp_release_and_stop>
    return ERR_MEM;
 801d37c:	e7f2      	b.n	801d364 <dhcp_start+0x4c>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801d37e:	f7ff fa57 	bl	801c830 <dhcp_dec_pcb_refcount>
 801d382:	e7d9      	b.n	801d338 <dhcp_start+0x20>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801d384:	2034      	movs	r0, #52	; 0x34
 801d386:	f7f8 fdcf 	bl	8015f28 <mem_malloc>
    if (dhcp == NULL) {
 801d38a:	4604      	mov	r4, r0
 801d38c:	b108      	cbz	r0, 801d392 <dhcp_start+0x7a>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801d38e:	62a8      	str	r0, [r5, #40]	; 0x28
 801d390:	e7d2      	b.n	801d338 <dhcp_start+0x20>
    return ERR_MEM;
 801d392:	f04f 36ff 	mov.w	r6, #4294967295
 801d396:	e7e5      	b.n	801d364 <dhcp_start+0x4c>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801d398:	4b09      	ldr	r3, [pc, #36]	; (801d3c0 <dhcp_start+0xa8>)
 801d39a:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801d39e:	4909      	ldr	r1, [pc, #36]	; (801d3c4 <dhcp_start+0xac>)
 801d3a0:	f06f 060f 	mvn.w	r6, #15
 801d3a4:	4808      	ldr	r0, [pc, #32]	; (801d3c8 <dhcp_start+0xb0>)
 801d3a6:	f003 fc07 	bl	8020bb8 <iprintf>
 801d3aa:	e7db      	b.n	801d364 <dhcp_start+0x4c>
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801d3ac:	4b04      	ldr	r3, [pc, #16]	; (801d3c0 <dhcp_start+0xa8>)
 801d3ae:	f240 22e7 	movw	r2, #743	; 0x2e7
 801d3b2:	4906      	ldr	r1, [pc, #24]	; (801d3cc <dhcp_start+0xb4>)
 801d3b4:	f06f 060f 	mvn.w	r6, #15
 801d3b8:	4803      	ldr	r0, [pc, #12]	; (801d3c8 <dhcp_start+0xb0>)
 801d3ba:	f003 fbfd 	bl	8020bb8 <iprintf>
 801d3be:	e7d1      	b.n	801d364 <dhcp_start+0x4c>
 801d3c0:	0803f38c 	.word	0x0803f38c
 801d3c4:	0803f54c 	.word	0x0803f54c
 801d3c8:	08026bb8 	.word	0x08026bb8
 801d3cc:	08026ba8 	.word	0x08026ba8

0801d3d0 <dhcp_coarse_tmr>:
  NETIF_FOREACH(netif) {
 801d3d0:	4b5e      	ldr	r3, [pc, #376]	; (801d54c <dhcp_coarse_tmr+0x17c>)
{
 801d3d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  NETIF_FOREACH(netif) {
 801d3d6:	681d      	ldr	r5, [r3, #0]
{
 801d3d8:	b085      	sub	sp, #20
  NETIF_FOREACH(netif) {
 801d3da:	b1d5      	cbz	r5, 801d412 <dhcp_coarse_tmr+0x42>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801d3dc:	6aac      	ldr	r4, [r5, #40]	; 0x28
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801d3de:	b1ac      	cbz	r4, 801d40c <dhcp_coarse_tmr+0x3c>
 801d3e0:	7963      	ldrb	r3, [r4, #5]
 801d3e2:	b19b      	cbz	r3, 801d40c <dhcp_coarse_tmr+0x3c>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801d3e4:	8aa1      	ldrh	r1, [r4, #20]
 801d3e6:	b129      	cbz	r1, 801d3f4 <dhcp_coarse_tmr+0x24>
 801d3e8:	8a62      	ldrh	r2, [r4, #18]
 801d3ea:	3201      	adds	r2, #1
 801d3ec:	b292      	uxth	r2, r2
 801d3ee:	4291      	cmp	r1, r2
 801d3f0:	8262      	strh	r2, [r4, #18]
 801d3f2:	d011      	beq.n	801d418 <dhcp_coarse_tmr+0x48>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 801d3f4:	8a22      	ldrh	r2, [r4, #16]
 801d3f6:	b11a      	cbz	r2, 801d400 <dhcp_coarse_tmr+0x30>
 801d3f8:	1e51      	subs	r1, r2, #1
 801d3fa:	2a01      	cmp	r2, #1
 801d3fc:	8221      	strh	r1, [r4, #16]
 801d3fe:	d012      	beq.n	801d426 <dhcp_coarse_tmr+0x56>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 801d400:	89e2      	ldrh	r2, [r4, #14]
 801d402:	b11a      	cbz	r2, 801d40c <dhcp_coarse_tmr+0x3c>
 801d404:	1e51      	subs	r1, r2, #1
 801d406:	2a01      	cmp	r2, #1
 801d408:	81e1      	strh	r1, [r4, #14]
 801d40a:	d05e      	beq.n	801d4ca <dhcp_coarse_tmr+0xfa>
  NETIF_FOREACH(netif) {
 801d40c:	682d      	ldr	r5, [r5, #0]
 801d40e:	2d00      	cmp	r5, #0
 801d410:	d1e4      	bne.n	801d3dc <dhcp_coarse_tmr+0xc>
}
 801d412:	b005      	add	sp, #20
 801d414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        dhcp_release_and_stop(netif);
 801d418:	4628      	mov	r0, r5
 801d41a:	f7ff ff15 	bl	801d248 <dhcp_release_and_stop>
        dhcp_start(netif);
 801d41e:	4628      	mov	r0, r5
 801d420:	f7ff ff7a 	bl	801d318 <dhcp_start>
 801d424:	e7f2      	b.n	801d40c <dhcp_coarse_tmr+0x3c>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801d426:	1e5a      	subs	r2, r3, #1
 801d428:	b2d1      	uxtb	r1, r2
 801d42a:	2909      	cmp	r1, #9
 801d42c:	d8ee      	bhi.n	801d40c <dhcp_coarse_tmr+0x3c>
 801d42e:	f240 2219 	movw	r2, #537	; 0x219
 801d432:	40ca      	lsrs	r2, r1
 801d434:	43d2      	mvns	r2, r2
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801d436:	f012 0201 	ands.w	r2, r2, #1
 801d43a:	d1e7      	bne.n	801d40c <dhcp_coarse_tmr+0x3c>
  if (new_state != dhcp->state) {
 801d43c:	2b04      	cmp	r3, #4
 801d43e:	d003      	beq.n	801d448 <dhcp_coarse_tmr+0x78>
    dhcp->state = new_state;
 801d440:	2304      	movs	r3, #4
    dhcp->tries = 0;
 801d442:	71a2      	strb	r2, [r4, #6]
    dhcp->request_timeout = 0;
 801d444:	8122      	strh	r2, [r4, #8]
    dhcp->state = new_state;
 801d446:	7163      	strb	r3, [r4, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801d448:	f10d 030e 	add.w	r3, sp, #14
 801d44c:	2203      	movs	r2, #3
 801d44e:	4621      	mov	r1, r4
 801d450:	4628      	mov	r0, r5
 801d452:	f7fe fe2d 	bl	801c0b0 <dhcp_create_msg>
  if (p_out != NULL) {
 801d456:	4683      	mov	fp, r0
 801d458:	2800      	cmp	r0, #0
 801d45a:	d057      	beq.n	801d50c <dhcp_coarse_tmr+0x13c>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801d45c:	6847      	ldr	r7, [r0, #4]
 801d45e:	2302      	movs	r3, #2
 801d460:	2239      	movs	r2, #57	; 0x39
 801d462:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 801d466:	37f0      	adds	r7, #240	; 0xf0
 801d468:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 801d568 <dhcp_coarse_tmr+0x198>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801d46c:	f04f 0901 	mov.w	r9, #1
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801d470:	4639      	mov	r1, r7
 801d472:	f7fe fddb 	bl	801c02c <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801d476:	4639      	mov	r1, r7
 801d478:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801d47a:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801d47e:	f7fe fdb9 	bl	801bff4 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801d482:	4639      	mov	r1, r7
 801d484:	2304      	movs	r3, #4
 801d486:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801d488:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801d48c:	f7fe fdce 	bl	801c02c <dhcp_option>
 801d490:	4606      	mov	r6, r0
 801d492:	f100 0804 	add.w	r8, r0, #4
 801d496:	f8ad 000e 	strh.w	r0, [sp, #14]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801d49a:	2e43      	cmp	r6, #67	; 0x43
 801d49c:	fa1f f888 	uxth.w	r8, r8
 801d4a0:	d80b      	bhi.n	801d4ba <dhcp_coarse_tmr+0xea>
  options[options_out_len++] = value;
 801d4a2:	1c73      	adds	r3, r6, #1
 801d4a4:	f807 9006 	strb.w	r9, [r7, r6]
 801d4a8:	b29e      	uxth	r6, r3
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d4aa:	4546      	cmp	r6, r8
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801d4ac:	f8ad 600e 	strh.w	r6, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d4b0:	d01c      	beq.n	801d4ec <dhcp_coarse_tmr+0x11c>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801d4b2:	2e43      	cmp	r6, #67	; 0x43
 801d4b4:	f81a 9b01 	ldrb.w	r9, [sl], #1
 801d4b8:	d9f3      	bls.n	801d4a2 <dhcp_coarse_tmr+0xd2>
 801d4ba:	4b25      	ldr	r3, [pc, #148]	; (801d550 <dhcp_coarse_tmr+0x180>)
 801d4bc:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801d4c0:	4924      	ldr	r1, [pc, #144]	; (801d554 <dhcp_coarse_tmr+0x184>)
 801d4c2:	4825      	ldr	r0, [pc, #148]	; (801d558 <dhcp_coarse_tmr+0x188>)
 801d4c4:	f003 fb78 	bl	8020bb8 <iprintf>
 801d4c8:	e7eb      	b.n	801d4a2 <dhcp_coarse_tmr+0xd2>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801d4ca:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 801d4ce:	2a01      	cmp	r2, #1
 801d4d0:	d001      	beq.n	801d4d6 <dhcp_coarse_tmr+0x106>
 801d4d2:	2b0a      	cmp	r3, #10
 801d4d4:	d19a      	bne.n	801d40c <dhcp_coarse_tmr+0x3c>
    dhcp_renew(netif);
 801d4d6:	4628      	mov	r0, r5
 801d4d8:	f7ff fe28 	bl	801d12c <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801d4dc:	89a3      	ldrh	r3, [r4, #12]
 801d4de:	8a62      	ldrh	r2, [r4, #18]
 801d4e0:	1a9b      	subs	r3, r3, r2
 801d4e2:	2b01      	cmp	r3, #1
 801d4e4:	dd92      	ble.n	801d40c <dhcp_coarse_tmr+0x3c>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801d4e6:	105b      	asrs	r3, r3, #1
 801d4e8:	81e3      	strh	r3, [r4, #14]
 801d4ea:	e78f      	b.n	801d40c <dhcp_coarse_tmr+0x3c>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801d4ec:	4639      	mov	r1, r7
 801d4ee:	4640      	mov	r0, r8
 801d4f0:	465a      	mov	r2, fp
 801d4f2:	f7fe fe8b 	bl	801c20c <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801d4f6:	4a19      	ldr	r2, [pc, #100]	; (801d55c <dhcp_coarse_tmr+0x18c>)
 801d4f8:	9500      	str	r5, [sp, #0]
 801d4fa:	2343      	movs	r3, #67	; 0x43
 801d4fc:	6810      	ldr	r0, [r2, #0]
 801d4fe:	4659      	mov	r1, fp
 801d500:	4a17      	ldr	r2, [pc, #92]	; (801d560 <dhcp_coarse_tmr+0x190>)
 801d502:	f7fe fc25 	bl	801bd50 <udp_sendto_if>
    pbuf_free(p_out);
 801d506:	4658      	mov	r0, fp
 801d508:	f7f9 f9fe 	bl	8016908 <pbuf_free>
  if (dhcp->tries < 255) {
 801d50c:	79a3      	ldrb	r3, [r4, #6]
 801d50e:	2bff      	cmp	r3, #255	; 0xff
 801d510:	d01a      	beq.n	801d548 <dhcp_coarse_tmr+0x178>
    dhcp->tries++;
 801d512:	3301      	adds	r3, #1
 801d514:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801d516:	2b09      	cmp	r3, #9
    dhcp->tries++;
 801d518:	71a3      	strb	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801d51a:	d815      	bhi.n	801d548 <dhcp_coarse_tmr+0x178>
 801d51c:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 801d520:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801d524:	4a0f      	ldr	r2, [pc, #60]	; (801d564 <dhcp_coarse_tmr+0x194>)
 801d526:	00db      	lsls	r3, r3, #3
 801d528:	b29b      	uxth	r3, r3
 801d52a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801d52e:	fba2 2303 	umull	r2, r3, r2, r3
 801d532:	095b      	lsrs	r3, r3, #5
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801d534:	8aa2      	ldrh	r2, [r4, #20]
 801d536:	8a61      	ldrh	r1, [r4, #18]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801d538:	8123      	strh	r3, [r4, #8]
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801d53a:	1a53      	subs	r3, r2, r1
 801d53c:	2b01      	cmp	r3, #1
 801d53e:	f77f af65 	ble.w	801d40c <dhcp_coarse_tmr+0x3c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801d542:	105b      	asrs	r3, r3, #1
 801d544:	8223      	strh	r3, [r4, #16]
 801d546:	e761      	b.n	801d40c <dhcp_coarse_tmr+0x3c>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801d548:	2314      	movs	r3, #20
 801d54a:	e7f3      	b.n	801d534 <dhcp_coarse_tmr+0x164>
 801d54c:	2003e1c0 	.word	0x2003e1c0
 801d550:	0803f38c 	.word	0x0803f38c
 801d554:	0803f400 	.word	0x0803f400
 801d558:	08026bb8 	.word	0x08026bb8
 801d55c:	2002a440 	.word	0x2002a440
 801d560:	0803f8ac 	.word	0x0803f8ac
 801d564:	10624dd3 	.word	0x10624dd3
 801d568:	0803f2cd 	.word	0x0803f2cd

0801d56c <dhcp_fine_tmr>:
{
 801d56c:	b538      	push	{r3, r4, r5, lr}
  NETIF_FOREACH(netif) {
 801d56e:	4b21      	ldr	r3, [pc, #132]	; (801d5f4 <dhcp_fine_tmr+0x88>)
 801d570:	681c      	ldr	r4, [r3, #0]
 801d572:	b1fc      	cbz	r4, 801d5b4 <dhcp_fine_tmr+0x48>
        dhcp->request_timeout--;
 801d574:	2500      	movs	r5, #0
 801d576:	e003      	b.n	801d580 <dhcp_fine_tmr+0x14>
        dhcp->request_timeout--;
 801d578:	3a01      	subs	r2, #1
 801d57a:	811a      	strh	r2, [r3, #8]
  NETIF_FOREACH(netif) {
 801d57c:	6824      	ldr	r4, [r4, #0]
 801d57e:	b1cc      	cbz	r4, 801d5b4 <dhcp_fine_tmr+0x48>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801d580:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (dhcp != NULL) {
 801d582:	2b00      	cmp	r3, #0
 801d584:	d0fa      	beq.n	801d57c <dhcp_fine_tmr+0x10>
      if (dhcp->request_timeout > 1) {
 801d586:	891a      	ldrh	r2, [r3, #8]
 801d588:	2a01      	cmp	r2, #1
 801d58a:	d8f5      	bhi.n	801d578 <dhcp_fine_tmr+0xc>
      } else if (dhcp->request_timeout == 1) {
 801d58c:	d1f6      	bne.n	801d57c <dhcp_fine_tmr+0x10>
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801d58e:	795a      	ldrb	r2, [r3, #5]
        dhcp->request_timeout--;
 801d590:	811d      	strh	r5, [r3, #8]
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801d592:	2a0c      	cmp	r2, #12
 801d594:	d016      	beq.n	801d5c4 <dhcp_fine_tmr+0x58>
 801d596:	2a06      	cmp	r2, #6
 801d598:	d014      	beq.n	801d5c4 <dhcp_fine_tmr+0x58>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801d59a:	2a01      	cmp	r2, #1
 801d59c:	d00b      	beq.n	801d5b6 <dhcp_fine_tmr+0x4a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801d59e:	2a08      	cmp	r2, #8
 801d5a0:	d01a      	beq.n	801d5d8 <dhcp_fine_tmr+0x6c>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 801d5a2:	2a03      	cmp	r2, #3
 801d5a4:	d1ea      	bne.n	801d57c <dhcp_fine_tmr+0x10>
    if (dhcp->tries < REBOOT_TRIES) {
 801d5a6:	799b      	ldrb	r3, [r3, #6]
      dhcp_reboot(netif);
 801d5a8:	4620      	mov	r0, r4
    if (dhcp->tries < REBOOT_TRIES) {
 801d5aa:	2b01      	cmp	r3, #1
 801d5ac:	d91e      	bls.n	801d5ec <dhcp_fine_tmr+0x80>
      dhcp_discover(netif);
 801d5ae:	f7fe ffbb 	bl	801c528 <dhcp_discover>
 801d5b2:	e7e3      	b.n	801d57c <dhcp_fine_tmr+0x10>
}
 801d5b4:	bd38      	pop	{r3, r4, r5, pc}
    if (dhcp->tries <= 5) {
 801d5b6:	799b      	ldrb	r3, [r3, #6]
      dhcp_select(netif);
 801d5b8:	4620      	mov	r0, r4
    if (dhcp->tries <= 5) {
 801d5ba:	2b05      	cmp	r3, #5
 801d5bc:	d806      	bhi.n	801d5cc <dhcp_fine_tmr+0x60>
      dhcp_select(netif);
 801d5be:	f7fe fee3 	bl	801c388 <dhcp_select>
 801d5c2:	e7db      	b.n	801d57c <dhcp_fine_tmr+0x10>
    dhcp_discover(netif);
 801d5c4:	4620      	mov	r0, r4
 801d5c6:	f7fe ffaf 	bl	801c528 <dhcp_discover>
 801d5ca:	e7d7      	b.n	801d57c <dhcp_fine_tmr+0x10>
      dhcp_release_and_stop(netif);
 801d5cc:	f7ff fe3c 	bl	801d248 <dhcp_release_and_stop>
      dhcp_start(netif);
 801d5d0:	4620      	mov	r0, r4
 801d5d2:	f7ff fea1 	bl	801d318 <dhcp_start>
 801d5d6:	e7d1      	b.n	801d57c <dhcp_fine_tmr+0x10>
    if (dhcp->tries <= 1) {
 801d5d8:	799b      	ldrb	r3, [r3, #6]
      dhcp_check(netif);
 801d5da:	4620      	mov	r0, r4
    if (dhcp->tries <= 1) {
 801d5dc:	2b01      	cmp	r3, #1
 801d5de:	d902      	bls.n	801d5e6 <dhcp_fine_tmr+0x7a>
      dhcp_bind(netif);
 801d5e0:	f7ff f848 	bl	801c674 <dhcp_bind>
 801d5e4:	e7ca      	b.n	801d57c <dhcp_fine_tmr+0x10>
      dhcp_check(netif);
 801d5e6:	f7ff f82d 	bl	801c644 <dhcp_check>
 801d5ea:	e7c7      	b.n	801d57c <dhcp_fine_tmr+0x10>
      dhcp_reboot(netif);
 801d5ec:	f7fe fe2a 	bl	801c244 <dhcp_reboot>
 801d5f0:	e7c4      	b.n	801d57c <dhcp_fine_tmr+0x10>
 801d5f2:	bf00      	nop
 801d5f4:	2003e1c0 	.word	0x2003e1c0

0801d5f8 <free_etharp_q>:
 */
static void
free_etharp_q(struct etharp_q_entry *q)
{
  struct etharp_q_entry *r;
  LWIP_ASSERT("q != NULL", q != NULL);
 801d5f8:	b1e8      	cbz	r0, 801d636 <free_etharp_q+0x3e>
{
 801d5fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d5fe:	4604      	mov	r4, r0
  while (q) {
    r = q;
    q = q->next;
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 801d600:	f8df 8048 	ldr.w	r8, [pc, #72]	; 801d64c <free_etharp_q+0x54>
 801d604:	4f0f      	ldr	r7, [pc, #60]	; (801d644 <free_etharp_q+0x4c>)
 801d606:	4e10      	ldr	r6, [pc, #64]	; (801d648 <free_etharp_q+0x50>)
 801d608:	e007      	b.n	801d61a <free_etharp_q+0x22>
    pbuf_free(r->p);
 801d60a:	f7f9 f97d 	bl	8016908 <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
 801d60e:	4621      	mov	r1, r4
 801d610:	200b      	movs	r0, #11
 801d612:	462c      	mov	r4, r5
 801d614:	f7f8 fe9e 	bl	8016354 <memp_free>
  while (q) {
 801d618:	b15d      	cbz	r5, 801d632 <free_etharp_q+0x3a>
    q = q->next;
 801d61a:	e9d4 5000 	ldrd	r5, r0, [r4]
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 801d61e:	2800      	cmp	r0, #0
 801d620:	d1f3      	bne.n	801d60a <free_etharp_q+0x12>
 801d622:	4643      	mov	r3, r8
 801d624:	229a      	movs	r2, #154	; 0x9a
 801d626:	4639      	mov	r1, r7
 801d628:	4630      	mov	r0, r6
 801d62a:	f003 fac5 	bl	8020bb8 <iprintf>
 801d62e:	6860      	ldr	r0, [r4, #4]
 801d630:	e7eb      	b.n	801d60a <free_etharp_q+0x12>
  }
}
 801d632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("q != NULL", q != NULL);
 801d636:	4b05      	ldr	r3, [pc, #20]	; (801d64c <free_etharp_q+0x54>)
 801d638:	2296      	movs	r2, #150	; 0x96
 801d63a:	4905      	ldr	r1, [pc, #20]	; (801d650 <free_etharp_q+0x58>)
 801d63c:	4802      	ldr	r0, [pc, #8]	; (801d648 <free_etharp_q+0x50>)
 801d63e:	f003 babb 	b.w	8020bb8 <iprintf>
 801d642:	bf00      	nop
 801d644:	0803f710 	.word	0x0803f710
 801d648:	08026bb8 	.word	0x08026bb8
 801d64c:	0803f6cc 	.word	0x0803f6cc
 801d650:	0803f704 	.word	0x0803f704

0801d654 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801d654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d658:	2300      	movs	r3, #0
 801d65a:	b085      	sub	sp, #20
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801d65c:	f04f 0c20 	mov.w	ip, #32
 801d660:	f8df 814c 	ldr.w	r8, [pc, #332]	; 801d7b0 <etharp_find_entry+0x15c>
{
 801d664:	9103      	str	r1, [sp, #12]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801d666:	469e      	mov	lr, r3
 801d668:	4641      	mov	r1, r8
 801d66a:	9302      	str	r3, [sp, #8]
 801d66c:	469b      	mov	fp, r3
  s16_t empty = ARP_TABLE_SIZE;
 801d66e:	4664      	mov	r4, ip
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801d670:	46e1      	mov	r9, ip
 801d672:	46e2      	mov	sl, ip
 801d674:	9201      	str	r2, [sp, #4]
 801d676:	e005      	b.n	801d684 <etharp_find_entry+0x30>
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801d678:	b946      	cbnz	r6, 801d68c <etharp_find_entry+0x38>
 801d67a:	462c      	mov	r4, r5
 801d67c:	3301      	adds	r3, #1
 801d67e:	3118      	adds	r1, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d680:	2b20      	cmp	r3, #32
 801d682:	d015      	beq.n	801d6b0 <etharp_find_entry+0x5c>
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801d684:	2c20      	cmp	r4, #32
 801d686:	b21d      	sxth	r5, r3
    u8_t state = arp_table[i].state;
 801d688:	7d0e      	ldrb	r6, [r1, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801d68a:	d0f5      	beq.n	801d678 <etharp_find_entry+0x24>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
 801d68c:	2e00      	cmp	r6, #0
 801d68e:	d0f5      	beq.n	801d67c <etharp_find_entry+0x28>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801d690:	b118      	cbz	r0, 801d69a <etharp_find_entry+0x46>
 801d692:	6802      	ldr	r2, [r0, #0]
 801d694:	684f      	ldr	r7, [r1, #4]
 801d696:	42ba      	cmp	r2, r7
 801d698:	d03a      	beq.n	801d710 <etharp_find_entry+0xbc>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801d69a:	2e01      	cmp	r6, #1
 801d69c:	8a4f      	ldrh	r7, [r1, #18]
 801d69e:	d030      	beq.n	801d702 <etharp_find_entry+0xae>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801d6a0:	4577      	cmp	r7, lr
 801d6a2:	d3eb      	bcc.n	801d67c <etharp_find_entry+0x28>
 801d6a4:	3301      	adds	r3, #1
 801d6a6:	46be      	mov	lr, r7
 801d6a8:	46a9      	mov	r9, r5
 801d6aa:	3118      	adds	r1, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d6ac:	2b20      	cmp	r3, #32
 801d6ae:	d1e9      	bne.n	801d684 <etharp_find_entry+0x30>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801d6b0:	9b03      	ldr	r3, [sp, #12]
 801d6b2:	9a01      	ldr	r2, [sp, #4]
 801d6b4:	2b01      	cmp	r3, #1
 801d6b6:	d170      	bne.n	801d79a <etharp_find_entry+0x146>
 801d6b8:	2c20      	cmp	r4, #32
 801d6ba:	4616      	mov	r6, r2
 801d6bc:	4607      	mov	r7, r0
 801d6be:	d037      	beq.n	801d730 <etharp_find_entry+0xdc>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801d6c0:	0065      	lsls	r5, r4, #1
 801d6c2:	46a1      	mov	r9, r4
 801d6c4:	192b      	adds	r3, r5, r4
 801d6c6:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801d6ca:	7d1b      	ldrb	r3, [r3, #20]
 801d6cc:	b133      	cbz	r3, 801d6dc <etharp_find_entry+0x88>
 801d6ce:	4b34      	ldr	r3, [pc, #208]	; (801d7a0 <etharp_find_entry+0x14c>)
 801d6d0:	f240 1285 	movw	r2, #389	; 0x185
 801d6d4:	4933      	ldr	r1, [pc, #204]	; (801d7a4 <etharp_find_entry+0x150>)
 801d6d6:	4834      	ldr	r0, [pc, #208]	; (801d7a8 <etharp_find_entry+0x154>)
 801d6d8:	f003 fa6e 	bl	8020bb8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801d6dc:	b12f      	cbz	r7, 801d6ea <etharp_find_entry+0x96>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801d6de:	eb05 0309 	add.w	r3, r5, r9
 801d6e2:	683a      	ldr	r2, [r7, #0]
 801d6e4:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801d6e8:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 801d6ea:	444d      	add	r5, r9
 801d6ec:	2300      	movs	r3, #0
 801d6ee:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801d6f2:	f8c8 6008 	str.w	r6, [r8, #8]
  arp_table[i].ctime = 0;
 801d6f6:	f8a8 3012 	strh.w	r3, [r8, #18]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 801d6fa:	4620      	mov	r0, r4
 801d6fc:	b005      	add	sp, #20
 801d6fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (arp_table[i].q != NULL) {
 801d702:	680e      	ldr	r6, [r1, #0]
 801d704:	b176      	cbz	r6, 801d724 <etharp_find_entry+0xd0>
          if (arp_table[i].ctime >= age_queue) {
 801d706:	455f      	cmp	r7, fp
 801d708:	d3b8      	bcc.n	801d67c <etharp_find_entry+0x28>
 801d70a:	46bb      	mov	fp, r7
 801d70c:	46ac      	mov	ip, r5
 801d70e:	e7b5      	b.n	801d67c <etharp_find_entry+0x28>
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801d710:	9a01      	ldr	r2, [sp, #4]
 801d712:	b112      	cbz	r2, 801d71a <etharp_find_entry+0xc6>
 801d714:	688f      	ldr	r7, [r1, #8]
 801d716:	4297      	cmp	r7, r2
 801d718:	d1bf      	bne.n	801d69a <etharp_find_entry+0x46>
 801d71a:	462c      	mov	r4, r5
}
 801d71c:	4620      	mov	r0, r4
 801d71e:	b005      	add	sp, #20
 801d720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 801d724:	9e02      	ldr	r6, [sp, #8]
 801d726:	42b7      	cmp	r7, r6
 801d728:	d3a8      	bcc.n	801d67c <etharp_find_entry+0x28>
 801d72a:	9702      	str	r7, [sp, #8]
 801d72c:	46aa      	mov	sl, r5
 801d72e:	e7a5      	b.n	801d67c <etharp_find_entry+0x28>
    if (old_stable < ARP_TABLE_SIZE) {
 801d730:	f1b9 0f20 	cmp.w	r9, #32
 801d734:	d023      	beq.n	801d77e <etharp_find_entry+0x12a>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801d736:	ea4f 0549 	mov.w	r5, r9, lsl #1
 801d73a:	eb05 0309 	add.w	r3, r5, r9
 801d73e:	f858 3033 	ldr.w	r3, [r8, r3, lsl #3]
 801d742:	b343      	cbz	r3, 801d796 <etharp_find_entry+0x142>
 801d744:	4b16      	ldr	r3, [pc, #88]	; (801d7a0 <etharp_find_entry+0x14c>)
 801d746:	f240 126d 	movw	r2, #365	; 0x16d
 801d74a:	4918      	ldr	r1, [pc, #96]	; (801d7ac <etharp_find_entry+0x158>)
 801d74c:	464c      	mov	r4, r9
 801d74e:	4816      	ldr	r0, [pc, #88]	; (801d7a8 <etharp_find_entry+0x154>)
 801d750:	f003 fa32 	bl	8020bb8 <iprintf>
  if (arp_table[i].q != NULL) {
 801d754:	ea4f 0549 	mov.w	r5, r9, lsl #1
 801d758:	eb05 0a09 	add.w	sl, r5, r9
 801d75c:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 801d760:	f858 000a 	ldr.w	r0, [r8, sl]
 801d764:	b120      	cbz	r0, 801d770 <etharp_find_entry+0x11c>
    free_etharp_q(arp_table[i].q);
 801d766:	f7ff ff47 	bl	801d5f8 <free_etharp_q>
    arp_table[i].q = NULL;
 801d76a:	2300      	movs	r3, #0
 801d76c:	f848 300a 	str.w	r3, [r8, sl]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801d770:	eb05 0309 	add.w	r3, r5, r9
 801d774:	2200      	movs	r2, #0
 801d776:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801d77a:	751a      	strb	r2, [r3, #20]
 801d77c:	e7ae      	b.n	801d6dc <etharp_find_entry+0x88>
    } else if (old_pending < ARP_TABLE_SIZE) {
 801d77e:	f1ba 0f20 	cmp.w	sl, #32
 801d782:	d105      	bne.n	801d790 <etharp_find_entry+0x13c>
    } else if (old_queue < ARP_TABLE_SIZE) {
 801d784:	f1bc 0f20 	cmp.w	ip, #32
 801d788:	d007      	beq.n	801d79a <etharp_find_entry+0x146>
 801d78a:	4664      	mov	r4, ip
 801d78c:	46e1      	mov	r9, ip
 801d78e:	e7e1      	b.n	801d754 <etharp_find_entry+0x100>
 801d790:	4654      	mov	r4, sl
    } else if (old_pending < ARP_TABLE_SIZE) {
 801d792:	46d1      	mov	r9, sl
 801d794:	e7de      	b.n	801d754 <etharp_find_entry+0x100>
 801d796:	464c      	mov	r4, r9
 801d798:	e7ea      	b.n	801d770 <etharp_find_entry+0x11c>
    return (s16_t)ERR_MEM;
 801d79a:	f04f 34ff 	mov.w	r4, #4294967295
 801d79e:	e7ac      	b.n	801d6fa <etharp_find_entry+0xa6>
 801d7a0:	0803f6cc 	.word	0x0803f6cc
 801d7a4:	0803f588 	.word	0x0803f588
 801d7a8:	08026bb8 	.word	0x08026bb8
 801d7ac:	0803f570 	.word	0x0803f570
 801d7b0:	2002a44c 	.word	0x2002a44c

0801d7b4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801d7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7b8:	b083      	sub	sp, #12
 801d7ba:	4689      	mov	r9, r1
 801d7bc:	4692      	mov	sl, r2
 801d7be:	4698      	mov	r8, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801d7c0:	4606      	mov	r6, r0
{
 801d7c2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801d7c4:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801d7c8:	2800      	cmp	r0, #0
 801d7ca:	d05a      	beq.n	801d882 <etharp_raw+0xce>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801d7cc:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d7d0:	211c      	movs	r1, #28
 801d7d2:	200e      	movs	r0, #14
 801d7d4:	f7f9 f906 	bl	80169e4 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801d7d8:	4605      	mov	r5, r0
 801d7da:	2800      	cmp	r0, #0
 801d7dc:	d059      	beq.n	801d892 <etharp_raw+0xde>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801d7de:	8943      	ldrh	r3, [r0, #10]
 801d7e0:	2b1b      	cmp	r3, #27
 801d7e2:	d946      	bls.n	801d872 <etharp_raw+0xbe>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801d7e4:	686c      	ldr	r4, [r5, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801d7e6:	4658      	mov	r0, fp
 801d7e8:	f7f7 fa20 	bl	8014c2c <lwip_htons>
 801d7ec:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801d7ee:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 801d7f2:	2b06      	cmp	r3, #6
 801d7f4:	d006      	beq.n	801d804 <etharp_raw+0x50>
 801d7f6:	4b2a      	ldr	r3, [pc, #168]	; (801d8a0 <etharp_raw+0xec>)
 801d7f8:	f240 426a 	movw	r2, #1130	; 0x46a
 801d7fc:	4929      	ldr	r1, [pc, #164]	; (801d8a4 <etharp_raw+0xf0>)
 801d7fe:	482a      	ldr	r0, [pc, #168]	; (801d8a8 <etharp_raw+0xf4>)
 801d800:	f003 f9da 	bl	8020bb8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801d804:	f8d8 1000 	ldr.w	r1, [r8]
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801d808:	f04f 0e08 	mov.w	lr, #8
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
  hdr->protolen = sizeof(ip4_addr_t);
 801d80c:	f04f 0c04 	mov.w	ip, #4
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801d810:	4630      	mov	r0, r6
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801d812:	60a1      	str	r1, [r4, #8]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801d814:	2600      	movs	r6, #0
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801d816:	f8b8 1004 	ldrh.w	r1, [r8, #4]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801d81a:	f04f 0801 	mov.w	r8, #1
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801d81e:	4653      	mov	r3, sl
 801d820:	464a      	mov	r2, r9
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801d822:	81a1      	strh	r1, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801d824:	6839      	ldr	r1, [r7, #0]
 801d826:	f8c4 1012 	str.w	r1, [r4, #18]
  hdr->hwlen = ETH_HWADDR_LEN;
 801d82a:	2106      	movs	r1, #6
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801d82c:	88bf      	ldrh	r7, [r7, #4]
 801d82e:	82e7      	strh	r7, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801d830:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801d832:	683f      	ldr	r7, [r7, #0]
 801d834:	f8c4 700e 	str.w	r7, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801d838:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801d83a:	683f      	ldr	r7, [r7, #0]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801d83c:	f884 e002 	strb.w	lr, [r4, #2]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801d840:	61a7      	str	r7, [r4, #24]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801d842:	f640 0706 	movw	r7, #2054	; 0x806
  hdr->hwlen = ETH_HWADDR_LEN;
 801d846:	7121      	strb	r1, [r4, #4]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801d848:	4629      	mov	r1, r5
  hdr->protolen = sizeof(ip4_addr_t);
 801d84a:	f884 c005 	strb.w	ip, [r4, #5]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801d84e:	7026      	strb	r6, [r4, #0]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801d850:	70e6      	strb	r6, [r4, #3]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801d852:	f884 8001 	strb.w	r8, [r4, #1]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801d856:	9700      	str	r7, [sp, #0]
 801d858:	f001 fd2c 	bl	801f2b4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
 801d85c:	4a13      	ldr	r2, [pc, #76]	; (801d8ac <etharp_raw+0xf8>)
  /* free ARP query packet */
  pbuf_free(p);
 801d85e:	4628      	mov	r0, r5
  ETHARP_STATS_INC(etharp.xmit);
 801d860:	8b13      	ldrh	r3, [r2, #24]
 801d862:	4443      	add	r3, r8
 801d864:	8313      	strh	r3, [r2, #24]
  pbuf_free(p);
 801d866:	f7f9 f84f 	bl	8016908 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 801d86a:	4630      	mov	r0, r6
}
 801d86c:	b003      	add	sp, #12
 801d86e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801d872:	4b0b      	ldr	r3, [pc, #44]	; (801d8a0 <etharp_raw+0xec>)
 801d874:	f240 4263 	movw	r2, #1123	; 0x463
 801d878:	490d      	ldr	r1, [pc, #52]	; (801d8b0 <etharp_raw+0xfc>)
 801d87a:	480b      	ldr	r0, [pc, #44]	; (801d8a8 <etharp_raw+0xf4>)
 801d87c:	f003 f99c 	bl	8020bb8 <iprintf>
 801d880:	e7b0      	b.n	801d7e4 <etharp_raw+0x30>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801d882:	4b07      	ldr	r3, [pc, #28]	; (801d8a0 <etharp_raw+0xec>)
 801d884:	f240 4257 	movw	r2, #1111	; 0x457
 801d888:	490a      	ldr	r1, [pc, #40]	; (801d8b4 <etharp_raw+0x100>)
 801d88a:	4807      	ldr	r0, [pc, #28]	; (801d8a8 <etharp_raw+0xf4>)
 801d88c:	f003 f994 	bl	8020bb8 <iprintf>
 801d890:	e79c      	b.n	801d7cc <etharp_raw+0x18>
    ETHARP_STATS_INC(etharp.memerr);
 801d892:	4a06      	ldr	r2, [pc, #24]	; (801d8ac <etharp_raw+0xf8>)
    return ERR_MEM;
 801d894:	f04f 30ff 	mov.w	r0, #4294967295
    ETHARP_STATS_INC(etharp.memerr);
 801d898:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 801d89a:	3301      	adds	r3, #1
 801d89c:	8493      	strh	r3, [r2, #36]	; 0x24
    return ERR_MEM;
 801d89e:	e7e5      	b.n	801d86c <etharp_raw+0xb8>
 801d8a0:	0803f6cc 	.word	0x0803f6cc
 801d8a4:	0803f688 	.word	0x0803f688
 801d8a8:	08026bb8 	.word	0x08026bb8
 801d8ac:	2003e1cc 	.word	0x2003e1cc
 801d8b0:	0803f654 	.word	0x0803f654
 801d8b4:	08026ba8 	.word	0x08026ba8

0801d8b8 <etharp_output_to_arp_index>:
{
 801d8b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801d8bc:	0055      	lsls	r5, r2, #1
 801d8be:	4e2f      	ldr	r6, [pc, #188]	; (801d97c <etharp_output_to_arp_index+0xc4>)
{
 801d8c0:	b084      	sub	sp, #16
 801d8c2:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801d8c4:	eb05 0802 	add.w	r8, r5, r2
{
 801d8c8:	4607      	mov	r7, r0
 801d8ca:	4689      	mov	r9, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801d8cc:	eb06 08c8 	add.w	r8, r6, r8, lsl #3
 801d8d0:	f898 3014 	ldrb.w	r3, [r8, #20]
 801d8d4:	2b01      	cmp	r3, #1
 801d8d6:	d934      	bls.n	801d942 <etharp_output_to_arp_index+0x8a>
 801d8d8:	eb04 0144 	add.w	r1, r4, r4, lsl #1
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801d8dc:	2b02      	cmp	r3, #2
 801d8de:	f107 082e 	add.w	r8, r7, #46	; 0x2e
 801d8e2:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 801d8e6:	f101 0a0c 	add.w	sl, r1, #12
 801d8ea:	44b2      	add	sl, r6
 801d8ec:	d00b      	beq.n	801d906 <etharp_output_to_arp_index+0x4e>
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801d8ee:	f44f 6400 	mov.w	r4, #2048	; 0x800
 801d8f2:	4653      	mov	r3, sl
 801d8f4:	4642      	mov	r2, r8
 801d8f6:	4649      	mov	r1, r9
 801d8f8:	4638      	mov	r0, r7
 801d8fa:	9400      	str	r4, [sp, #0]
 801d8fc:	f001 fcda 	bl	801f2b4 <ethernet_output>
}
 801d900:	b004      	add	sp, #16
 801d902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801d906:	442c      	add	r4, r5
 801d908:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 801d90c:	8a63      	ldrh	r3, [r4, #18]
 801d90e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801d912:	d820      	bhi.n	801d956 <etharp_output_to_arp_index+0x9e>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801d914:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801d918:	d3e9      	bcc.n	801d8ee <etharp_output_to_arp_index+0x36>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801d91a:	3104      	adds	r1, #4
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d91c:	2201      	movs	r2, #1
 801d91e:	4b18      	ldr	r3, [pc, #96]	; (801d980 <etharp_output_to_arp_index+0xc8>)
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801d920:	1d38      	adds	r0, r7, #4
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801d922:	4431      	add	r1, r6
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d924:	9203      	str	r2, [sp, #12]
 801d926:	9301      	str	r3, [sp, #4]
 801d928:	4652      	mov	r2, sl
 801d92a:	9102      	str	r1, [sp, #8]
 801d92c:	4643      	mov	r3, r8
 801d92e:	9000      	str	r0, [sp, #0]
 801d930:	4641      	mov	r1, r8
 801d932:	4638      	mov	r0, r7
 801d934:	f7ff ff3e 	bl	801d7b4 <etharp_raw>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801d938:	2800      	cmp	r0, #0
 801d93a:	d1d8      	bne.n	801d8ee <etharp_output_to_arp_index+0x36>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801d93c:	2303      	movs	r3, #3
 801d93e:	7523      	strb	r3, [r4, #20]
 801d940:	e7d5      	b.n	801d8ee <etharp_output_to_arp_index+0x36>
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801d942:	4b10      	ldr	r3, [pc, #64]	; (801d984 <etharp_output_to_arp_index+0xcc>)
 801d944:	f240 22ef 	movw	r2, #751	; 0x2ef
 801d948:	490f      	ldr	r1, [pc, #60]	; (801d988 <etharp_output_to_arp_index+0xd0>)
 801d94a:	4810      	ldr	r0, [pc, #64]	; (801d98c <etharp_output_to_arp_index+0xd4>)
 801d94c:	f003 f934 	bl	8020bb8 <iprintf>
 801d950:	f898 3014 	ldrb.w	r3, [r8, #20]
 801d954:	e7c0      	b.n	801d8d8 <etharp_output_to_arp_index+0x20>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801d956:	3104      	adds	r1, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d958:	2001      	movs	r0, #1
 801d95a:	4b09      	ldr	r3, [pc, #36]	; (801d980 <etharp_output_to_arp_index+0xc8>)
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801d95c:	1d3a      	adds	r2, r7, #4
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801d95e:	440e      	add	r6, r1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d960:	9003      	str	r0, [sp, #12]
 801d962:	9301      	str	r3, [sp, #4]
 801d964:	4641      	mov	r1, r8
 801d966:	9200      	str	r2, [sp, #0]
 801d968:	4643      	mov	r3, r8
 801d96a:	9602      	str	r6, [sp, #8]
 801d96c:	4638      	mov	r0, r7
 801d96e:	4a08      	ldr	r2, [pc, #32]	; (801d990 <etharp_output_to_arp_index+0xd8>)
 801d970:	f7ff ff20 	bl	801d7b4 <etharp_raw>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801d974:	2800      	cmp	r0, #0
 801d976:	d1ba      	bne.n	801d8ee <etharp_output_to_arp_index+0x36>
 801d978:	e7e0      	b.n	801d93c <etharp_output_to_arp_index+0x84>
 801d97a:	bf00      	nop
 801d97c:	2002a44c 	.word	0x2002a44c
 801d980:	0803fac8 	.word	0x0803fac8
 801d984:	0803f6cc 	.word	0x0803f6cc
 801d988:	0803f5f8 	.word	0x0803f5f8
 801d98c:	08026bb8 	.word	0x08026bb8
 801d990:	0803fa54 	.word	0x0803fa54

0801d994 <etharp_tmr>:
{
 801d994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d998:	4c1f      	ldr	r4, [pc, #124]	; (801da18 <etharp_tmr+0x84>)
 801d99a:	b084      	sub	sp, #16
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801d99c:	2600      	movs	r6, #0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d99e:	f8df 8080 	ldr.w	r8, [pc, #128]	; 801da20 <etharp_tmr+0x8c>
 801d9a2:	f504 7540 	add.w	r5, r4, #768	; 0x300
 801d9a6:	4f1d      	ldr	r7, [pc, #116]	; (801da1c <etharp_tmr+0x88>)
 801d9a8:	e00a      	b.n	801d9c0 <etharp_tmr+0x2c>
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801d9aa:	2901      	cmp	r1, #1
 801d9ac:	d020      	beq.n	801d9f0 <etharp_tmr+0x5c>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801d9ae:	2903      	cmp	r1, #3
 801d9b0:	d02f      	beq.n	801da12 <etharp_tmr+0x7e>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801d9b2:	2904      	cmp	r1, #4
 801d9b4:	d101      	bne.n	801d9ba <etharp_tmr+0x26>
        arp_table[i].state = ETHARP_STATE_STABLE;
 801d9b6:	2302      	movs	r3, #2
 801d9b8:	7423      	strb	r3, [r4, #16]
 801d9ba:	3418      	adds	r4, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d9bc:	42ac      	cmp	r4, r5
 801d9be:	d014      	beq.n	801d9ea <etharp_tmr+0x56>
    u8_t state = arp_table[i].state;
 801d9c0:	7c21      	ldrb	r1, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 801d9c2:	2900      	cmp	r1, #0
 801d9c4:	d0f9      	beq.n	801d9ba <etharp_tmr+0x26>
      arp_table[i].ctime++;
 801d9c6:	89e3      	ldrh	r3, [r4, #14]
 801d9c8:	3301      	adds	r3, #1
 801d9ca:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801d9cc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 801d9d0:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801d9d2:	d3ea      	bcc.n	801d9aa <etharp_tmr+0x16>
  if (arp_table[i].q != NULL) {
 801d9d4:	f854 0c04 	ldr.w	r0, [r4, #-4]
 801d9d8:	b118      	cbz	r0, 801d9e2 <etharp_tmr+0x4e>
    free_etharp_q(arp_table[i].q);
 801d9da:	f7ff fe0d 	bl	801d5f8 <free_etharp_q>
    arp_table[i].q = NULL;
 801d9de:	f844 6c04 	str.w	r6, [r4, #-4]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801d9e2:	7426      	strb	r6, [r4, #16]
 801d9e4:	3418      	adds	r4, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d9e6:	42ac      	cmp	r4, r5
 801d9e8:	d1ea      	bne.n	801d9c0 <etharp_tmr+0x2c>
}
 801d9ea:	b004      	add	sp, #16
 801d9ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801d9f0:	2b04      	cmp	r3, #4
 801d9f2:	d8ef      	bhi.n	801d9d4 <etharp_tmr+0x40>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801d9f4:	6860      	ldr	r0, [r4, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d9f6:	463a      	mov	r2, r7
 801d9f8:	9103      	str	r1, [sp, #12]
 801d9fa:	f100 032e 	add.w	r3, r0, #46	; 0x2e
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801d9fe:	f100 0c04 	add.w	ip, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801da02:	e9cd 8401 	strd	r8, r4, [sp, #4]
 801da06:	4619      	mov	r1, r3
 801da08:	f8cd c000 	str.w	ip, [sp]
 801da0c:	f7ff fed2 	bl	801d7b4 <etharp_raw>
 801da10:	e7d3      	b.n	801d9ba <etharp_tmr+0x26>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801da12:	2304      	movs	r3, #4
 801da14:	7423      	strb	r3, [r4, #16]
 801da16:	e7d0      	b.n	801d9ba <etharp_tmr+0x26>
 801da18:	2002a450 	.word	0x2002a450
 801da1c:	0803fa54 	.word	0x0803fa54
 801da20:	0803fac8 	.word	0x0803fac8

0801da24 <etharp_cleanup_netif>:
{
 801da24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801da26:	4c0d      	ldr	r4, [pc, #52]	; (801da5c <etharp_cleanup_netif+0x38>)
 801da28:	4606      	mov	r6, r0
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801da2a:	2700      	movs	r7, #0
 801da2c:	f504 7540 	add.w	r5, r4, #768	; 0x300
 801da30:	e002      	b.n	801da38 <etharp_cleanup_netif+0x14>
 801da32:	3418      	adds	r4, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801da34:	42ac      	cmp	r4, r5
 801da36:	d00f      	beq.n	801da58 <etharp_cleanup_netif+0x34>
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801da38:	7d23      	ldrb	r3, [r4, #20]
 801da3a:	2b00      	cmp	r3, #0
 801da3c:	d0f9      	beq.n	801da32 <etharp_cleanup_netif+0xe>
 801da3e:	68a3      	ldr	r3, [r4, #8]
 801da40:	42b3      	cmp	r3, r6
 801da42:	d1f6      	bne.n	801da32 <etharp_cleanup_netif+0xe>
  if (arp_table[i].q != NULL) {
 801da44:	6823      	ldr	r3, [r4, #0]
    free_etharp_q(arp_table[i].q);
 801da46:	4618      	mov	r0, r3
  if (arp_table[i].q != NULL) {
 801da48:	b113      	cbz	r3, 801da50 <etharp_cleanup_netif+0x2c>
    free_etharp_q(arp_table[i].q);
 801da4a:	f7ff fdd5 	bl	801d5f8 <free_etharp_q>
    arp_table[i].q = NULL;
 801da4e:	6027      	str	r7, [r4, #0]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801da50:	7527      	strb	r7, [r4, #20]
 801da52:	3418      	adds	r4, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801da54:	42ac      	cmp	r4, r5
 801da56:	d1ef      	bne.n	801da38 <etharp_cleanup_netif+0x14>
}
 801da58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801da5a:	bf00      	nop
 801da5c:	2002a44c 	.word	0x2002a44c

0801da60 <etharp_input>:
{
 801da60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da64:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801da66:	2900      	cmp	r1, #0
 801da68:	f000 8097 	beq.w	801db9a <etharp_input+0x13a>
  hdr = (struct etharp_hdr *)p->payload;
 801da6c:	6845      	ldr	r5, [r0, #4]
 801da6e:	4604      	mov	r4, r0
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801da70:	882b      	ldrh	r3, [r5, #0]
 801da72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801da76:	d102      	bne.n	801da7e <etharp_input+0x1e>
 801da78:	792b      	ldrb	r3, [r5, #4]
 801da7a:	2b06      	cmp	r3, #6
 801da7c:	d00c      	beq.n	801da98 <etharp_input+0x38>
    ETHARP_STATS_INC(etharp.proterr);
 801da7e:	4b5c      	ldr	r3, [pc, #368]	; (801dbf0 <etharp_input+0x190>)
    pbuf_free(p);
 801da80:	4620      	mov	r0, r4
    ETHARP_STATS_INC(etharp.proterr);
 801da82:	8d19      	ldrh	r1, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 801da84:	8bda      	ldrh	r2, [r3, #30]
    ETHARP_STATS_INC(etharp.proterr);
 801da86:	3101      	adds	r1, #1
    ETHARP_STATS_INC(etharp.drop);
 801da88:	3201      	adds	r2, #1
    ETHARP_STATS_INC(etharp.proterr);
 801da8a:	8519      	strh	r1, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 801da8c:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
 801da8e:	f7f8 ff3b 	bl	8016908 <pbuf_free>
}
 801da92:	b009      	add	sp, #36	; 0x24
 801da94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801da98:	796b      	ldrb	r3, [r5, #5]
 801da9a:	2b04      	cmp	r3, #4
 801da9c:	d1ef      	bne.n	801da7e <etharp_input+0x1e>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801da9e:	886b      	ldrh	r3, [r5, #2]
 801daa0:	2b08      	cmp	r3, #8
 801daa2:	d1ec      	bne.n	801da7e <etharp_input+0x1e>
  ETHARP_STATS_INC(etharp.recv);
 801daa4:	f8df a148 	ldr.w	sl, [pc, #328]	; 801dbf0 <etharp_input+0x190>
 801daa8:	460e      	mov	r6, r1
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801daaa:	684a      	ldr	r2, [r1, #4]
 801daac:	f105 0908 	add.w	r9, r5, #8
  ETHARP_STATS_INC(etharp.recv);
 801dab0:	f8ba 301a 	ldrh.w	r3, [sl, #26]
 801dab4:	3301      	adds	r3, #1
 801dab6:	f8aa 301a 	strh.w	r3, [sl, #26]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801daba:	f8d5 000e 	ldr.w	r0, [r5, #14]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801dabe:	69ab      	ldr	r3, [r5, #24]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801dac0:	9007      	str	r0, [sp, #28]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801dac2:	2a00      	cmp	r2, #0
 801dac4:	d073      	beq.n	801dbae <etharp_input+0x14e>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801dac6:	429a      	cmp	r2, r3
 801dac8:	f000 808d 	beq.w	801dbe6 <etharp_input+0x186>
    for_us = 0;
 801dacc:	2300      	movs	r3, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801dace:	2702      	movs	r7, #2
    for_us = 0;
 801dad0:	9305      	str	r3, [sp, #20]
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801dad2:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 801dad6:	2b06      	cmp	r3, #6
 801dad8:	d007      	beq.n	801daea <etharp_input+0x8a>
 801dada:	4b46      	ldr	r3, [pc, #280]	; (801dbf4 <etharp_input+0x194>)
 801dadc:	f240 12a9 	movw	r2, #425	; 0x1a9
 801dae0:	4945      	ldr	r1, [pc, #276]	; (801dbf8 <etharp_input+0x198>)
 801dae2:	4846      	ldr	r0, [pc, #280]	; (801dbfc <etharp_input+0x19c>)
 801dae4:	f003 f868 	bl	8020bb8 <iprintf>
 801dae8:	9807      	ldr	r0, [sp, #28]
  if (ip4_addr_isany(ipaddr) ||
 801daea:	2800      	cmp	r0, #0
 801daec:	d046      	beq.n	801db7c <etharp_input+0x11c>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801daee:	4631      	mov	r1, r6
 801daf0:	f000 fe06 	bl	801e700 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 801daf4:	4683      	mov	fp, r0
 801daf6:	2800      	cmp	r0, #0
 801daf8:	d140      	bne.n	801db7c <etharp_input+0x11c>
      ip4_addr_ismulticast(ipaddr)) {
 801dafa:	9b07      	ldr	r3, [sp, #28]
 801dafc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801db00:	2be0      	cmp	r3, #224	; 0xe0
 801db02:	d03b      	beq.n	801db7c <etharp_input+0x11c>
  i = etharp_find_entry(ipaddr, flags, netif);
 801db04:	4639      	mov	r1, r7
 801db06:	4632      	mov	r2, r6
 801db08:	a807      	add	r0, sp, #28
 801db0a:	f7ff fda3 	bl	801d654 <etharp_find_entry>
  if (i < 0) {
 801db0e:	2800      	cmp	r0, #0
 801db10:	db34      	blt.n	801db7c <etharp_input+0x11c>
    arp_table[i].state = ETHARP_STATE_STABLE;
 801db12:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 801db16:	493a      	ldr	r1, [pc, #232]	; (801dc00 <etharp_input+0x1a0>)
 801db18:	2702      	movs	r7, #2
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801db1a:	f04f 0c18 	mov.w	ip, #24
    arp_table[i].state = ETHARP_STATE_STABLE;
 801db1e:	00d2      	lsls	r2, r2, #3
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801db20:	230c      	movs	r3, #12
 801db22:	fb10 330c 	smlabb	r3, r0, ip, r3
    arp_table[i].state = ETHARP_STATE_STABLE;
 801db26:	eb01 0802 	add.w	r8, r1, r2
 801db2a:	f888 7014 	strb.w	r7, [r8, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801db2e:	18cf      	adds	r7, r1, r3
  arp_table[i].netif = netif;
 801db30:	f8c8 6008 	str.w	r6, [r8, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801db34:	f8d9 0000 	ldr.w	r0, [r9]
 801db38:	50c8      	str	r0, [r1, r3]
 801db3a:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 801db3e:	80bb      	strh	r3, [r7, #4]
  while (arp_table[i].q != NULL) {
 801db40:	588b      	ldr	r3, [r1, r2]
  arp_table[i].ctime = 0;
 801db42:	f8a8 b012 	strh.w	fp, [r8, #18]
  while (arp_table[i].q != NULL) {
 801db46:	b1cb      	cbz	r3, 801db7c <etharp_input+0x11c>
 801db48:	f106 0b2e 	add.w	fp, r6, #46	; 0x2e
    arp_table[i].q = q->next;
 801db4c:	681a      	ldr	r2, [r3, #0]
    memp_free(MEMP_ARP_QUEUE, q);
 801db4e:	4619      	mov	r1, r3
    p = q->p;
 801db50:	685f      	ldr	r7, [r3, #4]
    memp_free(MEMP_ARP_QUEUE, q);
 801db52:	200b      	movs	r0, #11
    arp_table[i].q = q->next;
 801db54:	f8c8 2000 	str.w	r2, [r8]
    memp_free(MEMP_ARP_QUEUE, q);
 801db58:	f7f8 fbfc 	bl	8016354 <memp_free>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801db5c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801db60:	464b      	mov	r3, r9
 801db62:	4639      	mov	r1, r7
 801db64:	465a      	mov	r2, fp
 801db66:	9000      	str	r0, [sp, #0]
 801db68:	4630      	mov	r0, r6
 801db6a:	f001 fba3 	bl	801f2b4 <ethernet_output>
    pbuf_free(p);
 801db6e:	4638      	mov	r0, r7
 801db70:	f7f8 feca 	bl	8016908 <pbuf_free>
  while (arp_table[i].q != NULL) {
 801db74:	f8d8 3000 	ldr.w	r3, [r8]
 801db78:	2b00      	cmp	r3, #0
 801db7a:	d1e7      	bne.n	801db4c <etharp_input+0xec>
  switch (hdr->opcode) {
 801db7c:	88eb      	ldrh	r3, [r5, #6]
 801db7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801db82:	d01d      	beq.n	801dbc0 <etharp_input+0x160>
 801db84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801db88:	d114      	bne.n	801dbb4 <etharp_input+0x154>
      dhcp_arp_reply(netif, &sipaddr);
 801db8a:	4630      	mov	r0, r6
 801db8c:	a907      	add	r1, sp, #28
 801db8e:	f7ff fa69 	bl	801d064 <dhcp_arp_reply>
  pbuf_free(p);
 801db92:	4620      	mov	r0, r4
 801db94:	f7f8 feb8 	bl	8016908 <pbuf_free>
 801db98:	e77b      	b.n	801da92 <etharp_input+0x32>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801db9a:	4b16      	ldr	r3, [pc, #88]	; (801dbf4 <etharp_input+0x194>)
 801db9c:	f240 228a 	movw	r2, #650	; 0x28a
 801dba0:	4918      	ldr	r1, [pc, #96]	; (801dc04 <etharp_input+0x1a4>)
 801dba2:	4816      	ldr	r0, [pc, #88]	; (801dbfc <etharp_input+0x19c>)
 801dba4:	f003 f808 	bl	8020bb8 <iprintf>
}
 801dba8:	b009      	add	sp, #36	; 0x24
 801dbaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for_us = 0;
 801dbae:	9205      	str	r2, [sp, #20]
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801dbb0:	2702      	movs	r7, #2
 801dbb2:	e78e      	b.n	801dad2 <etharp_input+0x72>
      ETHARP_STATS_INC(etharp.err);
 801dbb4:	f8ba 302c 	ldrh.w	r3, [sl, #44]	; 0x2c
 801dbb8:	3301      	adds	r3, #1
 801dbba:	f8aa 302c 	strh.w	r3, [sl, #44]	; 0x2c
      break;
 801dbbe:	e7e8      	b.n	801db92 <etharp_input+0x132>
      if (for_us) {
 801dbc0:	9b05      	ldr	r3, [sp, #20]
 801dbc2:	2b00      	cmp	r3, #0
 801dbc4:	d0e5      	beq.n	801db92 <etharp_input+0x132>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801dbc6:	f106 032e 	add.w	r3, r6, #46	; 0x2e
        etharp_raw(netif,
 801dbca:	2002      	movs	r0, #2
 801dbcc:	af07      	add	r7, sp, #28
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801dbce:	1d35      	adds	r5, r6, #4
        etharp_raw(netif,
 801dbd0:	9003      	str	r0, [sp, #12]
 801dbd2:	464a      	mov	r2, r9
 801dbd4:	f8cd 9004 	str.w	r9, [sp, #4]
 801dbd8:	4619      	mov	r1, r3
 801dbda:	4630      	mov	r0, r6
 801dbdc:	9702      	str	r7, [sp, #8]
 801dbde:	9500      	str	r5, [sp, #0]
 801dbe0:	f7ff fde8 	bl	801d7b4 <etharp_raw>
 801dbe4:	e7d5      	b.n	801db92 <etharp_input+0x132>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801dbe6:	2301      	movs	r3, #1
 801dbe8:	9305      	str	r3, [sp, #20]
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801dbea:	461f      	mov	r7, r3
 801dbec:	e771      	b.n	801dad2 <etharp_input+0x72>
 801dbee:	bf00      	nop
 801dbf0:	2003e1cc 	.word	0x2003e1cc
 801dbf4:	0803f6cc 	.word	0x0803f6cc
 801dbf8:	0803f5d4 	.word	0x0803f5d4
 801dbfc:	08026bb8 	.word	0x08026bb8
 801dc00:	2002a44c 	.word	0x2002a44c
 801dc04:	08026ba8 	.word	0x08026ba8

0801dc08 <etharp_query>:
{
 801dc08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc0c:	460f      	mov	r7, r1
 801dc0e:	b085      	sub	sp, #20
 801dc10:	4604      	mov	r4, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801dc12:	4601      	mov	r1, r0
 801dc14:	6838      	ldr	r0, [r7, #0]
{
 801dc16:	4616      	mov	r6, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801dc18:	f000 fd72 	bl	801e700 <ip4_addr_isbroadcast_u32>
 801dc1c:	2800      	cmp	r0, #0
 801dc1e:	f040 80b3 	bne.w	801dd88 <etharp_query+0x180>
      ip4_addr_ismulticast(ipaddr) ||
 801dc22:	683b      	ldr	r3, [r7, #0]
 801dc24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
      ip4_addr_isany(ipaddr)) {
 801dc28:	2ae0      	cmp	r2, #224	; 0xe0
 801dc2a:	f000 80ad 	beq.w	801dd88 <etharp_query+0x180>
 801dc2e:	2b00      	cmp	r3, #0
 801dc30:	f000 80aa 	beq.w	801dd88 <etharp_query+0x180>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801dc34:	4622      	mov	r2, r4
 801dc36:	2101      	movs	r1, #1
 801dc38:	4638      	mov	r0, r7
 801dc3a:	f7ff fd0b 	bl	801d654 <etharp_find_entry>
  if (i_err < 0) {
 801dc3e:	1e05      	subs	r5, r0, #0
 801dc40:	db4c      	blt.n	801dcdc <etharp_query+0xd4>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801dc42:	2d7e      	cmp	r5, #126	; 0x7e
 801dc44:	dc53      	bgt.n	801dcee <etharp_query+0xe6>
  i = (netif_addr_idx_t)i_err;
 801dc46:	b2ed      	uxtb	r5, r5
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801dc48:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 801de10 <etharp_query+0x208>
 801dc4c:	ea4f 0945 	mov.w	r9, r5, lsl #1
 801dc50:	eb09 0205 	add.w	r2, r9, r5
 801dc54:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
 801dc58:	7d13      	ldrb	r3, [r2, #20]
 801dc5a:	b18b      	cbz	r3, 801dc80 <etharp_query+0x78>
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801dc5c:	f104 0a2e 	add.w	sl, r4, #46	; 0x2e
  if (is_new_entry || (q == NULL)) {
 801dc60:	2e00      	cmp	r6, #0
 801dc62:	f000 80a5 	beq.w	801ddb0 <etharp_query+0x1a8>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801dc66:	eb09 0305 	add.w	r3, r9, r5
  err_t result = ERR_MEM;
 801dc6a:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801dc6e:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801dc72:	7d1b      	ldrb	r3, [r3, #20]
 801dc74:	2b01      	cmp	r3, #1
 801dc76:	d820      	bhi.n	801dcba <etharp_query+0xb2>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801dc78:	d041      	beq.n	801dcfe <etharp_query+0xf6>
}
 801dc7a:	b005      	add	sp, #20
 801dc7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    arp_table[i].state = ETHARP_STATE_PENDING;
 801dc80:	f04f 0c01 	mov.w	ip, #1
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801dc84:	f104 0a2e 	add.w	sl, r4, #46	; 0x2e
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801dc88:	495a      	ldr	r1, [pc, #360]	; (801ddf4 <etharp_query+0x1ec>)
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801dc8a:	1d20      	adds	r0, r4, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801dc8c:	9702      	str	r7, [sp, #8]
 801dc8e:	4653      	mov	r3, sl
 801dc90:	9101      	str	r1, [sp, #4]
 801dc92:	4651      	mov	r1, sl
 801dc94:	9000      	str	r0, [sp, #0]
 801dc96:	4620      	mov	r0, r4
 801dc98:	f8cd c00c 	str.w	ip, [sp, #12]
    arp_table[i].netif = netif;
 801dc9c:	6094      	str	r4, [r2, #8]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801dc9e:	f882 c014 	strb.w	ip, [r2, #20]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801dca2:	4a55      	ldr	r2, [pc, #340]	; (801ddf8 <etharp_query+0x1f0>)
 801dca4:	f7ff fd86 	bl	801d7b4 <etharp_raw>
    if (q == NULL) {
 801dca8:	2e00      	cmp	r6, #0
 801dcaa:	d0e6      	beq.n	801dc7a <etharp_query+0x72>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801dcac:	eb09 0305 	add.w	r3, r9, r5
 801dcb0:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801dcb4:	7d1b      	ldrb	r3, [r3, #20]
 801dcb6:	2b01      	cmp	r3, #1
 801dcb8:	d9de      	bls.n	801dc78 <etharp_query+0x70>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801dcba:	2318      	movs	r3, #24
 801dcbc:	4631      	mov	r1, r6
 801dcbe:	f44f 6700 	mov.w	r7, #2048	; 0x800
    ETHARP_SET_ADDRHINT(netif, i);
 801dcc2:	4e4e      	ldr	r6, [pc, #312]	; (801ddfc <etharp_query+0x1f4>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801dcc4:	fb03 8305 	mla	r3, r3, r5, r8
 801dcc8:	4652      	mov	r2, sl
 801dcca:	9700      	str	r7, [sp, #0]
 801dccc:	4620      	mov	r0, r4
 801dcce:	330c      	adds	r3, #12
    ETHARP_SET_ADDRHINT(netif, i);
 801dcd0:	7035      	strb	r5, [r6, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801dcd2:	f001 faef 	bl	801f2b4 <ethernet_output>
}
 801dcd6:	b005      	add	sp, #20
 801dcd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (q) {
 801dcdc:	b11e      	cbz	r6, 801dce6 <etharp_query+0xde>
      ETHARP_STATS_INC(etharp.memerr);
 801dcde:	4a48      	ldr	r2, [pc, #288]	; (801de00 <etharp_query+0x1f8>)
 801dce0:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 801dce2:	3301      	adds	r3, #1
 801dce4:	8493      	strh	r3, [r2, #36]	; 0x24
    return (err_t)i_err;
 801dce6:	b268      	sxtb	r0, r5
}
 801dce8:	b005      	add	sp, #20
 801dcea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801dcee:	4b45      	ldr	r3, [pc, #276]	; (801de04 <etharp_query+0x1fc>)
 801dcf0:	f240 32c1 	movw	r2, #961	; 0x3c1
 801dcf4:	4944      	ldr	r1, [pc, #272]	; (801de08 <etharp_query+0x200>)
 801dcf6:	4845      	ldr	r0, [pc, #276]	; (801de0c <etharp_query+0x204>)
 801dcf8:	f002 ff5e 	bl	8020bb8 <iprintf>
 801dcfc:	e7a3      	b.n	801dc46 <etharp_query+0x3e>
 801dcfe:	4634      	mov	r4, r6
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801dd00:	f8df b100 	ldr.w	fp, [pc, #256]	; 801de04 <etharp_query+0x1fc>
 801dd04:	f8df a10c 	ldr.w	sl, [pc, #268]	; 801de14 <etharp_query+0x20c>
 801dd08:	e005      	b.n	801dd16 <etharp_query+0x10e>
      if (PBUF_NEEDS_COPY(p)) {
 801dd0a:	7b23      	ldrb	r3, [r4, #12]
 801dd0c:	065a      	lsls	r2, r3, #25
 801dd0e:	d413      	bmi.n	801dd38 <etharp_query+0x130>
      p = p->next;
 801dd10:	6824      	ldr	r4, [r4, #0]
    while (p) {
 801dd12:	2c00      	cmp	r4, #0
 801dd14:	d03b      	beq.n	801dd8e <etharp_query+0x186>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801dd16:	8962      	ldrh	r2, [r4, #10]
 801dd18:	8923      	ldrh	r3, [r4, #8]
 801dd1a:	429a      	cmp	r2, r3
 801dd1c:	d1f5      	bne.n	801dd0a <etharp_query+0x102>
 801dd1e:	6827      	ldr	r7, [r4, #0]
 801dd20:	465b      	mov	r3, fp
 801dd22:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801dd26:	4651      	mov	r1, sl
 801dd28:	4838      	ldr	r0, [pc, #224]	; (801de0c <etharp_query+0x204>)
 801dd2a:	b117      	cbz	r7, 801dd32 <etharp_query+0x12a>
 801dd2c:	f002 ff44 	bl	8020bb8 <iprintf>
 801dd30:	e7eb      	b.n	801dd0a <etharp_query+0x102>
      if (PBUF_NEEDS_COPY(p)) {
 801dd32:	7b23      	ldrb	r3, [r4, #12]
 801dd34:	065b      	lsls	r3, r3, #25
 801dd36:	d52a      	bpl.n	801dd8e <etharp_query+0x186>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801dd38:	4632      	mov	r2, r6
 801dd3a:	f44f 7120 	mov.w	r1, #640	; 0x280
 801dd3e:	200e      	movs	r0, #14
 801dd40:	f7f9 f964 	bl	801700c <pbuf_clone>
    if (p != NULL) {
 801dd44:	4606      	mov	r6, r0
 801dd46:	2800      	cmp	r0, #0
 801dd48:	d047      	beq.n	801ddda <etharp_query+0x1d2>
      new_entry = (struct etharp_q_entry *)memp_malloc(MEMP_ARP_QUEUE);
 801dd4a:	f240 4206 	movw	r2, #1030	; 0x406
 801dd4e:	492d      	ldr	r1, [pc, #180]	; (801de04 <etharp_query+0x1fc>)
 801dd50:	200b      	movs	r0, #11
 801dd52:	f7f8 fadb 	bl	801630c <memp_malloc_fn>
      if (new_entry != NULL) {
 801dd56:	2800      	cmp	r0, #0
 801dd58:	d046      	beq.n	801dde8 <etharp_query+0x1e0>
        if (arp_table[i].q != NULL) {
 801dd5a:	eb09 0305 	add.w	r3, r9, r5
        new_entry->next = 0;
 801dd5e:	2200      	movs	r2, #0
        new_entry->p = p;
 801dd60:	6046      	str	r6, [r0, #4]
        if (arp_table[i].q != NULL) {
 801dd62:	00db      	lsls	r3, r3, #3
        new_entry->next = 0;
 801dd64:	6002      	str	r2, [r0, #0]
        if (arp_table[i].q != NULL) {
 801dd66:	f858 6003 	ldr.w	r6, [r8, r3]
 801dd6a:	b37e      	cbz	r6, 801ddcc <etharp_query+0x1c4>
          while (r->next != NULL) {
 801dd6c:	6833      	ldr	r3, [r6, #0]
 801dd6e:	b38b      	cbz	r3, 801ddd4 <etharp_query+0x1cc>
          qlen++;
 801dd70:	2201      	movs	r2, #1
 801dd72:	e000      	b.n	801dd76 <etharp_query+0x16e>
 801dd74:	4623      	mov	r3, r4
          while (r->next != NULL) {
 801dd76:	681c      	ldr	r4, [r3, #0]
            qlen++;
 801dd78:	3201      	adds	r2, #1
          while (r->next != NULL) {
 801dd7a:	2c00      	cmp	r4, #0
 801dd7c:	d1fa      	bne.n	801dd74 <etharp_query+0x16c>
        if (qlen >= ARP_QUEUE_LEN) {
 801dd7e:	2a1f      	cmp	r2, #31
          r->next = new_entry;
 801dd80:	6018      	str	r0, [r3, #0]
        if (qlen >= ARP_QUEUE_LEN) {
 801dd82:	d808      	bhi.n	801dd96 <etharp_query+0x18e>
        result = ERR_OK;
 801dd84:	4620      	mov	r0, r4
 801dd86:	e778      	b.n	801dc7a <etharp_query+0x72>
    return ERR_ARG;
 801dd88:	f06f 000f 	mvn.w	r0, #15
 801dd8c:	e775      	b.n	801dc7a <etharp_query+0x72>
      pbuf_ref(p);
 801dd8e:	4630      	mov	r0, r6
 801dd90:	f7f8 ff2e 	bl	8016bf0 <pbuf_ref>
 801dd94:	e7d9      	b.n	801dd4a <etharp_query+0x142>
          pbuf_free(old->p);
 801dd96:	e9d6 3000 	ldrd	r3, r0, [r6]
          arp_table[i].q = arp_table[i].q->next;
 801dd9a:	444d      	add	r5, r9
 801dd9c:	f848 3035 	str.w	r3, [r8, r5, lsl #3]
          pbuf_free(old->p);
 801dda0:	f7f8 fdb2 	bl	8016908 <pbuf_free>
          memp_free(MEMP_ARP_QUEUE, old);
 801dda4:	200b      	movs	r0, #11
 801dda6:	4631      	mov	r1, r6
 801dda8:	f7f8 fad4 	bl	8016354 <memp_free>
        result = ERR_OK;
 801ddac:	4620      	mov	r0, r4
 801ddae:	e764      	b.n	801dc7a <etharp_query+0x72>
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801ddb0:	1d22      	adds	r2, r4, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801ddb2:	2101      	movs	r1, #1
 801ddb4:	4b0f      	ldr	r3, [pc, #60]	; (801ddf4 <etharp_query+0x1ec>)
 801ddb6:	4620      	mov	r0, r4
 801ddb8:	9200      	str	r2, [sp, #0]
 801ddba:	9301      	str	r3, [sp, #4]
 801ddbc:	4653      	mov	r3, sl
 801ddbe:	4a0e      	ldr	r2, [pc, #56]	; (801ddf8 <etharp_query+0x1f0>)
 801ddc0:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801ddc4:	4651      	mov	r1, sl
 801ddc6:	f7ff fcf5 	bl	801d7b4 <etharp_raw>
 801ddca:	e756      	b.n	801dc7a <etharp_query+0x72>
          arp_table[i].q = new_entry;
 801ddcc:	f848 0003 	str.w	r0, [r8, r3]
        result = ERR_OK;
 801ddd0:	4630      	mov	r0, r6
 801ddd2:	e752      	b.n	801dc7a <etharp_query+0x72>
          r->next = new_entry;
 801ddd4:	6030      	str	r0, [r6, #0]
        result = ERR_OK;
 801ddd6:	4618      	mov	r0, r3
 801ddd8:	e74f      	b.n	801dc7a <etharp_query+0x72>
      ETHARP_STATS_INC(etharp.memerr);
 801ddda:	4a09      	ldr	r2, [pc, #36]	; (801de00 <etharp_query+0x1f8>)
      result = ERR_MEM;
 801dddc:	f04f 30ff 	mov.w	r0, #4294967295
      ETHARP_STATS_INC(etharp.memerr);
 801dde0:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 801dde2:	3301      	adds	r3, #1
 801dde4:	8493      	strh	r3, [r2, #36]	; 0x24
 801dde6:	e748      	b.n	801dc7a <etharp_query+0x72>
        pbuf_free(p);
 801dde8:	4630      	mov	r0, r6
 801ddea:	f7f8 fd8d 	bl	8016908 <pbuf_free>
        result = ERR_MEM;
 801ddee:	f04f 30ff 	mov.w	r0, #4294967295
 801ddf2:	e742      	b.n	801dc7a <etharp_query+0x72>
 801ddf4:	0803fac8 	.word	0x0803fac8
 801ddf8:	0803fa54 	.word	0x0803fa54
 801ddfc:	2002a74c 	.word	0x2002a74c
 801de00:	2003e1cc 	.word	0x2003e1cc
 801de04:	0803f6cc 	.word	0x0803f6cc
 801de08:	0803f628 	.word	0x0803f628
 801de0c:	08026bb8 	.word	0x08026bb8
 801de10:	2002a44c 	.word	0x2002a44c
 801de14:	0803f638 	.word	0x0803f638

0801de18 <etharp_output>:
{
 801de18:	b5f0      	push	{r4, r5, r6, r7, lr}
 801de1a:	460f      	mov	r7, r1
 801de1c:	b085      	sub	sp, #20
 801de1e:	4616      	mov	r6, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801de20:	4604      	mov	r4, r0
 801de22:	2800      	cmp	r0, #0
 801de24:	d07f      	beq.n	801df26 <etharp_output+0x10e>
  LWIP_ASSERT("q != NULL", q != NULL);
 801de26:	2f00      	cmp	r7, #0
 801de28:	d06c      	beq.n	801df04 <etharp_output+0xec>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801de2a:	2e00      	cmp	r6, #0
 801de2c:	d073      	beq.n	801df16 <etharp_output+0xfe>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801de2e:	4621      	mov	r1, r4
 801de30:	6830      	ldr	r0, [r6, #0]
 801de32:	f000 fc65 	bl	801e700 <ip4_addr_isbroadcast_u32>
 801de36:	2800      	cmp	r0, #0
 801de38:	d15b      	bne.n	801def2 <etharp_output+0xda>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801de3a:	6833      	ldr	r3, [r6, #0]
 801de3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 801de40:	2ae0      	cmp	r2, #224	; 0xe0
 801de42:	d039      	beq.n	801deb8 <etharp_output+0xa0>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801de44:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 801de48:	405a      	eors	r2, r3
 801de4a:	420a      	tst	r2, r1
 801de4c:	d009      	beq.n	801de62 <etharp_output+0x4a>
        !ip4_addr_islinklocal(ipaddr)) {
 801de4e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801de50:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801de54:	4293      	cmp	r3, r2
 801de56:	d004      	beq.n	801de62 <etharp_output+0x4a>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801de58:	68e3      	ldr	r3, [r4, #12]
 801de5a:	2b00      	cmp	r3, #0
 801de5c:	d07b      	beq.n	801df56 <etharp_output+0x13e>
            dst_addr = netif_ip4_gw(netif);
 801de5e:	f104 060c 	add.w	r6, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801de62:	f8df c118 	ldr.w	ip, [pc, #280]	; 801df7c <etharp_output+0x164>
 801de66:	4b3d      	ldr	r3, [pc, #244]	; (801df5c <etharp_output+0x144>)
 801de68:	f89c 2000 	ldrb.w	r2, [ip]
 801de6c:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801de70:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801de74:	7d19      	ldrb	r1, [r3, #20]
 801de76:	2901      	cmp	r1, #1
 801de78:	d902      	bls.n	801de80 <etharp_output+0x68>
 801de7a:	6899      	ldr	r1, [r3, #8]
 801de7c:	42a1      	cmp	r1, r4
 801de7e:	d05d      	beq.n	801df3c <etharp_output+0x124>
 801de80:	4a36      	ldr	r2, [pc, #216]	; (801df5c <etharp_output+0x144>)
{
 801de82:	2300      	movs	r3, #0
 801de84:	e003      	b.n	801de8e <etharp_output+0x76>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801de86:	2b20      	cmp	r3, #32
 801de88:	f102 0218 	add.w	r2, r2, #24
 801de8c:	d033      	beq.n	801def6 <etharp_output+0xde>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801de8e:	7d11      	ldrb	r1, [r2, #20]
 801de90:	b2dd      	uxtb	r5, r3
 801de92:	3301      	adds	r3, #1
 801de94:	2901      	cmp	r1, #1
 801de96:	d9f6      	bls.n	801de86 <etharp_output+0x6e>
          (arp_table[i].netif == netif) &&
 801de98:	6891      	ldr	r1, [r2, #8]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801de9a:	42a1      	cmp	r1, r4
 801de9c:	d1f3      	bne.n	801de86 <etharp_output+0x6e>
          (arp_table[i].netif == netif) &&
 801de9e:	6830      	ldr	r0, [r6, #0]
 801dea0:	6851      	ldr	r1, [r2, #4]
 801dea2:	4288      	cmp	r0, r1
 801dea4:	d1ef      	bne.n	801de86 <etharp_output+0x6e>
        return etharp_output_to_arp_index(netif, q, i);
 801dea6:	4639      	mov	r1, r7
 801dea8:	462a      	mov	r2, r5
 801deaa:	4620      	mov	r0, r4
        ETHARP_SET_ADDRHINT(netif, i);
 801deac:	f88c 5000 	strb.w	r5, [ip]
        return etharp_output_to_arp_index(netif, q, i);
 801deb0:	f7ff fd02 	bl	801d8b8 <etharp_output_to_arp_index>
}
 801deb4:	b005      	add	sp, #20
 801deb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801deb8:	7873      	ldrb	r3, [r6, #1]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801deba:	2501      	movs	r5, #1
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801debc:	205e      	movs	r0, #94	; 0x5e
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801debe:	78b1      	ldrb	r1, [r6, #2]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801dec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801dec4:	78f2      	ldrb	r2, [r6, #3]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801dec6:	f8ad 5008 	strh.w	r5, [sp, #8]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801deca:	f88d 300b 	strb.w	r3, [sp, #11]
    dest = &mcastaddr;
 801dece:	ab02      	add	r3, sp, #8
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801ded0:	f88d 000a 	strb.w	r0, [sp, #10]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801ded4:	f88d 100c 	strb.w	r1, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801ded8:	f88d 200d 	strb.w	r2, [sp, #13]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801dedc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801dee0:	4639      	mov	r1, r7
 801dee2:	f104 022e 	add.w	r2, r4, #46	; 0x2e
 801dee6:	9000      	str	r0, [sp, #0]
 801dee8:	4620      	mov	r0, r4
 801deea:	f001 f9e3 	bl	801f2b4 <ethernet_output>
}
 801deee:	b005      	add	sp, #20
 801def0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dest = (const struct eth_addr *)&ethbroadcast;
 801def2:	4b1b      	ldr	r3, [pc, #108]	; (801df60 <etharp_output+0x148>)
 801def4:	e7f2      	b.n	801dedc <etharp_output+0xc4>
    return etharp_query(netif, dst_addr, q);
 801def6:	463a      	mov	r2, r7
 801def8:	4631      	mov	r1, r6
 801defa:	4620      	mov	r0, r4
 801defc:	f7ff fe84 	bl	801dc08 <etharp_query>
}
 801df00:	b005      	add	sp, #20
 801df02:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("q != NULL", q != NULL);
 801df04:	4b17      	ldr	r3, [pc, #92]	; (801df64 <etharp_output+0x14c>)
 801df06:	f240 321f 	movw	r2, #799	; 0x31f
 801df0a:	4917      	ldr	r1, [pc, #92]	; (801df68 <etharp_output+0x150>)
 801df0c:	4817      	ldr	r0, [pc, #92]	; (801df6c <etharp_output+0x154>)
 801df0e:	f002 fe53 	bl	8020bb8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801df12:	2e00      	cmp	r6, #0
 801df14:	d18b      	bne.n	801de2e <etharp_output+0x16>
 801df16:	4b13      	ldr	r3, [pc, #76]	; (801df64 <etharp_output+0x14c>)
 801df18:	f44f 7248 	mov.w	r2, #800	; 0x320
 801df1c:	4914      	ldr	r1, [pc, #80]	; (801df70 <etharp_output+0x158>)
 801df1e:	4813      	ldr	r0, [pc, #76]	; (801df6c <etharp_output+0x154>)
 801df20:	f002 fe4a 	bl	8020bb8 <iprintf>
 801df24:	e783      	b.n	801de2e <etharp_output+0x16>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801df26:	4b0f      	ldr	r3, [pc, #60]	; (801df64 <etharp_output+0x14c>)
 801df28:	f240 321e 	movw	r2, #798	; 0x31e
 801df2c:	4911      	ldr	r1, [pc, #68]	; (801df74 <etharp_output+0x15c>)
 801df2e:	480f      	ldr	r0, [pc, #60]	; (801df6c <etharp_output+0x154>)
 801df30:	f002 fe42 	bl	8020bb8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801df34:	2f00      	cmp	r7, #0
 801df36:	f47f af78 	bne.w	801de2a <etharp_output+0x12>
 801df3a:	e7e3      	b.n	801df04 <etharp_output+0xec>
            (arp_table[etharp_cached_entry].netif == netif) &&
 801df3c:	685b      	ldr	r3, [r3, #4]
 801df3e:	6831      	ldr	r1, [r6, #0]
 801df40:	4299      	cmp	r1, r3
 801df42:	d19d      	bne.n	801de80 <etharp_output+0x68>
          ETHARP_STATS_INC(etharp.cachehit);
 801df44:	4d0c      	ldr	r5, [pc, #48]	; (801df78 <etharp_output+0x160>)
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801df46:	4639      	mov	r1, r7
 801df48:	4620      	mov	r0, r4
          ETHARP_STATS_INC(etharp.cachehit);
 801df4a:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
 801df4c:	3301      	adds	r3, #1
 801df4e:	85eb      	strh	r3, [r5, #46]	; 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801df50:	f7ff fcb2 	bl	801d8b8 <etharp_output_to_arp_index>
 801df54:	e7cb      	b.n	801deee <etharp_output+0xd6>
            return ERR_RTE;
 801df56:	f06f 0003 	mvn.w	r0, #3
 801df5a:	e7c8      	b.n	801deee <etharp_output+0xd6>
 801df5c:	2002a44c 	.word	0x2002a44c
 801df60:	0803fa54 	.word	0x0803fa54
 801df64:	0803f6cc 	.word	0x0803f6cc
 801df68:	0803f704 	.word	0x0803f704
 801df6c:	08026bb8 	.word	0x08026bb8
 801df70:	0803f5b4 	.word	0x0803f5b4
 801df74:	08026ba8 	.word	0x08026ba8
 801df78:	2003e1cc 	.word	0x2003e1cc
 801df7c:	2002a74c 	.word	0x2002a74c

0801df80 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801df80:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801df82:	f100 032e 	add.w	r3, r0, #46	; 0x2e
{
 801df86:	b530      	push	{r4, r5, lr}
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801df88:	3204      	adds	r2, #4
{
 801df8a:	b085      	sub	sp, #20
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801df8c:	2501      	movs	r5, #1
 801df8e:	4c05      	ldr	r4, [pc, #20]	; (801dfa4 <etharp_request+0x24>)
 801df90:	9102      	str	r1, [sp, #8]
 801df92:	4619      	mov	r1, r3
 801df94:	9200      	str	r2, [sp, #0]
 801df96:	4a04      	ldr	r2, [pc, #16]	; (801dfa8 <etharp_request+0x28>)
 801df98:	9503      	str	r5, [sp, #12]
 801df9a:	9401      	str	r4, [sp, #4]
 801df9c:	f7ff fc0a 	bl	801d7b4 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 801dfa0:	b005      	add	sp, #20
 801dfa2:	bd30      	pop	{r4, r5, pc}
 801dfa4:	0803fac8 	.word	0x0803fac8
 801dfa8:	0803fa54 	.word	0x0803fa54

0801dfac <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 801dfac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801dfb0:	4604      	mov	r4, r0
 801dfb2:	b087      	sub	sp, #28
 801dfb4:	4689      	mov	r9, r1
 801dfb6:	4690      	mov	r8, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801dfb8:	2124      	movs	r1, #36	; 0x24
 801dfba:	f44f 7220 	mov.w	r2, #640	; 0x280
 801dfbe:	2022      	movs	r0, #34	; 0x22
 801dfc0:	f7f8 fd10 	bl	80169e4 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 801dfc4:	2800      	cmp	r0, #0
 801dfc6:	d047      	beq.n	801e058 <icmp_send_response.isra.0+0xac>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801dfc8:	8943      	ldrh	r3, [r0, #10]
 801dfca:	4606      	mov	r6, r0
 801dfcc:	2b23      	cmp	r3, #35	; 0x23
 801dfce:	d946      	bls.n	801e05e <icmp_send_response.isra.0+0xb2>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801dfd0:	6823      	ldr	r3, [r4, #0]
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 801dfd2:	2500      	movs	r5, #0
  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801dfd4:	6874      	ldr	r4, [r6, #4]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801dfd6:	af06      	add	r7, sp, #24
  icmphdr->code = code;
 801dfd8:	f884 8001 	strb.w	r8, [r4, #1]
  icmphdr->type = type;
 801dfdc:	f884 9000 	strb.w	r9, [r4]
  icmphdr->id = 0;
 801dfe0:	7125      	strb	r5, [r4, #4]
 801dfe2:	7165      	strb	r5, [r4, #5]
  icmphdr->seqno = 0;
 801dfe4:	71a5      	strb	r5, [r4, #6]
 801dfe6:	71e5      	strb	r5, [r4, #7]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801dfe8:	f8d3 c000 	ldr.w	ip, [r3]
 801dfec:	6858      	ldr	r0, [r3, #4]
 801dfee:	689a      	ldr	r2, [r3, #8]
 801dff0:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 801dff4:	f8c4 c008 	str.w	ip, [r4, #8]
 801dff8:	60e0      	str	r0, [r4, #12]
 801dffa:	6122      	str	r2, [r4, #16]
 801dffc:	f8c4 e014 	str.w	lr, [r4, #20]
 801e000:	6958      	ldr	r0, [r3, #20]
 801e002:	f8d3 c010 	ldr.w	ip, [r3, #16]
 801e006:	699a      	ldr	r2, [r3, #24]
 801e008:	61e0      	str	r0, [r4, #28]
 801e00a:	f8c4 c018 	str.w	ip, [r4, #24]
 801e00e:	6222      	str	r2, [r4, #32]
  ip4_addr_copy(iphdr_src, iphdr->src);
 801e010:	68db      	ldr	r3, [r3, #12]
 801e012:	f847 3d04 	str.w	r3, [r7, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801e016:	4638      	mov	r0, r7
 801e018:	f000 f948 	bl	801e2ac <ip4_route>
#endif
  if (netif != NULL) {
 801e01c:	4680      	mov	r8, r0
 801e01e:	b1c0      	cbz	r0, 801e052 <icmp_send_response.isra.0+0xa6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801e020:	70a5      	strb	r5, [r4, #2]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801e022:	4620      	mov	r0, r4
    icmphdr->chksum = 0;
 801e024:	70e5      	strb	r5, [r4, #3]
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801e026:	8971      	ldrh	r1, [r6, #10]
 801e028:	f7f7 fbbe 	bl	80157a8 <inet_chksum>
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
 801e02c:	f8df c04c 	ldr.w	ip, [pc, #76]	; 801e07c <icmp_send_response.isra.0+0xd0>
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801e030:	8060      	strh	r0, [r4, #2]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801e032:	2301      	movs	r3, #1
    ICMP_STATS_INC(icmp.xmit);
 801e034:	f8bc 4060 	ldrh.w	r4, [ip, #96]	; 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801e038:	463a      	mov	r2, r7
 801e03a:	f8cd 8008 	str.w	r8, [sp, #8]
 801e03e:	4629      	mov	r1, r5
    ICMP_STATS_INC(icmp.xmit);
 801e040:	441c      	add	r4, r3
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801e042:	4630      	mov	r0, r6
 801e044:	e9cd 5300 	strd	r5, r3, [sp]
 801e048:	23ff      	movs	r3, #255	; 0xff
    ICMP_STATS_INC(icmp.xmit);
 801e04a:	f8ac 4060 	strh.w	r4, [ip, #96]	; 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801e04e:	f000 fb45 	bl	801e6dc <ip4_output_if>
  }
  pbuf_free(q);
 801e052:	4630      	mov	r0, r6
 801e054:	f7f8 fc58 	bl	8016908 <pbuf_free>
}
 801e058:	b007      	add	sp, #28
 801e05a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801e05e:	4b04      	ldr	r3, [pc, #16]	; (801e070 <icmp_send_response.isra.0+0xc4>)
 801e060:	f240 1269 	movw	r2, #361	; 0x169
 801e064:	4903      	ldr	r1, [pc, #12]	; (801e074 <icmp_send_response.isra.0+0xc8>)
 801e066:	4804      	ldr	r0, [pc, #16]	; (801e078 <icmp_send_response.isra.0+0xcc>)
 801e068:	f002 fda6 	bl	8020bb8 <iprintf>
 801e06c:	e7b0      	b.n	801dfd0 <icmp_send_response.isra.0+0x24>
 801e06e:	bf00      	nop
 801e070:	0803f78c 	.word	0x0803f78c
 801e074:	0803f7c4 	.word	0x0803f7c4
 801e078:	08026bb8 	.word	0x08026bb8
 801e07c:	2003e1cc 	.word	0x2003e1cc

0801e080 <icmp_input>:
{
 801e080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ICMP_STATS_INC(icmp.recv);
 801e084:	4d71      	ldr	r5, [pc, #452]	; (801e24c <icmp_input+0x1cc>)
{
 801e086:	b085      	sub	sp, #20
  iphdr_in = ip4_current_header();
 801e088:	4f71      	ldr	r7, [pc, #452]	; (801e250 <icmp_input+0x1d0>)
{
 801e08a:	4606      	mov	r6, r0
  ICMP_STATS_INC(icmp.recv);
 801e08c:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
  iphdr_in = ip4_current_header();
 801e090:	f8d7 9008 	ldr.w	r9, [r7, #8]
  ICMP_STATS_INC(icmp.recv);
 801e094:	3301      	adds	r3, #1
 801e096:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
  hlen = IPH_HL_BYTES(iphdr_in);
 801e09a:	f899 4000 	ldrb.w	r4, [r9]
 801e09e:	f004 040f 	and.w	r4, r4, #15
 801e0a2:	00a4      	lsls	r4, r4, #2
  if (hlen < IP_HLEN) {
 801e0a4:	2c13      	cmp	r4, #19
 801e0a6:	d958      	bls.n	801e15a <icmp_input+0xda>
  if (p->len < sizeof(u16_t) * 2) {
 801e0a8:	8943      	ldrh	r3, [r0, #10]
 801e0aa:	2b03      	cmp	r3, #3
 801e0ac:	d955      	bls.n	801e15a <icmp_input+0xda>
  type = *((u8_t *)p->payload);
 801e0ae:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 801e0b0:	781b      	ldrb	r3, [r3, #0]
 801e0b2:	2b00      	cmp	r3, #0
 801e0b4:	f000 8096 	beq.w	801e1e4 <icmp_input+0x164>
 801e0b8:	2b08      	cmp	r3, #8
 801e0ba:	f040 8099 	bne.w	801e1f0 <icmp_input+0x170>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801e0be:	6978      	ldr	r0, [r7, #20]
 801e0c0:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 801e0c4:	2be0      	cmp	r3, #224	; 0xe0
 801e0c6:	d03f      	beq.n	801e148 <icmp_input+0xc8>
 801e0c8:	4688      	mov	r8, r1
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801e0ca:	6839      	ldr	r1, [r7, #0]
 801e0cc:	f000 fb18 	bl	801e700 <ip4_addr_isbroadcast_u32>
 801e0d0:	2800      	cmp	r0, #0
 801e0d2:	d139      	bne.n	801e148 <icmp_input+0xc8>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801e0d4:	8933      	ldrh	r3, [r6, #8]
 801e0d6:	2b07      	cmp	r3, #7
 801e0d8:	d93f      	bls.n	801e15a <icmp_input+0xda>
        if (inet_chksum_pbuf(p) != 0) {
 801e0da:	4630      	mov	r0, r6
 801e0dc:	f7f7 fb6a 	bl	80157b4 <inet_chksum_pbuf>
 801e0e0:	2800      	cmp	r0, #0
 801e0e2:	f040 8095 	bne.w	801e210 <icmp_input+0x190>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801e0e6:	f104 0b0e 	add.w	fp, r4, #14
 801e0ea:	4630      	mov	r0, r6
  hlen = IPH_HL_BYTES(iphdr_in);
 801e0ec:	fa1f fa84 	uxth.w	sl, r4
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801e0f0:	4659      	mov	r1, fp
 801e0f2:	f7f8 fbc9 	bl	8016888 <pbuf_add_header>
 801e0f6:	2800      	cmp	r0, #0
 801e0f8:	d03a      	beq.n	801e170 <icmp_input+0xf0>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801e0fa:	8933      	ldrh	r3, [r6, #8]
 801e0fc:	eb03 010a 	add.w	r1, r3, sl
 801e100:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 801e102:	428b      	cmp	r3, r1
 801e104:	d820      	bhi.n	801e148 <icmp_input+0xc8>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801e106:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e10a:	200e      	movs	r0, #14
 801e10c:	f7f8 fc6a 	bl	80169e4 <pbuf_alloc>
        if (r == NULL) {
 801e110:	4683      	mov	fp, r0
 801e112:	b1c8      	cbz	r0, 801e148 <icmp_input+0xc8>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801e114:	8942      	ldrh	r2, [r0, #10]
 801e116:	f104 0308 	add.w	r3, r4, #8
 801e11a:	429a      	cmp	r2, r3
 801e11c:	f0c0 808e 	bcc.w	801e23c <icmp_input+0x1bc>
        MEMCPY(r->payload, iphdr_in, hlen);
 801e120:	4649      	mov	r1, r9
 801e122:	4622      	mov	r2, r4
 801e124:	6840      	ldr	r0, [r0, #4]
 801e126:	f001 fda2 	bl	801fc6e <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 801e12a:	4621      	mov	r1, r4
 801e12c:	4658      	mov	r0, fp
 801e12e:	f7f8 fbaf 	bl	8016890 <pbuf_remove_header>
 801e132:	2800      	cmp	r0, #0
 801e134:	d07c      	beq.n	801e230 <icmp_input+0x1b0>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801e136:	4b47      	ldr	r3, [pc, #284]	; (801e254 <icmp_input+0x1d4>)
 801e138:	22b6      	movs	r2, #182	; 0xb6
 801e13a:	4947      	ldr	r1, [pc, #284]	; (801e258 <icmp_input+0x1d8>)
 801e13c:	4847      	ldr	r0, [pc, #284]	; (801e25c <icmp_input+0x1dc>)
 801e13e:	f002 fd3b 	bl	8020bb8 <iprintf>
          pbuf_free(r);
 801e142:	4658      	mov	r0, fp
 801e144:	f7f8 fbe0 	bl	8016908 <pbuf_free>
  pbuf_free(p);
 801e148:	4630      	mov	r0, r6
 801e14a:	f7f8 fbdd 	bl	8016908 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 801e14e:	f8b5 3074 	ldrh.w	r3, [r5, #116]	; 0x74
 801e152:	3301      	adds	r3, #1
 801e154:	f8a5 3074 	strh.w	r3, [r5, #116]	; 0x74
  return;
 801e158:	e007      	b.n	801e16a <icmp_input+0xea>
  pbuf_free(p);
 801e15a:	4630      	mov	r0, r6
 801e15c:	f7f8 fbd4 	bl	8016908 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 801e160:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
 801e164:	3301      	adds	r3, #1
 801e166:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
}
 801e16a:	b005      	add	sp, #20
 801e16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801e170:	4659      	mov	r1, fp
 801e172:	4630      	mov	r0, r6
 801e174:	f7f8 fb8c 	bl	8016890 <pbuf_remove_header>
 801e178:	2800      	cmp	r0, #0
 801e17a:	d152      	bne.n	801e222 <icmp_input+0x1a2>
      if (pbuf_add_header(p, hlen)) {
 801e17c:	4621      	mov	r1, r4
 801e17e:	4630      	mov	r0, r6
      iecho = (struct icmp_echo_hdr *)p->payload;
 801e180:	f8d6 9004 	ldr.w	r9, [r6, #4]
      if (pbuf_add_header(p, hlen)) {
 801e184:	f7f8 fb80 	bl	8016888 <pbuf_add_header>
 801e188:	bb60      	cbnz	r0, 801e1e4 <icmp_input+0x164>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801e18a:	6874      	ldr	r4, [r6, #4]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 801e18c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801e190:	e9d7 3104 	ldrd	r3, r1, [r7, #16]
        IPH_CHKSUM_SET(iphdr, 0);
 801e194:	2700      	movs	r7, #0
        ip4_addr_copy(iphdr->src, *src);
 801e196:	60e1      	str	r1, [r4, #12]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 801e198:	4651      	mov	r1, sl
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801e19a:	6123      	str	r3, [r4, #16]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 801e19c:	f8b9 3002 	ldrh.w	r3, [r9, #2]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801e1a0:	f889 0000 	strb.w	r0, [r9]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 801e1a4:	4620      	mov	r0, r4
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 801e1a6:	4293      	cmp	r3, r2
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 801e1a8:	bf8c      	ite	hi
 801e1aa:	3309      	addhi	r3, #9
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 801e1ac:	3308      	addls	r3, #8
 801e1ae:	f8a9 3002 	strh.w	r3, [r9, #2]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801e1b2:	f04f 09ff 	mov.w	r9, #255	; 0xff
        IPH_CHKSUM_SET(iphdr, 0);
 801e1b6:	72a7      	strb	r7, [r4, #10]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801e1b8:	f884 9008 	strb.w	r9, [r4, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801e1bc:	72e7      	strb	r7, [r4, #11]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 801e1be:	f7f7 faf3 	bl	80157a8 <inet_chksum>
        ICMP_STATS_INC(icmp.xmit);
 801e1c2:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801e1c6:	2101      	movs	r1, #1
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 801e1c8:	8160      	strh	r0, [r4, #10]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801e1ca:	464b      	mov	r3, r9
 801e1cc:	9700      	str	r7, [sp, #0]
        ICMP_STATS_INC(icmp.xmit);
 801e1ce:	1854      	adds	r4, r2, r1
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801e1d0:	9101      	str	r1, [sp, #4]
 801e1d2:	463a      	mov	r2, r7
 801e1d4:	f8cd 8008 	str.w	r8, [sp, #8]
 801e1d8:	4630      	mov	r0, r6
 801e1da:	4921      	ldr	r1, [pc, #132]	; (801e260 <icmp_input+0x1e0>)
        ICMP_STATS_INC(icmp.xmit);
 801e1dc:	f8a5 4060 	strh.w	r4, [r5, #96]	; 0x60
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801e1e0:	f000 fa7c 	bl	801e6dc <ip4_output_if>
  pbuf_free(p);
 801e1e4:	4630      	mov	r0, r6
}
 801e1e6:	b005      	add	sp, #20
 801e1e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 801e1ec:	f7f8 bb8c 	b.w	8016908 <pbuf_free>
      ICMP_STATS_INC(icmp.proterr);
 801e1f0:	f8b5 2070 	ldrh.w	r2, [r5, #112]	; 0x70
  pbuf_free(p);
 801e1f4:	4630      	mov	r0, r6
      ICMP_STATS_INC(icmp.drop);
 801e1f6:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
      ICMP_STATS_INC(icmp.proterr);
 801e1fa:	3201      	adds	r2, #1
      ICMP_STATS_INC(icmp.drop);
 801e1fc:	3301      	adds	r3, #1
      ICMP_STATS_INC(icmp.proterr);
 801e1fe:	f8a5 2070 	strh.w	r2, [r5, #112]	; 0x70
      ICMP_STATS_INC(icmp.drop);
 801e202:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
}
 801e206:	b005      	add	sp, #20
 801e208:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 801e20c:	f7f8 bb7c 	b.w	8016908 <pbuf_free>
          pbuf_free(p);
 801e210:	4630      	mov	r0, r6
 801e212:	f7f8 fb79 	bl	8016908 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
 801e216:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 801e21a:	3301      	adds	r3, #1
 801e21c:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
          return;
 801e220:	e7a3      	b.n	801e16a <icmp_input+0xea>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801e222:	4b0c      	ldr	r3, [pc, #48]	; (801e254 <icmp_input+0x1d4>)
 801e224:	22c7      	movs	r2, #199	; 0xc7
 801e226:	490f      	ldr	r1, [pc, #60]	; (801e264 <icmp_input+0x1e4>)
 801e228:	480c      	ldr	r0, [pc, #48]	; (801e25c <icmp_input+0x1dc>)
 801e22a:	f002 fcc5 	bl	8020bb8 <iprintf>
          goto icmperr;
 801e22e:	e78b      	b.n	801e148 <icmp_input+0xc8>
        if (pbuf_copy(r, p) != ERR_OK) {
 801e230:	4631      	mov	r1, r6
 801e232:	4658      	mov	r0, fp
 801e234:	f7f8 fd4e 	bl	8016cd4 <pbuf_copy>
 801e238:	b118      	cbz	r0, 801e242 <icmp_input+0x1c2>
          pbuf_free(r);
 801e23a:	4658      	mov	r0, fp
 801e23c:	f7f8 fb64 	bl	8016908 <pbuf_free>
          goto icmperr;
 801e240:	e782      	b.n	801e148 <icmp_input+0xc8>
        pbuf_free(p);
 801e242:	4630      	mov	r0, r6
 801e244:	465e      	mov	r6, fp
 801e246:	f7f8 fb5f 	bl	8016908 <pbuf_free>
 801e24a:	e797      	b.n	801e17c <icmp_input+0xfc>
 801e24c:	2003e1cc 	.word	0x2003e1cc
 801e250:	2002ead4 	.word	0x2002ead4
 801e254:	0803f78c 	.word	0x0803f78c
 801e258:	0803f720 	.word	0x0803f720
 801e25c:	08026bb8 	.word	0x08026bb8
 801e260:	2002eae8 	.word	0x2002eae8
 801e264:	0803f758 	.word	0x0803f758

0801e268 <icmp_dest_unreach>:
  icmp_send_response(p, ICMP_DUR, t);
 801e268:	460a      	mov	r2, r1
 801e26a:	3004      	adds	r0, #4
 801e26c:	2103      	movs	r1, #3
 801e26e:	f7ff be9d 	b.w	801dfac <icmp_send_response.isra.0>
 801e272:	bf00      	nop

0801e274 <icmp_time_exceeded>:
  icmp_send_response(p, ICMP_TE, t);
 801e274:	460a      	mov	r2, r1
 801e276:	3004      	adds	r0, #4
 801e278:	210b      	movs	r1, #11
 801e27a:	f7ff be97 	b.w	801dfac <icmp_send_response.isra.0>
 801e27e:	bf00      	nop

0801e280 <ip4_input_accept.part.0>:
}
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
 801e280:	b508      	push	{r3, lr}
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801e282:	6843      	ldr	r3, [r0, #4]
 801e284:	b16b      	cbz	r3, 801e2a2 <ip4_input_accept.part.0+0x22>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801e286:	4a08      	ldr	r2, [pc, #32]	; (801e2a8 <ip4_input_accept.part.0+0x28>)
 801e288:	6952      	ldr	r2, [r2, #20]
 801e28a:	4293      	cmp	r3, r2
 801e28c:	d007      	beq.n	801e29e <ip4_input_accept.part.0+0x1e>
 801e28e:	4601      	mov	r1, r0
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801e290:	4610      	mov	r0, r2
 801e292:	f000 fa35 	bl	801e700 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801e296:	3000      	adds	r0, #0
 801e298:	bf18      	it	ne
 801e29a:	2001      	movne	r0, #1
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
}
 801e29c:	bd08      	pop	{r3, pc}
      return 1;
 801e29e:	2001      	movs	r0, #1
}
 801e2a0:	bd08      	pop	{r3, pc}
  return 0;
 801e2a2:	4618      	mov	r0, r3
}
 801e2a4:	bd08      	pop	{r3, pc}
 801e2a6:	bf00      	nop
 801e2a8:	2002ead4 	.word	0x2002ead4

0801e2ac <ip4_route>:
  NETIF_FOREACH(netif) {
 801e2ac:	4b18      	ldr	r3, [pc, #96]	; (801e310 <ip4_route+0x64>)
{
 801e2ae:	b430      	push	{r4, r5}
  NETIF_FOREACH(netif) {
 801e2b0:	681b      	ldr	r3, [r3, #0]
 801e2b2:	b1ab      	cbz	r3, 801e2e0 <ip4_route+0x34>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801e2b4:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 801e2b8:	07d4      	lsls	r4, r2, #31
 801e2ba:	d5f9      	bpl.n	801e2b0 <ip4_route+0x4>
 801e2bc:	0751      	lsls	r1, r2, #29
 801e2be:	d5f7      	bpl.n	801e2b0 <ip4_route+0x4>
 801e2c0:	6859      	ldr	r1, [r3, #4]
 801e2c2:	2900      	cmp	r1, #0
 801e2c4:	d0f4      	beq.n	801e2b0 <ip4_route+0x4>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801e2c6:	6804      	ldr	r4, [r0, #0]
 801e2c8:	689d      	ldr	r5, [r3, #8]
 801e2ca:	4061      	eors	r1, r4
 801e2cc:	4229      	tst	r1, r5
 801e2ce:	d004      	beq.n	801e2da <ip4_route+0x2e>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801e2d0:	0792      	lsls	r2, r2, #30
 801e2d2:	d4ed      	bmi.n	801e2b0 <ip4_route+0x4>
 801e2d4:	68da      	ldr	r2, [r3, #12]
 801e2d6:	4294      	cmp	r4, r2
 801e2d8:	d1ea      	bne.n	801e2b0 <ip4_route+0x4>
}
 801e2da:	4618      	mov	r0, r3
 801e2dc:	bc30      	pop	{r4, r5}
 801e2de:	4770      	bx	lr
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801e2e0:	4b0c      	ldr	r3, [pc, #48]	; (801e314 <ip4_route+0x68>)
 801e2e2:	681b      	ldr	r3, [r3, #0]
 801e2e4:	b153      	cbz	r3, 801e2fc <ip4_route+0x50>
 801e2e6:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 801e2ea:	f002 0205 	and.w	r2, r2, #5
 801e2ee:	2a05      	cmp	r2, #5
 801e2f0:	d104      	bne.n	801e2fc <ip4_route+0x50>
 801e2f2:	685a      	ldr	r2, [r3, #4]
 801e2f4:	b112      	cbz	r2, 801e2fc <ip4_route+0x50>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801e2f6:	7802      	ldrb	r2, [r0, #0]
 801e2f8:	2a7f      	cmp	r2, #127	; 0x7f
 801e2fa:	d1ee      	bne.n	801e2da <ip4_route+0x2e>
    IP_STATS_INC(ip.rterr);
 801e2fc:	4906      	ldr	r1, [pc, #24]	; (801e318 <ip4_route+0x6c>)
    return NULL;
 801e2fe:	2300      	movs	r3, #0
    IP_STATS_INC(ip.rterr);
 801e300:	f8b1 2056 	ldrh.w	r2, [r1, #86]	; 0x56
}
 801e304:	4618      	mov	r0, r3
    IP_STATS_INC(ip.rterr);
 801e306:	3201      	adds	r2, #1
}
 801e308:	bc30      	pop	{r4, r5}
    IP_STATS_INC(ip.rterr);
 801e30a:	f8a1 2056 	strh.w	r2, [r1, #86]	; 0x56
}
 801e30e:	4770      	bx	lr
 801e310:	2003e1c0 	.word	0x2003e1c0
 801e314:	2003e1c4 	.word	0x2003e1c4
 801e318:	2003e1cc 	.word	0x2003e1cc

0801e31c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801e31c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();

  IP_STATS_INC(ip.recv);
 801e320:	4c94      	ldr	r4, [pc, #592]	; (801e574 <ip4_input+0x258>)
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801e322:	6847      	ldr	r7, [r0, #4]
  IP_STATS_INC(ip.recv);
 801e324:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 801e328:	3301      	adds	r3, #1
 801e32a:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
  if (IPH_V(iphdr) != 4) {
 801e32e:	783b      	ldrb	r3, [r7, #0]
 801e330:	091a      	lsrs	r2, r3, #4
 801e332:	2a04      	cmp	r2, #4
 801e334:	d00e      	beq.n	801e354 <ip4_input+0x38>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801e336:	f7f8 fae7 	bl	8016908 <pbuf_free>
    IP_STATS_INC(ip.err);
 801e33a:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
    IP_STATS_INC(ip.drop);
 801e33e:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
    IP_STATS_INC(ip.err);
 801e342:	3201      	adds	r2, #1
    IP_STATS_INC(ip.drop);
 801e344:	3301      	adds	r3, #1
    IP_STATS_INC(ip.err);
 801e346:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    IP_STATS_INC(ip.drop);
 801e34a:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 801e34e:	2000      	movs	r0, #0
 801e350:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801e354:	f003 030f 	and.w	r3, r3, #15
 801e358:	4606      	mov	r6, r0
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801e35a:	8878      	ldrh	r0, [r7, #2]
 801e35c:	4688      	mov	r8, r1
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801e35e:	009d      	lsls	r5, r3, #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801e360:	f7f6 fc64 	bl	8014c2c <lwip_htons>
  if (iphdr_len < p->tot_len) {
 801e364:	8933      	ldrh	r3, [r6, #8]
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801e366:	4681      	mov	r9, r0
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801e368:	fa1f fa85 	uxth.w	sl, r5
  if (iphdr_len < p->tot_len) {
 801e36c:	4283      	cmp	r3, r0
 801e36e:	f200 80aa 	bhi.w	801e4c6 <ip4_input+0x1aa>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801e372:	8973      	ldrh	r3, [r6, #10]
 801e374:	4553      	cmp	r3, sl
 801e376:	f0c0 8096 	bcc.w	801e4a6 <ip4_input+0x18a>
 801e37a:	8933      	ldrh	r3, [r6, #8]
 801e37c:	454b      	cmp	r3, r9
 801e37e:	f0c0 8092 	bcc.w	801e4a6 <ip4_input+0x18a>
 801e382:	f1ba 0f13 	cmp.w	sl, #19
 801e386:	f240 808e 	bls.w	801e4a6 <ip4_input+0x18a>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801e38a:	693b      	ldr	r3, [r7, #16]
 801e38c:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 801e57c <ip4_input+0x260>
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801e390:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 801e394:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801e398:	f8ca 3014 	str.w	r3, [sl, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801e39c:	29e0      	cmp	r1, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801e39e:	68f8      	ldr	r0, [r7, #12]
 801e3a0:	f002 0201 	and.w	r2, r2, #1
 801e3a4:	f8ca 0010 	str.w	r0, [sl, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801e3a8:	f000 80b9 	beq.w	801e51e <ip4_input+0x202>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801e3ac:	2a00      	cmp	r2, #0
 801e3ae:	f040 808f 	bne.w	801e4d0 <ip4_input+0x1b4>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801e3b2:	b2db      	uxtb	r3, r3
 801e3b4:	2b7f      	cmp	r3, #127	; 0x7f
 801e3b6:	f000 8093 	beq.w	801e4e0 <ip4_input+0x1c4>
        NETIF_FOREACH(netif) {
 801e3ba:	4b6f      	ldr	r3, [pc, #444]	; (801e578 <ip4_input+0x25c>)
 801e3bc:	f8d3 9000 	ldr.w	r9, [r3]
 801e3c0:	f1b9 0f00 	cmp.w	r9, #0
 801e3c4:	d106      	bne.n	801e3d4 <ip4_input+0xb8>
 801e3c6:	e08b      	b.n	801e4e0 <ip4_input+0x1c4>
 801e3c8:	f8d9 9000 	ldr.w	r9, [r9]
 801e3cc:	f1b9 0f00 	cmp.w	r9, #0
 801e3d0:	f000 8086 	beq.w	801e4e0 <ip4_input+0x1c4>
          if (netif == inp) {
 801e3d4:	45c8      	cmp	r8, r9
 801e3d6:	d0f7      	beq.n	801e3c8 <ip4_input+0xac>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801e3d8:	f899 3035 	ldrb.w	r3, [r9, #53]	; 0x35
 801e3dc:	07db      	lsls	r3, r3, #31
 801e3de:	d5f3      	bpl.n	801e3c8 <ip4_input+0xac>
 801e3e0:	4648      	mov	r0, r9
 801e3e2:	f7ff ff4d 	bl	801e280 <ip4_input_accept.part.0>
          if (ip4_input_accept(netif)) {
 801e3e6:	2800      	cmp	r0, #0
 801e3e8:	d0ee      	beq.n	801e3c8 <ip4_input+0xac>
 801e3ea:	f8da 0010 	ldr.w	r0, [sl, #16]
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801e3ee:	2800      	cmp	r0, #0
 801e3f0:	d17e      	bne.n	801e4f0 <ip4_input+0x1d4>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801e3f2:	88fb      	ldrh	r3, [r7, #6]
 801e3f4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801e3f8:	b133      	cbz	r3, 801e408 <ip4_input+0xec>
    p = ip4_reass(p);
 801e3fa:	4630      	mov	r0, r6
 801e3fc:	f000 fb96 	bl	801eb2c <ip4_reass>
    if (p == NULL) {
 801e400:	4606      	mov	r6, r0
 801e402:	2800      	cmp	r0, #0
 801e404:	d0a3      	beq.n	801e34e <ip4_input+0x32>
    iphdr = (const struct ip_hdr *)p->payload;
 801e406:	6847      	ldr	r7, [r0, #4]
  ip_data.current_netif = netif;
 801e408:	f8ca 9000 	str.w	r9, [sl]
  raw_status = raw_input(p, inp);
 801e40c:	4641      	mov	r1, r8
  ip_data.current_input_netif = inp;
 801e40e:	f8ca 8004 	str.w	r8, [sl, #4]
  raw_status = raw_input(p, inp);
 801e412:	4630      	mov	r0, r6
  ip_data.current_ip4_header = iphdr;
 801e414:	f8ca 7008 	str.w	r7, [sl, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801e418:	783b      	ldrb	r3, [r7, #0]
 801e41a:	f003 030f 	and.w	r3, r3, #15
 801e41e:	009b      	lsls	r3, r3, #2
 801e420:	f8aa 300c 	strh.w	r3, [sl, #12]
  raw_status = raw_input(p, inp);
 801e424:	f7f8 fe34 	bl	8017090 <raw_input>
  if (raw_status != RAW_INPUT_EATEN)
 801e428:	2801      	cmp	r0, #1
  raw_status = raw_input(p, inp);
 801e42a:	4683      	mov	fp, r0
  if (raw_status != RAW_INPUT_EATEN)
 801e42c:	d031      	beq.n	801e492 <ip4_input+0x176>
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801e42e:	4629      	mov	r1, r5
 801e430:	4630      	mov	r0, r6
 801e432:	f7f8 fa2d 	bl	8016890 <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 801e436:	7a7b      	ldrb	r3, [r7, #9]
 801e438:	2b06      	cmp	r3, #6
 801e43a:	f000 808b 	beq.w	801e554 <ip4_input+0x238>
 801e43e:	2b11      	cmp	r3, #17
 801e440:	f000 8092 	beq.w	801e568 <ip4_input+0x24c>
 801e444:	2b01      	cmp	r3, #1
 801e446:	f000 808a 	beq.w	801e55e <ip4_input+0x242>
        if (raw_status == RAW_INPUT_DELIVERED) {
 801e44a:	f1bb 0f02 	cmp.w	fp, #2
 801e44e:	d01d      	beq.n	801e48c <ip4_input+0x170>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801e450:	4649      	mov	r1, r9
 801e452:	f8da 0014 	ldr.w	r0, [sl, #20]
 801e456:	f000 f953 	bl	801e700 <ip4_addr_isbroadcast_u32>
 801e45a:	b968      	cbnz	r0, 801e478 <ip4_input+0x15c>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801e45c:	f8da 3014 	ldr.w	r3, [sl, #20]
 801e460:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801e464:	2be0      	cmp	r3, #224	; 0xe0
 801e466:	d007      	beq.n	801e478 <ip4_input+0x15c>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801e468:	4629      	mov	r1, r5
 801e46a:	4630      	mov	r0, r6
 801e46c:	f7f8 fa44 	bl	80168f8 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801e470:	2102      	movs	r1, #2
 801e472:	4630      	mov	r0, r6
 801e474:	f7ff fef8 	bl	801e268 <icmp_dest_unreach>
          IP_STATS_INC(ip.proterr);
 801e478:	f8b4 2058 	ldrh.w	r2, [r4, #88]	; 0x58
          IP_STATS_INC(ip.drop);
 801e47c:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
          IP_STATS_INC(ip.proterr);
 801e480:	3201      	adds	r2, #1
          IP_STATS_INC(ip.drop);
 801e482:	3301      	adds	r3, #1
          IP_STATS_INC(ip.proterr);
 801e484:	f8a4 2058 	strh.w	r2, [r4, #88]	; 0x58
          IP_STATS_INC(ip.drop);
 801e488:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
        pbuf_free(p);
 801e48c:	4630      	mov	r0, r6
 801e48e:	f7f8 fa3b 	bl	8016908 <pbuf_free>
  ip_data.current_netif = NULL;
 801e492:	2300      	movs	r3, #0
  ip_data.current_input_netif = NULL;
 801e494:	e9ca 3300 	strd	r3, r3, [sl]
  ip_data.current_ip4_header = NULL;
 801e498:	f8ca 3008 	str.w	r3, [sl, #8]
  ip_data.current_ip_header_tot_len = 0;
 801e49c:	f8aa 300c 	strh.w	r3, [sl, #12]
  ip4_addr_set_any(ip4_current_dest_addr());
 801e4a0:	e9ca 3304 	strd	r3, r3, [sl, #16]
  return ERR_OK;
 801e4a4:	e753      	b.n	801e34e <ip4_input+0x32>
    pbuf_free(p);
 801e4a6:	4630      	mov	r0, r6
 801e4a8:	f7f8 fa2e 	bl	8016908 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 801e4ac:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
    IP_STATS_INC(ip.drop);
 801e4b0:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
}
 801e4b4:	2000      	movs	r0, #0
    IP_STATS_INC(ip.lenerr);
 801e4b6:	3201      	adds	r2, #1
    IP_STATS_INC(ip.drop);
 801e4b8:	3301      	adds	r3, #1
    IP_STATS_INC(ip.lenerr);
 801e4ba:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    IP_STATS_INC(ip.drop);
 801e4be:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
}
 801e4c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pbuf_realloc(p, iphdr_len);
 801e4c6:	4601      	mov	r1, r0
 801e4c8:	4630      	mov	r0, r6
 801e4ca:	f7f8 fb29 	bl	8016b20 <pbuf_realloc>
 801e4ce:	e750      	b.n	801e372 <ip4_input+0x56>
 801e4d0:	4640      	mov	r0, r8
 801e4d2:	f7ff fed5 	bl	801e280 <ip4_input_accept.part.0>
    if (ip4_input_accept(inp)) {
 801e4d6:	b3d0      	cbz	r0, 801e54e <ip4_input+0x232>
 801e4d8:	f8da 0010 	ldr.w	r0, [sl, #16]
 801e4dc:	46c1      	mov	r9, r8
 801e4de:	e786      	b.n	801e3ee <ip4_input+0xd2>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801e4e0:	7a7b      	ldrb	r3, [r7, #9]
 801e4e2:	2b11      	cmp	r3, #17
 801e4e4:	d023      	beq.n	801e52e <ip4_input+0x212>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801e4e6:	f8da 0010 	ldr.w	r0, [sl, #16]
 801e4ea:	b178      	cbz	r0, 801e50c <ip4_input+0x1f0>
 801e4ec:	f04f 0900 	mov.w	r9, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801e4f0:	4641      	mov	r1, r8
 801e4f2:	f000 f905 	bl	801e700 <ip4_addr_isbroadcast_u32>
 801e4f6:	bb08      	cbnz	r0, 801e53c <ip4_input+0x220>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801e4f8:	f8da 3010 	ldr.w	r3, [sl, #16]
 801e4fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801e500:	2be0      	cmp	r3, #224	; 0xe0
 801e502:	d01b      	beq.n	801e53c <ip4_input+0x220>
  if (netif == NULL) {
 801e504:	f1b9 0f00 	cmp.w	r9, #0
 801e508:	f47f af73 	bne.w	801e3f2 <ip4_input+0xd6>
      IP_STATS_INC(ip.drop);
 801e50c:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
    pbuf_free(p);
 801e510:	4630      	mov	r0, r6
      IP_STATS_INC(ip.drop);
 801e512:	3301      	adds	r3, #1
 801e514:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
    pbuf_free(p);
 801e518:	f7f8 f9f6 	bl	8016908 <pbuf_free>
    return ERR_OK;
 801e51c:	e717      	b.n	801e34e <ip4_input+0x32>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801e51e:	2a00      	cmp	r2, #0
 801e520:	d0de      	beq.n	801e4e0 <ip4_input+0x1c4>
 801e522:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801e526:	2b00      	cmp	r3, #0
 801e528:	d0da      	beq.n	801e4e0 <ip4_input+0x1c4>
 801e52a:	46c1      	mov	r9, r8
 801e52c:	e75f      	b.n	801e3ee <ip4_input+0xd2>
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801e52e:	197b      	adds	r3, r7, r5
 801e530:	885b      	ldrh	r3, [r3, #2]
 801e532:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801e536:	d1d6      	bne.n	801e4e6 <ip4_input+0x1ca>
 801e538:	46c1      	mov	r9, r8
 801e53a:	e75a      	b.n	801e3f2 <ip4_input+0xd6>
      pbuf_free(p);
 801e53c:	4630      	mov	r0, r6
 801e53e:	f7f8 f9e3 	bl	8016908 <pbuf_free>
      IP_STATS_INC(ip.drop);
 801e542:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 801e546:	3301      	adds	r3, #1
 801e548:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
      return ERR_OK;
 801e54c:	e6ff      	b.n	801e34e <ip4_input+0x32>
 801e54e:	f8da 3014 	ldr.w	r3, [sl, #20]
 801e552:	e72e      	b.n	801e3b2 <ip4_input+0x96>
        tcp_input(p, inp);
 801e554:	4641      	mov	r1, r8
 801e556:	4630      	mov	r0, r6
 801e558:	f7fa ff04 	bl	8019364 <tcp_input>
        break;
 801e55c:	e799      	b.n	801e492 <ip4_input+0x176>
        icmp_input(p, inp);
 801e55e:	4641      	mov	r1, r8
 801e560:	4630      	mov	r0, r6
 801e562:	f7ff fd8d 	bl	801e080 <icmp_input>
        break;
 801e566:	e794      	b.n	801e492 <ip4_input+0x176>
        udp_input(p, inp);
 801e568:	4641      	mov	r1, r8
 801e56a:	4630      	mov	r0, r6
 801e56c:	f7fd f98e 	bl	801b88c <udp_input>
        break;
 801e570:	e78f      	b.n	801e492 <ip4_input+0x176>
 801e572:	bf00      	nop
 801e574:	2003e1cc 	.word	0x2003e1cc
 801e578:	2003e1c0 	.word	0x2003e1c0
 801e57c:	2002ead4 	.word	0x2002ead4

0801e580 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801e580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e584:	461c      	mov	r4, r3
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801e586:	7b83      	ldrb	r3, [r0, #14]
{
 801e588:	b085      	sub	sp, #20
 801e58a:	4606      	mov	r6, r0
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801e58c:	2b01      	cmp	r3, #1
{
 801e58e:	468a      	mov	sl, r1
 801e590:	4617      	mov	r7, r2
 801e592:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
 801e596:	f89d b03c 	ldrb.w	fp, [sp, #60]	; 0x3c
 801e59a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801e59e:	d15f      	bne.n	801e660 <ip4_output_if_src+0xe0>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801e5a0:	2f00      	cmp	r7, #0
 801e5a2:	d066      	beq.n	801e672 <ip4_output_if_src+0xf2>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801e5a4:	2114      	movs	r1, #20
 801e5a6:	4630      	mov	r0, r6
 801e5a8:	f7f8 f96e 	bl	8016888 <pbuf_add_header>
 801e5ac:	2800      	cmp	r0, #0
 801e5ae:	d17d      	bne.n	801e6ac <ip4_output_if_src+0x12c>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801e5b0:	8973      	ldrh	r3, [r6, #10]
    iphdr = (struct ip_hdr *)p->payload;
 801e5b2:	6875      	ldr	r5, [r6, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801e5b4:	2b13      	cmp	r3, #19
 801e5b6:	d965      	bls.n	801e684 <ip4_output_if_src+0x104>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801e5b8:	722c      	strb	r4, [r5, #8]
    IPH_PROTO_SET(iphdr, proto);
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 801e5ba:	ea4b 2404 	orr.w	r4, fp, r4, lsl #8
    IPH_PROTO_SET(iphdr, proto);
 801e5be:	f885 b009 	strb.w	fp, [r5, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801e5c2:	f04f 0c45 	mov.w	ip, #69	; 0x45
    ip4_addr_copy(iphdr->dest, *dest);
 801e5c6:	683b      	ldr	r3, [r7, #0]
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 801e5c8:	1221      	asrs	r1, r4, #8
    IPH_TOS_SET(iphdr, tos);
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 801e5ca:	ea4f 2209 	mov.w	r2, r9, lsl #8
    IPH_TOS_SET(iphdr, tos);
 801e5ce:	f885 9001 	strb.w	r9, [r5, #1]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 801e5d2:	0c18      	lsrs	r0, r3, #16
    ip4_addr_copy(iphdr->dest, *dest);
 801e5d4:	612b      	str	r3, [r5, #16]
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 801e5d6:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 801e5da:	ea42 020c 	orr.w	r2, r2, ip
 801e5de:	fa10 f383 	uxtah	r3, r0, r3
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801e5e2:	f885 c000 	strb.w	ip, [r5]
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 801e5e6:	b2a1      	uxth	r1, r4
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801e5e8:	8930      	ldrh	r0, [r6, #8]
 801e5ea:	eb02 0903 	add.w	r9, r2, r3
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801e5ee:	4c34      	ldr	r4, [pc, #208]	; (801e6c0 <ip4_output_if_src+0x140>)
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 801e5f0:	9101      	str	r1, [sp, #4]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801e5f2:	f7f6 fb1b 	bl	8014c2c <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 801e5f6:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801e5f8:	4683      	mov	fp, r0
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801e5fa:	8820      	ldrh	r0, [r4, #0]
    IPH_OFFSET_SET(iphdr, 0);
 801e5fc:	71ab      	strb	r3, [r5, #6]
 801e5fe:	71eb      	strb	r3, [r5, #7]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801e600:	f8a5 b002 	strh.w	fp, [r5, #2]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801e604:	f7f6 fb12 	bl	8014c2c <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801e608:	8823      	ldrh	r3, [r4, #0]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801e60a:	80a8      	strh	r0, [r5, #4]
    ++ip_id;
 801e60c:	3301      	adds	r3, #1

    if (src == NULL) {
 801e60e:	9901      	ldr	r1, [sp, #4]
    ++ip_id;
 801e610:	8023      	strh	r3, [r4, #0]
    if (src == NULL) {
 801e612:	f1ba 0f00 	cmp.w	sl, #0
 801e616:	d03d      	beq.n	801e694 <ip4_output_if_src+0x114>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801e618:	f8da 3000 	ldr.w	r3, [sl]
 801e61c:	60eb      	str	r3, [r5, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 801e61e:	eb01 0409 	add.w	r4, r1, r9
 801e622:	445c      	add	r4, fp
 801e624:	4420      	add	r0, r4
 801e626:	fa10 f083 	uxtah	r0, r0, r3
 801e62a:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 801e62e:	b283      	uxth	r3, r0
 801e630:	eb03 4010 	add.w	r0, r3, r0, lsr #16
    chk_sum = (chk_sum >> 16) + chk_sum;
 801e634:	eb00 4010 	add.w	r0, r0, r0, lsr #16
    chk_sum = ~chk_sum;
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 801e638:	43c0      	mvns	r0, r0
 801e63a:	8168      	strh	r0, [r5, #10]
    iphdr = (struct ip_hdr *)p->payload;
    ip4_addr_copy(dest_addr, iphdr->dest);
    dest = &dest_addr;
  }

  IP_STATS_INC(ip.xmit);
 801e63c:	4a21      	ldr	r2, [pc, #132]	; (801e6c4 <ip4_output_if_src+0x144>)
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801e63e:	f8b8 102c 	ldrh.w	r1, [r8, #44]	; 0x2c
  IP_STATS_INC(ip.xmit);
 801e642:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
 801e646:	3301      	adds	r3, #1
 801e648:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
    return ip4_frag(p, netif, dest);
 801e64c:	463a      	mov	r2, r7
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801e64e:	bb29      	cbnz	r1, 801e69c <ip4_output_if_src+0x11c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801e650:	4631      	mov	r1, r6
 801e652:	f8d8 3014 	ldr.w	r3, [r8, #20]
 801e656:	4640      	mov	r0, r8
 801e658:	4798      	blx	r3
}
 801e65a:	b005      	add	sp, #20
 801e65c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801e660:	4b19      	ldr	r3, [pc, #100]	; (801e6c8 <ip4_output_if_src+0x148>)
 801e662:	f44f 7255 	mov.w	r2, #852	; 0x354
 801e666:	4919      	ldr	r1, [pc, #100]	; (801e6cc <ip4_output_if_src+0x14c>)
 801e668:	4819      	ldr	r0, [pc, #100]	; (801e6d0 <ip4_output_if_src+0x150>)
 801e66a:	f002 faa5 	bl	8020bb8 <iprintf>
  if (dest != LWIP_IP_HDRINCL) {
 801e66e:	2f00      	cmp	r7, #0
 801e670:	d198      	bne.n	801e5a4 <ip4_output_if_src+0x24>
    if (p->len < IP_HLEN) {
 801e672:	8973      	ldrh	r3, [r6, #10]
 801e674:	2b13      	cmp	r3, #19
 801e676:	d919      	bls.n	801e6ac <ip4_output_if_src+0x12c>
    ip4_addr_copy(dest_addr, iphdr->dest);
 801e678:	6873      	ldr	r3, [r6, #4]
 801e67a:	af04      	add	r7, sp, #16
 801e67c:	691b      	ldr	r3, [r3, #16]
 801e67e:	f847 3d04 	str.w	r3, [r7, #-4]!
 801e682:	e7db      	b.n	801e63c <ip4_output_if_src+0xbc>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801e684:	4b10      	ldr	r3, [pc, #64]	; (801e6c8 <ip4_output_if_src+0x148>)
 801e686:	f240 3289 	movw	r2, #905	; 0x389
 801e68a:	4912      	ldr	r1, [pc, #72]	; (801e6d4 <ip4_output_if_src+0x154>)
 801e68c:	4810      	ldr	r0, [pc, #64]	; (801e6d0 <ip4_output_if_src+0x150>)
 801e68e:	f002 fa93 	bl	8020bb8 <iprintf>
 801e692:	e791      	b.n	801e5b8 <ip4_output_if_src+0x38>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801e694:	4b10      	ldr	r3, [pc, #64]	; (801e6d8 <ip4_output_if_src+0x158>)
 801e696:	681b      	ldr	r3, [r3, #0]
 801e698:	60eb      	str	r3, [r5, #12]
 801e69a:	e7c0      	b.n	801e61e <ip4_output_if_src+0x9e>
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801e69c:	8933      	ldrh	r3, [r6, #8]
 801e69e:	428b      	cmp	r3, r1
 801e6a0:	d9d6      	bls.n	801e650 <ip4_output_if_src+0xd0>
    return ip4_frag(p, netif, dest);
 801e6a2:	4641      	mov	r1, r8
 801e6a4:	4630      	mov	r0, r6
 801e6a6:	f000 fc91 	bl	801efcc <ip4_frag>
 801e6aa:	e7d6      	b.n	801e65a <ip4_output_if_src+0xda>
      IP_STATS_INC(ip.err);
 801e6ac:	4a05      	ldr	r2, [pc, #20]	; (801e6c4 <ip4_output_if_src+0x144>)
      return ERR_BUF;
 801e6ae:	f06f 0001 	mvn.w	r0, #1
      IP_STATS_INC(ip.err);
 801e6b2:	f8b2 305c 	ldrh.w	r3, [r2, #92]	; 0x5c
 801e6b6:	3301      	adds	r3, #1
 801e6b8:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
      return ERR_BUF;
 801e6bc:	e7cd      	b.n	801e65a <ip4_output_if_src+0xda>
 801e6be:	bf00      	nop
 801e6c0:	2002a74e 	.word	0x2002a74e
 801e6c4:	2003e1cc 	.word	0x2003e1cc
 801e6c8:	0803f7f0 	.word	0x0803f7f0
 801e6cc:	0803f824 	.word	0x0803f824
 801e6d0:	08026bb8 	.word	0x08026bb8
 801e6d4:	0803f830 	.word	0x0803f830
 801e6d8:	0803f8a8 	.word	0x0803f8a8

0801e6dc <ip4_output_if>:
{
 801e6dc:	b4f0      	push	{r4, r5, r6, r7}
 801e6de:	9c06      	ldr	r4, [sp, #24]
 801e6e0:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801e6e4:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801e6e8:	b11a      	cbz	r2, 801e6f2 <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 801e6ea:	b109      	cbz	r1, 801e6f0 <ip4_output_if+0x14>
 801e6ec:	680f      	ldr	r7, [r1, #0]
 801e6ee:	b907      	cbnz	r7, 801e6f2 <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 801e6f0:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801e6f2:	9504      	str	r5, [sp, #16]
 801e6f4:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
 801e6f8:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801e6fa:	f7ff bf41 	b.w	801e580 <ip4_output_if_src>
 801e6fe:	bf00      	nop

0801e700 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801e700:	1e43      	subs	r3, r0, #1
 801e702:	3303      	adds	r3, #3
 801e704:	d814      	bhi.n	801e730 <ip4_addr_isbroadcast_u32+0x30>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801e706:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
 801e70a:	f013 0302 	ands.w	r3, r3, #2
 801e70e:	d00d      	beq.n	801e72c <ip4_addr_isbroadcast_u32+0x2c>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801e710:	684b      	ldr	r3, [r1, #4]
 801e712:	4283      	cmp	r3, r0
 801e714:	d00a      	beq.n	801e72c <ip4_addr_isbroadcast_u32+0x2c>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801e716:	688a      	ldr	r2, [r1, #8]
 801e718:	4043      	eors	r3, r0
 801e71a:	4213      	tst	r3, r2
 801e71c:	d106      	bne.n	801e72c <ip4_addr_isbroadcast_u32+0x2c>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801e71e:	43d2      	mvns	r2, r2
 801e720:	ea32 0300 	bics.w	r3, r2, r0
    return 1;
 801e724:	bf0c      	ite	eq
 801e726:	2001      	moveq	r0, #1
 801e728:	2000      	movne	r0, #0
 801e72a:	4770      	bx	lr
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 801e72c:	2000      	movs	r0, #0
  }
}
 801e72e:	4770      	bx	lr
    return 1;
 801e730:	2001      	movs	r0, #1
 801e732:	4770      	bx	lr

0801e734 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 801e734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e738:	b087      	sub	sp, #28
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;

  c = *cp;
 801e73a:	f890 b000 	ldrb.w	fp, [r0]
{
 801e73e:	4604      	mov	r4, r0
 801e740:	9101      	str	r1, [sp, #4]
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 801e742:	f001 fa55 	bl	801fbf0 <__locale_ctype_ptr>
 801e746:	4458      	add	r0, fp
  u32_t *pp = parts;
 801e748:	f10d 0a08 	add.w	sl, sp, #8
    if (!lwip_isdigit(c)) {
 801e74c:	7842      	ldrb	r2, [r0, #1]
 801e74e:	0751      	lsls	r1, r2, #29
 801e750:	d542      	bpl.n	801e7d8 <ip4addr_aton+0xa4>
      return 0;
    }
    val = 0;
    base = 10;
    if (c == '0') {
 801e752:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 801e756:	d044      	beq.n	801e7e2 <ip4addr_aton+0xae>
    base = 10;
 801e758:	f04f 080a 	mov.w	r8, #10
 801e75c:	4625      	mov	r5, r4
      c = *++cp;
      if (c == 'x' || c == 'X') {
        base = 16;
        c = *++cp;
      } else {
        base = 8;
 801e75e:	2400      	movs	r4, #0
 801e760:	e004      	b.n	801e76c <ip4addr_aton+0x38>
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
        val = (val * base) + (u32_t)(c - '0');
 801e762:	f1a1 0430 	sub.w	r4, r1, #48	; 0x30
        c = *++cp;
 801e766:	f895 b001 	ldrb.w	fp, [r5, #1]
 801e76a:	3501      	adds	r5, #1
      if (lwip_isdigit(c)) {
 801e76c:	f10b 0601 	add.w	r6, fp, #1
 801e770:	f001 fa3e 	bl	801fbf0 <__locale_ctype_ptr>
      } else if (base == 16 && lwip_isxdigit(c)) {
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 801e774:	f10b 070a 	add.w	r7, fp, #10
        val = (val * base) + (u32_t)(c - '0');
 801e778:	fb04 b108 	mla	r1, r4, r8, fp
      if (lwip_isdigit(c)) {
 801e77c:	5d82      	ldrb	r2, [r0, r6]
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 801e77e:	ea4f 1904 	mov.w	r9, r4, lsl #4
      if (lwip_isdigit(c)) {
 801e782:	0752      	lsls	r2, r2, #29
 801e784:	d4ed      	bmi.n	801e762 <ip4addr_aton+0x2e>
      } else if (base == 16 && lwip_isxdigit(c)) {
 801e786:	f1b8 0f10 	cmp.w	r8, #16
 801e78a:	d114      	bne.n	801e7b6 <ip4addr_aton+0x82>
 801e78c:	f001 fa30 	bl	801fbf0 <__locale_ctype_ptr>
 801e790:	5d82      	ldrb	r2, [r0, r6]
 801e792:	f012 0f44 	tst.w	r2, #68	; 0x44
 801e796:	d00e      	beq.n	801e7b6 <ip4addr_aton+0x82>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 801e798:	f001 fa2a 	bl	801fbf0 <__locale_ctype_ptr>
 801e79c:	5d82      	ldrb	r2, [r0, r6]
        c = *++cp;
 801e79e:	f895 b001 	ldrb.w	fp, [r5, #1]
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 801e7a2:	f002 0203 	and.w	r2, r2, #3
 801e7a6:	2a02      	cmp	r2, #2
 801e7a8:	bf0c      	ite	eq
 801e7aa:	2461      	moveq	r4, #97	; 0x61
 801e7ac:	2441      	movne	r4, #65	; 0x41
 801e7ae:	1b3c      	subs	r4, r7, r4
 801e7b0:	ea44 0409 	orr.w	r4, r4, r9
 801e7b4:	e7d9      	b.n	801e76a <ip4addr_aton+0x36>
      } else {
        break;
      }
    }
    if (c == '.') {
 801e7b6:	f1bb 0f2e 	cmp.w	fp, #46	; 0x2e
 801e7ba:	d122      	bne.n	801e802 <ip4addr_aton+0xce>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 801e7bc:	ab05      	add	r3, sp, #20
 801e7be:	459a      	cmp	sl, r3
 801e7c0:	d00a      	beq.n	801e7d8 <ip4addr_aton+0xa4>
        return 0;
      }
      *pp++ = val;
      c = *++cp;
 801e7c2:	f895 b001 	ldrb.w	fp, [r5, #1]
      *pp++ = val;
 801e7c6:	f84a 4b04 	str.w	r4, [sl], #4
    if (!lwip_isdigit(c)) {
 801e7ca:	f001 fa11 	bl	801fbf0 <__locale_ctype_ptr>
 801e7ce:	4458      	add	r0, fp
      c = *++cp;
 801e7d0:	1c6c      	adds	r4, r5, #1
    if (!lwip_isdigit(c)) {
 801e7d2:	7842      	ldrb	r2, [r0, #1]
 801e7d4:	0751      	lsls	r1, r2, #29
 801e7d6:	d4bc      	bmi.n	801e752 <ip4addr_aton+0x1e>
      return 0;
 801e7d8:	2300      	movs	r3, #0
  }
  if (addr) {
    ip4_addr_set_u32(addr, lwip_htonl(val));
  }
  return 1;
}
 801e7da:	4618      	mov	r0, r3
 801e7dc:	b007      	add	sp, #28
 801e7de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      c = *++cp;
 801e7e2:	f894 b001 	ldrb.w	fp, [r4, #1]
      if (c == 'x' || c == 'X') {
 801e7e6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801e7ea:	2a58      	cmp	r2, #88	; 0x58
 801e7ec:	d003      	beq.n	801e7f6 <ip4addr_aton+0xc2>
      c = *++cp;
 801e7ee:	3401      	adds	r4, #1
        base = 8;
 801e7f0:	f04f 0808 	mov.w	r8, #8
 801e7f4:	e7b2      	b.n	801e75c <ip4addr_aton+0x28>
        c = *++cp;
 801e7f6:	f894 b002 	ldrb.w	fp, [r4, #2]
        base = 16;
 801e7fa:	f04f 0810 	mov.w	r8, #16
        c = *++cp;
 801e7fe:	3402      	adds	r4, #2
 801e800:	e7ac      	b.n	801e75c <ip4addr_aton+0x28>
  if (c != '\0' && !lwip_isspace(c)) {
 801e802:	f1bb 0f00 	cmp.w	fp, #0
 801e806:	d12c      	bne.n	801e862 <ip4addr_aton+0x12e>
  switch (pp - parts + 1) {
 801e808:	ab02      	add	r3, sp, #8
 801e80a:	ebaa 0303 	sub.w	r3, sl, r3
 801e80e:	109b      	asrs	r3, r3, #2
 801e810:	3301      	adds	r3, #1
 801e812:	2b04      	cmp	r3, #4
 801e814:	d844      	bhi.n	801e8a0 <ip4addr_aton+0x16c>
 801e816:	a201      	add	r2, pc, #4	; (adr r2, 801e81c <ip4addr_aton+0xe8>)
 801e818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e81c:	0801e7db 	.word	0x0801e7db
 801e820:	0801e853 	.word	0x0801e853
 801e824:	0801e88f 	.word	0x0801e88f
 801e828:	0801e873 	.word	0x0801e873
 801e82c:	0801e831 	.word	0x0801e831
      if (val > 0xff) {
 801e830:	2cff      	cmp	r4, #255	; 0xff
 801e832:	d8d1      	bhi.n	801e7d8 <ip4addr_aton+0xa4>
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 801e834:	9902      	ldr	r1, [sp, #8]
 801e836:	29ff      	cmp	r1, #255	; 0xff
 801e838:	d8ce      	bhi.n	801e7d8 <ip4addr_aton+0xa4>
 801e83a:	9b03      	ldr	r3, [sp, #12]
 801e83c:	2bff      	cmp	r3, #255	; 0xff
 801e83e:	d8cb      	bhi.n	801e7d8 <ip4addr_aton+0xa4>
 801e840:	9a04      	ldr	r2, [sp, #16]
 801e842:	2aff      	cmp	r2, #255	; 0xff
 801e844:	d8c8      	bhi.n	801e7d8 <ip4addr_aton+0xa4>
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 801e846:	041b      	lsls	r3, r3, #16
 801e848:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 801e84c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801e850:	431c      	orrs	r4, r3
  if (addr) {
 801e852:	9d01      	ldr	r5, [sp, #4]
 801e854:	b15d      	cbz	r5, 801e86e <ip4addr_aton+0x13a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801e856:	4620      	mov	r0, r4
 801e858:	f7f6 f9ec 	bl	8014c34 <lwip_htonl>
  return 1;
 801e85c:	2301      	movs	r3, #1
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801e85e:	6028      	str	r0, [r5, #0]
 801e860:	e7bb      	b.n	801e7da <ip4addr_aton+0xa6>
  if (c != '\0' && !lwip_isspace(c)) {
 801e862:	f001 f9c5 	bl	801fbf0 <__locale_ctype_ptr>
 801e866:	5d83      	ldrb	r3, [r0, r6]
 801e868:	071b      	lsls	r3, r3, #28
 801e86a:	d4cd      	bmi.n	801e808 <ip4addr_aton+0xd4>
 801e86c:	e7b4      	b.n	801e7d8 <ip4addr_aton+0xa4>
  return 1;
 801e86e:	2301      	movs	r3, #1
 801e870:	e7b3      	b.n	801e7da <ip4addr_aton+0xa6>
      if (val > 0xffff) {
 801e872:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 801e876:	d2af      	bcs.n	801e7d8 <ip4addr_aton+0xa4>
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 801e878:	9a02      	ldr	r2, [sp, #8]
 801e87a:	2aff      	cmp	r2, #255	; 0xff
 801e87c:	d8ac      	bhi.n	801e7d8 <ip4addr_aton+0xa4>
 801e87e:	9b03      	ldr	r3, [sp, #12]
 801e880:	2bff      	cmp	r3, #255	; 0xff
 801e882:	d8a9      	bhi.n	801e7d8 <ip4addr_aton+0xa4>
      val |= (parts[0] << 24) | (parts[1] << 16);
 801e884:	041b      	lsls	r3, r3, #16
 801e886:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801e88a:	431c      	orrs	r4, r3
      break;
 801e88c:	e7e1      	b.n	801e852 <ip4addr_aton+0x11e>
      if (val > 0xffffffUL) {
 801e88e:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
 801e892:	d2a1      	bcs.n	801e7d8 <ip4addr_aton+0xa4>
      if (parts[0] > 0xff) {
 801e894:	9b02      	ldr	r3, [sp, #8]
 801e896:	2bff      	cmp	r3, #255	; 0xff
 801e898:	d89e      	bhi.n	801e7d8 <ip4addr_aton+0xa4>
      val |= parts[0] << 24;
 801e89a:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
      break;
 801e89e:	e7d8      	b.n	801e852 <ip4addr_aton+0x11e>
      LWIP_ASSERT("unhandled", 0);
 801e8a0:	4b03      	ldr	r3, [pc, #12]	; (801e8b0 <ip4addr_aton+0x17c>)
 801e8a2:	22f9      	movs	r2, #249	; 0xf9
 801e8a4:	4903      	ldr	r1, [pc, #12]	; (801e8b4 <ip4addr_aton+0x180>)
 801e8a6:	4804      	ldr	r0, [pc, #16]	; (801e8b8 <ip4addr_aton+0x184>)
 801e8a8:	f002 f986 	bl	8020bb8 <iprintf>
      break;
 801e8ac:	e7d1      	b.n	801e852 <ip4addr_aton+0x11e>
 801e8ae:	bf00      	nop
 801e8b0:	0803f860 	.word	0x0803f860
 801e8b4:	0803f89c 	.word	0x0803f89c
 801e8b8:	08026bb8 	.word	0x08026bb8

0801e8bc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801e8bc:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801e8be:	4b0f      	ldr	r3, [pc, #60]	; (801e8fc <ip_reass_dequeue_datagram+0x40>)
{
 801e8c0:	4604      	mov	r4, r0
  if (reassdatagrams == ipr) {
 801e8c2:	681a      	ldr	r2, [r3, #0]
 801e8c4:	4282      	cmp	r2, r0
 801e8c6:	d009      	beq.n	801e8dc <ip_reass_dequeue_datagram+0x20>
 801e8c8:	460d      	mov	r5, r1
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801e8ca:	b179      	cbz	r1, 801e8ec <ip_reass_dequeue_datagram+0x30>
    prev->next = ipr->next;
 801e8cc:	6823      	ldr	r3, [r4, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801e8ce:	4621      	mov	r1, r4
 801e8d0:	2005      	movs	r0, #5
    prev->next = ipr->next;
 801e8d2:	602b      	str	r3, [r5, #0]
}
 801e8d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 801e8d8:	f7f7 bd3c 	b.w	8016354 <memp_free>
    reassdatagrams = ipr->next;
 801e8dc:	6802      	ldr	r2, [r0, #0]
  memp_free(MEMP_REASSDATA, ipr);
 801e8de:	4621      	mov	r1, r4
 801e8e0:	2005      	movs	r0, #5
    reassdatagrams = ipr->next;
 801e8e2:	601a      	str	r2, [r3, #0]
}
 801e8e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 801e8e8:	f7f7 bd34 	b.w	8016354 <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801e8ec:	4b04      	ldr	r3, [pc, #16]	; (801e900 <ip_reass_dequeue_datagram+0x44>)
 801e8ee:	f240 1245 	movw	r2, #325	; 0x145
 801e8f2:	4904      	ldr	r1, [pc, #16]	; (801e904 <ip_reass_dequeue_datagram+0x48>)
 801e8f4:	4804      	ldr	r0, [pc, #16]	; (801e908 <ip_reass_dequeue_datagram+0x4c>)
 801e8f6:	f002 f95f 	bl	8020bb8 <iprintf>
 801e8fa:	e7e7      	b.n	801e8cc <ip_reass_dequeue_datagram+0x10>
 801e8fc:	2002a754 	.word	0x2002a754
 801e900:	0803f98c 	.word	0x0803f98c
 801e904:	0803f9c8 	.word	0x0803f9c8
 801e908:	08026bb8 	.word	0x08026bb8

0801e90c <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 801e90c:	4281      	cmp	r1, r0
{
 801e90e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e912:	4606      	mov	r6, r0
 801e914:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 801e916:	d06b      	beq.n	801e9f0 <ip_reass_free_complete_datagram+0xe4>
  if (prev != NULL) {
 801e918:	b147      	cbz	r7, 801e92c <ip_reass_free_complete_datagram+0x20>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801e91a:	683b      	ldr	r3, [r7, #0]
 801e91c:	42b3      	cmp	r3, r6
 801e91e:	d005      	beq.n	801e92c <ip_reass_free_complete_datagram+0x20>
 801e920:	4b37      	ldr	r3, [pc, #220]	; (801ea00 <ip_reass_free_complete_datagram+0xf4>)
 801e922:	22ad      	movs	r2, #173	; 0xad
 801e924:	4937      	ldr	r1, [pc, #220]	; (801ea04 <ip_reass_free_complete_datagram+0xf8>)
 801e926:	4838      	ldr	r0, [pc, #224]	; (801ea08 <ip_reass_free_complete_datagram+0xfc>)
 801e928:	f002 f946 	bl	8020bb8 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801e92c:	6874      	ldr	r4, [r6, #4]
 801e92e:	6863      	ldr	r3, [r4, #4]
  if (iprh->start == 0) {
 801e930:	889a      	ldrh	r2, [r3, #4]
 801e932:	2a00      	cmp	r2, #0
 801e934:	d039      	beq.n	801e9aa <ip_reass_free_complete_datagram+0x9e>
  u16_t pbufs_freed = 0;
 801e936:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801e93a:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801ea00 <ip_reass_free_complete_datagram+0xf4>
 801e93e:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 801ea18 <ip_reass_free_complete_datagram+0x10c>
 801e942:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 801ea08 <ip_reass_free_complete_datagram+0xfc>
 801e946:	e004      	b.n	801e952 <ip_reass_free_complete_datagram+0x46>
    pbuf_free(pcur);
 801e948:	4620      	mov	r0, r4
  while (p != NULL) {
 801e94a:	462c      	mov	r4, r5
    pbuf_free(pcur);
 801e94c:	f7f7 ffdc 	bl	8016908 <pbuf_free>
  while (p != NULL) {
 801e950:	b1b5      	cbz	r5, 801e980 <ip_reass_free_complete_datagram+0x74>
    iprh = (struct ip_reass_helper *)p->payload;
 801e952:	6863      	ldr	r3, [r4, #4]
    clen = pbuf_clen(pcur);
 801e954:	4620      	mov	r0, r4
    p = iprh->next_pbuf;
 801e956:	681d      	ldr	r5, [r3, #0]
    clen = pbuf_clen(pcur);
 801e958:	f7f8 f93e 	bl	8016bd8 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801e95c:	4483      	add	fp, r0
 801e95e:	f5bb 3f80 	cmp.w	fp, #65536	; 0x10000
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801e962:	fa1f fb8b 	uxth.w	fp, fp
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801e966:	dbef      	blt.n	801e948 <ip_reass_free_complete_datagram+0x3c>
 801e968:	4653      	mov	r3, sl
 801e96a:	22cc      	movs	r2, #204	; 0xcc
 801e96c:	4649      	mov	r1, r9
 801e96e:	4640      	mov	r0, r8
 801e970:	f002 f922 	bl	8020bb8 <iprintf>
    pbuf_free(pcur);
 801e974:	4620      	mov	r0, r4
  while (p != NULL) {
 801e976:	462c      	mov	r4, r5
    pbuf_free(pcur);
 801e978:	f7f7 ffc6 	bl	8016908 <pbuf_free>
  while (p != NULL) {
 801e97c:	2d00      	cmp	r5, #0
 801e97e:	d1e8      	bne.n	801e952 <ip_reass_free_complete_datagram+0x46>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801e980:	4c22      	ldr	r4, [pc, #136]	; (801ea0c <ip_reass_free_complete_datagram+0x100>)
  ip_reass_dequeue_datagram(ipr, prev);
 801e982:	4639      	mov	r1, r7
 801e984:	4630      	mov	r0, r6
 801e986:	f7ff ff99 	bl	801e8bc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801e98a:	8823      	ldrh	r3, [r4, #0]
 801e98c:	455b      	cmp	r3, fp
 801e98e:	d206      	bcs.n	801e99e <ip_reass_free_complete_datagram+0x92>
 801e990:	4b1b      	ldr	r3, [pc, #108]	; (801ea00 <ip_reass_free_complete_datagram+0xf4>)
 801e992:	22d2      	movs	r2, #210	; 0xd2
 801e994:	491e      	ldr	r1, [pc, #120]	; (801ea10 <ip_reass_free_complete_datagram+0x104>)
 801e996:	481c      	ldr	r0, [pc, #112]	; (801ea08 <ip_reass_free_complete_datagram+0xfc>)
 801e998:	f002 f90e 	bl	8020bb8 <iprintf>
 801e99c:	8823      	ldrh	r3, [r4, #0]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801e99e:	eba3 030b 	sub.w	r3, r3, fp
}
 801e9a2:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801e9a4:	8023      	strh	r3, [r4, #0]
}
 801e9a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801e9aa:	4632      	mov	r2, r6
    ipr->p = iprh->next_pbuf;
 801e9ac:	6818      	ldr	r0, [r3, #0]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801e9ae:	2101      	movs	r1, #1
    ipr->p = iprh->next_pbuf;
 801e9b0:	6070      	str	r0, [r6, #4]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801e9b2:	4620      	mov	r0, r4
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801e9b4:	f852 5f08 	ldr.w	r5, [r2, #8]!
 801e9b8:	f8d2 8004 	ldr.w	r8, [r2, #4]
 801e9bc:	f8d2 e008 	ldr.w	lr, [r2, #8]
 801e9c0:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 801e9c4:	601d      	str	r5, [r3, #0]
 801e9c6:	f8c3 8004 	str.w	r8, [r3, #4]
 801e9ca:	f8c3 e008 	str.w	lr, [r3, #8]
 801e9ce:	f8c3 c00c 	str.w	ip, [r3, #12]
 801e9d2:	6915      	ldr	r5, [r2, #16]
 801e9d4:	611d      	str	r5, [r3, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801e9d6:	f7ff fc4d 	bl	801e274 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801e9da:	4620      	mov	r0, r4
 801e9dc:	f7f8 f8fc 	bl	8016bd8 <pbuf_clen>
 801e9e0:	4683      	mov	fp, r0
    pbuf_free(p);
 801e9e2:	4620      	mov	r0, r4
 801e9e4:	f7f7 ff90 	bl	8016908 <pbuf_free>
 801e9e8:	6874      	ldr	r4, [r6, #4]
  while (p != NULL) {
 801e9ea:	2c00      	cmp	r4, #0
 801e9ec:	d1a5      	bne.n	801e93a <ip_reass_free_complete_datagram+0x2e>
 801e9ee:	e7c7      	b.n	801e980 <ip_reass_free_complete_datagram+0x74>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 801e9f0:	4b03      	ldr	r3, [pc, #12]	; (801ea00 <ip_reass_free_complete_datagram+0xf4>)
 801e9f2:	22ab      	movs	r2, #171	; 0xab
 801e9f4:	4907      	ldr	r1, [pc, #28]	; (801ea14 <ip_reass_free_complete_datagram+0x108>)
 801e9f6:	4804      	ldr	r0, [pc, #16]	; (801ea08 <ip_reass_free_complete_datagram+0xfc>)
 801e9f8:	f002 f8de 	bl	8020bb8 <iprintf>
 801e9fc:	e78c      	b.n	801e918 <ip_reass_free_complete_datagram+0xc>
 801e9fe:	bf00      	nop
 801ea00:	0803f98c 	.word	0x0803f98c
 801ea04:	0803f9f0 	.word	0x0803f9f0
 801ea08:	08026bb8 	.word	0x08026bb8
 801ea0c:	2002a750 	.word	0x2002a750
 801ea10:	0803fa24 	.word	0x0803fa24
 801ea14:	0803f9e4 	.word	0x0803f9e4
 801ea18:	0803fa04 	.word	0x0803fa04

0801ea1c <ip_reass_remove_oldest_datagram>:
{
 801ea1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ea20:	4605      	mov	r5, r0
 801ea22:	460e      	mov	r6, r1
  int pbufs_freed = 0, pbufs_freed_current;
 801ea24:	2700      	movs	r7, #0
 801ea26:	f8df 8064 	ldr.w	r8, [pc, #100]	; 801ea8c <ip_reass_remove_oldest_datagram+0x70>
    r = reassdatagrams;
 801ea2a:	f8d8 3000 	ldr.w	r3, [r8]
    while (r != NULL) {
 801ea2e:	b1f3      	cbz	r3, 801ea6e <ip_reass_remove_oldest_datagram+0x52>
    other_datagrams = 0;
 801ea30:	2400      	movs	r4, #0
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801ea32:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    oldest_prev = NULL;
 801ea36:	4621      	mov	r1, r4
    prev = NULL;
 801ea38:	46a4      	mov	ip, r4
    oldest = NULL;
 801ea3a:	4620      	mov	r0, r4
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801ea3c:	695a      	ldr	r2, [r3, #20]
 801ea3e:	4572      	cmp	r2, lr
 801ea40:	d018      	beq.n	801ea74 <ip_reass_remove_oldest_datagram+0x58>
        other_datagrams++;
 801ea42:	3401      	adds	r4, #1
        if (oldest == NULL) {
 801ea44:	b120      	cbz	r0, 801ea50 <ip_reass_remove_oldest_datagram+0x34>
        } else if (r->timer <= oldest->timer) {
 801ea46:	f893 901f 	ldrb.w	r9, [r3, #31]
 801ea4a:	7fc2      	ldrb	r2, [r0, #31]
 801ea4c:	4591      	cmp	r9, r2
 801ea4e:	d801      	bhi.n	801ea54 <ip_reass_remove_oldest_datagram+0x38>
 801ea50:	4661      	mov	r1, ip
 801ea52:	4618      	mov	r0, r3
      if (r->next != NULL) {
 801ea54:	681a      	ldr	r2, [r3, #0]
 801ea56:	469c      	mov	ip, r3
 801ea58:	4613      	mov	r3, r2
 801ea5a:	2a00      	cmp	r2, #0
 801ea5c:	d1ee      	bne.n	801ea3c <ip_reass_remove_oldest_datagram+0x20>
    if (oldest != NULL) {
 801ea5e:	b110      	cbz	r0, 801ea66 <ip_reass_remove_oldest_datagram+0x4a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801ea60:	f7ff ff54 	bl	801e90c <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 801ea64:	4407      	add	r7, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801ea66:	42b7      	cmp	r7, r6
 801ea68:	da01      	bge.n	801ea6e <ip_reass_remove_oldest_datagram+0x52>
 801ea6a:	2c01      	cmp	r4, #1
 801ea6c:	dcdd      	bgt.n	801ea2a <ip_reass_remove_oldest_datagram+0xe>
}
 801ea6e:	4638      	mov	r0, r7
 801ea70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801ea74:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801ea78:	699a      	ldr	r2, [r3, #24]
 801ea7a:	454a      	cmp	r2, r9
 801ea7c:	d1e1      	bne.n	801ea42 <ip_reass_remove_oldest_datagram+0x26>
 801ea7e:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 801ea82:	88aa      	ldrh	r2, [r5, #4]
 801ea84:	4591      	cmp	r9, r2
 801ea86:	d1dc      	bne.n	801ea42 <ip_reass_remove_oldest_datagram+0x26>
 801ea88:	e7e4      	b.n	801ea54 <ip_reass_remove_oldest_datagram+0x38>
 801ea8a:	bf00      	nop
 801ea8c:	2002a754 	.word	0x2002a754

0801ea90 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801ea90:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 801ea92:	4604      	mov	r4, r0
 801ea94:	b128      	cbz	r0, 801eaa2 <ip_frag_free_pbuf_custom_ref+0x12>
  memp_free(MEMP_FRAG_PBUF, p);
 801ea96:	4621      	mov	r1, r4
 801ea98:	2006      	movs	r0, #6
}
 801ea9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 801ea9e:	f7f7 bc59 	b.w	8016354 <memp_free>
  LWIP_ASSERT("p != NULL", p != NULL);
 801eaa2:	4906      	ldr	r1, [pc, #24]	; (801eabc <ip_frag_free_pbuf_custom_ref+0x2c>)
 801eaa4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801eaa8:	4b05      	ldr	r3, [pc, #20]	; (801eac0 <ip_frag_free_pbuf_custom_ref+0x30>)
 801eaaa:	4806      	ldr	r0, [pc, #24]	; (801eac4 <ip_frag_free_pbuf_custom_ref+0x34>)
 801eaac:	f002 f884 	bl	8020bb8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801eab0:	4621      	mov	r1, r4
 801eab2:	2006      	movs	r0, #6
}
 801eab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 801eab8:	f7f7 bc4c 	b.w	8016354 <memp_free>
 801eabc:	0803f25c 	.word	0x0803f25c
 801eac0:	0803f98c 	.word	0x0803f98c
 801eac4:	08026bb8 	.word	0x08026bb8

0801eac8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801eac8:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801eaca:	4604      	mov	r4, r0
 801eacc:	b140      	cbz	r0, 801eae0 <ipfrag_free_pbuf_custom+0x18>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 801eace:	6960      	ldr	r0, [r4, #20]
 801ead0:	b108      	cbz	r0, 801ead6 <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 801ead2:	f7f7 ff19 	bl	8016908 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801ead6:	4620      	mov	r0, r4
}
 801ead8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 801eadc:	f7ff bfd8 	b.w	801ea90 <ip_frag_free_pbuf_custom_ref>
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801eae0:	4b03      	ldr	r3, [pc, #12]	; (801eaf0 <ipfrag_free_pbuf_custom+0x28>)
 801eae2:	f240 22ce 	movw	r2, #718	; 0x2ce
 801eae6:	4903      	ldr	r1, [pc, #12]	; (801eaf4 <ipfrag_free_pbuf_custom+0x2c>)
 801eae8:	4803      	ldr	r0, [pc, #12]	; (801eaf8 <ipfrag_free_pbuf_custom+0x30>)
 801eaea:	f002 f865 	bl	8020bb8 <iprintf>
 801eaee:	e7ee      	b.n	801eace <ipfrag_free_pbuf_custom+0x6>
 801eaf0:	0803f98c 	.word	0x0803f98c
 801eaf4:	0803fa48 	.word	0x0803fa48
 801eaf8:	08026bb8 	.word	0x08026bb8

0801eafc <ip_reass_tmr>:
{
 801eafc:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 801eafe:	4b0a      	ldr	r3, [pc, #40]	; (801eb28 <ip_reass_tmr+0x2c>)
 801eb00:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 801eb02:	b180      	cbz	r0, 801eb26 <ip_reass_tmr+0x2a>
  struct ip_reassdata *r, *prev = NULL;
 801eb04:	2500      	movs	r5, #0
 801eb06:	e003      	b.n	801eb10 <ip_reass_tmr+0x14>
 801eb08:	4605      	mov	r5, r0
      r->timer--;
 801eb0a:	77c2      	strb	r2, [r0, #31]
  while (r != NULL) {
 801eb0c:	4620      	mov	r0, r4
 801eb0e:	b154      	cbz	r4, 801eb26 <ip_reass_tmr+0x2a>
    if (r->timer > 0) {
 801eb10:	7fc3      	ldrb	r3, [r0, #31]
 801eb12:	6804      	ldr	r4, [r0, #0]
      r->timer--;
 801eb14:	1e5a      	subs	r2, r3, #1
    if (r->timer > 0) {
 801eb16:	2b00      	cmp	r3, #0
 801eb18:	d1f6      	bne.n	801eb08 <ip_reass_tmr+0xc>
      ip_reass_free_complete_datagram(tmp, prev);
 801eb1a:	4629      	mov	r1, r5
 801eb1c:	f7ff fef6 	bl	801e90c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801eb20:	4620      	mov	r0, r4
 801eb22:	2c00      	cmp	r4, #0
 801eb24:	d1f4      	bne.n	801eb10 <ip_reass_tmr+0x14>
}
 801eb26:	bd38      	pop	{r3, r4, r5, pc}
 801eb28:	2002a754 	.word	0x2002a754

0801eb2c <ip4_reass>:
{
 801eb2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  IPFRAG_STATS_INC(ip_frag.recv);
 801eb30:	4eb7      	ldr	r6, [pc, #732]	; (801ee10 <ip4_reass+0x2e4>)
{
 801eb32:	b085      	sub	sp, #20
  fraghdr = (struct ip_hdr *)p->payload;
 801eb34:	6845      	ldr	r5, [r0, #4]
{
 801eb36:	4680      	mov	r8, r0
  IPFRAG_STATS_INC(ip_frag.recv);
 801eb38:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 801eb3a:	3301      	adds	r3, #1
 801eb3c:	8673      	strh	r3, [r6, #50]	; 0x32
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801eb3e:	782b      	ldrb	r3, [r5, #0]
 801eb40:	f003 030f 	and.w	r3, r3, #15
 801eb44:	2b05      	cmp	r3, #5
 801eb46:	f040 80f8 	bne.w	801ed3a <ip4_reass+0x20e>
  offset = IPH_OFFSET_BYTES(fraghdr);
 801eb4a:	88e8      	ldrh	r0, [r5, #6]
 801eb4c:	f7f6 f86e 	bl	8014c2c <lwip_htons>
 801eb50:	f3c0 030c 	ubfx	r3, r0, #0, #13
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801eb54:	8868      	ldrh	r0, [r5, #2]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801eb56:	00db      	lsls	r3, r3, #3
 801eb58:	9301      	str	r3, [sp, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801eb5a:	f7f6 f867 	bl	8014c2c <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 801eb5e:	782b      	ldrb	r3, [r5, #0]
 801eb60:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 801eb64:	009b      	lsls	r3, r3, #2
 801eb66:	4283      	cmp	r3, r0
 801eb68:	f200 80dc 	bhi.w	801ed24 <ip4_reass+0x1f8>
  len = (u16_t)(len - hlen);
 801eb6c:	1ac3      	subs	r3, r0, r3
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801eb6e:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 801ee24 <ip4_reass+0x2f8>
  clen = pbuf_clen(p);
 801eb72:	4640      	mov	r0, r8
  len = (u16_t)(len - hlen);
 801eb74:	b29b      	uxth	r3, r3
 801eb76:	9302      	str	r3, [sp, #8]
  clen = pbuf_clen(p);
 801eb78:	f7f8 f82e 	bl	8016bd8 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801eb7c:	f8ba 3000 	ldrh.w	r3, [sl]
  clen = pbuf_clen(p);
 801eb80:	4683      	mov	fp, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801eb82:	4403      	add	r3, r0
 801eb84:	2b0a      	cmp	r3, #10
 801eb86:	f300 80de 	bgt.w	801ed46 <ip4_reass+0x21a>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801eb8a:	4ba2      	ldr	r3, [pc, #648]	; (801ee14 <ip4_reass+0x2e8>)
 801eb8c:	681c      	ldr	r4, [r3, #0]
 801eb8e:	2c00      	cmp	r4, #0
 801eb90:	f000 8094 	beq.w	801ecbc <ip4_reass+0x190>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801eb94:	68ea      	ldr	r2, [r5, #12]
 801eb96:	e003      	b.n	801eba0 <ip4_reass+0x74>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801eb98:	6824      	ldr	r4, [r4, #0]
 801eb9a:	2c00      	cmp	r4, #0
 801eb9c:	f000 808e 	beq.w	801ecbc <ip4_reass+0x190>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801eba0:	6963      	ldr	r3, [r4, #20]
 801eba2:	4293      	cmp	r3, r2
 801eba4:	d1f8      	bne.n	801eb98 <ip4_reass+0x6c>
 801eba6:	692b      	ldr	r3, [r5, #16]
 801eba8:	69a1      	ldr	r1, [r4, #24]
 801ebaa:	4299      	cmp	r1, r3
 801ebac:	d1f4      	bne.n	801eb98 <ip4_reass+0x6c>
 801ebae:	89a1      	ldrh	r1, [r4, #12]
 801ebb0:	88ab      	ldrh	r3, [r5, #4]
 801ebb2:	4299      	cmp	r1, r3
 801ebb4:	d1f0      	bne.n	801eb98 <ip4_reass+0x6c>
      IPFRAG_STATS_INC(ip_frag.cachehit);
 801ebb6:	f8b6 3046 	ldrh.w	r3, [r6, #70]	; 0x46
 801ebba:	3301      	adds	r3, #1
 801ebbc:	f8a6 3046 	strh.w	r3, [r6, #70]	; 0x46
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801ebc0:	88e8      	ldrh	r0, [r5, #6]
 801ebc2:	f7f6 f833 	bl	8014c2c <lwip_htons>
 801ebc6:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801ebca:	2800      	cmp	r0, #0
 801ebcc:	f000 810d 	beq.w	801edea <ip4_reass+0x2be>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801ebd0:	88eb      	ldrh	r3, [r5, #6]
  if (is_last) {
 801ebd2:	f013 0320 	ands.w	r3, r3, #32
 801ebd6:	9303      	str	r3, [sp, #12]
 801ebd8:	d10b      	bne.n	801ebf2 <ip4_reass+0xc6>
    u16_t datagram_len = (u16_t)(offset + len);
 801ebda:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801ebde:	18d3      	adds	r3, r2, r3
 801ebe0:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801ebe2:	429a      	cmp	r2, r3
 801ebe4:	f200 808d 	bhi.w	801ed02 <ip4_reass+0x1d6>
 801ebe8:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801ebec:	4293      	cmp	r3, r2
 801ebee:	f200 8088 	bhi.w	801ed02 <ip4_reass+0x1d6>
  fraghdr = (struct ip_hdr *)new_p->payload;
 801ebf2:	f8d8 5004 	ldr.w	r5, [r8, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801ebf6:	8868      	ldrh	r0, [r5, #2]
 801ebf8:	f7f6 f818 	bl	8014c2c <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 801ebfc:	782b      	ldrb	r3, [r5, #0]
 801ebfe:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 801ec02:	009b      	lsls	r3, r3, #2
 801ec04:	4298      	cmp	r0, r3
 801ec06:	d37c      	bcc.n	801ed02 <ip4_reass+0x1d6>
  len = (u16_t)(len - hlen);
 801ec08:	1ac3      	subs	r3, r0, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 801ec0a:	88e8      	ldrh	r0, [r5, #6]
  len = (u16_t)(len - hlen);
 801ec0c:	b29d      	uxth	r5, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 801ec0e:	f7f6 f80d 	bl	8014c2c <lwip_htons>
 801ec12:	f3c0 000c 	ubfx	r0, r0, #0, #13
  iprh = (struct ip_reass_helper *)new_p->payload;
 801ec16:	f8d8 9004 	ldr.w	r9, [r8, #4]
  iprh->next_pbuf = NULL;
 801ec1a:	2200      	movs	r2, #0
  offset = IPH_OFFSET_BYTES(fraghdr);
 801ec1c:	00c0      	lsls	r0, r0, #3
  iprh->next_pbuf = NULL;
 801ec1e:	f889 2000 	strb.w	r2, [r9]
  iprh->end = (u16_t)(offset + len);
 801ec22:	eb05 0c00 	add.w	ip, r5, r0
  iprh->next_pbuf = NULL;
 801ec26:	f889 2001 	strb.w	r2, [r9, #1]
 801ec2a:	f889 2002 	strb.w	r2, [r9, #2]
  iprh->end = (u16_t)(offset + len);
 801ec2e:	fa1f fc8c 	uxth.w	ip, ip
  iprh->next_pbuf = NULL;
 801ec32:	f889 2003 	strb.w	r2, [r9, #3]
  iprh->start = offset;
 801ec36:	f8a9 0004 	strh.w	r0, [r9, #4]
  if (iprh->end < offset) {
 801ec3a:	4560      	cmp	r0, ip
  iprh->end = (u16_t)(offset + len);
 801ec3c:	f8a9 c006 	strh.w	ip, [r9, #6]
 801ec40:	6863      	ldr	r3, [r4, #4]
  if (iprh->end < offset) {
 801ec42:	d85f      	bhi.n	801ed04 <ip4_reass+0x1d8>
  for (q = ipr->p; q != NULL;) {
 801ec44:	2b00      	cmp	r3, #0
 801ec46:	f000 818c 	beq.w	801ef62 <ip4_reass+0x436>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801ec4a:	685d      	ldr	r5, [r3, #4]
    if (iprh->start < iprh_tmp->start) {
 801ec4c:	88aa      	ldrh	r2, [r5, #4]
 801ec4e:	4290      	cmp	r0, r2
 801ec50:	f0c0 80b9 	bcc.w	801edc6 <ip4_reass+0x29a>
    } else if (iprh->start == iprh_tmp->start) {
 801ec54:	d066      	beq.n	801ed24 <ip4_reass+0x1f8>
    } else if (iprh->start < iprh_tmp->end) {
 801ec56:	88eb      	ldrh	r3, [r5, #6]
 801ec58:	4283      	cmp	r3, r0
 801ec5a:	d863      	bhi.n	801ed24 <ip4_reass+0x1f8>
    q = iprh_tmp->next_pbuf;
 801ec5c:	682a      	ldr	r2, [r5, #0]
  int valid = 1;
 801ec5e:	2701      	movs	r7, #1
  for (q = ipr->p; q != NULL;) {
 801ec60:	b182      	cbz	r2, 801ec84 <ip4_reass+0x158>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801ec62:	6853      	ldr	r3, [r2, #4]
    if (iprh->start < iprh_tmp->start) {
 801ec64:	8899      	ldrh	r1, [r3, #4]
 801ec66:	4288      	cmp	r0, r1
 801ec68:	f0c0 808c 	bcc.w	801ed84 <ip4_reass+0x258>
    } else if (iprh->start == iprh_tmp->start) {
 801ec6c:	d05a      	beq.n	801ed24 <ip4_reass+0x1f8>
    } else if (iprh->start < iprh_tmp->end) {
 801ec6e:	88da      	ldrh	r2, [r3, #6]
 801ec70:	4282      	cmp	r2, r0
 801ec72:	d857      	bhi.n	801ed24 <ip4_reass+0x1f8>
        if (iprh_prev->end != iprh_tmp->start) {
 801ec74:	88ea      	ldrh	r2, [r5, #6]
          valid = 0;
 801ec76:	461d      	mov	r5, r3
 801ec78:	428a      	cmp	r2, r1
 801ec7a:	bf18      	it	ne
 801ec7c:	2700      	movne	r7, #0
    q = iprh_tmp->next_pbuf;
 801ec7e:	682a      	ldr	r2, [r5, #0]
  for (q = ipr->p; q != NULL;) {
 801ec80:	2a00      	cmp	r2, #0
 801ec82:	d1ee      	bne.n	801ec62 <ip4_reass+0x136>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801ec84:	88eb      	ldrh	r3, [r5, #6]
 801ec86:	4298      	cmp	r0, r3
 801ec88:	f0c0 8179 	bcc.w	801ef7e <ip4_reass+0x452>
      if (iprh_prev->end != iprh->start) {
 801ec8c:	4298      	cmp	r0, r3
      iprh_prev->next_pbuf = new_p;
 801ec8e:	f8c5 8000 	str.w	r8, [r5]
      if (iprh_prev->end != iprh->start) {
 801ec92:	f000 8082 	beq.w	801ed9a <ip4_reass+0x26e>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801ec96:	9b03      	ldr	r3, [sp, #12]
 801ec98:	2b00      	cmp	r3, #0
 801ec9a:	f040 813a 	bne.w	801ef12 <ip4_reass+0x3e6>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801ec9e:	f8ba 3000 	ldrh.w	r3, [sl]
 801eca2:	449b      	add	fp, r3
 801eca4:	f8aa b000 	strh.w	fp, [sl]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801eca8:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 801ecaa:	e9dd 2101 	ldrd	r2, r1, [sp, #4]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801ecae:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 801ecb2:	440a      	add	r2, r1
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801ecb4:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 801ecb6:	83a2      	strh	r2, [r4, #28]
  return NULL;
 801ecb8:	2700      	movs	r7, #0
 801ecba:	e03a      	b.n	801ed32 <ip4_reass+0x206>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801ecbc:	f44f 728f 	mov.w	r2, #286	; 0x11e
 801ecc0:	4955      	ldr	r1, [pc, #340]	; (801ee18 <ip4_reass+0x2ec>)
 801ecc2:	2005      	movs	r0, #5
 801ecc4:	f7f7 fb22 	bl	801630c <memp_malloc_fn>
  if (ipr == NULL) {
 801ecc8:	4604      	mov	r4, r0
 801ecca:	2800      	cmp	r0, #0
 801eccc:	d04a      	beq.n	801ed64 <ip4_reass+0x238>
  ipr->next = reassdatagrams;
 801ecce:	4951      	ldr	r1, [pc, #324]	; (801ee14 <ip4_reass+0x2e8>)
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801ecd0:	2200      	movs	r2, #0
  ipr->timer = IP_REASS_MAXAGE;
 801ecd2:	270f      	movs	r7, #15
  ipr->next = reassdatagrams;
 801ecd4:	6809      	ldr	r1, [r1, #0]
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801ecd6:	60a2      	str	r2, [r4, #8]
 801ecd8:	60e2      	str	r2, [r4, #12]
 801ecda:	6122      	str	r2, [r4, #16]
 801ecdc:	6162      	str	r2, [r4, #20]
 801ecde:	61a2      	str	r2, [r4, #24]
 801ece0:	61e2      	str	r2, [r4, #28]
 801ece2:	6062      	str	r2, [r4, #4]
  ipr->timer = IP_REASS_MAXAGE;
 801ece4:	77e7      	strb	r7, [r4, #31]
  ipr->next = reassdatagrams;
 801ece6:	6021      	str	r1, [r4, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801ece8:	682b      	ldr	r3, [r5, #0]
 801ecea:	68a9      	ldr	r1, [r5, #8]
 801ecec:	686f      	ldr	r7, [r5, #4]
 801ecee:	68ea      	ldr	r2, [r5, #12]
 801ecf0:	6121      	str	r1, [r4, #16]
 801ecf2:	60a3      	str	r3, [r4, #8]
 801ecf4:	60e7      	str	r7, [r4, #12]
 801ecf6:	6162      	str	r2, [r4, #20]
  reassdatagrams = ipr;
 801ecf8:	4946      	ldr	r1, [pc, #280]	; (801ee14 <ip4_reass+0x2e8>)
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801ecfa:	692b      	ldr	r3, [r5, #16]
  reassdatagrams = ipr;
 801ecfc:	600c      	str	r4, [r1, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801ecfe:	61a3      	str	r3, [r4, #24]
 801ed00:	e766      	b.n	801ebd0 <ip4_reass+0xa4>
 801ed02:	6863      	ldr	r3, [r4, #4]
  if (ipr->p == NULL) {
 801ed04:	b973      	cbnz	r3, 801ed24 <ip4_reass+0x1f8>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801ed06:	4b43      	ldr	r3, [pc, #268]	; (801ee14 <ip4_reass+0x2e8>)
 801ed08:	681b      	ldr	r3, [r3, #0]
 801ed0a:	42a3      	cmp	r3, r4
 801ed0c:	d006      	beq.n	801ed1c <ip4_reass+0x1f0>
 801ed0e:	4b42      	ldr	r3, [pc, #264]	; (801ee18 <ip4_reass+0x2ec>)
 801ed10:	f240 22ab 	movw	r2, #683	; 0x2ab
 801ed14:	4941      	ldr	r1, [pc, #260]	; (801ee1c <ip4_reass+0x2f0>)
 801ed16:	4842      	ldr	r0, [pc, #264]	; (801ee20 <ip4_reass+0x2f4>)
 801ed18:	f001 ff4e 	bl	8020bb8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801ed1c:	4620      	mov	r0, r4
 801ed1e:	2100      	movs	r1, #0
 801ed20:	f7ff fdcc 	bl	801e8bc <ip_reass_dequeue_datagram>
  IPFRAG_STATS_INC(ip_frag.drop);
 801ed24:	8ef3      	ldrh	r3, [r6, #54]	; 0x36
  pbuf_free(p);
 801ed26:	4640      	mov	r0, r8
  return NULL;
 801ed28:	2700      	movs	r7, #0
  IPFRAG_STATS_INC(ip_frag.drop);
 801ed2a:	3301      	adds	r3, #1
 801ed2c:	86f3      	strh	r3, [r6, #54]	; 0x36
  pbuf_free(p);
 801ed2e:	f7f7 fdeb 	bl	8016908 <pbuf_free>
}
 801ed32:	4638      	mov	r0, r7
 801ed34:	b005      	add	sp, #20
 801ed36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    IPFRAG_STATS_INC(ip_frag.err);
 801ed3a:	f8b6 3044 	ldrh.w	r3, [r6, #68]	; 0x44
 801ed3e:	3301      	adds	r3, #1
 801ed40:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
    goto nullreturn;
 801ed44:	e7ee      	b.n	801ed24 <ip4_reass+0x1f8>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801ed46:	4601      	mov	r1, r0
 801ed48:	4628      	mov	r0, r5
 801ed4a:	f7ff fe67 	bl	801ea1c <ip_reass_remove_oldest_datagram>
 801ed4e:	b128      	cbz	r0, 801ed5c <ip4_reass+0x230>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801ed50:	f8ba 3000 	ldrh.w	r3, [sl]
 801ed54:	445b      	add	r3, fp
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801ed56:	2b0a      	cmp	r3, #10
 801ed58:	f77f af17 	ble.w	801eb8a <ip4_reass+0x5e>
      IPFRAG_STATS_INC(ip_frag.memerr);
 801ed5c:	8fb3      	ldrh	r3, [r6, #60]	; 0x3c
 801ed5e:	3301      	adds	r3, #1
 801ed60:	87b3      	strh	r3, [r6, #60]	; 0x3c
 801ed62:	e7df      	b.n	801ed24 <ip4_reass+0x1f8>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801ed64:	4659      	mov	r1, fp
 801ed66:	4628      	mov	r0, r5
 801ed68:	f7ff fe58 	bl	801ea1c <ip_reass_remove_oldest_datagram>
 801ed6c:	4583      	cmp	fp, r0
 801ed6e:	dcf5      	bgt.n	801ed5c <ip4_reass+0x230>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801ed70:	f44f 7291 	mov.w	r2, #290	; 0x122
 801ed74:	4928      	ldr	r1, [pc, #160]	; (801ee18 <ip4_reass+0x2ec>)
 801ed76:	2005      	movs	r0, #5
 801ed78:	f7f7 fac8 	bl	801630c <memp_malloc_fn>
    if (ipr == NULL)
 801ed7c:	4604      	mov	r4, r0
 801ed7e:	2800      	cmp	r0, #0
 801ed80:	d1a5      	bne.n	801ecce <ip4_reass+0x1a2>
 801ed82:	e7eb      	b.n	801ed5c <ip4_reass+0x230>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801ed84:	458c      	cmp	ip, r1
      iprh->next_pbuf = q;
 801ed86:	f8c9 2000 	str.w	r2, [r9]
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801ed8a:	88eb      	ldrh	r3, [r5, #6]
 801ed8c:	d8ca      	bhi.n	801ed24 <ip4_reass+0x1f8>
 801ed8e:	4298      	cmp	r0, r3
 801ed90:	d3c8      	bcc.n	801ed24 <ip4_reass+0x1f8>
        iprh_prev->next_pbuf = new_p;
 801ed92:	f8c5 8000 	str.w	r8, [r5]
        if (iprh_prev->end != iprh->start) {
 801ed96:	f47f af7e 	bne.w	801ec96 <ip4_reass+0x16a>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801ed9a:	9b03      	ldr	r3, [sp, #12]
 801ed9c:	2b00      	cmp	r3, #0
 801ed9e:	d043      	beq.n	801ee28 <ip4_reass+0x2fc>
 801eda0:	7fa3      	ldrb	r3, [r4, #30]
 801eda2:	07d9      	lsls	r1, r3, #31
 801eda4:	d51a      	bpl.n	801eddc <ip4_reass+0x2b0>
    if (valid) {
 801eda6:	2f00      	cmp	r7, #0
 801eda8:	f000 80b7 	beq.w	801ef1a <ip4_reass+0x3ee>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801edac:	6863      	ldr	r3, [r4, #4]
 801edae:	2b00      	cmp	r3, #0
 801edb0:	d141      	bne.n	801ee36 <ip4_reass+0x30a>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801edb2:	f8ba 3000 	ldrh.w	r3, [sl]
 801edb6:	449b      	add	fp, r3
  if (is_last) {
 801edb8:	9b03      	ldr	r3, [sp, #12]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801edba:	f8aa b000 	strh.w	fp, [sl]
  if (is_last) {
 801edbe:	2b00      	cmp	r3, #0
 801edc0:	f43f af72 	beq.w	801eca8 <ip4_reass+0x17c>
 801edc4:	e778      	b.n	801ecb8 <ip4_reass+0x18c>
        if (iprh->end > iprh_tmp->start) {
 801edc6:	4594      	cmp	ip, r2
      iprh->next_pbuf = q;
 801edc8:	f8c9 3000 	str.w	r3, [r9]
        if (iprh->end > iprh_tmp->start) {
 801edcc:	d8aa      	bhi.n	801ed24 <ip4_reass+0x1f8>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801edce:	9b03      	ldr	r3, [sp, #12]
        ipr->p = new_p;
 801edd0:	f8c4 8004 	str.w	r8, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801edd4:	b35b      	cbz	r3, 801ee2e <ip4_reass+0x302>
 801edd6:	7fa3      	ldrb	r3, [r4, #30]
 801edd8:	07db      	lsls	r3, r3, #31
 801edda:	d4e7      	bmi.n	801edac <ip4_reass+0x280>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801eddc:	f8ba 3000 	ldrh.w	r3, [sl]
  return NULL;
 801ede0:	2700      	movs	r7, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801ede2:	449b      	add	fp, r3
 801ede4:	f8aa b000 	strh.w	fp, [sl]
 801ede8:	e7a3      	b.n	801ed32 <ip4_reass+0x206>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801edea:	89e0      	ldrh	r0, [r4, #14]
 801edec:	f7f5 ff1e 	bl	8014c2c <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801edf0:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801edf4:	2800      	cmp	r0, #0
 801edf6:	f43f aeeb 	beq.w	801ebd0 <ip4_reass+0xa4>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801edfa:	682a      	ldr	r2, [r5, #0]
 801edfc:	686f      	ldr	r7, [r5, #4]
 801edfe:	68a8      	ldr	r0, [r5, #8]
 801ee00:	68e9      	ldr	r1, [r5, #12]
 801ee02:	60a2      	str	r2, [r4, #8]
 801ee04:	60e7      	str	r7, [r4, #12]
 801ee06:	6120      	str	r0, [r4, #16]
 801ee08:	6161      	str	r1, [r4, #20]
 801ee0a:	692a      	ldr	r2, [r5, #16]
 801ee0c:	61a2      	str	r2, [r4, #24]
 801ee0e:	e6df      	b.n	801ebd0 <ip4_reass+0xa4>
 801ee10:	2003e1cc 	.word	0x2003e1cc
 801ee14:	2002a754 	.word	0x2002a754
 801ee18:	0803f98c 	.word	0x0803f98c
 801ee1c:	0803f96c 	.word	0x0803f96c
 801ee20:	08026bb8 	.word	0x08026bb8
 801ee24:	2002a750 	.word	0x2002a750
    if (valid) {
 801ee28:	2f00      	cmp	r7, #0
 801ee2a:	f43f af38 	beq.w	801ec9e <ip4_reass+0x172>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801ee2e:	6863      	ldr	r3, [r4, #4]
 801ee30:	2b00      	cmp	r3, #0
 801ee32:	f43f af34 	beq.w	801ec9e <ip4_reass+0x172>
 801ee36:	6858      	ldr	r0, [r3, #4]
 801ee38:	8883      	ldrh	r3, [r0, #4]
 801ee3a:	2b00      	cmp	r3, #0
 801ee3c:	d1b9      	bne.n	801edb2 <ip4_reass+0x286>
        q = iprh->next_pbuf;
 801ee3e:	f8d9 3000 	ldr.w	r3, [r9]
        while (q != NULL) {
 801ee42:	2b00      	cmp	r3, #0
 801ee44:	f000 80a6 	beq.w	801ef94 <ip4_reass+0x468>
          iprh = (struct ip_reass_helper *)q->payload;
 801ee48:	685d      	ldr	r5, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 801ee4a:	f8b9 3006 	ldrh.w	r3, [r9, #6]
 801ee4e:	88aa      	ldrh	r2, [r5, #4]
 801ee50:	429a      	cmp	r2, r3
 801ee52:	d006      	beq.n	801ee62 <ip4_reass+0x336>
 801ee54:	e7ad      	b.n	801edb2 <ip4_reass+0x286>
          iprh = (struct ip_reass_helper *)q->payload;
 801ee56:	685b      	ldr	r3, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 801ee58:	88e9      	ldrh	r1, [r5, #6]
 801ee5a:	889a      	ldrh	r2, [r3, #4]
 801ee5c:	461d      	mov	r5, r3
 801ee5e:	4291      	cmp	r1, r2
 801ee60:	d1a7      	bne.n	801edb2 <ip4_reass+0x286>
          q = iprh->next_pbuf;
 801ee62:	682b      	ldr	r3, [r5, #0]
        while (q != NULL) {
 801ee64:	2b00      	cmp	r3, #0
 801ee66:	d1f6      	bne.n	801ee56 <ip4_reass+0x32a>
          LWIP_ASSERT("sanity check",
 801ee68:	4285      	cmp	r5, r0
 801ee6a:	d10f      	bne.n	801ee8c <ip4_reass+0x360>
 801ee6c:	4b50      	ldr	r3, [pc, #320]	; (801efb0 <ip4_reass+0x484>)
 801ee6e:	f240 12e1 	movw	r2, #481	; 0x1e1
 801ee72:	4950      	ldr	r1, [pc, #320]	; (801efb4 <ip4_reass+0x488>)
 801ee74:	4850      	ldr	r0, [pc, #320]	; (801efb8 <ip4_reass+0x48c>)
 801ee76:	f001 fe9f 	bl	8020bb8 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801ee7a:	682b      	ldr	r3, [r5, #0]
 801ee7c:	b133      	cbz	r3, 801ee8c <ip4_reass+0x360>
 801ee7e:	4b4c      	ldr	r3, [pc, #304]	; (801efb0 <ip4_reass+0x484>)
 801ee80:	f240 12e3 	movw	r2, #483	; 0x1e3
 801ee84:	494d      	ldr	r1, [pc, #308]	; (801efbc <ip4_reass+0x490>)
 801ee86:	484c      	ldr	r0, [pc, #304]	; (801efb8 <ip4_reass+0x48c>)
 801ee88:	f001 fe96 	bl	8020bb8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801ee8c:	f8ba 3000 	ldrh.w	r3, [sl]
 801ee90:	449b      	add	fp, r3
  if (is_last) {
 801ee92:	9b03      	ldr	r3, [sp, #12]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801ee94:	f8aa b000 	strh.w	fp, [sl]
  if (is_last) {
 801ee98:	2b00      	cmp	r3, #0
 801ee9a:	d07d      	beq.n	801ef98 <ip4_reass+0x46c>
 801ee9c:	8ba0      	ldrh	r0, [r4, #28]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801ee9e:	4623      	mov	r3, r4
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801eea0:	6861      	ldr	r1, [r4, #4]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801eea2:	3014      	adds	r0, #20
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801eea4:	f853 2f08 	ldr.w	r2, [r3, #8]!
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801eea8:	684e      	ldr	r6, [r1, #4]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801eeaa:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801eeac:	685f      	ldr	r7, [r3, #4]
 801eeae:	689d      	ldr	r5, [r3, #8]
 801eeb0:	68d9      	ldr	r1, [r3, #12]
 801eeb2:	6077      	str	r7, [r6, #4]
 801eeb4:	60b5      	str	r5, [r6, #8]
 801eeb6:	60f1      	str	r1, [r6, #12]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801eeb8:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801eeba:	6032      	str	r2, [r6, #0]
 801eebc:	691a      	ldr	r2, [r3, #16]
 801eebe:	6132      	str	r2, [r6, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801eec0:	f7f5 feb4 	bl	8014c2c <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 801eec4:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801eec6:	8070      	strh	r0, [r6, #2]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 801eec8:	2114      	movs	r1, #20
    IPH_OFFSET_SET(fraghdr, 0);
 801eeca:	71b3      	strb	r3, [r6, #6]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 801eecc:	4630      	mov	r0, r6
    IPH_OFFSET_SET(fraghdr, 0);
 801eece:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801eed0:	72b3      	strb	r3, [r6, #10]
 801eed2:	72f3      	strb	r3, [r6, #11]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 801eed4:	f7f6 fc68 	bl	80157a8 <inet_chksum>
    p = ipr->p;
 801eed8:	6867      	ldr	r7, [r4, #4]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 801eeda:	8170      	strh	r0, [r6, #10]
    while (r != NULL) {
 801eedc:	b15d      	cbz	r5, 801eef6 <ip4_reass+0x3ca>
      iprh = (struct ip_reass_helper *)r->payload;
 801eede:	686e      	ldr	r6, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 801eee0:	2114      	movs	r1, #20
 801eee2:	4628      	mov	r0, r5
 801eee4:	f7f7 fcd4 	bl	8016890 <pbuf_remove_header>
      pbuf_cat(p, r);
 801eee8:	4629      	mov	r1, r5
 801eeea:	4638      	mov	r0, r7
 801eeec:	f7f7 fe94 	bl	8016c18 <pbuf_cat>
      r = iprh->next_pbuf;
 801eef0:	6835      	ldr	r5, [r6, #0]
    while (r != NULL) {
 801eef2:	2d00      	cmp	r5, #0
 801eef4:	d1f3      	bne.n	801eede <ip4_reass+0x3b2>
    if (ipr == reassdatagrams) {
 801eef6:	4b32      	ldr	r3, [pc, #200]	; (801efc0 <ip4_reass+0x494>)
 801eef8:	681b      	ldr	r3, [r3, #0]
 801eefa:	42a3      	cmp	r3, r4
 801eefc:	d02f      	beq.n	801ef5e <ip4_reass+0x432>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801eefe:	b193      	cbz	r3, 801ef26 <ip4_reass+0x3fa>
        if (ipr_prev->next == ipr) {
 801ef00:	6819      	ldr	r1, [r3, #0]
 801ef02:	428c      	cmp	r4, r1
 801ef04:	d00f      	beq.n	801ef26 <ip4_reass+0x3fa>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801ef06:	b179      	cbz	r1, 801ef28 <ip4_reass+0x3fc>
        if (ipr_prev->next == ipr) {
 801ef08:	680b      	ldr	r3, [r1, #0]
 801ef0a:	42a3      	cmp	r3, r4
 801ef0c:	d00c      	beq.n	801ef28 <ip4_reass+0x3fc>
 801ef0e:	4619      	mov	r1, r3
 801ef10:	e7f9      	b.n	801ef06 <ip4_reass+0x3da>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801ef12:	7fa3      	ldrb	r3, [r4, #30]
 801ef14:	07da      	lsls	r2, r3, #31
 801ef16:	f57f af61 	bpl.w	801eddc <ip4_reass+0x2b0>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801ef1a:	f8ba 3000 	ldrh.w	r3, [sl]
 801ef1e:	449b      	add	fp, r3
 801ef20:	f8aa b000 	strh.w	fp, [sl]
 801ef24:	e6c8      	b.n	801ecb8 <ip4_reass+0x18c>
        if (ipr_prev->next == ipr) {
 801ef26:	4619      	mov	r1, r3
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801ef28:	4620      	mov	r0, r4
 801ef2a:	f7ff fcc7 	bl	801e8bc <ip_reass_dequeue_datagram>
    clen = pbuf_clen(p);
 801ef2e:	4638      	mov	r0, r7
 801ef30:	f7f7 fe52 	bl	8016bd8 <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801ef34:	f8ba 3000 	ldrh.w	r3, [sl]
    clen = pbuf_clen(p);
 801ef38:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801ef3a:	4283      	cmp	r3, r0
 801ef3c:	d208      	bcs.n	801ef50 <ip4_reass+0x424>
 801ef3e:	4b1c      	ldr	r3, [pc, #112]	; (801efb0 <ip4_reass+0x484>)
 801ef40:	f240 229b 	movw	r2, #667	; 0x29b
 801ef44:	491f      	ldr	r1, [pc, #124]	; (801efc4 <ip4_reass+0x498>)
 801ef46:	481c      	ldr	r0, [pc, #112]	; (801efb8 <ip4_reass+0x48c>)
 801ef48:	f001 fe36 	bl	8020bb8 <iprintf>
 801ef4c:	f8ba 3000 	ldrh.w	r3, [sl]
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801ef50:	1b1b      	subs	r3, r3, r4
}
 801ef52:	4638      	mov	r0, r7
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801ef54:	f8aa 3000 	strh.w	r3, [sl]
}
 801ef58:	b005      	add	sp, #20
 801ef5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ipr_prev = NULL;
 801ef5e:	2100      	movs	r1, #0
 801ef60:	e7e2      	b.n	801ef28 <ip4_reass+0x3fc>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801ef62:	9b03      	ldr	r3, [sp, #12]
      ipr->p = new_p;
 801ef64:	f8c4 8004 	str.w	r8, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801ef68:	2b00      	cmp	r3, #0
 801ef6a:	f43f af60 	beq.w	801ee2e <ip4_reass+0x302>
 801ef6e:	7fa3      	ldrb	r3, [r4, #30]
 801ef70:	07d8      	lsls	r0, r3, #31
 801ef72:	f57f af33 	bpl.w	801eddc <ip4_reass+0x2b0>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801ef76:	4643      	mov	r3, r8
 801ef78:	2b00      	cmp	r3, #0
 801ef7a:	d0ce      	beq.n	801ef1a <ip4_reass+0x3ee>
 801ef7c:	e75b      	b.n	801ee36 <ip4_reass+0x30a>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801ef7e:	4b0c      	ldr	r3, [pc, #48]	; (801efb0 <ip4_reass+0x484>)
 801ef80:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801ef84:	4910      	ldr	r1, [pc, #64]	; (801efc8 <ip4_reass+0x49c>)
 801ef86:	480c      	ldr	r0, [pc, #48]	; (801efb8 <ip4_reass+0x48c>)
 801ef88:	f001 fe16 	bl	8020bb8 <iprintf>
 801ef8c:	88eb      	ldrh	r3, [r5, #6]
 801ef8e:	f8b9 0004 	ldrh.w	r0, [r9, #4]
 801ef92:	e67b      	b.n	801ec8c <ip4_reass+0x160>
        while (q != NULL) {
 801ef94:	464d      	mov	r5, r9
 801ef96:	e767      	b.n	801ee68 <ip4_reass+0x33c>
    u16_t datagram_len = (u16_t)(offset + len);
 801ef98:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 801ef9c:	4413      	add	r3, r2
 801ef9e:	4618      	mov	r0, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801efa0:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 801efa2:	b280      	uxth	r0, r0
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801efa4:	f043 0301 	orr.w	r3, r3, #1
    ipr->datagram_len = datagram_len;
 801efa8:	83a0      	strh	r0, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801efaa:	77a3      	strb	r3, [r4, #30]
 801efac:	e777      	b.n	801ee9e <ip4_reass+0x372>
 801efae:	bf00      	nop
 801efb0:	0803f98c 	.word	0x0803f98c
 801efb4:	0803f91c 	.word	0x0803f91c
 801efb8:	08026bb8 	.word	0x08026bb8
 801efbc:	0803f92c 	.word	0x0803f92c
 801efc0:	2002a754 	.word	0x2002a754
 801efc4:	0803f950 	.word	0x0803f950
 801efc8:	0803f8fc 	.word	0x0803f8fc

0801efcc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801efcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801efd0:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
{
 801efd2:	b08d      	sub	sp, #52	; 0x34
 801efd4:	4605      	mov	r5, r0
 801efd6:	920a      	str	r2, [sp, #40]	; 0x28
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801efd8:	f1b3 0214 	subs.w	r2, r3, #20
{
 801efdc:	9105      	str	r1, [sp, #20]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801efde:	bf48      	it	mi
 801efe0:	f1a3 020d 	submi.w	r2, r3, #13
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801efe4:	6843      	ldr	r3, [r0, #4]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801efe6:	781c      	ldrb	r4, [r3, #0]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801efe8:	f3c2 02cf 	ubfx	r2, r2, #3, #16
  original_iphdr = (struct ip_hdr *)p->payload;
 801efec:	9304      	str	r3, [sp, #16]
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801efee:	f004 040f 	and.w	r4, r4, #15
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801eff2:	9207      	str	r2, [sp, #28]
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801eff4:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 801eff8:	f1ba 0f14 	cmp.w	sl, #20
 801effc:	f040 80dc 	bne.w	801f1b8 <ip4_frag+0x1ec>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801f000:	8943      	ldrh	r3, [r0, #10]
 801f002:	2b13      	cmp	r3, #19
 801f004:	f240 80db 	bls.w	801f1be <ip4_frag+0x1f2>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801f008:	9b04      	ldr	r3, [sp, #16]
 801f00a:	88d8      	ldrh	r0, [r3, #6]
 801f00c:	f7f5 fe0e 	bl	8014c2c <lwip_htons>
  ofo = tmp & IP_OFFMASK;
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 801f010:	f8b5 9008 	ldrh.w	r9, [r5, #8]
  ofo = tmp & IP_OFFMASK;
 801f014:	f3c0 030c 	ubfx	r3, r0, #0, #13
  left = (u16_t)(p->tot_len - IP_HLEN);
 801f018:	f1a9 0914 	sub.w	r9, r9, #20
  ofo = tmp & IP_OFFMASK;
 801f01c:	9306      	str	r3, [sp, #24]
 801f01e:	f400 5300 	and.w	r3, r0, #8192	; 0x2000
 801f022:	930b      	str	r3, [sp, #44]	; 0x2c
  left = (u16_t)(p->tot_len - IP_HLEN);
 801f024:	fa1f f389 	uxth.w	r3, r9
 801f028:	9303      	str	r3, [sp, #12]

  while (left) {
 801f02a:	2b00      	cmp	r3, #0
 801f02c:	f000 809b 	beq.w	801f166 <ip4_frag+0x19a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801f030:	9b07      	ldr	r3, [sp, #28]
  u16_t newpbuflen = 0;
 801f032:	2400      	movs	r4, #0
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
    if (rambuf == NULL) {
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801f034:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 801f1e8 <ip4_frag+0x21c>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801f038:	00db      	lsls	r3, r3, #3
 801f03a:	b29b      	uxth	r3, r3
 801f03c:	9308      	str	r3, [sp, #32]
 801f03e:	9b08      	ldr	r3, [sp, #32]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801f040:	f44f 7220 	mov.w	r2, #640	; 0x280
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801f044:	9e03      	ldr	r6, [sp, #12]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801f046:	2114      	movs	r1, #20
 801f048:	200e      	movs	r0, #14
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801f04a:	42b3      	cmp	r3, r6
 801f04c:	bf28      	it	cs
 801f04e:	4633      	movcs	r3, r6
 801f050:	9302      	str	r3, [sp, #8]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801f052:	f7f7 fcc7 	bl	80169e4 <pbuf_alloc>
    if (rambuf == NULL) {
 801f056:	4681      	mov	r9, r0
 801f058:	2800      	cmp	r0, #0
 801f05a:	f000 809d 	beq.w	801f198 <ip4_frag+0x1cc>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801f05e:	8943      	ldrh	r3, [r0, #10]
 801f060:	2b13      	cmp	r3, #19
 801f062:	f240 809e 	bls.w	801f1a2 <ip4_frag+0x1d6>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801f066:	9f04      	ldr	r7, [sp, #16]
 801f068:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801f06c:	683a      	ldr	r2, [r7, #0]
 801f06e:	687e      	ldr	r6, [r7, #4]
 801f070:	68b8      	ldr	r0, [r7, #8]
 801f072:	68f9      	ldr	r1, [r7, #12]
 801f074:	601a      	str	r2, [r3, #0]
 801f076:	605e      	str	r6, [r3, #4]
 801f078:	6098      	str	r0, [r3, #8]
 801f07a:	60d9      	str	r1, [r3, #12]
 801f07c:	693a      	ldr	r2, [r7, #16]
 801f07e:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 801f080:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801f084:	9309      	str	r3, [sp, #36]	; 0x24

    left_to_copy = fragsize;
    while (left_to_copy) {
 801f086:	9b02      	ldr	r3, [sp, #8]
 801f088:	2b00      	cmp	r3, #0
 801f08a:	d031      	beq.n	801f0f0 <ip4_frag+0x124>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801f08c:	896b      	ldrh	r3, [r5, #10]
    while (left_to_copy) {
 801f08e:	9f02      	ldr	r7, [sp, #8]
      u16_t plen = (u16_t)(p->len - poff);
 801f090:	eba3 040a 	sub.w	r4, r3, sl
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801f094:	4553      	cmp	r3, sl
      u16_t plen = (u16_t)(p->len - poff);
 801f096:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801f098:	d370      	bcc.n	801f17c <ip4_frag+0x1b0>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801f09a:	42bc      	cmp	r4, r7
 801f09c:	bf28      	it	cs
 801f09e:	463c      	movcs	r4, r7
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801f0a0:	2c00      	cmp	r4, #0
 801f0a2:	d062      	beq.n	801f16a <ip4_frag+0x19e>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801f0a4:	f240 22bd 	movw	r2, #701	; 0x2bd
 801f0a8:	4659      	mov	r1, fp
 801f0aa:	2006      	movs	r0, #6
 801f0ac:	f7f7 f92e 	bl	801630c <memp_malloc_fn>
      if (pcr == NULL) {
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801f0b0:	2241      	movs	r2, #65	; 0x41
      if (pcr == NULL) {
 801f0b2:	4680      	mov	r8, r0
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801f0b4:	4621      	mov	r1, r4
 801f0b6:	4603      	mov	r3, r0
      if (pcr == NULL) {
 801f0b8:	2800      	cmp	r0, #0
 801f0ba:	d06a      	beq.n	801f192 <ip4_frag+0x1c6>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801f0bc:	9401      	str	r4, [sp, #4]
 801f0be:	2000      	movs	r0, #0
 801f0c0:	686e      	ldr	r6, [r5, #4]
 801f0c2:	4456      	add	r6, sl
 801f0c4:	9600      	str	r6, [sp, #0]
 801f0c6:	f7f7 fbc3 	bl	8016850 <pbuf_alloced_custom>
                                    (u8_t *)p->payload + poff, newpbuflen);
      if (newpbuf == NULL) {
 801f0ca:	4606      	mov	r6, r0
 801f0cc:	2800      	cmp	r0, #0
 801f0ce:	d05d      	beq.n	801f18c <ip4_frag+0x1c0>
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 801f0d0:	4628      	mov	r0, r5

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801f0d2:	1b3f      	subs	r7, r7, r4
      pbuf_ref(p);
 801f0d4:	f7f7 fd8c 	bl	8016bf0 <pbuf_ref>
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801f0d8:	4b3e      	ldr	r3, [pc, #248]	; (801f1d4 <ip4_frag+0x208>)
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801f0da:	b2bf      	uxth	r7, r7
      pcr->original = p;
 801f0dc:	f8c8 5014 	str.w	r5, [r8, #20]
      pbuf_cat(rambuf, newpbuf);
 801f0e0:	4631      	mov	r1, r6
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801f0e2:	f8c8 3010 	str.w	r3, [r8, #16]
      pbuf_cat(rambuf, newpbuf);
 801f0e6:	4648      	mov	r0, r9
 801f0e8:	f7f7 fd96 	bl	8016c18 <pbuf_cat>
      if (left_to_copy) {
 801f0ec:	2f00      	cmp	r7, #0
 801f0ee:	d13c      	bne.n	801f16a <ip4_frag+0x19e>
    }
    poff = (u16_t)(poff + newpbuflen);
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801f0f0:	9b05      	ldr	r3, [sp, #20]
    poff = (u16_t)(poff + newpbuflen);
 801f0f2:	44a2      	add	sl, r4

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801f0f4:	9a06      	ldr	r2, [sp, #24]
    last = (left <= netif->mtu - IP_HLEN);
 801f0f6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    poff = (u16_t)(poff + newpbuflen);
 801f0f8:	fa1f fa8a 	uxth.w	sl, sl
    tmp = (IP_OFFMASK & (ofo));
 801f0fc:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last || mf_set) {
 801f100:	9a03      	ldr	r2, [sp, #12]
    last = (left <= netif->mtu - IP_HLEN);
 801f102:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 801f104:	4293      	cmp	r3, r2
 801f106:	dd54      	ble.n	801f1b2 <ip4_frag+0x1e6>
 801f108:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f10a:	2b00      	cmp	r3, #0
 801f10c:	d151      	bne.n	801f1b2 <ip4_frag+0x1e6>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801f10e:	f7f5 fd8d 	bl	8014c2c <lwip_htons>
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801f112:	9f02      	ldr	r7, [sp, #8]
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801f114:	9e09      	ldr	r6, [sp, #36]	; 0x24
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801f116:	463b      	mov	r3, r7
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801f118:	80f0      	strh	r0, [r6, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801f11a:	3314      	adds	r3, #20
 801f11c:	b298      	uxth	r0, r3
 801f11e:	f7f5 fd85 	bl	8014c2c <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 801f122:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801f124:	8070      	strh	r0, [r6, #2]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 801f126:	2114      	movs	r1, #20
    IPH_CHKSUM_SET(iphdr, 0);
 801f128:	72b3      	strb	r3, [r6, #10]
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 801f12a:	4630      	mov	r0, r6
    IPH_CHKSUM_SET(iphdr, 0);
 801f12c:	72f3      	strb	r3, [r6, #11]
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 801f12e:	f7f6 fb3b 	bl	80157a8 <inet_chksum>
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801f132:	9b05      	ldr	r3, [sp, #20]
 801f134:	4649      	mov	r1, r9
 801f136:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f138:	695b      	ldr	r3, [r3, #20]
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 801f13a:	8170      	strh	r0, [r6, #10]
    netif->output(netif, rambuf, dest);
 801f13c:	9805      	ldr	r0, [sp, #20]
 801f13e:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
 801f140:	4a25      	ldr	r2, [pc, #148]	; (801f1d8 <ip4_frag+0x20c>)
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801f142:	4648      	mov	r0, r9
    IPFRAG_STATS_INC(ip_frag.xmit);
 801f144:	8e13      	ldrh	r3, [r2, #48]	; 0x30
 801f146:	3301      	adds	r3, #1
 801f148:	8613      	strh	r3, [r2, #48]	; 0x30
    pbuf_free(rambuf);
 801f14a:	f7f7 fbdd 	bl	8016908 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801f14e:	9b03      	ldr	r3, [sp, #12]
    ofo = (u16_t)(ofo + nfb);
 801f150:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
    left = (u16_t)(left - fragsize);
 801f154:	1bdb      	subs	r3, r3, r7
    ofo = (u16_t)(ofo + nfb);
 801f156:	440a      	add	r2, r1
    left = (u16_t)(left - fragsize);
 801f158:	b29b      	uxth	r3, r3
    ofo = (u16_t)(ofo + nfb);
 801f15a:	b292      	uxth	r2, r2
    left = (u16_t)(left - fragsize);
 801f15c:	9303      	str	r3, [sp, #12]
    ofo = (u16_t)(ofo + nfb);
 801f15e:	9206      	str	r2, [sp, #24]
  while (left) {
 801f160:	2b00      	cmp	r3, #0
 801f162:	f47f af6c 	bne.w	801f03e <ip4_frag+0x72>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801f166:	2000      	movs	r0, #0
 801f168:	e018      	b.n	801f19c <ip4_frag+0x1d0>
        p = p->next;
 801f16a:	682d      	ldr	r5, [r5, #0]
 801f16c:	f04f 0a00 	mov.w	sl, #0
      u16_t plen = (u16_t)(p->len - poff);
 801f170:	896b      	ldrh	r3, [r5, #10]
 801f172:	eba3 040a 	sub.w	r4, r3, sl
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801f176:	4553      	cmp	r3, sl
      u16_t plen = (u16_t)(p->len - poff);
 801f178:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801f17a:	d28e      	bcs.n	801f09a <ip4_frag+0xce>
 801f17c:	465b      	mov	r3, fp
 801f17e:	f240 322d 	movw	r2, #813	; 0x32d
 801f182:	4916      	ldr	r1, [pc, #88]	; (801f1dc <ip4_frag+0x210>)
 801f184:	4816      	ldr	r0, [pc, #88]	; (801f1e0 <ip4_frag+0x214>)
 801f186:	f001 fd17 	bl	8020bb8 <iprintf>
 801f18a:	e786      	b.n	801f09a <ip4_frag+0xce>
        ip_frag_free_pbuf_custom_ref(pcr);
 801f18c:	4640      	mov	r0, r8
 801f18e:	f7ff fc7f 	bl	801ea90 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801f192:	4648      	mov	r0, r9
 801f194:	f7f7 fbb8 	bl	8016908 <pbuf_free>
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801f198:	f04f 30ff 	mov.w	r0, #4294967295
}
 801f19c:	b00d      	add	sp, #52	; 0x34
 801f19e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801f1a2:	465b      	mov	r3, fp
 801f1a4:	f240 3225 	movw	r2, #805	; 0x325
 801f1a8:	490e      	ldr	r1, [pc, #56]	; (801f1e4 <ip4_frag+0x218>)
 801f1aa:	480d      	ldr	r0, [pc, #52]	; (801f1e0 <ip4_frag+0x214>)
 801f1ac:	f001 fd04 	bl	8020bb8 <iprintf>
 801f1b0:	e759      	b.n	801f066 <ip4_frag+0x9a>
      tmp = tmp | IP_MF;
 801f1b2:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 801f1b6:	e7aa      	b.n	801f10e <ip4_frag+0x142>
    return ERR_VAL;
 801f1b8:	f06f 0005 	mvn.w	r0, #5
 801f1bc:	e7ee      	b.n	801f19c <ip4_frag+0x1d0>
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801f1be:	4b0a      	ldr	r3, [pc, #40]	; (801f1e8 <ip4_frag+0x21c>)
 801f1c0:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801f1c4:	4909      	ldr	r1, [pc, #36]	; (801f1ec <ip4_frag+0x220>)
 801f1c6:	4806      	ldr	r0, [pc, #24]	; (801f1e0 <ip4_frag+0x214>)
 801f1c8:	f001 fcf6 	bl	8020bb8 <iprintf>
 801f1cc:	f06f 0005 	mvn.w	r0, #5
 801f1d0:	e7e4      	b.n	801f19c <ip4_frag+0x1d0>
 801f1d2:	bf00      	nop
 801f1d4:	0801eac9 	.word	0x0801eac9
 801f1d8:	2003e1cc 	.word	0x2003e1cc
 801f1dc:	0803f8ec 	.word	0x0803f8ec
 801f1e0:	08026bb8 	.word	0x08026bb8
 801f1e4:	0803f8cc 	.word	0x0803f8cc
 801f1e8:	0803f98c 	.word	0x0803f98c
 801f1ec:	0803f8b0 	.word	0x0803f8b0

0801f1f0 <ethernet_input>:
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801f1f0:	8943      	ldrh	r3, [r0, #10]
 801f1f2:	2b0e      	cmp	r3, #14
{
 801f1f4:	b570      	push	{r4, r5, r6, lr}
 801f1f6:	4604      	mov	r4, r0
  if (p->len <= SIZEOF_ETH_HDR) {
 801f1f8:	d91b      	bls.n	801f232 <ethernet_input+0x42>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801f1fa:	7bc3      	ldrb	r3, [r0, #15]
 801f1fc:	460d      	mov	r5, r1
 801f1fe:	b91b      	cbnz	r3, 801f208 <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 801f200:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 801f204:	3301      	adds	r3, #1
 801f206:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801f208:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801f20a:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 801f20c:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 801f20e:	07d9      	lsls	r1, r3, #31
 801f210:	d50a      	bpl.n	801f228 <ethernet_input+0x38>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801f212:	2b01      	cmp	r3, #1
 801f214:	d039      	beq.n	801f28a <ethernet_input+0x9a>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801f216:	2206      	movs	r2, #6
 801f218:	4924      	ldr	r1, [pc, #144]	; (801f2ac <ethernet_input+0xbc>)
 801f21a:	f000 fd19 	bl	801fc50 <memcmp>
 801f21e:	b918      	cbnz	r0, 801f228 <ethernet_input+0x38>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801f220:	7b63      	ldrb	r3, [r4, #13]
 801f222:	f043 0308 	orr.w	r3, r3, #8
 801f226:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 801f228:	2e08      	cmp	r6, #8
 801f22a:	d01f      	beq.n	801f26c <ethernet_input+0x7c>
 801f22c:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 801f230:	d00b      	beq.n	801f24a <ethernet_input+0x5a>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if (LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
 801f232:	4b1f      	ldr	r3, [pc, #124]	; (801f2b0 <ethernet_input+0xc0>)
 801f234:	8d19      	ldrh	r1, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
 801f236:	8bda      	ldrh	r2, [r3, #30]
      ETHARP_STATS_INC(etharp.proterr);
 801f238:	3101      	adds	r1, #1
      ETHARP_STATS_INC(etharp.drop);
 801f23a:	3201      	adds	r2, #1
      ETHARP_STATS_INC(etharp.proterr);
 801f23c:	8519      	strh	r1, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
 801f23e:	83da      	strh	r2, [r3, #30]
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 801f240:	4620      	mov	r0, r4
 801f242:	f7f7 fb61 	bl	8016908 <pbuf_free>
  return ERR_OK;
}
 801f246:	2000      	movs	r0, #0
 801f248:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801f24a:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 801f24e:	071b      	lsls	r3, r3, #28
 801f250:	d5f6      	bpl.n	801f240 <ethernet_input+0x50>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801f252:	210e      	movs	r1, #14
 801f254:	4620      	mov	r0, r4
 801f256:	f7f7 fb1b 	bl	8016890 <pbuf_remove_header>
 801f25a:	b308      	cbz	r0, 801f2a0 <ethernet_input+0xb0>
        ETHARP_STATS_INC(etharp.lenerr);
 801f25c:	4b14      	ldr	r3, [pc, #80]	; (801f2b0 <ethernet_input+0xc0>)
 801f25e:	8c59      	ldrh	r1, [r3, #34]	; 0x22
        ETHARP_STATS_INC(etharp.drop);
 801f260:	8bda      	ldrh	r2, [r3, #30]
        ETHARP_STATS_INC(etharp.lenerr);
 801f262:	3101      	adds	r1, #1
        ETHARP_STATS_INC(etharp.drop);
 801f264:	3201      	adds	r2, #1
        ETHARP_STATS_INC(etharp.lenerr);
 801f266:	8459      	strh	r1, [r3, #34]	; 0x22
        ETHARP_STATS_INC(etharp.drop);
 801f268:	83da      	strh	r2, [r3, #30]
        goto free_and_return;
 801f26a:	e7e9      	b.n	801f240 <ethernet_input+0x50>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801f26c:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 801f270:	071a      	lsls	r2, r3, #28
 801f272:	d5e5      	bpl.n	801f240 <ethernet_input+0x50>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801f274:	210e      	movs	r1, #14
 801f276:	4620      	mov	r0, r4
 801f278:	f7f7 fb0a 	bl	8016890 <pbuf_remove_header>
 801f27c:	2800      	cmp	r0, #0
 801f27e:	d1df      	bne.n	801f240 <ethernet_input+0x50>
        ip4_input(p, netif);
 801f280:	4629      	mov	r1, r5
 801f282:	4620      	mov	r0, r4
 801f284:	f7ff f84a 	bl	801e31c <ip4_input>
      break;
 801f288:	e7dd      	b.n	801f246 <ethernet_input+0x56>
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801f28a:	7843      	ldrb	r3, [r0, #1]
 801f28c:	2b00      	cmp	r3, #0
 801f28e:	d1cb      	bne.n	801f228 <ethernet_input+0x38>
 801f290:	7883      	ldrb	r3, [r0, #2]
 801f292:	2b5e      	cmp	r3, #94	; 0x5e
 801f294:	d1c8      	bne.n	801f228 <ethernet_input+0x38>
        p->flags |= PBUF_FLAG_LLMCAST;
 801f296:	7b63      	ldrb	r3, [r4, #13]
 801f298:	f043 0310 	orr.w	r3, r3, #16
 801f29c:	7363      	strb	r3, [r4, #13]
 801f29e:	e7c3      	b.n	801f228 <ethernet_input+0x38>
        etharp_input(p, netif);
 801f2a0:	4629      	mov	r1, r5
 801f2a2:	4620      	mov	r0, r4
 801f2a4:	f7fe fbdc 	bl	801da60 <etharp_input>
      break;
 801f2a8:	e7cd      	b.n	801f246 <ethernet_input+0x56>
 801f2aa:	bf00      	nop
 801f2ac:	0803fa54 	.word	0x0803fa54
 801f2b0:	2003e1cc 	.word	0x2003e1cc

0801f2b4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801f2b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f2b8:	460c      	mov	r4, r1
 801f2ba:	4605      	mov	r5, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801f2bc:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 801f2c0:	4616      	mov	r6, r2
 801f2c2:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 801f2c4:	f7f5 fcb2 	bl	8014c2c <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801f2c8:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 801f2ca:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801f2cc:	4620      	mov	r0, r4
 801f2ce:	f7f7 fadb 	bl	8016888 <pbuf_add_header>
 801f2d2:	b9e0      	cbnz	r0, 801f30e <ethernet_output+0x5a>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801f2d4:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 801f2d6:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801f2da:	683b      	ldr	r3, [r7, #0]
 801f2dc:	600b      	str	r3, [r1, #0]
 801f2de:	88bb      	ldrh	r3, [r7, #4]
 801f2e0:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801f2e2:	6833      	ldr	r3, [r6, #0]
 801f2e4:	f8c1 3006 	str.w	r3, [r1, #6]
 801f2e8:	88b3      	ldrh	r3, [r6, #4]
 801f2ea:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801f2ec:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 801f2f0:	2b06      	cmp	r3, #6
 801f2f2:	d006      	beq.n	801f302 <ethernet_output+0x4e>
 801f2f4:	4b0a      	ldr	r3, [pc, #40]	; (801f320 <ethernet_output+0x6c>)
 801f2f6:	f240 1233 	movw	r2, #307	; 0x133
 801f2fa:	490a      	ldr	r1, [pc, #40]	; (801f324 <ethernet_output+0x70>)
 801f2fc:	480a      	ldr	r0, [pc, #40]	; (801f328 <ethernet_output+0x74>)
 801f2fe:	f001 fc5b 	bl	8020bb8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801f302:	4621      	mov	r1, r4
 801f304:	69ab      	ldr	r3, [r5, #24]
 801f306:	4628      	mov	r0, r5
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 801f308:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 801f30c:	4718      	bx	r3
  LINK_STATS_INC(link.lenerr);
 801f30e:	4a07      	ldr	r2, [pc, #28]	; (801f32c <ethernet_output+0x78>)
}
 801f310:	f06f 0001 	mvn.w	r0, #1
  LINK_STATS_INC(link.lenerr);
 801f314:	8953      	ldrh	r3, [r2, #10]
 801f316:	3301      	adds	r3, #1
 801f318:	8153      	strh	r3, [r2, #10]
}
 801f31a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f31e:	bf00      	nop
 801f320:	0803fa5c 	.word	0x0803fa5c
 801f324:	0803fa94 	.word	0x0803fa94
 801f328:	08026bb8 	.word	0x08026bb8
 801f32c:	2003e1cc 	.word	0x2003e1cc

0801f330 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801f330:	b510      	push	{r4, lr}
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801f332:	2300      	movs	r3, #0
{
 801f334:	b084      	sub	sp, #16
  osMessageQDef(QUEUE, size, void *);
 801f336:	2204      	movs	r2, #4
{
 801f338:	4604      	mov	r4, r0
  osMessageQDef(QUEUE, size, void *);
 801f33a:	9100      	str	r1, [sp, #0]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801f33c:	4668      	mov	r0, sp
 801f33e:	4619      	mov	r1, r3
  osMessageQDef(QUEUE, size, void *);
 801f340:	9201      	str	r2, [sp, #4]
 801f342:	e9cd 3302 	strd	r3, r3, [sp, #8]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801f346:	f7f1 ffa1 	bl	801128c <osMessageCreate>
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
#endif
#if SYS_STATS
  ++lwip_stats.sys.mbox.used;
 801f34a:	4a0a      	ldr	r2, [pc, #40]	; (801f374 <sys_mbox_new+0x44>)
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801f34c:	6020      	str	r0, [r4, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801f34e:	fab0 f080 	clz	r0, r0
  ++lwip_stats.sys.mbox.used;
 801f352:	f8b2 3100 	ldrh.w	r3, [r2, #256]	; 0x100
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
 801f356:	f8b2 1102 	ldrh.w	r1, [r2, #258]	; 0x102
  if(*mbox == NULL)
 801f35a:	0940      	lsrs	r0, r0, #5
  ++lwip_stats.sys.mbox.used;
 801f35c:	3301      	adds	r3, #1
    return ERR_MEM;

  return ERR_OK;
}
 801f35e:	4240      	negs	r0, r0
  ++lwip_stats.sys.mbox.used;
 801f360:	b29b      	uxth	r3, r3
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
 801f362:	4299      	cmp	r1, r3
  ++lwip_stats.sys.mbox.used;
 801f364:	f8a2 3100 	strh.w	r3, [r2, #256]	; 0x100
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
 801f368:	bf38      	it	cc
 801f36a:	f8a2 3102 	strhcc.w	r3, [r2, #258]	; 0x102
}
 801f36e:	b004      	add	sp, #16
 801f370:	bd10      	pop	{r4, pc}
 801f372:	bf00      	nop
 801f374:	2003e1cc 	.word	0x2003e1cc

0801f378 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801f378:	b508      	push	{r3, lr}
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801f37a:	6800      	ldr	r0, [r0, #0]
 801f37c:	2200      	movs	r2, #0
 801f37e:	f7f1 ff9b 	bl	80112b8 <osMessagePut>
 801f382:	b900      	cbnz	r0, 801f386 <sys_mbox_trypost+0xe>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 801f384:	bd08      	pop	{r3, pc}
    lwip_stats.sys.mbox.err++;
 801f386:	4a04      	ldr	r2, [pc, #16]	; (801f398 <sys_mbox_trypost+0x20>)
 801f388:	f04f 30ff 	mov.w	r0, #4294967295
 801f38c:	f8b2 3104 	ldrh.w	r3, [r2, #260]	; 0x104
 801f390:	3301      	adds	r3, #1
 801f392:	f8a2 3104 	strh.w	r3, [r2, #260]	; 0x104
}
 801f396:	bd08      	pop	{r3, pc}
 801f398:	2003e1cc 	.word	0x2003e1cc

0801f39c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801f39c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f39e:	4615      	mov	r5, r2
 801f3a0:	b085      	sub	sp, #20
 801f3a2:	4606      	mov	r6, r0
 801f3a4:	460f      	mov	r7, r1
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801f3a6:	f7f1 fe65 	bl	8011074 <osKernelSysTick>
 801f3aa:	4604      	mov	r4, r0
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801f3ac:	b15d      	cbz	r5, 801f3c6 <sys_arch_mbox_fetch+0x2a>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801f3ae:	462a      	mov	r2, r5
 801f3b0:	6831      	ldr	r1, [r6, #0]
 801f3b2:	a801      	add	r0, sp, #4
 801f3b4:	f7f1 ffac 	bl	8011310 <osMessageGet>

    if(event.status == osEventMessage)
 801f3b8:	9b01      	ldr	r3, [sp, #4]
 801f3ba:	2b10      	cmp	r3, #16
 801f3bc:	d009      	beq.n	801f3d2 <sys_arch_mbox_fetch+0x36>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801f3be:	f04f 30ff 	mov.w	r0, #4294967295
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801f3c2:	b005      	add	sp, #20
 801f3c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 801f3c6:	6831      	ldr	r1, [r6, #0]
 801f3c8:	f04f 32ff 	mov.w	r2, #4294967295
 801f3cc:	a801      	add	r0, sp, #4
 801f3ce:	f7f1 ff9f 	bl	8011310 <osMessageGet>
    *msg = (void *)event.value.v;
 801f3d2:	9b02      	ldr	r3, [sp, #8]
 801f3d4:	603b      	str	r3, [r7, #0]
    return (osKernelSysTick() - starttime);
 801f3d6:	f7f1 fe4d 	bl	8011074 <osKernelSysTick>
 801f3da:	1b00      	subs	r0, r0, r4
}
 801f3dc:	b005      	add	sp, #20
 801f3de:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801f3e0 <sys_mbox_valid>:
 801f3e0:	6800      	ldr	r0, [r0, #0]
 801f3e2:	3000      	adds	r0, #0
 801f3e4:	bf18      	it	ne
 801f3e6:	2001      	movne	r0, #1
 801f3e8:	4770      	bx	lr
 801f3ea:	bf00      	nop

0801f3ec <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801f3ec:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801f3ee:	4803      	ldr	r0, [pc, #12]	; (801f3fc <sys_init+0x10>)
 801f3f0:	f7f1 fe98 	bl	8011124 <osMutexCreate>
 801f3f4:	4b02      	ldr	r3, [pc, #8]	; (801f400 <sys_init+0x14>)
 801f3f6:	6018      	str	r0, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801f3f8:	bd08      	pop	{r3, pc}
 801f3fa:	bf00      	nop
 801f3fc:	0803fad0 	.word	0x0803fad0
 801f400:	2003e32c 	.word	0x2003e32c

0801f404 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801f404:	b530      	push	{r4, r5, lr}
 801f406:	b083      	sub	sp, #12
 801f408:	4605      	mov	r5, r0

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801f40a:	2400      	movs	r4, #0
  *mutex = osMutexCreate(osMutex(MUTEX));
 801f40c:	4668      	mov	r0, sp
  osMutexDef(MUTEX);
 801f40e:	e9cd 4400 	strd	r4, r4, [sp]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801f412:	f7f1 fe87 	bl	8011124 <osMutexCreate>
#endif

  if(*mutex == NULL)
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
 801f416:	4a0d      	ldr	r2, [pc, #52]	; (801f44c <sys_mutex_new+0x48>)
  *mutex = osMutexCreate(osMutex(MUTEX));
 801f418:	6028      	str	r0, [r5, #0]
  if(*mutex == NULL)
 801f41a:	b170      	cbz	r0, 801f43a <sys_mutex_new+0x36>
#endif /* SYS_STATS */
    return ERR_MEM;
  }

#if SYS_STATS
  ++lwip_stats.sys.mutex.used;
 801f41c:	f8b2 30fa 	ldrh.w	r3, [r2, #250]	; 0xfa
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801f420:	4620      	mov	r0, r4
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
 801f422:	f8b2 10fc 	ldrh.w	r1, [r2, #252]	; 0xfc
  ++lwip_stats.sys.mutex.used;
 801f426:	3301      	adds	r3, #1
 801f428:	b29b      	uxth	r3, r3
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
 801f42a:	4299      	cmp	r1, r3
  ++lwip_stats.sys.mutex.used;
 801f42c:	f8a2 30fa 	strh.w	r3, [r2, #250]	; 0xfa
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
 801f430:	bf38      	it	cc
 801f432:	f8a2 30fc 	strhcc.w	r3, [r2, #252]	; 0xfc
}
 801f436:	b003      	add	sp, #12
 801f438:	bd30      	pop	{r4, r5, pc}
    ++lwip_stats.sys.mutex.err;
 801f43a:	f8b2 30fe 	ldrh.w	r3, [r2, #254]	; 0xfe
    return ERR_MEM;
 801f43e:	f04f 30ff 	mov.w	r0, #4294967295
    ++lwip_stats.sys.mutex.err;
 801f442:	3301      	adds	r3, #1
 801f444:	f8a2 30fe 	strh.w	r3, [r2, #254]	; 0xfe
    return ERR_MEM;
 801f448:	e7f5      	b.n	801f436 <sys_mutex_new+0x32>
 801f44a:	bf00      	nop
 801f44c:	2003e1cc 	.word	0x2003e1cc

0801f450 <sys_mutex_lock>:
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801f450:	6800      	ldr	r0, [r0, #0]
 801f452:	f04f 31ff 	mov.w	r1, #4294967295
 801f456:	f7f1 be6d 	b.w	8011134 <osMutexWait>
 801f45a:	bf00      	nop

0801f45c <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 801f45c:	6800      	ldr	r0, [r0, #0]
 801f45e:	f7f1 be95 	b.w	801118c <osMutexRelease>
 801f462:	bf00      	nop

0801f464 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801f464:	b510      	push	{r4, lr}
 801f466:	b088      	sub	sp, #32
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801f468:	2400      	movs	r4, #0
 801f46a:	9102      	str	r1, [sp, #8]
  return osThreadCreate(&os_thread_def, arg);
 801f46c:	4611      	mov	r1, r2
{
 801f46e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801f470:	9001      	str	r0, [sp, #4]
  return osThreadCreate(&os_thread_def, arg);
 801f472:	a801      	add	r0, sp, #4
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801f474:	f8cd 4012 	str.w	r4, [sp, #18]
 801f478:	f8cd 4016 	str.w	r4, [sp, #22]
 801f47c:	f8cd 400e 	str.w	r4, [sp, #14]
 801f480:	f8cd 401a 	str.w	r4, [sp, #26]
 801f484:	f8ad 401e 	strh.w	r4, [sp, #30]
 801f488:	9305      	str	r3, [sp, #20]
 801f48a:	f8ad 200c 	strh.w	r2, [sp, #12]
  return osThreadCreate(&os_thread_def, arg);
 801f48e:	f7f1 fdf9 	bl	8011084 <osThreadCreate>
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801f492:	b008      	add	sp, #32
 801f494:	bd10      	pop	{r4, pc}
 801f496:	bf00      	nop

0801f498 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801f498:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801f49a:	2200      	movs	r2, #0
 801f49c:	4910      	ldr	r1, [pc, #64]	; (801f4e0 <MX_USB_DEVICE_Init+0x48>)
 801f49e:	4811      	ldr	r0, [pc, #68]	; (801f4e4 <MX_USB_DEVICE_Init+0x4c>)
 801f4a0:	f7f1 f940 	bl	8010724 <USBD_Init>
 801f4a4:	b9c0      	cbnz	r0, 801f4d8 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801f4a6:	4910      	ldr	r1, [pc, #64]	; (801f4e8 <MX_USB_DEVICE_Init+0x50>)
 801f4a8:	480e      	ldr	r0, [pc, #56]	; (801f4e4 <MX_USB_DEVICE_Init+0x4c>)
 801f4aa:	f7f1 f955 	bl	8010758 <USBD_RegisterClass>
 801f4ae:	b980      	cbnz	r0, 801f4d2 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801f4b0:	490e      	ldr	r1, [pc, #56]	; (801f4ec <MX_USB_DEVICE_Init+0x54>)
 801f4b2:	480c      	ldr	r0, [pc, #48]	; (801f4e4 <MX_USB_DEVICE_Init+0x4c>)
 801f4b4:	f7f1 f908 	bl	80106c8 <USBD_CDC_RegisterInterface>
 801f4b8:	b940      	cbnz	r0, 801f4cc <MX_USB_DEVICE_Init+0x34>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801f4ba:	480a      	ldr	r0, [pc, #40]	; (801f4e4 <MX_USB_DEVICE_Init+0x4c>)
 801f4bc:	f7f1 f960 	bl	8010780 <USBD_Start>
 801f4c0:	b900      	cbnz	r0, 801f4c4 <MX_USB_DEVICE_Init+0x2c>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801f4c2:	bd08      	pop	{r3, pc}
 801f4c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 801f4c8:	f7e2 bdbc 	b.w	8002044 <Error_Handler>
    Error_Handler();
 801f4cc:	f7e2 fdba 	bl	8002044 <Error_Handler>
 801f4d0:	e7f3      	b.n	801f4ba <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 801f4d2:	f7e2 fdb7 	bl	8002044 <Error_Handler>
 801f4d6:	e7eb      	b.n	801f4b0 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 801f4d8:	f7e2 fdb4 	bl	8002044 <Error_Handler>
 801f4dc:	e7e3      	b.n	801f4a6 <MX_USB_DEVICE_Init+0xe>
 801f4de:	bf00      	nop
 801f4e0:	200003f0 	.word	0x200003f0
 801f4e4:	2003e330 	.word	0x2003e330
 801f4e8:	200002c0 	.word	0x200002c0
 801f4ec:	200003dc 	.word	0x200003dc

0801f4f0 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 801f4f0:	2000      	movs	r0, #0
 801f4f2:	4770      	bx	lr

0801f4f4 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 801f4f4:	2000      	movs	r0, #0
 801f4f6:	4770      	bx	lr

0801f4f8 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 801f4f8:	2000      	movs	r0, #0
 801f4fa:	4770      	bx	lr

0801f4fc <CDC_Receive_FS>:
{
 801f4fc:	b510      	push	{r4, lr}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801f4fe:	4c05      	ldr	r4, [pc, #20]	; (801f514 <CDC_Receive_FS+0x18>)
 801f500:	4601      	mov	r1, r0
 801f502:	4620      	mov	r0, r4
 801f504:	f7f1 f8f0 	bl	80106e8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801f508:	4620      	mov	r0, r4
 801f50a:	f7f1 f8f3 	bl	80106f4 <USBD_CDC_ReceivePacket>
}
 801f50e:	2000      	movs	r0, #0
 801f510:	bd10      	pop	{r4, pc}
 801f512:	bf00      	nop
 801f514:	2003e330 	.word	0x2003e330

0801f518 <CDC_Init_FS>:
{
 801f518:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801f51a:	4c06      	ldr	r4, [pc, #24]	; (801f534 <CDC_Init_FS+0x1c>)
 801f51c:	2200      	movs	r2, #0
 801f51e:	4906      	ldr	r1, [pc, #24]	; (801f538 <CDC_Init_FS+0x20>)
 801f520:	4620      	mov	r0, r4
 801f522:	f7f1 f8d9 	bl	80106d8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801f526:	4620      	mov	r0, r4
 801f528:	4904      	ldr	r1, [pc, #16]	; (801f53c <CDC_Init_FS+0x24>)
 801f52a:	f7f1 f8dd 	bl	80106e8 <USBD_CDC_SetRxBuffer>
}
 801f52e:	2000      	movs	r0, #0
 801f530:	bd10      	pop	{r4, pc}
 801f532:	bf00      	nop
 801f534:	2003e330 	.word	0x2003e330
 801f538:	2003ee00 	.word	0x2003ee00
 801f53c:	2003e600 	.word	0x2003e600

0801f540 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801f540:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 801f542:	4801      	ldr	r0, [pc, #4]	; (801f548 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 801f544:	800b      	strh	r3, [r1, #0]
}
 801f546:	4770      	bx	lr
 801f548:	2000041c 	.word	0x2000041c

0801f54c <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801f54c:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 801f54e:	4801      	ldr	r0, [pc, #4]	; (801f554 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 801f550:	800b      	strh	r3, [r1, #0]
}
 801f552:	4770      	bx	lr
 801f554:	20000430 	.word	0x20000430

0801f558 <USBD_FS_USR_BOSDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 801f558:	230c      	movs	r3, #12
  return (uint8_t*)USBD_FS_BOSDesc;
}
 801f55a:	4801      	ldr	r0, [pc, #4]	; (801f560 <USBD_FS_USR_BOSDescriptor+0x8>)
  *length = sizeof(USBD_FS_BOSDesc);
 801f55c:	800b      	strh	r3, [r1, #0]
}
 801f55e:	4770      	bx	lr
 801f560:	20000410 	.word	0x20000410

0801f564 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801f564:	3a01      	subs	r2, #1
 801f566:	b430      	push	{r4, r5}
 801f568:	b2d2      	uxtb	r2, r2
 801f56a:	1c8c      	adds	r4, r1, #2
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 801f56c:	2500      	movs	r5, #0
 801f56e:	eb04 0442 	add.w	r4, r4, r2, lsl #1
    if (((value >> 28)) < 0xA)
 801f572:	0f02      	lsrs	r2, r0, #28
    pbuf[2 * idx + 1] = 0;
 801f574:	704d      	strb	r5, [r1, #1]
 801f576:	3102      	adds	r1, #2
    value = value << 4;
 801f578:	0100      	lsls	r0, r0, #4
 801f57a:	b2d3      	uxtb	r3, r2
    if (((value >> 28)) < 0xA)
 801f57c:	2a09      	cmp	r2, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 801f57e:	f103 0230 	add.w	r2, r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801f582:	f103 0337 	add.w	r3, r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 801f586:	bf94      	ite	ls
 801f588:	f801 2c02 	strbls.w	r2, [r1, #-2]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801f58c:	f801 3c02 	strbhi.w	r3, [r1, #-2]
  for (idx = 0; idx < len; idx++)
 801f590:	428c      	cmp	r4, r1
 801f592:	d1ee      	bne.n	801f572 <IntToUnicode+0xe>
  }
}
 801f594:	bc30      	pop	{r4, r5}
 801f596:	4770      	bx	lr

0801f598 <USBD_FS_SerialStrDescriptor>:
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801f598:	480b      	ldr	r0, [pc, #44]	; (801f5c8 <USBD_FS_SerialStrDescriptor+0x30>)
  *length = USB_SIZ_STRING_SERIAL;
 801f59a:	221a      	movs	r2, #26
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801f59c:	4b0b      	ldr	r3, [pc, #44]	; (801f5cc <USBD_FS_SerialStrDescriptor+0x34>)
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801f59e:	6800      	ldr	r0, [r0, #0]
  deviceserial0 += deviceserial2;
 801f5a0:	681b      	ldr	r3, [r3, #0]
  *length = USB_SIZ_STRING_SERIAL;
 801f5a2:	800a      	strh	r2, [r1, #0]
  if (deviceserial0 != 0)
 801f5a4:	18c0      	adds	r0, r0, r3
 801f5a6:	d101      	bne.n	801f5ac <USBD_FS_SerialStrDescriptor+0x14>
}
 801f5a8:	4809      	ldr	r0, [pc, #36]	; (801f5d0 <USBD_FS_SerialStrDescriptor+0x38>)
 801f5aa:	4770      	bx	lr
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801f5ac:	4b09      	ldr	r3, [pc, #36]	; (801f5d4 <USBD_FS_SerialStrDescriptor+0x3c>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801f5ae:	2208      	movs	r2, #8
 801f5b0:	4909      	ldr	r1, [pc, #36]	; (801f5d8 <USBD_FS_SerialStrDescriptor+0x40>)
{
 801f5b2:	b510      	push	{r4, lr}
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801f5b4:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801f5b6:	f7ff ffd5 	bl	801f564 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801f5ba:	2204      	movs	r2, #4
 801f5bc:	4907      	ldr	r1, [pc, #28]	; (801f5dc <USBD_FS_SerialStrDescriptor+0x44>)
 801f5be:	4620      	mov	r0, r4
 801f5c0:	f7ff ffd0 	bl	801f564 <IntToUnicode>
}
 801f5c4:	4802      	ldr	r0, [pc, #8]	; (801f5d0 <USBD_FS_SerialStrDescriptor+0x38>)
 801f5c6:	bd10      	pop	{r4, pc}
 801f5c8:	1ff0f420 	.word	0x1ff0f420
 801f5cc:	1ff0f428 	.word	0x1ff0f428
 801f5d0:	20000434 	.word	0x20000434
 801f5d4:	1ff0f424 	.word	0x1ff0f424
 801f5d8:	20000436 	.word	0x20000436
 801f5dc:	20000446 	.word	0x20000446

0801f5e0 <USBD_FS_ManufacturerStrDescriptor>:
{
 801f5e0:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801f5e2:	4c04      	ldr	r4, [pc, #16]	; (801f5f4 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 801f5e4:	460a      	mov	r2, r1
 801f5e6:	4804      	ldr	r0, [pc, #16]	; (801f5f8 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 801f5e8:	4621      	mov	r1, r4
 801f5ea:	f7f1 fcab 	bl	8010f44 <USBD_GetString>
}
 801f5ee:	4620      	mov	r0, r4
 801f5f0:	bd10      	pop	{r4, pc}
 801f5f2:	bf00      	nop
 801f5f4:	2003f600 	.word	0x2003f600
 801f5f8:	0803faf4 	.word	0x0803faf4

0801f5fc <USBD_FS_ProductStrDescriptor>:
{
 801f5fc:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801f5fe:	4c04      	ldr	r4, [pc, #16]	; (801f610 <USBD_FS_ProductStrDescriptor+0x14>)
 801f600:	460a      	mov	r2, r1
 801f602:	4804      	ldr	r0, [pc, #16]	; (801f614 <USBD_FS_ProductStrDescriptor+0x18>)
 801f604:	4621      	mov	r1, r4
 801f606:	f7f1 fc9d 	bl	8010f44 <USBD_GetString>
}
 801f60a:	4620      	mov	r0, r4
 801f60c:	bd10      	pop	{r4, pc}
 801f60e:	bf00      	nop
 801f610:	2003f600 	.word	0x2003f600
 801f614:	0803fb08 	.word	0x0803fb08

0801f618 <USBD_FS_ConfigStrDescriptor>:
{
 801f618:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801f61a:	4c04      	ldr	r4, [pc, #16]	; (801f62c <USBD_FS_ConfigStrDescriptor+0x14>)
 801f61c:	460a      	mov	r2, r1
 801f61e:	4804      	ldr	r0, [pc, #16]	; (801f630 <USBD_FS_ConfigStrDescriptor+0x18>)
 801f620:	4621      	mov	r1, r4
 801f622:	f7f1 fc8f 	bl	8010f44 <USBD_GetString>
}
 801f626:	4620      	mov	r0, r4
 801f628:	bd10      	pop	{r4, pc}
 801f62a:	bf00      	nop
 801f62c:	2003f600 	.word	0x2003f600
 801f630:	0803fad8 	.word	0x0803fad8

0801f634 <USBD_FS_InterfaceStrDescriptor>:
{
 801f634:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801f636:	4c04      	ldr	r4, [pc, #16]	; (801f648 <USBD_FS_InterfaceStrDescriptor+0x14>)
 801f638:	460a      	mov	r2, r1
 801f63a:	4804      	ldr	r0, [pc, #16]	; (801f64c <USBD_FS_InterfaceStrDescriptor+0x18>)
 801f63c:	4621      	mov	r1, r4
 801f63e:	f7f1 fc81 	bl	8010f44 <USBD_GetString>
}
 801f642:	4620      	mov	r0, r4
 801f644:	bd10      	pop	{r4, pc}
 801f646:	bf00      	nop
 801f648:	2003f600 	.word	0x2003f600
 801f64c:	0803fae4 	.word	0x0803fae4

0801f650 <HAL_PCD_MspInit>:
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(pcdHandle->Instance==USB_OTG_FS)
 801f650:	6803      	ldr	r3, [r0, #0]
{
 801f652:	b530      	push	{r4, r5, lr}
  if(pcdHandle->Instance==USB_OTG_FS)
 801f654:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 801f658:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801f65a:	f04f 0400 	mov.w	r4, #0
 801f65e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 801f662:	e9cd 4405 	strd	r4, r4, [sp, #20]
 801f666:	9407      	str	r4, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 801f668:	d001      	beq.n	801f66e <HAL_PCD_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801f66a:	b009      	add	sp, #36	; 0x24
 801f66c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801f66e:	4d1e      	ldr	r5, [pc, #120]	; (801f6e8 <HAL_PCD_MspInit+0x98>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801f670:	2202      	movs	r2, #2
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 801f672:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801f676:	2103      	movs	r1, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801f678:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801f67a:	f043 0301 	orr.w	r3, r3, #1
 801f67e:	632b      	str	r3, [r5, #48]	; 0x30
 801f680:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801f682:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801f684:	220a      	movs	r2, #10
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801f686:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 801f68a:	9003      	str	r0, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801f68c:	9106      	str	r1, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801f68e:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801f690:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801f692:	4816      	ldr	r0, [pc, #88]	; (801f6ec <HAL_PCD_MspInit+0x9c>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801f694:	9207      	str	r2, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801f696:	9b00      	ldr	r3, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801f698:	f7e8 ff24 	bl	80084e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 801f69c:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 801f6a0:	a903      	add	r1, sp, #12
 801f6a2:	4812      	ldr	r0, [pc, #72]	; (801f6ec <HAL_PCD_MspInit+0x9c>)
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 801f6a4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801f6a6:	e9cd 4404 	strd	r4, r4, [sp, #16]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 801f6aa:	f7e8 ff1b 	bl	80084e4 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801f6ae:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 801f6b0:	4622      	mov	r2, r4
 801f6b2:	2106      	movs	r1, #6
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801f6b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 801f6b8:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801f6ba:	636b      	str	r3, [r5, #52]	; 0x34
 801f6bc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801f6be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f6c2:	9301      	str	r3, [sp, #4]
 801f6c4:	9b01      	ldr	r3, [sp, #4]
 801f6c6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 801f6c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801f6cc:	646b      	str	r3, [r5, #68]	; 0x44
 801f6ce:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 801f6d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801f6d4:	9302      	str	r3, [sp, #8]
 801f6d6:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 801f6d8:	f7e6 fca0 	bl	800601c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801f6dc:	2043      	movs	r0, #67	; 0x43
 801f6de:	f7e6 fce3 	bl	80060a8 <HAL_NVIC_EnableIRQ>
}
 801f6e2:	b009      	add	sp, #36	; 0x24
 801f6e4:	bd30      	pop	{r4, r5, pc}
 801f6e6:	bf00      	nop
 801f6e8:	40023800 	.word	0x40023800
 801f6ec:	40020000 	.word	0x40020000

0801f6f0 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801f6f0:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 801f6f4:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 801f6f8:	f7f1 b854 	b.w	80107a4 <USBD_LL_SetupStage>

0801f6fc <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801f6fc:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 801f700:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801f704:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 801f708:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 801f70c:	f7f1 b87a 	b.w	8010804 <USBD_LL_DataOutStage>

0801f710 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801f710:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 801f714:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801f718:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 801f71c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801f71e:	f7f1 b8a7 	b.w	8010870 <USBD_LL_DataInStage>
 801f722:	bf00      	nop

0801f724 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801f724:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 801f728:	f7f1 b942 	b.w	80109b0 <USBD_LL_SOF>

0801f72c <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801f72c:	68c1      	ldr	r1, [r0, #12]
{
 801f72e:	b510      	push	{r4, lr}
 801f730:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801f732:	b121      	cbz	r1, 801f73e <HAL_PCD_ResetCallback+0x12>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801f734:	2902      	cmp	r1, #2
 801f736:	d00c      	beq.n	801f752 <HAL_PCD_ResetCallback+0x26>
  {
    speed = USBD_SPEED_FULL;
  }
  else
  {
    Error_Handler();
 801f738:	f7e2 fc84 	bl	8002044 <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801f73c:	2101      	movs	r1, #1
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801f73e:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
 801f742:	f7f1 f91d 	bl	8010980 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801f746:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
}
 801f74a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801f74e:	f7f1 b8ef 	b.w	8010930 <USBD_LL_Reset>
    speed = USBD_SPEED_FULL;
 801f752:	2101      	movs	r1, #1
 801f754:	e7f3      	b.n	801f73e <HAL_PCD_ResetCallback+0x12>
 801f756:	bf00      	nop

0801f758 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f758:	b510      	push	{r4, lr}
 801f75a:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801f75c:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 801f760:	f7f1 f912 	bl	8010988 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801f764:	6822      	ldr	r2, [r4, #0]
 801f766:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 801f76a:	f043 0301 	orr.w	r3, r3, #1
 801f76e:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801f772:	6a23      	ldr	r3, [r4, #32]
 801f774:	b123      	cbz	r3, 801f780 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801f776:	4a03      	ldr	r2, [pc, #12]	; (801f784 <HAL_PCD_SuspendCallback+0x2c>)
 801f778:	6913      	ldr	r3, [r2, #16]
 801f77a:	f043 0306 	orr.w	r3, r3, #6
 801f77e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801f780:	bd10      	pop	{r4, pc}
 801f782:	bf00      	nop
 801f784:	e000ed00 	.word	0xe000ed00

0801f788 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801f788:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 801f78c:	f7f1 b906 	b.w	801099c <USBD_LL_Resume>

0801f790 <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801f790:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 801f794:	f7f1 b91c 	b.w	80109d0 <USBD_LL_IsoOUTIncomplete>

0801f798 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801f798:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 801f79c:	f7f1 b916 	b.w	80109cc <USBD_LL_IsoINIncomplete>

0801f7a0 <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801f7a0:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 801f7a4:	f7f1 b916 	b.w	80109d4 <USBD_LL_DevConnected>

0801f7a8 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801f7a8:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 801f7ac:	f7f1 b914 	b.w	80109d8 <USBD_LL_DevDisconnected>

0801f7b0 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801f7b0:	7802      	ldrb	r2, [r0, #0]
 801f7b2:	b10a      	cbz	r2, 801f7b8 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 801f7b4:	2000      	movs	r0, #0
 801f7b6:	4770      	bx	lr
  hpcd_USB_OTG_FS.pData = pdev;
 801f7b8:	4b15      	ldr	r3, [pc, #84]	; (801f810 <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 801f7ba:	2101      	movs	r1, #1
{
 801f7bc:	b570      	push	{r4, r5, r6, lr}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801f7be:	2402      	movs	r4, #2
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801f7c0:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 801f7c4:	2506      	movs	r5, #6
  hpcd_USB_OTG_FS.pData = pdev;
 801f7c6:	f8c3 0400 	str.w	r0, [r3, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 801f7ca:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801f7ce:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801f7d0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801f7d2:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801f7d4:	60dc      	str	r4, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 801f7d6:	62d9      	str	r1, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801f7d8:	e9c3 2208 	strd	r2, r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 801f7dc:	e9c3 6500 	strd	r6, r5, [r3]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 801f7e0:	e9c3 4106 	strd	r4, r1, [r3, #24]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801f7e4:	f7e9 fe7c 	bl	80094e0 <HAL_PCD_Init>
 801f7e8:	b978      	cbnz	r0, 801f80a <USBD_LL_Init+0x5a>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801f7ea:	2180      	movs	r1, #128	; 0x80
 801f7ec:	4808      	ldr	r0, [pc, #32]	; (801f810 <USBD_LL_Init+0x60>)
 801f7ee:	f7ea fbeb 	bl	8009fc8 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801f7f2:	2240      	movs	r2, #64	; 0x40
 801f7f4:	2100      	movs	r1, #0
 801f7f6:	4806      	ldr	r0, [pc, #24]	; (801f810 <USBD_LL_Init+0x60>)
 801f7f8:	f7ea fbc2 	bl	8009f80 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801f7fc:	2280      	movs	r2, #128	; 0x80
 801f7fe:	2101      	movs	r1, #1
 801f800:	4803      	ldr	r0, [pc, #12]	; (801f810 <USBD_LL_Init+0x60>)
 801f802:	f7ea fbbd 	bl	8009f80 <HAL_PCDEx_SetTxFiFo>
}
 801f806:	2000      	movs	r0, #0
 801f808:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler( );
 801f80a:	f7e2 fc1b 	bl	8002044 <Error_Handler>
 801f80e:	e7ec      	b.n	801f7ea <USBD_LL_Init+0x3a>
 801f810:	2003f800 	.word	0x2003f800

0801f814 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801f814:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 801f816:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 801f81a:	f7e9 ff0b 	bl	8009634 <HAL_PCD_Start>
 801f81e:	2803      	cmp	r0, #3
 801f820:	d802      	bhi.n	801f828 <USBD_LL_Start+0x14>
 801f822:	4b02      	ldr	r3, [pc, #8]	; (801f82c <USBD_LL_Start+0x18>)
 801f824:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 801f826:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_Start(pdev->pData);
 801f828:	2003      	movs	r0, #3
}
 801f82a:	bd08      	pop	{r3, pc}
 801f82c:	0803fb20 	.word	0x0803fb20

0801f830 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801f830:	b510      	push	{r4, lr}
 801f832:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801f834:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 801f838:	4613      	mov	r3, r2
 801f83a:	4622      	mov	r2, r4
 801f83c:	f7ea fa5c 	bl	8009cf8 <HAL_PCD_EP_Open>
 801f840:	2803      	cmp	r0, #3
 801f842:	d802      	bhi.n	801f84a <USBD_LL_OpenEP+0x1a>
 801f844:	4b02      	ldr	r3, [pc, #8]	; (801f850 <USBD_LL_OpenEP+0x20>)
 801f846:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 801f848:	bd10      	pop	{r4, pc}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801f84a:	2003      	movs	r0, #3
}
 801f84c:	bd10      	pop	{r4, pc}
 801f84e:	bf00      	nop
 801f850:	0803fb20 	.word	0x0803fb20

0801f854 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801f854:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801f856:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 801f85a:	f7ea fa87 	bl	8009d6c <HAL_PCD_EP_Close>
 801f85e:	2803      	cmp	r0, #3
 801f860:	d802      	bhi.n	801f868 <USBD_LL_CloseEP+0x14>
 801f862:	4b02      	ldr	r3, [pc, #8]	; (801f86c <USBD_LL_CloseEP+0x18>)
 801f864:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 801f866:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801f868:	2003      	movs	r0, #3
}
 801f86a:	bd08      	pop	{r3, pc}
 801f86c:	0803fb20 	.word	0x0803fb20

0801f870 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801f870:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801f872:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 801f876:	f7ea fb03 	bl	8009e80 <HAL_PCD_EP_SetStall>
 801f87a:	2803      	cmp	r0, #3
 801f87c:	d802      	bhi.n	801f884 <USBD_LL_StallEP+0x14>
 801f87e:	4b02      	ldr	r3, [pc, #8]	; (801f888 <USBD_LL_StallEP+0x18>)
 801f880:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 801f882:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801f884:	2003      	movs	r0, #3
}
 801f886:	bd08      	pop	{r3, pc}
 801f888:	0803fb20 	.word	0x0803fb20

0801f88c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801f88c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801f88e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 801f892:	f7ea fb39 	bl	8009f08 <HAL_PCD_EP_ClrStall>
 801f896:	2803      	cmp	r0, #3
 801f898:	d802      	bhi.n	801f8a0 <USBD_LL_ClearStallEP+0x14>
 801f89a:	4b02      	ldr	r3, [pc, #8]	; (801f8a4 <USBD_LL_ClearStallEP+0x18>)
 801f89c:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 801f89e:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801f8a0:	2003      	movs	r0, #3
}
 801f8a2:	bd08      	pop	{r3, pc}
 801f8a4:	0803fb20 	.word	0x0803fb20

0801f8a8 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;

  if((ep_addr & 0x80) == 0x80)
 801f8a8:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801f8aa:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 801f8ae:	d406      	bmi.n	801f8be <USBD_LL_IsStallEP+0x16>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801f8b0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 801f8b4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801f8b8:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
  }
}
 801f8bc:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801f8be:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 801f8c2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 801f8c6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801f8ca:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 801f8ce:	4770      	bx	lr

0801f8d0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801f8d0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801f8d2:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 801f8d6:	f7ea f9fb 	bl	8009cd0 <HAL_PCD_SetAddress>
 801f8da:	2803      	cmp	r0, #3
 801f8dc:	d802      	bhi.n	801f8e4 <USBD_LL_SetUSBAddress+0x14>
 801f8de:	4b02      	ldr	r3, [pc, #8]	; (801f8e8 <USBD_LL_SetUSBAddress+0x18>)
 801f8e0:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 801f8e2:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801f8e4:	2003      	movs	r0, #3
}
 801f8e6:	bd08      	pop	{r3, pc}
 801f8e8:	0803fb20 	.word	0x0803fb20

0801f8ec <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801f8ec:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801f8ee:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 801f8f2:	f7ea faa1 	bl	8009e38 <HAL_PCD_EP_Transmit>
 801f8f6:	2803      	cmp	r0, #3
 801f8f8:	d802      	bhi.n	801f900 <USBD_LL_Transmit+0x14>
 801f8fa:	4b02      	ldr	r3, [pc, #8]	; (801f904 <USBD_LL_Transmit+0x18>)
 801f8fc:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 801f8fe:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801f900:	2003      	movs	r0, #3
}
 801f902:	bd08      	pop	{r3, pc}
 801f904:	0803fb20 	.word	0x0803fb20

0801f908 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801f908:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801f90a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 801f90e:	f7ea fa61 	bl	8009dd4 <HAL_PCD_EP_Receive>
 801f912:	2803      	cmp	r0, #3
 801f914:	d802      	bhi.n	801f91c <USBD_LL_PrepareReceive+0x14>
 801f916:	4b02      	ldr	r3, [pc, #8]	; (801f920 <USBD_LL_PrepareReceive+0x18>)
 801f918:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 801f91a:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801f91c:	2003      	movs	r0, #3
}
 801f91e:	bd08      	pop	{r3, pc}
 801f920:	0803fb20 	.word	0x0803fb20

0801f924 <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801f924:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 801f928:	f7ea ba7c 	b.w	8009e24 <HAL_PCD_EP_GetRxCount>

0801f92c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801f92c:	b510      	push	{r4, lr}
 801f92e:	4604      	mov	r4, r0
  switch (msg)
 801f930:	b1a1      	cbz	r1, 801f95c <HAL_PCDEx_LPM_Callback+0x30>
 801f932:	2901      	cmp	r1, #1
 801f934:	d111      	bne.n	801f95a <HAL_PCDEx_LPM_Callback+0x2e>
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
    USBD_LL_Resume(hpcd->pData);
    break;

  case PCD_LPM_L1_ACTIVE:
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801f936:	6802      	ldr	r2, [r0, #0]
    USBD_LL_Suspend(hpcd->pData);
 801f938:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801f93c:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 801f940:	f043 0301 	orr.w	r3, r3, #1
 801f944:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 801f948:	f7f1 f81e 	bl	8010988 <USBD_LL_Suspend>

    /* Enter in STOP mode. */
    if (hpcd->Init.low_power_enable)
 801f94c:	6a23      	ldr	r3, [r4, #32]
 801f94e:	b123      	cbz	r3, 801f95a <HAL_PCDEx_LPM_Callback+0x2e>
    {
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801f950:	4a0d      	ldr	r2, [pc, #52]	; (801f988 <HAL_PCDEx_LPM_Callback+0x5c>)
 801f952:	6913      	ldr	r3, [r2, #16]
 801f954:	f043 0306 	orr.w	r3, r3, #6
 801f958:	6113      	str	r3, [r2, #16]
    }
    break;
  }
}
 801f95a:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 801f95c:	6a03      	ldr	r3, [r0, #32]
 801f95e:	b133      	cbz	r3, 801f96e <HAL_PCDEx_LPM_Callback+0x42>
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 801f960:	f7e2 fb78 	bl	8002054 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801f964:	4a08      	ldr	r2, [pc, #32]	; (801f988 <HAL_PCDEx_LPM_Callback+0x5c>)
 801f966:	6913      	ldr	r3, [r2, #16]
 801f968:	f023 0306 	bic.w	r3, r3, #6
 801f96c:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801f96e:	6822      	ldr	r2, [r4, #0]
    USBD_LL_Resume(hpcd->pData);
 801f970:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801f974:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 801f978:	f023 0301 	bic.w	r3, r3, #1
}
 801f97c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801f980:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Resume(hpcd->pData);
 801f984:	f7f1 b80a 	b.w	801099c <USBD_LL_Resume>
 801f988:	e000ed00 	.word	0xe000ed00

0801f98c <atoi>:
 801f98c:	220a      	movs	r2, #10
 801f98e:	2100      	movs	r1, #0
 801f990:	f002 b942 	b.w	8021c18 <strtol>

0801f994 <ctime>:
 801f994:	b508      	push	{r3, lr}
 801f996:	f000 f829 	bl	801f9ec <localtime>
 801f99a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801f99e:	f002 bd05 	b.w	80223ac <asctime>
	...

0801f9a4 <__libc_init_array>:
 801f9a4:	b570      	push	{r4, r5, r6, lr}
 801f9a6:	4e0d      	ldr	r6, [pc, #52]	; (801f9dc <__libc_init_array+0x38>)
 801f9a8:	4c0d      	ldr	r4, [pc, #52]	; (801f9e0 <__libc_init_array+0x3c>)
 801f9aa:	1ba4      	subs	r4, r4, r6
 801f9ac:	10a4      	asrs	r4, r4, #2
 801f9ae:	2500      	movs	r5, #0
 801f9b0:	42a5      	cmp	r5, r4
 801f9b2:	d109      	bne.n	801f9c8 <__libc_init_array+0x24>
 801f9b4:	4e0b      	ldr	r6, [pc, #44]	; (801f9e4 <__libc_init_array+0x40>)
 801f9b6:	4c0c      	ldr	r4, [pc, #48]	; (801f9e8 <__libc_init_array+0x44>)
 801f9b8:	f004 ffb0 	bl	802491c <_init>
 801f9bc:	1ba4      	subs	r4, r4, r6
 801f9be:	10a4      	asrs	r4, r4, #2
 801f9c0:	2500      	movs	r5, #0
 801f9c2:	42a5      	cmp	r5, r4
 801f9c4:	d105      	bne.n	801f9d2 <__libc_init_array+0x2e>
 801f9c6:	bd70      	pop	{r4, r5, r6, pc}
 801f9c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801f9cc:	4798      	blx	r3
 801f9ce:	3501      	adds	r5, #1
 801f9d0:	e7ee      	b.n	801f9b0 <__libc_init_array+0xc>
 801f9d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801f9d6:	4798      	blx	r3
 801f9d8:	3501      	adds	r5, #1
 801f9da:	e7f2      	b.n	801f9c2 <__libc_init_array+0x1e>
 801f9dc:	080401e0 	.word	0x080401e0
 801f9e0:	080401e0 	.word	0x080401e0
 801f9e4:	080401e0 	.word	0x080401e0
 801f9e8:	080401e4 	.word	0x080401e4

0801f9ec <localtime>:
 801f9ec:	b538      	push	{r3, r4, r5, lr}
 801f9ee:	4b07      	ldr	r3, [pc, #28]	; (801fa0c <localtime+0x20>)
 801f9f0:	681c      	ldr	r4, [r3, #0]
 801f9f2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801f9f4:	4605      	mov	r5, r0
 801f9f6:	b91b      	cbnz	r3, 801fa00 <localtime+0x14>
 801f9f8:	2024      	movs	r0, #36	; 0x24
 801f9fa:	f000 f907 	bl	801fc0c <malloc>
 801f9fe:	63e0      	str	r0, [r4, #60]	; 0x3c
 801fa00:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801fa02:	4628      	mov	r0, r5
 801fa04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fa08:	f000 b802 	b.w	801fa10 <localtime_r>
 801fa0c:	20000450 	.word	0x20000450

0801fa10 <localtime_r>:
 801fa10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fa14:	460c      	mov	r4, r1
 801fa16:	4680      	mov	r8, r0
 801fa18:	f003 fcc0 	bl	802339c <__gettzinfo>
 801fa1c:	4621      	mov	r1, r4
 801fa1e:	4607      	mov	r7, r0
 801fa20:	4640      	mov	r0, r8
 801fa22:	f003 fcbf 	bl	80233a4 <gmtime_r>
 801fa26:	6946      	ldr	r6, [r0, #20]
 801fa28:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 801fa2c:	07b2      	lsls	r2, r6, #30
 801fa2e:	4604      	mov	r4, r0
 801fa30:	d105      	bne.n	801fa3e <localtime_r+0x2e>
 801fa32:	2264      	movs	r2, #100	; 0x64
 801fa34:	fb96 f3f2 	sdiv	r3, r6, r2
 801fa38:	fb02 6313 	mls	r3, r2, r3, r6
 801fa3c:	bb13      	cbnz	r3, 801fa84 <localtime_r+0x74>
 801fa3e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801fa42:	fb96 f5f3 	sdiv	r5, r6, r3
 801fa46:	fb03 6515 	mls	r5, r3, r5, r6
 801fa4a:	fab5 f585 	clz	r5, r5
 801fa4e:	096d      	lsrs	r5, r5, #5
 801fa50:	4b63      	ldr	r3, [pc, #396]	; (801fbe0 <localtime_r+0x1d0>)
 801fa52:	2230      	movs	r2, #48	; 0x30
 801fa54:	fb02 3505 	mla	r5, r2, r5, r3
 801fa58:	f002 fa3e 	bl	8021ed8 <__tz_lock>
 801fa5c:	f002 fa3e 	bl	8021edc <_tzset_unlocked>
 801fa60:	4b60      	ldr	r3, [pc, #384]	; (801fbe4 <localtime_r+0x1d4>)
 801fa62:	681b      	ldr	r3, [r3, #0]
 801fa64:	b323      	cbz	r3, 801fab0 <localtime_r+0xa0>
 801fa66:	687b      	ldr	r3, [r7, #4]
 801fa68:	42b3      	cmp	r3, r6
 801fa6a:	d10d      	bne.n	801fa88 <localtime_r+0x78>
 801fa6c:	683e      	ldr	r6, [r7, #0]
 801fa6e:	e9d8 0100 	ldrd	r0, r1, [r8]
 801fa72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801fa76:	b97e      	cbnz	r6, 801fa98 <localtime_r+0x88>
 801fa78:	4290      	cmp	r0, r2
 801fa7a:	eb71 0303 	sbcs.w	r3, r1, r3
 801fa7e:	db0f      	blt.n	801faa0 <localtime_r+0x90>
 801fa80:	2301      	movs	r3, #1
 801fa82:	e015      	b.n	801fab0 <localtime_r+0xa0>
 801fa84:	2501      	movs	r5, #1
 801fa86:	e7e3      	b.n	801fa50 <localtime_r+0x40>
 801fa88:	4630      	mov	r0, r6
 801fa8a:	f002 f97d 	bl	8021d88 <__tzcalc_limits>
 801fa8e:	2800      	cmp	r0, #0
 801fa90:	d1ec      	bne.n	801fa6c <localtime_r+0x5c>
 801fa92:	f04f 33ff 	mov.w	r3, #4294967295
 801fa96:	e00b      	b.n	801fab0 <localtime_r+0xa0>
 801fa98:	4290      	cmp	r0, r2
 801fa9a:	eb71 0303 	sbcs.w	r3, r1, r3
 801fa9e:	db58      	blt.n	801fb52 <localtime_r+0x142>
 801faa0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801faa4:	4290      	cmp	r0, r2
 801faa6:	eb71 0303 	sbcs.w	r3, r1, r3
 801faaa:	bfb4      	ite	lt
 801faac:	2301      	movlt	r3, #1
 801faae:	2300      	movge	r3, #0
 801fab0:	6223      	str	r3, [r4, #32]
 801fab2:	6a23      	ldr	r3, [r4, #32]
 801fab4:	2b01      	cmp	r3, #1
 801fab6:	bf0c      	ite	eq
 801fab8:	6d39      	ldreq	r1, [r7, #80]	; 0x50
 801faba:	6ab9      	ldrne	r1, [r7, #40]	; 0x28
 801fabc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801fac0:	203c      	movs	r0, #60	; 0x3c
 801fac2:	fb91 f6f3 	sdiv	r6, r1, r3
 801fac6:	fb03 1316 	mls	r3, r3, r6, r1
 801faca:	6861      	ldr	r1, [r4, #4]
 801facc:	fb93 f2f0 	sdiv	r2, r3, r0
 801fad0:	fb00 3012 	mls	r0, r0, r2, r3
 801fad4:	6823      	ldr	r3, [r4, #0]
 801fad6:	1a89      	subs	r1, r1, r2
 801fad8:	68a2      	ldr	r2, [r4, #8]
 801fada:	6061      	str	r1, [r4, #4]
 801fadc:	1a1b      	subs	r3, r3, r0
 801fade:	1b92      	subs	r2, r2, r6
 801fae0:	2b3b      	cmp	r3, #59	; 0x3b
 801fae2:	6023      	str	r3, [r4, #0]
 801fae4:	60a2      	str	r2, [r4, #8]
 801fae6:	dd36      	ble.n	801fb56 <localtime_r+0x146>
 801fae8:	3101      	adds	r1, #1
 801faea:	6061      	str	r1, [r4, #4]
 801faec:	3b3c      	subs	r3, #60	; 0x3c
 801faee:	6023      	str	r3, [r4, #0]
 801faf0:	6863      	ldr	r3, [r4, #4]
 801faf2:	2b3b      	cmp	r3, #59	; 0x3b
 801faf4:	dd35      	ble.n	801fb62 <localtime_r+0x152>
 801faf6:	3201      	adds	r2, #1
 801faf8:	60a2      	str	r2, [r4, #8]
 801fafa:	3b3c      	subs	r3, #60	; 0x3c
 801fafc:	6063      	str	r3, [r4, #4]
 801fafe:	68a3      	ldr	r3, [r4, #8]
 801fb00:	2b17      	cmp	r3, #23
 801fb02:	dd34      	ble.n	801fb6e <localtime_r+0x15e>
 801fb04:	69e2      	ldr	r2, [r4, #28]
 801fb06:	3201      	adds	r2, #1
 801fb08:	61e2      	str	r2, [r4, #28]
 801fb0a:	69a2      	ldr	r2, [r4, #24]
 801fb0c:	3201      	adds	r2, #1
 801fb0e:	2a06      	cmp	r2, #6
 801fb10:	bfc8      	it	gt
 801fb12:	2200      	movgt	r2, #0
 801fb14:	61a2      	str	r2, [r4, #24]
 801fb16:	68e2      	ldr	r2, [r4, #12]
 801fb18:	3b18      	subs	r3, #24
 801fb1a:	3201      	adds	r2, #1
 801fb1c:	60a3      	str	r3, [r4, #8]
 801fb1e:	6923      	ldr	r3, [r4, #16]
 801fb20:	60e2      	str	r2, [r4, #12]
 801fb22:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 801fb26:	428a      	cmp	r2, r1
 801fb28:	dd0e      	ble.n	801fb48 <localtime_r+0x138>
 801fb2a:	3301      	adds	r3, #1
 801fb2c:	2b0c      	cmp	r3, #12
 801fb2e:	bf0c      	ite	eq
 801fb30:	6963      	ldreq	r3, [r4, #20]
 801fb32:	6123      	strne	r3, [r4, #16]
 801fb34:	eba2 0201 	sub.w	r2, r2, r1
 801fb38:	60e2      	str	r2, [r4, #12]
 801fb3a:	bf01      	itttt	eq
 801fb3c:	3301      	addeq	r3, #1
 801fb3e:	2200      	moveq	r2, #0
 801fb40:	6122      	streq	r2, [r4, #16]
 801fb42:	6163      	streq	r3, [r4, #20]
 801fb44:	bf08      	it	eq
 801fb46:	61e2      	streq	r2, [r4, #28]
 801fb48:	f002 f9c7 	bl	8021eda <__tz_unlock>
 801fb4c:	4620      	mov	r0, r4
 801fb4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fb52:	2300      	movs	r3, #0
 801fb54:	e7ac      	b.n	801fab0 <localtime_r+0xa0>
 801fb56:	2b00      	cmp	r3, #0
 801fb58:	daca      	bge.n	801faf0 <localtime_r+0xe0>
 801fb5a:	3901      	subs	r1, #1
 801fb5c:	6061      	str	r1, [r4, #4]
 801fb5e:	333c      	adds	r3, #60	; 0x3c
 801fb60:	e7c5      	b.n	801faee <localtime_r+0xde>
 801fb62:	2b00      	cmp	r3, #0
 801fb64:	dacb      	bge.n	801fafe <localtime_r+0xee>
 801fb66:	3a01      	subs	r2, #1
 801fb68:	60a2      	str	r2, [r4, #8]
 801fb6a:	333c      	adds	r3, #60	; 0x3c
 801fb6c:	e7c6      	b.n	801fafc <localtime_r+0xec>
 801fb6e:	2b00      	cmp	r3, #0
 801fb70:	daea      	bge.n	801fb48 <localtime_r+0x138>
 801fb72:	69e2      	ldr	r2, [r4, #28]
 801fb74:	3a01      	subs	r2, #1
 801fb76:	61e2      	str	r2, [r4, #28]
 801fb78:	69a2      	ldr	r2, [r4, #24]
 801fb7a:	3a01      	subs	r2, #1
 801fb7c:	bf48      	it	mi
 801fb7e:	2206      	movmi	r2, #6
 801fb80:	61a2      	str	r2, [r4, #24]
 801fb82:	68e2      	ldr	r2, [r4, #12]
 801fb84:	3318      	adds	r3, #24
 801fb86:	3a01      	subs	r2, #1
 801fb88:	60e2      	str	r2, [r4, #12]
 801fb8a:	60a3      	str	r3, [r4, #8]
 801fb8c:	2a00      	cmp	r2, #0
 801fb8e:	d1db      	bne.n	801fb48 <localtime_r+0x138>
 801fb90:	6923      	ldr	r3, [r4, #16]
 801fb92:	3b01      	subs	r3, #1
 801fb94:	d405      	bmi.n	801fba2 <localtime_r+0x192>
 801fb96:	6123      	str	r3, [r4, #16]
 801fb98:	6923      	ldr	r3, [r4, #16]
 801fb9a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801fb9e:	60e3      	str	r3, [r4, #12]
 801fba0:	e7d2      	b.n	801fb48 <localtime_r+0x138>
 801fba2:	6962      	ldr	r2, [r4, #20]
 801fba4:	230b      	movs	r3, #11
 801fba6:	1e51      	subs	r1, r2, #1
 801fba8:	6123      	str	r3, [r4, #16]
 801fbaa:	078b      	lsls	r3, r1, #30
 801fbac:	6161      	str	r1, [r4, #20]
 801fbae:	f202 726b 	addw	r2, r2, #1899	; 0x76b
 801fbb2:	d105      	bne.n	801fbc0 <localtime_r+0x1b0>
 801fbb4:	2164      	movs	r1, #100	; 0x64
 801fbb6:	fb92 f3f1 	sdiv	r3, r2, r1
 801fbba:	fb01 2313 	mls	r3, r1, r3, r2
 801fbbe:	b963      	cbnz	r3, 801fbda <localtime_r+0x1ca>
 801fbc0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801fbc4:	fb92 f3f1 	sdiv	r3, r2, r1
 801fbc8:	fb01 2313 	mls	r3, r1, r3, r2
 801fbcc:	fab3 f383 	clz	r3, r3
 801fbd0:	095b      	lsrs	r3, r3, #5
 801fbd2:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 801fbd6:	61e3      	str	r3, [r4, #28]
 801fbd8:	e7de      	b.n	801fb98 <localtime_r+0x188>
 801fbda:	2301      	movs	r3, #1
 801fbdc:	e7f9      	b.n	801fbd2 <localtime_r+0x1c2>
 801fbde:	bf00      	nop
 801fbe0:	0803fb94 	.word	0x0803fb94
 801fbe4:	2002a77c 	.word	0x2002a77c

0801fbe8 <__locale_ctype_ptr_l>:
 801fbe8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801fbec:	4770      	bx	lr
	...

0801fbf0 <__locale_ctype_ptr>:
 801fbf0:	4b04      	ldr	r3, [pc, #16]	; (801fc04 <__locale_ctype_ptr+0x14>)
 801fbf2:	4a05      	ldr	r2, [pc, #20]	; (801fc08 <__locale_ctype_ptr+0x18>)
 801fbf4:	681b      	ldr	r3, [r3, #0]
 801fbf6:	6a1b      	ldr	r3, [r3, #32]
 801fbf8:	2b00      	cmp	r3, #0
 801fbfa:	bf08      	it	eq
 801fbfc:	4613      	moveq	r3, r2
 801fbfe:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801fc02:	4770      	bx	lr
 801fc04:	20000450 	.word	0x20000450
 801fc08:	200004b4 	.word	0x200004b4

0801fc0c <malloc>:
 801fc0c:	4b02      	ldr	r3, [pc, #8]	; (801fc18 <malloc+0xc>)
 801fc0e:	4601      	mov	r1, r0
 801fc10:	6818      	ldr	r0, [r3, #0]
 801fc12:	f000 bb3b 	b.w	802028c <_malloc_r>
 801fc16:	bf00      	nop
 801fc18:	20000450 	.word	0x20000450

0801fc1c <free>:
 801fc1c:	4b02      	ldr	r3, [pc, #8]	; (801fc28 <free+0xc>)
 801fc1e:	4601      	mov	r1, r0
 801fc20:	6818      	ldr	r0, [r3, #0]
 801fc22:	f000 bae5 	b.w	80201f0 <_free_r>
 801fc26:	bf00      	nop
 801fc28:	20000450 	.word	0x20000450

0801fc2c <__ascii_mbtowc>:
 801fc2c:	b082      	sub	sp, #8
 801fc2e:	b901      	cbnz	r1, 801fc32 <__ascii_mbtowc+0x6>
 801fc30:	a901      	add	r1, sp, #4
 801fc32:	b142      	cbz	r2, 801fc46 <__ascii_mbtowc+0x1a>
 801fc34:	b14b      	cbz	r3, 801fc4a <__ascii_mbtowc+0x1e>
 801fc36:	7813      	ldrb	r3, [r2, #0]
 801fc38:	600b      	str	r3, [r1, #0]
 801fc3a:	7812      	ldrb	r2, [r2, #0]
 801fc3c:	1c10      	adds	r0, r2, #0
 801fc3e:	bf18      	it	ne
 801fc40:	2001      	movne	r0, #1
 801fc42:	b002      	add	sp, #8
 801fc44:	4770      	bx	lr
 801fc46:	4610      	mov	r0, r2
 801fc48:	e7fb      	b.n	801fc42 <__ascii_mbtowc+0x16>
 801fc4a:	f06f 0001 	mvn.w	r0, #1
 801fc4e:	e7f8      	b.n	801fc42 <__ascii_mbtowc+0x16>

0801fc50 <memcmp>:
 801fc50:	b530      	push	{r4, r5, lr}
 801fc52:	2400      	movs	r4, #0
 801fc54:	42a2      	cmp	r2, r4
 801fc56:	d101      	bne.n	801fc5c <memcmp+0xc>
 801fc58:	2000      	movs	r0, #0
 801fc5a:	e007      	b.n	801fc6c <memcmp+0x1c>
 801fc5c:	5d03      	ldrb	r3, [r0, r4]
 801fc5e:	3401      	adds	r4, #1
 801fc60:	190d      	adds	r5, r1, r4
 801fc62:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801fc66:	42ab      	cmp	r3, r5
 801fc68:	d0f4      	beq.n	801fc54 <memcmp+0x4>
 801fc6a:	1b58      	subs	r0, r3, r5
 801fc6c:	bd30      	pop	{r4, r5, pc}

0801fc6e <memcpy>:
 801fc6e:	b510      	push	{r4, lr}
 801fc70:	1e43      	subs	r3, r0, #1
 801fc72:	440a      	add	r2, r1
 801fc74:	4291      	cmp	r1, r2
 801fc76:	d100      	bne.n	801fc7a <memcpy+0xc>
 801fc78:	bd10      	pop	{r4, pc}
 801fc7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801fc7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801fc82:	e7f7      	b.n	801fc74 <memcpy+0x6>

0801fc84 <memmove>:
 801fc84:	4288      	cmp	r0, r1
 801fc86:	b510      	push	{r4, lr}
 801fc88:	eb01 0302 	add.w	r3, r1, r2
 801fc8c:	d807      	bhi.n	801fc9e <memmove+0x1a>
 801fc8e:	1e42      	subs	r2, r0, #1
 801fc90:	4299      	cmp	r1, r3
 801fc92:	d00a      	beq.n	801fcaa <memmove+0x26>
 801fc94:	f811 4b01 	ldrb.w	r4, [r1], #1
 801fc98:	f802 4f01 	strb.w	r4, [r2, #1]!
 801fc9c:	e7f8      	b.n	801fc90 <memmove+0xc>
 801fc9e:	4283      	cmp	r3, r0
 801fca0:	d9f5      	bls.n	801fc8e <memmove+0xa>
 801fca2:	1881      	adds	r1, r0, r2
 801fca4:	1ad2      	subs	r2, r2, r3
 801fca6:	42d3      	cmn	r3, r2
 801fca8:	d100      	bne.n	801fcac <memmove+0x28>
 801fcaa:	bd10      	pop	{r4, pc}
 801fcac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801fcb0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801fcb4:	e7f7      	b.n	801fca6 <memmove+0x22>

0801fcb6 <memset>:
 801fcb6:	4402      	add	r2, r0
 801fcb8:	4603      	mov	r3, r0
 801fcba:	4293      	cmp	r3, r2
 801fcbc:	d100      	bne.n	801fcc0 <memset+0xa>
 801fcbe:	4770      	bx	lr
 801fcc0:	f803 1b01 	strb.w	r1, [r3], #1
 801fcc4:	e7f9      	b.n	801fcba <memset+0x4>
	...

0801fcc8 <validate_structure>:
 801fcc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801fcca:	6801      	ldr	r1, [r0, #0]
 801fccc:	293b      	cmp	r1, #59	; 0x3b
 801fcce:	4604      	mov	r4, r0
 801fcd0:	d911      	bls.n	801fcf6 <validate_structure+0x2e>
 801fcd2:	223c      	movs	r2, #60	; 0x3c
 801fcd4:	4668      	mov	r0, sp
 801fcd6:	f002 fbb5 	bl	8022444 <div>
 801fcda:	9a01      	ldr	r2, [sp, #4]
 801fcdc:	6863      	ldr	r3, [r4, #4]
 801fcde:	9900      	ldr	r1, [sp, #0]
 801fce0:	2a00      	cmp	r2, #0
 801fce2:	440b      	add	r3, r1
 801fce4:	6063      	str	r3, [r4, #4]
 801fce6:	bfbb      	ittet	lt
 801fce8:	323c      	addlt	r2, #60	; 0x3c
 801fcea:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801fcee:	6022      	strge	r2, [r4, #0]
 801fcf0:	6022      	strlt	r2, [r4, #0]
 801fcf2:	bfb8      	it	lt
 801fcf4:	6063      	strlt	r3, [r4, #4]
 801fcf6:	6861      	ldr	r1, [r4, #4]
 801fcf8:	293b      	cmp	r1, #59	; 0x3b
 801fcfa:	d911      	bls.n	801fd20 <validate_structure+0x58>
 801fcfc:	223c      	movs	r2, #60	; 0x3c
 801fcfe:	4668      	mov	r0, sp
 801fd00:	f002 fba0 	bl	8022444 <div>
 801fd04:	9a01      	ldr	r2, [sp, #4]
 801fd06:	68a3      	ldr	r3, [r4, #8]
 801fd08:	9900      	ldr	r1, [sp, #0]
 801fd0a:	2a00      	cmp	r2, #0
 801fd0c:	440b      	add	r3, r1
 801fd0e:	60a3      	str	r3, [r4, #8]
 801fd10:	bfbb      	ittet	lt
 801fd12:	323c      	addlt	r2, #60	; 0x3c
 801fd14:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801fd18:	6062      	strge	r2, [r4, #4]
 801fd1a:	6062      	strlt	r2, [r4, #4]
 801fd1c:	bfb8      	it	lt
 801fd1e:	60a3      	strlt	r3, [r4, #8]
 801fd20:	68a1      	ldr	r1, [r4, #8]
 801fd22:	2917      	cmp	r1, #23
 801fd24:	d911      	bls.n	801fd4a <validate_structure+0x82>
 801fd26:	2218      	movs	r2, #24
 801fd28:	4668      	mov	r0, sp
 801fd2a:	f002 fb8b 	bl	8022444 <div>
 801fd2e:	9a01      	ldr	r2, [sp, #4]
 801fd30:	68e3      	ldr	r3, [r4, #12]
 801fd32:	9900      	ldr	r1, [sp, #0]
 801fd34:	2a00      	cmp	r2, #0
 801fd36:	440b      	add	r3, r1
 801fd38:	60e3      	str	r3, [r4, #12]
 801fd3a:	bfbb      	ittet	lt
 801fd3c:	3218      	addlt	r2, #24
 801fd3e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801fd42:	60a2      	strge	r2, [r4, #8]
 801fd44:	60a2      	strlt	r2, [r4, #8]
 801fd46:	bfb8      	it	lt
 801fd48:	60e3      	strlt	r3, [r4, #12]
 801fd4a:	6921      	ldr	r1, [r4, #16]
 801fd4c:	290b      	cmp	r1, #11
 801fd4e:	d911      	bls.n	801fd74 <validate_structure+0xac>
 801fd50:	220c      	movs	r2, #12
 801fd52:	4668      	mov	r0, sp
 801fd54:	f002 fb76 	bl	8022444 <div>
 801fd58:	9a01      	ldr	r2, [sp, #4]
 801fd5a:	6963      	ldr	r3, [r4, #20]
 801fd5c:	9900      	ldr	r1, [sp, #0]
 801fd5e:	2a00      	cmp	r2, #0
 801fd60:	440b      	add	r3, r1
 801fd62:	6163      	str	r3, [r4, #20]
 801fd64:	bfbb      	ittet	lt
 801fd66:	320c      	addlt	r2, #12
 801fd68:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801fd6c:	6122      	strge	r2, [r4, #16]
 801fd6e:	6122      	strlt	r2, [r4, #16]
 801fd70:	bfb8      	it	lt
 801fd72:	6163      	strlt	r3, [r4, #20]
 801fd74:	6963      	ldr	r3, [r4, #20]
 801fd76:	0799      	lsls	r1, r3, #30
 801fd78:	d120      	bne.n	801fdbc <validate_structure+0xf4>
 801fd7a:	2164      	movs	r1, #100	; 0x64
 801fd7c:	fb93 f2f1 	sdiv	r2, r3, r1
 801fd80:	fb01 3212 	mls	r2, r1, r2, r3
 801fd84:	b9e2      	cbnz	r2, 801fdc0 <validate_structure+0xf8>
 801fd86:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 801fd8a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801fd8e:	fb93 f2f1 	sdiv	r2, r3, r1
 801fd92:	fb01 3312 	mls	r3, r1, r2, r3
 801fd96:	2b00      	cmp	r3, #0
 801fd98:	bf14      	ite	ne
 801fd9a:	231c      	movne	r3, #28
 801fd9c:	231d      	moveq	r3, #29
 801fd9e:	68e2      	ldr	r2, [r4, #12]
 801fda0:	2a00      	cmp	r2, #0
 801fda2:	dc0f      	bgt.n	801fdc4 <validate_structure+0xfc>
 801fda4:	4f34      	ldr	r7, [pc, #208]	; (801fe78 <validate_structure+0x1b0>)
 801fda6:	260b      	movs	r6, #11
 801fda8:	2064      	movs	r0, #100	; 0x64
 801fdaa:	f44f 75c8 	mov.w	r5, #400	; 0x190
 801fdae:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801fdb2:	f1bc 0f00 	cmp.w	ip, #0
 801fdb6:	dd14      	ble.n	801fde2 <validate_structure+0x11a>
 801fdb8:	b003      	add	sp, #12
 801fdba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fdbc:	231c      	movs	r3, #28
 801fdbe:	e7ee      	b.n	801fd9e <validate_structure+0xd6>
 801fdc0:	231d      	movs	r3, #29
 801fdc2:	e7ec      	b.n	801fd9e <validate_structure+0xd6>
 801fdc4:	4f2c      	ldr	r7, [pc, #176]	; (801fe78 <validate_structure+0x1b0>)
 801fdc6:	f04f 0c00 	mov.w	ip, #0
 801fdca:	2564      	movs	r5, #100	; 0x64
 801fdcc:	f44f 76c8 	mov.w	r6, #400	; 0x190
 801fdd0:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 801fdd4:	2a01      	cmp	r2, #1
 801fdd6:	d02f      	beq.n	801fe38 <validate_structure+0x170>
 801fdd8:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
 801fddc:	4281      	cmp	r1, r0
 801fdde:	dc2e      	bgt.n	801fe3e <validate_structure+0x176>
 801fde0:	e7ea      	b.n	801fdb8 <validate_structure+0xf0>
 801fde2:	6921      	ldr	r1, [r4, #16]
 801fde4:	3901      	subs	r1, #1
 801fde6:	6121      	str	r1, [r4, #16]
 801fde8:	3101      	adds	r1, #1
 801fdea:	d114      	bne.n	801fe16 <validate_structure+0x14e>
 801fdec:	6963      	ldr	r3, [r4, #20]
 801fdee:	1e59      	subs	r1, r3, #1
 801fdf0:	078a      	lsls	r2, r1, #30
 801fdf2:	e9c4 6104 	strd	r6, r1, [r4, #16]
 801fdf6:	d117      	bne.n	801fe28 <validate_structure+0x160>
 801fdf8:	fb91 f2f0 	sdiv	r2, r1, r0
 801fdfc:	fb00 1112 	mls	r1, r0, r2, r1
 801fe00:	b9a1      	cbnz	r1, 801fe2c <validate_structure+0x164>
 801fe02:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 801fe06:	fb93 f2f5 	sdiv	r2, r3, r5
 801fe0a:	fb05 3312 	mls	r3, r5, r2, r3
 801fe0e:	2b00      	cmp	r3, #0
 801fe10:	bf14      	ite	ne
 801fe12:	231c      	movne	r3, #28
 801fe14:	231d      	moveq	r3, #29
 801fe16:	6922      	ldr	r2, [r4, #16]
 801fe18:	2a01      	cmp	r2, #1
 801fe1a:	bf14      	ite	ne
 801fe1c:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 801fe20:	461a      	moveq	r2, r3
 801fe22:	4462      	add	r2, ip
 801fe24:	60e2      	str	r2, [r4, #12]
 801fe26:	e7c2      	b.n	801fdae <validate_structure+0xe6>
 801fe28:	231c      	movs	r3, #28
 801fe2a:	e7f4      	b.n	801fe16 <validate_structure+0x14e>
 801fe2c:	231d      	movs	r3, #29
 801fe2e:	e7f2      	b.n	801fe16 <validate_structure+0x14e>
 801fe30:	231c      	movs	r3, #28
 801fe32:	e7cd      	b.n	801fdd0 <validate_structure+0x108>
 801fe34:	231d      	movs	r3, #29
 801fe36:	e7cb      	b.n	801fdd0 <validate_structure+0x108>
 801fe38:	428b      	cmp	r3, r1
 801fe3a:	dabd      	bge.n	801fdb8 <validate_structure+0xf0>
 801fe3c:	4618      	mov	r0, r3
 801fe3e:	3201      	adds	r2, #1
 801fe40:	1a09      	subs	r1, r1, r0
 801fe42:	2a0c      	cmp	r2, #12
 801fe44:	60e1      	str	r1, [r4, #12]
 801fe46:	6122      	str	r2, [r4, #16]
 801fe48:	d1c2      	bne.n	801fdd0 <validate_structure+0x108>
 801fe4a:	6963      	ldr	r3, [r4, #20]
 801fe4c:	1c5a      	adds	r2, r3, #1
 801fe4e:	0791      	lsls	r1, r2, #30
 801fe50:	e9c4 c204 	strd	ip, r2, [r4, #16]
 801fe54:	d1ec      	bne.n	801fe30 <validate_structure+0x168>
 801fe56:	fb92 f1f5 	sdiv	r1, r2, r5
 801fe5a:	fb05 2211 	mls	r2, r5, r1, r2
 801fe5e:	2a00      	cmp	r2, #0
 801fe60:	d1e8      	bne.n	801fe34 <validate_structure+0x16c>
 801fe62:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 801fe66:	fb93 f2f6 	sdiv	r2, r3, r6
 801fe6a:	fb06 3312 	mls	r3, r6, r2, r3
 801fe6e:	2b00      	cmp	r3, #0
 801fe70:	bf14      	ite	ne
 801fe72:	231c      	movne	r3, #28
 801fe74:	231d      	moveq	r3, #29
 801fe76:	e7ab      	b.n	801fdd0 <validate_structure+0x108>
 801fe78:	0803fb34 	.word	0x0803fb34

0801fe7c <mktime>:
 801fe7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe80:	b089      	sub	sp, #36	; 0x24
 801fe82:	4606      	mov	r6, r0
 801fe84:	f003 fa8a 	bl	802339c <__gettzinfo>
 801fe88:	4680      	mov	r8, r0
 801fe8a:	4630      	mov	r0, r6
 801fe8c:	f7ff ff1c 	bl	801fcc8 <validate_structure>
 801fe90:	e9d6 3000 	ldrd	r3, r0, [r6]
 801fe94:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 801fe98:	fb0a 3a00 	mla	sl, sl, r0, r3
 801fe9c:	68b0      	ldr	r0, [r6, #8]
 801fe9e:	4abe      	ldr	r2, [pc, #760]	; (8020198 <mktime+0x31c>)
 801fea0:	6975      	ldr	r5, [r6, #20]
 801fea2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801fea6:	fb03 aa00 	mla	sl, r3, r0, sl
 801feaa:	e9d6 4303 	ldrd	r4, r3, [r6, #12]
 801feae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801feb2:	3c01      	subs	r4, #1
 801feb4:	2b01      	cmp	r3, #1
 801feb6:	ea4f 7bea 	mov.w	fp, sl, asr #31
 801feba:	4414      	add	r4, r2
 801febc:	dd11      	ble.n	801fee2 <mktime+0x66>
 801febe:	07a9      	lsls	r1, r5, #30
 801fec0:	d10f      	bne.n	801fee2 <mktime+0x66>
 801fec2:	2264      	movs	r2, #100	; 0x64
 801fec4:	fb95 f3f2 	sdiv	r3, r5, r2
 801fec8:	fb02 5313 	mls	r3, r2, r3, r5
 801fecc:	b943      	cbnz	r3, 801fee0 <mktime+0x64>
 801fece:	f205 716c 	addw	r1, r5, #1900	; 0x76c
 801fed2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801fed6:	fb91 f3f2 	sdiv	r3, r1, r2
 801feda:	fb02 1313 	mls	r3, r2, r3, r1
 801fede:	b903      	cbnz	r3, 801fee2 <mktime+0x66>
 801fee0:	3401      	adds	r4, #1
 801fee2:	f505 531c 	add.w	r3, r5, #9984	; 0x2700
 801fee6:	3310      	adds	r3, #16
 801fee8:	f644 6220 	movw	r2, #20000	; 0x4e20
 801feec:	4293      	cmp	r3, r2
 801feee:	61f4      	str	r4, [r6, #28]
 801fef0:	f200 8179 	bhi.w	80201e6 <mktime+0x36a>
 801fef4:	2d46      	cmp	r5, #70	; 0x46
 801fef6:	f340 8084 	ble.w	8020002 <mktime+0x186>
 801fefa:	2346      	movs	r3, #70	; 0x46
 801fefc:	f240 176d 	movw	r7, #365	; 0x16d
 801ff00:	2164      	movs	r1, #100	; 0x64
 801ff02:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801ff06:	079a      	lsls	r2, r3, #30
 801ff08:	d175      	bne.n	801fff6 <mktime+0x17a>
 801ff0a:	fb93 f2f1 	sdiv	r2, r3, r1
 801ff0e:	fb01 3212 	mls	r2, r1, r2, r3
 801ff12:	2a00      	cmp	r2, #0
 801ff14:	d172      	bne.n	801fffc <mktime+0x180>
 801ff16:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 801ff1a:	fb9c f2f0 	sdiv	r2, ip, r0
 801ff1e:	fb00 c212 	mls	r2, r0, r2, ip
 801ff22:	2a00      	cmp	r2, #0
 801ff24:	bf14      	ite	ne
 801ff26:	463a      	movne	r2, r7
 801ff28:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801ff2c:	3301      	adds	r3, #1
 801ff2e:	429d      	cmp	r5, r3
 801ff30:	4414      	add	r4, r2
 801ff32:	d1e8      	bne.n	801ff06 <mktime+0x8a>
 801ff34:	4b99      	ldr	r3, [pc, #612]	; (802019c <mktime+0x320>)
 801ff36:	4363      	muls	r3, r4
 801ff38:	eb1a 0103 	adds.w	r1, sl, r3
 801ff3c:	eb4b 72e3 	adc.w	r2, fp, r3, asr #31
 801ff40:	e9cd 1200 	strd	r1, r2, [sp]
 801ff44:	f001 ffc8 	bl	8021ed8 <__tz_lock>
 801ff48:	f001 ffc8 	bl	8021edc <_tzset_unlocked>
 801ff4c:	4b94      	ldr	r3, [pc, #592]	; (80201a0 <mktime+0x324>)
 801ff4e:	f8d3 9000 	ldr.w	r9, [r3]
 801ff52:	f1b9 0f00 	cmp.w	r9, #0
 801ff56:	d045      	beq.n	801ffe4 <mktime+0x168>
 801ff58:	f8d6 9020 	ldr.w	r9, [r6, #32]
 801ff5c:	6970      	ldr	r0, [r6, #20]
 801ff5e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801ff62:	464f      	mov	r7, r9
 801ff64:	2f01      	cmp	r7, #1
 801ff66:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801ff6a:	bfa8      	it	ge
 801ff6c:	2701      	movge	r7, #1
 801ff6e:	4283      	cmp	r3, r0
 801ff70:	f040 8089 	bne.w	8020086 <mktime+0x20a>
 801ff74:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 801ff78:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
 801ff7c:	460a      	mov	r2, r1
 801ff7e:	17cb      	asrs	r3, r1, #31
 801ff80:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801ff84:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801ff88:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801ff8c:	1a12      	subs	r2, r2, r0
 801ff8e:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
 801ff92:	4692      	mov	sl, r2
 801ff94:	469b      	mov	fp, r3
 801ff96:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ff9a:	4552      	cmp	r2, sl
 801ff9c:	eb73 0c0b 	sbcs.w	ip, r3, fp
 801ffa0:	e9cd ab02 	strd	sl, fp, [sp, #8]
 801ffa4:	da76      	bge.n	8020094 <mktime+0x218>
 801ffa6:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 801ffaa:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801ffae:	ebb2 0a0a 	subs.w	sl, r2, sl
 801ffb2:	eb63 0b0b 	sbc.w	fp, r3, fp
 801ffb6:	f8d8 3000 	ldr.w	r3, [r8]
 801ffba:	2b00      	cmp	r3, #0
 801ffbc:	d079      	beq.n	80200b2 <mktime+0x236>
 801ffbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ffc2:	4552      	cmp	r2, sl
 801ffc4:	eb73 030b 	sbcs.w	r3, r3, fp
 801ffc8:	db07      	blt.n	801ffda <mktime+0x15e>
 801ffca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ffce:	e9dd ab00 	ldrd	sl, fp, [sp]
 801ffd2:	4592      	cmp	sl, r2
 801ffd4:	eb7b 0303 	sbcs.w	r3, fp, r3
 801ffd8:	db71      	blt.n	80200be <mktime+0x242>
 801ffda:	f1b9 0f00 	cmp.w	r9, #0
 801ffde:	f04f 0900 	mov.w	r9, #0
 801ffe2:	da71      	bge.n	80200c8 <mktime+0x24c>
 801ffe4:	e9dd ab00 	ldrd	sl, fp, [sp]
 801ffe8:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 801ffec:	eb1a 0a03 	adds.w	sl, sl, r3
 801fff0:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801fff4:	e0b4      	b.n	8020160 <mktime+0x2e4>
 801fff6:	f240 126d 	movw	r2, #365	; 0x16d
 801fffa:	e797      	b.n	801ff2c <mktime+0xb0>
 801fffc:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8020000:	e794      	b.n	801ff2c <mktime+0xb0>
 8020002:	d097      	beq.n	801ff34 <mktime+0xb8>
 8020004:	2345      	movs	r3, #69	; 0x45
 8020006:	f240 176d 	movw	r7, #365	; 0x16d
 802000a:	2164      	movs	r1, #100	; 0x64
 802000c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8020010:	e012      	b.n	8020038 <mktime+0x1bc>
 8020012:	bb62      	cbnz	r2, 802006e <mktime+0x1f2>
 8020014:	fb93 f2f1 	sdiv	r2, r3, r1
 8020018:	fb01 3212 	mls	r2, r1, r2, r3
 802001c:	bb52      	cbnz	r2, 8020074 <mktime+0x1f8>
 802001e:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8020022:	fb9c f2f0 	sdiv	r2, ip, r0
 8020026:	fb00 c212 	mls	r2, r0, r2, ip
 802002a:	2a00      	cmp	r2, #0
 802002c:	bf14      	ite	ne
 802002e:	463a      	movne	r2, r7
 8020030:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8020034:	1aa4      	subs	r4, r4, r2
 8020036:	3b01      	subs	r3, #1
 8020038:	429d      	cmp	r5, r3
 802003a:	f003 0203 	and.w	r2, r3, #3
 802003e:	dbe8      	blt.n	8020012 <mktime+0x196>
 8020040:	b9da      	cbnz	r2, 802007a <mktime+0x1fe>
 8020042:	2264      	movs	r2, #100	; 0x64
 8020044:	fb95 f3f2 	sdiv	r3, r5, r2
 8020048:	fb02 5313 	mls	r3, r2, r3, r5
 802004c:	b9c3      	cbnz	r3, 8020080 <mktime+0x204>
 802004e:	f205 716c 	addw	r1, r5, #1900	; 0x76c
 8020052:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8020056:	fb91 f3f2 	sdiv	r3, r1, r2
 802005a:	fb02 1313 	mls	r3, r2, r3, r1
 802005e:	2b00      	cmp	r3, #0
 8020060:	f240 136d 	movw	r3, #365	; 0x16d
 8020064:	bf08      	it	eq
 8020066:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 802006a:	1ae4      	subs	r4, r4, r3
 802006c:	e762      	b.n	801ff34 <mktime+0xb8>
 802006e:	f240 126d 	movw	r2, #365	; 0x16d
 8020072:	e7df      	b.n	8020034 <mktime+0x1b8>
 8020074:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8020078:	e7dc      	b.n	8020034 <mktime+0x1b8>
 802007a:	f240 136d 	movw	r3, #365	; 0x16d
 802007e:	e7f4      	b.n	802006a <mktime+0x1ee>
 8020080:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8020084:	e7f1      	b.n	802006a <mktime+0x1ee>
 8020086:	f001 fe7f 	bl	8021d88 <__tzcalc_limits>
 802008a:	2800      	cmp	r0, #0
 802008c:	f47f af72 	bne.w	801ff74 <mktime+0xf8>
 8020090:	46b9      	mov	r9, r7
 8020092:	e057      	b.n	8020144 <mktime+0x2c8>
 8020094:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8020098:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802009c:	ebb2 020a 	subs.w	r2, r2, sl
 80200a0:	eb63 030b 	sbc.w	r3, r3, fp
 80200a4:	e9dd ab00 	ldrd	sl, fp, [sp]
 80200a8:	4592      	cmp	sl, r2
 80200aa:	eb7b 0303 	sbcs.w	r3, fp, r3
 80200ae:	dbef      	blt.n	8020090 <mktime+0x214>
 80200b0:	e779      	b.n	801ffa6 <mktime+0x12a>
 80200b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80200b6:	4552      	cmp	r2, sl
 80200b8:	eb73 030b 	sbcs.w	r3, r3, fp
 80200bc:	db85      	blt.n	801ffca <mktime+0x14e>
 80200be:	f1b9 0f00 	cmp.w	r9, #0
 80200c2:	db43      	blt.n	802014c <mktime+0x2d0>
 80200c4:	f04f 0901 	mov.w	r9, #1
 80200c8:	ea87 0709 	eor.w	r7, r7, r9
 80200cc:	2f01      	cmp	r7, #1
 80200ce:	d139      	bne.n	8020144 <mktime+0x2c8>
 80200d0:	1a40      	subs	r0, r0, r1
 80200d2:	f1b9 0f00 	cmp.w	r9, #0
 80200d6:	d100      	bne.n	80200da <mktime+0x25e>
 80200d8:	4240      	negs	r0, r0
 80200da:	6833      	ldr	r3, [r6, #0]
 80200dc:	4403      	add	r3, r0
 80200de:	6033      	str	r3, [r6, #0]
 80200e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80200e4:	1812      	adds	r2, r2, r0
 80200e6:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
 80200ea:	e9cd 2300 	strd	r2, r3, [sp]
 80200ee:	4630      	mov	r0, r6
 80200f0:	68f2      	ldr	r2, [r6, #12]
 80200f2:	9202      	str	r2, [sp, #8]
 80200f4:	f7ff fde8 	bl	801fcc8 <validate_structure>
 80200f8:	68f3      	ldr	r3, [r6, #12]
 80200fa:	9a02      	ldr	r2, [sp, #8]
 80200fc:	1a9b      	subs	r3, r3, r2
 80200fe:	d021      	beq.n	8020144 <mktime+0x2c8>
 8020100:	2b01      	cmp	r3, #1
 8020102:	dc40      	bgt.n	8020186 <mktime+0x30a>
 8020104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020108:	bfa8      	it	ge
 802010a:	461f      	movge	r7, r3
 802010c:	69f3      	ldr	r3, [r6, #28]
 802010e:	443c      	add	r4, r7
 8020110:	18ff      	adds	r7, r7, r3
 8020112:	d547      	bpl.n	80201a4 <mktime+0x328>
 8020114:	1e6a      	subs	r2, r5, #1
 8020116:	0791      	lsls	r1, r2, #30
 8020118:	d138      	bne.n	802018c <mktime+0x310>
 802011a:	2164      	movs	r1, #100	; 0x64
 802011c:	fb92 f3f1 	sdiv	r3, r2, r1
 8020120:	fb01 2313 	mls	r3, r1, r3, r2
 8020124:	bbab      	cbnz	r3, 8020192 <mktime+0x316>
 8020126:	f205 756b 	addw	r5, r5, #1899	; 0x76b
 802012a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 802012e:	fb95 f3f2 	sdiv	r3, r5, r2
 8020132:	fb02 5513 	mls	r5, r2, r3, r5
 8020136:	2d00      	cmp	r5, #0
 8020138:	f240 136d 	movw	r3, #365	; 0x16d
 802013c:	bf18      	it	ne
 802013e:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8020142:	61f3      	str	r3, [r6, #28]
 8020144:	f1b9 0f01 	cmp.w	r9, #1
 8020148:	f47f af4c 	bne.w	801ffe4 <mktime+0x168>
 802014c:	e9dd ab00 	ldrd	sl, fp, [sp]
 8020150:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
 8020154:	eb1a 0a03 	adds.w	sl, sl, r3
 8020158:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 802015c:	f04f 0901 	mov.w	r9, #1
 8020160:	f001 febb 	bl	8021eda <__tz_unlock>
 8020164:	3404      	adds	r4, #4
 8020166:	2307      	movs	r3, #7
 8020168:	fb94 f3f3 	sdiv	r3, r4, r3
 802016c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8020170:	1ae4      	subs	r4, r4, r3
 8020172:	bf48      	it	mi
 8020174:	3407      	addmi	r4, #7
 8020176:	f8c6 9020 	str.w	r9, [r6, #32]
 802017a:	61b4      	str	r4, [r6, #24]
 802017c:	4650      	mov	r0, sl
 802017e:	4659      	mov	r1, fp
 8020180:	b009      	add	sp, #36	; 0x24
 8020182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020186:	f04f 37ff 	mov.w	r7, #4294967295
 802018a:	e7bf      	b.n	802010c <mktime+0x290>
 802018c:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8020190:	e7d7      	b.n	8020142 <mktime+0x2c6>
 8020192:	f240 136d 	movw	r3, #365	; 0x16d
 8020196:	e7d4      	b.n	8020142 <mktime+0x2c6>
 8020198:	0803fb64 	.word	0x0803fb64
 802019c:	00015180 	.word	0x00015180
 80201a0:	2002a77c 	.word	0x2002a77c
 80201a4:	07ab      	lsls	r3, r5, #30
 80201a6:	d118      	bne.n	80201da <mktime+0x35e>
 80201a8:	2264      	movs	r2, #100	; 0x64
 80201aa:	fb95 f3f2 	sdiv	r3, r5, r2
 80201ae:	fb02 5313 	mls	r3, r2, r3, r5
 80201b2:	b9ab      	cbnz	r3, 80201e0 <mktime+0x364>
 80201b4:	f205 756c 	addw	r5, r5, #1900	; 0x76c
 80201b8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80201bc:	fb95 f3f2 	sdiv	r3, r5, r2
 80201c0:	fb02 5513 	mls	r5, r2, r3, r5
 80201c4:	2d00      	cmp	r5, #0
 80201c6:	f240 136d 	movw	r3, #365	; 0x16d
 80201ca:	bf08      	it	eq
 80201cc:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 80201d0:	429f      	cmp	r7, r3
 80201d2:	bfa8      	it	ge
 80201d4:	1aff      	subge	r7, r7, r3
 80201d6:	61f7      	str	r7, [r6, #28]
 80201d8:	e7b4      	b.n	8020144 <mktime+0x2c8>
 80201da:	f240 136d 	movw	r3, #365	; 0x16d
 80201de:	e7f7      	b.n	80201d0 <mktime+0x354>
 80201e0:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 80201e4:	e7f4      	b.n	80201d0 <mktime+0x354>
 80201e6:	f04f 3aff 	mov.w	sl, #4294967295
 80201ea:	f04f 3bff 	mov.w	fp, #4294967295
 80201ee:	e7c5      	b.n	802017c <mktime+0x300>

080201f0 <_free_r>:
 80201f0:	b538      	push	{r3, r4, r5, lr}
 80201f2:	4605      	mov	r5, r0
 80201f4:	2900      	cmp	r1, #0
 80201f6:	d045      	beq.n	8020284 <_free_r+0x94>
 80201f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80201fc:	1f0c      	subs	r4, r1, #4
 80201fe:	2b00      	cmp	r3, #0
 8020200:	bfb8      	it	lt
 8020202:	18e4      	addlt	r4, r4, r3
 8020204:	f003 fa04 	bl	8023610 <__malloc_lock>
 8020208:	4a1f      	ldr	r2, [pc, #124]	; (8020288 <_free_r+0x98>)
 802020a:	6813      	ldr	r3, [r2, #0]
 802020c:	4610      	mov	r0, r2
 802020e:	b933      	cbnz	r3, 802021e <_free_r+0x2e>
 8020210:	6063      	str	r3, [r4, #4]
 8020212:	6014      	str	r4, [r2, #0]
 8020214:	4628      	mov	r0, r5
 8020216:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802021a:	f003 b9fa 	b.w	8023612 <__malloc_unlock>
 802021e:	42a3      	cmp	r3, r4
 8020220:	d90c      	bls.n	802023c <_free_r+0x4c>
 8020222:	6821      	ldr	r1, [r4, #0]
 8020224:	1862      	adds	r2, r4, r1
 8020226:	4293      	cmp	r3, r2
 8020228:	bf04      	itt	eq
 802022a:	681a      	ldreq	r2, [r3, #0]
 802022c:	685b      	ldreq	r3, [r3, #4]
 802022e:	6063      	str	r3, [r4, #4]
 8020230:	bf04      	itt	eq
 8020232:	1852      	addeq	r2, r2, r1
 8020234:	6022      	streq	r2, [r4, #0]
 8020236:	6004      	str	r4, [r0, #0]
 8020238:	e7ec      	b.n	8020214 <_free_r+0x24>
 802023a:	4613      	mov	r3, r2
 802023c:	685a      	ldr	r2, [r3, #4]
 802023e:	b10a      	cbz	r2, 8020244 <_free_r+0x54>
 8020240:	42a2      	cmp	r2, r4
 8020242:	d9fa      	bls.n	802023a <_free_r+0x4a>
 8020244:	6819      	ldr	r1, [r3, #0]
 8020246:	1858      	adds	r0, r3, r1
 8020248:	42a0      	cmp	r0, r4
 802024a:	d10b      	bne.n	8020264 <_free_r+0x74>
 802024c:	6820      	ldr	r0, [r4, #0]
 802024e:	4401      	add	r1, r0
 8020250:	1858      	adds	r0, r3, r1
 8020252:	4282      	cmp	r2, r0
 8020254:	6019      	str	r1, [r3, #0]
 8020256:	d1dd      	bne.n	8020214 <_free_r+0x24>
 8020258:	6810      	ldr	r0, [r2, #0]
 802025a:	6852      	ldr	r2, [r2, #4]
 802025c:	605a      	str	r2, [r3, #4]
 802025e:	4401      	add	r1, r0
 8020260:	6019      	str	r1, [r3, #0]
 8020262:	e7d7      	b.n	8020214 <_free_r+0x24>
 8020264:	d902      	bls.n	802026c <_free_r+0x7c>
 8020266:	230c      	movs	r3, #12
 8020268:	602b      	str	r3, [r5, #0]
 802026a:	e7d3      	b.n	8020214 <_free_r+0x24>
 802026c:	6820      	ldr	r0, [r4, #0]
 802026e:	1821      	adds	r1, r4, r0
 8020270:	428a      	cmp	r2, r1
 8020272:	bf04      	itt	eq
 8020274:	6811      	ldreq	r1, [r2, #0]
 8020276:	6852      	ldreq	r2, [r2, #4]
 8020278:	6062      	str	r2, [r4, #4]
 802027a:	bf04      	itt	eq
 802027c:	1809      	addeq	r1, r1, r0
 802027e:	6021      	streq	r1, [r4, #0]
 8020280:	605c      	str	r4, [r3, #4]
 8020282:	e7c7      	b.n	8020214 <_free_r+0x24>
 8020284:	bd38      	pop	{r3, r4, r5, pc}
 8020286:	bf00      	nop
 8020288:	2002a758 	.word	0x2002a758

0802028c <_malloc_r>:
 802028c:	b570      	push	{r4, r5, r6, lr}
 802028e:	1ccd      	adds	r5, r1, #3
 8020290:	f025 0503 	bic.w	r5, r5, #3
 8020294:	3508      	adds	r5, #8
 8020296:	2d0c      	cmp	r5, #12
 8020298:	bf38      	it	cc
 802029a:	250c      	movcc	r5, #12
 802029c:	2d00      	cmp	r5, #0
 802029e:	4606      	mov	r6, r0
 80202a0:	db01      	blt.n	80202a6 <_malloc_r+0x1a>
 80202a2:	42a9      	cmp	r1, r5
 80202a4:	d903      	bls.n	80202ae <_malloc_r+0x22>
 80202a6:	230c      	movs	r3, #12
 80202a8:	6033      	str	r3, [r6, #0]
 80202aa:	2000      	movs	r0, #0
 80202ac:	bd70      	pop	{r4, r5, r6, pc}
 80202ae:	f003 f9af 	bl	8023610 <__malloc_lock>
 80202b2:	4a21      	ldr	r2, [pc, #132]	; (8020338 <_malloc_r+0xac>)
 80202b4:	6814      	ldr	r4, [r2, #0]
 80202b6:	4621      	mov	r1, r4
 80202b8:	b991      	cbnz	r1, 80202e0 <_malloc_r+0x54>
 80202ba:	4c20      	ldr	r4, [pc, #128]	; (802033c <_malloc_r+0xb0>)
 80202bc:	6823      	ldr	r3, [r4, #0]
 80202be:	b91b      	cbnz	r3, 80202c8 <_malloc_r+0x3c>
 80202c0:	4630      	mov	r0, r6
 80202c2:	f000 fd8d 	bl	8020de0 <_sbrk_r>
 80202c6:	6020      	str	r0, [r4, #0]
 80202c8:	4629      	mov	r1, r5
 80202ca:	4630      	mov	r0, r6
 80202cc:	f000 fd88 	bl	8020de0 <_sbrk_r>
 80202d0:	1c43      	adds	r3, r0, #1
 80202d2:	d124      	bne.n	802031e <_malloc_r+0x92>
 80202d4:	230c      	movs	r3, #12
 80202d6:	6033      	str	r3, [r6, #0]
 80202d8:	4630      	mov	r0, r6
 80202da:	f003 f99a 	bl	8023612 <__malloc_unlock>
 80202de:	e7e4      	b.n	80202aa <_malloc_r+0x1e>
 80202e0:	680b      	ldr	r3, [r1, #0]
 80202e2:	1b5b      	subs	r3, r3, r5
 80202e4:	d418      	bmi.n	8020318 <_malloc_r+0x8c>
 80202e6:	2b0b      	cmp	r3, #11
 80202e8:	d90f      	bls.n	802030a <_malloc_r+0x7e>
 80202ea:	600b      	str	r3, [r1, #0]
 80202ec:	50cd      	str	r5, [r1, r3]
 80202ee:	18cc      	adds	r4, r1, r3
 80202f0:	4630      	mov	r0, r6
 80202f2:	f003 f98e 	bl	8023612 <__malloc_unlock>
 80202f6:	f104 000b 	add.w	r0, r4, #11
 80202fa:	1d23      	adds	r3, r4, #4
 80202fc:	f020 0007 	bic.w	r0, r0, #7
 8020300:	1ac3      	subs	r3, r0, r3
 8020302:	d0d3      	beq.n	80202ac <_malloc_r+0x20>
 8020304:	425a      	negs	r2, r3
 8020306:	50e2      	str	r2, [r4, r3]
 8020308:	e7d0      	b.n	80202ac <_malloc_r+0x20>
 802030a:	428c      	cmp	r4, r1
 802030c:	684b      	ldr	r3, [r1, #4]
 802030e:	bf16      	itet	ne
 8020310:	6063      	strne	r3, [r4, #4]
 8020312:	6013      	streq	r3, [r2, #0]
 8020314:	460c      	movne	r4, r1
 8020316:	e7eb      	b.n	80202f0 <_malloc_r+0x64>
 8020318:	460c      	mov	r4, r1
 802031a:	6849      	ldr	r1, [r1, #4]
 802031c:	e7cc      	b.n	80202b8 <_malloc_r+0x2c>
 802031e:	1cc4      	adds	r4, r0, #3
 8020320:	f024 0403 	bic.w	r4, r4, #3
 8020324:	42a0      	cmp	r0, r4
 8020326:	d005      	beq.n	8020334 <_malloc_r+0xa8>
 8020328:	1a21      	subs	r1, r4, r0
 802032a:	4630      	mov	r0, r6
 802032c:	f000 fd58 	bl	8020de0 <_sbrk_r>
 8020330:	3001      	adds	r0, #1
 8020332:	d0cf      	beq.n	80202d4 <_malloc_r+0x48>
 8020334:	6025      	str	r5, [r4, #0]
 8020336:	e7db      	b.n	80202f0 <_malloc_r+0x64>
 8020338:	2002a758 	.word	0x2002a758
 802033c:	2002a75c 	.word	0x2002a75c

08020340 <__cvt>:
 8020340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020342:	ed2d 8b02 	vpush	{d8}
 8020346:	eeb0 8b40 	vmov.f64	d8, d0
 802034a:	b085      	sub	sp, #20
 802034c:	4617      	mov	r7, r2
 802034e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8020350:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8020352:	ee18 2a90 	vmov	r2, s17
 8020356:	f025 0520 	bic.w	r5, r5, #32
 802035a:	2a00      	cmp	r2, #0
 802035c:	bfb6      	itet	lt
 802035e:	222d      	movlt	r2, #45	; 0x2d
 8020360:	2200      	movge	r2, #0
 8020362:	eeb1 8b40 	vneglt.f64	d8, d0
 8020366:	2d46      	cmp	r5, #70	; 0x46
 8020368:	460c      	mov	r4, r1
 802036a:	701a      	strb	r2, [r3, #0]
 802036c:	d004      	beq.n	8020378 <__cvt+0x38>
 802036e:	2d45      	cmp	r5, #69	; 0x45
 8020370:	d100      	bne.n	8020374 <__cvt+0x34>
 8020372:	3401      	adds	r4, #1
 8020374:	2102      	movs	r1, #2
 8020376:	e000      	b.n	802037a <__cvt+0x3a>
 8020378:	2103      	movs	r1, #3
 802037a:	ab03      	add	r3, sp, #12
 802037c:	9301      	str	r3, [sp, #4]
 802037e:	ab02      	add	r3, sp, #8
 8020380:	9300      	str	r3, [sp, #0]
 8020382:	4622      	mov	r2, r4
 8020384:	4633      	mov	r3, r6
 8020386:	eeb0 0b48 	vmov.f64	d0, d8
 802038a:	f002 f8fd 	bl	8022588 <_dtoa_r>
 802038e:	2d47      	cmp	r5, #71	; 0x47
 8020390:	d101      	bne.n	8020396 <__cvt+0x56>
 8020392:	07fb      	lsls	r3, r7, #31
 8020394:	d51e      	bpl.n	80203d4 <__cvt+0x94>
 8020396:	2d46      	cmp	r5, #70	; 0x46
 8020398:	eb00 0304 	add.w	r3, r0, r4
 802039c:	d10c      	bne.n	80203b8 <__cvt+0x78>
 802039e:	7802      	ldrb	r2, [r0, #0]
 80203a0:	2a30      	cmp	r2, #48	; 0x30
 80203a2:	d107      	bne.n	80203b4 <__cvt+0x74>
 80203a4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80203a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80203ac:	bf1c      	itt	ne
 80203ae:	f1c4 0401 	rsbne	r4, r4, #1
 80203b2:	6034      	strne	r4, [r6, #0]
 80203b4:	6832      	ldr	r2, [r6, #0]
 80203b6:	4413      	add	r3, r2
 80203b8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80203bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80203c0:	d007      	beq.n	80203d2 <__cvt+0x92>
 80203c2:	2130      	movs	r1, #48	; 0x30
 80203c4:	9a03      	ldr	r2, [sp, #12]
 80203c6:	429a      	cmp	r2, r3
 80203c8:	d204      	bcs.n	80203d4 <__cvt+0x94>
 80203ca:	1c54      	adds	r4, r2, #1
 80203cc:	9403      	str	r4, [sp, #12]
 80203ce:	7011      	strb	r1, [r2, #0]
 80203d0:	e7f8      	b.n	80203c4 <__cvt+0x84>
 80203d2:	9303      	str	r3, [sp, #12]
 80203d4:	9b03      	ldr	r3, [sp, #12]
 80203d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80203d8:	1a1b      	subs	r3, r3, r0
 80203da:	6013      	str	r3, [r2, #0]
 80203dc:	b005      	add	sp, #20
 80203de:	ecbd 8b02 	vpop	{d8}
 80203e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080203e4 <__exponent>:
 80203e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80203e6:	2900      	cmp	r1, #0
 80203e8:	4604      	mov	r4, r0
 80203ea:	bfba      	itte	lt
 80203ec:	4249      	neglt	r1, r1
 80203ee:	232d      	movlt	r3, #45	; 0x2d
 80203f0:	232b      	movge	r3, #43	; 0x2b
 80203f2:	2909      	cmp	r1, #9
 80203f4:	f804 2b02 	strb.w	r2, [r4], #2
 80203f8:	7043      	strb	r3, [r0, #1]
 80203fa:	dd20      	ble.n	802043e <__exponent+0x5a>
 80203fc:	f10d 0307 	add.w	r3, sp, #7
 8020400:	461f      	mov	r7, r3
 8020402:	260a      	movs	r6, #10
 8020404:	fb91 f5f6 	sdiv	r5, r1, r6
 8020408:	fb06 1115 	mls	r1, r6, r5, r1
 802040c:	3130      	adds	r1, #48	; 0x30
 802040e:	2d09      	cmp	r5, #9
 8020410:	f803 1c01 	strb.w	r1, [r3, #-1]
 8020414:	f103 32ff 	add.w	r2, r3, #4294967295
 8020418:	4629      	mov	r1, r5
 802041a:	dc09      	bgt.n	8020430 <__exponent+0x4c>
 802041c:	3130      	adds	r1, #48	; 0x30
 802041e:	3b02      	subs	r3, #2
 8020420:	f802 1c01 	strb.w	r1, [r2, #-1]
 8020424:	42bb      	cmp	r3, r7
 8020426:	4622      	mov	r2, r4
 8020428:	d304      	bcc.n	8020434 <__exponent+0x50>
 802042a:	1a10      	subs	r0, r2, r0
 802042c:	b003      	add	sp, #12
 802042e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020430:	4613      	mov	r3, r2
 8020432:	e7e7      	b.n	8020404 <__exponent+0x20>
 8020434:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020438:	f804 2b01 	strb.w	r2, [r4], #1
 802043c:	e7f2      	b.n	8020424 <__exponent+0x40>
 802043e:	2330      	movs	r3, #48	; 0x30
 8020440:	4419      	add	r1, r3
 8020442:	7083      	strb	r3, [r0, #2]
 8020444:	1d02      	adds	r2, r0, #4
 8020446:	70c1      	strb	r1, [r0, #3]
 8020448:	e7ef      	b.n	802042a <__exponent+0x46>
 802044a:	0000      	movs	r0, r0
 802044c:	0000      	movs	r0, r0
	...

08020450 <_printf_float>:
 8020450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020454:	b08d      	sub	sp, #52	; 0x34
 8020456:	460c      	mov	r4, r1
 8020458:	4616      	mov	r6, r2
 802045a:	461f      	mov	r7, r3
 802045c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8020460:	4605      	mov	r5, r0
 8020462:	f003 f851 	bl	8023508 <_localeconv_r>
 8020466:	f8d0 b000 	ldr.w	fp, [r0]
 802046a:	4658      	mov	r0, fp
 802046c:	f7df fef2 	bl	8000254 <strlen>
 8020470:	2300      	movs	r3, #0
 8020472:	930a      	str	r3, [sp, #40]	; 0x28
 8020474:	f8d8 3000 	ldr.w	r3, [r8]
 8020478:	9005      	str	r0, [sp, #20]
 802047a:	3307      	adds	r3, #7
 802047c:	f023 0307 	bic.w	r3, r3, #7
 8020480:	f103 0108 	add.w	r1, r3, #8
 8020484:	f894 9018 	ldrb.w	r9, [r4, #24]
 8020488:	6822      	ldr	r2, [r4, #0]
 802048a:	f8c8 1000 	str.w	r1, [r8]
 802048e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020492:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8020496:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8020720 <_printf_float+0x2d0>
 802049a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 802049e:	eeb0 6bc0 	vabs.f64	d6, d0
 80204a2:	eeb4 6b47 	vcmp.f64	d6, d7
 80204a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80204aa:	dd24      	ble.n	80204f6 <_printf_float+0xa6>
 80204ac:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80204b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80204b4:	d502      	bpl.n	80204bc <_printf_float+0x6c>
 80204b6:	232d      	movs	r3, #45	; 0x2d
 80204b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80204bc:	499a      	ldr	r1, [pc, #616]	; (8020728 <_printf_float+0x2d8>)
 80204be:	4b9b      	ldr	r3, [pc, #620]	; (802072c <_printf_float+0x2dc>)
 80204c0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80204c4:	bf8c      	ite	hi
 80204c6:	4688      	movhi	r8, r1
 80204c8:	4698      	movls	r8, r3
 80204ca:	f022 0204 	bic.w	r2, r2, #4
 80204ce:	2303      	movs	r3, #3
 80204d0:	6123      	str	r3, [r4, #16]
 80204d2:	6022      	str	r2, [r4, #0]
 80204d4:	f04f 0a00 	mov.w	sl, #0
 80204d8:	9700      	str	r7, [sp, #0]
 80204da:	4633      	mov	r3, r6
 80204dc:	aa0b      	add	r2, sp, #44	; 0x2c
 80204de:	4621      	mov	r1, r4
 80204e0:	4628      	mov	r0, r5
 80204e2:	f000 f9e1 	bl	80208a8 <_printf_common>
 80204e6:	3001      	adds	r0, #1
 80204e8:	f040 8089 	bne.w	80205fe <_printf_float+0x1ae>
 80204ec:	f04f 30ff 	mov.w	r0, #4294967295
 80204f0:	b00d      	add	sp, #52	; 0x34
 80204f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80204f6:	eeb4 0b40 	vcmp.f64	d0, d0
 80204fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80204fe:	d702      	bvc.n	8020506 <_printf_float+0xb6>
 8020500:	498b      	ldr	r1, [pc, #556]	; (8020730 <_printf_float+0x2e0>)
 8020502:	4b8c      	ldr	r3, [pc, #560]	; (8020734 <_printf_float+0x2e4>)
 8020504:	e7dc      	b.n	80204c0 <_printf_float+0x70>
 8020506:	6861      	ldr	r1, [r4, #4]
 8020508:	1c4b      	adds	r3, r1, #1
 802050a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 802050e:	ab0a      	add	r3, sp, #40	; 0x28
 8020510:	a809      	add	r0, sp, #36	; 0x24
 8020512:	d13b      	bne.n	802058c <_printf_float+0x13c>
 8020514:	2106      	movs	r1, #6
 8020516:	6061      	str	r1, [r4, #4]
 8020518:	f04f 0c00 	mov.w	ip, #0
 802051c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8020520:	e9cd 0900 	strd	r0, r9, [sp]
 8020524:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8020528:	6022      	str	r2, [r4, #0]
 802052a:	6861      	ldr	r1, [r4, #4]
 802052c:	4628      	mov	r0, r5
 802052e:	f7ff ff07 	bl	8020340 <__cvt>
 8020532:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 8020536:	2b47      	cmp	r3, #71	; 0x47
 8020538:	4680      	mov	r8, r0
 802053a:	d109      	bne.n	8020550 <_printf_float+0x100>
 802053c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802053e:	1cd8      	adds	r0, r3, #3
 8020540:	db02      	blt.n	8020548 <_printf_float+0xf8>
 8020542:	6862      	ldr	r2, [r4, #4]
 8020544:	4293      	cmp	r3, r2
 8020546:	dd47      	ble.n	80205d8 <_printf_float+0x188>
 8020548:	f1a9 0902 	sub.w	r9, r9, #2
 802054c:	fa5f f989 	uxtb.w	r9, r9
 8020550:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8020554:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020556:	d824      	bhi.n	80205a2 <_printf_float+0x152>
 8020558:	3901      	subs	r1, #1
 802055a:	464a      	mov	r2, r9
 802055c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8020560:	9109      	str	r1, [sp, #36]	; 0x24
 8020562:	f7ff ff3f 	bl	80203e4 <__exponent>
 8020566:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020568:	1813      	adds	r3, r2, r0
 802056a:	2a01      	cmp	r2, #1
 802056c:	4682      	mov	sl, r0
 802056e:	6123      	str	r3, [r4, #16]
 8020570:	dc02      	bgt.n	8020578 <_printf_float+0x128>
 8020572:	6822      	ldr	r2, [r4, #0]
 8020574:	07d1      	lsls	r1, r2, #31
 8020576:	d501      	bpl.n	802057c <_printf_float+0x12c>
 8020578:	3301      	adds	r3, #1
 802057a:	6123      	str	r3, [r4, #16]
 802057c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8020580:	2b00      	cmp	r3, #0
 8020582:	d0a9      	beq.n	80204d8 <_printf_float+0x88>
 8020584:	232d      	movs	r3, #45	; 0x2d
 8020586:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802058a:	e7a5      	b.n	80204d8 <_printf_float+0x88>
 802058c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8020590:	f000 8178 	beq.w	8020884 <_printf_float+0x434>
 8020594:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8020598:	d1be      	bne.n	8020518 <_printf_float+0xc8>
 802059a:	2900      	cmp	r1, #0
 802059c:	d1bc      	bne.n	8020518 <_printf_float+0xc8>
 802059e:	2101      	movs	r1, #1
 80205a0:	e7b9      	b.n	8020516 <_printf_float+0xc6>
 80205a2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80205a6:	d119      	bne.n	80205dc <_printf_float+0x18c>
 80205a8:	2900      	cmp	r1, #0
 80205aa:	6863      	ldr	r3, [r4, #4]
 80205ac:	dd0c      	ble.n	80205c8 <_printf_float+0x178>
 80205ae:	6121      	str	r1, [r4, #16]
 80205b0:	b913      	cbnz	r3, 80205b8 <_printf_float+0x168>
 80205b2:	6822      	ldr	r2, [r4, #0]
 80205b4:	07d2      	lsls	r2, r2, #31
 80205b6:	d502      	bpl.n	80205be <_printf_float+0x16e>
 80205b8:	3301      	adds	r3, #1
 80205ba:	440b      	add	r3, r1
 80205bc:	6123      	str	r3, [r4, #16]
 80205be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80205c0:	65a3      	str	r3, [r4, #88]	; 0x58
 80205c2:	f04f 0a00 	mov.w	sl, #0
 80205c6:	e7d9      	b.n	802057c <_printf_float+0x12c>
 80205c8:	b913      	cbnz	r3, 80205d0 <_printf_float+0x180>
 80205ca:	6822      	ldr	r2, [r4, #0]
 80205cc:	07d0      	lsls	r0, r2, #31
 80205ce:	d501      	bpl.n	80205d4 <_printf_float+0x184>
 80205d0:	3302      	adds	r3, #2
 80205d2:	e7f3      	b.n	80205bc <_printf_float+0x16c>
 80205d4:	2301      	movs	r3, #1
 80205d6:	e7f1      	b.n	80205bc <_printf_float+0x16c>
 80205d8:	f04f 0967 	mov.w	r9, #103	; 0x67
 80205dc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80205e0:	4293      	cmp	r3, r2
 80205e2:	db05      	blt.n	80205f0 <_printf_float+0x1a0>
 80205e4:	6822      	ldr	r2, [r4, #0]
 80205e6:	6123      	str	r3, [r4, #16]
 80205e8:	07d1      	lsls	r1, r2, #31
 80205ea:	d5e8      	bpl.n	80205be <_printf_float+0x16e>
 80205ec:	3301      	adds	r3, #1
 80205ee:	e7e5      	b.n	80205bc <_printf_float+0x16c>
 80205f0:	2b00      	cmp	r3, #0
 80205f2:	bfd4      	ite	le
 80205f4:	f1c3 0302 	rsble	r3, r3, #2
 80205f8:	2301      	movgt	r3, #1
 80205fa:	4413      	add	r3, r2
 80205fc:	e7de      	b.n	80205bc <_printf_float+0x16c>
 80205fe:	6823      	ldr	r3, [r4, #0]
 8020600:	055a      	lsls	r2, r3, #21
 8020602:	d407      	bmi.n	8020614 <_printf_float+0x1c4>
 8020604:	6923      	ldr	r3, [r4, #16]
 8020606:	4642      	mov	r2, r8
 8020608:	4631      	mov	r1, r6
 802060a:	4628      	mov	r0, r5
 802060c:	47b8      	blx	r7
 802060e:	3001      	adds	r0, #1
 8020610:	d12a      	bne.n	8020668 <_printf_float+0x218>
 8020612:	e76b      	b.n	80204ec <_printf_float+0x9c>
 8020614:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8020618:	f240 80de 	bls.w	80207d8 <_printf_float+0x388>
 802061c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8020620:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8020624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020628:	d133      	bne.n	8020692 <_printf_float+0x242>
 802062a:	2301      	movs	r3, #1
 802062c:	4a42      	ldr	r2, [pc, #264]	; (8020738 <_printf_float+0x2e8>)
 802062e:	4631      	mov	r1, r6
 8020630:	4628      	mov	r0, r5
 8020632:	47b8      	blx	r7
 8020634:	3001      	adds	r0, #1
 8020636:	f43f af59 	beq.w	80204ec <_printf_float+0x9c>
 802063a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802063e:	429a      	cmp	r2, r3
 8020640:	db02      	blt.n	8020648 <_printf_float+0x1f8>
 8020642:	6823      	ldr	r3, [r4, #0]
 8020644:	07d8      	lsls	r0, r3, #31
 8020646:	d50f      	bpl.n	8020668 <_printf_float+0x218>
 8020648:	9b05      	ldr	r3, [sp, #20]
 802064a:	465a      	mov	r2, fp
 802064c:	4631      	mov	r1, r6
 802064e:	4628      	mov	r0, r5
 8020650:	47b8      	blx	r7
 8020652:	3001      	adds	r0, #1
 8020654:	f43f af4a 	beq.w	80204ec <_printf_float+0x9c>
 8020658:	f04f 0800 	mov.w	r8, #0
 802065c:	f104 091a 	add.w	r9, r4, #26
 8020660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020662:	3b01      	subs	r3, #1
 8020664:	4543      	cmp	r3, r8
 8020666:	dc09      	bgt.n	802067c <_printf_float+0x22c>
 8020668:	6823      	ldr	r3, [r4, #0]
 802066a:	079b      	lsls	r3, r3, #30
 802066c:	f100 8105 	bmi.w	802087a <_printf_float+0x42a>
 8020670:	68e0      	ldr	r0, [r4, #12]
 8020672:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020674:	4298      	cmp	r0, r3
 8020676:	bfb8      	it	lt
 8020678:	4618      	movlt	r0, r3
 802067a:	e739      	b.n	80204f0 <_printf_float+0xa0>
 802067c:	2301      	movs	r3, #1
 802067e:	464a      	mov	r2, r9
 8020680:	4631      	mov	r1, r6
 8020682:	4628      	mov	r0, r5
 8020684:	47b8      	blx	r7
 8020686:	3001      	adds	r0, #1
 8020688:	f43f af30 	beq.w	80204ec <_printf_float+0x9c>
 802068c:	f108 0801 	add.w	r8, r8, #1
 8020690:	e7e6      	b.n	8020660 <_printf_float+0x210>
 8020692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020694:	2b00      	cmp	r3, #0
 8020696:	dc2b      	bgt.n	80206f0 <_printf_float+0x2a0>
 8020698:	2301      	movs	r3, #1
 802069a:	4a27      	ldr	r2, [pc, #156]	; (8020738 <_printf_float+0x2e8>)
 802069c:	4631      	mov	r1, r6
 802069e:	4628      	mov	r0, r5
 80206a0:	47b8      	blx	r7
 80206a2:	3001      	adds	r0, #1
 80206a4:	f43f af22 	beq.w	80204ec <_printf_float+0x9c>
 80206a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80206aa:	b923      	cbnz	r3, 80206b6 <_printf_float+0x266>
 80206ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80206ae:	b913      	cbnz	r3, 80206b6 <_printf_float+0x266>
 80206b0:	6823      	ldr	r3, [r4, #0]
 80206b2:	07d9      	lsls	r1, r3, #31
 80206b4:	d5d8      	bpl.n	8020668 <_printf_float+0x218>
 80206b6:	9b05      	ldr	r3, [sp, #20]
 80206b8:	465a      	mov	r2, fp
 80206ba:	4631      	mov	r1, r6
 80206bc:	4628      	mov	r0, r5
 80206be:	47b8      	blx	r7
 80206c0:	3001      	adds	r0, #1
 80206c2:	f43f af13 	beq.w	80204ec <_printf_float+0x9c>
 80206c6:	f04f 0900 	mov.w	r9, #0
 80206ca:	f104 0a1a 	add.w	sl, r4, #26
 80206ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80206d0:	425b      	negs	r3, r3
 80206d2:	454b      	cmp	r3, r9
 80206d4:	dc01      	bgt.n	80206da <_printf_float+0x28a>
 80206d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80206d8:	e795      	b.n	8020606 <_printf_float+0x1b6>
 80206da:	2301      	movs	r3, #1
 80206dc:	4652      	mov	r2, sl
 80206de:	4631      	mov	r1, r6
 80206e0:	4628      	mov	r0, r5
 80206e2:	47b8      	blx	r7
 80206e4:	3001      	adds	r0, #1
 80206e6:	f43f af01 	beq.w	80204ec <_printf_float+0x9c>
 80206ea:	f109 0901 	add.w	r9, r9, #1
 80206ee:	e7ee      	b.n	80206ce <_printf_float+0x27e>
 80206f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80206f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80206f4:	429a      	cmp	r2, r3
 80206f6:	bfa8      	it	ge
 80206f8:	461a      	movge	r2, r3
 80206fa:	2a00      	cmp	r2, #0
 80206fc:	4691      	mov	r9, r2
 80206fe:	dd07      	ble.n	8020710 <_printf_float+0x2c0>
 8020700:	4613      	mov	r3, r2
 8020702:	4631      	mov	r1, r6
 8020704:	4642      	mov	r2, r8
 8020706:	4628      	mov	r0, r5
 8020708:	47b8      	blx	r7
 802070a:	3001      	adds	r0, #1
 802070c:	f43f aeee 	beq.w	80204ec <_printf_float+0x9c>
 8020710:	f104 031a 	add.w	r3, r4, #26
 8020714:	f04f 0a00 	mov.w	sl, #0
 8020718:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802071c:	9307      	str	r3, [sp, #28]
 802071e:	e017      	b.n	8020750 <_printf_float+0x300>
 8020720:	ffffffff 	.word	0xffffffff
 8020724:	7fefffff 	.word	0x7fefffff
 8020728:	0803fbf8 	.word	0x0803fbf8
 802072c:	0803fbf4 	.word	0x0803fbf4
 8020730:	0803fc00 	.word	0x0803fc00
 8020734:	0803fbfc 	.word	0x0803fbfc
 8020738:	080401d3 	.word	0x080401d3
 802073c:	2301      	movs	r3, #1
 802073e:	9a07      	ldr	r2, [sp, #28]
 8020740:	4631      	mov	r1, r6
 8020742:	4628      	mov	r0, r5
 8020744:	47b8      	blx	r7
 8020746:	3001      	adds	r0, #1
 8020748:	f43f aed0 	beq.w	80204ec <_printf_float+0x9c>
 802074c:	f10a 0a01 	add.w	sl, sl, #1
 8020750:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8020752:	9306      	str	r3, [sp, #24]
 8020754:	eba3 0309 	sub.w	r3, r3, r9
 8020758:	4553      	cmp	r3, sl
 802075a:	dcef      	bgt.n	802073c <_printf_float+0x2ec>
 802075c:	9b06      	ldr	r3, [sp, #24]
 802075e:	4498      	add	r8, r3
 8020760:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8020764:	429a      	cmp	r2, r3
 8020766:	db15      	blt.n	8020794 <_printf_float+0x344>
 8020768:	6823      	ldr	r3, [r4, #0]
 802076a:	07da      	lsls	r2, r3, #31
 802076c:	d412      	bmi.n	8020794 <_printf_float+0x344>
 802076e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020770:	9a06      	ldr	r2, [sp, #24]
 8020772:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020774:	1a9a      	subs	r2, r3, r2
 8020776:	eba3 0a01 	sub.w	sl, r3, r1
 802077a:	4592      	cmp	sl, r2
 802077c:	bfa8      	it	ge
 802077e:	4692      	movge	sl, r2
 8020780:	f1ba 0f00 	cmp.w	sl, #0
 8020784:	dc0e      	bgt.n	80207a4 <_printf_float+0x354>
 8020786:	f04f 0800 	mov.w	r8, #0
 802078a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802078e:	f104 091a 	add.w	r9, r4, #26
 8020792:	e019      	b.n	80207c8 <_printf_float+0x378>
 8020794:	9b05      	ldr	r3, [sp, #20]
 8020796:	465a      	mov	r2, fp
 8020798:	4631      	mov	r1, r6
 802079a:	4628      	mov	r0, r5
 802079c:	47b8      	blx	r7
 802079e:	3001      	adds	r0, #1
 80207a0:	d1e5      	bne.n	802076e <_printf_float+0x31e>
 80207a2:	e6a3      	b.n	80204ec <_printf_float+0x9c>
 80207a4:	4653      	mov	r3, sl
 80207a6:	4642      	mov	r2, r8
 80207a8:	4631      	mov	r1, r6
 80207aa:	4628      	mov	r0, r5
 80207ac:	47b8      	blx	r7
 80207ae:	3001      	adds	r0, #1
 80207b0:	d1e9      	bne.n	8020786 <_printf_float+0x336>
 80207b2:	e69b      	b.n	80204ec <_printf_float+0x9c>
 80207b4:	2301      	movs	r3, #1
 80207b6:	464a      	mov	r2, r9
 80207b8:	4631      	mov	r1, r6
 80207ba:	4628      	mov	r0, r5
 80207bc:	47b8      	blx	r7
 80207be:	3001      	adds	r0, #1
 80207c0:	f43f ae94 	beq.w	80204ec <_printf_float+0x9c>
 80207c4:	f108 0801 	add.w	r8, r8, #1
 80207c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80207cc:	1a9b      	subs	r3, r3, r2
 80207ce:	eba3 030a 	sub.w	r3, r3, sl
 80207d2:	4543      	cmp	r3, r8
 80207d4:	dcee      	bgt.n	80207b4 <_printf_float+0x364>
 80207d6:	e747      	b.n	8020668 <_printf_float+0x218>
 80207d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80207da:	2a01      	cmp	r2, #1
 80207dc:	dc01      	bgt.n	80207e2 <_printf_float+0x392>
 80207de:	07db      	lsls	r3, r3, #31
 80207e0:	d539      	bpl.n	8020856 <_printf_float+0x406>
 80207e2:	2301      	movs	r3, #1
 80207e4:	4642      	mov	r2, r8
 80207e6:	4631      	mov	r1, r6
 80207e8:	4628      	mov	r0, r5
 80207ea:	47b8      	blx	r7
 80207ec:	3001      	adds	r0, #1
 80207ee:	f43f ae7d 	beq.w	80204ec <_printf_float+0x9c>
 80207f2:	9b05      	ldr	r3, [sp, #20]
 80207f4:	465a      	mov	r2, fp
 80207f6:	4631      	mov	r1, r6
 80207f8:	4628      	mov	r0, r5
 80207fa:	47b8      	blx	r7
 80207fc:	3001      	adds	r0, #1
 80207fe:	f108 0801 	add.w	r8, r8, #1
 8020802:	f43f ae73 	beq.w	80204ec <_printf_float+0x9c>
 8020806:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 802080a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802080c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8020810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020814:	f103 33ff 	add.w	r3, r3, #4294967295
 8020818:	d018      	beq.n	802084c <_printf_float+0x3fc>
 802081a:	4642      	mov	r2, r8
 802081c:	4631      	mov	r1, r6
 802081e:	4628      	mov	r0, r5
 8020820:	47b8      	blx	r7
 8020822:	3001      	adds	r0, #1
 8020824:	d10e      	bne.n	8020844 <_printf_float+0x3f4>
 8020826:	e661      	b.n	80204ec <_printf_float+0x9c>
 8020828:	2301      	movs	r3, #1
 802082a:	464a      	mov	r2, r9
 802082c:	4631      	mov	r1, r6
 802082e:	4628      	mov	r0, r5
 8020830:	47b8      	blx	r7
 8020832:	3001      	adds	r0, #1
 8020834:	f43f ae5a 	beq.w	80204ec <_printf_float+0x9c>
 8020838:	f108 0801 	add.w	r8, r8, #1
 802083c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802083e:	3b01      	subs	r3, #1
 8020840:	4543      	cmp	r3, r8
 8020842:	dcf1      	bgt.n	8020828 <_printf_float+0x3d8>
 8020844:	4653      	mov	r3, sl
 8020846:	f104 0250 	add.w	r2, r4, #80	; 0x50
 802084a:	e6dd      	b.n	8020608 <_printf_float+0x1b8>
 802084c:	f04f 0800 	mov.w	r8, #0
 8020850:	f104 091a 	add.w	r9, r4, #26
 8020854:	e7f2      	b.n	802083c <_printf_float+0x3ec>
 8020856:	2301      	movs	r3, #1
 8020858:	e7df      	b.n	802081a <_printf_float+0x3ca>
 802085a:	2301      	movs	r3, #1
 802085c:	464a      	mov	r2, r9
 802085e:	4631      	mov	r1, r6
 8020860:	4628      	mov	r0, r5
 8020862:	47b8      	blx	r7
 8020864:	3001      	adds	r0, #1
 8020866:	f43f ae41 	beq.w	80204ec <_printf_float+0x9c>
 802086a:	f108 0801 	add.w	r8, r8, #1
 802086e:	68e3      	ldr	r3, [r4, #12]
 8020870:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020872:	1a9b      	subs	r3, r3, r2
 8020874:	4543      	cmp	r3, r8
 8020876:	dcf0      	bgt.n	802085a <_printf_float+0x40a>
 8020878:	e6fa      	b.n	8020670 <_printf_float+0x220>
 802087a:	f04f 0800 	mov.w	r8, #0
 802087e:	f104 0919 	add.w	r9, r4, #25
 8020882:	e7f4      	b.n	802086e <_printf_float+0x41e>
 8020884:	2900      	cmp	r1, #0
 8020886:	f43f ae8a 	beq.w	802059e <_printf_float+0x14e>
 802088a:	f04f 0c00 	mov.w	ip, #0
 802088e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8020892:	e9cd 0900 	strd	r0, r9, [sp]
 8020896:	6022      	str	r2, [r4, #0]
 8020898:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 802089c:	4628      	mov	r0, r5
 802089e:	f7ff fd4f 	bl	8020340 <__cvt>
 80208a2:	4680      	mov	r8, r0
 80208a4:	e64a      	b.n	802053c <_printf_float+0xec>
 80208a6:	bf00      	nop

080208a8 <_printf_common>:
 80208a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80208ac:	4691      	mov	r9, r2
 80208ae:	461f      	mov	r7, r3
 80208b0:	688a      	ldr	r2, [r1, #8]
 80208b2:	690b      	ldr	r3, [r1, #16]
 80208b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80208b8:	4293      	cmp	r3, r2
 80208ba:	bfb8      	it	lt
 80208bc:	4613      	movlt	r3, r2
 80208be:	f8c9 3000 	str.w	r3, [r9]
 80208c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80208c6:	4606      	mov	r6, r0
 80208c8:	460c      	mov	r4, r1
 80208ca:	b112      	cbz	r2, 80208d2 <_printf_common+0x2a>
 80208cc:	3301      	adds	r3, #1
 80208ce:	f8c9 3000 	str.w	r3, [r9]
 80208d2:	6823      	ldr	r3, [r4, #0]
 80208d4:	0699      	lsls	r1, r3, #26
 80208d6:	bf42      	ittt	mi
 80208d8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80208dc:	3302      	addmi	r3, #2
 80208de:	f8c9 3000 	strmi.w	r3, [r9]
 80208e2:	6825      	ldr	r5, [r4, #0]
 80208e4:	f015 0506 	ands.w	r5, r5, #6
 80208e8:	d107      	bne.n	80208fa <_printf_common+0x52>
 80208ea:	f104 0a19 	add.w	sl, r4, #25
 80208ee:	68e3      	ldr	r3, [r4, #12]
 80208f0:	f8d9 2000 	ldr.w	r2, [r9]
 80208f4:	1a9b      	subs	r3, r3, r2
 80208f6:	42ab      	cmp	r3, r5
 80208f8:	dc28      	bgt.n	802094c <_printf_common+0xa4>
 80208fa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80208fe:	6822      	ldr	r2, [r4, #0]
 8020900:	3300      	adds	r3, #0
 8020902:	bf18      	it	ne
 8020904:	2301      	movne	r3, #1
 8020906:	0692      	lsls	r2, r2, #26
 8020908:	d42d      	bmi.n	8020966 <_printf_common+0xbe>
 802090a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802090e:	4639      	mov	r1, r7
 8020910:	4630      	mov	r0, r6
 8020912:	47c0      	blx	r8
 8020914:	3001      	adds	r0, #1
 8020916:	d020      	beq.n	802095a <_printf_common+0xb2>
 8020918:	6823      	ldr	r3, [r4, #0]
 802091a:	68e5      	ldr	r5, [r4, #12]
 802091c:	f8d9 2000 	ldr.w	r2, [r9]
 8020920:	f003 0306 	and.w	r3, r3, #6
 8020924:	2b04      	cmp	r3, #4
 8020926:	bf08      	it	eq
 8020928:	1aad      	subeq	r5, r5, r2
 802092a:	68a3      	ldr	r3, [r4, #8]
 802092c:	6922      	ldr	r2, [r4, #16]
 802092e:	bf0c      	ite	eq
 8020930:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020934:	2500      	movne	r5, #0
 8020936:	4293      	cmp	r3, r2
 8020938:	bfc4      	itt	gt
 802093a:	1a9b      	subgt	r3, r3, r2
 802093c:	18ed      	addgt	r5, r5, r3
 802093e:	f04f 0900 	mov.w	r9, #0
 8020942:	341a      	adds	r4, #26
 8020944:	454d      	cmp	r5, r9
 8020946:	d11a      	bne.n	802097e <_printf_common+0xd6>
 8020948:	2000      	movs	r0, #0
 802094a:	e008      	b.n	802095e <_printf_common+0xb6>
 802094c:	2301      	movs	r3, #1
 802094e:	4652      	mov	r2, sl
 8020950:	4639      	mov	r1, r7
 8020952:	4630      	mov	r0, r6
 8020954:	47c0      	blx	r8
 8020956:	3001      	adds	r0, #1
 8020958:	d103      	bne.n	8020962 <_printf_common+0xba>
 802095a:	f04f 30ff 	mov.w	r0, #4294967295
 802095e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020962:	3501      	adds	r5, #1
 8020964:	e7c3      	b.n	80208ee <_printf_common+0x46>
 8020966:	18e1      	adds	r1, r4, r3
 8020968:	1c5a      	adds	r2, r3, #1
 802096a:	2030      	movs	r0, #48	; 0x30
 802096c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8020970:	4422      	add	r2, r4
 8020972:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8020976:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802097a:	3302      	adds	r3, #2
 802097c:	e7c5      	b.n	802090a <_printf_common+0x62>
 802097e:	2301      	movs	r3, #1
 8020980:	4622      	mov	r2, r4
 8020982:	4639      	mov	r1, r7
 8020984:	4630      	mov	r0, r6
 8020986:	47c0      	blx	r8
 8020988:	3001      	adds	r0, #1
 802098a:	d0e6      	beq.n	802095a <_printf_common+0xb2>
 802098c:	f109 0901 	add.w	r9, r9, #1
 8020990:	e7d8      	b.n	8020944 <_printf_common+0x9c>
	...

08020994 <_printf_i>:
 8020994:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020998:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 802099c:	460c      	mov	r4, r1
 802099e:	7e09      	ldrb	r1, [r1, #24]
 80209a0:	b085      	sub	sp, #20
 80209a2:	296e      	cmp	r1, #110	; 0x6e
 80209a4:	4617      	mov	r7, r2
 80209a6:	4606      	mov	r6, r0
 80209a8:	4698      	mov	r8, r3
 80209aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80209ac:	f000 80b3 	beq.w	8020b16 <_printf_i+0x182>
 80209b0:	d822      	bhi.n	80209f8 <_printf_i+0x64>
 80209b2:	2963      	cmp	r1, #99	; 0x63
 80209b4:	d036      	beq.n	8020a24 <_printf_i+0x90>
 80209b6:	d80a      	bhi.n	80209ce <_printf_i+0x3a>
 80209b8:	2900      	cmp	r1, #0
 80209ba:	f000 80b9 	beq.w	8020b30 <_printf_i+0x19c>
 80209be:	2958      	cmp	r1, #88	; 0x58
 80209c0:	f000 8083 	beq.w	8020aca <_printf_i+0x136>
 80209c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80209c8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80209cc:	e032      	b.n	8020a34 <_printf_i+0xa0>
 80209ce:	2964      	cmp	r1, #100	; 0x64
 80209d0:	d001      	beq.n	80209d6 <_printf_i+0x42>
 80209d2:	2969      	cmp	r1, #105	; 0x69
 80209d4:	d1f6      	bne.n	80209c4 <_printf_i+0x30>
 80209d6:	6820      	ldr	r0, [r4, #0]
 80209d8:	6813      	ldr	r3, [r2, #0]
 80209da:	0605      	lsls	r5, r0, #24
 80209dc:	f103 0104 	add.w	r1, r3, #4
 80209e0:	d52a      	bpl.n	8020a38 <_printf_i+0xa4>
 80209e2:	681b      	ldr	r3, [r3, #0]
 80209e4:	6011      	str	r1, [r2, #0]
 80209e6:	2b00      	cmp	r3, #0
 80209e8:	da03      	bge.n	80209f2 <_printf_i+0x5e>
 80209ea:	222d      	movs	r2, #45	; 0x2d
 80209ec:	425b      	negs	r3, r3
 80209ee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80209f2:	486f      	ldr	r0, [pc, #444]	; (8020bb0 <_printf_i+0x21c>)
 80209f4:	220a      	movs	r2, #10
 80209f6:	e039      	b.n	8020a6c <_printf_i+0xd8>
 80209f8:	2973      	cmp	r1, #115	; 0x73
 80209fa:	f000 809d 	beq.w	8020b38 <_printf_i+0x1a4>
 80209fe:	d808      	bhi.n	8020a12 <_printf_i+0x7e>
 8020a00:	296f      	cmp	r1, #111	; 0x6f
 8020a02:	d020      	beq.n	8020a46 <_printf_i+0xb2>
 8020a04:	2970      	cmp	r1, #112	; 0x70
 8020a06:	d1dd      	bne.n	80209c4 <_printf_i+0x30>
 8020a08:	6823      	ldr	r3, [r4, #0]
 8020a0a:	f043 0320 	orr.w	r3, r3, #32
 8020a0e:	6023      	str	r3, [r4, #0]
 8020a10:	e003      	b.n	8020a1a <_printf_i+0x86>
 8020a12:	2975      	cmp	r1, #117	; 0x75
 8020a14:	d017      	beq.n	8020a46 <_printf_i+0xb2>
 8020a16:	2978      	cmp	r1, #120	; 0x78
 8020a18:	d1d4      	bne.n	80209c4 <_printf_i+0x30>
 8020a1a:	2378      	movs	r3, #120	; 0x78
 8020a1c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8020a20:	4864      	ldr	r0, [pc, #400]	; (8020bb4 <_printf_i+0x220>)
 8020a22:	e055      	b.n	8020ad0 <_printf_i+0x13c>
 8020a24:	6813      	ldr	r3, [r2, #0]
 8020a26:	1d19      	adds	r1, r3, #4
 8020a28:	681b      	ldr	r3, [r3, #0]
 8020a2a:	6011      	str	r1, [r2, #0]
 8020a2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020a30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8020a34:	2301      	movs	r3, #1
 8020a36:	e08c      	b.n	8020b52 <_printf_i+0x1be>
 8020a38:	681b      	ldr	r3, [r3, #0]
 8020a3a:	6011      	str	r1, [r2, #0]
 8020a3c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8020a40:	bf18      	it	ne
 8020a42:	b21b      	sxthne	r3, r3
 8020a44:	e7cf      	b.n	80209e6 <_printf_i+0x52>
 8020a46:	6813      	ldr	r3, [r2, #0]
 8020a48:	6825      	ldr	r5, [r4, #0]
 8020a4a:	1d18      	adds	r0, r3, #4
 8020a4c:	6010      	str	r0, [r2, #0]
 8020a4e:	0628      	lsls	r0, r5, #24
 8020a50:	d501      	bpl.n	8020a56 <_printf_i+0xc2>
 8020a52:	681b      	ldr	r3, [r3, #0]
 8020a54:	e002      	b.n	8020a5c <_printf_i+0xc8>
 8020a56:	0668      	lsls	r0, r5, #25
 8020a58:	d5fb      	bpl.n	8020a52 <_printf_i+0xbe>
 8020a5a:	881b      	ldrh	r3, [r3, #0]
 8020a5c:	4854      	ldr	r0, [pc, #336]	; (8020bb0 <_printf_i+0x21c>)
 8020a5e:	296f      	cmp	r1, #111	; 0x6f
 8020a60:	bf14      	ite	ne
 8020a62:	220a      	movne	r2, #10
 8020a64:	2208      	moveq	r2, #8
 8020a66:	2100      	movs	r1, #0
 8020a68:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8020a6c:	6865      	ldr	r5, [r4, #4]
 8020a6e:	60a5      	str	r5, [r4, #8]
 8020a70:	2d00      	cmp	r5, #0
 8020a72:	f2c0 8095 	blt.w	8020ba0 <_printf_i+0x20c>
 8020a76:	6821      	ldr	r1, [r4, #0]
 8020a78:	f021 0104 	bic.w	r1, r1, #4
 8020a7c:	6021      	str	r1, [r4, #0]
 8020a7e:	2b00      	cmp	r3, #0
 8020a80:	d13d      	bne.n	8020afe <_printf_i+0x16a>
 8020a82:	2d00      	cmp	r5, #0
 8020a84:	f040 808e 	bne.w	8020ba4 <_printf_i+0x210>
 8020a88:	4665      	mov	r5, ip
 8020a8a:	2a08      	cmp	r2, #8
 8020a8c:	d10b      	bne.n	8020aa6 <_printf_i+0x112>
 8020a8e:	6823      	ldr	r3, [r4, #0]
 8020a90:	07db      	lsls	r3, r3, #31
 8020a92:	d508      	bpl.n	8020aa6 <_printf_i+0x112>
 8020a94:	6923      	ldr	r3, [r4, #16]
 8020a96:	6862      	ldr	r2, [r4, #4]
 8020a98:	429a      	cmp	r2, r3
 8020a9a:	bfde      	ittt	le
 8020a9c:	2330      	movle	r3, #48	; 0x30
 8020a9e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8020aa2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8020aa6:	ebac 0305 	sub.w	r3, ip, r5
 8020aaa:	6123      	str	r3, [r4, #16]
 8020aac:	f8cd 8000 	str.w	r8, [sp]
 8020ab0:	463b      	mov	r3, r7
 8020ab2:	aa03      	add	r2, sp, #12
 8020ab4:	4621      	mov	r1, r4
 8020ab6:	4630      	mov	r0, r6
 8020ab8:	f7ff fef6 	bl	80208a8 <_printf_common>
 8020abc:	3001      	adds	r0, #1
 8020abe:	d14d      	bne.n	8020b5c <_printf_i+0x1c8>
 8020ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8020ac4:	b005      	add	sp, #20
 8020ac6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020aca:	4839      	ldr	r0, [pc, #228]	; (8020bb0 <_printf_i+0x21c>)
 8020acc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8020ad0:	6813      	ldr	r3, [r2, #0]
 8020ad2:	6821      	ldr	r1, [r4, #0]
 8020ad4:	1d1d      	adds	r5, r3, #4
 8020ad6:	681b      	ldr	r3, [r3, #0]
 8020ad8:	6015      	str	r5, [r2, #0]
 8020ada:	060a      	lsls	r2, r1, #24
 8020adc:	d50b      	bpl.n	8020af6 <_printf_i+0x162>
 8020ade:	07ca      	lsls	r2, r1, #31
 8020ae0:	bf44      	itt	mi
 8020ae2:	f041 0120 	orrmi.w	r1, r1, #32
 8020ae6:	6021      	strmi	r1, [r4, #0]
 8020ae8:	b91b      	cbnz	r3, 8020af2 <_printf_i+0x15e>
 8020aea:	6822      	ldr	r2, [r4, #0]
 8020aec:	f022 0220 	bic.w	r2, r2, #32
 8020af0:	6022      	str	r2, [r4, #0]
 8020af2:	2210      	movs	r2, #16
 8020af4:	e7b7      	b.n	8020a66 <_printf_i+0xd2>
 8020af6:	064d      	lsls	r5, r1, #25
 8020af8:	bf48      	it	mi
 8020afa:	b29b      	uxthmi	r3, r3
 8020afc:	e7ef      	b.n	8020ade <_printf_i+0x14a>
 8020afe:	4665      	mov	r5, ip
 8020b00:	fbb3 f1f2 	udiv	r1, r3, r2
 8020b04:	fb02 3311 	mls	r3, r2, r1, r3
 8020b08:	5cc3      	ldrb	r3, [r0, r3]
 8020b0a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8020b0e:	460b      	mov	r3, r1
 8020b10:	2900      	cmp	r1, #0
 8020b12:	d1f5      	bne.n	8020b00 <_printf_i+0x16c>
 8020b14:	e7b9      	b.n	8020a8a <_printf_i+0xf6>
 8020b16:	6813      	ldr	r3, [r2, #0]
 8020b18:	6825      	ldr	r5, [r4, #0]
 8020b1a:	6961      	ldr	r1, [r4, #20]
 8020b1c:	1d18      	adds	r0, r3, #4
 8020b1e:	6010      	str	r0, [r2, #0]
 8020b20:	0628      	lsls	r0, r5, #24
 8020b22:	681b      	ldr	r3, [r3, #0]
 8020b24:	d501      	bpl.n	8020b2a <_printf_i+0x196>
 8020b26:	6019      	str	r1, [r3, #0]
 8020b28:	e002      	b.n	8020b30 <_printf_i+0x19c>
 8020b2a:	066a      	lsls	r2, r5, #25
 8020b2c:	d5fb      	bpl.n	8020b26 <_printf_i+0x192>
 8020b2e:	8019      	strh	r1, [r3, #0]
 8020b30:	2300      	movs	r3, #0
 8020b32:	6123      	str	r3, [r4, #16]
 8020b34:	4665      	mov	r5, ip
 8020b36:	e7b9      	b.n	8020aac <_printf_i+0x118>
 8020b38:	6813      	ldr	r3, [r2, #0]
 8020b3a:	1d19      	adds	r1, r3, #4
 8020b3c:	6011      	str	r1, [r2, #0]
 8020b3e:	681d      	ldr	r5, [r3, #0]
 8020b40:	6862      	ldr	r2, [r4, #4]
 8020b42:	2100      	movs	r1, #0
 8020b44:	4628      	mov	r0, r5
 8020b46:	f7df fb93 	bl	8000270 <memchr>
 8020b4a:	b108      	cbz	r0, 8020b50 <_printf_i+0x1bc>
 8020b4c:	1b40      	subs	r0, r0, r5
 8020b4e:	6060      	str	r0, [r4, #4]
 8020b50:	6863      	ldr	r3, [r4, #4]
 8020b52:	6123      	str	r3, [r4, #16]
 8020b54:	2300      	movs	r3, #0
 8020b56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020b5a:	e7a7      	b.n	8020aac <_printf_i+0x118>
 8020b5c:	6923      	ldr	r3, [r4, #16]
 8020b5e:	462a      	mov	r2, r5
 8020b60:	4639      	mov	r1, r7
 8020b62:	4630      	mov	r0, r6
 8020b64:	47c0      	blx	r8
 8020b66:	3001      	adds	r0, #1
 8020b68:	d0aa      	beq.n	8020ac0 <_printf_i+0x12c>
 8020b6a:	6823      	ldr	r3, [r4, #0]
 8020b6c:	079b      	lsls	r3, r3, #30
 8020b6e:	d413      	bmi.n	8020b98 <_printf_i+0x204>
 8020b70:	68e0      	ldr	r0, [r4, #12]
 8020b72:	9b03      	ldr	r3, [sp, #12]
 8020b74:	4298      	cmp	r0, r3
 8020b76:	bfb8      	it	lt
 8020b78:	4618      	movlt	r0, r3
 8020b7a:	e7a3      	b.n	8020ac4 <_printf_i+0x130>
 8020b7c:	2301      	movs	r3, #1
 8020b7e:	464a      	mov	r2, r9
 8020b80:	4639      	mov	r1, r7
 8020b82:	4630      	mov	r0, r6
 8020b84:	47c0      	blx	r8
 8020b86:	3001      	adds	r0, #1
 8020b88:	d09a      	beq.n	8020ac0 <_printf_i+0x12c>
 8020b8a:	3501      	adds	r5, #1
 8020b8c:	68e3      	ldr	r3, [r4, #12]
 8020b8e:	9a03      	ldr	r2, [sp, #12]
 8020b90:	1a9b      	subs	r3, r3, r2
 8020b92:	42ab      	cmp	r3, r5
 8020b94:	dcf2      	bgt.n	8020b7c <_printf_i+0x1e8>
 8020b96:	e7eb      	b.n	8020b70 <_printf_i+0x1dc>
 8020b98:	2500      	movs	r5, #0
 8020b9a:	f104 0919 	add.w	r9, r4, #25
 8020b9e:	e7f5      	b.n	8020b8c <_printf_i+0x1f8>
 8020ba0:	2b00      	cmp	r3, #0
 8020ba2:	d1ac      	bne.n	8020afe <_printf_i+0x16a>
 8020ba4:	7803      	ldrb	r3, [r0, #0]
 8020ba6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8020baa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020bae:	e76c      	b.n	8020a8a <_printf_i+0xf6>
 8020bb0:	0803fc04 	.word	0x0803fc04
 8020bb4:	0803fc15 	.word	0x0803fc15

08020bb8 <iprintf>:
 8020bb8:	b40f      	push	{r0, r1, r2, r3}
 8020bba:	4b0a      	ldr	r3, [pc, #40]	; (8020be4 <iprintf+0x2c>)
 8020bbc:	b513      	push	{r0, r1, r4, lr}
 8020bbe:	681c      	ldr	r4, [r3, #0]
 8020bc0:	b124      	cbz	r4, 8020bcc <iprintf+0x14>
 8020bc2:	69a3      	ldr	r3, [r4, #24]
 8020bc4:	b913      	cbnz	r3, 8020bcc <iprintf+0x14>
 8020bc6:	4620      	mov	r0, r4
 8020bc8:	f002 fb1a 	bl	8023200 <__sinit>
 8020bcc:	ab05      	add	r3, sp, #20
 8020bce:	9a04      	ldr	r2, [sp, #16]
 8020bd0:	68a1      	ldr	r1, [r4, #8]
 8020bd2:	9301      	str	r3, [sp, #4]
 8020bd4:	4620      	mov	r0, r4
 8020bd6:	f003 fb53 	bl	8024280 <_vfiprintf_r>
 8020bda:	b002      	add	sp, #8
 8020bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020be0:	b004      	add	sp, #16
 8020be2:	4770      	bx	lr
 8020be4:	20000450 	.word	0x20000450

08020be8 <putchar>:
 8020be8:	b538      	push	{r3, r4, r5, lr}
 8020bea:	4b08      	ldr	r3, [pc, #32]	; (8020c0c <putchar+0x24>)
 8020bec:	681c      	ldr	r4, [r3, #0]
 8020bee:	4605      	mov	r5, r0
 8020bf0:	b124      	cbz	r4, 8020bfc <putchar+0x14>
 8020bf2:	69a3      	ldr	r3, [r4, #24]
 8020bf4:	b913      	cbnz	r3, 8020bfc <putchar+0x14>
 8020bf6:	4620      	mov	r0, r4
 8020bf8:	f002 fb02 	bl	8023200 <__sinit>
 8020bfc:	68a2      	ldr	r2, [r4, #8]
 8020bfe:	4629      	mov	r1, r5
 8020c00:	4620      	mov	r0, r4
 8020c02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020c06:	f003 bda9 	b.w	802475c <_putc_r>
 8020c0a:	bf00      	nop
 8020c0c:	20000450 	.word	0x20000450

08020c10 <_puts_r>:
 8020c10:	b570      	push	{r4, r5, r6, lr}
 8020c12:	460e      	mov	r6, r1
 8020c14:	4605      	mov	r5, r0
 8020c16:	b118      	cbz	r0, 8020c20 <_puts_r+0x10>
 8020c18:	6983      	ldr	r3, [r0, #24]
 8020c1a:	b90b      	cbnz	r3, 8020c20 <_puts_r+0x10>
 8020c1c:	f002 faf0 	bl	8023200 <__sinit>
 8020c20:	69ab      	ldr	r3, [r5, #24]
 8020c22:	68ac      	ldr	r4, [r5, #8]
 8020c24:	b913      	cbnz	r3, 8020c2c <_puts_r+0x1c>
 8020c26:	4628      	mov	r0, r5
 8020c28:	f002 faea 	bl	8023200 <__sinit>
 8020c2c:	4b23      	ldr	r3, [pc, #140]	; (8020cbc <_puts_r+0xac>)
 8020c2e:	429c      	cmp	r4, r3
 8020c30:	d117      	bne.n	8020c62 <_puts_r+0x52>
 8020c32:	686c      	ldr	r4, [r5, #4]
 8020c34:	89a3      	ldrh	r3, [r4, #12]
 8020c36:	071b      	lsls	r3, r3, #28
 8020c38:	d51d      	bpl.n	8020c76 <_puts_r+0x66>
 8020c3a:	6923      	ldr	r3, [r4, #16]
 8020c3c:	b1db      	cbz	r3, 8020c76 <_puts_r+0x66>
 8020c3e:	3e01      	subs	r6, #1
 8020c40:	68a3      	ldr	r3, [r4, #8]
 8020c42:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8020c46:	3b01      	subs	r3, #1
 8020c48:	60a3      	str	r3, [r4, #8]
 8020c4a:	b9e9      	cbnz	r1, 8020c88 <_puts_r+0x78>
 8020c4c:	2b00      	cmp	r3, #0
 8020c4e:	da2e      	bge.n	8020cae <_puts_r+0x9e>
 8020c50:	4622      	mov	r2, r4
 8020c52:	210a      	movs	r1, #10
 8020c54:	4628      	mov	r0, r5
 8020c56:	f001 fac5 	bl	80221e4 <__swbuf_r>
 8020c5a:	3001      	adds	r0, #1
 8020c5c:	d011      	beq.n	8020c82 <_puts_r+0x72>
 8020c5e:	200a      	movs	r0, #10
 8020c60:	e011      	b.n	8020c86 <_puts_r+0x76>
 8020c62:	4b17      	ldr	r3, [pc, #92]	; (8020cc0 <_puts_r+0xb0>)
 8020c64:	429c      	cmp	r4, r3
 8020c66:	d101      	bne.n	8020c6c <_puts_r+0x5c>
 8020c68:	68ac      	ldr	r4, [r5, #8]
 8020c6a:	e7e3      	b.n	8020c34 <_puts_r+0x24>
 8020c6c:	4b15      	ldr	r3, [pc, #84]	; (8020cc4 <_puts_r+0xb4>)
 8020c6e:	429c      	cmp	r4, r3
 8020c70:	bf08      	it	eq
 8020c72:	68ec      	ldreq	r4, [r5, #12]
 8020c74:	e7de      	b.n	8020c34 <_puts_r+0x24>
 8020c76:	4621      	mov	r1, r4
 8020c78:	4628      	mov	r0, r5
 8020c7a:	f001 fb25 	bl	80222c8 <__swsetup_r>
 8020c7e:	2800      	cmp	r0, #0
 8020c80:	d0dd      	beq.n	8020c3e <_puts_r+0x2e>
 8020c82:	f04f 30ff 	mov.w	r0, #4294967295
 8020c86:	bd70      	pop	{r4, r5, r6, pc}
 8020c88:	2b00      	cmp	r3, #0
 8020c8a:	da04      	bge.n	8020c96 <_puts_r+0x86>
 8020c8c:	69a2      	ldr	r2, [r4, #24]
 8020c8e:	429a      	cmp	r2, r3
 8020c90:	dc06      	bgt.n	8020ca0 <_puts_r+0x90>
 8020c92:	290a      	cmp	r1, #10
 8020c94:	d004      	beq.n	8020ca0 <_puts_r+0x90>
 8020c96:	6823      	ldr	r3, [r4, #0]
 8020c98:	1c5a      	adds	r2, r3, #1
 8020c9a:	6022      	str	r2, [r4, #0]
 8020c9c:	7019      	strb	r1, [r3, #0]
 8020c9e:	e7cf      	b.n	8020c40 <_puts_r+0x30>
 8020ca0:	4622      	mov	r2, r4
 8020ca2:	4628      	mov	r0, r5
 8020ca4:	f001 fa9e 	bl	80221e4 <__swbuf_r>
 8020ca8:	3001      	adds	r0, #1
 8020caa:	d1c9      	bne.n	8020c40 <_puts_r+0x30>
 8020cac:	e7e9      	b.n	8020c82 <_puts_r+0x72>
 8020cae:	6823      	ldr	r3, [r4, #0]
 8020cb0:	200a      	movs	r0, #10
 8020cb2:	1c5a      	adds	r2, r3, #1
 8020cb4:	6022      	str	r2, [r4, #0]
 8020cb6:	7018      	strb	r0, [r3, #0]
 8020cb8:	e7e5      	b.n	8020c86 <_puts_r+0x76>
 8020cba:	bf00      	nop
 8020cbc:	0804006c 	.word	0x0804006c
 8020cc0:	0804008c 	.word	0x0804008c
 8020cc4:	0804004c 	.word	0x0804004c

08020cc8 <puts>:
 8020cc8:	4b02      	ldr	r3, [pc, #8]	; (8020cd4 <puts+0xc>)
 8020cca:	4601      	mov	r1, r0
 8020ccc:	6818      	ldr	r0, [r3, #0]
 8020cce:	f7ff bf9f 	b.w	8020c10 <_puts_r>
 8020cd2:	bf00      	nop
 8020cd4:	20000450 	.word	0x20000450

08020cd8 <rand>:
 8020cd8:	b538      	push	{r3, r4, r5, lr}
 8020cda:	4b13      	ldr	r3, [pc, #76]	; (8020d28 <rand+0x50>)
 8020cdc:	681c      	ldr	r4, [r3, #0]
 8020cde:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8020ce0:	b97b      	cbnz	r3, 8020d02 <rand+0x2a>
 8020ce2:	2018      	movs	r0, #24
 8020ce4:	f7fe ff92 	bl	801fc0c <malloc>
 8020ce8:	4a10      	ldr	r2, [pc, #64]	; (8020d2c <rand+0x54>)
 8020cea:	4b11      	ldr	r3, [pc, #68]	; (8020d30 <rand+0x58>)
 8020cec:	63a0      	str	r0, [r4, #56]	; 0x38
 8020cee:	e9c0 2300 	strd	r2, r3, [r0]
 8020cf2:	4b10      	ldr	r3, [pc, #64]	; (8020d34 <rand+0x5c>)
 8020cf4:	6083      	str	r3, [r0, #8]
 8020cf6:	230b      	movs	r3, #11
 8020cf8:	8183      	strh	r3, [r0, #12]
 8020cfa:	2201      	movs	r2, #1
 8020cfc:	2300      	movs	r3, #0
 8020cfe:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8020d02:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8020d04:	480c      	ldr	r0, [pc, #48]	; (8020d38 <rand+0x60>)
 8020d06:	690a      	ldr	r2, [r1, #16]
 8020d08:	694b      	ldr	r3, [r1, #20]
 8020d0a:	4c0c      	ldr	r4, [pc, #48]	; (8020d3c <rand+0x64>)
 8020d0c:	4350      	muls	r0, r2
 8020d0e:	fb04 0003 	mla	r0, r4, r3, r0
 8020d12:	fba2 2304 	umull	r2, r3, r2, r4
 8020d16:	4403      	add	r3, r0
 8020d18:	1c54      	adds	r4, r2, #1
 8020d1a:	f143 0500 	adc.w	r5, r3, #0
 8020d1e:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8020d22:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8020d26:	bd38      	pop	{r3, r4, r5, pc}
 8020d28:	20000450 	.word	0x20000450
 8020d2c:	abcd330e 	.word	0xabcd330e
 8020d30:	e66d1234 	.word	0xe66d1234
 8020d34:	0005deec 	.word	0x0005deec
 8020d38:	5851f42d 	.word	0x5851f42d
 8020d3c:	4c957f2d 	.word	0x4c957f2d

08020d40 <realloc>:
 8020d40:	4b02      	ldr	r3, [pc, #8]	; (8020d4c <realloc+0xc>)
 8020d42:	460a      	mov	r2, r1
 8020d44:	4601      	mov	r1, r0
 8020d46:	6818      	ldr	r0, [r3, #0]
 8020d48:	f002 bf4e 	b.w	8023be8 <_realloc_r>
 8020d4c:	20000450 	.word	0x20000450

08020d50 <modf>:
 8020d50:	ee10 1a90 	vmov	r1, s1
 8020d54:	b570      	push	{r4, r5, r6, lr}
 8020d56:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8020d5a:	f2a5 33ff 	subw	r3, r5, #1023	; 0x3ff
 8020d5e:	2b13      	cmp	r3, #19
 8020d60:	ee10 4a10 	vmov	r4, s0
 8020d64:	dc1f      	bgt.n	8020da6 <modf+0x56>
 8020d66:	2b00      	cmp	r3, #0
 8020d68:	da05      	bge.n	8020d76 <modf+0x26>
 8020d6a:	2200      	movs	r2, #0
 8020d6c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8020d70:	e9c0 2300 	strd	r2, r3, [r0]
 8020d74:	bd70      	pop	{r4, r5, r6, pc}
 8020d76:	4d19      	ldr	r5, [pc, #100]	; (8020ddc <modf+0x8c>)
 8020d78:	411d      	asrs	r5, r3
 8020d7a:	ea01 0305 	and.w	r3, r1, r5
 8020d7e:	431c      	orrs	r4, r3
 8020d80:	d107      	bne.n	8020d92 <modf+0x42>
 8020d82:	ed80 0b00 	vstr	d0, [r0]
 8020d86:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8020d8a:	4622      	mov	r2, r4
 8020d8c:	ec43 2b10 	vmov	d0, r2, r3
 8020d90:	e7f0      	b.n	8020d74 <modf+0x24>
 8020d92:	2200      	movs	r2, #0
 8020d94:	ea21 0305 	bic.w	r3, r1, r5
 8020d98:	ec43 2b17 	vmov	d7, r2, r3
 8020d9c:	e9c0 2300 	strd	r2, r3, [r0]
 8020da0:	ee30 0b47 	vsub.f64	d0, d0, d7
 8020da4:	e7e6      	b.n	8020d74 <modf+0x24>
 8020da6:	2b33      	cmp	r3, #51	; 0x33
 8020da8:	dd05      	ble.n	8020db6 <modf+0x66>
 8020daa:	ed80 0b00 	vstr	d0, [r0]
 8020dae:	2200      	movs	r2, #0
 8020db0:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8020db4:	e7ea      	b.n	8020d8c <modf+0x3c>
 8020db6:	f2a5 4313 	subw	r3, r5, #1043	; 0x413
 8020dba:	f04f 35ff 	mov.w	r5, #4294967295
 8020dbe:	40dd      	lsrs	r5, r3
 8020dc0:	ea15 0604 	ands.w	r6, r5, r4
 8020dc4:	d105      	bne.n	8020dd2 <modf+0x82>
 8020dc6:	ed80 0b00 	vstr	d0, [r0]
 8020dca:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8020dce:	4632      	mov	r2, r6
 8020dd0:	e7dc      	b.n	8020d8c <modf+0x3c>
 8020dd2:	ee10 3a90 	vmov	r3, s1
 8020dd6:	ea24 0205 	bic.w	r2, r4, r5
 8020dda:	e7dd      	b.n	8020d98 <modf+0x48>
 8020ddc:	000fffff 	.word	0x000fffff

08020de0 <_sbrk_r>:
 8020de0:	b538      	push	{r3, r4, r5, lr}
 8020de2:	4c06      	ldr	r4, [pc, #24]	; (8020dfc <_sbrk_r+0x1c>)
 8020de4:	2300      	movs	r3, #0
 8020de6:	4605      	mov	r5, r0
 8020de8:	4608      	mov	r0, r1
 8020dea:	6023      	str	r3, [r4, #0]
 8020dec:	f7e3 feb8 	bl	8004b60 <_sbrk>
 8020df0:	1c43      	adds	r3, r0, #1
 8020df2:	d102      	bne.n	8020dfa <_sbrk_r+0x1a>
 8020df4:	6823      	ldr	r3, [r4, #0]
 8020df6:	b103      	cbz	r3, 8020dfa <_sbrk_r+0x1a>
 8020df8:	602b      	str	r3, [r5, #0]
 8020dfa:	bd38      	pop	{r3, r4, r5, pc}
 8020dfc:	2003e328 	.word	0x2003e328

08020e00 <sniprintf>:
 8020e00:	b40c      	push	{r2, r3}
 8020e02:	b530      	push	{r4, r5, lr}
 8020e04:	4b17      	ldr	r3, [pc, #92]	; (8020e64 <sniprintf+0x64>)
 8020e06:	1e0c      	subs	r4, r1, #0
 8020e08:	b09d      	sub	sp, #116	; 0x74
 8020e0a:	681d      	ldr	r5, [r3, #0]
 8020e0c:	da08      	bge.n	8020e20 <sniprintf+0x20>
 8020e0e:	238b      	movs	r3, #139	; 0x8b
 8020e10:	602b      	str	r3, [r5, #0]
 8020e12:	f04f 30ff 	mov.w	r0, #4294967295
 8020e16:	b01d      	add	sp, #116	; 0x74
 8020e18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020e1c:	b002      	add	sp, #8
 8020e1e:	4770      	bx	lr
 8020e20:	f44f 7302 	mov.w	r3, #520	; 0x208
 8020e24:	f8ad 3014 	strh.w	r3, [sp, #20]
 8020e28:	bf14      	ite	ne
 8020e2a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8020e2e:	4623      	moveq	r3, r4
 8020e30:	9304      	str	r3, [sp, #16]
 8020e32:	9307      	str	r3, [sp, #28]
 8020e34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020e38:	9002      	str	r0, [sp, #8]
 8020e3a:	9006      	str	r0, [sp, #24]
 8020e3c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8020e40:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8020e42:	ab21      	add	r3, sp, #132	; 0x84
 8020e44:	a902      	add	r1, sp, #8
 8020e46:	4628      	mov	r0, r5
 8020e48:	9301      	str	r3, [sp, #4]
 8020e4a:	f002 ff4d 	bl	8023ce8 <_svfiprintf_r>
 8020e4e:	1c43      	adds	r3, r0, #1
 8020e50:	bfbc      	itt	lt
 8020e52:	238b      	movlt	r3, #139	; 0x8b
 8020e54:	602b      	strlt	r3, [r5, #0]
 8020e56:	2c00      	cmp	r4, #0
 8020e58:	d0dd      	beq.n	8020e16 <sniprintf+0x16>
 8020e5a:	9b02      	ldr	r3, [sp, #8]
 8020e5c:	2200      	movs	r2, #0
 8020e5e:	701a      	strb	r2, [r3, #0]
 8020e60:	e7d9      	b.n	8020e16 <sniprintf+0x16>
 8020e62:	bf00      	nop
 8020e64:	20000450 	.word	0x20000450

08020e68 <siprintf>:
 8020e68:	b40e      	push	{r1, r2, r3}
 8020e6a:	b500      	push	{lr}
 8020e6c:	b09c      	sub	sp, #112	; 0x70
 8020e6e:	ab1d      	add	r3, sp, #116	; 0x74
 8020e70:	9002      	str	r0, [sp, #8]
 8020e72:	9006      	str	r0, [sp, #24]
 8020e74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8020e78:	4809      	ldr	r0, [pc, #36]	; (8020ea0 <siprintf+0x38>)
 8020e7a:	9107      	str	r1, [sp, #28]
 8020e7c:	9104      	str	r1, [sp, #16]
 8020e7e:	4909      	ldr	r1, [pc, #36]	; (8020ea4 <siprintf+0x3c>)
 8020e80:	f853 2b04 	ldr.w	r2, [r3], #4
 8020e84:	9105      	str	r1, [sp, #20]
 8020e86:	6800      	ldr	r0, [r0, #0]
 8020e88:	9301      	str	r3, [sp, #4]
 8020e8a:	a902      	add	r1, sp, #8
 8020e8c:	f002 ff2c 	bl	8023ce8 <_svfiprintf_r>
 8020e90:	9b02      	ldr	r3, [sp, #8]
 8020e92:	2200      	movs	r2, #0
 8020e94:	701a      	strb	r2, [r3, #0]
 8020e96:	b01c      	add	sp, #112	; 0x70
 8020e98:	f85d eb04 	ldr.w	lr, [sp], #4
 8020e9c:	b003      	add	sp, #12
 8020e9e:	4770      	bx	lr
 8020ea0:	20000450 	.word	0x20000450
 8020ea4:	ffff0208 	.word	0xffff0208

08020ea8 <siscanf>:
 8020ea8:	b40e      	push	{r1, r2, r3}
 8020eaa:	b530      	push	{r4, r5, lr}
 8020eac:	b09c      	sub	sp, #112	; 0x70
 8020eae:	ac1f      	add	r4, sp, #124	; 0x7c
 8020eb0:	f44f 7201 	mov.w	r2, #516	; 0x204
 8020eb4:	f854 5b04 	ldr.w	r5, [r4], #4
 8020eb8:	f8ad 2014 	strh.w	r2, [sp, #20]
 8020ebc:	9002      	str	r0, [sp, #8]
 8020ebe:	9006      	str	r0, [sp, #24]
 8020ec0:	f7df f9c8 	bl	8000254 <strlen>
 8020ec4:	4b0b      	ldr	r3, [pc, #44]	; (8020ef4 <siscanf+0x4c>)
 8020ec6:	9003      	str	r0, [sp, #12]
 8020ec8:	9007      	str	r0, [sp, #28]
 8020eca:	930b      	str	r3, [sp, #44]	; 0x2c
 8020ecc:	480a      	ldr	r0, [pc, #40]	; (8020ef8 <siscanf+0x50>)
 8020ece:	9401      	str	r4, [sp, #4]
 8020ed0:	2300      	movs	r3, #0
 8020ed2:	930f      	str	r3, [sp, #60]	; 0x3c
 8020ed4:	9314      	str	r3, [sp, #80]	; 0x50
 8020ed6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020eda:	f8ad 3016 	strh.w	r3, [sp, #22]
 8020ede:	462a      	mov	r2, r5
 8020ee0:	4623      	mov	r3, r4
 8020ee2:	a902      	add	r1, sp, #8
 8020ee4:	6800      	ldr	r0, [r0, #0]
 8020ee6:	f003 f851 	bl	8023f8c <__ssvfiscanf_r>
 8020eea:	b01c      	add	sp, #112	; 0x70
 8020eec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020ef0:	b003      	add	sp, #12
 8020ef2:	4770      	bx	lr
 8020ef4:	08020f1f 	.word	0x08020f1f
 8020ef8:	20000450 	.word	0x20000450

08020efc <__sread>:
 8020efc:	b510      	push	{r4, lr}
 8020efe:	460c      	mov	r4, r1
 8020f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020f04:	f003 fc60 	bl	80247c8 <_read_r>
 8020f08:	2800      	cmp	r0, #0
 8020f0a:	bfab      	itete	ge
 8020f0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8020f0e:	89a3      	ldrhlt	r3, [r4, #12]
 8020f10:	181b      	addge	r3, r3, r0
 8020f12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8020f16:	bfac      	ite	ge
 8020f18:	6563      	strge	r3, [r4, #84]	; 0x54
 8020f1a:	81a3      	strhlt	r3, [r4, #12]
 8020f1c:	bd10      	pop	{r4, pc}

08020f1e <__seofread>:
 8020f1e:	2000      	movs	r0, #0
 8020f20:	4770      	bx	lr

08020f22 <__swrite>:
 8020f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020f26:	461f      	mov	r7, r3
 8020f28:	898b      	ldrh	r3, [r1, #12]
 8020f2a:	05db      	lsls	r3, r3, #23
 8020f2c:	4605      	mov	r5, r0
 8020f2e:	460c      	mov	r4, r1
 8020f30:	4616      	mov	r6, r2
 8020f32:	d505      	bpl.n	8020f40 <__swrite+0x1e>
 8020f34:	2302      	movs	r3, #2
 8020f36:	2200      	movs	r2, #0
 8020f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020f3c:	f002 faf2 	bl	8023524 <_lseek_r>
 8020f40:	89a3      	ldrh	r3, [r4, #12]
 8020f42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020f46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8020f4a:	81a3      	strh	r3, [r4, #12]
 8020f4c:	4632      	mov	r2, r6
 8020f4e:	463b      	mov	r3, r7
 8020f50:	4628      	mov	r0, r5
 8020f52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020f56:	f001 b9a5 	b.w	80222a4 <_write_r>

08020f5a <__sseek>:
 8020f5a:	b510      	push	{r4, lr}
 8020f5c:	460c      	mov	r4, r1
 8020f5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020f62:	f002 fadf 	bl	8023524 <_lseek_r>
 8020f66:	1c43      	adds	r3, r0, #1
 8020f68:	89a3      	ldrh	r3, [r4, #12]
 8020f6a:	bf15      	itete	ne
 8020f6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8020f6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8020f72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8020f76:	81a3      	strheq	r3, [r4, #12]
 8020f78:	bf18      	it	ne
 8020f7a:	81a3      	strhne	r3, [r4, #12]
 8020f7c:	bd10      	pop	{r4, pc}

08020f7e <__sclose>:
 8020f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020f82:	f001 ba4f 	b.w	8022424 <_close_r>

08020f86 <stpcpy>:
 8020f86:	4603      	mov	r3, r0
 8020f88:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020f8c:	4618      	mov	r0, r3
 8020f8e:	f803 2b01 	strb.w	r2, [r3], #1
 8020f92:	2a00      	cmp	r2, #0
 8020f94:	d1f8      	bne.n	8020f88 <stpcpy+0x2>
 8020f96:	4770      	bx	lr

08020f98 <strchr>:
 8020f98:	b2c9      	uxtb	r1, r1
 8020f9a:	4603      	mov	r3, r0
 8020f9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020fa0:	b11a      	cbz	r2, 8020faa <strchr+0x12>
 8020fa2:	428a      	cmp	r2, r1
 8020fa4:	d1f9      	bne.n	8020f9a <strchr+0x2>
 8020fa6:	4618      	mov	r0, r3
 8020fa8:	4770      	bx	lr
 8020faa:	2900      	cmp	r1, #0
 8020fac:	bf18      	it	ne
 8020fae:	2300      	movne	r3, #0
 8020fb0:	e7f9      	b.n	8020fa6 <strchr+0xe>

08020fb2 <strcpy>:
 8020fb2:	4603      	mov	r3, r0
 8020fb4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020fb8:	f803 2b01 	strb.w	r2, [r3], #1
 8020fbc:	2a00      	cmp	r2, #0
 8020fbe:	d1f9      	bne.n	8020fb4 <strcpy+0x2>
 8020fc0:	4770      	bx	lr

08020fc2 <iso_year_adjust>:
 8020fc2:	6942      	ldr	r2, [r0, #20]
 8020fc4:	2a00      	cmp	r2, #0
 8020fc6:	f240 736c 	movw	r3, #1900	; 0x76c
 8020fca:	bfa8      	it	ge
 8020fcc:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 8020fd0:	441a      	add	r2, r3
 8020fd2:	0793      	lsls	r3, r2, #30
 8020fd4:	d105      	bne.n	8020fe2 <iso_year_adjust+0x20>
 8020fd6:	2164      	movs	r1, #100	; 0x64
 8020fd8:	fb92 f3f1 	sdiv	r3, r2, r1
 8020fdc:	fb01 2313 	mls	r3, r1, r3, r2
 8020fe0:	b9d3      	cbnz	r3, 8021018 <iso_year_adjust+0x56>
 8020fe2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8020fe6:	fb92 f3f1 	sdiv	r3, r2, r1
 8020fea:	fb01 2313 	mls	r3, r1, r3, r2
 8020fee:	fab3 f283 	clz	r2, r3
 8020ff2:	0952      	lsrs	r2, r2, #5
 8020ff4:	e9d0 3106 	ldrd	r3, r1, [r0, #24]
 8020ff8:	005b      	lsls	r3, r3, #1
 8020ffa:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8020ffe:	4413      	add	r3, r2
 8021000:	2b21      	cmp	r3, #33	; 0x21
 8021002:	dc11      	bgt.n	8021028 <iso_year_adjust+0x66>
 8021004:	2b20      	cmp	r3, #32
 8021006:	da30      	bge.n	802106a <iso_year_adjust+0xa8>
 8021008:	2b0d      	cmp	r3, #13
 802100a:	dc07      	bgt.n	802101c <iso_year_adjust+0x5a>
 802100c:	2b0a      	cmp	r3, #10
 802100e:	da2c      	bge.n	802106a <iso_year_adjust+0xa8>
 8021010:	2b01      	cmp	r3, #1
 8021012:	d92a      	bls.n	802106a <iso_year_adjust+0xa8>
 8021014:	2000      	movs	r0, #0
 8021016:	4770      	bx	lr
 8021018:	2201      	movs	r2, #1
 802101a:	e7eb      	b.n	8020ff4 <iso_year_adjust+0x32>
 802101c:	2b10      	cmp	r3, #16
 802101e:	dbf9      	blt.n	8021014 <iso_year_adjust+0x52>
 8021020:	2b11      	cmp	r3, #17
 8021022:	dd22      	ble.n	802106a <iso_year_adjust+0xa8>
 8021024:	3b1c      	subs	r3, #28
 8021026:	e7f3      	b.n	8021010 <iso_year_adjust+0x4e>
 8021028:	f241 62c6 	movw	r2, #5830	; 0x16c6
 802102c:	4293      	cmp	r3, r2
 802102e:	dc0f      	bgt.n	8021050 <iso_year_adjust+0x8e>
 8021030:	f241 62c2 	movw	r2, #5826	; 0x16c2
 8021034:	4293      	cmp	r3, r2
 8021036:	da09      	bge.n	802104c <iso_year_adjust+0x8a>
 8021038:	f241 62a2 	movw	r2, #5794	; 0x16a2
 802103c:	4293      	cmp	r3, r2
 802103e:	d005      	beq.n	802104c <iso_year_adjust+0x8a>
 8021040:	dbe8      	blt.n	8021014 <iso_year_adjust+0x52>
 8021042:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
 8021046:	3b12      	subs	r3, #18
 8021048:	2b02      	cmp	r3, #2
 802104a:	d8e3      	bhi.n	8021014 <iso_year_adjust+0x52>
 802104c:	2001      	movs	r0, #1
 802104e:	4770      	bx	lr
 8021050:	f241 62d5 	movw	r2, #5845	; 0x16d5
 8021054:	4293      	cmp	r3, r2
 8021056:	d0f9      	beq.n	802104c <iso_year_adjust+0x8a>
 8021058:	f241 62d7 	movw	r2, #5847	; 0x16d7
 802105c:	4293      	cmp	r3, r2
 802105e:	d0f5      	beq.n	802104c <iso_year_adjust+0x8a>
 8021060:	f241 62d3 	movw	r2, #5843	; 0x16d3
 8021064:	4293      	cmp	r3, r2
 8021066:	d1d5      	bne.n	8021014 <iso_year_adjust+0x52>
 8021068:	e7f0      	b.n	802104c <iso_year_adjust+0x8a>
 802106a:	f04f 30ff 	mov.w	r0, #4294967295
 802106e:	4770      	bx	lr

08021070 <__strftime>:
 8021070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021074:	b091      	sub	sp, #68	; 0x44
 8021076:	461d      	mov	r5, r3
 8021078:	2300      	movs	r3, #0
 802107a:	4607      	mov	r7, r0
 802107c:	460e      	mov	r6, r1
 802107e:	9303      	str	r3, [sp, #12]
 8021080:	461c      	mov	r4, r3
 8021082:	f101 3bff 	add.w	fp, r1, #4294967295
 8021086:	7813      	ldrb	r3, [r2, #0]
 8021088:	2b00      	cmp	r3, #0
 802108a:	f000 84e3 	beq.w	8021a54 <__strftime+0x9e4>
 802108e:	2b25      	cmp	r3, #37	; 0x25
 8021090:	d11f      	bne.n	80210d2 <__strftime+0x62>
 8021092:	f892 a001 	ldrb.w	sl, [r2, #1]
 8021096:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 802109a:	d023      	beq.n	80210e4 <__strftime+0x74>
 802109c:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 80210a0:	d020      	beq.n	80210e4 <__strftime+0x74>
 80210a2:	f102 0801 	add.w	r8, r2, #1
 80210a6:	f04f 0a00 	mov.w	sl, #0
 80210aa:	f898 3000 	ldrb.w	r3, [r8]
 80210ae:	3b31      	subs	r3, #49	; 0x31
 80210b0:	2b08      	cmp	r3, #8
 80210b2:	d81a      	bhi.n	80210ea <__strftime+0x7a>
 80210b4:	4640      	mov	r0, r8
 80210b6:	220a      	movs	r2, #10
 80210b8:	a908      	add	r1, sp, #32
 80210ba:	f000 fe4f 	bl	8021d5c <strtoul>
 80210be:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80210c2:	4681      	mov	r9, r0
 80210c4:	f898 3000 	ldrb.w	r3, [r8]
 80210c8:	2b45      	cmp	r3, #69	; 0x45
 80210ca:	d111      	bne.n	80210f0 <__strftime+0x80>
 80210cc:	f108 0801 	add.w	r8, r8, #1
 80210d0:	e010      	b.n	80210f4 <__strftime+0x84>
 80210d2:	45a3      	cmp	fp, r4
 80210d4:	d802      	bhi.n	80210dc <__strftime+0x6c>
 80210d6:	2400      	movs	r4, #0
 80210d8:	f000 bcbf 	b.w	8021a5a <__strftime+0x9ea>
 80210dc:	553b      	strb	r3, [r7, r4]
 80210de:	3201      	adds	r2, #1
 80210e0:	3401      	adds	r4, #1
 80210e2:	e7d0      	b.n	8021086 <__strftime+0x16>
 80210e4:	f102 0802 	add.w	r8, r2, #2
 80210e8:	e7df      	b.n	80210aa <__strftime+0x3a>
 80210ea:	f04f 0900 	mov.w	r9, #0
 80210ee:	e7e9      	b.n	80210c4 <__strftime+0x54>
 80210f0:	2b4f      	cmp	r3, #79	; 0x4f
 80210f2:	d0eb      	beq.n	80210cc <__strftime+0x5c>
 80210f4:	f898 1000 	ldrb.w	r1, [r8]
 80210f8:	f1a1 0325 	sub.w	r3, r1, #37	; 0x25
 80210fc:	2b55      	cmp	r3, #85	; 0x55
 80210fe:	d8ea      	bhi.n	80210d6 <__strftime+0x66>
 8021100:	a201      	add	r2, pc, #4	; (adr r2, 8021108 <__strftime+0x98>)
 8021102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021106:	bf00      	nop
 8021108:	08021a4b 	.word	0x08021a4b
 802110c:	080210d7 	.word	0x080210d7
 8021110:	080210d7 	.word	0x080210d7
 8021114:	080210d7 	.word	0x080210d7
 8021118:	080210d7 	.word	0x080210d7
 802111c:	080210d7 	.word	0x080210d7
 8021120:	080210d7 	.word	0x080210d7
 8021124:	080210d7 	.word	0x080210d7
 8021128:	080210d7 	.word	0x080210d7
 802112c:	080210d7 	.word	0x080210d7
 8021130:	080210d7 	.word	0x080210d7
 8021134:	080210d7 	.word	0x080210d7
 8021138:	080210d7 	.word	0x080210d7
 802113c:	080210d7 	.word	0x080210d7
 8021140:	080210d7 	.word	0x080210d7
 8021144:	080210d7 	.word	0x080210d7
 8021148:	080210d7 	.word	0x080210d7
 802114c:	080210d7 	.word	0x080210d7
 8021150:	080210d7 	.word	0x080210d7
 8021154:	080210d7 	.word	0x080210d7
 8021158:	080210d7 	.word	0x080210d7
 802115c:	080210d7 	.word	0x080210d7
 8021160:	080210d7 	.word	0x080210d7
 8021164:	080210d7 	.word	0x080210d7
 8021168:	080210d7 	.word	0x080210d7
 802116c:	080210d7 	.word	0x080210d7
 8021170:	080210d7 	.word	0x080210d7
 8021174:	080210d7 	.word	0x080210d7
 8021178:	0802129d 	.word	0x0802129d
 802117c:	080212f1 	.word	0x080212f1
 8021180:	08021361 	.word	0x08021361
 8021184:	080213fb 	.word	0x080213fb
 8021188:	080210d7 	.word	0x080210d7
 802118c:	08021449 	.word	0x08021449
 8021190:	08021539 	.word	0x08021539
 8021194:	08021651 	.word	0x08021651
 8021198:	0802165f 	.word	0x0802165f
 802119c:	080210d7 	.word	0x080210d7
 80211a0:	080210d7 	.word	0x080210d7
 80211a4:	080210d7 	.word	0x080210d7
 80211a8:	0802168f 	.word	0x0802168f
 80211ac:	080210d7 	.word	0x080210d7
 80211b0:	080210d7 	.word	0x080210d7
 80211b4:	080216a1 	.word	0x080216a1
 80211b8:	080210d7 	.word	0x080210d7
 80211bc:	080216ff 	.word	0x080216ff
 80211c0:	08021817 	.word	0x08021817
 80211c4:	08021825 	.word	0x08021825
 80211c8:	08021875 	.word	0x08021875
 80211cc:	08021885 	.word	0x08021885
 80211d0:	080218f7 	.word	0x080218f7
 80211d4:	08021359 	.word	0x08021359
 80211d8:	08021931 	.word	0x08021931
 80211dc:	080219f7 	.word	0x080219f7
 80211e0:	080210d7 	.word	0x080210d7
 80211e4:	080210d7 	.word	0x080210d7
 80211e8:	080210d7 	.word	0x080210d7
 80211ec:	080210d7 	.word	0x080210d7
 80211f0:	080210d7 	.word	0x080210d7
 80211f4:	080210d7 	.word	0x080210d7
 80211f8:	08021261 	.word	0x08021261
 80211fc:	080212c9 	.word	0x080212c9
 8021200:	0802131b 	.word	0x0802131b
 8021204:	080213d7 	.word	0x080213d7
 8021208:	080213d7 	.word	0x080213d7
 802120c:	080210d7 	.word	0x080210d7
 8021210:	080214a1 	.word	0x080214a1
 8021214:	080212c9 	.word	0x080212c9
 8021218:	080210d7 	.word	0x080210d7
 802121c:	08021681 	.word	0x08021681
 8021220:	08021651 	.word	0x08021651
 8021224:	0802165f 	.word	0x0802165f
 8021228:	08021689 	.word	0x08021689
 802122c:	08021693 	.word	0x08021693
 8021230:	080210d7 	.word	0x080210d7
 8021234:	080216a1 	.word	0x080216a1
 8021238:	080210d7 	.word	0x080210d7
 802123c:	08021349 	.word	0x08021349
 8021240:	08021711 	.word	0x08021711
 8021244:	0802181b 	.word	0x0802181b
 8021248:	0802185d 	.word	0x0802185d
 802124c:	080210d7 	.word	0x080210d7
 8021250:	080218eb 	.word	0x080218eb
 8021254:	08021351 	.word	0x08021351
 8021258:	0802190f 	.word	0x0802190f
 802125c:	08021985 	.word	0x08021985
 8021260:	69ab      	ldr	r3, [r5, #24]
 8021262:	4aa8      	ldr	r2, [pc, #672]	; (8021504 <__strftime+0x494>)
 8021264:	3318      	adds	r3, #24
 8021266:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 802126a:	4648      	mov	r0, r9
 802126c:	f7de fff2 	bl	8000254 <strlen>
 8021270:	eba9 0904 	sub.w	r9, r9, r4
 8021274:	4420      	add	r0, r4
 8021276:	42a0      	cmp	r0, r4
 8021278:	d108      	bne.n	802128c <__strftime+0x21c>
 802127a:	4604      	mov	r4, r0
 802127c:	f898 3000 	ldrb.w	r3, [r8]
 8021280:	2b00      	cmp	r3, #0
 8021282:	f000 83e7 	beq.w	8021a54 <__strftime+0x9e4>
 8021286:	f108 0201 	add.w	r2, r8, #1
 802128a:	e6fc      	b.n	8021086 <__strftime+0x16>
 802128c:	45a3      	cmp	fp, r4
 802128e:	f67f af22 	bls.w	80210d6 <__strftime+0x66>
 8021292:	f819 3004 	ldrb.w	r3, [r9, r4]
 8021296:	553b      	strb	r3, [r7, r4]
 8021298:	3401      	adds	r4, #1
 802129a:	e7ec      	b.n	8021276 <__strftime+0x206>
 802129c:	69aa      	ldr	r2, [r5, #24]
 802129e:	4b99      	ldr	r3, [pc, #612]	; (8021504 <__strftime+0x494>)
 80212a0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80212a4:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 80212a8:	4648      	mov	r0, r9
 80212aa:	f7de ffd3 	bl	8000254 <strlen>
 80212ae:	eba9 0904 	sub.w	r9, r9, r4
 80212b2:	4420      	add	r0, r4
 80212b4:	42a0      	cmp	r0, r4
 80212b6:	d0e0      	beq.n	802127a <__strftime+0x20a>
 80212b8:	45a3      	cmp	fp, r4
 80212ba:	f67f af0c 	bls.w	80210d6 <__strftime+0x66>
 80212be:	f819 3004 	ldrb.w	r3, [r9, r4]
 80212c2:	553b      	strb	r3, [r7, r4]
 80212c4:	3401      	adds	r4, #1
 80212c6:	e7f5      	b.n	80212b4 <__strftime+0x244>
 80212c8:	692a      	ldr	r2, [r5, #16]
 80212ca:	4b8e      	ldr	r3, [pc, #568]	; (8021504 <__strftime+0x494>)
 80212cc:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 80212d0:	4648      	mov	r0, r9
 80212d2:	f7de ffbf 	bl	8000254 <strlen>
 80212d6:	eba9 0904 	sub.w	r9, r9, r4
 80212da:	4420      	add	r0, r4
 80212dc:	42a0      	cmp	r0, r4
 80212de:	d0cc      	beq.n	802127a <__strftime+0x20a>
 80212e0:	45a3      	cmp	fp, r4
 80212e2:	f67f aef8 	bls.w	80210d6 <__strftime+0x66>
 80212e6:	f819 3004 	ldrb.w	r3, [r9, r4]
 80212ea:	553b      	strb	r3, [r7, r4]
 80212ec:	3401      	adds	r4, #1
 80212ee:	e7f5      	b.n	80212dc <__strftime+0x26c>
 80212f0:	692b      	ldr	r3, [r5, #16]
 80212f2:	4a84      	ldr	r2, [pc, #528]	; (8021504 <__strftime+0x494>)
 80212f4:	330c      	adds	r3, #12
 80212f6:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 80212fa:	4648      	mov	r0, r9
 80212fc:	f7de ffaa 	bl	8000254 <strlen>
 8021300:	eba9 0904 	sub.w	r9, r9, r4
 8021304:	4420      	add	r0, r4
 8021306:	42a0      	cmp	r0, r4
 8021308:	d0b7      	beq.n	802127a <__strftime+0x20a>
 802130a:	45a3      	cmp	fp, r4
 802130c:	f67f aee3 	bls.w	80210d6 <__strftime+0x66>
 8021310:	f819 3004 	ldrb.w	r3, [r9, r4]
 8021314:	553b      	strb	r3, [r7, r4]
 8021316:	3401      	adds	r4, #1
 8021318:	e7f5      	b.n	8021306 <__strftime+0x296>
 802131a:	4b7a      	ldr	r3, [pc, #488]	; (8021504 <__strftime+0x494>)
 802131c:	f8d3 90a0 	ldr.w	r9, [r3, #160]	; 0xa0
 8021320:	4648      	mov	r0, r9
 8021322:	f7de ff97 	bl	8000254 <strlen>
 8021326:	f899 3000 	ldrb.w	r3, [r9]
 802132a:	2b00      	cmp	r3, #0
 802132c:	d0a6      	beq.n	802127c <__strftime+0x20c>
 802132e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8021330:	9300      	str	r3, [sp, #0]
 8021332:	464a      	mov	r2, r9
 8021334:	462b      	mov	r3, r5
 8021336:	1b31      	subs	r1, r6, r4
 8021338:	1938      	adds	r0, r7, r4
 802133a:	f7ff fe99 	bl	8021070 <__strftime>
 802133e:	2800      	cmp	r0, #0
 8021340:	f77f aec9 	ble.w	80210d6 <__strftime+0x66>
 8021344:	4404      	add	r4, r0
 8021346:	e799      	b.n	802127c <__strftime+0x20c>
 8021348:	4b6e      	ldr	r3, [pc, #440]	; (8021504 <__strftime+0x494>)
 802134a:	f8d3 90e4 	ldr.w	r9, [r3, #228]	; 0xe4
 802134e:	e7e7      	b.n	8021320 <__strftime+0x2b0>
 8021350:	4b6c      	ldr	r3, [pc, #432]	; (8021504 <__strftime+0x494>)
 8021352:	f8d3 909c 	ldr.w	r9, [r3, #156]	; 0x9c
 8021356:	e7e3      	b.n	8021320 <__strftime+0x2b0>
 8021358:	4b6a      	ldr	r3, [pc, #424]	; (8021504 <__strftime+0x494>)
 802135a:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 802135e:	e7df      	b.n	8021320 <__strftime+0x2b0>
 8021360:	4b69      	ldr	r3, [pc, #420]	; (8021508 <__strftime+0x498>)
 8021362:	6969      	ldr	r1, [r5, #20]
 8021364:	4299      	cmp	r1, r3
 8021366:	bfac      	ite	ge
 8021368:	2300      	movge	r3, #0
 802136a:	2301      	movlt	r3, #1
 802136c:	2900      	cmp	r1, #0
 802136e:	9304      	str	r3, [sp, #16]
 8021370:	db10      	blt.n	8021394 <__strftime+0x324>
 8021372:	2064      	movs	r0, #100	; 0x64
 8021374:	fb91 f0f0 	sdiv	r0, r1, r0
 8021378:	3013      	adds	r0, #19
 802137a:	f1ba 0f00 	cmp.w	sl, #0
 802137e:	d013      	beq.n	80213a8 <__strftime+0x338>
 8021380:	2863      	cmp	r0, #99	; 0x63
 8021382:	dd26      	ble.n	80213d2 <__strftime+0x362>
 8021384:	4a61      	ldr	r2, [pc, #388]	; (802150c <__strftime+0x49c>)
 8021386:	4b62      	ldr	r3, [pc, #392]	; (8021510 <__strftime+0x4a0>)
 8021388:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 802138c:	bf18      	it	ne
 802138e:	4613      	movne	r3, r2
 8021390:	4a60      	ldr	r2, [pc, #384]	; (8021514 <__strftime+0x4a4>)
 8021392:	e00b      	b.n	80213ac <__strftime+0x33c>
 8021394:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 8021398:	9105      	str	r1, [sp, #20]
 802139a:	f001 f803 	bl	80223a4 <abs>
 802139e:	2364      	movs	r3, #100	; 0x64
 80213a0:	9905      	ldr	r1, [sp, #20]
 80213a2:	fb90 f0f3 	sdiv	r0, r0, r3
 80213a6:	e7e8      	b.n	802137a <__strftime+0x30a>
 80213a8:	4b58      	ldr	r3, [pc, #352]	; (802150c <__strftime+0x49c>)
 80213aa:	4a5b      	ldr	r2, [pc, #364]	; (8021518 <__strftime+0x4a8>)
 80213ac:	9001      	str	r0, [sp, #4]
 80213ae:	9804      	ldr	r0, [sp, #16]
 80213b0:	f8df c154 	ldr.w	ip, [pc, #340]	; 8021508 <__strftime+0x498>
 80213b4:	f1b9 0f02 	cmp.w	r9, #2
 80213b8:	bf2c      	ite	cs
 80213ba:	ebc0 0009 	rsbcs	r0, r0, r9
 80213be:	f1c0 0002 	rsbcc	r0, r0, #2
 80213c2:	9000      	str	r0, [sp, #0]
 80213c4:	4855      	ldr	r0, [pc, #340]	; (802151c <__strftime+0x4ac>)
 80213c6:	4561      	cmp	r1, ip
 80213c8:	bfb8      	it	lt
 80213ca:	4603      	movlt	r3, r0
 80213cc:	1b31      	subs	r1, r6, r4
 80213ce:	1938      	adds	r0, r7, r4
 80213d0:	e029      	b.n	8021426 <__strftime+0x3b6>
 80213d2:	4b4e      	ldr	r3, [pc, #312]	; (802150c <__strftime+0x49c>)
 80213d4:	e7dc      	b.n	8021390 <__strftime+0x320>
 80213d6:	4852      	ldr	r0, [pc, #328]	; (8021520 <__strftime+0x4b0>)
 80213d8:	4a52      	ldr	r2, [pc, #328]	; (8021524 <__strftime+0x4b4>)
 80213da:	68eb      	ldr	r3, [r5, #12]
 80213dc:	2964      	cmp	r1, #100	; 0x64
 80213de:	bf18      	it	ne
 80213e0:	4602      	movne	r2, r0
 80213e2:	1b31      	subs	r1, r6, r4
 80213e4:	1938      	adds	r0, r7, r4
 80213e6:	f7ff fd0b 	bl	8020e00 <sniprintf>
 80213ea:	2800      	cmp	r0, #0
 80213ec:	f6ff ae73 	blt.w	80210d6 <__strftime+0x66>
 80213f0:	4404      	add	r4, r0
 80213f2:	42a6      	cmp	r6, r4
 80213f4:	f63f af42 	bhi.w	802127c <__strftime+0x20c>
 80213f8:	e66d      	b.n	80210d6 <__strftime+0x66>
 80213fa:	6968      	ldr	r0, [r5, #20]
 80213fc:	692b      	ldr	r3, [r5, #16]
 80213fe:	68ea      	ldr	r2, [r5, #12]
 8021400:	2800      	cmp	r0, #0
 8021402:	eb07 0904 	add.w	r9, r7, r4
 8021406:	eba6 0a04 	sub.w	sl, r6, r4
 802140a:	f103 0301 	add.w	r3, r3, #1
 802140e:	db0d      	blt.n	802142c <__strftime+0x3bc>
 8021410:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8021414:	fb90 f1fc 	sdiv	r1, r0, ip
 8021418:	fb0c 0011 	mls	r0, ip, r1, r0
 802141c:	e9cd 2000 	strd	r2, r0, [sp]
 8021420:	4a41      	ldr	r2, [pc, #260]	; (8021528 <__strftime+0x4b8>)
 8021422:	4651      	mov	r1, sl
 8021424:	4648      	mov	r0, r9
 8021426:	f7ff fceb 	bl	8020e00 <sniprintf>
 802142a:	e7de      	b.n	80213ea <__strftime+0x37a>
 802142c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8021430:	e9cd 3204 	strd	r3, r2, [sp, #16]
 8021434:	f000 ffb6 	bl	80223a4 <abs>
 8021438:	2164      	movs	r1, #100	; 0x64
 802143a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 802143e:	fb90 fcf1 	sdiv	ip, r0, r1
 8021442:	fb0c 0011 	mls	r0, ip, r1, r0
 8021446:	e7e9      	b.n	802141c <__strftime+0x3ac>
 8021448:	2325      	movs	r3, #37	; 0x25
 802144a:	f88d 3020 	strb.w	r3, [sp, #32]
 802144e:	f1ba 0f00 	cmp.w	sl, #0
 8021452:	d013      	beq.n	802147c <__strftime+0x40c>
 8021454:	f1b9 0f06 	cmp.w	r9, #6
 8021458:	f88d a021 	strb.w	sl, [sp, #33]	; 0x21
 802145c:	bf38      	it	cc
 802145e:	f04f 0906 	movcc.w	r9, #6
 8021462:	f1b9 0306 	subs.w	r3, r9, #6
 8021466:	d10f      	bne.n	8021488 <__strftime+0x418>
 8021468:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 802146c:	492f      	ldr	r1, [pc, #188]	; (802152c <__strftime+0x4bc>)
 802146e:	f7ff fda0 	bl	8020fb2 <strcpy>
 8021472:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8021474:	9300      	str	r3, [sp, #0]
 8021476:	aa08      	add	r2, sp, #32
 8021478:	462b      	mov	r3, r5
 802147a:	e75c      	b.n	8021336 <__strftime+0x2c6>
 802147c:	232b      	movs	r3, #43	; 0x2b
 802147e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8021482:	f04f 090a 	mov.w	r9, #10
 8021486:	e7ec      	b.n	8021462 <__strftime+0x3f2>
 8021488:	4a29      	ldr	r2, [pc, #164]	; (8021530 <__strftime+0x4c0>)
 802148a:	211e      	movs	r1, #30
 802148c:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8021490:	f7ff fcb6 	bl	8020e00 <sniprintf>
 8021494:	2800      	cmp	r0, #0
 8021496:	dde7      	ble.n	8021468 <__strftime+0x3f8>
 8021498:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 802149c:	4418      	add	r0, r3
 802149e:	e7e5      	b.n	802146c <__strftime+0x3fc>
 80214a0:	4628      	mov	r0, r5
 80214a2:	f7ff fd8e 	bl	8020fc2 <iso_year_adjust>
 80214a6:	4681      	mov	r9, r0
 80214a8:	6968      	ldr	r0, [r5, #20]
 80214aa:	2800      	cmp	r0, #0
 80214ac:	db1a      	blt.n	80214e4 <__strftime+0x474>
 80214ae:	2264      	movs	r2, #100	; 0x64
 80214b0:	fb90 f3f2 	sdiv	r3, r0, r2
 80214b4:	f1b9 0f00 	cmp.w	r9, #0
 80214b8:	fb02 0013 	mls	r0, r2, r3, r0
 80214bc:	da1a      	bge.n	80214f4 <__strftime+0x484>
 80214be:	696a      	ldr	r2, [r5, #20]
 80214c0:	4b1c      	ldr	r3, [pc, #112]	; (8021534 <__strftime+0x4c4>)
 80214c2:	429a      	cmp	r2, r3
 80214c4:	bfb8      	it	lt
 80214c6:	f04f 0901 	movlt.w	r9, #1
 80214ca:	2364      	movs	r3, #100	; 0x64
 80214cc:	4481      	add	r9, r0
 80214ce:	fb99 f0f3 	sdiv	r0, r9, r3
 80214d2:	fb03 9910 	mls	r9, r3, r0, r9
 80214d6:	4499      	add	r9, r3
 80214d8:	fb99 f2f3 	sdiv	r2, r9, r3
 80214dc:	fb03 9312 	mls	r3, r3, r2, r9
 80214e0:	4a10      	ldr	r2, [pc, #64]	; (8021524 <__strftime+0x4b4>)
 80214e2:	e77e      	b.n	80213e2 <__strftime+0x372>
 80214e4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80214e8:	f000 ff5c 	bl	80223a4 <abs>
 80214ec:	2364      	movs	r3, #100	; 0x64
 80214ee:	fb90 f2f3 	sdiv	r2, r0, r3
 80214f2:	e7df      	b.n	80214b4 <__strftime+0x444>
 80214f4:	d0e9      	beq.n	80214ca <__strftime+0x45a>
 80214f6:	696a      	ldr	r2, [r5, #20]
 80214f8:	4b03      	ldr	r3, [pc, #12]	; (8021508 <__strftime+0x498>)
 80214fa:	429a      	cmp	r2, r3
 80214fc:	bfb8      	it	lt
 80214fe:	f04f 39ff 	movlt.w	r9, #4294967295
 8021502:	e7e2      	b.n	80214ca <__strftime+0x45a>
 8021504:	0803fc80 	.word	0x0803fc80
 8021508:	fffff894 	.word	0xfffff894
 802150c:	0803ff02 	.word	0x0803ff02
 8021510:	0803fc35 	.word	0x0803fc35
 8021514:	0803fc2d 	.word	0x0803fc2d
 8021518:	0803fc26 	.word	0x0803fc26
 802151c:	080401d0 	.word	0x080401d0
 8021520:	0803fc37 	.word	0x0803fc37
 8021524:	0803fc45 	.word	0x0803fc45
 8021528:	0803fc3b 	.word	0x0803fc3b
 802152c:	0803fc4e 	.word	0x0803fc4e
 8021530:	0803fc4a 	.word	0x0803fc4a
 8021534:	fffff895 	.word	0xfffff895
 8021538:	696b      	ldr	r3, [r5, #20]
 802153a:	9304      	str	r3, [sp, #16]
 802153c:	9a04      	ldr	r2, [sp, #16]
 802153e:	4bbd      	ldr	r3, [pc, #756]	; (8021834 <__strftime+0x7c4>)
 8021540:	429a      	cmp	r2, r3
 8021542:	bfac      	ite	ge
 8021544:	2300      	movge	r3, #0
 8021546:	2301      	movlt	r3, #1
 8021548:	4628      	mov	r0, r5
 802154a:	9305      	str	r3, [sp, #20]
 802154c:	f7ff fd39 	bl	8020fc2 <iso_year_adjust>
 8021550:	9a04      	ldr	r2, [sp, #16]
 8021552:	2a00      	cmp	r2, #0
 8021554:	4603      	mov	r3, r0
 8021556:	db3a      	blt.n	80215ce <__strftime+0x55e>
 8021558:	2264      	movs	r2, #100	; 0x64
 802155a:	9904      	ldr	r1, [sp, #16]
 802155c:	fb91 f2f2 	sdiv	r2, r1, r2
 8021560:	3213      	adds	r2, #19
 8021562:	6968      	ldr	r0, [r5, #20]
 8021564:	2800      	cmp	r0, #0
 8021566:	db3d      	blt.n	80215e4 <__strftime+0x574>
 8021568:	f04f 0c64 	mov.w	ip, #100	; 0x64
 802156c:	fb90 fefc 	sdiv	lr, r0, ip
 8021570:	fb0c 001e 	mls	r0, ip, lr, r0
 8021574:	2b00      	cmp	r3, #0
 8021576:	da44      	bge.n	8021602 <__strftime+0x592>
 8021578:	f8df c2dc 	ldr.w	ip, [pc, #732]	; 8021858 <__strftime+0x7e8>
 802157c:	6969      	ldr	r1, [r5, #20]
 802157e:	4561      	cmp	r1, ip
 8021580:	da01      	bge.n	8021586 <__strftime+0x516>
 8021582:	2301      	movs	r3, #1
 8021584:	9305      	str	r3, [sp, #20]
 8021586:	4403      	add	r3, r0
 8021588:	1c59      	adds	r1, r3, #1
 802158a:	d146      	bne.n	802161a <__strftime+0x5aa>
 802158c:	3a01      	subs	r2, #1
 802158e:	2363      	movs	r3, #99	; 0x63
 8021590:	2064      	movs	r0, #100	; 0x64
 8021592:	fb00 3202 	mla	r2, r0, r2, r3
 8021596:	9b05      	ldr	r3, [sp, #20]
 8021598:	2b00      	cmp	r3, #0
 802159a:	d043      	beq.n	8021624 <__strftime+0x5b4>
 802159c:	232d      	movs	r3, #45	; 0x2d
 802159e:	f88d 3020 	strb.w	r3, [sp, #32]
 80215a2:	f1b9 0f00 	cmp.w	r9, #0
 80215a6:	d001      	beq.n	80215ac <__strftime+0x53c>
 80215a8:	f109 39ff 	add.w	r9, r9, #4294967295
 80215ac:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 80215b0:	2125      	movs	r1, #37	; 0x25
 80215b2:	7019      	strb	r1, [r3, #0]
 80215b4:	f1ba 0f00 	cmp.w	sl, #0
 80215b8:	d144      	bne.n	8021644 <__strftime+0x5d4>
 80215ba:	1c58      	adds	r0, r3, #1
 80215bc:	499e      	ldr	r1, [pc, #632]	; (8021838 <__strftime+0x7c8>)
 80215be:	9204      	str	r2, [sp, #16]
 80215c0:	f7ff fcf7 	bl	8020fb2 <strcpy>
 80215c4:	9a04      	ldr	r2, [sp, #16]
 80215c6:	9200      	str	r2, [sp, #0]
 80215c8:	464b      	mov	r3, r9
 80215ca:	aa08      	add	r2, sp, #32
 80215cc:	e09b      	b.n	8021706 <__strftime+0x696>
 80215ce:	9b04      	ldr	r3, [sp, #16]
 80215d0:	9006      	str	r0, [sp, #24]
 80215d2:	f203 706c 	addw	r0, r3, #1900	; 0x76c
 80215d6:	f000 fee5 	bl	80223a4 <abs>
 80215da:	2264      	movs	r2, #100	; 0x64
 80215dc:	9b06      	ldr	r3, [sp, #24]
 80215de:	fb90 f2f2 	sdiv	r2, r0, r2
 80215e2:	e7be      	b.n	8021562 <__strftime+0x4f2>
 80215e4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80215e8:	e9cd 3206 	strd	r3, r2, [sp, #24]
 80215ec:	f000 feda 	bl	80223a4 <abs>
 80215f0:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80215f4:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80215f8:	fb90 fefc 	sdiv	lr, r0, ip
 80215fc:	fb0e 001c 	mls	r0, lr, ip, r0
 8021600:	e7b8      	b.n	8021574 <__strftime+0x504>
 8021602:	d0c0      	beq.n	8021586 <__strftime+0x516>
 8021604:	9904      	ldr	r1, [sp, #16]
 8021606:	f8df c22c 	ldr.w	ip, [pc, #556]	; 8021834 <__strftime+0x7c4>
 802160a:	4561      	cmp	r1, ip
 802160c:	bfae      	itee	ge
 802160e:	2100      	movge	r1, #0
 8021610:	2101      	movlt	r1, #1
 8021612:	f04f 33ff 	movlt.w	r3, #4294967295
 8021616:	9105      	str	r1, [sp, #20]
 8021618:	e7b5      	b.n	8021586 <__strftime+0x516>
 802161a:	2b64      	cmp	r3, #100	; 0x64
 802161c:	bf04      	itt	eq
 802161e:	3201      	addeq	r2, #1
 8021620:	2300      	moveq	r3, #0
 8021622:	e7b5      	b.n	8021590 <__strftime+0x520>
 8021624:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 8021628:	d110      	bne.n	802164c <__strftime+0x5dc>
 802162a:	f242 730f 	movw	r3, #9999	; 0x270f
 802162e:	429a      	cmp	r2, r3
 8021630:	d90c      	bls.n	802164c <__strftime+0x5dc>
 8021632:	f88d a020 	strb.w	sl, [sp, #32]
 8021636:	f1b9 0f00 	cmp.w	r9, #0
 802163a:	d1b5      	bne.n	80215a8 <__strftime+0x538>
 802163c:	ab10      	add	r3, sp, #64	; 0x40
 802163e:	2125      	movs	r1, #37	; 0x25
 8021640:	f803 1d1f 	strb.w	r1, [r3, #-31]!
 8021644:	2130      	movs	r1, #48	; 0x30
 8021646:	1c98      	adds	r0, r3, #2
 8021648:	7059      	strb	r1, [r3, #1]
 802164a:	e7b7      	b.n	80215bc <__strftime+0x54c>
 802164c:	ab08      	add	r3, sp, #32
 802164e:	e7af      	b.n	80215b0 <__strftime+0x540>
 8021650:	487a      	ldr	r0, [pc, #488]	; (802183c <__strftime+0x7cc>)
 8021652:	4a7b      	ldr	r2, [pc, #492]	; (8021840 <__strftime+0x7d0>)
 8021654:	68ab      	ldr	r3, [r5, #8]
 8021656:	296b      	cmp	r1, #107	; 0x6b
 8021658:	bf18      	it	ne
 802165a:	4602      	movne	r2, r0
 802165c:	e6c1      	b.n	80213e2 <__strftime+0x372>
 802165e:	68ab      	ldr	r3, [r5, #8]
 8021660:	220c      	movs	r2, #12
 8021662:	b15b      	cbz	r3, 802167c <__strftime+0x60c>
 8021664:	4293      	cmp	r3, r2
 8021666:	d003      	beq.n	8021670 <__strftime+0x600>
 8021668:	fb93 f0f2 	sdiv	r0, r3, r2
 802166c:	fb02 3310 	mls	r3, r2, r0, r3
 8021670:	4873      	ldr	r0, [pc, #460]	; (8021840 <__strftime+0x7d0>)
 8021672:	4a72      	ldr	r2, [pc, #456]	; (802183c <__strftime+0x7cc>)
 8021674:	2949      	cmp	r1, #73	; 0x49
 8021676:	bf18      	it	ne
 8021678:	4602      	movne	r2, r0
 802167a:	e6b2      	b.n	80213e2 <__strftime+0x372>
 802167c:	4613      	mov	r3, r2
 802167e:	e7f7      	b.n	8021670 <__strftime+0x600>
 8021680:	69eb      	ldr	r3, [r5, #28]
 8021682:	4a70      	ldr	r2, [pc, #448]	; (8021844 <__strftime+0x7d4>)
 8021684:	3301      	adds	r3, #1
 8021686:	e6ac      	b.n	80213e2 <__strftime+0x372>
 8021688:	692b      	ldr	r3, [r5, #16]
 802168a:	3301      	adds	r3, #1
 802168c:	e728      	b.n	80214e0 <__strftime+0x470>
 802168e:	686b      	ldr	r3, [r5, #4]
 8021690:	e726      	b.n	80214e0 <__strftime+0x470>
 8021692:	45a3      	cmp	fp, r4
 8021694:	f67f ad1f 	bls.w	80210d6 <__strftime+0x66>
 8021698:	230a      	movs	r3, #10
 802169a:	553b      	strb	r3, [r7, r4]
 802169c:	3401      	adds	r4, #1
 802169e:	e5ed      	b.n	802127c <__strftime+0x20c>
 80216a0:	68ab      	ldr	r3, [r5, #8]
 80216a2:	2b0b      	cmp	r3, #11
 80216a4:	bfcc      	ite	gt
 80216a6:	22a4      	movgt	r2, #164	; 0xa4
 80216a8:	22a0      	movle	r2, #160	; 0xa0
 80216aa:	4b67      	ldr	r3, [pc, #412]	; (8021848 <__strftime+0x7d8>)
 80216ac:	4413      	add	r3, r2
 80216ae:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80216b2:	4648      	mov	r0, r9
 80216b4:	f7de fdce 	bl	8000254 <strlen>
 80216b8:	eba9 0304 	sub.w	r3, r9, r4
 80216bc:	eb04 0a00 	add.w	sl, r4, r0
 80216c0:	45a2      	cmp	sl, r4
 80216c2:	d101      	bne.n	80216c8 <__strftime+0x658>
 80216c4:	4654      	mov	r4, sl
 80216c6:	e5d9      	b.n	802127c <__strftime+0x20c>
 80216c8:	45a3      	cmp	fp, r4
 80216ca:	f67f ad04 	bls.w	80210d6 <__strftime+0x66>
 80216ce:	f898 2000 	ldrb.w	r2, [r8]
 80216d2:	f813 9004 	ldrb.w	r9, [r3, r4]
 80216d6:	2a50      	cmp	r2, #80	; 0x50
 80216d8:	d10d      	bne.n	80216f6 <__strftime+0x686>
 80216da:	9304      	str	r3, [sp, #16]
 80216dc:	f7fe fa88 	bl	801fbf0 <__locale_ctype_ptr>
 80216e0:	4448      	add	r0, r9
 80216e2:	9b04      	ldr	r3, [sp, #16]
 80216e4:	7842      	ldrb	r2, [r0, #1]
 80216e6:	f002 0203 	and.w	r2, r2, #3
 80216ea:	2a01      	cmp	r2, #1
 80216ec:	bf08      	it	eq
 80216ee:	f109 0920 	addeq.w	r9, r9, #32
 80216f2:	fa5f f989 	uxtb.w	r9, r9
 80216f6:	f807 9004 	strb.w	r9, [r7, r4]
 80216fa:	3401      	adds	r4, #1
 80216fc:	e7e0      	b.n	80216c0 <__strftime+0x650>
 80216fe:	686b      	ldr	r3, [r5, #4]
 8021700:	9300      	str	r3, [sp, #0]
 8021702:	4a52      	ldr	r2, [pc, #328]	; (802184c <__strftime+0x7dc>)
 8021704:	68ab      	ldr	r3, [r5, #8]
 8021706:	1b31      	subs	r1, r6, r4
 8021708:	1938      	adds	r0, r7, r4
 802170a:	f7ff fb79 	bl	8020e00 <sniprintf>
 802170e:	e66c      	b.n	80213ea <__strftime+0x37a>
 8021710:	6a2b      	ldr	r3, [r5, #32]
 8021712:	2b00      	cmp	r3, #0
 8021714:	db7c      	blt.n	8021810 <__strftime+0x7a0>
 8021716:	f000 fbdf 	bl	8021ed8 <__tz_lock>
 802171a:	9b03      	ldr	r3, [sp, #12]
 802171c:	b90b      	cbnz	r3, 8021722 <__strftime+0x6b2>
 802171e:	f000 fbdd 	bl	8021edc <_tzset_unlocked>
 8021722:	f001 fe3b 	bl	802339c <__gettzinfo>
 8021726:	6a2b      	ldr	r3, [r5, #32]
 8021728:	2b00      	cmp	r3, #0
 802172a:	bfcc      	ite	gt
 802172c:	2350      	movgt	r3, #80	; 0x50
 802172e:	2328      	movle	r3, #40	; 0x28
 8021730:	58c3      	ldr	r3, [r0, r3]
 8021732:	425b      	negs	r3, r3
 8021734:	9304      	str	r3, [sp, #16]
 8021736:	f000 fbd0 	bl	8021eda <__tz_unlock>
 802173a:	2301      	movs	r3, #1
 802173c:	9303      	str	r3, [sp, #12]
 802173e:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8021742:	193b      	adds	r3, r7, r4
 8021744:	4662      	mov	r2, ip
 8021746:	f1bc 0045 	subs.w	r0, ip, #69	; 0x45
 802174a:	9305      	str	r3, [sp, #20]
 802174c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8021750:	f143 31ff 	adc.w	r1, r3, #4294967295
 8021754:	2800      	cmp	r0, #0
 8021756:	f171 0e00 	sbcs.w	lr, r1, #0
 802175a:	da03      	bge.n	8021764 <__strftime+0x6f4>
 802175c:	f1bc 0042 	subs.w	r0, ip, #66	; 0x42
 8021760:	f143 31ff 	adc.w	r1, r3, #4294967295
 8021764:	0883      	lsrs	r3, r0, #2
 8021766:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
 802176a:	4699      	mov	r9, r3
 802176c:	f10c 30ff 	add.w	r0, ip, #4294967295
 8021770:	108b      	asrs	r3, r1, #2
 8021772:	2164      	movs	r1, #100	; 0x64
 8021774:	fb90 f1f1 	sdiv	r1, r0, r1
 8021778:	ebb9 0201 	subs.w	r2, r9, r1
 802177c:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
 8021780:	f20c 102b 	addw	r0, ip, #299	; 0x12b
 8021784:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8021788:	fb90 f1f1 	sdiv	r1, r0, r1
 802178c:	eb12 0901 	adds.w	r9, r2, r1
 8021790:	eb43 7ae1 	adc.w	sl, r3, r1, asr #31
 8021794:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 8021798:	f240 116d 	movw	r1, #365	; 0x16d
 802179c:	fb01 fc0c 	mul.w	ip, r1, ip
 80217a0:	69e9      	ldr	r1, [r5, #28]
 80217a2:	eb19 020c 	adds.w	r2, r9, ip
 80217a6:	eb4a 73ec 	adc.w	r3, sl, ip, asr #31
 80217aa:	eb12 0901 	adds.w	r9, r2, r1
 80217ae:	f04f 0c18 	mov.w	ip, #24
 80217b2:	eb43 7ae1 	adc.w	sl, r3, r1, asr #31
 80217b6:	fba9 230c 	umull	r2, r3, r9, ip
 80217ba:	4619      	mov	r1, r3
 80217bc:	fb0c 130a 	mla	r3, ip, sl, r1
 80217c0:	4619      	mov	r1, r3
 80217c2:	68ab      	ldr	r3, [r5, #8]
 80217c4:	4610      	mov	r0, r2
 80217c6:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 80217ca:	18c0      	adds	r0, r0, r3
 80217cc:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 80217d0:	fba0 230c 	umull	r2, r3, r0, ip
 80217d4:	fb0c 3301 	mla	r3, ip, r1, r3
 80217d8:	6869      	ldr	r1, [r5, #4]
 80217da:	4691      	mov	r9, r2
 80217dc:	eb19 0201 	adds.w	r2, r9, r1
 80217e0:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 80217e4:	fba2 010c 	umull	r0, r1, r2, ip
 80217e8:	fb0c 1103 	mla	r1, ip, r3, r1
 80217ec:	682b      	ldr	r3, [r5, #0]
 80217ee:	4a18      	ldr	r2, [pc, #96]	; (8021850 <__strftime+0x7e0>)
 80217f0:	eb10 0903 	adds.w	r9, r0, r3
 80217f4:	eb41 7ae3 	adc.w	sl, r1, r3, asr #31
 80217f8:	9b04      	ldr	r3, [sp, #16]
 80217fa:	ebb9 0003 	subs.w	r0, r9, r3
 80217fe:	eb6a 71e3 	sbc.w	r1, sl, r3, asr #31
 8021802:	e9cd 0100 	strd	r0, r1, [sp]
 8021806:	1b31      	subs	r1, r6, r4
 8021808:	1938      	adds	r0, r7, r4
 802180a:	f7ff faf9 	bl	8020e00 <sniprintf>
 802180e:	e5ec      	b.n	80213ea <__strftime+0x37a>
 8021810:	2300      	movs	r3, #0
 8021812:	9304      	str	r3, [sp, #16]
 8021814:	e793      	b.n	802173e <__strftime+0x6ce>
 8021816:	682b      	ldr	r3, [r5, #0]
 8021818:	e662      	b.n	80214e0 <__strftime+0x470>
 802181a:	45a3      	cmp	fp, r4
 802181c:	f67f ac5b 	bls.w	80210d6 <__strftime+0x66>
 8021820:	2309      	movs	r3, #9
 8021822:	e73a      	b.n	802169a <__strftime+0x62a>
 8021824:	682b      	ldr	r3, [r5, #0]
 8021826:	9301      	str	r3, [sp, #4]
 8021828:	686b      	ldr	r3, [r5, #4]
 802182a:	9300      	str	r3, [sp, #0]
 802182c:	4a09      	ldr	r2, [pc, #36]	; (8021854 <__strftime+0x7e4>)
 802182e:	68ab      	ldr	r3, [r5, #8]
 8021830:	e5cc      	b.n	80213cc <__strftime+0x35c>
 8021832:	bf00      	nop
 8021834:	fffff894 	.word	0xfffff894
 8021838:	0803fc56 	.word	0x0803fc56
 802183c:	0803fc45 	.word	0x0803fc45
 8021840:	0803fc37 	.word	0x0803fc37
 8021844:	0803fc5a 	.word	0x0803fc5a
 8021848:	0803fc80 	.word	0x0803fc80
 802184c:	0803fc69 	.word	0x0803fc69
 8021850:	0803fc5f 	.word	0x0803fc5f
 8021854:	0803fc64 	.word	0x0803fc64
 8021858:	fffff895 	.word	0xfffff895
 802185c:	45a3      	cmp	fp, r4
 802185e:	f67f ac3a 	bls.w	80210d6 <__strftime+0x66>
 8021862:	69ab      	ldr	r3, [r5, #24]
 8021864:	193a      	adds	r2, r7, r4
 8021866:	3401      	adds	r4, #1
 8021868:	b913      	cbnz	r3, 8021870 <__strftime+0x800>
 802186a:	2337      	movs	r3, #55	; 0x37
 802186c:	7013      	strb	r3, [r2, #0]
 802186e:	e505      	b.n	802127c <__strftime+0x20c>
 8021870:	3330      	adds	r3, #48	; 0x30
 8021872:	e7fb      	b.n	802186c <__strftime+0x7fc>
 8021874:	69eb      	ldr	r3, [r5, #28]
 8021876:	69aa      	ldr	r2, [r5, #24]
 8021878:	3307      	adds	r3, #7
 802187a:	1a9b      	subs	r3, r3, r2
 802187c:	2207      	movs	r2, #7
 802187e:	fb93 f3f2 	sdiv	r3, r3, r2
 8021882:	e62d      	b.n	80214e0 <__strftime+0x470>
 8021884:	4628      	mov	r0, r5
 8021886:	f7ff fb9c 	bl	8020fc2 <iso_year_adjust>
 802188a:	69aa      	ldr	r2, [r5, #24]
 802188c:	b132      	cbz	r2, 802189c <__strftime+0x82c>
 802188e:	3a01      	subs	r2, #1
 8021890:	2800      	cmp	r0, #0
 8021892:	dc28      	bgt.n	80218e6 <__strftime+0x876>
 8021894:	69eb      	ldr	r3, [r5, #28]
 8021896:	d103      	bne.n	80218a0 <__strftime+0x830>
 8021898:	330a      	adds	r3, #10
 802189a:	e7ee      	b.n	802187a <__strftime+0x80a>
 802189c:	2206      	movs	r2, #6
 802189e:	e7f7      	b.n	8021890 <__strftime+0x820>
 80218a0:	6968      	ldr	r0, [r5, #20]
 80218a2:	2800      	cmp	r0, #0
 80218a4:	eba2 0303 	sub.w	r3, r2, r3
 80218a8:	f240 726b 	movw	r2, #1899	; 0x76b
 80218ac:	bfa8      	it	ge
 80218ae:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 80218b2:	4410      	add	r0, r2
 80218b4:	0782      	lsls	r2, r0, #30
 80218b6:	d105      	bne.n	80218c4 <__strftime+0x854>
 80218b8:	2264      	movs	r2, #100	; 0x64
 80218ba:	fb90 f1f2 	sdiv	r1, r0, r2
 80218be:	fb02 0111 	mls	r1, r2, r1, r0
 80218c2:	b971      	cbnz	r1, 80218e2 <__strftime+0x872>
 80218c4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80218c8:	fb90 f2f1 	sdiv	r2, r0, r1
 80218cc:	fb01 0212 	mls	r2, r1, r2, r0
 80218d0:	fab2 f282 	clz	r2, r2
 80218d4:	0952      	lsrs	r2, r2, #5
 80218d6:	1a9a      	subs	r2, r3, r2
 80218d8:	2a04      	cmp	r2, #4
 80218da:	bfcc      	ite	gt
 80218dc:	2334      	movgt	r3, #52	; 0x34
 80218de:	2335      	movle	r3, #53	; 0x35
 80218e0:	e5fe      	b.n	80214e0 <__strftime+0x470>
 80218e2:	2201      	movs	r2, #1
 80218e4:	e7f7      	b.n	80218d6 <__strftime+0x866>
 80218e6:	2301      	movs	r3, #1
 80218e8:	e5fa      	b.n	80214e0 <__strftime+0x470>
 80218ea:	45a3      	cmp	fp, r4
 80218ec:	f67f abf3 	bls.w	80210d6 <__strftime+0x66>
 80218f0:	69ab      	ldr	r3, [r5, #24]
 80218f2:	3330      	adds	r3, #48	; 0x30
 80218f4:	e6d1      	b.n	802169a <__strftime+0x62a>
 80218f6:	69ab      	ldr	r3, [r5, #24]
 80218f8:	b13b      	cbz	r3, 802190a <__strftime+0x89a>
 80218fa:	3b01      	subs	r3, #1
 80218fc:	69ea      	ldr	r2, [r5, #28]
 80218fe:	3207      	adds	r2, #7
 8021900:	1ad2      	subs	r2, r2, r3
 8021902:	2307      	movs	r3, #7
 8021904:	fb92 f3f3 	sdiv	r3, r2, r3
 8021908:	e5ea      	b.n	80214e0 <__strftime+0x470>
 802190a:	2306      	movs	r3, #6
 802190c:	e7f6      	b.n	80218fc <__strftime+0x88c>
 802190e:	6968      	ldr	r0, [r5, #20]
 8021910:	2800      	cmp	r0, #0
 8021912:	db05      	blt.n	8021920 <__strftime+0x8b0>
 8021914:	2264      	movs	r2, #100	; 0x64
 8021916:	fb90 f3f2 	sdiv	r3, r0, r2
 802191a:	fb02 0313 	mls	r3, r2, r3, r0
 802191e:	e5df      	b.n	80214e0 <__strftime+0x470>
 8021920:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8021924:	f000 fd3e 	bl	80223a4 <abs>
 8021928:	2364      	movs	r3, #100	; 0x64
 802192a:	fb90 f2f3 	sdiv	r2, r0, r3
 802192e:	e7f4      	b.n	802191a <__strftime+0x8aa>
 8021930:	696b      	ldr	r3, [r5, #20]
 8021932:	4a52      	ldr	r2, [pc, #328]	; (8021a7c <__strftime+0xa0c>)
 8021934:	4293      	cmp	r3, r2
 8021936:	da18      	bge.n	802196a <__strftime+0x8fa>
 8021938:	212d      	movs	r1, #45	; 0x2d
 802193a:	f88d 1020 	strb.w	r1, [sp, #32]
 802193e:	1ad3      	subs	r3, r2, r3
 8021940:	f1b9 0f00 	cmp.w	r9, #0
 8021944:	d001      	beq.n	802194a <__strftime+0x8da>
 8021946:	f109 39ff 	add.w	r9, r9, #4294967295
 802194a:	f10d 0221 	add.w	r2, sp, #33	; 0x21
 802194e:	2125      	movs	r1, #37	; 0x25
 8021950:	7011      	strb	r1, [r2, #0]
 8021952:	f1ba 0f00 	cmp.w	sl, #0
 8021956:	f040 8088 	bne.w	8021a6a <__strftime+0x9fa>
 802195a:	1c50      	adds	r0, r2, #1
 802195c:	4948      	ldr	r1, [pc, #288]	; (8021a80 <__strftime+0xa10>)
 802195e:	9304      	str	r3, [sp, #16]
 8021960:	f7ff fb27 	bl	8020fb2 <strcpy>
 8021964:	9b04      	ldr	r3, [sp, #16]
 8021966:	9300      	str	r3, [sp, #0]
 8021968:	e62e      	b.n	80215c8 <__strftime+0x558>
 802196a:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 802196e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8021972:	f040 8081 	bne.w	8021a78 <__strftime+0xa08>
 8021976:	f242 720f 	movw	r2, #9999	; 0x270f
 802197a:	4293      	cmp	r3, r2
 802197c:	d979      	bls.n	8021a72 <__strftime+0xa02>
 802197e:	f88d a020 	strb.w	sl, [sp, #32]
 8021982:	e7dd      	b.n	8021940 <__strftime+0x8d0>
 8021984:	6a2b      	ldr	r3, [r5, #32]
 8021986:	2b00      	cmp	r3, #0
 8021988:	f6ff ac78 	blt.w	802127c <__strftime+0x20c>
 802198c:	f000 faa4 	bl	8021ed8 <__tz_lock>
 8021990:	9b03      	ldr	r3, [sp, #12]
 8021992:	b90b      	cbnz	r3, 8021998 <__strftime+0x928>
 8021994:	f000 faa2 	bl	8021edc <_tzset_unlocked>
 8021998:	f001 fd00 	bl	802339c <__gettzinfo>
 802199c:	6a2b      	ldr	r3, [r5, #32]
 802199e:	2b00      	cmp	r3, #0
 80219a0:	bfcc      	ite	gt
 80219a2:	2350      	movgt	r3, #80	; 0x50
 80219a4:	2328      	movle	r3, #40	; 0x28
 80219a6:	eb07 0a04 	add.w	sl, r7, r4
 80219aa:	58c3      	ldr	r3, [r0, r3]
 80219ac:	f1c3 0900 	rsb	r9, r3, #0
 80219b0:	f000 fa93 	bl	8021eda <__tz_unlock>
 80219b4:	233c      	movs	r3, #60	; 0x3c
 80219b6:	1b31      	subs	r1, r6, r4
 80219b8:	fb99 f0f3 	sdiv	r0, r9, r3
 80219bc:	9104      	str	r1, [sp, #16]
 80219be:	9303      	str	r3, [sp, #12]
 80219c0:	f001 fd9e 	bl	8023500 <labs>
 80219c4:	9b03      	ldr	r3, [sp, #12]
 80219c6:	fb90 f2f3 	sdiv	r2, r0, r3
 80219ca:	fb02 0013 	mls	r0, r2, r3, r0
 80219ce:	9000      	str	r0, [sp, #0]
 80219d0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80219d4:	4a2b      	ldr	r2, [pc, #172]	; (8021a84 <__strftime+0xa14>)
 80219d6:	fb99 f3f3 	sdiv	r3, r9, r3
 80219da:	9904      	ldr	r1, [sp, #16]
 80219dc:	4650      	mov	r0, sl
 80219de:	f7ff fa0f 	bl	8020e00 <sniprintf>
 80219e2:	2800      	cmp	r0, #0
 80219e4:	f6ff ab77 	blt.w	80210d6 <__strftime+0x66>
 80219e8:	4404      	add	r4, r0
 80219ea:	42a6      	cmp	r6, r4
 80219ec:	f67f ab73 	bls.w	80210d6 <__strftime+0x66>
 80219f0:	2301      	movs	r3, #1
 80219f2:	9303      	str	r3, [sp, #12]
 80219f4:	e442      	b.n	802127c <__strftime+0x20c>
 80219f6:	6a2b      	ldr	r3, [r5, #32]
 80219f8:	2b00      	cmp	r3, #0
 80219fa:	f6ff ac3f 	blt.w	802127c <__strftime+0x20c>
 80219fe:	f000 fa6b 	bl	8021ed8 <__tz_lock>
 8021a02:	9b03      	ldr	r3, [sp, #12]
 8021a04:	b90b      	cbnz	r3, 8021a0a <__strftime+0x99a>
 8021a06:	f000 fa69 	bl	8021edc <_tzset_unlocked>
 8021a0a:	6a2b      	ldr	r3, [r5, #32]
 8021a0c:	4a1e      	ldr	r2, [pc, #120]	; (8021a88 <__strftime+0xa18>)
 8021a0e:	2b00      	cmp	r3, #0
 8021a10:	bfd4      	ite	le
 8021a12:	2300      	movle	r3, #0
 8021a14:	2301      	movgt	r3, #1
 8021a16:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8021a1a:	4648      	mov	r0, r9
 8021a1c:	f7de fc1a 	bl	8000254 <strlen>
 8021a20:	eba9 0904 	sub.w	r9, r9, r4
 8021a24:	eb04 0a00 	add.w	sl, r4, r0
 8021a28:	45a2      	cmp	sl, r4
 8021a2a:	d103      	bne.n	8021a34 <__strftime+0x9c4>
 8021a2c:	f000 fa55 	bl	8021eda <__tz_unlock>
 8021a30:	4654      	mov	r4, sl
 8021a32:	e7dd      	b.n	80219f0 <__strftime+0x980>
 8021a34:	45a3      	cmp	fp, r4
 8021a36:	d904      	bls.n	8021a42 <__strftime+0x9d2>
 8021a38:	f819 3004 	ldrb.w	r3, [r9, r4]
 8021a3c:	553b      	strb	r3, [r7, r4]
 8021a3e:	3401      	adds	r4, #1
 8021a40:	e7f2      	b.n	8021a28 <__strftime+0x9b8>
 8021a42:	f000 fa4a 	bl	8021eda <__tz_unlock>
 8021a46:	f7ff bb46 	b.w	80210d6 <__strftime+0x66>
 8021a4a:	45a3      	cmp	fp, r4
 8021a4c:	f67f ab43 	bls.w	80210d6 <__strftime+0x66>
 8021a50:	2325      	movs	r3, #37	; 0x25
 8021a52:	e622      	b.n	802169a <__strftime+0x62a>
 8021a54:	b10e      	cbz	r6, 8021a5a <__strftime+0x9ea>
 8021a56:	2300      	movs	r3, #0
 8021a58:	553b      	strb	r3, [r7, r4]
 8021a5a:	4620      	mov	r0, r4
 8021a5c:	b011      	add	sp, #68	; 0x44
 8021a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a62:	2225      	movs	r2, #37	; 0x25
 8021a64:	f88d 2020 	strb.w	r2, [sp, #32]
 8021a68:	aa08      	add	r2, sp, #32
 8021a6a:	2130      	movs	r1, #48	; 0x30
 8021a6c:	1c90      	adds	r0, r2, #2
 8021a6e:	7051      	strb	r1, [r2, #1]
 8021a70:	e774      	b.n	802195c <__strftime+0x8ec>
 8021a72:	f1b9 0f00 	cmp.w	r9, #0
 8021a76:	d1f4      	bne.n	8021a62 <__strftime+0x9f2>
 8021a78:	aa08      	add	r2, sp, #32
 8021a7a:	e768      	b.n	802194e <__strftime+0x8de>
 8021a7c:	fffff894 	.word	0xfffff894
 8021a80:	0803fc56 	.word	0x0803fc56
 8021a84:	0803fc73 	.word	0x0803fc73
 8021a88:	20000620 	.word	0x20000620

08021a8c <strftime>:
 8021a8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021a8e:	4c06      	ldr	r4, [pc, #24]	; (8021aa8 <strftime+0x1c>)
 8021a90:	4d06      	ldr	r5, [pc, #24]	; (8021aac <strftime+0x20>)
 8021a92:	6824      	ldr	r4, [r4, #0]
 8021a94:	6a24      	ldr	r4, [r4, #32]
 8021a96:	2c00      	cmp	r4, #0
 8021a98:	bf08      	it	eq
 8021a9a:	462c      	moveq	r4, r5
 8021a9c:	9400      	str	r4, [sp, #0]
 8021a9e:	f7ff fae7 	bl	8021070 <__strftime>
 8021aa2:	b003      	add	sp, #12
 8021aa4:	bd30      	pop	{r4, r5, pc}
 8021aa6:	bf00      	nop
 8021aa8:	20000450 	.word	0x20000450
 8021aac:	200004b4 	.word	0x200004b4

08021ab0 <strncmp>:
 8021ab0:	b510      	push	{r4, lr}
 8021ab2:	b16a      	cbz	r2, 8021ad0 <strncmp+0x20>
 8021ab4:	3901      	subs	r1, #1
 8021ab6:	1884      	adds	r4, r0, r2
 8021ab8:	f810 3b01 	ldrb.w	r3, [r0], #1
 8021abc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8021ac0:	4293      	cmp	r3, r2
 8021ac2:	d103      	bne.n	8021acc <strncmp+0x1c>
 8021ac4:	42a0      	cmp	r0, r4
 8021ac6:	d001      	beq.n	8021acc <strncmp+0x1c>
 8021ac8:	2b00      	cmp	r3, #0
 8021aca:	d1f5      	bne.n	8021ab8 <strncmp+0x8>
 8021acc:	1a98      	subs	r0, r3, r2
 8021ace:	bd10      	pop	{r4, pc}
 8021ad0:	4610      	mov	r0, r2
 8021ad2:	e7fc      	b.n	8021ace <strncmp+0x1e>

08021ad4 <strncpy>:
 8021ad4:	b570      	push	{r4, r5, r6, lr}
 8021ad6:	3901      	subs	r1, #1
 8021ad8:	4604      	mov	r4, r0
 8021ada:	b902      	cbnz	r2, 8021ade <strncpy+0xa>
 8021adc:	bd70      	pop	{r4, r5, r6, pc}
 8021ade:	4623      	mov	r3, r4
 8021ae0:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8021ae4:	f803 5b01 	strb.w	r5, [r3], #1
 8021ae8:	1e56      	subs	r6, r2, #1
 8021aea:	b92d      	cbnz	r5, 8021af8 <strncpy+0x24>
 8021aec:	4414      	add	r4, r2
 8021aee:	42a3      	cmp	r3, r4
 8021af0:	d0f4      	beq.n	8021adc <strncpy+0x8>
 8021af2:	f803 5b01 	strb.w	r5, [r3], #1
 8021af6:	e7fa      	b.n	8021aee <strncpy+0x1a>
 8021af8:	461c      	mov	r4, r3
 8021afa:	4632      	mov	r2, r6
 8021afc:	e7ed      	b.n	8021ada <strncpy+0x6>

08021afe <_strtol_l.isra.0>:
 8021afe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021b02:	4680      	mov	r8, r0
 8021b04:	4689      	mov	r9, r1
 8021b06:	4692      	mov	sl, r2
 8021b08:	461e      	mov	r6, r3
 8021b0a:	460f      	mov	r7, r1
 8021b0c:	463d      	mov	r5, r7
 8021b0e:	9808      	ldr	r0, [sp, #32]
 8021b10:	f815 4b01 	ldrb.w	r4, [r5], #1
 8021b14:	f7fe f868 	bl	801fbe8 <__locale_ctype_ptr_l>
 8021b18:	4420      	add	r0, r4
 8021b1a:	7843      	ldrb	r3, [r0, #1]
 8021b1c:	f013 0308 	ands.w	r3, r3, #8
 8021b20:	d132      	bne.n	8021b88 <_strtol_l.isra.0+0x8a>
 8021b22:	2c2d      	cmp	r4, #45	; 0x2d
 8021b24:	d132      	bne.n	8021b8c <_strtol_l.isra.0+0x8e>
 8021b26:	787c      	ldrb	r4, [r7, #1]
 8021b28:	1cbd      	adds	r5, r7, #2
 8021b2a:	2201      	movs	r2, #1
 8021b2c:	2e00      	cmp	r6, #0
 8021b2e:	d05d      	beq.n	8021bec <_strtol_l.isra.0+0xee>
 8021b30:	2e10      	cmp	r6, #16
 8021b32:	d109      	bne.n	8021b48 <_strtol_l.isra.0+0x4a>
 8021b34:	2c30      	cmp	r4, #48	; 0x30
 8021b36:	d107      	bne.n	8021b48 <_strtol_l.isra.0+0x4a>
 8021b38:	782b      	ldrb	r3, [r5, #0]
 8021b3a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8021b3e:	2b58      	cmp	r3, #88	; 0x58
 8021b40:	d14f      	bne.n	8021be2 <_strtol_l.isra.0+0xe4>
 8021b42:	786c      	ldrb	r4, [r5, #1]
 8021b44:	2610      	movs	r6, #16
 8021b46:	3502      	adds	r5, #2
 8021b48:	2a00      	cmp	r2, #0
 8021b4a:	bf14      	ite	ne
 8021b4c:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8021b50:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8021b54:	2700      	movs	r7, #0
 8021b56:	fbb1 fcf6 	udiv	ip, r1, r6
 8021b5a:	4638      	mov	r0, r7
 8021b5c:	fb06 1e1c 	mls	lr, r6, ip, r1
 8021b60:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8021b64:	2b09      	cmp	r3, #9
 8021b66:	d817      	bhi.n	8021b98 <_strtol_l.isra.0+0x9a>
 8021b68:	461c      	mov	r4, r3
 8021b6a:	42a6      	cmp	r6, r4
 8021b6c:	dd23      	ble.n	8021bb6 <_strtol_l.isra.0+0xb8>
 8021b6e:	1c7b      	adds	r3, r7, #1
 8021b70:	d007      	beq.n	8021b82 <_strtol_l.isra.0+0x84>
 8021b72:	4584      	cmp	ip, r0
 8021b74:	d31c      	bcc.n	8021bb0 <_strtol_l.isra.0+0xb2>
 8021b76:	d101      	bne.n	8021b7c <_strtol_l.isra.0+0x7e>
 8021b78:	45a6      	cmp	lr, r4
 8021b7a:	db19      	blt.n	8021bb0 <_strtol_l.isra.0+0xb2>
 8021b7c:	fb00 4006 	mla	r0, r0, r6, r4
 8021b80:	2701      	movs	r7, #1
 8021b82:	f815 4b01 	ldrb.w	r4, [r5], #1
 8021b86:	e7eb      	b.n	8021b60 <_strtol_l.isra.0+0x62>
 8021b88:	462f      	mov	r7, r5
 8021b8a:	e7bf      	b.n	8021b0c <_strtol_l.isra.0+0xe>
 8021b8c:	2c2b      	cmp	r4, #43	; 0x2b
 8021b8e:	bf04      	itt	eq
 8021b90:	1cbd      	addeq	r5, r7, #2
 8021b92:	787c      	ldrbeq	r4, [r7, #1]
 8021b94:	461a      	mov	r2, r3
 8021b96:	e7c9      	b.n	8021b2c <_strtol_l.isra.0+0x2e>
 8021b98:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8021b9c:	2b19      	cmp	r3, #25
 8021b9e:	d801      	bhi.n	8021ba4 <_strtol_l.isra.0+0xa6>
 8021ba0:	3c37      	subs	r4, #55	; 0x37
 8021ba2:	e7e2      	b.n	8021b6a <_strtol_l.isra.0+0x6c>
 8021ba4:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8021ba8:	2b19      	cmp	r3, #25
 8021baa:	d804      	bhi.n	8021bb6 <_strtol_l.isra.0+0xb8>
 8021bac:	3c57      	subs	r4, #87	; 0x57
 8021bae:	e7dc      	b.n	8021b6a <_strtol_l.isra.0+0x6c>
 8021bb0:	f04f 37ff 	mov.w	r7, #4294967295
 8021bb4:	e7e5      	b.n	8021b82 <_strtol_l.isra.0+0x84>
 8021bb6:	1c7b      	adds	r3, r7, #1
 8021bb8:	d108      	bne.n	8021bcc <_strtol_l.isra.0+0xce>
 8021bba:	2322      	movs	r3, #34	; 0x22
 8021bbc:	f8c8 3000 	str.w	r3, [r8]
 8021bc0:	4608      	mov	r0, r1
 8021bc2:	f1ba 0f00 	cmp.w	sl, #0
 8021bc6:	d107      	bne.n	8021bd8 <_strtol_l.isra.0+0xda>
 8021bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021bcc:	b102      	cbz	r2, 8021bd0 <_strtol_l.isra.0+0xd2>
 8021bce:	4240      	negs	r0, r0
 8021bd0:	f1ba 0f00 	cmp.w	sl, #0
 8021bd4:	d0f8      	beq.n	8021bc8 <_strtol_l.isra.0+0xca>
 8021bd6:	b10f      	cbz	r7, 8021bdc <_strtol_l.isra.0+0xde>
 8021bd8:	f105 39ff 	add.w	r9, r5, #4294967295
 8021bdc:	f8ca 9000 	str.w	r9, [sl]
 8021be0:	e7f2      	b.n	8021bc8 <_strtol_l.isra.0+0xca>
 8021be2:	2430      	movs	r4, #48	; 0x30
 8021be4:	2e00      	cmp	r6, #0
 8021be6:	d1af      	bne.n	8021b48 <_strtol_l.isra.0+0x4a>
 8021be8:	2608      	movs	r6, #8
 8021bea:	e7ad      	b.n	8021b48 <_strtol_l.isra.0+0x4a>
 8021bec:	2c30      	cmp	r4, #48	; 0x30
 8021bee:	d0a3      	beq.n	8021b38 <_strtol_l.isra.0+0x3a>
 8021bf0:	260a      	movs	r6, #10
 8021bf2:	e7a9      	b.n	8021b48 <_strtol_l.isra.0+0x4a>

08021bf4 <_strtol_r>:
 8021bf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021bf6:	4c06      	ldr	r4, [pc, #24]	; (8021c10 <_strtol_r+0x1c>)
 8021bf8:	4d06      	ldr	r5, [pc, #24]	; (8021c14 <_strtol_r+0x20>)
 8021bfa:	6824      	ldr	r4, [r4, #0]
 8021bfc:	6a24      	ldr	r4, [r4, #32]
 8021bfe:	2c00      	cmp	r4, #0
 8021c00:	bf08      	it	eq
 8021c02:	462c      	moveq	r4, r5
 8021c04:	9400      	str	r4, [sp, #0]
 8021c06:	f7ff ff7a 	bl	8021afe <_strtol_l.isra.0>
 8021c0a:	b003      	add	sp, #12
 8021c0c:	bd30      	pop	{r4, r5, pc}
 8021c0e:	bf00      	nop
 8021c10:	20000450 	.word	0x20000450
 8021c14:	200004b4 	.word	0x200004b4

08021c18 <strtol>:
 8021c18:	4b08      	ldr	r3, [pc, #32]	; (8021c3c <strtol+0x24>)
 8021c1a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021c1c:	681c      	ldr	r4, [r3, #0]
 8021c1e:	4d08      	ldr	r5, [pc, #32]	; (8021c40 <strtol+0x28>)
 8021c20:	6a23      	ldr	r3, [r4, #32]
 8021c22:	2b00      	cmp	r3, #0
 8021c24:	bf08      	it	eq
 8021c26:	462b      	moveq	r3, r5
 8021c28:	9300      	str	r3, [sp, #0]
 8021c2a:	4613      	mov	r3, r2
 8021c2c:	460a      	mov	r2, r1
 8021c2e:	4601      	mov	r1, r0
 8021c30:	4620      	mov	r0, r4
 8021c32:	f7ff ff64 	bl	8021afe <_strtol_l.isra.0>
 8021c36:	b003      	add	sp, #12
 8021c38:	bd30      	pop	{r4, r5, pc}
 8021c3a:	bf00      	nop
 8021c3c:	20000450 	.word	0x20000450
 8021c40:	200004b4 	.word	0x200004b4

08021c44 <_strtoul_l.isra.0>:
 8021c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021c48:	4680      	mov	r8, r0
 8021c4a:	4689      	mov	r9, r1
 8021c4c:	4692      	mov	sl, r2
 8021c4e:	461e      	mov	r6, r3
 8021c50:	460f      	mov	r7, r1
 8021c52:	463d      	mov	r5, r7
 8021c54:	9808      	ldr	r0, [sp, #32]
 8021c56:	f815 4b01 	ldrb.w	r4, [r5], #1
 8021c5a:	f7fd ffc5 	bl	801fbe8 <__locale_ctype_ptr_l>
 8021c5e:	4420      	add	r0, r4
 8021c60:	7843      	ldrb	r3, [r0, #1]
 8021c62:	f013 0308 	ands.w	r3, r3, #8
 8021c66:	d130      	bne.n	8021cca <_strtoul_l.isra.0+0x86>
 8021c68:	2c2d      	cmp	r4, #45	; 0x2d
 8021c6a:	d130      	bne.n	8021cce <_strtoul_l.isra.0+0x8a>
 8021c6c:	787c      	ldrb	r4, [r7, #1]
 8021c6e:	1cbd      	adds	r5, r7, #2
 8021c70:	2101      	movs	r1, #1
 8021c72:	2e00      	cmp	r6, #0
 8021c74:	d05c      	beq.n	8021d30 <_strtoul_l.isra.0+0xec>
 8021c76:	2e10      	cmp	r6, #16
 8021c78:	d109      	bne.n	8021c8e <_strtoul_l.isra.0+0x4a>
 8021c7a:	2c30      	cmp	r4, #48	; 0x30
 8021c7c:	d107      	bne.n	8021c8e <_strtoul_l.isra.0+0x4a>
 8021c7e:	782b      	ldrb	r3, [r5, #0]
 8021c80:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8021c84:	2b58      	cmp	r3, #88	; 0x58
 8021c86:	d14e      	bne.n	8021d26 <_strtoul_l.isra.0+0xe2>
 8021c88:	786c      	ldrb	r4, [r5, #1]
 8021c8a:	2610      	movs	r6, #16
 8021c8c:	3502      	adds	r5, #2
 8021c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8021c92:	2300      	movs	r3, #0
 8021c94:	fbb2 f2f6 	udiv	r2, r2, r6
 8021c98:	fb06 fc02 	mul.w	ip, r6, r2
 8021c9c:	ea6f 0c0c 	mvn.w	ip, ip
 8021ca0:	4618      	mov	r0, r3
 8021ca2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8021ca6:	2f09      	cmp	r7, #9
 8021ca8:	d817      	bhi.n	8021cda <_strtoul_l.isra.0+0x96>
 8021caa:	463c      	mov	r4, r7
 8021cac:	42a6      	cmp	r6, r4
 8021cae:	dd23      	ble.n	8021cf8 <_strtoul_l.isra.0+0xb4>
 8021cb0:	2b00      	cmp	r3, #0
 8021cb2:	db1e      	blt.n	8021cf2 <_strtoul_l.isra.0+0xae>
 8021cb4:	4282      	cmp	r2, r0
 8021cb6:	d31c      	bcc.n	8021cf2 <_strtoul_l.isra.0+0xae>
 8021cb8:	d101      	bne.n	8021cbe <_strtoul_l.isra.0+0x7a>
 8021cba:	45a4      	cmp	ip, r4
 8021cbc:	db19      	blt.n	8021cf2 <_strtoul_l.isra.0+0xae>
 8021cbe:	fb00 4006 	mla	r0, r0, r6, r4
 8021cc2:	2301      	movs	r3, #1
 8021cc4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8021cc8:	e7eb      	b.n	8021ca2 <_strtoul_l.isra.0+0x5e>
 8021cca:	462f      	mov	r7, r5
 8021ccc:	e7c1      	b.n	8021c52 <_strtoul_l.isra.0+0xe>
 8021cce:	2c2b      	cmp	r4, #43	; 0x2b
 8021cd0:	bf04      	itt	eq
 8021cd2:	1cbd      	addeq	r5, r7, #2
 8021cd4:	787c      	ldrbeq	r4, [r7, #1]
 8021cd6:	4619      	mov	r1, r3
 8021cd8:	e7cb      	b.n	8021c72 <_strtoul_l.isra.0+0x2e>
 8021cda:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8021cde:	2f19      	cmp	r7, #25
 8021ce0:	d801      	bhi.n	8021ce6 <_strtoul_l.isra.0+0xa2>
 8021ce2:	3c37      	subs	r4, #55	; 0x37
 8021ce4:	e7e2      	b.n	8021cac <_strtoul_l.isra.0+0x68>
 8021ce6:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8021cea:	2f19      	cmp	r7, #25
 8021cec:	d804      	bhi.n	8021cf8 <_strtoul_l.isra.0+0xb4>
 8021cee:	3c57      	subs	r4, #87	; 0x57
 8021cf0:	e7dc      	b.n	8021cac <_strtoul_l.isra.0+0x68>
 8021cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8021cf6:	e7e5      	b.n	8021cc4 <_strtoul_l.isra.0+0x80>
 8021cf8:	2b00      	cmp	r3, #0
 8021cfa:	da09      	bge.n	8021d10 <_strtoul_l.isra.0+0xcc>
 8021cfc:	2322      	movs	r3, #34	; 0x22
 8021cfe:	f8c8 3000 	str.w	r3, [r8]
 8021d02:	f04f 30ff 	mov.w	r0, #4294967295
 8021d06:	f1ba 0f00 	cmp.w	sl, #0
 8021d0a:	d107      	bne.n	8021d1c <_strtoul_l.isra.0+0xd8>
 8021d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021d10:	b101      	cbz	r1, 8021d14 <_strtoul_l.isra.0+0xd0>
 8021d12:	4240      	negs	r0, r0
 8021d14:	f1ba 0f00 	cmp.w	sl, #0
 8021d18:	d0f8      	beq.n	8021d0c <_strtoul_l.isra.0+0xc8>
 8021d1a:	b10b      	cbz	r3, 8021d20 <_strtoul_l.isra.0+0xdc>
 8021d1c:	f105 39ff 	add.w	r9, r5, #4294967295
 8021d20:	f8ca 9000 	str.w	r9, [sl]
 8021d24:	e7f2      	b.n	8021d0c <_strtoul_l.isra.0+0xc8>
 8021d26:	2430      	movs	r4, #48	; 0x30
 8021d28:	2e00      	cmp	r6, #0
 8021d2a:	d1b0      	bne.n	8021c8e <_strtoul_l.isra.0+0x4a>
 8021d2c:	2608      	movs	r6, #8
 8021d2e:	e7ae      	b.n	8021c8e <_strtoul_l.isra.0+0x4a>
 8021d30:	2c30      	cmp	r4, #48	; 0x30
 8021d32:	d0a4      	beq.n	8021c7e <_strtoul_l.isra.0+0x3a>
 8021d34:	260a      	movs	r6, #10
 8021d36:	e7aa      	b.n	8021c8e <_strtoul_l.isra.0+0x4a>

08021d38 <_strtoul_r>:
 8021d38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021d3a:	4c06      	ldr	r4, [pc, #24]	; (8021d54 <_strtoul_r+0x1c>)
 8021d3c:	4d06      	ldr	r5, [pc, #24]	; (8021d58 <_strtoul_r+0x20>)
 8021d3e:	6824      	ldr	r4, [r4, #0]
 8021d40:	6a24      	ldr	r4, [r4, #32]
 8021d42:	2c00      	cmp	r4, #0
 8021d44:	bf08      	it	eq
 8021d46:	462c      	moveq	r4, r5
 8021d48:	9400      	str	r4, [sp, #0]
 8021d4a:	f7ff ff7b 	bl	8021c44 <_strtoul_l.isra.0>
 8021d4e:	b003      	add	sp, #12
 8021d50:	bd30      	pop	{r4, r5, pc}
 8021d52:	bf00      	nop
 8021d54:	20000450 	.word	0x20000450
 8021d58:	200004b4 	.word	0x200004b4

08021d5c <strtoul>:
 8021d5c:	4b08      	ldr	r3, [pc, #32]	; (8021d80 <strtoul+0x24>)
 8021d5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021d60:	681c      	ldr	r4, [r3, #0]
 8021d62:	4d08      	ldr	r5, [pc, #32]	; (8021d84 <strtoul+0x28>)
 8021d64:	6a23      	ldr	r3, [r4, #32]
 8021d66:	2b00      	cmp	r3, #0
 8021d68:	bf08      	it	eq
 8021d6a:	462b      	moveq	r3, r5
 8021d6c:	9300      	str	r3, [sp, #0]
 8021d6e:	4613      	mov	r3, r2
 8021d70:	460a      	mov	r2, r1
 8021d72:	4601      	mov	r1, r0
 8021d74:	4620      	mov	r0, r4
 8021d76:	f7ff ff65 	bl	8021c44 <_strtoul_l.isra.0>
 8021d7a:	b003      	add	sp, #12
 8021d7c:	bd30      	pop	{r4, r5, pc}
 8021d7e:	bf00      	nop
 8021d80:	20000450 	.word	0x20000450
 8021d84:	200004b4 	.word	0x200004b4

08021d88 <__tzcalc_limits>:
 8021d88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d8c:	4680      	mov	r8, r0
 8021d8e:	f001 fb05 	bl	802339c <__gettzinfo>
 8021d92:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8021d96:	4598      	cmp	r8, r3
 8021d98:	f340 8098 	ble.w	8021ecc <__tzcalc_limits+0x144>
 8021d9c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8021da0:	4443      	add	r3, r8
 8021da2:	109b      	asrs	r3, r3, #2
 8021da4:	f240 126d 	movw	r2, #365	; 0x16d
 8021da8:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8021dac:	fb02 3505 	mla	r5, r2, r5, r3
 8021db0:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8021db4:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8021db8:	fb93 f3f2 	sdiv	r3, r3, r2
 8021dbc:	441d      	add	r5, r3
 8021dbe:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8021dc2:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8021dc6:	fb98 f7f3 	sdiv	r7, r8, r3
 8021dca:	fb03 8717 	mls	r7, r3, r7, r8
 8021dce:	4442      	add	r2, r8
 8021dd0:	fab7 fc87 	clz	ip, r7
 8021dd4:	fb92 f2f3 	sdiv	r2, r2, r3
 8021dd8:	f008 0303 	and.w	r3, r8, #3
 8021ddc:	4415      	add	r5, r2
 8021dde:	2264      	movs	r2, #100	; 0x64
 8021de0:	f8c0 8004 	str.w	r8, [r0, #4]
 8021de4:	fb98 f6f2 	sdiv	r6, r8, r2
 8021de8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8021dec:	fb02 8616 	mls	r6, r2, r6, r8
 8021df0:	4604      	mov	r4, r0
 8021df2:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8021df6:	9300      	str	r3, [sp, #0]
 8021df8:	f04f 0e07 	mov.w	lr, #7
 8021dfc:	7a22      	ldrb	r2, [r4, #8]
 8021dfe:	6963      	ldr	r3, [r4, #20]
 8021e00:	2a4a      	cmp	r2, #74	; 0x4a
 8021e02:	d128      	bne.n	8021e56 <__tzcalc_limits+0xce>
 8021e04:	9900      	ldr	r1, [sp, #0]
 8021e06:	18ea      	adds	r2, r5, r3
 8021e08:	b901      	cbnz	r1, 8021e0c <__tzcalc_limits+0x84>
 8021e0a:	b906      	cbnz	r6, 8021e0e <__tzcalc_limits+0x86>
 8021e0c:	bb0f      	cbnz	r7, 8021e52 <__tzcalc_limits+0xca>
 8021e0e:	2b3b      	cmp	r3, #59	; 0x3b
 8021e10:	bfd4      	ite	le
 8021e12:	2300      	movle	r3, #0
 8021e14:	2301      	movgt	r3, #1
 8021e16:	4413      	add	r3, r2
 8021e18:	1e5a      	subs	r2, r3, #1
 8021e1a:	69a3      	ldr	r3, [r4, #24]
 8021e1c:	492c      	ldr	r1, [pc, #176]	; (8021ed0 <__tzcalc_limits+0x148>)
 8021e1e:	fb01 3202 	mla	r2, r1, r2, r3
 8021e22:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8021e24:	4413      	add	r3, r2
 8021e26:	461a      	mov	r2, r3
 8021e28:	17db      	asrs	r3, r3, #31
 8021e2a:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8021e2e:	3428      	adds	r4, #40	; 0x28
 8021e30:	45a3      	cmp	fp, r4
 8021e32:	d1e3      	bne.n	8021dfc <__tzcalc_limits+0x74>
 8021e34:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8021e38:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8021e3c:	4294      	cmp	r4, r2
 8021e3e:	eb75 0303 	sbcs.w	r3, r5, r3
 8021e42:	bfb4      	ite	lt
 8021e44:	2301      	movlt	r3, #1
 8021e46:	2300      	movge	r3, #0
 8021e48:	6003      	str	r3, [r0, #0]
 8021e4a:	2001      	movs	r0, #1
 8021e4c:	b003      	add	sp, #12
 8021e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e52:	2300      	movs	r3, #0
 8021e54:	e7df      	b.n	8021e16 <__tzcalc_limits+0x8e>
 8021e56:	2a44      	cmp	r2, #68	; 0x44
 8021e58:	d101      	bne.n	8021e5e <__tzcalc_limits+0xd6>
 8021e5a:	18ea      	adds	r2, r5, r3
 8021e5c:	e7dd      	b.n	8021e1a <__tzcalc_limits+0x92>
 8021e5e:	9a00      	ldr	r2, [sp, #0]
 8021e60:	bb72      	cbnz	r2, 8021ec0 <__tzcalc_limits+0x138>
 8021e62:	2e00      	cmp	r6, #0
 8021e64:	bf0c      	ite	eq
 8021e66:	46e1      	moveq	r9, ip
 8021e68:	f04f 0901 	movne.w	r9, #1
 8021e6c:	2230      	movs	r2, #48	; 0x30
 8021e6e:	fb02 f909 	mul.w	r9, r2, r9
 8021e72:	68e2      	ldr	r2, [r4, #12]
 8021e74:	9201      	str	r2, [sp, #4]
 8021e76:	f04f 0800 	mov.w	r8, #0
 8021e7a:	462a      	mov	r2, r5
 8021e7c:	f108 0801 	add.w	r8, r8, #1
 8021e80:	4914      	ldr	r1, [pc, #80]	; (8021ed4 <__tzcalc_limits+0x14c>)
 8021e82:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
 8021e86:	448a      	add	sl, r1
 8021e88:	9901      	ldr	r1, [sp, #4]
 8021e8a:	f85a ac04 	ldr.w	sl, [sl, #-4]
 8021e8e:	4541      	cmp	r1, r8
 8021e90:	dc18      	bgt.n	8021ec4 <__tzcalc_limits+0x13c>
 8021e92:	f102 0804 	add.w	r8, r2, #4
 8021e96:	fb98 f9fe 	sdiv	r9, r8, lr
 8021e9a:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 8021e9e:	eba8 0909 	sub.w	r9, r8, r9
 8021ea2:	ebb3 0909 	subs.w	r9, r3, r9
 8021ea6:	6923      	ldr	r3, [r4, #16]
 8021ea8:	f103 33ff 	add.w	r3, r3, #4294967295
 8021eac:	bf48      	it	mi
 8021eae:	f109 0907 	addmi.w	r9, r9, #7
 8021eb2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8021eb6:	444b      	add	r3, r9
 8021eb8:	4553      	cmp	r3, sl
 8021eba:	da05      	bge.n	8021ec8 <__tzcalc_limits+0x140>
 8021ebc:	441a      	add	r2, r3
 8021ebe:	e7ac      	b.n	8021e1a <__tzcalc_limits+0x92>
 8021ec0:	46e1      	mov	r9, ip
 8021ec2:	e7d3      	b.n	8021e6c <__tzcalc_limits+0xe4>
 8021ec4:	4452      	add	r2, sl
 8021ec6:	e7d9      	b.n	8021e7c <__tzcalc_limits+0xf4>
 8021ec8:	3b07      	subs	r3, #7
 8021eca:	e7f5      	b.n	8021eb8 <__tzcalc_limits+0x130>
 8021ecc:	2000      	movs	r0, #0
 8021ece:	e7bd      	b.n	8021e4c <__tzcalc_limits+0xc4>
 8021ed0:	00015180 	.word	0x00015180
 8021ed4:	0803fb94 	.word	0x0803fb94

08021ed8 <__tz_lock>:
 8021ed8:	4770      	bx	lr

08021eda <__tz_unlock>:
 8021eda:	4770      	bx	lr

08021edc <_tzset_unlocked>:
 8021edc:	4b01      	ldr	r3, [pc, #4]	; (8021ee4 <_tzset_unlocked+0x8>)
 8021ede:	6818      	ldr	r0, [r3, #0]
 8021ee0:	f000 b802 	b.w	8021ee8 <_tzset_unlocked_r>
 8021ee4:	20000450 	.word	0x20000450

08021ee8 <_tzset_unlocked_r>:
 8021ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021eec:	b08d      	sub	sp, #52	; 0x34
 8021eee:	4607      	mov	r7, r0
 8021ef0:	f001 fa54 	bl	802339c <__gettzinfo>
 8021ef4:	49af      	ldr	r1, [pc, #700]	; (80221b4 <_tzset_unlocked_r+0x2cc>)
 8021ef6:	4eb0      	ldr	r6, [pc, #704]	; (80221b8 <_tzset_unlocked_r+0x2d0>)
 8021ef8:	4605      	mov	r5, r0
 8021efa:	4638      	mov	r0, r7
 8021efc:	f001 fa46 	bl	802338c <_getenv_r>
 8021f00:	4604      	mov	r4, r0
 8021f02:	b970      	cbnz	r0, 8021f22 <_tzset_unlocked_r+0x3a>
 8021f04:	4bad      	ldr	r3, [pc, #692]	; (80221bc <_tzset_unlocked_r+0x2d4>)
 8021f06:	4aae      	ldr	r2, [pc, #696]	; (80221c0 <_tzset_unlocked_r+0x2d8>)
 8021f08:	6018      	str	r0, [r3, #0]
 8021f0a:	4bae      	ldr	r3, [pc, #696]	; (80221c4 <_tzset_unlocked_r+0x2dc>)
 8021f0c:	6018      	str	r0, [r3, #0]
 8021f0e:	4bae      	ldr	r3, [pc, #696]	; (80221c8 <_tzset_unlocked_r+0x2e0>)
 8021f10:	6830      	ldr	r0, [r6, #0]
 8021f12:	e9c3 2200 	strd	r2, r2, [r3]
 8021f16:	f7fd fe81 	bl	801fc1c <free>
 8021f1a:	6034      	str	r4, [r6, #0]
 8021f1c:	b00d      	add	sp, #52	; 0x34
 8021f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021f22:	6831      	ldr	r1, [r6, #0]
 8021f24:	2900      	cmp	r1, #0
 8021f26:	d15f      	bne.n	8021fe8 <_tzset_unlocked_r+0x100>
 8021f28:	6830      	ldr	r0, [r6, #0]
 8021f2a:	f7fd fe77 	bl	801fc1c <free>
 8021f2e:	4620      	mov	r0, r4
 8021f30:	f7de f990 	bl	8000254 <strlen>
 8021f34:	1c41      	adds	r1, r0, #1
 8021f36:	4638      	mov	r0, r7
 8021f38:	f7fe f9a8 	bl	802028c <_malloc_r>
 8021f3c:	6030      	str	r0, [r6, #0]
 8021f3e:	2800      	cmp	r0, #0
 8021f40:	d157      	bne.n	8021ff2 <_tzset_unlocked_r+0x10a>
 8021f42:	7823      	ldrb	r3, [r4, #0]
 8021f44:	4aa1      	ldr	r2, [pc, #644]	; (80221cc <_tzset_unlocked_r+0x2e4>)
 8021f46:	49a2      	ldr	r1, [pc, #648]	; (80221d0 <_tzset_unlocked_r+0x2e8>)
 8021f48:	2b3a      	cmp	r3, #58	; 0x3a
 8021f4a:	bf08      	it	eq
 8021f4c:	3401      	addeq	r4, #1
 8021f4e:	ae0a      	add	r6, sp, #40	; 0x28
 8021f50:	4633      	mov	r3, r6
 8021f52:	4620      	mov	r0, r4
 8021f54:	f7fe ffa8 	bl	8020ea8 <siscanf>
 8021f58:	2800      	cmp	r0, #0
 8021f5a:	dddf      	ble.n	8021f1c <_tzset_unlocked_r+0x34>
 8021f5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021f5e:	18e7      	adds	r7, r4, r3
 8021f60:	5ce3      	ldrb	r3, [r4, r3]
 8021f62:	2b2d      	cmp	r3, #45	; 0x2d
 8021f64:	d149      	bne.n	8021ffa <_tzset_unlocked_r+0x112>
 8021f66:	3701      	adds	r7, #1
 8021f68:	f04f 34ff 	mov.w	r4, #4294967295
 8021f6c:	f10d 0a20 	add.w	sl, sp, #32
 8021f70:	f10d 0b1e 	add.w	fp, sp, #30
 8021f74:	f04f 0800 	mov.w	r8, #0
 8021f78:	9603      	str	r6, [sp, #12]
 8021f7a:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8021f7e:	f8cd b000 	str.w	fp, [sp]
 8021f82:	4633      	mov	r3, r6
 8021f84:	aa07      	add	r2, sp, #28
 8021f86:	4993      	ldr	r1, [pc, #588]	; (80221d4 <_tzset_unlocked_r+0x2ec>)
 8021f88:	f8ad 801e 	strh.w	r8, [sp, #30]
 8021f8c:	4638      	mov	r0, r7
 8021f8e:	f8ad 8020 	strh.w	r8, [sp, #32]
 8021f92:	f7fe ff89 	bl	8020ea8 <siscanf>
 8021f96:	4540      	cmp	r0, r8
 8021f98:	ddc0      	ble.n	8021f1c <_tzset_unlocked_r+0x34>
 8021f9a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8021f9e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8021fa2:	f8df 923c 	ldr.w	r9, [pc, #572]	; 80221e0 <_tzset_unlocked_r+0x2f8>
 8021fa6:	213c      	movs	r1, #60	; 0x3c
 8021fa8:	fb01 2203 	mla	r2, r1, r3, r2
 8021fac:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8021fb0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8021fb4:	fb01 2303 	mla	r3, r1, r3, r2
 8021fb8:	435c      	muls	r4, r3
 8021fba:	62ac      	str	r4, [r5, #40]	; 0x28
 8021fbc:	4c82      	ldr	r4, [pc, #520]	; (80221c8 <_tzset_unlocked_r+0x2e0>)
 8021fbe:	4b83      	ldr	r3, [pc, #524]	; (80221cc <_tzset_unlocked_r+0x2e4>)
 8021fc0:	6023      	str	r3, [r4, #0]
 8021fc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021fc4:	4982      	ldr	r1, [pc, #520]	; (80221d0 <_tzset_unlocked_r+0x2e8>)
 8021fc6:	441f      	add	r7, r3
 8021fc8:	464a      	mov	r2, r9
 8021fca:	4633      	mov	r3, r6
 8021fcc:	4638      	mov	r0, r7
 8021fce:	f7fe ff6b 	bl	8020ea8 <siscanf>
 8021fd2:	4540      	cmp	r0, r8
 8021fd4:	dc16      	bgt.n	8022004 <_tzset_unlocked_r+0x11c>
 8021fd6:	6823      	ldr	r3, [r4, #0]
 8021fd8:	6063      	str	r3, [r4, #4]
 8021fda:	4b78      	ldr	r3, [pc, #480]	; (80221bc <_tzset_unlocked_r+0x2d4>)
 8021fdc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8021fde:	601a      	str	r2, [r3, #0]
 8021fe0:	4b78      	ldr	r3, [pc, #480]	; (80221c4 <_tzset_unlocked_r+0x2dc>)
 8021fe2:	f8c3 8000 	str.w	r8, [r3]
 8021fe6:	e799      	b.n	8021f1c <_tzset_unlocked_r+0x34>
 8021fe8:	f7de f92a 	bl	8000240 <strcmp>
 8021fec:	2800      	cmp	r0, #0
 8021fee:	d095      	beq.n	8021f1c <_tzset_unlocked_r+0x34>
 8021ff0:	e79a      	b.n	8021f28 <_tzset_unlocked_r+0x40>
 8021ff2:	4621      	mov	r1, r4
 8021ff4:	f7fe ffdd 	bl	8020fb2 <strcpy>
 8021ff8:	e7a3      	b.n	8021f42 <_tzset_unlocked_r+0x5a>
 8021ffa:	2b2b      	cmp	r3, #43	; 0x2b
 8021ffc:	bf08      	it	eq
 8021ffe:	3701      	addeq	r7, #1
 8022000:	2401      	movs	r4, #1
 8022002:	e7b3      	b.n	8021f6c <_tzset_unlocked_r+0x84>
 8022004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022006:	f8c4 9004 	str.w	r9, [r4, #4]
 802200a:	18fc      	adds	r4, r7, r3
 802200c:	5cfb      	ldrb	r3, [r7, r3]
 802200e:	2b2d      	cmp	r3, #45	; 0x2d
 8022010:	f040 808b 	bne.w	802212a <_tzset_unlocked_r+0x242>
 8022014:	3401      	adds	r4, #1
 8022016:	f04f 37ff 	mov.w	r7, #4294967295
 802201a:	2300      	movs	r3, #0
 802201c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022020:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022024:	f8ad 3020 	strh.w	r3, [sp, #32]
 8022028:	930a      	str	r3, [sp, #40]	; 0x28
 802202a:	e9cd a602 	strd	sl, r6, [sp, #8]
 802202e:	e9cd b600 	strd	fp, r6, [sp]
 8022032:	4633      	mov	r3, r6
 8022034:	aa07      	add	r2, sp, #28
 8022036:	4967      	ldr	r1, [pc, #412]	; (80221d4 <_tzset_unlocked_r+0x2ec>)
 8022038:	4620      	mov	r0, r4
 802203a:	f7fe ff35 	bl	8020ea8 <siscanf>
 802203e:	2800      	cmp	r0, #0
 8022040:	dc78      	bgt.n	8022134 <_tzset_unlocked_r+0x24c>
 8022042:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8022044:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8022048:	652b      	str	r3, [r5, #80]	; 0x50
 802204a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802204c:	462f      	mov	r7, r5
 802204e:	441c      	add	r4, r3
 8022050:	f04f 0900 	mov.w	r9, #0
 8022054:	7823      	ldrb	r3, [r4, #0]
 8022056:	2b2c      	cmp	r3, #44	; 0x2c
 8022058:	bf08      	it	eq
 802205a:	3401      	addeq	r4, #1
 802205c:	f894 8000 	ldrb.w	r8, [r4]
 8022060:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8022064:	d179      	bne.n	802215a <_tzset_unlocked_r+0x272>
 8022066:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 802206a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 802206e:	ab09      	add	r3, sp, #36	; 0x24
 8022070:	9300      	str	r3, [sp, #0]
 8022072:	9603      	str	r6, [sp, #12]
 8022074:	4633      	mov	r3, r6
 8022076:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 802207a:	4957      	ldr	r1, [pc, #348]	; (80221d8 <_tzset_unlocked_r+0x2f0>)
 802207c:	4620      	mov	r0, r4
 802207e:	f7fe ff13 	bl	8020ea8 <siscanf>
 8022082:	2803      	cmp	r0, #3
 8022084:	f47f af4a 	bne.w	8021f1c <_tzset_unlocked_r+0x34>
 8022088:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 802208c:	1e4b      	subs	r3, r1, #1
 802208e:	2b0b      	cmp	r3, #11
 8022090:	f63f af44 	bhi.w	8021f1c <_tzset_unlocked_r+0x34>
 8022094:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8022098:	1e53      	subs	r3, r2, #1
 802209a:	2b04      	cmp	r3, #4
 802209c:	f63f af3e 	bhi.w	8021f1c <_tzset_unlocked_r+0x34>
 80220a0:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80220a4:	2b06      	cmp	r3, #6
 80220a6:	f63f af39 	bhi.w	8021f1c <_tzset_unlocked_r+0x34>
 80220aa:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80220ae:	f887 8008 	strb.w	r8, [r7, #8]
 80220b2:	617b      	str	r3, [r7, #20]
 80220b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80220b6:	eb04 0803 	add.w	r8, r4, r3
 80220ba:	2302      	movs	r3, #2
 80220bc:	f8ad 301c 	strh.w	r3, [sp, #28]
 80220c0:	2300      	movs	r3, #0
 80220c2:	f8ad 301e 	strh.w	r3, [sp, #30]
 80220c6:	f8ad 3020 	strh.w	r3, [sp, #32]
 80220ca:	930a      	str	r3, [sp, #40]	; 0x28
 80220cc:	f898 3000 	ldrb.w	r3, [r8]
 80220d0:	2b2f      	cmp	r3, #47	; 0x2f
 80220d2:	d109      	bne.n	80220e8 <_tzset_unlocked_r+0x200>
 80220d4:	e9cd a602 	strd	sl, r6, [sp, #8]
 80220d8:	e9cd b600 	strd	fp, r6, [sp]
 80220dc:	4633      	mov	r3, r6
 80220de:	aa07      	add	r2, sp, #28
 80220e0:	493e      	ldr	r1, [pc, #248]	; (80221dc <_tzset_unlocked_r+0x2f4>)
 80220e2:	4640      	mov	r0, r8
 80220e4:	f7fe fee0 	bl	8020ea8 <siscanf>
 80220e8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80220ec:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80220f0:	213c      	movs	r1, #60	; 0x3c
 80220f2:	fb01 2203 	mla	r2, r1, r3, r2
 80220f6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80220fa:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80220fe:	fb01 2303 	mla	r3, r1, r3, r2
 8022102:	61bb      	str	r3, [r7, #24]
 8022104:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022106:	3728      	adds	r7, #40	; 0x28
 8022108:	4444      	add	r4, r8
 802210a:	f1b9 0f00 	cmp.w	r9, #0
 802210e:	d021      	beq.n	8022154 <_tzset_unlocked_r+0x26c>
 8022110:	6868      	ldr	r0, [r5, #4]
 8022112:	f7ff fe39 	bl	8021d88 <__tzcalc_limits>
 8022116:	4b29      	ldr	r3, [pc, #164]	; (80221bc <_tzset_unlocked_r+0x2d4>)
 8022118:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 802211a:	601a      	str	r2, [r3, #0]
 802211c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 802211e:	1a9b      	subs	r3, r3, r2
 8022120:	4a28      	ldr	r2, [pc, #160]	; (80221c4 <_tzset_unlocked_r+0x2dc>)
 8022122:	bf18      	it	ne
 8022124:	2301      	movne	r3, #1
 8022126:	6013      	str	r3, [r2, #0]
 8022128:	e6f8      	b.n	8021f1c <_tzset_unlocked_r+0x34>
 802212a:	2b2b      	cmp	r3, #43	; 0x2b
 802212c:	bf08      	it	eq
 802212e:	3401      	addeq	r4, #1
 8022130:	2701      	movs	r7, #1
 8022132:	e772      	b.n	802201a <_tzset_unlocked_r+0x132>
 8022134:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8022138:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802213c:	213c      	movs	r1, #60	; 0x3c
 802213e:	fb01 2203 	mla	r2, r1, r3, r2
 8022142:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8022146:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 802214a:	fb01 2303 	mla	r3, r1, r3, r2
 802214e:	435f      	muls	r7, r3
 8022150:	652f      	str	r7, [r5, #80]	; 0x50
 8022152:	e77a      	b.n	802204a <_tzset_unlocked_r+0x162>
 8022154:	f04f 0901 	mov.w	r9, #1
 8022158:	e77c      	b.n	8022054 <_tzset_unlocked_r+0x16c>
 802215a:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 802215e:	bf06      	itte	eq
 8022160:	3401      	addeq	r4, #1
 8022162:	4643      	moveq	r3, r8
 8022164:	2344      	movne	r3, #68	; 0x44
 8022166:	220a      	movs	r2, #10
 8022168:	a90b      	add	r1, sp, #44	; 0x2c
 802216a:	4620      	mov	r0, r4
 802216c:	9305      	str	r3, [sp, #20]
 802216e:	f7ff fdf5 	bl	8021d5c <strtoul>
 8022172:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8022176:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 802217a:	45a0      	cmp	r8, r4
 802217c:	9b05      	ldr	r3, [sp, #20]
 802217e:	d114      	bne.n	80221aa <_tzset_unlocked_r+0x2c2>
 8022180:	234d      	movs	r3, #77	; 0x4d
 8022182:	f1b9 0f00 	cmp.w	r9, #0
 8022186:	d107      	bne.n	8022198 <_tzset_unlocked_r+0x2b0>
 8022188:	722b      	strb	r3, [r5, #8]
 802218a:	2103      	movs	r1, #3
 802218c:	2302      	movs	r3, #2
 802218e:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8022192:	f8c5 9014 	str.w	r9, [r5, #20]
 8022196:	e790      	b.n	80220ba <_tzset_unlocked_r+0x1d2>
 8022198:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 802219c:	220b      	movs	r2, #11
 802219e:	2301      	movs	r3, #1
 80221a0:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80221a4:	2300      	movs	r3, #0
 80221a6:	63eb      	str	r3, [r5, #60]	; 0x3c
 80221a8:	e787      	b.n	80220ba <_tzset_unlocked_r+0x1d2>
 80221aa:	b280      	uxth	r0, r0
 80221ac:	723b      	strb	r3, [r7, #8]
 80221ae:	6178      	str	r0, [r7, #20]
 80221b0:	e783      	b.n	80220ba <_tzset_unlocked_r+0x1d2>
 80221b2:	bf00      	nop
 80221b4:	0803fea7 	.word	0x0803fea7
 80221b8:	2002a778 	.word	0x2002a778
 80221bc:	2002a780 	.word	0x2002a780
 80221c0:	0803feaa 	.word	0x0803feaa
 80221c4:	2002a77c 	.word	0x2002a77c
 80221c8:	20000620 	.word	0x20000620
 80221cc:	2002a76b 	.word	0x2002a76b
 80221d0:	0803feae 	.word	0x0803feae
 80221d4:	0803fed1 	.word	0x0803fed1
 80221d8:	0803febd 	.word	0x0803febd
 80221dc:	0803fed0 	.word	0x0803fed0
 80221e0:	2002a760 	.word	0x2002a760

080221e4 <__swbuf_r>:
 80221e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80221e6:	460e      	mov	r6, r1
 80221e8:	4614      	mov	r4, r2
 80221ea:	4605      	mov	r5, r0
 80221ec:	b118      	cbz	r0, 80221f6 <__swbuf_r+0x12>
 80221ee:	6983      	ldr	r3, [r0, #24]
 80221f0:	b90b      	cbnz	r3, 80221f6 <__swbuf_r+0x12>
 80221f2:	f001 f805 	bl	8023200 <__sinit>
 80221f6:	4b21      	ldr	r3, [pc, #132]	; (802227c <__swbuf_r+0x98>)
 80221f8:	429c      	cmp	r4, r3
 80221fa:	d12a      	bne.n	8022252 <__swbuf_r+0x6e>
 80221fc:	686c      	ldr	r4, [r5, #4]
 80221fe:	69a3      	ldr	r3, [r4, #24]
 8022200:	60a3      	str	r3, [r4, #8]
 8022202:	89a3      	ldrh	r3, [r4, #12]
 8022204:	071a      	lsls	r2, r3, #28
 8022206:	d52e      	bpl.n	8022266 <__swbuf_r+0x82>
 8022208:	6923      	ldr	r3, [r4, #16]
 802220a:	b363      	cbz	r3, 8022266 <__swbuf_r+0x82>
 802220c:	6923      	ldr	r3, [r4, #16]
 802220e:	6820      	ldr	r0, [r4, #0]
 8022210:	1ac0      	subs	r0, r0, r3
 8022212:	6963      	ldr	r3, [r4, #20]
 8022214:	b2f6      	uxtb	r6, r6
 8022216:	4283      	cmp	r3, r0
 8022218:	4637      	mov	r7, r6
 802221a:	dc04      	bgt.n	8022226 <__swbuf_r+0x42>
 802221c:	4621      	mov	r1, r4
 802221e:	4628      	mov	r0, r5
 8022220:	f000 ff84 	bl	802312c <_fflush_r>
 8022224:	bb28      	cbnz	r0, 8022272 <__swbuf_r+0x8e>
 8022226:	68a3      	ldr	r3, [r4, #8]
 8022228:	3b01      	subs	r3, #1
 802222a:	60a3      	str	r3, [r4, #8]
 802222c:	6823      	ldr	r3, [r4, #0]
 802222e:	1c5a      	adds	r2, r3, #1
 8022230:	6022      	str	r2, [r4, #0]
 8022232:	701e      	strb	r6, [r3, #0]
 8022234:	6963      	ldr	r3, [r4, #20]
 8022236:	3001      	adds	r0, #1
 8022238:	4283      	cmp	r3, r0
 802223a:	d004      	beq.n	8022246 <__swbuf_r+0x62>
 802223c:	89a3      	ldrh	r3, [r4, #12]
 802223e:	07db      	lsls	r3, r3, #31
 8022240:	d519      	bpl.n	8022276 <__swbuf_r+0x92>
 8022242:	2e0a      	cmp	r6, #10
 8022244:	d117      	bne.n	8022276 <__swbuf_r+0x92>
 8022246:	4621      	mov	r1, r4
 8022248:	4628      	mov	r0, r5
 802224a:	f000 ff6f 	bl	802312c <_fflush_r>
 802224e:	b190      	cbz	r0, 8022276 <__swbuf_r+0x92>
 8022250:	e00f      	b.n	8022272 <__swbuf_r+0x8e>
 8022252:	4b0b      	ldr	r3, [pc, #44]	; (8022280 <__swbuf_r+0x9c>)
 8022254:	429c      	cmp	r4, r3
 8022256:	d101      	bne.n	802225c <__swbuf_r+0x78>
 8022258:	68ac      	ldr	r4, [r5, #8]
 802225a:	e7d0      	b.n	80221fe <__swbuf_r+0x1a>
 802225c:	4b09      	ldr	r3, [pc, #36]	; (8022284 <__swbuf_r+0xa0>)
 802225e:	429c      	cmp	r4, r3
 8022260:	bf08      	it	eq
 8022262:	68ec      	ldreq	r4, [r5, #12]
 8022264:	e7cb      	b.n	80221fe <__swbuf_r+0x1a>
 8022266:	4621      	mov	r1, r4
 8022268:	4628      	mov	r0, r5
 802226a:	f000 f82d 	bl	80222c8 <__swsetup_r>
 802226e:	2800      	cmp	r0, #0
 8022270:	d0cc      	beq.n	802220c <__swbuf_r+0x28>
 8022272:	f04f 37ff 	mov.w	r7, #4294967295
 8022276:	4638      	mov	r0, r7
 8022278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802227a:	bf00      	nop
 802227c:	0804006c 	.word	0x0804006c
 8022280:	0804008c 	.word	0x0804008c
 8022284:	0804004c 	.word	0x0804004c

08022288 <__ascii_wctomb>:
 8022288:	b149      	cbz	r1, 802229e <__ascii_wctomb+0x16>
 802228a:	2aff      	cmp	r2, #255	; 0xff
 802228c:	bf85      	ittet	hi
 802228e:	238a      	movhi	r3, #138	; 0x8a
 8022290:	6003      	strhi	r3, [r0, #0]
 8022292:	700a      	strbls	r2, [r1, #0]
 8022294:	f04f 30ff 	movhi.w	r0, #4294967295
 8022298:	bf98      	it	ls
 802229a:	2001      	movls	r0, #1
 802229c:	4770      	bx	lr
 802229e:	4608      	mov	r0, r1
 80222a0:	4770      	bx	lr
	...

080222a4 <_write_r>:
 80222a4:	b538      	push	{r3, r4, r5, lr}
 80222a6:	4c07      	ldr	r4, [pc, #28]	; (80222c4 <_write_r+0x20>)
 80222a8:	4605      	mov	r5, r0
 80222aa:	4608      	mov	r0, r1
 80222ac:	4611      	mov	r1, r2
 80222ae:	2200      	movs	r2, #0
 80222b0:	6022      	str	r2, [r4, #0]
 80222b2:	461a      	mov	r2, r3
 80222b4:	f7df fdbc 	bl	8001e30 <_write>
 80222b8:	1c43      	adds	r3, r0, #1
 80222ba:	d102      	bne.n	80222c2 <_write_r+0x1e>
 80222bc:	6823      	ldr	r3, [r4, #0]
 80222be:	b103      	cbz	r3, 80222c2 <_write_r+0x1e>
 80222c0:	602b      	str	r3, [r5, #0]
 80222c2:	bd38      	pop	{r3, r4, r5, pc}
 80222c4:	2003e328 	.word	0x2003e328

080222c8 <__swsetup_r>:
 80222c8:	4b32      	ldr	r3, [pc, #200]	; (8022394 <__swsetup_r+0xcc>)
 80222ca:	b570      	push	{r4, r5, r6, lr}
 80222cc:	681d      	ldr	r5, [r3, #0]
 80222ce:	4606      	mov	r6, r0
 80222d0:	460c      	mov	r4, r1
 80222d2:	b125      	cbz	r5, 80222de <__swsetup_r+0x16>
 80222d4:	69ab      	ldr	r3, [r5, #24]
 80222d6:	b913      	cbnz	r3, 80222de <__swsetup_r+0x16>
 80222d8:	4628      	mov	r0, r5
 80222da:	f000 ff91 	bl	8023200 <__sinit>
 80222de:	4b2e      	ldr	r3, [pc, #184]	; (8022398 <__swsetup_r+0xd0>)
 80222e0:	429c      	cmp	r4, r3
 80222e2:	d10f      	bne.n	8022304 <__swsetup_r+0x3c>
 80222e4:	686c      	ldr	r4, [r5, #4]
 80222e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80222ea:	b29a      	uxth	r2, r3
 80222ec:	0715      	lsls	r5, r2, #28
 80222ee:	d42c      	bmi.n	802234a <__swsetup_r+0x82>
 80222f0:	06d0      	lsls	r0, r2, #27
 80222f2:	d411      	bmi.n	8022318 <__swsetup_r+0x50>
 80222f4:	2209      	movs	r2, #9
 80222f6:	6032      	str	r2, [r6, #0]
 80222f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80222fc:	81a3      	strh	r3, [r4, #12]
 80222fe:	f04f 30ff 	mov.w	r0, #4294967295
 8022302:	e03e      	b.n	8022382 <__swsetup_r+0xba>
 8022304:	4b25      	ldr	r3, [pc, #148]	; (802239c <__swsetup_r+0xd4>)
 8022306:	429c      	cmp	r4, r3
 8022308:	d101      	bne.n	802230e <__swsetup_r+0x46>
 802230a:	68ac      	ldr	r4, [r5, #8]
 802230c:	e7eb      	b.n	80222e6 <__swsetup_r+0x1e>
 802230e:	4b24      	ldr	r3, [pc, #144]	; (80223a0 <__swsetup_r+0xd8>)
 8022310:	429c      	cmp	r4, r3
 8022312:	bf08      	it	eq
 8022314:	68ec      	ldreq	r4, [r5, #12]
 8022316:	e7e6      	b.n	80222e6 <__swsetup_r+0x1e>
 8022318:	0751      	lsls	r1, r2, #29
 802231a:	d512      	bpl.n	8022342 <__swsetup_r+0x7a>
 802231c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802231e:	b141      	cbz	r1, 8022332 <__swsetup_r+0x6a>
 8022320:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022324:	4299      	cmp	r1, r3
 8022326:	d002      	beq.n	802232e <__swsetup_r+0x66>
 8022328:	4630      	mov	r0, r6
 802232a:	f7fd ff61 	bl	80201f0 <_free_r>
 802232e:	2300      	movs	r3, #0
 8022330:	6363      	str	r3, [r4, #52]	; 0x34
 8022332:	89a3      	ldrh	r3, [r4, #12]
 8022334:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8022338:	81a3      	strh	r3, [r4, #12]
 802233a:	2300      	movs	r3, #0
 802233c:	6063      	str	r3, [r4, #4]
 802233e:	6923      	ldr	r3, [r4, #16]
 8022340:	6023      	str	r3, [r4, #0]
 8022342:	89a3      	ldrh	r3, [r4, #12]
 8022344:	f043 0308 	orr.w	r3, r3, #8
 8022348:	81a3      	strh	r3, [r4, #12]
 802234a:	6923      	ldr	r3, [r4, #16]
 802234c:	b94b      	cbnz	r3, 8022362 <__swsetup_r+0x9a>
 802234e:	89a3      	ldrh	r3, [r4, #12]
 8022350:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8022354:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022358:	d003      	beq.n	8022362 <__swsetup_r+0x9a>
 802235a:	4621      	mov	r1, r4
 802235c:	4630      	mov	r0, r6
 802235e:	f001 f917 	bl	8023590 <__smakebuf_r>
 8022362:	89a2      	ldrh	r2, [r4, #12]
 8022364:	f012 0301 	ands.w	r3, r2, #1
 8022368:	d00c      	beq.n	8022384 <__swsetup_r+0xbc>
 802236a:	2300      	movs	r3, #0
 802236c:	60a3      	str	r3, [r4, #8]
 802236e:	6963      	ldr	r3, [r4, #20]
 8022370:	425b      	negs	r3, r3
 8022372:	61a3      	str	r3, [r4, #24]
 8022374:	6923      	ldr	r3, [r4, #16]
 8022376:	b953      	cbnz	r3, 802238e <__swsetup_r+0xc6>
 8022378:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802237c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8022380:	d1ba      	bne.n	80222f8 <__swsetup_r+0x30>
 8022382:	bd70      	pop	{r4, r5, r6, pc}
 8022384:	0792      	lsls	r2, r2, #30
 8022386:	bf58      	it	pl
 8022388:	6963      	ldrpl	r3, [r4, #20]
 802238a:	60a3      	str	r3, [r4, #8]
 802238c:	e7f2      	b.n	8022374 <__swsetup_r+0xac>
 802238e:	2000      	movs	r0, #0
 8022390:	e7f7      	b.n	8022382 <__swsetup_r+0xba>
 8022392:	bf00      	nop
 8022394:	20000450 	.word	0x20000450
 8022398:	0804006c 	.word	0x0804006c
 802239c:	0804008c 	.word	0x0804008c
 80223a0:	0804004c 	.word	0x0804004c

080223a4 <abs>:
 80223a4:	2800      	cmp	r0, #0
 80223a6:	bfb8      	it	lt
 80223a8:	4240      	neglt	r0, r0
 80223aa:	4770      	bx	lr

080223ac <asctime>:
 80223ac:	4b09      	ldr	r3, [pc, #36]	; (80223d4 <asctime+0x28>)
 80223ae:	b570      	push	{r4, r5, r6, lr}
 80223b0:	681c      	ldr	r4, [r3, #0]
 80223b2:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80223b4:	4606      	mov	r6, r0
 80223b6:	b93d      	cbnz	r5, 80223c8 <asctime+0x1c>
 80223b8:	201a      	movs	r0, #26
 80223ba:	f7fd fc27 	bl	801fc0c <malloc>
 80223be:	221a      	movs	r2, #26
 80223c0:	6420      	str	r0, [r4, #64]	; 0x40
 80223c2:	4629      	mov	r1, r5
 80223c4:	f7fd fc77 	bl	801fcb6 <memset>
 80223c8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80223ca:	4630      	mov	r0, r6
 80223cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80223d0:	f000 b802 	b.w	80223d8 <asctime_r>
 80223d4:	20000450 	.word	0x20000450

080223d8 <asctime_r>:
 80223d8:	b510      	push	{r4, lr}
 80223da:	460c      	mov	r4, r1
 80223dc:	6941      	ldr	r1, [r0, #20]
 80223de:	6903      	ldr	r3, [r0, #16]
 80223e0:	6982      	ldr	r2, [r0, #24]
 80223e2:	b086      	sub	sp, #24
 80223e4:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 80223e8:	9104      	str	r1, [sp, #16]
 80223ea:	6801      	ldr	r1, [r0, #0]
 80223ec:	9103      	str	r1, [sp, #12]
 80223ee:	6841      	ldr	r1, [r0, #4]
 80223f0:	9102      	str	r1, [sp, #8]
 80223f2:	6881      	ldr	r1, [r0, #8]
 80223f4:	9101      	str	r1, [sp, #4]
 80223f6:	68c1      	ldr	r1, [r0, #12]
 80223f8:	9100      	str	r1, [sp, #0]
 80223fa:	4907      	ldr	r1, [pc, #28]	; (8022418 <asctime_r+0x40>)
 80223fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022400:	440b      	add	r3, r1
 8022402:	4906      	ldr	r1, [pc, #24]	; (802241c <asctime_r+0x44>)
 8022404:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022408:	440a      	add	r2, r1
 802240a:	4620      	mov	r0, r4
 802240c:	4904      	ldr	r1, [pc, #16]	; (8022420 <asctime_r+0x48>)
 802240e:	f7fe fd2b 	bl	8020e68 <siprintf>
 8022412:	4620      	mov	r0, r4
 8022414:	b006      	add	sp, #24
 8022416:	bd10      	pop	{r4, pc}
 8022418:	0803ff18 	.word	0x0803ff18
 802241c:	0803ff03 	.word	0x0803ff03
 8022420:	0803fee3 	.word	0x0803fee3

08022424 <_close_r>:
 8022424:	b538      	push	{r3, r4, r5, lr}
 8022426:	4c06      	ldr	r4, [pc, #24]	; (8022440 <_close_r+0x1c>)
 8022428:	2300      	movs	r3, #0
 802242a:	4605      	mov	r5, r0
 802242c:	4608      	mov	r0, r1
 802242e:	6023      	str	r3, [r4, #0]
 8022430:	f7e2 fb88 	bl	8004b44 <_close>
 8022434:	1c43      	adds	r3, r0, #1
 8022436:	d102      	bne.n	802243e <_close_r+0x1a>
 8022438:	6823      	ldr	r3, [r4, #0]
 802243a:	b103      	cbz	r3, 802243e <_close_r+0x1a>
 802243c:	602b      	str	r3, [r5, #0]
 802243e:	bd38      	pop	{r3, r4, r5, pc}
 8022440:	2003e328 	.word	0x2003e328

08022444 <div>:
 8022444:	2900      	cmp	r1, #0
 8022446:	b510      	push	{r4, lr}
 8022448:	fb91 f4f2 	sdiv	r4, r1, r2
 802244c:	fb02 1314 	mls	r3, r2, r4, r1
 8022450:	db06      	blt.n	8022460 <div+0x1c>
 8022452:	2b00      	cmp	r3, #0
 8022454:	da01      	bge.n	802245a <div+0x16>
 8022456:	3401      	adds	r4, #1
 8022458:	1a9b      	subs	r3, r3, r2
 802245a:	e9c0 4300 	strd	r4, r3, [r0]
 802245e:	bd10      	pop	{r4, pc}
 8022460:	2b00      	cmp	r3, #0
 8022462:	bfc4      	itt	gt
 8022464:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8022468:	189b      	addgt	r3, r3, r2
 802246a:	e7f6      	b.n	802245a <div+0x16>

0802246c <quorem>:
 802246c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022470:	6903      	ldr	r3, [r0, #16]
 8022472:	690c      	ldr	r4, [r1, #16]
 8022474:	42a3      	cmp	r3, r4
 8022476:	4680      	mov	r8, r0
 8022478:	f2c0 8082 	blt.w	8022580 <quorem+0x114>
 802247c:	3c01      	subs	r4, #1
 802247e:	f101 0714 	add.w	r7, r1, #20
 8022482:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8022486:	f100 0614 	add.w	r6, r0, #20
 802248a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 802248e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8022492:	eb06 030c 	add.w	r3, r6, ip
 8022496:	3501      	adds	r5, #1
 8022498:	eb07 090c 	add.w	r9, r7, ip
 802249c:	9301      	str	r3, [sp, #4]
 802249e:	fbb0 f5f5 	udiv	r5, r0, r5
 80224a2:	b395      	cbz	r5, 802250a <quorem+0x9e>
 80224a4:	f04f 0a00 	mov.w	sl, #0
 80224a8:	4638      	mov	r0, r7
 80224aa:	46b6      	mov	lr, r6
 80224ac:	46d3      	mov	fp, sl
 80224ae:	f850 2b04 	ldr.w	r2, [r0], #4
 80224b2:	b293      	uxth	r3, r2
 80224b4:	fb05 a303 	mla	r3, r5, r3, sl
 80224b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80224bc:	b29b      	uxth	r3, r3
 80224be:	ebab 0303 	sub.w	r3, fp, r3
 80224c2:	0c12      	lsrs	r2, r2, #16
 80224c4:	f8de b000 	ldr.w	fp, [lr]
 80224c8:	fb05 a202 	mla	r2, r5, r2, sl
 80224cc:	fa13 f38b 	uxtah	r3, r3, fp
 80224d0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80224d4:	fa1f fb82 	uxth.w	fp, r2
 80224d8:	f8de 2000 	ldr.w	r2, [lr]
 80224dc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80224e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80224e4:	b29b      	uxth	r3, r3
 80224e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80224ea:	4581      	cmp	r9, r0
 80224ec:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80224f0:	f84e 3b04 	str.w	r3, [lr], #4
 80224f4:	d2db      	bcs.n	80224ae <quorem+0x42>
 80224f6:	f856 300c 	ldr.w	r3, [r6, ip]
 80224fa:	b933      	cbnz	r3, 802250a <quorem+0x9e>
 80224fc:	9b01      	ldr	r3, [sp, #4]
 80224fe:	3b04      	subs	r3, #4
 8022500:	429e      	cmp	r6, r3
 8022502:	461a      	mov	r2, r3
 8022504:	d330      	bcc.n	8022568 <quorem+0xfc>
 8022506:	f8c8 4010 	str.w	r4, [r8, #16]
 802250a:	4640      	mov	r0, r8
 802250c:	f001 fa98 	bl	8023a40 <__mcmp>
 8022510:	2800      	cmp	r0, #0
 8022512:	db25      	blt.n	8022560 <quorem+0xf4>
 8022514:	3501      	adds	r5, #1
 8022516:	4630      	mov	r0, r6
 8022518:	f04f 0c00 	mov.w	ip, #0
 802251c:	f857 2b04 	ldr.w	r2, [r7], #4
 8022520:	f8d0 e000 	ldr.w	lr, [r0]
 8022524:	b293      	uxth	r3, r2
 8022526:	ebac 0303 	sub.w	r3, ip, r3
 802252a:	0c12      	lsrs	r2, r2, #16
 802252c:	fa13 f38e 	uxtah	r3, r3, lr
 8022530:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8022534:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8022538:	b29b      	uxth	r3, r3
 802253a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802253e:	45b9      	cmp	r9, r7
 8022540:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8022544:	f840 3b04 	str.w	r3, [r0], #4
 8022548:	d2e8      	bcs.n	802251c <quorem+0xb0>
 802254a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 802254e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8022552:	b92a      	cbnz	r2, 8022560 <quorem+0xf4>
 8022554:	3b04      	subs	r3, #4
 8022556:	429e      	cmp	r6, r3
 8022558:	461a      	mov	r2, r3
 802255a:	d30b      	bcc.n	8022574 <quorem+0x108>
 802255c:	f8c8 4010 	str.w	r4, [r8, #16]
 8022560:	4628      	mov	r0, r5
 8022562:	b003      	add	sp, #12
 8022564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022568:	6812      	ldr	r2, [r2, #0]
 802256a:	3b04      	subs	r3, #4
 802256c:	2a00      	cmp	r2, #0
 802256e:	d1ca      	bne.n	8022506 <quorem+0x9a>
 8022570:	3c01      	subs	r4, #1
 8022572:	e7c5      	b.n	8022500 <quorem+0x94>
 8022574:	6812      	ldr	r2, [r2, #0]
 8022576:	3b04      	subs	r3, #4
 8022578:	2a00      	cmp	r2, #0
 802257a:	d1ef      	bne.n	802255c <quorem+0xf0>
 802257c:	3c01      	subs	r4, #1
 802257e:	e7ea      	b.n	8022556 <quorem+0xea>
 8022580:	2000      	movs	r0, #0
 8022582:	e7ee      	b.n	8022562 <quorem+0xf6>
 8022584:	0000      	movs	r0, r0
	...

08022588 <_dtoa_r>:
 8022588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802258c:	ec57 6b10 	vmov	r6, r7, d0
 8022590:	b095      	sub	sp, #84	; 0x54
 8022592:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8022594:	9108      	str	r1, [sp, #32]
 8022596:	4604      	mov	r4, r0
 8022598:	920a      	str	r2, [sp, #40]	; 0x28
 802259a:	9311      	str	r3, [sp, #68]	; 0x44
 802259c:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80225a0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80225a4:	b93d      	cbnz	r5, 80225b6 <_dtoa_r+0x2e>
 80225a6:	2010      	movs	r0, #16
 80225a8:	f7fd fb30 	bl	801fc0c <malloc>
 80225ac:	6260      	str	r0, [r4, #36]	; 0x24
 80225ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80225b2:	6005      	str	r5, [r0, #0]
 80225b4:	60c5      	str	r5, [r0, #12]
 80225b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80225b8:	6819      	ldr	r1, [r3, #0]
 80225ba:	b151      	cbz	r1, 80225d2 <_dtoa_r+0x4a>
 80225bc:	685a      	ldr	r2, [r3, #4]
 80225be:	604a      	str	r2, [r1, #4]
 80225c0:	2301      	movs	r3, #1
 80225c2:	4093      	lsls	r3, r2
 80225c4:	608b      	str	r3, [r1, #8]
 80225c6:	4620      	mov	r0, r4
 80225c8:	f001 f858 	bl	802367c <_Bfree>
 80225cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80225ce:	2200      	movs	r2, #0
 80225d0:	601a      	str	r2, [r3, #0]
 80225d2:	1e3b      	subs	r3, r7, #0
 80225d4:	bfb9      	ittee	lt
 80225d6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80225da:	9303      	strlt	r3, [sp, #12]
 80225dc:	2300      	movge	r3, #0
 80225de:	f8c8 3000 	strge.w	r3, [r8]
 80225e2:	9d03      	ldr	r5, [sp, #12]
 80225e4:	4bac      	ldr	r3, [pc, #688]	; (8022898 <_dtoa_r+0x310>)
 80225e6:	bfbc      	itt	lt
 80225e8:	2201      	movlt	r2, #1
 80225ea:	f8c8 2000 	strlt.w	r2, [r8]
 80225ee:	43ab      	bics	r3, r5
 80225f0:	d11b      	bne.n	802262a <_dtoa_r+0xa2>
 80225f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80225f4:	f242 730f 	movw	r3, #9999	; 0x270f
 80225f8:	6013      	str	r3, [r2, #0]
 80225fa:	9b02      	ldr	r3, [sp, #8]
 80225fc:	b923      	cbnz	r3, 8022608 <_dtoa_r+0x80>
 80225fe:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8022602:	2d00      	cmp	r5, #0
 8022604:	f000 84dd 	beq.w	8022fc2 <_dtoa_r+0xa3a>
 8022608:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802260a:	b953      	cbnz	r3, 8022622 <_dtoa_r+0x9a>
 802260c:	4ba3      	ldr	r3, [pc, #652]	; (802289c <_dtoa_r+0x314>)
 802260e:	e020      	b.n	8022652 <_dtoa_r+0xca>
 8022610:	4ba3      	ldr	r3, [pc, #652]	; (80228a0 <_dtoa_r+0x318>)
 8022612:	9304      	str	r3, [sp, #16]
 8022614:	3308      	adds	r3, #8
 8022616:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8022618:	6013      	str	r3, [r2, #0]
 802261a:	9804      	ldr	r0, [sp, #16]
 802261c:	b015      	add	sp, #84	; 0x54
 802261e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022622:	4b9e      	ldr	r3, [pc, #632]	; (802289c <_dtoa_r+0x314>)
 8022624:	9304      	str	r3, [sp, #16]
 8022626:	3303      	adds	r3, #3
 8022628:	e7f5      	b.n	8022616 <_dtoa_r+0x8e>
 802262a:	ed9d 7b02 	vldr	d7, [sp, #8]
 802262e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8022632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022636:	ed8d 7b04 	vstr	d7, [sp, #16]
 802263a:	d10c      	bne.n	8022656 <_dtoa_r+0xce>
 802263c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802263e:	2301      	movs	r3, #1
 8022640:	6013      	str	r3, [r2, #0]
 8022642:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022644:	2b00      	cmp	r3, #0
 8022646:	f000 84b9 	beq.w	8022fbc <_dtoa_r+0xa34>
 802264a:	4b96      	ldr	r3, [pc, #600]	; (80228a4 <_dtoa_r+0x31c>)
 802264c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 802264e:	6013      	str	r3, [r2, #0]
 8022650:	3b01      	subs	r3, #1
 8022652:	9304      	str	r3, [sp, #16]
 8022654:	e7e1      	b.n	802261a <_dtoa_r+0x92>
 8022656:	a913      	add	r1, sp, #76	; 0x4c
 8022658:	aa12      	add	r2, sp, #72	; 0x48
 802265a:	ed9d 0b04 	vldr	d0, [sp, #16]
 802265e:	4620      	mov	r0, r4
 8022660:	f001 fa65 	bl	8023b2e <__d2b>
 8022664:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8022668:	9001      	str	r0, [sp, #4]
 802266a:	9912      	ldr	r1, [sp, #72]	; 0x48
 802266c:	2e00      	cmp	r6, #0
 802266e:	d046      	beq.n	80226fe <_dtoa_r+0x176>
 8022670:	9805      	ldr	r0, [sp, #20]
 8022672:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8022676:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802267a:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 802267e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8022682:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 8022686:	2700      	movs	r7, #0
 8022688:	ee07 aa90 	vmov	s15, sl
 802268c:	ec43 2b16 	vmov	d6, r2, r3
 8022690:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8022694:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8022880 <_dtoa_r+0x2f8>
 8022698:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 802269c:	ee36 7b47 	vsub.f64	d7, d6, d7
 80226a0:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8022888 <_dtoa_r+0x300>
 80226a4:	eea7 6b04 	vfma.f64	d6, d7, d4
 80226a8:	eeb0 7b46 	vmov.f64	d7, d6
 80226ac:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8022890 <_dtoa_r+0x308>
 80226b0:	eea5 7b06 	vfma.f64	d7, d5, d6
 80226b4:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80226b8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80226bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80226c0:	ee16 ba90 	vmov	fp, s13
 80226c4:	d508      	bpl.n	80226d8 <_dtoa_r+0x150>
 80226c6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80226ca:	eeb4 6b47 	vcmp.f64	d6, d7
 80226ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80226d2:	bf18      	it	ne
 80226d4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80226d8:	f1bb 0f16 	cmp.w	fp, #22
 80226dc:	d834      	bhi.n	8022748 <_dtoa_r+0x1c0>
 80226de:	4b72      	ldr	r3, [pc, #456]	; (80228a8 <_dtoa_r+0x320>)
 80226e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80226e4:	ed93 7b00 	vldr	d7, [r3]
 80226e8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80226ec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80226f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80226f4:	dd01      	ble.n	80226fa <_dtoa_r+0x172>
 80226f6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80226fa:	2300      	movs	r3, #0
 80226fc:	e025      	b.n	802274a <_dtoa_r+0x1c2>
 80226fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022700:	eb01 0a03 	add.w	sl, r1, r3
 8022704:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8022708:	2b20      	cmp	r3, #32
 802270a:	dd17      	ble.n	802273c <_dtoa_r+0x1b4>
 802270c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8022710:	9a02      	ldr	r2, [sp, #8]
 8022712:	409d      	lsls	r5, r3
 8022714:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8022718:	fa22 f303 	lsr.w	r3, r2, r3
 802271c:	432b      	orrs	r3, r5
 802271e:	ee07 3a90 	vmov	s15, r3
 8022722:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8022726:	f10a 3aff 	add.w	sl, sl, #4294967295
 802272a:	ed8d 7b04 	vstr	d7, [sp, #16]
 802272e:	9805      	ldr	r0, [sp, #20]
 8022730:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8022734:	2701      	movs	r7, #1
 8022736:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 802273a:	e7a5      	b.n	8022688 <_dtoa_r+0x100>
 802273c:	9a02      	ldr	r2, [sp, #8]
 802273e:	f1c3 0320 	rsb	r3, r3, #32
 8022742:	fa02 f303 	lsl.w	r3, r2, r3
 8022746:	e7ea      	b.n	802271e <_dtoa_r+0x196>
 8022748:	2301      	movs	r3, #1
 802274a:	eba1 0a0a 	sub.w	sl, r1, sl
 802274e:	9310      	str	r3, [sp, #64]	; 0x40
 8022750:	f1ba 0301 	subs.w	r3, sl, #1
 8022754:	9307      	str	r3, [sp, #28]
 8022756:	bf43      	ittte	mi
 8022758:	2300      	movmi	r3, #0
 802275a:	f1ca 0a01 	rsbmi	sl, sl, #1
 802275e:	9307      	strmi	r3, [sp, #28]
 8022760:	f04f 0a00 	movpl.w	sl, #0
 8022764:	f1bb 0f00 	cmp.w	fp, #0
 8022768:	db19      	blt.n	802279e <_dtoa_r+0x216>
 802276a:	9b07      	ldr	r3, [sp, #28]
 802276c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8022770:	445b      	add	r3, fp
 8022772:	9307      	str	r3, [sp, #28]
 8022774:	f04f 0800 	mov.w	r8, #0
 8022778:	9b08      	ldr	r3, [sp, #32]
 802277a:	2b09      	cmp	r3, #9
 802277c:	d866      	bhi.n	802284c <_dtoa_r+0x2c4>
 802277e:	2b05      	cmp	r3, #5
 8022780:	bfc4      	itt	gt
 8022782:	3b04      	subgt	r3, #4
 8022784:	9308      	strgt	r3, [sp, #32]
 8022786:	9b08      	ldr	r3, [sp, #32]
 8022788:	f1a3 0302 	sub.w	r3, r3, #2
 802278c:	bfcc      	ite	gt
 802278e:	2500      	movgt	r5, #0
 8022790:	2501      	movle	r5, #1
 8022792:	2b03      	cmp	r3, #3
 8022794:	d866      	bhi.n	8022864 <_dtoa_r+0x2dc>
 8022796:	e8df f003 	tbb	[pc, r3]
 802279a:	5755      	.short	0x5755
 802279c:	4909      	.short	0x4909
 802279e:	2300      	movs	r3, #0
 80227a0:	ebaa 0a0b 	sub.w	sl, sl, fp
 80227a4:	f1cb 0800 	rsb	r8, fp, #0
 80227a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80227aa:	e7e5      	b.n	8022778 <_dtoa_r+0x1f0>
 80227ac:	2301      	movs	r3, #1
 80227ae:	9309      	str	r3, [sp, #36]	; 0x24
 80227b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80227b2:	2b00      	cmp	r3, #0
 80227b4:	dd59      	ble.n	802286a <_dtoa_r+0x2e2>
 80227b6:	9306      	str	r3, [sp, #24]
 80227b8:	4699      	mov	r9, r3
 80227ba:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80227bc:	2200      	movs	r2, #0
 80227be:	6072      	str	r2, [r6, #4]
 80227c0:	2204      	movs	r2, #4
 80227c2:	f102 0014 	add.w	r0, r2, #20
 80227c6:	4298      	cmp	r0, r3
 80227c8:	6871      	ldr	r1, [r6, #4]
 80227ca:	d953      	bls.n	8022874 <_dtoa_r+0x2ec>
 80227cc:	4620      	mov	r0, r4
 80227ce:	f000 ff21 	bl	8023614 <_Balloc>
 80227d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80227d4:	6030      	str	r0, [r6, #0]
 80227d6:	681b      	ldr	r3, [r3, #0]
 80227d8:	9304      	str	r3, [sp, #16]
 80227da:	f1b9 0f0e 	cmp.w	r9, #14
 80227de:	f200 80c2 	bhi.w	8022966 <_dtoa_r+0x3de>
 80227e2:	2d00      	cmp	r5, #0
 80227e4:	f000 80bf 	beq.w	8022966 <_dtoa_r+0x3de>
 80227e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80227ec:	f1bb 0f00 	cmp.w	fp, #0
 80227f0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80227f4:	f340 80e6 	ble.w	80229c4 <_dtoa_r+0x43c>
 80227f8:	4a2b      	ldr	r2, [pc, #172]	; (80228a8 <_dtoa_r+0x320>)
 80227fa:	f00b 030f 	and.w	r3, fp, #15
 80227fe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8022802:	ed93 7b00 	vldr	d7, [r3]
 8022806:	ea4f 132b 	mov.w	r3, fp, asr #4
 802280a:	06da      	lsls	r2, r3, #27
 802280c:	f140 80d8 	bpl.w	80229c0 <_dtoa_r+0x438>
 8022810:	4a26      	ldr	r2, [pc, #152]	; (80228ac <_dtoa_r+0x324>)
 8022812:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 8022816:	ed92 6b08 	vldr	d6, [r2, #32]
 802281a:	ee85 6b06 	vdiv.f64	d6, d5, d6
 802281e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8022822:	f003 030f 	and.w	r3, r3, #15
 8022826:	2203      	movs	r2, #3
 8022828:	4920      	ldr	r1, [pc, #128]	; (80228ac <_dtoa_r+0x324>)
 802282a:	e04a      	b.n	80228c2 <_dtoa_r+0x33a>
 802282c:	2301      	movs	r3, #1
 802282e:	9309      	str	r3, [sp, #36]	; 0x24
 8022830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022832:	445b      	add	r3, fp
 8022834:	f103 0901 	add.w	r9, r3, #1
 8022838:	9306      	str	r3, [sp, #24]
 802283a:	464b      	mov	r3, r9
 802283c:	2b01      	cmp	r3, #1
 802283e:	bfb8      	it	lt
 8022840:	2301      	movlt	r3, #1
 8022842:	e7ba      	b.n	80227ba <_dtoa_r+0x232>
 8022844:	2300      	movs	r3, #0
 8022846:	e7b2      	b.n	80227ae <_dtoa_r+0x226>
 8022848:	2300      	movs	r3, #0
 802284a:	e7f0      	b.n	802282e <_dtoa_r+0x2a6>
 802284c:	2501      	movs	r5, #1
 802284e:	2300      	movs	r3, #0
 8022850:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8022854:	f04f 33ff 	mov.w	r3, #4294967295
 8022858:	9306      	str	r3, [sp, #24]
 802285a:	4699      	mov	r9, r3
 802285c:	2200      	movs	r2, #0
 802285e:	2312      	movs	r3, #18
 8022860:	920a      	str	r2, [sp, #40]	; 0x28
 8022862:	e7aa      	b.n	80227ba <_dtoa_r+0x232>
 8022864:	2301      	movs	r3, #1
 8022866:	9309      	str	r3, [sp, #36]	; 0x24
 8022868:	e7f4      	b.n	8022854 <_dtoa_r+0x2cc>
 802286a:	2301      	movs	r3, #1
 802286c:	9306      	str	r3, [sp, #24]
 802286e:	4699      	mov	r9, r3
 8022870:	461a      	mov	r2, r3
 8022872:	e7f5      	b.n	8022860 <_dtoa_r+0x2d8>
 8022874:	3101      	adds	r1, #1
 8022876:	6071      	str	r1, [r6, #4]
 8022878:	0052      	lsls	r2, r2, #1
 802287a:	e7a2      	b.n	80227c2 <_dtoa_r+0x23a>
 802287c:	f3af 8000 	nop.w
 8022880:	636f4361 	.word	0x636f4361
 8022884:	3fd287a7 	.word	0x3fd287a7
 8022888:	8b60c8b3 	.word	0x8b60c8b3
 802288c:	3fc68a28 	.word	0x3fc68a28
 8022890:	509f79fb 	.word	0x509f79fb
 8022894:	3fd34413 	.word	0x3fd34413
 8022898:	7ff00000 	.word	0x7ff00000
 802289c:	08040046 	.word	0x08040046
 80228a0:	0804003d 	.word	0x0804003d
 80228a4:	080401d4 	.word	0x080401d4
 80228a8:	080400d8 	.word	0x080400d8
 80228ac:	080400b0 	.word	0x080400b0
 80228b0:	07de      	lsls	r6, r3, #31
 80228b2:	d504      	bpl.n	80228be <_dtoa_r+0x336>
 80228b4:	ed91 6b00 	vldr	d6, [r1]
 80228b8:	3201      	adds	r2, #1
 80228ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80228be:	105b      	asrs	r3, r3, #1
 80228c0:	3108      	adds	r1, #8
 80228c2:	2b00      	cmp	r3, #0
 80228c4:	d1f4      	bne.n	80228b0 <_dtoa_r+0x328>
 80228c6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80228ca:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80228ce:	ed8d 7b02 	vstr	d7, [sp, #8]
 80228d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80228d4:	2b00      	cmp	r3, #0
 80228d6:	f000 80a7 	beq.w	8022a28 <_dtoa_r+0x4a0>
 80228da:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80228de:	ed9d 7b02 	vldr	d7, [sp, #8]
 80228e2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80228e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80228ea:	f140 809d 	bpl.w	8022a28 <_dtoa_r+0x4a0>
 80228ee:	f1b9 0f00 	cmp.w	r9, #0
 80228f2:	f000 8099 	beq.w	8022a28 <_dtoa_r+0x4a0>
 80228f6:	9b06      	ldr	r3, [sp, #24]
 80228f8:	2b00      	cmp	r3, #0
 80228fa:	dd30      	ble.n	802295e <_dtoa_r+0x3d6>
 80228fc:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8022900:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022904:	ed8d 7b02 	vstr	d7, [sp, #8]
 8022908:	9d06      	ldr	r5, [sp, #24]
 802290a:	f10b 33ff 	add.w	r3, fp, #4294967295
 802290e:	3201      	adds	r2, #1
 8022910:	ed9d 6b02 	vldr	d6, [sp, #8]
 8022914:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8022918:	ee07 2a90 	vmov	s15, r2
 802291c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8022920:	eea7 5b06 	vfma.f64	d5, d7, d6
 8022924:	ed8d 5b02 	vstr	d5, [sp, #8]
 8022928:	9a03      	ldr	r2, [sp, #12]
 802292a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802292e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 8022932:	2d00      	cmp	r5, #0
 8022934:	d17b      	bne.n	8022a2e <_dtoa_r+0x4a6>
 8022936:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 802293a:	ee36 6b47 	vsub.f64	d6, d6, d7
 802293e:	ec41 0b17 	vmov	d7, r0, r1
 8022942:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8022946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802294a:	f300 8253 	bgt.w	8022df4 <_dtoa_r+0x86c>
 802294e:	eeb1 7b47 	vneg.f64	d7, d7
 8022952:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8022956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802295a:	f100 8249 	bmi.w	8022df0 <_dtoa_r+0x868>
 802295e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8022962:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8022966:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022968:	2b00      	cmp	r3, #0
 802296a:	f2c0 8119 	blt.w	8022ba0 <_dtoa_r+0x618>
 802296e:	f1bb 0f0e 	cmp.w	fp, #14
 8022972:	f300 8115 	bgt.w	8022ba0 <_dtoa_r+0x618>
 8022976:	4bc3      	ldr	r3, [pc, #780]	; (8022c84 <_dtoa_r+0x6fc>)
 8022978:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 802297c:	ed93 6b00 	vldr	d6, [r3]
 8022980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022982:	2b00      	cmp	r3, #0
 8022984:	f280 80ba 	bge.w	8022afc <_dtoa_r+0x574>
 8022988:	f1b9 0f00 	cmp.w	r9, #0
 802298c:	f300 80b6 	bgt.w	8022afc <_dtoa_r+0x574>
 8022990:	f040 822d 	bne.w	8022dee <_dtoa_r+0x866>
 8022994:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8022998:	ee26 6b07 	vmul.f64	d6, d6, d7
 802299c:	ed9d 7b02 	vldr	d7, [sp, #8]
 80229a0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80229a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80229a8:	464d      	mov	r5, r9
 80229aa:	464f      	mov	r7, r9
 80229ac:	f280 8204 	bge.w	8022db8 <_dtoa_r+0x830>
 80229b0:	9b04      	ldr	r3, [sp, #16]
 80229b2:	9a04      	ldr	r2, [sp, #16]
 80229b4:	1c5e      	adds	r6, r3, #1
 80229b6:	2331      	movs	r3, #49	; 0x31
 80229b8:	7013      	strb	r3, [r2, #0]
 80229ba:	f10b 0b01 	add.w	fp, fp, #1
 80229be:	e1ff      	b.n	8022dc0 <_dtoa_r+0x838>
 80229c0:	2202      	movs	r2, #2
 80229c2:	e731      	b.n	8022828 <_dtoa_r+0x2a0>
 80229c4:	d02e      	beq.n	8022a24 <_dtoa_r+0x49c>
 80229c6:	f1cb 0300 	rsb	r3, fp, #0
 80229ca:	4aae      	ldr	r2, [pc, #696]	; (8022c84 <_dtoa_r+0x6fc>)
 80229cc:	f003 010f 	and.w	r1, r3, #15
 80229d0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80229d4:	ed92 7b00 	vldr	d7, [r2]
 80229d8:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 80229dc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80229e0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80229e4:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 80229e8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80229ec:	49a6      	ldr	r1, [pc, #664]	; (8022c88 <_dtoa_r+0x700>)
 80229ee:	111b      	asrs	r3, r3, #4
 80229f0:	2000      	movs	r0, #0
 80229f2:	2202      	movs	r2, #2
 80229f4:	b93b      	cbnz	r3, 8022a06 <_dtoa_r+0x47e>
 80229f6:	2800      	cmp	r0, #0
 80229f8:	f43f af6b 	beq.w	80228d2 <_dtoa_r+0x34a>
 80229fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8022a00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022a04:	e765      	b.n	80228d2 <_dtoa_r+0x34a>
 8022a06:	07dd      	lsls	r5, r3, #31
 8022a08:	d509      	bpl.n	8022a1e <_dtoa_r+0x496>
 8022a0a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8022a0e:	ed91 7b00 	vldr	d7, [r1]
 8022a12:	ee26 7b07 	vmul.f64	d7, d6, d7
 8022a16:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8022a1a:	3201      	adds	r2, #1
 8022a1c:	2001      	movs	r0, #1
 8022a1e:	105b      	asrs	r3, r3, #1
 8022a20:	3108      	adds	r1, #8
 8022a22:	e7e7      	b.n	80229f4 <_dtoa_r+0x46c>
 8022a24:	2202      	movs	r2, #2
 8022a26:	e754      	b.n	80228d2 <_dtoa_r+0x34a>
 8022a28:	465b      	mov	r3, fp
 8022a2a:	464d      	mov	r5, r9
 8022a2c:	e770      	b.n	8022910 <_dtoa_r+0x388>
 8022a2e:	4a95      	ldr	r2, [pc, #596]	; (8022c84 <_dtoa_r+0x6fc>)
 8022a30:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8022a34:	ed12 4b02 	vldr	d4, [r2, #-8]
 8022a38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022a3a:	ec41 0b17 	vmov	d7, r0, r1
 8022a3e:	b35a      	cbz	r2, 8022a98 <_dtoa_r+0x510>
 8022a40:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8022a44:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8022a48:	9e04      	ldr	r6, [sp, #16]
 8022a4a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8022a4e:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8022a52:	ee35 7b47 	vsub.f64	d7, d5, d7
 8022a56:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8022a5a:	ee14 2a90 	vmov	r2, s9
 8022a5e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8022a62:	3230      	adds	r2, #48	; 0x30
 8022a64:	ee36 6b45 	vsub.f64	d6, d6, d5
 8022a68:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8022a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022a70:	f806 2b01 	strb.w	r2, [r6], #1
 8022a74:	d43b      	bmi.n	8022aee <_dtoa_r+0x566>
 8022a76:	ee32 5b46 	vsub.f64	d5, d2, d6
 8022a7a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8022a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022a82:	d472      	bmi.n	8022b6a <_dtoa_r+0x5e2>
 8022a84:	9a04      	ldr	r2, [sp, #16]
 8022a86:	1ab2      	subs	r2, r6, r2
 8022a88:	4295      	cmp	r5, r2
 8022a8a:	f77f af68 	ble.w	802295e <_dtoa_r+0x3d6>
 8022a8e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8022a92:	ee26 6b03 	vmul.f64	d6, d6, d3
 8022a96:	e7de      	b.n	8022a56 <_dtoa_r+0x4ce>
 8022a98:	9a04      	ldr	r2, [sp, #16]
 8022a9a:	ee24 7b07 	vmul.f64	d7, d4, d7
 8022a9e:	1956      	adds	r6, r2, r5
 8022aa0:	4611      	mov	r1, r2
 8022aa2:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8022aa6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8022aaa:	ee14 2a90 	vmov	r2, s9
 8022aae:	3230      	adds	r2, #48	; 0x30
 8022ab0:	f801 2b01 	strb.w	r2, [r1], #1
 8022ab4:	42b1      	cmp	r1, r6
 8022ab6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8022aba:	ee36 6b45 	vsub.f64	d6, d6, d5
 8022abe:	d11a      	bne.n	8022af6 <_dtoa_r+0x56e>
 8022ac0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8022ac4:	ee37 4b05 	vadd.f64	d4, d7, d5
 8022ac8:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8022acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022ad0:	dc4b      	bgt.n	8022b6a <_dtoa_r+0x5e2>
 8022ad2:	ee35 7b47 	vsub.f64	d7, d5, d7
 8022ad6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8022ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022ade:	f57f af3e 	bpl.w	802295e <_dtoa_r+0x3d6>
 8022ae2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8022ae6:	2a30      	cmp	r2, #48	; 0x30
 8022ae8:	f106 31ff 	add.w	r1, r6, #4294967295
 8022aec:	d001      	beq.n	8022af2 <_dtoa_r+0x56a>
 8022aee:	469b      	mov	fp, r3
 8022af0:	e02a      	b.n	8022b48 <_dtoa_r+0x5c0>
 8022af2:	460e      	mov	r6, r1
 8022af4:	e7f5      	b.n	8022ae2 <_dtoa_r+0x55a>
 8022af6:	ee26 6b03 	vmul.f64	d6, d6, d3
 8022afa:	e7d4      	b.n	8022aa6 <_dtoa_r+0x51e>
 8022afc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8022b00:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8022b04:	9e04      	ldr	r6, [sp, #16]
 8022b06:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8022b0a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8022b0e:	ee15 3a10 	vmov	r3, s10
 8022b12:	3330      	adds	r3, #48	; 0x30
 8022b14:	f806 3b01 	strb.w	r3, [r6], #1
 8022b18:	9b04      	ldr	r3, [sp, #16]
 8022b1a:	1af3      	subs	r3, r6, r3
 8022b1c:	4599      	cmp	r9, r3
 8022b1e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8022b22:	eea3 7b46 	vfms.f64	d7, d3, d6
 8022b26:	d133      	bne.n	8022b90 <_dtoa_r+0x608>
 8022b28:	ee37 7b07 	vadd.f64	d7, d7, d7
 8022b2c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8022b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022b34:	dc18      	bgt.n	8022b68 <_dtoa_r+0x5e0>
 8022b36:	eeb4 7b46 	vcmp.f64	d7, d6
 8022b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022b3e:	d103      	bne.n	8022b48 <_dtoa_r+0x5c0>
 8022b40:	ee15 3a10 	vmov	r3, s10
 8022b44:	07db      	lsls	r3, r3, #31
 8022b46:	d40f      	bmi.n	8022b68 <_dtoa_r+0x5e0>
 8022b48:	9901      	ldr	r1, [sp, #4]
 8022b4a:	4620      	mov	r0, r4
 8022b4c:	f000 fd96 	bl	802367c <_Bfree>
 8022b50:	2300      	movs	r3, #0
 8022b52:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022b54:	7033      	strb	r3, [r6, #0]
 8022b56:	f10b 0301 	add.w	r3, fp, #1
 8022b5a:	6013      	str	r3, [r2, #0]
 8022b5c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022b5e:	2b00      	cmp	r3, #0
 8022b60:	f43f ad5b 	beq.w	802261a <_dtoa_r+0x92>
 8022b64:	601e      	str	r6, [r3, #0]
 8022b66:	e558      	b.n	802261a <_dtoa_r+0x92>
 8022b68:	465b      	mov	r3, fp
 8022b6a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8022b6e:	2939      	cmp	r1, #57	; 0x39
 8022b70:	f106 32ff 	add.w	r2, r6, #4294967295
 8022b74:	d106      	bne.n	8022b84 <_dtoa_r+0x5fc>
 8022b76:	9904      	ldr	r1, [sp, #16]
 8022b78:	4291      	cmp	r1, r2
 8022b7a:	d107      	bne.n	8022b8c <_dtoa_r+0x604>
 8022b7c:	2230      	movs	r2, #48	; 0x30
 8022b7e:	700a      	strb	r2, [r1, #0]
 8022b80:	3301      	adds	r3, #1
 8022b82:	460a      	mov	r2, r1
 8022b84:	7811      	ldrb	r1, [r2, #0]
 8022b86:	3101      	adds	r1, #1
 8022b88:	7011      	strb	r1, [r2, #0]
 8022b8a:	e7b0      	b.n	8022aee <_dtoa_r+0x566>
 8022b8c:	4616      	mov	r6, r2
 8022b8e:	e7ec      	b.n	8022b6a <_dtoa_r+0x5e2>
 8022b90:	ee27 7b04 	vmul.f64	d7, d7, d4
 8022b94:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8022b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022b9c:	d1b3      	bne.n	8022b06 <_dtoa_r+0x57e>
 8022b9e:	e7d3      	b.n	8022b48 <_dtoa_r+0x5c0>
 8022ba0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022ba2:	2a00      	cmp	r2, #0
 8022ba4:	f000 808d 	beq.w	8022cc2 <_dtoa_r+0x73a>
 8022ba8:	9a08      	ldr	r2, [sp, #32]
 8022baa:	2a01      	cmp	r2, #1
 8022bac:	dc72      	bgt.n	8022c94 <_dtoa_r+0x70c>
 8022bae:	2f00      	cmp	r7, #0
 8022bb0:	d06c      	beq.n	8022c8c <_dtoa_r+0x704>
 8022bb2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8022bb6:	4645      	mov	r5, r8
 8022bb8:	4656      	mov	r6, sl
 8022bba:	9a07      	ldr	r2, [sp, #28]
 8022bbc:	2101      	movs	r1, #1
 8022bbe:	441a      	add	r2, r3
 8022bc0:	4620      	mov	r0, r4
 8022bc2:	449a      	add	sl, r3
 8022bc4:	9207      	str	r2, [sp, #28]
 8022bc6:	f000 fdf9 	bl	80237bc <__i2b>
 8022bca:	4607      	mov	r7, r0
 8022bcc:	2e00      	cmp	r6, #0
 8022bce:	dd0b      	ble.n	8022be8 <_dtoa_r+0x660>
 8022bd0:	9b07      	ldr	r3, [sp, #28]
 8022bd2:	2b00      	cmp	r3, #0
 8022bd4:	dd08      	ble.n	8022be8 <_dtoa_r+0x660>
 8022bd6:	42b3      	cmp	r3, r6
 8022bd8:	9a07      	ldr	r2, [sp, #28]
 8022bda:	bfa8      	it	ge
 8022bdc:	4633      	movge	r3, r6
 8022bde:	ebaa 0a03 	sub.w	sl, sl, r3
 8022be2:	1af6      	subs	r6, r6, r3
 8022be4:	1ad3      	subs	r3, r2, r3
 8022be6:	9307      	str	r3, [sp, #28]
 8022be8:	f1b8 0f00 	cmp.w	r8, #0
 8022bec:	d01d      	beq.n	8022c2a <_dtoa_r+0x6a2>
 8022bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022bf0:	2b00      	cmp	r3, #0
 8022bf2:	d06a      	beq.n	8022cca <_dtoa_r+0x742>
 8022bf4:	b18d      	cbz	r5, 8022c1a <_dtoa_r+0x692>
 8022bf6:	4639      	mov	r1, r7
 8022bf8:	462a      	mov	r2, r5
 8022bfa:	4620      	mov	r0, r4
 8022bfc:	f000 fe7e 	bl	80238fc <__pow5mult>
 8022c00:	9a01      	ldr	r2, [sp, #4]
 8022c02:	4601      	mov	r1, r0
 8022c04:	4607      	mov	r7, r0
 8022c06:	4620      	mov	r0, r4
 8022c08:	f000 fde1 	bl	80237ce <__multiply>
 8022c0c:	9901      	ldr	r1, [sp, #4]
 8022c0e:	900c      	str	r0, [sp, #48]	; 0x30
 8022c10:	4620      	mov	r0, r4
 8022c12:	f000 fd33 	bl	802367c <_Bfree>
 8022c16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022c18:	9301      	str	r3, [sp, #4]
 8022c1a:	ebb8 0205 	subs.w	r2, r8, r5
 8022c1e:	d004      	beq.n	8022c2a <_dtoa_r+0x6a2>
 8022c20:	9901      	ldr	r1, [sp, #4]
 8022c22:	4620      	mov	r0, r4
 8022c24:	f000 fe6a 	bl	80238fc <__pow5mult>
 8022c28:	9001      	str	r0, [sp, #4]
 8022c2a:	2101      	movs	r1, #1
 8022c2c:	4620      	mov	r0, r4
 8022c2e:	f000 fdc5 	bl	80237bc <__i2b>
 8022c32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022c34:	4605      	mov	r5, r0
 8022c36:	2b00      	cmp	r3, #0
 8022c38:	f000 81ca 	beq.w	8022fd0 <_dtoa_r+0xa48>
 8022c3c:	461a      	mov	r2, r3
 8022c3e:	4601      	mov	r1, r0
 8022c40:	4620      	mov	r0, r4
 8022c42:	f000 fe5b 	bl	80238fc <__pow5mult>
 8022c46:	9b08      	ldr	r3, [sp, #32]
 8022c48:	2b01      	cmp	r3, #1
 8022c4a:	4605      	mov	r5, r0
 8022c4c:	dc44      	bgt.n	8022cd8 <_dtoa_r+0x750>
 8022c4e:	9b02      	ldr	r3, [sp, #8]
 8022c50:	2b00      	cmp	r3, #0
 8022c52:	d13c      	bne.n	8022cce <_dtoa_r+0x746>
 8022c54:	9b03      	ldr	r3, [sp, #12]
 8022c56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8022c5a:	2b00      	cmp	r3, #0
 8022c5c:	d137      	bne.n	8022cce <_dtoa_r+0x746>
 8022c5e:	9b03      	ldr	r3, [sp, #12]
 8022c60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8022c64:	0d1b      	lsrs	r3, r3, #20
 8022c66:	051b      	lsls	r3, r3, #20
 8022c68:	2b00      	cmp	r3, #0
 8022c6a:	d033      	beq.n	8022cd4 <_dtoa_r+0x74c>
 8022c6c:	9b07      	ldr	r3, [sp, #28]
 8022c6e:	3301      	adds	r3, #1
 8022c70:	f10a 0a01 	add.w	sl, sl, #1
 8022c74:	9307      	str	r3, [sp, #28]
 8022c76:	f04f 0801 	mov.w	r8, #1
 8022c7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022c7c:	bb73      	cbnz	r3, 8022cdc <_dtoa_r+0x754>
 8022c7e:	2001      	movs	r0, #1
 8022c80:	e034      	b.n	8022cec <_dtoa_r+0x764>
 8022c82:	bf00      	nop
 8022c84:	080400d8 	.word	0x080400d8
 8022c88:	080400b0 	.word	0x080400b0
 8022c8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022c8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8022c92:	e790      	b.n	8022bb6 <_dtoa_r+0x62e>
 8022c94:	f109 35ff 	add.w	r5, r9, #4294967295
 8022c98:	45a8      	cmp	r8, r5
 8022c9a:	bfbf      	itttt	lt
 8022c9c:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8022c9e:	eba5 0808 	sublt.w	r8, r5, r8
 8022ca2:	4443      	addlt	r3, r8
 8022ca4:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8022ca6:	bfb6      	itet	lt
 8022ca8:	46a8      	movlt	r8, r5
 8022caa:	eba8 0505 	subge.w	r5, r8, r5
 8022cae:	2500      	movlt	r5, #0
 8022cb0:	f1b9 0f00 	cmp.w	r9, #0
 8022cb4:	bfb9      	ittee	lt
 8022cb6:	ebaa 0609 	sublt.w	r6, sl, r9
 8022cba:	2300      	movlt	r3, #0
 8022cbc:	4656      	movge	r6, sl
 8022cbe:	464b      	movge	r3, r9
 8022cc0:	e77b      	b.n	8022bba <_dtoa_r+0x632>
 8022cc2:	4645      	mov	r5, r8
 8022cc4:	4656      	mov	r6, sl
 8022cc6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022cc8:	e780      	b.n	8022bcc <_dtoa_r+0x644>
 8022cca:	4642      	mov	r2, r8
 8022ccc:	e7a8      	b.n	8022c20 <_dtoa_r+0x698>
 8022cce:	f04f 0800 	mov.w	r8, #0
 8022cd2:	e7d2      	b.n	8022c7a <_dtoa_r+0x6f2>
 8022cd4:	4698      	mov	r8, r3
 8022cd6:	e7d0      	b.n	8022c7a <_dtoa_r+0x6f2>
 8022cd8:	f04f 0800 	mov.w	r8, #0
 8022cdc:	692b      	ldr	r3, [r5, #16]
 8022cde:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8022ce2:	6918      	ldr	r0, [r3, #16]
 8022ce4:	f000 fd1c 	bl	8023720 <__hi0bits>
 8022ce8:	f1c0 0020 	rsb	r0, r0, #32
 8022cec:	9b07      	ldr	r3, [sp, #28]
 8022cee:	4418      	add	r0, r3
 8022cf0:	f010 001f 	ands.w	r0, r0, #31
 8022cf4:	d047      	beq.n	8022d86 <_dtoa_r+0x7fe>
 8022cf6:	f1c0 0320 	rsb	r3, r0, #32
 8022cfa:	2b04      	cmp	r3, #4
 8022cfc:	dd3b      	ble.n	8022d76 <_dtoa_r+0x7ee>
 8022cfe:	9b07      	ldr	r3, [sp, #28]
 8022d00:	f1c0 001c 	rsb	r0, r0, #28
 8022d04:	4482      	add	sl, r0
 8022d06:	4406      	add	r6, r0
 8022d08:	4403      	add	r3, r0
 8022d0a:	9307      	str	r3, [sp, #28]
 8022d0c:	f1ba 0f00 	cmp.w	sl, #0
 8022d10:	dd05      	ble.n	8022d1e <_dtoa_r+0x796>
 8022d12:	4652      	mov	r2, sl
 8022d14:	9901      	ldr	r1, [sp, #4]
 8022d16:	4620      	mov	r0, r4
 8022d18:	f000 fe3e 	bl	8023998 <__lshift>
 8022d1c:	9001      	str	r0, [sp, #4]
 8022d1e:	9b07      	ldr	r3, [sp, #28]
 8022d20:	2b00      	cmp	r3, #0
 8022d22:	dd05      	ble.n	8022d30 <_dtoa_r+0x7a8>
 8022d24:	4629      	mov	r1, r5
 8022d26:	461a      	mov	r2, r3
 8022d28:	4620      	mov	r0, r4
 8022d2a:	f000 fe35 	bl	8023998 <__lshift>
 8022d2e:	4605      	mov	r5, r0
 8022d30:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022d32:	b353      	cbz	r3, 8022d8a <_dtoa_r+0x802>
 8022d34:	4629      	mov	r1, r5
 8022d36:	9801      	ldr	r0, [sp, #4]
 8022d38:	f000 fe82 	bl	8023a40 <__mcmp>
 8022d3c:	2800      	cmp	r0, #0
 8022d3e:	da24      	bge.n	8022d8a <_dtoa_r+0x802>
 8022d40:	2300      	movs	r3, #0
 8022d42:	220a      	movs	r2, #10
 8022d44:	9901      	ldr	r1, [sp, #4]
 8022d46:	4620      	mov	r0, r4
 8022d48:	f000 fcaf 	bl	80236aa <__multadd>
 8022d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022d4e:	9001      	str	r0, [sp, #4]
 8022d50:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022d54:	2b00      	cmp	r3, #0
 8022d56:	f000 8142 	beq.w	8022fde <_dtoa_r+0xa56>
 8022d5a:	2300      	movs	r3, #0
 8022d5c:	4639      	mov	r1, r7
 8022d5e:	220a      	movs	r2, #10
 8022d60:	4620      	mov	r0, r4
 8022d62:	f000 fca2 	bl	80236aa <__multadd>
 8022d66:	9b06      	ldr	r3, [sp, #24]
 8022d68:	2b00      	cmp	r3, #0
 8022d6a:	4607      	mov	r7, r0
 8022d6c:	dc4b      	bgt.n	8022e06 <_dtoa_r+0x87e>
 8022d6e:	9b08      	ldr	r3, [sp, #32]
 8022d70:	2b02      	cmp	r3, #2
 8022d72:	dd48      	ble.n	8022e06 <_dtoa_r+0x87e>
 8022d74:	e011      	b.n	8022d9a <_dtoa_r+0x812>
 8022d76:	d0c9      	beq.n	8022d0c <_dtoa_r+0x784>
 8022d78:	9a07      	ldr	r2, [sp, #28]
 8022d7a:	331c      	adds	r3, #28
 8022d7c:	441a      	add	r2, r3
 8022d7e:	449a      	add	sl, r3
 8022d80:	441e      	add	r6, r3
 8022d82:	4613      	mov	r3, r2
 8022d84:	e7c1      	b.n	8022d0a <_dtoa_r+0x782>
 8022d86:	4603      	mov	r3, r0
 8022d88:	e7f6      	b.n	8022d78 <_dtoa_r+0x7f0>
 8022d8a:	f1b9 0f00 	cmp.w	r9, #0
 8022d8e:	dc34      	bgt.n	8022dfa <_dtoa_r+0x872>
 8022d90:	9b08      	ldr	r3, [sp, #32]
 8022d92:	2b02      	cmp	r3, #2
 8022d94:	dd31      	ble.n	8022dfa <_dtoa_r+0x872>
 8022d96:	f8cd 9018 	str.w	r9, [sp, #24]
 8022d9a:	9b06      	ldr	r3, [sp, #24]
 8022d9c:	b963      	cbnz	r3, 8022db8 <_dtoa_r+0x830>
 8022d9e:	4629      	mov	r1, r5
 8022da0:	2205      	movs	r2, #5
 8022da2:	4620      	mov	r0, r4
 8022da4:	f000 fc81 	bl	80236aa <__multadd>
 8022da8:	4601      	mov	r1, r0
 8022daa:	4605      	mov	r5, r0
 8022dac:	9801      	ldr	r0, [sp, #4]
 8022dae:	f000 fe47 	bl	8023a40 <__mcmp>
 8022db2:	2800      	cmp	r0, #0
 8022db4:	f73f adfc 	bgt.w	80229b0 <_dtoa_r+0x428>
 8022db8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022dba:	9e04      	ldr	r6, [sp, #16]
 8022dbc:	ea6f 0b03 	mvn.w	fp, r3
 8022dc0:	f04f 0900 	mov.w	r9, #0
 8022dc4:	4629      	mov	r1, r5
 8022dc6:	4620      	mov	r0, r4
 8022dc8:	f000 fc58 	bl	802367c <_Bfree>
 8022dcc:	2f00      	cmp	r7, #0
 8022dce:	f43f aebb 	beq.w	8022b48 <_dtoa_r+0x5c0>
 8022dd2:	f1b9 0f00 	cmp.w	r9, #0
 8022dd6:	d005      	beq.n	8022de4 <_dtoa_r+0x85c>
 8022dd8:	45b9      	cmp	r9, r7
 8022dda:	d003      	beq.n	8022de4 <_dtoa_r+0x85c>
 8022ddc:	4649      	mov	r1, r9
 8022dde:	4620      	mov	r0, r4
 8022de0:	f000 fc4c 	bl	802367c <_Bfree>
 8022de4:	4639      	mov	r1, r7
 8022de6:	4620      	mov	r0, r4
 8022de8:	f000 fc48 	bl	802367c <_Bfree>
 8022dec:	e6ac      	b.n	8022b48 <_dtoa_r+0x5c0>
 8022dee:	2500      	movs	r5, #0
 8022df0:	462f      	mov	r7, r5
 8022df2:	e7e1      	b.n	8022db8 <_dtoa_r+0x830>
 8022df4:	469b      	mov	fp, r3
 8022df6:	462f      	mov	r7, r5
 8022df8:	e5da      	b.n	80229b0 <_dtoa_r+0x428>
 8022dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022dfc:	f8cd 9018 	str.w	r9, [sp, #24]
 8022e00:	2b00      	cmp	r3, #0
 8022e02:	f000 80f3 	beq.w	8022fec <_dtoa_r+0xa64>
 8022e06:	2e00      	cmp	r6, #0
 8022e08:	dd05      	ble.n	8022e16 <_dtoa_r+0x88e>
 8022e0a:	4639      	mov	r1, r7
 8022e0c:	4632      	mov	r2, r6
 8022e0e:	4620      	mov	r0, r4
 8022e10:	f000 fdc2 	bl	8023998 <__lshift>
 8022e14:	4607      	mov	r7, r0
 8022e16:	f1b8 0f00 	cmp.w	r8, #0
 8022e1a:	d04c      	beq.n	8022eb6 <_dtoa_r+0x92e>
 8022e1c:	6879      	ldr	r1, [r7, #4]
 8022e1e:	4620      	mov	r0, r4
 8022e20:	f000 fbf8 	bl	8023614 <_Balloc>
 8022e24:	693a      	ldr	r2, [r7, #16]
 8022e26:	3202      	adds	r2, #2
 8022e28:	4606      	mov	r6, r0
 8022e2a:	0092      	lsls	r2, r2, #2
 8022e2c:	f107 010c 	add.w	r1, r7, #12
 8022e30:	300c      	adds	r0, #12
 8022e32:	f7fc ff1c 	bl	801fc6e <memcpy>
 8022e36:	2201      	movs	r2, #1
 8022e38:	4631      	mov	r1, r6
 8022e3a:	4620      	mov	r0, r4
 8022e3c:	f000 fdac 	bl	8023998 <__lshift>
 8022e40:	9b02      	ldr	r3, [sp, #8]
 8022e42:	f8dd a010 	ldr.w	sl, [sp, #16]
 8022e46:	f003 0301 	and.w	r3, r3, #1
 8022e4a:	46b9      	mov	r9, r7
 8022e4c:	9307      	str	r3, [sp, #28]
 8022e4e:	4607      	mov	r7, r0
 8022e50:	4629      	mov	r1, r5
 8022e52:	9801      	ldr	r0, [sp, #4]
 8022e54:	f7ff fb0a 	bl	802246c <quorem>
 8022e58:	4649      	mov	r1, r9
 8022e5a:	4606      	mov	r6, r0
 8022e5c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8022e60:	9801      	ldr	r0, [sp, #4]
 8022e62:	f000 fded 	bl	8023a40 <__mcmp>
 8022e66:	463a      	mov	r2, r7
 8022e68:	9002      	str	r0, [sp, #8]
 8022e6a:	4629      	mov	r1, r5
 8022e6c:	4620      	mov	r0, r4
 8022e6e:	f000 fe01 	bl	8023a74 <__mdiff>
 8022e72:	68c3      	ldr	r3, [r0, #12]
 8022e74:	4602      	mov	r2, r0
 8022e76:	bb03      	cbnz	r3, 8022eba <_dtoa_r+0x932>
 8022e78:	4601      	mov	r1, r0
 8022e7a:	9009      	str	r0, [sp, #36]	; 0x24
 8022e7c:	9801      	ldr	r0, [sp, #4]
 8022e7e:	f000 fddf 	bl	8023a40 <__mcmp>
 8022e82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022e84:	4603      	mov	r3, r0
 8022e86:	4611      	mov	r1, r2
 8022e88:	4620      	mov	r0, r4
 8022e8a:	9309      	str	r3, [sp, #36]	; 0x24
 8022e8c:	f000 fbf6 	bl	802367c <_Bfree>
 8022e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022e92:	b9a3      	cbnz	r3, 8022ebe <_dtoa_r+0x936>
 8022e94:	9a08      	ldr	r2, [sp, #32]
 8022e96:	b992      	cbnz	r2, 8022ebe <_dtoa_r+0x936>
 8022e98:	9a07      	ldr	r2, [sp, #28]
 8022e9a:	b982      	cbnz	r2, 8022ebe <_dtoa_r+0x936>
 8022e9c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8022ea0:	d029      	beq.n	8022ef6 <_dtoa_r+0x96e>
 8022ea2:	9b02      	ldr	r3, [sp, #8]
 8022ea4:	2b00      	cmp	r3, #0
 8022ea6:	dd01      	ble.n	8022eac <_dtoa_r+0x924>
 8022ea8:	f106 0831 	add.w	r8, r6, #49	; 0x31
 8022eac:	f10a 0601 	add.w	r6, sl, #1
 8022eb0:	f88a 8000 	strb.w	r8, [sl]
 8022eb4:	e786      	b.n	8022dc4 <_dtoa_r+0x83c>
 8022eb6:	4638      	mov	r0, r7
 8022eb8:	e7c2      	b.n	8022e40 <_dtoa_r+0x8b8>
 8022eba:	2301      	movs	r3, #1
 8022ebc:	e7e3      	b.n	8022e86 <_dtoa_r+0x8fe>
 8022ebe:	9a02      	ldr	r2, [sp, #8]
 8022ec0:	2a00      	cmp	r2, #0
 8022ec2:	db04      	blt.n	8022ece <_dtoa_r+0x946>
 8022ec4:	d124      	bne.n	8022f10 <_dtoa_r+0x988>
 8022ec6:	9a08      	ldr	r2, [sp, #32]
 8022ec8:	bb12      	cbnz	r2, 8022f10 <_dtoa_r+0x988>
 8022eca:	9a07      	ldr	r2, [sp, #28]
 8022ecc:	bb02      	cbnz	r2, 8022f10 <_dtoa_r+0x988>
 8022ece:	2b00      	cmp	r3, #0
 8022ed0:	ddec      	ble.n	8022eac <_dtoa_r+0x924>
 8022ed2:	2201      	movs	r2, #1
 8022ed4:	9901      	ldr	r1, [sp, #4]
 8022ed6:	4620      	mov	r0, r4
 8022ed8:	f000 fd5e 	bl	8023998 <__lshift>
 8022edc:	4629      	mov	r1, r5
 8022ede:	9001      	str	r0, [sp, #4]
 8022ee0:	f000 fdae 	bl	8023a40 <__mcmp>
 8022ee4:	2800      	cmp	r0, #0
 8022ee6:	dc03      	bgt.n	8022ef0 <_dtoa_r+0x968>
 8022ee8:	d1e0      	bne.n	8022eac <_dtoa_r+0x924>
 8022eea:	f018 0f01 	tst.w	r8, #1
 8022eee:	d0dd      	beq.n	8022eac <_dtoa_r+0x924>
 8022ef0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8022ef4:	d1d8      	bne.n	8022ea8 <_dtoa_r+0x920>
 8022ef6:	2339      	movs	r3, #57	; 0x39
 8022ef8:	f10a 0601 	add.w	r6, sl, #1
 8022efc:	f88a 3000 	strb.w	r3, [sl]
 8022f00:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8022f04:	2b39      	cmp	r3, #57	; 0x39
 8022f06:	f106 32ff 	add.w	r2, r6, #4294967295
 8022f0a:	d04c      	beq.n	8022fa6 <_dtoa_r+0xa1e>
 8022f0c:	3301      	adds	r3, #1
 8022f0e:	e051      	b.n	8022fb4 <_dtoa_r+0xa2c>
 8022f10:	2b00      	cmp	r3, #0
 8022f12:	f10a 0601 	add.w	r6, sl, #1
 8022f16:	dd05      	ble.n	8022f24 <_dtoa_r+0x99c>
 8022f18:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8022f1c:	d0eb      	beq.n	8022ef6 <_dtoa_r+0x96e>
 8022f1e:	f108 0801 	add.w	r8, r8, #1
 8022f22:	e7c5      	b.n	8022eb0 <_dtoa_r+0x928>
 8022f24:	9b04      	ldr	r3, [sp, #16]
 8022f26:	9a06      	ldr	r2, [sp, #24]
 8022f28:	f806 8c01 	strb.w	r8, [r6, #-1]
 8022f2c:	1af3      	subs	r3, r6, r3
 8022f2e:	4293      	cmp	r3, r2
 8022f30:	d021      	beq.n	8022f76 <_dtoa_r+0x9ee>
 8022f32:	2300      	movs	r3, #0
 8022f34:	220a      	movs	r2, #10
 8022f36:	9901      	ldr	r1, [sp, #4]
 8022f38:	4620      	mov	r0, r4
 8022f3a:	f000 fbb6 	bl	80236aa <__multadd>
 8022f3e:	45b9      	cmp	r9, r7
 8022f40:	9001      	str	r0, [sp, #4]
 8022f42:	f04f 0300 	mov.w	r3, #0
 8022f46:	f04f 020a 	mov.w	r2, #10
 8022f4a:	4649      	mov	r1, r9
 8022f4c:	4620      	mov	r0, r4
 8022f4e:	d105      	bne.n	8022f5c <_dtoa_r+0x9d4>
 8022f50:	f000 fbab 	bl	80236aa <__multadd>
 8022f54:	4681      	mov	r9, r0
 8022f56:	4607      	mov	r7, r0
 8022f58:	46b2      	mov	sl, r6
 8022f5a:	e779      	b.n	8022e50 <_dtoa_r+0x8c8>
 8022f5c:	f000 fba5 	bl	80236aa <__multadd>
 8022f60:	4639      	mov	r1, r7
 8022f62:	4681      	mov	r9, r0
 8022f64:	2300      	movs	r3, #0
 8022f66:	220a      	movs	r2, #10
 8022f68:	4620      	mov	r0, r4
 8022f6a:	f000 fb9e 	bl	80236aa <__multadd>
 8022f6e:	4607      	mov	r7, r0
 8022f70:	e7f2      	b.n	8022f58 <_dtoa_r+0x9d0>
 8022f72:	f04f 0900 	mov.w	r9, #0
 8022f76:	2201      	movs	r2, #1
 8022f78:	9901      	ldr	r1, [sp, #4]
 8022f7a:	4620      	mov	r0, r4
 8022f7c:	f000 fd0c 	bl	8023998 <__lshift>
 8022f80:	4629      	mov	r1, r5
 8022f82:	9001      	str	r0, [sp, #4]
 8022f84:	f000 fd5c 	bl	8023a40 <__mcmp>
 8022f88:	2800      	cmp	r0, #0
 8022f8a:	dcb9      	bgt.n	8022f00 <_dtoa_r+0x978>
 8022f8c:	d102      	bne.n	8022f94 <_dtoa_r+0xa0c>
 8022f8e:	f018 0f01 	tst.w	r8, #1
 8022f92:	d1b5      	bne.n	8022f00 <_dtoa_r+0x978>
 8022f94:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8022f98:	2b30      	cmp	r3, #48	; 0x30
 8022f9a:	f106 32ff 	add.w	r2, r6, #4294967295
 8022f9e:	f47f af11 	bne.w	8022dc4 <_dtoa_r+0x83c>
 8022fa2:	4616      	mov	r6, r2
 8022fa4:	e7f6      	b.n	8022f94 <_dtoa_r+0xa0c>
 8022fa6:	9b04      	ldr	r3, [sp, #16]
 8022fa8:	4293      	cmp	r3, r2
 8022faa:	d105      	bne.n	8022fb8 <_dtoa_r+0xa30>
 8022fac:	9a04      	ldr	r2, [sp, #16]
 8022fae:	f10b 0b01 	add.w	fp, fp, #1
 8022fb2:	2331      	movs	r3, #49	; 0x31
 8022fb4:	7013      	strb	r3, [r2, #0]
 8022fb6:	e705      	b.n	8022dc4 <_dtoa_r+0x83c>
 8022fb8:	4616      	mov	r6, r2
 8022fba:	e7a1      	b.n	8022f00 <_dtoa_r+0x978>
 8022fbc:	4b16      	ldr	r3, [pc, #88]	; (8023018 <_dtoa_r+0xa90>)
 8022fbe:	f7ff bb48 	b.w	8022652 <_dtoa_r+0xca>
 8022fc2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022fc4:	2b00      	cmp	r3, #0
 8022fc6:	f47f ab23 	bne.w	8022610 <_dtoa_r+0x88>
 8022fca:	4b14      	ldr	r3, [pc, #80]	; (802301c <_dtoa_r+0xa94>)
 8022fcc:	f7ff bb41 	b.w	8022652 <_dtoa_r+0xca>
 8022fd0:	9b08      	ldr	r3, [sp, #32]
 8022fd2:	2b01      	cmp	r3, #1
 8022fd4:	f77f ae3b 	ble.w	8022c4e <_dtoa_r+0x6c6>
 8022fd8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8022fdc:	e64f      	b.n	8022c7e <_dtoa_r+0x6f6>
 8022fde:	9b06      	ldr	r3, [sp, #24]
 8022fe0:	2b00      	cmp	r3, #0
 8022fe2:	dc03      	bgt.n	8022fec <_dtoa_r+0xa64>
 8022fe4:	9b08      	ldr	r3, [sp, #32]
 8022fe6:	2b02      	cmp	r3, #2
 8022fe8:	f73f aed7 	bgt.w	8022d9a <_dtoa_r+0x812>
 8022fec:	9e04      	ldr	r6, [sp, #16]
 8022fee:	9801      	ldr	r0, [sp, #4]
 8022ff0:	4629      	mov	r1, r5
 8022ff2:	f7ff fa3b 	bl	802246c <quorem>
 8022ff6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8022ffa:	f806 8b01 	strb.w	r8, [r6], #1
 8022ffe:	9b04      	ldr	r3, [sp, #16]
 8023000:	9a06      	ldr	r2, [sp, #24]
 8023002:	1af3      	subs	r3, r6, r3
 8023004:	429a      	cmp	r2, r3
 8023006:	ddb4      	ble.n	8022f72 <_dtoa_r+0x9ea>
 8023008:	2300      	movs	r3, #0
 802300a:	220a      	movs	r2, #10
 802300c:	9901      	ldr	r1, [sp, #4]
 802300e:	4620      	mov	r0, r4
 8023010:	f000 fb4b 	bl	80236aa <__multadd>
 8023014:	9001      	str	r0, [sp, #4]
 8023016:	e7ea      	b.n	8022fee <_dtoa_r+0xa66>
 8023018:	080401d3 	.word	0x080401d3
 802301c:	0804003d 	.word	0x0804003d

08023020 <__sflush_r>:
 8023020:	898a      	ldrh	r2, [r1, #12]
 8023022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023026:	4605      	mov	r5, r0
 8023028:	0710      	lsls	r0, r2, #28
 802302a:	460c      	mov	r4, r1
 802302c:	d458      	bmi.n	80230e0 <__sflush_r+0xc0>
 802302e:	684b      	ldr	r3, [r1, #4]
 8023030:	2b00      	cmp	r3, #0
 8023032:	dc05      	bgt.n	8023040 <__sflush_r+0x20>
 8023034:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8023036:	2b00      	cmp	r3, #0
 8023038:	dc02      	bgt.n	8023040 <__sflush_r+0x20>
 802303a:	2000      	movs	r0, #0
 802303c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023040:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023042:	2e00      	cmp	r6, #0
 8023044:	d0f9      	beq.n	802303a <__sflush_r+0x1a>
 8023046:	2300      	movs	r3, #0
 8023048:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802304c:	682f      	ldr	r7, [r5, #0]
 802304e:	6a21      	ldr	r1, [r4, #32]
 8023050:	602b      	str	r3, [r5, #0]
 8023052:	d032      	beq.n	80230ba <__sflush_r+0x9a>
 8023054:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8023056:	89a3      	ldrh	r3, [r4, #12]
 8023058:	075a      	lsls	r2, r3, #29
 802305a:	d505      	bpl.n	8023068 <__sflush_r+0x48>
 802305c:	6863      	ldr	r3, [r4, #4]
 802305e:	1ac0      	subs	r0, r0, r3
 8023060:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8023062:	b10b      	cbz	r3, 8023068 <__sflush_r+0x48>
 8023064:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023066:	1ac0      	subs	r0, r0, r3
 8023068:	2300      	movs	r3, #0
 802306a:	4602      	mov	r2, r0
 802306c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802306e:	6a21      	ldr	r1, [r4, #32]
 8023070:	4628      	mov	r0, r5
 8023072:	47b0      	blx	r6
 8023074:	1c43      	adds	r3, r0, #1
 8023076:	89a3      	ldrh	r3, [r4, #12]
 8023078:	d106      	bne.n	8023088 <__sflush_r+0x68>
 802307a:	6829      	ldr	r1, [r5, #0]
 802307c:	291d      	cmp	r1, #29
 802307e:	d848      	bhi.n	8023112 <__sflush_r+0xf2>
 8023080:	4a29      	ldr	r2, [pc, #164]	; (8023128 <__sflush_r+0x108>)
 8023082:	40ca      	lsrs	r2, r1
 8023084:	07d6      	lsls	r6, r2, #31
 8023086:	d544      	bpl.n	8023112 <__sflush_r+0xf2>
 8023088:	2200      	movs	r2, #0
 802308a:	6062      	str	r2, [r4, #4]
 802308c:	04d9      	lsls	r1, r3, #19
 802308e:	6922      	ldr	r2, [r4, #16]
 8023090:	6022      	str	r2, [r4, #0]
 8023092:	d504      	bpl.n	802309e <__sflush_r+0x7e>
 8023094:	1c42      	adds	r2, r0, #1
 8023096:	d101      	bne.n	802309c <__sflush_r+0x7c>
 8023098:	682b      	ldr	r3, [r5, #0]
 802309a:	b903      	cbnz	r3, 802309e <__sflush_r+0x7e>
 802309c:	6560      	str	r0, [r4, #84]	; 0x54
 802309e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80230a0:	602f      	str	r7, [r5, #0]
 80230a2:	2900      	cmp	r1, #0
 80230a4:	d0c9      	beq.n	802303a <__sflush_r+0x1a>
 80230a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80230aa:	4299      	cmp	r1, r3
 80230ac:	d002      	beq.n	80230b4 <__sflush_r+0x94>
 80230ae:	4628      	mov	r0, r5
 80230b0:	f7fd f89e 	bl	80201f0 <_free_r>
 80230b4:	2000      	movs	r0, #0
 80230b6:	6360      	str	r0, [r4, #52]	; 0x34
 80230b8:	e7c0      	b.n	802303c <__sflush_r+0x1c>
 80230ba:	2301      	movs	r3, #1
 80230bc:	4628      	mov	r0, r5
 80230be:	47b0      	blx	r6
 80230c0:	1c41      	adds	r1, r0, #1
 80230c2:	d1c8      	bne.n	8023056 <__sflush_r+0x36>
 80230c4:	682b      	ldr	r3, [r5, #0]
 80230c6:	2b00      	cmp	r3, #0
 80230c8:	d0c5      	beq.n	8023056 <__sflush_r+0x36>
 80230ca:	2b1d      	cmp	r3, #29
 80230cc:	d001      	beq.n	80230d2 <__sflush_r+0xb2>
 80230ce:	2b16      	cmp	r3, #22
 80230d0:	d101      	bne.n	80230d6 <__sflush_r+0xb6>
 80230d2:	602f      	str	r7, [r5, #0]
 80230d4:	e7b1      	b.n	802303a <__sflush_r+0x1a>
 80230d6:	89a3      	ldrh	r3, [r4, #12]
 80230d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80230dc:	81a3      	strh	r3, [r4, #12]
 80230de:	e7ad      	b.n	802303c <__sflush_r+0x1c>
 80230e0:	690f      	ldr	r7, [r1, #16]
 80230e2:	2f00      	cmp	r7, #0
 80230e4:	d0a9      	beq.n	802303a <__sflush_r+0x1a>
 80230e6:	0793      	lsls	r3, r2, #30
 80230e8:	680e      	ldr	r6, [r1, #0]
 80230ea:	bf08      	it	eq
 80230ec:	694b      	ldreq	r3, [r1, #20]
 80230ee:	600f      	str	r7, [r1, #0]
 80230f0:	bf18      	it	ne
 80230f2:	2300      	movne	r3, #0
 80230f4:	eba6 0807 	sub.w	r8, r6, r7
 80230f8:	608b      	str	r3, [r1, #8]
 80230fa:	f1b8 0f00 	cmp.w	r8, #0
 80230fe:	dd9c      	ble.n	802303a <__sflush_r+0x1a>
 8023100:	4643      	mov	r3, r8
 8023102:	463a      	mov	r2, r7
 8023104:	6a21      	ldr	r1, [r4, #32]
 8023106:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8023108:	4628      	mov	r0, r5
 802310a:	47b0      	blx	r6
 802310c:	2800      	cmp	r0, #0
 802310e:	dc06      	bgt.n	802311e <__sflush_r+0xfe>
 8023110:	89a3      	ldrh	r3, [r4, #12]
 8023112:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023116:	81a3      	strh	r3, [r4, #12]
 8023118:	f04f 30ff 	mov.w	r0, #4294967295
 802311c:	e78e      	b.n	802303c <__sflush_r+0x1c>
 802311e:	4407      	add	r7, r0
 8023120:	eba8 0800 	sub.w	r8, r8, r0
 8023124:	e7e9      	b.n	80230fa <__sflush_r+0xda>
 8023126:	bf00      	nop
 8023128:	20400001 	.word	0x20400001

0802312c <_fflush_r>:
 802312c:	b538      	push	{r3, r4, r5, lr}
 802312e:	690b      	ldr	r3, [r1, #16]
 8023130:	4605      	mov	r5, r0
 8023132:	460c      	mov	r4, r1
 8023134:	b1db      	cbz	r3, 802316e <_fflush_r+0x42>
 8023136:	b118      	cbz	r0, 8023140 <_fflush_r+0x14>
 8023138:	6983      	ldr	r3, [r0, #24]
 802313a:	b90b      	cbnz	r3, 8023140 <_fflush_r+0x14>
 802313c:	f000 f860 	bl	8023200 <__sinit>
 8023140:	4b0c      	ldr	r3, [pc, #48]	; (8023174 <_fflush_r+0x48>)
 8023142:	429c      	cmp	r4, r3
 8023144:	d109      	bne.n	802315a <_fflush_r+0x2e>
 8023146:	686c      	ldr	r4, [r5, #4]
 8023148:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802314c:	b17b      	cbz	r3, 802316e <_fflush_r+0x42>
 802314e:	4621      	mov	r1, r4
 8023150:	4628      	mov	r0, r5
 8023152:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023156:	f7ff bf63 	b.w	8023020 <__sflush_r>
 802315a:	4b07      	ldr	r3, [pc, #28]	; (8023178 <_fflush_r+0x4c>)
 802315c:	429c      	cmp	r4, r3
 802315e:	d101      	bne.n	8023164 <_fflush_r+0x38>
 8023160:	68ac      	ldr	r4, [r5, #8]
 8023162:	e7f1      	b.n	8023148 <_fflush_r+0x1c>
 8023164:	4b05      	ldr	r3, [pc, #20]	; (802317c <_fflush_r+0x50>)
 8023166:	429c      	cmp	r4, r3
 8023168:	bf08      	it	eq
 802316a:	68ec      	ldreq	r4, [r5, #12]
 802316c:	e7ec      	b.n	8023148 <_fflush_r+0x1c>
 802316e:	2000      	movs	r0, #0
 8023170:	bd38      	pop	{r3, r4, r5, pc}
 8023172:	bf00      	nop
 8023174:	0804006c 	.word	0x0804006c
 8023178:	0804008c 	.word	0x0804008c
 802317c:	0804004c 	.word	0x0804004c

08023180 <std>:
 8023180:	2300      	movs	r3, #0
 8023182:	b510      	push	{r4, lr}
 8023184:	4604      	mov	r4, r0
 8023186:	e9c0 3300 	strd	r3, r3, [r0]
 802318a:	6083      	str	r3, [r0, #8]
 802318c:	8181      	strh	r1, [r0, #12]
 802318e:	6643      	str	r3, [r0, #100]	; 0x64
 8023190:	81c2      	strh	r2, [r0, #14]
 8023192:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8023196:	6183      	str	r3, [r0, #24]
 8023198:	4619      	mov	r1, r3
 802319a:	2208      	movs	r2, #8
 802319c:	305c      	adds	r0, #92	; 0x5c
 802319e:	f7fc fd8a 	bl	801fcb6 <memset>
 80231a2:	4b05      	ldr	r3, [pc, #20]	; (80231b8 <std+0x38>)
 80231a4:	6263      	str	r3, [r4, #36]	; 0x24
 80231a6:	4b05      	ldr	r3, [pc, #20]	; (80231bc <std+0x3c>)
 80231a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80231aa:	4b05      	ldr	r3, [pc, #20]	; (80231c0 <std+0x40>)
 80231ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80231ae:	4b05      	ldr	r3, [pc, #20]	; (80231c4 <std+0x44>)
 80231b0:	6224      	str	r4, [r4, #32]
 80231b2:	6323      	str	r3, [r4, #48]	; 0x30
 80231b4:	bd10      	pop	{r4, pc}
 80231b6:	bf00      	nop
 80231b8:	08020efd 	.word	0x08020efd
 80231bc:	08020f23 	.word	0x08020f23
 80231c0:	08020f5b 	.word	0x08020f5b
 80231c4:	08020f7f 	.word	0x08020f7f

080231c8 <_cleanup_r>:
 80231c8:	4901      	ldr	r1, [pc, #4]	; (80231d0 <_cleanup_r+0x8>)
 80231ca:	f000 b885 	b.w	80232d8 <_fwalk_reent>
 80231ce:	bf00      	nop
 80231d0:	0802312d 	.word	0x0802312d

080231d4 <__sfmoreglue>:
 80231d4:	b570      	push	{r4, r5, r6, lr}
 80231d6:	1e4a      	subs	r2, r1, #1
 80231d8:	2568      	movs	r5, #104	; 0x68
 80231da:	4355      	muls	r5, r2
 80231dc:	460e      	mov	r6, r1
 80231de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80231e2:	f7fd f853 	bl	802028c <_malloc_r>
 80231e6:	4604      	mov	r4, r0
 80231e8:	b140      	cbz	r0, 80231fc <__sfmoreglue+0x28>
 80231ea:	2100      	movs	r1, #0
 80231ec:	e9c0 1600 	strd	r1, r6, [r0]
 80231f0:	300c      	adds	r0, #12
 80231f2:	60a0      	str	r0, [r4, #8]
 80231f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80231f8:	f7fc fd5d 	bl	801fcb6 <memset>
 80231fc:	4620      	mov	r0, r4
 80231fe:	bd70      	pop	{r4, r5, r6, pc}

08023200 <__sinit>:
 8023200:	6983      	ldr	r3, [r0, #24]
 8023202:	b510      	push	{r4, lr}
 8023204:	4604      	mov	r4, r0
 8023206:	bb33      	cbnz	r3, 8023256 <__sinit+0x56>
 8023208:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 802320c:	6503      	str	r3, [r0, #80]	; 0x50
 802320e:	4b12      	ldr	r3, [pc, #72]	; (8023258 <__sinit+0x58>)
 8023210:	4a12      	ldr	r2, [pc, #72]	; (802325c <__sinit+0x5c>)
 8023212:	681b      	ldr	r3, [r3, #0]
 8023214:	6282      	str	r2, [r0, #40]	; 0x28
 8023216:	4298      	cmp	r0, r3
 8023218:	bf04      	itt	eq
 802321a:	2301      	moveq	r3, #1
 802321c:	6183      	streq	r3, [r0, #24]
 802321e:	f000 f81f 	bl	8023260 <__sfp>
 8023222:	6060      	str	r0, [r4, #4]
 8023224:	4620      	mov	r0, r4
 8023226:	f000 f81b 	bl	8023260 <__sfp>
 802322a:	60a0      	str	r0, [r4, #8]
 802322c:	4620      	mov	r0, r4
 802322e:	f000 f817 	bl	8023260 <__sfp>
 8023232:	2200      	movs	r2, #0
 8023234:	60e0      	str	r0, [r4, #12]
 8023236:	2104      	movs	r1, #4
 8023238:	6860      	ldr	r0, [r4, #4]
 802323a:	f7ff ffa1 	bl	8023180 <std>
 802323e:	2201      	movs	r2, #1
 8023240:	2109      	movs	r1, #9
 8023242:	68a0      	ldr	r0, [r4, #8]
 8023244:	f7ff ff9c 	bl	8023180 <std>
 8023248:	2202      	movs	r2, #2
 802324a:	2112      	movs	r1, #18
 802324c:	68e0      	ldr	r0, [r4, #12]
 802324e:	f7ff ff97 	bl	8023180 <std>
 8023252:	2301      	movs	r3, #1
 8023254:	61a3      	str	r3, [r4, #24]
 8023256:	bd10      	pop	{r4, pc}
 8023258:	0803fb24 	.word	0x0803fb24
 802325c:	080231c9 	.word	0x080231c9

08023260 <__sfp>:
 8023260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023262:	4b1b      	ldr	r3, [pc, #108]	; (80232d0 <__sfp+0x70>)
 8023264:	681e      	ldr	r6, [r3, #0]
 8023266:	69b3      	ldr	r3, [r6, #24]
 8023268:	4607      	mov	r7, r0
 802326a:	b913      	cbnz	r3, 8023272 <__sfp+0x12>
 802326c:	4630      	mov	r0, r6
 802326e:	f7ff ffc7 	bl	8023200 <__sinit>
 8023272:	3648      	adds	r6, #72	; 0x48
 8023274:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8023278:	3b01      	subs	r3, #1
 802327a:	d503      	bpl.n	8023284 <__sfp+0x24>
 802327c:	6833      	ldr	r3, [r6, #0]
 802327e:	b133      	cbz	r3, 802328e <__sfp+0x2e>
 8023280:	6836      	ldr	r6, [r6, #0]
 8023282:	e7f7      	b.n	8023274 <__sfp+0x14>
 8023284:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8023288:	b16d      	cbz	r5, 80232a6 <__sfp+0x46>
 802328a:	3468      	adds	r4, #104	; 0x68
 802328c:	e7f4      	b.n	8023278 <__sfp+0x18>
 802328e:	2104      	movs	r1, #4
 8023290:	4638      	mov	r0, r7
 8023292:	f7ff ff9f 	bl	80231d4 <__sfmoreglue>
 8023296:	6030      	str	r0, [r6, #0]
 8023298:	2800      	cmp	r0, #0
 802329a:	d1f1      	bne.n	8023280 <__sfp+0x20>
 802329c:	230c      	movs	r3, #12
 802329e:	603b      	str	r3, [r7, #0]
 80232a0:	4604      	mov	r4, r0
 80232a2:	4620      	mov	r0, r4
 80232a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80232a6:	4b0b      	ldr	r3, [pc, #44]	; (80232d4 <__sfp+0x74>)
 80232a8:	6665      	str	r5, [r4, #100]	; 0x64
 80232aa:	e9c4 5500 	strd	r5, r5, [r4]
 80232ae:	60a5      	str	r5, [r4, #8]
 80232b0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80232b4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80232b8:	2208      	movs	r2, #8
 80232ba:	4629      	mov	r1, r5
 80232bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80232c0:	f7fc fcf9 	bl	801fcb6 <memset>
 80232c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80232c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80232cc:	e7e9      	b.n	80232a2 <__sfp+0x42>
 80232ce:	bf00      	nop
 80232d0:	0803fb24 	.word	0x0803fb24
 80232d4:	ffff0001 	.word	0xffff0001

080232d8 <_fwalk_reent>:
 80232d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80232dc:	4680      	mov	r8, r0
 80232de:	4689      	mov	r9, r1
 80232e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80232e4:	2600      	movs	r6, #0
 80232e6:	b914      	cbnz	r4, 80232ee <_fwalk_reent+0x16>
 80232e8:	4630      	mov	r0, r6
 80232ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80232ee:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80232f2:	3f01      	subs	r7, #1
 80232f4:	d501      	bpl.n	80232fa <_fwalk_reent+0x22>
 80232f6:	6824      	ldr	r4, [r4, #0]
 80232f8:	e7f5      	b.n	80232e6 <_fwalk_reent+0xe>
 80232fa:	89ab      	ldrh	r3, [r5, #12]
 80232fc:	2b01      	cmp	r3, #1
 80232fe:	d907      	bls.n	8023310 <_fwalk_reent+0x38>
 8023300:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8023304:	3301      	adds	r3, #1
 8023306:	d003      	beq.n	8023310 <_fwalk_reent+0x38>
 8023308:	4629      	mov	r1, r5
 802330a:	4640      	mov	r0, r8
 802330c:	47c8      	blx	r9
 802330e:	4306      	orrs	r6, r0
 8023310:	3568      	adds	r5, #104	; 0x68
 8023312:	e7ee      	b.n	80232f2 <_fwalk_reent+0x1a>

08023314 <_findenv_r>:
 8023314:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023318:	4607      	mov	r7, r0
 802331a:	468b      	mov	fp, r1
 802331c:	4690      	mov	r8, r2
 802331e:	f001 fad1 	bl	80248c4 <__env_lock>
 8023322:	4b19      	ldr	r3, [pc, #100]	; (8023388 <_findenv_r+0x74>)
 8023324:	681d      	ldr	r5, [r3, #0]
 8023326:	469a      	mov	sl, r3
 8023328:	b13d      	cbz	r5, 802333a <_findenv_r+0x26>
 802332a:	465c      	mov	r4, fp
 802332c:	4623      	mov	r3, r4
 802332e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023332:	b32a      	cbz	r2, 8023380 <_findenv_r+0x6c>
 8023334:	2a3d      	cmp	r2, #61	; 0x3d
 8023336:	461c      	mov	r4, r3
 8023338:	d1f8      	bne.n	802332c <_findenv_r+0x18>
 802333a:	4638      	mov	r0, r7
 802333c:	f001 fac3 	bl	80248c6 <__env_unlock>
 8023340:	2000      	movs	r0, #0
 8023342:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023346:	464d      	mov	r5, r9
 8023348:	46a9      	mov	r9, r5
 802334a:	f859 0b04 	ldr.w	r0, [r9], #4
 802334e:	2800      	cmp	r0, #0
 8023350:	d0f3      	beq.n	802333a <_findenv_r+0x26>
 8023352:	4622      	mov	r2, r4
 8023354:	4659      	mov	r1, fp
 8023356:	f7fe fbab 	bl	8021ab0 <strncmp>
 802335a:	2800      	cmp	r0, #0
 802335c:	d1f3      	bne.n	8023346 <_findenv_r+0x32>
 802335e:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8023362:	191e      	adds	r6, r3, r4
 8023364:	5d1b      	ldrb	r3, [r3, r4]
 8023366:	2b3d      	cmp	r3, #61	; 0x3d
 8023368:	d1ed      	bne.n	8023346 <_findenv_r+0x32>
 802336a:	f8da 3000 	ldr.w	r3, [sl]
 802336e:	1aed      	subs	r5, r5, r3
 8023370:	10ad      	asrs	r5, r5, #2
 8023372:	4638      	mov	r0, r7
 8023374:	f8c8 5000 	str.w	r5, [r8]
 8023378:	f001 faa5 	bl	80248c6 <__env_unlock>
 802337c:	1c70      	adds	r0, r6, #1
 802337e:	e7e0      	b.n	8023342 <_findenv_r+0x2e>
 8023380:	eba4 040b 	sub.w	r4, r4, fp
 8023384:	e7e0      	b.n	8023348 <_findenv_r+0x34>
 8023386:	bf00      	nop
 8023388:	20000240 	.word	0x20000240

0802338c <_getenv_r>:
 802338c:	b507      	push	{r0, r1, r2, lr}
 802338e:	aa01      	add	r2, sp, #4
 8023390:	f7ff ffc0 	bl	8023314 <_findenv_r>
 8023394:	b003      	add	sp, #12
 8023396:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0802339c <__gettzinfo>:
 802339c:	4800      	ldr	r0, [pc, #0]	; (80233a0 <__gettzinfo+0x4>)
 802339e:	4770      	bx	lr
 80233a0:	20000628 	.word	0x20000628

080233a4 <gmtime_r>:
 80233a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80233a8:	e9d0 8900 	ldrd	r8, r9, [r0]
 80233ac:	460c      	mov	r4, r1
 80233ae:	4a50      	ldr	r2, [pc, #320]	; (80234f0 <gmtime_r+0x14c>)
 80233b0:	2300      	movs	r3, #0
 80233b2:	4640      	mov	r0, r8
 80233b4:	4649      	mov	r1, r9
 80233b6:	f7dc ffab 	bl	8000310 <__aeabi_ldivmod>
 80233ba:	4a4d      	ldr	r2, [pc, #308]	; (80234f0 <gmtime_r+0x14c>)
 80233bc:	f500 262f 	add.w	r6, r0, #716800	; 0xaf000
 80233c0:	2300      	movs	r3, #0
 80233c2:	4640      	mov	r0, r8
 80233c4:	4649      	mov	r1, r9
 80233c6:	f7dc ffa3 	bl	8000310 <__aeabi_ldivmod>
 80233ca:	2a00      	cmp	r2, #0
 80233cc:	bfbc      	itt	lt
 80233ce:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80233d2:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80233d6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80233da:	fb92 f3f1 	sdiv	r3, r2, r1
 80233de:	fb01 2213 	mls	r2, r1, r3, r2
 80233e2:	f04f 013c 	mov.w	r1, #60	; 0x3c
 80233e6:	f606 256c 	addw	r5, r6, #2668	; 0xa6c
 80233ea:	60a3      	str	r3, [r4, #8]
 80233ec:	bfb8      	it	lt
 80233ee:	f606 256b 	addwlt	r5, r6, #2667	; 0xa6b
 80233f2:	fb92 f3f1 	sdiv	r3, r2, r1
 80233f6:	fb01 2213 	mls	r2, r1, r3, r2
 80233fa:	6063      	str	r3, [r4, #4]
 80233fc:	6022      	str	r2, [r4, #0]
 80233fe:	1ceb      	adds	r3, r5, #3
 8023400:	2207      	movs	r2, #7
 8023402:	fb93 f2f2 	sdiv	r2, r3, r2
 8023406:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 802340a:	1a9b      	subs	r3, r3, r2
 802340c:	bf48      	it	mi
 802340e:	3307      	addmi	r3, #7
 8023410:	2d00      	cmp	r5, #0
 8023412:	61a3      	str	r3, [r4, #24]
 8023414:	bfb8      	it	lt
 8023416:	f5a5 330e 	sublt.w	r3, r5, #145408	; 0x23800
 802341a:	4836      	ldr	r0, [pc, #216]	; (80234f4 <gmtime_r+0x150>)
 802341c:	bfae      	itee	ge
 802341e:	fb95 f0f0 	sdivge	r0, r5, r0
 8023422:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8023426:	fb93 f0f0 	sdivlt	r0, r3, r0
 802342a:	4b33      	ldr	r3, [pc, #204]	; (80234f8 <gmtime_r+0x154>)
 802342c:	fb03 5300 	mla	r3, r3, r0, r5
 8023430:	f648 61ac 	movw	r1, #36524	; 0x8eac
 8023434:	fbb3 f1f1 	udiv	r1, r3, r1
 8023438:	4419      	add	r1, r3
 802343a:	f240 57b4 	movw	r7, #1460	; 0x5b4
 802343e:	fbb3 f2f7 	udiv	r2, r3, r7
 8023442:	1a89      	subs	r1, r1, r2
 8023444:	4a2d      	ldr	r2, [pc, #180]	; (80234fc <gmtime_r+0x158>)
 8023446:	fbb3 f2f2 	udiv	r2, r3, r2
 802344a:	1a8a      	subs	r2, r1, r2
 802344c:	f648 6194 	movw	r1, #36500	; 0x8e94
 8023450:	fbb2 f1f1 	udiv	r1, r2, r1
 8023454:	440b      	add	r3, r1
 8023456:	f240 166d 	movw	r6, #365	; 0x16d
 802345a:	fbb2 f5f6 	udiv	r5, r2, r6
 802345e:	fbb2 f2f7 	udiv	r2, r2, r7
 8023462:	1a9a      	subs	r2, r3, r2
 8023464:	fb06 2315 	mls	r3, r6, r5, r2
 8023468:	2199      	movs	r1, #153	; 0x99
 802346a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 802346e:	1c5e      	adds	r6, r3, #1
 8023470:	3202      	adds	r2, #2
 8023472:	fbb2 f2f1 	udiv	r2, r2, r1
 8023476:	2a0a      	cmp	r2, #10
 8023478:	fb01 f102 	mul.w	r1, r1, r2
 802347c:	f101 0102 	add.w	r1, r1, #2
 8023480:	f04f 0705 	mov.w	r7, #5
 8023484:	fbb1 f1f7 	udiv	r1, r1, r7
 8023488:	eba6 0101 	sub.w	r1, r6, r1
 802348c:	bf34      	ite	cc
 802348e:	2602      	movcc	r6, #2
 8023490:	f06f 0609 	mvncs.w	r6, #9
 8023494:	4416      	add	r6, r2
 8023496:	f44f 72c8 	mov.w	r2, #400	; 0x190
 802349a:	fb02 5000 	mla	r0, r2, r0, r5
 802349e:	2e01      	cmp	r6, #1
 80234a0:	bf98      	it	ls
 80234a2:	3001      	addls	r0, #1
 80234a4:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80234a8:	d30c      	bcc.n	80234c4 <gmtime_r+0x120>
 80234aa:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80234ae:	61e3      	str	r3, [r4, #28]
 80234b0:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
 80234b4:	2300      	movs	r3, #0
 80234b6:	e9c4 6004 	strd	r6, r0, [r4, #16]
 80234ba:	60e1      	str	r1, [r4, #12]
 80234bc:	6223      	str	r3, [r4, #32]
 80234be:	4620      	mov	r0, r4
 80234c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80234c4:	07aa      	lsls	r2, r5, #30
 80234c6:	d105      	bne.n	80234d4 <gmtime_r+0x130>
 80234c8:	2764      	movs	r7, #100	; 0x64
 80234ca:	fbb5 f2f7 	udiv	r2, r5, r7
 80234ce:	fb07 5212 	mls	r2, r7, r2, r5
 80234d2:	b95a      	cbnz	r2, 80234ec <gmtime_r+0x148>
 80234d4:	f44f 77c8 	mov.w	r7, #400	; 0x190
 80234d8:	fbb5 f2f7 	udiv	r2, r5, r7
 80234dc:	fb07 5212 	mls	r2, r7, r2, r5
 80234e0:	fab2 f282 	clz	r2, r2
 80234e4:	0952      	lsrs	r2, r2, #5
 80234e6:	333b      	adds	r3, #59	; 0x3b
 80234e8:	4413      	add	r3, r2
 80234ea:	e7e0      	b.n	80234ae <gmtime_r+0x10a>
 80234ec:	2201      	movs	r2, #1
 80234ee:	e7fa      	b.n	80234e6 <gmtime_r+0x142>
 80234f0:	00015180 	.word	0x00015180
 80234f4:	00023ab1 	.word	0x00023ab1
 80234f8:	fffdc54f 	.word	0xfffdc54f
 80234fc:	00023ab0 	.word	0x00023ab0

08023500 <labs>:
 8023500:	2800      	cmp	r0, #0
 8023502:	bfb8      	it	lt
 8023504:	4240      	neglt	r0, r0
 8023506:	4770      	bx	lr

08023508 <_localeconv_r>:
 8023508:	4b04      	ldr	r3, [pc, #16]	; (802351c <_localeconv_r+0x14>)
 802350a:	681b      	ldr	r3, [r3, #0]
 802350c:	6a18      	ldr	r0, [r3, #32]
 802350e:	4b04      	ldr	r3, [pc, #16]	; (8023520 <_localeconv_r+0x18>)
 8023510:	2800      	cmp	r0, #0
 8023512:	bf08      	it	eq
 8023514:	4618      	moveq	r0, r3
 8023516:	30f0      	adds	r0, #240	; 0xf0
 8023518:	4770      	bx	lr
 802351a:	bf00      	nop
 802351c:	20000450 	.word	0x20000450
 8023520:	200004b4 	.word	0x200004b4

08023524 <_lseek_r>:
 8023524:	b538      	push	{r3, r4, r5, lr}
 8023526:	4c07      	ldr	r4, [pc, #28]	; (8023544 <_lseek_r+0x20>)
 8023528:	4605      	mov	r5, r0
 802352a:	4608      	mov	r0, r1
 802352c:	4611      	mov	r1, r2
 802352e:	2200      	movs	r2, #0
 8023530:	6022      	str	r2, [r4, #0]
 8023532:	461a      	mov	r2, r3
 8023534:	f7e1 fb12 	bl	8004b5c <_lseek>
 8023538:	1c43      	adds	r3, r0, #1
 802353a:	d102      	bne.n	8023542 <_lseek_r+0x1e>
 802353c:	6823      	ldr	r3, [r4, #0]
 802353e:	b103      	cbz	r3, 8023542 <_lseek_r+0x1e>
 8023540:	602b      	str	r3, [r5, #0]
 8023542:	bd38      	pop	{r3, r4, r5, pc}
 8023544:	2003e328 	.word	0x2003e328

08023548 <__swhatbuf_r>:
 8023548:	b570      	push	{r4, r5, r6, lr}
 802354a:	460e      	mov	r6, r1
 802354c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023550:	2900      	cmp	r1, #0
 8023552:	b096      	sub	sp, #88	; 0x58
 8023554:	4614      	mov	r4, r2
 8023556:	461d      	mov	r5, r3
 8023558:	da07      	bge.n	802356a <__swhatbuf_r+0x22>
 802355a:	2300      	movs	r3, #0
 802355c:	602b      	str	r3, [r5, #0]
 802355e:	89b3      	ldrh	r3, [r6, #12]
 8023560:	061a      	lsls	r2, r3, #24
 8023562:	d410      	bmi.n	8023586 <__swhatbuf_r+0x3e>
 8023564:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8023568:	e00e      	b.n	8023588 <__swhatbuf_r+0x40>
 802356a:	466a      	mov	r2, sp
 802356c:	f001 f9ac 	bl	80248c8 <_fstat_r>
 8023570:	2800      	cmp	r0, #0
 8023572:	dbf2      	blt.n	802355a <__swhatbuf_r+0x12>
 8023574:	9a01      	ldr	r2, [sp, #4]
 8023576:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802357a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802357e:	425a      	negs	r2, r3
 8023580:	415a      	adcs	r2, r3
 8023582:	602a      	str	r2, [r5, #0]
 8023584:	e7ee      	b.n	8023564 <__swhatbuf_r+0x1c>
 8023586:	2340      	movs	r3, #64	; 0x40
 8023588:	2000      	movs	r0, #0
 802358a:	6023      	str	r3, [r4, #0]
 802358c:	b016      	add	sp, #88	; 0x58
 802358e:	bd70      	pop	{r4, r5, r6, pc}

08023590 <__smakebuf_r>:
 8023590:	898b      	ldrh	r3, [r1, #12]
 8023592:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8023594:	079d      	lsls	r5, r3, #30
 8023596:	4606      	mov	r6, r0
 8023598:	460c      	mov	r4, r1
 802359a:	d507      	bpl.n	80235ac <__smakebuf_r+0x1c>
 802359c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80235a0:	6023      	str	r3, [r4, #0]
 80235a2:	6123      	str	r3, [r4, #16]
 80235a4:	2301      	movs	r3, #1
 80235a6:	6163      	str	r3, [r4, #20]
 80235a8:	b002      	add	sp, #8
 80235aa:	bd70      	pop	{r4, r5, r6, pc}
 80235ac:	ab01      	add	r3, sp, #4
 80235ae:	466a      	mov	r2, sp
 80235b0:	f7ff ffca 	bl	8023548 <__swhatbuf_r>
 80235b4:	9900      	ldr	r1, [sp, #0]
 80235b6:	4605      	mov	r5, r0
 80235b8:	4630      	mov	r0, r6
 80235ba:	f7fc fe67 	bl	802028c <_malloc_r>
 80235be:	b948      	cbnz	r0, 80235d4 <__smakebuf_r+0x44>
 80235c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80235c4:	059a      	lsls	r2, r3, #22
 80235c6:	d4ef      	bmi.n	80235a8 <__smakebuf_r+0x18>
 80235c8:	f023 0303 	bic.w	r3, r3, #3
 80235cc:	f043 0302 	orr.w	r3, r3, #2
 80235d0:	81a3      	strh	r3, [r4, #12]
 80235d2:	e7e3      	b.n	802359c <__smakebuf_r+0xc>
 80235d4:	4b0d      	ldr	r3, [pc, #52]	; (802360c <__smakebuf_r+0x7c>)
 80235d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80235d8:	89a3      	ldrh	r3, [r4, #12]
 80235da:	6020      	str	r0, [r4, #0]
 80235dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80235e0:	81a3      	strh	r3, [r4, #12]
 80235e2:	9b00      	ldr	r3, [sp, #0]
 80235e4:	6163      	str	r3, [r4, #20]
 80235e6:	9b01      	ldr	r3, [sp, #4]
 80235e8:	6120      	str	r0, [r4, #16]
 80235ea:	b15b      	cbz	r3, 8023604 <__smakebuf_r+0x74>
 80235ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80235f0:	4630      	mov	r0, r6
 80235f2:	f001 f97b 	bl	80248ec <_isatty_r>
 80235f6:	b128      	cbz	r0, 8023604 <__smakebuf_r+0x74>
 80235f8:	89a3      	ldrh	r3, [r4, #12]
 80235fa:	f023 0303 	bic.w	r3, r3, #3
 80235fe:	f043 0301 	orr.w	r3, r3, #1
 8023602:	81a3      	strh	r3, [r4, #12]
 8023604:	89a3      	ldrh	r3, [r4, #12]
 8023606:	431d      	orrs	r5, r3
 8023608:	81a5      	strh	r5, [r4, #12]
 802360a:	e7cd      	b.n	80235a8 <__smakebuf_r+0x18>
 802360c:	080231c9 	.word	0x080231c9

08023610 <__malloc_lock>:
 8023610:	4770      	bx	lr

08023612 <__malloc_unlock>:
 8023612:	4770      	bx	lr

08023614 <_Balloc>:
 8023614:	b570      	push	{r4, r5, r6, lr}
 8023616:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8023618:	4604      	mov	r4, r0
 802361a:	460e      	mov	r6, r1
 802361c:	b93d      	cbnz	r5, 802362e <_Balloc+0x1a>
 802361e:	2010      	movs	r0, #16
 8023620:	f7fc faf4 	bl	801fc0c <malloc>
 8023624:	6260      	str	r0, [r4, #36]	; 0x24
 8023626:	e9c0 5501 	strd	r5, r5, [r0, #4]
 802362a:	6005      	str	r5, [r0, #0]
 802362c:	60c5      	str	r5, [r0, #12]
 802362e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8023630:	68eb      	ldr	r3, [r5, #12]
 8023632:	b183      	cbz	r3, 8023656 <_Balloc+0x42>
 8023634:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023636:	68db      	ldr	r3, [r3, #12]
 8023638:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 802363c:	b9b8      	cbnz	r0, 802366e <_Balloc+0x5a>
 802363e:	2101      	movs	r1, #1
 8023640:	fa01 f506 	lsl.w	r5, r1, r6
 8023644:	1d6a      	adds	r2, r5, #5
 8023646:	0092      	lsls	r2, r2, #2
 8023648:	4620      	mov	r0, r4
 802364a:	f000 fabf 	bl	8023bcc <_calloc_r>
 802364e:	b160      	cbz	r0, 802366a <_Balloc+0x56>
 8023650:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8023654:	e00e      	b.n	8023674 <_Balloc+0x60>
 8023656:	2221      	movs	r2, #33	; 0x21
 8023658:	2104      	movs	r1, #4
 802365a:	4620      	mov	r0, r4
 802365c:	f000 fab6 	bl	8023bcc <_calloc_r>
 8023660:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023662:	60e8      	str	r0, [r5, #12]
 8023664:	68db      	ldr	r3, [r3, #12]
 8023666:	2b00      	cmp	r3, #0
 8023668:	d1e4      	bne.n	8023634 <_Balloc+0x20>
 802366a:	2000      	movs	r0, #0
 802366c:	bd70      	pop	{r4, r5, r6, pc}
 802366e:	6802      	ldr	r2, [r0, #0]
 8023670:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8023674:	2300      	movs	r3, #0
 8023676:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802367a:	e7f7      	b.n	802366c <_Balloc+0x58>

0802367c <_Bfree>:
 802367c:	b570      	push	{r4, r5, r6, lr}
 802367e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8023680:	4606      	mov	r6, r0
 8023682:	460d      	mov	r5, r1
 8023684:	b93c      	cbnz	r4, 8023696 <_Bfree+0x1a>
 8023686:	2010      	movs	r0, #16
 8023688:	f7fc fac0 	bl	801fc0c <malloc>
 802368c:	6270      	str	r0, [r6, #36]	; 0x24
 802368e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8023692:	6004      	str	r4, [r0, #0]
 8023694:	60c4      	str	r4, [r0, #12]
 8023696:	b13d      	cbz	r5, 80236a8 <_Bfree+0x2c>
 8023698:	6a73      	ldr	r3, [r6, #36]	; 0x24
 802369a:	686a      	ldr	r2, [r5, #4]
 802369c:	68db      	ldr	r3, [r3, #12]
 802369e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80236a2:	6029      	str	r1, [r5, #0]
 80236a4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80236a8:	bd70      	pop	{r4, r5, r6, pc}

080236aa <__multadd>:
 80236aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80236ae:	690d      	ldr	r5, [r1, #16]
 80236b0:	461f      	mov	r7, r3
 80236b2:	4606      	mov	r6, r0
 80236b4:	460c      	mov	r4, r1
 80236b6:	f101 0c14 	add.w	ip, r1, #20
 80236ba:	2300      	movs	r3, #0
 80236bc:	f8dc 0000 	ldr.w	r0, [ip]
 80236c0:	b281      	uxth	r1, r0
 80236c2:	fb02 7101 	mla	r1, r2, r1, r7
 80236c6:	0c0f      	lsrs	r7, r1, #16
 80236c8:	0c00      	lsrs	r0, r0, #16
 80236ca:	fb02 7000 	mla	r0, r2, r0, r7
 80236ce:	b289      	uxth	r1, r1
 80236d0:	3301      	adds	r3, #1
 80236d2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80236d6:	429d      	cmp	r5, r3
 80236d8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80236dc:	f84c 1b04 	str.w	r1, [ip], #4
 80236e0:	dcec      	bgt.n	80236bc <__multadd+0x12>
 80236e2:	b1d7      	cbz	r7, 802371a <__multadd+0x70>
 80236e4:	68a3      	ldr	r3, [r4, #8]
 80236e6:	42ab      	cmp	r3, r5
 80236e8:	dc12      	bgt.n	8023710 <__multadd+0x66>
 80236ea:	6861      	ldr	r1, [r4, #4]
 80236ec:	4630      	mov	r0, r6
 80236ee:	3101      	adds	r1, #1
 80236f0:	f7ff ff90 	bl	8023614 <_Balloc>
 80236f4:	6922      	ldr	r2, [r4, #16]
 80236f6:	3202      	adds	r2, #2
 80236f8:	f104 010c 	add.w	r1, r4, #12
 80236fc:	4680      	mov	r8, r0
 80236fe:	0092      	lsls	r2, r2, #2
 8023700:	300c      	adds	r0, #12
 8023702:	f7fc fab4 	bl	801fc6e <memcpy>
 8023706:	4621      	mov	r1, r4
 8023708:	4630      	mov	r0, r6
 802370a:	f7ff ffb7 	bl	802367c <_Bfree>
 802370e:	4644      	mov	r4, r8
 8023710:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8023714:	3501      	adds	r5, #1
 8023716:	615f      	str	r7, [r3, #20]
 8023718:	6125      	str	r5, [r4, #16]
 802371a:	4620      	mov	r0, r4
 802371c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08023720 <__hi0bits>:
 8023720:	0c02      	lsrs	r2, r0, #16
 8023722:	0412      	lsls	r2, r2, #16
 8023724:	4603      	mov	r3, r0
 8023726:	b9b2      	cbnz	r2, 8023756 <__hi0bits+0x36>
 8023728:	0403      	lsls	r3, r0, #16
 802372a:	2010      	movs	r0, #16
 802372c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8023730:	bf04      	itt	eq
 8023732:	021b      	lsleq	r3, r3, #8
 8023734:	3008      	addeq	r0, #8
 8023736:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 802373a:	bf04      	itt	eq
 802373c:	011b      	lsleq	r3, r3, #4
 802373e:	3004      	addeq	r0, #4
 8023740:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8023744:	bf04      	itt	eq
 8023746:	009b      	lsleq	r3, r3, #2
 8023748:	3002      	addeq	r0, #2
 802374a:	2b00      	cmp	r3, #0
 802374c:	db06      	blt.n	802375c <__hi0bits+0x3c>
 802374e:	005b      	lsls	r3, r3, #1
 8023750:	d503      	bpl.n	802375a <__hi0bits+0x3a>
 8023752:	3001      	adds	r0, #1
 8023754:	4770      	bx	lr
 8023756:	2000      	movs	r0, #0
 8023758:	e7e8      	b.n	802372c <__hi0bits+0xc>
 802375a:	2020      	movs	r0, #32
 802375c:	4770      	bx	lr

0802375e <__lo0bits>:
 802375e:	6803      	ldr	r3, [r0, #0]
 8023760:	f013 0207 	ands.w	r2, r3, #7
 8023764:	4601      	mov	r1, r0
 8023766:	d00b      	beq.n	8023780 <__lo0bits+0x22>
 8023768:	07da      	lsls	r2, r3, #31
 802376a:	d423      	bmi.n	80237b4 <__lo0bits+0x56>
 802376c:	0798      	lsls	r0, r3, #30
 802376e:	bf49      	itett	mi
 8023770:	085b      	lsrmi	r3, r3, #1
 8023772:	089b      	lsrpl	r3, r3, #2
 8023774:	2001      	movmi	r0, #1
 8023776:	600b      	strmi	r3, [r1, #0]
 8023778:	bf5c      	itt	pl
 802377a:	600b      	strpl	r3, [r1, #0]
 802377c:	2002      	movpl	r0, #2
 802377e:	4770      	bx	lr
 8023780:	b298      	uxth	r0, r3
 8023782:	b9a8      	cbnz	r0, 80237b0 <__lo0bits+0x52>
 8023784:	0c1b      	lsrs	r3, r3, #16
 8023786:	2010      	movs	r0, #16
 8023788:	f013 0fff 	tst.w	r3, #255	; 0xff
 802378c:	bf04      	itt	eq
 802378e:	0a1b      	lsreq	r3, r3, #8
 8023790:	3008      	addeq	r0, #8
 8023792:	071a      	lsls	r2, r3, #28
 8023794:	bf04      	itt	eq
 8023796:	091b      	lsreq	r3, r3, #4
 8023798:	3004      	addeq	r0, #4
 802379a:	079a      	lsls	r2, r3, #30
 802379c:	bf04      	itt	eq
 802379e:	089b      	lsreq	r3, r3, #2
 80237a0:	3002      	addeq	r0, #2
 80237a2:	07da      	lsls	r2, r3, #31
 80237a4:	d402      	bmi.n	80237ac <__lo0bits+0x4e>
 80237a6:	085b      	lsrs	r3, r3, #1
 80237a8:	d006      	beq.n	80237b8 <__lo0bits+0x5a>
 80237aa:	3001      	adds	r0, #1
 80237ac:	600b      	str	r3, [r1, #0]
 80237ae:	4770      	bx	lr
 80237b0:	4610      	mov	r0, r2
 80237b2:	e7e9      	b.n	8023788 <__lo0bits+0x2a>
 80237b4:	2000      	movs	r0, #0
 80237b6:	4770      	bx	lr
 80237b8:	2020      	movs	r0, #32
 80237ba:	4770      	bx	lr

080237bc <__i2b>:
 80237bc:	b510      	push	{r4, lr}
 80237be:	460c      	mov	r4, r1
 80237c0:	2101      	movs	r1, #1
 80237c2:	f7ff ff27 	bl	8023614 <_Balloc>
 80237c6:	2201      	movs	r2, #1
 80237c8:	6144      	str	r4, [r0, #20]
 80237ca:	6102      	str	r2, [r0, #16]
 80237cc:	bd10      	pop	{r4, pc}

080237ce <__multiply>:
 80237ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80237d2:	4614      	mov	r4, r2
 80237d4:	690a      	ldr	r2, [r1, #16]
 80237d6:	6923      	ldr	r3, [r4, #16]
 80237d8:	429a      	cmp	r2, r3
 80237da:	bfb8      	it	lt
 80237dc:	460b      	movlt	r3, r1
 80237de:	4688      	mov	r8, r1
 80237e0:	bfbc      	itt	lt
 80237e2:	46a0      	movlt	r8, r4
 80237e4:	461c      	movlt	r4, r3
 80237e6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80237ea:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80237ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80237f2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80237f6:	eb07 0609 	add.w	r6, r7, r9
 80237fa:	42b3      	cmp	r3, r6
 80237fc:	bfb8      	it	lt
 80237fe:	3101      	addlt	r1, #1
 8023800:	f7ff ff08 	bl	8023614 <_Balloc>
 8023804:	f100 0514 	add.w	r5, r0, #20
 8023808:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 802380c:	462b      	mov	r3, r5
 802380e:	2200      	movs	r2, #0
 8023810:	4573      	cmp	r3, lr
 8023812:	d316      	bcc.n	8023842 <__multiply+0x74>
 8023814:	f104 0214 	add.w	r2, r4, #20
 8023818:	f108 0114 	add.w	r1, r8, #20
 802381c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8023820:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8023824:	9300      	str	r3, [sp, #0]
 8023826:	9b00      	ldr	r3, [sp, #0]
 8023828:	9201      	str	r2, [sp, #4]
 802382a:	4293      	cmp	r3, r2
 802382c:	d80c      	bhi.n	8023848 <__multiply+0x7a>
 802382e:	2e00      	cmp	r6, #0
 8023830:	dd03      	ble.n	802383a <__multiply+0x6c>
 8023832:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8023836:	2b00      	cmp	r3, #0
 8023838:	d05d      	beq.n	80238f6 <__multiply+0x128>
 802383a:	6106      	str	r6, [r0, #16]
 802383c:	b003      	add	sp, #12
 802383e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023842:	f843 2b04 	str.w	r2, [r3], #4
 8023846:	e7e3      	b.n	8023810 <__multiply+0x42>
 8023848:	f8b2 b000 	ldrh.w	fp, [r2]
 802384c:	f1bb 0f00 	cmp.w	fp, #0
 8023850:	d023      	beq.n	802389a <__multiply+0xcc>
 8023852:	4689      	mov	r9, r1
 8023854:	46ac      	mov	ip, r5
 8023856:	f04f 0800 	mov.w	r8, #0
 802385a:	f859 4b04 	ldr.w	r4, [r9], #4
 802385e:	f8dc a000 	ldr.w	sl, [ip]
 8023862:	b2a3      	uxth	r3, r4
 8023864:	fa1f fa8a 	uxth.w	sl, sl
 8023868:	fb0b a303 	mla	r3, fp, r3, sl
 802386c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8023870:	f8dc 4000 	ldr.w	r4, [ip]
 8023874:	4443      	add	r3, r8
 8023876:	ea4f 4814 	mov.w	r8, r4, lsr #16
 802387a:	fb0b 840a 	mla	r4, fp, sl, r8
 802387e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8023882:	46e2      	mov	sl, ip
 8023884:	b29b      	uxth	r3, r3
 8023886:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 802388a:	454f      	cmp	r7, r9
 802388c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8023890:	f84a 3b04 	str.w	r3, [sl], #4
 8023894:	d82b      	bhi.n	80238ee <__multiply+0x120>
 8023896:	f8cc 8004 	str.w	r8, [ip, #4]
 802389a:	9b01      	ldr	r3, [sp, #4]
 802389c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80238a0:	3204      	adds	r2, #4
 80238a2:	f1ba 0f00 	cmp.w	sl, #0
 80238a6:	d020      	beq.n	80238ea <__multiply+0x11c>
 80238a8:	682b      	ldr	r3, [r5, #0]
 80238aa:	4689      	mov	r9, r1
 80238ac:	46a8      	mov	r8, r5
 80238ae:	f04f 0b00 	mov.w	fp, #0
 80238b2:	f8b9 c000 	ldrh.w	ip, [r9]
 80238b6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80238ba:	fb0a 440c 	mla	r4, sl, ip, r4
 80238be:	445c      	add	r4, fp
 80238c0:	46c4      	mov	ip, r8
 80238c2:	b29b      	uxth	r3, r3
 80238c4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80238c8:	f84c 3b04 	str.w	r3, [ip], #4
 80238cc:	f859 3b04 	ldr.w	r3, [r9], #4
 80238d0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80238d4:	0c1b      	lsrs	r3, r3, #16
 80238d6:	fb0a b303 	mla	r3, sl, r3, fp
 80238da:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80238de:	454f      	cmp	r7, r9
 80238e0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80238e4:	d805      	bhi.n	80238f2 <__multiply+0x124>
 80238e6:	f8c8 3004 	str.w	r3, [r8, #4]
 80238ea:	3504      	adds	r5, #4
 80238ec:	e79b      	b.n	8023826 <__multiply+0x58>
 80238ee:	46d4      	mov	ip, sl
 80238f0:	e7b3      	b.n	802385a <__multiply+0x8c>
 80238f2:	46e0      	mov	r8, ip
 80238f4:	e7dd      	b.n	80238b2 <__multiply+0xe4>
 80238f6:	3e01      	subs	r6, #1
 80238f8:	e799      	b.n	802382e <__multiply+0x60>
	...

080238fc <__pow5mult>:
 80238fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023900:	4615      	mov	r5, r2
 8023902:	f012 0203 	ands.w	r2, r2, #3
 8023906:	4606      	mov	r6, r0
 8023908:	460f      	mov	r7, r1
 802390a:	d007      	beq.n	802391c <__pow5mult+0x20>
 802390c:	3a01      	subs	r2, #1
 802390e:	4c21      	ldr	r4, [pc, #132]	; (8023994 <__pow5mult+0x98>)
 8023910:	2300      	movs	r3, #0
 8023912:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8023916:	f7ff fec8 	bl	80236aa <__multadd>
 802391a:	4607      	mov	r7, r0
 802391c:	10ad      	asrs	r5, r5, #2
 802391e:	d035      	beq.n	802398c <__pow5mult+0x90>
 8023920:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8023922:	b93c      	cbnz	r4, 8023934 <__pow5mult+0x38>
 8023924:	2010      	movs	r0, #16
 8023926:	f7fc f971 	bl	801fc0c <malloc>
 802392a:	6270      	str	r0, [r6, #36]	; 0x24
 802392c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8023930:	6004      	str	r4, [r0, #0]
 8023932:	60c4      	str	r4, [r0, #12]
 8023934:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8023938:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802393c:	b94c      	cbnz	r4, 8023952 <__pow5mult+0x56>
 802393e:	f240 2171 	movw	r1, #625	; 0x271
 8023942:	4630      	mov	r0, r6
 8023944:	f7ff ff3a 	bl	80237bc <__i2b>
 8023948:	2300      	movs	r3, #0
 802394a:	f8c8 0008 	str.w	r0, [r8, #8]
 802394e:	4604      	mov	r4, r0
 8023950:	6003      	str	r3, [r0, #0]
 8023952:	f04f 0800 	mov.w	r8, #0
 8023956:	07eb      	lsls	r3, r5, #31
 8023958:	d50a      	bpl.n	8023970 <__pow5mult+0x74>
 802395a:	4639      	mov	r1, r7
 802395c:	4622      	mov	r2, r4
 802395e:	4630      	mov	r0, r6
 8023960:	f7ff ff35 	bl	80237ce <__multiply>
 8023964:	4639      	mov	r1, r7
 8023966:	4681      	mov	r9, r0
 8023968:	4630      	mov	r0, r6
 802396a:	f7ff fe87 	bl	802367c <_Bfree>
 802396e:	464f      	mov	r7, r9
 8023970:	106d      	asrs	r5, r5, #1
 8023972:	d00b      	beq.n	802398c <__pow5mult+0x90>
 8023974:	6820      	ldr	r0, [r4, #0]
 8023976:	b938      	cbnz	r0, 8023988 <__pow5mult+0x8c>
 8023978:	4622      	mov	r2, r4
 802397a:	4621      	mov	r1, r4
 802397c:	4630      	mov	r0, r6
 802397e:	f7ff ff26 	bl	80237ce <__multiply>
 8023982:	6020      	str	r0, [r4, #0]
 8023984:	f8c0 8000 	str.w	r8, [r0]
 8023988:	4604      	mov	r4, r0
 802398a:	e7e4      	b.n	8023956 <__pow5mult+0x5a>
 802398c:	4638      	mov	r0, r7
 802398e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023992:	bf00      	nop
 8023994:	080401a0 	.word	0x080401a0

08023998 <__lshift>:
 8023998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802399c:	460c      	mov	r4, r1
 802399e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80239a2:	6923      	ldr	r3, [r4, #16]
 80239a4:	6849      	ldr	r1, [r1, #4]
 80239a6:	eb0a 0903 	add.w	r9, sl, r3
 80239aa:	68a3      	ldr	r3, [r4, #8]
 80239ac:	4607      	mov	r7, r0
 80239ae:	4616      	mov	r6, r2
 80239b0:	f109 0501 	add.w	r5, r9, #1
 80239b4:	42ab      	cmp	r3, r5
 80239b6:	db32      	blt.n	8023a1e <__lshift+0x86>
 80239b8:	4638      	mov	r0, r7
 80239ba:	f7ff fe2b 	bl	8023614 <_Balloc>
 80239be:	2300      	movs	r3, #0
 80239c0:	4680      	mov	r8, r0
 80239c2:	f100 0114 	add.w	r1, r0, #20
 80239c6:	461a      	mov	r2, r3
 80239c8:	4553      	cmp	r3, sl
 80239ca:	db2b      	blt.n	8023a24 <__lshift+0x8c>
 80239cc:	6920      	ldr	r0, [r4, #16]
 80239ce:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80239d2:	f104 0314 	add.w	r3, r4, #20
 80239d6:	f016 021f 	ands.w	r2, r6, #31
 80239da:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80239de:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80239e2:	d025      	beq.n	8023a30 <__lshift+0x98>
 80239e4:	f1c2 0e20 	rsb	lr, r2, #32
 80239e8:	2000      	movs	r0, #0
 80239ea:	681e      	ldr	r6, [r3, #0]
 80239ec:	468a      	mov	sl, r1
 80239ee:	4096      	lsls	r6, r2
 80239f0:	4330      	orrs	r0, r6
 80239f2:	f84a 0b04 	str.w	r0, [sl], #4
 80239f6:	f853 0b04 	ldr.w	r0, [r3], #4
 80239fa:	459c      	cmp	ip, r3
 80239fc:	fa20 f00e 	lsr.w	r0, r0, lr
 8023a00:	d814      	bhi.n	8023a2c <__lshift+0x94>
 8023a02:	6048      	str	r0, [r1, #4]
 8023a04:	b108      	cbz	r0, 8023a0a <__lshift+0x72>
 8023a06:	f109 0502 	add.w	r5, r9, #2
 8023a0a:	3d01      	subs	r5, #1
 8023a0c:	4638      	mov	r0, r7
 8023a0e:	f8c8 5010 	str.w	r5, [r8, #16]
 8023a12:	4621      	mov	r1, r4
 8023a14:	f7ff fe32 	bl	802367c <_Bfree>
 8023a18:	4640      	mov	r0, r8
 8023a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023a1e:	3101      	adds	r1, #1
 8023a20:	005b      	lsls	r3, r3, #1
 8023a22:	e7c7      	b.n	80239b4 <__lshift+0x1c>
 8023a24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8023a28:	3301      	adds	r3, #1
 8023a2a:	e7cd      	b.n	80239c8 <__lshift+0x30>
 8023a2c:	4651      	mov	r1, sl
 8023a2e:	e7dc      	b.n	80239ea <__lshift+0x52>
 8023a30:	3904      	subs	r1, #4
 8023a32:	f853 2b04 	ldr.w	r2, [r3], #4
 8023a36:	f841 2f04 	str.w	r2, [r1, #4]!
 8023a3a:	459c      	cmp	ip, r3
 8023a3c:	d8f9      	bhi.n	8023a32 <__lshift+0x9a>
 8023a3e:	e7e4      	b.n	8023a0a <__lshift+0x72>

08023a40 <__mcmp>:
 8023a40:	6903      	ldr	r3, [r0, #16]
 8023a42:	690a      	ldr	r2, [r1, #16]
 8023a44:	1a9b      	subs	r3, r3, r2
 8023a46:	b530      	push	{r4, r5, lr}
 8023a48:	d10c      	bne.n	8023a64 <__mcmp+0x24>
 8023a4a:	0092      	lsls	r2, r2, #2
 8023a4c:	3014      	adds	r0, #20
 8023a4e:	3114      	adds	r1, #20
 8023a50:	1884      	adds	r4, r0, r2
 8023a52:	4411      	add	r1, r2
 8023a54:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8023a58:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8023a5c:	4295      	cmp	r5, r2
 8023a5e:	d003      	beq.n	8023a68 <__mcmp+0x28>
 8023a60:	d305      	bcc.n	8023a6e <__mcmp+0x2e>
 8023a62:	2301      	movs	r3, #1
 8023a64:	4618      	mov	r0, r3
 8023a66:	bd30      	pop	{r4, r5, pc}
 8023a68:	42a0      	cmp	r0, r4
 8023a6a:	d3f3      	bcc.n	8023a54 <__mcmp+0x14>
 8023a6c:	e7fa      	b.n	8023a64 <__mcmp+0x24>
 8023a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8023a72:	e7f7      	b.n	8023a64 <__mcmp+0x24>

08023a74 <__mdiff>:
 8023a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023a78:	460d      	mov	r5, r1
 8023a7a:	4607      	mov	r7, r0
 8023a7c:	4611      	mov	r1, r2
 8023a7e:	4628      	mov	r0, r5
 8023a80:	4614      	mov	r4, r2
 8023a82:	f7ff ffdd 	bl	8023a40 <__mcmp>
 8023a86:	1e06      	subs	r6, r0, #0
 8023a88:	d108      	bne.n	8023a9c <__mdiff+0x28>
 8023a8a:	4631      	mov	r1, r6
 8023a8c:	4638      	mov	r0, r7
 8023a8e:	f7ff fdc1 	bl	8023614 <_Balloc>
 8023a92:	2301      	movs	r3, #1
 8023a94:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8023a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023a9c:	bfa4      	itt	ge
 8023a9e:	4623      	movge	r3, r4
 8023aa0:	462c      	movge	r4, r5
 8023aa2:	4638      	mov	r0, r7
 8023aa4:	6861      	ldr	r1, [r4, #4]
 8023aa6:	bfa6      	itte	ge
 8023aa8:	461d      	movge	r5, r3
 8023aaa:	2600      	movge	r6, #0
 8023aac:	2601      	movlt	r6, #1
 8023aae:	f7ff fdb1 	bl	8023614 <_Balloc>
 8023ab2:	692b      	ldr	r3, [r5, #16]
 8023ab4:	60c6      	str	r6, [r0, #12]
 8023ab6:	6926      	ldr	r6, [r4, #16]
 8023ab8:	f105 0914 	add.w	r9, r5, #20
 8023abc:	f104 0214 	add.w	r2, r4, #20
 8023ac0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8023ac4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8023ac8:	f100 0514 	add.w	r5, r0, #20
 8023acc:	f04f 0e00 	mov.w	lr, #0
 8023ad0:	f852 ab04 	ldr.w	sl, [r2], #4
 8023ad4:	f859 4b04 	ldr.w	r4, [r9], #4
 8023ad8:	fa1e f18a 	uxtah	r1, lr, sl
 8023adc:	b2a3      	uxth	r3, r4
 8023ade:	1ac9      	subs	r1, r1, r3
 8023ae0:	0c23      	lsrs	r3, r4, #16
 8023ae2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8023ae6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8023aea:	b289      	uxth	r1, r1
 8023aec:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8023af0:	45c8      	cmp	r8, r9
 8023af2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8023af6:	4694      	mov	ip, r2
 8023af8:	f845 3b04 	str.w	r3, [r5], #4
 8023afc:	d8e8      	bhi.n	8023ad0 <__mdiff+0x5c>
 8023afe:	45bc      	cmp	ip, r7
 8023b00:	d304      	bcc.n	8023b0c <__mdiff+0x98>
 8023b02:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8023b06:	b183      	cbz	r3, 8023b2a <__mdiff+0xb6>
 8023b08:	6106      	str	r6, [r0, #16]
 8023b0a:	e7c5      	b.n	8023a98 <__mdiff+0x24>
 8023b0c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8023b10:	fa1e f381 	uxtah	r3, lr, r1
 8023b14:	141a      	asrs	r2, r3, #16
 8023b16:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8023b1a:	b29b      	uxth	r3, r3
 8023b1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8023b20:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8023b24:	f845 3b04 	str.w	r3, [r5], #4
 8023b28:	e7e9      	b.n	8023afe <__mdiff+0x8a>
 8023b2a:	3e01      	subs	r6, #1
 8023b2c:	e7e9      	b.n	8023b02 <__mdiff+0x8e>

08023b2e <__d2b>:
 8023b2e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8023b32:	460e      	mov	r6, r1
 8023b34:	2101      	movs	r1, #1
 8023b36:	ec59 8b10 	vmov	r8, r9, d0
 8023b3a:	4615      	mov	r5, r2
 8023b3c:	f7ff fd6a 	bl	8023614 <_Balloc>
 8023b40:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8023b44:	4607      	mov	r7, r0
 8023b46:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8023b4a:	bb34      	cbnz	r4, 8023b9a <__d2b+0x6c>
 8023b4c:	9301      	str	r3, [sp, #4]
 8023b4e:	f1b8 0300 	subs.w	r3, r8, #0
 8023b52:	d027      	beq.n	8023ba4 <__d2b+0x76>
 8023b54:	a802      	add	r0, sp, #8
 8023b56:	f840 3d08 	str.w	r3, [r0, #-8]!
 8023b5a:	f7ff fe00 	bl	802375e <__lo0bits>
 8023b5e:	9900      	ldr	r1, [sp, #0]
 8023b60:	b1f0      	cbz	r0, 8023ba0 <__d2b+0x72>
 8023b62:	9a01      	ldr	r2, [sp, #4]
 8023b64:	f1c0 0320 	rsb	r3, r0, #32
 8023b68:	fa02 f303 	lsl.w	r3, r2, r3
 8023b6c:	430b      	orrs	r3, r1
 8023b6e:	40c2      	lsrs	r2, r0
 8023b70:	617b      	str	r3, [r7, #20]
 8023b72:	9201      	str	r2, [sp, #4]
 8023b74:	9b01      	ldr	r3, [sp, #4]
 8023b76:	61bb      	str	r3, [r7, #24]
 8023b78:	2b00      	cmp	r3, #0
 8023b7a:	bf14      	ite	ne
 8023b7c:	2102      	movne	r1, #2
 8023b7e:	2101      	moveq	r1, #1
 8023b80:	6139      	str	r1, [r7, #16]
 8023b82:	b1c4      	cbz	r4, 8023bb6 <__d2b+0x88>
 8023b84:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8023b88:	4404      	add	r4, r0
 8023b8a:	6034      	str	r4, [r6, #0]
 8023b8c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8023b90:	6028      	str	r0, [r5, #0]
 8023b92:	4638      	mov	r0, r7
 8023b94:	b003      	add	sp, #12
 8023b96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023b9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8023b9e:	e7d5      	b.n	8023b4c <__d2b+0x1e>
 8023ba0:	6179      	str	r1, [r7, #20]
 8023ba2:	e7e7      	b.n	8023b74 <__d2b+0x46>
 8023ba4:	a801      	add	r0, sp, #4
 8023ba6:	f7ff fdda 	bl	802375e <__lo0bits>
 8023baa:	9b01      	ldr	r3, [sp, #4]
 8023bac:	617b      	str	r3, [r7, #20]
 8023bae:	2101      	movs	r1, #1
 8023bb0:	6139      	str	r1, [r7, #16]
 8023bb2:	3020      	adds	r0, #32
 8023bb4:	e7e5      	b.n	8023b82 <__d2b+0x54>
 8023bb6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8023bba:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8023bbe:	6030      	str	r0, [r6, #0]
 8023bc0:	6918      	ldr	r0, [r3, #16]
 8023bc2:	f7ff fdad 	bl	8023720 <__hi0bits>
 8023bc6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8023bca:	e7e1      	b.n	8023b90 <__d2b+0x62>

08023bcc <_calloc_r>:
 8023bcc:	b538      	push	{r3, r4, r5, lr}
 8023bce:	fb02 f401 	mul.w	r4, r2, r1
 8023bd2:	4621      	mov	r1, r4
 8023bd4:	f7fc fb5a 	bl	802028c <_malloc_r>
 8023bd8:	4605      	mov	r5, r0
 8023bda:	b118      	cbz	r0, 8023be4 <_calloc_r+0x18>
 8023bdc:	4622      	mov	r2, r4
 8023bde:	2100      	movs	r1, #0
 8023be0:	f7fc f869 	bl	801fcb6 <memset>
 8023be4:	4628      	mov	r0, r5
 8023be6:	bd38      	pop	{r3, r4, r5, pc}

08023be8 <_realloc_r>:
 8023be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023bea:	4607      	mov	r7, r0
 8023bec:	4614      	mov	r4, r2
 8023bee:	460e      	mov	r6, r1
 8023bf0:	b921      	cbnz	r1, 8023bfc <_realloc_r+0x14>
 8023bf2:	4611      	mov	r1, r2
 8023bf4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8023bf8:	f7fc bb48 	b.w	802028c <_malloc_r>
 8023bfc:	b922      	cbnz	r2, 8023c08 <_realloc_r+0x20>
 8023bfe:	f7fc faf7 	bl	80201f0 <_free_r>
 8023c02:	4625      	mov	r5, r4
 8023c04:	4628      	mov	r0, r5
 8023c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023c08:	f000 fe80 	bl	802490c <_malloc_usable_size_r>
 8023c0c:	42a0      	cmp	r0, r4
 8023c0e:	d20f      	bcs.n	8023c30 <_realloc_r+0x48>
 8023c10:	4621      	mov	r1, r4
 8023c12:	4638      	mov	r0, r7
 8023c14:	f7fc fb3a 	bl	802028c <_malloc_r>
 8023c18:	4605      	mov	r5, r0
 8023c1a:	2800      	cmp	r0, #0
 8023c1c:	d0f2      	beq.n	8023c04 <_realloc_r+0x1c>
 8023c1e:	4631      	mov	r1, r6
 8023c20:	4622      	mov	r2, r4
 8023c22:	f7fc f824 	bl	801fc6e <memcpy>
 8023c26:	4631      	mov	r1, r6
 8023c28:	4638      	mov	r0, r7
 8023c2a:	f7fc fae1 	bl	80201f0 <_free_r>
 8023c2e:	e7e9      	b.n	8023c04 <_realloc_r+0x1c>
 8023c30:	4635      	mov	r5, r6
 8023c32:	e7e7      	b.n	8023c04 <_realloc_r+0x1c>

08023c34 <__ssputs_r>:
 8023c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023c38:	688e      	ldr	r6, [r1, #8]
 8023c3a:	429e      	cmp	r6, r3
 8023c3c:	4682      	mov	sl, r0
 8023c3e:	460c      	mov	r4, r1
 8023c40:	4690      	mov	r8, r2
 8023c42:	4699      	mov	r9, r3
 8023c44:	d837      	bhi.n	8023cb6 <__ssputs_r+0x82>
 8023c46:	898a      	ldrh	r2, [r1, #12]
 8023c48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8023c4c:	d031      	beq.n	8023cb2 <__ssputs_r+0x7e>
 8023c4e:	6825      	ldr	r5, [r4, #0]
 8023c50:	6909      	ldr	r1, [r1, #16]
 8023c52:	1a6f      	subs	r7, r5, r1
 8023c54:	6965      	ldr	r5, [r4, #20]
 8023c56:	2302      	movs	r3, #2
 8023c58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023c5c:	fb95 f5f3 	sdiv	r5, r5, r3
 8023c60:	f109 0301 	add.w	r3, r9, #1
 8023c64:	443b      	add	r3, r7
 8023c66:	429d      	cmp	r5, r3
 8023c68:	bf38      	it	cc
 8023c6a:	461d      	movcc	r5, r3
 8023c6c:	0553      	lsls	r3, r2, #21
 8023c6e:	d530      	bpl.n	8023cd2 <__ssputs_r+0x9e>
 8023c70:	4629      	mov	r1, r5
 8023c72:	f7fc fb0b 	bl	802028c <_malloc_r>
 8023c76:	4606      	mov	r6, r0
 8023c78:	b950      	cbnz	r0, 8023c90 <__ssputs_r+0x5c>
 8023c7a:	230c      	movs	r3, #12
 8023c7c:	f8ca 3000 	str.w	r3, [sl]
 8023c80:	89a3      	ldrh	r3, [r4, #12]
 8023c82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023c86:	81a3      	strh	r3, [r4, #12]
 8023c88:	f04f 30ff 	mov.w	r0, #4294967295
 8023c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023c90:	463a      	mov	r2, r7
 8023c92:	6921      	ldr	r1, [r4, #16]
 8023c94:	f7fb ffeb 	bl	801fc6e <memcpy>
 8023c98:	89a3      	ldrh	r3, [r4, #12]
 8023c9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8023c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023ca2:	81a3      	strh	r3, [r4, #12]
 8023ca4:	6126      	str	r6, [r4, #16]
 8023ca6:	6165      	str	r5, [r4, #20]
 8023ca8:	443e      	add	r6, r7
 8023caa:	1bed      	subs	r5, r5, r7
 8023cac:	6026      	str	r6, [r4, #0]
 8023cae:	60a5      	str	r5, [r4, #8]
 8023cb0:	464e      	mov	r6, r9
 8023cb2:	454e      	cmp	r6, r9
 8023cb4:	d900      	bls.n	8023cb8 <__ssputs_r+0x84>
 8023cb6:	464e      	mov	r6, r9
 8023cb8:	4632      	mov	r2, r6
 8023cba:	4641      	mov	r1, r8
 8023cbc:	6820      	ldr	r0, [r4, #0]
 8023cbe:	f7fb ffe1 	bl	801fc84 <memmove>
 8023cc2:	68a3      	ldr	r3, [r4, #8]
 8023cc4:	1b9b      	subs	r3, r3, r6
 8023cc6:	60a3      	str	r3, [r4, #8]
 8023cc8:	6823      	ldr	r3, [r4, #0]
 8023cca:	441e      	add	r6, r3
 8023ccc:	6026      	str	r6, [r4, #0]
 8023cce:	2000      	movs	r0, #0
 8023cd0:	e7dc      	b.n	8023c8c <__ssputs_r+0x58>
 8023cd2:	462a      	mov	r2, r5
 8023cd4:	f7ff ff88 	bl	8023be8 <_realloc_r>
 8023cd8:	4606      	mov	r6, r0
 8023cda:	2800      	cmp	r0, #0
 8023cdc:	d1e2      	bne.n	8023ca4 <__ssputs_r+0x70>
 8023cde:	6921      	ldr	r1, [r4, #16]
 8023ce0:	4650      	mov	r0, sl
 8023ce2:	f7fc fa85 	bl	80201f0 <_free_r>
 8023ce6:	e7c8      	b.n	8023c7a <__ssputs_r+0x46>

08023ce8 <_svfiprintf_r>:
 8023ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023cec:	461d      	mov	r5, r3
 8023cee:	898b      	ldrh	r3, [r1, #12]
 8023cf0:	061f      	lsls	r7, r3, #24
 8023cf2:	b09d      	sub	sp, #116	; 0x74
 8023cf4:	4680      	mov	r8, r0
 8023cf6:	460c      	mov	r4, r1
 8023cf8:	4616      	mov	r6, r2
 8023cfa:	d50f      	bpl.n	8023d1c <_svfiprintf_r+0x34>
 8023cfc:	690b      	ldr	r3, [r1, #16]
 8023cfe:	b96b      	cbnz	r3, 8023d1c <_svfiprintf_r+0x34>
 8023d00:	2140      	movs	r1, #64	; 0x40
 8023d02:	f7fc fac3 	bl	802028c <_malloc_r>
 8023d06:	6020      	str	r0, [r4, #0]
 8023d08:	6120      	str	r0, [r4, #16]
 8023d0a:	b928      	cbnz	r0, 8023d18 <_svfiprintf_r+0x30>
 8023d0c:	230c      	movs	r3, #12
 8023d0e:	f8c8 3000 	str.w	r3, [r8]
 8023d12:	f04f 30ff 	mov.w	r0, #4294967295
 8023d16:	e0c8      	b.n	8023eaa <_svfiprintf_r+0x1c2>
 8023d18:	2340      	movs	r3, #64	; 0x40
 8023d1a:	6163      	str	r3, [r4, #20]
 8023d1c:	2300      	movs	r3, #0
 8023d1e:	9309      	str	r3, [sp, #36]	; 0x24
 8023d20:	2320      	movs	r3, #32
 8023d22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8023d26:	2330      	movs	r3, #48	; 0x30
 8023d28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023d2c:	9503      	str	r5, [sp, #12]
 8023d2e:	f04f 0b01 	mov.w	fp, #1
 8023d32:	4637      	mov	r7, r6
 8023d34:	463d      	mov	r5, r7
 8023d36:	f815 3b01 	ldrb.w	r3, [r5], #1
 8023d3a:	b10b      	cbz	r3, 8023d40 <_svfiprintf_r+0x58>
 8023d3c:	2b25      	cmp	r3, #37	; 0x25
 8023d3e:	d13e      	bne.n	8023dbe <_svfiprintf_r+0xd6>
 8023d40:	ebb7 0a06 	subs.w	sl, r7, r6
 8023d44:	d00b      	beq.n	8023d5e <_svfiprintf_r+0x76>
 8023d46:	4653      	mov	r3, sl
 8023d48:	4632      	mov	r2, r6
 8023d4a:	4621      	mov	r1, r4
 8023d4c:	4640      	mov	r0, r8
 8023d4e:	f7ff ff71 	bl	8023c34 <__ssputs_r>
 8023d52:	3001      	adds	r0, #1
 8023d54:	f000 80a4 	beq.w	8023ea0 <_svfiprintf_r+0x1b8>
 8023d58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023d5a:	4453      	add	r3, sl
 8023d5c:	9309      	str	r3, [sp, #36]	; 0x24
 8023d5e:	783b      	ldrb	r3, [r7, #0]
 8023d60:	2b00      	cmp	r3, #0
 8023d62:	f000 809d 	beq.w	8023ea0 <_svfiprintf_r+0x1b8>
 8023d66:	2300      	movs	r3, #0
 8023d68:	f04f 32ff 	mov.w	r2, #4294967295
 8023d6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023d70:	9304      	str	r3, [sp, #16]
 8023d72:	9307      	str	r3, [sp, #28]
 8023d74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8023d78:	931a      	str	r3, [sp, #104]	; 0x68
 8023d7a:	462f      	mov	r7, r5
 8023d7c:	2205      	movs	r2, #5
 8023d7e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8023d82:	4850      	ldr	r0, [pc, #320]	; (8023ec4 <_svfiprintf_r+0x1dc>)
 8023d84:	f7dc fa74 	bl	8000270 <memchr>
 8023d88:	9b04      	ldr	r3, [sp, #16]
 8023d8a:	b9d0      	cbnz	r0, 8023dc2 <_svfiprintf_r+0xda>
 8023d8c:	06d9      	lsls	r1, r3, #27
 8023d8e:	bf44      	itt	mi
 8023d90:	2220      	movmi	r2, #32
 8023d92:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8023d96:	071a      	lsls	r2, r3, #28
 8023d98:	bf44      	itt	mi
 8023d9a:	222b      	movmi	r2, #43	; 0x2b
 8023d9c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8023da0:	782a      	ldrb	r2, [r5, #0]
 8023da2:	2a2a      	cmp	r2, #42	; 0x2a
 8023da4:	d015      	beq.n	8023dd2 <_svfiprintf_r+0xea>
 8023da6:	9a07      	ldr	r2, [sp, #28]
 8023da8:	462f      	mov	r7, r5
 8023daa:	2000      	movs	r0, #0
 8023dac:	250a      	movs	r5, #10
 8023dae:	4639      	mov	r1, r7
 8023db0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023db4:	3b30      	subs	r3, #48	; 0x30
 8023db6:	2b09      	cmp	r3, #9
 8023db8:	d94d      	bls.n	8023e56 <_svfiprintf_r+0x16e>
 8023dba:	b1b8      	cbz	r0, 8023dec <_svfiprintf_r+0x104>
 8023dbc:	e00f      	b.n	8023dde <_svfiprintf_r+0xf6>
 8023dbe:	462f      	mov	r7, r5
 8023dc0:	e7b8      	b.n	8023d34 <_svfiprintf_r+0x4c>
 8023dc2:	4a40      	ldr	r2, [pc, #256]	; (8023ec4 <_svfiprintf_r+0x1dc>)
 8023dc4:	1a80      	subs	r0, r0, r2
 8023dc6:	fa0b f000 	lsl.w	r0, fp, r0
 8023dca:	4318      	orrs	r0, r3
 8023dcc:	9004      	str	r0, [sp, #16]
 8023dce:	463d      	mov	r5, r7
 8023dd0:	e7d3      	b.n	8023d7a <_svfiprintf_r+0x92>
 8023dd2:	9a03      	ldr	r2, [sp, #12]
 8023dd4:	1d11      	adds	r1, r2, #4
 8023dd6:	6812      	ldr	r2, [r2, #0]
 8023dd8:	9103      	str	r1, [sp, #12]
 8023dda:	2a00      	cmp	r2, #0
 8023ddc:	db01      	blt.n	8023de2 <_svfiprintf_r+0xfa>
 8023dde:	9207      	str	r2, [sp, #28]
 8023de0:	e004      	b.n	8023dec <_svfiprintf_r+0x104>
 8023de2:	4252      	negs	r2, r2
 8023de4:	f043 0302 	orr.w	r3, r3, #2
 8023de8:	9207      	str	r2, [sp, #28]
 8023dea:	9304      	str	r3, [sp, #16]
 8023dec:	783b      	ldrb	r3, [r7, #0]
 8023dee:	2b2e      	cmp	r3, #46	; 0x2e
 8023df0:	d10c      	bne.n	8023e0c <_svfiprintf_r+0x124>
 8023df2:	787b      	ldrb	r3, [r7, #1]
 8023df4:	2b2a      	cmp	r3, #42	; 0x2a
 8023df6:	d133      	bne.n	8023e60 <_svfiprintf_r+0x178>
 8023df8:	9b03      	ldr	r3, [sp, #12]
 8023dfa:	1d1a      	adds	r2, r3, #4
 8023dfc:	681b      	ldr	r3, [r3, #0]
 8023dfe:	9203      	str	r2, [sp, #12]
 8023e00:	2b00      	cmp	r3, #0
 8023e02:	bfb8      	it	lt
 8023e04:	f04f 33ff 	movlt.w	r3, #4294967295
 8023e08:	3702      	adds	r7, #2
 8023e0a:	9305      	str	r3, [sp, #20]
 8023e0c:	4d2e      	ldr	r5, [pc, #184]	; (8023ec8 <_svfiprintf_r+0x1e0>)
 8023e0e:	7839      	ldrb	r1, [r7, #0]
 8023e10:	2203      	movs	r2, #3
 8023e12:	4628      	mov	r0, r5
 8023e14:	f7dc fa2c 	bl	8000270 <memchr>
 8023e18:	b138      	cbz	r0, 8023e2a <_svfiprintf_r+0x142>
 8023e1a:	2340      	movs	r3, #64	; 0x40
 8023e1c:	1b40      	subs	r0, r0, r5
 8023e1e:	fa03 f000 	lsl.w	r0, r3, r0
 8023e22:	9b04      	ldr	r3, [sp, #16]
 8023e24:	4303      	orrs	r3, r0
 8023e26:	3701      	adds	r7, #1
 8023e28:	9304      	str	r3, [sp, #16]
 8023e2a:	7839      	ldrb	r1, [r7, #0]
 8023e2c:	4827      	ldr	r0, [pc, #156]	; (8023ecc <_svfiprintf_r+0x1e4>)
 8023e2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023e32:	2206      	movs	r2, #6
 8023e34:	1c7e      	adds	r6, r7, #1
 8023e36:	f7dc fa1b 	bl	8000270 <memchr>
 8023e3a:	2800      	cmp	r0, #0
 8023e3c:	d038      	beq.n	8023eb0 <_svfiprintf_r+0x1c8>
 8023e3e:	4b24      	ldr	r3, [pc, #144]	; (8023ed0 <_svfiprintf_r+0x1e8>)
 8023e40:	bb13      	cbnz	r3, 8023e88 <_svfiprintf_r+0x1a0>
 8023e42:	9b03      	ldr	r3, [sp, #12]
 8023e44:	3307      	adds	r3, #7
 8023e46:	f023 0307 	bic.w	r3, r3, #7
 8023e4a:	3308      	adds	r3, #8
 8023e4c:	9303      	str	r3, [sp, #12]
 8023e4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023e50:	444b      	add	r3, r9
 8023e52:	9309      	str	r3, [sp, #36]	; 0x24
 8023e54:	e76d      	b.n	8023d32 <_svfiprintf_r+0x4a>
 8023e56:	fb05 3202 	mla	r2, r5, r2, r3
 8023e5a:	2001      	movs	r0, #1
 8023e5c:	460f      	mov	r7, r1
 8023e5e:	e7a6      	b.n	8023dae <_svfiprintf_r+0xc6>
 8023e60:	2300      	movs	r3, #0
 8023e62:	3701      	adds	r7, #1
 8023e64:	9305      	str	r3, [sp, #20]
 8023e66:	4619      	mov	r1, r3
 8023e68:	250a      	movs	r5, #10
 8023e6a:	4638      	mov	r0, r7
 8023e6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023e70:	3a30      	subs	r2, #48	; 0x30
 8023e72:	2a09      	cmp	r2, #9
 8023e74:	d903      	bls.n	8023e7e <_svfiprintf_r+0x196>
 8023e76:	2b00      	cmp	r3, #0
 8023e78:	d0c8      	beq.n	8023e0c <_svfiprintf_r+0x124>
 8023e7a:	9105      	str	r1, [sp, #20]
 8023e7c:	e7c6      	b.n	8023e0c <_svfiprintf_r+0x124>
 8023e7e:	fb05 2101 	mla	r1, r5, r1, r2
 8023e82:	2301      	movs	r3, #1
 8023e84:	4607      	mov	r7, r0
 8023e86:	e7f0      	b.n	8023e6a <_svfiprintf_r+0x182>
 8023e88:	ab03      	add	r3, sp, #12
 8023e8a:	9300      	str	r3, [sp, #0]
 8023e8c:	4622      	mov	r2, r4
 8023e8e:	4b11      	ldr	r3, [pc, #68]	; (8023ed4 <_svfiprintf_r+0x1ec>)
 8023e90:	a904      	add	r1, sp, #16
 8023e92:	4640      	mov	r0, r8
 8023e94:	f7fc fadc 	bl	8020450 <_printf_float>
 8023e98:	f1b0 3fff 	cmp.w	r0, #4294967295
 8023e9c:	4681      	mov	r9, r0
 8023e9e:	d1d6      	bne.n	8023e4e <_svfiprintf_r+0x166>
 8023ea0:	89a3      	ldrh	r3, [r4, #12]
 8023ea2:	065b      	lsls	r3, r3, #25
 8023ea4:	f53f af35 	bmi.w	8023d12 <_svfiprintf_r+0x2a>
 8023ea8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023eaa:	b01d      	add	sp, #116	; 0x74
 8023eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023eb0:	ab03      	add	r3, sp, #12
 8023eb2:	9300      	str	r3, [sp, #0]
 8023eb4:	4622      	mov	r2, r4
 8023eb6:	4b07      	ldr	r3, [pc, #28]	; (8023ed4 <_svfiprintf_r+0x1ec>)
 8023eb8:	a904      	add	r1, sp, #16
 8023eba:	4640      	mov	r0, r8
 8023ebc:	f7fc fd6a 	bl	8020994 <_printf_i>
 8023ec0:	e7ea      	b.n	8023e98 <_svfiprintf_r+0x1b0>
 8023ec2:	bf00      	nop
 8023ec4:	080401ac 	.word	0x080401ac
 8023ec8:	080401b2 	.word	0x080401b2
 8023ecc:	080401b6 	.word	0x080401b6
 8023ed0:	08020451 	.word	0x08020451
 8023ed4:	08023c35 	.word	0x08023c35

08023ed8 <_sungetc_r>:
 8023ed8:	b538      	push	{r3, r4, r5, lr}
 8023eda:	1c4b      	adds	r3, r1, #1
 8023edc:	4614      	mov	r4, r2
 8023ede:	d103      	bne.n	8023ee8 <_sungetc_r+0x10>
 8023ee0:	f04f 35ff 	mov.w	r5, #4294967295
 8023ee4:	4628      	mov	r0, r5
 8023ee6:	bd38      	pop	{r3, r4, r5, pc}
 8023ee8:	8993      	ldrh	r3, [r2, #12]
 8023eea:	f023 0320 	bic.w	r3, r3, #32
 8023eee:	8193      	strh	r3, [r2, #12]
 8023ef0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8023ef2:	6852      	ldr	r2, [r2, #4]
 8023ef4:	b2cd      	uxtb	r5, r1
 8023ef6:	b18b      	cbz	r3, 8023f1c <_sungetc_r+0x44>
 8023ef8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8023efa:	4293      	cmp	r3, r2
 8023efc:	dd08      	ble.n	8023f10 <_sungetc_r+0x38>
 8023efe:	6823      	ldr	r3, [r4, #0]
 8023f00:	1e5a      	subs	r2, r3, #1
 8023f02:	6022      	str	r2, [r4, #0]
 8023f04:	f803 5c01 	strb.w	r5, [r3, #-1]
 8023f08:	6863      	ldr	r3, [r4, #4]
 8023f0a:	3301      	adds	r3, #1
 8023f0c:	6063      	str	r3, [r4, #4]
 8023f0e:	e7e9      	b.n	8023ee4 <_sungetc_r+0xc>
 8023f10:	4621      	mov	r1, r4
 8023f12:	f000 fc9d 	bl	8024850 <__submore>
 8023f16:	2800      	cmp	r0, #0
 8023f18:	d0f1      	beq.n	8023efe <_sungetc_r+0x26>
 8023f1a:	e7e1      	b.n	8023ee0 <_sungetc_r+0x8>
 8023f1c:	6921      	ldr	r1, [r4, #16]
 8023f1e:	6823      	ldr	r3, [r4, #0]
 8023f20:	b151      	cbz	r1, 8023f38 <_sungetc_r+0x60>
 8023f22:	4299      	cmp	r1, r3
 8023f24:	d208      	bcs.n	8023f38 <_sungetc_r+0x60>
 8023f26:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8023f2a:	42a9      	cmp	r1, r5
 8023f2c:	d104      	bne.n	8023f38 <_sungetc_r+0x60>
 8023f2e:	3b01      	subs	r3, #1
 8023f30:	3201      	adds	r2, #1
 8023f32:	6023      	str	r3, [r4, #0]
 8023f34:	6062      	str	r2, [r4, #4]
 8023f36:	e7d5      	b.n	8023ee4 <_sungetc_r+0xc>
 8023f38:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8023f3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023f40:	6363      	str	r3, [r4, #52]	; 0x34
 8023f42:	2303      	movs	r3, #3
 8023f44:	63a3      	str	r3, [r4, #56]	; 0x38
 8023f46:	4623      	mov	r3, r4
 8023f48:	f803 5f46 	strb.w	r5, [r3, #70]!
 8023f4c:	6023      	str	r3, [r4, #0]
 8023f4e:	2301      	movs	r3, #1
 8023f50:	e7dc      	b.n	8023f0c <_sungetc_r+0x34>

08023f52 <__ssrefill_r>:
 8023f52:	b510      	push	{r4, lr}
 8023f54:	460c      	mov	r4, r1
 8023f56:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8023f58:	b169      	cbz	r1, 8023f76 <__ssrefill_r+0x24>
 8023f5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023f5e:	4299      	cmp	r1, r3
 8023f60:	d001      	beq.n	8023f66 <__ssrefill_r+0x14>
 8023f62:	f7fc f945 	bl	80201f0 <_free_r>
 8023f66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023f68:	6063      	str	r3, [r4, #4]
 8023f6a:	2000      	movs	r0, #0
 8023f6c:	6360      	str	r0, [r4, #52]	; 0x34
 8023f6e:	b113      	cbz	r3, 8023f76 <__ssrefill_r+0x24>
 8023f70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8023f72:	6023      	str	r3, [r4, #0]
 8023f74:	bd10      	pop	{r4, pc}
 8023f76:	6923      	ldr	r3, [r4, #16]
 8023f78:	6023      	str	r3, [r4, #0]
 8023f7a:	2300      	movs	r3, #0
 8023f7c:	6063      	str	r3, [r4, #4]
 8023f7e:	89a3      	ldrh	r3, [r4, #12]
 8023f80:	f043 0320 	orr.w	r3, r3, #32
 8023f84:	81a3      	strh	r3, [r4, #12]
 8023f86:	f04f 30ff 	mov.w	r0, #4294967295
 8023f8a:	e7f3      	b.n	8023f74 <__ssrefill_r+0x22>

08023f8c <__ssvfiscanf_r>:
 8023f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023f90:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8023f94:	460c      	mov	r4, r1
 8023f96:	2100      	movs	r1, #0
 8023f98:	9144      	str	r1, [sp, #272]	; 0x110
 8023f9a:	9145      	str	r1, [sp, #276]	; 0x114
 8023f9c:	499f      	ldr	r1, [pc, #636]	; (802421c <__ssvfiscanf_r+0x290>)
 8023f9e:	91a0      	str	r1, [sp, #640]	; 0x280
 8023fa0:	f10d 0804 	add.w	r8, sp, #4
 8023fa4:	499e      	ldr	r1, [pc, #632]	; (8024220 <__ssvfiscanf_r+0x294>)
 8023fa6:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8024224 <__ssvfiscanf_r+0x298>
 8023faa:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8023fae:	4606      	mov	r6, r0
 8023fb0:	4692      	mov	sl, r2
 8023fb2:	91a1      	str	r1, [sp, #644]	; 0x284
 8023fb4:	9300      	str	r3, [sp, #0]
 8023fb6:	270a      	movs	r7, #10
 8023fb8:	f89a 3000 	ldrb.w	r3, [sl]
 8023fbc:	2b00      	cmp	r3, #0
 8023fbe:	f000 812a 	beq.w	8024216 <__ssvfiscanf_r+0x28a>
 8023fc2:	4655      	mov	r5, sl
 8023fc4:	f7fb fe14 	bl	801fbf0 <__locale_ctype_ptr>
 8023fc8:	f815 bb01 	ldrb.w	fp, [r5], #1
 8023fcc:	4458      	add	r0, fp
 8023fce:	7843      	ldrb	r3, [r0, #1]
 8023fd0:	f013 0308 	ands.w	r3, r3, #8
 8023fd4:	d01c      	beq.n	8024010 <__ssvfiscanf_r+0x84>
 8023fd6:	6863      	ldr	r3, [r4, #4]
 8023fd8:	2b00      	cmp	r3, #0
 8023fda:	dd12      	ble.n	8024002 <__ssvfiscanf_r+0x76>
 8023fdc:	f7fb fe08 	bl	801fbf0 <__locale_ctype_ptr>
 8023fe0:	6823      	ldr	r3, [r4, #0]
 8023fe2:	781a      	ldrb	r2, [r3, #0]
 8023fe4:	4410      	add	r0, r2
 8023fe6:	7842      	ldrb	r2, [r0, #1]
 8023fe8:	0712      	lsls	r2, r2, #28
 8023fea:	d401      	bmi.n	8023ff0 <__ssvfiscanf_r+0x64>
 8023fec:	46aa      	mov	sl, r5
 8023fee:	e7e3      	b.n	8023fb8 <__ssvfiscanf_r+0x2c>
 8023ff0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8023ff2:	3201      	adds	r2, #1
 8023ff4:	9245      	str	r2, [sp, #276]	; 0x114
 8023ff6:	6862      	ldr	r2, [r4, #4]
 8023ff8:	3301      	adds	r3, #1
 8023ffa:	3a01      	subs	r2, #1
 8023ffc:	6062      	str	r2, [r4, #4]
 8023ffe:	6023      	str	r3, [r4, #0]
 8024000:	e7e9      	b.n	8023fd6 <__ssvfiscanf_r+0x4a>
 8024002:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8024004:	4621      	mov	r1, r4
 8024006:	4630      	mov	r0, r6
 8024008:	4798      	blx	r3
 802400a:	2800      	cmp	r0, #0
 802400c:	d0e6      	beq.n	8023fdc <__ssvfiscanf_r+0x50>
 802400e:	e7ed      	b.n	8023fec <__ssvfiscanf_r+0x60>
 8024010:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8024014:	f040 8082 	bne.w	802411c <__ssvfiscanf_r+0x190>
 8024018:	9343      	str	r3, [sp, #268]	; 0x10c
 802401a:	9341      	str	r3, [sp, #260]	; 0x104
 802401c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8024020:	2b2a      	cmp	r3, #42	; 0x2a
 8024022:	d103      	bne.n	802402c <__ssvfiscanf_r+0xa0>
 8024024:	2310      	movs	r3, #16
 8024026:	9341      	str	r3, [sp, #260]	; 0x104
 8024028:	f10a 0502 	add.w	r5, sl, #2
 802402c:	46aa      	mov	sl, r5
 802402e:	f815 1b01 	ldrb.w	r1, [r5], #1
 8024032:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8024036:	2a09      	cmp	r2, #9
 8024038:	d922      	bls.n	8024080 <__ssvfiscanf_r+0xf4>
 802403a:	2203      	movs	r2, #3
 802403c:	4879      	ldr	r0, [pc, #484]	; (8024224 <__ssvfiscanf_r+0x298>)
 802403e:	f7dc f917 	bl	8000270 <memchr>
 8024042:	b138      	cbz	r0, 8024054 <__ssvfiscanf_r+0xc8>
 8024044:	eba0 0309 	sub.w	r3, r0, r9
 8024048:	2001      	movs	r0, #1
 802404a:	4098      	lsls	r0, r3
 802404c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802404e:	4318      	orrs	r0, r3
 8024050:	9041      	str	r0, [sp, #260]	; 0x104
 8024052:	46aa      	mov	sl, r5
 8024054:	f89a 3000 	ldrb.w	r3, [sl]
 8024058:	2b67      	cmp	r3, #103	; 0x67
 802405a:	f10a 0501 	add.w	r5, sl, #1
 802405e:	d82b      	bhi.n	80240b8 <__ssvfiscanf_r+0x12c>
 8024060:	2b65      	cmp	r3, #101	; 0x65
 8024062:	f080 809f 	bcs.w	80241a4 <__ssvfiscanf_r+0x218>
 8024066:	2b47      	cmp	r3, #71	; 0x47
 8024068:	d810      	bhi.n	802408c <__ssvfiscanf_r+0x100>
 802406a:	2b45      	cmp	r3, #69	; 0x45
 802406c:	f080 809a 	bcs.w	80241a4 <__ssvfiscanf_r+0x218>
 8024070:	2b00      	cmp	r3, #0
 8024072:	d06c      	beq.n	802414e <__ssvfiscanf_r+0x1c2>
 8024074:	2b25      	cmp	r3, #37	; 0x25
 8024076:	d051      	beq.n	802411c <__ssvfiscanf_r+0x190>
 8024078:	2303      	movs	r3, #3
 802407a:	9347      	str	r3, [sp, #284]	; 0x11c
 802407c:	9742      	str	r7, [sp, #264]	; 0x108
 802407e:	e027      	b.n	80240d0 <__ssvfiscanf_r+0x144>
 8024080:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8024082:	fb07 1303 	mla	r3, r7, r3, r1
 8024086:	3b30      	subs	r3, #48	; 0x30
 8024088:	9343      	str	r3, [sp, #268]	; 0x10c
 802408a:	e7cf      	b.n	802402c <__ssvfiscanf_r+0xa0>
 802408c:	2b5b      	cmp	r3, #91	; 0x5b
 802408e:	d06a      	beq.n	8024166 <__ssvfiscanf_r+0x1da>
 8024090:	d80c      	bhi.n	80240ac <__ssvfiscanf_r+0x120>
 8024092:	2b58      	cmp	r3, #88	; 0x58
 8024094:	d1f0      	bne.n	8024078 <__ssvfiscanf_r+0xec>
 8024096:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8024098:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802409c:	9241      	str	r2, [sp, #260]	; 0x104
 802409e:	2210      	movs	r2, #16
 80240a0:	9242      	str	r2, [sp, #264]	; 0x108
 80240a2:	2b6e      	cmp	r3, #110	; 0x6e
 80240a4:	bf8c      	ite	hi
 80240a6:	2304      	movhi	r3, #4
 80240a8:	2303      	movls	r3, #3
 80240aa:	e010      	b.n	80240ce <__ssvfiscanf_r+0x142>
 80240ac:	2b63      	cmp	r3, #99	; 0x63
 80240ae:	d065      	beq.n	802417c <__ssvfiscanf_r+0x1f0>
 80240b0:	2b64      	cmp	r3, #100	; 0x64
 80240b2:	d1e1      	bne.n	8024078 <__ssvfiscanf_r+0xec>
 80240b4:	9742      	str	r7, [sp, #264]	; 0x108
 80240b6:	e7f4      	b.n	80240a2 <__ssvfiscanf_r+0x116>
 80240b8:	2b70      	cmp	r3, #112	; 0x70
 80240ba:	d04b      	beq.n	8024154 <__ssvfiscanf_r+0x1c8>
 80240bc:	d826      	bhi.n	802410c <__ssvfiscanf_r+0x180>
 80240be:	2b6e      	cmp	r3, #110	; 0x6e
 80240c0:	d062      	beq.n	8024188 <__ssvfiscanf_r+0x1fc>
 80240c2:	d84c      	bhi.n	802415e <__ssvfiscanf_r+0x1d2>
 80240c4:	2b69      	cmp	r3, #105	; 0x69
 80240c6:	d1d7      	bne.n	8024078 <__ssvfiscanf_r+0xec>
 80240c8:	2300      	movs	r3, #0
 80240ca:	9342      	str	r3, [sp, #264]	; 0x108
 80240cc:	2303      	movs	r3, #3
 80240ce:	9347      	str	r3, [sp, #284]	; 0x11c
 80240d0:	6863      	ldr	r3, [r4, #4]
 80240d2:	2b00      	cmp	r3, #0
 80240d4:	dd68      	ble.n	80241a8 <__ssvfiscanf_r+0x21c>
 80240d6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80240d8:	0659      	lsls	r1, r3, #25
 80240da:	d407      	bmi.n	80240ec <__ssvfiscanf_r+0x160>
 80240dc:	f7fb fd88 	bl	801fbf0 <__locale_ctype_ptr>
 80240e0:	6823      	ldr	r3, [r4, #0]
 80240e2:	781a      	ldrb	r2, [r3, #0]
 80240e4:	4410      	add	r0, r2
 80240e6:	7842      	ldrb	r2, [r0, #1]
 80240e8:	0712      	lsls	r2, r2, #28
 80240ea:	d464      	bmi.n	80241b6 <__ssvfiscanf_r+0x22a>
 80240ec:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80240ee:	2b02      	cmp	r3, #2
 80240f0:	dc73      	bgt.n	80241da <__ssvfiscanf_r+0x24e>
 80240f2:	466b      	mov	r3, sp
 80240f4:	4622      	mov	r2, r4
 80240f6:	a941      	add	r1, sp, #260	; 0x104
 80240f8:	4630      	mov	r0, r6
 80240fa:	f000 f9d7 	bl	80244ac <_scanf_chars>
 80240fe:	2801      	cmp	r0, #1
 8024100:	f000 8089 	beq.w	8024216 <__ssvfiscanf_r+0x28a>
 8024104:	2802      	cmp	r0, #2
 8024106:	f47f af71 	bne.w	8023fec <__ssvfiscanf_r+0x60>
 802410a:	e01d      	b.n	8024148 <__ssvfiscanf_r+0x1bc>
 802410c:	2b75      	cmp	r3, #117	; 0x75
 802410e:	d0d1      	beq.n	80240b4 <__ssvfiscanf_r+0x128>
 8024110:	2b78      	cmp	r3, #120	; 0x78
 8024112:	d0c0      	beq.n	8024096 <__ssvfiscanf_r+0x10a>
 8024114:	2b73      	cmp	r3, #115	; 0x73
 8024116:	d1af      	bne.n	8024078 <__ssvfiscanf_r+0xec>
 8024118:	2302      	movs	r3, #2
 802411a:	e7d8      	b.n	80240ce <__ssvfiscanf_r+0x142>
 802411c:	6863      	ldr	r3, [r4, #4]
 802411e:	2b00      	cmp	r3, #0
 8024120:	dd0c      	ble.n	802413c <__ssvfiscanf_r+0x1b0>
 8024122:	6823      	ldr	r3, [r4, #0]
 8024124:	781a      	ldrb	r2, [r3, #0]
 8024126:	455a      	cmp	r2, fp
 8024128:	d175      	bne.n	8024216 <__ssvfiscanf_r+0x28a>
 802412a:	3301      	adds	r3, #1
 802412c:	6862      	ldr	r2, [r4, #4]
 802412e:	6023      	str	r3, [r4, #0]
 8024130:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8024132:	3a01      	subs	r2, #1
 8024134:	3301      	adds	r3, #1
 8024136:	6062      	str	r2, [r4, #4]
 8024138:	9345      	str	r3, [sp, #276]	; 0x114
 802413a:	e757      	b.n	8023fec <__ssvfiscanf_r+0x60>
 802413c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802413e:	4621      	mov	r1, r4
 8024140:	4630      	mov	r0, r6
 8024142:	4798      	blx	r3
 8024144:	2800      	cmp	r0, #0
 8024146:	d0ec      	beq.n	8024122 <__ssvfiscanf_r+0x196>
 8024148:	9844      	ldr	r0, [sp, #272]	; 0x110
 802414a:	2800      	cmp	r0, #0
 802414c:	d159      	bne.n	8024202 <__ssvfiscanf_r+0x276>
 802414e:	f04f 30ff 	mov.w	r0, #4294967295
 8024152:	e05c      	b.n	802420e <__ssvfiscanf_r+0x282>
 8024154:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8024156:	f042 0220 	orr.w	r2, r2, #32
 802415a:	9241      	str	r2, [sp, #260]	; 0x104
 802415c:	e79b      	b.n	8024096 <__ssvfiscanf_r+0x10a>
 802415e:	2308      	movs	r3, #8
 8024160:	9342      	str	r3, [sp, #264]	; 0x108
 8024162:	2304      	movs	r3, #4
 8024164:	e7b3      	b.n	80240ce <__ssvfiscanf_r+0x142>
 8024166:	4629      	mov	r1, r5
 8024168:	4640      	mov	r0, r8
 802416a:	f000 fb3f 	bl	80247ec <__sccl>
 802416e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8024170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024174:	9341      	str	r3, [sp, #260]	; 0x104
 8024176:	4605      	mov	r5, r0
 8024178:	2301      	movs	r3, #1
 802417a:	e7a8      	b.n	80240ce <__ssvfiscanf_r+0x142>
 802417c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802417e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024182:	9341      	str	r3, [sp, #260]	; 0x104
 8024184:	2300      	movs	r3, #0
 8024186:	e7a2      	b.n	80240ce <__ssvfiscanf_r+0x142>
 8024188:	9841      	ldr	r0, [sp, #260]	; 0x104
 802418a:	06c3      	lsls	r3, r0, #27
 802418c:	f53f af2e 	bmi.w	8023fec <__ssvfiscanf_r+0x60>
 8024190:	9b00      	ldr	r3, [sp, #0]
 8024192:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8024194:	1d19      	adds	r1, r3, #4
 8024196:	9100      	str	r1, [sp, #0]
 8024198:	681b      	ldr	r3, [r3, #0]
 802419a:	07c0      	lsls	r0, r0, #31
 802419c:	bf4c      	ite	mi
 802419e:	801a      	strhmi	r2, [r3, #0]
 80241a0:	601a      	strpl	r2, [r3, #0]
 80241a2:	e723      	b.n	8023fec <__ssvfiscanf_r+0x60>
 80241a4:	2305      	movs	r3, #5
 80241a6:	e792      	b.n	80240ce <__ssvfiscanf_r+0x142>
 80241a8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80241aa:	4621      	mov	r1, r4
 80241ac:	4630      	mov	r0, r6
 80241ae:	4798      	blx	r3
 80241b0:	2800      	cmp	r0, #0
 80241b2:	d090      	beq.n	80240d6 <__ssvfiscanf_r+0x14a>
 80241b4:	e7c8      	b.n	8024148 <__ssvfiscanf_r+0x1bc>
 80241b6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80241b8:	3201      	adds	r2, #1
 80241ba:	9245      	str	r2, [sp, #276]	; 0x114
 80241bc:	6862      	ldr	r2, [r4, #4]
 80241be:	3a01      	subs	r2, #1
 80241c0:	2a00      	cmp	r2, #0
 80241c2:	6062      	str	r2, [r4, #4]
 80241c4:	dd02      	ble.n	80241cc <__ssvfiscanf_r+0x240>
 80241c6:	3301      	adds	r3, #1
 80241c8:	6023      	str	r3, [r4, #0]
 80241ca:	e787      	b.n	80240dc <__ssvfiscanf_r+0x150>
 80241cc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80241ce:	4621      	mov	r1, r4
 80241d0:	4630      	mov	r0, r6
 80241d2:	4798      	blx	r3
 80241d4:	2800      	cmp	r0, #0
 80241d6:	d081      	beq.n	80240dc <__ssvfiscanf_r+0x150>
 80241d8:	e7b6      	b.n	8024148 <__ssvfiscanf_r+0x1bc>
 80241da:	2b04      	cmp	r3, #4
 80241dc:	dc06      	bgt.n	80241ec <__ssvfiscanf_r+0x260>
 80241de:	466b      	mov	r3, sp
 80241e0:	4622      	mov	r2, r4
 80241e2:	a941      	add	r1, sp, #260	; 0x104
 80241e4:	4630      	mov	r0, r6
 80241e6:	f000 f9c5 	bl	8024574 <_scanf_i>
 80241ea:	e788      	b.n	80240fe <__ssvfiscanf_r+0x172>
 80241ec:	4b0e      	ldr	r3, [pc, #56]	; (8024228 <__ssvfiscanf_r+0x29c>)
 80241ee:	2b00      	cmp	r3, #0
 80241f0:	f43f aefc 	beq.w	8023fec <__ssvfiscanf_r+0x60>
 80241f4:	466b      	mov	r3, sp
 80241f6:	4622      	mov	r2, r4
 80241f8:	a941      	add	r1, sp, #260	; 0x104
 80241fa:	4630      	mov	r0, r6
 80241fc:	f3af 8000 	nop.w
 8024200:	e77d      	b.n	80240fe <__ssvfiscanf_r+0x172>
 8024202:	89a3      	ldrh	r3, [r4, #12]
 8024204:	f013 0f40 	tst.w	r3, #64	; 0x40
 8024208:	bf18      	it	ne
 802420a:	f04f 30ff 	movne.w	r0, #4294967295
 802420e:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8024212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024216:	9844      	ldr	r0, [sp, #272]	; 0x110
 8024218:	e7f9      	b.n	802420e <__ssvfiscanf_r+0x282>
 802421a:	bf00      	nop
 802421c:	08023ed9 	.word	0x08023ed9
 8024220:	08023f53 	.word	0x08023f53
 8024224:	080401b2 	.word	0x080401b2
 8024228:	00000000 	.word	0x00000000

0802422c <__sfputc_r>:
 802422c:	6893      	ldr	r3, [r2, #8]
 802422e:	3b01      	subs	r3, #1
 8024230:	2b00      	cmp	r3, #0
 8024232:	b410      	push	{r4}
 8024234:	6093      	str	r3, [r2, #8]
 8024236:	da08      	bge.n	802424a <__sfputc_r+0x1e>
 8024238:	6994      	ldr	r4, [r2, #24]
 802423a:	42a3      	cmp	r3, r4
 802423c:	db01      	blt.n	8024242 <__sfputc_r+0x16>
 802423e:	290a      	cmp	r1, #10
 8024240:	d103      	bne.n	802424a <__sfputc_r+0x1e>
 8024242:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024246:	f7fd bfcd 	b.w	80221e4 <__swbuf_r>
 802424a:	6813      	ldr	r3, [r2, #0]
 802424c:	1c58      	adds	r0, r3, #1
 802424e:	6010      	str	r0, [r2, #0]
 8024250:	7019      	strb	r1, [r3, #0]
 8024252:	4608      	mov	r0, r1
 8024254:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024258:	4770      	bx	lr

0802425a <__sfputs_r>:
 802425a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802425c:	4606      	mov	r6, r0
 802425e:	460f      	mov	r7, r1
 8024260:	4614      	mov	r4, r2
 8024262:	18d5      	adds	r5, r2, r3
 8024264:	42ac      	cmp	r4, r5
 8024266:	d101      	bne.n	802426c <__sfputs_r+0x12>
 8024268:	2000      	movs	r0, #0
 802426a:	e007      	b.n	802427c <__sfputs_r+0x22>
 802426c:	463a      	mov	r2, r7
 802426e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024272:	4630      	mov	r0, r6
 8024274:	f7ff ffda 	bl	802422c <__sfputc_r>
 8024278:	1c43      	adds	r3, r0, #1
 802427a:	d1f3      	bne.n	8024264 <__sfputs_r+0xa>
 802427c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08024280 <_vfiprintf_r>:
 8024280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024284:	460c      	mov	r4, r1
 8024286:	b09d      	sub	sp, #116	; 0x74
 8024288:	4617      	mov	r7, r2
 802428a:	461d      	mov	r5, r3
 802428c:	4606      	mov	r6, r0
 802428e:	b118      	cbz	r0, 8024298 <_vfiprintf_r+0x18>
 8024290:	6983      	ldr	r3, [r0, #24]
 8024292:	b90b      	cbnz	r3, 8024298 <_vfiprintf_r+0x18>
 8024294:	f7fe ffb4 	bl	8023200 <__sinit>
 8024298:	4b7c      	ldr	r3, [pc, #496]	; (802448c <_vfiprintf_r+0x20c>)
 802429a:	429c      	cmp	r4, r3
 802429c:	d158      	bne.n	8024350 <_vfiprintf_r+0xd0>
 802429e:	6874      	ldr	r4, [r6, #4]
 80242a0:	89a3      	ldrh	r3, [r4, #12]
 80242a2:	0718      	lsls	r0, r3, #28
 80242a4:	d55e      	bpl.n	8024364 <_vfiprintf_r+0xe4>
 80242a6:	6923      	ldr	r3, [r4, #16]
 80242a8:	2b00      	cmp	r3, #0
 80242aa:	d05b      	beq.n	8024364 <_vfiprintf_r+0xe4>
 80242ac:	2300      	movs	r3, #0
 80242ae:	9309      	str	r3, [sp, #36]	; 0x24
 80242b0:	2320      	movs	r3, #32
 80242b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80242b6:	2330      	movs	r3, #48	; 0x30
 80242b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80242bc:	9503      	str	r5, [sp, #12]
 80242be:	f04f 0b01 	mov.w	fp, #1
 80242c2:	46b8      	mov	r8, r7
 80242c4:	4645      	mov	r5, r8
 80242c6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80242ca:	b10b      	cbz	r3, 80242d0 <_vfiprintf_r+0x50>
 80242cc:	2b25      	cmp	r3, #37	; 0x25
 80242ce:	d154      	bne.n	802437a <_vfiprintf_r+0xfa>
 80242d0:	ebb8 0a07 	subs.w	sl, r8, r7
 80242d4:	d00b      	beq.n	80242ee <_vfiprintf_r+0x6e>
 80242d6:	4653      	mov	r3, sl
 80242d8:	463a      	mov	r2, r7
 80242da:	4621      	mov	r1, r4
 80242dc:	4630      	mov	r0, r6
 80242de:	f7ff ffbc 	bl	802425a <__sfputs_r>
 80242e2:	3001      	adds	r0, #1
 80242e4:	f000 80c2 	beq.w	802446c <_vfiprintf_r+0x1ec>
 80242e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80242ea:	4453      	add	r3, sl
 80242ec:	9309      	str	r3, [sp, #36]	; 0x24
 80242ee:	f898 3000 	ldrb.w	r3, [r8]
 80242f2:	2b00      	cmp	r3, #0
 80242f4:	f000 80ba 	beq.w	802446c <_vfiprintf_r+0x1ec>
 80242f8:	2300      	movs	r3, #0
 80242fa:	f04f 32ff 	mov.w	r2, #4294967295
 80242fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8024302:	9304      	str	r3, [sp, #16]
 8024304:	9307      	str	r3, [sp, #28]
 8024306:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802430a:	931a      	str	r3, [sp, #104]	; 0x68
 802430c:	46a8      	mov	r8, r5
 802430e:	2205      	movs	r2, #5
 8024310:	f818 1b01 	ldrb.w	r1, [r8], #1
 8024314:	485e      	ldr	r0, [pc, #376]	; (8024490 <_vfiprintf_r+0x210>)
 8024316:	f7db ffab 	bl	8000270 <memchr>
 802431a:	9b04      	ldr	r3, [sp, #16]
 802431c:	bb78      	cbnz	r0, 802437e <_vfiprintf_r+0xfe>
 802431e:	06d9      	lsls	r1, r3, #27
 8024320:	bf44      	itt	mi
 8024322:	2220      	movmi	r2, #32
 8024324:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8024328:	071a      	lsls	r2, r3, #28
 802432a:	bf44      	itt	mi
 802432c:	222b      	movmi	r2, #43	; 0x2b
 802432e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8024332:	782a      	ldrb	r2, [r5, #0]
 8024334:	2a2a      	cmp	r2, #42	; 0x2a
 8024336:	d02a      	beq.n	802438e <_vfiprintf_r+0x10e>
 8024338:	9a07      	ldr	r2, [sp, #28]
 802433a:	46a8      	mov	r8, r5
 802433c:	2000      	movs	r0, #0
 802433e:	250a      	movs	r5, #10
 8024340:	4641      	mov	r1, r8
 8024342:	f811 3b01 	ldrb.w	r3, [r1], #1
 8024346:	3b30      	subs	r3, #48	; 0x30
 8024348:	2b09      	cmp	r3, #9
 802434a:	d969      	bls.n	8024420 <_vfiprintf_r+0x1a0>
 802434c:	b360      	cbz	r0, 80243a8 <_vfiprintf_r+0x128>
 802434e:	e024      	b.n	802439a <_vfiprintf_r+0x11a>
 8024350:	4b50      	ldr	r3, [pc, #320]	; (8024494 <_vfiprintf_r+0x214>)
 8024352:	429c      	cmp	r4, r3
 8024354:	d101      	bne.n	802435a <_vfiprintf_r+0xda>
 8024356:	68b4      	ldr	r4, [r6, #8]
 8024358:	e7a2      	b.n	80242a0 <_vfiprintf_r+0x20>
 802435a:	4b4f      	ldr	r3, [pc, #316]	; (8024498 <_vfiprintf_r+0x218>)
 802435c:	429c      	cmp	r4, r3
 802435e:	bf08      	it	eq
 8024360:	68f4      	ldreq	r4, [r6, #12]
 8024362:	e79d      	b.n	80242a0 <_vfiprintf_r+0x20>
 8024364:	4621      	mov	r1, r4
 8024366:	4630      	mov	r0, r6
 8024368:	f7fd ffae 	bl	80222c8 <__swsetup_r>
 802436c:	2800      	cmp	r0, #0
 802436e:	d09d      	beq.n	80242ac <_vfiprintf_r+0x2c>
 8024370:	f04f 30ff 	mov.w	r0, #4294967295
 8024374:	b01d      	add	sp, #116	; 0x74
 8024376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802437a:	46a8      	mov	r8, r5
 802437c:	e7a2      	b.n	80242c4 <_vfiprintf_r+0x44>
 802437e:	4a44      	ldr	r2, [pc, #272]	; (8024490 <_vfiprintf_r+0x210>)
 8024380:	1a80      	subs	r0, r0, r2
 8024382:	fa0b f000 	lsl.w	r0, fp, r0
 8024386:	4318      	orrs	r0, r3
 8024388:	9004      	str	r0, [sp, #16]
 802438a:	4645      	mov	r5, r8
 802438c:	e7be      	b.n	802430c <_vfiprintf_r+0x8c>
 802438e:	9a03      	ldr	r2, [sp, #12]
 8024390:	1d11      	adds	r1, r2, #4
 8024392:	6812      	ldr	r2, [r2, #0]
 8024394:	9103      	str	r1, [sp, #12]
 8024396:	2a00      	cmp	r2, #0
 8024398:	db01      	blt.n	802439e <_vfiprintf_r+0x11e>
 802439a:	9207      	str	r2, [sp, #28]
 802439c:	e004      	b.n	80243a8 <_vfiprintf_r+0x128>
 802439e:	4252      	negs	r2, r2
 80243a0:	f043 0302 	orr.w	r3, r3, #2
 80243a4:	9207      	str	r2, [sp, #28]
 80243a6:	9304      	str	r3, [sp, #16]
 80243a8:	f898 3000 	ldrb.w	r3, [r8]
 80243ac:	2b2e      	cmp	r3, #46	; 0x2e
 80243ae:	d10e      	bne.n	80243ce <_vfiprintf_r+0x14e>
 80243b0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80243b4:	2b2a      	cmp	r3, #42	; 0x2a
 80243b6:	d138      	bne.n	802442a <_vfiprintf_r+0x1aa>
 80243b8:	9b03      	ldr	r3, [sp, #12]
 80243ba:	1d1a      	adds	r2, r3, #4
 80243bc:	681b      	ldr	r3, [r3, #0]
 80243be:	9203      	str	r2, [sp, #12]
 80243c0:	2b00      	cmp	r3, #0
 80243c2:	bfb8      	it	lt
 80243c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80243c8:	f108 0802 	add.w	r8, r8, #2
 80243cc:	9305      	str	r3, [sp, #20]
 80243ce:	4d33      	ldr	r5, [pc, #204]	; (802449c <_vfiprintf_r+0x21c>)
 80243d0:	f898 1000 	ldrb.w	r1, [r8]
 80243d4:	2203      	movs	r2, #3
 80243d6:	4628      	mov	r0, r5
 80243d8:	f7db ff4a 	bl	8000270 <memchr>
 80243dc:	b140      	cbz	r0, 80243f0 <_vfiprintf_r+0x170>
 80243de:	2340      	movs	r3, #64	; 0x40
 80243e0:	1b40      	subs	r0, r0, r5
 80243e2:	fa03 f000 	lsl.w	r0, r3, r0
 80243e6:	9b04      	ldr	r3, [sp, #16]
 80243e8:	4303      	orrs	r3, r0
 80243ea:	f108 0801 	add.w	r8, r8, #1
 80243ee:	9304      	str	r3, [sp, #16]
 80243f0:	f898 1000 	ldrb.w	r1, [r8]
 80243f4:	482a      	ldr	r0, [pc, #168]	; (80244a0 <_vfiprintf_r+0x220>)
 80243f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80243fa:	2206      	movs	r2, #6
 80243fc:	f108 0701 	add.w	r7, r8, #1
 8024400:	f7db ff36 	bl	8000270 <memchr>
 8024404:	2800      	cmp	r0, #0
 8024406:	d037      	beq.n	8024478 <_vfiprintf_r+0x1f8>
 8024408:	4b26      	ldr	r3, [pc, #152]	; (80244a4 <_vfiprintf_r+0x224>)
 802440a:	bb1b      	cbnz	r3, 8024454 <_vfiprintf_r+0x1d4>
 802440c:	9b03      	ldr	r3, [sp, #12]
 802440e:	3307      	adds	r3, #7
 8024410:	f023 0307 	bic.w	r3, r3, #7
 8024414:	3308      	adds	r3, #8
 8024416:	9303      	str	r3, [sp, #12]
 8024418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802441a:	444b      	add	r3, r9
 802441c:	9309      	str	r3, [sp, #36]	; 0x24
 802441e:	e750      	b.n	80242c2 <_vfiprintf_r+0x42>
 8024420:	fb05 3202 	mla	r2, r5, r2, r3
 8024424:	2001      	movs	r0, #1
 8024426:	4688      	mov	r8, r1
 8024428:	e78a      	b.n	8024340 <_vfiprintf_r+0xc0>
 802442a:	2300      	movs	r3, #0
 802442c:	f108 0801 	add.w	r8, r8, #1
 8024430:	9305      	str	r3, [sp, #20]
 8024432:	4619      	mov	r1, r3
 8024434:	250a      	movs	r5, #10
 8024436:	4640      	mov	r0, r8
 8024438:	f810 2b01 	ldrb.w	r2, [r0], #1
 802443c:	3a30      	subs	r2, #48	; 0x30
 802443e:	2a09      	cmp	r2, #9
 8024440:	d903      	bls.n	802444a <_vfiprintf_r+0x1ca>
 8024442:	2b00      	cmp	r3, #0
 8024444:	d0c3      	beq.n	80243ce <_vfiprintf_r+0x14e>
 8024446:	9105      	str	r1, [sp, #20]
 8024448:	e7c1      	b.n	80243ce <_vfiprintf_r+0x14e>
 802444a:	fb05 2101 	mla	r1, r5, r1, r2
 802444e:	2301      	movs	r3, #1
 8024450:	4680      	mov	r8, r0
 8024452:	e7f0      	b.n	8024436 <_vfiprintf_r+0x1b6>
 8024454:	ab03      	add	r3, sp, #12
 8024456:	9300      	str	r3, [sp, #0]
 8024458:	4622      	mov	r2, r4
 802445a:	4b13      	ldr	r3, [pc, #76]	; (80244a8 <_vfiprintf_r+0x228>)
 802445c:	a904      	add	r1, sp, #16
 802445e:	4630      	mov	r0, r6
 8024460:	f7fb fff6 	bl	8020450 <_printf_float>
 8024464:	f1b0 3fff 	cmp.w	r0, #4294967295
 8024468:	4681      	mov	r9, r0
 802446a:	d1d5      	bne.n	8024418 <_vfiprintf_r+0x198>
 802446c:	89a3      	ldrh	r3, [r4, #12]
 802446e:	065b      	lsls	r3, r3, #25
 8024470:	f53f af7e 	bmi.w	8024370 <_vfiprintf_r+0xf0>
 8024474:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024476:	e77d      	b.n	8024374 <_vfiprintf_r+0xf4>
 8024478:	ab03      	add	r3, sp, #12
 802447a:	9300      	str	r3, [sp, #0]
 802447c:	4622      	mov	r2, r4
 802447e:	4b0a      	ldr	r3, [pc, #40]	; (80244a8 <_vfiprintf_r+0x228>)
 8024480:	a904      	add	r1, sp, #16
 8024482:	4630      	mov	r0, r6
 8024484:	f7fc fa86 	bl	8020994 <_printf_i>
 8024488:	e7ec      	b.n	8024464 <_vfiprintf_r+0x1e4>
 802448a:	bf00      	nop
 802448c:	0804006c 	.word	0x0804006c
 8024490:	080401ac 	.word	0x080401ac
 8024494:	0804008c 	.word	0x0804008c
 8024498:	0804004c 	.word	0x0804004c
 802449c:	080401b2 	.word	0x080401b2
 80244a0:	080401b6 	.word	0x080401b6
 80244a4:	08020451 	.word	0x08020451
 80244a8:	0802425b 	.word	0x0802425b

080244ac <_scanf_chars>:
 80244ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80244b0:	4615      	mov	r5, r2
 80244b2:	688a      	ldr	r2, [r1, #8]
 80244b4:	4680      	mov	r8, r0
 80244b6:	460c      	mov	r4, r1
 80244b8:	b932      	cbnz	r2, 80244c8 <_scanf_chars+0x1c>
 80244ba:	698a      	ldr	r2, [r1, #24]
 80244bc:	2a00      	cmp	r2, #0
 80244be:	bf14      	ite	ne
 80244c0:	f04f 32ff 	movne.w	r2, #4294967295
 80244c4:	2201      	moveq	r2, #1
 80244c6:	608a      	str	r2, [r1, #8]
 80244c8:	6822      	ldr	r2, [r4, #0]
 80244ca:	06d1      	lsls	r1, r2, #27
 80244cc:	bf5f      	itttt	pl
 80244ce:	681a      	ldrpl	r2, [r3, #0]
 80244d0:	1d11      	addpl	r1, r2, #4
 80244d2:	6019      	strpl	r1, [r3, #0]
 80244d4:	6817      	ldrpl	r7, [r2, #0]
 80244d6:	2600      	movs	r6, #0
 80244d8:	69a3      	ldr	r3, [r4, #24]
 80244da:	b1db      	cbz	r3, 8024514 <_scanf_chars+0x68>
 80244dc:	2b01      	cmp	r3, #1
 80244de:	d107      	bne.n	80244f0 <_scanf_chars+0x44>
 80244e0:	682b      	ldr	r3, [r5, #0]
 80244e2:	6962      	ldr	r2, [r4, #20]
 80244e4:	781b      	ldrb	r3, [r3, #0]
 80244e6:	5cd3      	ldrb	r3, [r2, r3]
 80244e8:	b9a3      	cbnz	r3, 8024514 <_scanf_chars+0x68>
 80244ea:	2e00      	cmp	r6, #0
 80244ec:	d132      	bne.n	8024554 <_scanf_chars+0xa8>
 80244ee:	e006      	b.n	80244fe <_scanf_chars+0x52>
 80244f0:	2b02      	cmp	r3, #2
 80244f2:	d007      	beq.n	8024504 <_scanf_chars+0x58>
 80244f4:	2e00      	cmp	r6, #0
 80244f6:	d12d      	bne.n	8024554 <_scanf_chars+0xa8>
 80244f8:	69a3      	ldr	r3, [r4, #24]
 80244fa:	2b01      	cmp	r3, #1
 80244fc:	d12a      	bne.n	8024554 <_scanf_chars+0xa8>
 80244fe:	2001      	movs	r0, #1
 8024500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024504:	f7fb fb74 	bl	801fbf0 <__locale_ctype_ptr>
 8024508:	682b      	ldr	r3, [r5, #0]
 802450a:	781b      	ldrb	r3, [r3, #0]
 802450c:	4418      	add	r0, r3
 802450e:	7843      	ldrb	r3, [r0, #1]
 8024510:	071b      	lsls	r3, r3, #28
 8024512:	d4ef      	bmi.n	80244f4 <_scanf_chars+0x48>
 8024514:	6823      	ldr	r3, [r4, #0]
 8024516:	06da      	lsls	r2, r3, #27
 8024518:	bf5e      	ittt	pl
 802451a:	682b      	ldrpl	r3, [r5, #0]
 802451c:	781b      	ldrbpl	r3, [r3, #0]
 802451e:	703b      	strbpl	r3, [r7, #0]
 8024520:	682a      	ldr	r2, [r5, #0]
 8024522:	686b      	ldr	r3, [r5, #4]
 8024524:	f102 0201 	add.w	r2, r2, #1
 8024528:	602a      	str	r2, [r5, #0]
 802452a:	68a2      	ldr	r2, [r4, #8]
 802452c:	f103 33ff 	add.w	r3, r3, #4294967295
 8024530:	f102 32ff 	add.w	r2, r2, #4294967295
 8024534:	606b      	str	r3, [r5, #4]
 8024536:	f106 0601 	add.w	r6, r6, #1
 802453a:	bf58      	it	pl
 802453c:	3701      	addpl	r7, #1
 802453e:	60a2      	str	r2, [r4, #8]
 8024540:	b142      	cbz	r2, 8024554 <_scanf_chars+0xa8>
 8024542:	2b00      	cmp	r3, #0
 8024544:	dcc8      	bgt.n	80244d8 <_scanf_chars+0x2c>
 8024546:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802454a:	4629      	mov	r1, r5
 802454c:	4640      	mov	r0, r8
 802454e:	4798      	blx	r3
 8024550:	2800      	cmp	r0, #0
 8024552:	d0c1      	beq.n	80244d8 <_scanf_chars+0x2c>
 8024554:	6823      	ldr	r3, [r4, #0]
 8024556:	f013 0310 	ands.w	r3, r3, #16
 802455a:	d105      	bne.n	8024568 <_scanf_chars+0xbc>
 802455c:	68e2      	ldr	r2, [r4, #12]
 802455e:	3201      	adds	r2, #1
 8024560:	60e2      	str	r2, [r4, #12]
 8024562:	69a2      	ldr	r2, [r4, #24]
 8024564:	b102      	cbz	r2, 8024568 <_scanf_chars+0xbc>
 8024566:	703b      	strb	r3, [r7, #0]
 8024568:	6923      	ldr	r3, [r4, #16]
 802456a:	441e      	add	r6, r3
 802456c:	6126      	str	r6, [r4, #16]
 802456e:	2000      	movs	r0, #0
 8024570:	e7c6      	b.n	8024500 <_scanf_chars+0x54>
	...

08024574 <_scanf_i>:
 8024574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024578:	469a      	mov	sl, r3
 802457a:	4b74      	ldr	r3, [pc, #464]	; (802474c <_scanf_i+0x1d8>)
 802457c:	460c      	mov	r4, r1
 802457e:	4683      	mov	fp, r0
 8024580:	4616      	mov	r6, r2
 8024582:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8024586:	b087      	sub	sp, #28
 8024588:	ab03      	add	r3, sp, #12
 802458a:	68a7      	ldr	r7, [r4, #8]
 802458c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8024590:	4b6f      	ldr	r3, [pc, #444]	; (8024750 <_scanf_i+0x1dc>)
 8024592:	69a1      	ldr	r1, [r4, #24]
 8024594:	4a6f      	ldr	r2, [pc, #444]	; (8024754 <_scanf_i+0x1e0>)
 8024596:	2903      	cmp	r1, #3
 8024598:	bf08      	it	eq
 802459a:	461a      	moveq	r2, r3
 802459c:	1e7b      	subs	r3, r7, #1
 802459e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80245a2:	bf84      	itt	hi
 80245a4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80245a8:	60a3      	strhi	r3, [r4, #8]
 80245aa:	6823      	ldr	r3, [r4, #0]
 80245ac:	9200      	str	r2, [sp, #0]
 80245ae:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80245b2:	bf88      	it	hi
 80245b4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80245b8:	f104 091c 	add.w	r9, r4, #28
 80245bc:	6023      	str	r3, [r4, #0]
 80245be:	bf8c      	ite	hi
 80245c0:	197f      	addhi	r7, r7, r5
 80245c2:	2700      	movls	r7, #0
 80245c4:	464b      	mov	r3, r9
 80245c6:	f04f 0800 	mov.w	r8, #0
 80245ca:	9301      	str	r3, [sp, #4]
 80245cc:	6831      	ldr	r1, [r6, #0]
 80245ce:	ab03      	add	r3, sp, #12
 80245d0:	2202      	movs	r2, #2
 80245d2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80245d6:	7809      	ldrb	r1, [r1, #0]
 80245d8:	f7db fe4a 	bl	8000270 <memchr>
 80245dc:	9b01      	ldr	r3, [sp, #4]
 80245de:	b330      	cbz	r0, 802462e <_scanf_i+0xba>
 80245e0:	f1b8 0f01 	cmp.w	r8, #1
 80245e4:	d15a      	bne.n	802469c <_scanf_i+0x128>
 80245e6:	6862      	ldr	r2, [r4, #4]
 80245e8:	b92a      	cbnz	r2, 80245f6 <_scanf_i+0x82>
 80245ea:	6822      	ldr	r2, [r4, #0]
 80245ec:	2108      	movs	r1, #8
 80245ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80245f2:	6061      	str	r1, [r4, #4]
 80245f4:	6022      	str	r2, [r4, #0]
 80245f6:	6822      	ldr	r2, [r4, #0]
 80245f8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80245fc:	6022      	str	r2, [r4, #0]
 80245fe:	68a2      	ldr	r2, [r4, #8]
 8024600:	1e51      	subs	r1, r2, #1
 8024602:	60a1      	str	r1, [r4, #8]
 8024604:	b19a      	cbz	r2, 802462e <_scanf_i+0xba>
 8024606:	6832      	ldr	r2, [r6, #0]
 8024608:	1c51      	adds	r1, r2, #1
 802460a:	6031      	str	r1, [r6, #0]
 802460c:	7812      	ldrb	r2, [r2, #0]
 802460e:	701a      	strb	r2, [r3, #0]
 8024610:	1c5d      	adds	r5, r3, #1
 8024612:	6873      	ldr	r3, [r6, #4]
 8024614:	3b01      	subs	r3, #1
 8024616:	2b00      	cmp	r3, #0
 8024618:	6073      	str	r3, [r6, #4]
 802461a:	dc07      	bgt.n	802462c <_scanf_i+0xb8>
 802461c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8024620:	4631      	mov	r1, r6
 8024622:	4658      	mov	r0, fp
 8024624:	4798      	blx	r3
 8024626:	2800      	cmp	r0, #0
 8024628:	f040 8086 	bne.w	8024738 <_scanf_i+0x1c4>
 802462c:	462b      	mov	r3, r5
 802462e:	f108 0801 	add.w	r8, r8, #1
 8024632:	f1b8 0f03 	cmp.w	r8, #3
 8024636:	d1c8      	bne.n	80245ca <_scanf_i+0x56>
 8024638:	6862      	ldr	r2, [r4, #4]
 802463a:	b90a      	cbnz	r2, 8024640 <_scanf_i+0xcc>
 802463c:	220a      	movs	r2, #10
 802463e:	6062      	str	r2, [r4, #4]
 8024640:	6862      	ldr	r2, [r4, #4]
 8024642:	4945      	ldr	r1, [pc, #276]	; (8024758 <_scanf_i+0x1e4>)
 8024644:	6960      	ldr	r0, [r4, #20]
 8024646:	9301      	str	r3, [sp, #4]
 8024648:	1a89      	subs	r1, r1, r2
 802464a:	f000 f8cf 	bl	80247ec <__sccl>
 802464e:	9b01      	ldr	r3, [sp, #4]
 8024650:	f04f 0800 	mov.w	r8, #0
 8024654:	461d      	mov	r5, r3
 8024656:	68a3      	ldr	r3, [r4, #8]
 8024658:	6822      	ldr	r2, [r4, #0]
 802465a:	2b00      	cmp	r3, #0
 802465c:	d03a      	beq.n	80246d4 <_scanf_i+0x160>
 802465e:	6831      	ldr	r1, [r6, #0]
 8024660:	6960      	ldr	r0, [r4, #20]
 8024662:	f891 c000 	ldrb.w	ip, [r1]
 8024666:	f810 000c 	ldrb.w	r0, [r0, ip]
 802466a:	2800      	cmp	r0, #0
 802466c:	d032      	beq.n	80246d4 <_scanf_i+0x160>
 802466e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8024672:	d121      	bne.n	80246b8 <_scanf_i+0x144>
 8024674:	0510      	lsls	r0, r2, #20
 8024676:	d51f      	bpl.n	80246b8 <_scanf_i+0x144>
 8024678:	f108 0801 	add.w	r8, r8, #1
 802467c:	b117      	cbz	r7, 8024684 <_scanf_i+0x110>
 802467e:	3301      	adds	r3, #1
 8024680:	3f01      	subs	r7, #1
 8024682:	60a3      	str	r3, [r4, #8]
 8024684:	6873      	ldr	r3, [r6, #4]
 8024686:	3b01      	subs	r3, #1
 8024688:	2b00      	cmp	r3, #0
 802468a:	6073      	str	r3, [r6, #4]
 802468c:	dd1b      	ble.n	80246c6 <_scanf_i+0x152>
 802468e:	6833      	ldr	r3, [r6, #0]
 8024690:	3301      	adds	r3, #1
 8024692:	6033      	str	r3, [r6, #0]
 8024694:	68a3      	ldr	r3, [r4, #8]
 8024696:	3b01      	subs	r3, #1
 8024698:	60a3      	str	r3, [r4, #8]
 802469a:	e7dc      	b.n	8024656 <_scanf_i+0xe2>
 802469c:	f1b8 0f02 	cmp.w	r8, #2
 80246a0:	d1ad      	bne.n	80245fe <_scanf_i+0x8a>
 80246a2:	6822      	ldr	r2, [r4, #0]
 80246a4:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80246a8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80246ac:	d1bf      	bne.n	802462e <_scanf_i+0xba>
 80246ae:	2110      	movs	r1, #16
 80246b0:	6061      	str	r1, [r4, #4]
 80246b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80246b6:	e7a1      	b.n	80245fc <_scanf_i+0x88>
 80246b8:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80246bc:	6022      	str	r2, [r4, #0]
 80246be:	780b      	ldrb	r3, [r1, #0]
 80246c0:	702b      	strb	r3, [r5, #0]
 80246c2:	3501      	adds	r5, #1
 80246c4:	e7de      	b.n	8024684 <_scanf_i+0x110>
 80246c6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80246ca:	4631      	mov	r1, r6
 80246cc:	4658      	mov	r0, fp
 80246ce:	4798      	blx	r3
 80246d0:	2800      	cmp	r0, #0
 80246d2:	d0df      	beq.n	8024694 <_scanf_i+0x120>
 80246d4:	6823      	ldr	r3, [r4, #0]
 80246d6:	05d9      	lsls	r1, r3, #23
 80246d8:	d50c      	bpl.n	80246f4 <_scanf_i+0x180>
 80246da:	454d      	cmp	r5, r9
 80246dc:	d908      	bls.n	80246f0 <_scanf_i+0x17c>
 80246de:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80246e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80246e6:	4632      	mov	r2, r6
 80246e8:	4658      	mov	r0, fp
 80246ea:	4798      	blx	r3
 80246ec:	1e6f      	subs	r7, r5, #1
 80246ee:	463d      	mov	r5, r7
 80246f0:	454d      	cmp	r5, r9
 80246f2:	d029      	beq.n	8024748 <_scanf_i+0x1d4>
 80246f4:	6822      	ldr	r2, [r4, #0]
 80246f6:	f012 0210 	ands.w	r2, r2, #16
 80246fa:	d113      	bne.n	8024724 <_scanf_i+0x1b0>
 80246fc:	702a      	strb	r2, [r5, #0]
 80246fe:	6863      	ldr	r3, [r4, #4]
 8024700:	9e00      	ldr	r6, [sp, #0]
 8024702:	4649      	mov	r1, r9
 8024704:	4658      	mov	r0, fp
 8024706:	47b0      	blx	r6
 8024708:	f8da 3000 	ldr.w	r3, [sl]
 802470c:	6821      	ldr	r1, [r4, #0]
 802470e:	1d1a      	adds	r2, r3, #4
 8024710:	f8ca 2000 	str.w	r2, [sl]
 8024714:	f011 0f20 	tst.w	r1, #32
 8024718:	681b      	ldr	r3, [r3, #0]
 802471a:	d010      	beq.n	802473e <_scanf_i+0x1ca>
 802471c:	6018      	str	r0, [r3, #0]
 802471e:	68e3      	ldr	r3, [r4, #12]
 8024720:	3301      	adds	r3, #1
 8024722:	60e3      	str	r3, [r4, #12]
 8024724:	eba5 0509 	sub.w	r5, r5, r9
 8024728:	44a8      	add	r8, r5
 802472a:	6925      	ldr	r5, [r4, #16]
 802472c:	4445      	add	r5, r8
 802472e:	6125      	str	r5, [r4, #16]
 8024730:	2000      	movs	r0, #0
 8024732:	b007      	add	sp, #28
 8024734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024738:	f04f 0800 	mov.w	r8, #0
 802473c:	e7ca      	b.n	80246d4 <_scanf_i+0x160>
 802473e:	07ca      	lsls	r2, r1, #31
 8024740:	bf4c      	ite	mi
 8024742:	8018      	strhmi	r0, [r3, #0]
 8024744:	6018      	strpl	r0, [r3, #0]
 8024746:	e7ea      	b.n	802471e <_scanf_i+0x1aa>
 8024748:	2001      	movs	r0, #1
 802474a:	e7f2      	b.n	8024732 <_scanf_i+0x1be>
 802474c:	08024adc 	.word	0x08024adc
 8024750:	08021bf5 	.word	0x08021bf5
 8024754:	08021d39 	.word	0x08021d39
 8024758:	080401cd 	.word	0x080401cd

0802475c <_putc_r>:
 802475c:	b570      	push	{r4, r5, r6, lr}
 802475e:	460d      	mov	r5, r1
 8024760:	4614      	mov	r4, r2
 8024762:	4606      	mov	r6, r0
 8024764:	b118      	cbz	r0, 802476e <_putc_r+0x12>
 8024766:	6983      	ldr	r3, [r0, #24]
 8024768:	b90b      	cbnz	r3, 802476e <_putc_r+0x12>
 802476a:	f7fe fd49 	bl	8023200 <__sinit>
 802476e:	4b13      	ldr	r3, [pc, #76]	; (80247bc <_putc_r+0x60>)
 8024770:	429c      	cmp	r4, r3
 8024772:	d112      	bne.n	802479a <_putc_r+0x3e>
 8024774:	6874      	ldr	r4, [r6, #4]
 8024776:	68a3      	ldr	r3, [r4, #8]
 8024778:	3b01      	subs	r3, #1
 802477a:	2b00      	cmp	r3, #0
 802477c:	60a3      	str	r3, [r4, #8]
 802477e:	da16      	bge.n	80247ae <_putc_r+0x52>
 8024780:	69a2      	ldr	r2, [r4, #24]
 8024782:	4293      	cmp	r3, r2
 8024784:	db02      	blt.n	802478c <_putc_r+0x30>
 8024786:	b2eb      	uxtb	r3, r5
 8024788:	2b0a      	cmp	r3, #10
 802478a:	d110      	bne.n	80247ae <_putc_r+0x52>
 802478c:	4622      	mov	r2, r4
 802478e:	4629      	mov	r1, r5
 8024790:	4630      	mov	r0, r6
 8024792:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8024796:	f7fd bd25 	b.w	80221e4 <__swbuf_r>
 802479a:	4b09      	ldr	r3, [pc, #36]	; (80247c0 <_putc_r+0x64>)
 802479c:	429c      	cmp	r4, r3
 802479e:	d101      	bne.n	80247a4 <_putc_r+0x48>
 80247a0:	68b4      	ldr	r4, [r6, #8]
 80247a2:	e7e8      	b.n	8024776 <_putc_r+0x1a>
 80247a4:	4b07      	ldr	r3, [pc, #28]	; (80247c4 <_putc_r+0x68>)
 80247a6:	429c      	cmp	r4, r3
 80247a8:	bf08      	it	eq
 80247aa:	68f4      	ldreq	r4, [r6, #12]
 80247ac:	e7e3      	b.n	8024776 <_putc_r+0x1a>
 80247ae:	6823      	ldr	r3, [r4, #0]
 80247b0:	1c5a      	adds	r2, r3, #1
 80247b2:	6022      	str	r2, [r4, #0]
 80247b4:	701d      	strb	r5, [r3, #0]
 80247b6:	b2e8      	uxtb	r0, r5
 80247b8:	bd70      	pop	{r4, r5, r6, pc}
 80247ba:	bf00      	nop
 80247bc:	0804006c 	.word	0x0804006c
 80247c0:	0804008c 	.word	0x0804008c
 80247c4:	0804004c 	.word	0x0804004c

080247c8 <_read_r>:
 80247c8:	b538      	push	{r3, r4, r5, lr}
 80247ca:	4c07      	ldr	r4, [pc, #28]	; (80247e8 <_read_r+0x20>)
 80247cc:	4605      	mov	r5, r0
 80247ce:	4608      	mov	r0, r1
 80247d0:	4611      	mov	r1, r2
 80247d2:	2200      	movs	r2, #0
 80247d4:	6022      	str	r2, [r4, #0]
 80247d6:	461a      	mov	r2, r3
 80247d8:	f7e0 f9a6 	bl	8004b28 <_read>
 80247dc:	1c43      	adds	r3, r0, #1
 80247de:	d102      	bne.n	80247e6 <_read_r+0x1e>
 80247e0:	6823      	ldr	r3, [r4, #0]
 80247e2:	b103      	cbz	r3, 80247e6 <_read_r+0x1e>
 80247e4:	602b      	str	r3, [r5, #0]
 80247e6:	bd38      	pop	{r3, r4, r5, pc}
 80247e8:	2003e328 	.word	0x2003e328

080247ec <__sccl>:
 80247ec:	b570      	push	{r4, r5, r6, lr}
 80247ee:	780b      	ldrb	r3, [r1, #0]
 80247f0:	2b5e      	cmp	r3, #94	; 0x5e
 80247f2:	bf13      	iteet	ne
 80247f4:	1c4a      	addne	r2, r1, #1
 80247f6:	1c8a      	addeq	r2, r1, #2
 80247f8:	784b      	ldrbeq	r3, [r1, #1]
 80247fa:	2100      	movne	r1, #0
 80247fc:	bf08      	it	eq
 80247fe:	2101      	moveq	r1, #1
 8024800:	1e44      	subs	r4, r0, #1
 8024802:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8024806:	f804 1f01 	strb.w	r1, [r4, #1]!
 802480a:	42ac      	cmp	r4, r5
 802480c:	d1fb      	bne.n	8024806 <__sccl+0x1a>
 802480e:	b913      	cbnz	r3, 8024816 <__sccl+0x2a>
 8024810:	3a01      	subs	r2, #1
 8024812:	4610      	mov	r0, r2
 8024814:	bd70      	pop	{r4, r5, r6, pc}
 8024816:	f081 0401 	eor.w	r4, r1, #1
 802481a:	54c4      	strb	r4, [r0, r3]
 802481c:	1c51      	adds	r1, r2, #1
 802481e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8024822:	2d2d      	cmp	r5, #45	; 0x2d
 8024824:	f101 36ff 	add.w	r6, r1, #4294967295
 8024828:	460a      	mov	r2, r1
 802482a:	d006      	beq.n	802483a <__sccl+0x4e>
 802482c:	2d5d      	cmp	r5, #93	; 0x5d
 802482e:	d0f0      	beq.n	8024812 <__sccl+0x26>
 8024830:	b90d      	cbnz	r5, 8024836 <__sccl+0x4a>
 8024832:	4632      	mov	r2, r6
 8024834:	e7ed      	b.n	8024812 <__sccl+0x26>
 8024836:	462b      	mov	r3, r5
 8024838:	e7ef      	b.n	802481a <__sccl+0x2e>
 802483a:	780e      	ldrb	r6, [r1, #0]
 802483c:	2e5d      	cmp	r6, #93	; 0x5d
 802483e:	d0fa      	beq.n	8024836 <__sccl+0x4a>
 8024840:	42b3      	cmp	r3, r6
 8024842:	dcf8      	bgt.n	8024836 <__sccl+0x4a>
 8024844:	3301      	adds	r3, #1
 8024846:	429e      	cmp	r6, r3
 8024848:	54c4      	strb	r4, [r0, r3]
 802484a:	dcfb      	bgt.n	8024844 <__sccl+0x58>
 802484c:	3102      	adds	r1, #2
 802484e:	e7e6      	b.n	802481e <__sccl+0x32>

08024850 <__submore>:
 8024850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024854:	460c      	mov	r4, r1
 8024856:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8024858:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802485c:	4299      	cmp	r1, r3
 802485e:	d11d      	bne.n	802489c <__submore+0x4c>
 8024860:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8024864:	f7fb fd12 	bl	802028c <_malloc_r>
 8024868:	b918      	cbnz	r0, 8024872 <__submore+0x22>
 802486a:	f04f 30ff 	mov.w	r0, #4294967295
 802486e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024872:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8024876:	63a3      	str	r3, [r4, #56]	; 0x38
 8024878:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 802487c:	6360      	str	r0, [r4, #52]	; 0x34
 802487e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8024882:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8024886:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 802488a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 802488e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8024892:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8024896:	6020      	str	r0, [r4, #0]
 8024898:	2000      	movs	r0, #0
 802489a:	e7e8      	b.n	802486e <__submore+0x1e>
 802489c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 802489e:	0077      	lsls	r7, r6, #1
 80248a0:	463a      	mov	r2, r7
 80248a2:	f7ff f9a1 	bl	8023be8 <_realloc_r>
 80248a6:	4605      	mov	r5, r0
 80248a8:	2800      	cmp	r0, #0
 80248aa:	d0de      	beq.n	802486a <__submore+0x1a>
 80248ac:	eb00 0806 	add.w	r8, r0, r6
 80248b0:	4601      	mov	r1, r0
 80248b2:	4632      	mov	r2, r6
 80248b4:	4640      	mov	r0, r8
 80248b6:	f7fb f9da 	bl	801fc6e <memcpy>
 80248ba:	f8c4 8000 	str.w	r8, [r4]
 80248be:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80248c2:	e7e9      	b.n	8024898 <__submore+0x48>

080248c4 <__env_lock>:
 80248c4:	4770      	bx	lr

080248c6 <__env_unlock>:
 80248c6:	4770      	bx	lr

080248c8 <_fstat_r>:
 80248c8:	b538      	push	{r3, r4, r5, lr}
 80248ca:	4c07      	ldr	r4, [pc, #28]	; (80248e8 <_fstat_r+0x20>)
 80248cc:	2300      	movs	r3, #0
 80248ce:	4605      	mov	r5, r0
 80248d0:	4608      	mov	r0, r1
 80248d2:	4611      	mov	r1, r2
 80248d4:	6023      	str	r3, [r4, #0]
 80248d6:	f7e0 f939 	bl	8004b4c <_fstat>
 80248da:	1c43      	adds	r3, r0, #1
 80248dc:	d102      	bne.n	80248e4 <_fstat_r+0x1c>
 80248de:	6823      	ldr	r3, [r4, #0]
 80248e0:	b103      	cbz	r3, 80248e4 <_fstat_r+0x1c>
 80248e2:	602b      	str	r3, [r5, #0]
 80248e4:	bd38      	pop	{r3, r4, r5, pc}
 80248e6:	bf00      	nop
 80248e8:	2003e328 	.word	0x2003e328

080248ec <_isatty_r>:
 80248ec:	b538      	push	{r3, r4, r5, lr}
 80248ee:	4c06      	ldr	r4, [pc, #24]	; (8024908 <_isatty_r+0x1c>)
 80248f0:	2300      	movs	r3, #0
 80248f2:	4605      	mov	r5, r0
 80248f4:	4608      	mov	r0, r1
 80248f6:	6023      	str	r3, [r4, #0]
 80248f8:	f7e0 f92e 	bl	8004b58 <_isatty>
 80248fc:	1c43      	adds	r3, r0, #1
 80248fe:	d102      	bne.n	8024906 <_isatty_r+0x1a>
 8024900:	6823      	ldr	r3, [r4, #0]
 8024902:	b103      	cbz	r3, 8024906 <_isatty_r+0x1a>
 8024904:	602b      	str	r3, [r5, #0]
 8024906:	bd38      	pop	{r3, r4, r5, pc}
 8024908:	2003e328 	.word	0x2003e328

0802490c <_malloc_usable_size_r>:
 802490c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8024910:	1f18      	subs	r0, r3, #4
 8024912:	2b00      	cmp	r3, #0
 8024914:	bfbc      	itt	lt
 8024916:	580b      	ldrlt	r3, [r1, r0]
 8024918:	18c0      	addlt	r0, r0, r3
 802491a:	4770      	bx	lr

0802491c <_init>:
 802491c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802491e:	bf00      	nop
 8024920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024922:	bc08      	pop	{r3}
 8024924:	469e      	mov	lr, r3
 8024926:	4770      	bx	lr

08024928 <_fini>:
 8024928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802492a:	bf00      	nop
 802492c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802492e:	bc08      	pop	{r3}
 8024930:	469e      	mov	lr, r3
 8024932:	4770      	bx	lr

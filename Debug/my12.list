
my12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00024544  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001b850  08024748  08024748  00034748  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803ff98  0803ff98  00050680  2**0
                  CONTENTS
  4 .ARM          00000008  0803ff98  0803ff98  0004ff98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803ffa0  0803ffa0  00050680  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803ffa0  0803ffa0  0004ffa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803ffa4  0803ffa4  0004ffa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000680  20000000  0803ffa8  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003751c  20000680  08040628  00050680  2**3
                  ALLOC
 10 ._user_heap_stack 00040004  20037b9c  08040628  00057b9c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00050680  2**0
                  CONTENTS, READONLY
 12 .debug_info   0009debd  00000000  00000000  000506ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00011fcc  00000000  00000000  000ee56b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0003917f  00000000  00000000  00100537  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000034a0  00000000  00000000  001396b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00006a50  00000000  00000000  0013cb58  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000477bc  00000000  00000000  001435a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00056359  00000000  00000000  0018ad64  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00138dd7  00000000  00000000  001e10bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00319e94  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000c8b0  00000000  00000000  00319f10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000680 	.word	0x20000680
 800021c:	00000000 	.word	0x00000000
 8000220:	0802472c 	.word	0x0802472c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000684 	.word	0x20000684
 800023c:	0802472c 	.word	0x0802472c

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295
 800032e:	f000 b9bd 	b.w	80006ac <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b972 	b.w	80006ac <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9e08      	ldr	r6, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	4688      	mov	r8, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d14b      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003ee:	428a      	cmp	r2, r1
 80003f0:	4615      	mov	r5, r2
 80003f2:	d967      	bls.n	80004c4 <__udivmoddi4+0xe4>
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0720 	rsb	r7, r2, #32
 80003fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000402:	fa20 f707 	lsr.w	r7, r0, r7
 8000406:	4095      	lsls	r5, r2
 8000408:	ea47 0803 	orr.w	r8, r7, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fbb8 f7fe 	udiv	r7, r8, lr
 8000418:	fa1f fc85 	uxth.w	ip, r5
 800041c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000420:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000424:	fb07 f10c 	mul.w	r1, r7, ip
 8000428:	4299      	cmp	r1, r3
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x60>
 800042c:	18eb      	adds	r3, r5, r3
 800042e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000432:	f080 811b 	bcs.w	800066c <__udivmoddi4+0x28c>
 8000436:	4299      	cmp	r1, r3
 8000438:	f240 8118 	bls.w	800066c <__udivmoddi4+0x28c>
 800043c:	3f02      	subs	r7, #2
 800043e:	442b      	add	r3, r5
 8000440:	1a5b      	subs	r3, r3, r1
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb3 f0fe 	udiv	r0, r3, lr
 8000448:	fb0e 3310 	mls	r3, lr, r0, r3
 800044c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000450:	fb00 fc0c 	mul.w	ip, r0, ip
 8000454:	45a4      	cmp	ip, r4
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x8c>
 8000458:	192c      	adds	r4, r5, r4
 800045a:	f100 33ff 	add.w	r3, r0, #4294967295
 800045e:	f080 8107 	bcs.w	8000670 <__udivmoddi4+0x290>
 8000462:	45a4      	cmp	ip, r4
 8000464:	f240 8104 	bls.w	8000670 <__udivmoddi4+0x290>
 8000468:	3802      	subs	r0, #2
 800046a:	442c      	add	r4, r5
 800046c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000470:	eba4 040c 	sub.w	r4, r4, ip
 8000474:	2700      	movs	r7, #0
 8000476:	b11e      	cbz	r6, 8000480 <__udivmoddi4+0xa0>
 8000478:	40d4      	lsrs	r4, r2
 800047a:	2300      	movs	r3, #0
 800047c:	e9c6 4300 	strd	r4, r3, [r6]
 8000480:	4639      	mov	r1, r7
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d909      	bls.n	800049e <__udivmoddi4+0xbe>
 800048a:	2e00      	cmp	r6, #0
 800048c:	f000 80eb 	beq.w	8000666 <__udivmoddi4+0x286>
 8000490:	2700      	movs	r7, #0
 8000492:	e9c6 0100 	strd	r0, r1, [r6]
 8000496:	4638      	mov	r0, r7
 8000498:	4639      	mov	r1, r7
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	fab3 f783 	clz	r7, r3
 80004a2:	2f00      	cmp	r7, #0
 80004a4:	d147      	bne.n	8000536 <__udivmoddi4+0x156>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d302      	bcc.n	80004b0 <__udivmoddi4+0xd0>
 80004aa:	4282      	cmp	r2, r0
 80004ac:	f200 80fa 	bhi.w	80006a4 <__udivmoddi4+0x2c4>
 80004b0:	1a84      	subs	r4, r0, r2
 80004b2:	eb61 0303 	sbc.w	r3, r1, r3
 80004b6:	2001      	movs	r0, #1
 80004b8:	4698      	mov	r8, r3
 80004ba:	2e00      	cmp	r6, #0
 80004bc:	d0e0      	beq.n	8000480 <__udivmoddi4+0xa0>
 80004be:	e9c6 4800 	strd	r4, r8, [r6]
 80004c2:	e7dd      	b.n	8000480 <__udivmoddi4+0xa0>
 80004c4:	b902      	cbnz	r2, 80004c8 <__udivmoddi4+0xe8>
 80004c6:	deff      	udf	#255	; 0xff
 80004c8:	fab2 f282 	clz	r2, r2
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f040 808f 	bne.w	80005f0 <__udivmoddi4+0x210>
 80004d2:	1b49      	subs	r1, r1, r5
 80004d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d8:	fa1f f885 	uxth.w	r8, r5
 80004dc:	2701      	movs	r7, #1
 80004de:	fbb1 fcfe 	udiv	ip, r1, lr
 80004e2:	0c23      	lsrs	r3, r4, #16
 80004e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004ec:	fb08 f10c 	mul.w	r1, r8, ip
 80004f0:	4299      	cmp	r1, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x124>
 80004f4:	18eb      	adds	r3, r5, r3
 80004f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x122>
 80004fc:	4299      	cmp	r1, r3
 80004fe:	f200 80cd 	bhi.w	800069c <__udivmoddi4+0x2bc>
 8000502:	4684      	mov	ip, r0
 8000504:	1a59      	subs	r1, r3, r1
 8000506:	b2a3      	uxth	r3, r4
 8000508:	fbb1 f0fe 	udiv	r0, r1, lr
 800050c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000510:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000514:	fb08 f800 	mul.w	r8, r8, r0
 8000518:	45a0      	cmp	r8, r4
 800051a:	d907      	bls.n	800052c <__udivmoddi4+0x14c>
 800051c:	192c      	adds	r4, r5, r4
 800051e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000522:	d202      	bcs.n	800052a <__udivmoddi4+0x14a>
 8000524:	45a0      	cmp	r8, r4
 8000526:	f200 80b6 	bhi.w	8000696 <__udivmoddi4+0x2b6>
 800052a:	4618      	mov	r0, r3
 800052c:	eba4 0408 	sub.w	r4, r4, r8
 8000530:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000534:	e79f      	b.n	8000476 <__udivmoddi4+0x96>
 8000536:	f1c7 0c20 	rsb	ip, r7, #32
 800053a:	40bb      	lsls	r3, r7
 800053c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000540:	ea4e 0e03 	orr.w	lr, lr, r3
 8000544:	fa01 f407 	lsl.w	r4, r1, r7
 8000548:	fa20 f50c 	lsr.w	r5, r0, ip
 800054c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000550:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000554:	4325      	orrs	r5, r4
 8000556:	fbb3 f9f8 	udiv	r9, r3, r8
 800055a:	0c2c      	lsrs	r4, r5, #16
 800055c:	fb08 3319 	mls	r3, r8, r9, r3
 8000560:	fa1f fa8e 	uxth.w	sl, lr
 8000564:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000568:	fb09 f40a 	mul.w	r4, r9, sl
 800056c:	429c      	cmp	r4, r3
 800056e:	fa02 f207 	lsl.w	r2, r2, r7
 8000572:	fa00 f107 	lsl.w	r1, r0, r7
 8000576:	d90b      	bls.n	8000590 <__udivmoddi4+0x1b0>
 8000578:	eb1e 0303 	adds.w	r3, lr, r3
 800057c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000580:	f080 8087 	bcs.w	8000692 <__udivmoddi4+0x2b2>
 8000584:	429c      	cmp	r4, r3
 8000586:	f240 8084 	bls.w	8000692 <__udivmoddi4+0x2b2>
 800058a:	f1a9 0902 	sub.w	r9, r9, #2
 800058e:	4473      	add	r3, lr
 8000590:	1b1b      	subs	r3, r3, r4
 8000592:	b2ad      	uxth	r5, r5
 8000594:	fbb3 f0f8 	udiv	r0, r3, r8
 8000598:	fb08 3310 	mls	r3, r8, r0, r3
 800059c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80005a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80005a4:	45a2      	cmp	sl, r4
 80005a6:	d908      	bls.n	80005ba <__udivmoddi4+0x1da>
 80005a8:	eb1e 0404 	adds.w	r4, lr, r4
 80005ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80005b0:	d26b      	bcs.n	800068a <__udivmoddi4+0x2aa>
 80005b2:	45a2      	cmp	sl, r4
 80005b4:	d969      	bls.n	800068a <__udivmoddi4+0x2aa>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4474      	add	r4, lr
 80005ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005be:	fba0 8902 	umull	r8, r9, r0, r2
 80005c2:	eba4 040a 	sub.w	r4, r4, sl
 80005c6:	454c      	cmp	r4, r9
 80005c8:	46c2      	mov	sl, r8
 80005ca:	464b      	mov	r3, r9
 80005cc:	d354      	bcc.n	8000678 <__udivmoddi4+0x298>
 80005ce:	d051      	beq.n	8000674 <__udivmoddi4+0x294>
 80005d0:	2e00      	cmp	r6, #0
 80005d2:	d069      	beq.n	80006a8 <__udivmoddi4+0x2c8>
 80005d4:	ebb1 050a 	subs.w	r5, r1, sl
 80005d8:	eb64 0403 	sbc.w	r4, r4, r3
 80005dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005e0:	40fd      	lsrs	r5, r7
 80005e2:	40fc      	lsrs	r4, r7
 80005e4:	ea4c 0505 	orr.w	r5, ip, r5
 80005e8:	e9c6 5400 	strd	r5, r4, [r6]
 80005ec:	2700      	movs	r7, #0
 80005ee:	e747      	b.n	8000480 <__udivmoddi4+0xa0>
 80005f0:	f1c2 0320 	rsb	r3, r2, #32
 80005f4:	fa20 f703 	lsr.w	r7, r0, r3
 80005f8:	4095      	lsls	r5, r2
 80005fa:	fa01 f002 	lsl.w	r0, r1, r2
 80005fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000602:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000606:	4338      	orrs	r0, r7
 8000608:	0c01      	lsrs	r1, r0, #16
 800060a:	fbb3 f7fe 	udiv	r7, r3, lr
 800060e:	fa1f f885 	uxth.w	r8, r5
 8000612:	fb0e 3317 	mls	r3, lr, r7, r3
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb07 f308 	mul.w	r3, r7, r8
 800061e:	428b      	cmp	r3, r1
 8000620:	fa04 f402 	lsl.w	r4, r4, r2
 8000624:	d907      	bls.n	8000636 <__udivmoddi4+0x256>
 8000626:	1869      	adds	r1, r5, r1
 8000628:	f107 3cff 	add.w	ip, r7, #4294967295
 800062c:	d22f      	bcs.n	800068e <__udivmoddi4+0x2ae>
 800062e:	428b      	cmp	r3, r1
 8000630:	d92d      	bls.n	800068e <__udivmoddi4+0x2ae>
 8000632:	3f02      	subs	r7, #2
 8000634:	4429      	add	r1, r5
 8000636:	1acb      	subs	r3, r1, r3
 8000638:	b281      	uxth	r1, r0
 800063a:	fbb3 f0fe 	udiv	r0, r3, lr
 800063e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000642:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000646:	fb00 f308 	mul.w	r3, r0, r8
 800064a:	428b      	cmp	r3, r1
 800064c:	d907      	bls.n	800065e <__udivmoddi4+0x27e>
 800064e:	1869      	adds	r1, r5, r1
 8000650:	f100 3cff 	add.w	ip, r0, #4294967295
 8000654:	d217      	bcs.n	8000686 <__udivmoddi4+0x2a6>
 8000656:	428b      	cmp	r3, r1
 8000658:	d915      	bls.n	8000686 <__udivmoddi4+0x2a6>
 800065a:	3802      	subs	r0, #2
 800065c:	4429      	add	r1, r5
 800065e:	1ac9      	subs	r1, r1, r3
 8000660:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000664:	e73b      	b.n	80004de <__udivmoddi4+0xfe>
 8000666:	4637      	mov	r7, r6
 8000668:	4630      	mov	r0, r6
 800066a:	e709      	b.n	8000480 <__udivmoddi4+0xa0>
 800066c:	4607      	mov	r7, r0
 800066e:	e6e7      	b.n	8000440 <__udivmoddi4+0x60>
 8000670:	4618      	mov	r0, r3
 8000672:	e6fb      	b.n	800046c <__udivmoddi4+0x8c>
 8000674:	4541      	cmp	r1, r8
 8000676:	d2ab      	bcs.n	80005d0 <__udivmoddi4+0x1f0>
 8000678:	ebb8 0a02 	subs.w	sl, r8, r2
 800067c:	eb69 020e 	sbc.w	r2, r9, lr
 8000680:	3801      	subs	r0, #1
 8000682:	4613      	mov	r3, r2
 8000684:	e7a4      	b.n	80005d0 <__udivmoddi4+0x1f0>
 8000686:	4660      	mov	r0, ip
 8000688:	e7e9      	b.n	800065e <__udivmoddi4+0x27e>
 800068a:	4618      	mov	r0, r3
 800068c:	e795      	b.n	80005ba <__udivmoddi4+0x1da>
 800068e:	4667      	mov	r7, ip
 8000690:	e7d1      	b.n	8000636 <__udivmoddi4+0x256>
 8000692:	4681      	mov	r9, r0
 8000694:	e77c      	b.n	8000590 <__udivmoddi4+0x1b0>
 8000696:	3802      	subs	r0, #2
 8000698:	442c      	add	r4, r5
 800069a:	e747      	b.n	800052c <__udivmoddi4+0x14c>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	442b      	add	r3, r5
 80006a2:	e72f      	b.n	8000504 <__udivmoddi4+0x124>
 80006a4:	4638      	mov	r0, r7
 80006a6:	e708      	b.n	80004ba <__udivmoddi4+0xda>
 80006a8:	4637      	mov	r7, r6
 80006aa:	e6e9      	b.n	8000480 <__udivmoddi4+0xa0>

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <ADC_MultiModeDMAConvM0Cplt>:
// handle the highest priority interrupt to capture the true DMA conversion complete time (below RTOSOS level)
extern TIM_HandleTypeDef htim5;
void ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)	// adc conversion done (DMA complete)
{

	timestamp = TIM2->CNT;			// real time
 80006b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
//	HAL_TIM_Base_Start_IT(&htim5);
}

// these two are the real DMA Conversion complete interrupts
void ADC_MultiModeDMAConvM0Cplt(ADC_HandleTypeDef *hadc) {
	dmabufno = 0;
 80006b4:	4a07      	ldr	r2, [pc, #28]	; (80006d4 <ADC_MultiModeDMAConvM0Cplt+0x24>)
 80006b6:	2100      	movs	r1, #0
	timestamp = TIM2->CNT;			// real time
 80006b8:	4807      	ldr	r0, [pc, #28]	; (80006d8 <ADC_MultiModeDMAConvM0Cplt+0x28>)
void ADC_MultiModeDMAConvM0Cplt(ADC_HandleTypeDef *hadc) {
 80006ba:	b410      	push	{r4}
	dmabufno = 0;
 80006bc:	6011      	str	r1, [r2, #0]
	TIM5->DIER = 0x01;
 80006be:	2101      	movs	r1, #1
	timestamp = TIM2->CNT;			// real time
 80006c0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006c2:	2219      	movs	r2, #25
	timestamp = TIM2->CNT;			// real time
 80006c4:	6004      	str	r4, [r0, #0]
	TIM5->DIER = 0x01;
 80006c6:	f8c3 1c0c 	str.w	r1, [r3, #3084]	; 0xc0c
	ADC_ConvCpltCallback(hadc);
}
 80006ca:	f85d 4b04 	ldr.w	r4, [sp], #4
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006ce:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
}
 80006d2:	4770      	bx	lr
 80006d4:	200006a8 	.word	0x200006a8
 80006d8:	20022810 	.word	0x20022810

080006dc <ADC_MultiModeDMAConvM1Cplt>:
	timestamp = TIM2->CNT;			// real time
 80006dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

void ADC_MultiModeDMAConvM1Cplt(ADC_HandleTypeDef *hadc) {

	dmabufno = 1;
 80006e0:	4907      	ldr	r1, [pc, #28]	; (8000700 <ADC_MultiModeDMAConvM1Cplt+0x24>)
 80006e2:	2201      	movs	r2, #1
	timestamp = TIM2->CNT;			// real time
 80006e4:	4807      	ldr	r0, [pc, #28]	; (8000704 <ADC_MultiModeDMAConvM1Cplt+0x28>)
void ADC_MultiModeDMAConvM1Cplt(ADC_HandleTypeDef *hadc) {
 80006e6:	b410      	push	{r4}
	timestamp = TIM2->CNT;			// real time
 80006e8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	dmabufno = 1;
 80006ea:	600a      	str	r2, [r1, #0]
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006ec:	2119      	movs	r1, #25
	timestamp = TIM2->CNT;			// real time
 80006ee:	6004      	str	r4, [r0, #0]
	TIM5->DIER = 0x01;
 80006f0:	f8c3 2c0c 	str.w	r2, [r3, #3084]	; 0xc0c
	ADC_ConvCpltCallback(hadc);
}
 80006f4:	f85d 4b04 	ldr.w	r4, [sp], #4
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006f8:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
}
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	200006a8 	.word	0x200006a8
 8000704:	20022810 	.word	0x20022810

08000708 <ADC_MultiModeDMAError>:
void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma) {
 8000708:	b510      	push	{r4, lr}
	hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800070a:	2340      	movs	r3, #64	; 0x40
	ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;
 800070c:	6b84      	ldr	r4, [r0, #56]	; 0x38
	printf("Multi-mode DMA Error\n");
 800070e:	4806      	ldr	r0, [pc, #24]	; (8000728 <ADC_MultiModeDMAError+0x20>)
	hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8000710:	6423      	str	r3, [r4, #64]	; 0x40
	hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8000712:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000714:	f043 0304 	orr.w	r3, r3, #4
 8000718:	6463      	str	r3, [r4, #68]	; 0x44
	printf("Multi-mode DMA Error\n");
 800071a:	f020 f9dd 	bl	8020ad8 <puts>
	HAL_ADC_ErrorCallback(hadc);
 800071e:	4620      	mov	r0, r4
}
 8000720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_ADC_ErrorCallback(hadc);
 8000724:	f005 b962 	b.w	80059ec <HAL_ADC_ErrorCallback>
 8000728:	0802490c 	.word	0x0802490c

0800072c <HAL_ADCEx_MultiModeStart_DBDMA>:
		uint32_t Length) {
 800072c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072e:	4604      	mov	r4, r0
 8000730:	4616      	mov	r6, r2
 8000732:	b085      	sub	sp, #20
	__IO uint32_t counter = 0;
 8000734:	2000      	movs	r0, #0
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8000736:	69a2      	ldr	r2, [r4, #24]
		uint32_t Length) {
 8000738:	460d      	mov	r5, r1
 800073a:	461f      	mov	r7, r3
	__IO uint32_t counter = 0;
 800073c:	9003      	str	r0, [sp, #12]
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800073e:	2a01      	cmp	r2, #1
 8000740:	d903      	bls.n	800074a <HAL_ADCEx_MultiModeStart_DBDMA+0x1e>
 8000742:	2199      	movs	r1, #153	; 0x99
 8000744:	4844      	ldr	r0, [pc, #272]	; (8000858 <HAL_ADCEx_MultiModeStart_DBDMA+0x12c>)
 8000746:	f002 fb6d 	bl	8002e24 <assert_failed>
	assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 800074a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800074c:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 8000750:	d17c      	bne.n	800084c <HAL_ADCEx_MultiModeStart_DBDMA+0x120>
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8000752:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8000756:	2b01      	cmp	r3, #1
 8000758:	d903      	bls.n	8000762 <HAL_ADCEx_MultiModeStart_DBDMA+0x36>
 800075a:	219b      	movs	r1, #155	; 0x9b
 800075c:	483e      	ldr	r0, [pc, #248]	; (8000858 <HAL_ADCEx_MultiModeStart_DBDMA+0x12c>)
 800075e:	f002 fb61 	bl	8002e24 <assert_failed>
	__HAL_LOCK(hadc);
 8000762:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000766:	2b01      	cmp	r3, #1
 8000768:	d06d      	beq.n	8000846 <HAL_ADCEx_MultiModeStart_DBDMA+0x11a>
	if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON) {
 800076a:	6822      	ldr	r2, [r4, #0]
	__HAL_LOCK(hadc);
 800076c:	2101      	movs	r1, #1
	if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON) {
 800076e:	6893      	ldr	r3, [r2, #8]
	__HAL_LOCK(hadc);
 8000770:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
	if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON) {
 8000774:	07d8      	lsls	r0, r3, #31
 8000776:	d414      	bmi.n	80007a2 <HAL_ADCEx_MultiModeStart_DBDMA+0x76>
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000778:	4b38      	ldr	r3, [pc, #224]	; (800085c <HAL_ADCEx_MultiModeStart_DBDMA+0x130>)
 800077a:	4839      	ldr	r0, [pc, #228]	; (8000860 <HAL_ADCEx_MultiModeStart_DBDMA+0x134>)
 800077c:	681b      	ldr	r3, [r3, #0]
		__HAL_ADC_ENABLE(hadc);
 800077e:	6891      	ldr	r1, [r2, #8]
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000780:	fba0 0303 	umull	r0, r3, r0, r3
		__HAL_ADC_ENABLE(hadc);
 8000784:	f041 0101 	orr.w	r1, r1, #1
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000788:	0c9b      	lsrs	r3, r3, #18
		__HAL_ADC_ENABLE(hadc);
 800078a:	6091      	str	r1, [r2, #8]
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800078c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000790:	9303      	str	r3, [sp, #12]
		while (counter != 0) {
 8000792:	9b03      	ldr	r3, [sp, #12]
 8000794:	b12b      	cbz	r3, 80007a2 <HAL_ADCEx_MultiModeStart_DBDMA+0x76>
			counter--;
 8000796:	9b03      	ldr	r3, [sp, #12]
 8000798:	3b01      	subs	r3, #1
 800079a:	9303      	str	r3, [sp, #12]
		while (counter != 0) {
 800079c:	9b03      	ldr	r3, [sp, #12]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d1f9      	bne.n	8000796 <HAL_ADCEx_MultiModeStart_DBDMA+0x6a>
	if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON)) {
 80007a2:	6893      	ldr	r3, [r2, #8]
 80007a4:	07d9      	lsls	r1, r3, #31
 80007a6:	d545      	bpl.n	8000834 <HAL_ADCEx_MultiModeStart_DBDMA+0x108>
		ADC_STATE_CLR_SET(hadc->State,
 80007a8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80007aa:	4b2e      	ldr	r3, [pc, #184]	; (8000864 <HAL_ADCEx_MultiModeStart_DBDMA+0x138>)
 80007ac:	400b      	ands	r3, r1
 80007ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007b2:	6423      	str	r3, [r4, #64]	; 0x40
		if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET) {
 80007b4:	6853      	ldr	r3, [r2, #4]
 80007b6:	055b      	lsls	r3, r3, #21
 80007b8:	d505      	bpl.n	80007c6 <HAL_ADCEx_MultiModeStart_DBDMA+0x9a>
			ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80007ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007c4:	6423      	str	r3, [r4, #64]	; 0x40
		if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY)) {
 80007c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007c8:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 80007cc:	d039      	beq.n	8000842 <HAL_ADCEx_MultiModeStart_DBDMA+0x116>
			CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80007ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80007d0:	f023 0306 	bic.w	r3, r3, #6
 80007d4:	6463      	str	r3, [r4, #68]	; 0x44
		hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvM0Cplt;
 80007d6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
		__HAL_UNLOCK(hadc);
 80007d8:	2300      	movs	r3, #0
		hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvM0Cplt;
 80007da:	f8df c098 	ldr.w	ip, [pc, #152]	; 8000874 <HAL_ADCEx_MultiModeStart_DBDMA+0x148>
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80007de:	f06f 0102 	mvn.w	r1, #2
		__HAL_UNLOCK(hadc);
 80007e2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		hadc->DMA_Handle->XferM1HalfCpltCallback = NULL;
 80007e6:	6483      	str	r3, [r0, #72]	; 0x48
		hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvM0Cplt;
 80007e8:	e9c0 c30f 	strd	ip, r3, [r0, #60]	; 0x3c
		hadc->DMA_Handle->XferErrorCallback = ADC_MultiModeDMAError;
 80007ec:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <HAL_ADCEx_MultiModeStart_DBDMA+0x13c>)
		hadc->DMA_Handle->XferM1CpltCallback = ADC_MultiModeDMAConvM1Cplt;
 80007ee:	f8df c088 	ldr.w	ip, [pc, #136]	; 8000878 <HAL_ADCEx_MultiModeStart_DBDMA+0x14c>
		hadc->DMA_Handle->XferErrorCallback = ADC_MultiModeDMAError;
 80007f2:	64c3      	str	r3, [r0, #76]	; 0x4c
		hadc->DMA_Handle->XferM1CpltCallback = ADC_MultiModeDMAConvM1Cplt;
 80007f4:	f8c0 c044 	str.w	ip, [r0, #68]	; 0x44
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80007f8:	6011      	str	r1, [r2, #0]
		__HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80007fa:	6853      	ldr	r3, [r2, #4]
		if (hadc->Init.DMAContinuousRequests != DISABLE) {
 80007fc:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
		__HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000800:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000804:	6053      	str	r3, [r2, #4]
			ADC->CCR |= ADC_CCR_DDS;
 8000806:	4a19      	ldr	r2, [pc, #100]	; (800086c <HAL_ADCEx_MultiModeStart_DBDMA+0x140>)
 8000808:	6853      	ldr	r3, [r2, #4]
		if (hadc->Init.DMAContinuousRequests != DISABLE) {
 800080a:	b1b1      	cbz	r1, 800083a <HAL_ADCEx_MultiModeStart_DBDMA+0x10e>
			ADC->CCR |= ADC_CCR_DDS;
 800080c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000810:	6053      	str	r3, [r2, #4]
		HAL_DMAEx_MultiBufferStart_IT(hadc->DMA_Handle, (uint32_t) &ADC->CDR, (uint32_t) pData, (uint32_t) pData2,
 8000812:	4633      	mov	r3, r6
 8000814:	9700      	str	r7, [sp, #0]
 8000816:	462a      	mov	r2, r5
 8000818:	4915      	ldr	r1, [pc, #84]	; (8000870 <HAL_ADCEx_MultiModeStart_DBDMA+0x144>)
 800081a:	f006 f9fd 	bl	8006c18 <HAL_DMAEx_MultiBufferStart_IT>
		if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) {
 800081e:	6823      	ldr	r3, [r4, #0]
 8000820:	6898      	ldr	r0, [r3, #8]
 8000822:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8000826:	d105      	bne.n	8000834 <HAL_ADCEx_MultiModeStart_DBDMA+0x108>
			hadc->Instance->CR2 |= (uint32_t) ADC_CR2_SWSTART;
 8000828:	689a      	ldr	r2, [r3, #8]
 800082a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800082e:	609a      	str	r2, [r3, #8]
}
 8000830:	b005      	add	sp, #20
 8000832:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return HAL_OK;
 8000834:	2000      	movs	r0, #0
}
 8000836:	b005      	add	sp, #20
 8000838:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ADC->CCR &= ~ADC_CCR_DDS;
 800083a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800083e:	6053      	str	r3, [r2, #4]
 8000840:	e7e7      	b.n	8000812 <HAL_ADCEx_MultiModeStart_DBDMA+0xe6>
			ADC_CLEAR_ERRORCODE(hadc);
 8000842:	6463      	str	r3, [r4, #68]	; 0x44
 8000844:	e7c7      	b.n	80007d6 <HAL_ADCEx_MultiModeStart_DBDMA+0xaa>
	__HAL_LOCK(hadc);
 8000846:	2002      	movs	r0, #2
}
 8000848:	b005      	add	sp, #20
 800084a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 800084c:	219a      	movs	r1, #154	; 0x9a
 800084e:	4802      	ldr	r0, [pc, #8]	; (8000858 <HAL_ADCEx_MultiModeStart_DBDMA+0x12c>)
 8000850:	f002 fae8 	bl	8002e24 <assert_failed>
 8000854:	e77d      	b.n	8000752 <HAL_ADCEx_MultiModeStart_DBDMA+0x26>
 8000856:	bf00      	nop
 8000858:	08024924 	.word	0x08024924
 800085c:	20000244 	.word	0x20000244
 8000860:	431bde83 	.word	0x431bde83
 8000864:	fffff8fe 	.word	0xfffff8fe
 8000868:	08000709 	.word	0x08000709
 800086c:	40012300 	.word	0x40012300
 8000870:	40012308 	.word	0x40012308
 8000874:	080006b1 	.word	0x080006b1
 8000878:	080006dd 	.word	0x080006dd

0800087c <ADC_Conv_complete>:
	if (dmabufno == 1) {		// second buffer is ready
 800087c:	4b74      	ldr	r3, [pc, #464]	; (8000a50 <ADC_Conv_complete+0x1d4>)
	(*buf)[3] = timestamp;		// this may not get set until now
 800087e:	4975      	ldr	r1, [pc, #468]	; (8000a54 <ADC_Conv_complete+0x1d8>)
	if (dmabufno == 1) {		// second buffer is ready
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a75      	ldr	r2, [pc, #468]	; (8000a58 <ADC_Conv_complete+0x1dc>)
 8000884:	2b01      	cmp	r3, #1
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 8000886:	4b75      	ldr	r3, [pc, #468]	; (8000a5c <ADC_Conv_complete+0x1e0>)
 8000888:	6812      	ldr	r2, [r2, #0]
ADC_Conv_complete() {
 800088a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 800088e:	4e74      	ldr	r6, [pc, #464]	; (8000a60 <ADC_Conv_complete+0x1e4>)
ADC_Conv_complete() {
 8000890:	b087      	sub	sp, #28
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 8000892:	781b      	ldrb	r3, [r3, #0]
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 8000894:	bf08      	it	eq
 8000896:	f502 62b8 	addeq.w	r2, r2, #1472	; 0x5c0
	(*buf)[3] = timestamp;		// this may not get set until now
 800089a:	680d      	ldr	r5, [r1, #0]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 800089c:	4c71      	ldr	r4, [pc, #452]	; (8000a64 <ADC_Conv_complete+0x1e8>)
 800089e:	f8b6 005c 	ldrh.w	r0, [r6, #92]	; 0x5c
 80008a2:	4971      	ldr	r1, [pc, #452]	; (8000a68 <ADC_Conv_complete+0x1ec>)
 80008a4:	9305      	str	r3, [sp, #20]
 80008a6:	021b      	lsls	r3, r3, #8
	if (sigsend) {		// oops overrun
 80008a8:	f8df b208 	ldr.w	fp, [pc, #520]	; 8000ab4 <ADC_Conv_complete+0x238>
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008ac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80008b0:	7808      	ldrb	r0, [r1, #0]
 80008b2:	7821      	ldrb	r1, [r4, #0]
 80008b4:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
	(*buf)[3] = timestamp;		// this may not get set until now
 80008b8:	60d5      	str	r5, [r2, #12]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008ba:	f001 0003 	and.w	r0, r1, #3
 80008be:	3101      	adds	r1, #1
 80008c0:	4303      	orrs	r3, r0
 80008c2:	7021      	strb	r1, [r4, #0]
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;
 80008c4:	f8d6 008c 	ldr.w	r0, [r6, #140]	; 0x8c
	if (sigsend) {		// oops overrun
 80008c8:	f8db 1000 	ldr.w	r1, [fp]
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;
 80008cc:	e9c2 3001 	strd	r3, r0, [r2, #4]
	if (sigsend) {		// oops overrun
 80008d0:	b129      	cbz	r1, 80008de <ADC_Conv_complete+0x62>
		statuspkt.adcudpover++;		// debug adc overruning the udp railgun
 80008d2:	6fb3      	ldr	r3, [r6, #120]	; 0x78
		sigsend = 0;		// cancel previous signal
 80008d4:	2100      	movs	r1, #0
		statuspkt.adcudpover++;		// debug adc overruning the udp railgun
 80008d6:	3301      	adds	r3, #1
 80008d8:	67b3      	str	r3, [r6, #120]	; 0x78
		sigsend = 0;		// cancel previous signal
 80008da:	f8cb 1000 	str.w	r1, [fp]
 80008de:	f102 0c0e 	add.w	ip, r2, #14
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 80008e2:	4b62      	ldr	r3, [pc, #392]	; (8000a6c <ADC_Conv_complete+0x1f0>)
 80008e4:	4a62      	ldr	r2, [pc, #392]	; (8000a70 <ADC_Conv_complete+0x1f4>)
 80008e6:	2600      	movs	r6, #0
 80008e8:	881b      	ldrh	r3, [r3, #0]
 80008ea:	f8d2 e000 	ldr.w	lr, [r2]
 80008ee:	4a61      	ldr	r2, [pc, #388]	; (8000a74 <ADC_Conv_complete+0x1f8>)
 80008f0:	4961      	ldr	r1, [pc, #388]	; (8000a78 <ADC_Conv_complete+0x1fc>)
 80008f2:	6814      	ldr	r4, [r2, #0]
 80008f4:	4861      	ldr	r0, [pc, #388]	; (8000a7c <ADC_Conv_complete+0x200>)
 80008f6:	4a62      	ldr	r2, [pc, #392]	; (8000a80 <ADC_Conv_complete+0x204>)
 80008f8:	9303      	str	r3, [sp, #12]
 80008fa:	4b62      	ldr	r3, [pc, #392]	; (8000a84 <ADC_Conv_complete+0x208>)
 80008fc:	8809      	ldrh	r1, [r1, #0]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	6812      	ldr	r2, [r2, #0]
 8000902:	f9b0 0000 	ldrsh.w	r0, [r0]
 8000906:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 8000ab8 <ADC_Conv_complete+0x23c>
 800090a:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 8000abc <ADC_Conv_complete+0x240>
 800090e:	9604      	str	r6, [sp, #16]
 8000910:	9102      	str	r1, [sp, #8]
 8000912:	9301      	str	r3, [sp, #4]
		wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 8000914:	f006 011f 	and.w	r1, r6, #31
		thissamp = (*adcbuf16)[i];
 8000918:	f83c 3f02 	ldrh.w	r3, [ip, #2]!
		lastmeanwindiff = abs(meanwindiff);
 800091c:	ea80 78e0 	eor.w	r8, r0, r0, asr #31
 8000920:	3601      	adds	r6, #1
		wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 8000922:	f83a 5011 	ldrh.w	r5, [sl, r1, lsl #1]
 8000926:	441c      	add	r4, r3
		lastmeanwindiff = abs(meanwindiff);
 8000928:	eba8 78e0 	sub.w	r8, r8, r0, asr #31
		wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 800092c:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
		wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 8000930:	1b64      	subs	r4, r4, r5
		lastsamp[j] = thissamp;			// save last samples
 8000932:	f82a 3011 	strh.w	r3, [sl, r1, lsl #1]
		wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 8000936:	1a12      	subs	r2, r2, r0
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 8000938:	9803      	ldr	r0, [sp, #12]
		adcbgbaseacc += thissamp; // accumulator used to find avg level of signal over long time (for base)
 800093a:	449e      	add	lr, r3
		if (sigsend)
 800093c:	f8db 7000 	ldr.w	r7, [fp]
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 8000940:	eb08 0500 	add.w	r5, r8, r0
		thiswindiff = abs(thissamp - winmean);			// find difference from window mean
 8000944:	f344 104f 	sbfx	r0, r4, #5, #16
 8000948:	1a18      	subs	r0, r3, r0
 800094a:	2800      	cmp	r0, #0
 800094c:	bfb8      	it	lt
 800094e:	4240      	neglt	r0, r0
		wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 8000950:	4402      	add	r2, r0
		meanwindiff = wdacc >> (WINSHIFT); // sliding mean of window differences
 8000952:	f342 104f 	sbfx	r0, r2, #5, #16
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 8000956:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
		windiff[j] = meanwindiff;	// store latest window mean of differences
 800095a:	f849 0021 	str.w	r0, [r9, r1, lsl #2]
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 800095e:	9902      	ldr	r1, [sp, #8]
 8000960:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 8000964:	1859      	adds	r1, r3, r1
 8000966:	42a9      	cmp	r1, r5
 8000968:	dd04      	ble.n	8000974 <ADC_Conv_complete+0xf8>
			pretrigcnt++;
 800096a:	9901      	ldr	r1, [sp, #4]
 800096c:	3101      	adds	r1, #1
 800096e:	9101      	str	r1, [sp, #4]
 8000970:	2101      	movs	r1, #1
 8000972:	9104      	str	r1, [sp, #16]
		if (abs(meanwindiff) > (lastmeanwindiff + trigthresh)) { // if new mean diff > last mean diff +1
 8000974:	42ab      	cmp	r3, r5
 8000976:	dd03      	ble.n	8000980 <ADC_Conv_complete+0x104>
 8000978:	b917      	cbnz	r7, 8000980 <ADC_Conv_complete+0x104>
			sigsend = 1; // the real trigger
 800097a:	2301      	movs	r3, #1
 800097c:	f8cb 3000 	str.w	r3, [fp]
	for (i = 0; i < (ADCBUFSIZE >> 1); i++) {	// 2 // scan the buffer content
 8000980:	f5b6 7f36 	cmp.w	r6, #728	; 0x2d8
 8000984:	d1c6      	bne.n	8000914 <ADC_Conv_complete+0x98>
 8000986:	9b04      	ldr	r3, [sp, #16]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d15c      	bne.n	8000a46 <ADC_Conv_complete+0x1ca>
 800098c:	4d39      	ldr	r5, [pc, #228]	; (8000a74 <ADC_Conv_complete+0x1f8>)
 800098e:	4938      	ldr	r1, [pc, #224]	; (8000a70 <ADC_Conv_complete+0x1f4>)
 8000990:	602c      	str	r4, [r5, #0]
 8000992:	4d3b      	ldr	r5, [pc, #236]	; (8000a80 <ADC_Conv_complete+0x204>)
 8000994:	4b3c      	ldr	r3, [pc, #240]	; (8000a88 <ADC_Conv_complete+0x20c>)
 8000996:	f8c1 e000 	str.w	lr, [r1]
 800099a:	602a      	str	r2, [r5, #0]
 800099c:	493b      	ldr	r1, [pc, #236]	; (8000a8c <ADC_Conv_complete+0x210>)
 800099e:	4a37      	ldr	r2, [pc, #220]	; (8000a7c <ADC_Conv_complete+0x200>)
	if (sigsend) {
 80009a0:	f8db 4000 	ldr.w	r4, [fp]
		lastmeanwindiff = abs(meanwindiff);
 80009a4:	f8a3 8000 	strh.w	r8, [r3]
 80009a8:	8010      	strh	r0, [r2, #0]
 80009aa:	680b      	ldr	r3, [r1, #0]
	if (sigsend) {
 80009ac:	b334      	cbz	r4, 80009fc <ADC_Conv_complete+0x180>
		if (sigprev == 0) {		// no trigger last time, so this is a new event
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d02b      	beq.n	8000a0a <ADC_Conv_complete+0x18e>
		statuspkt.trigcount++;	//  no of triggered packets detected
 80009b2:	4c2b      	ldr	r4, [pc, #172]	; (8000a60 <ADC_Conv_complete+0x1e4>)
		sigprev = 1;	// remember this trigger for next packet
 80009b4:	2001      	movs	r0, #1
		ledhang = 15;		// 15 x 10ms in Idle proc
 80009b6:	4a36      	ldr	r2, [pc, #216]	; (8000a90 <ADC_Conv_complete+0x214>)
		statuspkt.trigcount++;	//  no of triggered packets detected
 80009b8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
		sigprev = 1;	// remember this trigger for next packet
 80009ba:	6008      	str	r0, [r1, #0]
		ledhang = 15;		// 15 x 10ms in Idle proc
 80009bc:	210f      	movs	r1, #15
		statuspkt.trigcount++;	//  no of triggered packets detected
 80009be:	4403      	add	r3, r0
		ledhang = 15;		// 15 x 10ms in Idle proc
 80009c0:	6011      	str	r1, [r2, #0]
		statuspkt.trigcount++;	//  no of triggered packets detected
 80009c2:	67e3      	str	r3, [r4, #124]	; 0x7c
	if (++samplecnt == 2048) {		// 2k adc bufffers sampled approx 0.5 sec
 80009c4:	4a33      	ldr	r2, [pc, #204]	; (8000a94 <ADC_Conv_complete+0x218>)
 80009c6:	6813      	ldr	r3, [r2, #0]
 80009c8:	3301      	adds	r3, #1
 80009ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80009ce:	6013      	str	r3, [r2, #0]
 80009d0:	d10b      	bne.n	80009ea <ADC_Conv_complete+0x16e>
		globaladcavg = (adcbgbaseacc / (ADCBUFSIZE / 2)) >> 11;
 80009d2:	4c27      	ldr	r4, [pc, #156]	; (8000a70 <ADC_Conv_complete+0x1f4>)
		adcbgbaseacc = 0;
 80009d4:	2100      	movs	r1, #0
		globaladcavg = (adcbgbaseacc / (ADCBUFSIZE / 2)) >> 11;
 80009d6:	4830      	ldr	r0, [pc, #192]	; (8000a98 <ADC_Conv_complete+0x21c>)
 80009d8:	6823      	ldr	r3, [r4, #0]
		samplecnt = 0;
 80009da:	6011      	str	r1, [r2, #0]
		globaladcavg = (adcbgbaseacc / (ADCBUFSIZE / 2)) >> 11;
 80009dc:	08db      	lsrs	r3, r3, #3
		adcbgbaseacc = 0;
 80009de:	6021      	str	r1, [r4, #0]
		globaladcavg = (adcbgbaseacc / (ADCBUFSIZE / 2)) >> 11;
 80009e0:	fba0 2303 	umull	r2, r3, r0, r3
 80009e4:	4a2d      	ldr	r2, [pc, #180]	; (8000a9c <ADC_Conv_complete+0x220>)
 80009e6:	0b9b      	lsrs	r3, r3, #14
 80009e8:	6013      	str	r3, [r2, #0]
	if (xTaskToNotify == NULL) {
 80009ea:	4b2d      	ldr	r3, [pc, #180]	; (8000aa0 <ADC_Conv_complete+0x224>)
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	b322      	cbz	r2, 8000a3a <ADC_Conv_complete+0x1be>
	} else if (sigsend) {
 80009f0:	f8db 2000 	ldr.w	r2, [fp]
 80009f4:	b972      	cbnz	r2, 8000a14 <ADC_Conv_complete+0x198>
}
 80009f6:	b007      	add	sp, #28
 80009f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (sigprev) {		// but there was a trigger the last packet
 80009fc:	b113      	cbz	r3, 8000a04 <ADC_Conv_complete+0x188>
			sendendstatus = 1;		// so tell udpstream to send the end of sequence status packet
 80009fe:	4b29      	ldr	r3, [pc, #164]	; (8000aa4 <ADC_Conv_complete+0x228>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	701a      	strb	r2, [r3, #0]
		sigprev = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	600b      	str	r3, [r1, #0]
 8000a08:	e7dc      	b.n	80009c4 <ADC_Conv_complete+0x148>
			++adcbatchid; // start a new adc batch number
 8000a0a:	9b05      	ldr	r3, [sp, #20]
 8000a0c:	4a13      	ldr	r2, [pc, #76]	; (8000a5c <ADC_Conv_complete+0x1e0>)
 8000a0e:	3301      	adds	r3, #1
 8000a10:	7013      	strb	r3, [r2, #0]
 8000a12:	e7ce      	b.n	80009b2 <ADC_Conv_complete+0x136>
		vTaskNotifyGiveFromISR(xTaskToNotify, &xHigherPriorityTaskWoken);
 8000a14:	4c24      	ldr	r4, [pc, #144]	; (8000aa8 <ADC_Conv_complete+0x22c>)
 8000a16:	6818      	ldr	r0, [r3, #0]
 8000a18:	4621      	mov	r1, r4
 8000a1a:	f011 ffa5 	bl	8012968 <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000a1e:	6823      	ldr	r3, [r4, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d0e8      	beq.n	80009f6 <ADC_Conv_complete+0x17a>
 8000a24:	4b21      	ldr	r3, [pc, #132]	; (8000aac <ADC_Conv_complete+0x230>)
 8000a26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	f3bf 8f4f 	dsb	sy
 8000a30:	f3bf 8f6f 	isb	sy
}
 8000a34:	b007      	add	sp, #28
 8000a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		printf("Notify task null\n");
 8000a3a:	481d      	ldr	r0, [pc, #116]	; (8000ab0 <ADC_Conv_complete+0x234>)
}
 8000a3c:	b007      	add	sp, #28
 8000a3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printf("Notify task null\n");
 8000a42:	f020 b849 	b.w	8020ad8 <puts>
 8000a46:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <ADC_Conv_complete+0x208>)
 8000a48:	9901      	ldr	r1, [sp, #4]
 8000a4a:	6019      	str	r1, [r3, #0]
 8000a4c:	e79e      	b.n	800098c <ADC_Conv_complete+0x110>
 8000a4e:	bf00      	nop
 8000a50:	200006a8 	.word	0x200006a8
 8000a54:	20022810 	.word	0x20022810
 8000a58:	20022824 	.word	0x20022824
 8000a5c:	2000069c 	.word	0x2000069c
 8000a60:	20022774 	.word	0x20022774
 8000a64:	200006a4 	.word	0x200006a4
 8000a68:	20000708 	.word	0x20000708
 8000a6c:	20000002 	.word	0x20000002
 8000a70:	200006a0 	.word	0x200006a0
 8000a74:	200007a0 	.word	0x200007a0
 8000a78:	20000000 	.word	0x20000000
 8000a7c:	20000700 	.word	0x20000700
 8000a80:	2000071c 	.word	0x2000071c
 8000a84:	20000704 	.word	0x20000704
 8000a88:	200006b8 	.word	0x200006b8
 8000a8c:	20000714 	.word	0x20000714
 8000a90:	200006fc 	.word	0x200006fc
 8000a94:	2000070c 	.word	0x2000070c
 8000a98:	16816817 	.word	0x16816817
 8000a9c:	200006ac 	.word	0x200006ac
 8000aa0:	200007a8 	.word	0x200007a8
 8000aa4:	20000710 	.word	0x20000710
 8000aa8:	200007a4 	.word	0x200007a4
 8000aac:	e000ed04 	.word	0xe000ed04
 8000ab0:	080248f8 	.word	0x080248f8
 8000ab4:	20000718 	.word	0x20000718
 8000ab8:	200006bc 	.word	0x200006bc
 8000abc:	20000720 	.word	0x20000720

08000ac0 <startadc>:

void startadc() {
 8000ac0:	b538      	push	{r3, r4, r5, lr}
//	uint16_t *adcbufdum1, *adcbufdum2;		// debug
//	adcbufdum1 = pvPortMalloc(UDPBUFSIZE);	//  dummy buffer
//	adcbufdum2 = pvPortMalloc(UDPBUFSIZE);	//  dummy buffer

	statuspkt.clktrim = 108000000;
	statuspkt.adcpktssent = 0;
 8000ac2:	2200      	movs	r2, #0
	statuspkt.clktrim = 108000000;
 8000ac4:	4b2b      	ldr	r3, [pc, #172]	; (8000b74 <startadc+0xb4>)
 8000ac6:	492c      	ldr	r1, [pc, #176]	; (8000b78 <startadc+0xb8>)

	printf("Starting ADC DMA\n");
 8000ac8:	482c      	ldr	r0, [pc, #176]	; (8000b7c <startadc+0xbc>)
	statuspkt.clktrim = 108000000;
 8000aca:	6599      	str	r1, [r3, #88]	; 0x58
	osDelay(100);
// get some heap for the ADC stream DMA buffer 1
	pktbuf = pvPortMalloc(UDPBUFSIZE * 2);	// two buffers concatenated
 8000acc:	4c2c      	ldr	r4, [pc, #176]	; (8000b80 <startadc+0xc0>)
	statuspkt.adcpktssent = 0;
 8000ace:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	printf("Starting ADC DMA\n");
 8000ad2:	f020 f801 	bl	8020ad8 <puts>
	osDelay(100);
 8000ad6:	2064      	movs	r0, #100	; 0x64
 8000ad8:	f010 fa06 	bl	8010ee8 <osDelay>
	pktbuf = pvPortMalloc(UDPBUFSIZE * 2);	// two buffers concatenated
 8000adc:	f44f 6038 	mov.w	r0, #2944	; 0xb80
 8000ae0:	f012 fc20 	bl	8013324 <pvPortMalloc>
 8000ae4:	6020      	str	r0, [r4, #0]
	if (pktbuf == NULL) {
 8000ae6:	2800      	cmp	r0, #0
 8000ae8:	d03f      	beq.n	8000b6a <startadc+0xaa>
		printf("pvPortMalloc returned nil for pktbuf\n");
		for (;;)
			;
	}
	if (((uint32_t) pktbuf & 3) > 0) {
 8000aea:	0783      	lsls	r3, r0, #30
 8000aec:	d003      	beq.n	8000af6 <startadc+0x36>
		printf("******** pvPortMalloc not on word boundary *********\n");
 8000aee:	4825      	ldr	r0, [pc, #148]	; (8000b84 <startadc+0xc4>)
 8000af0:	f01f fff2 	bl	8020ad8 <puts>
 8000af4:	6820      	ldr	r0, [r4, #0]
 8000af6:	1f03      	subs	r3, r0, #4
 8000af8:	f200 51bc 	addw	r1, r0, #1468	; 0x5bc

//	printf("(&(*pktbuf)[0])=0x%x ", &((*pktbuf)[0]));
//	printf("(&(*pktbuf)[UDPBUFSIZE / 4])=0x%x\n", &((*pktbuf)[UDPBUFSIZE / 4]));

	for (i = 0; i < UDPBUFSIZE / 4; i++) {	// fill buffers, 4 bytes at a time
		(*pktbuf)[i] = 0x55555555;
 8000afc:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8000b00:	f843 2f04 	str.w	r2, [r3, #4]!
	for (i = 0; i < UDPBUFSIZE / 4; i++) {	// fill buffers, 4 bytes at a time
 8000b04:	428b      	cmp	r3, r1
 8000b06:	d1fb      	bne.n	8000b00 <startadc+0x40>
 8000b08:	f600 317c 	addw	r1, r0, #2940	; 0xb7c
	}
	for (i = UDPBUFSIZE / 4; i < UDPBUFSIZE / 2; i++) {	// fill buffers, 4 bytes at a time
		(*pktbuf)[i] = 0xaaaaaaaa;
 8000b0c:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000b10:	f843 2f04 	str.w	r2, [r3, #4]!
	for (i = UDPBUFSIZE / 4; i < UDPBUFSIZE / 2; i++) {	// fill buffers, 4 bytes at a time
 8000b14:	4299      	cmp	r1, r3
 8000b16:	d1fb      	bne.n	8000b10 <startadc+0x50>
	}

	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
 8000b18:	f100 0210 	add.w	r2, r0, #16
	adcbuf2 = &(*pktbuf)[(ADCBUFHEAD / 4) + (ADCBUFSIZE / 4) + (ADCBUFHEAD / 4)];	// leave room in start of 2nd buffer
 8000b1c:	f500 64ba 	add.w	r4, r0, #1488	; 0x5d0
	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
 8000b20:	4819      	ldr	r0, [pc, #100]	; (8000b88 <startadc+0xc8>)

	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b22:	f44f 7336 	mov.w	r3, #728	; 0x2d8
	adcbuf2 = &(*pktbuf)[(ADCBUFHEAD / 4) + (ADCBUFSIZE / 4) + (ADCBUFHEAD / 4)];	// leave room in start of 2nd buffer
 8000b26:	4d19      	ldr	r5, [pc, #100]	; (8000b8c <startadc+0xcc>)
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b28:	4611      	mov	r1, r2
	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
 8000b2a:	6002      	str	r2, [r0, #0]
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b2c:	4622      	mov	r2, r4
 8000b2e:	4818      	ldr	r0, [pc, #96]	; (8000b90 <startadc+0xd0>)
	adcbuf2 = &(*pktbuf)[(ADCBUFHEAD / 4) + (ADCBUFSIZE / 4) + (ADCBUFHEAD / 4)];	// leave room in start of 2nd buffer
 8000b30:	602c      	str	r4, [r5, #0]
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b32:	f7ff fdfb 	bl	800072c <HAL_ADCEx_MultiModeStart_DBDMA>
 8000b36:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <startadc+0xd4>)
 8000b38:	7018      	strb	r0, [r3, #0]

//	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbufdum1, adcbufdum2, (ADCBUFSIZE / 4));		// DEBUG
//		printf("ADC_MM_Start returned %u\r\n", adcstat);

	if (HAL_ADC_Start(&hadc3) != HAL_OK)
 8000b3a:	4817      	ldr	r0, [pc, #92]	; (8000b98 <startadc+0xd8>)
 8000b3c:	f004 feb8 	bl	80058b0 <HAL_ADC_Start>
 8000b40:	b110      	cbz	r0, 8000b48 <startadc+0x88>
		printf("ADC3 failed start\r\n");
 8000b42:	4816      	ldr	r0, [pc, #88]	; (8000b9c <startadc+0xdc>)
 8000b44:	f01f ffc8 	bl	8020ad8 <puts>
	if (HAL_ADC_Start(&hadc2) != HAL_OK)
 8000b48:	4815      	ldr	r0, [pc, #84]	; (8000ba0 <startadc+0xe0>)
 8000b4a:	f004 feb1 	bl	80058b0 <HAL_ADC_Start>
 8000b4e:	b110      	cbz	r0, 8000b56 <startadc+0x96>
		printf("ADC2 failed start\r\n");
 8000b50:	4814      	ldr	r0, [pc, #80]	; (8000ba4 <startadc+0xe4>)
 8000b52:	f01f ffc1 	bl	8020ad8 <puts>
	if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8000b56:	480e      	ldr	r0, [pc, #56]	; (8000b90 <startadc+0xd0>)
 8000b58:	f004 feaa 	bl	80058b0 <HAL_ADC_Start>
 8000b5c:	b900      	cbnz	r0, 8000b60 <startadc+0xa0>
//			HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);		// red led on

			//	myhexDump ("INITBUFF1---------------------------------------", *adcbuf1, ADCBUFLEN*2);
		}
#endif
}
 8000b5e:	bd38      	pop	{r3, r4, r5, pc}
		printf("ADC1 failed start\r\n");
 8000b60:	4811      	ldr	r0, [pc, #68]	; (8000ba8 <startadc+0xe8>)
}
 8000b62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		printf("ADC1 failed start\r\n");
 8000b66:	f01f bfb7 	b.w	8020ad8 <puts>
		printf("pvPortMalloc returned nil for pktbuf\n");
 8000b6a:	4810      	ldr	r0, [pc, #64]	; (8000bac <startadc+0xec>)
 8000b6c:	f01f ffb4 	bl	8020ad8 <puts>
 8000b70:	e7fe      	b.n	8000b70 <startadc+0xb0>
 8000b72:	bf00      	nop
 8000b74:	20022774 	.word	0x20022774
 8000b78:	066ff300 	.word	0x066ff300
 8000b7c:	0802493c 	.word	0x0802493c
 8000b80:	20022824 	.word	0x20022824
 8000b84:	08024978 	.word	0x08024978
 8000b88:	20022828 	.word	0x20022828
 8000b8c:	2002281c 	.word	0x2002281c
 8000b90:	20022dcc 	.word	0x20022dcc
 8000b94:	2002282c 	.word	0x2002282c
 8000b98:	20022e14 	.word	0x20022e14
 8000b9c:	080249b0 	.word	0x080249b0
 8000ba0:	20022a88 	.word	0x20022a88
 8000ba4:	080249c4 	.word	0x080249c4
 8000ba8:	080249d8 	.word	0x080249d8
 8000bac:	08024950 	.word	0x08024950

08000bb0 <vApplicationIdleHook>:
	 specified, or call vTaskDelay()). If the application makes use of the
	 vTaskDelete() API function (as this demo application does) then it is also
	 important that vApplicationIdleHook() is permitted to return to its calling
	 function, because it is the responsibility of the idle task to clean up
	 memory allocated by the kernel to any task that has since been deleted. */
}
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <vApplicationStackOverflowHook>:
/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName) {
	/* Run time stack overflow checking is performed if
	 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
	 called if a stack overflow is detected. */
}
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <vApplicationMallocFailedHook>:
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000bbc:	b430      	push	{r4, r5}
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000bbe:	f44f 7380 	mov.w	r3, #256	; 0x100
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000bc2:	4d03      	ldr	r5, [pc, #12]	; (8000bd0 <vApplicationGetIdleTaskMemory+0x14>)
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000bc4:	4c03      	ldr	r4, [pc, #12]	; (8000bd4 <vApplicationGetIdleTaskMemory+0x18>)
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000bc6:	6005      	str	r5, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000bc8:	600c      	str	r4, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000bca:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8000bcc:	bc30      	pop	{r4, r5}
 8000bce:	4770      	bx	lr
 8000bd0:	20000bac 	.word	0x20000bac
 8000bd4:	200007ac 	.word	0x200007ac

08000bd8 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000bd8:	b430      	push	{r4, r5}
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000bda:	f44f 7300 	mov.w	r3, #512	; 0x200
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000bde:	4d03      	ldr	r5, [pc, #12]	; (8000bec <vApplicationGetTimerTaskMemory+0x14>)
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000be0:	4c03      	ldr	r4, [pc, #12]	; (8000bf0 <vApplicationGetTimerTaskMemory+0x18>)
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000be2:	6005      	str	r5, [r0, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000be4:	600c      	str	r4, [r1, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000be6:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8000be8:	bc30      	pop	{r4, r5}
 8000bea:	4770      	bx	lr
 8000bec:	20001400 	.word	0x20001400
 8000bf0:	20000c00 	.word	0x20000c00

08000bf4 <hc_sent>:
// lwip calls this function when the remote host has successfully received data (ack)
static err_t hc_sent(void *arg, struct tcp_pcb *pcb, u16_t len) {
	struct hc_state *state = arg;

	// Reset connection timeout
	state->ConnectionTimeout = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	7483      	strb	r3, [r0, #18]

	return (ERR_OK);
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	4770      	bx	lr

08000bfc <hc_recv>:
	if ((err == ERR_OK) && (p != NULL)) {
 8000bfc:	fab3 f383 	clz	r3, r3
err_t hc_recv(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err) {
 8000c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if ((err == ERR_OK) && (p != NULL)) {
 8000c04:	095b      	lsrs	r3, r3, #5
err_t hc_recv(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err) {
 8000c06:	b083      	sub	sp, #12
 8000c08:	4604      	mov	r4, r0
 8000c0a:	460e      	mov	r6, r1
	if ((err == ERR_OK) && (p != NULL)) {
 8000c0c:	4617      	mov	r7, r2
 8000c0e:	b102      	cbz	r2, 8000c12 <hc_recv+0x16>
 8000c10:	bb9b      	cbnz	r3, 8000c7a <hc_recv+0x7e>
	else if ((err == ERR_OK) && (p == NULL)) {
 8000c12:	bb47      	cbnz	r7, 8000c66 <hc_recv+0x6a>
 8000c14:	b33b      	cbz	r3, 8000c66 <hc_recv+0x6a>
		for (i = 0; i < state->Len; i++) {
 8000c16:	8a23      	ldrh	r3, [r4, #16]
 8000c18:	6967      	ldr	r7, [r4, #20]
 8000c1a:	f894 8000 	ldrb.w	r8, [r4]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	f000 8095 	beq.w	8000d4e <hc_recv+0x152>
 8000c24:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8000c28:	2200      	movs	r2, #0
	hc_errormsg errormsg = GEN_ERROR;
 8000c2a:	2504      	movs	r5, #4
			if (errormsg == GEN_ERROR) {
 8000c2c:	2d04      	cmp	r5, #4
 8000c2e:	f819 0002 	ldrb.w	r0, [r9, r2]
 8000c32:	f102 0101 	add.w	r1, r2, #1
 8000c36:	d052      	beq.n	8000cde <hc_recv+0xe2>
				if ((*(state->RecvData + i) == '\r') && (*(state->RecvData + ++i) == '\n')
 8000c38:	280d      	cmp	r0, #13
 8000c3a:	d018      	beq.n	8000c6e <hc_recv+0x72>
 8000c3c:	460a      	mov	r2, r1
		for (i = 0; i < state->Len; i++) {
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	dcf4      	bgt.n	8000c2c <hc_recv+0x30>
	char *page = NULL;
 8000c42:	f04f 0a00 	mov.w	sl, #0
		if (errormsg == OK) {
 8000c46:	2d00      	cmp	r5, #0
 8000c48:	d163      	bne.n	8000d12 <hc_recv+0x116>
			(*state->ReturnPage)(state->Num, OK, page, state->Len);
 8000c4a:	4652      	mov	r2, sl
 8000c4c:	4629      	mov	r1, r5
 8000c4e:	4640      	mov	r0, r8
 8000c50:	47b8      	blx	r7
	if (pcb != NULL) {
 8000c52:	b116      	cbz	r6, 8000c5a <hc_recv+0x5e>
		tcp_close(pcb);
 8000c54:	4630      	mov	r0, r6
 8000c56:	f017 fa45 	bl	80180e4 <tcp_close>
		free(state->RecvData);
 8000c5a:	68e0      	ldr	r0, [r4, #12]
 8000c5c:	f01e fee6 	bl	801fa2c <free>
		free(state);
 8000c60:	4620      	mov	r0, r4
 8000c62:	f01e fee3 	bl	801fa2c <free>
}
 8000c66:	2000      	movs	r0, #0
 8000c68:	b003      	add	sp, #12
 8000c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if ((*(state->RecvData + i) == '\r') && (*(state->RecvData + ++i) == '\n')
 8000c6e:	f819 0001 	ldrb.w	r0, [r9, r1]
 8000c72:	280a      	cmp	r0, #10
 8000c74:	d045      	beq.n	8000d02 <hc_recv+0x106>
 8000c76:	1c4a      	adds	r2, r1, #1
 8000c78:	e7e1      	b.n	8000c3e <hc_recv+0x42>
		tcp_recved(pcb, p->tot_len);
 8000c7a:	4608      	mov	r0, r1
 8000c7c:	8911      	ldrh	r1, [r2, #8]
 8000c7e:	f016 fb3f 	bl	8017300 <tcp_recved>
 8000c82:	463d      	mov	r5, r7
 8000c84:	8a21      	ldrh	r1, [r4, #16]
			state->RecvData[temp_p->len + state->Len] = '\0';
 8000c86:	2600      	movs	r6, #0
			state->RecvData = realloc(state->RecvData, temp_p->len + state->Len + 1);
 8000c88:	896b      	ldrh	r3, [r5, #10]
 8000c8a:	68e0      	ldr	r0, [r4, #12]
 8000c8c:	4419      	add	r1, r3
 8000c8e:	3101      	adds	r1, #1
 8000c90:	f01f ff5e 	bl	8020b50 <realloc>
 8000c94:	60e0      	str	r0, [r4, #12]
			if (state->RecvData == NULL) {
 8000c96:	2800      	cmp	r0, #0
 8000c98:	d04a      	beq.n	8000d30 <hc_recv+0x134>
			strncpy(state->RecvData + state->Len, temp_p->payload, temp_p->len);
 8000c9a:	8a23      	ldrh	r3, [r4, #16]
 8000c9c:	896a      	ldrh	r2, [r5, #10]
 8000c9e:	6869      	ldr	r1, [r5, #4]
 8000ca0:	4418      	add	r0, r3
 8000ca2:	f020 fe1f 	bl	80218e4 <strncpy>
			state->RecvData[temp_p->len + state->Len] = '\0';
 8000ca6:	8969      	ldrh	r1, [r5, #10]
 8000ca8:	68e3      	ldr	r3, [r4, #12]
 8000caa:	8a22      	ldrh	r2, [r4, #16]
 8000cac:	440b      	add	r3, r1
 8000cae:	549e      	strb	r6, [r3, r2]
			state->Len += temp_p->len;
 8000cb0:	896b      	ldrh	r3, [r5, #10]
 8000cb2:	8a21      	ldrh	r1, [r4, #16]
			temp_p = temp_p->next;
 8000cb4:	682d      	ldr	r5, [r5, #0]
			state->Len += temp_p->len;
 8000cb6:	4419      	add	r1, r3
 8000cb8:	b289      	uxth	r1, r1
 8000cba:	8221      	strh	r1, [r4, #16]
		while (temp_p != NULL) {
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d1e3      	bne.n	8000c88 <hc_recv+0x8c>
			temp_p = p->next;
 8000cc0:	683c      	ldr	r4, [r7, #0]
			pbuf_free_callback(p);
 8000cc2:	4638      	mov	r0, r7
 8000cc4:	f012 fd46 	bl	8013754 <pbuf_free_callback>
		while (p != NULL) {
 8000cc8:	4627      	mov	r7, r4
 8000cca:	2c00      	cmp	r4, #0
 8000ccc:	d0cb      	beq.n	8000c66 <hc_recv+0x6a>
			temp_p = p->next;
 8000cce:	683c      	ldr	r4, [r7, #0]
			pbuf_free_callback(p);
 8000cd0:	4638      	mov	r0, r7
 8000cd2:	f012 fd3f 	bl	8013754 <pbuf_free_callback>
		while (p != NULL) {
 8000cd6:	4627      	mov	r7, r4
 8000cd8:	2c00      	cmp	r4, #0
 8000cda:	d1f1      	bne.n	8000cc0 <hc_recv+0xc4>
 8000cdc:	e7c3      	b.n	8000c66 <hc_recv+0x6a>
				if ((*(state->RecvData + i) == '2') && (*(state->RecvData + ++i) == '0')
 8000cde:	2832      	cmp	r0, #50	; 0x32
 8000ce0:	d009      	beq.n	8000cf6 <hc_recv+0xfa>
				if (*(state->RecvData + i) == '\n')
 8000ce2:	280a      	cmp	r0, #10
 8000ce4:	d1aa      	bne.n	8000c3c <hc_recv+0x40>
		for (i = 0; i < state->Len; i++) {
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	dd12      	ble.n	8000d10 <hc_recv+0x114>
 8000cea:	f819 0001 	ldrb.w	r0, [r9, r1]
 8000cee:	460a      	mov	r2, r1
					errormsg = NOT_FOUND;
 8000cf0:	2503      	movs	r5, #3
		for (i = 0; i < state->Len; i++) {
 8000cf2:	3101      	adds	r1, #1
 8000cf4:	e7a0      	b.n	8000c38 <hc_recv+0x3c>
				if ((*(state->RecvData + i) == '2') && (*(state->RecvData + ++i) == '0')
 8000cf6:	f819 0001 	ldrb.w	r0, [r9, r1]
 8000cfa:	2830      	cmp	r0, #48	; 0x30
 8000cfc:	d00f      	beq.n	8000d1e <hc_recv+0x122>
 8000cfe:	1c91      	adds	r1, r2, #2
 8000d00:	e7ef      	b.n	8000ce2 <hc_recv+0xe6>
						&& (*(state->RecvData + ++i) == '\r') && (*(state->RecvData + ++i) == '\n')) {
 8000d02:	eb09 0102 	add.w	r1, r9, r2
 8000d06:	7888      	ldrb	r0, [r1, #2]
 8000d08:	280d      	cmp	r0, #13
 8000d0a:	d01b      	beq.n	8000d44 <hc_recv+0x148>
 8000d0c:	3203      	adds	r2, #3
 8000d0e:	e796      	b.n	8000c3e <hc_recv+0x42>
					errormsg = NOT_FOUND;
 8000d10:	2503      	movs	r5, #3
			(*state->ReturnPage)(state->Num, errormsg, NULL, 0);
 8000d12:	2300      	movs	r3, #0
 8000d14:	4629      	mov	r1, r5
 8000d16:	4640      	mov	r0, r8
 8000d18:	461a      	mov	r2, r3
 8000d1a:	47b8      	blx	r7
 8000d1c:	e799      	b.n	8000c52 <hc_recv+0x56>
						&& (*(state->RecvData + ++i) == '0'))
 8000d1e:	eb09 0002 	add.w	r0, r9, r2
 8000d22:	1cd1      	adds	r1, r2, #3
 8000d24:	7880      	ldrb	r0, [r0, #2]
 8000d26:	2830      	cmp	r0, #48	; 0x30
 8000d28:	d1db      	bne.n	8000ce2 <hc_recv+0xe6>
 8000d2a:	460a      	mov	r2, r1
					errormsg = OK;
 8000d2c:	2500      	movs	r5, #0
 8000d2e:	e786      	b.n	8000c3e <hc_recv+0x42>
				(*state->ReturnPage)(state->Num, OUT_MEM, NULL, 0);
 8000d30:	4603      	mov	r3, r0
 8000d32:	6965      	ldr	r5, [r4, #20]
 8000d34:	7820      	ldrb	r0, [r4, #0]
 8000d36:	2101      	movs	r1, #1
 8000d38:	461a      	mov	r2, r3
 8000d3a:	47a8      	blx	r5
}
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	b003      	add	sp, #12
 8000d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						&& (*(state->RecvData + ++i) == '\r') && (*(state->RecvData + ++i) == '\n')) {
 8000d44:	78c9      	ldrb	r1, [r1, #3]
 8000d46:	290a      	cmp	r1, #10
 8000d48:	d003      	beq.n	8000d52 <hc_recv+0x156>
 8000d4a:	3204      	adds	r2, #4
 8000d4c:	e777      	b.n	8000c3e <hc_recv+0x42>
	hc_errormsg errormsg = GEN_ERROR;
 8000d4e:	2504      	movs	r5, #4
 8000d50:	e7df      	b.n	8000d12 <hc_recv+0x116>
					i++;
 8000d52:	3204      	adds	r2, #4
 8000d54:	9301      	str	r3, [sp, #4]
					page = malloc(strlen(state->RecvData + i));
 8000d56:	4491      	add	r9, r2
 8000d58:	4648      	mov	r0, r9
 8000d5a:	f7ff fa7b 	bl	8000254 <strlen>
 8000d5e:	4683      	mov	fp, r0
 8000d60:	f01e fe5c 	bl	801fa1c <malloc>
					strcpy(page, state->RecvData + i);
 8000d64:	4649      	mov	r1, r9
 8000d66:	f10b 0201 	add.w	r2, fp, #1
					page = malloc(strlen(state->RecvData + i));
 8000d6a:	4682      	mov	sl, r0
					strcpy(page, state->RecvData + i);
 8000d6c:	f01e fe87 	bl	801fa7e <memcpy>
					break;
 8000d70:	9b01      	ldr	r3, [sp, #4]
		if (errormsg == OK) {
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	f43f af69 	beq.w	8000c4a <hc_recv+0x4e>
 8000d78:	e7cb      	b.n	8000d12 <hc_recv+0x116>
 8000d7a:	bf00      	nop

08000d7c <hc_error>:
	(*state->ReturnPage)(state->Num, GEN_ERROR, NULL, 0);
 8000d7c:	2300      	movs	r3, #0
static void hc_error(void *arg, err_t err) {
 8000d7e:	b570      	push	{r4, r5, r6, lr}
 8000d80:	4604      	mov	r4, r0
	(*state->ReturnPage)(state->Num, GEN_ERROR, NULL, 0);
 8000d82:	461a      	mov	r2, r3
static void hc_error(void *arg, err_t err) {
 8000d84:	460d      	mov	r5, r1
	(*state->ReturnPage)(state->Num, GEN_ERROR, NULL, 0);
 8000d86:	6946      	ldr	r6, [r0, #20]
 8000d88:	2104      	movs	r1, #4
 8000d8a:	7800      	ldrb	r0, [r0, #0]
 8000d8c:	47b0      	blx	r6
	free(state->RecvData);
 8000d8e:	68e0      	ldr	r0, [r4, #12]
 8000d90:	f01e fe4c 	bl	801fa2c <free>
	free(state->PostVars);
 8000d94:	68a0      	ldr	r0, [r4, #8]
 8000d96:	f01e fe49 	bl	801fa2c <free>
	free(state->Page);
 8000d9a:	6860      	ldr	r0, [r4, #4]
 8000d9c:	f01e fe46 	bl	801fa2c <free>
	free(state);
 8000da0:	4620      	mov	r0, r4
 8000da2:	f01e fe43 	bl	801fa2c <free>
	printf("hc_error: err=%d\n", err);
 8000da6:	4629      	mov	r1, r5
 8000da8:	4802      	ldr	r0, [pc, #8]	; (8000db4 <hc_error+0x38>)
}
 8000daa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	printf("hc_error: err=%d\n", err);
 8000dae:	f01f be0b 	b.w	80209c8 <iprintf>
 8000db2:	bf00      	nop
 8000db4:	08024a68 	.word	0x08024a68

08000db8 <hc_poll>:
static err_t hc_poll(void *arg, struct tcp_pcb *pcb) {
 8000db8:	b538      	push	{r3, r4, r5, lr}
	state->ConnectionTimeout++;
 8000dba:	7c83      	ldrb	r3, [r0, #18]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	b2db      	uxtb	r3, r3
	if (state->ConnectionTimeout > 20) {
 8000dc0:	2b14      	cmp	r3, #20
	state->ConnectionTimeout++;
 8000dc2:	7483      	strb	r3, [r0, #18]
	if (state->ConnectionTimeout > 20) {
 8000dc4:	d909      	bls.n	8000dda <hc_poll+0x22>
 8000dc6:	4604      	mov	r4, r0
		tcp_abort(pcb);
 8000dc8:	4608      	mov	r0, r1
 8000dca:	f016 ff75 	bl	8017cb8 <tcp_abort>
		(*state->ReturnPage)(state->Num, TIMEOUT, NULL, 0);
 8000dce:	2300      	movs	r3, #0
 8000dd0:	6965      	ldr	r5, [r4, #20]
 8000dd2:	2102      	movs	r1, #2
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	7820      	ldrb	r0, [r4, #0]
 8000dd8:	47a8      	blx	r5
}
 8000dda:	2000      	movs	r0, #0
 8000ddc:	bd38      	pop	{r3, r4, r5, pc}
 8000dde:	bf00      	nop

08000de0 <hc_connected>:

// lwip calls this function when the connection is established
static err_t hc_connected(void *arg, struct tcp_pcb *pcb, err_t err) {
 8000de0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000de4:	4604      	mov	r4, r0
 8000de6:	b083      	sub	sp, #12
 8000de8:	460d      	mov	r5, r1
	struct hc_state *state = arg;
	char *headers;

	// error?
	if (err != ERR_OK) {
 8000dea:	b19a      	cbz	r2, 8000e14 <hc_connected+0x34>
	if (pcb != NULL) {
 8000dec:	b111      	cbz	r1, 8000df4 <hc_connected+0x14>
		tcp_close(pcb);
 8000dee:	4608      	mov	r0, r1
 8000df0:	f017 f978 	bl	80180e4 <tcp_close>
		hc_clearpcb(pcb);

		// Call return function
		(*state->ReturnPage)(state->Num, GEN_ERROR, NULL, 0);
 8000df4:	2300      	movs	r3, #0
 8000df6:	2104      	movs	r1, #4
 8000df8:	7820      	ldrb	r0, [r4, #0]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	6965      	ldr	r5, [r4, #20]
 8000dfe:	47a8      	blx	r5

		// Free wc state
		free(state->RecvData);
 8000e00:	68e0      	ldr	r0, [r4, #12]
 8000e02:	f01e fe13 	bl	801fa2c <free>
		free(state);
 8000e06:	4620      	mov	r0, r4
 8000e08:	f01e fe10 	bl	801fa2c <free>
	free(headers);
	free(state->PostVars);			// postvars are send, so we don't need them anymore
	free(state->Page);		    	        // page is requested, so we don't need it anymore

	return (ERR_OK);
}
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	b003      	add	sp, #12
 8000e10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (state->PostVars == NULL) {
 8000e14:	e9d0 8701 	ldrd	r8, r7, [r0, #4]
 8000e18:	4640      	mov	r0, r8
 8000e1a:	f7ff fa1b 	bl	8000254 <strlen>
 8000e1e:	4606      	mov	r6, r0
 8000e20:	2f00      	cmp	r7, #0
 8000e22:	d039      	beq.n	8000e98 <hc_connected+0xb8>
		headers = malloc(91 + strlen(state->PostVars) + strlen(state->Page) + 10);
 8000e24:	4638      	mov	r0, r7
 8000e26:	f7ff fa15 	bl	8000254 <strlen>
 8000e2a:	4681      	mov	r9, r0
 8000e2c:	f106 0065 	add.w	r0, r6, #101	; 0x65
 8000e30:	4448      	add	r0, r9
 8000e32:	f01e fdf3 	bl	801fa1c <malloc>
		sprintf(headers,
 8000e36:	464b      	mov	r3, r9
 8000e38:	9700      	str	r7, [sp, #0]
 8000e3a:	4642      	mov	r2, r8
 8000e3c:	491b      	ldr	r1, [pc, #108]	; (8000eac <hc_connected+0xcc>)
		headers = malloc(91 + strlen(state->PostVars) + strlen(state->Page) + 10);
 8000e3e:	4606      	mov	r6, r0
		sprintf(headers,
 8000e40:	f01f ff1a 	bl	8020c78 <siprintf>
	tcp_recv(pcb, hc_recv);
 8000e44:	491a      	ldr	r1, [pc, #104]	; (8000eb0 <hc_connected+0xd0>)
 8000e46:	4628      	mov	r0, r5
 8000e48:	f016 faec 	bl	8017424 <tcp_recv>
	tcp_err(pcb, hc_error);
 8000e4c:	4919      	ldr	r1, [pc, #100]	; (8000eb4 <hc_connected+0xd4>)
 8000e4e:	4628      	mov	r0, r5
 8000e50:	f016 fb20 	bl	8017494 <tcp_err>
	tcp_poll(pcb, hc_poll, 10);
 8000e54:	220a      	movs	r2, #10
 8000e56:	4918      	ldr	r1, [pc, #96]	; (8000eb8 <hc_connected+0xd8>)
 8000e58:	4628      	mov	r0, r5
 8000e5a:	f016 fb3d 	bl	80174d8 <tcp_poll>
	tcp_sent(pcb, hc_sent);
 8000e5e:	4917      	ldr	r1, [pc, #92]	; (8000ebc <hc_connected+0xdc>)
 8000e60:	4628      	mov	r0, r5
 8000e62:	f016 fafb 	bl	801745c <tcp_sent>
	tcp_write(pcb, headers, strlen(headers), 1);
 8000e66:	4630      	mov	r0, r6
 8000e68:	f7ff f9f4 	bl	8000254 <strlen>
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	4602      	mov	r2, r0
 8000e70:	4631      	mov	r1, r6
 8000e72:	4628      	mov	r0, r5
 8000e74:	f019 f9fc 	bl	801a270 <tcp_write>
	tcp_output(pcb);
 8000e78:	4628      	mov	r0, r5
 8000e7a:	f01a f823 	bl	801aec4 <tcp_output>
	free(headers);
 8000e7e:	4630      	mov	r0, r6
 8000e80:	f01e fdd4 	bl	801fa2c <free>
	free(state->PostVars);			// postvars are send, so we don't need them anymore
 8000e84:	68a0      	ldr	r0, [r4, #8]
 8000e86:	f01e fdd1 	bl	801fa2c <free>
	free(state->Page);		    	        // page is requested, so we don't need it anymore
 8000e8a:	6860      	ldr	r0, [r4, #4]
 8000e8c:	f01e fdce 	bl	801fa2c <free>
}
 8000e90:	2000      	movs	r0, #0
 8000e92:	b003      	add	sp, #12
 8000e94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		headers = malloc(19 + strlen(state->Page));
 8000e98:	3013      	adds	r0, #19
 8000e9a:	f01e fdbf 	bl	801fa1c <malloc>
		sprintf(headers, "GET /%s HTTP/1.0\r\n\r\n", state->Page);
 8000e9e:	4642      	mov	r2, r8
 8000ea0:	4907      	ldr	r1, [pc, #28]	; (8000ec0 <hc_connected+0xe0>)
		headers = malloc(19 + strlen(state->Page));
 8000ea2:	4606      	mov	r6, r0
		sprintf(headers, "GET /%s HTTP/1.0\r\n\r\n", state->Page);
 8000ea4:	f01f fee8 	bl	8020c78 <siprintf>
 8000ea8:	e7cc      	b.n	8000e44 <hc_connected+0x64>
 8000eaa:	bf00      	nop
 8000eac:	08024a04 	.word	0x08024a04
 8000eb0:	08000bfd 	.word	0x08000bfd
 8000eb4:	08000d7d 	.word	0x08000d7d
 8000eb8:	08000db9 	.word	0x08000db9
 8000ebc:	08000bf5 	.word	0x08000bf5
 8000ec0:	080249ec 	.word	0x080249ec

08000ec4 <hc_open>:

// Public function for request a webpage (REMOTEIP, ...
int hc_open(ip_addr_t remoteIP, char *Page, char *PostVars, void (*returnpage)(u8_t, hc_errormsg, char*, u16_t)) {
 8000ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ec8:	b084      	sub	sp, #16
 8000eca:	460f      	mov	r7, r1
 8000ecc:	4616      	mov	r6, r2
 8000ece:	4699      	mov	r9, r3
 8000ed0:	9001      	str	r0, [sp, #4]
	// local port
	u16_t port = 8080;
	volatile err_t err;

	// Get a place for a new webclient state in the memory
	state = malloc(sizeof(struct hc_state));
 8000ed2:	2018      	movs	r0, #24
 8000ed4:	f01e fda2 	bl	801fa1c <malloc>
 8000ed8:	4604      	mov	r4, r0

	// Create a new PCB (PROTOCOL CONTROL BLOCK)
	pcb = tcp_new();
 8000eda:	f017 f82d 	bl	8017f38 <tcp_new>
	if (pcb == NULL || state == NULL) {
 8000ede:	2800      	cmp	r0, #0
 8000ee0:	d074      	beq.n	8000fcc <hc_open+0x108>
 8000ee2:	fab4 f184 	clz	r1, r4
 8000ee6:	0949      	lsrs	r1, r1, #5
 8000ee8:	2900      	cmp	r1, #0
 8000eea:	d16f      	bne.n	8000fcc <hc_open+0x108>
			;
		return 0;
	}

	// Define webclient state vars
	num++;
 8000eec:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8000ff4 <hc_open+0x130>
 8000ef0:	4605      	mov	r5, r0
	state->Num = num;
	state->RecvData = NULL;
 8000ef2:	60e1      	str	r1, [r4, #12]
	num++;
 8000ef4:	f898 2000 	ldrb.w	r2, [r8]
	state->ConnectionTimeout = 0;
 8000ef8:	74a1      	strb	r1, [r4, #18]
	num++;
 8000efa:	3201      	adds	r2, #1
	state->Len = 0;
 8000efc:	8221      	strh	r1, [r4, #16]
	state->ReturnPage = returnpage;
 8000efe:	f8c4 9014 	str.w	r9, [r4, #20]
	num++;
 8000f02:	b2d3      	uxtb	r3, r2
 8000f04:	f888 3000 	strb.w	r3, [r8]
	state->Num = num;
 8000f08:	7023      	strb	r3, [r4, #0]

	// Make place for PostVars & Page
	if (PostVars != NULL)
 8000f0a:	2e00      	cmp	r6, #0
 8000f0c:	d05b      	beq.n	8000fc6 <hc_open+0x102>
		state->PostVars = malloc(strlen(PostVars) + 1);
 8000f0e:	4630      	mov	r0, r6
 8000f10:	f7ff f9a0 	bl	8000254 <strlen>
 8000f14:	3001      	adds	r0, #1
 8000f16:	f01e fd81 	bl	801fa1c <malloc>
 8000f1a:	4681      	mov	r9, r0
 8000f1c:	60a0      	str	r0, [r4, #8]
	state->Page = malloc(strlen(Page) + 1);
 8000f1e:	4638      	mov	r0, r7
 8000f20:	f7ff f998 	bl	8000254 <strlen>
 8000f24:	f100 0a01 	add.w	sl, r0, #1
 8000f28:	4650      	mov	r0, sl
 8000f2a:	f01e fd77 	bl	801fa1c <malloc>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	6060      	str	r0, [r4, #4]

	// Check for "out of memory"
	if (state->Page == NULL || (state->PostVars == NULL && PostVars != NULL)) {
 8000f32:	2800      	cmp	r0, #0
 8000f34:	d037      	beq.n	8000fa6 <hc_open+0xe2>
 8000f36:	f1b9 0f00 	cmp.w	r9, #0
 8000f3a:	d032      	beq.n	8000fa2 <hc_open+0xde>
		printf("httpclient: no pcb memory\n");
#endif
		return 0;
	}
	// Place allocated copy data
	strcpy(state->Page, Page);
 8000f3c:	4652      	mov	r2, sl
 8000f3e:	4639      	mov	r1, r7
 8000f40:	f01e fd9d 	bl	801fa7e <memcpy>
	if (PostVars != NULL)
 8000f44:	b356      	cbz	r6, 8000f9c <hc_open+0xd8>
		strcpy(state->PostVars, PostVars);
 8000f46:	4631      	mov	r1, r6
 8000f48:	4648      	mov	r0, r9
 8000f4a:	f01f ff3a 	bl	8020dc2 <strcpy>
int hc_open(ip_addr_t remoteIP, char *Page, char *PostVars, void (*returnpage)(u8_t, hc_errormsg, char*, u16_t)) {
 8000f4e:	f641 7690 	movw	r6, #8080	; 0x1f90
	else
		state->PostVars = NULL;

	// Bind to local IP & local port
	while (tcp_bind(pcb, IP_ADDR_ANY, port) != ERR_OK) {
 8000f52:	4f24      	ldr	r7, [pc, #144]	; (8000fe4 <hc_open+0x120>)
 8000f54:	e000      	b.n	8000f58 <hc_open+0x94>
		// Local port in use, use port+1
		port++;
 8000f56:	b2b6      	uxth	r6, r6
	while (tcp_bind(pcb, IP_ADDR_ANY, port) != ERR_OK) {
 8000f58:	4632      	mov	r2, r6
 8000f5a:	4639      	mov	r1, r7
 8000f5c:	4628      	mov	r0, r5
		port++;
 8000f5e:	3601      	adds	r6, #1
	while (tcp_bind(pcb, IP_ADDR_ANY, port) != ERR_OK) {
 8000f60:	f016 f8c4 	bl	80170ec <tcp_bind>
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d1f6      	bne.n	8000f56 <hc_open+0x92>
	}

	// Use conn -> argument(s)
	tcp_arg(pcb, state);
 8000f68:	4621      	mov	r1, r4
 8000f6a:	4628      	mov	r0, r5
 8000f6c:	f016 fa56 	bl	801741c <tcp_arg>

	// Open connect (SEND SYN)
	err = tcp_connect(pcb, &remoteIP, 8080, hc_connected);
 8000f70:	4b1d      	ldr	r3, [pc, #116]	; (8000fe8 <hc_open+0x124>)
 8000f72:	4628      	mov	r0, r5
 8000f74:	f641 7290 	movw	r2, #8080	; 0x1f90
 8000f78:	a901      	add	r1, sp, #4
 8000f7a:	f017 f9d3 	bl	8018324 <tcp_connect>
 8000f7e:	b240      	sxtb	r0, r0
 8000f80:	f88d 000f 	strb.w	r0, [sp, #15]

	if (err != ERR_OK) {
 8000f84:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8000f88:	bb23      	cbnz	r3, 8000fd4 <hc_open+0x110>
		printf("hc_open failed with %d\n", err);
	}
	return num;
 8000f8a:	f898 0000 	ldrb.w	r0, [r8]
}
 8000f8e:	b004      	add	sp, #16
 8000f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	strcpy(state->Page, Page);
 8000f94:	4652      	mov	r2, sl
 8000f96:	4639      	mov	r1, r7
 8000f98:	f01e fd71 	bl	801fa7e <memcpy>
		state->PostVars = NULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60a3      	str	r3, [r4, #8]
 8000fa0:	e7d5      	b.n	8000f4e <hc_open+0x8a>
	if (state->Page == NULL || (state->PostVars == NULL && PostVars != NULL)) {
 8000fa2:	2e00      	cmp	r6, #0
 8000fa4:	d0f6      	beq.n	8000f94 <hc_open+0xd0>
		free(state->Page);
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f01e fd40 	bl	801fa2c <free>
		free(state->PostVars);
 8000fac:	4648      	mov	r0, r9
 8000fae:	f01e fd3d 	bl	801fa2c <free>
		free(state);
 8000fb2:	4620      	mov	r0, r4
 8000fb4:	f01e fd3a 	bl	801fa2c <free>
		tcp_close(pcb);
 8000fb8:	4628      	mov	r0, r5
 8000fba:	f017 f893 	bl	80180e4 <tcp_close>
		return 0;
 8000fbe:	2000      	movs	r0, #0
}
 8000fc0:	b004      	add	sp, #16
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8000fca:	e7a8      	b.n	8000f1e <hc_open+0x5a>
		printf("hc_open: Not enough memory for pcb or state\n");
 8000fcc:	4807      	ldr	r0, [pc, #28]	; (8000fec <hc_open+0x128>)
 8000fce:	f01f fd83 	bl	8020ad8 <puts>
 8000fd2:	e7fe      	b.n	8000fd2 <hc_open+0x10e>
		printf("hc_open failed with %d\n", err);
 8000fd4:	f89d 100f 	ldrb.w	r1, [sp, #15]
 8000fd8:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <hc_open+0x12c>)
 8000fda:	b249      	sxtb	r1, r1
 8000fdc:	f01f fcf4 	bl	80209c8 <iprintf>
 8000fe0:	e7d3      	b.n	8000f8a <hc_open+0xc6>
 8000fe2:	bf00      	nop
 8000fe4:	0803f66c 	.word	0x0803f66c
 8000fe8:	08000de1 	.word	0x08000de1
 8000fec:	08024a7c 	.word	0x08024a7c
 8000ff0:	08024aa8 	.word	0x08024aa8
 8000ff4:	20001454 	.word	0x20001454

08000ff8 <wait_armtx>:
}

// wait for Tx DMA to complete - timeout if error
// then re-arm the wait flag
// returns -1 on timeout, 0 on okay
int wait_armtx(void) {
 8000ff8:	b510      	push	{r4, lr}
	volatile int timeoutcnt;

	timeoutcnt = 0;
 8000ffa:	2300      	movs	r3, #0
int wait_armtx(void) {
 8000ffc:	b082      	sub	sp, #8
	timeoutcnt = 0;
 8000ffe:	9301      	str	r3, [sp, #4]
	while (timeoutcnt < 2) {
 8001000:	9b01      	ldr	r3, [sp, #4]
 8001002:	2b01      	cmp	r3, #1
 8001004:	dc10      	bgt.n	8001028 <wait_armtx+0x30>
		if (txdmadone == 1)		// its ready
 8001006:	4c10      	ldr	r4, [pc, #64]	; (8001048 <wait_armtx+0x50>)
 8001008:	6823      	ldr	r3, [r4, #0]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d103      	bne.n	8001016 <wait_armtx+0x1e>
 800100e:	e00b      	b.n	8001028 <wait_armtx+0x30>
 8001010:	6823      	ldr	r3, [r4, #0]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d008      	beq.n	8001028 <wait_armtx+0x30>
			break;
//		printf("UART5 Wait Tx %d\n",timeoutcnt);
		timeoutcnt++;
 8001016:	9b01      	ldr	r3, [sp, #4]
		osDelay(1);		// give up timeslice
 8001018:	2001      	movs	r0, #1
		timeoutcnt++;
 800101a:	4403      	add	r3, r0
 800101c:	9301      	str	r3, [sp, #4]
		osDelay(1);		// give up timeslice
 800101e:	f00f ff63 	bl	8010ee8 <osDelay>
	while (timeoutcnt < 2) {
 8001022:	9b01      	ldr	r3, [sp, #4]
 8001024:	2b01      	cmp	r3, #1
 8001026:	ddf3      	ble.n	8001010 <wait_armtx+0x18>
	}
	if (timeoutcnt >= 2) {
 8001028:	9b01      	ldr	r3, [sp, #4]
 800102a:	2b01      	cmp	r3, #1
 800102c:	dc05      	bgt.n	800103a <wait_armtx+0x42>
		printf("UART5 Tx timeout\n");
		return (-1);
	}
	txdmadone = 1;	// re-arm the flag to indicate its okay to Tx
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <wait_armtx+0x50>)
 8001030:	2201      	movs	r2, #1
	return (0);
 8001032:	2000      	movs	r0, #0
	txdmadone = 1;	// re-arm the flag to indicate its okay to Tx
 8001034:	601a      	str	r2, [r3, #0]
}
 8001036:	b002      	add	sp, #8
 8001038:	bd10      	pop	{r4, pc}
		printf("UART5 Tx timeout\n");
 800103a:	4804      	ldr	r0, [pc, #16]	; (800104c <wait_armtx+0x54>)
 800103c:	f01f fd4c 	bl	8020ad8 <puts>
		return (-1);
 8001040:	f04f 30ff 	mov.w	r0, #4294967295
 8001044:	e7f7      	b.n	8001036 <wait_armtx+0x3e>
 8001046:	bf00      	nop
 8001048:	200015d8 	.word	0x200015d8
 800104c:	08024dcc 	.word	0x08024dcc

08001050 <uart5_rxdone>:

// UART 5 Rx DMA complete
void uart5_rxdone() {

	printf("UART5 Rx Complete\n");
 8001050:	4801      	ldr	r0, [pc, #4]	; (8001058 <uart5_rxdone+0x8>)
 8001052:	f01f bd41 	b.w	8020ad8 <puts>
 8001056:	bf00      	nop
 8001058:	08024db8 	.word	0x08024db8

0800105c <HAL_UART_TxCpltCallback>:

// Transmit completed callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
	volatile uint32_t reg;

	if (huart->Instance == UART5) {
 800105c:	6802      	ldr	r2, [r0, #0]
 800105e:	4b03      	ldr	r3, [pc, #12]	; (800106c <HAL_UART_TxCpltCallback+0x10>)
 8001060:	429a      	cmp	r2, r3
 8001062:	d102      	bne.n	800106a <HAL_UART_TxCpltCallback+0xe>
		txdmadone = 1;		// its finished transmission
 8001064:	4b02      	ldr	r3, [pc, #8]	; (8001070 <HAL_UART_TxCpltCallback+0x14>)
 8001066:	2201      	movs	r2, #1
 8001068:	601a      	str	r2, [r3, #0]
		else
			printf("HAL_UART_TxCpltCallback, TXE busy\n");
		}
#endif
	}
}
 800106a:	4770      	bx	lr
 800106c:	40005000 	.word	0x40005000
 8001070:	200015d8 	.word	0x200015d8

08001074 <lcd_puts>:
	}
	return (stat);
}

// put a null terminated string
int lcd_puts(char *str) {
 8001074:	b530      	push	{r4, r5, lr}
	}
	return 0;
#else
#endif

	i = 0;
 8001076:	2300      	movs	r3, #0
int lcd_puts(char *str) {
 8001078:	b083      	sub	sp, #12
 800107a:	4c13      	ldr	r4, [pc, #76]	; (80010c8 <lcd_puts+0x54>)
	i = 0;
 800107c:	9301      	str	r3, [sp, #4]
	while (str[i] != '\0') {
 800107e:	9b01      	ldr	r3, [sp, #4]
 8001080:	5cc3      	ldrb	r3, [r0, r3]
 8001082:	b153      	cbz	r3, 800109a <lcd_puts+0x26>
			buffer[i] = str[i];
 8001084:	9901      	ldr	r1, [sp, #4]
 8001086:	9a01      	ldr	r2, [sp, #4]
			i++;
 8001088:	9b01      	ldr	r3, [sp, #4]
			buffer[i] = str[i];
 800108a:	5c41      	ldrb	r1, [r0, r1]
			i++;
 800108c:	3301      	adds	r3, #1
			buffer[i] = str[i];
 800108e:	54a1      	strb	r1, [r4, r2]
			i++;
 8001090:	9301      	str	r3, [sp, #4]
	while (str[i] != '\0') {
 8001092:	9b01      	ldr	r3, [sp, #4]
 8001094:	5cc3      	ldrb	r3, [r0, r3]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d1f4      	bne.n	8001084 <lcd_puts+0x10>
	}
	buffer[i] = '\0';
 800109a:	9b01      	ldr	r3, [sp, #4]
 800109c:	2500      	movs	r5, #0
 800109e:	54e5      	strb	r5, [r4, r3]

	wait_armtx();
 80010a0:	f7ff ffaa 	bl	8000ff8 <wait_armtx>
	txdmadone = 0;	// TX in progress
//	printf("lcd_puts: len=%d, [%s]\n", i, str);

	stat = HAL_UART_Transmit_DMA(&huart5, buffer, i);
 80010a4:	9a01      	ldr	r2, [sp, #4]
	txdmadone = 0;	// TX in progress
 80010a6:	4b09      	ldr	r3, [pc, #36]	; (80010cc <lcd_puts+0x58>)
	stat = HAL_UART_Transmit_DMA(&huart5, buffer, i);
 80010a8:	b292      	uxth	r2, r2
 80010aa:	4907      	ldr	r1, [pc, #28]	; (80010c8 <lcd_puts+0x54>)
 80010ac:	4808      	ldr	r0, [pc, #32]	; (80010d0 <lcd_puts+0x5c>)
	txdmadone = 0;	// TX in progress
 80010ae:	601d      	str	r5, [r3, #0]
	stat = HAL_UART_Transmit_DMA(&huart5, buffer, i);
 80010b0:	f00d f86a 	bl	800e188 <HAL_UART_Transmit_DMA>
	if (stat != HAL_OK) {
 80010b4:	4604      	mov	r4, r0
 80010b6:	b118      	cbz	r0, 80010c0 <lcd_puts+0x4c>
		printf("lcd_puts: Err %d HAL_UART_Transmit_DMA uart5\n",stat);
 80010b8:	4601      	mov	r1, r0
 80010ba:	4806      	ldr	r0, [pc, #24]	; (80010d4 <lcd_puts+0x60>)
 80010bc:	f01f fc84 	bl	80209c8 <iprintf>
	}
	return (stat);
}
 80010c0:	4620      	mov	r0, r4
 80010c2:	b003      	add	sp, #12
 80010c4:	bd30      	pop	{r4, r5, pc}
 80010c6:	bf00      	nop
 80010c8:	20001458 	.word	0x20001458
 80010cc:	200015d8 	.word	0x200015d8
 80010d0:	20022d4c 	.word	0x20022d4c
 80010d4:	08024d2c 	.word	0x08024d2c

080010d8 <lcd_rxdma>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////

// get Rx chars if available - non blocking using DMA
// copies all dma rx'd chars into the lcd rx buffer
int lcd_rxdma() {
 80010d8:	b430      	push	{r4, r5}
	volatile int count = 0;
 80010da:	2300      	movs	r3, #0
int lcd_rxdma() {
 80010dc:	b082      	sub	sp, #8
	volatile int dmaindex = 0;

	dmaindex = DMARXBUFSIZE - DMA1_Stream0->NDTR;  // next index position the DMA will fill
 80010de:	4a10      	ldr	r2, [pc, #64]	; (8001120 <lcd_rxdma+0x48>)
	volatile int count = 0;
 80010e0:	9300      	str	r3, [sp, #0]
	volatile int dmaindex = 0;
 80010e2:	9301      	str	r3, [sp, #4]
	dmaindex = DMARXBUFSIZE - DMA1_Stream0->NDTR;  // next index position the DMA will fill
 80010e4:	6852      	ldr	r2, [r2, #4]

	while (dmaindex != lcdrxoutidx) {		// dma in index has moved on from lcd rx out index
 80010e6:	480f      	ldr	r0, [pc, #60]	; (8001124 <lcd_rxdma+0x4c>)
	dmaindex = DMARXBUFSIZE - DMA1_Stream0->NDTR;  // next index position the DMA will fill
 80010e8:	f1c2 0280 	rsb	r2, r2, #128	; 0x80
	while (dmaindex != lcdrxoutidx) {		// dma in index has moved on from lcd rx out index
 80010ec:	6803      	ldr	r3, [r0, #0]
	dmaindex = DMARXBUFSIZE - DMA1_Stream0->NDTR;  // next index position the DMA will fill
 80010ee:	9201      	str	r2, [sp, #4]
	while (dmaindex != lcdrxoutidx) {		// dma in index has moved on from lcd rx out index
 80010f0:	9a01      	ldr	r2, [sp, #4]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d010      	beq.n	8001118 <lcd_rxdma+0x40>
	if (++index >= limit)
 80010f6:	1c5a      	adds	r2, r3, #1
		lcdrxbuffer[lcdrxoutidx] = dmarxbuffer[lcdrxoutidx];	// copy the next char to lcd rx buffer
		count++;
 80010f8:	9900      	ldr	r1, [sp, #0]
		lcdrxbuffer[lcdrxoutidx] = dmarxbuffer[lcdrxoutidx];	// copy the next char to lcd rx buffer
 80010fa:	4c0b      	ldr	r4, [pc, #44]	; (8001128 <lcd_rxdma+0x50>)
		return (0);
 80010fc:	2a80      	cmp	r2, #128	; 0x80
		count++;
 80010fe:	f101 0101 	add.w	r1, r1, #1
		lcdrxbuffer[lcdrxoutidx] = dmarxbuffer[lcdrxoutidx];	// copy the next char to lcd rx buffer
 8001102:	5ce5      	ldrb	r5, [r4, r3]
		return (0);
 8001104:	bfa8      	it	ge
 8001106:	2200      	movge	r2, #0
		count++;
 8001108:	9100      	str	r1, [sp, #0]
		lcdrxbuffer[lcdrxoutidx] = dmarxbuffer[lcdrxoutidx];	// copy the next char to lcd rx buffer
 800110a:	4c08      	ldr	r4, [pc, #32]	; (800112c <lcd_rxdma+0x54>)
		lcdrxoutidx = cycinc(lcdrxoutidx, LCDRXBUFSIZE);	// cyclic bump lcd rx index
 800110c:	6002      	str	r2, [r0, #0]
		return (count);
 800110e:	9800      	ldr	r0, [sp, #0]
		lcdrxbuffer[lcdrxoutidx] = dmarxbuffer[lcdrxoutidx];	// copy the next char to lcd rx buffer
 8001110:	54e5      	strb	r5, [r4, r3]
	}
	return (-1);
}
 8001112:	b002      	add	sp, #8
 8001114:	bc30      	pop	{r4, r5}
 8001116:	4770      	bx	lr
	return (-1);
 8001118:	f04f 30ff 	mov.w	r0, #4294967295
 800111c:	e7f9      	b.n	8001112 <lcd_rxdma+0x3a>
 800111e:	bf00      	nop
 8001120:	40026010 	.word	0x40026010
 8001124:	200015c8 	.word	0x200015c8
 8001128:	20001498 	.word	0x20001498
 800112c:	20001548 	.word	0x20001548

08001130 <lcd_getc>:

// get the next char from the lcdrx buffer if there is one available
int lcd_getc() {
 8001130:	b538      	push	{r3, r4, r5, lr}
	static int lastidx = 0;
	int ch;

	ch = -1;
	if (lastidx != lcdrxoutidx) {		// something there
 8001132:	4c0c      	ldr	r4, [pc, #48]	; (8001164 <lcd_getc+0x34>)
 8001134:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <lcd_getc+0x38>)
 8001136:	6822      	ldr	r2, [r4, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	429a      	cmp	r2, r3
 800113c:	d00f      	beq.n	800115e <lcd_getc+0x2e>
	if (++index >= limit)
 800113e:	1c53      	adds	r3, r2, #1
		ch = lcdrxbuffer[lastidx];
 8001140:	4d0a      	ldr	r5, [pc, #40]	; (800116c <lcd_getc+0x3c>)
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
		rxtimeout = 100;
 8001142:	490b      	ldr	r1, [pc, #44]	; (8001170 <lcd_getc+0x40>)
 8001144:	2064      	movs	r0, #100	; 0x64
		return (0);
 8001146:	2b80      	cmp	r3, #128	; 0x80
		ch = lcdrxbuffer[lastidx];
 8001148:	5cad      	ldrb	r5, [r5, r2]
		rxtimeout = 100;
 800114a:	6008      	str	r0, [r1, #0]
		return (0);
 800114c:	bfa8      	it	ge
 800114e:	2300      	movge	r3, #0
printf("lcd_getc() got %02x\n", ch);
 8001150:	4629      	mov	r1, r5
 8001152:	4808      	ldr	r0, [pc, #32]	; (8001174 <lcd_getc+0x44>)
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 8001154:	6023      	str	r3, [r4, #0]
printf("lcd_getc() got %02x\n", ch);
 8001156:	f01f fc37 	bl	80209c8 <iprintf>
	}

	return (ch);
}
 800115a:	4628      	mov	r0, r5
 800115c:	bd38      	pop	{r3, r4, r5, pc}
	ch = -1;
 800115e:	f04f 35ff 	mov.w	r5, #4294967295
	return (ch);
 8001162:	e7fa      	b.n	800115a <lcd_getc+0x2a>
 8001164:	20001540 	.word	0x20001540
 8001168:	200015c8 	.word	0x200015c8
 800116c:	20001548 	.word	0x20001548
 8001170:	200015d0 	.word	0x200015d0
 8001174:	08024b98 	.word	0x08024b98

08001178 <writelcdcmd>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////

// send a var string to the LCD (len max 255)
// terminate with three 0xff's
int writelcdcmd(char *str) {
 8001178:	b500      	push	{lr}
 800117a:	b091      	sub	sp, #68	; 0x44
	char i = 0;
	char pkt[64];  //  __attribute__ ((aligned (16)));

	strcpy(pkt, str);
 800117c:	4601      	mov	r1, r0
 800117e:	4668      	mov	r0, sp
 8001180:	f01f fe09 	bl	8020d96 <stpcpy>
	strcat(pkt, "\xff\xff\xff");
 8001184:	4a05      	ldr	r2, [pc, #20]	; (800119c <writelcdcmd+0x24>)
	strcpy(pkt, str);
 8001186:	4603      	mov	r3, r0
	strcat(pkt, "\xff\xff\xff");
 8001188:	6810      	ldr	r0, [r2, #0]
 800118a:	6018      	str	r0, [r3, #0]
	lcd_puts(pkt);
 800118c:	4668      	mov	r0, sp
 800118e:	f7ff ff71 	bl	8001074 <lcd_puts>
	return (0);
}
 8001192:	2000      	movs	r0, #0
 8001194:	b011      	add	sp, #68	; 0x44
 8001196:	f85d fb04 	ldr.w	pc, [sp], #4
 800119a:	bf00      	nop
 800119c:	08024de0 	.word	0x08024de0

080011a0 <lcd_init>:
void lcd_init() {
 80011a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned char lcd_fast[] = { "baud=230400\xff\xff\xff" };
 80011a2:	4b5e      	ldr	r3, [pc, #376]	; (800131c <lcd_init+0x17c>)
void lcd_init() {
 80011a4:	b087      	sub	sp, #28
	inlcd_init = 1; 				// recursion flag for init
 80011a6:	4d5e      	ldr	r5, [pc, #376]	; (8001320 <lcd_init+0x180>)
	const unsigned char lcd_fast[] = { "baud=230400\xff\xff\xff" };
 80011a8:	ac02      	add	r4, sp, #8
 80011aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011ac:	c407      	stmia	r4!, {r0, r1, r2}
 80011ae:	0c1a      	lsrs	r2, r3, #16
	inlcd_init = 1; 				// recursion flag for init
 80011b0:	2101      	movs	r1, #1
	printf("***Init LCD 9600 ***\n");
 80011b2:	485c      	ldr	r0, [pc, #368]	; (8001324 <lcd_init+0x184>)
	const unsigned char lcd_fast[] = { "baud=230400\xff\xff\xff" };
 80011b4:	f824 3b02 	strh.w	r3, [r4], #2
	inlcd_init = 1; 				// recursion flag for init
 80011b8:	6029      	str	r1, [r5, #0]
	const unsigned char lcd_fast[] = { "baud=230400\xff\xff\xff" };
 80011ba:	7022      	strb	r2, [r4, #0]
	printf("***Init LCD 9600 ***\n");
 80011bc:	f01f fc8c 	bl	8020ad8 <puts>
	lcdrxoutidx = 0;		// consumer index
 80011c0:	4b59      	ldr	r3, [pc, #356]	; (8001328 <lcd_init+0x188>)
 80011c2:	2200      	movs	r2, #0
	osDelay(200);
 80011c4:	20c8      	movs	r0, #200	; 0xc8
	lcdrxoutidx = 0;		// consumer index
 80011c6:	601a      	str	r2, [r3, #0]
	osDelay(200);
 80011c8:	f00f fe8e 	bl	8010ee8 <osDelay>
	stat = HAL_UART_Receive_DMA(&huart5, dmarxbuffer, DMARXBUFSIZE);	// start Rx cyclic DMA
 80011cc:	2280      	movs	r2, #128	; 0x80
 80011ce:	4957      	ldr	r1, [pc, #348]	; (800132c <lcd_init+0x18c>)
 80011d0:	4857      	ldr	r0, [pc, #348]	; (8001330 <lcd_init+0x190>)
 80011d2:	f00d f82b 	bl	800e22c <HAL_UART_Receive_DMA>
 80011d6:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {
 80011da:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	f040 8096 	bne.w	8001310 <lcd_init+0x170>
	HAL_UART_DMAStop(&huart5);
 80011e4:	4c52      	ldr	r4, [pc, #328]	; (8001330 <lcd_init+0x190>)
 80011e6:	4620      	mov	r0, r4
 80011e8:	f00d f882 	bl	800e2f0 <HAL_UART_DMAStop>
	HAL_UART_DeInit(&huart5);
 80011ec:	4620      	mov	r0, r4
 80011ee:	f00c ff6f 	bl	800e0d0 <HAL_UART_DeInit>
	huart5.Instance = UART5;
 80011f2:	4b50      	ldr	r3, [pc, #320]	; (8001334 <lcd_init+0x194>)
	huart5.Init.BaudRate = 9600;
 80011f4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
	huart5.Init.Mode = UART_MODE_TX_RX;
 80011f8:	220c      	movs	r2, #12
	huart5.Instance = UART5;
 80011fa:	6023      	str	r3, [r4, #0]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80011fc:	2300      	movs	r3, #0
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 80011fe:	4620      	mov	r0, r4
	huart5.Init.BaudRate = 9600;
 8001200:	6061      	str	r1, [r4, #4]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8001202:	6162      	str	r2, [r4, #20]
	huart5.Init.Parity = UART_PARITY_NONE;
 8001204:	6123      	str	r3, [r4, #16]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8001206:	e9c4 3302 	strd	r3, r3, [r4, #8]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800120a:	e9c4 3306 	strd	r3, r3, [r4, #24]
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800120e:	e9c4 3308 	strd	r3, r3, [r4, #32]
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8001212:	f00d fdbf 	bl	800ed94 <HAL_UART_Init>
 8001216:	2800      	cmp	r0, #0
 8001218:	d176      	bne.n	8001308 <lcd_init+0x168>
	osDelay(200);
 800121a:	20c8      	movs	r0, #200	; 0xc8
 800121c:	f00f fe64 	bl	8010ee8 <osDelay>
	stat = HAL_UART_Receive_DMA(&huart5, dmarxbuffer, DMARXBUFSIZE);	// start Rx cyclic DMA
 8001220:	2280      	movs	r2, #128	; 0x80
 8001222:	4942      	ldr	r1, [pc, #264]	; (800132c <lcd_init+0x18c>)
 8001224:	4842      	ldr	r0, [pc, #264]	; (8001330 <lcd_init+0x190>)
 8001226:	f00d f801 	bl	800e22c <HAL_UART_Receive_DMA>
 800122a:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {
 800122e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d162      	bne.n	80012fc <lcd_init+0x15c>
	txdmadone = 1;	// TX is free
 8001236:	4e40      	ldr	r6, [pc, #256]	; (8001338 <lcd_init+0x198>)
 8001238:	2701      	movs	r7, #1
	osDelay(200);
 800123a:	20c8      	movs	r0, #200	; 0xc8
 800123c:	f00f fe54 	bl	8010ee8 <osDelay>
	printf("Sending sendme 1\n");
 8001240:	483e      	ldr	r0, [pc, #248]	; (800133c <lcd_init+0x19c>)
	txdmadone = 1;	// TX is free
 8001242:	6037      	str	r7, [r6, #0]
	printf("Sending sendme 1\n");
 8001244:	f01f fc48 	bl	8020ad8 <puts>
	writelcdcmd("sendme"); 	// try to read page
 8001248:	483d      	ldr	r0, [pc, #244]	; (8001340 <lcd_init+0x1a0>)
 800124a:	f7ff ff95 	bl	8001178 <writelcdcmd>
	wait_armtx();
 800124e:	f7ff fed3 	bl	8000ff8 <wait_armtx>
	osDelay(200);
 8001252:	20c8      	movs	r0, #200	; 0xc8
 8001254:	f00f fe48 	bl	8010ee8 <osDelay>
	lcd_puts(lcd_fast); 	// try to change Nextion baud rate
 8001258:	a802      	add	r0, sp, #8
	txdmadone = 1;	// TX is free
 800125a:	6037      	str	r7, [r6, #0]
	lcd_puts(lcd_fast); 	// try to change Nextion baud rate
 800125c:	f7ff ff0a 	bl	8001074 <lcd_puts>
	wait_armtx();			// wait for tx to complete
 8001260:	f7ff feca 	bl	8000ff8 <wait_armtx>
	osDelay(500);
 8001264:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001268:	f00f fe3e 	bl	8010ee8 <osDelay>
	HAL_UART_DeInit(&huart5);
 800126c:	4830      	ldr	r0, [pc, #192]	; (8001330 <lcd_init+0x190>)
 800126e:	f00c ff2f 	bl	800e0d0 <HAL_UART_DeInit>
	if (stat != HAL_OK) {
 8001272:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d13c      	bne.n	80012f4 <lcd_init+0x154>
	osDelay(500);
 800127a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800127e:	f00f fe33 	bl	8010ee8 <osDelay>
	printf("***Init LCD 230400 ***\n");
 8001282:	4830      	ldr	r0, [pc, #192]	; (8001344 <lcd_init+0x1a4>)
 8001284:	f01f fc28 	bl	8020ad8 <puts>
	huart5.Instance = UART5;
 8001288:	482a      	ldr	r0, [pc, #168]	; (8001334 <lcd_init+0x194>)
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800128a:	2300      	movs	r3, #0
	huart5.Init.BaudRate = 230400;
 800128c:	f44f 3161 	mov.w	r1, #230400	; 0x38400
	huart5.Init.Mode = UART_MODE_TX_RX;
 8001290:	220c      	movs	r2, #12
	huart5.Instance = UART5;
 8001292:	6020      	str	r0, [r4, #0]
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8001294:	4826      	ldr	r0, [pc, #152]	; (8001330 <lcd_init+0x190>)
	huart5.Init.Mode = UART_MODE_TX_RX;
 8001296:	6162      	str	r2, [r4, #20]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001298:	e9c4 1301 	strd	r1, r3, [r4, #4]
	huart5.Init.Parity = UART_PARITY_NONE;
 800129c:	e9c4 3303 	strd	r3, r3, [r4, #12]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a0:	e9c4 3306 	strd	r3, r3, [r4, #24]
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012a4:	e9c4 3308 	strd	r3, r3, [r4, #32]
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 80012a8:	f00d fd74 	bl	800ed94 <HAL_UART_Init>
 80012ac:	b9f0      	cbnz	r0, 80012ec <lcd_init+0x14c>
	stat = HAL_UART_Receive_DMA(&huart5, dmarxbuffer, DMARXBUFSIZE);	// start Rx cyclic DMA
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	491e      	ldr	r1, [pc, #120]	; (800132c <lcd_init+0x18c>)
 80012b2:	481f      	ldr	r0, [pc, #124]	; (8001330 <lcd_init+0x190>)
 80012b4:	f00c ffba 	bl	800e22c <HAL_UART_Receive_DMA>
 80012b8:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {
 80012bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80012c0:	b123      	cbz	r3, 80012cc <lcd_init+0x12c>
		printf("lcd_init: 2 Err HAL_UART_Receive_DMA uart5 %d\n",stat);
 80012c2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80012c6:	4820      	ldr	r0, [pc, #128]	; (8001348 <lcd_init+0x1a8>)
 80012c8:	f01f fb7e 	bl	80209c8 <iprintf>
	osDelay(500);
 80012cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012d0:	f00f fe0a 	bl	8010ee8 <osDelay>
	printf("Sending sendme 2\n");
 80012d4:	481d      	ldr	r0, [pc, #116]	; (800134c <lcd_init+0x1ac>)
 80012d6:	f01f fbff 	bl	8020ad8 <puts>
	writelcdcmd("sendme"); 	// try to read page
 80012da:	4819      	ldr	r0, [pc, #100]	; (8001340 <lcd_init+0x1a0>)
 80012dc:	f7ff ff4c 	bl	8001178 <writelcdcmd>
	wait_armtx();
 80012e0:	f7ff fe8a 	bl	8000ff8 <wait_armtx>
	inlcd_init = 0; 				// recursion flag for init
 80012e4:	2300      	movs	r3, #0
 80012e6:	602b      	str	r3, [r5, #0]
}
 80012e8:	b007      	add	sp, #28
 80012ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("lcd_init: Failed to change UART5 to 230400\n");
 80012ec:	4818      	ldr	r0, [pc, #96]	; (8001350 <lcd_init+0x1b0>)
 80012ee:	f01f fbf3 	bl	8020ad8 <puts>
 80012f2:	e7dc      	b.n	80012ae <lcd_init+0x10e>
		printf("lcd_init: Err UART_Deinit failed\n");
 80012f4:	4817      	ldr	r0, [pc, #92]	; (8001354 <lcd_init+0x1b4>)
 80012f6:	f01f fbef 	bl	8020ad8 <puts>
 80012fa:	e7be      	b.n	800127a <lcd_init+0xda>
		printf("lcd_init: 1 Err HAL_UART_Receive_DMA uart5 %d\n",stat);
 80012fc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8001300:	4815      	ldr	r0, [pc, #84]	; (8001358 <lcd_init+0x1b8>)
 8001302:	f01f fb61 	bl	80209c8 <iprintf>
 8001306:	e796      	b.n	8001236 <lcd_init+0x96>
		printf("lcd_init: Failed to change UART5 to 9600\n");
 8001308:	4814      	ldr	r0, [pc, #80]	; (800135c <lcd_init+0x1bc>)
 800130a:	f01f fbe5 	bl	8020ad8 <puts>
 800130e:	e784      	b.n	800121a <lcd_init+0x7a>
		printf("lcd_init: 0 Err HAL_UART_Receive_DMA uart5 %d\n",stat);
 8001310:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8001314:	4812      	ldr	r0, [pc, #72]	; (8001360 <lcd_init+0x1c0>)
 8001316:	f01f fb57 	bl	80209c8 <iprintf>
 800131a:	e763      	b.n	80011e4 <lcd_init+0x44>
 800131c:	08024d1c 	.word	0x08024d1c
 8001320:	2000153c 	.word	0x2000153c
 8001324:	08024bb0 	.word	0x08024bb0
 8001328:	200015c8 	.word	0x200015c8
 800132c:	20001498 	.word	0x20001498
 8001330:	20022d4c 	.word	0x20022d4c
 8001334:	40005000 	.word	0x40005000
 8001338:	200015d8 	.word	0x200015d8
 800133c:	08024c54 	.word	0x08024c54
 8001340:	08024c68 	.word	0x08024c68
 8001344:	08024c94 	.word	0x08024c94
 8001348:	08024cd8 	.word	0x08024cd8
 800134c:	08024d08 	.word	0x08024d08
 8001350:	08024cac 	.word	0x08024cac
 8001354:	08024c70 	.word	0x08024c70
 8001358:	08024c24 	.word	0x08024c24
 800135c:	08024bf8 	.word	0x08024bf8
 8001360:	08024bc8 	.word	0x08024bc8

08001364 <setlcdtext>:
	}
	return(result);
}

// send some text to a lcd text object
int setlcdtext(char id[], char string[]) {
 8001364:	b570      	push	{r4, r5, r6, lr}
	int i;
	char *str;
	volatile int result = 0;
 8001366:	2300      	movs	r3, #0
int setlcdtext(char id[], char string[]) {
 8001368:	b082      	sub	sp, #8
 800136a:	4605      	mov	r5, r0

	str = malloc(64);
 800136c:	2040      	movs	r0, #64	; 0x40
int setlcdtext(char id[], char string[]) {
 800136e:	460e      	mov	r6, r1
	volatile int result = 0;
 8001370:	9301      	str	r3, [sp, #4]
	str = malloc(64);
 8001372:	f01e fb53 	bl	801fa1c <malloc>
	if (str == NULL)
 8001376:	4604      	mov	r4, r0
 8001378:	b1e0      	cbz	r0, 80013b4 <setlcdtext+0x50>
		printf("setlcdtext: malloc failed\n");
	sprintf(str, "%s=\"%s\"", id, string);
 800137a:	462a      	mov	r2, r5
 800137c:	490f      	ldr	r1, [pc, #60]	; (80013bc <setlcdtext+0x58>)
 800137e:	4633      	mov	r3, r6
 8001380:	4620      	mov	r0, r4
 8001382:	f01f fc79 	bl	8020c78 <siprintf>
//	printf("setcdtext: %s\n",str);
	result = writelcdcmd(str);
 8001386:	4620      	mov	r0, r4
 8001388:	f7ff fef6 	bl	8001178 <writelcdcmd>
 800138c:	4603      	mov	r3, r0
	osDelay(50);
 800138e:	2032      	movs	r0, #50	; 0x32
	result = writelcdcmd(str);
 8001390:	9301      	str	r3, [sp, #4]
	osDelay(50);
 8001392:	f00f fda9 	bl	8010ee8 <osDelay>
	free(str);
 8001396:	4620      	mov	r0, r4
 8001398:	f01e fb48 	bl	801fa2c <free>
	if (result == -1) {
 800139c:	9b01      	ldr	r3, [sp, #4]
 800139e:	3301      	adds	r3, #1
 80013a0:	d002      	beq.n	80013a8 <setlcdtext+0x44>
		printf("setlcdtext: Cmd failed\n\r");
	}
	return(result);
 80013a2:	9801      	ldr	r0, [sp, #4]
}
 80013a4:	b002      	add	sp, #8
 80013a6:	bd70      	pop	{r4, r5, r6, pc}
		printf("setlcdtext: Cmd failed\n\r");
 80013a8:	4805      	ldr	r0, [pc, #20]	; (80013c0 <setlcdtext+0x5c>)
 80013aa:	f01f fb0d 	bl	80209c8 <iprintf>
	return(result);
 80013ae:	9801      	ldr	r0, [sp, #4]
}
 80013b0:	b002      	add	sp, #8
 80013b2:	bd70      	pop	{r4, r5, r6, pc}
		printf("setlcdtext: malloc failed\n");
 80013b4:	4803      	ldr	r0, [pc, #12]	; (80013c4 <setlcdtext+0x60>)
 80013b6:	f01f fb8f 	bl	8020ad8 <puts>
 80013ba:	e7de      	b.n	800137a <setlcdtext+0x16>
 80013bc:	08024d94 	.word	0x08024d94
 80013c0:	08024d9c 	.word	0x08024d9c
 80013c4:	08024d78 	.word	0x08024d78

080013c8 <isnexpkt>:
}

// Check if this is an LCD packet
// try to get a single message packet from the LCD
// returns packet and end index (or 0 or -1)
int isnexpkt(unsigned char buffer[], uint8_t size) {
 80013c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ca:	b083      	sub	sp, #12
 80013cc:	4606      	mov	r6, r0
 80013ce:	460c      	mov	r4, r1
	static uint8_t termcnt = 0;
	static uint8_t i = 0;
	int index, rawchar;
	volatile unsigned char ch;

	rawchar = lcd_getc();
 80013d0:	f7ff feae 	bl	8001130 <lcd_getc>
	if (rawchar >= 0) {
 80013d4:	2800      	cmp	r0, #0
 80013d6:	db1a      	blt.n	800140e <isnexpkt+0x46>
			printf("rawch=0x%02x %c\n", rawchar, rawchar);
		else
			printf("rawch=0x%02x\n", rawchar);
#endif
		ch = rawchar & 0xff;
		buffer[i++] = ch;
 80013d8:	4d22      	ldr	r5, [pc, #136]	; (8001464 <isnexpkt+0x9c>)
		ch = rawchar & 0xff;
 80013da:	b2c0      	uxtb	r0, r0
		buffer[i++] = ch;
 80013dc:	782a      	ldrb	r2, [r5, #0]
		ch = rawchar & 0xff;
 80013de:	f88d 0007 	strb.w	r0, [sp, #7]
		buffer[i++] = ch;
 80013e2:	1c53      	adds	r3, r2, #1
 80013e4:	f89d 0007 	ldrb.w	r0, [sp, #7]
		if (ch == 0xff) {
 80013e8:	f89d 1007 	ldrb.w	r1, [sp, #7]
		buffer[i++] = ch;
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	54b0      	strb	r0, [r6, r2]
		if (ch == 0xff) {
 80013f0:	29ff      	cmp	r1, #255	; 0xff
		buffer[i++] = ch;
 80013f2:	702b      	strb	r3, [r5, #0]
		if (ch == 0xff) {
 80013f4:	d027      	beq.n	8001446 <isnexpkt+0x7e>
				i = 0;
				termcnt = 0;
				return (index);
			}
		} else {
			retcode = ch;	// remember ch prior to 0xff 0xff 0xff
 80013f6:	f89d 0007 	ldrb.w	r0, [sp, #7]
			termcnt = 0;
 80013fa:	2200      	movs	r2, #0
			retcode = ch;	// remember ch prior to 0xff 0xff 0xff
 80013fc:	491a      	ldr	r1, [pc, #104]	; (8001468 <isnexpkt+0xa0>)
			termcnt = 0;
 80013fe:	4f1b      	ldr	r7, [pc, #108]	; (800146c <isnexpkt+0xa4>)
			retcode = ch;	// remember ch prior to 0xff 0xff 0xff
 8001400:	7008      	strb	r0, [r1, #0]
			termcnt = 0;
 8001402:	703a      	strb	r2, [r7, #0]
		}

		if (i == size) { // overrun
 8001404:	42a3      	cmp	r3, r4
 8001406:	d102      	bne.n	800140e <isnexpkt+0x46>
			i = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	702b      	strb	r3, [r5, #0]
			termcnt = 0;
 800140c:	703b      	strb	r3, [r7, #0]
		}
	}
	if (rxtimeout > 0)
 800140e:	4a18      	ldr	r2, [pc, #96]	; (8001470 <isnexpkt+0xa8>)
 8001410:	6813      	ldr	r3, [r2, #0]
 8001412:	b12b      	cbz	r3, 8001420 <isnexpkt+0x58>
		rxtimeout--;
 8001414:	3b01      	subs	r3, #1
 8001416:	6013      	str	r3, [r2, #0]
	if (rxtimeout == 0) {
 8001418:	b113      	cbz	r3, 8001420 <isnexpkt+0x58>
		for (i = 0; i < size; buffer[i++] = 0)
			;
		i = 0;
		return (-1);
	}
	return (0);  // no char available
 800141a:	2000      	movs	r0, #0
}
 800141c:	b003      	add	sp, #12
 800141e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		termcnt = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	4a12      	ldr	r2, [pc, #72]	; (800146c <isnexpkt+0xa4>)
		for (i = 0; i < size; buffer[i++] = 0)
 8001424:	4d0f      	ldr	r5, [pc, #60]	; (8001464 <isnexpkt+0x9c>)
		termcnt = 0;
 8001426:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < size; buffer[i++] = 0)
 8001428:	702b      	strb	r3, [r5, #0]
 800142a:	b13c      	cbz	r4, 800143c <isnexpkt+0x74>
 800142c:	3c01      	subs	r4, #1
 800142e:	1e72      	subs	r2, r6, #1
 8001430:	fa56 f484 	uxtab	r4, r6, r4
 8001434:	f802 3f01 	strb.w	r3, [r2, #1]!
 8001438:	4294      	cmp	r4, r2
 800143a:	d1fb      	bne.n	8001434 <isnexpkt+0x6c>
		i = 0;
 800143c:	2300      	movs	r3, #0
		return (-1);
 800143e:	f04f 30ff 	mov.w	r0, #4294967295
		i = 0;
 8001442:	702b      	strb	r3, [r5, #0]
		return (-1);
 8001444:	e7ea      	b.n	800141c <isnexpkt+0x54>
			termcnt++;
 8001446:	4f09      	ldr	r7, [pc, #36]	; (800146c <isnexpkt+0xa4>)
 8001448:	783a      	ldrb	r2, [r7, #0]
 800144a:	3201      	adds	r2, #1
 800144c:	b2d2      	uxtb	r2, r2
			if (termcnt == 3) {
 800144e:	2a03      	cmp	r2, #3
			termcnt++;
 8001450:	703a      	strb	r2, [r7, #0]
			if (termcnt == 3) {
 8001452:	d1d7      	bne.n	8001404 <isnexpkt+0x3c>
				printf("isnexpkt: Found terminator\n");
 8001454:	4807      	ldr	r0, [pc, #28]	; (8001474 <isnexpkt+0xac>)
 8001456:	f01f fb3f 	bl	8020ad8 <puts>
				i = 0;
 800145a:	2300      	movs	r3, #0
				index = i;
 800145c:	7828      	ldrb	r0, [r5, #0]
				termcnt = 0;
 800145e:	703b      	strb	r3, [r7, #0]
				i = 0;
 8001460:	702b      	strb	r3, [r5, #0]
				return (index);
 8001462:	e7db      	b.n	800141c <isnexpkt+0x54>
 8001464:	20001538 	.word	0x20001538
 8001468:	200015cf 	.word	0x200015cf
 800146c:	200015d4 	.word	0x200015d4
 8001470:	200015d0 	.word	0x200015d0
 8001474:	08024ac0 	.word	0x08024ac0

08001478 <lcd_event_process>:

// Try to build an LCD RX Event packet
// returns: 0 nothing found (yet), > good event decodes, -1 error
int lcd_event_process(void) {
 8001478:	b570      	push	{r4, r5, r6, lr}
	static unsigned char eventbuffer[32];
	volatile int i, result;

	result = isnexpkt(eventbuffer, sizeof(eventbuffer));
 800147a:	4c33      	ldr	r4, [pc, #204]	; (8001548 <lcd_event_process+0xd0>)
int lcd_event_process(void) {
 800147c:	b082      	sub	sp, #8
	result = isnexpkt(eventbuffer, sizeof(eventbuffer));
 800147e:	2120      	movs	r1, #32
 8001480:	4620      	mov	r0, r4
 8001482:	f7ff ffa1 	bl	80013c8 <isnexpkt>
 8001486:	9000      	str	r0, [sp, #0]
	if (result <= 0) {
 8001488:	9b00      	ldr	r3, [sp, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	dd37      	ble.n	80014fe <lcd_event_process+0x86>
		return (result);		// 0 = nothing found, -1 = timeout
	} else // got a packet of something
	{

		if ((eventbuffer[0] >= NEX_SINV) && (eventbuffer[0] <= NEX_SLEN)) {	// a status code packet - eg error
 800148e:	7821      	ldrb	r1, [r4, #0]
 8001490:	2923      	cmp	r1, #35	; 0x23
 8001492:	d925      	bls.n	80014e0 <lcd_event_process+0x68>
			lcdstatus = eventbuffer[0];
			if (eventbuffer[0] != NEX_SOK)		// returned status from instruction was not OK
				printf("lcd_event_process: LCD Sent Error status 0x%02x\n\r", eventbuffer[0]);
		} else  // this is either a touch event or a response to a query packet
		{
			switch (eventbuffer[0]) {
 8001494:	2965      	cmp	r1, #101	; 0x65
 8001496:	d046      	beq.n	8001526 <lcd_event_process+0xae>
 8001498:	2966      	cmp	r1, #102	; 0x66
 800149a:	d034      	beq.n	8001506 <lcd_event_process+0x8e>
				lcdpevent = 0xff;		// notify lcd page event happened
				pagenum = eventbuffer[1];
				printf("lcd_event_process: Got Page event, Page=%d\n", pagenum);
				break;
			default:
				printf("lcd_event_process: unknown response received\n");
 800149c:	482b      	ldr	r0, [pc, #172]	; (800154c <lcd_event_process+0xd4>)
 800149e:	f01f fb1b 	bl	8020ad8 <puts>
				i = 0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	9301      	str	r3, [sp, #4]
				while ((eventbuffer[i] != 0xff) && (i < sizeof(eventbuffer))) {
 80014a6:	9b01      	ldr	r3, [sp, #4]
 80014a8:	5ce3      	ldrb	r3, [r4, r3]
 80014aa:	2bff      	cmp	r3, #255	; 0xff
 80014ac:	d012      	beq.n	80014d4 <lcd_event_process+0x5c>
 80014ae:	9b01      	ldr	r3, [sp, #4]
 80014b0:	2b1f      	cmp	r3, #31
 80014b2:	d80f      	bhi.n	80014d4 <lcd_event_process+0x5c>
					printf(" 0x%02x", eventbuffer[i++]);
 80014b4:	4e26      	ldr	r6, [pc, #152]	; (8001550 <lcd_event_process+0xd8>)
 80014b6:	e002      	b.n	80014be <lcd_event_process+0x46>
				while ((eventbuffer[i] != 0xff) && (i < sizeof(eventbuffer))) {
 80014b8:	9b01      	ldr	r3, [sp, #4]
 80014ba:	2b1f      	cmp	r3, #31
 80014bc:	d80a      	bhi.n	80014d4 <lcd_event_process+0x5c>
					printf(" 0x%02x", eventbuffer[i++]);
 80014be:	9b01      	ldr	r3, [sp, #4]
 80014c0:	4630      	mov	r0, r6
 80014c2:	1c5a      	adds	r2, r3, #1
 80014c4:	5ce1      	ldrb	r1, [r4, r3]
 80014c6:	9201      	str	r2, [sp, #4]
 80014c8:	f01f fa7e 	bl	80209c8 <iprintf>
				while ((eventbuffer[i] != 0xff) && (i < sizeof(eventbuffer))) {
 80014cc:	9b01      	ldr	r3, [sp, #4]
 80014ce:	5ce3      	ldrb	r3, [r4, r3]
 80014d0:	2bff      	cmp	r3, #255	; 0xff
 80014d2:	d1f1      	bne.n	80014b8 <lcd_event_process+0x40>
				}
				printf("\n");
 80014d4:	200a      	movs	r0, #10
 80014d6:	f01f fa8f 	bl	80209f8 <putchar>
				break;
			} // end case
		}
	}
}
 80014da:	4628      	mov	r0, r5
 80014dc:	b002      	add	sp, #8
 80014de:	bd70      	pop	{r4, r5, r6, pc}
			lcdtouched = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	4c1c      	ldr	r4, [pc, #112]	; (8001554 <lcd_event_process+0xdc>)
			lcdpevent = 0;
 80014e4:	481c      	ldr	r0, [pc, #112]	; (8001558 <lcd_event_process+0xe0>)
			if (eventbuffer[0] != NEX_SOK)		// returned status from instruction was not OK
 80014e6:	2901      	cmp	r1, #1
			lcdstatus = eventbuffer[0];
 80014e8:	4a1c      	ldr	r2, [pc, #112]	; (800155c <lcd_event_process+0xe4>)
			lcdtouched = 0;
 80014ea:	7023      	strb	r3, [r4, #0]
			lcdpevent = 0;
 80014ec:	7003      	strb	r3, [r0, #0]
			lcdstatus = eventbuffer[0];
 80014ee:	7011      	strb	r1, [r2, #0]
			if (eventbuffer[0] != NEX_SOK)		// returned status from instruction was not OK
 80014f0:	d0f3      	beq.n	80014da <lcd_event_process+0x62>
				printf("lcd_event_process: LCD Sent Error status 0x%02x\n\r", eventbuffer[0]);
 80014f2:	481b      	ldr	r0, [pc, #108]	; (8001560 <lcd_event_process+0xe8>)
 80014f4:	f01f fa68 	bl	80209c8 <iprintf>
}
 80014f8:	4628      	mov	r0, r5
 80014fa:	b002      	add	sp, #8
 80014fc:	bd70      	pop	{r4, r5, r6, pc}
		return (result);		// 0 = nothing found, -1 = timeout
 80014fe:	9d00      	ldr	r5, [sp, #0]
}
 8001500:	4628      	mov	r0, r5
 8001502:	b002      	add	sp, #8
 8001504:	bd70      	pop	{r4, r5, r6, pc}
				pagenum = eventbuffer[1];
 8001506:	7862      	ldrb	r2, [r4, #1]
				lcdtouched = 0;
 8001508:	2600      	movs	r6, #0
				pagenum = eventbuffer[1];
 800150a:	4b16      	ldr	r3, [pc, #88]	; (8001564 <lcd_event_process+0xec>)
				lcdpevent = 0xff;		// notify lcd page event happened
 800150c:	20ff      	movs	r0, #255	; 0xff
				lcdtouched = 0;
 800150e:	4c11      	ldr	r4, [pc, #68]	; (8001554 <lcd_event_process+0xdc>)
				lcdpevent = 0xff;		// notify lcd page event happened
 8001510:	4911      	ldr	r1, [pc, #68]	; (8001558 <lcd_event_process+0xe0>)
				lcdtouched = 0;
 8001512:	7026      	strb	r6, [r4, #0]
				lcdpevent = 0xff;		// notify lcd page event happened
 8001514:	7008      	strb	r0, [r1, #0]
				pagenum = eventbuffer[1];
 8001516:	701a      	strb	r2, [r3, #0]
				printf("lcd_event_process: Got Page event, Page=%d\n", pagenum);
 8001518:	4813      	ldr	r0, [pc, #76]	; (8001568 <lcd_event_process+0xf0>)
 800151a:	7819      	ldrb	r1, [r3, #0]
 800151c:	f01f fa54 	bl	80209c8 <iprintf>
}
 8001520:	4628      	mov	r0, r5
 8001522:	b002      	add	sp, #8
 8001524:	bd70      	pop	{r4, r5, r6, pc}
				printf("lcd_event_process: Got Touch event\n");
 8001526:	4811      	ldr	r0, [pc, #68]	; (800156c <lcd_event_process+0xf4>)
				lcdtouched = 0xff;		// its a touch
 8001528:	26ff      	movs	r6, #255	; 0xff
				printf("lcd_event_process: Got Touch event\n");
 800152a:	f01f fad5 	bl	8020ad8 <puts>
				dimtimer = DIMTIME;
 800152e:	4910      	ldr	r1, [pc, #64]	; (8001570 <lcd_event_process+0xf8>)
 8001530:	f64e 2060 	movw	r0, #60000	; 0xea60
				lcdtouched = 0xff;		// its a touch
 8001534:	4c07      	ldr	r4, [pc, #28]	; (8001554 <lcd_event_process+0xdc>)
				lcdpevent = 0;
 8001536:	4b08      	ldr	r3, [pc, #32]	; (8001558 <lcd_event_process+0xe0>)
 8001538:	2200      	movs	r2, #0
				dimtimer = DIMTIME;
 800153a:	6008      	str	r0, [r1, #0]
}
 800153c:	4628      	mov	r0, r5
				lcdtouched = 0xff;		// its a touch
 800153e:	7026      	strb	r6, [r4, #0]
				lcdpevent = 0;
 8001540:	701a      	strb	r2, [r3, #0]
}
 8001542:	b002      	add	sp, #8
 8001544:	bd70      	pop	{r4, r5, r6, pc}
 8001546:	bf00      	nop
 8001548:	20001518 	.word	0x20001518
 800154c:	08024b60 	.word	0x08024b60
 8001550:	08024b90 	.word	0x08024b90
 8001554:	200015cd 	.word	0x200015cd
 8001558:	20001544 	.word	0x20001544
 800155c:	200015cc 	.word	0x200015cc
 8001560:	08024adc 	.word	0x08024adc
 8001564:	200015ce 	.word	0x200015ce
 8001568:	08024b34 	.word	0x08024b34
 800156c:	08024b10 	.word	0x08024b10
 8001570:	20000004 	.word	0x20000004

08001574 <processnex>:

void processnex() {		// process Nextion - called at regular intervals
 8001574:	b500      	push	{lr}
 8001576:	b083      	sub	sp, #12
	volatile int result;

	lcd_rxdma();		// get any new characters received
 8001578:	f7ff fdae 	bl	80010d8 <lcd_rxdma>
	result = lcd_event_process();
 800157c:	f7ff ff7c 	bl	8001478 <lcd_event_process>
 8001580:	9001      	str	r0, [sp, #4]
	if (result > 0) {
 8001582:	9b01      	ldr	r3, [sp, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	dd05      	ble.n	8001594 <processnex+0x20>
		printf("processnex: Got something\n");
 8001588:	4804      	ldr	r0, [pc, #16]	; (800159c <processnex+0x28>)
	}

}
 800158a:	b003      	add	sp, #12
 800158c:	f85d eb04 	ldr.w	lr, [sp], #4
		printf("processnex: Got something\n");
 8001590:	f01f baa2 	b.w	8020ad8 <puts>
}
 8001594:	b003      	add	sp, #12
 8001596:	f85d fb04 	ldr.w	pc, [sp], #4
 800159a:	bf00      	nop
 800159c:	08024d5c 	.word	0x08024d5c

080015a0 <netif_status_callbk_fn>:
	}
}

void netif_status_callbk_fn(struct netif *netif) {

	printf("netif_status changed\n");
 80015a0:	4801      	ldr	r0, [pc, #4]	; (80015a8 <netif_status_callbk_fn+0x8>)
 80015a2:	f01f ba99 	b.w	8020ad8 <puts>
 80015a6:	bf00      	nop
 80015a8:	08025394 	.word	0x08025394

080015ac <Callback01>:

/* Callback01 function */
void Callback01(void const * argument)
{
  /* USER CODE BEGIN Callback01 */
	printf("Callback01\n");
 80015ac:	4801      	ldr	r0, [pc, #4]	; (80015b4 <Callback01+0x8>)
 80015ae:	f01f ba93 	b.w	8020ad8 <puts>
 80015b2:	bf00      	nop
 80015b4:	08024de4 	.word	0x08024de4

080015b8 <StarLPTask>:
{
 80015b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char str[32] = { "empty" };
 80015bc:	2300      	movs	r3, #0
{
 80015be:	b0a7      	sub	sp, #156	; 0x9c
	statuspkt.adcudpover = 0;		// debug use count overruns
 80015c0:	f8df 8314 	ldr.w	r8, [pc, #788]	; 80018d8 <StarLPTask+0x320>
	char str[32] = { "empty" };
 80015c4:	4aa0      	ldr	r2, [pc, #640]	; (8001848 <StarLPTask+0x290>)
	while (main_init_done == 0)	// wait from main to complete the initilisation
 80015c6:	4ca1      	ldr	r4, [pc, #644]	; (800184c <StarLPTask+0x294>)
	statuspkt.adcudpover = 0;		// debug use count overruns
 80015c8:	f8c8 3078 	str.w	r3, [r8, #120]	; 0x78
	char str[32] = { "empty" };
 80015cc:	f8cd 3032 	str.w	r3, [sp, #50]	; 0x32
	statuspkt.trigcount = 0;		// debug use adc trigger count
 80015d0:	f8c8 307c 	str.w	r3, [r8, #124]	; 0x7c
	char str[32] = { "empty" };
 80015d4:	f8cd 3036 	str.w	r3, [sp, #54]	; 0x36
 80015d8:	f8cd 303a 	str.w	r3, [sp, #58]	; 0x3a
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
 80015dc:	f8c8 3080 	str.w	r3, [r8, #128]	; 0x80
	char str[32] = { "empty" };
 80015e0:	f8cd 303e 	str.w	r3, [sp, #62]	; 0x3e
 80015e4:	f8cd 3042 	str.w	r3, [sp, #66]	; 0x42
 80015e8:	f8cd 3046 	str.w	r3, [sp, #70]	; 0x46
 80015ec:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
	while (main_init_done == 0)	// wait from main to complete the initilisation
 80015f0:	6823      	ldr	r3, [r4, #0]
	char str[32] = { "empty" };
 80015f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015f6:	900b      	str	r0, [sp, #44]	; 0x2c
 80015f8:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
	while (main_init_done == 0)	// wait from main to complete the initilisation
 80015fc:	b92b      	cbnz	r3, 800160a <StarLPTask+0x52>
		osDelay(100);
 80015fe:	2064      	movs	r0, #100	; 0x64
 8001600:	f00f fc72 	bl	8010ee8 <osDelay>
	while (main_init_done == 0)	// wait from main to complete the initilisation
 8001604:	6823      	ldr	r3, [r4, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0f9      	beq.n	80015fe <StarLPTask+0x46>
	lcd_init();
 800160a:	f7ff fdc9 	bl	80011a0 <lcd_init>
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 800160e:	4d90      	ldr	r5, [pc, #576]	; (8001850 <StarLPTask+0x298>)
	STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], statuspkt.uid, statuspkt.majorversion, statuspkt.minorversion,
 8001610:	f8b8 c05c 	ldrh.w	ip, [r8, #92]	; 0x5c
	uint16_t onesectimer = 0;
 8001614:	f04f 0b00 	mov.w	fp, #0
	STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], statuspkt.uid, statuspkt.majorversion, statuspkt.minorversion,
 8001618:	f898 7070 	ldrb.w	r7, [r8, #112]	; 0x70
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 800161c:	488d      	ldr	r0, [pc, #564]	; (8001854 <StarLPTask+0x29c>)
	uint16_t tenmstimer = 0;
 800161e:	465c      	mov	r4, fp
	STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], statuspkt.uid, statuspkt.majorversion, statuspkt.minorversion,
 8001620:	f898 6071 	ldrb.w	r6, [r8, #113]	; 0x71
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 8001624:	498c      	ldr	r1, [pc, #560]	; (8001858 <StarLPTask+0x2a0>)
 8001626:	4b8d      	ldr	r3, [pc, #564]	; (800185c <StarLPTask+0x2a4>)
 8001628:	4a8d      	ldr	r2, [pc, #564]	; (8001860 <StarLPTask+0x2a8>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	6812      	ldr	r2, [r2, #0]
 800162e:	9603      	str	r6, [sp, #12]
 8001630:	e9cd c701 	strd	ip, r7, [sp, #4]
 8001634:	e9cd 0504 	strd	r0, r5, [sp, #16]
 8001638:	6808      	ldr	r0, [r1, #0]
 800163a:	498a      	ldr	r1, [pc, #552]	; (8001864 <StarLPTask+0x2ac>)
 800163c:	9000      	str	r0, [sp, #0]
 800163e:	488a      	ldr	r0, [pc, #552]	; (8001868 <StarLPTask+0x2b0>)
 8001640:	f01f fb1a 	bl	8020c78 <siprintf>
	HAL_TIM_Base_Start(&htim7);	// start audio synth sampling interval timer
 8001644:	4889      	ldr	r0, [pc, #548]	; (800186c <StarLPTask+0x2b4>)
 8001646:	f00a fb8d 	bl	800bd64 <HAL_TIM_Base_Start>
 800164a:	4d89      	ldr	r5, [pc, #548]	; (8001870 <StarLPTask+0x2b8>)
	lptask_init_done = 1;		// this lp task has done its initialisation
 800164c:	4b89      	ldr	r3, [pc, #548]	; (8001874 <StarLPTask+0x2bc>)
 800164e:	2201      	movs	r2, #1
 8001650:	601a      	str	r2, [r3, #0]
		HAL_IWDG_Refresh(&hiwdg);							// refresh the hardware watchdog reset system timer
 8001652:	4889      	ldr	r0, [pc, #548]	; (8001878 <StarLPTask+0x2c0>)
		tenmstimer++;
 8001654:	3401      	adds	r4, #1
		HAL_IWDG_Refresh(&hiwdg);							// refresh the hardware watchdog reset system timer
 8001656:	f007 fd9d 	bl	8009194 <HAL_IWDG_Refresh>
		osDelay(10);		// 10mSec
 800165a:	200a      	movs	r0, #10
 800165c:	f00f fc44 	bl	8010ee8 <osDelay>
		globaladcnoise = abs(meanwindiff);
 8001660:	4b86      	ldr	r3, [pc, #536]	; (800187c <StarLPTask+0x2c4>)
		if (ledhang) {	// trigger led
 8001662:	4e87      	ldr	r6, [pc, #540]	; (8001880 <StarLPTask+0x2c8>)
		tenmstimer++;
 8001664:	b2a4      	uxth	r4, r4
		globaladcnoise = abs(meanwindiff);
 8001666:	f9b3 3000 	ldrsh.w	r3, [r3]
 800166a:	4886      	ldr	r0, [pc, #536]	; (8001884 <StarLPTask+0x2cc>)
 800166c:	2b00      	cmp	r3, #0
		if (ledhang) {	// trigger led
 800166e:	6832      	ldr	r2, [r6, #0]
		globaladcnoise = abs(meanwindiff);
 8001670:	bfb8      	it	lt
 8001672:	425b      	neglt	r3, r3
		pretrigthresh = 4 + (globaladcnoise >> 7);		// set the pretrigger level
 8001674:	09d9      	lsrs	r1, r3, #7
		globaladcnoise = abs(meanwindiff);
 8001676:	6003      	str	r3, [r0, #0]
		pretrigthresh = 4 + (globaladcnoise >> 7);		// set the pretrigger level
 8001678:	1d0b      	adds	r3, r1, #4
 800167a:	4983      	ldr	r1, [pc, #524]	; (8001888 <StarLPTask+0x2d0>)
 800167c:	800b      	strh	r3, [r1, #0]
		if (ledhang) {	// trigger led
 800167e:	2a00      	cmp	r2, #0
 8001680:	f000 8091 	beq.w	80017a6 <StarLPTask+0x1ee>
			ledhang--;
 8001684:	1e53      	subs	r3, r2, #1
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 8001686:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800168a:	2201      	movs	r2, #1
 800168c:	487f      	ldr	r0, [pc, #508]	; (800188c <StarLPTask+0x2d4>)
			ledhang--;
 800168e:	6033      	str	r3, [r6, #0]
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 8001690:	f007 f8e2 	bl	8008858 <HAL_GPIO_WritePin>
		if (trigs != statuspkt.trigcount) {		// another tigger(s) has occured
 8001694:	4b7e      	ldr	r3, [pc, #504]	; (8001890 <StarLPTask+0x2d8>)
 8001696:	f8d8 207c 	ldr.w	r2, [r8, #124]	; 0x7c
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	429a      	cmp	r2, r3
 800169e:	f040 808e 	bne.w	80017be <StarLPTask+0x206>
		processnex();		// process Nextion
 80016a2:	f7ff ff67 	bl	8001574 <processnex>
		if ((tenmstimer+3) % 10 == 0) {
 80016a6:	1ce2      	adds	r2, r4, #3
 80016a8:	4b7a      	ldr	r3, [pc, #488]	; (8001894 <StarLPTask+0x2dc>)
 80016aa:	fba3 1302 	umull	r1, r3, r3, r2
 80016ae:	08db      	lsrs	r3, r3, #3
 80016b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80016b4:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 80016b8:	d115      	bne.n	80016e6 <StarLPTask+0x12e>
			if (statuspkt.trigcount > (25 + jabtrigcnt)) { // spamming: > 25 packets sent in about 100mS
 80016ba:	4b77      	ldr	r3, [pc, #476]	; (8001898 <StarLPTask+0x2e0>)
 80016bc:	f8d8 107c 	ldr.w	r1, [r8, #124]	; 0x7c
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f103 0219 	add.w	r2, r3, #25
 80016c6:	4291      	cmp	r1, r2
 80016c8:	f200 8158 	bhi.w	800197c <StarLPTask+0x3c4>
				if (jabbertimeout) {
 80016cc:	4a73      	ldr	r2, [pc, #460]	; (800189c <StarLPTask+0x2e4>)
 80016ce:	6813      	ldr	r3, [r2, #0]
 80016d0:	b10b      	cbz	r3, 80016d6 <StarLPTask+0x11e>
					jabbertimeout--;		// de-arm count
 80016d2:	3b01      	subs	r3, #1
 80016d4:	6013      	str	r3, [r2, #0]
				jabtrigcnt = statuspkt.trigcount;
 80016d6:	f8d8 307c 	ldr.w	r3, [r8, #124]	; 0x7c
 80016da:	4a6f      	ldr	r2, [pc, #444]	; (8001898 <StarLPTask+0x2e0>)
 80016dc:	6013      	str	r3, [r2, #0]
			if (gainchanged == 0) {		// gain not just changed
 80016de:	9b07      	ldr	r3, [sp, #28]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f000 8163 	beq.w	80019ac <StarLPTask+0x3f4>
			localepochtime = epochtime + (time_t)(10 * 60 * 60);		// add ten hours
 80016e6:	4b6e      	ldr	r3, [pc, #440]	; (80018a0 <StarLPTask+0x2e8>)
 80016e8:	f648 46a0 	movw	r6, #36000	; 0x8ca0
 80016ec:	2700      	movs	r7, #0
			timeinfo = *localtime (&localepochtime);
 80016ee:	a808      	add	r0, sp, #32
			localepochtime = epochtime + (time_t)(10 * 60 * 60);		// add ten hours
 80016f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f4:	eb12 0906 	adds.w	r9, r2, r6
 80016f8:	eb43 0a07 	adc.w	sl, r3, r7
			timeinfo = *localtime (&localepochtime);
 80016fc:	af13      	add	r7, sp, #76	; 0x4c
			localepochtime = epochtime + (time_t)(10 * 60 * 60);		// add ten hours
 80016fe:	e9cd 9a08 	strd	r9, sl, [sp, #32]
			timeinfo = *localtime (&localepochtime);
 8001702:	f01e f87b 	bl	801f7fc <localtime>
 8001706:	4606      	mov	r6, r0
 8001708:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800170a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800170c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800170e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8001710:	6836      	ldr	r6, [r6, #0]
			strftime (buffer,sizeof(buffer),"%H:%M:%S",&timeinfo);
 8001712:	ab13      	add	r3, sp, #76	; 0x4c
 8001714:	4a63      	ldr	r2, [pc, #396]	; (80018a4 <StarLPTask+0x2ec>)
 8001716:	2128      	movs	r1, #40	; 0x28
 8001718:	a81c      	add	r0, sp, #112	; 0x70
			timeinfo = *localtime (&localepochtime);
 800171a:	603e      	str	r6, [r7, #0]
			strftime (buffer,sizeof(buffer),"%H:%M:%S",&timeinfo);
 800171c:	f020 f8be 	bl	802189c <strftime>
			setlcdtext("t0.txt", buffer);
 8001720:	a91c      	add	r1, sp, #112	; 0x70
 8001722:	4861      	ldr	r0, [pc, #388]	; (80018a8 <StarLPTask+0x2f0>)
 8001724:	f7ff fe1e 	bl	8001364 <setlcdtext>
		if ((tenmstimer+11) % 100 == 0) {		// every second
 8001728:	f104 020b 	add.w	r2, r4, #11
 800172c:	4b5f      	ldr	r3, [pc, #380]	; (80018ac <StarLPTask+0x2f4>)
 800172e:	2164      	movs	r1, #100	; 0x64
 8001730:	fba3 0302 	umull	r0, r3, r3, r2
 8001734:	095b      	lsrs	r3, r3, #5
 8001736:	fb01 2313 	mls	r3, r1, r3, r2
 800173a:	2b00      	cmp	r3, #0
 800173c:	f000 814b 	beq.w	80019d6 <StarLPTask+0x41e>
		if ((tenmstimer+27) % 1000 == 0) {		// every 10 seconds
 8001740:	f104 021b 	add.w	r2, r4, #27
 8001744:	4b5a      	ldr	r3, [pc, #360]	; (80018b0 <StarLPTask+0x2f8>)
 8001746:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800174a:	fba3 0302 	umull	r0, r3, r3, r2
 800174e:	099b      	lsrs	r3, r3, #6
 8001750:	fb01 2313 	mls	r3, r1, r3, r2
 8001754:	b9cb      	cbnz	r3, 800178a <StarLPTask+0x1d2>
			if (agc) {
 8001756:	4a57      	ldr	r2, [pc, #348]	; (80018b4 <StarLPTask+0x2fc>)
 8001758:	8812      	ldrh	r2, [r2, #0]
 800175a:	2a00      	cmp	r2, #0
 800175c:	f000 810c 	beq.w	8001978 <StarLPTask+0x3c0>
				trigsin10sec = trigs - prevtrigs;
 8001760:	4a4b      	ldr	r2, [pc, #300]	; (8001890 <StarLPTask+0x2d8>)
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 8001762:	4855      	ldr	r0, [pc, #340]	; (80018b8 <StarLPTask+0x300>)
				trigsin10sec = trigs - prevtrigs;
 8001764:	6811      	ldr	r1, [r2, #0]
 8001766:	4a55      	ldr	r2, [pc, #340]	; (80018bc <StarLPTask+0x304>)
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 8001768:	8800      	ldrh	r0, [r0, #0]
				trigsin10sec = trigs - prevtrigs;
 800176a:	6812      	ldr	r2, [r2, #0]
 800176c:	4e54      	ldr	r6, [pc, #336]	; (80018c0 <StarLPTask+0x308>)
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 800176e:	2805      	cmp	r0, #5
				trigsin10sec = trigs - prevtrigs;
 8001770:	eba1 0202 	sub.w	r2, r1, r2
 8001774:	6032      	str	r2, [r6, #0]
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 8001776:	d802      	bhi.n	800177e <StarLPTask+0x1c6>
					if (trigsin10sec < MINTRIGS10S)
 8001778:	2a01      	cmp	r2, #1
 800177a:	f240 81ff 	bls.w	8001b7c <StarLPTask+0x5c4>
				if (trigsin10sec > MAXTRIGS10S)
 800177e:	2a0a      	cmp	r2, #10
 8001780:	f200 81c7 	bhi.w	8001b12 <StarLPTask+0x55a>
				prevtrigs = trigs;
 8001784:	4a4d      	ldr	r2, [pc, #308]	; (80018bc <StarLPTask+0x304>)
			gainchanged = 0;
 8001786:	9307      	str	r3, [sp, #28]
				prevtrigs = trigs;
 8001788:	6011      	str	r1, [r2, #0]
		if ((tenmstimer+44) > 3000) {		// reset timer after 30 seconds
 800178a:	f640 338c 	movw	r3, #2956	; 0xb8c
 800178e:	429c      	cmp	r4, r3
 8001790:	f200 80a4 	bhi.w	80018dc <StarLPTask+0x324>
		if (onesectimer > 900) {			// 15 mins
 8001794:	f5bb 7f61 	cmp.w	fp, #900	; 0x384
 8001798:	f67f af5b 	bls.w	8001652 <StarLPTask+0x9a>
			requestapisn();	//update s/n and udp target (reboot on fail)
 800179c:	f003 fe92 	bl	80054c4 <requestapisn>
			onesectimer = 0;
 80017a0:	f04f 0b00 	mov.w	fp, #0
 80017a4:	e755      	b.n	8001652 <StarLPTask+0x9a>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_RESET);	// Splat D5 led off
 80017a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017aa:	4838      	ldr	r0, [pc, #224]	; (800188c <StarLPTask+0x2d4>)
 80017ac:	f007 f854 	bl	8008858 <HAL_GPIO_WritePin>
		if (trigs != statuspkt.trigcount) {		// another tigger(s) has occured
 80017b0:	4b37      	ldr	r3, [pc, #220]	; (8001890 <StarLPTask+0x2d8>)
 80017b2:	f8d8 207c 	ldr.w	r2, [r8, #124]	; 0x7c
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	f43f af72 	beq.w	80016a2 <StarLPTask+0xea>
			trigs = statuspkt.trigcount;
 80017be:	f8d8 607c 	ldr.w	r6, [r8, #124]	; 0x7c
			HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, phaser_wav, sizeof(phaser_wav),
 80017c2:	2108      	movs	r1, #8
			trigs = statuspkt.trigcount;
 80017c4:	4f32      	ldr	r7, [pc, #200]	; (8001890 <StarLPTask+0x2d8>)
			HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, phaser_wav, sizeof(phaser_wav),
 80017c6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80017ca:	9100      	str	r1, [sp, #0]
 80017cc:	2100      	movs	r1, #0
			trigs = statuspkt.trigcount;
 80017ce:	603e      	str	r6, [r7, #0]
			HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, phaser_wav, sizeof(phaser_wav),
 80017d0:	4a3c      	ldr	r2, [pc, #240]	; (80018c4 <StarLPTask+0x30c>)
 80017d2:	483d      	ldr	r0, [pc, #244]	; (80018c8 <StarLPTask+0x310>)
 80017d4:	f004 fc86 	bl	80060e4 <HAL_DAC_Start_DMA>
				printf("sem wait 1a\n");
 80017d8:	4e3c      	ldr	r6, [pc, #240]	; (80018cc <StarLPTask+0x314>)
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 1) == pdTRUE)) {// take the ssi generation semaphore (portMAX_DELAY == infinite)
 80017da:	e001      	b.n	80017e0 <StarLPTask+0x228>
				printf("sem wait 1a\n");
 80017dc:	f01f f97c 	bl	8020ad8 <puts>
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 1) == pdTRUE)) {// take the ssi generation semaphore (portMAX_DELAY == infinite)
 80017e0:	2101      	movs	r1, #1
 80017e2:	6828      	ldr	r0, [r5, #0]
 80017e4:	f010 f91c 	bl	8011a20 <xQueueSemaphoreTake>
 80017e8:	2801      	cmp	r0, #1
				printf("sem wait 1a\n");
 80017ea:	4630      	mov	r0, r6
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 1) == pdTRUE)) {// take the ssi generation semaphore (portMAX_DELAY == infinite)
 80017ec:	d1f6      	bne.n	80017dc <StarLPTask+0x224>
			strcpy(str, ctime(&epochtime));		// ctime
 80017ee:	482c      	ldr	r0, [pc, #176]	; (80018a0 <StarLPTask+0x2e8>)
			n = 0;
 80017f0:	2600      	movs	r6, #0
			strcpy(str, ctime(&epochtime));		// ctime
 80017f2:	f01d ffd7 	bl	801f7a4 <ctime>
 80017f6:	4601      	mov	r1, r0
 80017f8:	a80b      	add	r0, sp, #44	; 0x2c
 80017fa:	f01f facc 	bl	8020d96 <stpcpy>
 80017fe:	ab0b      	add	r3, sp, #44	; 0x2c
 8001800:	1ac0      	subs	r0, r0, r3
 8001802:	4619      	mov	r1, r3
			i = 0;
 8001804:	4633      	mov	r3, r6
			while (i < strlen(str)) {
 8001806:	4283      	cmp	r3, r0
				i++;
 8001808:	f103 0301 	add.w	r3, r3, #1
			while (i < strlen(str)) {
 800180c:	d20d      	bcs.n	800182a <StarLPTask+0x272>
				if ((str[i] != '\n') && (str[i] != '\r'))
 800180e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001812:	2a0a      	cmp	r2, #10
 8001814:	d0f7      	beq.n	8001806 <StarLPTask+0x24e>
 8001816:	2a0d      	cmp	r2, #13
 8001818:	d0f5      	beq.n	8001806 <StarLPTask+0x24e>
					trigtimestr[n++] = str[i];
 800181a:	4f2d      	ldr	r7, [pc, #180]	; (80018d0 <StarLPTask+0x318>)
			while (i < strlen(str)) {
 800181c:	4283      	cmp	r3, r0
				i++;
 800181e:	f103 0301 	add.w	r3, r3, #1
					trigtimestr[n++] = str[i];
 8001822:	55ba      	strb	r2, [r7, r6]
 8001824:	f106 0601 	add.w	r6, r6, #1
			while (i < strlen(str)) {
 8001828:	d3f1      	bcc.n	800180e <StarLPTask+0x256>
			trigtimestr[n] = '\0';
 800182a:	2300      	movs	r3, #0
 800182c:	4928      	ldr	r1, [pc, #160]	; (80018d0 <StarLPTask+0x318>)
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 800182e:	6828      	ldr	r0, [r5, #0]
			trigtimestr[n] = '\0';
 8001830:	558b      	strb	r3, [r1, r6]
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 8001832:	461a      	mov	r2, r3
 8001834:	4619      	mov	r1, r3
 8001836:	f00f fe6d 	bl	8011514 <xQueueGenericSend>
 800183a:	2801      	cmp	r0, #1
 800183c:	f43f af31 	beq.w	80016a2 <StarLPTask+0xea>
				printf("semaphore 1a release failed\n");
 8001840:	4824      	ldr	r0, [pc, #144]	; (80018d4 <StarLPTask+0x31c>)
 8001842:	f01f f949 	bl	8020ad8 <puts>
 8001846:	e72c      	b.n	80016a2 <StarLPTask+0xea>
 8001848:	08024748 	.word	0x08024748
 800184c:	2000162c 	.word	0x2000162c
 8001850:	20023420 	.word	0x20023420
 8001854:	20023438 	.word	0x20023438
 8001858:	1ff0f428 	.word	0x1ff0f428
 800185c:	1ff0f424 	.word	0x1ff0f424
 8001860:	1ff0f420 	.word	0x1ff0f420
 8001864:	08024e80 	.word	0x08024e80
 8001868:	2000007c 	.word	0x2000007c
 800186c:	20023244 	.word	0x20023244
 8001870:	20022f48 	.word	0x20022f48
 8001874:	20001628 	.word	0x20001628
 8001878:	20022b20 	.word	0x20022b20
 800187c:	20000700 	.word	0x20000700
 8001880:	200006fc 	.word	0x200006fc
 8001884:	200006b0 	.word	0x200006b0
 8001888:	20000000 	.word	0x20000000
 800188c:	40020c00 	.word	0x40020c00
 8001890:	2000163c 	.word	0x2000163c
 8001894:	cccccccd 	.word	0xcccccccd
 8001898:	2000161c 	.word	0x2000161c
 800189c:	200006b4 	.word	0x200006b4
 80018a0:	20023368 	.word	0x20023368
 80018a4:	08024f00 	.word	0x08024f00
 80018a8:	08024f0c 	.word	0x08024f0c
 80018ac:	51eb851f 	.word	0x51eb851f
 80018b0:	10624dd3 	.word	0x10624dd3
 80018b4:	20000008 	.word	0x20000008
 80018b8:	20000002 	.word	0x20000002
 80018bc:	20001630 	.word	0x20001630
 80018c0:	20001640 	.word	0x20001640
 80018c4:	080253ac 	.word	0x080253ac
 80018c8:	20022e6c 	.word	0x20022e6c
 80018cc:	08024ec8 	.word	0x08024ec8
 80018d0:	20000210 	.word	0x20000210
 80018d4:	08024ed4 	.word	0x08024ed4
 80018d8:	20022774 	.word	0x20022774
		strftime (buffer,sizeof(buffer),"%a %e %h %Y ",&timeinfo);
 80018dc:	ab13      	add	r3, sp, #76	; 0x4c
 80018de:	4aac      	ldr	r2, [pc, #688]	; (8001b90 <StarLPTask+0x5d8>)
 80018e0:	2128      	movs	r1, #40	; 0x28
 80018e2:	a81c      	add	r0, sp, #112	; 0x70
 80018e4:	f01f ffda 	bl	802189c <strftime>
		setlcdtext("t1.txt", buffer);
 80018e8:	a91c      	add	r1, sp, #112	; 0x70
 80018ea:	48aa      	ldr	r0, [pc, #680]	; (8001b94 <StarLPTask+0x5dc>)
 80018ec:	f7ff fd3a 	bl	8001364 <setlcdtext>
			if (gpsgood == 0) {	// gps is not talking to us
 80018f0:	4ba9      	ldr	r3, [pc, #676]	; (8001b98 <StarLPTask+0x5e0>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	f000 80fd 	beq.w	8001af4 <StarLPTask+0x53c>
			if (psensor == MPL115A2) {
 80018fa:	4ba8      	ldr	r3, [pc, #672]	; (8001b9c <StarLPTask+0x5e4>)
			gpsgood = 0;			// reset the good flag
 80018fc:	2200      	movs	r2, #0
 80018fe:	49a6      	ldr	r1, [pc, #664]	; (8001b98 <StarLPTask+0x5e0>)
			if (psensor == MPL115A2) {
 8001900:	681b      	ldr	r3, [r3, #0]
			gpsgood = 0;			// reset the good flag
 8001902:	600a      	str	r2, [r1, #0]
			if (psensor == MPL115A2) {
 8001904:	2b01      	cmp	r3, #1
 8001906:	f000 811c 	beq.w	8001b42 <StarLPTask+0x58a>
			} else if (psensor == MPL3115A2) {
 800190a:	2b02      	cmp	r3, #2
 800190c:	f000 812d 	beq.w	8001b6a <StarLPTask+0x5b2>
			printf("ID:%lu/(%d) %d:%d:%d:%d ", statuspkt.uid, BUILDNO, myip & 0xFF, (myip & 0xFF00) >> 8,
 8001910:	4ba3      	ldr	r3, [pc, #652]	; (8001ba0 <StarLPTask+0x5e8>)
 8001912:	f242 7216 	movw	r2, #10006	; 0x2716
 8001916:	f8b8 105c 	ldrh.w	r1, [r8, #92]	; 0x5c
			tenmstimer = 0;
 800191a:	2400      	movs	r4, #0
			printf("ID:%lu/(%d) %d:%d:%d:%d ", statuspkt.uid, BUILDNO, myip & 0xFF, (myip & 0xFF00) >> 8,
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	0e1f      	lsrs	r7, r3, #24
 8001920:	f3c3 4607 	ubfx	r6, r3, #16, #8
 8001924:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8001928:	b2db      	uxtb	r3, r3
 800192a:	9702      	str	r7, [sp, #8]
			printf("triggers:%04d, gain:%d, noise:%03d, thresh:%02d, press:%03d.%04d, temp:%02d.%03d, time:%s\n", trigs,
 800192c:	4f9d      	ldr	r7, [pc, #628]	; (8001ba4 <StarLPTask+0x5ec>)
			printf("ID:%lu/(%d) %d:%d:%d:%d ", statuspkt.uid, BUILDNO, myip & 0xFF, (myip & 0xFF00) >> 8,
 800192e:	e9cd 0600 	strd	r0, r6, [sp]
 8001932:	489d      	ldr	r0, [pc, #628]	; (8001ba8 <StarLPTask+0x5f0>)
 8001934:	f01f f848 	bl	80209c8 <iprintf>
			printf("triggers:%04d, gain:%d, noise:%03d, thresh:%02d, press:%03d.%04d, temp:%02d.%03d, time:%s\n", trigs,
 8001938:	4b9c      	ldr	r3, [pc, #624]	; (8001bac <StarLPTask+0x5f4>)
 800193a:	499d      	ldr	r1, [pc, #628]	; (8001bb0 <StarLPTask+0x5f8>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	489d      	ldr	r0, [pc, #628]	; (8001bb4 <StarLPTask+0x5fc>)
 8001940:	fba1 2602 	umull	r2, r6, r1, r2
 8001944:	4b9c      	ldr	r3, [pc, #624]	; (8001bb8 <StarLPTask+0x600>)
 8001946:	6800      	ldr	r0, [r0, #0]
 8001948:	09b6      	lsrs	r6, r6, #6
 800194a:	4a9c      	ldr	r2, [pc, #624]	; (8001bbc <StarLPTask+0x604>)
 800194c:	499c      	ldr	r1, [pc, #624]	; (8001bc0 <StarLPTask+0x608>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	8812      	ldrh	r2, [r2, #0]
 8001952:	6809      	ldr	r1, [r1, #0]
 8001954:	9705      	str	r7, [sp, #20]
 8001956:	f002 0207 	and.w	r2, r2, #7
 800195a:	e9cd 0603 	strd	r0, r6, [sp, #12]
 800195e:	4899      	ldr	r0, [pc, #612]	; (8001bc4 <StarLPTask+0x60c>)
 8001960:	6806      	ldr	r6, [r0, #0]
 8001962:	4899      	ldr	r0, [pc, #612]	; (8001bc8 <StarLPTask+0x610>)
 8001964:	6800      	ldr	r0, [r0, #0]
 8001966:	e9cd 0601 	strd	r0, r6, [sp, #4]
 800196a:	4898      	ldr	r0, [pc, #608]	; (8001bcc <StarLPTask+0x614>)
 800196c:	8800      	ldrh	r0, [r0, #0]
 800196e:	9000      	str	r0, [sp, #0]
 8001970:	4897      	ldr	r0, [pc, #604]	; (8001bd0 <StarLPTask+0x618>)
 8001972:	f01f f829 	bl	80209c8 <iprintf>
 8001976:	e70d      	b.n	8001794 <StarLPTask+0x1dc>
			gainchanged = 0;
 8001978:	9207      	str	r2, [sp, #28]
 800197a:	e706      	b.n	800178a <StarLPTask+0x1d2>
				statuspkt.jabcnt++;
 800197c:	f8b8 2086 	ldrh.w	r2, [r8, #134]	; 0x86
				jabbertimeout = 1;		// 100mS seconds pause
 8001980:	2101      	movs	r1, #1
 8001982:	4894      	ldr	r0, [pc, #592]	; (8001bd4 <StarLPTask+0x61c>)
				statuspkt.jabcnt++;
 8001984:	440a      	add	r2, r1
				jabbertimeout = 1;		// 100mS seconds pause
 8001986:	6001      	str	r1, [r0, #0]
				statuspkt.jabcnt++;
 8001988:	b292      	uxth	r2, r2
				printf("Jabbering: %d\n", statuspkt.trigcount - jabtrigcnt);
 800198a:	4893      	ldr	r0, [pc, #588]	; (8001bd8 <StarLPTask+0x620>)
				statuspkt.jabcnt++;
 800198c:	f8a8 2086 	strh.w	r2, [r8, #134]	; 0x86
				printf("Jabbering: %d\n", statuspkt.trigcount - jabtrigcnt);
 8001990:	f8d8 107c 	ldr.w	r1, [r8, #124]	; 0x7c
 8001994:	1ac9      	subs	r1, r1, r3
 8001996:	f01f f817 	bl	80209c8 <iprintf>
				if (agc) {
 800199a:	4b90      	ldr	r3, [pc, #576]	; (8001bdc <StarLPTask+0x624>)
 800199c:	881b      	ldrh	r3, [r3, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f040 80d8 	bne.w	8001b54 <StarLPTask+0x59c>
				jabtrigcnt = statuspkt.trigcount;
 80019a4:	f8d8 307c 	ldr.w	r3, [r8, #124]	; 0x7c
 80019a8:	4a8d      	ldr	r2, [pc, #564]	; (8001be0 <StarLPTask+0x628>)
 80019aa:	6013      	str	r3, [r2, #0]
				n = pretrigcnt - lastpretrigcnt;		// count pretriggers
 80019ac:	4b8d      	ldr	r3, [pc, #564]	; (8001be4 <StarLPTask+0x62c>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4b8d      	ldr	r3, [pc, #564]	; (8001be8 <StarLPTask+0x630>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	1ad3      	subs	r3, r2, r3
				if (n > 5) {				// too many triggers in 100mS
 80019b6:	2b05      	cmp	r3, #5
 80019b8:	f340 8091 	ble.w	8001ade <StarLPTask+0x526>
					if (trigthresh < 4095)
 80019bc:	4883      	ldr	r0, [pc, #524]	; (8001bcc <StarLPTask+0x614>)
 80019be:	f640 71fe 	movw	r1, #4094	; 0xffe
 80019c2:	8803      	ldrh	r3, [r0, #0]
 80019c4:	428b      	cmp	r3, r1
 80019c6:	d801      	bhi.n	80019cc <StarLPTask+0x414>
						trigthresh++;
 80019c8:	3301      	adds	r3, #1
 80019ca:	8003      	strh	r3, [r0, #0]
				lastpretrigcnt = pretrigcnt;	// (dont worry about 2^32 wrap)
 80019cc:	2300      	movs	r3, #0
 80019ce:	9307      	str	r3, [sp, #28]
 80019d0:	4b85      	ldr	r3, [pc, #532]	; (8001be8 <StarLPTask+0x630>)
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	e687      	b.n	80016e6 <StarLPTask+0x12e>
			HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 80019d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019da:	4884      	ldr	r0, [pc, #528]	; (8001bec <StarLPTask+0x634>)
 80019dc:	f006 ff56 	bl	800888c <HAL_GPIO_TogglePin>
				printf("sem wait 1b\n");
 80019e0:	4e83      	ldr	r6, [pc, #524]	; (8001bf0 <StarLPTask+0x638>)
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 1) == pdTRUE)) {// take the ssi generation semaphore (portMAX_DELAY == infinite)
 80019e2:	e001      	b.n	80019e8 <StarLPTask+0x430>
				printf("sem wait 1b\n");
 80019e4:	f01f f878 	bl	8020ad8 <puts>
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 1) == pdTRUE)) {// take the ssi generation semaphore (portMAX_DELAY == infinite)
 80019e8:	2101      	movs	r1, #1
 80019ea:	6828      	ldr	r0, [r5, #0]
 80019ec:	f010 f818 	bl	8011a20 <xQueueSemaphoreTake>
 80019f0:	2801      	cmp	r0, #1
				printf("sem wait 1b\n");
 80019f2:	4630      	mov	r0, r6
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 1) == pdTRUE)) {// take the ssi generation semaphore (portMAX_DELAY == infinite)
 80019f4:	d1f6      	bne.n	80019e4 <StarLPTask+0x42c>
			strcpy(str, ctime(&epochtime));
 80019f6:	487f      	ldr	r0, [pc, #508]	; (8001bf4 <StarLPTask+0x63c>)
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 80019f8:	2600      	movs	r6, #0
			strcpy(str, ctime(&epochtime));
 80019fa:	f01d fed3 	bl	801f7a4 <ctime>
 80019fe:	4601      	mov	r1, r0
 8001a00:	a80b      	add	r0, sp, #44	; 0x2c
 8001a02:	f01f f9c8 	bl	8020d96 <stpcpy>
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 8001a06:	ab0b      	add	r3, sp, #44	; 0x2c
			sprintf(nowtimestr, "\"%s\"", str);
 8001a08:	497b      	ldr	r1, [pc, #492]	; (8001bf8 <StarLPTask+0x640>)
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 8001a0a:	1ac0      	subs	r0, r0, r3
			sprintf(nowtimestr, "\"%s\"", str);
 8001a0c:	461a      	mov	r2, r3
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 8001a0e:	ab26      	add	r3, sp, #152	; 0x98
 8001a10:	4403      	add	r3, r0
			sprintf(nowtimestr, "\"%s\"", str);
 8001a12:	4864      	ldr	r0, [pc, #400]	; (8001ba4 <StarLPTask+0x5ec>)
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 8001a14:	f803 6c6d 	strb.w	r6, [r3, #-109]
			sprintf(nowtimestr, "\"%s\"", str);
 8001a18:	f01f f92e 	bl	8020c78 <siprintf>
			sprintf(tempstr, "%d.%d", temperature, tempfrac);
 8001a1c:	4b63      	ldr	r3, [pc, #396]	; (8001bac <StarLPTask+0x5f4>)
 8001a1e:	4a65      	ldr	r2, [pc, #404]	; (8001bb4 <StarLPTask+0x5fc>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	6812      	ldr	r2, [r2, #0]
 8001a24:	4975      	ldr	r1, [pc, #468]	; (8001bfc <StarLPTask+0x644>)
 8001a26:	4876      	ldr	r0, [pc, #472]	; (8001c00 <StarLPTask+0x648>)
 8001a28:	f01f f926 	bl	8020c78 <siprintf>
			sprintf(pressstr, "%d.%d", pressure, pressfrac);
 8001a2c:	4b65      	ldr	r3, [pc, #404]	; (8001bc4 <StarLPTask+0x60c>)
 8001a2e:	4a66      	ldr	r2, [pc, #408]	; (8001bc8 <StarLPTask+0x610>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6812      	ldr	r2, [r2, #0]
 8001a34:	4971      	ldr	r1, [pc, #452]	; (8001bfc <StarLPTask+0x644>)
 8001a36:	4873      	ldr	r0, [pc, #460]	; (8001c04 <StarLPTask+0x64c>)
 8001a38:	f01f f91e 	bl	8020c78 <siprintf>
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 8001a3c:	4b72      	ldr	r3, [pc, #456]	; (8001c08 <StarLPTask+0x650>)
			sprintf(statstr,
 8001a3e:	4a73      	ldr	r2, [pc, #460]	; (8001c0c <StarLPTask+0x654>)
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 8001a40:	f9b3 3000 	ldrsh.w	r3, [r3]
			sprintf(statstr,
 8001a44:	6811      	ldr	r1, [r2, #0]
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 8001a46:	2b00      	cmp	r3, #0
			sprintf(statstr,
 8001a48:	4860      	ldr	r0, [pc, #384]	; (8001bcc <StarLPTask+0x614>)
 8001a4a:	f8d8 2064 	ldr.w	r2, [r8, #100]	; 0x64
 8001a4e:	f3c1 010b 	ubfx	r1, r1, #0, #12
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 8001a52:	bfb8      	it	lt
 8001a54:	425b      	neglt	r3, r3
			sprintf(statstr,
 8001a56:	8800      	ldrh	r0, [r0, #0]
 8001a58:	f8d8 607c 	ldr.w	r6, [r8, #124]	; 0x7c
 8001a5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a60:	9003      	str	r0, [sp, #12]
 8001a62:	9600      	str	r6, [sp, #0]
 8001a64:	486a      	ldr	r0, [pc, #424]	; (8001c10 <StarLPTask+0x658>)
 8001a66:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8001a6a:	4b6a      	ldr	r3, [pc, #424]	; (8001c14 <StarLPTask+0x65c>)
 8001a6c:	496a      	ldr	r1, [pc, #424]	; (8001c18 <StarLPTask+0x660>)
 8001a6e:	f01f f903 	bl	8020c78 <siprintf>
			if (gpslocked) {
 8001a72:	4b6a      	ldr	r3, [pc, #424]	; (8001c1c <StarLPTask+0x664>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d040      	beq.n	8001afc <StarLPTask+0x544>
				sprintf(gpsstr, "\"Locked: %d Sats<br>Lon: %d<br>Lat: %d\"", statuspkt.NavPvt.numSV,
 8001a7a:	f898 201b 	ldrb.w	r2, [r8, #27]
 8001a7e:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8001a82:	f8d8 0020 	ldr.w	r0, [r8, #32]
 8001a86:	4966      	ldr	r1, [pc, #408]	; (8001c20 <StarLPTask+0x668>)
 8001a88:	9000      	str	r0, [sp, #0]
 8001a8a:	4866      	ldr	r0, [pc, #408]	; (8001c24 <StarLPTask+0x66c>)
 8001a8c:	f01f f8f4 	bl	8020c78 <siprintf>
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 8001a90:	2300      	movs	r3, #0
 8001a92:	6828      	ldr	r0, [r5, #0]
 8001a94:	461a      	mov	r2, r3
 8001a96:	4619      	mov	r1, r3
 8001a98:	f00f fd3c 	bl	8011514 <xQueueGenericSend>
 8001a9c:	2801      	cmp	r0, #1
 8001a9e:	d002      	beq.n	8001aa6 <StarLPTask+0x4ee>
				printf("semaphore 1b release failed\n");
 8001aa0:	4861      	ldr	r0, [pc, #388]	; (8001c28 <StarLPTask+0x670>)
 8001aa2:	f01f f819 	bl	8020ad8 <puts>
			onesectimer++;
 8001aa6:	f10b 0b01 	add.w	fp, fp, #1
				printf("sem wait 1c\n");
 8001aaa:	4e60      	ldr	r6, [pc, #384]	; (8001c2c <StarLPTask+0x674>)
			onesectimer++;
 8001aac:	fa1f fb8b 	uxth.w	fp, fp
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 25) == pdTRUE)) {// give the ssi generation semaphore (portMAX_DELAY == infinite)
 8001ab0:	e001      	b.n	8001ab6 <StarLPTask+0x4fe>
				printf("sem wait 1c\n");
 8001ab2:	f01f f811 	bl	8020ad8 <puts>
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 25) == pdTRUE)) {// give the ssi generation semaphore (portMAX_DELAY == infinite)
 8001ab6:	2119      	movs	r1, #25
 8001ab8:	6828      	ldr	r0, [r5, #0]
 8001aba:	f00f ffb1 	bl	8011a20 <xQueueSemaphoreTake>
 8001abe:	2801      	cmp	r0, #1
				printf("sem wait 1c\n");
 8001ac0:	4630      	mov	r0, r6
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 25) == pdTRUE)) {// give the ssi generation semaphore (portMAX_DELAY == infinite)
 8001ac2:	d1f6      	bne.n	8001ab2 <StarLPTask+0x4fa>
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {	// give the ssi generation semaphore
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	6828      	ldr	r0, [r5, #0]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	4619      	mov	r1, r3
 8001acc:	f00f fd22 	bl	8011514 <xQueueGenericSend>
 8001ad0:	2801      	cmp	r0, #1
 8001ad2:	f43f ae35 	beq.w	8001740 <StarLPTask+0x188>
				printf("semaphore 1c release failed\n");
 8001ad6:	4856      	ldr	r0, [pc, #344]	; (8001c30 <StarLPTask+0x678>)
 8001ad8:	f01e fffe 	bl	8020ad8 <puts>
 8001adc:	e630      	b.n	8001740 <StarLPTask+0x188>
				if (n == 0) {		// no triggers in last 100mS
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f47f af74 	bne.w	80019cc <StarLPTask+0x414>
					if (trigthresh > MINTRIGTHRES)	// dont permit trigthresh < minimum
 8001ae4:	4939      	ldr	r1, [pc, #228]	; (8001bcc <StarLPTask+0x614>)
 8001ae6:	880b      	ldrh	r3, [r1, #0]
 8001ae8:	2b03      	cmp	r3, #3
 8001aea:	f67f af6f 	bls.w	80019cc <StarLPTask+0x414>
						trigthresh--;
 8001aee:	3b01      	subs	r3, #1
 8001af0:	800b      	strh	r3, [r1, #0]
 8001af2:	e76b      	b.n	80019cc <StarLPTask+0x414>
				printf("GPS serial comms problem?\n");
 8001af4:	484f      	ldr	r0, [pc, #316]	; (8001c34 <StarLPTask+0x67c>)
 8001af6:	f01e ffef 	bl	8020ad8 <puts>
 8001afa:	e6fe      	b.n	80018fa <StarLPTask+0x342>
				strcpy(gpsstr, "\"<font color=red>**Lost GPS**<\/font>\"");
 8001afc:	4e4e      	ldr	r6, [pc, #312]	; (8001c38 <StarLPTask+0x680>)
 8001afe:	4f49      	ldr	r7, [pc, #292]	; (8001c24 <StarLPTask+0x66c>)
 8001b00:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001b02:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8001b04:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001b06:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8001b08:	e896 0003 	ldmia.w	r6, {r0, r1}
 8001b0c:	6038      	str	r0, [r7, #0]
 8001b0e:	80b9      	strh	r1, [r7, #4]
 8001b10:	e7be      	b.n	8001a90 <StarLPTask+0x4d8>
					gainchanged = bumppga(-1);
 8001b12:	f04f 30ff 	mov.w	r0, #4294967295
 8001b16:	f001 fc37 	bl	8003388 <bumppga>
 8001b1a:	b203      	sxth	r3, r0
 8001b1c:	9307      	str	r3, [sp, #28]
				prevtrigs = trigs;
 8001b1e:	4b28      	ldr	r3, [pc, #160]	; (8001bc0 <StarLPTask+0x608>)
 8001b20:	4a46      	ldr	r2, [pc, #280]	; (8001c3c <StarLPTask+0x684>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6013      	str	r3, [r2, #0]
				if (gainchanged > 0) {	// increased gain
 8001b26:	9b07      	ldr	r3, [sp, #28]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f77f ae2e 	ble.w	800178a <StarLPTask+0x1d2>
					if (trigthresh < (4095 - 10))
 8001b2e:	4927      	ldr	r1, [pc, #156]	; (8001bcc <StarLPTask+0x614>)
 8001b30:	f640 72f4 	movw	r2, #4084	; 0xff4
 8001b34:	880b      	ldrh	r3, [r1, #0]
 8001b36:	4293      	cmp	r3, r2
 8001b38:	f63f ae27 	bhi.w	800178a <StarLPTask+0x1d2>
						trigthresh += 5;
 8001b3c:	3305      	adds	r3, #5
 8001b3e:	800b      	strh	r3, [r1, #0]
 8001b40:	e623      	b.n	800178a <StarLPTask+0x1d2>
				if (getpressure115() != HAL_OK) {
 8001b42:	f001 fc65 	bl	8003410 <getpressure115>
 8001b46:	2800      	cmp	r0, #0
 8001b48:	f43f aee2 	beq.w	8001910 <StarLPTask+0x358>
					printf("MPL115A2 error\n\r");
 8001b4c:	483c      	ldr	r0, [pc, #240]	; (8001c40 <StarLPTask+0x688>)
 8001b4e:	f01e ff3b 	bl	80209c8 <iprintf>
 8001b52:	e6dd      	b.n	8001910 <StarLPTask+0x358>
					gainchanged = bumppga(-1);	// decrease gain
 8001b54:	f04f 30ff 	mov.w	r0, #4294967295
 8001b58:	f001 fc16 	bl	8003388 <bumppga>
				jabtrigcnt = statuspkt.trigcount;
 8001b5c:	f8d8 307c 	ldr.w	r3, [r8, #124]	; 0x7c
					gainchanged = bumppga(-1);	// decrease gain
 8001b60:	b202      	sxth	r2, r0
 8001b62:	9207      	str	r2, [sp, #28]
				jabtrigcnt = statuspkt.trigcount;
 8001b64:	4a1e      	ldr	r2, [pc, #120]	; (8001be0 <StarLPTask+0x628>)
 8001b66:	6013      	str	r3, [r2, #0]
 8001b68:	e5b9      	b.n	80016de <StarLPTask+0x126>
				if (getpressure3115() != HAL_OK) {
 8001b6a:	f001 fde3 	bl	8003734 <getpressure3115>
 8001b6e:	2800      	cmp	r0, #0
 8001b70:	f43f aece 	beq.w	8001910 <StarLPTask+0x358>
					printf("MPL3115A2 error\n\r");
 8001b74:	4833      	ldr	r0, [pc, #204]	; (8001c44 <StarLPTask+0x68c>)
 8001b76:	f01e ff27 	bl	80209c8 <iprintf>
 8001b7a:	e6c9      	b.n	8001910 <StarLPTask+0x358>
						gainchanged = bumppga(1);
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	f001 fc03 	bl	8003388 <bumppga>
				if (trigsin10sec > MAXTRIGS10S)
 8001b82:	4b31      	ldr	r3, [pc, #196]	; (8001c48 <StarLPTask+0x690>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2b0a      	cmp	r3, #10
 8001b88:	d8c3      	bhi.n	8001b12 <StarLPTask+0x55a>
						gainchanged = bumppga(1);
 8001b8a:	b203      	sxth	r3, r0
 8001b8c:	9307      	str	r3, [sp, #28]
 8001b8e:	e7c6      	b.n	8001b1e <StarLPTask+0x566>
 8001b90:	0802506c 	.word	0x0802506c
 8001b94:	0802507c 	.word	0x0802507c
 8001b98:	20001648 	.word	0x20001648
 8001b9c:	2000167c 	.word	0x2000167c
 8001ba0:	20022ba4 	.word	0x20022ba4
 8001ba4:	2000004c 	.word	0x2000004c
 8001ba8:	080250c8 	.word	0x080250c8
 8001bac:	200233d0 	.word	0x200233d0
 8001bb0:	10624dd3 	.word	0x10624dd3
 8001bb4:	200233d4 	.word	0x200233d4
 8001bb8:	200006b0 	.word	0x200006b0
 8001bbc:	2000023e 	.word	0x2000023e
 8001bc0:	2000163c 	.word	0x2000163c
 8001bc4:	200233dc 	.word	0x200233dc
 8001bc8:	200233d8 	.word	0x200233d8
 8001bcc:	20000002 	.word	0x20000002
 8001bd0:	080250e4 	.word	0x080250e4
 8001bd4:	200006b4 	.word	0x200006b4
 8001bd8:	08024ef0 	.word	0x08024ef0
 8001bdc:	20000008 	.word	0x20000008
 8001be0:	2000161c 	.word	0x2000161c
 8001be4:	20000704 	.word	0x20000704
 8001be8:	20001624 	.word	0x20001624
 8001bec:	40020c00 	.word	0x40020c00
 8001bf0:	08024f14 	.word	0x08024f14
 8001bf4:	20023368 	.word	0x20023368
 8001bf8:	08024f20 	.word	0x08024f20
 8001bfc:	08024f28 	.word	0x08024f28
 8001c00:	20000204 	.word	0x20000204
 8001c04:	2000006c 	.word	0x2000006c
 8001c08:	20000700 	.word	0x20000700
 8001c0c:	200006ac 	.word	0x200006ac
 8001c10:	200000fc 	.word	0x200000fc
 8001c14:	20000210 	.word	0x20000210
 8001c18:	08024f30 	.word	0x08024f30
 8001c1c:	2000168d 	.word	0x2000168d
 8001c20:	08024fd8 	.word	0x08024fd8
 8001c24:	2000000c 	.word	0x2000000c
 8001c28:	08025028 	.word	0x08025028
 8001c2c:	08025044 	.word	0x08025044
 8001c30:	08025050 	.word	0x08025050
 8001c34:	08025084 	.word	0x08025084
 8001c38:	08025000 	.word	0x08025000
 8001c3c:	20001630 	.word	0x20001630
 8001c40:	080250a0 	.word	0x080250a0
 8001c44:	080250b4 	.word	0x080250b4
 8001c48:	20001640 	.word	0x20001640

08001c4c <_write>:
	if (file == 1) {
 8001c4c:	2801      	cmp	r0, #1
int _write(int file, char *ptr, int len) {
 8001c4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c50:	460c      	mov	r4, r1
 8001c52:	4617      	mov	r7, r2
	if (file == 1) {
 8001c54:	d00e      	beq.n	8001c74 <_write+0x28>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001c56:	2a00      	cmp	r2, #0
 8001c58:	dd0a      	ble.n	8001c70 <_write+0x24>
 8001c5a:	188e      	adds	r6, r1, r2
			HAL_UART_Transmit(&huart5, (uint8_t*) *ptr++, 1, 10);
 8001c5c:	4d0b      	ldr	r5, [pc, #44]	; (8001c8c <_write+0x40>)
 8001c5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c62:	230a      	movs	r3, #10
 8001c64:	2201      	movs	r2, #1
 8001c66:	4628      	mov	r0, r5
 8001c68:	f00c fff2 	bl	800ec50 <HAL_UART_Transmit>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001c6c:	42b4      	cmp	r4, r6
 8001c6e:	d1f6      	bne.n	8001c5e <_write+0x12>
}
 8001c70:	4638      	mov	r0, r7
 8001c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001c74:	2a00      	cmp	r2, #0
 8001c76:	ddfb      	ble.n	8001c70 <_write+0x24>
 8001c78:	188d      	adds	r5, r1, r2
			__io_putchar(*ptr++);
 8001c7a:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001c7e:	f001 f8d3 	bl	8002e28 <__io_putchar>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001c82:	42ac      	cmp	r4, r5
 8001c84:	d1f9      	bne.n	8001c7a <_write+0x2e>
}
 8001c86:	4638      	mov	r0, r7
 8001c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20022d4c 	.word	0x20022d4c

08001c90 <rebootme>:
void rebootme() {
 8001c90:	b508      	push	{r3, lr}
		osDelay(2000);
 8001c92:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c96:	f00f f927 	bl	8010ee8 <osDelay>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001c9a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001c9e:	4905      	ldr	r1, [pc, #20]	; (8001cb4 <rebootme+0x24>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001ca0:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <rebootme+0x28>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001ca2:	68ca      	ldr	r2, [r1, #12]
 8001ca4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	60cb      	str	r3, [r1, #12]
 8001cac:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001cb0:	bf00      	nop
 8001cb2:	e7fd      	b.n	8001cb0 <rebootme+0x20>
 8001cb4:	e000ed00 	.word	0xe000ed00
 8001cb8:	05fa0004 	.word	0x05fa0004

08001cbc <netif_link_callbk_fn>:
	if (netif->flags & NETIF_FLAG_LINK_UP) {
 8001cbc:	f890 1035 	ldrb.w	r1, [r0, #53]	; 0x35
 8001cc0:	074a      	lsls	r2, r1, #29
 8001cc2:	d409      	bmi.n	8001cd8 <netif_link_callbk_fn+0x1c>
void netif_link_callbk_fn(struct netif *netif) {
 8001cc4:	b510      	push	{r4, lr}
 8001cc6:	4604      	mov	r4, r0
		printf("netif_link DOWN, flags=0x%02x\n", netif->flags);
 8001cc8:	4807      	ldr	r0, [pc, #28]	; (8001ce8 <netif_link_callbk_fn+0x2c>)
 8001cca:	f01e fe7d 	bl	80209c8 <iprintf>
		if (!(netif_is_link_up(netif))) {
 8001cce:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001cd2:	075b      	lsls	r3, r3, #29
 8001cd4:	d503      	bpl.n	8001cde <netif_link_callbk_fn+0x22>
}
 8001cd6:	bd10      	pop	{r4, pc}
		printf("netif_link UP, flags=0x%02x\n", netif->flags);
 8001cd8:	4804      	ldr	r0, [pc, #16]	; (8001cec <netif_link_callbk_fn+0x30>)
 8001cda:	f01e be75 	b.w	80209c8 <iprintf>
			printf("LAN interface appears disconnected, rebooting...\n");
 8001cde:	4804      	ldr	r0, [pc, #16]	; (8001cf0 <netif_link_callbk_fn+0x34>)
 8001ce0:	f01e fefa 	bl	8020ad8 <puts>
			rebootme();
 8001ce4:	f7ff ffd4 	bl	8001c90 <rebootme>
 8001ce8:	08025340 	.word	0x08025340
 8001cec:	08025320 	.word	0x08025320
 8001cf0:	08025360 	.word	0x08025360

08001cf4 <HAL_DAC_ConvCpltCallbackCh1>:
	HAL_DAC_Stop_DMA(hdac, DAC_CHANNEL_1);
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	f004 ba7d 	b.w	80061f4 <HAL_DAC_Stop_DMA>
 8001cfa:	bf00      	nop

08001cfc <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) { // every second 1 pps (on external signal)
 8001cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (htim->Instance == TIM2) {
 8001cfe:	6803      	ldr	r3, [r0, #0]
 8001d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d04:	d008      	beq.n	8001d18 <HAL_TIM_IC_CaptureCallback+0x1c>
	} else if (htim->Instance == TIM4) {
 8001d06:	4a18      	ldr	r2, [pc, #96]	; (8001d68 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d000      	beq.n	8001d0e <HAL_TIM_IC_CaptureCallback+0x12>
}
 8001d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("Timer4 callback\n");
 8001d0e:	4817      	ldr	r0, [pc, #92]	; (8001d6c <HAL_TIM_IC_CaptureCallback+0x70>)
}
 8001d10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		printf("Timer4 callback\n");
 8001d14:	f01e bee0 	b.w	8020ad8 <puts>
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8001d18:	4c15      	ldr	r4, [pc, #84]	; (8001d70 <HAL_TIM_IC_CaptureCallback+0x74>)
		HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 8001d1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8001d1e:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <HAL_TIM_IC_CaptureCallback+0x78>)
 8001d20:	7ba2      	ldrb	r2, [r4, #14]
 8001d22:	4d15      	ldr	r5, [pc, #84]	; (8001d78 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8001d24:	3201      	adds	r2, #1
		HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 8001d26:	4815      	ldr	r0, [pc, #84]	; (8001d7c <HAL_TIM_IC_CaptureCallback+0x80>)
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8001d28:	fba3 6302 	umull	r6, r3, r3, r2
		diff = lastcap;
 8001d2c:	4e14      	ldr	r6, [pc, #80]	; (8001d80 <HAL_TIM_IC_CaptureCallback+0x84>)
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8001d2e:	095b      	lsrs	r3, r3, #5
 8001d30:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8001d34:	eba2 0383 	sub.w	r3, r2, r3, lsl #2
 8001d38:	702b      	strb	r3, [r5, #0]
		HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 8001d3a:	f006 fda7 	bl	800888c <HAL_GPIO_TogglePin>
 8001d3e:	4d11      	ldr	r5, [pc, #68]	; (8001d84 <HAL_TIM_IC_CaptureCallback+0x88>)
	uint32_t sum = 0;
 8001d40:	2100      	movs	r1, #0
		diff = lastcap;
 8001d42:	6837      	ldr	r7, [r6, #0]
 8001d44:	462b      	mov	r3, r5
 8001d46:	f105 003c 	add.w	r0, r5, #60	; 0x3c
		data[i] = data[i + 1];		// old data is low index
 8001d4a:	685a      	ldr	r2, [r3, #4]
 8001d4c:	f843 2b04 	str.w	r2, [r3], #4
	for (i = 0; i < 15; i++) {
 8001d50:	4283      	cmp	r3, r0
		sum += data[i];
 8001d52:	4411      	add	r1, r2
	for (i = 0; i < 15; i++) {
 8001d54:	d1f9      	bne.n	8001d4a <HAL_TIM_IC_CaptureCallback+0x4e>
	sum += new;
 8001d56:	4439      	add	r1, r7
		lastcap = t2cap[0];			// dma has populated t2cap from Channel 3 trigger on Timer 2
 8001d58:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <HAL_TIM_IC_CaptureCallback+0x8c>)
	data[15] = new;		// new data at the end
 8001d5a:	63ef      	str	r7, [r5, #60]	; 0x3c
	return (sum >> 4);
 8001d5c:	0909      	lsrs	r1, r1, #4
		lastcap = t2cap[0];			// dma has populated t2cap from Channel 3 trigger on Timer 2
 8001d5e:	681b      	ldr	r3, [r3, #0]
		statuspkt.clktrim = movavg(diff);
 8001d60:	65a1      	str	r1, [r4, #88]	; 0x58
		lastcap = t2cap[0];			// dma has populated t2cap from Channel 3 trigger on Timer 2
 8001d62:	6033      	str	r3, [r6, #0]
}
 8001d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40000800 	.word	0x40000800
 8001d6c:	08024e08 	.word	0x08024e08
 8001d70:	20022774 	.word	0x20022774
 8001d74:	88888889 	.word	0x88888889
 8001d78:	20000708 	.word	0x20000708
 8001d7c:	40020c00 	.word	0x40020c00
 8001d80:	20001620 	.word	0x20001620
 8001d84:	200015dc 	.word	0x200015dc
 8001d88:	20022820 	.word	0x20022820

08001d8c <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE BEGIN Callback 0 */
	static int counter = 0;

#ifdef configGENERATE_RUN_TIME_STATS

	if (htim->Instance == TIM14) {				// TIM14 used for RTOS profiling
 8001d8c:	6803      	ldr	r3, [r0, #0]
 8001d8e:	4a25      	ldr	r2, [pc, #148]	; (8001e24 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d011      	beq.n	8001db8 <HAL_TIM_PeriodElapsedCallback+0x2c>
		rtos_debug_timer++;
		return;
	}
#endif

	if (htim->Instance == TIM5) {// TIM5 interrupt is used as hook to run ADC_Conv_complete() at a lower IRQ  priority than dmacomplete
 8001d94:	4a24      	ldr	r2, [pc, #144]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d02e      	beq.n	8001df8 <HAL_TIM_PeriodElapsedCallback+0x6c>
//		printf("T5\n");
		ADC_Conv_complete();			// It is a one-shot
		return;
	}

	if (htim->Instance == TIM2) {
 8001d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d9e:	d02d      	beq.n	8001dfc <HAL_TIM_PeriodElapsedCallback+0x70>
		printf("T2P PeriodElapsedCallback %lu %lu\n", t2cap[0], statuspkt.clktrim);
		return;
	}
	if (htim->Instance == TIM3) {
 8001da0:	4a22      	ldr	r2, [pc, #136]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d00d      	beq.n	8001dc2 <HAL_TIM_PeriodElapsedCallback+0x36>
		printf("T3 PeriodElapsedCallback\n");
		return;
	}

	if (htim->Instance == TIM6) { // 1 second (internally timed, not compensated by GPS)
 8001da6:	4a22      	ldr	r2, [pc, #136]	; (8001e30 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d00d      	beq.n	8001dc8 <HAL_TIM_PeriodElapsedCallback+0x3c>
		}
		return;
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM12) {
 8001dac:	4a21      	ldr	r2, [pc, #132]	; (8001e34 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d02b      	beq.n	8001e0a <HAL_TIM_PeriodElapsedCallback+0x7e>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */
	else {
		printf("Unknown Timer Period Elapsed callback\n");
 8001db2:	4821      	ldr	r0, [pc, #132]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001db4:	f01e be90 	b.w	8020ad8 <puts>
		rtos_debug_timer++;
 8001db8:	4a20      	ldr	r2, [pc, #128]	; (8001e3c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001dba:	6813      	ldr	r3, [r2, #0]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	6013      	str	r3, [r2, #0]
 8001dc0:	4770      	bx	lr
		printf("T3 PeriodElapsedCallback\n");
 8001dc2:	481f      	ldr	r0, [pc, #124]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001dc4:	f01e be88 	b.w	8020ad8 <puts>
{
 8001dc8:	b510      	push	{r4, lr}
		t1sec++;
 8001dca:	491e      	ldr	r1, [pc, #120]	; (8001e44 <HAL_TIM_PeriodElapsedCallback+0xb8>)
		statuspkt.sysuptime++;
 8001dcc:	4c1e      	ldr	r4, [pc, #120]	; (8001e48 <HAL_TIM_PeriodElapsedCallback+0xbc>)
		t1sec++;
 8001dce:	680a      	ldr	r2, [r1, #0]
		statuspkt.sysuptime++;
 8001dd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
		if (netup)
 8001dd2:	481e      	ldr	r0, [pc, #120]	; (8001e4c <HAL_TIM_PeriodElapsedCallback+0xc0>)
		t1sec++;
 8001dd4:	3201      	adds	r2, #1
		statuspkt.sysuptime++;
 8001dd6:	3301      	adds	r3, #1
		if (netup)
 8001dd8:	7800      	ldrb	r0, [r0, #0]
		t1sec++;
 8001dda:	600a      	str	r2, [r1, #0]
		statuspkt.sysuptime++;
 8001ddc:	6663      	str	r3, [r4, #100]	; 0x64
		if (netup)
 8001dde:	b110      	cbz	r0, 8001de6 <HAL_TIM_PeriodElapsedCallback+0x5a>
			statuspkt.netuptime++;
 8001de0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8001de2:	3301      	adds	r3, #1
 8001de4:	66a3      	str	r3, [r4, #104]	; 0x68
		if (gpslocked) {
 8001de6:	4b1a      	ldr	r3, [pc, #104]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	b983      	cbnz	r3, 8001e0e <HAL_TIM_PeriodElapsedCallback+0x82>
			epochvalid = 0;
 8001dec:	4a19      	ldr	r2, [pc, #100]	; (8001e54 <HAL_TIM_PeriodElapsedCallback+0xc8>)
			statuspkt.gpsuptime = 0;	// gps uptime is zero
 8001dee:	66e3      	str	r3, [r4, #108]	; 0x6c
			epochvalid = 0;
 8001df0:	7013      	strb	r3, [r2, #0]
			statuspkt.epochsecs = 0;	// make epoch time obviously wrong
 8001df2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	}
  /* USER CODE END Callback 1 */
}
 8001df6:	bd10      	pop	{r4, pc}
		ADC_Conv_complete();			// It is a one-shot
 8001df8:	f7fe bd40 	b.w	800087c <ADC_Conv_complete>
		printf("T2P PeriodElapsedCallback %lu %lu\n", t2cap[0], statuspkt.clktrim);
 8001dfc:	4a12      	ldr	r2, [pc, #72]	; (8001e48 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001dfe:	4b16      	ldr	r3, [pc, #88]	; (8001e58 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001e00:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001e02:	6819      	ldr	r1, [r3, #0]
 8001e04:	4815      	ldr	r0, [pc, #84]	; (8001e5c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001e06:	f01e bddf 	b.w	80209c8 <iprintf>
    HAL_IncTick();
 8001e0a:	f003 bba5 	b.w	8005558 <HAL_IncTick>
			statuspkt.gpsuptime++;
 8001e0e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001e10:	3301      	adds	r3, #1
 8001e12:	66e3      	str	r3, [r4, #108]	; 0x6c
				statuspkt.epochsecs = calcepoch32();
 8001e14:	f001 f826 	bl	8002e64 <calcepoch32>
				epochvalid = 1;
 8001e18:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001e1a:	2201      	movs	r2, #1
				statuspkt.epochsecs = calcepoch32();
 8001e1c:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
				epochvalid = 1;
 8001e20:	701a      	strb	r2, [r3, #0]
}
 8001e22:	bd10      	pop	{r4, pc}
 8001e24:	40002000 	.word	0x40002000
 8001e28:	40000c00 	.word	0x40000c00
 8001e2c:	40000400 	.word	0x40000400
 8001e30:	40001000 	.word	0x40001000
 8001e34:	40001800 	.word	0x40001800
 8001e38:	08024e58 	.word	0x08024e58
 8001e3c:	20001634 	.word	0x20001634
 8001e40:	08024e3c 	.word	0x08024e3c
 8001e44:	20001638 	.word	0x20001638
 8001e48:	20022774 	.word	0x20022774
 8001e4c:	20000702 	.word	0x20000702
 8001e50:	2000168d 	.word	0x2000168d
 8001e54:	2000168c 	.word	0x2000168c
 8001e58:	20022820 	.word	0x20022820
 8001e5c:	08024e18 	.word	0x08024e18

08001e60 <Error_Handler>:
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
		printf("HAL error (main.c 2343)\n");
 8001e60:	4c02      	ldr	r4, [pc, #8]	; (8001e6c <Error_Handler+0xc>)
{
 8001e62:	b508      	push	{r3, lr}
		printf("HAL error (main.c 2343)\n");
 8001e64:	4620      	mov	r0, r4
 8001e66:	f01e fe37 	bl	8020ad8 <puts>
 8001e6a:	e7fb      	b.n	8001e64 <Error_Handler+0x4>
 8001e6c:	08024df0 	.word	0x08024df0

08001e70 <SystemClock_Config>:
{
 8001e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e72:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e74:	2234      	movs	r2, #52	; 0x34
 8001e76:	2100      	movs	r1, #0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e78:	f44f 3680 	mov.w	r6, #65536	; 0x10000
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e7c:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e7e:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e80:	f01d fe21 	bl	801fac6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e84:	2300      	movs	r3, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e86:	2290      	movs	r2, #144	; 0x90
 8001e88:	a814      	add	r0, sp, #80	; 0x50
 8001e8a:	4619      	mov	r1, r3
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e8c:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001e8e:	2709      	movs	r7, #9
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001e90:	2501      	movs	r5, #1
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e92:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001e96:	e9cd 3304 	strd	r3, r3, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e9a:	f01d fe14 	bl	801fac6 <memset>
  HAL_PWR_EnableBkUpAccess();
 8001e9e:	f007 ffb7 	bl	8009e10 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ea2:	4a2c      	ldr	r2, [pc, #176]	; (8001f54 <SystemClock_Config+0xe4>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ea4:	4b2c      	ldr	r3, [pc, #176]	; (8001f58 <SystemClock_Config+0xe8>)
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ea6:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ea8:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001eaa:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001eae:	6411      	str	r1, [r2, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001eb0:	2104      	movs	r1, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eb2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001eb4:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001eb8:	9200      	str	r2, [sp, #0]
 8001eba:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001ec2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001ec4:	22d8      	movs	r2, #216	; 0xd8
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ec6:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ec8:	9608      	str	r6, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001eca:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ece:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001ed2:	9707      	str	r7, [sp, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001ed4:	950c      	str	r5, [sp, #48]	; 0x30
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ed6:	9301      	str	r3, [sp, #4]
 8001ed8:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8001eda:	2306      	movs	r3, #6
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001edc:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ede:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001ee0:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8001ee2:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ee4:	e9cd 610e 	strd	r6, r1, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ee8:	f007 ffd6 	bl	8009e98 <HAL_RCC_OscConfig>
 8001eec:	bb78      	cbnz	r0, 8001f4e <SystemClock_Config+0xde>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001eee:	f007 ff97 	bl	8009e20 <HAL_PWREx_EnableOverDrive>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	bb58      	cbnz	r0, 8001f4e <SystemClock_Config+0xde>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ef6:	210f      	movs	r1, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ef8:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001efc:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001efe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f02:	9102      	str	r1, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001f04:	a802      	add	r0, sp, #8
 8001f06:	2107      	movs	r1, #7
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f08:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001f0e:	f008 fa9b 	bl	800a448 <HAL_RCC_ClockConfig>
 8001f12:	4603      	mov	r3, r0
 8001f14:	b9d8      	cbnz	r0, 8001f4e <SystemClock_Config+0xde>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 8001f16:	4f11      	ldr	r7, [pc, #68]	; (8001f5c <SystemClock_Config+0xec>)
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001f18:	26c0      	movs	r6, #192	; 0xc0
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001f1a:	2103      	movs	r1, #3
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001f1c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f20:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001f22:	951e      	str	r5, [sp, #120]	; 0x78
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001f24:	931f      	str	r3, [sp, #124]	; 0x7c
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001f26:	9330      	str	r3, [sp, #192]	; 0xc0
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 8001f28:	9714      	str	r7, [sp, #80]	; 0x50
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001f2a:	9619      	str	r6, [sp, #100]	; 0x64
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001f2c:	911c      	str	r1, [sp, #112]	; 0x70
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001f2e:	9233      	str	r2, [sp, #204]	; 0xcc
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001f30:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001f34:	e9cd 3326 	strd	r3, r3, [sp, #152]	; 0x98
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001f38:	e9cd 3328 	strd	r3, r3, [sp, #160]	; 0xa0
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8001f3c:	e9cd 332a 	strd	r3, r3, [sp, #168]	; 0xa8
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001f40:	e9cd 332d 	strd	r3, r3, [sp, #180]	; 0xb4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f44:	f008 fbe8 	bl	800a718 <HAL_RCCEx_PeriphCLKConfig>
 8001f48:	b908      	cbnz	r0, 8001f4e <SystemClock_Config+0xde>
}
 8001f4a:	b039      	add	sp, #228	; 0xe4
 8001f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 8001f4e:	f7ff ff87 	bl	8001e60 <Error_Handler>
 8001f52:	bf00      	nop
 8001f54:	40023800 	.word	0x40023800
 8001f58:	40007000 	.word	0x40007000
 8001f5c:	0022df80 	.word	0x0022df80

08001f60 <main>:
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b0dc      	sub	sp, #368	; 0x170
 8001f64:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f68:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001f6c:	4bb5      	ldr	r3, [pc, #724]	; (8002244 <main+0x2e4>)
 8001f6e:	2400      	movs	r4, #0
 8001f70:	f8c3 4250 	str.w	r4, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001f74:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f78:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001f7c:	695a      	ldr	r2, [r3, #20]
 8001f7e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001f82:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f84:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f88:	f3bf 8f6f 	isb	sy
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f8c:	4dae      	ldr	r5, [pc, #696]	; (8002248 <main+0x2e8>)
  HAL_Init();
 8001f8e:	f003 fad1 	bl	8005534 <HAL_Init>
  SystemClock_Config();
 8001f92:	f7ff ff6d 	bl	8001e70 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f96:	9455      	str	r4, [sp, #340]	; 0x154
 8001f98:	9456      	str	r4, [sp, #344]	; 0x158
  HAL_GPIO_WritePin(probe1_GPIO_Port, probe1_Pin, GPIO_PIN_RESET);
 8001f9a:	f44f 7100 	mov.w	r1, #512	; 0x200
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9e:	9457      	str	r4, [sp, #348]	; 0x15c
  HAL_GPIO_WritePin(probe1_GPIO_Port, probe1_Pin, GPIO_PIN_RESET);
 8001fa0:	4622      	mov	r2, r4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa2:	9458      	str	r4, [sp, #352]	; 0x160
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fa4:	2601      	movs	r6, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa6:	9459      	str	r4, [sp, #356]	; 0x164
  GPIO_InitStruct.Pin = probe1_Pin;
 8001fa8:	4689      	mov	r9, r1
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001faa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fac:	f04f 0802 	mov.w	r8, #2
  HAL_GPIO_WritePin(probe1_GPIO_Port, probe1_Pin, GPIO_PIN_RESET);
 8001fb0:	48a6      	ldr	r0, [pc, #664]	; (800224c <main+0x2ec>)
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fb2:	2703      	movs	r7, #3
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fb4:	f043 0310 	orr.w	r3, r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fb8:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 8002274 <main+0x314>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fbc:	632b      	str	r3, [r5, #48]	; 0x30
 8001fbe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001fc0:	f003 0310 	and.w	r3, r3, #16
 8001fc4:	9303      	str	r3, [sp, #12]
 8001fc6:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fc8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001fca:	f043 0304 	orr.w	r3, r3, #4
 8001fce:	632b      	str	r3, [r5, #48]	; 0x30
 8001fd0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001fd2:	f003 0304 	and.w	r3, r3, #4
 8001fd6:	9304      	str	r3, [sp, #16]
 8001fd8:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fda:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001fdc:	f043 0320 	orr.w	r3, r3, #32
 8001fe0:	632b      	str	r3, [r5, #48]	; 0x30
 8001fe2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001fe4:	f003 0320 	and.w	r3, r3, #32
 8001fe8:	9305      	str	r3, [sp, #20]
 8001fea:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fec:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001fee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ff2:	632b      	str	r3, [r5, #48]	; 0x30
 8001ff4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ffa:	9306      	str	r3, [sp, #24]
 8001ffc:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	632b      	str	r3, [r5, #48]	; 0x30
 8002006:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	9307      	str	r3, [sp, #28]
 800200e:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002010:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002012:	f043 0302 	orr.w	r3, r3, #2
 8002016:	632b      	str	r3, [r5, #48]	; 0x30
 8002018:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	9308      	str	r3, [sp, #32]
 8002020:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002022:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002028:	632b      	str	r3, [r5, #48]	; 0x30
 800202a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800202c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002030:	9309      	str	r3, [sp, #36]	; 0x24
 8002032:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002034:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002036:	f043 0308 	orr.w	r3, r3, #8
 800203a:	632b      	str	r3, [r5, #48]	; 0x30
 800203c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800203e:	f003 0308 	and.w	r3, r3, #8
 8002042:	930a      	str	r3, [sp, #40]	; 0x28
 8002044:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(probe1_GPIO_Port, probe1_Pin, GPIO_PIN_RESET);
 8002046:	f006 fc07 	bl	8008858 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_11|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800204a:	4622      	mov	r2, r4
 800204c:	f644 0181 	movw	r1, #18561	; 0x4881
 8002050:	487f      	ldr	r0, [pc, #508]	; (8002250 <main+0x2f0>)
 8002052:	f006 fc01 	bl	8008858 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, XBEE_DTR_Pin|GPIO_PIN_12|LP_FILT_Pin|XBEE_RST_Pin
 8002056:	4622      	mov	r2, r4
 8002058:	f24d 4101 	movw	r1, #54273	; 0xd401
 800205c:	487d      	ldr	r0, [pc, #500]	; (8002254 <main+0x2f4>)
 800205e:	f006 fbfb 	bl	8008858 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LED_D1_Pin|LED_D2_Pin|LED_D3_Pin|LED_D4_Pin
 8002062:	4632      	mov	r2, r6
 8002064:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8002068:	487b      	ldr	r0, [pc, #492]	; (8002258 <main+0x2f8>)
 800206a:	f006 fbf5 	bl	8008858 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800206e:	4622      	mov	r2, r4
 8002070:	2144      	movs	r1, #68	; 0x44
 8002072:	487a      	ldr	r0, [pc, #488]	; (800225c <main+0x2fc>)
 8002074:	f006 fbf0 	bl	8008858 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(probe2_GPIO_Port, probe2_Pin, GPIO_PIN_RESET);
 8002078:	4622      	mov	r2, r4
 800207a:	4641      	mov	r1, r8
 800207c:	4876      	ldr	r0, [pc, #472]	; (8002258 <main+0x2f8>)
 800207e:	f006 fbeb 	bl	8008858 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11
 8002082:	f642 138a 	movw	r3, #10634	; 0x298a
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002086:	a955      	add	r1, sp, #340	; 0x154
 8002088:	4872      	ldr	r0, [pc, #456]	; (8002254 <main+0x2f4>)
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11
 800208a:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208c:	9457      	str	r4, [sp, #348]	; 0x15c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800208e:	9756      	str	r7, [sp, #344]	; 0x158
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002090:	f006 f932 	bl	80082f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002094:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002098:	a955      	add	r1, sp, #340	; 0x154
 800209a:	4871      	ldr	r0, [pc, #452]	; (8002260 <main+0x300>)
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800209c:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	9457      	str	r4, [sp, #348]	; 0x15c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020a0:	f8cd a158 	str.w	sl, [sp, #344]	; 0x158
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80020a4:	f006 f928 	bl	80082f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80020a8:	f643 433c 	movw	r3, #15420	; 0x3c3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020ac:	a955      	add	r1, sp, #340	; 0x154
 80020ae:	4867      	ldr	r0, [pc, #412]	; (800224c <main+0x2ec>)
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80020b0:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020b2:	9756      	str	r7, [sp, #344]	; 0x158
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	9457      	str	r4, [sp, #348]	; 0x15c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020b6:	f006 f91f 	bl	80082f8 <HAL_GPIO_Init>
  HAL_GPIO_Init(probe1_GPIO_Port, &GPIO_InitStruct);
 80020ba:	a955      	add	r1, sp, #340	; 0x154
 80020bc:	4863      	ldr	r0, [pc, #396]	; (800224c <main+0x2ec>)
  GPIO_InitStruct.Pin = probe1_Pin;
 80020be:	f8cd 9154 	str.w	r9, [sp, #340]	; 0x154
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020c2:	9656      	str	r6, [sp, #344]	; 0x158
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020c4:	9657      	str	r6, [sp, #348]	; 0x15c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020c6:	f8cd 8160 	str.w	r8, [sp, #352]	; 0x160
  HAL_GPIO_Init(probe1_GPIO_Port, &GPIO_InitStruct);
 80020ca:	f006 f915 	bl	80082f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9;
 80020ce:	f240 3301 	movw	r3, #769	; 0x301
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020d2:	a955      	add	r1, sp, #340	; 0x154
 80020d4:	4862      	ldr	r0, [pc, #392]	; (8002260 <main+0x300>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9;
 80020d6:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020d8:	9756      	str	r7, [sp, #344]	; 0x158
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	9457      	str	r4, [sp, #348]	; 0x15c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020dc:	f006 f90c 	bl	80082f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_11|LD3_Pin|LD2_Pin;
 80020e0:	f644 0381 	movw	r3, #18561	; 0x4881
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e4:	a955      	add	r1, sp, #340	; 0x154
 80020e6:	485a      	ldr	r0, [pc, #360]	; (8002250 <main+0x2f0>)
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_11|LD3_Pin|LD2_Pin;
 80020e8:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ea:	9656      	str	r6, [sp, #344]	; 0x158
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	9457      	str	r4, [sp, #348]	; 0x15c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ee:	9458      	str	r4, [sp, #352]	; 0x160
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f0:	f006 f902 	bl	80082f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 80020f4:	2322      	movs	r3, #34	; 0x22
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f6:	a955      	add	r1, sp, #340	; 0x154
 80020f8:	4855      	ldr	r0, [pc, #340]	; (8002250 <main+0x2f0>)
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 80020fa:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020fc:	9756      	str	r7, [sp, #344]	; 0x158
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	9457      	str	r4, [sp, #348]	; 0x15c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002100:	f006 f8fa 	bl	80082f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8002104:	f24d 433b 	movw	r3, #54331	; 0xd43b
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002108:	a955      	add	r1, sp, #340	; 0x154
 800210a:	4854      	ldr	r0, [pc, #336]	; (800225c <main+0x2fc>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 800210c:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800210e:	9756      	str	r7, [sp, #344]	; 0x158
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002110:	9457      	str	r4, [sp, #348]	; 0x15c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002112:	f006 f8f1 	bl	80082f8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002116:	a955      	add	r1, sp, #340	; 0x154
 8002118:	484e      	ldr	r0, [pc, #312]	; (8002254 <main+0x2f4>)
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800211a:	f8cd 9154 	str.w	r9, [sp, #340]	; 0x154
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800211e:	f8cd a158 	str.w	sl, [sp, #344]	; 0x158
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002122:	9457      	str	r4, [sp, #348]	; 0x15c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002124:	f006 f8e8 	bl	80082f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = XBEE_DTR_Pin|GPIO_PIN_12|LP_FILT_Pin|XBEE_RST_Pin
 8002128:	f24d 4301 	movw	r3, #54273	; 0xd401
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800212c:	a955      	add	r1, sp, #340	; 0x154
 800212e:	4849      	ldr	r0, [pc, #292]	; (8002254 <main+0x2f4>)
  GPIO_InitStruct.Pin = XBEE_DTR_Pin|GPIO_PIN_12|LP_FILT_Pin|XBEE_RST_Pin
 8002130:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002132:	9656      	str	r6, [sp, #344]	; 0x158
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	9457      	str	r4, [sp, #348]	; 0x15c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002136:	9458      	str	r4, [sp, #352]	; 0x160
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002138:	f006 f8de 	bl	80082f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_7;
 800213c:	f240 4385 	movw	r3, #1157	; 0x485
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002140:	a955      	add	r1, sp, #340	; 0x154
 8002142:	4845      	ldr	r0, [pc, #276]	; (8002258 <main+0x2f8>)
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_7;
 8002144:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002146:	9756      	str	r7, [sp, #344]	; 0x158
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002148:	9457      	str	r4, [sp, #348]	; 0x15c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800214a:	f006 f8d5 	bl	80082f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_D1_Pin|LED_D2_Pin|LED_D3_Pin|LED_D4_Pin
 800214e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002152:	a955      	add	r1, sp, #340	; 0x154
 8002154:	4840      	ldr	r0, [pc, #256]	; (8002258 <main+0x2f8>)
  GPIO_InitStruct.Pin = LED_D1_Pin|LED_D2_Pin|LED_D3_Pin|LED_D4_Pin
 8002156:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002158:	9656      	str	r6, [sp, #344]	; 0x158
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215a:	9457      	str	r4, [sp, #348]	; 0x15c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215c:	9458      	str	r4, [sp, #352]	; 0x160
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800215e:	f006 f8cb 	bl	80082f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CS_PGA_Pin|USB_PowerSwitchOn_Pin;
 8002162:	2344      	movs	r3, #68	; 0x44
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002164:	a955      	add	r1, sp, #340	; 0x154
 8002166:	483d      	ldr	r0, [pc, #244]	; (800225c <main+0x2fc>)
  GPIO_InitStruct.Pin = CS_PGA_Pin|USB_PowerSwitchOn_Pin;
 8002168:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800216a:	9656      	str	r6, [sp, #344]	; 0x158
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	9457      	str	r4, [sp, #348]	; 0x15c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216e:	9458      	str	r4, [sp, #352]	; 0x160
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002170:	f006 f8c2 	bl	80082f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002174:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002176:	a955      	add	r1, sp, #340	; 0x154
 8002178:	4838      	ldr	r0, [pc, #224]	; (800225c <main+0x2fc>)
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800217a:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800217c:	9456      	str	r4, [sp, #344]	; 0x158
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217e:	9457      	str	r4, [sp, #348]	; 0x15c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002180:	f006 f8ba 	bl	80082f8 <HAL_GPIO_Init>
  HAL_GPIO_Init(probe2_GPIO_Port, &GPIO_InitStruct);
 8002184:	a955      	add	r1, sp, #340	; 0x154
 8002186:	4834      	ldr	r0, [pc, #208]	; (8002258 <main+0x2f8>)
  GPIO_InitStruct.Pin = probe2_Pin;
 8002188:	f8cd 8154 	str.w	r8, [sp, #340]	; 0x154
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800218c:	9656      	str	r6, [sp, #344]	; 0x158
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800218e:	9657      	str	r6, [sp, #348]	; 0x15c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002190:	f8cd 8160 	str.w	r8, [sp, #352]	; 0x160
  HAL_GPIO_Init(probe2_GPIO_Port, &GPIO_InitStruct);
 8002194:	f006 f8b0 	bl	80082f8 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002198:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800219a:	4622      	mov	r2, r4
 800219c:	4621      	mov	r1, r4
 800219e:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021a4:	632b      	str	r3, [r5, #48]	; 0x30
 80021a6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80021a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021ac:	9301      	str	r3, [sp, #4]
 80021ae:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80021b0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80021b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021b6:	632b      	str	r3, [r5, #48]	; 0x30
 80021b8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80021ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021be:	9302      	str	r3, [sp, #8]
 80021c0:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80021c2:	f003 fe35 	bl	8005e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80021c6:	200b      	movs	r0, #11
 80021c8:	f003 fe78 	bl	8005ebc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 6, 0);
 80021cc:	4622      	mov	r2, r4
 80021ce:	2106      	movs	r1, #6
 80021d0:	200c      	movs	r0, #12
 80021d2:	f003 fe2d 	bl	8005e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80021d6:	200c      	movs	r0, #12
 80021d8:	f003 fe70 	bl	8005ebc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 6, 0);
 80021dc:	4622      	mov	r2, r4
 80021de:	2106      	movs	r1, #6
 80021e0:	2010      	movs	r0, #16
 80021e2:	f003 fe25 	bl	8005e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80021e6:	2010      	movs	r0, #16
 80021e8:	f003 fe68 	bl	8005ebc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80021ec:	4622      	mov	r2, r4
 80021ee:	4621      	mov	r1, r4
 80021f0:	202f      	movs	r0, #47	; 0x2f
 80021f2:	f003 fe1d 	bl	8005e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80021f6:	202f      	movs	r0, #47	; 0x2f
 80021f8:	f003 fe60 	bl	8005ebc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 6, 0);
 80021fc:	4622      	mov	r2, r4
 80021fe:	2106      	movs	r1, #6
 8002200:	2039      	movs	r0, #57	; 0x39
 8002202:	f003 fe15 	bl	8005e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002206:	2039      	movs	r0, #57	; 0x39
 8002208:	f003 fe58 	bl	8005ebc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 2, 0);
 800220c:	4622      	mov	r2, r4
 800220e:	4641      	mov	r1, r8
 8002210:	203c      	movs	r0, #60	; 0x3c
 8002212:	f003 fe0d 	bl	8005e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8002216:	203c      	movs	r0, #60	; 0x3c
 8002218:	f003 fe50 	bl	8005ebc <HAL_NVIC_EnableIRQ>
  hmdios.Instance = MDIOS;
 800221c:	4b11      	ldr	r3, [pc, #68]	; (8002264 <main+0x304>)
 800221e:	4a12      	ldr	r2, [pc, #72]	; (8002268 <main+0x308>)
  if (HAL_MDIOS_Init(&hmdios) != HAL_OK)
 8002220:	4618      	mov	r0, r3
  hmdios.Instance = MDIOS;
 8002222:	601a      	str	r2, [r3, #0]
  hmdios.Init.PreambleCheck = MDIOS_PREAMBLE_CHECK_ENABLE;
 8002224:	e9c3 4401 	strd	r4, r4, [r3, #4]
  if (HAL_MDIOS_Init(&hmdios) != HAL_OK)
 8002228:	f006 ffba 	bl	80091a0 <HAL_MDIOS_Init>
 800222c:	2800      	cmp	r0, #0
 800222e:	f040 8490 	bne.w	8002b52 <main+0xbf2>
 8002232:	4603      	mov	r3, r0
  huart2.Instance = USART2;
 8002234:	4c0d      	ldr	r4, [pc, #52]	; (800226c <main+0x30c>)
  huart2.Init.BaudRate = 115200;
 8002236:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart2.Instance = USART2;
 800223a:	490d      	ldr	r1, [pc, #52]	; (8002270 <main+0x310>)
  huart2.Init.Mode = UART_MODE_TX_RX;
 800223c:	250c      	movs	r5, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800223e:	60a0      	str	r0, [r4, #8]
 8002240:	e01a      	b.n	8002278 <main+0x318>
 8002242:	bf00      	nop
 8002244:	e000ed00 	.word	0xe000ed00
 8002248:	40023800 	.word	0x40023800
 800224c:	40021400 	.word	0x40021400
 8002250:	40020400 	.word	0x40020400
 8002254:	40021000 	.word	0x40021000
 8002258:	40020c00 	.word	0x40020c00
 800225c:	40021800 	.word	0x40021800
 8002260:	40020800 	.word	0x40020800
 8002264:	20022e5c 	.word	0x20022e5c
 8002268:	40017800 	.word	0x40017800
 800226c:	20023124 	.word	0x20023124
 8002270:	40004400 	.word	0x40004400
 8002274:	10110000 	.word	0x10110000
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8002278:	4620      	mov	r0, r4
  huart2.Init.Mode = UART_MODE_TX_RX;
 800227a:	6165      	str	r5, [r4, #20]
  huart2.Init.BaudRate = 115200;
 800227c:	e9c4 1200 	strd	r1, r2, [r4]
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8002280:	461a      	mov	r2, r3
 8002282:	4619      	mov	r1, r3
  huart2.Init.Parity = UART_PARITY_NONE;
 8002284:	e9c4 3303 	strd	r3, r3, [r4, #12]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002288:	e9c4 3306 	strd	r3, r3, [r4, #24]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800228c:	e9c4 3308 	strd	r3, r3, [r4, #32]
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8002290:	f00c fe56 	bl	800ef40 <HAL_RS485Ex_Init>
 8002294:	4603      	mov	r3, r0
 8002296:	2800      	cmp	r0, #0
 8002298:	f040 845b 	bne.w	8002b52 <main+0xbf2>
  hadc1.Instance = ADC1;
 800229c:	4caf      	ldr	r4, [pc, #700]	; (800255c <main+0x5fc>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800229e:	f44f 3580 	mov.w	r5, #65536	; 0x10000
  hadc1.Instance = ADC1;
 80022a2:	49af      	ldr	r1, [pc, #700]	; (8002560 <main+0x600>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022a4:	4aaf      	ldr	r2, [pc, #700]	; (8002564 <main+0x604>)
  ADC_MultiModeTypeDef multimode = {0};
 80022a6:	9022      	str	r0, [sp, #136]	; 0x88
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80022a8:	4620      	mov	r0, r4
  ADC_ChannelConfTypeDef sConfig = {0};
 80022aa:	9345      	str	r3, [sp, #276]	; 0x114
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80022ac:	60a3      	str	r3, [r4, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80022ae:	6123      	str	r3, [r4, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80022b0:	61a6      	str	r6, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022b2:	f884 3020 	strb.w	r3, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022b6:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022b8:	60e3      	str	r3, [r4, #12]
  hadc1.Init.NbrOfConversion = 1;
 80022ba:	61e6      	str	r6, [r4, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80022bc:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80022c0:	6163      	str	r3, [r4, #20]
  hadc1.Instance = ADC1;
 80022c2:	6021      	str	r1, [r4, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022c4:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80022c6:	6065      	str	r5, [r4, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 80022c8:	9346      	str	r3, [sp, #280]	; 0x118
 80022ca:	9347      	str	r3, [sp, #284]	; 0x11c
 80022cc:	9348      	str	r3, [sp, #288]	; 0x120
  ADC_MultiModeTypeDef multimode = {0};
 80022ce:	e9cd 3323 	strd	r3, r3, [sp, #140]	; 0x8c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80022d2:	f003 f965 	bl	80055a0 <HAL_ADC_Init>
 80022d6:	2800      	cmp	r0, #0
 80022d8:	f040 843b 	bne.w	8002b52 <main+0xbf2>
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 80022dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  multimode.Mode = ADC_TRIPLEMODE_INTERL;
 80022e0:	2217      	movs	r2, #23
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 80022e2:	9024      	str	r0, [sp, #144]	; 0x90
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80022e4:	a922      	add	r1, sp, #136	; 0x88
 80022e6:	4620      	mov	r0, r4
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 80022e8:	9323      	str	r3, [sp, #140]	; 0x8c
  multimode.Mode = ADC_TRIPLEMODE_INTERL;
 80022ea:	9222      	str	r2, [sp, #136]	; 0x88
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80022ec:	f003 fd22 	bl	8005d34 <HAL_ADCEx_MultiModeConfigChannel>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2800      	cmp	r0, #0
 80022f4:	f040 842d 	bne.w	8002b52 <main+0xbf2>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022f8:	4620      	mov	r0, r4
 80022fa:	a945      	add	r1, sp, #276	; 0x114
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80022fc:	9347      	str	r3, [sp, #284]	; 0x11c
  sConfig.Channel = ADC_CHANNEL_3;
 80022fe:	9745      	str	r7, [sp, #276]	; 0x114
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002300:	9646      	str	r6, [sp, #280]	; 0x118
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002302:	f003 fc2b 	bl	8005b5c <HAL_ADC_ConfigChannel>
 8002306:	4603      	mov	r3, r0
 8002308:	2800      	cmp	r0, #0
 800230a:	f040 8422 	bne.w	8002b52 <main+0xbf2>
  hadc2.Instance = ADC2;
 800230e:	4c96      	ldr	r4, [pc, #600]	; (8002568 <main+0x608>)
 8002310:	4a96      	ldr	r2, [pc, #600]	; (800256c <main+0x60c>)
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002312:	4620      	mov	r0, r4
  ADC_ChannelConfTypeDef sConfig = {0};
 8002314:	9341      	str	r3, [sp, #260]	; 0x104
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002316:	6123      	str	r3, [r4, #16]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002318:	f884 3020 	strb.w	r3, [r4, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800231c:	60e3      	str	r3, [r4, #12]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800231e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002322:	6163      	str	r3, [r4, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002324:	9342      	str	r3, [sp, #264]	; 0x108
 8002326:	9343      	str	r3, [sp, #268]	; 0x10c
 8002328:	9344      	str	r3, [sp, #272]	; 0x110
  hadc2.Init.ContinuousConvMode = ENABLE;
 800232a:	61a6      	str	r6, [r4, #24]
  hadc2.Init.NbrOfConversion = 1;
 800232c:	61e6      	str	r6, [r4, #28]
  hadc2.Instance = ADC2;
 800232e:	6022      	str	r2, [r4, #0]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002330:	e9c4 5301 	strd	r5, r3, [r4, #4]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002334:	f003 f934 	bl	80055a0 <HAL_ADC_Init>
 8002338:	4603      	mov	r3, r0
 800233a:	2800      	cmp	r0, #0
 800233c:	f040 8409 	bne.w	8002b52 <main+0xbf2>
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002340:	4620      	mov	r0, r4
 8002342:	a941      	add	r1, sp, #260	; 0x104
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002344:	9343      	str	r3, [sp, #268]	; 0x10c
  sConfig.Channel = ADC_CHANNEL_3;
 8002346:	9741      	str	r7, [sp, #260]	; 0x104
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002348:	9642      	str	r6, [sp, #264]	; 0x108
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800234a:	f003 fc07 	bl	8005b5c <HAL_ADC_ConfigChannel>
 800234e:	4603      	mov	r3, r0
 8002350:	2800      	cmp	r0, #0
 8002352:	f040 83fe 	bne.w	8002b52 <main+0xbf2>
  hadc3.Instance = ADC3;
 8002356:	4c86      	ldr	r4, [pc, #536]	; (8002570 <main+0x610>)
 8002358:	4a86      	ldr	r2, [pc, #536]	; (8002574 <main+0x614>)
  ADC_ChannelConfTypeDef sConfig = {0};
 800235a:	903d      	str	r0, [sp, #244]	; 0xf4
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800235c:	4620      	mov	r0, r4
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800235e:	6123      	str	r3, [r4, #16]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002360:	f884 3020 	strb.w	r3, [r4, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002364:	60e3      	str	r3, [r4, #12]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8002366:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800236a:	6163      	str	r3, [r4, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 800236c:	9340      	str	r3, [sp, #256]	; 0x100
  hadc3.Init.ContinuousConvMode = ENABLE;
 800236e:	61a6      	str	r6, [r4, #24]
  hadc3.Init.NbrOfConversion = 1;
 8002370:	61e6      	str	r6, [r4, #28]
  hadc3.Instance = ADC3;
 8002372:	6022      	str	r2, [r4, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002374:	e9c4 5301 	strd	r5, r3, [r4, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002378:	e9cd 333e 	strd	r3, r3, [sp, #248]	; 0xf8
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800237c:	f003 f910 	bl	80055a0 <HAL_ADC_Init>
 8002380:	4603      	mov	r3, r0
 8002382:	2800      	cmp	r0, #0
 8002384:	f040 83e5 	bne.w	8002b52 <main+0xbf2>
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002388:	4620      	mov	r0, r4
 800238a:	a93d      	add	r1, sp, #244	; 0xf4
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800238c:	933f      	str	r3, [sp, #252]	; 0xfc
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800238e:	e9cd 763d 	strd	r7, r6, [sp, #244]	; 0xf4
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002392:	f003 fbe3 	bl	8005b5c <HAL_ADC_ConfigChannel>
 8002396:	2800      	cmp	r0, #0
 8002398:	f040 83db 	bne.w	8002b52 <main+0xbf2>
  hrng.Instance = RNG;
 800239c:	4b76      	ldr	r3, [pc, #472]	; (8002578 <main+0x618>)
 800239e:	4a77      	ldr	r2, [pc, #476]	; (800257c <main+0x61c>)
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80023a0:	4618      	mov	r0, r3
  hrng.Instance = RNG;
 80023a2:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80023a4:	f008 fe98 	bl	800b0d8 <HAL_RNG_Init>
 80023a8:	2800      	cmp	r0, #0
 80023aa:	f040 83d2 	bne.w	8002b52 <main+0xbf2>
  htim6.Instance = TIM6;
 80023ae:	4c74      	ldr	r4, [pc, #464]	; (8002580 <main+0x620>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023b0:	2300      	movs	r3, #0
  htim6.Instance = TIM6;
 80023b2:	4a74      	ldr	r2, [pc, #464]	; (8002584 <main+0x624>)
  htim6.Init.Prescaler = 10800;
 80023b4:	f642 2730 	movw	r7, #10800	; 0x2a30
  htim6.Init.Period = 10000;
 80023b8:	f242 7510 	movw	r5, #10000	; 0x2710
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80023bc:	2680      	movs	r6, #128	; 0x80
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80023be:	4620      	mov	r0, r4
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023c0:	60a3      	str	r3, [r4, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023c2:	9321      	str	r3, [sp, #132]	; 0x84
  htim6.Init.Period = 10000;
 80023c4:	60e5      	str	r5, [r4, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80023c6:	61a6      	str	r6, [r4, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023c8:	e9cd 331f 	strd	r3, r3, [sp, #124]	; 0x7c
  htim6.Init.Prescaler = 10800;
 80023cc:	e9c4 2700 	strd	r2, r7, [r4]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80023d0:	f00a fabe 	bl	800c950 <HAL_TIM_Base_Init>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2800      	cmp	r0, #0
 80023d8:	f040 83bb 	bne.w	8002b52 <main+0xbf2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80023dc:	2210      	movs	r2, #16
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80023de:	a91f      	add	r1, sp, #124	; 0x7c
 80023e0:	4620      	mov	r0, r4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023e2:	9321      	str	r3, [sp, #132]	; 0x84
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80023e4:	921f      	str	r2, [sp, #124]	; 0x7c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80023e6:	f00b fd81 	bl	800deec <HAL_TIMEx_MasterConfigSynchronization>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2800      	cmp	r0, #0
 80023ee:	f040 83b0 	bne.w	8002b52 <main+0xbf2>
  htim3.Instance = TIM3;
 80023f2:	4c65      	ldr	r4, [pc, #404]	; (8002588 <main+0x628>)
 80023f4:	4a65      	ldr	r2, [pc, #404]	; (800258c <main+0x62c>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023f6:	9039      	str	r0, [sp, #228]	; 0xe4
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023f8:	9055      	str	r0, [sp, #340]	; 0x154
 80023fa:	9056      	str	r0, [sp, #344]	; 0x158
 80023fc:	9057      	str	r0, [sp, #348]	; 0x15c
 80023fe:	9058      	str	r0, [sp, #352]	; 0x160
 8002400:	9059      	str	r0, [sp, #356]	; 0x164
 8002402:	905a      	str	r0, [sp, #360]	; 0x168
 8002404:	905b      	str	r0, [sp, #364]	; 0x16c
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002406:	4620      	mov	r0, r4
  htim3.Init.Prescaler = 10800;
 8002408:	6067      	str	r7, [r4, #4]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800240a:	6123      	str	r3, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800240c:	61a6      	str	r6, [r4, #24]
  htim3.Instance = TIM3;
 800240e:	6022      	str	r2, [r4, #0]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002410:	933c      	str	r3, [sp, #240]	; 0xf0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002412:	931e      	str	r3, [sp, #120]	; 0x78
  htim3.Init.Period = 10000;
 8002414:	e9c4 3502 	strd	r3, r5, [r4, #8]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002418:	e9cd 333a 	strd	r3, r3, [sp, #232]	; 0xe8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800241c:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002420:	f00a fa96 	bl	800c950 <HAL_TIM_Base_Init>
 8002424:	2800      	cmp	r0, #0
 8002426:	f040 8394 	bne.w	8002b52 <main+0xbf2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800242a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800242e:	a939      	add	r1, sp, #228	; 0xe4
 8002430:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002432:	9339      	str	r3, [sp, #228]	; 0xe4
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002434:	f009 fd9e 	bl	800bf74 <HAL_TIM_ConfigClockSource>
 8002438:	2800      	cmp	r0, #0
 800243a:	f040 838a 	bne.w	8002b52 <main+0xbf2>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800243e:	4620      	mov	r0, r4
 8002440:	f00a fc02 	bl	800cc48 <HAL_TIM_PWM_Init>
 8002444:	2800      	cmp	r0, #0
 8002446:	f040 8384 	bne.w	8002b52 <main+0xbf2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800244a:	901c      	str	r0, [sp, #112]	; 0x70
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800244c:	a91c      	add	r1, sp, #112	; 0x70
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800244e:	901e      	str	r0, [sp, #120]	; 0x78
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002450:	4620      	mov	r0, r4
 8002452:	f00b fd4b 	bl	800deec <HAL_TIMEx_MasterConfigSynchronization>
 8002456:	2800      	cmp	r0, #0
 8002458:	f040 837b 	bne.w	8002b52 <main+0xbf2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800245c:	2560      	movs	r5, #96	; 0x60
  sConfigOC.Pulse = 10;
 800245e:	230a      	movs	r3, #10
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002460:	9057      	str	r0, [sp, #348]	; 0x15c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002462:	2204      	movs	r2, #4
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002464:	9059      	str	r0, [sp, #356]	; 0x164
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002466:	a955      	add	r1, sp, #340	; 0x154
 8002468:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800246a:	9555      	str	r5, [sp, #340]	; 0x154
  sConfigOC.Pulse = 10;
 800246c:	9356      	str	r3, [sp, #344]	; 0x158
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800246e:	f00a ff4d 	bl	800d30c <HAL_TIM_PWM_ConfigChannel>
 8002472:	4605      	mov	r5, r0
 8002474:	2800      	cmp	r0, #0
 8002476:	f040 836c 	bne.w	8002b52 <main+0xbf2>
  HAL_TIM_MspPostInit(&htim3);
 800247a:	4620      	mov	r0, r4
  htim7.Instance = TIM7;
 800247c:	4c44      	ldr	r4, [pc, #272]	; (8002590 <main+0x630>)
  HAL_TIM_MspPostInit(&htim3);
 800247e:	f001 fecb 	bl	8004218 <HAL_TIM_MspPostInit>
  htim7.Init.Period = 9600;
 8002482:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  htim7.Instance = TIM7;
 8002486:	4a43      	ldr	r2, [pc, #268]	; (8002594 <main+0x634>)
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002488:	4620      	mov	r0, r4
  htim7.Init.Period = 9600;
 800248a:	60e3      	str	r3, [r4, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800248c:	61a6      	str	r6, [r4, #24]
  htim7.Instance = TIM7;
 800248e:	6022      	str	r2, [r4, #0]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002490:	951b      	str	r5, [sp, #108]	; 0x6c
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002492:	e9c4 5501 	strd	r5, r5, [r4, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002496:	e9cd 5519 	strd	r5, r5, [sp, #100]	; 0x64
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800249a:	f00a fa59 	bl	800c950 <HAL_TIM_Base_Init>
 800249e:	4603      	mov	r3, r0
 80024a0:	2800      	cmp	r0, #0
 80024a2:	f040 8356 	bne.w	8002b52 <main+0xbf2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80024a6:	2220      	movs	r2, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80024a8:	4620      	mov	r0, r4
 80024aa:	a919      	add	r1, sp, #100	; 0x64
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ac:	931b      	str	r3, [sp, #108]	; 0x6c
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80024ae:	9219      	str	r2, [sp, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80024b0:	f00b fd1c 	bl	800deec <HAL_TIMEx_MasterConfigSynchronization>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2800      	cmp	r0, #0
 80024b8:	f040 834b 	bne.w	8002b52 <main+0xbf2>
  htim1.Instance = TIM1;
 80024bc:	4a36      	ldr	r2, [pc, #216]	; (8002598 <main+0x638>)
  htim1.Init.Period = 65535;
 80024be:	f64f 71ff 	movw	r1, #65535	; 0xffff
  htim1.Instance = TIM1;
 80024c2:	4836      	ldr	r0, [pc, #216]	; (800259c <main+0x63c>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024c4:	9335      	str	r3, [sp, #212]	; 0xd4
  htim1.Instance = TIM1;
 80024c6:	6010      	str	r0, [r2, #0]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80024c8:	4610      	mov	r0, r2
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024ca:	6193      	str	r3, [r2, #24]
  htim1.Init.Period = 65535;
 80024cc:	60d1      	str	r1, [r2, #12]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024ce:	9338      	str	r3, [sp, #224]	; 0xe0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024d0:	9318      	str	r3, [sp, #96]	; 0x60
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024d2:	e9c2 3301 	strd	r3, r3, [r2, #4]
  htim1.Init.RepetitionCounter = 0;
 80024d6:	e9c2 3304 	strd	r3, r3, [r2, #16]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024da:	e9cd 3336 	strd	r3, r3, [sp, #216]	; 0xd8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024de:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80024e2:	f00a fa35 	bl	800c950 <HAL_TIM_Base_Init>
 80024e6:	2800      	cmp	r0, #0
 80024e8:	f040 8333 	bne.w	8002b52 <main+0xbf2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024ec:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80024f0:	a935      	add	r1, sp, #212	; 0xd4
 80024f2:	4829      	ldr	r0, [pc, #164]	; (8002598 <main+0x638>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024f4:	9735      	str	r7, [sp, #212]	; 0xd4
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80024f6:	f009 fd3d 	bl	800bf74 <HAL_TIM_ConfigClockSource>
 80024fa:	2800      	cmp	r0, #0
 80024fc:	f040 8329 	bne.w	8002b52 <main+0xbf2>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002500:	9018      	str	r0, [sp, #96]	; 0x60
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002502:	a916      	add	r1, sp, #88	; 0x58
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002504:	e9cd 0016 	strd	r0, r0, [sp, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002508:	4823      	ldr	r0, [pc, #140]	; (8002598 <main+0x638>)
 800250a:	f00b fcef 	bl	800deec <HAL_TIMEx_MasterConfigSynchronization>
 800250e:	4602      	mov	r2, r0
 8002510:	2800      	cmp	r0, #0
 8002512:	f040 831e 	bne.w	8002b52 <main+0xbf2>
  hcrc.Instance = CRC;
 8002516:	4b22      	ldr	r3, [pc, #136]	; (80025a0 <main+0x640>)
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002518:	2501      	movs	r5, #1
  hcrc.Instance = CRC;
 800251a:	4922      	ldr	r1, [pc, #136]	; (80025a4 <main+0x644>)
 800251c:	8098      	strh	r0, [r3, #4]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800251e:	4618      	mov	r0, r3
  hcrc.Instance = CRC;
 8002520:	6019      	str	r1, [r3, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002522:	621d      	str	r5, [r3, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8002524:	e9c3 2205 	strd	r2, r2, [r3, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002528:	f003 fcf6 	bl	8005f18 <HAL_CRC_Init>
 800252c:	4603      	mov	r3, r0
 800252e:	2800      	cmp	r0, #0
 8002530:	f040 830f 	bne.w	8002b52 <main+0xbf2>
  htim2.Instance = TIM2;
 8002534:	4c1c      	ldr	r4, [pc, #112]	; (80025a8 <main+0x648>)
 8002536:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Init.Period = 4000000000;
 800253a:	4a1c      	ldr	r2, [pc, #112]	; (80025ac <main+0x64c>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800253c:	ae49      	add	r6, sp, #292	; 0x124
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800253e:	902d      	str	r0, [sp, #180]	; 0xb4
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002540:	9049      	str	r0, [sp, #292]	; 0x124
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002542:	4620      	mov	r0, r4
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002544:	9331      	str	r3, [sp, #196]	; 0xc4
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002546:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002548:	61a3      	str	r3, [r4, #24]
  htim2.Instance = TIM2;
 800254a:	6021      	str	r1, [r4, #0]
  htim2.Init.Period = 4000000000;
 800254c:	60e2      	str	r2, [r4, #12]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800254e:	9330      	str	r3, [sp, #192]	; 0xc0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002550:	934a      	str	r3, [sp, #296]	; 0x128
 8002552:	934b      	str	r3, [sp, #300]	; 0x12c
 8002554:	934c      	str	r3, [sp, #304]	; 0x130
 8002556:	934d      	str	r3, [sp, #308]	; 0x134
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002558:	9315      	str	r3, [sp, #84]	; 0x54
 800255a:	e029      	b.n	80025b0 <main+0x650>
 800255c:	20022dcc 	.word	0x20022dcc
 8002560:	40012000 	.word	0x40012000
 8002564:	0f000001 	.word	0x0f000001
 8002568:	20022a88 	.word	0x20022a88
 800256c:	40012100 	.word	0x40012100
 8002570:	20022e14 	.word	0x20022e14
 8002574:	40012200 	.word	0x40012200
 8002578:	20022fd0 	.word	0x20022fd0
 800257c:	50060800 	.word	0x50060800
 8002580:	20022f4c 	.word	0x20022f4c
 8002584:	40001000 	.word	0x40001000
 8002588:	20022c48 	.word	0x20022c48
 800258c:	40000400 	.word	0x40000400
 8002590:	20023244 	.word	0x20023244
 8002594:	40001400 	.word	0x40001400
 8002598:	20022f8c 	.word	0x20022f8c
 800259c:	40010000 	.word	0x40010000
 80025a0:	20022b30 	.word	0x20022b30
 80025a4:	40023000 	.word	0x40023000
 80025a8:	200230e4 	.word	0x200230e4
 80025ac:	ee6b2800 	.word	0xee6b2800
  TIM_IC_InitTypeDef sConfigIC = {0};
 80025b0:	9334      	str	r3, [sp, #208]	; 0xd0
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025b2:	e9c4 3301 	strd	r3, r3, [r4, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025b6:	e9cd 332e 	strd	r3, r3, [sp, #184]	; 0xb8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025ba:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
  TIM_IC_InitTypeDef sConfigIC = {0};
 80025be:	e9cd 3332 	strd	r3, r3, [sp, #200]	; 0xc8
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80025c2:	f00a f9c5 	bl	800c950 <HAL_TIM_Base_Init>
 80025c6:	2800      	cmp	r0, #0
 80025c8:	f040 82c3 	bne.w	8002b52 <main+0xbf2>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025cc:	a92d      	add	r1, sp, #180	; 0xb4
 80025ce:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025d0:	972d      	str	r7, [sp, #180]	; 0xb4
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025d2:	f009 fccf 	bl	800bf74 <HAL_TIM_ConfigClockSource>
 80025d6:	2800      	cmp	r0, #0
 80025d8:	f040 82bb 	bne.w	8002b52 <main+0xbf2>
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80025dc:	4620      	mov	r0, r4
 80025de:	f00a fbf1 	bl	800cdc4 <HAL_TIM_IC_Init>
 80025e2:	2800      	cmp	r0, #0
 80025e4:	f040 82b5 	bne.w	8002b52 <main+0xbf2>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80025e8:	2704      	movs	r7, #4
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80025ea:	2350      	movs	r3, #80	; 0x50
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80025ec:	904b      	str	r0, [sp, #300]	; 0x12c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80025ee:	4631      	mov	r1, r6
  sSlaveConfig.TriggerFilter = 0;
 80025f0:	904d      	str	r0, [sp, #308]	; 0x134
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80025f2:	4620      	mov	r0, r4
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80025f4:	9749      	str	r7, [sp, #292]	; 0x124
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80025f6:	934a      	str	r3, [sp, #296]	; 0x128
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80025f8:	f009 ff8c 	bl	800c514 <HAL_TIM_SlaveConfigSynchro>
 80025fc:	2800      	cmp	r0, #0
 80025fe:	f040 82a8 	bne.w	8002b52 <main+0xbf2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002602:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002604:	a913      	add	r1, sp, #76	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002606:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002608:	4620      	mov	r0, r4
 800260a:	f00b fc6f 	bl	800deec <HAL_TIMEx_MasterConfigSynchronization>
 800260e:	4603      	mov	r3, r0
 8002610:	2800      	cmp	r0, #0
 8002612:	f040 829e 	bne.w	8002b52 <main+0xbf2>
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002616:	4602      	mov	r2, r0
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002618:	9031      	str	r0, [sp, #196]	; 0xc4
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800261a:	a931      	add	r1, sp, #196	; 0xc4
 800261c:	4620      	mov	r0, r4
  sConfigIC.ICFilter = 0;
 800261e:	9334      	str	r3, [sp, #208]	; 0xd0
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002620:	e9cd 5332 	strd	r5, r3, [sp, #200]	; 0xc8
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002624:	f00b f89c 	bl	800d760 <HAL_TIM_IC_ConfigChannel>
 8002628:	2800      	cmp	r0, #0
 800262a:	f040 8292 	bne.w	8002b52 <main+0xbf2>
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800262e:	2302      	movs	r3, #2
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002630:	463a      	mov	r2, r7
 8002632:	4620      	mov	r0, r4
 8002634:	a931      	add	r1, sp, #196	; 0xc4
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002636:	9332      	str	r3, [sp, #200]	; 0xc8
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002638:	f00b f892 	bl	800d760 <HAL_TIM_IC_ConfigChannel>
 800263c:	2800      	cmp	r0, #0
 800263e:	f040 8288 	bne.w	8002b52 <main+0xbf2>
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002642:	a931      	add	r1, sp, #196	; 0xc4
 8002644:	2208      	movs	r2, #8
 8002646:	4620      	mov	r0, r4
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002648:	9532      	str	r5, [sp, #200]	; 0xc8
 800264a:	46a9      	mov	r9, r5
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800264c:	f00b f888 	bl	800d760 <HAL_TIM_IC_ConfigChannel>
 8002650:	4603      	mov	r3, r0
 8002652:	2800      	cmp	r0, #0
 8002654:	f040 827d 	bne.w	8002b52 <main+0xbf2>
  huart6.Instance = USART6;
 8002658:	4cc4      	ldr	r4, [pc, #784]	; (800296c <main+0xa0c>)
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 800265a:	2130      	movs	r1, #48	; 0x30
  huart6.Instance = USART6;
 800265c:	48c4      	ldr	r0, [pc, #784]	; (8002970 <main+0xa10>)
  huart6.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800265e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  huart6.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8002662:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
  huart6.Init.BaudRate = 9600;
 8002666:	f44f 5716 	mov.w	r7, #9600	; 0x2580
  huart6.Init.Mode = UART_MODE_TX_RX;
 800266a:	250c      	movs	r5, #12
  huart6.Instance = USART6;
 800266c:	6020      	str	r0, [r4, #0]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 800266e:	6261      	str	r1, [r4, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart6, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8002670:	4620      	mov	r0, r4
  huart6.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8002672:	63a2      	str	r2, [r4, #56]	; 0x38
  if (HAL_RS485Ex_Init(&huart6, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8002674:	4619      	mov	r1, r3
 8002676:	461a      	mov	r2, r3
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002678:	60a3      	str	r3, [r4, #8]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800267a:	6223      	str	r3, [r4, #32]
  huart6.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800267c:	f8c4 c03c 	str.w	ip, [r4, #60]	; 0x3c
  huart6.Init.BaudRate = 9600;
 8002680:	6067      	str	r7, [r4, #4]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002682:	6165      	str	r5, [r4, #20]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002684:	e9c4 3303 	strd	r3, r3, [r4, #12]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002688:	e9c4 3306 	strd	r3, r3, [r4, #24]
  if (HAL_RS485Ex_Init(&huart6, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800268c:	f00c fc58 	bl	800ef40 <HAL_RS485Ex_Init>
 8002690:	4603      	mov	r3, r0
 8002692:	2800      	cmp	r0, #0
 8002694:	f040 825d 	bne.w	8002b52 <main+0xbf2>
  hdac.Instance = DAC;
 8002698:	4cb6      	ldr	r4, [pc, #728]	; (8002974 <main+0xa14>)
 800269a:	4ab7      	ldr	r2, [pc, #732]	; (8002978 <main+0xa18>)
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800269c:	4620      	mov	r0, r4
  DAC_ChannelConfTypeDef sConfig = {0};
 800269e:	930b      	str	r3, [sp, #44]	; 0x2c
 80026a0:	930c      	str	r3, [sp, #48]	; 0x30
  hdac.Instance = DAC;
 80026a2:	6022      	str	r2, [r4, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80026a4:	f003 fcfa 	bl	800609c <HAL_DAC_Init>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2800      	cmp	r0, #0
 80026ac:	f040 8251 	bne.w	8002b52 <main+0xbf2>
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 80026b0:	f04f 0c14 	mov.w	ip, #20
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80026b4:	4620      	mov	r0, r4
 80026b6:	461a      	mov	r2, r3
 80026b8:	a90b      	add	r1, sp, #44	; 0x2c
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80026ba:	930c      	str	r3, [sp, #48]	; 0x30
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 80026bc:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80026c0:	f003 fe20 	bl	8006304 <HAL_DAC_ConfigChannel>
 80026c4:	4680      	mov	r8, r0
 80026c6:	2800      	cmp	r0, #0
 80026c8:	f040 8243 	bne.w	8002b52 <main+0xbf2>
  hi2c1.Instance = I2C1;
 80026cc:	4cab      	ldr	r4, [pc, #684]	; (800297c <main+0xa1c>)
  MX_FATFS_Init();
 80026ce:	f00d fa29 	bl	800fb24 <MX_FATFS_Init>
  hi2c1.Instance = I2C1;
 80026d2:	4aab      	ldr	r2, [pc, #684]	; (8002980 <main+0xa20>)
  hi2c1.Init.Timing = 0x20404768;
 80026d4:	4bab      	ldr	r3, [pc, #684]	; (8002984 <main+0xa24>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80026d6:	4620      	mov	r0, r4
  hi2c1.Init.OwnAddress1 = 0;
 80026d8:	f8c4 8008 	str.w	r8, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026dc:	e9c4 9803 	strd	r9, r8, [r4, #12]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80026e0:	e9c4 8805 	strd	r8, r8, [r4, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026e4:	e9c4 8807 	strd	r8, r8, [r4, #28]
  hi2c1.Init.Timing = 0x20404768;
 80026e8:	e9c4 2300 	strd	r2, r3, [r4]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80026ec:	f006 fa4c 	bl	8008b88 <HAL_I2C_Init>
 80026f0:	4601      	mov	r1, r0
 80026f2:	2800      	cmp	r0, #0
 80026f4:	f040 822d 	bne.w	8002b52 <main+0xbf2>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80026f8:	4620      	mov	r0, r4
 80026fa:	f006 fca9 	bl	8009050 <HAL_I2CEx_ConfigAnalogFilter>
 80026fe:	4601      	mov	r1, r0
 8002700:	2800      	cmp	r0, #0
 8002702:	f040 8226 	bne.w	8002b52 <main+0xbf2>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002706:	4620      	mov	r0, r4
 8002708:	f006 fcf4 	bl	80090f4 <HAL_I2CEx_ConfigDigitalFilter>
 800270c:	2800      	cmp	r0, #0
 800270e:	f040 8220 	bne.w	8002b52 <main+0xbf2>
  huart4.Instance = UART4;
 8002712:	4b9d      	ldr	r3, [pc, #628]	; (8002988 <main+0xa28>)
  huart4.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002714:	f44f 7240 	mov.w	r2, #768	; 0x300
  huart4.Instance = UART4;
 8002718:	499c      	ldr	r1, [pc, #624]	; (800298c <main+0xa2c>)
  huart4.Init.BaudRate = 115200;
 800271a:	f44f 38e1 	mov.w	r8, #115200	; 0x1c200
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800271e:	6258      	str	r0, [r3, #36]	; 0x24
  huart4.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002720:	619a      	str	r2, [r3, #24]
  huart4.Instance = UART4;
 8002722:	6019      	str	r1, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002724:	f8c3 8004 	str.w	r8, [r3, #4]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002728:	e9c3 0002 	strd	r0, r0, [r3, #8]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800272c:	e9c3 0504 	strd	r0, r5, [r3, #16]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002730:	e9c3 0007 	strd	r0, r0, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002734:	4618      	mov	r0, r3
 8002736:	f00c fb2d 	bl	800ed94 <HAL_UART_Init>
 800273a:	4602      	mov	r2, r0
 800273c:	2800      	cmp	r0, #0
 800273e:	f040 8208 	bne.w	8002b52 <main+0xbf2>
  huart5.Instance = UART5;
 8002742:	4b93      	ldr	r3, [pc, #588]	; (8002990 <main+0xa30>)
 8002744:	4993      	ldr	r1, [pc, #588]	; (8002994 <main+0xa34>)
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002746:	4618      	mov	r0, r3
  huart5.Init.BaudRate = 9600;
 8002748:	605f      	str	r7, [r3, #4]
  huart5.Instance = UART5;
 800274a:	6019      	str	r1, [r3, #0]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800274c:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002750:	e9c3 2504 	strd	r2, r5, [r3, #16]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002754:	e9c3 2206 	strd	r2, r2, [r3, #24]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002758:	e9c3 2208 	strd	r2, r2, [r3, #32]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800275c:	f00c fb1a 	bl	800ed94 <HAL_UART_Init>
 8002760:	4603      	mov	r3, r0
 8002762:	2800      	cmp	r0, #0
 8002764:	f040 81f5 	bne.w	8002b52 <main+0xbf2>
  huart7.Instance = UART7;
 8002768:	4c8b      	ldr	r4, [pc, #556]	; (8002998 <main+0xa38>)
  if (HAL_RS485Ex_Init(&huart7, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800276a:	461a      	mov	r2, r3
  huart7.Instance = UART7;
 800276c:	4f8b      	ldr	r7, [pc, #556]	; (800299c <main+0xa3c>)
  if (HAL_RS485Ex_Init(&huart7, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800276e:	4619      	mov	r1, r3
 8002770:	4620      	mov	r0, r4
  huart7.Init.BaudRate = 115200;
 8002772:	f8c4 8004 	str.w	r8, [r4, #4]
  huart7.Instance = UART7;
 8002776:	6027      	str	r7, [r4, #0]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002778:	e9c4 3302 	strd	r3, r3, [r4, #8]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800277c:	e9c4 3504 	strd	r3, r5, [r4, #16]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002780:	e9c4 3306 	strd	r3, r3, [r4, #24]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002784:	e9c4 3308 	strd	r3, r3, [r4, #32]
  if (HAL_RS485Ex_Init(&huart7, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8002788:	f00c fbda 	bl	800ef40 <HAL_RS485Ex_Init>
 800278c:	2800      	cmp	r0, #0
 800278e:	f040 81e0 	bne.w	8002b52 <main+0xbf2>
  huart3.Instance = USART3;
 8002792:	4b83      	ldr	r3, [pc, #524]	; (80029a0 <main+0xa40>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002794:	2400      	movs	r4, #0
  huart3.Instance = USART3;
 8002796:	4883      	ldr	r0, [pc, #524]	; (80029a4 <main+0xa44>)
  if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 8002798:	4622      	mov	r2, r4
 800279a:	4621      	mov	r1, r4
  huart3.Instance = USART3;
 800279c:	6018      	str	r0, [r3, #0]
  if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 800279e:	4618      	mov	r0, r3
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80027a0:	609c      	str	r4, [r3, #8]
  huart3.Init.BaudRate = 115200;
 80027a2:	f8c3 8004 	str.w	r8, [r3, #4]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80027a6:	615d      	str	r5, [r3, #20]
  huart3.Init.Parity = UART_PARITY_NONE;
 80027a8:	e9c3 4403 	strd	r4, r4, [r3, #12]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80027ac:	e9c3 4406 	strd	r4, r4, [r3, #24]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027b0:	e9c3 4408 	strd	r4, r4, [r3, #32]
  if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 80027b4:	f00c fb70 	bl	800ee98 <HAL_MultiProcessor_Init>
 80027b8:	2800      	cmp	r0, #0
 80027ba:	f040 81ca 	bne.w	8002b52 <main+0xbf2>
  hspi4.Instance = SPI4;
 80027be:	4b7a      	ldr	r3, [pc, #488]	; (80029a8 <main+0xa48>)
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80027c0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  hspi4.Instance = SPI4;
 80027c4:	4979      	ldr	r1, [pc, #484]	; (80029ac <main+0xa4c>)
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80027c6:	f44f 7582 	mov.w	r5, #260	; 0x104
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 80027ca:	f44f 7940 	mov.w	r9, #768	; 0x300
  hspi4.Init.CRCPolynomial = 7;
 80027ce:	2707      	movs	r7, #7
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80027d0:	2408      	movs	r4, #8
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80027d2:	6098      	str	r0, [r3, #8]
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80027d4:	6318      	str	r0, [r3, #48]	; 0x30
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80027d6:	619a      	str	r2, [r3, #24]
  hspi4.Instance = SPI4;
 80027d8:	6019      	str	r1, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80027da:	605d      	str	r5, [r3, #4]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 80027dc:	f8c3 900c 	str.w	r9, [r3, #12]
  hspi4.Init.CRCPolynomial = 7;
 80027e0:	62df      	str	r7, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80027e2:	635c      	str	r4, [r3, #52]	; 0x34
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027e4:	e9c3 0004 	strd	r0, r0, [r3, #16]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027e8:	e9c3 0007 	strd	r0, r0, [r3, #28]
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027ec:	e9c3 0009 	strd	r0, r0, [r3, #36]	; 0x24
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80027f0:	4618      	mov	r0, r3
 80027f2:	f008 fd17 	bl	800b224 <HAL_SPI_Init>
 80027f6:	4602      	mov	r2, r0
 80027f8:	2800      	cmp	r0, #0
 80027fa:	f040 81aa 	bne.w	8002b52 <main+0xbf2>
  hspi3.Instance = SPI3;
 80027fe:	4b6c      	ldr	r3, [pc, #432]	; (80029b0 <main+0xa50>)
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002800:	f44f 7800 	mov.w	r8, #512	; 0x200
  hspi3.Instance = SPI3;
 8002804:	496b      	ldr	r1, [pc, #428]	; (80029b4 <main+0xa54>)
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8002806:	f8c3 900c 	str.w	r9, [r3, #12]
  hspi3.Instance = SPI3;
 800280a:	6019      	str	r1, [r3, #0]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800280c:	f8c3 8018 	str.w	r8, [r3, #24]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002810:	e9c3 0001 	strd	r0, r0, [r3, #4]
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002814:	4618      	mov	r0, r3
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002816:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800281a:	e9c3 2208 	strd	r2, r2, [r3, #32]
  hspi3.Init.CRCPolynomial = 7;
 800281e:	e9c3 270a 	strd	r2, r7, [r3, #40]	; 0x28
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002822:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002826:	f008 fcfd 	bl	800b224 <HAL_SPI_Init>
 800282a:	4602      	mov	r2, r0
 800282c:	2800      	cmp	r0, #0
 800282e:	f040 8190 	bne.w	8002b52 <main+0xbf2>
  hspi2.Instance = SPI2;
 8002832:	4b61      	ldr	r3, [pc, #388]	; (80029b8 <main+0xa58>)
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8002834:	f44f 6c70 	mov.w	ip, #3840	; 0xf00
  hspi2.Instance = SPI2;
 8002838:	f8df e198 	ldr.w	lr, [pc, #408]	; 80029d4 <main+0xa74>
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800283c:	2138      	movs	r1, #56	; 0x38
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800283e:	f8c3 8018 	str.w	r8, [r3, #24]
  hspi2.Instance = SPI2;
 8002842:	f8c3 e000 	str.w	lr, [r3]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8002846:	f8c3 c00c 	str.w	ip, [r3, #12]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800284a:	61d9      	str	r1, [r3, #28]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800284c:	e9c3 5001 	strd	r5, r0, [r3, #4]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002850:	e9c3 0004 	strd	r0, r0, [r3, #16]
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002854:	4618      	mov	r0, r3
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002856:	e9c3 2208 	strd	r2, r2, [r3, #32]
  hspi2.Init.CRCPolynomial = 7;
 800285a:	e9c3 270a 	strd	r2, r7, [r3, #40]	; 0x28
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800285e:	e9c3 240c 	strd	r2, r4, [r3, #48]	; 0x30
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002862:	f008 fcdf 	bl	800b224 <HAL_SPI_Init>
 8002866:	4603      	mov	r3, r0
 8002868:	2800      	cmp	r0, #0
 800286a:	f040 8172 	bne.w	8002b52 <main+0xbf2>
  hi2c4.Instance = I2C4;
 800286e:	4c53      	ldr	r4, [pc, #332]	; (80029bc <main+0xa5c>)
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002870:	2501      	movs	r5, #1
  hi2c4.Instance = I2C4;
 8002872:	4a53      	ldr	r2, [pc, #332]	; (80029c0 <main+0xa60>)
  hi2c4.Init.Timing = 0x20404768;
 8002874:	4f43      	ldr	r7, [pc, #268]	; (8002984 <main+0xa24>)
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8002876:	4620      	mov	r0, r4
  hi2c4.Init.OwnAddress1 = 0;
 8002878:	60a3      	str	r3, [r4, #8]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800287a:	6223      	str	r3, [r4, #32]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800287c:	60e5      	str	r5, [r4, #12]
  hi2c4.Init.OwnAddress2 = 0;
 800287e:	e9c4 3304 	strd	r3, r3, [r4, #16]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002882:	e9c4 3306 	strd	r3, r3, [r4, #24]
  hi2c4.Init.Timing = 0x20404768;
 8002886:	e9c4 2700 	strd	r2, r7, [r4]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800288a:	f006 f97d 	bl	8008b88 <HAL_I2C_Init>
 800288e:	4601      	mov	r1, r0
 8002890:	2800      	cmp	r0, #0
 8002892:	f040 815e 	bne.w	8002b52 <main+0xbf2>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002896:	4620      	mov	r0, r4
 8002898:	f006 fbda 	bl	8009050 <HAL_I2CEx_ConfigAnalogFilter>
 800289c:	4601      	mov	r1, r0
 800289e:	2800      	cmp	r0, #0
 80028a0:	f040 8157 	bne.w	8002b52 <main+0xbf2>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80028a4:	4620      	mov	r0, r4
 80028a6:	f006 fc25 	bl	80090f4 <HAL_I2CEx_ConfigDigitalFilter>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2800      	cmp	r0, #0
 80028ae:	f040 8150 	bne.w	8002b52 <main+0xbf2>
  hi2c2.Instance = I2C2;
 80028b2:	4c44      	ldr	r4, [pc, #272]	; (80029c4 <main+0xa64>)
 80028b4:	4a44      	ldr	r2, [pc, #272]	; (80029c8 <main+0xa68>)
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80028b6:	4620      	mov	r0, r4
  hi2c2.Init.Timing = 0x20404768;
 80028b8:	6067      	str	r7, [r4, #4]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028ba:	6223      	str	r3, [r4, #32]
  hi2c2.Instance = I2C2;
 80028bc:	6022      	str	r2, [r4, #0]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028be:	e9c4 3502 	strd	r3, r5, [r4, #8]
  hi2c2.Init.OwnAddress2 = 0;
 80028c2:	e9c4 3304 	strd	r3, r3, [r4, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028c6:	e9c4 3306 	strd	r3, r3, [r4, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80028ca:	f006 f95d 	bl	8008b88 <HAL_I2C_Init>
 80028ce:	4601      	mov	r1, r0
 80028d0:	2800      	cmp	r0, #0
 80028d2:	f040 813e 	bne.w	8002b52 <main+0xbf2>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80028d6:	4620      	mov	r0, r4
 80028d8:	f006 fbba 	bl	8009050 <HAL_I2CEx_ConfigAnalogFilter>
 80028dc:	4601      	mov	r1, r0
 80028de:	2800      	cmp	r0, #0
 80028e0:	f040 8137 	bne.w	8002b52 <main+0xbf2>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80028e4:	4620      	mov	r0, r4
 80028e6:	f006 fc05 	bl	80090f4 <HAL_I2CEx_ConfigDigitalFilter>
 80028ea:	2800      	cmp	r0, #0
 80028ec:	f040 8131 	bne.w	8002b52 <main+0xbf2>
  htim4.Instance = TIM4;
 80028f0:	4c36      	ldr	r4, [pc, #216]	; (80029cc <main+0xa6c>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028f2:	2300      	movs	r3, #0
  htim4.Init.Period = 1100;
 80028f4:	f240 424c 	movw	r2, #1100	; 0x44c
  htim4.Instance = TIM4;
 80028f8:	4935      	ldr	r1, [pc, #212]	; (80029d0 <main+0xa70>)
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80028fa:	2780      	movs	r7, #128	; 0x80
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80028fc:	4620      	mov	r0, r4
  htim4.Instance = TIM4;
 80028fe:	6021      	str	r1, [r4, #0]
  htim4.Init.Period = 1100;
 8002900:	60e2      	str	r2, [r4, #12]
  htim4.Init.Prescaler = 0;
 8002902:	6063      	str	r3, [r4, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002904:	9329      	str	r3, [sp, #164]	; 0xa4
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002906:	934e      	str	r3, [sp, #312]	; 0x138
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002908:	60a3      	str	r3, [r4, #8]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800290a:	6123      	str	r3, [r4, #16]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800290c:	932c      	str	r3, [sp, #176]	; 0xb0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800290e:	9312      	str	r3, [sp, #72]	; 0x48
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002910:	934f      	str	r3, [sp, #316]	; 0x13c
 8002912:	9350      	str	r3, [sp, #320]	; 0x140
 8002914:	9351      	str	r3, [sp, #324]	; 0x144
 8002916:	9352      	str	r3, [sp, #328]	; 0x148
 8002918:	9353      	str	r3, [sp, #332]	; 0x14c
 800291a:	9354      	str	r3, [sp, #336]	; 0x150
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800291c:	61a7      	str	r7, [r4, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800291e:	e9cd 332a 	strd	r3, r3, [sp, #168]	; 0xa8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002922:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002926:	f00a f813 	bl	800c950 <HAL_TIM_Base_Init>
 800292a:	2800      	cmp	r0, #0
 800292c:	f040 8111 	bne.w	8002b52 <main+0xbf2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002930:	f44f 5880 	mov.w	r8, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002934:	a929      	add	r1, sp, #164	; 0xa4
 8002936:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002938:	f8cd 80a4 	str.w	r8, [sp, #164]	; 0xa4
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800293c:	f009 fb1a 	bl	800bf74 <HAL_TIM_ConfigClockSource>
 8002940:	2800      	cmp	r0, #0
 8002942:	f040 8106 	bne.w	8002b52 <main+0xbf2>
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8002946:	4620      	mov	r0, r4
 8002948:	f00a f8c0 	bl	800cacc <HAL_TIM_OC_Init>
 800294c:	2800      	cmp	r0, #0
 800294e:	f040 8100 	bne.w	8002b52 <main+0xbf2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 8002952:	2530      	movs	r5, #48	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002954:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002956:	a910      	add	r1, sp, #64	; 0x40
 8002958:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 800295a:	9510      	str	r5, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800295c:	f00b fac6 	bl	800deec <HAL_TIMEx_MasterConfigSynchronization>
 8002960:	4603      	mov	r3, r0
 8002962:	2800      	cmp	r0, #0
 8002964:	f040 80f5 	bne.w	8002b52 <main+0xbf2>
 8002968:	e036      	b.n	80029d8 <main+0xa78>
 800296a:	bf00      	nop
 800296c:	20022fe0 	.word	0x20022fe0
 8002970:	40011400 	.word	0x40011400
 8002974:	20022e6c 	.word	0x20022e6c
 8002978:	40007400 	.word	0x40007400
 800297c:	20022ad0 	.word	0x20022ad0
 8002980:	40005400 	.word	0x40005400
 8002984:	20404768 	.word	0x20404768
 8002988:	20023060 	.word	0x20023060
 800298c:	40004c00 	.word	0x40004c00
 8002990:	20022d4c 	.word	0x20022d4c
 8002994:	40005000 	.word	0x40005000
 8002998:	20022948 	.word	0x20022948
 800299c:	40007800 	.word	0x40007800
 80029a0:	20022a08 	.word	0x20022a08
 80029a4:	40004800 	.word	0x40004800
 80029a8:	20022e84 	.word	0x20022e84
 80029ac:	40013400 	.word	0x40013400
 80029b0:	20022c88 	.word	0x20022c88
 80029b4:	40003c00 	.word	0x40003c00
 80029b8:	200228e4 	.word	0x200228e4
 80029bc:	20022838 	.word	0x20022838
 80029c0:	40006000 	.word	0x40006000
 80029c4:	20022b54 	.word	0x20022b54
 80029c8:	40005800 	.word	0x40005800
 80029cc:	200229c8 	.word	0x200229c8
 80029d0:	40000800 	.word	0x40000800
 80029d4:	40003800 	.word	0x40003800
  sConfigOC.Pulse = 550;
 80029d8:	f240 2c26 	movw	ip, #550	; 0x226
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029dc:	9050      	str	r0, [sp, #320]	; 0x140
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80029de:	2208      	movs	r2, #8
 80029e0:	a94e      	add	r1, sp, #312	; 0x138
 80029e2:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80029e4:	954e      	str	r5, [sp, #312]	; 0x138
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029e6:	9352      	str	r3, [sp, #328]	; 0x148
  sConfigOC.Pulse = 550;
 80029e8:	f8cd c13c 	str.w	ip, [sp, #316]	; 0x13c
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80029ec:	f00a fb0e 	bl	800d00c <HAL_TIM_OC_ConfigChannel>
 80029f0:	4605      	mov	r5, r0
 80029f2:	2800      	cmp	r0, #0
 80029f4:	f040 80ad 	bne.w	8002b52 <main+0xbf2>
  HAL_TIM_MspPostInit(&htim4);
 80029f8:	4620      	mov	r0, r4
 80029fa:	f001 fc0d 	bl	8004218 <HAL_TIM_MspPostInit>
  htim14.Instance = TIM14;
 80029fe:	4b56      	ldr	r3, [pc, #344]	; (8002b58 <main+0xbf8>)
 8002a00:	4956      	ldr	r1, [pc, #344]	; (8002b5c <main+0xbfc>)
  htim14.Init.Period = 10800;
 8002a02:	f642 2230 	movw	r2, #10800	; 0x2a30
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002a06:	4618      	mov	r0, r3
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a08:	611d      	str	r5, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a0a:	619f      	str	r7, [r3, #24]
  htim14.Instance = TIM14;
 8002a0c:	6019      	str	r1, [r3, #0]
  htim14.Init.Period = 10800;
 8002a0e:	60da      	str	r2, [r3, #12]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a10:	e9c3 5501 	strd	r5, r5, [r3, #4]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002a14:	f009 ff9c 	bl	800c950 <HAL_TIM_Base_Init>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2800      	cmp	r0, #0
 8002a1c:	f040 8099 	bne.w	8002b52 <main+0xbf2>
  htim5.Instance = TIM5;
 8002a20:	4c4f      	ldr	r4, [pc, #316]	; (8002b60 <main+0xc00>)
  htim5.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002a22:	2110      	movs	r1, #16
  htim5.Init.Period = 4;
 8002a24:	2204      	movs	r2, #4
  htim5.Instance = TIM5;
 8002a26:	4f4f      	ldr	r7, [pc, #316]	; (8002b64 <main+0xc04>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a28:	9025      	str	r0, [sp, #148]	; 0x94
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002a2a:	4620      	mov	r0, r4
  htim5.Init.Prescaler = 0;
 8002a2c:	6063      	str	r3, [r4, #4]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a2e:	6123      	str	r3, [r4, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a30:	61a3      	str	r3, [r4, #24]
  htim5.Instance = TIM5;
 8002a32:	6027      	str	r7, [r4, #0]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a34:	9328      	str	r3, [sp, #160]	; 0xa0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a36:	930f      	str	r3, [sp, #60]	; 0x3c
  htim5.Init.Period = 4;
 8002a38:	e9c4 1202 	strd	r1, r2, [r4, #8]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a3c:	e9cd 3326 	strd	r3, r3, [sp, #152]	; 0x98
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a40:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002a44:	f009 ff84 	bl	800c950 <HAL_TIM_Base_Init>
 8002a48:	2800      	cmp	r0, #0
 8002a4a:	f040 8082 	bne.w	8002b52 <main+0xbf2>
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002a4e:	a925      	add	r1, sp, #148	; 0x94
 8002a50:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a52:	f8cd 8094 	str.w	r8, [sp, #148]	; 0x94
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002a56:	f009 fa8d 	bl	800bf74 <HAL_TIM_ConfigClockSource>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2800      	cmp	r0, #0
 8002a5e:	d178      	bne.n	8002b52 <main+0xbf2>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002a60:	4620      	mov	r0, r4
 8002a62:	a90d      	add	r1, sp, #52	; 0x34
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a64:	930d      	str	r3, [sp, #52]	; 0x34
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a66:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002a68:	f00b fa40 	bl	800deec <HAL_TIMEx_MasterConfigSynchronization>
 8002a6c:	4605      	mov	r5, r0
 8002a6e:	2800      	cmp	r0, #0
 8002a70:	d16f      	bne.n	8002b52 <main+0xbf2>
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 8002a72:	683b      	ldr	r3, [r7, #0]
  HAL_NVIC_SetPriority(USART2_IRQn, 7, 0);
 8002a74:	4602      	mov	r2, r0
 8002a76:	2107      	movs	r1, #7
 8002a78:	2026      	movs	r0, #38	; 0x26
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 8002a7a:	f043 0308 	orr.w	r3, r3, #8
  ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 8002a7e:	4c3a      	ldr	r4, [pc, #232]	; (8002b68 <main+0xc08>)
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 8002a80:	603b      	str	r3, [r7, #0]
  HAL_NVIC_SetPriority(USART2_IRQn, 7, 0);
 8002a82:	f003 f9d5 	bl	8005e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a86:	2026      	movs	r0, #38	; 0x26
 8002a88:	f003 fa18 	bl	8005ebc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART6_IRQn, 6, 0);
 8002a8c:	462a      	mov	r2, r5
 8002a8e:	2106      	movs	r1, #6
 8002a90:	2047      	movs	r0, #71	; 0x47
 8002a92:	f003 f9cd 	bl	8005e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002a96:	2047      	movs	r0, #71	; 0x47
 8002a98:	f003 fa10 	bl	8005ebc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC_IRQn, 6, 0);
 8002a9c:	462a      	mov	r2, r5
 8002a9e:	2106      	movs	r1, #6
 8002aa0:	2012      	movs	r0, #18
 8002aa2:	f003 f9c5 	bl	8005e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002aa6:	2012      	movs	r0, #18
 8002aa8:	f003 fa08 	bl	8005ebc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 8002aac:	462a      	mov	r2, r5
 8002aae:	2106      	movs	r1, #6
 8002ab0:	2028      	movs	r0, #40	; 0x28
 8002ab2:	f003 f9bd 	bl	8005e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002ab6:	2028      	movs	r0, #40	; 0x28
 8002ab8:	f003 fa00 	bl	8005ebc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 1, 0);
 8002abc:	462a      	mov	r2, r5
 8002abe:	2101      	movs	r1, #1
 8002ac0:	202d      	movs	r0, #45	; 0x2d
 8002ac2:	f003 f9b5 	bl	8005e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002ac6:	202d      	movs	r0, #45	; 0x2d
 8002ac8:	f003 f9f8 	bl	8005ebc <HAL_NVIC_EnableIRQ>
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8002acc:	a83d      	add	r0, sp, #244	; 0xf4
  osMutexDef(myMutex01);
 8002ace:	e9cd 553d 	strd	r5, r5, [sp, #244]	; 0xf4
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8002ad2:	f00e fa2f 	bl	8010f34 <osMutexCreate>
 8002ad6:	4b25      	ldr	r3, [pc, #148]	; (8002b6c <main+0xc0c>)
  ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 8002ad8:	2101      	movs	r1, #1
  osSemaphoreDef(ssicontent);
 8002ada:	9541      	str	r5, [sp, #260]	; 0x104
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8002adc:	6018      	str	r0, [r3, #0]
  ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 8002ade:	a841      	add	r0, sp, #260	; 0x104
  osSemaphoreDef(ssicontent);
 8002ae0:	9542      	str	r5, [sp, #264]	; 0x108
  ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 8002ae2:	f00e fa83 	bl	8010fec <osSemaphoreCreate>
  osTimerDef(myTimer01, Callback01);
 8002ae6:	4b22      	ldr	r3, [pc, #136]	; (8002b70 <main+0xc10>)
  myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8002ae8:	462a      	mov	r2, r5
  ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 8002aea:	6020      	str	r0, [r4, #0]
  myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8002aec:	2101      	movs	r1, #1
 8002aee:	a845      	add	r0, sp, #276	; 0x114
  osMessageQDef(myQueue01, 256, uint16_t);
 8002af0:	4c20      	ldr	r4, [pc, #128]	; (8002b74 <main+0xc14>)
  osTimerDef(myTimer01, Callback01);
 8002af2:	9345      	str	r3, [sp, #276]	; 0x114
 8002af4:	9546      	str	r5, [sp, #280]	; 0x118
  myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8002af6:	f00e f9ff 	bl	8010ef8 <osTimerCreate>
 8002afa:	4b1f      	ldr	r3, [pc, #124]	; (8002b78 <main+0xc18>)
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8002afc:	f104 0710 	add.w	r7, r4, #16
  myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8002b00:	6018      	str	r0, [r3, #0]
  osMessageQDef(myQueue01, 256, uint16_t);
 8002b02:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002b06:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8002b0a:	4630      	mov	r0, r6
 8002b0c:	4629      	mov	r1, r5
 8002b0e:	f00e fac5 	bl	801109c <osMessageCreate>
 8002b12:	4b1a      	ldr	r3, [pc, #104]	; (8002b7c <main+0xc1c>)
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8002b14:	ae4e      	add	r6, sp, #312	; 0x138
  osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 1024);
 8002b16:	342c      	adds	r4, #44	; 0x2c
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8002b18:	6018      	str	r0, [r3, #0]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8002b1a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8002b1c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002b1e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8002b22:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002b26:	4629      	mov	r1, r5
 8002b28:	a84e      	add	r0, sp, #312	; 0x138
 8002b2a:	f00e f9b3 	bl	8010e94 <osThreadCreate>
 8002b2e:	4b14      	ldr	r3, [pc, #80]	; (8002b80 <main+0xc20>)
  osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 1024);
 8002b30:	ae55      	add	r6, sp, #340	; 0x154
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002b32:	6018      	str	r0, [r3, #0]
  osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 1024);
 8002b34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b36:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002b38:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002b3c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  LPTaskHandle = osThreadCreate(osThread(LPTask), NULL);
 8002b40:	4629      	mov	r1, r5
 8002b42:	a855      	add	r0, sp, #340	; 0x154
 8002b44:	f00e f9a6 	bl	8010e94 <osThreadCreate>
 8002b48:	4b0e      	ldr	r3, [pc, #56]	; (8002b84 <main+0xc24>)
 8002b4a:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8002b4c:	f00e f994 	bl	8010e78 <osKernelStart>
 8002b50:	e7fe      	b.n	8002b50 <main+0xbf0>
    Error_Handler();
 8002b52:	f7ff f985 	bl	8001e60 <Error_Handler>
 8002b56:	bf00      	nop
 8002b58:	20023204 	.word	0x20023204
 8002b5c:	40002000 	.word	0x40002000
 8002b60:	20022ba8 	.word	0x20022ba8
 8002b64:	40000c00 	.word	0x40000c00
 8002b68:	20022f48 	.word	0x20022f48
 8002b6c:	20023284 	.word	0x20023284
 8002b70:	080015ad 	.word	0x080015ad
 8002b74:	08024768 	.word	0x08024768
 8002b78:	20022fcc 	.word	0x20022fcc
 8002b7c:	200230e0 	.word	0x200230e0
 8002b80:	20022834 	.word	0x20022834
 8002b84:	20022b1c 	.word	0x20022b1c

08002b88 <StartDefaultTask>:
{
 8002b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b8a:	b085      	sub	sp, #20
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, Build=%d\n", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2],
 8002b8c:	f242 7616 	movw	r6, #10006	; 0x2716
  MX_USB_DEVICE_Init();
 8002b90:	f01c fb8a 	bl	801f2a8 <MX_USB_DEVICE_Init>
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, Build=%d\n", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2],
 8002b94:	250b      	movs	r5, #11
  MX_LWIP_Init();
 8002b96:	f00c ffe9 	bl	800fb6c <MX_LWIP_Init>
	printf("\n\n-------------------------------------------------------------------\n");
 8002b9a:	487d      	ldr	r0, [pc, #500]	; (8002d90 <StartDefaultTask+0x208>)
 8002b9c:	f01d ff9c 	bl	8020ad8 <puts>
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, Build=%d\n", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2],
 8002ba0:	2400      	movs	r4, #0
 8002ba2:	4b7c      	ldr	r3, [pc, #496]	; (8002d94 <StartDefaultTask+0x20c>)
 8002ba4:	4a7c      	ldr	r2, [pc, #496]	; (8002d98 <StartDefaultTask+0x210>)
 8002ba6:	497d      	ldr	r1, [pc, #500]	; (8002d9c <StartDefaultTask+0x214>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6812      	ldr	r2, [r2, #0]
 8002bac:	6809      	ldr	r1, [r1, #0]
 8002bae:	487c      	ldr	r0, [pc, #496]	; (8002da0 <StartDefaultTask+0x218>)
 8002bb0:	9400      	str	r4, [sp, #0]
 8002bb2:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8002bb6:	f01d ff07 	bl	80209c8 <iprintf>
	if (!(netif_is_link_up(&gnetif))) {
 8002bba:	4b7a      	ldr	r3, [pc, #488]	; (8002da4 <StartDefaultTask+0x21c>)
 8002bbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bc0:	075b      	lsls	r3, r3, #29
 8002bc2:	d41d      	bmi.n	8002c00 <StartDefaultTask+0x78>
		printf("LAN interface appears disconnected\n\r");
 8002bc4:	4878      	ldr	r0, [pc, #480]	; (8002da8 <StartDefaultTask+0x220>)
 8002bc6:	2432      	movs	r4, #50	; 0x32
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 8002bc8:	4d78      	ldr	r5, [pc, #480]	; (8002dac <StartDefaultTask+0x224>)
		printf("LAN interface appears disconnected\n\r");
 8002bca:	f01d fefd 	bl	80209c8 <iprintf>
			osDelay(50);
 8002bce:	2032      	movs	r0, #50	; 0x32
 8002bd0:	f00e f98a 	bl	8010ee8 <osDelay>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bda:	4628      	mov	r0, r5
 8002bdc:	f005 fe3c 	bl	8008858 <HAL_GPIO_WritePin>
			osDelay(50);
 8002be0:	2032      	movs	r0, #50	; 0x32
 8002be2:	f00e f981 	bl	8010ee8 <osDelay>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_RESET);	// Splat D5 led off
 8002be6:	2200      	movs	r2, #0
 8002be8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bec:	4628      	mov	r0, r5
 8002bee:	f005 fe33 	bl	8008858 <HAL_GPIO_WritePin>
		for (i = 0; i < 50; i++) {
 8002bf2:	3c01      	subs	r4, #1
 8002bf4:	d1eb      	bne.n	8002bce <StartDefaultTask+0x46>
		printf("************* REBOOTING **************\n");
 8002bf6:	486e      	ldr	r0, [pc, #440]	; (8002db0 <StartDefaultTask+0x228>)
 8002bf8:	f01d ff6e 	bl	8020ad8 <puts>
		rebootme();
 8002bfc:	f7ff f848 	bl	8001c90 <rebootme>
	netif = netif_default;
 8002c00:	4b6c      	ldr	r3, [pc, #432]	; (8002db4 <StartDefaultTask+0x22c>)
	globalfreeze = 0;		// Allow UDP streaming
 8002c02:	4a6d      	ldr	r2, [pc, #436]	; (8002db8 <StartDefaultTask+0x230>)
	netif = netif_default;
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4f6d      	ldr	r7, [pc, #436]	; (8002dbc <StartDefaultTask+0x234>)
	netif_set_link_callback(netif, netif_link_callbk_fn);
 8002c08:	4618      	mov	r0, r3
 8002c0a:	496d      	ldr	r1, [pc, #436]	; (8002dc0 <StartDefaultTask+0x238>)
	netif = netif_default;
 8002c0c:	603b      	str	r3, [r7, #0]
	globalfreeze = 0;		// Allow UDP streaming
 8002c0e:	6014      	str	r4, [r2, #0]
	netif_set_link_callback(netif, netif_link_callbk_fn);
 8002c10:	f013 fc98 	bl	8016544 <netif_set_link_callback>
	netif_set_status_callback(netif, netif_status_callbk_fn);
 8002c14:	6838      	ldr	r0, [r7, #0]
 8002c16:	496b      	ldr	r1, [pc, #428]	; (8002dc4 <StartDefaultTask+0x23c>)
 8002c18:	f013 fc50 	bl	80164bc <netif_set_status_callback>
	statuspkt.uid = BUILDNO;		// 16 bits
 8002c1c:	4b6a      	ldr	r3, [pc, #424]	; (8002dc8 <StartDefaultTask+0x240>)
	statuspkt.adctrigoff = TRIG_THRES;
 8002c1e:	2264      	movs	r2, #100	; 0x64
	t2cap[0] = 44444444;
 8002c20:	496a      	ldr	r1, [pc, #424]	; (8002dcc <StartDefaultTask+0x244>)
	statuspkt.uid = BUILDNO;		// 16 bits
 8002c22:	f8a3 605c 	strh.w	r6, [r3, #92]	; 0x5c
	statuspkt.majorversion = MAJORVERSION;
 8002c26:	f883 4070 	strb.w	r4, [r3, #112]	; 0x70
	statuspkt.minorversion = MINORVERSION;
 8002c2a:	f883 5071 	strb.w	r5, [r3, #113]	; 0x71
	statuspkt.udppknum = 0;
 8002c2e:	601c      	str	r4, [r3, #0]
	statuspkt.sysuptime = 0;
 8002c30:	665c      	str	r4, [r3, #100]	; 0x64
	statuspkt.netuptime = 0;
 8002c32:	669c      	str	r4, [r3, #104]	; 0x68
	statuspkt.gpsuptime = 0;
 8002c34:	66dc      	str	r4, [r3, #108]	; 0x6c
	statuspkt.adcpktssent = 0;
 8002c36:	f8a3 405e 	strh.w	r4, [r3, #94]	; 0x5e
	statuspkt.adctrigoff = TRIG_THRES;
 8002c3a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	statuspkt.adcudpover = 0;		// debug use count overruns
 8002c3e:	679c      	str	r4, [r3, #120]	; 0x78
	statuspkt.trigcount = 0;		// debug use adc trigger count
 8002c40:	67dc      	str	r4, [r3, #124]	; 0x7c
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
 8002c42:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
	statuspkt.bconf = 0;
 8002c46:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
	statuspkt.bconf |= 0x01;	// splat board version 1
 8002c4a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
	t2cap[0] = 44444444;
 8002c4e:	4860      	ldr	r0, [pc, #384]	; (8002dd0 <StartDefaultTask+0x248>)
	statuspkt.bconf |= 0x01;	// splat board version 1
 8002c50:	f042 0201 	orr.w	r2, r2, #1
	t2cap[0] = 44444444;
 8002c54:	6008      	str	r0, [r1, #0]
	statuspkt.bconf |= 0x01;	// splat board version 1
 8002c56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	stat = setupneo();
 8002c5a:	f000 fa0d 	bl	8003078 <setupneo>
	if (stat != HAL_OK) {
 8002c5e:	2800      	cmp	r0, #0
 8002c60:	f040 8092 	bne.w	8002d88 <StartDefaultTask+0x200>
	initsplat();
 8002c64:	f000 fe8a 	bl	800397c <initsplat>
	printf("Setting up timers\n");
 8002c68:	485a      	ldr	r0, [pc, #360]	; (8002dd4 <StartDefaultTask+0x24c>)
 8002c6a:	f01d ff35 	bl	8020ad8 <puts>
	if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {	// give the ssi generation semaphore
 8002c6e:	2300      	movs	r3, #0
 8002c70:	4a59      	ldr	r2, [pc, #356]	; (8002dd8 <StartDefaultTask+0x250>)
 8002c72:	4619      	mov	r1, r3
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);		// precision uS timer
 8002c74:	4c59      	ldr	r4, [pc, #356]	; (8002ddc <StartDefaultTask+0x254>)
	if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {	// give the ssi generation semaphore
 8002c76:	6810      	ldr	r0, [r2, #0]
 8002c78:	461a      	mov	r2, r3
 8002c7a:	f00e fc4b 	bl	8011514 <xQueueGenericSend>
	HAL_TIM_Base_Start_IT(&htim6);		// basic packet timestamp 32 bits
 8002c7e:	4858      	ldr	r0, [pc, #352]	; (8002de0 <StartDefaultTask+0x258>)
 8002c80:	f009 f8f2 	bl	800be68 <HAL_TIM_Base_Start_IT>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);		// precision uS timer
 8002c84:	2200      	movs	r2, #0
 8002c86:	6820      	ldr	r0, [r4, #0]
 8002c88:	4611      	mov	r1, r2
 8002c8a:	f00a fed9 	bl	800da40 <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);		// precision uS timer
 8002c8e:	6820      	ldr	r0, [r4, #0]
 8002c90:	2200      	movs	r2, #0
 8002c92:	2104      	movs	r1, #4
 8002c94:	f00a fed4 	bl	800da40 <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_4, TIM_CCx_DISABLE);		// precision uS timer
 8002c98:	2200      	movs	r2, #0
 8002c9a:	6820      	ldr	r0, [r4, #0]
 8002c9c:	210c      	movs	r1, #12
 8002c9e:	f00a fecf 	bl	800da40 <TIM_CCxChannelCmd>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);		// precision uS timer
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	4620      	mov	r0, r4
 8002ca6:	f00b f853 	bl	800dd50 <HAL_TIM_IC_Stop_DMA>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_2);		// precision uS timer
 8002caa:	2104      	movs	r1, #4
 8002cac:	4620      	mov	r0, r4
 8002cae:	f00b f84f 	bl	800dd50 <HAL_TIM_IC_Stop_DMA>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_4);		// precision uS timer
 8002cb2:	210c      	movs	r1, #12
 8002cb4:	4620      	mov	r0, r4
 8002cb6:	f00b f84b 	bl	800dd50 <HAL_TIM_IC_Stop_DMA>
	if ((err = HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_3, t2cap, (sizeof(t2cap) / 4))) != HAL_OK) {
 8002cba:	4620      	mov	r0, r4
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	4a43      	ldr	r2, [pc, #268]	; (8002dcc <StartDefaultTask+0x244>)
 8002cc0:	2108      	movs	r1, #8
 8002cc2:	f00a ff1b 	bl	800dafc <HAL_TIM_IC_Start_DMA>
 8002cc6:	4605      	mov	r5, r0
 8002cc8:	2800      	cmp	r0, #0
 8002cca:	d157      	bne.n	8002d7c <StartDefaultTask+0x1f4>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);	// capture precision timer
 8002ccc:	6820      	ldr	r0, [r4, #0]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	2108      	movs	r1, #8
	myip = ip.addr;
 8002cd2:	4c44      	ldr	r4, [pc, #272]	; (8002de4 <StartDefaultTask+0x25c>)
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);	// capture precision timer
 8002cd4:	f00a feb4 	bl	800da40 <TIM_CCxChannelCmd>
	dhcp = netif_dhcp_data(netif);		// do not call this too early
 8002cd8:	683b      	ldr	r3, [r7, #0]
	printf("*****************************************\n");
 8002cda:	4843      	ldr	r0, [pc, #268]	; (8002de8 <StartDefaultTask+0x260>)
	ip = dhcp->offered_ip_addr;
 8002cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	uip = locateudp();
 8002cde:	4e43      	ldr	r6, [pc, #268]	; (8002dec <StartDefaultTask+0x264>)
	myip = ip.addr;
 8002ce0:	69db      	ldr	r3, [r3, #28]
 8002ce2:	6023      	str	r3, [r4, #0]
	printf("*****************************************\n");
 8002ce4:	f01d fef8 	bl	8020ad8 <puts>
	printf("This unit's IP address is %d:%d:%d:%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 8002ce8:	6821      	ldr	r1, [r4, #0]
 8002cea:	4841      	ldr	r0, [pc, #260]	; (8002df0 <StartDefaultTask+0x268>)
 8002cec:	0e0a      	lsrs	r2, r1, #24
 8002cee:	f3c1 4307 	ubfx	r3, r1, #16, #8
	while (lptask_init_done == 0)
 8002cf2:	4c40      	ldr	r4, [pc, #256]	; (8002df4 <StartDefaultTask+0x26c>)
	printf("This unit's IP address is %d:%d:%d:%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 8002cf4:	9200      	str	r2, [sp, #0]
 8002cf6:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8002cfa:	b2c9      	uxtb	r1, r1
 8002cfc:	f01d fe64 	bl	80209c8 <iprintf>
	printf("*****************************************\n");
 8002d00:	4839      	ldr	r0, [pc, #228]	; (8002de8 <StartDefaultTask+0x260>)
 8002d02:	f01d fee9 	bl	8020ad8 <puts>
	initialapisn();	// get initial s/n and UDP target; reboots if fails
 8002d06:	f002 fbad 	bl	8005464 <initialapisn>
	osDelay(1000);
 8002d0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d0e:	f00e f8eb 	bl	8010ee8 <osDelay>
	printf("Starting httpd web server\n");
 8002d12:	4839      	ldr	r0, [pc, #228]	; (8002df8 <StartDefaultTask+0x270>)
 8002d14:	f01d fee0 	bl	8020ad8 <puts>
	httpd_init();		// start the www server
 8002d18:	f011 fe10 	bl	801493c <httpd_init>
	init_httpd_ssi();	// set up the embedded tag handler
 8002d1c:	f002 fb4e 	bl	80053bc <init_httpd_ssi>
	printf("Warming up the sonic phaser\n");
 8002d20:	4836      	ldr	r0, [pc, #216]	; (8002dfc <StartDefaultTask+0x274>)
 8002d22:	f01d fed9 	bl	8020ad8 <puts>
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, phaser_wav, sizeof(phaser_wav),
 8002d26:	2208      	movs	r2, #8
 8002d28:	4629      	mov	r1, r5
 8002d2a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002d2e:	9200      	str	r2, [sp, #0]
 8002d30:	4833      	ldr	r0, [pc, #204]	; (8002e00 <StartDefaultTask+0x278>)
 8002d32:	4a34      	ldr	r2, [pc, #208]	; (8002e04 <StartDefaultTask+0x27c>)
 8002d34:	f003 f9d6 	bl	80060e4 <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(&htim7);		// fast interval DAC timer sample rate
 8002d38:	4833      	ldr	r0, [pc, #204]	; (8002e08 <StartDefaultTask+0x280>)
 8002d3a:	f009 f813 	bl	800bd64 <HAL_TIM_Base_Start>
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 8002d3e:	f00f fca5 	bl	801268c <xTaskGetCurrentTaskHandle>
 8002d42:	4b32      	ldr	r3, [pc, #200]	; (8002e0c <StartDefaultTask+0x284>)
 8002d44:	6018      	str	r0, [r3, #0]
	uip = locateudp();
 8002d46:	f001 ff8d 	bl	8004c64 <locateudp>
	main_init_done = 1; // let lptask now main has initialised
 8002d4a:	4b31      	ldr	r3, [pc, #196]	; (8002e10 <StartDefaultTask+0x288>)
 8002d4c:	2201      	movs	r2, #1
	uip = locateudp();
 8002d4e:	6030      	str	r0, [r6, #0]
	printf("Waiting for lptask to start\n");
 8002d50:	4830      	ldr	r0, [pc, #192]	; (8002e14 <StartDefaultTask+0x28c>)
	main_init_done = 1; // let lptask now main has initialised
 8002d52:	601a      	str	r2, [r3, #0]
	printf("Waiting for lptask to start\n");
 8002d54:	f01d fec0 	bl	8020ad8 <puts>
	while (lptask_init_done == 0)
 8002d58:	6823      	ldr	r3, [r4, #0]
 8002d5a:	b92b      	cbnz	r3, 8002d68 <StartDefaultTask+0x1e0>
		osDelay(100); // hold off starting udp railgun until LPtask has initalised
 8002d5c:	2064      	movs	r0, #100	; 0x64
 8002d5e:	f00e f8c3 	bl	8010ee8 <osDelay>
	while (lptask_init_done == 0)
 8002d62:	6823      	ldr	r3, [r4, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0f9      	beq.n	8002d5c <StartDefaultTask+0x1d4>
	startadc();		// start the ADC DMA loop
 8002d68:	f7fd feaa 	bl	8000ac0 <startadc>
		startudp(uip);		// should never return
 8002d6c:	6830      	ldr	r0, [r6, #0]
 8002d6e:	f001 ffad 	bl	8004ccc <startudp>
		printf("UDP stream exited!!!\n\r");
 8002d72:	4829      	ldr	r0, [pc, #164]	; (8002e18 <StartDefaultTask+0x290>)
 8002d74:	f01d fe28 	bl	80209c8 <iprintf>
		rebootme();
 8002d78:	f7fe ff8a 	bl	8001c90 <rebootme>
		printf("TIM_Base_Start_DMA err %i", err);
 8002d7c:	4601      	mov	r1, r0
 8002d7e:	4827      	ldr	r0, [pc, #156]	; (8002e1c <StartDefaultTask+0x294>)
 8002d80:	f01d fe22 	bl	80209c8 <iprintf>
		Error_Handler();
 8002d84:	f7ff f86c 	bl	8001e60 <Error_Handler>
		printf("Neo7 setup returned HAL error\n\r");	// but don't reboot
 8002d88:	4825      	ldr	r0, [pc, #148]	; (8002e20 <StartDefaultTask+0x298>)
 8002d8a:	f01d fe1d 	bl	80209c8 <iprintf>
 8002d8e:	e769      	b.n	8002c64 <StartDefaultTask+0xdc>
 8002d90:	08025140 	.word	0x08025140
 8002d94:	1ff0f428 	.word	0x1ff0f428
 8002d98:	1ff0f424 	.word	0x1ff0f424
 8002d9c:	1ff0f420 	.word	0x1ff0f420
 8002da0:	08025188 	.word	0x08025188
 8002da4:	200238f8 	.word	0x200238f8
 8002da8:	080251c0 	.word	0x080251c0
 8002dac:	40020c00 	.word	0x40020c00
 8002db0:	080251e8 	.word	0x080251e8
 8002db4:	2003615c 	.word	0x2003615c
 8002db8:	20023430 	.word	0x20023430
 8002dbc:	20022830 	.word	0x20022830
 8002dc0:	08001cbd 	.word	0x08001cbd
 8002dc4:	080015a1 	.word	0x080015a1
 8002dc8:	20022774 	.word	0x20022774
 8002dcc:	20022820 	.word	0x20022820
 8002dd0:	02a62b1c 	.word	0x02a62b1c
 8002dd4:	08025230 	.word	0x08025230
 8002dd8:	20022f48 	.word	0x20022f48
 8002ddc:	200230e4 	.word	0x200230e4
 8002de0:	20022f4c 	.word	0x20022f4c
 8002de4:	20022ba4 	.word	0x20022ba4
 8002de8:	08025260 	.word	0x08025260
 8002dec:	20022ba0 	.word	0x20022ba0
 8002df0:	0802528c 	.word	0x0802528c
 8002df4:	20001628 	.word	0x20001628
 8002df8:	080252b4 	.word	0x080252b4
 8002dfc:	080252d0 	.word	0x080252d0
 8002e00:	20022e6c 	.word	0x20022e6c
 8002e04:	080253ac 	.word	0x080253ac
 8002e08:	20023244 	.word	0x20023244
 8002e0c:	200007a8 	.word	0x200007a8
 8002e10:	2000162c 	.word	0x2000162c
 8002e14:	080252ec 	.word	0x080252ec
 8002e18:	08025308 	.word	0x08025308
 8002e1c:	08025244 	.word	0x08025244
 8002e20:	08025210 	.word	0x08025210

08002e24 <assert_failed>:
{
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop

08002e28 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 8002e28:	b500      	push	{lr}
	/* Place your implementation of fputc here */
	/* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
	{
		if (ch == '\n')
 8002e2a:	280a      	cmp	r0, #10
PUTCHAR_PROTOTYPE {
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	9001      	str	r0, [sp, #4]
		if (ch == '\n')
 8002e30:	d009      	beq.n	8002e46 <__io_putchar+0x1e>
			HAL_UART_Transmit(&huart2, "\r\n", 2, 10);
		else
		HAL_UART_Transmit(&huart2, &ch, 1, 10);
 8002e32:	230a      	movs	r3, #10
 8002e34:	2201      	movs	r2, #1
 8002e36:	a901      	add	r1, sp, #4
 8002e38:	4808      	ldr	r0, [pc, #32]	; (8002e5c <__io_putchar+0x34>)
 8002e3a:	f00b ff09 	bl	800ec50 <HAL_UART_Transmit>

	return ch;
	}
}
 8002e3e:	9801      	ldr	r0, [sp, #4]
 8002e40:	b003      	add	sp, #12
 8002e42:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e46:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart2, "\r\n", 2, 10);
 8002e48:	2202      	movs	r2, #2
 8002e4a:	4905      	ldr	r1, [pc, #20]	; (8002e60 <__io_putchar+0x38>)
 8002e4c:	4803      	ldr	r0, [pc, #12]	; (8002e5c <__io_putchar+0x34>)
 8002e4e:	f00b feff 	bl	800ec50 <HAL_UART_Transmit>
}
 8002e52:	9801      	ldr	r0, [sp, #4]
 8002e54:	b003      	add	sp, #12
 8002e56:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e5a:	bf00      	nop
 8002e5c:	20023124 	.word	0x20023124
 8002e60:	08025ac0 	.word	0x08025ac0

08002e64 <calcepoch32>:
}
#endif

#if 1	// new version below
struct tm* getgpstime() {
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8002e64:	4a0f      	ldr	r2, [pc, #60]	; (8002ea4 <calcepoch32+0x40>)
	return (&now);
}

// calculate epoch seconds from 1970 to now using GPS date time fields (32 bit unsigned, not 64 bit time_t as used by the library)
// the number of seconds that have elapsed since January 1, 1970 (midnight UTC/GMT), not counting leap seconds
uint32_t calcepoch32() {
 8002e66:	b538      	push	{r3, r4, r5, lr}
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8002e68:	8914      	ldrh	r4, [r2, #8]
	now.tm_isdst = -1;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
 8002e6a:	f04f 35ff 	mov.w	r5, #4294967295
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 8002e6e:	7a91      	ldrb	r1, [r2, #10]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8002e70:	4b0d      	ldr	r3, [pc, #52]	; (8002ea8 <calcepoch32+0x44>)
 8002e72:	f2a4 746c 	subw	r4, r4, #1900	; 0x76c
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 8002e76:	4429      	add	r1, r5
	now.tm_isdst = -1;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
 8002e78:	621d      	str	r5, [r3, #32]

	epochtime = mktime(getgpstime());
 8002e7a:	4618      	mov	r0, r3
	now.tm_mday = statuspkt.NavPvt.day;          // Day of the month
 8002e7c:	7ad5      	ldrb	r5, [r2, #11]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8002e7e:	615c      	str	r4, [r3, #20]
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 8002e80:	6119      	str	r1, [r3, #16]
	now.tm_hour = statuspkt.NavPvt.hour;
 8002e82:	7b14      	ldrb	r4, [r2, #12]
	now.tm_min = statuspkt.NavPvt.min;
 8002e84:	7b51      	ldrb	r1, [r2, #13]
	now.tm_sec = statuspkt.NavPvt.sec;
 8002e86:	7b92      	ldrb	r2, [r2, #14]
	now.tm_hour = statuspkt.NavPvt.hour;
 8002e88:	e9c3 4502 	strd	r4, r5, [r3, #8]
	now.tm_sec = statuspkt.NavPvt.sec;
 8002e8c:	e9c3 2100 	strd	r2, r1, [r3]
	epochtime = mktime(getgpstime());
 8002e90:	f01c fefc 	bl	801fc8c <mktime>
 8002e94:	4b05      	ldr	r3, [pc, #20]	; (8002eac <calcepoch32+0x48>)
 8002e96:	4602      	mov	r2, r0
	return (uint32_t)(epochtime + (time_t) (10 * 60 * 60));		// add ten hours
#else
    return (uint32_t)(epochtime);
#endif

}
 8002e98:	f648 40a0 	movw	r0, #36000	; 0x8ca0
	epochtime = mktime(getgpstime());
 8002e9c:	e9c3 2100 	strd	r2, r1, [r3]
}
 8002ea0:	4410      	add	r0, r2
 8002ea2:	bd38      	pop	{r3, r4, r5, pc}
 8002ea4:	20022774 	.word	0x20022774
 8002ea8:	200232e8 	.word	0x200232e8
 8002eac:	20023368 	.word	0x20023368

08002eb0 <disableNmea>:

	sendPacket(packet, sizeof(packet));
}

// Function, sending set of packets to the receiver to disable NMEA messages
void disableNmea() {
 8002eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// Array of two bytes for CFG-MSG packets payload
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 8002eb4:	4c20      	ldr	r4, [pc, #128]	; (8002f38 <disableNmea+0x88>)
void disableNmea() {
 8002eb6:	b08e      	sub	sp, #56	; 0x38
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8002eb8:	4f20      	ldr	r7, [pc, #128]	; (8002f3c <disableNmea+0x8c>)
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 8002eba:	ae04      	add	r6, sp, #16
 8002ebc:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8002ec0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ec2:	4635      	mov	r5, r6
 8002ec4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002ec6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ec8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002eca:	e894 0003 	ldmia.w	r4, {r0, r1}
			{ 0xF0, 0x06 }, { 0xF0, 0x02 }, { 0xF0, 0x07 }, { 0xF0, 0x03 }, { 0xF0, 0x04 }, { 0xF0, 0x0E },
			{ 0xF0, 0x0F }, { 0xF0, 0x05 }, { 0xF0, 0x08 }, { 0xF1, 0x00 }, { 0xF1, 0x01 }, { 0xF1, 0x03 },
			{ 0xF1, 0x04 }, { 0xF1, 0x05 }, { 0xF1, 0x06 }, };

	// CFG-MSG packet buffer
	byte packet[] = { 0xB5, // sync char 1
 8002ece:	f104 0208 	add.w	r2, r4, #8
 8002ed2:	ab01      	add	r3, sp, #4
 8002ed4:	f10d 040d 	add.w	r4, sp, #13
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 8002ed8:	e886 0003 	stmia.w	r6, {r0, r1}
	byte packet[] = { 0xB5, // sync char 1
 8002edc:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ede:	0c16      	lsrs	r6, r2, #16
 8002ee0:	c303      	stmia	r3!, {r0, r1}
 8002ee2:	f823 2b02 	strh.w	r2, [r3], #2
 8002ee6:	701e      	strb	r6, [r3, #0]
		for (byte j = 0; j < sizeof(*messages); j++) {
			packet[payloadOffset + j] = messages[i][j];
		}

		// Set checksum bytes to the null
		packet[packetSize - 2] = 0x00;
 8002ee8:	2600      	movs	r6, #0
		packet[packetSize - 1] = 0x00;
 8002eea:	2200      	movs	r2, #0
			packet[payloadOffset + j] = messages[i][j];
 8002eec:	f895 c000 	ldrb.w	ip, [r5]
 8002ef0:	7868      	ldrb	r0, [r5, #1]
 8002ef2:	f10d 0106 	add.w	r1, sp, #6
		packet[packetSize - 1] = 0x00;
 8002ef6:	4613      	mov	r3, r2
		packet[packetSize - 2] = 0x00;
 8002ef8:	f88d 600d 	strb.w	r6, [sp, #13]
		packet[packetSize - 1] = 0x00;
 8002efc:	f88d 600e 	strb.w	r6, [sp, #14]
			packet[payloadOffset + j] = messages[i][j];
 8002f00:	f88d c00a 	strb.w	ip, [sp, #10]
 8002f04:	f88d 000b 	strb.w	r0, [sp, #11]

		// Calculate checksum over the packet buffer excluding sync (first two)
		// and checksum chars (last two)
		for (byte j = 0; j < packetSize - 4; j++) {
			packet[packetSize - 2] += packet[2 + j];
 8002f08:	f811 0b01 	ldrb.w	r0, [r1], #1
 8002f0c:	4403      	add	r3, r0
		for (byte j = 0; j < packetSize - 4; j++) {
 8002f0e:	428c      	cmp	r4, r1
			packet[packetSize - 2] += packet[2 + j];
 8002f10:	b2db      	uxtb	r3, r3
			packet[packetSize - 1] += packet[packetSize - 2];
 8002f12:	441a      	add	r2, r3
			packet[packetSize - 2] += packet[2 + j];
 8002f14:	f88d 300d 	strb.w	r3, [sp, #13]
			packet[packetSize - 1] += packet[packetSize - 2];
 8002f18:	b2d2      	uxtb	r2, r2
 8002f1a:	f88d 200e 	strb.w	r2, [sp, #14]
		for (byte j = 0; j < packetSize - 4; j++) {
 8002f1e:	d1f3      	bne.n	8002f08 <disableNmea+0x58>
 8002f20:	3502      	adds	r5, #2
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8002f22:	2364      	movs	r3, #100	; 0x64
 8002f24:	220b      	movs	r2, #11
 8002f26:	a901      	add	r1, sp, #4
 8002f28:	4638      	mov	r0, r7
 8002f2a:	f00b fe91 	bl	800ec50 <HAL_UART_Transmit>
	for (byte i = 0; i < sizeof(messages) / sizeof(*messages); i++) {
 8002f2e:	45a8      	cmp	r8, r5
 8002f30:	d1db      	bne.n	8002eea <disableNmea+0x3a>
		}

		sendPacket(packet, packetSize);
	}
}
 8002f32:	b00e      	add	sp, #56	; 0x38
 8002f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f38:	080247c8 	.word	0x080247c8
 8002f3c:	20022fe0 	.word	0x20022fe0

08002f40 <changeFrequency>:
	sendPacket(packet, sizeof(packet));
}

// Function, sending packet to the receiver to change frequency to 100 ms
#define SEC 1
void changeFrequency() {
 8002f40:	b510      	push	{r4, lr}
	// CFG-RATE packet
	byte packet[] = { 0xB5, // sync char 1
 8002f42:	4b07      	ldr	r3, [pc, #28]	; (8002f60 <changeFrequency+0x20>)
void changeFrequency() {
 8002f44:	b084      	sub	sp, #16
	byte packet[] = { 0xB5, // sync char 1
 8002f46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f48:	466c      	mov	r4, sp
 8002f4a:	c407      	stmia	r4!, {r0, r1, r2}
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8002f4c:	220e      	movs	r2, #14
	byte packet[] = { 0xB5, // sync char 1
 8002f4e:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8002f50:	4669      	mov	r1, sp
 8002f52:	2364      	movs	r3, #100	; 0x64
 8002f54:	4803      	ldr	r0, [pc, #12]	; (8002f64 <changeFrequency+0x24>)
 8002f56:	f00b fe7b 	bl	800ec50 <HAL_UART_Transmit>
			0x01, // CK_A
			0x39, // CK_B
#endif
			};
	sendPacket(packet, sizeof(packet));
}
 8002f5a:	b004      	add	sp, #16
 8002f5c:	bd10      	pop	{r4, pc}
 8002f5e:	bf00      	nop
 8002f60:	08024818 	.word	0x08024818
 8002f64:	20022fe0 	.word	0x20022fe0

08002f68 <disableUnnecessaryChannels>:

// Function, sending packet to the receiver to disable unnecessary channels
void disableUnnecessaryChannels() {
 8002f68:	b530      	push	{r4, r5, lr}
	// CFG-GNSS packet
	byte packet[] = { 0xB5, // sync char 1
 8002f6a:	4d09      	ldr	r5, [pc, #36]	; (8002f90 <disableUnnecessaryChannels+0x28>)
void disableUnnecessaryChannels() {
 8002f6c:	b08d      	sub	sp, #52	; 0x34
	byte packet[] = { 0xB5, // sync char 1
 8002f6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f70:	ac01      	add	r4, sp, #4
 8002f72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f78:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8002f7c:	2364      	movs	r3, #100	; 0x64
	byte packet[] = { 0xB5, // sync char 1
 8002f7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8002f82:	222c      	movs	r2, #44	; 0x2c
 8002f84:	a901      	add	r1, sp, #4
 8002f86:	4803      	ldr	r0, [pc, #12]	; (8002f94 <disableUnnecessaryChannels+0x2c>)
 8002f88:	f00b fe62 	bl	800ec50 <HAL_UART_Transmit>
			0xA4, // CK_A
			0x25, // CK_B
			};

	sendPacket(packet, sizeof(packet));
}
 8002f8c:	b00d      	add	sp, #52	; 0x34
 8002f8e:	bd30      	pop	{r4, r5, pc}
 8002f90:	08024828 	.word	0x08024828
 8002f94:	20022fe0 	.word	0x20022fe0

08002f98 <enableNavPvt>:

// Function, sending packet to the receiver to enable NAV-PVT messages
void enableNavPvt() {
 8002f98:	b530      	push	{r4, r5, lr}
	// CFG-MSG packet
	byte packet[] = { 0xB5, // sync char 1
 8002f9a:	4a08      	ldr	r2, [pc, #32]	; (8002fbc <enableNavPvt+0x24>)
void enableNavPvt() {
 8002f9c:	b085      	sub	sp, #20
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8002f9e:	2364      	movs	r3, #100	; 0x64
	byte packet[] = { 0xB5, // sync char 1
 8002fa0:	ac01      	add	r4, sp, #4
 8002fa2:	ca07      	ldmia	r2, {r0, r1, r2}
 8002fa4:	c403      	stmia	r4!, {r0, r1}
 8002fa6:	0c15      	lsrs	r5, r2, #16
 8002fa8:	f824 2b02 	strh.w	r2, [r4], #2
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8002fac:	a901      	add	r1, sp, #4
 8002fae:	220b      	movs	r2, #11
 8002fb0:	4803      	ldr	r0, [pc, #12]	; (8002fc0 <enableNavPvt+0x28>)
	byte packet[] = { 0xB5, // sync char 1
 8002fb2:	7025      	strb	r5, [r4, #0]
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8002fb4:	f00b fe4c 	bl	800ec50 <HAL_UART_Transmit>
			0x13, // CK_A
			0x51, // CK_B
			};

	sendPacket(packet, sizeof(packet));
}
 8002fb8:	b005      	add	sp, #20
 8002fba:	bd30      	pop	{r4, r5, pc}
 8002fbc:	08024854 	.word	0x08024854
 8002fc0:	20022fe0 	.word	0x20022fe0

08002fc4 <enableNaTP5>:

// Function, to set time pulse2 to interval of 1pps
// pulse only running when GPS locked to UTC
void enableNaTP5() {
 8002fc4:	b530      	push	{r4, r5, lr}
	// CFG-MSG packet
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 8002fc6:	4d09      	ldr	r5, [pc, #36]	; (8002fec <enableNaTP5+0x28>)
void enableNaTP5() {
 8002fc8:	b08b      	sub	sp, #44	; 0x2c
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 8002fca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fcc:	466c      	mov	r4, sp
 8002fce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fd4:	e895 0003 	ldmia.w	r5, {r0, r1}
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8002fd8:	2364      	movs	r3, #100	; 0x64
 8002fda:	2228      	movs	r2, #40	; 0x28
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 8002fdc:	e884 0003 	stmia.w	r4, {r0, r1}
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8002fe0:	4669      	mov	r1, sp
 8002fe2:	4803      	ldr	r0, [pc, #12]	; (8002ff0 <enableNaTP5+0x2c>)
 8002fe4:	f00b fe34 	bl	800ec50 <HAL_UART_Transmit>
			0x0F, 0x00, 0x40, 0x42, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x86, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xF7, 0x00, 0x00, 0x00, 0xC9, 0x97 };

	sendPacket(packet, sizeof(packet));
}
 8002fe8:	b00b      	add	sp, #44	; 0x2c
 8002fea:	bd30      	pop	{r4, r5, pc}
 8002fec:	08024860 	.word	0x08024860
 8002ff0:	20022fe0 	.word	0x20022fe0

08002ff4 <IsPacketReady>:
	}
	return ((CK_A == PACKETstore[90]) && (CK_B == PACKETstore[91]));
}

// start/complete filling in the current packet
int IsPacketReady(unsigned char c) {
 8002ff4:	b470      	push	{r4, r5, r6}
	// get current position in packet
	unsigned char p = UbxGpsv.carriagePosition;
 8002ff6:	4d1c      	ldr	r5, [pc, #112]	; (8003068 <IsPacketReady+0x74>)
 8002ff8:	78eb      	ldrb	r3, [r5, #3]
	if (p < 4)     // this looks for PVT messages
 8002ffa:	2b03      	cmp	r3, #3
 8002ffc:	d809      	bhi.n	8003012 <IsPacketReady+0x1e>
			{
		// are we starting a packet?
		if (c == UBXGPS_HEADER[p]) {
 8002ffe:	4a1b      	ldr	r2, [pc, #108]	; (800306c <IsPacketReady+0x78>)
 8003000:	4619      	mov	r1, r3
 8003002:	5cd2      	ldrb	r2, [r2, r3]
 8003004:	4282      	cmp	r2, r0
 8003006:	d00e      	beq.n	8003026 <IsPacketReady+0x32>
			PACKETstore[p++] = c;
		} else {
			p = 0;
 8003008:	2300      	movs	r3, #0
				}
			}
		}
	}
	UbxGpsv.carriagePosition = p;
	return false;
 800300a:	2000      	movs	r0, #0
	UbxGpsv.carriagePosition = p;
 800300c:	70eb      	strb	r3, [r5, #3]
}
 800300e:	bc70      	pop	{r4, r5, r6}
 8003010:	4770      	bx	lr
		if (p < (2 + 4 + 84 + 2)) {
 8003012:	2b5b      	cmp	r3, #91	; 0x5b
 8003014:	d8f9      	bhi.n	800300a <IsPacketReady+0x16>
			PACKETstore[p++] = c;
 8003016:	1c5a      	adds	r2, r3, #1
 8003018:	4e15      	ldr	r6, [pc, #84]	; (8003070 <IsPacketReady+0x7c>)
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	54f0      	strb	r0, [r6, r3]
			if (p == (2 + 4 + 84 + 2)) {
 800301e:	2a5c      	cmp	r2, #92	; 0x5c
 8003020:	d006      	beq.n	8003030 <IsPacketReady+0x3c>
 8003022:	4613      	mov	r3, r2
 8003024:	e7f1      	b.n	800300a <IsPacketReady+0x16>
			PACKETstore[p++] = c;
 8003026:	3301      	adds	r3, #1
 8003028:	4811      	ldr	r0, [pc, #68]	; (8003070 <IsPacketReady+0x7c>)
 800302a:	b2db      	uxtb	r3, r3
 800302c:	5442      	strb	r2, [r0, r1]
 800302e:	e7ec      	b.n	800300a <IsPacketReady+0x16>
				UbxGpsv.carriagePosition = p;
 8003030:	2300      	movs	r3, #0
 8003032:	1c71      	adds	r1, r6, #1
 8003034:	f106 0459 	add.w	r4, r6, #89	; 0x59
	unsigned char CK_B = 0;
 8003038:	461a      	mov	r2, r3
				UbxGpsv.carriagePosition = p;
 800303a:	70eb      	strb	r3, [r5, #3]
		CK_A = CK_A + PACKETstore[i];
 800303c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8003040:	4403      	add	r3, r0
	for (int i = 2; i < (2 + 4 + 84); i++)		// skip sync bytes
 8003042:	428c      	cmp	r4, r1
		CK_A = CK_A + PACKETstore[i];
 8003044:	b2db      	uxtb	r3, r3
		CK_B = CK_B + CK_A;
 8003046:	441a      	add	r2, r3
 8003048:	b2d2      	uxtb	r2, r2
	for (int i = 2; i < (2 + 4 + 84); i++)		// skip sync bytes
 800304a:	d1f7      	bne.n	800303c <IsPacketReady+0x48>
	return ((CK_A == PACKETstore[90]) && (CK_B == PACKETstore[91]));
 800304c:	f896 105a 	ldrb.w	r1, [r6, #90]	; 0x5a
 8003050:	4299      	cmp	r1, r3
 8003052:	d1d9      	bne.n	8003008 <IsPacketReady+0x14>
 8003054:	f896 305b 	ldrb.w	r3, [r6, #91]	; 0x5b
 8003058:	4293      	cmp	r3, r2
 800305a:	d1d5      	bne.n	8003008 <IsPacketReady+0x14>
					gpsgood = 1;
 800305c:	2301      	movs	r3, #1
 800305e:	4a05      	ldr	r2, [pc, #20]	; (8003074 <IsPacketReady+0x80>)
					return true;
 8003060:	4618      	mov	r0, r3
					gpsgood = 1;
 8003062:	6013      	str	r3, [r2, #0]
					return true;
 8003064:	e7d3      	b.n	800300e <IsPacketReady+0x1a>
 8003066:	bf00      	nop
 8003068:	20000230 	.word	0x20000230
 800306c:	08025b14 	.word	0x08025b14
 8003070:	20023374 	.word	0x20023374
 8003074:	20001648 	.word	0x20001648

08003078 <setupneo>:
		printf("0x%02x ", data);
	}
}

// init neo7
HAL_StatusTypeDef setupneo() {
 8003078:	b510      	push	{r4, lr}
	HAL_StatusTypeDef stat;

	// Disabling NMEA messages by sending appropriate packets
//		printf("Disabling NMEA messages...\n\r");
	disableNmea();
 800307a:	f7ff ff19 	bl	8002eb0 <disableNmea>
	 * @param Size: amount of data to be received.
	 * @note   When the UART parity is enabled (PCE = 1), the received data contain
	 *         the parity bit (MSB position).
	 * @retval HAL status
	 */
	stat = HAL_UART_Receive_DMA(&huart6, rxdatabuf, 1);
 800307e:	2201      	movs	r2, #1
 8003080:	4912      	ldr	r1, [pc, #72]	; (80030cc <setupneo+0x54>)
 8003082:	4813      	ldr	r0, [pc, #76]	; (80030d0 <setupneo+0x58>)
 8003084:	f00b f8d2 	bl	800e22c <HAL_UART_Receive_DMA>

	if (stat != HAL_OK) {
 8003088:	4604      	mov	r4, r0
 800308a:	b9d0      	cbnz	r0, 80030c2 <setupneo+0x4a>
		printf("Err HAL_UART_Receive_IT usart6\n");
		return (stat);
	}

	// 	Set reporting frequency to 1 Sec
	printf("NEO: Changing receiving frequency to 1 Sec...\n\r");
 800308c:	4811      	ldr	r0, [pc, #68]	; (80030d4 <setupneo+0x5c>)
 800308e:	f01d fc9b 	bl	80209c8 <iprintf>

	changeFrequency();
 8003092:	f7ff ff55 	bl	8002f40 <changeFrequency>
	//rx();		// debugging

	// Disabling unnecessary channels like SBAS or QZSS
	printf("NEO: Disabling unnecessary channels...\r\n");
 8003096:	4810      	ldr	r0, [pc, #64]	; (80030d8 <setupneo+0x60>)
 8003098:	f01d fd1e 	bl	8020ad8 <puts>
	disableUnnecessaryChannels();
 800309c:	f7ff ff64 	bl	8002f68 <disableUnnecessaryChannels>

	// Enabling NAV-PVT messages
	printf("NEO: Enabling NAV-PVT messages...\n\r");
 80030a0:	480e      	ldr	r0, [pc, #56]	; (80030dc <setupneo+0x64>)
 80030a2:	f01d fc91 	bl	80209c8 <iprintf>
	enableNavPvt();
 80030a6:	f7ff ff77 	bl	8002f98 <enableNavPvt>
	osDelay(100);
 80030aa:	2064      	movs	r0, #100	; 0x64
 80030ac:	f00d ff1c 	bl	8010ee8 <osDelay>
// Enable Time pulse
	enableNaTP5();
 80030b0:	f7ff ff88 	bl	8002fc4 <enableNaTP5>
	statuspkt.NavPvt.flags = 0;		// make sure gps not showing as locked
 80030b4:	4b0a      	ldr	r3, [pc, #40]	; (80030e0 <setupneo+0x68>)
	printf("NEO: Auto-configuration is complete\n\r");
 80030b6:	480b      	ldr	r0, [pc, #44]	; (80030e4 <setupneo+0x6c>)
	statuspkt.NavPvt.flags = 0;		// make sure gps not showing as locked
 80030b8:	765c      	strb	r4, [r3, #25]
	printf("NEO: Auto-configuration is complete\n\r");
 80030ba:	f01d fc85 	bl	80209c8 <iprintf>

//		fastdelay_ms(100); // Little delay before flushing
	return (stat);
}
 80030be:	4620      	mov	r0, r4
 80030c0:	bd10      	pop	{r4, pc}
		printf("Err HAL_UART_Receive_IT usart6\n");
 80030c2:	4809      	ldr	r0, [pc, #36]	; (80030e8 <setupneo+0x70>)
 80030c4:	f01d fd08 	bl	8020ad8 <puts>
}
 80030c8:	4620      	mov	r0, r4
 80030ca:	bd10      	pop	{r4, pc}
 80030cc:	2000164c 	.word	0x2000164c
 80030d0:	20022fe0 	.word	0x20022fe0
 80030d4:	08025b38 	.word	0x08025b38
 80030d8:	08025b68 	.word	0x08025b68
 80030dc:	08025b90 	.word	0x08025b90
 80030e0:	20022774 	.word	0x20022774
 80030e4:	08025bb4 	.word	0x08025bb4
 80030e8:	08025b18 	.word	0x08025b18

080030ec <HAL_UART_RxCpltCallback>:
	const unsigned char offset = 6;
//	unsigned char data;
//	HAL_StatusTypeDef stat;

//	printf("UART6 RxCpl");
	if (huart->Instance == USART6) { //our UART
 80030ec:	6803      	ldr	r3, [r0, #0]
 80030ee:	4a18      	ldr	r2, [pc, #96]	; (8003150 <HAL_UART_RxCpltCallback+0x64>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d007      	beq.n	8003104 <HAL_UART_RxCpltCallback+0x18>
		if (stat != HAL_OK) {
			printf("Err HAL_UART_Receive_IT usart6\n");
		}
#endif
	} else {
		if (huart->Instance == UART5) {
 80030f4:	4a17      	ldr	r2, [pc, #92]	; (8003154 <HAL_UART_RxCpltCallback+0x68>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d002      	beq.n	8003100 <HAL_UART_RxCpltCallback+0x14>
			uart5_rxdone();
		}
		else
		printf("USART unknown uart int\n");
 80030fa:	4817      	ldr	r0, [pc, #92]	; (8003158 <HAL_UART_RxCpltCallback+0x6c>)
 80030fc:	f01d bcec 	b.w	8020ad8 <puts>
			uart5_rxdone();
 8003100:	f7fd bfa6 	b.w	8001050 <uart5_rxdone>
		data = rxdatabuf[0];
 8003104:	4b15      	ldr	r3, [pc, #84]	; (800315c <HAL_UART_RxCpltCallback+0x70>)
		flag = 1;
 8003106:	2101      	movs	r1, #1
 8003108:	4a15      	ldr	r2, [pc, #84]	; (8003160 <HAL_UART_RxCpltCallback+0x74>)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800310a:	b510      	push	{r4, lr}
		data = rxdatabuf[0];
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	4c15      	ldr	r4, [pc, #84]	; (8003164 <HAL_UART_RxCpltCallback+0x78>)
		if (IsPacketReady(data)) {
 8003110:	4618      	mov	r0, r3
		flag = 1;
 8003112:	6011      	str	r1, [r2, #0]
		data = rxdatabuf[0];
 8003114:	7023      	strb	r3, [r4, #0]
		if (IsPacketReady(data)) {
 8003116:	f7ff ff6d 	bl	8002ff4 <IsPacketReady>
 800311a:	b180      	cbz	r0, 800313e <HAL_UART_RxCpltCallback+0x52>
 800311c:	4b12      	ldr	r3, [pc, #72]	; (8003168 <HAL_UART_RxCpltCallback+0x7c>)
 800311e:	4a13      	ldr	r2, [pc, #76]	; (800316c <HAL_UART_RxCpltCallback+0x80>)
 8003120:	f103 004e 	add.w	r0, r3, #78	; 0x4e
				*((char*) (&(statuspkt.NavPvt)) + (i - offset)) = PACKETstore[i]; // copy into global struct
 8003124:	f813 1f01 	ldrb.w	r1, [r3, #1]!
			for (unsigned int i = offset; i < sizeof(statuspkt.NavPvt); i++) {
 8003128:	4283      	cmp	r3, r0
				*((char*) (&(statuspkt.NavPvt)) + (i - offset)) = PACKETstore[i]; // copy into global struct
 800312a:	f802 1f01 	strb.w	r1, [r2, #1]!
			for (unsigned int i = offset; i < sizeof(statuspkt.NavPvt); i++) {
 800312e:	d1f9      	bne.n	8003124 <HAL_UART_RxCpltCallback+0x38>
			if (statuspkt.NavPvt.flags & 1) { // locked
 8003130:	4c0f      	ldr	r4, [pc, #60]	; (8003170 <HAL_UART_RxCpltCallback+0x84>)
 8003132:	7e63      	ldrb	r3, [r4, #25]
 8003134:	f013 0301 	ands.w	r3, r3, #1
 8003138:	d102      	bne.n	8003140 <HAL_UART_RxCpltCallback+0x54>
				gpslocked = 0;
 800313a:	4a0e      	ldr	r2, [pc, #56]	; (8003174 <HAL_UART_RxCpltCallback+0x88>)
 800313c:	7013      	strb	r3, [r2, #0]
	}
}
 800313e:	bd10      	pop	{r4, pc}
				statuspkt.epochsecs = calcepoch32();// should not be needed if our 1 sec timer was accurate, also dbg desyncs this
 8003140:	f7ff fe90 	bl	8002e64 <calcepoch32>
				gpslocked = 1;
 8003144:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <HAL_UART_RxCpltCallback+0x88>)
 8003146:	2201      	movs	r2, #1
				statuspkt.epochsecs = calcepoch32();// should not be needed if our 1 sec timer was accurate, also dbg desyncs this
 8003148:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
				gpslocked = 1;
 800314c:	701a      	strb	r2, [r3, #0]
}
 800314e:	bd10      	pop	{r4, pc}
 8003150:	40011400 	.word	0x40011400
 8003154:	40005000 	.word	0x40005000
 8003158:	08025afc 	.word	0x08025afc
 800315c:	2000164c 	.word	0x2000164c
 8003160:	20001644 	.word	0x20001644
 8003164:	20023370 	.word	0x20023370
 8003168:	20023379 	.word	0x20023379
 800316c:	20022777 	.word	0x20022777
 8003170:	20022774 	.word	0x20022774
 8003174:	2000168d 	.word	0x2000168d

08003178 <HAL_UART_ErrorCallback>:


HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003178:	b570      	push	{r4, r5, r6, lr}
 800317a:	4604      	mov	r4, r0
	__HAL_UART_CLEAR_FEFLAG(huart);
	__HAL_UART_CLEAR_NEFLAG(huart);
	__HAL_UART_CLEAR_OREFLAG(huart);
	__HAL_UART_CLEAR_PEFLAG(huart);

	if (huart->Instance == USART6) { 		// GPS  UART
 800317c:	4a10      	ldr	r2, [pc, #64]	; (80031c0 <HAL_UART_ErrorCallback+0x48>)
	__HAL_UART_CLEAR_FEFLAG(huart);
 800317e:	2602      	movs	r6, #2
	__HAL_UART_CLEAR_NEFLAG(huart);
 8003180:	2504      	movs	r5, #4
	__HAL_UART_CLEAR_FEFLAG(huart);
 8003182:	6823      	ldr	r3, [r4, #0]
	__HAL_UART_CLEAR_OREFLAG(huart);
 8003184:	2008      	movs	r0, #8
	__HAL_UART_CLEAR_PEFLAG(huart);
 8003186:	2101      	movs	r1, #1
	if (huart->Instance == USART6) { 		// GPS  UART
 8003188:	4293      	cmp	r3, r2
	__HAL_UART_CLEAR_FEFLAG(huart);
 800318a:	621e      	str	r6, [r3, #32]
	__HAL_UART_CLEAR_NEFLAG(huart);
 800318c:	621d      	str	r5, [r3, #32]
	__HAL_UART_CLEAR_OREFLAG(huart);
 800318e:	6218      	str	r0, [r3, #32]
	__HAL_UART_CLEAR_PEFLAG(huart);
 8003190:	6219      	str	r1, [r3, #32]
	if (huart->Instance == USART6) { 		// GPS  UART
 8003192:	d00f      	beq.n	80031b4 <HAL_UART_ErrorCallback+0x3c>
	printf("GPS UART_Err Callback %0lx\n", huart->ErrorCode);
	}
	if (huart->Instance == UART5) { 			//LCD UART
 8003194:	4a0b      	ldr	r2, [pc, #44]	; (80031c4 <HAL_UART_ErrorCallback+0x4c>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d000      	beq.n	800319c <HAL_UART_ErrorCallback+0x24>
#define  HAL_UART_ERROR_NE         ((uint32_t)0x00000002U)    /*!< Noise error         */
#define  HAL_UART_ERROR_FE         ((uint32_t)0x00000004U)    /*!< frame error         */
#define  HAL_UART_ERROR_ORE        ((uint32_t)0x00000008U)    /*!< Overrun error       */
#define  HAL_UART_ERROR_DMA        ((uint32_t)0x00000010U)    /*!< DMA transfer error  */
#endif
}
 800319a:	bd70      	pop	{r4, r5, r6, pc}
	printf("LCD UART_Err Callback %0lx\n", huart->ErrorCode);
 800319c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800319e:	480a      	ldr	r0, [pc, #40]	; (80031c8 <HAL_UART_ErrorCallback+0x50>)
 80031a0:	f01d fc12 	bl	80209c8 <iprintf>
	if (!(inlcd_init))	// prevent recursion
 80031a4:	4b09      	ldr	r3, [pc, #36]	; (80031cc <HAL_UART_ErrorCallback+0x54>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1f6      	bne.n	800319a <HAL_UART_ErrorCallback+0x22>
}
 80031ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		lcd_init();
 80031b0:	f7fd bff6 	b.w	80011a0 <lcd_init>
	printf("GPS UART_Err Callback %0lx\n", huart->ErrorCode);
 80031b4:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80031b6:	4806      	ldr	r0, [pc, #24]	; (80031d0 <HAL_UART_ErrorCallback+0x58>)
 80031b8:	f01d fc06 	bl	80209c8 <iprintf>
 80031bc:	6823      	ldr	r3, [r4, #0]
 80031be:	e7e9      	b.n	8003194 <HAL_UART_ErrorCallback+0x1c>
 80031c0:	40011400 	.word	0x40011400
 80031c4:	40005000 	.word	0x40005000
 80031c8:	08025ae0 	.word	0x08025ae0
 80031cc:	2000153c 	.word	0x2000153c
 80031d0:	08025ac4 	.word	0x08025ac4

080031d4 <cycleleds>:
//////////////////////////////////////////////
//
// Initialise and test the LEDS by cycling them
//
//////////////////////////////////////////////
void cycleleds(void) {
 80031d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031d6:	b085      	sub	sp, #20
	const uint16_t pattern[] = {
 80031d8:	4a1b      	ldr	r2, [pc, #108]	; (8003248 <cycleleds+0x74>)
	LED_D1_Pin | LED_D2_Pin | LED_D3_Pin | LED_D4_Pin | LED_D5_Pin };

	int i;

	for (i = 0; i < 5; i++) {
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 80031da:	4c1c      	ldr	r4, [pc, #112]	; (800324c <cycleleds+0x78>)
 80031dc:	ae01      	add	r6, sp, #4
 80031de:	f10d 070e 	add.w	r7, sp, #14
	const uint16_t pattern[] = {
 80031e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80031e4:	4633      	mov	r3, r6
 80031e6:	4635      	mov	r5, r6
 80031e8:	c303      	stmia	r3!, {r0, r1}
 80031ea:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 80031ec:	f835 1b02 	ldrh.w	r1, [r5], #2
 80031f0:	2200      	movs	r2, #0
 80031f2:	4620      	mov	r0, r4
 80031f4:	f005 fb30 	bl	8008858 <HAL_GPIO_WritePin>
		osDelay(140);
 80031f8:	208c      	movs	r0, #140	; 0x8c
 80031fa:	f00d fe75 	bl	8010ee8 <osDelay>
	for (i = 0; i < 5; i++) {
 80031fe:	42bd      	cmp	r5, r7
 8003200:	d1f4      	bne.n	80031ec <cycleleds+0x18>
	}
	osDelay(600);
 8003202:	f44f 7016 	mov.w	r0, #600	; 0x258
 8003206:	4634      	mov	r4, r6
	for (i = 0; i < 5; i++) {
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_SET);
 8003208:	4f10      	ldr	r7, [pc, #64]	; (800324c <cycleleds+0x78>)
	osDelay(600);
 800320a:	f00d fe6d 	bl	8010ee8 <osDelay>
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_SET);
 800320e:	f834 1b02 	ldrh.w	r1, [r4], #2
 8003212:	2201      	movs	r2, #1
 8003214:	4638      	mov	r0, r7
 8003216:	f005 fb1f 	bl	8008858 <HAL_GPIO_WritePin>
		osDelay(140);
 800321a:	208c      	movs	r0, #140	; 0x8c
 800321c:	f00d fe64 	bl	8010ee8 <osDelay>
	for (i = 0; i < 5; i++) {
 8003220:	42ac      	cmp	r4, r5
 8003222:	d1f4      	bne.n	800320e <cycleleds+0x3a>
	}
	osDelay(500);
 8003224:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
	for (i = 0; i < 5; i++) {
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 8003228:	4d08      	ldr	r5, [pc, #32]	; (800324c <cycleleds+0x78>)
	osDelay(500);
 800322a:	f00d fe5d 	bl	8010ee8 <osDelay>
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 800322e:	f836 1b02 	ldrh.w	r1, [r6], #2
 8003232:	2200      	movs	r2, #0
 8003234:	4628      	mov	r0, r5
 8003236:	f005 fb0f 	bl	8008858 <HAL_GPIO_WritePin>
		osDelay(140);
 800323a:	208c      	movs	r0, #140	; 0x8c
 800323c:	f00d fe54 	bl	8010ee8 <osDelay>
	for (i = 0; i < 5; i++) {
 8003240:	42b4      	cmp	r4, r6
 8003242:	d1f4      	bne.n	800322e <cycleleds+0x5a>
	}
}
 8003244:	b005      	add	sp, #20
 8003246:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003248:	08024888 	.word	0x08024888
 800324c:	40020c00 	.word	0x40020c00

08003250 <setpgagain>:
//////////////////////////////////////////////
//
// Set the Programmable Gain Amplifier GAIN
//
//////////////////////////////////////////////
void setpgagain(int gain) {
 8003250:	b538      	push	{r3, r4, r5, lr}
 8003252:	4604      	mov	r4, r0
	osDelay(5);
 8003254:	2005      	movs	r0, #5
 8003256:	f00d fe47 	bl	8010ee8 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 800325a:	2201      	movs	r2, #1
 800325c:	2104      	movs	r1, #4
 800325e:	4814      	ldr	r0, [pc, #80]	; (80032b0 <setpgagain+0x60>)
 8003260:	f005 fafa 	bl	8008858 <HAL_GPIO_WritePin>
	osDelay(5);
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
	osDelay(5);
	pgagain = 0x4000 | (gain & 0x07);
 8003264:	f004 0407 	and.w	r4, r4, #7
	osDelay(5);
 8003268:	2005      	movs	r0, #5
	pgagain = 0x4000 | (gain & 0x07);
 800326a:	4d12      	ldr	r5, [pc, #72]	; (80032b4 <setpgagain+0x64>)
	osDelay(5);
 800326c:	f00d fe3c 	bl	8010ee8 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 8003270:	2200      	movs	r2, #0
 8003272:	2104      	movs	r1, #4
 8003274:	480e      	ldr	r0, [pc, #56]	; (80032b0 <setpgagain+0x60>)
 8003276:	f005 faef 	bl	8008858 <HAL_GPIO_WritePin>
	pgagain = 0x4000 | (gain & 0x07);
 800327a:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
	osDelay(5);
 800327e:	2005      	movs	r0, #5
 8003280:	f00d fe32 	bl	8010ee8 <osDelay>
	if (HAL_SPI_Transmit(&hspi2, &pgagain, 1, 1000) != HAL_OK) {	// select gain
 8003284:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003288:	2201      	movs	r2, #1
 800328a:	4629      	mov	r1, r5
 800328c:	480a      	ldr	r0, [pc, #40]	; (80032b8 <setpgagain+0x68>)
	pgagain = 0x4000 | (gain & 0x07);
 800328e:	802c      	strh	r4, [r5, #0]
	if (HAL_SPI_Transmit(&hspi2, &pgagain, 1, 1000) != HAL_OK) {	// select gain
 8003290:	f008 f902 	bl	800b498 <HAL_SPI_Transmit>
 8003294:	b110      	cbz	r0, 800329c <setpgagain+0x4c>
		printf("setpgagain: SPI Error\n");
 8003296:	4809      	ldr	r0, [pc, #36]	; (80032bc <setpgagain+0x6c>)
 8003298:	f01d fc1e 	bl	8020ad8 <puts>
	}
	osDelay(5);
 800329c:	2005      	movs	r0, #5
 800329e:	f00d fe23 	bl	8010ee8 <osDelay>
//printf("PGA Gain set to %d\n",pgagain & 7);
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 80032a2:	2201      	movs	r2, #1
 80032a4:	2104      	movs	r1, #4
 80032a6:	4802      	ldr	r0, [pc, #8]	; (80032b0 <setpgagain+0x60>)
}
 80032a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 80032ac:	f005 bad4 	b.w	8008858 <HAL_GPIO_WritePin>
 80032b0:	40021800 	.word	0x40021800
 80032b4:	2000023e 	.word	0x2000023e
 80032b8:	200228e4 	.word	0x200228e4
 80032bc:	08025e6c 	.word	0x08025e6c

080032c0 <initpga>:
//////////////////////////////////////////////
//
// Initialise the Programmable Gain Amplifier MCP6S93
//
//////////////////////////////////////////////
int initpga() {
 80032c0:	b510      	push	{r4, lr}
	// init spi based single ended PG Amp
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 80032c2:	2201      	movs	r2, #1
int initpga() {
 80032c4:	b084      	sub	sp, #16
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 80032c6:	2104      	movs	r1, #4
 80032c8:	482b      	ldr	r0, [pc, #172]	; (8003378 <initpga+0xb8>)
 80032ca:	f005 fac5 	bl	8008858 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// reset the PGA seq
 80032ce:	2200      	movs	r2, #0
 80032d0:	2104      	movs	r1, #4
 80032d2:	4829      	ldr	r0, [pc, #164]	; (8003378 <initpga+0xb8>)
 80032d4:	f005 fac0 	bl	8008858 <HAL_GPIO_WritePin>
	osDelay(50);
 80032d8:	2032      	movs	r0, #50	; 0x32
 80032da:	f00d fe05 	bl	8010ee8 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 80032de:	2201      	movs	r2, #1
 80032e0:	2104      	movs	r1, #4
 80032e2:	4825      	ldr	r0, [pc, #148]	; (8003378 <initpga+0xb8>)
 80032e4:	f005 fab8 	bl	8008858 <HAL_GPIO_WritePin>
	osDelay(50);
 80032e8:	2032      	movs	r0, #50	; 0x32
 80032ea:	f00d fdfd 	bl	8010ee8 <osDelay>

	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 80032ee:	2200      	movs	r2, #0
 80032f0:	2104      	movs	r1, #4
 80032f2:	4821      	ldr	r0, [pc, #132]	; (8003378 <initpga+0xb8>)
 80032f4:	f005 fab0 	bl	8008858 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(&hspi2, (uint16_t[] ) { 0 }, 1, 1000) != HAL_OK) {	// nop cmd
 80032f8:	2400      	movs	r4, #0
 80032fa:	a904      	add	r1, sp, #16
 80032fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003300:	2201      	movs	r2, #1
 8003302:	481e      	ldr	r0, [pc, #120]	; (800337c <initpga+0xbc>)
 8003304:	f821 4d0c 	strh.w	r4, [r1, #-12]!
 8003308:	f008 f8c6 	bl	800b498 <HAL_SPI_Transmit>
 800330c:	bb70      	cbnz	r0, 800336c <initpga+0xac>
		printf("initpga: SPI error 2\n\r");
		return (1);
	}
	{
		volatile int dly;
		for (dly = 0; dly < 50; dly++)
 800330e:	9002      	str	r0, [sp, #8]
 8003310:	9b02      	ldr	r3, [sp, #8]
 8003312:	2b31      	cmp	r3, #49	; 0x31
 8003314:	dc05      	bgt.n	8003322 <initpga+0x62>
 8003316:	9b02      	ldr	r3, [sp, #8]
 8003318:	3301      	adds	r3, #1
 800331a:	9302      	str	r3, [sp, #8]
 800331c:	9b02      	ldr	r3, [sp, #8]
 800331e:	2b31      	cmp	r3, #49	; 0x31
 8003320:	ddf9      	ble.n	8003316 <initpga+0x56>
			;
	}
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PG
 8003322:	2201      	movs	r2, #1
 8003324:	2104      	movs	r1, #4
 8003326:	4814      	ldr	r0, [pc, #80]	; (8003378 <initpga+0xb8>)
 8003328:	f005 fa96 	bl	8008858 <HAL_GPIO_WritePin>
	osDelay(50);
 800332c:	2032      	movs	r0, #50	; 0x32
 800332e:	f00d fddb 	bl	8010ee8 <osDelay>

	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 8003332:	2200      	movs	r2, #0
 8003334:	2104      	movs	r1, #4
 8003336:	4810      	ldr	r0, [pc, #64]	; (8003378 <initpga+0xb8>)
 8003338:	f005 fa8e 	bl	8008858 <HAL_GPIO_WritePin>
	//osDelay(5);
	if (HAL_SPI_Transmit(&hspi2, &spicmdchan[0], 1, 1000) != HAL_OK) {	// set the channel to ch1
 800333c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003340:	2201      	movs	r2, #1
 8003342:	490f      	ldr	r1, [pc, #60]	; (8003380 <initpga+0xc0>)
 8003344:	480d      	ldr	r0, [pc, #52]	; (800337c <initpga+0xbc>)
 8003346:	f008 f8a7 	bl	800b498 <HAL_SPI_Transmit>
 800334a:	b978      	cbnz	r0, 800336c <initpga+0xac>
		printf("initpga: SPI error 2\n\r");
		return (1);
	}
	{
		volatile int dly;
		for (dly = 0; dly < 50; dly++)
 800334c:	9003      	str	r0, [sp, #12]
 800334e:	9b03      	ldr	r3, [sp, #12]
 8003350:	2b31      	cmp	r3, #49	; 0x31
 8003352:	dc05      	bgt.n	8003360 <initpga+0xa0>
 8003354:	9b03      	ldr	r3, [sp, #12]
 8003356:	3301      	adds	r3, #1
 8003358:	9303      	str	r3, [sp, #12]
 800335a:	9b03      	ldr	r3, [sp, #12]
 800335c:	2b31      	cmp	r3, #49	; 0x31
 800335e:	ddf9      	ble.n	8003354 <initpga+0x94>
			;
	}
	setpgagain(1);			// 1 == gain of 2x
 8003360:	2001      	movs	r0, #1
 8003362:	f7ff ff75 	bl	8003250 <setpgagain>
	return (0);
 8003366:	2000      	movs	r0, #0
}
 8003368:	b004      	add	sp, #16
 800336a:	bd10      	pop	{r4, pc}
		printf("initpga: SPI error 2\n\r");
 800336c:	4805      	ldr	r0, [pc, #20]	; (8003384 <initpga+0xc4>)
 800336e:	f01d fb2b 	bl	80209c8 <iprintf>
		return (1);
 8003372:	2001      	movs	r0, #1
}
 8003374:	b004      	add	sp, #16
 8003376:	bd10      	pop	{r4, pc}
 8003378:	40021800 	.word	0x40021800
 800337c:	200228e4 	.word	0x200228e4
 8003380:	08025e84 	.word	0x08025e84
 8003384:	08025c90 	.word	0x08025c90

08003388 <bumppga>:

// bump the pga by one step
int bumppga(int i) {
	volatile int gain;

	gain = pgagain & 0x7;
 8003388:	4b11      	ldr	r3, [pc, #68]	; (80033d0 <bumppga+0x48>)
 800338a:	881b      	ldrh	r3, [r3, #0]
int bumppga(int i) {
 800338c:	b510      	push	{r4, lr}
	gain = pgagain & 0x7;
 800338e:	f003 0307 	and.w	r3, r3, #7
int bumppga(int i) {
 8003392:	b082      	sub	sp, #8
	if (!(((gain <= 0) && (i < 0)) || ((gain >= 7) && (i > 0)))) {	// there is room to change
 8003394:	1e04      	subs	r4, r0, #0
	gain = pgagain & 0x7;
 8003396:	9301      	str	r3, [sp, #4]
	if (!(((gain <= 0) && (i < 0)) || ((gain >= 7) && (i > 0)))) {	// there is room to change
 8003398:	9b01      	ldr	r3, [sp, #4]
 800339a:	da04      	bge.n	80033a6 <bumppga+0x1e>
 800339c:	2b00      	cmp	r3, #0
 800339e:	bfd4      	ite	le
 80033a0:	2300      	movle	r3, #0
 80033a2:	2301      	movgt	r3, #1
 80033a4:	b13b      	cbz	r3, 80033b6 <bumppga+0x2e>
 80033a6:	2c00      	cmp	r4, #0
 80033a8:	9b01      	ldr	r3, [sp, #4]
 80033aa:	dd07      	ble.n	80033bc <bumppga+0x34>
 80033ac:	2b06      	cmp	r3, #6
 80033ae:	bfcc      	ite	gt
 80033b0:	2300      	movgt	r3, #0
 80033b2:	2301      	movle	r3, #1
 80033b4:	b913      	cbnz	r3, 80033bc <bumppga+0x34>
		gain = gain + i;
		setpgagain(gain);
		return(i);
	}
return(0);
 80033b6:	4618      	mov	r0, r3
}
 80033b8:	b002      	add	sp, #8
 80033ba:	bd10      	pop	{r4, pc}
		gain = gain + i;
 80033bc:	9b01      	ldr	r3, [sp, #4]
 80033be:	4423      	add	r3, r4
 80033c0:	9301      	str	r3, [sp, #4]
		setpgagain(gain);
 80033c2:	9801      	ldr	r0, [sp, #4]
 80033c4:	f7ff ff44 	bl	8003250 <setpgagain>
		return(i);
 80033c8:	4620      	mov	r0, r4
}
 80033ca:	b002      	add	sp, #8
 80033cc:	bd10      	pop	{r4, pc}
 80033ce:	bf00      	nop
 80033d0:	2000023e 	.word	0x2000023e

080033d4 <initdualmux>:
//////////////////////////////////////////////
//
// Initialise the dual mux ADG729
//
//////////////////////////////////////////////
void initdualmux(void) {
 80033d4:	b500      	push	{lr}
	//HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)

	if (HAL_I2C_Master_Transmit(&hi2c1, 0x44 << 1, &muxdat[0], 1, 1000) != HAL_OK) {	// RF dual MUX
 80033d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
void initdualmux(void) {
 80033da:	b083      	sub	sp, #12
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x44 << 1, &muxdat[0], 1, 1000) != HAL_OK) {	// RF dual MUX
 80033dc:	2301      	movs	r3, #1
 80033de:	4a08      	ldr	r2, [pc, #32]	; (8003400 <initdualmux+0x2c>)
 80033e0:	9000      	str	r0, [sp, #0]
 80033e2:	2188      	movs	r1, #136	; 0x88
 80033e4:	4807      	ldr	r0, [pc, #28]	; (8003404 <initdualmux+0x30>)
 80033e6:	f005 fcb3 	bl	8008d50 <HAL_I2C_Master_Transmit>
 80033ea:	b910      	cbnz	r0, 80033f2 <initdualmux+0x1e>
		printf("I2C HAL returned error 1\n\r");
	}
}
 80033ec:	b003      	add	sp, #12
 80033ee:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("I2C HAL returned error 1\n\r");
 80033f2:	4805      	ldr	r0, [pc, #20]	; (8003408 <initdualmux+0x34>)
}
 80033f4:	b003      	add	sp, #12
 80033f6:	f85d eb04 	ldr.w	lr, [sp], #4
		printf("I2C HAL returned error 1\n\r");
 80033fa:	f01d bae5 	b.w	80209c8 <iprintf>
 80033fe:	bf00      	nop
 8003400:	2000023c 	.word	0x2000023c
 8003404:	20022ad0 	.word	0x20022ad0
 8003408:	08025c74 	.word	0x08025c74
 800340c:	00000000 	.word	0x00000000

08003410 <getpressure115>:

// MPL115 low precision pressure sensor, uses floating point, crashes!!
HAL_StatusTypeDef getpressure115(void) {
 8003410:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003414:	ed2d 8b02 	vpush	{d8}
 8003418:	b091      	sub	sp, #68	; 0x44
	HAL_StatusTypeDef result;
	volatile double ffrac, p, t, n;
	uint16_t pr, tr;
	uint8_t testdat[8];

	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 800341a:	2112      	movs	r1, #18
 800341c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8003420:	2302      	movs	r3, #2
 8003422:	aa10      	add	r2, sp, #64	; 0x40
 8003424:	4878      	ldr	r0, [pc, #480]	; (8003608 <getpressure115+0x1f8>)
 8003426:	f822 1d2c 	strh.w	r1, [r2, #-44]!
 800342a:	21c0      	movs	r1, #192	; 0xc0
 800342c:	9500      	str	r5, [sp, #0]
 800342e:	f005 fc8f 	bl	8008d50 <HAL_I2C_Master_Transmit>
	// CMD Start Conversion
	if (result != HAL_OK) {
 8003432:	4607      	mov	r7, r0
 8003434:	2800      	cmp	r0, #0
 8003436:	f040 80c4 	bne.w	80035c2 <getpressure115+0x1b2>
		return (result);
	}

	osDelay(4);		// conversion time max 3mS

	for (i = 0; i < 4; i++) {
 800343a:	4604      	mov	r4, r0
	osDelay(4);		// conversion time max 3mS
 800343c:	2004      	movs	r0, #4
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);		// rd pressure and temp regs
 800343e:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8003608 <getpressure115+0x1f8>
		if (result != HAL_OK) {
			printf("I2C MPL115 HAL returned error %d\n\r", result);
 8003442:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 8003634 <getpressure115+0x224>
	osDelay(4);		// conversion time max 3mS
 8003446:	f00d fd4f 	bl	8010ee8 <osDelay>
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);		// rd pressure and temp regs
 800344a:	aa0e      	add	r2, sp, #56	; 0x38
 800344c:	2301      	movs	r3, #1
 800344e:	9502      	str	r5, [sp, #8]
 8003450:	4640      	mov	r0, r8
 8003452:	1911      	adds	r1, r2, r4
 8003454:	b2a2      	uxth	r2, r4
 8003456:	e9cd 1300 	strd	r1, r3, [sp]
 800345a:	21c1      	movs	r1, #193	; 0xc1
 800345c:	f005 fd1e 	bl	8008e9c <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 8003460:	4606      	mov	r6, r0
 8003462:	2800      	cmp	r0, #0
 8003464:	f040 809f 	bne.w	80035a6 <getpressure115+0x196>
	for (i = 0; i < 4; i++) {
 8003468:	3401      	adds	r4, #1
 800346a:	2c04      	cmp	r4, #4
 800346c:	d1ed      	bne.n	800344a <getpressure115+0x3a>
	}
	printf("\n");
#endif

	pr = (data[0] * 256 + data[1]) >> 6;
	tr = (data[2] * 256 + data[3]) >> 6;
 800346e:	f89d 403a 	ldrb.w	r4, [sp, #58]	; 0x3a
//	printf("Comp: Press = %f\n", p);

	p = (p * ((115.0 - 50.0) / 1023.0)) + 50.0;
//	printf("kPA Press = %f\n", p);

	ffrac = modf(p, &n);
 8003472:	a80c      	add	r0, sp, #48	; 0x30
	pr = (data[0] * 256 + data[1]) >> 6;
 8003474:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
	tr = (data[2] * 256 + data[3]) >> 6;
 8003478:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
	pr = (data[0] * 256 + data[1]) >> 6;
 800347c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
	tr = (data[2] * 256 + data[3]) >> 6;
 8003480:	eb02 2204 	add.w	r2, r2, r4, lsl #8
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8003484:	4c61      	ldr	r4, [pc, #388]	; (800360c <getpressure115+0x1fc>)
	pr = (data[0] * 256 + data[1]) >> 6;
 8003486:	eb03 2301 	add.w	r3, r3, r1, lsl #8
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 800348a:	4961      	ldr	r1, [pc, #388]	; (8003610 <getpressure115+0x200>)
	tr = (data[2] * 256 + data[3]) >> 6;
 800348c:	1192      	asrs	r2, r2, #6
	temperature = t;
	tempfrac = (t - temperature) * 100;

//	printf("\ntemperature1 = %d.%d  ", temperature, tempfrac);
//	printf("\ntemperature2 = %f  ", t);
	tempfrac = tempfrac * 100;	// now 10,000
 800348e:	4d61      	ldr	r5, [pc, #388]	; (8003614 <getpressure115+0x204>)
	pr = (data[0] * 256 + data[1]) >> 6;
 8003490:	099b      	lsrs	r3, r3, #6
	tr = (data[2] * 256 + data[3]) >> 6;
 8003492:	ee08 2a10 	vmov	s16, r2
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8003496:	4a60      	ldr	r2, [pc, #384]	; (8003618 <getpressure115+0x208>)
	p = pr;
 8003498:	ee07 3a90 	vmov	s15, r3
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 800349c:	4b5f      	ldr	r3, [pc, #380]	; (800361c <getpressure115+0x20c>)
	t = tr;
 800349e:	eeb8 6b48 	vcvt.f64.u32	d6, s16
	p = pr;
 80034a2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
	t = tr;
 80034a6:	ed8d 6b0a 	vstr	d6, [sp, #40]	; 0x28
	p = pr;
 80034aa:	ed8d 7b08 	vstr	d7, [sp, #32]
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 80034ae:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80034b2:	ed94 4b00 	vldr	d4, [r4]
 80034b6:	ed91 5b00 	vldr	d5, [r1]
 80034ba:	ed9d 1b08 	vldr	d1, [sp, #32]
 80034be:	ed92 7b00 	vldr	d7, [r2]
 80034c2:	eea4 5b06 	vfma.f64	d5, d4, d6
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 80034c6:	4c56      	ldr	r4, [pc, #344]	; (8003620 <getpressure115+0x210>)
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 80034c8:	ed9d 3b0a 	vldr	d3, [sp, #40]	; 0x28
 80034cc:	ed93 2b00 	vldr	d2, [r3]
	p = (p * ((115.0 - 50.0) / 1023.0)) + 50.0;
 80034d0:	ed9f 4b41 	vldr	d4, [pc, #260]	; 80035d8 <getpressure115+0x1c8>
 80034d4:	ed9f 6b42 	vldr	d6, [pc, #264]	; 80035e0 <getpressure115+0x1d0>
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 80034d8:	eea5 7b01 	vfma.f64	d7, d5, d1
 80034dc:	eea2 7b03 	vfma.f64	d7, d2, d3
 80034e0:	ed8d 7b08 	vstr	d7, [sp, #32]
	p = (p * ((115.0 - 50.0) / 1023.0)) + 50.0;
 80034e4:	ed9d 7b08 	vldr	d7, [sp, #32]
 80034e8:	eea7 6b04 	vfma.f64	d6, d7, d4
 80034ec:	ed8d 6b08 	vstr	d6, [sp, #32]
	ffrac = modf(p, &n);
 80034f0:	ed9d 0b08 	vldr	d0, [sp, #32]
 80034f4:	f01d fb34 	bl	8020b60 <modf>
	t = tr * -0.1706 + 112.27; //C
 80034f8:	eeb8 7bc8 	vcvt.f64.s32	d7, s16

				printf("myt 0x%x, %d, t=%f, myf=%f\n\r",myt,myt,t,myf);

			}
#endif
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80034fc:	eeb3 8b00 	vmov.f64	d8, #48	; 0x41800000  16.0
	tempfrac = tempfrac * 100;	// now 10,000
 8003500:	2264      	movs	r2, #100	; 0x64
	temperature = t;
 8003502:	4b48      	ldr	r3, [pc, #288]	; (8003624 <getpressure115+0x214>)
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8003504:	4848      	ldr	r0, [pc, #288]	; (8003628 <getpressure115+0x218>)
	pressure = (uint32_t) n;
 8003506:	4949      	ldr	r1, [pc, #292]	; (800362c <getpressure115+0x21c>)
	t = tr * -0.1706 + 112.27; //C
 8003508:	ed9f 5b37 	vldr	d5, [pc, #220]	; 80035e8 <getpressure115+0x1d8>
 800350c:	ed9f 6b38 	vldr	d6, [pc, #224]	; 80035f0 <getpressure115+0x1e0>
	ffrac = modf(p, &n);
 8003510:	ed8d 0b06 	vstr	d0, [sp, #24]
	pressure = (uint32_t) n;
 8003514:	ed9d 3b0c 	vldr	d3, [sp, #48]	; 0x30
	t = tr * -0.1706 + 112.27; //C
 8003518:	eea7 6b05 	vfma.f64	d6, d7, d5
	pressure = (uint32_t) n;
 800351c:	eebc 3bc3 	vcvt.u32.f64	s6, d3
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 8003520:	ed9d 4b06 	vldr	d4, [sp, #24]
 8003524:	ed9f 0b34 	vldr	d0, [pc, #208]	; 80035f8 <getpressure115+0x1e8>
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8003528:	ed9f 1b35 	vldr	d1, [pc, #212]	; 8003600 <getpressure115+0x1f0>
	pressure = (uint32_t) n;
 800352c:	ed81 3a00 	vstr	s6, [r1]
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 8003530:	ee24 4b00 	vmul.f64	d4, d4, d0
	t = tr * -0.1706 + 112.27; //C
 8003534:	ed8d 6b0a 	vstr	d6, [sp, #40]	; 0x28
	temperature = t;
 8003538:	ed9d 2b0a 	vldr	d2, [sp, #40]	; 0x28
	tempfrac = (t - temperature) * 100;
 800353c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8003540:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
	temperature = t;
 8003544:	eebc 2bc2 	vcvt.u32.f64	s4, d2
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 8003548:	eebc 4bc4 	vcvt.u32.f64	s8, d4
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 800354c:	ee26 6b08 	vmul.f64	d6, d6, d8
	temperature = t;
 8003550:	ed83 2a00 	vstr	s4, [r3]
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 8003554:	ed84 4a00 	vstr	s8, [r4]
	tempfrac = (t - temperature) * 100;
 8003558:	eeb8 7b42 	vcvt.f64.u32	d7, s4
 800355c:	ee35 5b47 	vsub.f64	d5, d5, d7
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8003560:	feb8 6b46 	vrinta.f64	d6, d6
 8003564:	eefc 6bc6 	vcvt.u32.f64	s13, d6
	tempfrac = (t - temperature) * 100;
 8003568:	ee25 5b00 	vmul.f64	d5, d5, d0
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 800356c:	ee16 3a90 	vmov	r3, s13
 8003570:	ed9d 7b08 	vldr	d7, [sp, #32]
	tempfrac = (t - temperature) * 100;
 8003574:	eebc 5bc5 	vcvt.u32.f64	s10, d5
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8003578:	ee27 7b01 	vmul.f64	d7, d7, d1
	tempfrac = tempfrac * 100;	// now 10,000
 800357c:	ee15 6a10 	vmov	r6, s10
 8003580:	fb02 f206 	mul.w	r2, r2, r6
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8003584:	feb8 7b47 	vrinta.f64	d7, d7
 8003588:	eebc 7bc7 	vcvt.u32.f64	s14, d7
	tempfrac = tempfrac * 100;	// now 10,000
 800358c:	602a      	str	r2, [r5, #0]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 800358e:	ee17 2a10 	vmov	r2, s14
 8003592:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
 8003596:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
//	printf("statuspkt.temppress temp=%f, press=%f\n\r", (float) ((statuspkt.temppress >> 20)) / 16.0,
//			(float) ((statuspkt.temppress & 0x000FFFFF) / 4000.0));
	return (HAL_OK);
}
 800359a:	4638      	mov	r0, r7
 800359c:	b011      	add	sp, #68	; 0x44
 800359e:	ecbd 8b02 	vpop	{d8}
 80035a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			printf("I2C MPL115 HAL returned error %d\n\r", result);
 80035a6:	4601      	mov	r1, r0
 80035a8:	4648      	mov	r0, r9
 80035aa:	f01d fa0d 	bl	80209c8 <iprintf>
			if (i == 3)
 80035ae:	2c03      	cmp	r4, #3
 80035b0:	f47f af5a 	bne.w	8003468 <getpressure115+0x58>
 80035b4:	4637      	mov	r7, r6
}
 80035b6:	4638      	mov	r0, r7
 80035b8:	b011      	add	sp, #68	; 0x44
 80035ba:	ecbd 8b02 	vpop	{d8}
 80035be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		printf("I2C MPL115 HAL returned error 7\n\r");
 80035c2:	481b      	ldr	r0, [pc, #108]	; (8003630 <getpressure115+0x220>)
 80035c4:	f01d fa00 	bl	80209c8 <iprintf>
}
 80035c8:	4638      	mov	r0, r7
 80035ca:	b011      	add	sp, #68	; 0x44
 80035cc:	ecbd 8b02 	vpop	{d8}
 80035d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80035d4:	f3af 8000 	nop.w
 80035d8:	04411044 	.word	0x04411044
 80035dc:	3fb04411 	.word	0x3fb04411
 80035e0:	00000000 	.word	0x00000000
 80035e4:	40490000 	.word	0x40490000
 80035e8:	86594af5 	.word	0x86594af5
 80035ec:	bfc5d638 	.word	0xbfc5d638
 80035f0:	ae147ae1 	.word	0xae147ae1
 80035f4:	405c1147 	.word	0x405c1147
 80035f8:	00000000 	.word	0x00000000
 80035fc:	40590000 	.word	0x40590000
 8003600:	00000000 	.word	0x00000000
 8003604:	40af4000 	.word	0x40af4000
 8003608:	20022ad0 	.word	0x20022ad0
 800360c:	20001670 	.word	0x20001670
 8003610:	20001660 	.word	0x20001660
 8003614:	200233d0 	.word	0x200233d0
 8003618:	20001658 	.word	0x20001658
 800361c:	20001668 	.word	0x20001668
 8003620:	200233dc 	.word	0x200233dc
 8003624:	200233d4 	.word	0x200233d4
 8003628:	20022774 	.word	0x20022774
 800362c:	200233d8 	.word	0x200233d8
 8003630:	08025bdc 	.word	0x08025bdc
 8003634:	08025c00 	.word	0x08025c00

08003638 <initpressure115>:

// the cheap pressure sensor
HAL_StatusTypeDef initpressure115(void) {
 8003638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const uint8_t testcoef[] = {0x3E, 0xCE, 0xb3, 0xF9, 0xC5, 0x17, 0x33, 0xC8};
#endif
	int i;

	for (i = 0; i < 8; i++)
		data[i] = 0x5A;
 800363c:	f04f 335a 	mov.w	r3, #1515870810	; 0x5a5a5a5a
HAL_StatusTypeDef initpressure115(void) {
 8003640:	b086      	sub	sp, #24

//	if (HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x04 }, 1, 1000) != HAL_OK) {	// CMD Read �Coefficient data byte 1 High byte� = 0x04
//		printf("I2C 115 HAL returned error 5\n\r");
//	}

	for (i = 0; i < 8; i++) {
 8003642:	2400      	movs	r4, #0
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 8003644:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 8003648:	2701      	movs	r7, #1
 800364a:	4e33      	ldr	r6, [pc, #204]	; (8003718 <initpressure115+0xe0>)
		data[i] = 0x5A;
 800364c:	e9cd 3304 	strd	r3, r3, [sp, #16]
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 8003650:	ab04      	add	r3, sp, #16
 8003652:	1d22      	adds	r2, r4, #4
 8003654:	21c0      	movs	r1, #192	; 0xc0
 8003656:	4630      	mov	r0, r6
 8003658:	4423      	add	r3, r4
 800365a:	b292      	uxth	r2, r2
 800365c:	3401      	adds	r4, #1
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	2301      	movs	r3, #1
 8003662:	e9cd 7801 	strd	r7, r8, [sp, #4]
 8003666:	f005 fc19 	bl	8008e9c <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 800366a:	4605      	mov	r5, r0
 800366c:	2800      	cmp	r0, #0
 800366e:	d142      	bne.n	80036f6 <initpressure115+0xbe>
	for (i = 0; i < 8; i++) {
 8003670:	2c08      	cmp	r4, #8
 8003672:	d1ed      	bne.n	8003650 <initpressure115+0x18>
	for (i = 0; i < 8; i++) {
		printf(" %x", data[i]);
	}
#endif

	if (data[0] == 0x5a) {
 8003674:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8003678:	2c5a      	cmp	r4, #90	; 0x5a
 800367a:	d044      	beq.n	8003706 <initpressure115+0xce>
		printf("Splat1-2 MPL115A2 I2C not present?\n\r");
		return (HAL_ERROR);		// expected a changed reading - is device present?
	}

	a0co = (data[0] << 8) | data[1];
	b1co = (data[2] << 8) | data[3];
 800367c:	f89d 2012 	ldrb.w	r2, [sp, #18]
	b2co = (data[4] << 8) | data[5];
 8003680:	f89d 3014 	ldrb.w	r3, [sp, #20]
	b1co = (data[2] << 8) | data[3];
 8003684:	f89d 0013 	ldrb.w	r0, [sp, #19]
	b2co = (data[4] << 8) | data[5];
 8003688:	f89d 1015 	ldrb.w	r1, [sp, #21]
	c12co = (data[6] << 8) | data[7];
 800368c:	f89d 6016 	ldrb.w	r6, [sp, #22]
	b1co = (data[2] << 8) | data[3];
 8003690:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
	b2co = (data[4] << 8) | data[5];
 8003694:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
	c12co = (data[6] << 8) | data[7];
 8003698:	f89d 2017 	ldrb.w	r2, [sp, #23]
	a0co = (data[0] << 8) | data[1];
 800369c:	f89d 3011 	ldrb.w	r3, [sp, #17]
	b1co = (data[2] << 8) | data[3];
 80036a0:	b200      	sxth	r0, r0
	c12co = (data[6] << 8) | data[7];
 80036a2:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
	a0co = (data[0] << 8) | data[1];
 80036a6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
//a0co = 0x3ECE ; b1co = 0xB3F9; b2co = 0xC517; c12co = 0x33C8;  // force fixed coeficients

//	printf("\na0co=%hx, b1co=%hx, b2co=%hx, c12co=%hx\n", a0co, b1co, b2co, c12co);

	a0 = (double) a0co / 8;
	b1 = (double) b1co / 8192;
 80036aa:	ee04 0a10 	vmov	s8, r0
 80036ae:	eeba 4be9 	vcvt.f64.s32	d4, d4, #13
	b2co = (data[4] << 8) | data[5];
 80036b2:	b209      	sxth	r1, r1
	b2 = (double) b2co / 16384;
	c12 = (double) c12co;
 80036b4:	f342 028d 	sbfx	r2, r2, #2, #14
	a0 = (double) a0co / 8;
 80036b8:	b21b      	sxth	r3, r3
	b1 = (double) b1co / 8192;
 80036ba:	4818      	ldr	r0, [pc, #96]	; (800371c <initpressure115+0xe4>)
	b2 = (double) b2co / 16384;
 80036bc:	ee05 1a10 	vmov	s10, r1
 80036c0:	eeba 5bc9 	vcvt.f64.s32	d5, d5, #14
 80036c4:	4916      	ldr	r1, [pc, #88]	; (8003720 <initpressure115+0xe8>)
	c12 /= (double) 4194304.0;
 80036c6:	ee06 2a10 	vmov	s12, r2
 80036ca:	eeba 6bc5 	vcvt.f64.s32	d6, d6, #22
 80036ce:	4a15      	ldr	r2, [pc, #84]	; (8003724 <initpressure115+0xec>)
	a0 = (double) a0co / 8;
 80036d0:	ee07 3a10 	vmov	s14, r3
 80036d4:	eeba 7bee 	vcvt.f64.s32	d7, d7, #3
 80036d8:	4b13      	ldr	r3, [pc, #76]	; (8003728 <initpressure115+0xf0>)
	b1 = (double) b1co / 8192;
 80036da:	ed80 4b00 	vstr	d4, [r0]
	b2 = (double) b2co / 16384;
 80036de:	ed81 5b00 	vstr	d5, [r1]
	c12 /= (double) 4194304.0;
 80036e2:	ed82 6b00 	vstr	d6, [r2]
	a0 = (double) a0co / 8;
 80036e6:	ed83 7b00 	vstr	d7, [r3]

//	printf("a0=%f, b1=%f, b2=%f, c12=%f\n", a0, b1, b2, c12);
	getpressure115();
 80036ea:	f7ff fe91 	bl	8003410 <getpressure115>
	return (HAL_OK);
}
 80036ee:	4628      	mov	r0, r5
 80036f0:	b006      	add	sp, #24
 80036f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			printf("Splat1-2 MPL115A2 I2C HAL returned error %d\n\r", result);
 80036f6:	4601      	mov	r1, r0
 80036f8:	480c      	ldr	r0, [pc, #48]	; (800372c <initpressure115+0xf4>)
 80036fa:	f01d f965 	bl	80209c8 <iprintf>
}
 80036fe:	4628      	mov	r0, r5
 8003700:	b006      	add	sp, #24
 8003702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return (HAL_ERROR);		// expected a changed reading - is device present?
 8003706:	2501      	movs	r5, #1
		printf("Splat1-2 MPL115A2 I2C not present?\n\r");
 8003708:	4809      	ldr	r0, [pc, #36]	; (8003730 <initpressure115+0xf8>)
 800370a:	f01d f95d 	bl	80209c8 <iprintf>
}
 800370e:	4628      	mov	r0, r5
 8003710:	b006      	add	sp, #24
 8003712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003716:	bf00      	nop
 8003718:	20022ad0 	.word	0x20022ad0
 800371c:	20001660 	.word	0x20001660
 8003720:	20001668 	.word	0x20001668
 8003724:	20001670 	.word	0x20001670
 8003728:	20001658 	.word	0x20001658
 800372c:	08025ca8 	.word	0x08025ca8
 8003730:	08025cd8 	.word	0x08025cd8

08003734 <getpressure3115>:
//////////////////////////////////////////////
//
// get the pressure and put in globals Sensor MPL3115A2
//
//////////////////////////////////////////////
HAL_StatusTypeDef getpressure3115(void) {
 8003734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003738:	b08c      	sub	sp, #48	; 0x30
	HAL_StatusTypeDef result;
	volatile uint32_t p, t;
//	double ffp, ffn, ffrac;
	volatile uint32_t ifp, ifn, ifrac;

	data[0] = 0x55;
 800373a:	2355      	movs	r3, #85	; 0x55
	for (trys = 0; trys < 4; trys++) {
 800373c:	2500      	movs	r5, #0
		osDelay(10);
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0, 1, &data[0], 1, 1000); // rd status reg pressure sense
 800373e:	4f48      	ldr	r7, [pc, #288]	; (8003860 <getpressure3115+0x12c>)
	data[0] = 0x55;
 8003740:	ae0c      	add	r6, sp, #48	; 0x30
		if (result != HAL_OK) {
			printf("Splat1-1 I2C HAL returned error %d\n\r", result);
 8003742:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8003880 <getpressure3115+0x14c>
	data[0] = 0x55;
 8003746:	f806 3d10 	strb.w	r3, [r6, #-16]!
		osDelay(10);
 800374a:	200a      	movs	r0, #10
 800374c:	f00d fbcc 	bl	8010ee8 <osDelay>
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8003750:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003754:	2301      	movs	r3, #1
 8003756:	9600      	str	r6, [sp, #0]
 8003758:	9202      	str	r2, [sp, #8]
 800375a:	21c0      	movs	r1, #192	; 0xc0
 800375c:	2200      	movs	r2, #0
 800375e:	9301      	str	r3, [sp, #4]
 8003760:	4638      	mov	r0, r7
 8003762:	f005 fb9b 	bl	8008e9c <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 8003766:	4604      	mov	r4, r0
 8003768:	2800      	cmp	r0, #0
 800376a:	d167      	bne.n	800383c <getpressure3115+0x108>
			if (trys == 3)
				return (result);
		} // no HAL error
		if (data[0] & 0x08)
 800376c:	f89d 3020 	ldrb.w	r3, [sp, #32]
	for (trys = 0; trys < 4; trys++) {
 8003770:	3501      	adds	r5, #1
		if (data[0] & 0x08)
 8003772:	071b      	lsls	r3, r3, #28
 8003774:	d401      	bmi.n	800377a <getpressure3115+0x46>
	for (trys = 0; trys < 4; trys++) {
 8003776:	2d04      	cmp	r5, #4
 8003778:	d1e7      	bne.n	800374a <getpressure3115+0x16>
 800377a:	2501      	movs	r5, #1
 800377c:	af0a      	add	r7, sp, #40	; 0x28
			break;		// data is ready
	} // for
//		printf("Press stat: 0x%0x\n", data[0]);

	for (i = 1; i < 6; i++) {
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i, 1, &data[0], 1, 1000); // rd status reg pressure sense
 800377e:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
 8003782:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 8003860 <getpressure3115+0x12c>
 8003786:	46a8      	mov	r8, r5
 8003788:	2301      	movs	r3, #1
 800378a:	b2aa      	uxth	r2, r5
 800378c:	f8cd a008 	str.w	sl, [sp, #8]
 8003790:	21c0      	movs	r1, #192	; 0xc0
 8003792:	f8cd 8004 	str.w	r8, [sp, #4]
 8003796:	4648      	mov	r0, r9
 8003798:	9600      	str	r6, [sp, #0]
	for (i = 1; i < 6; i++) {
 800379a:	441d      	add	r5, r3
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i, 1, &data[0], 1, 1000); // rd status reg pressure sense
 800379c:	f005 fb7e 	bl	8008e9c <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 80037a0:	4604      	mov	r4, r0
 80037a2:	2800      	cmp	r0, #0
 80037a4:	d154      	bne.n	8003850 <getpressure3115+0x11c>
			printf("Splat1-2 I2C HAL returned error %d\n\r", result);
			return (result);
		}
		dataout[i - 1] = data[0];
 80037a6:	f89d 3020 	ldrb.w	r3, [sp, #32]
	for (i = 1; i < 6; i++) {
 80037aa:	2d06      	cmp	r5, #6
		dataout[i - 1] = data[0];
 80037ac:	f807 3b01 	strb.w	r3, [r7], #1
	for (i = 1; i < 6; i++) {
 80037b0:	d1ea      	bne.n	8003788 <getpressure3115+0x54>
//				printf("[0x%02x] ", data[0]);
	}  // for

	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 80037b2:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29

#endif

	// convert quarterpascals to kilopascals
	ifn = p / 4000;		// kilopascals
	ifrac = (p % 4000);		// fractions of a kilopascal
 80037b6:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 80037ba:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28

	pressure = ifn;
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52

	temperature = t >> 4;
	tempfrac = (t & 0x0F) * 625 * 100;
 80037be:	f24f 4124 	movw	r1, #62500	; 0xf424
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 80037c2:	0212      	lsls	r2, r2, #8
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 80037c4:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80037c8:	f89d 602b 	ldrb.w	r6, [sp, #43]	; 0x2b
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 80037cc:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 80037d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 80037d4:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 80037d8:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
	pressure = ifn;
 80037dc:	4e21      	ldr	r6, [pc, #132]	; (8003864 <getpressure3115+0x130>)
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 80037de:	432a      	orrs	r2, r5
	statuspkt.temppress = t << 20 | p;								// update status packet
 80037e0:	4d21      	ldr	r5, [pc, #132]	; (8003868 <getpressure3115+0x134>)
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 80037e2:	111b      	asrs	r3, r3, #4
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 80037e4:	0912      	lsrs	r2, r2, #4
 80037e6:	9204      	str	r2, [sp, #16]
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 80037e8:	9305      	str	r3, [sp, #20]
	statuspkt.temppress = t << 20 | p;								// update status packet
 80037ea:	9b05      	ldr	r3, [sp, #20]
 80037ec:	9a04      	ldr	r2, [sp, #16]
 80037ee:	ea42 5203 	orr.w	r2, r2, r3, lsl #20
	ifn = p / 4000;		// kilopascals
 80037f2:	4b1e      	ldr	r3, [pc, #120]	; (800386c <getpressure3115+0x138>)
	statuspkt.temppress = t << 20 | p;								// update status packet
 80037f4:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
	ifn = p / 4000;		// kilopascals
 80037f8:	9a04      	ldr	r2, [sp, #16]
 80037fa:	fba3 5202 	umull	r5, r2, r3, r2
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52
 80037fe:	4d1c      	ldr	r5, [pc, #112]	; (8003870 <getpressure3115+0x13c>)
	ifn = p / 4000;		// kilopascals
 8003800:	0a12      	lsrs	r2, r2, #8
 8003802:	9206      	str	r2, [sp, #24]
	ifrac = (p % 4000);		// fractions of a kilopascal
 8003804:	9a04      	ldr	r2, [sp, #16]
 8003806:	fba3 7302 	umull	r7, r3, r3, r2
	temperature = t >> 4;
 800380a:	4f1a      	ldr	r7, [pc, #104]	; (8003874 <getpressure3115+0x140>)
	ifrac = (p % 4000);		// fractions of a kilopascal
 800380c:	0a1b      	lsrs	r3, r3, #8
 800380e:	fb00 2313 	mls	r3, r0, r3, r2
 8003812:	9307      	str	r3, [sp, #28]
	pressure = ifn;
 8003814:	f8dd c018 	ldr.w	ip, [sp, #24]
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52
 8003818:	9807      	ldr	r0, [sp, #28]
	temperature = t >> 4;
 800381a:	9b05      	ldr	r3, [sp, #20]
	tempfrac = (t & 0x0F) * 625 * 100;
 800381c:	9a05      	ldr	r2, [sp, #20]
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52
 800381e:	6028      	str	r0, [r5, #0]
	temperature = t >> 4;
 8003820:	091b      	lsrs	r3, r3, #4
	tempfrac = (t & 0x0F) * 625 * 100;
 8003822:	f002 020f 	and.w	r2, r2, #15
 8003826:	4814      	ldr	r0, [pc, #80]	; (8003878 <getpressure3115+0x144>)
	pressure = ifn;
 8003828:	f8c6 c000 	str.w	ip, [r6]
	tempfrac = (t & 0x0F) * 625 * 100;
 800382c:	fb01 f102 	mul.w	r1, r1, r2
	temperature = t >> 4;
 8003830:	603b      	str	r3, [r7, #0]
	tempfrac = (t & 0x0F) * 625 * 100;
 8003832:	6001      	str	r1, [r0, #0]
			(float) ((statuspkt.temppress & 0x000FFFFF) / 4000.0));
	}
#endif

	return (result);
}
 8003834:	4620      	mov	r0, r4
 8003836:	b00c      	add	sp, #48	; 0x30
 8003838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-1 I2C HAL returned error %d\n\r", result);
 800383c:	4601      	mov	r1, r0
 800383e:	4640      	mov	r0, r8
 8003840:	f01d f8c2 	bl	80209c8 <iprintf>
			if (trys == 3)
 8003844:	2d03      	cmp	r5, #3
 8003846:	d191      	bne.n	800376c <getpressure3115+0x38>
}
 8003848:	4620      	mov	r0, r4
 800384a:	b00c      	add	sp, #48	; 0x30
 800384c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-2 I2C HAL returned error %d\n\r", result);
 8003850:	4601      	mov	r1, r0
 8003852:	480a      	ldr	r0, [pc, #40]	; (800387c <getpressure3115+0x148>)
 8003854:	f01d f8b8 	bl	80209c8 <iprintf>
}
 8003858:	4620      	mov	r0, r4
 800385a:	b00c      	add	sp, #48	; 0x30
 800385c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003860:	20022ad0 	.word	0x20022ad0
 8003864:	200233d8 	.word	0x200233d8
 8003868:	20022774 	.word	0x20022774
 800386c:	10624dd3 	.word	0x10624dd3
 8003870:	200233dc 	.word	0x200233dc
 8003874:	200233d4 	.word	0x200233d4
 8003878:	200233d0 	.word	0x200233d0
 800387c:	08025c4c 	.word	0x08025c4c
 8003880:	08025c24 	.word	0x08025c24

08003884 <initpressure3115>:

HAL_StatusTypeDef initpressure3115(void)	// returns 1 on bad MPL3115, 0 on good.
{
 8003884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003886:	b08b      	sub	sp, #44	; 0x2c
	int i, step;
	uint8_t data[8];
	HAL_StatusTypeDef result;

	result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0x0c, 1, &data[0], 1, 1000); // rd who am i register
 8003888:	2501      	movs	r5, #1
 800388a:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 800388e:	220c      	movs	r2, #12
 8003890:	a808      	add	r0, sp, #32
 8003892:	462b      	mov	r3, r5
 8003894:	9602      	str	r6, [sp, #8]
 8003896:	21c0      	movs	r1, #192	; 0xc0
 8003898:	9000      	str	r0, [sp, #0]
 800389a:	9501      	str	r5, [sp, #4]
 800389c:	482f      	ldr	r0, [pc, #188]	; (800395c <initpressure3115+0xd8>)
 800389e:	f005 fafd 	bl	8008e9c <HAL_I2C_Mem_Read>
	if (result != HAL_OK) {
 80038a2:	b938      	cbnz	r0, 80038b4 <initpressure3115+0x30>
		printf("I2C HAL returned error 1\n\r");
		return (result);
	}
	if (data[0] != 0xc4)		// not the default MPL3115 ID
 80038a4:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80038a8:	2bc4      	cmp	r3, #196	; 0xc4
 80038aa:	d00a      	beq.n	80038c2 <initpressure3115+0x3e>
		return (HAL_ERROR);
 80038ac:	462c      	mov	r4, r5
	if (result != HAL_OK) {
		printf("MPL3115A2 getpressure failed\n\r");
	}

	return (result);
}
 80038ae:	4620      	mov	r0, r4
 80038b0:	b00b      	add	sp, #44	; 0x2c
 80038b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038b4:	4604      	mov	r4, r0
		printf("I2C HAL returned error 1\n\r");
 80038b6:	482a      	ldr	r0, [pc, #168]	; (8003960 <initpressure3115+0xdc>)
 80038b8:	f01d f886 	bl	80209c8 <iprintf>
}
 80038bc:	4620      	mov	r0, r4
 80038be:	b00b      	add	sp, #44	; 0x2c
 80038c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x26, 0x38 }, 2, 1000);
 80038c2:	4f28      	ldr	r7, [pc, #160]	; (8003964 <initpressure3115+0xe0>)
 80038c4:	aa0a      	add	r2, sp, #40	; 0x28
 80038c6:	9600      	str	r6, [sp, #0]
 80038c8:	2302      	movs	r3, #2
 80038ca:	89bc      	ldrh	r4, [r7, #12]
 80038cc:	21c0      	movs	r1, #192	; 0xc0
 80038ce:	4823      	ldr	r0, [pc, #140]	; (800395c <initpressure3115+0xd8>)
 80038d0:	f822 4d14 	strh.w	r4, [r2, #-20]!
 80038d4:	f005 fa3c 	bl	8008d50 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 80038d8:	4604      	mov	r4, r0
 80038da:	bb78      	cbnz	r0, 800393c <initpressure3115+0xb8>
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x13, 0x07 }, 2, 1000); // enbl data flags pressure sense
 80038dc:	8a39      	ldrh	r1, [r7, #16]
 80038de:	aa0a      	add	r2, sp, #40	; 0x28
 80038e0:	9600      	str	r6, [sp, #0]
 80038e2:	2302      	movs	r3, #2
 80038e4:	f822 1d10 	strh.w	r1, [r2, #-16]!
 80038e8:	21c0      	movs	r1, #192	; 0xc0
 80038ea:	481c      	ldr	r0, [pc, #112]	; (800395c <initpressure3115+0xd8>)
 80038ec:	f005 fa30 	bl	8008d50 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 80038f0:	4604      	mov	r4, r0
 80038f2:	bb38      	cbnz	r0, 8003944 <initpressure3115+0xc0>
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x26, 0x39 }, 2, 1000); // set active pressure sense
 80038f4:	8ab9      	ldrh	r1, [r7, #20]
 80038f6:	aa0a      	add	r2, sp, #40	; 0x28
 80038f8:	9600      	str	r6, [sp, #0]
 80038fa:	2302      	movs	r3, #2
 80038fc:	f822 1d0c 	strh.w	r1, [r2, #-12]!
 8003900:	21c0      	movs	r1, #192	; 0xc0
 8003902:	4816      	ldr	r0, [pc, #88]	; (800395c <initpressure3115+0xd8>)
 8003904:	f005 fa24 	bl	8008d50 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8003908:	4604      	mov	r4, r0
 800390a:	b9f8      	cbnz	r0, 800394c <initpressure3115+0xc8>
	osDelay(100);	// allow chip to start up sampling
 800390c:	2064      	movs	r0, #100	; 0x64
 800390e:	f00d faeb 	bl	8010ee8 <osDelay>
	result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 1, 1, &data[0], 1, 1000); // rd msb of press reg to clear ready flags in SR
 8003912:	aa08      	add	r2, sp, #32
 8003914:	462b      	mov	r3, r5
 8003916:	21c0      	movs	r1, #192	; 0xc0
 8003918:	9200      	str	r2, [sp, #0]
 800391a:	462a      	mov	r2, r5
 800391c:	480f      	ldr	r0, [pc, #60]	; (800395c <initpressure3115+0xd8>)
 800391e:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8003922:	f005 fabb 	bl	8008e9c <HAL_I2C_Mem_Read>
	if (result != HAL_OK) {
 8003926:	4604      	mov	r4, r0
 8003928:	b9a0      	cbnz	r0, 8003954 <initpressure3115+0xd0>
	result = getpressure3115();
 800392a:	f7ff ff03 	bl	8003734 <getpressure3115>
	if (result != HAL_OK) {
 800392e:	4604      	mov	r4, r0
 8003930:	2800      	cmp	r0, #0
 8003932:	d0bc      	beq.n	80038ae <initpressure3115+0x2a>
		printf("MPL3115A2 getpressure failed\n\r");
 8003934:	480c      	ldr	r0, [pc, #48]	; (8003968 <initpressure3115+0xe4>)
 8003936:	f01d f847 	bl	80209c8 <iprintf>
 800393a:	e7b8      	b.n	80038ae <initpressure3115+0x2a>
		printf("I2C HAL returned error 2b\n\r");
 800393c:	480b      	ldr	r0, [pc, #44]	; (800396c <initpressure3115+0xe8>)
 800393e:	f01d f843 	bl	80209c8 <iprintf>
		return (result);
 8003942:	e7b4      	b.n	80038ae <initpressure3115+0x2a>
		printf("I2C HAL returned error 3\n\r");
 8003944:	480a      	ldr	r0, [pc, #40]	; (8003970 <initpressure3115+0xec>)
 8003946:	f01d f83f 	bl	80209c8 <iprintf>
		return (result);
 800394a:	e7b0      	b.n	80038ae <initpressure3115+0x2a>
		printf("I2C HAL returned error 4\n\r");
 800394c:	4809      	ldr	r0, [pc, #36]	; (8003974 <initpressure3115+0xf0>)
 800394e:	f01d f83b 	bl	80209c8 <iprintf>
		return (result);
 8003952:	e7ac      	b.n	80038ae <initpressure3115+0x2a>
		printf("I2C HAL returned error 5\n\r");
 8003954:	4808      	ldr	r0, [pc, #32]	; (8003978 <initpressure3115+0xf4>)
 8003956:	f01d f837 	bl	80209c8 <iprintf>
		return (result);
 800395a:	e7a8      	b.n	80038ae <initpressure3115+0x2a>
 800395c:	20022ad0 	.word	0x20022ad0
 8003960:	08025c74 	.word	0x08025c74
 8003964:	08024888 	.word	0x08024888
 8003968:	08025d70 	.word	0x08025d70
 800396c:	08025d00 	.word	0x08025d00
 8003970:	08025d1c 	.word	0x08025d1c
 8003974:	08025d38 	.word	0x08025d38
 8003978:	08025d54 	.word	0x08025d54

0800397c <initsplat>:
//////////////////////////////////////////////
//
// Initialise the splat board
//
//////////////////////////////////////////////
void initsplat(void) {
 800397c:	b510      	push	{r4, lr}
	int i, j, k;

	cycleleds();
 800397e:	f7ff fc29 	bl	80031d4 <cycleleds>
	osDelay(500);
 8003982:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003986:	f00d faaf 	bl	8010ee8 <osDelay>
	printf("Initsplat: LED cycle\n");
 800398a:	4827      	ldr	r0, [pc, #156]	; (8003a28 <initsplat+0xac>)
 800398c:	f01d f8a4 	bl	8020ad8 <puts>

	printf("Initsplat: Dual Mux\n\r");
 8003990:	4826      	ldr	r0, [pc, #152]	; (8003a2c <initsplat+0xb0>)
 8003992:	f01d f819 	bl	80209c8 <iprintf>
	printf("Initsplat: Programmable Gain Amp\n");
	initpga();

	osDelay(500);
	printf("initsplat: Pressure sensor\n\r");
	psensor = PNONE;
 8003996:	4c26      	ldr	r4, [pc, #152]	; (8003a30 <initsplat+0xb4>)
	initdualmux();
 8003998:	f7ff fd1c 	bl	80033d4 <initdualmux>
	osDelay(500);
 800399c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80039a0:	f00d faa2 	bl	8010ee8 <osDelay>
	printf("Initsplat: Programmable Gain Amp\n");
 80039a4:	4823      	ldr	r0, [pc, #140]	; (8003a34 <initsplat+0xb8>)
 80039a6:	f01d f897 	bl	8020ad8 <puts>
	initpga();
 80039aa:	f7ff fc89 	bl	80032c0 <initpga>
	osDelay(500);
 80039ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80039b2:	f00d fa99 	bl	8010ee8 <osDelay>
	printf("initsplat: Pressure sensor\n\r");
 80039b6:	4820      	ldr	r0, [pc, #128]	; (8003a38 <initsplat+0xbc>)
 80039b8:	f01d f806 	bl	80209c8 <iprintf>
	psensor = PNONE;
 80039bc:	2300      	movs	r3, #0
 80039be:	6023      	str	r3, [r4, #0]
	if (initpressure3115() == HAL_OK) {	// non zero result means MPL3115 nogood
 80039c0:	f7ff ff60 	bl	8003884 <initpressure3115>
 80039c4:	b1e8      	cbz	r0, 8003a02 <initsplat+0x86>
		printf("MPL3115A2 pressure sensor present\n\r");
		psensor = MPL3115A2;
		statuspkt.bconf |= (MPL3115A2<<3);
	} else {
		if (initpressure115() == HAL_OK) {
 80039c6:	f7ff fe37 	bl	8003638 <initpressure115>
 80039ca:	b140      	cbz	r0, 80039de <initsplat+0x62>
			printf("MPL115A2 pressure sensor present\n\r");
			psensor = MPL115A2;		// assume MPL115 fitted instead
			statuspkt.bconf |= (MPL115A2<<3);
		} else {
			printf("NO pressure sensor present\n\r");
 80039cc:	481b      	ldr	r0, [pc, #108]	; (8003a3c <initsplat+0xc0>)
 80039ce:	f01c fffb 	bl	80209c8 <iprintf>
		}
	}
	osDelay(500);
 80039d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
 80039d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osDelay(500);
 80039da:	f00d ba85 	b.w	8010ee8 <osDelay>
			printf("MPL115A2 pressure sensor present\n\r");
 80039de:	4818      	ldr	r0, [pc, #96]	; (8003a40 <initsplat+0xc4>)
 80039e0:	f01c fff2 	bl	80209c8 <iprintf>
			statuspkt.bconf |= (MPL115A2<<3);
 80039e4:	4a17      	ldr	r2, [pc, #92]	; (8003a44 <initsplat+0xc8>)
			psensor = MPL115A2;		// assume MPL115 fitted instead
 80039e6:	2101      	movs	r1, #1
	osDelay(500);
 80039e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
			statuspkt.bconf |= (MPL115A2<<3);
 80039ec:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
			psensor = MPL115A2;		// assume MPL115 fitted instead
 80039f0:	6021      	str	r1, [r4, #0]
			statuspkt.bconf |= (MPL115A2<<3);
 80039f2:	f043 0308 	orr.w	r3, r3, #8
}
 80039f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			statuspkt.bconf |= (MPL115A2<<3);
 80039fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	osDelay(500);
 80039fe:	f00d ba73 	b.w	8010ee8 <osDelay>
		printf("MPL3115A2 pressure sensor present\n\r");
 8003a02:	4811      	ldr	r0, [pc, #68]	; (8003a48 <initsplat+0xcc>)
 8003a04:	f01c ffe0 	bl	80209c8 <iprintf>
		statuspkt.bconf |= (MPL3115A2<<3);
 8003a08:	4a0e      	ldr	r2, [pc, #56]	; (8003a44 <initsplat+0xc8>)
		psensor = MPL3115A2;
 8003a0a:	2102      	movs	r1, #2
	osDelay(500);
 8003a0c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
		statuspkt.bconf |= (MPL3115A2<<3);
 8003a10:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
		psensor = MPL3115A2;
 8003a14:	6021      	str	r1, [r4, #0]
		statuspkt.bconf |= (MPL3115A2<<3);
 8003a16:	f043 0310 	orr.w	r3, r3, #16
}
 8003a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		statuspkt.bconf |= (MPL3115A2<<3);
 8003a1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	osDelay(500);
 8003a22:	f00d ba61 	b.w	8010ee8 <osDelay>
 8003a26:	bf00      	nop
 8003a28:	08025d90 	.word	0x08025d90
 8003a2c:	08025da8 	.word	0x08025da8
 8003a30:	2000167c 	.word	0x2000167c
 8003a34:	08025dc0 	.word	0x08025dc0
 8003a38:	08025de4 	.word	0x08025de4
 8003a3c:	08025e4c 	.word	0x08025e4c
 8003a40:	08025e28 	.word	0x08025e28
 8003a44:	20022774 	.word	0x20022774
 8003a48:	08025e04 	.word	0x08025e04

08003a4c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003a4c:	4b16      	ldr	r3, [pc, #88]	; (8003aa8 <HAL_MspInit+0x5c>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003a4e:	2200      	movs	r2, #0
 8003a50:	210f      	movs	r1, #15
 8003a52:	f06f 0001 	mvn.w	r0, #1
{
 8003a56:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a58:	6c1c      	ldr	r4, [r3, #64]	; 0x40
{
 8003a5a:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a5c:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8003a60:	641c      	str	r4, [r3, #64]	; 0x40
 8003a62:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8003a64:	f004 5480 	and.w	r4, r4, #268435456	; 0x10000000
 8003a68:	9400      	str	r4, [sp, #0]
 8003a6a:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a6c:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8003a6e:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8003a72:	645c      	str	r4, [r3, #68]	; 0x44
 8003a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a7a:	9301      	str	r3, [sp, #4]
 8003a7c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003a7e:	f002 f9d7 	bl	8005e30 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 6, 0);
 8003a82:	2200      	movs	r2, #0
 8003a84:	2106      	movs	r1, #6
 8003a86:	2005      	movs	r0, #5
 8003a88:	f002 f9d2 	bl	8005e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003a8c:	2005      	movs	r0, #5
 8003a8e:	f002 fa15 	bl	8005ebc <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 6, 0);
 8003a92:	2200      	movs	r2, #0
 8003a94:	2106      	movs	r1, #6
 8003a96:	2051      	movs	r0, #81	; 0x51
 8003a98:	f002 f9ca 	bl	8005e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8003a9c:	2051      	movs	r0, #81	; 0x51

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a9e:	b002      	add	sp, #8
 8003aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8003aa4:	f002 ba0a 	b.w	8005ebc <HAL_NVIC_EnableIRQ>
 8003aa8:	40023800 	.word	0x40023800

08003aac <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8003aac:	4a48      	ldr	r2, [pc, #288]	; (8003bd0 <HAL_ADC_MspInit+0x124>)
 8003aae:	6803      	ldr	r3, [r0, #0]
{
 8003ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hadc->Instance==ADC1)
 8003ab2:	4293      	cmp	r3, r2
{
 8003ab4:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ab6:	f04f 0400 	mov.w	r4, #0
 8003aba:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8003abe:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8003ac2:	940b      	str	r4, [sp, #44]	; 0x2c
  if(hadc->Instance==ADC1)
 8003ac4:	d007      	beq.n	8003ad6 <HAL_ADC_MspInit+0x2a>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8003ac6:	4a43      	ldr	r2, [pc, #268]	; (8003bd4 <HAL_ADC_MspInit+0x128>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d063      	beq.n	8003b94 <HAL_ADC_MspInit+0xe8>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 8003acc:	4a42      	ldr	r2, [pc, #264]	; (8003bd8 <HAL_ADC_MspInit+0x12c>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d043      	beq.n	8003b5a <HAL_ADC_MspInit+0xae>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003ad2:	b00d      	add	sp, #52	; 0x34
 8003ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003ad6:	4b41      	ldr	r3, [pc, #260]	; (8003bdc <HAL_ADC_MspInit+0x130>)
 8003ad8:	4606      	mov	r6, r0
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003ada:	2008      	movs	r0, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003adc:	2703      	movs	r7, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003ade:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ae0:	a907      	add	r1, sp, #28
    hdma_adc1.Instance = DMA2_Stream4;
 8003ae2:	4d3f      	ldr	r5, [pc, #252]	; (8003be0 <HAL_ADC_MspInit+0x134>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003ae4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ae8:	645a      	str	r2, [r3, #68]	; 0x44
 8003aea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003aec:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8003af0:	9201      	str	r2, [sp, #4]
 8003af2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003af4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003af6:	f042 0201 	orr.w	r2, r2, #1
 8003afa:	631a      	str	r2, [r3, #48]	; 0x30
 8003afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003afe:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b00:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b04:	4837      	ldr	r0, [pc, #220]	; (8003be4 <HAL_ADC_MspInit+0x138>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b06:	9708      	str	r7, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b08:	9302      	str	r3, [sp, #8]
 8003b0a:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b0c:	f004 fbf4 	bl	80082f8 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream4;
 8003b10:	4a35      	ldr	r2, [pc, #212]	; (8003be8 <HAL_ADC_MspInit+0x13c>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003b12:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003b16:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003b1a:	f44f 6c00 	mov.w	ip, #2048	; 0x800
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003b1e:	62af      	str	r7, [r5, #40]	; 0x28
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8003b20:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003b24:	f44f 7780 	mov.w	r7, #256	; 0x100
    hdma_adc1.Instance = DMA2_Stream4;
 8003b28:	602a      	str	r2, [r5, #0]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003b2a:	612b      	str	r3, [r5, #16]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003b2c:	2204      	movs	r2, #4
    hdma_adc1.Init.MemBurst = DMA_MBURST_INC4;
 8003b2e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003b32:	606c      	str	r4, [r5, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b34:	60ac      	str	r4, [r5, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b36:	60ec      	str	r4, [r5, #12]
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003b38:	632c      	str	r4, [r5, #48]	; 0x30
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003b3a:	626a      	str	r2, [r5, #36]	; 0x24
    hdma_adc1.Init.MemBurst = DMA_MBURST_INC4;
 8003b3c:	62eb      	str	r3, [r5, #44]	; 0x2c
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003b3e:	e9c5 c005 	strd	ip, r0, [r5, #20]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003b42:	4628      	mov	r0, r5
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8003b44:	e9c5 7107 	strd	r7, r1, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003b48:	f002 fc5e 	bl	8006408 <HAL_DMA_Init>
 8003b4c:	b108      	cbz	r0, 8003b52 <HAL_ADC_MspInit+0xa6>
      Error_Handler();
 8003b4e:	f7fe f987 	bl	8001e60 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003b52:	63b5      	str	r5, [r6, #56]	; 0x38
 8003b54:	63ae      	str	r6, [r5, #56]	; 0x38
}
 8003b56:	b00d      	add	sp, #52	; 0x34
 8003b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003b5a:	4b20      	ldr	r3, [pc, #128]	; (8003bdc <HAL_ADC_MspInit+0x130>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003b5c:	2508      	movs	r5, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b5e:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b60:	a907      	add	r1, sp, #28
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003b62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b64:	481f      	ldr	r0, [pc, #124]	; (8003be4 <HAL_ADC_MspInit+0x138>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003b66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b6a:	645a      	str	r2, [r3, #68]	; 0x44
 8003b6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b6e:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8003b72:	9205      	str	r2, [sp, #20]
 8003b74:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b78:	f042 0201 	orr.w	r2, r2, #1
 8003b7c:	631a      	str	r2, [r3, #48]	; 0x30
 8003b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003b80:	9507      	str	r5, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b82:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b86:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b88:	9306      	str	r3, [sp, #24]
 8003b8a:	9b06      	ldr	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b8c:	f004 fbb4 	bl	80082f8 <HAL_GPIO_Init>
}
 8003b90:	b00d      	add	sp, #52	; 0x34
 8003b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003b94:	4b11      	ldr	r3, [pc, #68]	; (8003bdc <HAL_ADC_MspInit+0x130>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003b96:	2508      	movs	r5, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b98:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b9a:	a907      	add	r1, sp, #28
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003b9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b9e:	4811      	ldr	r0, [pc, #68]	; (8003be4 <HAL_ADC_MspInit+0x138>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003ba0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ba4:	645a      	str	r2, [r3, #68]	; 0x44
 8003ba6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ba8:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003bac:	9203      	str	r2, [sp, #12]
 8003bae:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bb2:	f042 0201 	orr.w	r2, r2, #1
 8003bb6:	631a      	str	r2, [r3, #48]	; 0x30
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003bba:	9507      	str	r5, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bbc:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bc0:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bc2:	9304      	str	r3, [sp, #16]
 8003bc4:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bc6:	f004 fb97 	bl	80082f8 <HAL_GPIO_Init>
}
 8003bca:	b00d      	add	sp, #52	; 0x34
 8003bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	40012000 	.word	0x40012000
 8003bd4:	40012100 	.word	0x40012100
 8003bd8:	40012200 	.word	0x40012200
 8003bdc:	40023800 	.word	0x40023800
 8003be0:	20022ee8 	.word	0x20022ee8
 8003be4:	40020000 	.word	0x40020000
 8003be8:	40026470 	.word	0x40026470

08003bec <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8003bec:	6802      	ldr	r2, [r0, #0]
 8003bee:	4b09      	ldr	r3, [pc, #36]	; (8003c14 <HAL_CRC_MspInit+0x28>)
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d000      	beq.n	8003bf6 <HAL_CRC_MspInit+0xa>
 8003bf4:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003bf6:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 8003bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
{
 8003bfe:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 8003c00:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c04:	631a      	str	r2, [r3, #48]	; 0x30
 8003c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c0c:	9301      	str	r3, [sp, #4]
 8003c0e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003c10:	b002      	add	sp, #8
 8003c12:	4770      	bx	lr
 8003c14:	40023000 	.word	0x40023000

08003c18 <HAL_DAC_MspInit>:
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC)
 8003c18:	4b2b      	ldr	r3, [pc, #172]	; (8003cc8 <HAL_DAC_MspInit+0xb0>)
 8003c1a:	6802      	ldr	r2, [r0, #0]
{
 8003c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hdac->Instance==DAC)
 8003c1e:	429a      	cmp	r2, r3
{
 8003c20:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c22:	f04f 0400 	mov.w	r4, #0
 8003c26:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003c2a:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8003c2e:	9407      	str	r4, [sp, #28]
  if(hdac->Instance==DAC)
 8003c30:	d001      	beq.n	8003c36 <HAL_DAC_MspInit+0x1e>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003c32:	b009      	add	sp, #36	; 0x24
 8003c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_DAC_CLK_ENABLE();
 8003c36:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8003c3a:	4606      	mov	r6, r0
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003c3c:	2010      	movs	r0, #16
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c3e:	2503      	movs	r5, #3
    __HAL_RCC_DAC_CLK_ENABLE();
 8003c40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c42:	a903      	add	r1, sp, #12
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8003c44:	f44f 6780 	mov.w	r7, #1024	; 0x400
    __HAL_RCC_DAC_CLK_ENABLE();
 8003c48:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003c4c:	641a      	str	r2, [r3, #64]	; 0x40
 8003c4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c50:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8003c54:	9201      	str	r2, [sp, #4]
 8003c56:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c5a:	f042 0201 	orr.w	r2, r2, #1
 8003c5e:	631a      	str	r2, [r3, #48]	; 0x30
 8003c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003c62:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c64:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c68:	4818      	ldr	r0, [pc, #96]	; (8003ccc <HAL_DAC_MspInit+0xb4>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c6a:	9504      	str	r5, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c6c:	9302      	str	r3, [sp, #8]
    hdma_dac1.Instance = DMA1_Stream5;
 8003c6e:	4d18      	ldr	r5, [pc, #96]	; (8003cd0 <HAL_DAC_MspInit+0xb8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c70:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c72:	f004 fb41 	bl	80082f8 <HAL_GPIO_Init>
    hdma_dac1.Instance = DMA1_Stream5;
 8003c76:	4b17      	ldr	r3, [pc, #92]	; (8003cd4 <HAL_DAC_MspInit+0xbc>)
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c78:	2040      	movs	r0, #64	; 0x40
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8003c7a:	f04f 6c60 	mov.w	ip, #234881024	; 0xe000000
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003c7e:	2104      	movs	r1, #4
    hdma_dac1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_3QUARTERSFULL;
 8003c80:	2202      	movs	r2, #2
    hdma_dac1.Instance = DMA1_Stream5;
 8003c82:	602b      	str	r3, [r5, #0]
    hdma_dac1.Init.MemBurst = DMA_MBURST_INC4;
 8003c84:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c88:	60ec      	str	r4, [r5, #12]
    hdma_dac1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003c8a:	632c      	str	r4, [r5, #48]	; 0x30
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8003c8c:	612f      	str	r7, [r5, #16]
    hdma_dac1.Init.MemBurst = DMA_MBURST_INC4;
 8003c8e:	62eb      	str	r3, [r5, #44]	; 0x2c
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c90:	e9c5 c001 	strd	ip, r0, [r5, #4]
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8003c94:	4628      	mov	r0, r5
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c96:	e9c5 4405 	strd	r4, r4, [r5, #20]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8003c9a:	e9c5 4407 	strd	r4, r4, [r5, #28]
    hdma_dac1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_3QUARTERSFULL;
 8003c9e:	e9c5 1209 	strd	r1, r2, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8003ca2:	f002 fbb1 	bl	8006408 <HAL_DMA_Init>
 8003ca6:	b958      	cbnz	r0, 8003cc0 <HAL_DAC_MspInit+0xa8>
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8003ca8:	60b5      	str	r5, [r6, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8003caa:	2200      	movs	r2, #0
 8003cac:	2106      	movs	r1, #6
 8003cae:	2036      	movs	r0, #54	; 0x36
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8003cb0:	63ae      	str	r6, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8003cb2:	f002 f8bd 	bl	8005e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003cb6:	2036      	movs	r0, #54	; 0x36
 8003cb8:	f002 f900 	bl	8005ebc <HAL_NVIC_EnableIRQ>
}
 8003cbc:	b009      	add	sp, #36	; 0x24
 8003cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8003cc0:	f7fe f8ce 	bl	8001e60 <Error_Handler>
 8003cc4:	e7f0      	b.n	8003ca8 <HAL_DAC_MspInit+0x90>
 8003cc6:	bf00      	nop
 8003cc8:	40007400 	.word	0x40007400
 8003ccc:	40020000 	.word	0x40020000
 8003cd0:	20022cec 	.word	0x20022cec
 8003cd4:	40026088 	.word	0x40026088

08003cd8 <HAL_I2C_MspInit>:
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C1)
 8003cd8:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cda:	2300      	movs	r3, #0
  if(hi2c->Instance==I2C1)
 8003cdc:	493d      	ldr	r1, [pc, #244]	; (8003dd4 <HAL_I2C_MspInit+0xfc>)
{
 8003cde:	b570      	push	{r4, r5, r6, lr}
  if(hi2c->Instance==I2C1)
 8003ce0:	428a      	cmp	r2, r1
{
 8003ce2:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ce4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003ce8:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 8003cec:	930b      	str	r3, [sp, #44]	; 0x2c
  if(hi2c->Instance==I2C1)
 8003cee:	d007      	beq.n	8003d00 <HAL_I2C_MspInit+0x28>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 8003cf0:	4b39      	ldr	r3, [pc, #228]	; (8003dd8 <HAL_I2C_MspInit+0x100>)
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d04c      	beq.n	8003d90 <HAL_I2C_MspInit+0xb8>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
  else if(hi2c->Instance==I2C4)
 8003cf6:	4b39      	ldr	r3, [pc, #228]	; (8003ddc <HAL_I2C_MspInit+0x104>)
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d025      	beq.n	8003d48 <HAL_I2C_MspInit+0x70>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8003cfc:	b00c      	add	sp, #48	; 0x30
 8003cfe:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d00:	4c37      	ldr	r4, [pc, #220]	; (8003de0 <HAL_I2C_MspInit+0x108>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d02:	2212      	movs	r2, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d04:	2001      	movs	r0, #1
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8003d06:	f44f 7610 	mov.w	r6, #576	; 0x240
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d0a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d0c:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d0e:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d10:	f043 0302 	orr.w	r3, r3, #2
 8003d14:	6323      	str	r3, [r4, #48]	; 0x30
 8003d16:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d18:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003d1a:	2204      	movs	r2, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d1c:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d20:	9009      	str	r0, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d22:	4830      	ldr	r0, [pc, #192]	; (8003de4 <HAL_I2C_MspInit+0x10c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d24:	9301      	str	r3, [sp, #4]
 8003d26:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8003d28:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003d2a:	e9cd 520a 	strd	r5, r2, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d2e:	f004 fae3 	bl	80082f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003d32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d38:	6423      	str	r3, [r4, #64]	; 0x40
 8003d3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d40:	9302      	str	r3, [sp, #8]
 8003d42:	9b02      	ldr	r3, [sp, #8]
}
 8003d44:	b00c      	add	sp, #48	; 0x30
 8003d46:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d48:	4c25      	ldr	r4, [pc, #148]	; (8003de0 <HAL_I2C_MspInit+0x108>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d4a:	2212      	movs	r2, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d4c:	2001      	movs	r0, #1
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003d4e:	f44f 4640 	mov.w	r6, #49152	; 0xc000
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d52:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d54:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003d56:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d58:	f043 0320 	orr.w	r3, r3, #32
 8003d5c:	6323      	str	r3, [r4, #48]	; 0x30
 8003d5e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d60:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8003d62:	2204      	movs	r2, #4
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d64:	f003 0320 	and.w	r3, r3, #32
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d68:	9009      	str	r0, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003d6a:	481f      	ldr	r0, [pc, #124]	; (8003de8 <HAL_I2C_MspInit+0x110>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d6c:	9305      	str	r3, [sp, #20]
 8003d6e:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003d70:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8003d72:	e9cd 520a 	strd	r5, r2, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003d76:	f004 fabf 	bl	80082f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8003d7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d80:	6423      	str	r3, [r4, #64]	; 0x40
 8003d82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d88:	9306      	str	r3, [sp, #24]
 8003d8a:	9b06      	ldr	r3, [sp, #24]
}
 8003d8c:	b00c      	add	sp, #48	; 0x30
 8003d8e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d90:	4c13      	ldr	r4, [pc, #76]	; (8003de0 <HAL_I2C_MspInit+0x108>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d92:	2012      	movs	r0, #18
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003d94:	2203      	movs	r2, #3
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d96:	2601      	movs	r6, #1
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d98:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003d9a:	2504      	movs	r5, #4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003d9c:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d9e:	f043 0320 	orr.w	r3, r3, #32
 8003da2:	6323      	str	r3, [r4, #48]	; 0x30
 8003da4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003da6:	9008      	str	r0, [sp, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003da8:	f003 0320 	and.w	r3, r3, #32
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003dac:	480e      	ldr	r0, [pc, #56]	; (8003de8 <HAL_I2C_MspInit+0x110>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003dae:	9207      	str	r2, [sp, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003db0:	9303      	str	r3, [sp, #12]
 8003db2:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003db4:	920a      	str	r2, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003db6:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003db8:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003dba:	f004 fa9d 	bl	80082f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003dbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003dc0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003dc4:	6423      	str	r3, [r4, #64]	; 0x40
 8003dc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003dc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dcc:	9304      	str	r3, [sp, #16]
 8003dce:	9b04      	ldr	r3, [sp, #16]
}
 8003dd0:	b00c      	add	sp, #48	; 0x30
 8003dd2:	bd70      	pop	{r4, r5, r6, pc}
 8003dd4:	40005400 	.word	0x40005400
 8003dd8:	40005800 	.word	0x40005800
 8003ddc:	40006000 	.word	0x40006000
 8003de0:	40023800 	.word	0x40023800
 8003de4:	40020400 	.word	0x40020400
 8003de8:	40021400 	.word	0x40021400

08003dec <HAL_MDIOS_MspInit>:
* @retval None
*/
void HAL_MDIOS_MspInit(MDIOS_HandleTypeDef* hmdios)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hmdios->Instance==MDIOS)
 8003dec:	6802      	ldr	r2, [r0, #0]
 8003dee:	4b1c      	ldr	r3, [pc, #112]	; (8003e60 <HAL_MDIOS_MspInit+0x74>)
{
 8003df0:	b570      	push	{r4, r5, r6, lr}
  if(hmdios->Instance==MDIOS)
 8003df2:	429a      	cmp	r2, r3
{
 8003df4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003df6:	f04f 0400 	mov.w	r4, #0
 8003dfa:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003dfe:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8003e02:	9407      	str	r4, [sp, #28]
  if(hmdios->Instance==MDIOS)
 8003e04:	d001      	beq.n	8003e0a <HAL_MDIOS_MspInit+0x1e>
  /* USER CODE BEGIN MDIOS_MspInit 1 */

  /* USER CODE END MDIOS_MspInit 1 */
  }

}
 8003e06:	b008      	add	sp, #32
 8003e08:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_MDIO_CLK_ENABLE();
 8003e0a:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e0e:	2002      	movs	r0, #2
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 8003e10:	f44f 6688 	mov.w	r6, #1088	; 0x440
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e14:	2503      	movs	r5, #3
    __HAL_RCC_MDIO_CLK_ENABLE();
 8003e16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e18:	a903      	add	r1, sp, #12
    __HAL_RCC_MDIO_CLK_ENABLE();
 8003e1a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e1e:	645a      	str	r2, [r3, #68]	; 0x44
 8003e20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e22:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003e26:	9201      	str	r2, [sp, #4]
 8003e28:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e2c:	f042 0201 	orr.w	r2, r2, #1
 8003e30:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF12_MDIOS;
 8003e32:	220c      	movs	r2, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e36:	9004      	str	r0, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e38:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e3c:	4809      	ldr	r0, [pc, #36]	; (8003e64 <HAL_MDIOS_MspInit+0x78>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 8003e3e:	9603      	str	r6, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e40:	9302      	str	r3, [sp, #8]
 8003e42:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF12_MDIOS;
 8003e44:	e9cd 5206 	strd	r5, r2, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e48:	f004 fa56 	bl	80082f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(MDIOS_IRQn, 6, 0);
 8003e4c:	4622      	mov	r2, r4
 8003e4e:	2106      	movs	r1, #6
 8003e50:	206d      	movs	r0, #109	; 0x6d
 8003e52:	f001 ffed 	bl	8005e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(MDIOS_IRQn);
 8003e56:	206d      	movs	r0, #109	; 0x6d
 8003e58:	f002 f830 	bl	8005ebc <HAL_NVIC_EnableIRQ>
}
 8003e5c:	b008      	add	sp, #32
 8003e5e:	bd70      	pop	{r4, r5, r6, pc}
 8003e60:	40017800 	.word	0x40017800
 8003e64:	40020000 	.word	0x40020000

08003e68 <HAL_RNG_MspInit>:
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
  if(hrng->Instance==RNG)
 8003e68:	6802      	ldr	r2, [r0, #0]
 8003e6a:	4b08      	ldr	r3, [pc, #32]	; (8003e8c <HAL_RNG_MspInit+0x24>)
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d000      	beq.n	8003e72 <HAL_RNG_MspInit+0xa>
 8003e70:	4770      	bx	lr
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8003e72:	4b07      	ldr	r3, [pc, #28]	; (8003e90 <HAL_RNG_MspInit+0x28>)
{
 8003e74:	b082      	sub	sp, #8
    __HAL_RCC_RNG_CLK_ENABLE();
 8003e76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e7c:	635a      	str	r2, [r3, #52]	; 0x34
 8003e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e84:	9301      	str	r3, [sp, #4]
 8003e86:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8003e88:	b002      	add	sp, #8
 8003e8a:	4770      	bx	lr
 8003e8c:	50060800 	.word	0x50060800
 8003e90:	40023800 	.word	0x40023800

08003e94 <HAL_SPI_MspInit>:
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI2)
 8003e94:	6803      	ldr	r3, [r0, #0]
 8003e96:	4a56      	ldr	r2, [pc, #344]	; (8003ff0 <HAL_SPI_MspInit+0x15c>)
{
 8003e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(hspi->Instance==SPI2)
 8003e9c:	4293      	cmp	r3, r2
{
 8003e9e:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ea0:	f04f 0400 	mov.w	r4, #0
 8003ea4:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8003ea8:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8003eac:	940d      	str	r4, [sp, #52]	; 0x34
  if(hspi->Instance==SPI2)
 8003eae:	d008      	beq.n	8003ec2 <HAL_SPI_MspInit+0x2e>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(hspi->Instance==SPI3)
 8003eb0:	4a50      	ldr	r2, [pc, #320]	; (8003ff4 <HAL_SPI_MspInit+0x160>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d05c      	beq.n	8003f70 <HAL_SPI_MspInit+0xdc>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
  else if(hspi->Instance==SPI4)
 8003eb6:	4a50      	ldr	r2, [pc, #320]	; (8003ff8 <HAL_SPI_MspInit+0x164>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d037      	beq.n	8003f2c <HAL_SPI_MspInit+0x98>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8003ebc:	b00e      	add	sp, #56	; 0x38
 8003ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003ec2:	4b4e      	ldr	r3, [pc, #312]	; (8003ffc <HAL_SPI_MspInit+0x168>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003ec4:	200c      	movs	r0, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ec6:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003ec8:	2601      	movs	r6, #1
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003eca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003ecc:	2505      	movs	r5, #5
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ece:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003ed0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ed4:	641a      	str	r2, [r3, #64]	; 0x40
 8003ed6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ed8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003edc:	9201      	str	r2, [sp, #4]
 8003ede:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ee0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ee2:	f042 0204 	orr.w	r2, r2, #4
 8003ee6:	631a      	str	r2, [r3, #48]	; 0x30
 8003ee8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eea:	f002 0204 	and.w	r2, r2, #4
 8003eee:	9202      	str	r2, [sp, #8]
 8003ef0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ef2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ef4:	f042 0208 	orr.w	r2, r2, #8
 8003ef8:	631a      	str	r2, [r3, #48]	; 0x30
 8003efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003efc:	9009      	str	r0, [sp, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003efe:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f02:	483f      	ldr	r0, [pc, #252]	; (8004000 <HAL_SPI_MspInit+0x16c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f04:	970a      	str	r7, [sp, #40]	; 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f06:	9303      	str	r3, [sp, #12]
 8003f08:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003f0a:	e9cd 650c 	strd	r6, r5, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f0e:	f004 f9f3 	bl	80082f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003f12:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f14:	a909      	add	r1, sp, #36	; 0x24
 8003f16:	483b      	ldr	r0, [pc, #236]	; (8004004 <HAL_SPI_MspInit+0x170>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f18:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f1a:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003f1c:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003f1e:	e9cd 650c 	strd	r6, r5, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f22:	f004 f9e9 	bl	80082f8 <HAL_GPIO_Init>
}
 8003f26:	b00e      	add	sp, #56	; 0x38
 8003f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003f2c:	4b33      	ldr	r3, [pc, #204]	; (8003ffc <HAL_SPI_MspInit+0x168>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8003f2e:	2074      	movs	r0, #116	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f30:	2602      	movs	r6, #2
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003f32:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003f34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f36:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003f38:	2405      	movs	r4, #5
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003f3a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f3e:	645a      	str	r2, [r3, #68]	; 0x44
 8003f40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f42:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003f46:	9207      	str	r2, [sp, #28]
 8003f48:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f4c:	f042 0210 	orr.w	r2, r2, #16
 8003f50:	631a      	str	r2, [r3, #48]	; 0x30
 8003f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8003f54:	9009      	str	r0, [sp, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f56:	f003 0310 	and.w	r3, r3, #16
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003f5a:	482b      	ldr	r0, [pc, #172]	; (8004008 <HAL_SPI_MspInit+0x174>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f5c:	960a      	str	r6, [sp, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f5e:	9308      	str	r3, [sp, #32]
 8003f60:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003f62:	e9cd 540c 	strd	r5, r4, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003f66:	f004 f9c7 	bl	80082f8 <HAL_GPIO_Init>
}
 8003f6a:	b00e      	add	sp, #56	; 0x38
 8003f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003f70:	4b22      	ldr	r3, [pc, #136]	; (8003ffc <HAL_SPI_MspInit+0x168>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f72:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003f74:	2004      	movs	r0, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f76:	2503      	movs	r5, #3
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003f78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8003f7a:	2707      	movs	r7, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f7c:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003f7e:	f04f 0806 	mov.w	r8, #6
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003f82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f86:	641a      	str	r2, [r3, #64]	; 0x40
 8003f88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f8a:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8003f8e:	9204      	str	r2, [sp, #16]
 8003f90:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f94:	4332      	orrs	r2, r6
 8003f96:	631a      	str	r2, [r3, #48]	; 0x30
 8003f98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f9a:	4032      	ands	r2, r6
 8003f9c:	9205      	str	r2, [sp, #20]
 8003f9e:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fa2:	4302      	orrs	r2, r0
 8003fa4:	631a      	str	r2, [r3, #48]	; 0x30
 8003fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003fa8:	9009      	str	r0, [sp, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003faa:	4003      	ands	r3, r0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fac:	4817      	ldr	r0, [pc, #92]	; (800400c <HAL_SPI_MspInit+0x178>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fae:	960a      	str	r6, [sp, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fb0:	9306      	str	r3, [sp, #24]
 8003fb2:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fb4:	950c      	str	r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8003fb6:	970d      	str	r7, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fb8:	f004 f99e 	bl	80082f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003fbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fc0:	a909      	add	r1, sp, #36	; 0x24
 8003fc2:	480f      	ldr	r0, [pc, #60]	; (8004000 <HAL_SPI_MspInit+0x16c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003fc4:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fc6:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003fc8:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fcc:	e9cd 450b 	strd	r4, r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fd0:	f004 f992 	bl	80082f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003fd4:	2310      	movs	r3, #16
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fd6:	a909      	add	r1, sp, #36	; 0x24
 8003fd8:	480c      	ldr	r0, [pc, #48]	; (800400c <HAL_SPI_MspInit+0x178>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fda:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fdc:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003fde:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003fe0:	e9cd 580c 	strd	r5, r8, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fe4:	f004 f988 	bl	80082f8 <HAL_GPIO_Init>
}
 8003fe8:	b00e      	add	sp, #56	; 0x38
 8003fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fee:	bf00      	nop
 8003ff0:	40003800 	.word	0x40003800
 8003ff4:	40003c00 	.word	0x40003c00
 8003ff8:	40013400 	.word	0x40013400
 8003ffc:	40023800 	.word	0x40023800
 8004000:	40020800 	.word	0x40020800
 8004004:	40020c00 	.word	0x40020c00
 8004008:	40021000 	.word	0x40021000
 800400c:	40020400 	.word	0x40020400

08004010 <HAL_TIM_Base_MspInit>:
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 8004010:	4a75      	ldr	r2, [pc, #468]	; (80041e8 <HAL_TIM_Base_MspInit+0x1d8>)
 8004012:	6803      	ldr	r3, [r0, #0]
{
 8004014:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(htim_base->Instance==TIM1)
 8004018:	4293      	cmp	r3, r2
{
 800401a:	b091      	sub	sp, #68	; 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800401c:	f04f 0400 	mov.w	r4, #0
 8004020:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8004024:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 8004028:	940f      	str	r4, [sp, #60]	; 0x3c
  if(htim_base->Instance==TIM1)
 800402a:	d023      	beq.n	8004074 <HAL_TIM_Base_MspInit+0x64>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 800402c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004030:	4605      	mov	r5, r0
 8004032:	d044      	beq.n	80040be <HAL_TIM_Base_MspInit+0xae>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8004034:	4a6d      	ldr	r2, [pc, #436]	; (80041ec <HAL_TIM_Base_MspInit+0x1dc>)
 8004036:	4293      	cmp	r3, r2
 8004038:	f000 809d 	beq.w	8004176 <HAL_TIM_Base_MspInit+0x166>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 800403c:	4a6c      	ldr	r2, [pc, #432]	; (80041f0 <HAL_TIM_Base_MspInit+0x1e0>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d025      	beq.n	800408e <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(htim_base->Instance==TIM5)
 8004042:	4a6c      	ldr	r2, [pc, #432]	; (80041f4 <HAL_TIM_Base_MspInit+0x1e4>)
 8004044:	4293      	cmp	r3, r2
 8004046:	f000 80a9 	beq.w	800419c <HAL_TIM_Base_MspInit+0x18c>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 800404a:	4a6b      	ldr	r2, [pc, #428]	; (80041f8 <HAL_TIM_Base_MspInit+0x1e8>)
 800404c:	4293      	cmp	r3, r2
 800404e:	f000 80b8 	beq.w	80041c2 <HAL_TIM_Base_MspInit+0x1b2>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 8004052:	4a6a      	ldr	r2, [pc, #424]	; (80041fc <HAL_TIM_Base_MspInit+0x1ec>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d027      	beq.n	80040a8 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
  else if(htim_base->Instance==TIM14)
 8004058:	4a69      	ldr	r2, [pc, #420]	; (8004200 <HAL_TIM_Base_MspInit+0x1f0>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d114      	bne.n	8004088 <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800405e:	4b69      	ldr	r3, [pc, #420]	; (8004204 <HAL_TIM_Base_MspInit+0x1f4>)
 8004060:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004062:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004066:	641a      	str	r2, [r3, #64]	; 0x40
 8004068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800406e:	930a      	str	r3, [sp, #40]	; 0x28
 8004070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8004072:	e009      	b.n	8004088 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004074:	4b63      	ldr	r3, [pc, #396]	; (8004204 <HAL_TIM_Base_MspInit+0x1f4>)
 8004076:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004078:	f042 0201 	orr.w	r2, r2, #1
 800407c:	645a      	str	r2, [r3, #68]	; 0x44
 800407e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	9301      	str	r3, [sp, #4]
 8004086:	9b01      	ldr	r3, [sp, #4]
}
 8004088:	b011      	add	sp, #68	; 0x44
 800408a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM4_CLK_ENABLE();
 800408e:	4b5d      	ldr	r3, [pc, #372]	; (8004204 <HAL_TIM_Base_MspInit+0x1f4>)
 8004090:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004092:	f042 0204 	orr.w	r2, r2, #4
 8004096:	641a      	str	r2, [r3, #64]	; 0x40
 8004098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409a:	f003 0304 	and.w	r3, r3, #4
 800409e:	9306      	str	r3, [sp, #24]
 80040a0:	9b06      	ldr	r3, [sp, #24]
}
 80040a2:	b011      	add	sp, #68	; 0x44
 80040a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM7_CLK_ENABLE();
 80040a8:	4b56      	ldr	r3, [pc, #344]	; (8004204 <HAL_TIM_Base_MspInit+0x1f4>)
 80040aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040ac:	f042 0220 	orr.w	r2, r2, #32
 80040b0:	641a      	str	r2, [r3, #64]	; 0x40
 80040b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b4:	f003 0320 	and.w	r3, r3, #32
 80040b8:	9309      	str	r3, [sp, #36]	; 0x24
 80040ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040bc:	e7e4      	b.n	8004088 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80040be:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80040c2:	2701      	movs	r7, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040c4:	f04f 0802 	mov.w	r8, #2
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80040c8:	2020      	movs	r0, #32
    __HAL_RCC_TIM2_CLK_ENABLE();
 80040ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040cc:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80040ce:	f44f 6980 	mov.w	r9, #1024	; 0x400
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 80040d2:	4e4d      	ldr	r6, [pc, #308]	; (8004208 <HAL_TIM_Base_MspInit+0x1f8>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 80040d4:	433a      	orrs	r2, r7
 80040d6:	641a      	str	r2, [r3, #64]	; 0x40
 80040d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040da:	403a      	ands	r2, r7
 80040dc:	9202      	str	r2, [sp, #8]
 80040de:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040e2:	433a      	orrs	r2, r7
 80040e4:	631a      	str	r2, [r3, #48]	; 0x30
 80040e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040e8:	403a      	ands	r2, r7
 80040ea:	9203      	str	r2, [sp, #12]
 80040ec:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040f0:	ea42 0208 	orr.w	r2, r2, r8
 80040f4:	631a      	str	r2, [r3, #48]	; 0x30
 80040f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80040f8:	900b      	str	r0, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040fa:	ea03 0308 	and.w	r3, r3, r8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040fe:	4843      	ldr	r0, [pc, #268]	; (800420c <HAL_TIM_Base_MspInit+0x1fc>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004100:	970f      	str	r7, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004102:	9304      	str	r3, [sp, #16]
 8004104:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004106:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800410a:	f004 f8f5 	bl	80082f8 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800410e:	a90b      	add	r1, sp, #44	; 0x2c
 8004110:	483f      	ldr	r0, [pc, #252]	; (8004210 <HAL_TIM_Base_MspInit+0x200>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004112:	970f      	str	r7, [sp, #60]	; 0x3c
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 8004114:	f04f 67c0 	mov.w	r7, #100663296	; 0x6000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004118:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800411c:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004120:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004124:	f004 f8e8 	bl	80082f8 <HAL_GPIO_Init>
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 8004128:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 8004214 <HAL_TIM_Base_MspInit+0x204>
    hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800412c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004130:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_tim2_up_ch3.Init.Mode = DMA_CIRCULAR;
 8004134:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 8004138:	4630      	mov	r0, r6
    hdma_tim2_up_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800413a:	f8c6 9010 	str.w	r9, [r6, #16]
    hdma_tim2_up_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800413e:	60b4      	str	r4, [r6, #8]
    hdma_tim2_up_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8004140:	60f4      	str	r4, [r6, #12]
    hdma_tim2_up_ch3.Init.Mode = DMA_CIRCULAR;
 8004142:	61f3      	str	r3, [r6, #28]
    hdma_tim2_up_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004144:	e9c6 4408 	strd	r4, r4, [r6, #32]
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 8004148:	e9c6 c700 	strd	ip, r7, [r6]
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800414c:	e9c6 1205 	strd	r1, r2, [r6, #20]
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 8004150:	f002 f95a 	bl	8006408 <HAL_DMA_Init>
 8004154:	b108      	cbz	r0, 800415a <HAL_TIM_Base_MspInit+0x14a>
      Error_Handler();
 8004156:	f7fd fe83 	bl	8001e60 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up_ch3);
 800415a:	622e      	str	r6, [r5, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 800415c:	2200      	movs	r2, #0
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_up_ch3);
 800415e:	62ee      	str	r6, [r5, #44]	; 0x2c
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8004160:	2106      	movs	r1, #6
 8004162:	201c      	movs	r0, #28
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_up_ch3);
 8004164:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8004166:	f001 fe63 	bl	8005e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800416a:	201c      	movs	r0, #28
 800416c:	f001 fea6 	bl	8005ebc <HAL_NVIC_EnableIRQ>
}
 8004170:	b011      	add	sp, #68	; 0x44
 8004172:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004176:	4b23      	ldr	r3, [pc, #140]	; (8004204 <HAL_TIM_Base_MspInit+0x1f4>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8004178:	4622      	mov	r2, r4
 800417a:	2106      	movs	r1, #6
 800417c:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 800417e:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8004180:	f044 0402 	orr.w	r4, r4, #2
 8004184:	641c      	str	r4, [r3, #64]	; 0x40
 8004186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004188:	f003 0302 	and.w	r3, r3, #2
 800418c:	9305      	str	r3, [sp, #20]
 800418e:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8004190:	f001 fe4e 	bl	8005e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004194:	201d      	movs	r0, #29
 8004196:	f001 fe91 	bl	8005ebc <HAL_NVIC_EnableIRQ>
 800419a:	e775      	b.n	8004088 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800419c:	4b19      	ldr	r3, [pc, #100]	; (8004204 <HAL_TIM_Base_MspInit+0x1f4>)
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 800419e:	4622      	mov	r2, r4
 80041a0:	2105      	movs	r1, #5
 80041a2:	2032      	movs	r0, #50	; 0x32
    __HAL_RCC_TIM5_CLK_ENABLE();
 80041a4:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 80041a6:	f044 0408 	orr.w	r4, r4, #8
 80041aa:	641c      	str	r4, [r3, #64]	; 0x40
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	f003 0308 	and.w	r3, r3, #8
 80041b2:	9307      	str	r3, [sp, #28]
 80041b4:	9b07      	ldr	r3, [sp, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 80041b6:	f001 fe3b 	bl	8005e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80041ba:	2032      	movs	r0, #50	; 0x32
 80041bc:	f001 fe7e 	bl	8005ebc <HAL_NVIC_EnableIRQ>
 80041c0:	e762      	b.n	8004088 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80041c2:	4b10      	ldr	r3, [pc, #64]	; (8004204 <HAL_TIM_Base_MspInit+0x1f4>)
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 80041c4:	4622      	mov	r2, r4
 80041c6:	2106      	movs	r1, #6
 80041c8:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 80041ca:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 80041cc:	f044 0410 	orr.w	r4, r4, #16
 80041d0:	641c      	str	r4, [r3, #64]	; 0x40
 80041d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d4:	f003 0310 	and.w	r3, r3, #16
 80041d8:	9308      	str	r3, [sp, #32]
 80041da:	9b08      	ldr	r3, [sp, #32]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 80041dc:	f001 fe28 	bl	8005e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80041e0:	2036      	movs	r0, #54	; 0x36
 80041e2:	f001 fe6b 	bl	8005ebc <HAL_NVIC_EnableIRQ>
 80041e6:	e74f      	b.n	8004088 <HAL_TIM_Base_MspInit+0x78>
 80041e8:	40010000 	.word	0x40010000
 80041ec:	40000400 	.word	0x40000400
 80041f0:	40000800 	.word	0x40000800
 80041f4:	40000c00 	.word	0x40000c00
 80041f8:	40001000 	.word	0x40001000
 80041fc:	40001400 	.word	0x40001400
 8004200:	40002000 	.word	0x40002000
 8004204:	40023800 	.word	0x40023800
 8004208:	20022be8 	.word	0x20022be8
 800420c:	40020000 	.word	0x40020000
 8004210:	40020400 	.word	0x40020400
 8004214:	40026028 	.word	0x40026028

08004218 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM3)
 8004218:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800421a:	2300      	movs	r3, #0
  if(htim->Instance==TIM3)
 800421c:	491c      	ldr	r1, [pc, #112]	; (8004290 <HAL_TIM_MspPostInit+0x78>)
{
 800421e:	b530      	push	{r4, r5, lr}
  if(htim->Instance==TIM3)
 8004220:	428a      	cmp	r2, r1
{
 8004222:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004224:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8004228:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800422c:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM3)
 800422e:	d019      	beq.n	8004264 <HAL_TIM_MspPostInit+0x4c>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(htim->Instance==TIM4)
 8004230:	4b18      	ldr	r3, [pc, #96]	; (8004294 <HAL_TIM_MspPostInit+0x7c>)
 8004232:	429a      	cmp	r2, r3
 8004234:	d001      	beq.n	800423a <HAL_TIM_MspPostInit+0x22>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004236:	b009      	add	sp, #36	; 0x24
 8004238:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800423a:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800423e:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004240:	f44f 7580 	mov.w	r5, #256	; 0x100
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004244:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004246:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004248:	4813      	ldr	r0, [pc, #76]	; (8004298 <HAL_TIM_MspPostInit+0x80>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800424a:	4322      	orrs	r2, r4
 800424c:	631a      	str	r2, [r3, #48]	; 0x30
 800424e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004250:	9503      	str	r5, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004252:	4023      	ands	r3, r4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004254:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004256:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004258:	9302      	str	r3, [sp, #8]
 800425a:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800425c:	f004 f84c 	bl	80082f8 <HAL_GPIO_Init>
}
 8004260:	b009      	add	sp, #36	; 0x24
 8004262:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004264:	4b0d      	ldr	r3, [pc, #52]	; (800429c <HAL_TIM_MspPostInit+0x84>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004266:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004268:	2580      	movs	r5, #128	; 0x80
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800426a:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800426c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800426e:	480c      	ldr	r0, [pc, #48]	; (80042a0 <HAL_TIM_MspPostInit+0x88>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004270:	f042 0204 	orr.w	r2, r2, #4
 8004274:	631a      	str	r2, [r3, #48]	; 0x30
 8004276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004278:	9503      	str	r5, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800427a:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800427e:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004280:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004282:	9301      	str	r3, [sp, #4]
 8004284:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004286:	f004 f837 	bl	80082f8 <HAL_GPIO_Init>
}
 800428a:	b009      	add	sp, #36	; 0x24
 800428c:	bd30      	pop	{r4, r5, pc}
 800428e:	bf00      	nop
 8004290:	40000400 	.word	0x40000400
 8004294:	40000800 	.word	0x40000800
 8004298:	40020400 	.word	0x40020400
 800429c:	40023800 	.word	0x40023800
 80042a0:	40020800 	.word	0x40020800

080042a4 <HAL_UART_MspInit>:
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==UART4)
 80042a4:	4aa8      	ldr	r2, [pc, #672]	; (8004548 <HAL_UART_MspInit+0x2a4>)
 80042a6:	6803      	ldr	r3, [r0, #0]
{
 80042a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(huart->Instance==UART4)
 80042ac:	4293      	cmp	r3, r2
{
 80042ae:	b096      	sub	sp, #88	; 0x58
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042b0:	f04f 0400 	mov.w	r4, #0
 80042b4:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
 80042b8:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
 80042bc:	9415      	str	r4, [sp, #84]	; 0x54
  if(huart->Instance==UART4)
 80042be:	d036      	beq.n	800432e <HAL_UART_MspInit+0x8a>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(huart->Instance==UART5)
 80042c0:	4aa2      	ldr	r2, [pc, #648]	; (800454c <HAL_UART_MspInit+0x2a8>)
 80042c2:	4605      	mov	r5, r0
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d07b      	beq.n	80043c0 <HAL_UART_MspInit+0x11c>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
  else if(huart->Instance==UART7)
 80042c8:	4aa1      	ldr	r2, [pc, #644]	; (8004550 <HAL_UART_MspInit+0x2ac>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	f000 80f8 	beq.w	80044c0 <HAL_UART_MspInit+0x21c>

  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 80042d0:	4aa0      	ldr	r2, [pc, #640]	; (8004554 <HAL_UART_MspInit+0x2b0>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	f000 8117 	beq.w	8004506 <HAL_UART_MspInit+0x262>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 80042d8:	4a9f      	ldr	r2, [pc, #636]	; (8004558 <HAL_UART_MspInit+0x2b4>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d006      	beq.n	80042ec <HAL_UART_MspInit+0x48>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 80042de:	4a9f      	ldr	r2, [pc, #636]	; (800455c <HAL_UART_MspInit+0x2b8>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	f000 8151 	beq.w	8004588 <HAL_UART_MspInit+0x2e4>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80042e6:	b016      	add	sp, #88	; 0x58
 80042e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 80042ec:	4b9c      	ldr	r3, [pc, #624]	; (8004560 <HAL_UART_MspInit+0x2bc>)
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80042ee:	f44f 7040 	mov.w	r0, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80042f2:	2612      	movs	r6, #18
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042f4:	2503      	movs	r5, #3
    __HAL_RCC_USART3_CLK_ENABLE();
 80042f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80042f8:	2407      	movs	r4, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80042fa:	a911      	add	r1, sp, #68	; 0x44
    __HAL_RCC_USART3_CLK_ENABLE();
 80042fc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004300:	641a      	str	r2, [r3, #64]	; 0x40
 8004302:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004304:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8004308:	920c      	str	r2, [sp, #48]	; 0x30
 800430a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800430c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800430e:	f042 0208 	orr.w	r2, r2, #8
 8004312:	631a      	str	r2, [r3, #48]	; 0x30
 8004314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8004316:	9011      	str	r0, [sp, #68]	; 0x44
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004318:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800431c:	4891      	ldr	r0, [pc, #580]	; (8004564 <HAL_UART_MspInit+0x2c0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800431e:	9612      	str	r6, [sp, #72]	; 0x48
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004320:	930d      	str	r3, [sp, #52]	; 0x34
 8004322:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004324:	e9cd 5414 	strd	r5, r4, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004328:	f003 ffe6 	bl	80082f8 <HAL_GPIO_Init>
 800432c:	e7db      	b.n	80042e6 <HAL_UART_MspInit+0x42>
    __HAL_RCC_UART4_CLK_ENABLE();
 800432e:	4b8c      	ldr	r3, [pc, #560]	; (8004560 <HAL_UART_MspInit+0x2bc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004330:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 8004332:	f248 0001 	movw	r0, #32769	; 0x8001
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004336:	2603      	movs	r6, #3
    __HAL_RCC_UART4_CLK_ENABLE();
 8004338:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800433a:	2508      	movs	r5, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800433c:	a911      	add	r1, sp, #68	; 0x44
    __HAL_RCC_UART4_CLK_ENABLE();
 800433e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004342:	641a      	str	r2, [r3, #64]	; 0x40
 8004344:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004346:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800434a:	9201      	str	r2, [sp, #4]
 800434c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800434e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004350:	f042 0201 	orr.w	r2, r2, #1
 8004354:	631a      	str	r2, [r3, #48]	; 0x30
 8004356:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004358:	f002 0201 	and.w	r2, r2, #1
 800435c:	9202      	str	r2, [sp, #8]
 800435e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004360:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004362:	433a      	orrs	r2, r7
 8004364:	631a      	str	r2, [r3, #48]	; 0x30
 8004366:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004368:	403a      	ands	r2, r7
 800436a:	9203      	str	r2, [sp, #12]
 800436c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800436e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004370:	f042 0204 	orr.w	r2, r2, #4
 8004374:	631a      	str	r2, [r3, #48]	; 0x30
 8004376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 8004378:	9011      	str	r0, [sp, #68]	; 0x44
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800437a:	f003 0304 	and.w	r3, r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800437e:	487a      	ldr	r0, [pc, #488]	; (8004568 <HAL_UART_MspInit+0x2c4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004380:	9712      	str	r7, [sp, #72]	; 0x48
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004382:	9304      	str	r3, [sp, #16]
 8004384:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004386:	e9cd 6514 	strd	r6, r5, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800438a:	f003 ffb5 	bl	80082f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800438e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004392:	a911      	add	r1, sp, #68	; 0x44
 8004394:	4875      	ldr	r0, [pc, #468]	; (800456c <HAL_UART_MspInit+0x2c8>)
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004396:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004398:	9712      	str	r7, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800439a:	9413      	str	r4, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800439c:	e9cd 6514 	strd	r6, r5, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043a0:	f003 ffaa 	bl	80082f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80043a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043a8:	a911      	add	r1, sp, #68	; 0x44
 80043aa:	4871      	ldr	r0, [pc, #452]	; (8004570 <HAL_UART_MspInit+0x2cc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ac:	9712      	str	r7, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ae:	9413      	str	r4, [sp, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80043b0:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80043b2:	e9cd 6514 	strd	r6, r5, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043b6:	f003 ff9f 	bl	80082f8 <HAL_GPIO_Init>
}
 80043ba:	b016      	add	sp, #88	; 0x58
 80043bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_RCC_UART5_CLK_ENABLE();
 80043c0:	4b67      	ldr	r3, [pc, #412]	; (8004560 <HAL_UART_MspInit+0x2bc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043c2:	f04f 0902 	mov.w	r9, #2
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80043c6:	2708      	movs	r7, #8
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80043c8:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
    __HAL_RCC_UART5_CLK_ENABLE();
 80043cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043ce:	f04f 0803 	mov.w	r8, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043d2:	a911      	add	r1, sp, #68	; 0x44
 80043d4:	4865      	ldr	r0, [pc, #404]	; (800456c <HAL_UART_MspInit+0x2c8>)
    __HAL_RCC_UART5_CLK_ENABLE();
 80043d6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80043da:	4e66      	ldr	r6, [pc, #408]	; (8004574 <HAL_UART_MspInit+0x2d0>)
    __HAL_RCC_UART5_CLK_ENABLE();
 80043dc:	641a      	str	r2, [r3, #64]	; 0x40
 80043de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043e0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80043e4:	9205      	str	r2, [sp, #20]
 80043e6:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043ea:	ea42 0209 	orr.w	r2, r2, r9
 80043ee:	631a      	str	r2, [r3, #48]	; 0x30
 80043f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043f2:	ea02 0209 	and.w	r2, r2, r9
 80043f6:	9206      	str	r2, [sp, #24]
 80043f8:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043fc:	f042 0204 	orr.w	r2, r2, #4
 8004400:	631a      	str	r2, [r3, #48]	; 0x30
 8004402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004404:	9715      	str	r7, [sp, #84]	; 0x54
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004406:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800440a:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800440e:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004412:	9307      	str	r3, [sp, #28]
 8004414:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004416:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800441a:	f003 ff6d 	bl	80082f8 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800441e:	a911      	add	r1, sp, #68	; 0x44
 8004420:	4853      	ldr	r0, [pc, #332]	; (8004570 <HAL_UART_MspInit+0x2cc>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004422:	9413      	str	r4, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004424:	e9cd 8714 	strd	r8, r7, [sp, #80]	; 0x50
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004428:	e9cd a911 	strd	sl, r9, [sp, #68]	; 0x44
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 800442c:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004430:	f003 ff62 	bl	80082f8 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8004434:	f8df c14c 	ldr.w	ip, [pc, #332]	; 8004584 <HAL_UART_MspInit+0x2e0>
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004438:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 800443c:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004440:	2304      	movs	r3, #4
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8004442:	4630      	mov	r0, r6
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004444:	6234      	str	r4, [r6, #32]
    hdma_uart5_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004446:	6334      	str	r4, [r6, #48]	; 0x30
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004448:	6131      	str	r1, [r6, #16]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 800444a:	61f2      	str	r2, [r6, #28]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800444c:	6273      	str	r3, [r6, #36]	; 0x24
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800444e:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004452:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_uart5_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8004456:	e9c6 440a 	strd	r4, r4, [r6, #40]	; 0x28
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 800445a:	e9c6 c700 	strd	ip, r7, [r6]
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800445e:	f001 ffd3 	bl	8006408 <HAL_DMA_Init>
 8004462:	2800      	cmp	r0, #0
 8004464:	f040 80e3 	bne.w	800462e <HAL_UART_MspInit+0x38a>
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8004468:	4c43      	ldr	r4, [pc, #268]	; (8004578 <HAL_UART_MspInit+0x2d4>)
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 800446a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    hdma_uart5_tx.Instance = DMA1_Stream7;
 800446e:	4a43      	ldr	r2, [pc, #268]	; (800457c <HAL_UART_MspInit+0x2d8>)
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004470:	2040      	movs	r0, #64	; 0x40
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004472:	f44f 6780 	mov.w	r7, #1024	; 0x400
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004476:	2104      	movs	r1, #4
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8004478:	6022      	str	r2, [r4, #0]
    hdma_uart5_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800447a:	2201      	movs	r2, #1
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 800447c:	6063      	str	r3, [r4, #4]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800447e:	2300      	movs	r3, #0
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004480:	60a0      	str	r0, [r4, #8]
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8004482:	4620      	mov	r0, r4
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8004484:	66ee      	str	r6, [r5, #108]	; 0x6c
 8004486:	63b5      	str	r5, [r6, #56]	; 0x38
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004488:	6127      	str	r7, [r4, #16]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800448a:	60e3      	str	r3, [r4, #12]
    hdma_uart5_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800448c:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004490:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004494:	e9c4 3307 	strd	r3, r3, [r4, #28]
    hdma_uart5_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004498:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 800449c:	f001 ffb4 	bl	8006408 <HAL_DMA_Init>
 80044a0:	b108      	cbz	r0, 80044a6 <HAL_UART_MspInit+0x202>
      Error_Handler();
 80044a2:	f7fd fcdd 	bl	8001e60 <Error_Handler>
    HAL_NVIC_SetPriority(UART5_IRQn, 7, 0);
 80044a6:	2200      	movs	r2, #0
 80044a8:	2107      	movs	r1, #7
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 80044aa:	66ac      	str	r4, [r5, #104]	; 0x68
    HAL_NVIC_SetPriority(UART5_IRQn, 7, 0);
 80044ac:	2035      	movs	r0, #53	; 0x35
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 80044ae:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 7, 0);
 80044b0:	f001 fcbe 	bl	8005e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80044b4:	2035      	movs	r0, #53	; 0x35
 80044b6:	f001 fd01 	bl	8005ebc <HAL_NVIC_EnableIRQ>
}
 80044ba:	b016      	add	sp, #88	; 0x58
 80044bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_RCC_UART7_CLK_ENABLE();
 80044c0:	4b27      	ldr	r3, [pc, #156]	; (8004560 <HAL_UART_MspInit+0x2bc>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80044c2:	f44f 70e0 	mov.w	r0, #448	; 0x1c0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044c6:	2602      	movs	r6, #2
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80044c8:	a911      	add	r1, sp, #68	; 0x44
    __HAL_RCC_UART7_CLK_ENABLE();
 80044ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044cc:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80044ce:	2408      	movs	r4, #8
    __HAL_RCC_UART7_CLK_ENABLE();
 80044d0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80044d4:	641a      	str	r2, [r3, #64]	; 0x40
 80044d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044d8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80044dc:	9208      	str	r2, [sp, #32]
 80044de:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80044e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044e2:	f042 0220 	orr.w	r2, r2, #32
 80044e6:	631a      	str	r2, [r3, #48]	; 0x30
 80044e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80044ea:	9011      	str	r0, [sp, #68]	; 0x44
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80044ec:	f003 0320 	and.w	r3, r3, #32
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80044f0:	4823      	ldr	r0, [pc, #140]	; (8004580 <HAL_UART_MspInit+0x2dc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044f2:	9612      	str	r6, [sp, #72]	; 0x48
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80044f4:	9309      	str	r3, [sp, #36]	; 0x24
 80044f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80044f8:	e9cd 5414 	strd	r5, r4, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80044fc:	f003 fefc 	bl	80082f8 <HAL_GPIO_Init>
}
 8004500:	b016      	add	sp, #88	; 0x58
 8004502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8004506:	4b16      	ldr	r3, [pc, #88]	; (8004560 <HAL_UART_MspInit+0x2bc>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8004508:	2070      	movs	r0, #112	; 0x70
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800450a:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800450c:	2503      	movs	r5, #3
    __HAL_RCC_USART2_CLK_ENABLE();
 800450e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004510:	2407      	movs	r4, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004512:	a911      	add	r1, sp, #68	; 0x44
    __HAL_RCC_USART2_CLK_ENABLE();
 8004514:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004518:	641a      	str	r2, [r3, #64]	; 0x40
 800451a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800451c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8004520:	920a      	str	r2, [sp, #40]	; 0x28
 8004522:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004524:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004526:	f042 0208 	orr.w	r2, r2, #8
 800452a:	631a      	str	r2, [r3, #48]	; 0x30
 800452c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800452e:	9011      	str	r0, [sp, #68]	; 0x44
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004530:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004534:	480b      	ldr	r0, [pc, #44]	; (8004564 <HAL_UART_MspInit+0x2c0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004536:	9612      	str	r6, [sp, #72]	; 0x48
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004538:	930b      	str	r3, [sp, #44]	; 0x2c
 800453a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800453c:	e9cd 5414 	strd	r5, r4, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004540:	f003 feda 	bl	80082f8 <HAL_GPIO_Init>
 8004544:	e6cf      	b.n	80042e6 <HAL_UART_MspInit+0x42>
 8004546:	bf00      	nop
 8004548:	40004c00 	.word	0x40004c00
 800454c:	40005000 	.word	0x40005000
 8004550:	40007800 	.word	0x40007800
 8004554:	40004400 	.word	0x40004400
 8004558:	40004800 	.word	0x40004800
 800455c:	40011400 	.word	0x40011400
 8004560:	40023800 	.word	0x40023800
 8004564:	40020c00 	.word	0x40020c00
 8004568:	40020000 	.word	0x40020000
 800456c:	40020400 	.word	0x40020400
 8004570:	40020800 	.word	0x40020800
 8004574:	200231a4 	.word	0x200231a4
 8004578:	20023288 	.word	0x20023288
 800457c:	400260b8 	.word	0x400260b8
 8004580:	40021400 	.word	0x40021400
 8004584:	40026010 	.word	0x40026010
    __HAL_RCC_USART6_CLK_ENABLE();
 8004588:	4b2c      	ldr	r3, [pc, #176]	; (800463c <HAL_UART_MspInit+0x398>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800458a:	f44f 7040 	mov.w	r0, #768	; 0x300
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800458e:	2708      	movs	r7, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004590:	f04f 0902 	mov.w	r9, #2
    __HAL_RCC_USART6_CLK_ENABLE();
 8004594:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004596:	f04f 0803 	mov.w	r8, #3
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800459a:	a911      	add	r1, sp, #68	; 0x44
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800459c:	4e28      	ldr	r6, [pc, #160]	; (8004640 <HAL_UART_MspInit+0x39c>)
    __HAL_RCC_USART6_CLK_ENABLE();
 800459e:	f042 0220 	orr.w	r2, r2, #32
 80045a2:	645a      	str	r2, [r3, #68]	; 0x44
 80045a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045a6:	f002 0220 	and.w	r2, r2, #32
 80045aa:	920e      	str	r2, [sp, #56]	; 0x38
 80045ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80045ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045b4:	631a      	str	r2, [r3, #48]	; 0x30
 80045b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045b8:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80045bc:	920f      	str	r2, [sp, #60]	; 0x3c
 80045be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045c2:	f042 0204 	orr.w	r2, r2, #4
 80045c6:	631a      	str	r2, [r3, #48]	; 0x30
 80045c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80045ca:	9011      	str	r0, [sp, #68]	; 0x44
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045cc:	f003 0304 	and.w	r3, r3, #4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80045d0:	481c      	ldr	r0, [pc, #112]	; (8004644 <HAL_UART_MspInit+0x3a0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045d2:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045d6:	9310      	str	r3, [sp, #64]	; 0x40
 80045d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80045da:	e9cd 8714 	strd	r8, r7, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80045de:	f003 fe8b 	bl	80082f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80045e2:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045e4:	a911      	add	r1, sp, #68	; 0x44
 80045e6:	4818      	ldr	r0, [pc, #96]	; (8004648 <HAL_UART_MspInit+0x3a4>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80045e8:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045ea:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ee:	9413      	str	r4, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80045f0:	e9cd 8714 	strd	r8, r7, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045f4:	f003 fe80 	bl	80082f8 <HAL_GPIO_Init>
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80045f8:	f04f 6720 	mov.w	r7, #167772160	; 0xa000000
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80045fc:	f8df c04c 	ldr.w	ip, [pc, #76]	; 800464c <HAL_UART_MspInit+0x3a8>
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004600:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8004604:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004608:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800460c:	4630      	mov	r0, r6
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800460e:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004610:	6131      	str	r1, [r6, #16]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004612:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004616:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800461a:	e9c6 c700 	strd	ip, r7, [r6]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800461e:	e9c6 2307 	strd	r2, r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8004622:	f001 fef1 	bl	8006408 <HAL_DMA_Init>
 8004626:	b928      	cbnz	r0, 8004634 <HAL_UART_MspInit+0x390>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8004628:	66ee      	str	r6, [r5, #108]	; 0x6c
 800462a:	63b5      	str	r5, [r6, #56]	; 0x38
}
 800462c:	e65b      	b.n	80042e6 <HAL_UART_MspInit+0x42>
      Error_Handler();
 800462e:	f7fd fc17 	bl	8001e60 <Error_Handler>
 8004632:	e719      	b.n	8004468 <HAL_UART_MspInit+0x1c4>
      Error_Handler();
 8004634:	f7fd fc14 	bl	8001e60 <Error_Handler>
 8004638:	e7f6      	b.n	8004628 <HAL_UART_MspInit+0x384>
 800463a:	bf00      	nop
 800463c:	40023800 	.word	0x40023800
 8004640:	20022884 	.word	0x20022884
 8004644:	40021800 	.word	0x40021800
 8004648:	40020800 	.word	0x40020800
 800464c:	40026428 	.word	0x40026428

08004650 <HAL_UART_MspDeInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==UART4)
 8004650:	4a43      	ldr	r2, [pc, #268]	; (8004760 <HAL_UART_MspDeInit+0x110>)
 8004652:	6803      	ldr	r3, [r0, #0]
 8004654:	4293      	cmp	r3, r2
{
 8004656:	b510      	push	{r4, lr}
  if(huart->Instance==UART4)
 8004658:	d01d      	beq.n	8004696 <HAL_UART_MspDeInit+0x46>

  /* USER CODE BEGIN UART4_MspDeInit 1 */

  /* USER CODE END UART4_MspDeInit 1 */
  }
  else if(huart->Instance==UART5)
 800465a:	4a42      	ldr	r2, [pc, #264]	; (8004764 <HAL_UART_MspDeInit+0x114>)
 800465c:	4604      	mov	r4, r0
 800465e:	4293      	cmp	r3, r2
 8004660:	d030      	beq.n	80046c4 <HAL_UART_MspDeInit+0x74>
    HAL_NVIC_DisableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspDeInit 1 */

  /* USER CODE END UART5_MspDeInit 1 */
  }
  else if(huart->Instance==UART7)
 8004662:	4a41      	ldr	r2, [pc, #260]	; (8004768 <HAL_UART_MspDeInit+0x118>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d048      	beq.n	80046fa <HAL_UART_MspDeInit+0xaa>

  /* USER CODE BEGIN UART7_MspDeInit 1 */

  /* USER CODE END UART7_MspDeInit 1 */
  }
  else if(huart->Instance==USART2)
 8004668:	4a40      	ldr	r2, [pc, #256]	; (800476c <HAL_UART_MspDeInit+0x11c>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d052      	beq.n	8004714 <HAL_UART_MspDeInit+0xc4>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
  else if(huart->Instance==USART3)
 800466e:	4a40      	ldr	r2, [pc, #256]	; (8004770 <HAL_UART_MspDeInit+0x120>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d003      	beq.n	800467c <HAL_UART_MspDeInit+0x2c>

  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
  else if(huart->Instance==USART6)
 8004674:	4a3f      	ldr	r2, [pc, #252]	; (8004774 <HAL_UART_MspDeInit+0x124>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d05b      	beq.n	8004732 <HAL_UART_MspDeInit+0xe2>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 800467a:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART3_CLK_DISABLE();
 800467c:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
    HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);
 8004680:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004684:	483c      	ldr	r0, [pc, #240]	; (8004778 <HAL_UART_MspDeInit+0x128>)
    __HAL_RCC_USART3_CLK_DISABLE();
 8004686:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004688:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
}
 800468c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_RCC_USART3_CLK_DISABLE();
 8004690:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);
 8004692:	f003 bfd5 	b.w	8008640 <HAL_GPIO_DeInit>
    __HAL_RCC_UART4_CLK_DISABLE();
 8004696:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_15);
 800469a:	f248 0101 	movw	r1, #32769	; 0x8001
 800469e:	4837      	ldr	r0, [pc, #220]	; (800477c <HAL_UART_MspDeInit+0x12c>)
    __HAL_RCC_UART4_CLK_DISABLE();
 80046a0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80046a2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80046a6:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_15);
 80046a8:	f003 ffca 	bl	8008640 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_15);
 80046ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80046b0:	4833      	ldr	r0, [pc, #204]	; (8004780 <HAL_UART_MspDeInit+0x130>)
 80046b2:	f003 ffc5 	bl	8008640 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_11);
 80046b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80046ba:	4832      	ldr	r0, [pc, #200]	; (8004784 <HAL_UART_MspDeInit+0x134>)
}
 80046bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_11);
 80046c0:	f003 bfbe 	b.w	8008640 <HAL_GPIO_DeInit>
    __HAL_RCC_UART5_CLK_DISABLE();
 80046c4:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 80046c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80046cc:	482c      	ldr	r0, [pc, #176]	; (8004780 <HAL_UART_MspDeInit+0x130>)
    __HAL_RCC_UART5_CLK_DISABLE();
 80046ce:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80046d0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80046d4:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 80046d6:	f003 ffb3 	bl	8008640 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 80046da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80046de:	4829      	ldr	r0, [pc, #164]	; (8004784 <HAL_UART_MspDeInit+0x134>)
 80046e0:	f003 ffae 	bl	8008640 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 80046e4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80046e6:	f002 f855 	bl	8006794 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 80046ea:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80046ec:	f002 f852 	bl	8006794 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 80046f0:	2035      	movs	r0, #53	; 0x35
}
 80046f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 80046f6:	f001 bbf5 	b.w	8005ee4 <HAL_NVIC_DisableIRQ>
    __HAL_RCC_UART7_CLK_DISABLE();
 80046fa:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8);
 80046fe:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8004702:	4821      	ldr	r0, [pc, #132]	; (8004788 <HAL_UART_MspDeInit+0x138>)
    __HAL_RCC_UART7_CLK_DISABLE();
 8004704:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004706:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
}
 800470a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_RCC_UART7_CLK_DISABLE();
 800470e:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8);
 8004710:	f003 bf96 	b.w	8008640 <HAL_GPIO_DeInit>
    __HAL_RCC_USART2_CLK_DISABLE();
 8004714:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 8004718:	4817      	ldr	r0, [pc, #92]	; (8004778 <HAL_UART_MspDeInit+0x128>)
 800471a:	2170      	movs	r1, #112	; 0x70
    __HAL_RCC_USART2_CLK_DISABLE();
 800471c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800471e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004722:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 8004724:	f003 ff8c 	bl	8008640 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8004728:	2026      	movs	r0, #38	; 0x26
}
 800472a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800472e:	f001 bbd9 	b.w	8005ee4 <HAL_NVIC_DisableIRQ>
    __HAL_RCC_USART6_CLK_DISABLE();
 8004732:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_8|GPIO_PIN_9);
 8004736:	f44f 7140 	mov.w	r1, #768	; 0x300
 800473a:	4814      	ldr	r0, [pc, #80]	; (800478c <HAL_UART_MspDeInit+0x13c>)
    __HAL_RCC_USART6_CLK_DISABLE();
 800473c:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800473e:	f023 0320 	bic.w	r3, r3, #32
 8004742:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_8|GPIO_PIN_9);
 8004744:	f003 ff7c 	bl	8008640 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6);
 8004748:	2140      	movs	r1, #64	; 0x40
 800474a:	480e      	ldr	r0, [pc, #56]	; (8004784 <HAL_UART_MspDeInit+0x134>)
 800474c:	f003 ff78 	bl	8008640 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8004750:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8004752:	f002 f81f 	bl	8006794 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8004756:	2047      	movs	r0, #71	; 0x47
}
 8004758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 800475c:	f001 bbc2 	b.w	8005ee4 <HAL_NVIC_DisableIRQ>
 8004760:	40004c00 	.word	0x40004c00
 8004764:	40005000 	.word	0x40005000
 8004768:	40007800 	.word	0x40007800
 800476c:	40004400 	.word	0x40004400
 8004770:	40004800 	.word	0x40004800
 8004774:	40011400 	.word	0x40011400
 8004778:	40020c00 	.word	0x40020c00
 800477c:	40020000 	.word	0x40020000
 8004780:	40020400 	.word	0x40020400
 8004784:	40020800 	.word	0x40020800
 8004788:	40021400 	.word	0x40021400
 800478c:	40021800 	.word	0x40021800

08004790 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004790:	b570      	push	{r4, r5, r6, lr}
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM12 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, TickPriority ,0);
 8004792:	4601      	mov	r1, r0
{
 8004794:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, TickPriority ,0);
 8004796:	2200      	movs	r2, #0
 8004798:	202b      	movs	r0, #43	; 0x2b
 800479a:	f001 fb49 	bl	8005e30 <HAL_NVIC_SetPriority>

  /* Enable the TIM12 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800479e:	202b      	movs	r0, #43	; 0x2b
 80047a0:	f001 fb8c 	bl	8005ebc <HAL_NVIC_EnableIRQ>
  /* Enable TIM12 clock */
  __HAL_RCC_TIM12_CLK_ENABLE();
 80047a4:	4b15      	ldr	r3, [pc, #84]	; (80047fc <HAL_InitTick+0x6c>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80047a6:	a901      	add	r1, sp, #4
 80047a8:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM12_CLK_ENABLE();
 80047aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40

  /* Compute TIM12 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();

  /* Compute the prescaler value to have TIM12 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80047ac:	4e14      	ldr	r6, [pc, #80]	; (8004800 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM12_CLK_ENABLE();
 80047ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40

  /* Initialize TIM12 */
  htim12.Instance = TIM12;
 80047b2:	4c14      	ldr	r4, [pc, #80]	; (8004804 <HAL_InitTick+0x74>)
 80047b4:	4d14      	ldr	r5, [pc, #80]	; (8004808 <HAL_InitTick+0x78>)
  __HAL_RCC_TIM12_CLK_ENABLE();
 80047b6:	641a      	str	r2, [r3, #64]	; 0x40
 80047b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047be:	9302      	str	r3, [sp, #8]
 80047c0:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80047c2:	f005 ff87 	bl	800a6d4 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80047c6:	f005 ff65 	bl	800a694 <HAL_RCC_GetPCLK1Freq>
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim12.Init.Period = (1000000 / 1000) - 1;
  htim12.Init.Prescaler = uwPrescalerValue;
  htim12.Init.ClockDivision = 0;
 80047ca:	2200      	movs	r2, #0
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80047cc:	0043      	lsls	r3, r0, #1
  htim12.Init.Period = (1000000 / 1000) - 1;
 80047ce:	f240 31e7 	movw	r1, #999	; 0x3e7
  htim12.Instance = TIM12;
 80047d2:	6025      	str	r5, [r4, #0]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80047d4:	fba6 0303 	umull	r0, r3, r6, r3
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim12) == HAL_OK)
 80047d8:	4620      	mov	r0, r4
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80047da:	0c9b      	lsrs	r3, r3, #18
 80047dc:	3b01      	subs	r3, #1
  htim12.Init.ClockDivision = 0;
 80047de:	e9c4 1203 	strd	r1, r2, [r4, #12]
  htim12.Init.Prescaler = uwPrescalerValue;
 80047e2:	e9c4 3201 	strd	r3, r2, [r4, #4]
  if(HAL_TIM_Base_Init(&htim12) == HAL_OK)
 80047e6:	f008 f8b3 	bl	800c950 <HAL_TIM_Base_Init>
 80047ea:	b110      	cbz	r0, 80047f2 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim12);
  }

  /* Return function status */
  return HAL_ERROR;
 80047ec:	2001      	movs	r0, #1
}
 80047ee:	b008      	add	sp, #32
 80047f0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_TIM_Base_Start_IT(&htim12);
 80047f2:	4620      	mov	r0, r4
 80047f4:	f007 fb38 	bl	800be68 <HAL_TIM_Base_Start_IT>
}
 80047f8:	b008      	add	sp, #32
 80047fa:	bd70      	pop	{r4, r5, r6, pc}
 80047fc:	40023800 	.word	0x40023800
 8004800:	431bde83 	.word	0x431bde83
 8004804:	200233e0 	.word	0x200233e0
 8004808:	40001800 	.word	0x40001800

0800480c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop

08004810 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004810:	e7fe      	b.n	8004810 <HardFault_Handler>
 8004812:	bf00      	nop

08004814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004814:	e7fe      	b.n	8004814 <MemManage_Handler>
 8004816:	bf00      	nop

08004818 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004818:	e7fe      	b.n	8004818 <BusFault_Handler>
 800481a:	bf00      	nop

0800481c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800481c:	e7fe      	b.n	800481c <UsageFault_Handler>
 800481e:	bf00      	nop

08004820 <RCC_IRQHandler>:
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop

08004824 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8004824:	4801      	ldr	r0, [pc, #4]	; (800482c <DMA1_Stream0_IRQHandler+0x8>)
 8004826:	f002 b91f 	b.w	8006a68 <HAL_DMA_IRQHandler>
 800482a:	bf00      	nop
 800482c:	200231a4 	.word	0x200231a4

08004830 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up_ch3);
 8004830:	4801      	ldr	r0, [pc, #4]	; (8004838 <DMA1_Stream1_IRQHandler+0x8>)
 8004832:	f002 b919 	b.w	8006a68 <HAL_DMA_IRQHandler>
 8004836:	bf00      	nop
 8004838:	20022be8 	.word	0x20022be8

0800483c <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 800483c:	4801      	ldr	r0, [pc, #4]	; (8004844 <DMA1_Stream5_IRQHandler+0x8>)
 800483e:	f002 b913 	b.w	8006a68 <HAL_DMA_IRQHandler>
 8004842:	bf00      	nop
 8004844:	20022cec 	.word	0x20022cec

08004848 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8004848:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800484a:	4805      	ldr	r0, [pc, #20]	; (8004860 <ADC_IRQHandler+0x18>)
 800484c:	f001 f8d0 	bl	80059f0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8004850:	4804      	ldr	r0, [pc, #16]	; (8004864 <ADC_IRQHandler+0x1c>)
 8004852:	f001 f8cd 	bl	80059f0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8004856:	4804      	ldr	r0, [pc, #16]	; (8004868 <ADC_IRQHandler+0x20>)
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8004858:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc3);
 800485c:	f001 b8c8 	b.w	80059f0 <HAL_ADC_IRQHandler>
 8004860:	20022dcc 	.word	0x20022dcc
 8004864:	20022a88 	.word	0x20022a88
 8004868:	20022e14 	.word	0x20022e14

0800486c <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800486c:	4801      	ldr	r0, [pc, #4]	; (8004874 <TIM2_IRQHandler+0x8>)
 800486e:	f007 bf3b 	b.w	800c6e8 <HAL_TIM_IRQHandler>
 8004872:	bf00      	nop
 8004874:	200230e4 	.word	0x200230e4

08004878 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004878:	4801      	ldr	r0, [pc, #4]	; (8004880 <TIM3_IRQHandler+0x8>)
 800487a:	f007 bf35 	b.w	800c6e8 <HAL_TIM_IRQHandler>
 800487e:	bf00      	nop
 8004880:	20022c48 	.word	0x20022c48

08004884 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004884:	4801      	ldr	r0, [pc, #4]	; (800488c <USART2_IRQHandler+0x8>)
 8004886:	f009 bdfd 	b.w	800e484 <HAL_UART_IRQHandler>
 800488a:	bf00      	nop
 800488c:	20023124 	.word	0x20023124

08004890 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004890:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004894:	f004 b810 	b.w	80088b8 <HAL_GPIO_EXTI_IRQHandler>

08004898 <TIM8_BRK_TIM12_IRQHandler>:
void TIM8_BRK_TIM12_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8004898:	4801      	ldr	r0, [pc, #4]	; (80048a0 <TIM8_BRK_TIM12_IRQHandler+0x8>)
 800489a:	f007 bf25 	b.w	800c6e8 <HAL_TIM_IRQHandler>
 800489e:	bf00      	nop
 80048a0:	200233e0 	.word	0x200233e0

080048a4 <TIM8_TRG_COM_TIM14_IRQHandler>:
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80048a4:	4801      	ldr	r0, [pc, #4]	; (80048ac <TIM8_TRG_COM_TIM14_IRQHandler+0x8>)
 80048a6:	f007 bf1f 	b.w	800c6e8 <HAL_TIM_IRQHandler>
 80048aa:	bf00      	nop
 80048ac:	20023204 	.word	0x20023204

080048b0 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 80048b0:	4801      	ldr	r0, [pc, #4]	; (80048b8 <DMA1_Stream7_IRQHandler+0x8>)
 80048b2:	f002 b8d9 	b.w	8006a68 <HAL_DMA_IRQHandler>
 80048b6:	bf00      	nop
 80048b8:	20023288 	.word	0x20023288

080048bc <TIM5_IRQHandler>:
void TIM5_IRQHandler(void)
{
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80048bc:	4801      	ldr	r0, [pc, #4]	; (80048c4 <TIM5_IRQHandler+0x8>)
 80048be:	f007 bf13 	b.w	800c6e8 <HAL_TIM_IRQHandler>
 80048c2:	bf00      	nop
 80048c4:	20022ba8 	.word	0x20022ba8

080048c8 <UART5_IRQHandler>:
void UART5_IRQHandler(void)
{
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80048c8:	4801      	ldr	r0, [pc, #4]	; (80048d0 <UART5_IRQHandler+0x8>)
 80048ca:	f009 bddb 	b.w	800e484 <HAL_UART_IRQHandler>
 80048ce:	bf00      	nop
 80048d0:	20022d4c 	.word	0x20022d4c

080048d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80048d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 80048d6:	4804      	ldr	r0, [pc, #16]	; (80048e8 <TIM6_DAC_IRQHandler+0x14>)
 80048d8:	f001 fce6 	bl	80062a8 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 80048dc:	4803      	ldr	r0, [pc, #12]	; (80048ec <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80048de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 80048e2:	f007 bf01 	b.w	800c6e8 <HAL_TIM_IRQHandler>
 80048e6:	bf00      	nop
 80048e8:	20022e6c 	.word	0x20022e6c
 80048ec:	20022f4c 	.word	0x20022f4c

080048f0 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80048f0:	4801      	ldr	r0, [pc, #4]	; (80048f8 <DMA2_Stream1_IRQHandler+0x8>)
 80048f2:	f002 b8b9 	b.w	8006a68 <HAL_DMA_IRQHandler>
 80048f6:	bf00      	nop
 80048f8:	20022884 	.word	0x20022884

080048fc <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80048fc:	4801      	ldr	r0, [pc, #4]	; (8004904 <DMA2_Stream4_IRQHandler+0x8>)
 80048fe:	f002 b8b3 	b.w	8006a68 <HAL_DMA_IRQHandler>
 8004902:	bf00      	nop
 8004904:	20022ee8 	.word	0x20022ee8

08004908 <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8004908:	4801      	ldr	r0, [pc, #4]	; (8004910 <ETH_IRQHandler+0x8>)
 800490a:	f003 b801 	b.w	8007910 <HAL_ETH_IRQHandler>
 800490e:	bf00      	nop
 8004910:	20025210 	.word	0x20025210

08004914 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004914:	4801      	ldr	r0, [pc, #4]	; (800491c <OTG_FS_IRQHandler+0x8>)
 8004916:	f004 bdad 	b.w	8009474 <HAL_PCD_IRQHandler>
 800491a:	bf00      	nop
 800491c:	20037798 	.word	0x20037798

08004920 <USART6_IRQHandler>:
void USART6_IRQHandler(void)
{
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004920:	4801      	ldr	r0, [pc, #4]	; (8004928 <USART6_IRQHandler+0x8>)
 8004922:	f009 bdaf 	b.w	800e484 <HAL_UART_IRQHandler>
 8004926:	bf00      	nop
 8004928:	20022fe0 	.word	0x20022fe0

0800492c <FPU_IRQHandler>:
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop

08004930 <MDIOS_IRQHandler>:
void MDIOS_IRQHandler(void)
{
  /* USER CODE BEGIN MDIOS_IRQn 0 */

  /* USER CODE END MDIOS_IRQn 0 */
  HAL_MDIOS_IRQHandler(&hmdios);
 8004930:	4801      	ldr	r0, [pc, #4]	; (8004938 <MDIOS_IRQHandler+0x8>)
 8004932:	f004 bc89 	b.w	8009248 <HAL_MDIOS_IRQHandler>
 8004936:	bf00      	nop
 8004938:	20022e5c 	.word	0x20022e5c

0800493c <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 800493c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800493e:	1e16      	subs	r6, r2, #0
 8004940:	dd07      	ble.n	8004952 <_read+0x16>
 8004942:	460c      	mov	r4, r1
 8004944:	198d      	adds	r5, r1, r6
		*ptr++ = __io_getchar();
 8004946:	f3af 8000 	nop.w
 800494a:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800494e:	42a5      	cmp	r5, r4
 8004950:	d1f9      	bne.n	8004946 <_read+0xa>
	}

	return len;
}
 8004952:	4630      	mov	r0, r6
 8004954:	bd70      	pop	{r4, r5, r6, pc}
 8004956:	bf00      	nop

08004958 <_close>:
	return len;
}

int _close(int file) {
	return -1;
}
 8004958:	f04f 30ff 	mov.w	r0, #4294967295
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop

08004960 <_fstat>:

int _fstat(int file, struct stat *st) {
	st->st_mode = S_IFCHR;
 8004960:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8004964:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8004966:	604b      	str	r3, [r1, #4]
}
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop

0800496c <_isatty>:

int _isatty(int file) {
	return 1;
}
 800496c:	2001      	movs	r0, #1
 800496e:	4770      	bx	lr

08004970 <_lseek>:

int _lseek(int file, int ptr, int dir) {
	return 0;
}
 8004970:	2000      	movs	r0, #0
 8004972:	4770      	bx	lr

08004974 <_sbrk>:
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
	const uint8_t *max_heap = (uint8_t*) stack_limit;
	uint8_t *prev_heap_end;

	/* Initalize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8004974:	490d      	ldr	r1, [pc, #52]	; (80049ac <_sbrk+0x38>)
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 8004976:	4a0e      	ldr	r2, [pc, #56]	; (80049b0 <_sbrk+0x3c>)
	if (NULL == __sbrk_heap_end) {
 8004978:	680b      	ldr	r3, [r1, #0]
void* _sbrk(ptrdiff_t incr) {
 800497a:	b410      	push	{r4}
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 800497c:	4c0d      	ldr	r4, [pc, #52]	; (80049b4 <_sbrk+0x40>)
 800497e:	1b12      	subs	r2, r2, r4
	if (NULL == __sbrk_heap_end) {
 8004980:	b183      	cbz	r3, 80049a4 <_sbrk+0x30>
		__sbrk_heap_end = &_end;
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8004982:	4418      	add	r0, r3
 8004984:	4290      	cmp	r0, r2
 8004986:	d804      	bhi.n	8004992 <_sbrk+0x1e>
		errno = ENOMEM;
		return (void*) -1;
	}

	prev_heap_end = __sbrk_heap_end;
	__sbrk_heap_end += incr;
 8004988:	6008      	str	r0, [r1, #0]

	return (void*) prev_heap_end;
}
 800498a:	4618      	mov	r0, r3
 800498c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004990:	4770      	bx	lr
		errno = ENOMEM;
 8004992:	4a09      	ldr	r2, [pc, #36]	; (80049b8 <_sbrk+0x44>)
 8004994:	210c      	movs	r1, #12
		return (void*) -1;
 8004996:	f04f 33ff 	mov.w	r3, #4294967295
}
 800499a:	f85d 4b04 	ldr.w	r4, [sp], #4
		errno = ENOMEM;
 800499e:	6011      	str	r1, [r2, #0]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	4770      	bx	lr
		__sbrk_heap_end = &_end;
 80049a4:	4c05      	ldr	r4, [pc, #20]	; (80049bc <_sbrk+0x48>)
 80049a6:	4623      	mov	r3, r4
 80049a8:	600c      	str	r4, [r1, #0]
 80049aa:	e7ea      	b.n	8004982 <_sbrk+0xe>
 80049ac:	20001684 	.word	0x20001684
 80049b0:	20080000 	.word	0x20080000
 80049b4:	00010000 	.word	0x00010000
 80049b8:	200362c0 	.word	0x200362c0
 80049bc:	20037ba0 	.word	0x20037ba0

080049c0 <SystemInit>:
 * @retval None
 */
void SystemInit(void) {
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80049c0:	4a0f      	ldr	r2, [pc, #60]	; (8004a00 <SystemInit+0x40>)
  #endif
	/* Reset the RCC clock configuration to the default reset state ------------*/
	/* Set HSION bit */
	RCC->CR |= (uint32_t) 0x00000001;
 80049c2:	4b10      	ldr	r3, [pc, #64]	; (8004a04 <SystemInit+0x44>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80049c4:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;

	/* Reset HSEON, CSSON and PLLON bits */
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 80049c8:	490f      	ldr	r1, [pc, #60]	; (8004a08 <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80049ca:	f440 0070 	orr.w	r0, r0, #15728640	; 0xf00000
void SystemInit(void) {
 80049ce:	b470      	push	{r4, r5, r6}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80049d0:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
	RCC->CFGR = 0x00000000;
 80049d4:	2400      	movs	r4, #0
	RCC->CR |= (uint32_t) 0x00000001;
 80049d6:	6818      	ldr	r0, [r3, #0]

	/* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80049d8:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
	RCC->PLLCFGR = 0x24003010;
 80049dc:	4e0b      	ldr	r6, [pc, #44]	; (8004a0c <SystemInit+0x4c>)
	RCC->CR |= (uint32_t) 0x00000001;
 80049de:	f040 0001 	orr.w	r0, r0, #1
 80049e2:	6018      	str	r0, [r3, #0]
	RCC->CFGR = 0x00000000;
 80049e4:	609c      	str	r4, [r3, #8]
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 80049e6:	6818      	ldr	r0, [r3, #0]
 80049e8:	4001      	ands	r1, r0
 80049ea:	6019      	str	r1, [r3, #0]
	RCC->PLLCFGR = 0x24003010;
 80049ec:	605e      	str	r6, [r3, #4]
	RCC->CR &= (uint32_t) 0xFFFBFFFF;
 80049ee:	6819      	ldr	r1, [r3, #0]
 80049f0:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80049f4:	6019      	str	r1, [r3, #0]
	RCC->CIR = 0x00000000;
 80049f6:	60dc      	str	r4, [r3, #12]
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80049f8:	6095      	str	r5, [r2, #8]
#endif
}
 80049fa:	bc70      	pop	{r4, r5, r6}
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	e000ed00 	.word	0xe000ed00
 8004a04:	40023800 	.word	0x40023800
 8004a08:	fef6ffff 	.word	0xfef6ffff
 8004a0c:	24003010 	.word	0x24003010

08004a10 <dnsfound>:
}

// Delayed DNS lookup result callback

void dnsfound(const char *name, const ip_addr_t *ipaddr, void *callback_arg) {
	if (ipaddr->addr == NULL) {
 8004a10:	680b      	ldr	r3, [r1, #0]
 8004a12:	b113      	cbz	r3, 8004a1a <dnsfound+0xa>
		ip_ready = -1;
	} else
		ip_ready = ipaddr->addr;
 8004a14:	4a03      	ldr	r2, [pc, #12]	; (8004a24 <dnsfound+0x14>)
 8004a16:	6013      	str	r3, [r2, #0]
}
 8004a18:	4770      	bx	lr
		ip_ready = -1;
 8004a1a:	4b02      	ldr	r3, [pc, #8]	; (8004a24 <dnsfound+0x14>)
 8004a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a20:	601a      	str	r2, [r3, #0]
 8004a22:	4770      	bx	lr
 8004a24:	20001690 	.word	0x20001690

08004a28 <myreboot>:
	printf("%s, ... rebooting\n", msg);
 8004a28:	4601      	mov	r1, r0
 8004a2a:	480a      	ldr	r0, [pc, #40]	; (8004a54 <myreboot+0x2c>)
void myreboot(char *msg) {
 8004a2c:	b508      	push	{r3, lr}
	printf("%s, ... rebooting\n", msg);
 8004a2e:	f01b ffcb 	bl	80209c8 <iprintf>
	osDelay(2000);
 8004a32:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004a36:	f00c fa57 	bl	8010ee8 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 8004a3a:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004a3e:	4906      	ldr	r1, [pc, #24]	; (8004a58 <myreboot+0x30>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004a40:	4b06      	ldr	r3, [pc, #24]	; (8004a5c <myreboot+0x34>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004a42:	68ca      	ldr	r2, [r1, #12]
 8004a44:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	60cb      	str	r3, [r1, #12]
 8004a4c:	f3bf 8f4f 	dsb	sy
    __NOP();
 8004a50:	bf00      	nop
 8004a52:	e7fd      	b.n	8004a50 <myreboot+0x28>
 8004a54:	08025f44 	.word	0x08025f44
 8004a58:	e000ed00 	.word	0xe000ed00
 8004a5c:	05fa0004 	.word	0x05fa0004

08004a60 <sendudp>:
/*inline*/err_t sendudp(struct udp_pcb *pcb, struct pbuf *ps, const ip_addr_t *dst_ip, u16_t dst_port) {
 8004a60:	b500      	push	{lr}
 8004a62:	b083      	sub	sp, #12
	err = udp_sendto(pcb, ps, &udpdestip, UDP_PORT_NO);
 8004a64:	f241 3388 	movw	r3, #5000	; 0x1388
 8004a68:	4a16      	ldr	r2, [pc, #88]	; (8004ac4 <sendudp+0x64>)
 8004a6a:	f017 f8c9 	bl	801bc00 <udp_sendto>
 8004a6e:	f88d 0007 	strb.w	r0, [sp, #7]
	if (err != ERR_OK) {
 8004a72:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004a76:	b25b      	sxtb	r3, r3
 8004a78:	b93b      	cbnz	r3, 8004a8a <sendudp+0x2a>
		busycount = 0;
 8004a7a:	4a13      	ldr	r2, [pc, #76]	; (8004ac8 <sendudp+0x68>)
 8004a7c:	6013      	str	r3, [r2, #0]
	return (err);
 8004a7e:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8004a82:	b240      	sxtb	r0, r0
 8004a84:	b003      	add	sp, #12
 8004a86:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("sendudp: err %i\n", err);
 8004a8a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8004a8e:	480f      	ldr	r0, [pc, #60]	; (8004acc <sendudp+0x6c>)
 8004a90:	b249      	sxtb	r1, r1
 8004a92:	f01b ff99 	bl	80209c8 <iprintf>
		vTaskDelay(100); //some delay!
 8004a96:	2064      	movs	r0, #100	; 0x64
 8004a98:	f00d fca8 	bl	80123ec <vTaskDelay>
		if (err == ERR_MEM) {
 8004a9c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004aa0:	2bff      	cmp	r3, #255	; 0xff
 8004aa2:	d00c      	beq.n	8004abe <sendudp+0x5e>
		if (err == ERR_USE) {
 8004aa4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004aa8:	2bf8      	cmp	r3, #248	; 0xf8
 8004aaa:	d1e8      	bne.n	8004a7e <sendudp+0x1e>
			if (busycount++ > 10)
 8004aac:	4a06      	ldr	r2, [pc, #24]	; (8004ac8 <sendudp+0x68>)
 8004aae:	6813      	ldr	r3, [r2, #0]
 8004ab0:	1c59      	adds	r1, r3, #1
 8004ab2:	2b0a      	cmp	r3, #10
 8004ab4:	6011      	str	r1, [r2, #0]
 8004ab6:	dde2      	ble.n	8004a7e <sendudp+0x1e>
				myreboot("sendudp: udp always busy");
 8004ab8:	4805      	ldr	r0, [pc, #20]	; (8004ad0 <sendudp+0x70>)
 8004aba:	f7ff ffb5 	bl	8004a28 <myreboot>
			myreboot("sendudp: out of mem");
 8004abe:	4805      	ldr	r0, [pc, #20]	; (8004ad4 <sendudp+0x74>)
 8004ac0:	f7ff ffb2 	bl	8004a28 <myreboot>
 8004ac4:	20023434 	.word	0x20023434
 8004ac8:	20001688 	.word	0x20001688
 8004acc:	08025f58 	.word	0x08025f58
 8004ad0:	08025f80 	.word	0x08025f80
 8004ad4:	08025f6c 	.word	0x08025f6c

08004ad8 <sendstatus>:
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 8004ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8004adc:	4c25      	ldr	r4, [pc, #148]	; (8004b74 <sendstatus+0x9c>)
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 8004ade:	4617      	mov	r7, r2
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8004ae0:	4a25      	ldr	r2, [pc, #148]	; (8004b78 <sendstatus+0xa0>)
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 8004ae2:	b082      	sub	sp, #8
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8004ae4:	f9b4 4000 	ldrsh.w	r4, [r4]
	err = sendudp(pcb, ps, &udpdestip, UDP_PORT_NO);
 8004ae8:	f241 3388 	movw	r3, #5000	; 0x1388
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8004aec:	8815      	ldrh	r5, [r2, #0]
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8004aee:	ea84 7ee4 	eor.w	lr, r4, r4, asr #31
	statuspkt.adcbase = (globaladcavg & 0xfff);	// agc
 8004af2:	4e22      	ldr	r6, [pc, #136]	; (8004b7c <sendstatus+0xa4>)
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8004af4:	4a22      	ldr	r2, [pc, #136]	; (8004b80 <sendstatus+0xa8>)
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8004af6:	ebae 7ee4 	sub.w	lr, lr, r4, asr #31
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8004afa:	1b64      	subs	r4, r4, r5
	statuspkt.adcbase = (globaladcavg & 0xfff);	// agc
 8004afc:	f8d6 c000 	ldr.w	ip, [r6]
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8004b00:	2c00      	cmp	r4, #0
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8004b02:	4e20      	ldr	r6, [pc, #128]	; (8004b84 <sendstatus+0xac>)
 8004b04:	f3ce 0e0b 	ubfx	lr, lr, #0, #12
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8004b08:	8812      	ldrh	r2, [r2, #0]
 8004b0a:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8004b94 <sendstatus+0xbc>
 8004b0e:	bfb8      	it	lt
 8004b10:	4264      	neglt	r4, r4
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8004b12:	4d1d      	ldr	r5, [pc, #116]	; (8004b88 <sendstatus+0xb0>)
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8004b14:	0312      	lsls	r2, r2, #12
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8004b16:	f8a6 e072 	strh.w	lr, [r6, #114]	; 0x72
	statuspkt.adcbase = (globaladcavg & 0xfff);	// agc
 8004b1a:	f3cc 0c0b 	ubfx	ip, ip, #0, #12
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8004b1e:	f8b8 e000 	ldrh.w	lr, [r8]
 8004b22:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8004b26:	682d      	ldr	r5, [r5, #0]
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8004b28:	4474      	add	r4, lr
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8004b2a:	f8df e06c 	ldr.w	lr, [pc, #108]	; 8004b98 <sendstatus+0xc0>
 8004b2e:	022d      	lsls	r5, r5, #8
	statuspkt.adcbase = (globaladcavg & 0xfff);	// agc
 8004b30:	f8a6 c062 	strh.w	ip, [r6, #98]	; 0x62
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8004b34:	f89e e000 	ldrb.w	lr, [lr]
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8004b38:	4314      	orrs	r4, r2
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8004b3a:	f8d6 c074 	ldr.w	ip, [r6, #116]	; 0x74
 8004b3e:	b2ad      	uxth	r5, r5
 8004b40:	4a12      	ldr	r2, [pc, #72]	; (8004b8c <sendstatus+0xb4>)
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8004b42:	b2a4      	uxth	r4, r4
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8004b44:	ea45 050e 	orr.w	r5, r5, lr
 8004b48:	ea0c 0202 	and.w	r2, ip, r2
	((uint8_t*) (ps->payload))[3] = stype; // timed status pkt type
 8004b4c:	f8d1 c004 	ldr.w	ip, [r1, #4]
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8004b50:	4315      	orrs	r5, r2
	err = sendudp(pcb, ps, &udpdestip, UDP_PORT_NO);
 8004b52:	4a0f      	ldr	r2, [pc, #60]	; (8004b90 <sendstatus+0xb8>)
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8004b54:	6775      	str	r5, [r6, #116]	; 0x74
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8004b56:	f8a6 4060 	strh.w	r4, [r6, #96]	; 0x60
	((uint8_t*) (ps->payload))[3] = stype; // timed status pkt type
 8004b5a:	f88c 0003 	strb.w	r0, [ip, #3]
	err = sendudp(pcb, ps, &udpdestip, UDP_PORT_NO);
 8004b5e:	4638      	mov	r0, r7
 8004b60:	f7ff ff7e 	bl	8004a60 <sendudp>
 8004b64:	f88d 0007 	strb.w	r0, [sp, #7]
	statuspkt.udppknum++;
 8004b68:	6833      	ldr	r3, [r6, #0]
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	6033      	str	r3, [r6, #0]
}
 8004b6e:	b002      	add	sp, #8
 8004b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b74:	20000700 	.word	0x20000700
 8004b78:	200006b8 	.word	0x200006b8
 8004b7c:	200006ac 	.word	0x200006ac
 8004b80:	2000023e 	.word	0x2000023e
 8004b84:	20022774 	.word	0x20022774
 8004b88:	200006b4 	.word	0x200006b4
 8004b8c:	ffff0000 	.word	0xffff0000
 8004b90:	20023434 	.word	0x20023434
 8004b94:	20000002 	.word	0x20000002
 8004b98:	2000069c 	.word	0x2000069c

08004b9c <sendtimedstatus>:
void sendtimedstatus(struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 8004b9c:	b470      	push	{r4, r5, r6}
	if ((t1sec != talive) && (t1sec % STAT_TIME == 0)) { // this is a temporary mech to send timed status pkts...
 8004b9e:	4b0c      	ldr	r3, [pc, #48]	; (8004bd0 <sendtimedstatus+0x34>)
 8004ba0:	4e0c      	ldr	r6, [pc, #48]	; (8004bd4 <sendtimedstatus+0x38>)
 8004ba2:	681d      	ldr	r5, [r3, #0]
 8004ba4:	6834      	ldr	r4, [r6, #0]
 8004ba6:	42a5      	cmp	r5, r4
 8004ba8:	d008      	beq.n	8004bbc <sendtimedstatus+0x20>
 8004baa:	4c0b      	ldr	r4, [pc, #44]	; (8004bd8 <sendtimedstatus+0x3c>)
 8004bac:	fba4 3405 	umull	r3, r4, r4, r5
 8004bb0:	09a4      	lsrs	r4, r4, #6
 8004bb2:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8004bb6:	ebb5 0fc4 	cmp.w	r5, r4, lsl #3
 8004bba:	d001      	beq.n	8004bc0 <sendtimedstatus+0x24>
}
 8004bbc:	bc70      	pop	{r4, r5, r6}
 8004bbe:	4770      	bx	lr
		sendstatus(TIMED, ps, pcb, batchid);
 8004bc0:	4613      	mov	r3, r2
		talive = t1sec;
 8004bc2:	6035      	str	r5, [r6, #0]
		sendstatus(TIMED, ps, pcb, batchid);
 8004bc4:	460a      	mov	r2, r1
 8004bc6:	4601      	mov	r1, r0
 8004bc8:	2002      	movs	r0, #2
}
 8004bca:	bc70      	pop	{r4, r5, r6}
		sendstatus(TIMED, ps, pcb, batchid);
 8004bcc:	f7ff bf84 	b.w	8004ad8 <sendstatus>
 8004bd0:	20001638 	.word	0x20001638
 8004bd4:	20001694 	.word	0x20001694
 8004bd8:	88888889 	.word	0x88888889

08004bdc <dnslookup>:

// set destination server IP using DNS lookup
int dnslookup(char *name, struct ip4_addr *ip) {
 8004bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bde:	4605      	mov	r5, r0
 8004be0:	460f      	mov	r7, r1
	int i, err = 0;

	printf("DNS Resolving %s ", name);
//	osDelay(500);
	ip_ready = 0;
 8004be2:	2400      	movs	r4, #0
	printf("DNS Resolving %s ", name);
 8004be4:	4819      	ldr	r0, [pc, #100]	; (8004c4c <dnslookup+0x70>)
 8004be6:	4629      	mov	r1, r5
	ip_ready = 0;
 8004be8:	4e19      	ldr	r6, [pc, #100]	; (8004c50 <dnslookup+0x74>)
	printf("DNS Resolving %s ", name);
 8004bea:	f01b feed 	bl	80209c8 <iprintf>
	err = dns_gethostbyname(name, ip, dnsfound, 0);
 8004bee:	4628      	mov	r0, r5
 8004bf0:	4639      	mov	r1, r7
 8004bf2:	4623      	mov	r3, r4
 8004bf4:	4a17      	ldr	r2, [pc, #92]	; (8004c54 <dnslookup+0x78>)
	ip_ready = 0;
 8004bf6:	6034      	str	r4, [r6, #0]
	err = dns_gethostbyname(name, ip, dnsfound, 0);
 8004bf8:	f010 fc52 	bl	80154a0 <dns_gethostbyname>
 8004bfc:	4605      	mov	r5, r0

	switch (err) {
 8004bfe:	3005      	adds	r0, #5
 8004c00:	d007      	beq.n	8004c12 <dnslookup+0x36>
 8004c02:	b90d      	cbnz	r5, 8004c08 <dnslookup+0x2c>
	default:
		printf("****** gethostbyname failed *****\n ");
		break;
	}
	return (err);
}
 8004c04:	4628      	mov	r0, r5
 8004c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("****** gethostbyname failed *****\n ");
 8004c08:	4813      	ldr	r0, [pc, #76]	; (8004c58 <dnslookup+0x7c>)
 8004c0a:	f01b fedd 	bl	80209c8 <iprintf>
}
 8004c0e:	4628      	mov	r0, r5
 8004c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("gethostbyname INPROGRESS");
 8004c12:	4812      	ldr	r0, [pc, #72]	; (8004c5c <dnslookup+0x80>)
 8004c14:	2414      	movs	r4, #20
 8004c16:	f01b fed7 	bl	80209c8 <iprintf>
 8004c1a:	e001      	b.n	8004c20 <dnslookup+0x44>
		for (i = 0; i < 20; i++) {
 8004c1c:	3c01      	subs	r4, #1
 8004c1e:	d0f3      	beq.n	8004c08 <dnslookup+0x2c>
			osDelay(1000);		// give it 20 seconds
 8004c20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c24:	f00c f960 	bl	8010ee8 <osDelay>
			printf(".");
 8004c28:	202e      	movs	r0, #46	; 0x2e
 8004c2a:	f01b fee5 	bl	80209f8 <putchar>
			if (ip_ready) {
 8004c2e:	6833      	ldr	r3, [r6, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d0f3      	beq.n	8004c1c <dnslookup+0x40>
				if (ip_ready == -1) {
 8004c34:	1c5a      	adds	r2, r3, #1
 8004c36:	d003      	beq.n	8004c40 <dnslookup+0x64>
				return (ERR_OK);
 8004c38:	2500      	movs	r5, #0
				ip->addr = ip_ready;
 8004c3a:	603b      	str	r3, [r7, #0]
}
 8004c3c:	4628      	mov	r0, r5
 8004c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					ip->addr = "127.0.0.1";	// safe ?
 8004c40:	4b07      	ldr	r3, [pc, #28]	; (8004c60 <dnslookup+0x84>)
					return (ERR_TIMEOUT);	// not always timeout, but some error
 8004c42:	f06f 0502 	mvn.w	r5, #2
					ip->addr = "127.0.0.1";	// safe ?
 8004c46:	603b      	str	r3, [r7, #0]
					return (ERR_TIMEOUT);	// not always timeout, but some error
 8004c48:	e7dc      	b.n	8004c04 <dnslookup+0x28>
 8004c4a:	bf00      	nop
 8004c4c:	08025ea0 	.word	0x08025ea0
 8004c50:	20001690 	.word	0x20001690
 8004c54:	08004a11 	.word	0x08004a11
 8004c58:	08025edc 	.word	0x08025edc
 8004c5c:	08025eb4 	.word	0x08025eb4
 8004c60:	08025ed0 	.word	0x08025ed0

08004c64 <locateudp>:

uint32_t locateudp()		// called from LPtask every n seconds
{
 8004c64:	b530      	push	{r4, r5, lr}
	volatile err_t err;
	uint32_t ip = 0;

	printf("Finding %s for UDP streaming\n", udp_target);
 8004c66:	4913      	ldr	r1, [pc, #76]	; (8004cb4 <locateudp+0x50>)
{
 8004c68:	b085      	sub	sp, #20
	printf("Finding %s for UDP streaming\n", udp_target);
 8004c6a:	4813      	ldr	r0, [pc, #76]	; (8004cb8 <locateudp+0x54>)
 8004c6c:	f01b feac 	bl	80209c8 <iprintf>
	err = dnslookup(udp_target, &udpdestip);
 8004c70:	4912      	ldr	r1, [pc, #72]	; (8004cbc <locateudp+0x58>)
 8004c72:	4810      	ldr	r0, [pc, #64]	; (8004cb4 <locateudp+0x50>)
 8004c74:	f7ff ffb2 	bl	8004bdc <dnslookup>
 8004c78:	b240      	sxtb	r0, r0
 8004c7a:	f88d 000f 	strb.w	r0, [sp, #15]
	if (err)
 8004c7e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8004c82:	b10b      	cbz	r3, 8004c88 <locateudp+0x24>
		rebootme();
 8004c84:	f7fd f804 	bl	8001c90 <rebootme>

	ip = udpdestip.addr;
 8004c88:	4b0c      	ldr	r3, [pc, #48]	; (8004cbc <locateudp+0x58>)
	sprintf(udp_ips, "%lu.%lu.%lu.%lu", ip & 0xff, (ip & 0xff00) >> 8, (ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
 8004c8a:	490d      	ldr	r1, [pc, #52]	; (8004cc0 <locateudp+0x5c>)
	ip = udpdestip.addr;
 8004c8c:	681c      	ldr	r4, [r3, #0]
	sprintf(udp_ips, "%lu.%lu.%lu.%lu", ip & 0xff, (ip & 0xff00) >> 8, (ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
 8004c8e:	480d      	ldr	r0, [pc, #52]	; (8004cc4 <locateudp+0x60>)
 8004c90:	0e22      	lsrs	r2, r4, #24
 8004c92:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8004c96:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8004c9a:	9201      	str	r2, [sp, #4]
 8004c9c:	b2e2      	uxtb	r2, r4
 8004c9e:	9500      	str	r5, [sp, #0]
 8004ca0:	f01b ffea 	bl	8020c78 <siprintf>
	printf("\nUDP Target IP: %s\n", udp_ips);
 8004ca4:	4907      	ldr	r1, [pc, #28]	; (8004cc4 <locateudp+0x60>)
 8004ca6:	4808      	ldr	r0, [pc, #32]	; (8004cc8 <locateudp+0x64>)
 8004ca8:	f01b fe8e 	bl	80209c8 <iprintf>
	return (ip);
}
 8004cac:	4620      	mov	r0, r4
 8004cae:	b005      	add	sp, #20
 8004cb0:	bd30      	pop	{r4, r5, pc}
 8004cb2:	bf00      	nop
 8004cb4:	20023438 	.word	0x20023438
 8004cb8:	08025f00 	.word	0x08025f00
 8004cbc:	20023434 	.word	0x20023434
 8004cc0:	08025f20 	.word	0x08025f20
 8004cc4:	20023420 	.word	0x20023420
 8004cc8:	08025f30 	.word	0x08025f30

08004ccc <startudp>:

void startudp(uint32_t ip) {
 8004ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cd0:	b085      	sub	sp, #20
	volatile err_t err;
	int i;

//printf("Startudp:\n");
	/* Store the handle of the calling task. */
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 8004cd2:	f00d fcdb 	bl	801268c <xTaskGetCurrentTaskHandle>
 8004cd6:	4b68      	ldr	r3, [pc, #416]	; (8004e78 <startudp+0x1ac>)
 8004cd8:	6018      	str	r0, [r3, #0]
	osDelay(1000);
 8004cda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004cde:	f00c f903 	bl	8010ee8 <osDelay>

	/* get new pcbs */
	pcb = udp_new();
 8004ce2:	f017 f85f 	bl	801bda4 <udp_new>
	if (pcb == NULL) {
 8004ce6:	2800      	cmp	r0, #0
 8004ce8:	f000 80b7 	beq.w	8004e5a <startudp+0x18e>
			;
		return;
	}

	/* bind to any IP address on port UDP_PORT_NO */
	if (udp_bind(pcb, IP_ADDR_ANY, UDP_PORT_NO) != ERR_OK) {
 8004cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cf0:	4962      	ldr	r1, [pc, #392]	; (8004e7c <startudp+0x1b0>)
 8004cf2:	4607      	mov	r7, r0
 8004cf4:	f016 fdf4 	bl	801b8e0 <udp_bind>
 8004cf8:	4681      	mov	r9, r0
 8004cfa:	b118      	cbz	r0, 8004d04 <startudp+0x38>
		printf("startudp: udp_bind failed!\n");
 8004cfc:	4860      	ldr	r0, [pc, #384]	; (8004e80 <startudp+0x1b4>)
 8004cfe:	f01b feeb 	bl	8020ad8 <puts>
 8004d02:	e7fe      	b.n	8004d02 <startudp+0x36>
			;
	}

//	udp_recv(pcb, myudp_recv, NULL);

	p1 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 8004d04:	2241      	movs	r2, #65	; 0x41
 8004d06:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
 8004d0a:	2036      	movs	r0, #54	; 0x36
 8004d0c:	f011 fd72 	bl	80167f4 <pbuf_alloc>

	if (p1 == NULL) {
 8004d10:	9000      	str	r0, [sp, #0]
 8004d12:	2800      	cmp	r0, #0
 8004d14:	f000 80a5 	beq.w	8004e62 <startudp+0x196>
		printf("startudp: p1 buf_alloc failed!\n");
		return;
	}
	p1->payload = &(*pktbuf)[0];
 8004d18:	4c5a      	ldr	r4, [pc, #360]	; (8004e84 <startudp+0x1b8>)
//	p1->len = ADCBUFSIZE;

	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 8004d1a:	2241      	movs	r2, #65	; 0x41
	p1->payload = &(*pktbuf)[0];
 8004d1c:	9d00      	ldr	r5, [sp, #0]
	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 8004d1e:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
	p1->payload = &(*pktbuf)[0];
 8004d22:	6823      	ldr	r3, [r4, #0]
	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 8004d24:	2036      	movs	r0, #54	; 0x36
	p1->payload = &(*pktbuf)[0];
 8004d26:	606b      	str	r3, [r5, #4]
	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 8004d28:	f011 fd64 	bl	80167f4 <pbuf_alloc>
	if (p2 == NULL) {
 8004d2c:	9001      	str	r0, [sp, #4]
 8004d2e:	2800      	cmp	r0, #0
 8004d30:	f000 809f 	beq.w	8004e72 <startudp+0x1a6>
		printf("startudp: p2 buf_alloc failed!\n");
		return;
	}
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 8004d34:	6823      	ldr	r3, [r4, #0]

//	p2->len = ADCBUFSIZE;

// trailing packet status packet
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 8004d36:	2201      	movs	r2, #1
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 8004d38:	9c01      	ldr	r4, [sp, #4]
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 8004d3a:	219c      	movs	r1, #156	; 0x9c
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 8004d3c:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 8004d40:	2036      	movs	r0, #54	; 0x36
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 8004d42:	6063      	str	r3, [r4, #4]
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 8004d44:	f011 fd56 	bl	80167f4 <pbuf_alloc>
	if (ps == NULL) {
 8004d48:	4680      	mov	r8, r0
 8004d4a:	2800      	cmp	r0, #0
 8004d4c:	f000 808f 	beq.w	8004e6e <startudp+0x1a2>
		printf("startudp: ps buf_alloc failed!\n");
		return;
	}
	ps->payload = &statuspkt;	// point at status / GPS data
 8004d50:	4e4d      	ldr	r6, [pc, #308]	; (8004e88 <startudp+0x1bc>)

	osDelay(5000);
 8004d52:	f241 3088 	movw	r0, #5000	; 0x1388
 8004d56:	4d4d      	ldr	r5, [pc, #308]	; (8004e8c <startudp+0x1c0>)
	ps->payload = &statuspkt;	// point at status / GPS data
 8004d58:	f8c8 6004 	str.w	r6, [r8, #4]
	osDelay(5000);
 8004d5c:	f00c f8c4 	bl	8010ee8 <osDelay>

	statuspkt.auxstatus1 = 0;
 8004d60:	4648      	mov	r0, r9
	statuspkt.adcudpover = 0;		// debug use count overruns
	statuspkt.trigcount = 0;		// debug use adc trigger count
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
	statuspkt.telltale1 = 0xDEC0EDFE; //  0xFEEDC0DE marker at the end of each status packet
 8004d62:	4b4b      	ldr	r3, [pc, #300]	; (8004e90 <startudp+0x1c4>)

	netup = 1; // this is incomplete - it should be set by the phys layer also
 8004d64:	2101      	movs	r1, #1
 8004d66:	4a4b      	ldr	r2, [pc, #300]	; (8004e94 <startudp+0x1c8>)
	statuspkt.auxstatus1 = 0;
 8004d68:	f8c6 9074 	str.w	r9, [r6, #116]	; 0x74
	statuspkt.adcudpover = 0;		// debug use count overruns
 8004d6c:	67b0      	str	r0, [r6, #120]	; 0x78
	statuspkt.trigcount = 0;		// debug use adc trigger count
 8004d6e:	67f0      	str	r0, [r6, #124]	; 0x7c
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
 8004d70:	f8c6 0080 	str.w	r0, [r6, #128]	; 0x80
	printf("Arming UDP Railgun\nSystem ready and operating....\n");
 8004d74:	4848      	ldr	r0, [pc, #288]	; (8004e98 <startudp+0x1cc>)
 8004d76:	4c49      	ldr	r4, [pc, #292]	; (8004e9c <startudp+0x1d0>)
 8004d78:	f8df a148 	ldr.w	sl, [pc, #328]	; 8004ec4 <startudp+0x1f8>
	netup = 1; // this is incomplete - it should be set by the phys layer also
 8004d7c:	7011      	strb	r1, [r2, #0]
 8004d7e:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8004ec8 <startudp+0x1fc>
	statuspkt.telltale1 = 0xDEC0EDFE; //  0xFEEDC0DE marker at the end of each status packet
 8004d82:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98
	printf("Arming UDP Railgun\nSystem ready and operating....\n");
 8004d86:	f01b fea7 	bl	8020ad8 <puts>
		/* Wait to be notified */
#ifdef TESTING
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET /*PB11*/);	// debug pin
#endif

		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 8004d8a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004d8e:	2001      	movs	r0, #1
 8004d90:	f00d fdb6 	bl	8012900 <ulTaskNotifyTake>
#ifdef TESTING
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET /*PB11*/);	// debug pin
#endif

		if (ulNotificationValue > 0) {		// we were notified
 8004d94:	2800      	cmp	r0, #0
 8004d96:	d059      	beq.n	8004e4c <startudp+0x180>
			sigsend = 0;
 8004d98:	2200      	movs	r2, #0
			/* if we have a trigger, send a sample packet */
			if ((gpslocked) && (jabbertimeout == 0) && (!(globalfreeze))) { // only send if adc threshold was exceeded and GPS is locked
 8004d9a:	7823      	ldrb	r3, [r4, #0]
			sigsend = 0;
 8004d9c:	602a      	str	r2, [r5, #0]
			if ((gpslocked) && (jabbertimeout == 0) && (!(globalfreeze))) { // only send if adc threshold was exceeded and GPS is locked
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d0f3      	beq.n	8004d8a <startudp+0xbe>
 8004da2:	f8da 3000 	ldr.w	r3, [sl]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1ef      	bne.n	8004d8a <startudp+0xbe>
 8004daa:	4b3d      	ldr	r3, [pc, #244]	; (8004ea0 <startudp+0x1d4>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1eb      	bne.n	8004d8a <startudp+0xbe>

				//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET /*PB11*/);	// debug pin
				pd = (dmabufno) ? p2 : p1; // which dma buffer to send, dmabuf is last filled buffer, 0 or 1
 8004db2:	4a3c      	ldr	r2, [pc, #240]	; (8004ea4 <startudp+0x1d8>)
 8004db4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004db8:	6812      	ldr	r2, [r2, #0]
 8004dba:	2a00      	cmp	r2, #0
 8004dbc:	bf08      	it	eq
 8004dbe:	4601      	moveq	r1, r0

				((uint8_t*) (pd->payload))[3] = 0;	// pkt type
 8004dc0:	684a      	ldr	r2, [r1, #4]
				pd = (dmabufno) ? p2 : p1; // which dma buffer to send, dmabuf is last filled buffer, 0 or 1
 8004dc2:	468b      	mov	fp, r1
				((uint8_t*) (pd->payload))[3] = 0;	// pkt type
 8004dc4:	70d3      	strb	r3, [r2, #3]
				((uint8_t*) (pd->payload))[0] = statuspkt.udppknum & 0xff;
 8004dc6:	6832      	ldr	r2, [r6, #0]
 8004dc8:	684b      	ldr	r3, [r1, #4]
 8004dca:	701a      	strb	r2, [r3, #0]
				((uint8_t*) (pd->payload))[1] = (statuspkt.udppknum & 0xff00) >> 8;
 8004dcc:	6833      	ldr	r3, [r6, #0]
 8004dce:	684a      	ldr	r2, [r1, #4]
 8004dd0:	0a1b      	lsrs	r3, r3, #8
 8004dd2:	7053      	strb	r3, [r2, #1]
				((uint8_t*) (pd->payload))[2] = (statuspkt.udppknum & 0xff0000) >> 16;
 8004dd4:	6833      	ldr	r3, [r6, #0]
 8004dd6:	684a      	ldr	r2, [r1, #4]
 8004dd8:	0c1b      	lsrs	r3, r3, #16
 8004dda:	7093      	strb	r3, [r2, #2]

				while (pd->ref != 1) {	// old packet not finished with yet
 8004ddc:	7b89      	ldrb	r1, [r1, #14]
 8004dde:	2901      	cmp	r1, #1
 8004de0:	d006      	beq.n	8004df0 <startudp+0x124>
					printf("*******send sample failed p->ref = %d *******\n", pd->ref);
 8004de2:	4831      	ldr	r0, [pc, #196]	; (8004ea8 <startudp+0x1dc>)
 8004de4:	f01b fdf0 	bl	80209c8 <iprintf>
				while (pd->ref != 1) {	// old packet not finished with yet
 8004de8:	f89b 100e 	ldrb.w	r1, [fp, #14]
 8004dec:	2901      	cmp	r1, #1
 8004dee:	d1f8      	bne.n	8004de2 <startudp+0x116>
				}

				err = sendudp(pcb, pd, &udpdestip, UDP_PORT_NO);		// send the sample packet
 8004df0:	f241 3388 	movw	r3, #5000	; 0x1388
 8004df4:	4a2d      	ldr	r2, [pc, #180]	; (8004eac <startudp+0x1e0>)
 8004df6:	4659      	mov	r1, fp
 8004df8:	4638      	mov	r0, r7
 8004dfa:	f7ff fe31 	bl	8004a60 <sendudp>
					printf("******* end sample status: ps->ref = %d *******\n", ps->ref);
					vTaskDelay(0); // but we need wait to update the data packet next, so wait
				}
#endif
				/* send end of sequence status packet if end of batch sequence */
				if (sendendstatus > 0) {
 8004dfe:	4b2c      	ldr	r3, [pc, #176]	; (8004eb0 <startudp+0x1e4>)
				err = sendudp(pcb, pd, &udpdestip, UDP_PORT_NO);		// send the sample packet
 8004e00:	f88d 000f 	strb.w	r0, [sp, #15]
				if (sendendstatus > 0) {
 8004e04:	781a      	ldrb	r2, [r3, #0]
				statuspkt.udpsent++;	// debug no of sample packets set
 8004e06:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	f8c6 3080 	str.w	r3, [r6, #128]	; 0x80
				statuspkt.adcpktssent++;	// UDP sample packet counter
 8004e10:	f8b6 305e 	ldrh.w	r3, [r6, #94]	; 0x5e
 8004e14:	3301      	adds	r3, #1
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	f8a6 305e 	strh.w	r3, [r6, #94]	; 0x5e
				statuspkt.udppknum++;		// UDP packet number
 8004e1c:	6833      	ldr	r3, [r6, #0]
 8004e1e:	3301      	adds	r3, #1
 8004e20:	6033      	str	r3, [r6, #0]
				if (sendendstatus > 0) {
 8004e22:	2a00      	cmp	r2, #0
 8004e24:	d0b1      	beq.n	8004d8a <startudp+0xbe>
//					if (jabbertimeout == 0)	// terminate curtailed sequence???
						sendstatus(ENDSEQ, ps, pcb, adcbatchid); // send end of seq status
 8004e26:	f899 3000 	ldrb.w	r3, [r9]
 8004e2a:	463a      	mov	r2, r7
 8004e2c:	4641      	mov	r1, r8
 8004e2e:	2001      	movs	r0, #1
 8004e30:	f7ff fe52 	bl	8004ad8 <sendstatus>
					sendendstatus = 0;	// cancel the flag
 8004e34:	2300      	movs	r3, #0
 8004e36:	4a1e      	ldr	r2, [pc, #120]	; (8004eb0 <startudp+0x1e4>)
		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 8004e38:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004e3c:	2001      	movs	r0, #1
					statuspkt.adcpktssent = 0;	// end of sequence so start again at 0
 8004e3e:	f8a6 305e 	strh.w	r3, [r6, #94]	; 0x5e
					sendendstatus = 0;	// cancel the flag
 8004e42:	7013      	strb	r3, [r2, #0]
		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 8004e44:	f00d fd5c 	bl	8012900 <ulTaskNotifyTake>
		if (ulNotificationValue > 0) {		// we were notified
 8004e48:	2800      	cmp	r0, #0
 8004e4a:	d1a5      	bne.n	8004d98 <startudp+0xcc>
		}
//			printf("ulNotificationValue = %d\n",ulNotificationValue );
		/* The transmission ended as expected. */
		else {
			/* The call to ulTaskNotifyTake() timed out. */
			sendtimedstatus(ps, pcb, adcbatchid);
 8004e4c:	f899 2000 	ldrb.w	r2, [r9]
 8004e50:	4639      	mov	r1, r7
 8004e52:	4640      	mov	r0, r8
 8004e54:	f7ff fea2 	bl	8004b9c <sendtimedstatus>
 8004e58:	e797      	b.n	8004d8a <startudp+0xbe>
		printf("startudp: udp_new failed!\n");
 8004e5a:	4816      	ldr	r0, [pc, #88]	; (8004eb4 <startudp+0x1e8>)
 8004e5c:	f01b fe3c 	bl	8020ad8 <puts>
 8004e60:	e7fe      	b.n	8004e60 <startudp+0x194>
		printf("startudp: p1 buf_alloc failed!\n");
 8004e62:	4815      	ldr	r0, [pc, #84]	; (8004eb8 <startudp+0x1ec>)
//			printf("ulNotificationValue = %d\n",ulNotificationValue );
		}

	} // forever while
}
 8004e64:	b005      	add	sp, #20
 8004e66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printf("startudp: ps buf_alloc failed!\n");
 8004e6a:	f01b be35 	b.w	8020ad8 <puts>
 8004e6e:	4813      	ldr	r0, [pc, #76]	; (8004ebc <startudp+0x1f0>)
 8004e70:	e7f8      	b.n	8004e64 <startudp+0x198>
		printf("startudp: p2 buf_alloc failed!\n");
 8004e72:	4813      	ldr	r0, [pc, #76]	; (8004ec0 <startudp+0x1f4>)
 8004e74:	e7f6      	b.n	8004e64 <startudp+0x198>
 8004e76:	bf00      	nop
 8004e78:	200007a8 	.word	0x200007a8
 8004e7c:	0803f66c 	.word	0x0803f66c
 8004e80:	08025fb8 	.word	0x08025fb8
 8004e84:	20022824 	.word	0x20022824
 8004e88:	20022774 	.word	0x20022774
 8004e8c:	20000718 	.word	0x20000718
 8004e90:	dec0edfe 	.word	0xdec0edfe
 8004e94:	20000702 	.word	0x20000702
 8004e98:	08026034 	.word	0x08026034
 8004e9c:	2000168d 	.word	0x2000168d
 8004ea0:	20023430 	.word	0x20023430
 8004ea4:	200006a8 	.word	0x200006a8
 8004ea8:	08026068 	.word	0x08026068
 8004eac:	20023434 	.word	0x20023434
 8004eb0:	20000710 	.word	0x20000710
 8004eb4:	08025f9c 	.word	0x08025f9c
 8004eb8:	08025fd4 	.word	0x08025fd4
 8004ebc:	08026014 	.word	0x08026014
 8004ec0:	08025ff4 	.word	0x08025ff4
 8004ec4:	200006b4 	.word	0x200006b4
 8004ec8:	2000069c 	.word	0x2000069c

08004ecc <tag_callback>:
const char *tagname[] = { "temp", "pressure", "time", "led1", "sw1A", "sw1B", "sw1C", "sw1D", "sw2A", "sw2B", "sw2C",
		"sw2D", "butt1", "PG0", "PG1", "PG2", "RF1", "devid", "detinfo", "GPS", "AGC", (void*) NULL };
int i, j;

// the tag callback handler
tSSIHandler tag_callback(int index, char *newstring, int maxlen) {
 8004ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ece:	4606      	mov	r6, r0
 8004ed0:	460f      	mov	r7, r1
//  LOCK_TCPIP_CORE();

	HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 8004ed2:	4854      	ldr	r0, [pc, #336]	; (8005024 <tag_callback+0x158>)
 8004ed4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004ed8:	f003 fcd8 	bl	800888c <HAL_GPIO_TogglePin>
 8004edc:	4c52      	ldr	r4, [pc, #328]	; (8005028 <tag_callback+0x15c>)
	} else {
		printf("semaphore take2 failed\n");
	}
#endif
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
		printf("sem wait 2\n");
 8004ede:	4d53      	ldr	r5, [pc, #332]	; (800502c <tag_callback+0x160>)
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
 8004ee0:	e001      	b.n	8004ee6 <tag_callback+0x1a>
		printf("sem wait 2\n");
 8004ee2:	f01b fdf9 	bl	8020ad8 <puts>
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
 8004ee6:	2101      	movs	r1, #1
 8004ee8:	6820      	ldr	r0, [r4, #0]
 8004eea:	f00c fd99 	bl	8011a20 <xQueueSemaphoreTake>
 8004eee:	4603      	mov	r3, r0
		printf("sem wait 2\n");
 8004ef0:	4628      	mov	r0, r5
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d1f5      	bne.n	8004ee2 <tag_callback+0x16>
	}
	{
//		printf("sem2 wait done\n");
	}

	if ((index > 3) && (index < 12)) {		// omux array
 8004ef6:	1f32      	subs	r2, r6, #4
 8004ef8:	2a07      	cmp	r2, #7
 8004efa:	d819      	bhi.n	8004f30 <tag_callback+0x64>
		i = index - 4;		// 0 to 7
		i = (muxdat[0] & (1 << i));
 8004efc:	494c      	ldr	r1, [pc, #304]	; (8005030 <tag_callback+0x164>)
 8004efe:	4093      	lsls	r3, r2
 8004f00:	4a4c      	ldr	r2, [pc, #304]	; (8005034 <tag_callback+0x168>)
 8004f02:	7809      	ldrb	r1, [r1, #0]
 8004f04:	400b      	ands	r3, r1
 8004f06:	6013      	str	r3, [r2, #0]
		if (i == 0)		// around the houses
 8004f08:	bb43      	cbnz	r3, 8004f5c <tag_callback+0x90>
			strcpy(newstring, "0");
 8004f0a:	4b4b      	ldr	r3, [pc, #300]	; (8005038 <tag_callback+0x16c>)
 8004f0c:	881b      	ldrh	r3, [r3, #0]
 8004f0e:	803b      	strh	r3, [r7, #0]
			break;
		}
//		sprintf(newstring,"index=%d",index);
//  UNLOCK_TCPIP_CORE();

	if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 8004f10:	2300      	movs	r3, #0
 8004f12:	6820      	ldr	r0, [r4, #0]
 8004f14:	461a      	mov	r2, r3
 8004f16:	4619      	mov	r1, r3
 8004f18:	f00c fafc 	bl	8011514 <xQueueGenericSend>
 8004f1c:	2801      	cmp	r0, #1
 8004f1e:	d002      	beq.n	8004f26 <tag_callback+0x5a>
		printf("semaphore give2 failed\n");		// expect this to fail as part of the normal setup
 8004f20:	4846      	ldr	r0, [pc, #280]	; (800503c <tag_callback+0x170>)
 8004f22:	f01b fdd9 	bl	8020ad8 <puts>
	}
	return (strlen(newstring));
 8004f26:	4638      	mov	r0, r7
}
 8004f28:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return (strlen(newstring));
 8004f2c:	f7fb b992 	b.w	8000254 <strlen>
		switch (index) {
 8004f30:	2e14      	cmp	r6, #20
 8004f32:	d871      	bhi.n	8005018 <tag_callback+0x14c>
 8004f34:	e8df f006 	tbb	[pc, r6]
 8004f38:	0b6b5257 	.word	0x0b6b5257
 8004f3c:	70707070 	.word	0x70707070
 8004f40:	70707070 	.word	0x70707070
 8004f44:	323d5c67 	.word	0x323d5c67
 8004f48:	161b2025 	.word	0x161b2025
 8004f4c:	48          	.byte	0x48
 8004f4d:	00          	.byte	0x00
			if (HAL_GPIO_ReadPin(GPIOD, LED_D4_Pin) == GPIO_PIN_SET)
 8004f4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004f52:	4834      	ldr	r0, [pc, #208]	; (8005024 <tag_callback+0x158>)
 8004f54:	f003 fc6e 	bl	8008834 <HAL_GPIO_ReadPin>
 8004f58:	2801      	cmp	r0, #1
 8004f5a:	d1d6      	bne.n	8004f0a <tag_callback+0x3e>
			strcpy(newstring, "1");
 8004f5c:	4b38      	ldr	r3, [pc, #224]	; (8005040 <tag_callback+0x174>)
 8004f5e:	881b      	ldrh	r3, [r3, #0]
 8004f60:	803b      	strh	r3, [r7, #0]
 8004f62:	e7d5      	b.n	8004f10 <tag_callback+0x44>
			strcpy(newstring, gpsstr);		// GPS Status
 8004f64:	4937      	ldr	r1, [pc, #220]	; (8005044 <tag_callback+0x178>)
 8004f66:	4638      	mov	r0, r7
 8004f68:	f01b ff2b 	bl	8020dc2 <strcpy>
			break;
 8004f6c:	e7d0      	b.n	8004f10 <tag_callback+0x44>
			strcpy(newstring, statstr);		// Detector Status
 8004f6e:	4936      	ldr	r1, [pc, #216]	; (8005048 <tag_callback+0x17c>)
 8004f70:	4638      	mov	r0, r7
 8004f72:	f01b ff26 	bl	8020dc2 <strcpy>
			break;
 8004f76:	e7cb      	b.n	8004f10 <tag_callback+0x44>
			strcpy(newstring, snstr);			// Detector ID
 8004f78:	4934      	ldr	r1, [pc, #208]	; (800504c <tag_callback+0x180>)
 8004f7a:	4638      	mov	r0, r7
 8004f7c:	f01b ff21 	bl	8020dc2 <strcpy>
			break;
 8004f80:	e7c6      	b.n	8004f10 <tag_callback+0x44>
			strcpy(newstring, (HAL_GPIO_ReadPin(GPIOE, LP_FILT_Pin) ? "0" : "1"));
 8004f82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004f86:	4832      	ldr	r0, [pc, #200]	; (8005050 <tag_callback+0x184>)
 8004f88:	f003 fc54 	bl	8008834 <HAL_GPIO_ReadPin>
 8004f8c:	4b2a      	ldr	r3, [pc, #168]	; (8005038 <tag_callback+0x16c>)
 8004f8e:	4a2c      	ldr	r2, [pc, #176]	; (8005040 <tag_callback+0x174>)
 8004f90:	2800      	cmp	r0, #0
 8004f92:	bf08      	it	eq
 8004f94:	4613      	moveq	r3, r2
 8004f96:	881b      	ldrh	r3, [r3, #0]
 8004f98:	803b      	strh	r3, [r7, #0]
			break;
 8004f9a:	e7b9      	b.n	8004f10 <tag_callback+0x44>
			strcpy(newstring, (pgagain & 4) ? "1" : "0");
 8004f9c:	4a2d      	ldr	r2, [pc, #180]	; (8005054 <tag_callback+0x188>)
 8004f9e:	4b28      	ldr	r3, [pc, #160]	; (8005040 <tag_callback+0x174>)
 8004fa0:	8811      	ldrh	r1, [r2, #0]
 8004fa2:	4a25      	ldr	r2, [pc, #148]	; (8005038 <tag_callback+0x16c>)
 8004fa4:	f011 0f04 	tst.w	r1, #4
 8004fa8:	bf08      	it	eq
 8004faa:	4613      	moveq	r3, r2
 8004fac:	881b      	ldrh	r3, [r3, #0]
 8004fae:	803b      	strh	r3, [r7, #0]
			break;
 8004fb0:	e7ae      	b.n	8004f10 <tag_callback+0x44>
			strcpy(newstring, (pgagain & 2) ? "1" : "0");
 8004fb2:	4a28      	ldr	r2, [pc, #160]	; (8005054 <tag_callback+0x188>)
 8004fb4:	4b22      	ldr	r3, [pc, #136]	; (8005040 <tag_callback+0x174>)
 8004fb6:	8811      	ldrh	r1, [r2, #0]
 8004fb8:	4a1f      	ldr	r2, [pc, #124]	; (8005038 <tag_callback+0x16c>)
 8004fba:	f011 0f02 	tst.w	r1, #2
 8004fbe:	bf08      	it	eq
 8004fc0:	4613      	moveq	r3, r2
 8004fc2:	881b      	ldrh	r3, [r3, #0]
 8004fc4:	803b      	strh	r3, [r7, #0]
			break;
 8004fc6:	e7a3      	b.n	8004f10 <tag_callback+0x44>
			strcpy(newstring, (agc) ? "1" : "0");		// AGC Status
 8004fc8:	4a23      	ldr	r2, [pc, #140]	; (8005058 <tag_callback+0x18c>)
 8004fca:	4b1d      	ldr	r3, [pc, #116]	; (8005040 <tag_callback+0x174>)
 8004fcc:	8811      	ldrh	r1, [r2, #0]
 8004fce:	4a1a      	ldr	r2, [pc, #104]	; (8005038 <tag_callback+0x16c>)
 8004fd0:	2900      	cmp	r1, #0
 8004fd2:	bf08      	it	eq
 8004fd4:	4613      	moveq	r3, r2
 8004fd6:	881b      	ldrh	r3, [r3, #0]
 8004fd8:	803b      	strh	r3, [r7, #0]
			break;
 8004fda:	e799      	b.n	8004f10 <tag_callback+0x44>
			strcpy(newstring, pressstr);		// pressure
 8004fdc:	491f      	ldr	r1, [pc, #124]	; (800505c <tag_callback+0x190>)
 8004fde:	4638      	mov	r0, r7
 8004fe0:	f01b feef 	bl	8020dc2 <strcpy>
			break;
 8004fe4:	e794      	b.n	8004f10 <tag_callback+0x44>
			strcpy(newstring, tempstr);		// temperature
 8004fe6:	491e      	ldr	r1, [pc, #120]	; (8005060 <tag_callback+0x194>)
 8004fe8:	4638      	mov	r0, r7
 8004fea:	f01b feea 	bl	8020dc2 <strcpy>
			break;
 8004fee:	e78f      	b.n	8004f10 <tag_callback+0x44>
			strcpy(newstring, (pgagain & 1) ? "1" : "0");
 8004ff0:	4a18      	ldr	r2, [pc, #96]	; (8005054 <tag_callback+0x188>)
 8004ff2:	4b13      	ldr	r3, [pc, #76]	; (8005040 <tag_callback+0x174>)
 8004ff4:	8811      	ldrh	r1, [r2, #0]
 8004ff6:	4a10      	ldr	r2, [pc, #64]	; (8005038 <tag_callback+0x16c>)
 8004ff8:	f011 0f01 	tst.w	r1, #1
 8004ffc:	bf08      	it	eq
 8004ffe:	4613      	moveq	r3, r2
 8005000:	881b      	ldrh	r3, [r3, #0]
 8005002:	803b      	strh	r3, [r7, #0]
			break;
 8005004:	e784      	b.n	8004f10 <tag_callback+0x44>
			strcpy(newstring, "5");
 8005006:	4b17      	ldr	r3, [pc, #92]	; (8005064 <tag_callback+0x198>)
 8005008:	881b      	ldrh	r3, [r3, #0]
 800500a:	803b      	strh	r3, [r7, #0]
			break;
 800500c:	e780      	b.n	8004f10 <tag_callback+0x44>
			strcpy(newstring, nowtimestr);
 800500e:	4916      	ldr	r1, [pc, #88]	; (8005068 <tag_callback+0x19c>)
 8005010:	4638      	mov	r0, r7
 8005012:	f01b fed6 	bl	8020dc2 <strcpy>
			break;
 8005016:	e77b      	b.n	8004f10 <tag_callback+0x44>
			sprintf(newstring, "\"ssi_handler: bad tag index %d\"", index);
 8005018:	4632      	mov	r2, r6
 800501a:	4914      	ldr	r1, [pc, #80]	; (800506c <tag_callback+0x1a0>)
 800501c:	4638      	mov	r0, r7
 800501e:	f01b fe2b 	bl	8020c78 <siprintf>
			break;
 8005022:	e775      	b.n	8004f10 <tag_callback+0x44>
 8005024:	40020c00 	.word	0x40020c00
 8005028:	20022f48 	.word	0x20022f48
 800502c:	080263ec 	.word	0x080263ec
 8005030:	2000023c 	.word	0x2000023c
 8005034:	2002347c 	.word	0x2002347c
 8005038:	0803f228 	.word	0x0803f228
 800503c:	08026418 	.word	0x08026418
 8005040:	08025ed8 	.word	0x08025ed8
 8005044:	2000000c 	.word	0x2000000c
 8005048:	200000fc 	.word	0x200000fc
 800504c:	2000007c 	.word	0x2000007c
 8005050:	40021000 	.word	0x40021000
 8005054:	2000023e 	.word	0x2000023e
 8005058:	20000008 	.word	0x20000008
 800505c:	2000006c 	.word	0x2000006c
 8005060:	20000204 	.word	0x20000204
 8005064:	0803d558 	.word	0x0803d558
 8005068:	2000004c 	.word	0x2000004c
 800506c:	080263f8 	.word	0x080263f8

08005070 <returnpage>:
/* ---------------------------------------------- */
// http client
/* ---------------------------------------------- */

// callback with the page
void returnpage(volatile u8_t Num, volatile hc_errormsg errorm, volatile char *content, volatile u16_t charcount) {
 8005070:	b5f0      	push	{r4, r5, r6, r7, lr}
	char *errormsg[] = { "OK", "OUT_MEM", "TIMEOUT", "NOT_FOUND", "GEN_ERROR" };
 8005072:	4d3b      	ldr	r5, [pc, #236]	; (8005160 <returnpage+0xf0>)
void returnpage(volatile u8_t Num, volatile hc_errormsg errorm, volatile char *content, volatile u16_t charcount) {
 8005074:	b08d      	sub	sp, #52	; 0x34
 8005076:	4616      	mov	r6, r2
 8005078:	f88d 000f 	strb.w	r0, [sp, #15]
	char *errormsg[] = { "OK", "OUT_MEM", "TIMEOUT", "NOT_FOUND", "GEN_ERROR" };
 800507c:	ac07      	add	r4, sp, #28
void returnpage(volatile u8_t Num, volatile hc_errormsg errorm, volatile char *content, volatile u16_t charcount) {
 800507e:	f88d 100e 	strb.w	r1, [sp, #14]
 8005082:	f8ad 300c 	strh.w	r3, [sp, #12]
	volatile uint32_t sn;
	int nconv;
	volatile int p1, p2;

	if (errorm == 0) {
 8005086:	f89d 700e 	ldrb.w	r7, [sp, #14]
	char *errormsg[] = { "OK", "OUT_MEM", "TIMEOUT", "NOT_FOUND", "GEN_ERROR" };
 800508a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800508c:	682d      	ldr	r5, [r5, #0]
 800508e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005090:	6025      	str	r5, [r4, #0]
	if (errorm == 0) {
 8005092:	b10f      	cbz	r7, 8005098 <returnpage+0x28>
			}
		} else {
			printf("returnpage: (error returned) Num=%d, errno=%d, error=%s\n", Num, errorm, errormsg[errorm]);
		}
	}
}
 8005094:	b00d      	add	sp, #52	; 0x34
 8005096:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nconv = sscanf(content, "%5u%48s%u%u", &sn, udp_target, &p1, &p2);
 8005098:	aa06      	add	r2, sp, #24
 800509a:	a905      	add	r1, sp, #20
 800509c:	4b31      	ldr	r3, [pc, #196]	; (8005164 <returnpage+0xf4>)
 800509e:	4630      	mov	r0, r6
 80050a0:	9201      	str	r2, [sp, #4]
 80050a2:	aa04      	add	r2, sp, #16
 80050a4:	9100      	str	r1, [sp, #0]
 80050a6:	4930      	ldr	r1, [pc, #192]	; (8005168 <returnpage+0xf8>)
 80050a8:	f01b fe06 	bl	8020cb8 <siscanf>
		if (nconv != EOF) {
 80050ac:	1c43      	adds	r3, r0, #1
 80050ae:	d02a      	beq.n	8005106 <returnpage+0x96>
			switch (nconv) {
 80050b0:	1e43      	subs	r3, r0, #1
 80050b2:	2b03      	cmp	r3, #3
 80050b4:	d836      	bhi.n	8005124 <returnpage+0xb4>
 80050b6:	e8df f003 	tbb	[pc, r3]
 80050ba:	0b15      	.short	0x0b15
 80050bc:	0202      	.short	0x0202
				if (p1 == 1) {		// reboot
 80050be:	9b05      	ldr	r3, [sp, #20]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d043      	beq.n	800514c <returnpage+0xdc>
				if (p1 == 2) {		// freeze the UDP streaming
 80050c4:	9b05      	ldr	r3, [sp, #20]
 80050c6:	2b02      	cmp	r3, #2
					globalfreeze = 1;
 80050c8:	4b28      	ldr	r3, [pc, #160]	; (800516c <returnpage+0xfc>)
				if (p1 == 2) {		// freeze the UDP streaming
 80050ca:	d039      	beq.n	8005140 <returnpage+0xd0>
					globalfreeze = 0;
 80050cc:	2200      	movs	r2, #0
 80050ce:	601a      	str	r2, [r3, #0]
				if (strlen(udp_target) < 7) {					// bad url or ip address
 80050d0:	4c24      	ldr	r4, [pc, #144]	; (8005164 <returnpage+0xf4>)
 80050d2:	4620      	mov	r0, r4
 80050d4:	f7fb f8be 	bl	8000254 <strlen>
 80050d8:	2806      	cmp	r0, #6
 80050da:	d928      	bls.n	800512e <returnpage+0xbe>
				printf("Server -> Target UDP host: %s\n", udp_target);
 80050dc:	4921      	ldr	r1, [pc, #132]	; (8005164 <returnpage+0xf4>)
 80050de:	4824      	ldr	r0, [pc, #144]	; (8005170 <returnpage+0x100>)
 80050e0:	f01b fc72 	bl	80209c8 <iprintf>
				if (statuspkt.uid != sn)
 80050e4:	4b23      	ldr	r3, [pc, #140]	; (8005174 <returnpage+0x104>)
 80050e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80050ea:	9904      	ldr	r1, [sp, #16]
 80050ec:	4291      	cmp	r1, r2
 80050ee:	d0d1      	beq.n	8005094 <returnpage+0x24>
					statuspkt.uid = sn;
 80050f0:	9a04      	ldr	r2, [sp, #16]
					printf("Server -> Serial Number: %lu\n", statuspkt.uid);
 80050f2:	4821      	ldr	r0, [pc, #132]	; (8005178 <returnpage+0x108>)
					statuspkt.uid = sn;
 80050f4:	b292      	uxth	r2, r2
 80050f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
					printf("Server -> Serial Number: %lu\n", statuspkt.uid);
 80050fa:	f8b3 105c 	ldrh.w	r1, [r3, #92]	; 0x5c
 80050fe:	f01b fc63 	bl	80209c8 <iprintf>
}
 8005102:	b00d      	add	sp, #52	; 0x34
 8005104:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printf("returnpage: (error returned) Num=%d, errno=%d, error=%s\n", Num, errorm, errormsg[errorm]);
 8005106:	f89d 100f 	ldrb.w	r1, [sp, #15]
 800510a:	ac0c      	add	r4, sp, #48	; 0x30
 800510c:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8005110:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8005114:	4819      	ldr	r0, [pc, #100]	; (800517c <returnpage+0x10c>)
 8005116:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800511a:	f853 3c14 	ldr.w	r3, [r3, #-20]
 800511e:	f01b fc53 	bl	80209c8 <iprintf>
}
 8005122:	e7b7      	b.n	8005094 <returnpage+0x24>
				printf("Wrong number of params from Server -> %d\n", nconv);
 8005124:	4601      	mov	r1, r0
 8005126:	4816      	ldr	r0, [pc, #88]	; (8005180 <returnpage+0x110>)
 8005128:	f01b fc4e 	bl	80209c8 <iprintf>
				break;
 800512c:	e7b2      	b.n	8005094 <returnpage+0x24>
					strcpy(udp_target, SERVER_DESTINATION);		// default it
 800512e:	4d15      	ldr	r5, [pc, #84]	; (8005184 <returnpage+0x114>)
 8005130:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005132:	6020      	str	r0, [r4, #0]
 8005134:	6828      	ldr	r0, [r5, #0]
 8005136:	6061      	str	r1, [r4, #4]
 8005138:	6120      	str	r0, [r4, #16]
 800513a:	60a2      	str	r2, [r4, #8]
 800513c:	60e3      	str	r3, [r4, #12]
 800513e:	e7cd      	b.n	80050dc <returnpage+0x6c>
					globalfreeze = 1;
 8005140:	2201      	movs	r2, #1
					printf("Server -> commands a streaming freeze\n");
 8005142:	4811      	ldr	r0, [pc, #68]	; (8005188 <returnpage+0x118>)
					globalfreeze = 1;
 8005144:	601a      	str	r2, [r3, #0]
					printf("Server -> commands a streaming freeze\n");
 8005146:	f01b fcc7 	bl	8020ad8 <puts>
 800514a:	e7c1      	b.n	80050d0 <returnpage+0x60>
					printf("Server -> commands a reboot...\n");
 800514c:	480f      	ldr	r0, [pc, #60]	; (800518c <returnpage+0x11c>)
 800514e:	f01b fcc3 	bl	8020ad8 <puts>
					osDelay(2000);
 8005152:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005156:	f00b fec7 	bl	8010ee8 <osDelay>
					rebootme();
 800515a:	f7fc fd99 	bl	8001c90 <rebootme>
 800515e:	e7b1      	b.n	80050c4 <returnpage+0x54>
 8005160:	080248a0 	.word	0x080248a0
 8005164:	20023438 	.word	0x20023438
 8005168:	08026224 	.word	0x08026224
 800516c:	20023430 	.word	0x20023430
 8005170:	0802628c 	.word	0x0802628c
 8005174:	20022774 	.word	0x20022774
 8005178:	080262ac 	.word	0x080262ac
 800517c:	080262f8 	.word	0x080262f8
 8005180:	080262cc 	.word	0x080262cc
 8005184:	08026278 	.word	0x08026278
 8005188:	08026250 	.word	0x08026250
 800518c:	08026230 	.word	0x08026230

08005190 <httpd_cgi_handler>:
		char **http_cgi_param_vals) {
 8005190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005194:	b085      	sub	sp, #20
 8005196:	4616      	mov	r6, r2
 8005198:	460c      	mov	r4, r1
	j = strtol(*http_cgi_params, &ptr, 10);		// allow two chars len for the number
 800519a:	6818      	ldr	r0, [r3, #0]
 800519c:	a903      	add	r1, sp, #12
 800519e:	220a      	movs	r2, #10
		char **http_cgi_param_vals) {
 80051a0:	469a      	mov	sl, r3
 80051a2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	j = strtol(*http_cgi_params, &ptr, 10);		// allow two chars len for the number
 80051a4:	f01c fc40 	bl	8021a28 <strtol>
	printf("httpd_cgi_handler: uri=%s, count=%d j=%d\n", uri, count, j);
 80051a8:	4632      	mov	r2, r6
 80051aa:	4603      	mov	r3, r0
	j = strtol(*http_cgi_params, &ptr, 10);		// allow two chars len for the number
 80051ac:	4605      	mov	r5, r0
	printf("httpd_cgi_handler: uri=%s, count=%d j=%d\n", uri, count, j);
 80051ae:	4621      	mov	r1, r4
 80051b0:	4869      	ldr	r0, [pc, #420]	; (8005358 <httpd_cgi_handler+0x1c8>)
 80051b2:	f01b fc09 	bl	80209c8 <iprintf>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80051b6:	2e00      	cmp	r6, #0
 80051b8:	dd3c      	ble.n	8005234 <httpd_cgi_handler+0xa4>
 80051ba:	2400      	movs	r4, #0
			printf("Unknown id in cgi handler %s\n", *http_cgi_params);
 80051bc:	f8df b1c8 	ldr.w	fp, [pc, #456]	; 8005388 <httpd_cgi_handler+0x1f8>
 80051c0:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 800538c <httpd_cgi_handler+0x1fc>
 80051c4:	f1a5 010c 	sub.w	r1, r5, #12
 80051c8:	2201      	movs	r2, #1
		switch (j) {
 80051ca:	f1a5 030a 	sub.w	r3, r5, #10
			j -= 11;	// now offset 0
 80051ce:	f1a5 080b 	sub.w	r8, r5, #11
 80051d2:	408a      	lsls	r2, r1
		switch (j) {
 80051d4:	2b0e      	cmp	r3, #14
 80051d6:	d830      	bhi.n	800523a <httpd_cgi_handler+0xaa>
 80051d8:	e8df f003 	tbb	[pc, r3]
 80051dc:	080894a3 	.word	0x080894a3
 80051e0:	08080808 	.word	0x08080808
 80051e4:	4b5d0808 	.word	0x4b5d0808
 80051e8:	7f39      	.short	0x7f39
 80051ea:	6f          	.byte	0x6f
 80051eb:	00          	.byte	0x00
			if (((*http_cgi_param_vals)[i]) == '0') {
 80051ec:	6839      	ldr	r1, [r7, #0]
 80051ee:	b252      	sxtb	r2, r2
 80051f0:	f999 3000 	ldrsb.w	r3, [r9]
			j -= 11;	// now offset 0
 80051f4:	4645      	mov	r5, r8
			if (((*http_cgi_param_vals)[i]) == '0') {
 80051f6:	5d08      	ldrb	r0, [r1, r4]
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 80051f8:	ea42 0103 	orr.w	r1, r2, r3
			if (((*http_cgi_param_vals)[i]) == '0') {
 80051fc:	2830      	cmp	r0, #48	; 0x30
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 80051fe:	4857      	ldr	r0, [pc, #348]	; (800535c <httpd_cgi_handler+0x1cc>)
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 8005200:	b2c9      	uxtb	r1, r1
				muxdat[0] = muxdat[0] & ~(1 << (j - 1));
 8005202:	bf04      	itt	eq
 8005204:	ea23 0202 	biceq.w	r2, r3, r2
 8005208:	b2d1      	uxtbeq	r1, r2
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 800520a:	4a55      	ldr	r2, [pc, #340]	; (8005360 <httpd_cgi_handler+0x1d0>)
 800520c:	f001 0302 	and.w	r3, r1, #2
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 8005210:	f889 1000 	strb.w	r1, [r9]
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 8005214:	6013      	str	r3, [r2, #0]
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 8005216:	f01b fbd7 	bl	80209c8 <iprintf>
			if (HAL_I2C_Master_Transmit(&hi2c1, 0x44 << 1, &muxdat[0], 1, 1000) != HAL_OK) {		// RF dual MUX
 800521a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800521e:	2301      	movs	r3, #1
 8005220:	464a      	mov	r2, r9
 8005222:	2188      	movs	r1, #136	; 0x88
 8005224:	9000      	str	r0, [sp, #0]
 8005226:	484f      	ldr	r0, [pc, #316]	; (8005364 <httpd_cgi_handler+0x1d4>)
 8005228:	f003 fd92 	bl	8008d50 <HAL_I2C_Master_Transmit>
 800522c:	b958      	cbnz	r0, 8005246 <httpd_cgi_handler+0xb6>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 800522e:	3401      	adds	r4, #1
 8005230:	42a6      	cmp	r6, r4
 8005232:	d1c7      	bne.n	80051c4 <httpd_cgi_handler+0x34>
}
 8005234:	b005      	add	sp, #20
 8005236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			printf("Unknown id in cgi handler %s\n", *http_cgi_params);
 800523a:	f8da 1000 	ldr.w	r1, [sl]
 800523e:	4658      	mov	r0, fp
 8005240:	f01b fbc2 	bl	80209c8 <iprintf>
			break;
 8005244:	e7f3      	b.n	800522e <httpd_cgi_handler+0x9e>
				printf("I2C HAL returned error 1\n\r");
 8005246:	4848      	ldr	r0, [pc, #288]	; (8005368 <httpd_cgi_handler+0x1d8>)
 8005248:	f01b fbbe 	bl	80209c8 <iprintf>
 800524c:	e7ef      	b.n	800522e <httpd_cgi_handler+0x9e>
 800524e:	4d47      	ldr	r5, [pc, #284]	; (800536c <httpd_cgi_handler+0x1dc>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~1 : pgagain | 1);
 8005250:	683a      	ldr	r2, [r7, #0]
 8005252:	882b      	ldrh	r3, [r5, #0]
 8005254:	5d12      	ldrb	r2, [r2, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8005256:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~1 : pgagain | 1);
 8005258:	f043 0001 	orr.w	r0, r3, #1
 800525c:	2a30      	cmp	r2, #48	; 0x30
 800525e:	bf08      	it	eq
 8005260:	f023 0001 	biceq.w	r0, r3, #1
			setpgagain(val);
 8005264:	f7fd fff4 	bl	8003250 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8005268:	42a6      	cmp	r6, r4
 800526a:	dcf1      	bgt.n	8005250 <httpd_cgi_handler+0xc0>
}
 800526c:	b005      	add	sp, #20
 800526e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005272:	4d3e      	ldr	r5, [pc, #248]	; (800536c <httpd_cgi_handler+0x1dc>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~2 : pgagain | 2);
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	882b      	ldrh	r3, [r5, #0]
 8005278:	5d12      	ldrb	r2, [r2, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 800527a:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~2 : pgagain | 2);
 800527c:	f043 0002 	orr.w	r0, r3, #2
 8005280:	2a30      	cmp	r2, #48	; 0x30
 8005282:	bf08      	it	eq
 8005284:	f023 0002 	biceq.w	r0, r3, #2
			setpgagain(val);
 8005288:	f7fd ffe2 	bl	8003250 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 800528c:	42a6      	cmp	r6, r4
 800528e:	dcf1      	bgt.n	8005274 <httpd_cgi_handler+0xe4>
}
 8005290:	b005      	add	sp, #20
 8005292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005296:	4d35      	ldr	r5, [pc, #212]	; (800536c <httpd_cgi_handler+0x1dc>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~4 : pgagain | 4);
 8005298:	683a      	ldr	r2, [r7, #0]
 800529a:	882b      	ldrh	r3, [r5, #0]
 800529c:	5d12      	ldrb	r2, [r2, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 800529e:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~4 : pgagain | 4);
 80052a0:	f043 0004 	orr.w	r0, r3, #4
 80052a4:	2a30      	cmp	r2, #48	; 0x30
 80052a6:	bf08      	it	eq
 80052a8:	f023 0004 	biceq.w	r0, r3, #4
			setpgagain(val);
 80052ac:	f7fd ffd0 	bl	8003250 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80052b0:	42a6      	cmp	r6, r4
 80052b2:	dcf1      	bgt.n	8005298 <httpd_cgi_handler+0x108>
}
 80052b4:	b005      	add	sp, #20
 80052b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	1e62      	subs	r2, r4, #1
 80052be:	492c      	ldr	r1, [pc, #176]	; (8005370 <httpd_cgi_handler+0x1e0>)
 80052c0:	441a      	add	r2, r3
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 80052c2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80052c6:	3401      	adds	r4, #1
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 80052c8:	3b30      	subs	r3, #48	; 0x30
 80052ca:	bf18      	it	ne
 80052cc:	2301      	movne	r3, #1
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80052ce:	42a6      	cmp	r6, r4
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 80052d0:	800b      	strh	r3, [r1, #0]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80052d2:	dcf6      	bgt.n	80052c2 <httpd_cgi_handler+0x132>
}
 80052d4:	b005      	add	sp, #20
 80052d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_SET);		// select RF Switches to bypass LP filter
 80052da:	4d26      	ldr	r5, [pc, #152]	; (8005374 <httpd_cgi_handler+0x1e4>)
			if (((*http_cgi_param_vals)[i]) == '1')
 80052dc:	683b      	ldr	r3, [r7, #0]
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_SET);		// select RF Switches to bypass LP filter
 80052de:	2201      	movs	r2, #1
 80052e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80052e4:	4628      	mov	r0, r5
			if (((*http_cgi_param_vals)[i]) == '1')
 80052e6:	5d1b      	ldrb	r3, [r3, r4]
 80052e8:	4414      	add	r4, r2
 80052ea:	2b31      	cmp	r3, #49	; 0x31
 80052ec:	d004      	beq.n	80052f8 <httpd_cgi_handler+0x168>
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_SET);		// select RF Switches to bypass LP filter
 80052ee:	f003 fab3 	bl	8008858 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80052f2:	42a6      	cmp	r6, r4
 80052f4:	dcf2      	bgt.n	80052dc <httpd_cgi_handler+0x14c>
 80052f6:	e79d      	b.n	8005234 <httpd_cgi_handler+0xa4>
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_RESET);// select RF Switches to LP filter (normal route)
 80052f8:	2200      	movs	r2, #0
 80052fa:	f003 faad 	bl	8008858 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80052fe:	42a6      	cmp	r6, r4
 8005300:	dcec      	bgt.n	80052dc <httpd_cgi_handler+0x14c>
 8005302:	e797      	b.n	8005234 <httpd_cgi_handler+0xa4>
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_SET);
 8005304:	4d1c      	ldr	r5, [pc, #112]	; (8005378 <httpd_cgi_handler+0x1e8>)
			if (((*http_cgi_param_vals)[i]) == '0')
 8005306:	683b      	ldr	r3, [r7, #0]
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_SET);
 8005308:	2201      	movs	r2, #1
 800530a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800530e:	4628      	mov	r0, r5
			if (((*http_cgi_param_vals)[i]) == '0')
 8005310:	5d1b      	ldrb	r3, [r3, r4]
 8005312:	4414      	add	r4, r2
 8005314:	2b30      	cmp	r3, #48	; 0x30
 8005316:	d018      	beq.n	800534a <httpd_cgi_handler+0x1ba>
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_SET);
 8005318:	f003 fa9e 	bl	8008858 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 800531c:	42a6      	cmp	r6, r4
 800531e:	dcf2      	bgt.n	8005306 <httpd_cgi_handler+0x176>
 8005320:	e788      	b.n	8005234 <httpd_cgi_handler+0xa4>
			printf("Reboot command from wwww\n");
 8005322:	4816      	ldr	r0, [pc, #88]	; (800537c <httpd_cgi_handler+0x1ec>)
 8005324:	f01b fbd8 	bl	8020ad8 <puts>
			osDelay(1000);
 8005328:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800532c:	f00b fddc 	bl	8010ee8 <osDelay>
 8005330:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005334:	4912      	ldr	r1, [pc, #72]	; (8005380 <httpd_cgi_handler+0x1f0>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005336:	4b13      	ldr	r3, [pc, #76]	; (8005384 <httpd_cgi_handler+0x1f4>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005338:	68ca      	ldr	r2, [r1, #12]
 800533a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800533e:	4313      	orrs	r3, r2
 8005340:	60cb      	str	r3, [r1, #12]
 8005342:	f3bf 8f4f 	dsb	sy
    __NOP();
 8005346:	bf00      	nop
 8005348:	e7fd      	b.n	8005346 <httpd_cgi_handler+0x1b6>
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_RESET);
 800534a:	2200      	movs	r2, #0
 800534c:	f003 fa84 	bl	8008858 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8005350:	42a6      	cmp	r6, r4
 8005352:	dcd8      	bgt.n	8005306 <httpd_cgi_handler+0x176>
 8005354:	e76e      	b.n	8005234 <httpd_cgi_handler+0xa4>
 8005356:	bf00      	nop
 8005358:	080260d8 	.word	0x080260d8
 800535c:	08026120 	.word	0x08026120
 8005360:	20001678 	.word	0x20001678
 8005364:	20022ad0 	.word	0x20022ad0
 8005368:	08025c74 	.word	0x08025c74
 800536c:	2000023e 	.word	0x2000023e
 8005370:	20000008 	.word	0x20000008
 8005374:	40021000 	.word	0x40021000
 8005378:	40020c00 	.word	0x40020c00
 800537c:	08026104 	.word	0x08026104
 8005380:	e000ed00 	.word	0xe000ed00
 8005384:	05fa0004 	.word	0x05fa0004
 8005388:	0802613c 	.word	0x0802613c
 800538c:	2000023c 	.word	0x2000023c

08005390 <httpd_post_receive_data>:
err_t httpd_post_receive_data(void *connection, struct pbuf *p) {
 8005390:	b508      	push	{r3, lr}
	printf("httpd_post_receive_data: \n");
 8005392:	4802      	ldr	r0, [pc, #8]	; (800539c <httpd_post_receive_data+0xc>)
 8005394:	f01b fba0 	bl	8020ad8 <puts>
}
 8005398:	2000      	movs	r0, #0
 800539a:	bd08      	pop	{r3, pc}
 800539c:	08026188 	.word	0x08026188

080053a0 <httpd_post_begin>:
		int content_len, char *response_uri, u16_t response_uri_len, u8_t *post_auto_wnd) {
 80053a0:	b508      	push	{r3, lr}
	printf("httpd_post_begin: \n");
 80053a2:	4802      	ldr	r0, [pc, #8]	; (80053ac <httpd_post_begin+0xc>)
 80053a4:	f01b fb98 	bl	8020ad8 <puts>
}
 80053a8:	2000      	movs	r0, #0
 80053aa:	bd08      	pop	{r3, pc}
 80053ac:	0802615c 	.word	0x0802615c

080053b0 <httpd_post_finished>:
	printf("httpd_post_finished: \n");
 80053b0:	4801      	ldr	r0, [pc, #4]	; (80053b8 <httpd_post_finished+0x8>)
 80053b2:	f01b bb91 	b.w	8020ad8 <puts>
 80053b6:	bf00      	nop
 80053b8:	08026170 	.word	0x08026170

080053bc <init_httpd_ssi>:
	http_set_ssi_handler(tag_callback, tagname, 21);	// was 32
 80053bc:	4803      	ldr	r0, [pc, #12]	; (80053cc <init_httpd_ssi+0x10>)
 80053be:	2215      	movs	r2, #21
 80053c0:	4903      	ldr	r1, [pc, #12]	; (80053d0 <init_httpd_ssi+0x14>)
init_httpd_ssi() {
 80053c2:	b508      	push	{r3, lr}
	http_set_ssi_handler(tag_callback, tagname, 21);	// was 32
 80053c4:	f00f fb02 	bl	80149cc <http_set_ssi_handler>
}
 80053c8:	bd08      	pop	{r3, pc}
 80053ca:	bf00      	nop
 80053cc:	08004ecd 	.word	0x08004ecd
 80053d0:	20000248 	.word	0x20000248

080053d4 <httpclient>:

void httpclient(char Page[64]) {
 80053d4:	b570      	push	{r4, r5, r6, lr}
	uint32_t ip;
	int err;

	static char *Postvars = NULL;

	err = dnslookup(SERVER_DESTINATION, &remoteip);		// find serial number and udp target IP address
 80053d6:	4910      	ldr	r1, [pc, #64]	; (8005418 <httpclient+0x44>)
void httpclient(char Page[64]) {
 80053d8:	b084      	sub	sp, #16
 80053da:	4605      	mov	r5, r0
	err = dnslookup(SERVER_DESTINATION, &remoteip);		// find serial number and udp target IP address
 80053dc:	480f      	ldr	r0, [pc, #60]	; (800541c <httpclient+0x48>)
 80053de:	f7ff fbfd 	bl	8004bdc <dnslookup>
	if (err != ERR_OK)
 80053e2:	b108      	cbz	r0, 80053e8 <httpclient+0x14>
		rebootme();
 80053e4:	f7fc fc54 	bl	8001c90 <rebootme>
	ip = remoteip.addr;
 80053e8:	4c0b      	ldr	r4, [pc, #44]	; (8005418 <httpclient+0x44>)
	printf("\n%s Control Server IP: %lu.%lu.%lu.%lu\n", SERVER_DESTINATION, ip & 0xff, (ip & 0xff00) >> 8,
 80053ea:	490c      	ldr	r1, [pc, #48]	; (800541c <httpclient+0x48>)
	ip = remoteip.addr;
 80053ec:	6822      	ldr	r2, [r4, #0]
	printf("\n%s Control Server IP: %lu.%lu.%lu.%lu\n", SERVER_DESTINATION, ip & 0xff, (ip & 0xff00) >> 8,
 80053ee:	480c      	ldr	r0, [pc, #48]	; (8005420 <httpclient+0x4c>)
 80053f0:	0e13      	lsrs	r3, r2, #24
 80053f2:	f3c2 4607 	ubfx	r6, r2, #16, #8
 80053f6:	9301      	str	r3, [sp, #4]
 80053f8:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80053fc:	9600      	str	r6, [sp, #0]
 80053fe:	b2d2      	uxtb	r2, r2
 8005400:	f01b fae2 	bl	80209c8 <iprintf>
			(ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);

	result = hc_open(remoteip, Page, Postvars, returnpage);
 8005404:	4629      	mov	r1, r5
 8005406:	4b07      	ldr	r3, [pc, #28]	; (8005424 <httpclient+0x50>)
 8005408:	2200      	movs	r2, #0
 800540a:	6820      	ldr	r0, [r4, #0]
 800540c:	f7fb fd5a 	bl	8000ec4 <hc_open>
 8005410:	9003      	str	r0, [sp, #12]
//	printf("result=%d\n", result);

}
 8005412:	b004      	add	sp, #16
 8005414:	bd70      	pop	{r4, r5, r6, pc}
 8005416:	bf00      	nop
 8005418:	20001698 	.word	0x20001698
 800541c:	08026278 	.word	0x08026278
 8005420:	080260b0 	.word	0x080260b0
 8005424:	08005071 	.word	0x08005071

08005428 <apisn>:

void apisn() {
	sprintf(stmuid, "api/Device/%lx%lx%lx", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
 8005428:	4909      	ldr	r1, [pc, #36]	; (8005450 <apisn+0x28>)
 800542a:	4b0a      	ldr	r3, [pc, #40]	; (8005454 <apisn+0x2c>)
 800542c:	6809      	ldr	r1, [r1, #0]
 800542e:	4a0a      	ldr	r2, [pc, #40]	; (8005458 <apisn+0x30>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	6812      	ldr	r2, [r2, #0]
void apisn() {
 8005434:	b510      	push	{r4, lr}
	sprintf(stmuid, "api/Device/%lx%lx%lx", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
 8005436:	4c09      	ldr	r4, [pc, #36]	; (800545c <apisn+0x34>)
void apisn() {
 8005438:	b082      	sub	sp, #8
	sprintf(stmuid, "api/Device/%lx%lx%lx", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
 800543a:	4620      	mov	r0, r4
 800543c:	9100      	str	r1, [sp, #0]
 800543e:	4908      	ldr	r1, [pc, #32]	; (8005460 <apisn+0x38>)
 8005440:	f01b fc1a 	bl	8020c78 <siprintf>
	httpclient(stmuid);		// get sn and targ
 8005444:	4620      	mov	r0, r4
}
 8005446:	b002      	add	sp, #8
 8005448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	httpclient(stmuid);		// get sn and targ
 800544c:	f7ff bfc2 	b.w	80053d4 <httpclient>
 8005450:	1ff0f428 	.word	0x1ff0f428
 8005454:	1ff0f424 	.word	0x1ff0f424
 8005458:	1ff0f420 	.word	0x1ff0f420
 800545c:	2000169c 	.word	0x2000169c
 8005460:	08026098 	.word	0x08026098

08005464 <initialapisn>:

// get the serial number and udp target for this device
// reboot if fails
void initialapisn() {
 8005464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	i = 1;
 8005468:	2401      	movs	r4, #1
 800546a:	4f13      	ldr	r7, [pc, #76]	; (80054b8 <initialapisn+0x54>)
	while (statuspkt.uid == BUILDNO)		// not yet found new S/N from server
 800546c:	f242 7616 	movw	r6, #10006	; 0x2716
	{
		printf("getting S/N and UDP target using http. Try=%d\n", i);
 8005470:	4d12      	ldr	r5, [pc, #72]	; (80054bc <initialapisn+0x58>)
		apisn();
		osDelay(5000);

		i++;
		if (i > 10) {
			printf("************* ABORTED **************\n");
 8005472:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80054c0 <initialapisn+0x5c>
	while (statuspkt.uid == BUILDNO)		// not yet found new S/N from server
 8005476:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
		printf("getting S/N and UDP target using http. Try=%d\n", i);
 800547a:	4621      	mov	r1, r4
 800547c:	4628      	mov	r0, r5
		i++;
 800547e:	3401      	adds	r4, #1
	while (statuspkt.uid == BUILDNO)		// not yet found new S/N from server
 8005480:	429e      	cmp	r6, r3
 8005482:	d116      	bne.n	80054b2 <initialapisn+0x4e>
		printf("getting S/N and UDP target using http. Try=%d\n", i);
 8005484:	f01b faa0 	bl	80209c8 <iprintf>
		apisn();
 8005488:	f7ff ffce 	bl	8005428 <apisn>
		osDelay(5000);
 800548c:	f241 3088 	movw	r0, #5000	; 0x1388
 8005490:	f00b fd2a 	bl	8010ee8 <osDelay>
		if (i > 10) {
 8005494:	2c0a      	cmp	r4, #10
 8005496:	ddee      	ble.n	8005476 <initialapisn+0x12>
			printf("************* ABORTED **************\n");
 8005498:	4640      	mov	r0, r8
 800549a:	f01b fb1d 	bl	8020ad8 <puts>
			rebootme();
 800549e:	f7fc fbf7 	bl	8001c90 <rebootme>
	while (statuspkt.uid == BUILDNO)		// not yet found new S/N from server
 80054a2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
		printf("getting S/N and UDP target using http. Try=%d\n", i);
 80054a6:	4621      	mov	r1, r4
 80054a8:	4628      	mov	r0, r5
	while (statuspkt.uid == BUILDNO)		// not yet found new S/N from server
 80054aa:	429e      	cmp	r6, r3
		i++;
 80054ac:	f104 0401 	add.w	r4, r4, #1
	while (statuspkt.uid == BUILDNO)		// not yet found new S/N from server
 80054b0:	d0e8      	beq.n	8005484 <initialapisn+0x20>
		}
	}
}
 80054b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054b6:	bf00      	nop
 80054b8:	20022774 	.word	0x20022774
 80054bc:	080261a4 	.word	0x080261a4
 80054c0:	080261d4 	.word	0x080261d4

080054c4 <requestapisn>:

void requestapisn() {
 80054c4:	b508      	push	{r3, lr}
	printf("updating S/N and UDP target using http\n");
 80054c6:	4804      	ldr	r0, [pc, #16]	; (80054d8 <requestapisn+0x14>)
 80054c8:	f01b fb06 	bl	8020ad8 <puts>
	httpclient(stmuid);		// get sn and targ
 80054cc:	4803      	ldr	r0, [pc, #12]	; (80054dc <requestapisn+0x18>)
}
 80054ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	httpclient(stmuid);		// get sn and targ
 80054d2:	f7ff bf7f 	b.w	80053d4 <httpclient>
 80054d6:	bf00      	nop
 80054d8:	080261fc 	.word	0x080261fc
 80054dc:	2000169c 	.word	0x2000169c

080054e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80054e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005518 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80054e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80054e6:	e003      	b.n	80054f0 <LoopCopyDataInit>

080054e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80054e8:	4b0c      	ldr	r3, [pc, #48]	; (800551c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80054ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80054ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80054ee:	3104      	adds	r1, #4

080054f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80054f0:	480b      	ldr	r0, [pc, #44]	; (8005520 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80054f2:	4b0c      	ldr	r3, [pc, #48]	; (8005524 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80054f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80054f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80054f8:	d3f6      	bcc.n	80054e8 <CopyDataInit>
  ldr  r2, =_sbss
 80054fa:	4a0b      	ldr	r2, [pc, #44]	; (8005528 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80054fc:	e002      	b.n	8005504 <LoopFillZerobss>

080054fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80054fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005500:	f842 3b04 	str.w	r3, [r2], #4

08005504 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005504:	4b09      	ldr	r3, [pc, #36]	; (800552c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005506:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005508:	d3f9      	bcc.n	80054fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800550a:	f7ff fa59 	bl	80049c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800550e:	f01a f951 	bl	801f7b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005512:	f7fc fd25 	bl	8001f60 <main>
  bx  lr    
 8005516:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005518:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800551c:	0803ffa8 	.word	0x0803ffa8
  ldr  r0, =_sdata
 8005520:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005524:	20000680 	.word	0x20000680
  ldr  r2, =_sbss
 8005528:	20000680 	.word	0x20000680
  ldr  r3, = _ebss
 800552c:	20037b9c 	.word	0x20037b9c

08005530 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005530:	e7fe      	b.n	8005530 <CAN1_RX0_IRQHandler>
	...

08005534 <HAL_Init>:
   __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005534:	4a07      	ldr	r2, [pc, #28]	; (8005554 <HAL_Init+0x20>)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005536:	2003      	movs	r0, #3
{
 8005538:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800553a:	6813      	ldr	r3, [r2, #0]
 800553c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005540:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005542:	f000 fc59 	bl	8005df8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005546:	2000      	movs	r0, #0
 8005548:	f7ff f922 	bl	8004790 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800554c:	f7fe fa7e 	bl	8003a4c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8005550:	2000      	movs	r0, #0
 8005552:	bd08      	pop	{r3, pc}
 8005554:	40023c00 	.word	0x40023c00

08005558 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8005558:	4a03      	ldr	r2, [pc, #12]	; (8005568 <HAL_IncTick+0x10>)
 800555a:	4b04      	ldr	r3, [pc, #16]	; (800556c <HAL_IncTick+0x14>)
 800555c:	6811      	ldr	r1, [r2, #0]
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	440b      	add	r3, r1
 8005562:	6013      	str	r3, [r2, #0]
}
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	20023480 	.word	0x20023480
 800556c:	200002a0 	.word	0x200002a0

08005570 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005570:	4b01      	ldr	r3, [pc, #4]	; (8005578 <HAL_GetTick+0x8>)
 8005572:	6818      	ldr	r0, [r3, #0]
}
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	20023480 	.word	0x20023480

0800557c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800557c:	b538      	push	{r3, r4, r5, lr}
 800557e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005580:	f7ff fff6 	bl	8005570 <HAL_GetTick>
 8005584:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005586:	1c63      	adds	r3, r4, #1
 8005588:	d002      	beq.n	8005590 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800558a:	4b04      	ldr	r3, [pc, #16]	; (800559c <HAL_Delay+0x20>)
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005590:	f7ff ffee 	bl	8005570 <HAL_GetTick>
 8005594:	1b40      	subs	r0, r0, r5
 8005596:	42a0      	cmp	r0, r4
 8005598:	d3fa      	bcc.n	8005590 <HAL_Delay+0x14>
  {
  }
}
 800559a:	bd38      	pop	{r3, r4, r5, pc}
 800559c:	200002a0 	.word	0x200002a0

080055a0 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80055a0:	2800      	cmp	r0, #0
 80055a2:	f000 813f 	beq.w	8005824 <HAL_ADC_Init+0x284>
  {
    return HAL_ERROR;
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80055a6:	49b2      	ldr	r1, [pc, #712]	; (8005870 <HAL_ADC_Init+0x2d0>)
 80055a8:	4ab2      	ldr	r2, [pc, #712]	; (8005874 <HAL_ADC_Init+0x2d4>)
{
 80055aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80055ac:	6803      	ldr	r3, [r0, #0]
 80055ae:	4604      	mov	r4, r0
 80055b0:	428b      	cmp	r3, r1
 80055b2:	bf18      	it	ne
 80055b4:	4293      	cmpne	r3, r2
 80055b6:	d004      	beq.n	80055c2 <HAL_ADC_Init+0x22>
 80055b8:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80055bc:	4293      	cmp	r3, r2
 80055be:	f040 8133 	bne.w	8005828 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 80055c2:	6863      	ldr	r3, [r4, #4]
 80055c4:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 80055c8:	f040 8138 	bne.w	800583c <HAL_ADC_Init+0x29c>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80055cc:	68a3      	ldr	r3, [r4, #8]
 80055ce:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 80055d2:	f040 813d 	bne.w	8005850 <HAL_ADC_Init+0x2b0>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 80055d6:	6923      	ldr	r3, [r4, #16]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d861      	bhi.n	80056a0 <HAL_ADC_Init+0x100>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80055dc:	69a3      	ldr	r3, [r4, #24]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d858      	bhi.n	8005694 <HAL_ADC_Init+0xf4>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 80055e2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80055e4:	f022 7140 	bic.w	r1, r2, #50331648	; 0x3000000
 80055e8:	f022 7080 	bic.w	r0, r2, #16777216	; 0x1000000
 80055ec:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80055f0:	bf18      	it	ne
 80055f2:	2900      	cmpne	r1, #0
 80055f4:	bf14      	ite	ne
 80055f6:	2301      	movne	r3, #1
 80055f8:	2300      	moveq	r3, #0
 80055fa:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 80055fe:	bf0c      	ite	eq
 8005600:	2300      	moveq	r3, #0
 8005602:	f003 0301 	andne.w	r3, r3, #1
 8005606:	f1b0 6f40 	cmp.w	r0, #201326592	; 0xc000000
 800560a:	bf0c      	ite	eq
 800560c:	2300      	moveq	r3, #0
 800560e:	f003 0301 	andne.w	r3, r3, #1
 8005612:	b123      	cbz	r3, 800561e <HAL_ADC_Init+0x7e>
 8005614:	f102 4271 	add.w	r2, r2, #4043309056	; 0xf1000000
 8005618:	2a01      	cmp	r2, #1
 800561a:	f200 8140 	bhi.w	800589e <HAL_ADC_Init+0x2fe>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 800561e:	68e3      	ldr	r3, [r4, #12]
 8005620:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8005624:	d159      	bne.n	80056da <HAL_ADC_Init+0x13a>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8005626:	69e3      	ldr	r3, [r4, #28]
 8005628:	3b01      	subs	r3, #1
 800562a:	2b0f      	cmp	r3, #15
 800562c:	d84b      	bhi.n	80056c6 <HAL_ADC_Init+0x126>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 800562e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8005632:	2b01      	cmp	r3, #1
 8005634:	d825      	bhi.n	8005682 <HAL_ADC_Init+0xe2>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8005636:	6963      	ldr	r3, [r4, #20]
 8005638:	2b02      	cmp	r3, #2
 800563a:	d83a      	bhi.n	80056b2 <HAL_ADC_Init+0x112>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800563c:	f894 3020 	ldrb.w	r3, [r4, #32]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d814      	bhi.n	800566e <HAL_ADC_Init+0xce>

  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005644:	4b8c      	ldr	r3, [pc, #560]	; (8005878 <HAL_ADC_Init+0x2d8>)
 8005646:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005648:	429a      	cmp	r2, r3
 800564a:	d004      	beq.n	8005656 <HAL_ADC_Init+0xb6>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 800564c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800564e:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 8005652:	f040 8119 	bne.w	8005888 <HAL_ADC_Init+0x2e8>
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8005656:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8005658:	2d00      	cmp	r5, #0
 800565a:	f000 80d8 	beq.w	800580e <HAL_ADC_Init+0x26e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800565e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005660:	06db      	lsls	r3, r3, #27
 8005662:	d544      	bpl.n	80056ee <HAL_ADC_Init+0x14e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005664:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 8005666:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8005668:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 800566c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800566e:	f240 1157 	movw	r1, #343	; 0x157
 8005672:	4882      	ldr	r0, [pc, #520]	; (800587c <HAL_ADC_Init+0x2dc>)
 8005674:	f7fd fbd6 	bl	8002e24 <assert_failed>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005678:	4b7f      	ldr	r3, [pc, #508]	; (8005878 <HAL_ADC_Init+0x2d8>)
 800567a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800567c:	429a      	cmp	r2, r3
 800567e:	d1e5      	bne.n	800564c <HAL_ADC_Init+0xac>
 8005680:	e7e9      	b.n	8005656 <HAL_ADC_Init+0xb6>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8005682:	f240 1155 	movw	r1, #341	; 0x155
 8005686:	487d      	ldr	r0, [pc, #500]	; (800587c <HAL_ADC_Init+0x2dc>)
 8005688:	f7fd fbcc 	bl	8002e24 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 800568c:	6963      	ldr	r3, [r4, #20]
 800568e:	2b02      	cmp	r3, #2
 8005690:	d9d4      	bls.n	800563c <HAL_ADC_Init+0x9c>
 8005692:	e00e      	b.n	80056b2 <HAL_ADC_Init+0x112>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8005694:	f240 1151 	movw	r1, #337	; 0x151
 8005698:	4878      	ldr	r0, [pc, #480]	; (800587c <HAL_ADC_Init+0x2dc>)
 800569a:	f7fd fbc3 	bl	8002e24 <assert_failed>
 800569e:	e7a0      	b.n	80055e2 <HAL_ADC_Init+0x42>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 80056a0:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80056a4:	4875      	ldr	r0, [pc, #468]	; (800587c <HAL_ADC_Init+0x2dc>)
 80056a6:	f7fd fbbd 	bl	8002e24 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80056aa:	69a3      	ldr	r3, [r4, #24]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d998      	bls.n	80055e2 <HAL_ADC_Init+0x42>
 80056b0:	e7f0      	b.n	8005694 <HAL_ADC_Init+0xf4>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80056b2:	f44f 71ab 	mov.w	r1, #342	; 0x156
 80056b6:	4871      	ldr	r0, [pc, #452]	; (800587c <HAL_ADC_Init+0x2dc>)
 80056b8:	f7fd fbb4 	bl	8002e24 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80056bc:	f894 3020 	ldrb.w	r3, [r4, #32]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d9bf      	bls.n	8005644 <HAL_ADC_Init+0xa4>
 80056c4:	e7d3      	b.n	800566e <HAL_ADC_Init+0xce>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80056c6:	f44f 71aa 	mov.w	r1, #340	; 0x154
 80056ca:	486c      	ldr	r0, [pc, #432]	; (800587c <HAL_ADC_Init+0x2dc>)
 80056cc:	f7fd fbaa 	bl	8002e24 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80056d0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d9ae      	bls.n	8005636 <HAL_ADC_Init+0x96>
 80056d8:	e7d3      	b.n	8005682 <HAL_ADC_Init+0xe2>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 80056da:	f240 1153 	movw	r1, #339	; 0x153
 80056de:	4867      	ldr	r0, [pc, #412]	; (800587c <HAL_ADC_Init+0x2dc>)
 80056e0:	f7fd fba0 	bl	8002e24 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80056e4:	69e3      	ldr	r3, [r4, #28]
 80056e6:	3b01      	subs	r3, #1
 80056e8:	2b0f      	cmp	r3, #15
 80056ea:	d9a0      	bls.n	800562e <HAL_ADC_Init+0x8e>
 80056ec:	e7eb      	b.n	80056c6 <HAL_ADC_Init+0x126>
    ADC_STATE_CLR_SET(hadc->State,
 80056ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80056f0:	4a63      	ldr	r2, [pc, #396]	; (8005880 <HAL_ADC_Init+0x2e0>)
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80056f2:	4964      	ldr	r1, [pc, #400]	; (8005884 <HAL_ADC_Init+0x2e4>)
    ADC_STATE_CLR_SET(hadc->State,
 80056f4:	401a      	ands	r2, r3
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80056f6:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80056f8:	4d5f      	ldr	r5, [pc, #380]	; (8005878 <HAL_ADC_Init+0x2d8>)
    ADC_STATE_CLR_SET(hadc->State,
 80056fa:	f042 0202 	orr.w	r2, r2, #2
 80056fe:	6422      	str	r2, [r4, #64]	; 0x40
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005700:	684a      	ldr	r2, [r1, #4]
 8005702:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8005706:	604a      	str	r2, [r1, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005708:	684a      	ldr	r2, [r1, #4]
 800570a:	6860      	ldr	r0, [r4, #4]
 800570c:	4302      	orrs	r2, r0
 800570e:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005710:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005712:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005714:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005718:	f8d4 c008 	ldr.w	ip, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800571c:	68e7      	ldr	r7, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800571e:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005720:	6858      	ldr	r0, [r3, #4]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005722:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005724:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005728:	42ae      	cmp	r6, r5
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800572a:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800572c:	6858      	ldr	r0, [r3, #4]
 800572e:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 8005732:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005734:	6859      	ldr	r1, [r3, #4]
 8005736:	ea41 010c 	orr.w	r1, r1, ip
 800573a:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800573c:	6899      	ldr	r1, [r3, #8]
 800573e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8005742:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005744:	689a      	ldr	r2, [r3, #8]
 8005746:	ea42 0207 	orr.w	r2, r2, r7
 800574a:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800574c:	f000 8086 	beq.w	800585c <HAL_ADC_Init+0x2bc>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005750:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005752:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005754:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8005758:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800575a:	689a      	ldr	r2, [r3, #8]
 800575c:	4316      	orrs	r6, r2
 800575e:	609e      	str	r6, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005760:	6899      	ldr	r1, [r3, #8]
 8005762:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8005766:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005768:	689a      	ldr	r2, [r3, #8]
 800576a:	4302      	orrs	r2, r0
 800576c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800576e:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005770:	69a5      	ldr	r5, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005772:	f021 0102 	bic.w	r1, r1, #2
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005776:	f894 0020 	ldrb.w	r0, [r4, #32]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800577a:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800577c:	689a      	ldr	r2, [r3, #8]
 800577e:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8005782:	609a      	str	r2, [r3, #8]
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005784:	2800      	cmp	r0, #0
 8005786:	f000 8085 	beq.w	8005894 <HAL_ADC_Init+0x2f4>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 800578a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800578c:	3a01      	subs	r2, #1
 800578e:	2a07      	cmp	r2, #7
 8005790:	d907      	bls.n	80057a2 <HAL_ADC_Init+0x202>
 8005792:	f44f 61ef 	mov.w	r1, #1912	; 0x778
 8005796:	4839      	ldr	r0, [pc, #228]	; (800587c <HAL_ADC_Init+0x2dc>)
 8005798:	f7fd fb44 	bl	8002e24 <assert_failed>
 800579c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800579e:	6823      	ldr	r3, [r4, #0]
 80057a0:	3a01      	subs	r2, #1
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80057a2:	6859      	ldr	r1, [r3, #4]
 80057a4:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80057a8:	6059      	str	r1, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80057aa:	6859      	ldr	r1, [r3, #4]
 80057ac:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 80057b0:	6059      	str	r1, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80057b2:	6859      	ldr	r1, [r3, #4]
 80057b4:	ea41 3242 	orr.w	r2, r1, r2, lsl #13
 80057b8:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80057ba:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    ADC_CLEAR_ERRORCODE(hadc);
 80057bc:	2600      	movs	r6, #0
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80057be:	69e5      	ldr	r5, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80057c0:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80057c4:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80057c8:	1e6a      	subs	r2, r5, #1
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80057ca:	6967      	ldr	r7, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80057cc:	62d8      	str	r0, [r3, #44]	; 0x2c
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80057ce:	4630      	mov	r0, r6
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80057d0:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80057d2:	ea45 5502 	orr.w	r5, r5, r2, lsl #20
 80057d6:	62dd      	str	r5, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80057d8:	689d      	ldr	r5, [r3, #8]
 80057da:	f425 7500 	bic.w	r5, r5, #512	; 0x200
 80057de:	609d      	str	r5, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80057e0:	6899      	ldr	r1, [r3, #8]
 80057e2:	ea41 214c 	orr.w	r1, r1, ip, lsl #9
 80057e6:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80057e8:	6899      	ldr	r1, [r3, #8]
 80057ea:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80057ee:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80057f0:	689a      	ldr	r2, [r3, #8]
 80057f2:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 80057f6:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80057f8:	6466      	str	r6, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80057fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057fc:	f023 0303 	bic.w	r3, r3, #3
 8005800:	f043 0301 	orr.w	r3, r3, #1
 8005804:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8005806:	2300      	movs	r3, #0
 8005808:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800580c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 800580e:	4620      	mov	r0, r4
 8005810:	f7fe f94c 	bl	8003aac <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8005814:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005816:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 8005818:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800581c:	06db      	lsls	r3, r3, #27
 800581e:	f53f af21 	bmi.w	8005664 <HAL_ADC_Init+0xc4>
 8005822:	e764      	b.n	80056ee <HAL_ADC_Init+0x14e>
    return HAL_ERROR;
 8005824:	2001      	movs	r0, #1
}
 8005826:	4770      	bx	lr
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8005828:	f240 114d 	movw	r1, #333	; 0x14d
 800582c:	4813      	ldr	r0, [pc, #76]	; (800587c <HAL_ADC_Init+0x2dc>)
 800582e:	f7fd faf9 	bl	8002e24 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8005832:	6863      	ldr	r3, [r4, #4]
 8005834:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8005838:	f43f aec8 	beq.w	80055cc <HAL_ADC_Init+0x2c>
 800583c:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 8005840:	480e      	ldr	r0, [pc, #56]	; (800587c <HAL_ADC_Init+0x2dc>)
 8005842:	f7fd faef 	bl	8002e24 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8005846:	68a3      	ldr	r3, [r4, #8]
 8005848:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 800584c:	f43f aec3 	beq.w	80055d6 <HAL_ADC_Init+0x36>
 8005850:	f240 114f 	movw	r1, #335	; 0x14f
 8005854:	4809      	ldr	r0, [pc, #36]	; (800587c <HAL_ADC_Init+0x2dc>)
 8005856:	f7fd fae5 	bl	8002e24 <assert_failed>
 800585a:	e6bc      	b.n	80055d6 <HAL_ADC_Init+0x36>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800585c:	689a      	ldr	r2, [r3, #8]
 800585e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005862:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005864:	689a      	ldr	r2, [r3, #8]
 8005866:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800586a:	609a      	str	r2, [r3, #8]
 800586c:	e77f      	b.n	800576e <HAL_ADC_Init+0x1ce>
 800586e:	bf00      	nop
 8005870:	40012000 	.word	0x40012000
 8005874:	40012100 	.word	0x40012100
 8005878:	0f000001 	.word	0x0f000001
 800587c:	08026430 	.word	0x08026430
 8005880:	ffffeefd 	.word	0xffffeefd
 8005884:	40012300 	.word	0x40012300
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8005888:	f240 115b 	movw	r1, #347	; 0x15b
 800588c:	4807      	ldr	r0, [pc, #28]	; (80058ac <HAL_ADC_Init+0x30c>)
 800588e:	f7fd fac9 	bl	8002e24 <assert_failed>
 8005892:	e6e0      	b.n	8005656 <HAL_ADC_Init+0xb6>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005894:	685a      	ldr	r2, [r3, #4]
 8005896:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800589a:	605a      	str	r2, [r3, #4]
 800589c:	e78d      	b.n	80057ba <HAL_ADC_Init+0x21a>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 800589e:	f44f 71a9 	mov.w	r1, #338	; 0x152
 80058a2:	4802      	ldr	r0, [pc, #8]	; (80058ac <HAL_ADC_Init+0x30c>)
 80058a4:	f7fd fabe 	bl	8002e24 <assert_failed>
 80058a8:	e6b9      	b.n	800561e <HAL_ADC_Init+0x7e>
 80058aa:	bf00      	nop
 80058ac:	08026430 	.word	0x08026430

080058b0 <HAL_ADC_Start>:
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80058b0:	6983      	ldr	r3, [r0, #24]
  __IO uint32_t counter = 0;
 80058b2:	2200      	movs	r2, #0
{
 80058b4:	b510      	push	{r4, lr}
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80058b6:	2b01      	cmp	r3, #1
{
 80058b8:	b082      	sub	sp, #8
 80058ba:	4604      	mov	r4, r0
  __IO uint32_t counter = 0;
 80058bc:	9201      	str	r2, [sp, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80058be:	d904      	bls.n	80058ca <HAL_ADC_Start+0x1a>
 80058c0:	f240 21df 	movw	r1, #735	; 0x2df
 80058c4:	4840      	ldr	r0, [pc, #256]	; (80059c8 <HAL_ADC_Start+0x118>)
 80058c6:	f7fd faad 	bl	8002e24 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 80058ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80058cc:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 80058d0:	d173      	bne.n	80059ba <HAL_ADC_Start+0x10a>
  __HAL_LOCK(hadc);
 80058d2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d06c      	beq.n	80059b4 <HAL_ADC_Start+0x104>
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80058da:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(hadc);
 80058dc:	2101      	movs	r1, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80058de:	6893      	ldr	r3, [r2, #8]
  __HAL_LOCK(hadc);
 80058e0:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80058e4:	07d9      	lsls	r1, r3, #31
 80058e6:	d414      	bmi.n	8005912 <HAL_ADC_Start+0x62>
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80058e8:	4b38      	ldr	r3, [pc, #224]	; (80059cc <HAL_ADC_Start+0x11c>)
 80058ea:	4839      	ldr	r0, [pc, #228]	; (80059d0 <HAL_ADC_Start+0x120>)
 80058ec:	681b      	ldr	r3, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 80058ee:	6891      	ldr	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80058f0:	fba0 0303 	umull	r0, r3, r0, r3
    __HAL_ADC_ENABLE(hadc);
 80058f4:	f041 0101 	orr.w	r1, r1, #1
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80058f8:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 80058fa:	6091      	str	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80058fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005900:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 8005902:	9b01      	ldr	r3, [sp, #4]
 8005904:	b12b      	cbz	r3, 8005912 <HAL_ADC_Start+0x62>
      counter--;
 8005906:	9b01      	ldr	r3, [sp, #4]
 8005908:	3b01      	subs	r3, #1
 800590a:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 800590c:	9b01      	ldr	r3, [sp, #4]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1f9      	bne.n	8005906 <HAL_ADC_Start+0x56>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005912:	6893      	ldr	r3, [r2, #8]
 8005914:	07db      	lsls	r3, r3, #31
 8005916:	d524      	bpl.n	8005962 <HAL_ADC_Start+0xb2>
    ADC_STATE_CLR_SET(hadc->State,
 8005918:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800591a:	4b2e      	ldr	r3, [pc, #184]	; (80059d4 <HAL_ADC_Start+0x124>)
 800591c:	400b      	ands	r3, r1
 800591e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005922:	6423      	str	r3, [r4, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005924:	6853      	ldr	r3, [r2, #4]
 8005926:	0558      	lsls	r0, r3, #21
 8005928:	d505      	bpl.n	8005936 <HAL_ADC_Start+0x86>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800592a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800592c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005930:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005934:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005936:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005938:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 800593c:	d026      	beq.n	800598c <HAL_ADC_Start+0xdc>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800593e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005940:	f023 0306 	bic.w	r3, r3, #6
 8005944:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005946:	f06f 0122 	mvn.w	r1, #34	; 0x22
    __HAL_UNLOCK(hadc);
 800594a:	2000      	movs	r0, #0
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800594c:	4b22      	ldr	r3, [pc, #136]	; (80059d8 <HAL_ADC_Start+0x128>)
    __HAL_UNLOCK(hadc);
 800594e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005952:	6011      	str	r1, [r2, #0]
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8005954:	6859      	ldr	r1, [r3, #4]
 8005956:	06c9      	lsls	r1, r1, #27
 8005958:	d106      	bne.n	8005968 <HAL_ADC_Start+0xb8>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800595a:	6890      	ldr	r0, [r2, #8]
 800595c:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8005960:	d016      	beq.n	8005990 <HAL_ADC_Start+0xe0>
  return HAL_OK;
 8005962:	2000      	movs	r0, #0
}
 8005964:	b002      	add	sp, #8
 8005966:	bd10      	pop	{r4, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005968:	491c      	ldr	r1, [pc, #112]	; (80059dc <HAL_ADC_Start+0x12c>)
 800596a:	428a      	cmp	r2, r1
 800596c:	d016      	beq.n	800599c <HAL_ADC_Start+0xec>
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800596e:	685b      	ldr	r3, [r3, #4]
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005970:	06db      	lsls	r3, r3, #27
 8005972:	d4f6      	bmi.n	8005962 <HAL_ADC_Start+0xb2>
 8005974:	491a      	ldr	r1, [pc, #104]	; (80059e0 <HAL_ADC_Start+0x130>)
 8005976:	428a      	cmp	r2, r1
 8005978:	d1f3      	bne.n	8005962 <HAL_ADC_Start+0xb2>
 800597a:	6888      	ldr	r0, [r1, #8]
 800597c:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8005980:	d1ef      	bne.n	8005962 <HAL_ADC_Start+0xb2>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005982:	688b      	ldr	r3, [r1, #8]
 8005984:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005988:	608b      	str	r3, [r1, #8]
 800598a:	e7eb      	b.n	8005964 <HAL_ADC_Start+0xb4>
      ADC_CLEAR_ERRORCODE(hadc);
 800598c:	6463      	str	r3, [r4, #68]	; 0x44
 800598e:	e7da      	b.n	8005946 <HAL_ADC_Start+0x96>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005990:	6893      	ldr	r3, [r2, #8]
 8005992:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005996:	6093      	str	r3, [r2, #8]
}
 8005998:	b002      	add	sp, #8
 800599a:	bd10      	pop	{r4, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800599c:	6893      	ldr	r3, [r2, #8]
 800599e:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 80059a2:	d103      	bne.n	80059ac <HAL_ADC_Start+0xfc>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80059a4:	6893      	ldr	r3, [r2, #8]
 80059a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059aa:	6093      	str	r3, [r2, #8]
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80059ac:	4b0a      	ldr	r3, [pc, #40]	; (80059d8 <HAL_ADC_Start+0x128>)
  return HAL_OK;
 80059ae:	2000      	movs	r0, #0
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	e7d7      	b.n	8005964 <HAL_ADC_Start+0xb4>
  __HAL_LOCK(hadc);
 80059b4:	2002      	movs	r0, #2
}
 80059b6:	b002      	add	sp, #8
 80059b8:	bd10      	pop	{r4, pc}
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 80059ba:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 80059be:	4802      	ldr	r0, [pc, #8]	; (80059c8 <HAL_ADC_Start+0x118>)
 80059c0:	f7fd fa30 	bl	8002e24 <assert_failed>
 80059c4:	e785      	b.n	80058d2 <HAL_ADC_Start+0x22>
 80059c6:	bf00      	nop
 80059c8:	08026430 	.word	0x08026430
 80059cc:	20000244 	.word	0x20000244
 80059d0:	431bde83 	.word	0x431bde83
 80059d4:	fffff8fe 	.word	0xfffff8fe
 80059d8:	40012300 	.word	0x40012300
 80059dc:	40012000 	.word	0x40012000
 80059e0:	40012200 	.word	0x40012200

080059e4 <HAL_ADC_ConvCpltCallback>:
 80059e4:	4770      	bx	lr
 80059e6:	bf00      	nop

080059e8 <HAL_ADC_LevelOutOfWindowCallback>:
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop

080059ec <HAL_ADC_ErrorCallback>:
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop

080059f0 <HAL_ADC_IRQHandler>:
{
 80059f0:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80059f2:	6983      	ldr	r3, [r0, #24]
{
 80059f4:	4604      	mov	r4, r0
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d904      	bls.n	8005a04 <HAL_ADC_IRQHandler+0x14>
 80059fa:	f240 41a6 	movw	r1, #1190	; 0x4a6
 80059fe:	4856      	ldr	r0, [pc, #344]	; (8005b58 <HAL_ADC_IRQHandler+0x168>)
 8005a00:	f7fd fa10 	bl	8002e24 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8005a04:	69e3      	ldr	r3, [r4, #28]
 8005a06:	3b01      	subs	r3, #1
 8005a08:	2b0f      	cmp	r3, #15
 8005a0a:	f200 808f 	bhi.w	8005b2c <HAL_ADC_IRQHandler+0x13c>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8005a0e:	6963      	ldr	r3, [r4, #20]
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	f200 8085 	bhi.w	8005b20 <HAL_ADC_IRQHandler+0x130>
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8005a16:	6823      	ldr	r3, [r4, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8005a1a:	6859      	ldr	r1, [r3, #4]
  if(tmp1 && tmp2)
 8005a1c:	0790      	lsls	r0, r2, #30
 8005a1e:	d513      	bpl.n	8005a48 <HAL_ADC_IRQHandler+0x58>
 8005a20:	068a      	lsls	r2, r1, #26
 8005a22:	d511      	bpl.n	8005a48 <HAL_ADC_IRQHandler+0x58>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005a24:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005a26:	06d5      	lsls	r5, r2, #27
 8005a28:	d403      	bmi.n	8005a32 <HAL_ADC_IRQHandler+0x42>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8005a2a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005a2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a30:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005a32:	689a      	ldr	r2, [r3, #8]
 8005a34:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8005a38:	d058      	beq.n	8005aec <HAL_ADC_IRQHandler+0xfc>
    HAL_ADC_ConvCpltCallback(hadc);
 8005a3a:	4620      	mov	r0, r4
 8005a3c:	f7ff ffd2 	bl	80059e4 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005a40:	6823      	ldr	r3, [r4, #0]
 8005a42:	f06f 0212 	mvn.w	r2, #18
 8005a46:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8005a48:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8005a4a:	6859      	ldr	r1, [r3, #4]
  if(tmp1 && tmp2)
 8005a4c:	0752      	lsls	r2, r2, #29
 8005a4e:	d513      	bpl.n	8005a78 <HAL_ADC_IRQHandler+0x88>
 8005a50:	060d      	lsls	r5, r1, #24
 8005a52:	d511      	bpl.n	8005a78 <HAL_ADC_IRQHandler+0x88>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005a54:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005a56:	06d0      	lsls	r0, r2, #27
 8005a58:	d403      	bmi.n	8005a62 <HAL_ADC_IRQHandler+0x72>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005a5a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005a5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a60:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005a62:	689a      	ldr	r2, [r3, #8]
 8005a64:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8005a68:	d022      	beq.n	8005ab0 <HAL_ADC_IRQHandler+0xc0>
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005a6a:	4620      	mov	r0, r4
 8005a6c:	f000 f960 	bl	8005d30 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005a70:	6823      	ldr	r3, [r4, #0]
 8005a72:	f06f 020c 	mvn.w	r2, #12
 8005a76:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8005a78:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8005a7a:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8005a7c:	0650      	lsls	r0, r2, #25
 8005a7e:	d504      	bpl.n	8005a8a <HAL_ADC_IRQHandler+0x9a>
 8005a80:	07ca      	lsls	r2, r1, #31
 8005a82:	d502      	bpl.n	8005a8a <HAL_ADC_IRQHandler+0x9a>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	07d5      	lsls	r5, r2, #31
 8005a88:	d456      	bmi.n	8005b38 <HAL_ADC_IRQHandler+0x148>
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8005a8a:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8005a8c:	6859      	ldr	r1, [r3, #4]
  if(tmp1 && tmp2)
 8005a8e:	0690      	lsls	r0, r2, #26
 8005a90:	d50d      	bpl.n	8005aae <HAL_ADC_IRQHandler+0xbe>
 8005a92:	014a      	lsls	r2, r1, #5
 8005a94:	d50b      	bpl.n	8005aae <HAL_ADC_IRQHandler+0xbe>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005a96:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005a98:	f06f 0520 	mvn.w	r5, #32
      HAL_ADC_ErrorCallback(hadc);
 8005a9c:	4620      	mov	r0, r4
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005a9e:	f042 0202 	orr.w	r2, r2, #2
 8005aa2:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005aa4:	601d      	str	r5, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8005aa6:	f7ff ffa1 	bl	80059ec <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005aaa:	6823      	ldr	r3, [r4, #0]
 8005aac:	601d      	str	r5, [r3, #0]
}
 8005aae:	bd38      	pop	{r3, r4, r5, pc}
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8005ab0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005ab2:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8005ab6:	d14b      	bne.n	8005b50 <HAL_ADC_IRQHandler+0x160>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005ab8:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8005aba:	0552      	lsls	r2, r2, #21
 8005abc:	d4d5      	bmi.n	8005a6a <HAL_ADC_IRQHandler+0x7a>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8005abe:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005ac0:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8005ac4:	d1d1      	bne.n	8005a6a <HAL_ADC_IRQHandler+0x7a>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8005ac6:	69a2      	ldr	r2, [r4, #24]
 8005ac8:	2a00      	cmp	r2, #0
 8005aca:	d1ce      	bne.n	8005a6a <HAL_ADC_IRQHandler+0x7a>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ad2:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8005ad4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ad6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ada:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005adc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ade:	05dd      	lsls	r5, r3, #23
 8005ae0:	d4c3      	bmi.n	8005a6a <HAL_ADC_IRQHandler+0x7a>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005ae2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ae4:	f043 0301 	orr.w	r3, r3, #1
 8005ae8:	6423      	str	r3, [r4, #64]	; 0x40
 8005aea:	e7be      	b.n	8005a6a <HAL_ADC_IRQHandler+0x7a>
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005aec:	69a2      	ldr	r2, [r4, #24]
 8005aee:	2a00      	cmp	r2, #0
 8005af0:	d1a3      	bne.n	8005a3a <HAL_ADC_IRQHandler+0x4a>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005af4:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8005af8:	d002      	beq.n	8005b00 <HAL_ADC_IRQHandler+0x110>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005afa:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005afc:	0550      	lsls	r0, r2, #21
 8005afe:	d49c      	bmi.n	8005a3a <HAL_ADC_IRQHandler+0x4a>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005b00:	685a      	ldr	r2, [r3, #4]
 8005b02:	f022 0220 	bic.w	r2, r2, #32
 8005b06:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005b08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b0e:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005b10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b12:	04d9      	lsls	r1, r3, #19
 8005b14:	d491      	bmi.n	8005a3a <HAL_ADC_IRQHandler+0x4a>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005b16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b18:	f043 0301 	orr.w	r3, r3, #1
 8005b1c:	6423      	str	r3, [r4, #64]	; 0x40
 8005b1e:	e78c      	b.n	8005a3a <HAL_ADC_IRQHandler+0x4a>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8005b20:	f44f 6195 	mov.w	r1, #1192	; 0x4a8
 8005b24:	480c      	ldr	r0, [pc, #48]	; (8005b58 <HAL_ADC_IRQHandler+0x168>)
 8005b26:	f7fd f97d 	bl	8002e24 <assert_failed>
 8005b2a:	e774      	b.n	8005a16 <HAL_ADC_IRQHandler+0x26>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8005b2c:	f240 41a7 	movw	r1, #1191	; 0x4a7
 8005b30:	4809      	ldr	r0, [pc, #36]	; (8005b58 <HAL_ADC_IRQHandler+0x168>)
 8005b32:	f7fd f977 	bl	8002e24 <assert_failed>
 8005b36:	e76a      	b.n	8005a0e <HAL_ADC_IRQHandler+0x1e>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005b38:	6c23      	ldr	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005b3a:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b40:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005b42:	f7ff ff51 	bl	80059e8 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8005b46:	6823      	ldr	r3, [r4, #0]
 8005b48:	f06f 0201 	mvn.w	r2, #1
 8005b4c:	601a      	str	r2, [r3, #0]
 8005b4e:	e79c      	b.n	8005a8a <HAL_ADC_IRQHandler+0x9a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8005b50:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8005b52:	0551      	lsls	r1, r2, #21
 8005b54:	d489      	bmi.n	8005a6a <HAL_ADC_IRQHandler+0x7a>
 8005b56:	e7af      	b.n	8005ab8 <HAL_ADC_IRQHandler+0xc8>
 8005b58:	08026430 	.word	0x08026430

08005b5c <HAL_ADC_ConfigChannel>:
{
 8005b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b5e:	460d      	mov	r5, r1
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8005b60:	4a6e      	ldr	r2, [pc, #440]	; (8005d1c <HAL_ADC_ConfigChannel+0x1c0>)
{
 8005b62:	b083      	sub	sp, #12
  __IO uint32_t counter = 0;
 8005b64:	2100      	movs	r1, #0
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8005b66:	682b      	ldr	r3, [r5, #0]
{
 8005b68:	4604      	mov	r4, r0
  __IO uint32_t counter = 0;
 8005b6a:	9101      	str	r1, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	bf18      	it	ne
 8005b70:	2b12      	cmpne	r3, #18
 8005b72:	d902      	bls.n	8005b7a <HAL_ADC_ConfigChannel+0x1e>
 8005b74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b78:	d143      	bne.n	8005c02 <HAL_ADC_ConfigChannel+0xa6>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8005b7a:	686b      	ldr	r3, [r5, #4]
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	2b0f      	cmp	r3, #15
 8005b80:	d848      	bhi.n	8005c14 <HAL_ADC_ConfigChannel+0xb8>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8005b82:	68ab      	ldr	r3, [r5, #8]
 8005b84:	2b07      	cmp	r3, #7
 8005b86:	d84d      	bhi.n	8005c24 <HAL_ADC_ConfigChannel+0xc8>
  __HAL_LOCK(hadc);
 8005b88:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d052      	beq.n	8005c36 <HAL_ADC_ConfigChannel+0xda>
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005b90:	682f      	ldr	r7, [r5, #0]
  __HAL_LOCK(hadc);
 8005b92:	2201      	movs	r2, #1
 8005b94:	6823      	ldr	r3, [r4, #0]
 8005b96:	fa1f fc87 	uxth.w	ip, r7
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005b9a:	2f09      	cmp	r7, #9
  __HAL_LOCK(hadc);
 8005b9c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
 8005ba0:	eb0c 064c 	add.w	r6, ip, ip, lsl #1
 8005ba4:	68aa      	ldr	r2, [r5, #8]
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005ba6:	d949      	bls.n	8005c3c <HAL_ADC_ConfigChannel+0xe0>
 8005ba8:	f1b7 4f00 	cmp.w	r7, #2147483648	; 0x80000000
 8005bac:	d046      	beq.n	8005c3c <HAL_ADC_ConfigChannel+0xe0>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005bae:	3e1e      	subs	r6, #30
 8005bb0:	2007      	movs	r0, #7
 8005bb2:	68d9      	ldr	r1, [r3, #12]
 8005bb4:	40b0      	lsls	r0, r6
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005bb6:	f8df e164 	ldr.w	lr, [pc, #356]	; 8005d1c <HAL_ADC_ConfigChannel+0x1c0>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005bba:	ea21 0100 	bic.w	r1, r1, r0
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005bbe:	4577      	cmp	r7, lr
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005bc0:	60d9      	str	r1, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005bc2:	f000 809c 	beq.w	8005cfe <HAL_ADC_ConfigChannel+0x1a2>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005bc6:	fa02 f606 	lsl.w	r6, r2, r6
 8005bca:	68da      	ldr	r2, [r3, #12]
 8005bcc:	4316      	orrs	r6, r2
 8005bce:	60de      	str	r6, [r3, #12]
  if (sConfig->Rank < 7)
 8005bd0:	6869      	ldr	r1, [r5, #4]
 8005bd2:	2906      	cmp	r1, #6
 8005bd4:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8005bd8:	d841      	bhi.n	8005c5e <HAL_ADC_ConfigChannel+0x102>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005bda:	3a05      	subs	r2, #5
 8005bdc:	201f      	movs	r0, #31
 8005bde:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005be0:	4090      	lsls	r0, r2
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005be2:	fa0c f202 	lsl.w	r2, ip, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005be6:	ea21 0100 	bic.w	r1, r1, r0
 8005bea:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005bec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005bf2:	4a4b      	ldr	r2, [pc, #300]	; (8005d20 <HAL_ADC_ConfigChannel+0x1c4>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d044      	beq.n	8005c82 <HAL_ADC_ConfigChannel+0x126>
  __HAL_UNLOCK(hadc);
 8005bf8:	2000      	movs	r0, #0
 8005bfa:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8005bfe:	b003      	add	sp, #12
 8005c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8005c02:	f240 615d 	movw	r1, #1629	; 0x65d
 8005c06:	4847      	ldr	r0, [pc, #284]	; (8005d24 <HAL_ADC_ConfigChannel+0x1c8>)
 8005c08:	f7fd f90c 	bl	8002e24 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8005c0c:	686b      	ldr	r3, [r5, #4]
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	2b0f      	cmp	r3, #15
 8005c12:	d9b6      	bls.n	8005b82 <HAL_ADC_ConfigChannel+0x26>
 8005c14:	f240 615e 	movw	r1, #1630	; 0x65e
 8005c18:	4842      	ldr	r0, [pc, #264]	; (8005d24 <HAL_ADC_ConfigChannel+0x1c8>)
 8005c1a:	f7fd f903 	bl	8002e24 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8005c1e:	68ab      	ldr	r3, [r5, #8]
 8005c20:	2b07      	cmp	r3, #7
 8005c22:	d9b1      	bls.n	8005b88 <HAL_ADC_ConfigChannel+0x2c>
 8005c24:	f240 615f 	movw	r1, #1631	; 0x65f
 8005c28:	483e      	ldr	r0, [pc, #248]	; (8005d24 <HAL_ADC_ConfigChannel+0x1c8>)
 8005c2a:	f7fd f8fb 	bl	8002e24 <assert_failed>
  __HAL_LOCK(hadc);
 8005c2e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d1ac      	bne.n	8005b90 <HAL_ADC_ConfigChannel+0x34>
 8005c36:	2002      	movs	r0, #2
}
 8005c38:	b003      	add	sp, #12
 8005c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005c3c:	2007      	movs	r0, #7
 8005c3e:	6919      	ldr	r1, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005c40:	40b2      	lsls	r2, r6
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005c42:	fa00 f606 	lsl.w	r6, r0, r6
 8005c46:	ea21 0606 	bic.w	r6, r1, r6
  if (sConfig->Rank < 7)
 8005c4a:	6869      	ldr	r1, [r5, #4]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005c4c:	611e      	str	r6, [r3, #16]
  if (sConfig->Rank < 7)
 8005c4e:	2906      	cmp	r1, #6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005c50:	691e      	ldr	r6, [r3, #16]
 8005c52:	ea46 0602 	orr.w	r6, r6, r2
 8005c56:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8005c5a:	611e      	str	r6, [r3, #16]
  if (sConfig->Rank < 7)
 8005c5c:	d9bd      	bls.n	8005bda <HAL_ADC_ConfigChannel+0x7e>
  else if (sConfig->Rank < 13)
 8005c5e:	290c      	cmp	r1, #12
 8005c60:	d838      	bhi.n	8005cd4 <HAL_ADC_ConfigChannel+0x178>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005c62:	f1a2 0023 	sub.w	r0, r2, #35	; 0x23
 8005c66:	251f      	movs	r5, #31
 8005c68:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005c6a:	4085      	lsls	r5, r0
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005c6c:	fa0c f200 	lsl.w	r2, ip, r0
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005c70:	ea21 0105 	bic.w	r1, r1, r5
 8005c74:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005c76:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005c78:	4310      	orrs	r0, r2
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005c7a:	4a29      	ldr	r2, [pc, #164]	; (8005d20 <HAL_ADC_ConfigChannel+0x1c4>)
 8005c7c:	4293      	cmp	r3, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005c7e:	6318      	str	r0, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005c80:	d1ba      	bne.n	8005bf8 <HAL_ADC_ConfigChannel+0x9c>
 8005c82:	f1b7 4f00 	cmp.w	r7, #2147483648	; 0x80000000
 8005c86:	d033      	beq.n	8005cf0 <HAL_ADC_ConfigChannel+0x194>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005c88:	2f12      	cmp	r7, #18
 8005c8a:	d03d      	beq.n	8005d08 <HAL_ADC_ConfigChannel+0x1ac>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005c8c:	4b23      	ldr	r3, [pc, #140]	; (8005d1c <HAL_ADC_ConfigChannel+0x1c0>)
 8005c8e:	429f      	cmp	r7, r3
 8005c90:	d140      	bne.n	8005d14 <HAL_ADC_ConfigChannel+0x1b8>
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005c92:	4a25      	ldr	r2, [pc, #148]	; (8005d28 <HAL_ADC_ConfigChannel+0x1cc>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005c94:	4921      	ldr	r1, [pc, #132]	; (8005d1c <HAL_ADC_ConfigChannel+0x1c0>)
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005c96:	6853      	ldr	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005c98:	428f      	cmp	r7, r1
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005c9a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005c9e:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005ca0:	d1aa      	bne.n	8005bf8 <HAL_ADC_ConfigChannel+0x9c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005ca2:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8005ca6:	4b21      	ldr	r3, [pc, #132]	; (8005d2c <HAL_ADC_ConfigChannel+0x1d0>)
 8005ca8:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f202 3283 	addw	r2, r2, #899	; 0x383
 8005cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb6:	0c9b      	lsrs	r3, r3, #18
 8005cb8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005cbc:	005b      	lsls	r3, r3, #1
 8005cbe:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8005cc0:	9b01      	ldr	r3, [sp, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d098      	beq.n	8005bf8 <HAL_ADC_ConfigChannel+0x9c>
        counter--;
 8005cc6:	9b01      	ldr	r3, [sp, #4]
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8005ccc:	9b01      	ldr	r3, [sp, #4]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1f9      	bne.n	8005cc6 <HAL_ADC_ConfigChannel+0x16a>
 8005cd2:	e791      	b.n	8005bf8 <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005cd4:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 8005cd8:	251f      	movs	r5, #31
 8005cda:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005cdc:	408d      	lsls	r5, r1
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005cde:	fa0c f201 	lsl.w	r2, ip, r1
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005ce2:	ea20 0005 	bic.w	r0, r0, r5
 8005ce6:	62d8      	str	r0, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005ce8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005cea:	430a      	orrs	r2, r1
 8005cec:	62da      	str	r2, [r3, #44]	; 0x2c
 8005cee:	e780      	b.n	8005bf2 <HAL_ADC_ConfigChannel+0x96>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005cf0:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8005cf4:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005cf8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
 8005cfc:	e77c      	b.n	8005bf8 <HAL_ADC_ConfigChannel+0x9c>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8005cfe:	68de      	ldr	r6, [r3, #12]
 8005d00:	ea46 6602 	orr.w	r6, r6, r2, lsl #24
 8005d04:	60de      	str	r6, [r3, #12]
 8005d06:	e763      	b.n	8005bd0 <HAL_ADC_ConfigChannel+0x74>
    ADC->CCR |= ADC_CCR_VBATE;
 8005d08:	4a07      	ldr	r2, [pc, #28]	; (8005d28 <HAL_ADC_ConfigChannel+0x1cc>)
 8005d0a:	6853      	ldr	r3, [r2, #4]
 8005d0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005d10:	6053      	str	r3, [r2, #4]
 8005d12:	e771      	b.n	8005bf8 <HAL_ADC_ConfigChannel+0x9c>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005d14:	2f11      	cmp	r7, #17
 8005d16:	d0bc      	beq.n	8005c92 <HAL_ADC_ConfigChannel+0x136>
 8005d18:	e76e      	b.n	8005bf8 <HAL_ADC_ConfigChannel+0x9c>
 8005d1a:	bf00      	nop
 8005d1c:	10000012 	.word	0x10000012
 8005d20:	40012000 	.word	0x40012000
 8005d24:	08026430 	.word	0x08026430
 8005d28:	40012300 	.word	0x40012300
 8005d2c:	20000244 	.word	0x20000244

08005d30 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop

08005d34 <HAL_ADCEx_MultiModeConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
  /* Check the parameters */
  assert_param(IS_ADC_MODE(multimode->Mode));
 8005d34:	680a      	ldr	r2, [r1, #0]
 8005d36:	2a19      	cmp	r2, #25
{
 8005d38:	b570      	push	{r4, r5, r6, lr}
 8005d3a:	460c      	mov	r4, r1
 8005d3c:	4605      	mov	r5, r0
  assert_param(IS_ADC_MODE(multimode->Mode));
 8005d3e:	d93e      	bls.n	8005dbe <HAL_ADCEx_MultiModeConfigChannel+0x8a>
 8005d40:	f240 3193 	movw	r1, #915	; 0x393
 8005d44:	4829      	ldr	r0, [pc, #164]	; (8005dec <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8005d46:	f7fd f86d 	bl	8002e24 <assert_failed>
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 8005d4a:	6863      	ldr	r3, [r4, #4]
 8005d4c:	f433 4340 	bics.w	r3, r3, #49152	; 0xc000
 8005d50:	d13d      	bne.n	8005dce <HAL_ADCEx_MultiModeConfigChannel+0x9a>
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 8005d52:	68a3      	ldr	r3, [r4, #8]
 8005d54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d5c:	bf18      	it	ne
 8005d5e:	2b00      	cmpne	r3, #0
 8005d60:	bf14      	ite	ne
 8005d62:	2201      	movne	r2, #1
 8005d64:	2200      	moveq	r2, #0
 8005d66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d6a:	bf0c      	ite	eq
 8005d6c:	2200      	moveq	r2, #0
 8005d6e:	f002 0201 	andne.w	r2, r2, #1
 8005d72:	b112      	cbz	r2, 8005d7a <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8005d74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d78:	d131      	bne.n	8005dde <HAL_ADCEx_MultiModeConfigChannel+0xaa>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005d7a:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d02b      	beq.n	8005dda <HAL_ADCEx_MultiModeConfigChannel+0xa6>
  
  /* Set ADC mode */
  ADC->CCR &= ~(ADC_CCR_MULTI);
 8005d82:	4b1b      	ldr	r3, [pc, #108]	; (8005df0 <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
  /* Set delay between two sampling phases */
  ADC->CCR &= ~(ADC_CCR_DELAY);
  ADC->CCR |= multimode->TwoSamplingDelay;
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d84:	2100      	movs	r1, #0
  ADC->CCR &= ~(ADC_CCR_MULTI);
 8005d86:	685a      	ldr	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8005d88:	4608      	mov	r0, r1
  ADC->CCR &= ~(ADC_CCR_MULTI);
 8005d8a:	f022 021f 	bic.w	r2, r2, #31
 8005d8e:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->Mode;
 8005d90:	685a      	ldr	r2, [r3, #4]
 8005d92:	6826      	ldr	r6, [r4, #0]
 8005d94:	4332      	orrs	r2, r6
 8005d96:	605a      	str	r2, [r3, #4]
  ADC->CCR &= ~(ADC_CCR_DMA);
 8005d98:	685a      	ldr	r2, [r3, #4]
 8005d9a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005d9e:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->DMAAccessMode;
 8005da0:	685a      	ldr	r2, [r3, #4]
 8005da2:	6866      	ldr	r6, [r4, #4]
 8005da4:	4332      	orrs	r2, r6
 8005da6:	605a      	str	r2, [r3, #4]
  ADC->CCR &= ~(ADC_CCR_DELAY);
 8005da8:	685a      	ldr	r2, [r3, #4]
 8005daa:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8005dae:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->TwoSamplingDelay;
 8005db0:	68a4      	ldr	r4, [r4, #8]
 8005db2:	685a      	ldr	r2, [r3, #4]
 8005db4:	4322      	orrs	r2, r4
 8005db6:	605a      	str	r2, [r3, #4]
  __HAL_UNLOCK(hadc);
 8005db8:	f885 103c 	strb.w	r1, [r5, #60]	; 0x3c
}
 8005dbc:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ADC_MODE(multimode->Mode));
 8005dbe:	4b0d      	ldr	r3, [pc, #52]	; (8005df4 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 8005dc0:	40d3      	lsrs	r3, r2
 8005dc2:	07db      	lsls	r3, r3, #31
 8005dc4:	d5bc      	bpl.n	8005d40 <HAL_ADCEx_MultiModeConfigChannel+0xc>
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 8005dc6:	6863      	ldr	r3, [r4, #4]
 8005dc8:	f433 4340 	bics.w	r3, r3, #49152	; 0xc000
 8005dcc:	d0c1      	beq.n	8005d52 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005dce:	f44f 7165 	mov.w	r1, #916	; 0x394
 8005dd2:	4806      	ldr	r0, [pc, #24]	; (8005dec <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8005dd4:	f7fd f826 	bl	8002e24 <assert_failed>
 8005dd8:	e7bb      	b.n	8005d52 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
  __HAL_LOCK(hadc);
 8005dda:	2002      	movs	r0, #2
}
 8005ddc:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 8005dde:	f240 3195 	movw	r1, #917	; 0x395
 8005de2:	4802      	ldr	r0, [pc, #8]	; (8005dec <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8005de4:	f7fd f81e 	bl	8002e24 <assert_failed>
 8005de8:	e7c7      	b.n	8005d7a <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8005dea:	bf00      	nop
 8005dec:	08026468 	.word	0x08026468
 8005df0:	40012300 	.word	0x40012300
 8005df4:	02e602e7 	.word	0x02e602e7

08005df8 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8005df8:	1ec3      	subs	r3, r0, #3
 8005dfa:	2b04      	cmp	r3, #4
{
 8005dfc:	b510      	push	{r4, lr}
 8005dfe:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8005e00:	d903      	bls.n	8005e0a <HAL_NVIC_SetPriorityGrouping+0x12>
 8005e02:	2192      	movs	r1, #146	; 0x92
 8005e04:	4807      	ldr	r0, [pc, #28]	; (8005e24 <HAL_NVIC_SetPriorityGrouping+0x2c>)
 8005e06:	f7fd f80d 	bl	8002e24 <assert_failed>
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e0a:	4907      	ldr	r1, [pc, #28]	; (8005e28 <HAL_NVIC_SetPriorityGrouping+0x30>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e0c:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e10:	0224      	lsls	r4, r4, #8
 8005e12:	4b06      	ldr	r3, [pc, #24]	; (8005e2c <HAL_NVIC_SetPriorityGrouping+0x34>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e14:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e16:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e1a:	4002      	ands	r2, r0
 8005e1c:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005e1e:	431c      	orrs	r4, r3
  SCB->AIRCR =  reg_value;
 8005e20:	60cc      	str	r4, [r1, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005e22:	bd10      	pop	{r4, pc}
 8005e24:	080264a4 	.word	0x080264a4
 8005e28:	e000ed00 	.word	0xe000ed00
 8005e2c:	05fa0000 	.word	0x05fa0000

08005e30 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8005e30:	2a0f      	cmp	r2, #15
{ 
 8005e32:	b570      	push	{r4, r5, r6, lr}
 8005e34:	4616      	mov	r6, r2
 8005e36:	4605      	mov	r5, r0
 8005e38:	460c      	mov	r4, r1
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8005e3a:	d832      	bhi.n	8005ea2 <HAL_NVIC_SetPriority+0x72>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8005e3c:	2c0f      	cmp	r4, #15
 8005e3e:	d82b      	bhi.n	8005e98 <HAL_NVIC_SetPriority+0x68>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e40:	4b1a      	ldr	r3, [pc, #104]	; (8005eac <HAL_NVIC_SetPriority+0x7c>)
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e48:	f1c3 0107 	rsb	r1, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e4c:	1d1a      	adds	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e4e:	2904      	cmp	r1, #4
 8005e50:	bf28      	it	cs
 8005e52:	2104      	movcs	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e54:	2a06      	cmp	r2, #6
 8005e56:	d917      	bls.n	8005e88 <HAL_NVIC_SetPriority+0x58>
 8005e58:	3b03      	subs	r3, #3
 8005e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e5e:	409a      	lsls	r2, r3
 8005e60:	ea26 0602 	bic.w	r6, r6, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e64:	f04f 32ff 	mov.w	r2, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8005e68:	2d00      	cmp	r5, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e6a:	fa02 f201 	lsl.w	r2, r2, r1
 8005e6e:	ea24 0202 	bic.w	r2, r4, r2
 8005e72:	fa02 f203 	lsl.w	r2, r2, r3
 8005e76:	ea42 0206 	orr.w	r2, r2, r6
 8005e7a:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8005e7e:	b2d2      	uxtb	r2, r2
  if ((int32_t)(IRQn) >= 0)
 8005e80:	db05      	blt.n	8005e8e <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e82:	4b0b      	ldr	r3, [pc, #44]	; (8005eb0 <HAL_NVIC_SetPriority+0x80>)
 8005e84:	555a      	strb	r2, [r3, r5]
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005e86:	bd70      	pop	{r4, r5, r6, pc}
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e88:	2600      	movs	r6, #0
 8005e8a:	4633      	mov	r3, r6
 8005e8c:	e7ea      	b.n	8005e64 <HAL_NVIC_SetPriority+0x34>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e8e:	f005 050f 	and.w	r5, r5, #15
 8005e92:	4b08      	ldr	r3, [pc, #32]	; (8005eb4 <HAL_NVIC_SetPriority+0x84>)
 8005e94:	555a      	strb	r2, [r3, r5]
 8005e96:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8005e98:	21ab      	movs	r1, #171	; 0xab
 8005e9a:	4807      	ldr	r0, [pc, #28]	; (8005eb8 <HAL_NVIC_SetPriority+0x88>)
 8005e9c:	f7fc ffc2 	bl	8002e24 <assert_failed>
 8005ea0:	e7ce      	b.n	8005e40 <HAL_NVIC_SetPriority+0x10>
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8005ea2:	21aa      	movs	r1, #170	; 0xaa
 8005ea4:	4804      	ldr	r0, [pc, #16]	; (8005eb8 <HAL_NVIC_SetPriority+0x88>)
 8005ea6:	f7fc ffbd 	bl	8002e24 <assert_failed>
 8005eaa:	e7c7      	b.n	8005e3c <HAL_NVIC_SetPriority+0xc>
 8005eac:	e000ed00 	.word	0xe000ed00
 8005eb0:	e000e400 	.word	0xe000e400
 8005eb4:	e000ed14 	.word	0xe000ed14
 8005eb8:	080264a4 	.word	0x080264a4

08005ebc <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8005ebc:	2800      	cmp	r0, #0
 8005ebe:	db08      	blt.n	8005ed2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ec0:	f000 011f 	and.w	r1, r0, #31
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	0940      	lsrs	r0, r0, #5
 8005ec8:	4a04      	ldr	r2, [pc, #16]	; (8005edc <HAL_NVIC_EnableIRQ+0x20>)
 8005eca:	408b      	lsls	r3, r1
 8005ecc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005ed0:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8005ed2:	21be      	movs	r1, #190	; 0xbe
 8005ed4:	4802      	ldr	r0, [pc, #8]	; (8005ee0 <HAL_NVIC_EnableIRQ+0x24>)
 8005ed6:	f7fc bfa5 	b.w	8002e24 <assert_failed>
 8005eda:	bf00      	nop
 8005edc:	e000e100 	.word	0xe000e100
 8005ee0:	080264a4 	.word	0x080264a4

08005ee4 <HAL_NVIC_DisableIRQ>:
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8005ee4:	2800      	cmp	r0, #0
 8005ee6:	db0e      	blt.n	8005f06 <HAL_NVIC_DisableIRQ+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ee8:	0943      	lsrs	r3, r0, #5
 8005eea:	2201      	movs	r2, #1
 8005eec:	f000 001f 	and.w	r0, r0, #31
 8005ef0:	4907      	ldr	r1, [pc, #28]	; (8005f10 <HAL_NVIC_DisableIRQ+0x2c>)
 8005ef2:	3320      	adds	r3, #32
 8005ef4:	fa02 f000 	lsl.w	r0, r2, r0
 8005ef8:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8005efc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005f00:	f3bf 8f6f 	isb	sy
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8005f04:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8005f06:	21ce      	movs	r1, #206	; 0xce
 8005f08:	4802      	ldr	r0, [pc, #8]	; (8005f14 <HAL_NVIC_DisableIRQ+0x30>)
 8005f0a:	f7fc bf8b 	b.w	8002e24 <assert_failed>
 8005f0e:	bf00      	nop
 8005f10:	e000e100 	.word	0xe000e100
 8005f14:	080264a4 	.word	0x080264a4

08005f18 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005f18:	2800      	cmp	r0, #0
 8005f1a:	d077      	beq.n	800600c <HAL_CRC_Init+0xf4>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8005f1c:	4b3c      	ldr	r3, [pc, #240]	; (8006010 <HAL_CRC_Init+0xf8>)
 8005f1e:	6802      	ldr	r2, [r0, #0]
 8005f20:	429a      	cmp	r2, r3
{
 8005f22:	b510      	push	{r4, lr}
 8005f24:	4604      	mov	r4, r0
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8005f26:	d003      	beq.n	8005f30 <HAL_CRC_Init+0x18>
 8005f28:	2170      	movs	r1, #112	; 0x70
 8005f2a:	483a      	ldr	r0, [pc, #232]	; (8006014 <HAL_CRC_Init+0xfc>)
 8005f2c:	f7fc ff7a 	bl	8002e24 <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005f30:	7f63      	ldrb	r3, [r4, #29]
 8005f32:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d045      	beq.n	8005fc6 <HAL_CRC_Init+0xae>

  hcrc->State = HAL_CRC_STATE_BUSY;

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8005f3a:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8005f3c:	2202      	movs	r2, #2
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8005f3e:	2b01      	cmp	r3, #1
  hcrc->State = HAL_CRC_STATE_BUSY;
 8005f40:	7762      	strb	r2, [r4, #29]
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8005f42:	d830      	bhi.n	8005fa6 <HAL_CRC_Init+0x8e>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d135      	bne.n	8005fb4 <HAL_CRC_Init+0x9c>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005f48:	6823      	ldr	r3, [r4, #0]
 8005f4a:	4a33      	ldr	r2, [pc, #204]	; (8006018 <HAL_CRC_Init+0x100>)
 8005f4c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005f4e:	689a      	ldr	r2, [r3, #8]
 8005f50:	f022 0218 	bic.w	r2, r2, #24
 8005f54:	609a      	str	r2, [r3, #8]
    }
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 8005f56:	7962      	ldrb	r2, [r4, #5]
 8005f58:	2a01      	cmp	r2, #1
 8005f5a:	d904      	bls.n	8005f66 <HAL_CRC_Init+0x4e>
 8005f5c:	2190      	movs	r1, #144	; 0x90
 8005f5e:	482d      	ldr	r0, [pc, #180]	; (8006014 <HAL_CRC_Init+0xfc>)
 8005f60:	f7fc ff60 	bl	8002e24 <assert_failed>
 8005f64:	7962      	ldrb	r2, [r4, #5]
 8005f66:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005f68:	2a00      	cmp	r2, #0
 8005f6a:	d136      	bne.n	8005fda <HAL_CRC_Init+0xc2>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8005f70:	611a      	str	r2, [r3, #16]
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 8005f72:	6962      	ldr	r2, [r4, #20]
 8005f74:	f032 0160 	bics.w	r1, r2, #96	; 0x60
 8005f78:	d135      	bne.n	8005fe6 <HAL_CRC_Init+0xce>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005f7a:	6899      	ldr	r1, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8005f7c:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005f7e:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8005f82:	4311      	orrs	r1, r2
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8005f84:	f030 0280 	bics.w	r2, r0, #128	; 0x80
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005f88:	6099      	str	r1, [r3, #8]
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8005f8a:	d138      	bne.n	8005ffe <HAL_CRC_Init+0xe6>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005f8c:	689a      	ldr	r2, [r3, #8]

  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8005f8e:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005f90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8005f94:	3901      	subs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005f96:	4302      	orrs	r2, r0
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8005f98:	2902      	cmp	r1, #2
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005f9a:	609a      	str	r2, [r3, #8]
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8005f9c:	d82a      	bhi.n	8005ff4 <HAL_CRC_Init+0xdc>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005f9e:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 8005fa0:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 8005fa2:	7763      	strb	r3, [r4, #29]
}
 8005fa4:	bd10      	pop	{r4, pc}
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8005fa6:	217e      	movs	r1, #126	; 0x7e
 8005fa8:	481a      	ldr	r0, [pc, #104]	; (8006014 <HAL_CRC_Init+0xfc>)
 8005faa:	f7fc ff3b 	bl	8002e24 <assert_failed>
 8005fae:	7923      	ldrb	r3, [r4, #4]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d0c9      	beq.n	8005f48 <HAL_CRC_Init+0x30>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005fb4:	68e2      	ldr	r2, [r4, #12]
 8005fb6:	4620      	mov	r0, r4
 8005fb8:	68a1      	ldr	r1, [r4, #8]
 8005fba:	f000 f82f 	bl	800601c <HAL_CRCEx_Polynomial_Set>
 8005fbe:	2800      	cmp	r0, #0
 8005fc0:	d0c9      	beq.n	8005f56 <HAL_CRC_Init+0x3e>
    return HAL_ERROR;
 8005fc2:	2001      	movs	r0, #1
}
 8005fc4:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8005fc6:	7722      	strb	r2, [r4, #28]
    HAL_CRC_MspInit(hcrc);
 8005fc8:	4620      	mov	r0, r4
 8005fca:	f7fd fe0f 	bl	8003bec <HAL_CRC_MspInit>
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8005fce:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8005fd0:	2202      	movs	r2, #2
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8005fd2:	2b01      	cmp	r3, #1
  hcrc->State = HAL_CRC_STATE_BUSY;
 8005fd4:	7762      	strb	r2, [r4, #29]
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8005fd6:	d9b5      	bls.n	8005f44 <HAL_CRC_Init+0x2c>
 8005fd8:	e7e5      	b.n	8005fa6 <HAL_CRC_Init+0x8e>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005fda:	6922      	ldr	r2, [r4, #16]
 8005fdc:	611a      	str	r2, [r3, #16]
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 8005fde:	6962      	ldr	r2, [r4, #20]
 8005fe0:	f032 0160 	bics.w	r1, r2, #96	; 0x60
 8005fe4:	d0c9      	beq.n	8005f7a <HAL_CRC_Init+0x62>
 8005fe6:	219c      	movs	r1, #156	; 0x9c
 8005fe8:	480a      	ldr	r0, [pc, #40]	; (8006014 <HAL_CRC_Init+0xfc>)
 8005fea:	f7fc ff1b 	bl	8002e24 <assert_failed>
 8005fee:	6823      	ldr	r3, [r4, #0]
 8005ff0:	6962      	ldr	r2, [r4, #20]
 8005ff2:	e7c2      	b.n	8005f7a <HAL_CRC_Init+0x62>
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8005ff4:	21a5      	movs	r1, #165	; 0xa5
 8005ff6:	4807      	ldr	r0, [pc, #28]	; (8006014 <HAL_CRC_Init+0xfc>)
 8005ff8:	f7fc ff14 	bl	8002e24 <assert_failed>
 8005ffc:	e7cf      	b.n	8005f9e <HAL_CRC_Init+0x86>
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8005ffe:	4805      	ldr	r0, [pc, #20]	; (8006014 <HAL_CRC_Init+0xfc>)
 8006000:	21a0      	movs	r1, #160	; 0xa0
 8006002:	f7fc ff0f 	bl	8002e24 <assert_failed>
 8006006:	6823      	ldr	r3, [r4, #0]
 8006008:	69a0      	ldr	r0, [r4, #24]
 800600a:	e7bf      	b.n	8005f8c <HAL_CRC_Init+0x74>
    return HAL_ERROR;
 800600c:	2001      	movs	r0, #1
}
 800600e:	4770      	bx	lr
 8006010:	40023000 	.word	0x40023000
 8006014:	080264e0 	.word	0x080264e0
 8006018:	04c11db7 	.word	0x04c11db7

0800601c <HAL_CRCEx_Polynomial_Set>:
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 800601c:	f032 0318 	bics.w	r3, r2, #24
{
 8006020:	b530      	push	{r4, r5, lr}
 8006022:	4605      	mov	r5, r0
 8006024:	b083      	sub	sp, #12
 8006026:	460c      	mov	r4, r1
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 8006028:	d005      	beq.n	8006036 <HAL_CRCEx_Polynomial_Set+0x1a>
 800602a:	215f      	movs	r1, #95	; 0x5f
 800602c:	481a      	ldr	r0, [pc, #104]	; (8006098 <HAL_CRCEx_Polynomial_Set+0x7c>)
 800602e:	9201      	str	r2, [sp, #4]
 8006030:	f7fc fef8 	bl	8002e24 <assert_failed>
 8006034:	9a01      	ldr	r2, [sp, #4]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006036:	231e      	movs	r3, #30
 8006038:	e002      	b.n	8006040 <HAL_CRCEx_Polynomial_Set+0x24>
 800603a:	f113 33ff 	adds.w	r3, r3, #4294967295
 800603e:	d320      	bcc.n	8006082 <HAL_CRCEx_Polynomial_Set+0x66>
 8006040:	fa24 f103 	lsr.w	r1, r4, r3
 8006044:	07c9      	lsls	r1, r1, #31
 8006046:	d5f8      	bpl.n	800603a <HAL_CRCEx_Polynomial_Set+0x1e>
  {
  }

  switch (PolyLength)
 8006048:	2a18      	cmp	r2, #24
 800604a:	d81c      	bhi.n	8006086 <HAL_CRCEx_Polynomial_Set+0x6a>
 800604c:	e8df f002 	tbb	[pc, r2]
 8006050:	1b1b1b0f 	.word	0x1b1b1b0f
 8006054:	1b1b1b1b 	.word	0x1b1b1b1b
 8006058:	1b1b1b21 	.word	0x1b1b1b21
 800605c:	1b1b1b1b 	.word	0x1b1b1b1b
 8006060:	1b1b1b0d 	.word	0x1b1b1b0d
 8006064:	1b1b1b1b 	.word	0x1b1b1b1b
 8006068:	1e          	.byte	0x1e
 8006069:	00          	.byte	0x00
      {
        status =   HAL_ERROR;
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800606a:	2b07      	cmp	r3, #7
 800606c:	d80b      	bhi.n	8006086 <HAL_CRCEx_Polynomial_Set+0x6a>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800606e:	6829      	ldr	r1, [r5, #0]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006070:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006072:	614c      	str	r4, [r1, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006074:	688b      	ldr	r3, [r1, #8]
 8006076:	f023 0318 	bic.w	r3, r3, #24
 800607a:	431a      	orrs	r2, r3
 800607c:	608a      	str	r2, [r1, #8]
  }
  /* Return function status */
  return status;
}
 800607e:	b003      	add	sp, #12
 8006080:	bd30      	pop	{r4, r5, pc}
  switch (PolyLength)
 8006082:	2a00      	cmp	r2, #0
 8006084:	d0f3      	beq.n	800606e <HAL_CRCEx_Polynomial_Set+0x52>
      status =  HAL_ERROR;
 8006086:	2001      	movs	r0, #1
}
 8006088:	b003      	add	sp, #12
 800608a:	bd30      	pop	{r4, r5, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 800608c:	2b06      	cmp	r3, #6
 800608e:	d9ee      	bls.n	800606e <HAL_CRCEx_Polynomial_Set+0x52>
 8006090:	e7f9      	b.n	8006086 <HAL_CRCEx_Polynomial_Set+0x6a>
      if (msb >= HAL_CRC_LENGTH_16B)
 8006092:	2b0f      	cmp	r3, #15
 8006094:	d9eb      	bls.n	800606e <HAL_CRCEx_Polynomial_Set+0x52>
 8006096:	e7f6      	b.n	8006086 <HAL_CRCEx_Polynomial_Set+0x6a>
 8006098:	08026518 	.word	0x08026518

0800609c <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
  /* Check DAC handle */
  if(hdac == NULL)
 800609c:	b1d8      	cbz	r0, 80060d6 <HAL_DAC_Init+0x3a>
  {
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 800609e:	4b0f      	ldr	r3, [pc, #60]	; (80060dc <HAL_DAC_Init+0x40>)
 80060a0:	6802      	ldr	r2, [r0, #0]
 80060a2:	429a      	cmp	r2, r3
{ 
 80060a4:	b510      	push	{r4, lr}
 80060a6:	4604      	mov	r4, r0
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 80060a8:	d004      	beq.n	80060b4 <HAL_DAC_Init+0x18>
 80060aa:	f240 1113 	movw	r1, #275	; 0x113
 80060ae:	480c      	ldr	r0, [pc, #48]	; (80060e0 <HAL_DAC_Init+0x44>)
 80060b0:	f7fc feb8 	bl	8002e24 <assert_failed>
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80060b4:	7923      	ldrb	r3, [r4, #4]
 80060b6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80060ba:	b13b      	cbz	r3, 80060cc <HAL_DAC_Init+0x30>
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80060bc:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 80060be:	2102      	movs	r1, #2
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80060c0:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 80060c2:	7121      	strb	r1, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 80060c4:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80060c6:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 80060c8:	7122      	strb	r2, [r4, #4]
}
 80060ca:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED; 
 80060cc:	7162      	strb	r2, [r4, #5]
    HAL_DAC_MspInit(hdac);
 80060ce:	4620      	mov	r0, r4
 80060d0:	f7fd fda2 	bl	8003c18 <HAL_DAC_MspInit>
 80060d4:	e7f2      	b.n	80060bc <HAL_DAC_Init+0x20>
     return HAL_ERROR;
 80060d6:	2001      	movs	r0, #1
}
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	40007400 	.word	0x40007400
 80060e0:	08026554 	.word	0x08026554

080060e4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 80060e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060e8:	4699      	mov	r9, r3
  uint32_t tmpreg = 0;
    
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 80060ea:	f031 0310 	bics.w	r3, r1, #16
{
 80060ee:	460f      	mov	r7, r1
 80060f0:	4604      	mov	r4, r0
 80060f2:	4690      	mov	r8, r2
 80060f4:	9e08      	ldr	r6, [sp, #32]
  assert_param(IS_DAC_CHANNEL(Channel));
 80060f6:	d156      	bne.n	80061a6 <HAL_DAC_Start_DMA+0xc2>
  assert_param(IS_DAC_ALIGN(Alignment));
 80060f8:	f036 0304 	bics.w	r3, r6, #4
 80060fc:	d001      	beq.n	8006102 <HAL_DAC_Start_DMA+0x1e>
 80060fe:	2e08      	cmp	r6, #8
 8006100:	d146      	bne.n	8006190 <HAL_DAC_Start_DMA+0xac>
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8006102:	7962      	ldrb	r2, [r4, #5]
 8006104:	2a01      	cmp	r2, #1
 8006106:	d04b      	beq.n	80061a0 <HAL_DAC_Start_DMA+0xbc>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006108:	2302      	movs	r3, #2
  __HAL_LOCK(hdac);
 800610a:	2201      	movs	r2, #1
 800610c:	6825      	ldr	r5, [r4, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 800610e:	7123      	strb	r3, [r4, #4]
  __HAL_LOCK(hdac);
 8006110:	7162      	strb	r2, [r4, #5]

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8006112:	682b      	ldr	r3, [r5, #0]
  if(Channel == DAC_CHANNEL_1)
 8006114:	b9cf      	cbnz	r7, 800614a <HAL_DAC_Start_DMA+0x66>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8006116:	68a0      	ldr	r0, [r4, #8]
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8006118:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800611c:	4a2e      	ldr	r2, [pc, #184]	; (80061d8 <HAL_DAC_Start_DMA+0xf4>)
    
    /* Case of use of channel 1 */
    switch(Alignment)
 800611e:	2e04      	cmp	r6, #4
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8006120:	492e      	ldr	r1, [pc, #184]	; (80061dc <HAL_DAC_Start_DMA+0xf8>)
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8006122:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8006124:	4a2e      	ldr	r2, [pc, #184]	; (80061e0 <HAL_DAC_Start_DMA+0xfc>)
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8006126:	6401      	str	r1, [r0, #64]	; 0x40
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8006128:	64c2      	str	r2, [r0, #76]	; 0x4c
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 800612a:	602b      	str	r3, [r5, #0]
    switch(Alignment)
 800612c:	d050      	beq.n	80061d0 <HAL_DAC_Start_DMA+0xec>
 800612e:	2e08      	cmp	r6, #8
 8006130:	d04b      	beq.n	80061ca <HAL_DAC_Start_DMA+0xe6>
 8006132:	2e00      	cmp	r6, #0
 8006134:	d03d      	beq.n	80061b2 <HAL_DAC_Start_DMA+0xce>
        break;
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 8006136:	2200      	movs	r2, #0
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8006138:	682e      	ldr	r6, [r5, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800613a:	464b      	mov	r3, r9
 800613c:	4641      	mov	r1, r8
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800613e:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
 8006142:	602e      	str	r6, [r5, #0]
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8006144:	f000 fbda 	bl	80068fc <HAL_DMA_Start_IT>
 8006148:	e017      	b.n	800617a <HAL_DAC_Start_DMA+0x96>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800614a:	68e0      	ldr	r0, [r4, #12]
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 800614c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8006150:	4a24      	ldr	r2, [pc, #144]	; (80061e4 <HAL_DAC_Start_DMA+0x100>)
    switch(Alignment)
 8006152:	2e04      	cmp	r6, #4
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8006154:	4924      	ldr	r1, [pc, #144]	; (80061e8 <HAL_DAC_Start_DMA+0x104>)
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8006156:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8006158:	4a24      	ldr	r2, [pc, #144]	; (80061ec <HAL_DAC_Start_DMA+0x108>)
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800615a:	6401      	str	r1, [r0, #64]	; 0x40
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800615c:	64c2      	str	r2, [r0, #76]	; 0x4c
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 800615e:	602b      	str	r3, [r5, #0]
    switch(Alignment)
 8006160:	d030      	beq.n	80061c4 <HAL_DAC_Start_DMA+0xe0>
 8006162:	2e08      	cmp	r6, #8
 8006164:	d02b      	beq.n	80061be <HAL_DAC_Start_DMA+0xda>
 8006166:	b33e      	cbz	r6, 80061b8 <HAL_DAC_Start_DMA+0xd4>
  if(Channel == DAC_CHANNEL_1)
 8006168:	2200      	movs	r2, #0
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800616a:	682e      	ldr	r6, [r5, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800616c:	464b      	mov	r3, r9
 800616e:	4641      	mov	r1, r8
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006170:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8006174:	602e      	str	r6, [r5, #0]
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8006176:	f000 fbc1 	bl	80068fc <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800617a:	6822      	ldr	r2, [r4, #0]
 800617c:	2101      	movs	r1, #1
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800617e:	2300      	movs	r3, #0
  __HAL_DAC_ENABLE(hdac, Channel);
 8006180:	6815      	ldr	r5, [r2, #0]
 8006182:	40b9      	lsls	r1, r7
  
  /* Return function status */
  return HAL_OK;
 8006184:	4618      	mov	r0, r3
  __HAL_DAC_ENABLE(hdac, Channel);
 8006186:	4329      	orrs	r1, r5
 8006188:	6011      	str	r1, [r2, #0]
  __HAL_UNLOCK(hdac);
 800618a:	7163      	strb	r3, [r4, #5]
}
 800618c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_DAC_ALIGN(Alignment));
 8006190:	f240 210e 	movw	r1, #526	; 0x20e
 8006194:	4816      	ldr	r0, [pc, #88]	; (80061f0 <HAL_DAC_Start_DMA+0x10c>)
 8006196:	f7fc fe45 	bl	8002e24 <assert_failed>
  __HAL_LOCK(hdac);
 800619a:	7962      	ldrb	r2, [r4, #5]
 800619c:	2a01      	cmp	r2, #1
 800619e:	d1b3      	bne.n	8006108 <HAL_DAC_Start_DMA+0x24>
 80061a0:	2002      	movs	r0, #2
}
 80061a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 80061a6:	f240 210d 	movw	r1, #525	; 0x20d
 80061aa:	4811      	ldr	r0, [pc, #68]	; (80061f0 <HAL_DAC_Start_DMA+0x10c>)
 80061ac:	f7fc fe3a 	bl	8002e24 <assert_failed>
 80061b0:	e7a2      	b.n	80060f8 <HAL_DAC_Start_DMA+0x14>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80061b2:	f105 0208 	add.w	r2, r5, #8
        break;
 80061b6:	e7bf      	b.n	8006138 <HAL_DAC_Start_DMA+0x54>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80061b8:	f105 0214 	add.w	r2, r5, #20
        break;
 80061bc:	e7d5      	b.n	800616a <HAL_DAC_Start_DMA+0x86>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80061be:	f105 021c 	add.w	r2, r5, #28
        break;
 80061c2:	e7d2      	b.n	800616a <HAL_DAC_Start_DMA+0x86>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80061c4:	f105 0218 	add.w	r2, r5, #24
        break;
 80061c8:	e7cf      	b.n	800616a <HAL_DAC_Start_DMA+0x86>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80061ca:	f105 0210 	add.w	r2, r5, #16
        break;
 80061ce:	e7b3      	b.n	8006138 <HAL_DAC_Start_DMA+0x54>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80061d0:	f105 020c 	add.w	r2, r5, #12
        break;
 80061d4:	e7b0      	b.n	8006138 <HAL_DAC_Start_DMA+0x54>
 80061d6:	bf00      	nop
 80061d8:	08006269 	.word	0x08006269
 80061dc:	0800627d 	.word	0x0800627d
 80061e0:	0800628d 	.word	0x0800628d
 80061e4:	080063d5 	.word	0x080063d5
 80061e8:	080063e5 	.word	0x080063e5
 80061ec:	080063f1 	.word	0x080063f1
 80061f0:	08026554 	.word	0x08026554

080061f4 <HAL_DAC_Stop_DMA>:
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 80061f4:	f031 0310 	bics.w	r3, r1, #16
{
 80061f8:	b570      	push	{r4, r5, r6, lr}
 80061fa:	460c      	mov	r4, r1
 80061fc:	4605      	mov	r5, r0
  assert_param(IS_DAC_CHANNEL(Channel));
 80061fe:	d116      	bne.n	800622e <HAL_DAC_Stop_DMA+0x3a>
  
  /* Disable the selected DAC channel DMA request */
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8006200:	6803      	ldr	r3, [r0, #0]
 8006202:	f44f 5680 	mov.w	r6, #4096	; 0x1000
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8006206:	2201      	movs	r2, #1
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8006208:	6818      	ldr	r0, [r3, #0]
 800620a:	408e      	lsls	r6, r1
  __HAL_DAC_DISABLE(hdac, Channel);
 800620c:	fa02 f101 	lsl.w	r1, r2, r1
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8006210:	ea20 0006 	bic.w	r0, r0, r6
 8006214:	6018      	str	r0, [r3, #0]
  __HAL_DAC_DISABLE(hdac, Channel);
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	ea22 0201 	bic.w	r2, r2, r1
 800621c:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA Channel */
  /* Channel1 is used */
  if(Channel == DAC_CHANNEL_1)
 800621e:	b9cc      	cbnz	r4, 8006254 <HAL_DAC_Stop_DMA+0x60>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8006220:	68a8      	ldr	r0, [r5, #8]
 8006222:	f000 fbc5 	bl	80069b0 <HAL_DMA_Abort>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
  }

  /* Check if DMA Channel effectively disabled */
  if(status != HAL_OK)
 8006226:	b9d0      	cbnz	r0, 800625e <HAL_DAC_Stop_DMA+0x6a>
    hdac->State = HAL_DAC_STATE_ERROR;      
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8006228:	2301      	movs	r3, #1
 800622a:	712b      	strb	r3, [r5, #4]
  }

  /* Return function status */
  return status;
}
 800622c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 800622e:	f44f 7121 	mov.w	r1, #644	; 0x284
 8006232:	480c      	ldr	r0, [pc, #48]	; (8006264 <HAL_DAC_Stop_DMA+0x70>)
 8006234:	f7fc fdf6 	bl	8002e24 <assert_failed>
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8006238:	682b      	ldr	r3, [r5, #0]
 800623a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  __HAL_DAC_DISABLE(hdac, Channel);
 800623e:	2201      	movs	r2, #1
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8006240:	6819      	ldr	r1, [r3, #0]
 8006242:	40a0      	lsls	r0, r4
  __HAL_DAC_DISABLE(hdac, Channel);
 8006244:	40a2      	lsls	r2, r4
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8006246:	ea21 0100 	bic.w	r1, r1, r0
 800624a:	6019      	str	r1, [r3, #0]
  __HAL_DAC_DISABLE(hdac, Channel);
 800624c:	681c      	ldr	r4, [r3, #0]
 800624e:	ea24 0402 	bic.w	r4, r4, r2
 8006252:	601c      	str	r4, [r3, #0]
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
 8006254:	68e8      	ldr	r0, [r5, #12]
 8006256:	f000 fbab 	bl	80069b0 <HAL_DMA_Abort>
  if(status != HAL_OK)
 800625a:	2800      	cmp	r0, #0
 800625c:	d0e4      	beq.n	8006228 <HAL_DAC_Stop_DMA+0x34>
    hdac->State = HAL_DAC_STATE_ERROR;      
 800625e:	2304      	movs	r3, #4
 8006260:	712b      	strb	r3, [r5, #4]
}
 8006262:	bd70      	pop	{r4, r5, r6, pc}
 8006264:	08026554 	.word	0x08026554

08006268 <DAC_DMAConvCpltCh1>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8006268:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800626a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 800626c:	4620      	mov	r0, r4
 800626e:	f7fb fd41 	bl	8001cf4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8006272:	2301      	movs	r3, #1
 8006274:	7123      	strb	r3, [r4, #4]
}
 8006276:	bd10      	pop	{r4, pc}

08006278 <HAL_DAC_ConvHalfCpltCallbackCh1>:
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop

0800627c <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 800627c:	b508      	push	{r3, lr}
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 800627e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8006280:	f7ff fffa 	bl	8006278 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8006284:	bd08      	pop	{r3, pc}
 8006286:	bf00      	nop

08006288 <HAL_DAC_ErrorCallbackCh1>:
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop

0800628c <DAC_DMAErrorCh1>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 800628c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800628e:	6b84      	ldr	r4, [r0, #56]	; 0x38
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006290:	6923      	ldr	r3, [r4, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8006292:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006294:	f043 0304 	orr.w	r3, r3, #4
 8006298:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac); 
 800629a:	f7ff fff5 	bl	8006288 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 800629e:	2301      	movs	r3, #1
 80062a0:	7123      	strb	r3, [r4, #4]
}
 80062a2:	bd10      	pop	{r4, pc}

080062a4 <HAL_DAC_DMAUnderrunCallbackCh1>:
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop

080062a8 <HAL_DAC_IRQHandler>:
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80062a8:	6803      	ldr	r3, [r0, #0]
 80062aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062ac:	0491      	lsls	r1, r2, #18
{
 80062ae:	b510      	push	{r4, lr}
 80062b0:	4604      	mov	r4, r0
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80062b2:	d415      	bmi.n	80062e0 <HAL_DAC_IRQHandler+0x38>
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80062b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062b6:	0092      	lsls	r2, r2, #2
 80062b8:	d400      	bmi.n	80062bc <HAL_DAC_IRQHandler+0x14>
}
 80062ba:	bd10      	pop	{r4, pc}
    hdac->State = HAL_DAC_STATE_ERROR;
 80062bc:	2204      	movs	r2, #4
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 80062be:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80062c2:	4620      	mov	r0, r4
    hdac->State = HAL_DAC_STATE_ERROR;
 80062c4:	7122      	strb	r2, [r4, #4]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 80062c6:	6922      	ldr	r2, [r4, #16]
 80062c8:	f042 0202 	orr.w	r2, r2, #2
 80062cc:	6122      	str	r2, [r4, #16]
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 80062ce:	6359      	str	r1, [r3, #52]	; 0x34
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
}
 80062d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 80062da:	601a      	str	r2, [r3, #0]
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80062dc:	f000 b878 	b.w	80063d0 <HAL_DACEx_DMAUnderrunCallbackCh2>
    hdac->State = HAL_DAC_STATE_ERROR;
 80062e0:	2204      	movs	r2, #4
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 80062e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    hdac->State = HAL_DAC_STATE_ERROR;
 80062e6:	7102      	strb	r2, [r0, #4]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 80062e8:	6902      	ldr	r2, [r0, #16]
 80062ea:	f042 0201 	orr.w	r2, r2, #1
 80062ee:	6102      	str	r2, [r0, #16]
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 80062f0:	6359      	str	r1, [r3, #52]	; 0x34
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80062f8:	601a      	str	r2, [r3, #0]
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80062fa:	f7ff ffd3 	bl	80062a4 <HAL_DAC_DMAUnderrunCallbackCh1>
 80062fe:	6823      	ldr	r3, [r4, #0]
 8006300:	e7d8      	b.n	80062b4 <HAL_DAC_IRQHandler+0xc>
 8006302:	bf00      	nop

08006304 <HAL_DAC_ConfigChannel>:
{
 8006304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006306:	460e      	mov	r6, r1
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 8006308:	6809      	ldr	r1, [r1, #0]
{
 800630a:	4604      	mov	r4, r0
 800630c:	4615      	mov	r5, r2
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 800630e:	f031 0304 	bics.w	r3, r1, #4
 8006312:	f021 0008 	bic.w	r0, r1, #8
 8006316:	f021 0210 	bic.w	r2, r1, #16
 800631a:	bf14      	ite	ne
 800631c:	2301      	movne	r3, #1
 800631e:	2300      	moveq	r3, #0
 8006320:	2824      	cmp	r0, #36	; 0x24
 8006322:	bf0c      	ite	eq
 8006324:	2300      	moveq	r3, #0
 8006326:	f003 0301 	andne.w	r3, r3, #1
 800632a:	293c      	cmp	r1, #60	; 0x3c
 800632c:	bf0c      	ite	eq
 800632e:	2300      	moveq	r3, #0
 8006330:	f003 0301 	andne.w	r3, r3, #1
 8006334:	2a0c      	cmp	r2, #12
 8006336:	bf0c      	ite	eq
 8006338:	2300      	moveq	r3, #0
 800633a:	f003 0301 	andne.w	r3, r3, #1
 800633e:	b11b      	cbz	r3, 8006348 <HAL_DAC_ConfigChannel+0x44>
 8006340:	f021 0120 	bic.w	r1, r1, #32
 8006344:	2914      	cmp	r1, #20
 8006346:	d135      	bne.n	80063b4 <HAL_DAC_ConfigChannel+0xb0>
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 8006348:	6873      	ldr	r3, [r6, #4]
 800634a:	f033 0302 	bics.w	r3, r3, #2
 800634e:	d12b      	bne.n	80063a8 <HAL_DAC_ConfigChannel+0xa4>
  assert_param(IS_DAC_CHANNEL(Channel));
 8006350:	f035 0310 	bics.w	r3, r5, #16
 8006354:	d11e      	bne.n	8006394 <HAL_DAC_ConfigChannel+0x90>
  __HAL_LOCK(hdac);
 8006356:	7963      	ldrb	r3, [r4, #5]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d023      	beq.n	80063a4 <HAL_DAC_ConfigChannel+0xa0>
  tmpreg1 = hdac->Instance->CR;
 800635c:	6821      	ldr	r1, [r4, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 800635e:	2702      	movs	r7, #2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8006360:	f640 70fe 	movw	r0, #4094	; 0xffe
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8006364:	e9d6 3200 	ldrd	r3, r2, [r6]
  hdac->State = HAL_DAC_STATE_BUSY;
 8006368:	7127      	strb	r7, [r4, #4]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800636a:	fa00 f605 	lsl.w	r6, r0, r5
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800636e:	4313      	orrs	r3, r2
  tmpreg1 = hdac->Instance->CR;
 8006370:	6808      	ldr	r0, [r1, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8006372:	22c0      	movs	r2, #192	; 0xc0
  hdac->State = HAL_DAC_STATE_READY;
 8006374:	2701      	movs	r7, #1
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8006376:	ea20 0006 	bic.w	r0, r0, r6
  tmpreg1 |= tmpreg2 << Channel;
 800637a:	40ab      	lsls	r3, r5
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800637c:	40aa      	lsls	r2, r5
  __HAL_UNLOCK(hdac);
 800637e:	2600      	movs	r6, #0
  tmpreg1 |= tmpreg2 << Channel;
 8006380:	4303      	orrs	r3, r0
  return HAL_OK;
 8006382:	4630      	mov	r0, r6
  hdac->Instance->CR = tmpreg1;
 8006384:	600b      	str	r3, [r1, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8006386:	680d      	ldr	r5, [r1, #0]
 8006388:	ea25 0502 	bic.w	r5, r5, r2
 800638c:	600d      	str	r5, [r1, #0]
  hdac->State = HAL_DAC_STATE_READY;
 800638e:	7127      	strb	r7, [r4, #4]
  __HAL_UNLOCK(hdac);
 8006390:	7166      	strb	r6, [r4, #5]
}
 8006392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 8006394:	f44f 7157 	mov.w	r1, #860	; 0x35c
 8006398:	4809      	ldr	r0, [pc, #36]	; (80063c0 <HAL_DAC_ConfigChannel+0xbc>)
 800639a:	f7fc fd43 	bl	8002e24 <assert_failed>
  __HAL_LOCK(hdac);
 800639e:	7963      	ldrb	r3, [r4, #5]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d1db      	bne.n	800635c <HAL_DAC_ConfigChannel+0x58>
 80063a4:	2002      	movs	r0, #2
}
 80063a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 80063a8:	f240 315b 	movw	r1, #859	; 0x35b
 80063ac:	4804      	ldr	r0, [pc, #16]	; (80063c0 <HAL_DAC_ConfigChannel+0xbc>)
 80063ae:	f7fc fd39 	bl	8002e24 <assert_failed>
 80063b2:	e7cd      	b.n	8006350 <HAL_DAC_ConfigChannel+0x4c>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 80063b4:	f240 315a 	movw	r1, #858	; 0x35a
 80063b8:	4801      	ldr	r0, [pc, #4]	; (80063c0 <HAL_DAC_ConfigChannel+0xbc>)
 80063ba:	f7fc fd33 	bl	8002e24 <assert_failed>
 80063be:	e7c3      	b.n	8006348 <HAL_DAC_ConfigChannel+0x44>
 80063c0:	08026554 	.word	0x08026554

080063c4 <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop

080063c8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop

080063cc <HAL_DACEx_ErrorCallbackCh2>:
 80063cc:	4770      	bx	lr
 80063ce:	bf00      	nop

080063d0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop

080063d4 <DAC_DMAConvCpltCh2>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80063d4:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80063d6:	6b84      	ldr	r4, [r0, #56]	; 0x38
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 80063d8:	4620      	mov	r0, r4
 80063da:	f7ff fff3 	bl	80063c4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 80063de:	2301      	movs	r3, #1
 80063e0:	7123      	strb	r3, [r4, #4]
}
 80063e2:	bd10      	pop	{r4, pc}

080063e4 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80063e4:	b508      	push	{r3, lr}
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 80063e6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80063e8:	f7ff ffee 	bl	80063c8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80063ec:	bd08      	pop	{r3, pc}
 80063ee:	bf00      	nop

080063f0 <DAC_DMAErrorCh2>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 80063f0:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80063f2:	6b84      	ldr	r4, [r0, #56]	; 0x38
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80063f4:	6923      	ldr	r3, [r4, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 80063f6:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80063f8:	f043 0304 	orr.w	r3, r3, #4
 80063fc:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 80063fe:	f7ff ffe5 	bl	80063cc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8006402:	2301      	movs	r3, #1
 8006404:	7123      	strb	r3, [r4, #4]
}
 8006406:	bd10      	pop	{r4, pc}

08006408 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800640a:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 800640c:	f7ff f8b0 	bl	8005570 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006410:	2c00      	cmp	r4, #0
 8006412:	f000 812b 	beq.w	800666c <HAL_DMA_Init+0x264>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8006416:	6822      	ldr	r2, [r4, #0]
 8006418:	4605      	mov	r5, r0
 800641a:	4bbd      	ldr	r3, [pc, #756]	; (8006710 <HAL_DMA_Init+0x308>)
 800641c:	48bd      	ldr	r0, [pc, #756]	; (8006714 <HAL_DMA_Init+0x30c>)
 800641e:	49be      	ldr	r1, [pc, #760]	; (8006718 <HAL_DMA_Init+0x310>)
 8006420:	429a      	cmp	r2, r3
 8006422:	bf18      	it	ne
 8006424:	4282      	cmpne	r2, r0
 8006426:	f100 0030 	add.w	r0, r0, #48	; 0x30
 800642a:	bf14      	ite	ne
 800642c:	2301      	movne	r3, #1
 800642e:	2300      	moveq	r3, #0
 8006430:	428a      	cmp	r2, r1
 8006432:	bf0c      	ite	eq
 8006434:	2300      	moveq	r3, #0
 8006436:	f003 0301 	andne.w	r3, r3, #1
 800643a:	3130      	adds	r1, #48	; 0x30
 800643c:	4282      	cmp	r2, r0
 800643e:	bf0c      	ite	eq
 8006440:	2300      	moveq	r3, #0
 8006442:	f003 0301 	andne.w	r3, r3, #1
 8006446:	3030      	adds	r0, #48	; 0x30
 8006448:	428a      	cmp	r2, r1
 800644a:	bf0c      	ite	eq
 800644c:	2300      	moveq	r3, #0
 800644e:	f003 0301 	andne.w	r3, r3, #1
 8006452:	3130      	adds	r1, #48	; 0x30
 8006454:	4282      	cmp	r2, r0
 8006456:	bf0c      	ite	eq
 8006458:	2300      	moveq	r3, #0
 800645a:	f003 0301 	andne.w	r3, r3, #1
 800645e:	3030      	adds	r0, #48	; 0x30
 8006460:	428a      	cmp	r2, r1
 8006462:	bf0c      	ite	eq
 8006464:	2300      	moveq	r3, #0
 8006466:	f003 0301 	andne.w	r3, r3, #1
 800646a:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800646e:	4282      	cmp	r2, r0
 8006470:	bf0c      	ite	eq
 8006472:	2300      	moveq	r3, #0
 8006474:	f003 0301 	andne.w	r3, r3, #1
 8006478:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800647c:	428a      	cmp	r2, r1
 800647e:	bf0c      	ite	eq
 8006480:	2300      	moveq	r3, #0
 8006482:	f003 0301 	andne.w	r3, r3, #1
 8006486:	3130      	adds	r1, #48	; 0x30
 8006488:	4282      	cmp	r2, r0
 800648a:	bf0c      	ite	eq
 800648c:	2300      	moveq	r3, #0
 800648e:	f003 0301 	andne.w	r3, r3, #1
 8006492:	3030      	adds	r0, #48	; 0x30
 8006494:	428a      	cmp	r2, r1
 8006496:	bf0c      	ite	eq
 8006498:	2300      	moveq	r3, #0
 800649a:	f003 0301 	andne.w	r3, r3, #1
 800649e:	3130      	adds	r1, #48	; 0x30
 80064a0:	4282      	cmp	r2, r0
 80064a2:	bf0c      	ite	eq
 80064a4:	2300      	moveq	r3, #0
 80064a6:	f003 0301 	andne.w	r3, r3, #1
 80064aa:	3030      	adds	r0, #48	; 0x30
 80064ac:	428a      	cmp	r2, r1
 80064ae:	bf0c      	ite	eq
 80064b0:	2300      	moveq	r3, #0
 80064b2:	f003 0301 	andne.w	r3, r3, #1
 80064b6:	3130      	adds	r1, #48	; 0x30
 80064b8:	4282      	cmp	r2, r0
 80064ba:	bf0c      	ite	eq
 80064bc:	2300      	moveq	r3, #0
 80064be:	f003 0301 	andne.w	r3, r3, #1
 80064c2:	428a      	cmp	r2, r1
 80064c4:	bf0c      	ite	eq
 80064c6:	2300      	moveq	r3, #0
 80064c8:	f003 0301 	andne.w	r3, r3, #1
 80064cc:	b11b      	cbz	r3, 80064d6 <HAL_DMA_Init+0xce>
 80064ce:	4b93      	ldr	r3, [pc, #588]	; (800671c <HAL_DMA_Init+0x314>)
 80064d0:	429a      	cmp	r2, r3
 80064d2:	f040 8140 	bne.w	8006756 <HAL_DMA_Init+0x34e>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80064d6:	6863      	ldr	r3, [r4, #4]
 80064d8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80064dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064e0:	bf18      	it	ne
 80064e2:	2b00      	cmpne	r3, #0
 80064e4:	bf14      	ite	ne
 80064e6:	2201      	movne	r2, #1
 80064e8:	2200      	moveq	r2, #0
 80064ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064ee:	bf0c      	ite	eq
 80064f0:	2200      	moveq	r2, #0
 80064f2:	f002 0201 	andne.w	r2, r2, #1
 80064f6:	b11a      	cbz	r2, 8006500 <HAL_DMA_Init+0xf8>
 80064f8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80064fc:	f040 8130 	bne.w	8006760 <HAL_DMA_Init+0x358>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8006500:	68a3      	ldr	r3, [r4, #8]
 8006502:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 8006506:	d002      	beq.n	800650e <HAL_DMA_Init+0x106>
 8006508:	2b80      	cmp	r3, #128	; 0x80
 800650a:	f040 80b1 	bne.w	8006670 <HAL_DMA_Init+0x268>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800650e:	68e3      	ldr	r3, [r4, #12]
 8006510:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8006514:	f040 8091 	bne.w	800663a <HAL_DMA_Init+0x232>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8006518:	6923      	ldr	r3, [r4, #16]
 800651a:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800651e:	f040 8082 	bne.w	8006626 <HAL_DMA_Init+0x21e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8006522:	6963      	ldr	r3, [r4, #20]
 8006524:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8006528:	d003      	beq.n	8006532 <HAL_DMA_Init+0x12a>
 800652a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800652e:	f040 80a9 	bne.w	8006684 <HAL_DMA_Init+0x27c>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8006532:	69a3      	ldr	r3, [r4, #24]
 8006534:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 8006538:	d003      	beq.n	8006542 <HAL_DMA_Init+0x13a>
 800653a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800653e:	f040 80ab 	bne.w	8006698 <HAL_DMA_Init+0x290>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8006542:	69e3      	ldr	r3, [r4, #28]
 8006544:	f033 0220 	bics.w	r2, r3, #32
 8006548:	d003      	beq.n	8006552 <HAL_DMA_Init+0x14a>
 800654a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800654e:	f040 80ad 	bne.w	80066ac <HAL_DMA_Init+0x2a4>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8006552:	6a23      	ldr	r3, [r4, #32]
 8006554:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8006558:	f040 80b1 	bne.w	80066be <HAL_DMA_Init+0x2b6>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800655c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800655e:	f033 0204 	bics.w	r2, r3, #4
 8006562:	d174      	bne.n	800664e <HAL_DMA_Init+0x246>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8006564:	2b00      	cmp	r3, #0
 8006566:	d14c      	bne.n	8006602 <HAL_DMA_Init+0x1fa>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006568:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800656a:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 800656c:	2100      	movs	r1, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 800656e:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8006572:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 8006574:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8006578:	f022 0201 	bic.w	r2, r2, #1
 800657c:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800657e:	e005      	b.n	800658c <HAL_DMA_Init+0x184>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006580:	f7fe fff6 	bl	8005570 <HAL_GetTick>
 8006584:	1b40      	subs	r0, r0, r5
 8006586:	2805      	cmp	r0, #5
 8006588:	d869      	bhi.n	800665e <HAL_DMA_Init+0x256>
 800658a:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	07d1      	lsls	r1, r2, #31
 8006590:	d4f6      	bmi.n	8006580 <HAL_DMA_Init+0x178>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006592:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8006596:	68e1      	ldr	r1, [r4, #12]
 8006598:	4302      	orrs	r2, r0
  tmp = hdma->Instance->CR;
 800659a:	681f      	ldr	r7, [r3, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800659c:	e9d4 0504 	ldrd	r0, r5, [r4, #16]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80065a0:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065a2:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;
 80065a4:	6a20      	ldr	r0, [r4, #32]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065a6:	e9d4 6106 	ldrd	r6, r1, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065aa:	432a      	orrs	r2, r5
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80065ac:	4d5c      	ldr	r5, [pc, #368]	; (8006720 <HAL_DMA_Init+0x318>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065ae:	4332      	orrs	r2, r6
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80065b0:	403d      	ands	r5, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065b2:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80065b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hdma->Init.Mode                | hdma->Init.Priority;
 80065b6:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80065b8:	2904      	cmp	r1, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80065ba:	ea42 0205 	orr.w	r2, r2, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80065be:	f000 8083 	beq.w	80066c8 <HAL_DMA_Init+0x2c0>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80065c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80065c4:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80065c6:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80065ca:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80065cc:	b2da      	uxtb	r2, r3
 80065ce:	4d55      	ldr	r5, [pc, #340]	; (8006724 <HAL_DMA_Init+0x31c>)
  hdma->Instance->FCR = tmp;
 80065d0:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80065d2:	3a10      	subs	r2, #16
 80065d4:	4954      	ldr	r1, [pc, #336]	; (8006728 <HAL_DMA_Init+0x320>)
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80065d6:	4855      	ldr	r0, [pc, #340]	; (800672c <HAL_DMA_Init+0x324>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80065d8:	fba5 5202 	umull	r5, r2, r5, r2
 80065dc:	4019      	ands	r1, r3
  hdma->State = HAL_DMA_STATE_READY;
 80065de:	2501      	movs	r5, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80065e0:	0913      	lsrs	r3, r2, #4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065e2:	2200      	movs	r2, #0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80065e4:	5cc0      	ldrb	r0, [r0, r3]
  
  if (stream_number > 3U)
 80065e6:	2b03      	cmp	r3, #3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80065e8:	f04f 033f 	mov.w	r3, #63	; 0x3f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80065ec:	bf88      	it	hi
 80065ee:	3104      	addhi	r1, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80065f0:	65e0      	str	r0, [r4, #92]	; 0x5c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80065f2:	4083      	lsls	r3, r0
  return HAL_OK;
 80065f4:	4610      	mov	r0, r2
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80065f6:	65a1      	str	r1, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80065f8:	608b      	str	r3, [r1, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065fa:	6562      	str	r2, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80065fc:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 8006600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8006602:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006604:	2b03      	cmp	r3, #3
 8006606:	f200 8095 	bhi.w	8006734 <HAL_DMA_Init+0x32c>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 800660a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800660c:	f033 73c0 	bics.w	r3, r3, #25165824	; 0x1800000
 8006610:	f040 8095 	bne.w	800673e <HAL_DMA_Init+0x336>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8006614:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006616:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 800661a:	d0a5      	beq.n	8006568 <HAL_DMA_Init+0x160>
 800661c:	21c9      	movs	r1, #201	; 0xc9
 800661e:	4844      	ldr	r0, [pc, #272]	; (8006730 <HAL_DMA_Init+0x328>)
 8006620:	f7fc fc00 	bl	8002e24 <assert_failed>
 8006624:	e7a0      	b.n	8006568 <HAL_DMA_Init+0x160>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8006626:	21bd      	movs	r1, #189	; 0xbd
 8006628:	4841      	ldr	r0, [pc, #260]	; (8006730 <HAL_DMA_Init+0x328>)
 800662a:	f7fc fbfb 	bl	8002e24 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800662e:	6963      	ldr	r3, [r4, #20]
 8006630:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8006634:	f47f af79 	bne.w	800652a <HAL_DMA_Init+0x122>
 8006638:	e77b      	b.n	8006532 <HAL_DMA_Init+0x12a>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800663a:	21bc      	movs	r1, #188	; 0xbc
 800663c:	483c      	ldr	r0, [pc, #240]	; (8006730 <HAL_DMA_Init+0x328>)
 800663e:	f7fc fbf1 	bl	8002e24 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8006642:	6923      	ldr	r3, [r4, #16]
 8006644:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8006648:	f43f af6b 	beq.w	8006522 <HAL_DMA_Init+0x11a>
 800664c:	e7eb      	b.n	8006626 <HAL_DMA_Init+0x21e>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800664e:	21c2      	movs	r1, #194	; 0xc2
 8006650:	4837      	ldr	r0, [pc, #220]	; (8006730 <HAL_DMA_Init+0x328>)
 8006652:	f7fc fbe7 	bl	8002e24 <assert_failed>
 8006656:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8006658:	2b00      	cmp	r3, #0
 800665a:	d085      	beq.n	8006568 <HAL_DMA_Init+0x160>
 800665c:	e7d1      	b.n	8006602 <HAL_DMA_Init+0x1fa>
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800665e:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006660:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8006662:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006664:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006666:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800666a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800666c:	2001      	movs	r0, #1
}
 800666e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8006670:	21bb      	movs	r1, #187	; 0xbb
 8006672:	482f      	ldr	r0, [pc, #188]	; (8006730 <HAL_DMA_Init+0x328>)
 8006674:	f7fc fbd6 	bl	8002e24 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8006678:	68e3      	ldr	r3, [r4, #12]
 800667a:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800667e:	f43f af4b 	beq.w	8006518 <HAL_DMA_Init+0x110>
 8006682:	e7da      	b.n	800663a <HAL_DMA_Init+0x232>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8006684:	21be      	movs	r1, #190	; 0xbe
 8006686:	482a      	ldr	r0, [pc, #168]	; (8006730 <HAL_DMA_Init+0x328>)
 8006688:	f7fc fbcc 	bl	8002e24 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800668c:	69a3      	ldr	r3, [r4, #24]
 800668e:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 8006692:	f47f af52 	bne.w	800653a <HAL_DMA_Init+0x132>
 8006696:	e754      	b.n	8006542 <HAL_DMA_Init+0x13a>
 8006698:	21bf      	movs	r1, #191	; 0xbf
 800669a:	4825      	ldr	r0, [pc, #148]	; (8006730 <HAL_DMA_Init+0x328>)
 800669c:	f7fc fbc2 	bl	8002e24 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80066a0:	69e3      	ldr	r3, [r4, #28]
 80066a2:	f033 0220 	bics.w	r2, r3, #32
 80066a6:	f47f af50 	bne.w	800654a <HAL_DMA_Init+0x142>
 80066aa:	e752      	b.n	8006552 <HAL_DMA_Init+0x14a>
 80066ac:	21c0      	movs	r1, #192	; 0xc0
 80066ae:	4820      	ldr	r0, [pc, #128]	; (8006730 <HAL_DMA_Init+0x328>)
 80066b0:	f7fc fbb8 	bl	8002e24 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80066b4:	6a23      	ldr	r3, [r4, #32]
 80066b6:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 80066ba:	f43f af4f 	beq.w	800655c <HAL_DMA_Init+0x154>
 80066be:	21c1      	movs	r1, #193	; 0xc1
 80066c0:	481b      	ldr	r0, [pc, #108]	; (8006730 <HAL_DMA_Init+0x328>)
 80066c2:	f7fc fbaf 	bl	8002e24 <assert_failed>
 80066c6:	e749      	b.n	800655c <HAL_DMA_Init+0x154>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80066c8:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80066cc:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80066ce:	ea45 0001 	orr.w	r0, r5, r1
    tmp |= hdma->Init.FIFOThreshold;
 80066d2:	f047 0104 	orr.w	r1, r7, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80066d6:	4302      	orrs	r2, r0
  hdma->Instance->CR = tmp;  
 80066d8:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80066da:	695a      	ldr	r2, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80066dc:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 80066e0:	4311      	orrs	r1, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80066e2:	2d00      	cmp	r5, #0
 80066e4:	f43f af72 	beq.w	80065cc <HAL_DMA_Init+0x1c4>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80066e8:	b376      	cbz	r6, 8006748 <HAL_DMA_Init+0x340>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80066ea:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 80066ee:	d041      	beq.n	8006774 <HAL_DMA_Init+0x36c>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80066f0:	2f02      	cmp	r7, #2
 80066f2:	d905      	bls.n	8006700 <HAL_DMA_Init+0x2f8>
 80066f4:	2f03      	cmp	r7, #3
 80066f6:	f47f af69 	bne.w	80065cc <HAL_DMA_Init+0x1c4>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80066fa:	01ea      	lsls	r2, r5, #7
 80066fc:	f57f af66 	bpl.w	80065cc <HAL_DMA_Init+0x1c4>
        hdma->State = HAL_DMA_STATE_READY;
 8006700:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006702:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 8006704:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006706:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8006708:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800670c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800670e:	bf00      	nop
 8006710:	40026010 	.word	0x40026010
 8006714:	40026028 	.word	0x40026028
 8006718:	40026040 	.word	0x40026040
 800671c:	400264b8 	.word	0x400264b8
 8006720:	e010803f 	.word	0xe010803f
 8006724:	aaaaaaab 	.word	0xaaaaaaab
 8006728:	fffffc00 	.word	0xfffffc00
 800672c:	080265c4 	.word	0x080265c4
 8006730:	0802658c 	.word	0x0802658c
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8006734:	21c7      	movs	r1, #199	; 0xc7
 8006736:	4816      	ldr	r0, [pc, #88]	; (8006790 <HAL_DMA_Init+0x388>)
 8006738:	f7fc fb74 	bl	8002e24 <assert_failed>
 800673c:	e765      	b.n	800660a <HAL_DMA_Init+0x202>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 800673e:	21c8      	movs	r1, #200	; 0xc8
 8006740:	4813      	ldr	r0, [pc, #76]	; (8006790 <HAL_DMA_Init+0x388>)
 8006742:	f7fc fb6f 	bl	8002e24 <assert_failed>
 8006746:	e765      	b.n	8006614 <HAL_DMA_Init+0x20c>
    switch (tmp)
 8006748:	2f01      	cmp	r7, #1
 800674a:	d00e      	beq.n	800676a <HAL_DMA_Init+0x362>
 800674c:	d3d5      	bcc.n	80066fa <HAL_DMA_Init+0x2f2>
 800674e:	2f02      	cmp	r7, #2
 8006750:	f47f af3c 	bne.w	80065cc <HAL_DMA_Init+0x1c4>
 8006754:	e7d1      	b.n	80066fa <HAL_DMA_Init+0x2f2>
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8006756:	21b9      	movs	r1, #185	; 0xb9
 8006758:	480d      	ldr	r0, [pc, #52]	; (8006790 <HAL_DMA_Init+0x388>)
 800675a:	f7fc fb63 	bl	8002e24 <assert_failed>
 800675e:	e6ba      	b.n	80064d6 <HAL_DMA_Init+0xce>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8006760:	21ba      	movs	r1, #186	; 0xba
 8006762:	480b      	ldr	r0, [pc, #44]	; (8006790 <HAL_DMA_Init+0x388>)
 8006764:	f7fc fb5e 	bl	8002e24 <assert_failed>
 8006768:	e6ca      	b.n	8006500 <HAL_DMA_Init+0xf8>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800676a:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 800676e:	f47f af2d 	bne.w	80065cc <HAL_DMA_Init+0x1c4>
 8006772:	e7c5      	b.n	8006700 <HAL_DMA_Init+0x2f8>
    switch (tmp)
 8006774:	2f03      	cmp	r7, #3
 8006776:	f63f af29 	bhi.w	80065cc <HAL_DMA_Init+0x1c4>
 800677a:	a201      	add	r2, pc, #4	; (adr r2, 8006780 <HAL_DMA_Init+0x378>)
 800677c:	f852 f027 	ldr.w	pc, [r2, r7, lsl #2]
 8006780:	08006701 	.word	0x08006701
 8006784:	080066fb 	.word	0x080066fb
 8006788:	08006701 	.word	0x08006701
 800678c:	0800676b 	.word	0x0800676b
 8006790:	0802658c 	.word	0x0802658c

08006794 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 8006794:	2800      	cmp	r0, #0
 8006796:	f000 8094 	beq.w	80068c2 <HAL_DMA_DeInit+0x12e>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800679a:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	f000 8090 	beq.w	80068c6 <HAL_DMA_DeInit+0x132>
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80067a6:	6802      	ldr	r2, [r0, #0]
 80067a8:	4b4b      	ldr	r3, [pc, #300]	; (80068d8 <HAL_DMA_DeInit+0x144>)
 80067aa:	494c      	ldr	r1, [pc, #304]	; (80068dc <HAL_DMA_DeInit+0x148>)
{
 80067ac:	b570      	push	{r4, r5, r6, lr}
 80067ae:	4604      	mov	r4, r0
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80067b0:	484b      	ldr	r0, [pc, #300]	; (80068e0 <HAL_DMA_DeInit+0x14c>)
 80067b2:	4d4c      	ldr	r5, [pc, #304]	; (80068e4 <HAL_DMA_DeInit+0x150>)
 80067b4:	429a      	cmp	r2, r3
 80067b6:	bf18      	it	ne
 80067b8:	4282      	cmpne	r2, r0
 80067ba:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80067be:	bf14      	ite	ne
 80067c0:	2301      	movne	r3, #1
 80067c2:	2300      	moveq	r3, #0
 80067c4:	428a      	cmp	r2, r1
 80067c6:	bf0c      	ite	eq
 80067c8:	2300      	moveq	r3, #0
 80067ca:	f003 0301 	andne.w	r3, r3, #1
 80067ce:	3148      	adds	r1, #72	; 0x48
 80067d0:	42aa      	cmp	r2, r5
 80067d2:	bf0c      	ite	eq
 80067d4:	2300      	moveq	r3, #0
 80067d6:	f003 0301 	andne.w	r3, r3, #1
 80067da:	3548      	adds	r5, #72	; 0x48
 80067dc:	4282      	cmp	r2, r0
 80067de:	bf0c      	ite	eq
 80067e0:	2300      	moveq	r3, #0
 80067e2:	f003 0301 	andne.w	r3, r3, #1
 80067e6:	3048      	adds	r0, #72	; 0x48
 80067e8:	428a      	cmp	r2, r1
 80067ea:	bf0c      	ite	eq
 80067ec:	2300      	moveq	r3, #0
 80067ee:	f003 0301 	andne.w	r3, r3, #1
 80067f2:	f501 7162 	add.w	r1, r1, #904	; 0x388
 80067f6:	42aa      	cmp	r2, r5
 80067f8:	bf0c      	ite	eq
 80067fa:	2300      	moveq	r3, #0
 80067fc:	f003 0301 	andne.w	r3, r3, #1
 8006800:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8006804:	4282      	cmp	r2, r0
 8006806:	bf0c      	ite	eq
 8006808:	2300      	moveq	r3, #0
 800680a:	f003 0301 	andne.w	r3, r3, #1
 800680e:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8006812:	428a      	cmp	r2, r1
 8006814:	bf0c      	ite	eq
 8006816:	2300      	moveq	r3, #0
 8006818:	f003 0301 	andne.w	r3, r3, #1
 800681c:	3148      	adds	r1, #72	; 0x48
 800681e:	42aa      	cmp	r2, r5
 8006820:	bf0c      	ite	eq
 8006822:	2300      	moveq	r3, #0
 8006824:	f003 0301 	andne.w	r3, r3, #1
 8006828:	3548      	adds	r5, #72	; 0x48
 800682a:	4282      	cmp	r2, r0
 800682c:	bf0c      	ite	eq
 800682e:	2300      	moveq	r3, #0
 8006830:	f003 0301 	andne.w	r3, r3, #1
 8006834:	3048      	adds	r0, #72	; 0x48
 8006836:	428a      	cmp	r2, r1
 8006838:	bf0c      	ite	eq
 800683a:	2300      	moveq	r3, #0
 800683c:	f003 0301 	andne.w	r3, r3, #1
 8006840:	3148      	adds	r1, #72	; 0x48
 8006842:	42aa      	cmp	r2, r5
 8006844:	bf0c      	ite	eq
 8006846:	2300      	moveq	r3, #0
 8006848:	f003 0301 	andne.w	r3, r3, #1
 800684c:	4282      	cmp	r2, r0
 800684e:	bf0c      	ite	eq
 8006850:	2300      	moveq	r3, #0
 8006852:	f003 0301 	andne.w	r3, r3, #1
 8006856:	428a      	cmp	r2, r1
 8006858:	bf0c      	ite	eq
 800685a:	2300      	moveq	r3, #0
 800685c:	f003 0301 	andne.w	r3, r3, #1
 8006860:	b113      	cbz	r3, 8006868 <HAL_DMA_DeInit+0xd4>
 8006862:	4b21      	ldr	r3, [pc, #132]	; (80068e8 <HAL_DMA_DeInit+0x154>)
 8006864:	429a      	cmp	r2, r3
 8006866:	d130      	bne.n	80068ca <HAL_DMA_DeInit+0x136>
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006868:	b2d3      	uxtb	r3, r2
  __HAL_DMA_DISABLE(hdma);
 800686a:	6811      	ldr	r1, [r2, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800686c:	4d1f      	ldr	r5, [pc, #124]	; (80068ec <HAL_DMA_DeInit+0x158>)
  hdma->Instance->CR   = 0U;
 800686e:	2000      	movs	r0, #0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006870:	3b10      	subs	r3, #16
  __HAL_DMA_DISABLE(hdma);
 8006872:	f021 0101 	bic.w	r1, r1, #1
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8006876:	2621      	movs	r6, #33	; 0x21
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006878:	fba5 5303 	umull	r5, r3, r5, r3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800687c:	4d1c      	ldr	r5, [pc, #112]	; (80068f0 <HAL_DMA_DeInit+0x15c>)
  __HAL_DMA_DISABLE(hdma);
 800687e:	6011      	str	r1, [r2, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006880:	091b      	lsrs	r3, r3, #4
 8006882:	491c      	ldr	r1, [pc, #112]	; (80068f4 <HAL_DMA_DeInit+0x160>)
  hdma->Instance->CR   = 0U;
 8006884:	6010      	str	r0, [r2, #0]
 8006886:	4011      	ands	r1, r2
  hdma->Instance->NDTR = 0U;
 8006888:	6050      	str	r0, [r2, #4]
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800688a:	5ced      	ldrb	r5, [r5, r3]
  if (stream_number > 3U)
 800688c:	2b03      	cmp	r3, #3
  hdma->Instance->PAR  = 0U;
 800688e:	6090      	str	r0, [r2, #8]
  hdma->XferCpltCallback = NULL;
 8006890:	f04f 0300 	mov.w	r3, #0
  hdma->Instance->M0AR = 0U;
 8006894:	60d0      	str	r0, [r2, #12]
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006896:	bf88      	it	hi
 8006898:	3104      	addhi	r1, #4
  hdma->Instance->M1AR = 0U;
 800689a:	6110      	str	r0, [r2, #16]
  return HAL_OK;
 800689c:	4618      	mov	r0, r3
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800689e:	6156      	str	r6, [r2, #20]
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80068a0:	223f      	movs	r2, #63	; 0x3f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80068a2:	65e5      	str	r5, [r4, #92]	; 0x5c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80068a4:	40aa      	lsls	r2, r5
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80068a6:	65a1      	str	r1, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80068a8:	608a      	str	r2, [r1, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80068aa:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 80068ac:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 80068b0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 80068b4:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 80068b8:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 80068bc:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
}
 80068c0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80068c2:	2001      	movs	r0, #1
 80068c4:	4770      	bx	lr
    return HAL_BUSY;
 80068c6:	4618      	mov	r0, r3
}
 80068c8:	4770      	bx	lr
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80068ca:	f240 1149 	movw	r1, #329	; 0x149
 80068ce:	480a      	ldr	r0, [pc, #40]	; (80068f8 <HAL_DMA_DeInit+0x164>)
 80068d0:	f7fc faa8 	bl	8002e24 <assert_failed>
 80068d4:	6822      	ldr	r2, [r4, #0]
 80068d6:	e7c7      	b.n	8006868 <HAL_DMA_DeInit+0xd4>
 80068d8:	40026010 	.word	0x40026010
 80068dc:	40026040 	.word	0x40026040
 80068e0:	40026028 	.word	0x40026028
 80068e4:	40026058 	.word	0x40026058
 80068e8:	400264b8 	.word	0x400264b8
 80068ec:	aaaaaaab 	.word	0xaaaaaaab
 80068f0:	080265c4 	.word	0x080265c4
 80068f4:	fffffc00 	.word	0xfffffc00
 80068f8:	0802658c 	.word	0x0802658c

080068fc <HAL_DMA_Start_IT>:
{
 80068fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006900:	461d      	mov	r5, r3
 8006902:	460f      	mov	r7, r1
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8006904:	f64f 73fe 	movw	r3, #65534	; 0xfffe
{
 8006908:	4604      	mov	r4, r0
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800690a:	1e69      	subs	r1, r5, #1
{
 800690c:	4690      	mov	r8, r2
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800690e:	6d86      	ldr	r6, [r0, #88]	; 0x58
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8006910:	4299      	cmp	r1, r3
 8006912:	d83a      	bhi.n	800698a <HAL_DMA_Start_IT+0x8e>
  __HAL_LOCK(hdma);
 8006914:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8006918:	2b01      	cmp	r3, #1
 800691a:	d03f      	beq.n	800699c <HAL_DMA_Start_IT+0xa0>
 800691c:	2201      	movs	r2, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800691e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8006922:	4293      	cmp	r3, r2
  __HAL_LOCK(hdma);
 8006924:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8006928:	d129      	bne.n	800697e <HAL_DMA_Start_IT+0x82>
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800692a:	6821      	ldr	r1, [r4, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 800692c:	2202      	movs	r2, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800692e:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8006930:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006934:	6563      	str	r3, [r4, #84]	; 0x54
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006936:	68a2      	ldr	r2, [r4, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006938:	680b      	ldr	r3, [r1, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800693a:	2a40      	cmp	r2, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800693c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006940:	600b      	str	r3, [r1, #0]
  hdma->Instance->NDTR = DataLength;
 8006942:	604d      	str	r5, [r1, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006944:	d02d      	beq.n	80069a2 <HAL_DMA_Start_IT+0xa6>
    hdma->Instance->PAR = SrcAddress;
 8006946:	608f      	str	r7, [r1, #8]
    hdma->Instance->M0AR = DstAddress;
 8006948:	f8c1 800c 	str.w	r8, [r1, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800694c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800694e:	233f      	movs	r3, #63	; 0x3f
    if(hdma->XferHalfCpltCallback != NULL)
 8006950:	6c22      	ldr	r2, [r4, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006952:	4083      	lsls	r3, r0
 8006954:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006956:	680b      	ldr	r3, [r1, #0]
 8006958:	f043 0316 	orr.w	r3, r3, #22
 800695c:	600b      	str	r3, [r1, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800695e:	694b      	ldr	r3, [r1, #20]
 8006960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006964:	614b      	str	r3, [r1, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8006966:	b11a      	cbz	r2, 8006970 <HAL_DMA_Start_IT+0x74>
      hdma->Instance->CR  |= DMA_IT_HT;
 8006968:	680b      	ldr	r3, [r1, #0]
 800696a:	f043 0308 	orr.w	r3, r3, #8
 800696e:	600b      	str	r3, [r1, #0]
    __HAL_DMA_ENABLE(hdma);
 8006970:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006972:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8006974:	f043 0301 	orr.w	r3, r3, #1
 8006978:	600b      	str	r3, [r1, #0]
}
 800697a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_UNLOCK(hdma);	  
 800697e:	2300      	movs	r3, #0
    status = HAL_BUSY;
 8006980:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);	  
 8006982:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8006986:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800698a:	f240 11cd 	movw	r1, #461	; 0x1cd
 800698e:	4807      	ldr	r0, [pc, #28]	; (80069ac <HAL_DMA_Start_IT+0xb0>)
 8006990:	f7fc fa48 	bl	8002e24 <assert_failed>
  __HAL_LOCK(hdma);
 8006994:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8006998:	2b01      	cmp	r3, #1
 800699a:	d1bf      	bne.n	800691c <HAL_DMA_Start_IT+0x20>
 800699c:	2002      	movs	r0, #2
}
 800699e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hdma->Instance->PAR = DstAddress;
 80069a2:	f8c1 8008 	str.w	r8, [r1, #8]
    hdma->Instance->M0AR = SrcAddress;
 80069a6:	60cf      	str	r7, [r1, #12]
 80069a8:	e7d0      	b.n	800694c <HAL_DMA_Start_IT+0x50>
 80069aa:	bf00      	nop
 80069ac:	0802658c 	.word	0x0802658c

080069b0 <HAL_DMA_Abort>:
{
 80069b0:	b570      	push	{r4, r5, r6, lr}
 80069b2:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80069b4:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 80069b6:	f7fe fddb 	bl	8005570 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80069ba:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80069be:	2b02      	cmp	r3, #2
 80069c0:	d006      	beq.n	80069d0 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80069c2:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 80069c4:	2300      	movs	r3, #0
    return HAL_ERROR;
 80069c6:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80069c8:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80069ca:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80069ce:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80069d0:	6823      	ldr	r3, [r4, #0]
 80069d2:	4605      	mov	r5, r0
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80069d4:	6c21      	ldr	r1, [r4, #64]	; 0x40
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	f022 0216 	bic.w	r2, r2, #22
 80069dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80069de:	695a      	ldr	r2, [r3, #20]
 80069e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069e4:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80069e6:	b339      	cbz	r1, 8006a38 <HAL_DMA_Abort+0x88>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	f022 0208 	bic.w	r2, r2, #8
 80069ee:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	f022 0201 	bic.w	r2, r2, #1
 80069f6:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80069f8:	e005      	b.n	8006a06 <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80069fa:	f7fe fdb9 	bl	8005570 <HAL_GetTick>
 80069fe:	1b40      	subs	r0, r0, r5
 8006a00:	2805      	cmp	r0, #5
 8006a02:	d80f      	bhi.n	8006a24 <HAL_DMA_Abort+0x74>
 8006a04:	6823      	ldr	r3, [r4, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f013 0301 	ands.w	r3, r3, #1
 8006a0c:	d1f5      	bne.n	80069fa <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a0e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006a10:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
 8006a12:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a14:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 8006a16:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a18:	60b2      	str	r2, [r6, #8]
    __HAL_UNLOCK(hdma);
 8006a1a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8006a1e:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
}
 8006a22:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006a24:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006a26:	2120      	movs	r1, #32
        __HAL_UNLOCK(hdma);
 8006a28:	2200      	movs	r2, #0
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006a2a:	6561      	str	r1, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8006a2c:	4618      	mov	r0, r3
        __HAL_UNLOCK(hdma);
 8006a2e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006a32:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8006a36:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006a38:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006a3a:	2a00      	cmp	r2, #0
 8006a3c:	d1d4      	bne.n	80069e8 <HAL_DMA_Abort+0x38>
 8006a3e:	e7d7      	b.n	80069f0 <HAL_DMA_Abort+0x40>

08006a40 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006a40:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
{
 8006a44:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006a46:	2a02      	cmp	r2, #2
 8006a48:	d003      	beq.n	8006a52 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a4a:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8006a4c:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a4e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006a50:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8006a52:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8006a54:	2105      	movs	r1, #5
  return HAL_OK;
 8006a56:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_ABORT;
 8006a58:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8006a5c:	6813      	ldr	r3, [r2, #0]
 8006a5e:	f023 0301 	bic.w	r3, r3, #1
 8006a62:	6013      	str	r3, [r2, #0]
}
 8006a64:	4770      	bx	lr
 8006a66:	bf00      	nop

08006a68 <HAL_DMA_IRQHandler>:
{
 8006a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a6a:	4604      	mov	r4, r0
 8006a6c:	b083      	sub	sp, #12
  __IO uint32_t count = 0;
 8006a6e:	2000      	movs	r0, #0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006a70:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 8006a72:	4966      	ldr	r1, [pc, #408]	; (8006c0c <HAL_DMA_IRQHandler+0x1a4>)
  __IO uint32_t count = 0;
 8006a74:	9001      	str	r0, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;
 8006a76:	680e      	ldr	r6, [r1, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006a78:	e9d4 7316 	ldrd	r7, r3, [r4, #88]	; 0x58
 8006a7c:	409a      	lsls	r2, r3
  tmpisr = regs->ISR;
 8006a7e:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006a80:	422a      	tst	r2, r5
 8006a82:	d003      	beq.n	8006a8c <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006a84:	6821      	ldr	r1, [r4, #0]
 8006a86:	6808      	ldr	r0, [r1, #0]
 8006a88:	0740      	lsls	r0, r0, #29
 8006a8a:	d459      	bmi.n	8006b40 <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	409a      	lsls	r2, r3
 8006a90:	422a      	tst	r2, r5
 8006a92:	d003      	beq.n	8006a9c <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006a94:	6821      	ldr	r1, [r4, #0]
 8006a96:	6949      	ldr	r1, [r1, #20]
 8006a98:	0608      	lsls	r0, r1, #24
 8006a9a:	d474      	bmi.n	8006b86 <HAL_DMA_IRQHandler+0x11e>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006a9c:	2204      	movs	r2, #4
 8006a9e:	409a      	lsls	r2, r3
 8006aa0:	422a      	tst	r2, r5
 8006aa2:	d003      	beq.n	8006aac <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006aa4:	6821      	ldr	r1, [r4, #0]
 8006aa6:	6809      	ldr	r1, [r1, #0]
 8006aa8:	0789      	lsls	r1, r1, #30
 8006aaa:	d466      	bmi.n	8006b7a <HAL_DMA_IRQHandler+0x112>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006aac:	2210      	movs	r2, #16
 8006aae:	409a      	lsls	r2, r3
 8006ab0:	422a      	tst	r2, r5
 8006ab2:	d003      	beq.n	8006abc <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006ab4:	6821      	ldr	r1, [r4, #0]
 8006ab6:	6808      	ldr	r0, [r1, #0]
 8006ab8:	0700      	lsls	r0, r0, #28
 8006aba:	d44b      	bmi.n	8006b54 <HAL_DMA_IRQHandler+0xec>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006abc:	2220      	movs	r2, #32
 8006abe:	409a      	lsls	r2, r3
 8006ac0:	422a      	tst	r2, r5
 8006ac2:	d014      	beq.n	8006aee <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006ac4:	6821      	ldr	r1, [r4, #0]
 8006ac6:	6808      	ldr	r0, [r1, #0]
 8006ac8:	06c0      	lsls	r0, r0, #27
 8006aca:	d510      	bpl.n	8006aee <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006acc:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006ace:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8006ad2:	2a05      	cmp	r2, #5
 8006ad4:	d063      	beq.n	8006b9e <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006ad6:	680b      	ldr	r3, [r1, #0]
 8006ad8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006adc:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006ade:	d07e      	beq.n	8006bde <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006ae0:	0319      	lsls	r1, r3, #12
 8006ae2:	f140 8089 	bpl.w	8006bf8 <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 8006ae6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006ae8:	b10b      	cbz	r3, 8006aee <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 8006aea:	4620      	mov	r0, r4
 8006aec:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006aee:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006af0:	b323      	cbz	r3, 8006b3c <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006af2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006af4:	07da      	lsls	r2, r3, #31
 8006af6:	d51a      	bpl.n	8006b2e <HAL_DMA_IRQHandler+0xc6>
      __HAL_DMA_DISABLE(hdma);
 8006af8:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8006afa:	2105      	movs	r1, #5
  uint32_t timeout = SystemCoreClock / 9600;
 8006afc:	4b44      	ldr	r3, [pc, #272]	; (8006c10 <HAL_DMA_IRQHandler+0x1a8>)
      hdma->State = HAL_DMA_STATE_ABORT;
 8006afe:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  uint32_t timeout = SystemCoreClock / 9600;
 8006b02:	fba3 3606 	umull	r3, r6, r3, r6
      __HAL_DMA_DISABLE(hdma);
 8006b06:	6813      	ldr	r3, [r2, #0]
 8006b08:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600;
 8006b0c:	0ab6      	lsrs	r6, r6, #10
      __HAL_DMA_DISABLE(hdma);
 8006b0e:	6013      	str	r3, [r2, #0]
 8006b10:	e002      	b.n	8006b18 <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006b12:	6813      	ldr	r3, [r2, #0]
 8006b14:	07db      	lsls	r3, r3, #31
 8006b16:	d504      	bpl.n	8006b22 <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 8006b18:	9b01      	ldr	r3, [sp, #4]
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	42b3      	cmp	r3, r6
 8006b1e:	9301      	str	r3, [sp, #4]
 8006b20:	d9f7      	bls.n	8006b12 <HAL_DMA_IRQHandler+0xaa>
      __HAL_UNLOCK(hdma);
 8006b22:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 8006b24:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 8006b26:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8006b2a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8006b2e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006b30:	b123      	cbz	r3, 8006b3c <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 8006b32:	4620      	mov	r0, r4
}
 8006b34:	b003      	add	sp, #12
 8006b36:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8006b3a:	4718      	bx	r3
}
 8006b3c:	b003      	add	sp, #12
 8006b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006b40:	6808      	ldr	r0, [r1, #0]
 8006b42:	f020 0004 	bic.w	r0, r0, #4
 8006b46:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006b48:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006b4a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006b4c:	f042 0201 	orr.w	r2, r2, #1
 8006b50:	6562      	str	r2, [r4, #84]	; 0x54
 8006b52:	e79b      	b.n	8006a8c <HAL_DMA_IRQHandler+0x24>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006b54:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006b56:	680a      	ldr	r2, [r1, #0]
 8006b58:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006b5c:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006b5e:	d118      	bne.n	8006b92 <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006b60:	05d2      	lsls	r2, r2, #23
 8006b62:	d403      	bmi.n	8006b6c <HAL_DMA_IRQHandler+0x104>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006b64:	680a      	ldr	r2, [r1, #0]
 8006b66:	f022 0208 	bic.w	r2, r2, #8
 8006b6a:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8006b6c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006b6e:	2a00      	cmp	r2, #0
 8006b70:	d0a4      	beq.n	8006abc <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 8006b72:	4620      	mov	r0, r4
 8006b74:	4790      	blx	r2
 8006b76:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006b78:	e7a0      	b.n	8006abc <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006b7a:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006b7c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006b7e:	f042 0204 	orr.w	r2, r2, #4
 8006b82:	6562      	str	r2, [r4, #84]	; 0x54
 8006b84:	e792      	b.n	8006aac <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006b86:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006b88:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006b8a:	f042 0202 	orr.w	r2, r2, #2
 8006b8e:	6562      	str	r2, [r4, #84]	; 0x54
 8006b90:	e784      	b.n	8006a9c <HAL_DMA_IRQHandler+0x34>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006b92:	0311      	lsls	r1, r2, #12
 8006b94:	d5ea      	bpl.n	8006b6c <HAL_DMA_IRQHandler+0x104>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006b96:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006b98:	2a00      	cmp	r2, #0
 8006b9a:	d1ea      	bne.n	8006b72 <HAL_DMA_IRQHandler+0x10a>
 8006b9c:	e78e      	b.n	8006abc <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006b9e:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006ba0:	6c20      	ldr	r0, [r4, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006ba2:	f022 0216 	bic.w	r2, r2, #22
 8006ba6:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006ba8:	694a      	ldr	r2, [r1, #20]
 8006baa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006bae:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006bb0:	b338      	cbz	r0, 8006c02 <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006bb2:	680a      	ldr	r2, [r1, #0]
 8006bb4:	f022 0208 	bic.w	r2, r2, #8
 8006bb8:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006bba:	223f      	movs	r2, #63	; 0x3f
        __HAL_UNLOCK(hdma);
 8006bbc:	2000      	movs	r0, #0
        hdma->State = HAL_DMA_STATE_READY;
 8006bbe:	2101      	movs	r1, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006bc0:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 8006bc4:	6d22      	ldr	r2, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006bc6:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8006bc8:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8006bcc:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8006bd0:	2a00      	cmp	r2, #0
 8006bd2:	d0b3      	beq.n	8006b3c <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 8006bd4:	4620      	mov	r0, r4
}
 8006bd6:	b003      	add	sp, #12
 8006bd8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 8006bdc:	4710      	bx	r2
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006bde:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8006be2:	d180      	bne.n	8006ae6 <HAL_DMA_IRQHandler+0x7e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006be4:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8006be6:	2001      	movs	r0, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006be8:	f022 0210 	bic.w	r2, r2, #16
 8006bec:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 8006bee:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8006bf2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 8006bf6:	e776      	b.n	8006ae6 <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 8006bf8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f47f af75 	bne.w	8006aea <HAL_DMA_IRQHandler+0x82>
 8006c00:	e775      	b.n	8006aee <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006c02:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006c04:	2a00      	cmp	r2, #0
 8006c06:	d1d4      	bne.n	8006bb2 <HAL_DMA_IRQHandler+0x14a>
 8006c08:	e7d7      	b.n	8006bba <HAL_DMA_IRQHandler+0x152>
 8006c0a:	bf00      	nop
 8006c0c:	20000244 	.word	0x20000244
 8006c10:	1b4e81b5 	.word	0x1b4e81b5

08006c14 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8006c14:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8006c16:	4770      	bx	lr

08006c18 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8006c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c1c:	9d08      	ldr	r5, [sp, #32]
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8006c1e:	f64f 76fe 	movw	r6, #65534	; 0xfffe
{
 8006c22:	460f      	mov	r7, r1
 8006c24:	4604      	mov	r4, r0
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8006c26:	1e69      	subs	r1, r5, #1
{
 8006c28:	4690      	mov	r8, r2
 8006c2a:	4699      	mov	r9, r3
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8006c2c:	42b1      	cmp	r1, r6
 8006c2e:	d861      	bhi.n	8006cf4 <HAL_DMAEx_MultiBufferStart_IT+0xdc>
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006c30:	68a0      	ldr	r0, [r4, #8]
 8006c32:	2880      	cmp	r0, #128	; 0x80
 8006c34:	d065      	beq.n	8006d02 <HAL_DMAEx_MultiBufferStart_IT+0xea>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
    return HAL_ERROR;
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8006c36:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 8006c3a:	2901      	cmp	r1, #1
 8006c3c:	d07d      	beq.n	8006d3a <HAL_DMAEx_MultiBufferStart_IT+0x122>
 8006c3e:	2201      	movs	r2, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006c40:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8006c44:	4293      	cmp	r3, r2
  __HAL_LOCK(hdma);
 8006c46:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8006c4a:	d14d      	bne.n	8006ce8 <HAL_DMAEx_MultiBufferStart_IT+0xd0>
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8006c4c:	6821      	ldr	r1, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c4e:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8006c50:	2202      	movs	r2, #2
{
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006c52:	2840      	cmp	r0, #64	; 0x40
    hdma->State = HAL_DMA_STATE_BUSY;
 8006c54:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c58:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8006c5a:	680b      	ldr	r3, [r1, #0]
 8006c5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c60:	600b      	str	r3, [r1, #0]
    hdma->Instance->M1AR = SecondMemAddress;
 8006c62:	f8c1 9010 	str.w	r9, [r1, #16]
  hdma->Instance->NDTR = DataLength;
 8006c66:	604d      	str	r5, [r1, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006c68:	d051      	beq.n	8006d0e <HAL_DMAEx_MultiBufferStart_IT+0xf6>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8006c6a:	608f      	str	r7, [r1, #8]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8006c6c:	f8c1 800c 	str.w	r8, [r1, #12]
 8006c70:	4b91      	ldr	r3, [pc, #580]	; (8006eb8 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8006c72:	4a92      	ldr	r2, [pc, #584]	; (8006ebc <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8006c74:	4d92      	ldr	r5, [pc, #584]	; (8006ec0 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8006c76:	4299      	cmp	r1, r3
 8006c78:	bf18      	it	ne
 8006c7a:	4291      	cmpne	r1, r2
 8006c7c:	4891      	ldr	r0, [pc, #580]	; (8006ec4 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006c7e:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 8006c82:	bf14      	ite	ne
 8006c84:	2301      	movne	r3, #1
 8006c86:	2300      	moveq	r3, #0
 8006c88:	42a9      	cmp	r1, r5
 8006c8a:	bf0c      	ite	eq
 8006c8c:	2300      	moveq	r3, #0
 8006c8e:	f003 0301 	andne.w	r3, r3, #1
 8006c92:	4281      	cmp	r1, r0
 8006c94:	bf0c      	ite	eq
 8006c96:	2300      	moveq	r3, #0
 8006c98:	f003 0301 	andne.w	r3, r3, #1
 8006c9c:	4291      	cmp	r1, r2
 8006c9e:	d93a      	bls.n	8006d16 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d174      	bne.n	8006d8e <HAL_DMAEx_MultiBufferStart_IT+0x176>
 8006ca4:	4b88      	ldr	r3, [pc, #544]	; (8006ec8 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8006ca6:	2020      	movs	r0, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006ca8:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006caa:	2508      	movs	r5, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006cac:	60d8      	str	r0, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006cae:	2004      	movs	r0, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006cb0:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006cb2:	2201      	movs	r2, #1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006cb4:	60dd      	str	r5, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006cb6:	60d8      	str	r0, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006cb8:	4b83      	ldr	r3, [pc, #524]	; (8006ec8 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8006cba:	60da      	str	r2, [r3, #12]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006cbc:	680b      	ldr	r3, [r1, #0]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006cbe:	6c22      	ldr	r2, [r4, #64]	; 0x40
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006cc0:	f043 0316 	orr.w	r3, r3, #22
 8006cc4:	600b      	str	r3, [r1, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006cc6:	694b      	ldr	r3, [r1, #20]
 8006cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ccc:	614b      	str	r3, [r1, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006cce:	2a00      	cmp	r2, #0
 8006cd0:	d036      	beq.n	8006d40 <HAL_DMAEx_MultiBufferStart_IT+0x128>
      hdma->Instance->CR  |= DMA_IT_HT;
 8006cd2:	680b      	ldr	r3, [r1, #0]
 8006cd4:	f043 0308 	orr.w	r3, r3, #8
 8006cd8:	600b      	str	r3, [r1, #0]
    __HAL_DMA_ENABLE(hdma); 
 8006cda:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cdc:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma); 
 8006cde:	f043 0301 	orr.w	r3, r3, #1
 8006ce2:	600b      	str	r3, [r1, #0]
}
 8006ce4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_UNLOCK(hdma);	  
 8006ce8:	2300      	movs	r3, #0
    status = HAL_BUSY;
 8006cea:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);	  
 8006cec:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8006cf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8006cf4:	4875      	ldr	r0, [pc, #468]	; (8006ecc <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 8006cf6:	21a2      	movs	r1, #162	; 0xa2
 8006cf8:	f7fc f894 	bl	8002e24 <assert_failed>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006cfc:	68a0      	ldr	r0, [r4, #8]
 8006cfe:	2880      	cmp	r0, #128	; 0x80
 8006d00:	d199      	bne.n	8006c36 <HAL_DMAEx_MultiBufferStart_IT+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8006d02:	f44f 7380 	mov.w	r3, #256	; 0x100
    return HAL_ERROR;
 8006d06:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8006d08:	6563      	str	r3, [r4, #84]	; 0x54
}
 8006d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hdma->Instance->PAR = DstAddress;
 8006d0e:	f8c1 8008 	str.w	r8, [r1, #8]
    hdma->Instance->M0AR = SrcAddress;
 8006d12:	60cf      	str	r7, [r1, #12]
 8006d14:	e7ac      	b.n	8006c70 <HAL_DMAEx_MultiBufferStart_IT+0x58>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006d16:	4a6e      	ldr	r2, [pc, #440]	; (8006ed0 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8006d18:	4291      	cmp	r1, r2
 8006d1a:	d915      	bls.n	8006d48 <HAL_DMAEx_MultiBufferStart_IT+0x130>
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d15a      	bne.n	8006dd6 <HAL_DMAEx_MultiBufferStart_IT+0x1be>
 8006d20:	4b69      	ldr	r3, [pc, #420]	; (8006ec8 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8006d22:	2020      	movs	r0, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006d24:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006d26:	2508      	movs	r5, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006d28:	6098      	str	r0, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006d2a:	2004      	movs	r0, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006d2c:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006d2e:	2201      	movs	r2, #1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006d30:	609d      	str	r5, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006d32:	6098      	str	r0, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006d34:	4b64      	ldr	r3, [pc, #400]	; (8006ec8 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8006d36:	609a      	str	r2, [r3, #8]
 8006d38:	e7c0      	b.n	8006cbc <HAL_DMAEx_MultiBufferStart_IT+0xa4>
  __HAL_LOCK(hdma);
 8006d3a:	2002      	movs	r0, #2
}
 8006d3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006d40:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d1c5      	bne.n	8006cd2 <HAL_DMAEx_MultiBufferStart_IT+0xba>
 8006d46:	e7c8      	b.n	8006cda <HAL_DMAEx_MultiBufferStart_IT+0xc2>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006d48:	4a62      	ldr	r2, [pc, #392]	; (8006ed4 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8006d4a:	4291      	cmp	r1, r2
 8006d4c:	d90f      	bls.n	8006d6e <HAL_DMAEx_MultiBufferStart_IT+0x156>
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	f040 8140 	bne.w	8006fd4 <HAL_DMAEx_MultiBufferStart_IT+0x3bc>
 8006d54:	4b60      	ldr	r3, [pc, #384]	; (8006ed8 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8006d56:	2020      	movs	r0, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006d58:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006d5a:	2508      	movs	r5, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006d5c:	60d8      	str	r0, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006d5e:	2004      	movs	r0, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006d60:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006d62:	2201      	movs	r2, #1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006d64:	60dd      	str	r5, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006d66:	60d8      	str	r0, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006d68:	4b5b      	ldr	r3, [pc, #364]	; (8006ed8 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8006d6a:	60da      	str	r2, [r3, #12]
 8006d6c:	e7a6      	b.n	8006cbc <HAL_DMAEx_MultiBufferStart_IT+0xa4>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	f040 80bc 	bne.w	8006eec <HAL_DMAEx_MultiBufferStart_IT+0x2d4>
 8006d74:	4b58      	ldr	r3, [pc, #352]	; (8006ed8 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8006d76:	2020      	movs	r0, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006d78:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006d7a:	2508      	movs	r5, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006d7c:	6098      	str	r0, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006d7e:	2004      	movs	r0, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006d80:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006d82:	2201      	movs	r2, #1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006d84:	609d      	str	r5, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006d86:	6098      	str	r0, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006d88:	4b53      	ldr	r3, [pc, #332]	; (8006ed8 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8006d8a:	609a      	str	r2, [r3, #8]
 8006d8c:	e796      	b.n	8006cbc <HAL_DMAEx_MultiBufferStart_IT+0xa4>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006d8e:	4b53      	ldr	r3, [pc, #332]	; (8006edc <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8006d90:	f5a0 707a 	sub.w	r0, r0, #1000	; 0x3e8
 8006d94:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 8006d98:	4299      	cmp	r1, r3
 8006d9a:	bf18      	it	ne
 8006d9c:	4281      	cmpne	r1, r0
 8006d9e:	bf14      	ite	ne
 8006da0:	2301      	movne	r3, #1
 8006da2:	2300      	moveq	r3, #0
 8006da4:	4291      	cmp	r1, r2
 8006da6:	bf0c      	ite	eq
 8006da8:	2300      	moveq	r3, #0
 8006daa:	f003 0301 	andne.w	r3, r3, #1
 8006dae:	b11b      	cbz	r3, 8006db8 <HAL_DMAEx_MultiBufferStart_IT+0x1a0>
 8006db0:	4b4b      	ldr	r3, [pc, #300]	; (8006ee0 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 8006db2:	4299      	cmp	r1, r3
 8006db4:	f040 818a 	bne.w	80070cc <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 8006db8:	4b43      	ldr	r3, [pc, #268]	; (8006ec8 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8006dba:	f44f 6000 	mov.w	r0, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006dbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006dc2:	f44f 7500 	mov.w	r5, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006dc6:	60d8      	str	r0, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006dc8:	f44f 7080 	mov.w	r0, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006dcc:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006dce:	2240      	movs	r2, #64	; 0x40
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006dd0:	60dd      	str	r5, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006dd2:	60d8      	str	r0, [r3, #12]
 8006dd4:	e770      	b.n	8006cb8 <HAL_DMAEx_MultiBufferStart_IT+0xa0>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006dd6:	4b43      	ldr	r3, [pc, #268]	; (8006ee4 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 8006dd8:	3a30      	subs	r2, #48	; 0x30
 8006dda:	4840      	ldr	r0, [pc, #256]	; (8006edc <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8006ddc:	4299      	cmp	r1, r3
 8006dde:	bf18      	it	ne
 8006de0:	4281      	cmpne	r1, r0
 8006de2:	bf14      	ite	ne
 8006de4:	2301      	movne	r3, #1
 8006de6:	2300      	moveq	r3, #0
 8006de8:	4291      	cmp	r1, r2
 8006dea:	bf0c      	ite	eq
 8006dec:	2300      	moveq	r3, #0
 8006dee:	f003 0301 	andne.w	r3, r3, #1
 8006df2:	b11b      	cbz	r3, 8006dfc <HAL_DMAEx_MultiBufferStart_IT+0x1e4>
 8006df4:	4b3a      	ldr	r3, [pc, #232]	; (8006ee0 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 8006df6:	4299      	cmp	r1, r3
 8006df8:	f040 81e4 	bne.w	80071c4 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8006dfc:	f44f 6500 	mov.w	r5, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006e00:	4b36      	ldr	r3, [pc, #216]	; (8006edc <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8006e02:	4a38      	ldr	r2, [pc, #224]	; (8006ee4 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 8006e04:	4838      	ldr	r0, [pc, #224]	; (8006ee8 <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 8006e06:	4299      	cmp	r1, r3
 8006e08:	bf18      	it	ne
 8006e0a:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006e0c:	f8c2 53e0 	str.w	r5, [r2, #992]	; 0x3e0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006e10:	bf14      	ite	ne
 8006e12:	2301      	movne	r3, #1
 8006e14:	2300      	moveq	r3, #0
 8006e16:	4281      	cmp	r1, r0
 8006e18:	bf0c      	ite	eq
 8006e1a:	2300      	moveq	r3, #0
 8006e1c:	f003 0301 	andne.w	r3, r3, #1
 8006e20:	b11b      	cbz	r3, 8006e2a <HAL_DMAEx_MultiBufferStart_IT+0x212>
 8006e22:	4b2f      	ldr	r3, [pc, #188]	; (8006ee0 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 8006e24:	4299      	cmp	r1, r3
 8006e26:	f040 81e6 	bne.w	80071f6 <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 8006e2a:	f44f 6580 	mov.w	r5, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006e2e:	4b2d      	ldr	r3, [pc, #180]	; (8006ee4 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 8006e30:	4a2a      	ldr	r2, [pc, #168]	; (8006edc <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8006e32:	482d      	ldr	r0, [pc, #180]	; (8006ee8 <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 8006e34:	4299      	cmp	r1, r3
 8006e36:	bf18      	it	ne
 8006e38:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006e3a:	f842 5c20 	str.w	r5, [r2, #-32]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006e3e:	bf14      	ite	ne
 8006e40:	2301      	movne	r3, #1
 8006e42:	2300      	moveq	r3, #0
 8006e44:	4281      	cmp	r1, r0
 8006e46:	bf0c      	ite	eq
 8006e48:	2300      	moveq	r3, #0
 8006e4a:	f003 0301 	andne.w	r3, r3, #1
 8006e4e:	b11b      	cbz	r3, 8006e58 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 8006e50:	4b23      	ldr	r3, [pc, #140]	; (8006ee0 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 8006e52:	4299      	cmp	r1, r3
 8006e54:	f040 81ff 	bne.w	8007256 <HAL_DMAEx_MultiBufferStart_IT+0x63e>
 8006e58:	f44f 7500 	mov.w	r5, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006e5c:	4b21      	ldr	r3, [pc, #132]	; (8006ee4 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 8006e5e:	4a1f      	ldr	r2, [pc, #124]	; (8006edc <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8006e60:	4821      	ldr	r0, [pc, #132]	; (8006ee8 <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 8006e62:	4299      	cmp	r1, r3
 8006e64:	bf18      	it	ne
 8006e66:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006e68:	f842 5c20 	str.w	r5, [r2, #-32]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006e6c:	bf14      	ite	ne
 8006e6e:	2301      	movne	r3, #1
 8006e70:	2300      	moveq	r3, #0
 8006e72:	4281      	cmp	r1, r0
 8006e74:	bf0c      	ite	eq
 8006e76:	2300      	moveq	r3, #0
 8006e78:	f003 0301 	andne.w	r3, r3, #1
 8006e7c:	b11b      	cbz	r3, 8006e86 <HAL_DMAEx_MultiBufferStart_IT+0x26e>
 8006e7e:	4b18      	ldr	r3, [pc, #96]	; (8006ee0 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 8006e80:	4299      	cmp	r1, r3
 8006e82:	f040 81d0 	bne.w	8007226 <HAL_DMAEx_MultiBufferStart_IT+0x60e>
 8006e86:	f44f 7580 	mov.w	r5, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006e8a:	4b16      	ldr	r3, [pc, #88]	; (8006ee4 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 8006e8c:	4a13      	ldr	r2, [pc, #76]	; (8006edc <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8006e8e:	4816      	ldr	r0, [pc, #88]	; (8006ee8 <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 8006e90:	4299      	cmp	r1, r3
 8006e92:	bf18      	it	ne
 8006e94:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006e96:	f842 5c20 	str.w	r5, [r2, #-32]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006e9a:	bf14      	ite	ne
 8006e9c:	2301      	movne	r3, #1
 8006e9e:	2300      	moveq	r3, #0
 8006ea0:	4281      	cmp	r1, r0
 8006ea2:	bf0c      	ite	eq
 8006ea4:	2300      	moveq	r3, #0
 8006ea6:	f003 0301 	andne.w	r3, r3, #1
 8006eaa:	b11b      	cbz	r3, 8006eb4 <HAL_DMAEx_MultiBufferStart_IT+0x29c>
 8006eac:	4b0c      	ldr	r3, [pc, #48]	; (8006ee0 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 8006eae:	4299      	cmp	r1, r3
 8006eb0:	f040 81e9 	bne.w	8007286 <HAL_DMAEx_MultiBufferStart_IT+0x66e>
 8006eb4:	2240      	movs	r2, #64	; 0x40
 8006eb6:	e73d      	b.n	8006d34 <HAL_DMAEx_MultiBufferStart_IT+0x11c>
 8006eb8:	40026470 	.word	0x40026470
 8006ebc:	40026070 	.word	0x40026070
 8006ec0:	40026010 	.word	0x40026010
 8006ec4:	40026410 	.word	0x40026410
 8006ec8:	40026400 	.word	0x40026400
 8006ecc:	080265cc 	.word	0x080265cc
 8006ed0:	400260b8 	.word	0x400260b8
 8006ed4:	40026058 	.word	0x40026058
 8006ed8:	40026000 	.word	0x40026000
 8006edc:	40026428 	.word	0x40026428
 8006ee0:	40026488 	.word	0x40026488
 8006ee4:	40026028 	.word	0x40026028
 8006ee8:	40026088 	.word	0x40026088
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006eec:	4b73      	ldr	r3, [pc, #460]	; (80070bc <HAL_DMAEx_MultiBufferStart_IT+0x4a4>)
 8006eee:	4874      	ldr	r0, [pc, #464]	; (80070c0 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>)
 8006ef0:	4a74      	ldr	r2, [pc, #464]	; (80070c4 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>)
 8006ef2:	4299      	cmp	r1, r3
 8006ef4:	bf18      	it	ne
 8006ef6:	4281      	cmpne	r1, r0
 8006ef8:	bf14      	ite	ne
 8006efa:	2301      	movne	r3, #1
 8006efc:	2300      	moveq	r3, #0
 8006efe:	4291      	cmp	r1, r2
 8006f00:	bf0c      	ite	eq
 8006f02:	2300      	moveq	r3, #0
 8006f04:	f003 0301 	andne.w	r3, r3, #1
 8006f08:	b11b      	cbz	r3, 8006f12 <HAL_DMAEx_MultiBufferStart_IT+0x2fa>
 8006f0a:	4b6f      	ldr	r3, [pc, #444]	; (80070c8 <HAL_DMAEx_MultiBufferStart_IT+0x4b0>)
 8006f0c:	4299      	cmp	r1, r3
 8006f0e:	f040 81d2 	bne.w	80072b6 <HAL_DMAEx_MultiBufferStart_IT+0x69e>
 8006f12:	f44f 6000 	mov.w	r0, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006f16:	4b6a      	ldr	r3, [pc, #424]	; (80070c0 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>)
 8006f18:	4a68      	ldr	r2, [pc, #416]	; (80070bc <HAL_DMAEx_MultiBufferStart_IT+0x4a4>)
 8006f1a:	4d6a      	ldr	r5, [pc, #424]	; (80070c4 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>)
 8006f1c:	4299      	cmp	r1, r3
 8006f1e:	bf18      	it	ne
 8006f20:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006f22:	f5a2 6285 	sub.w	r2, r2, #1064	; 0x428
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006f26:	bf14      	ite	ne
 8006f28:	2301      	movne	r3, #1
 8006f2a:	2300      	moveq	r3, #0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006f2c:	6090      	str	r0, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006f2e:	42a9      	cmp	r1, r5
 8006f30:	bf0c      	ite	eq
 8006f32:	2300      	moveq	r3, #0
 8006f34:	f003 0301 	andne.w	r3, r3, #1
 8006f38:	b11b      	cbz	r3, 8006f42 <HAL_DMAEx_MultiBufferStart_IT+0x32a>
 8006f3a:	4b63      	ldr	r3, [pc, #396]	; (80070c8 <HAL_DMAEx_MultiBufferStart_IT+0x4b0>)
 8006f3c:	4299      	cmp	r1, r3
 8006f3e:	f040 8205 	bne.w	800734c <HAL_DMAEx_MultiBufferStart_IT+0x734>
 8006f42:	f44f 6080 	mov.w	r0, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006f46:	4b5e      	ldr	r3, [pc, #376]	; (80070c0 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>)
 8006f48:	4a5c      	ldr	r2, [pc, #368]	; (80070bc <HAL_DMAEx_MultiBufferStart_IT+0x4a4>)
 8006f4a:	4d5e      	ldr	r5, [pc, #376]	; (80070c4 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>)
 8006f4c:	4299      	cmp	r1, r3
 8006f4e:	bf18      	it	ne
 8006f50:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006f52:	f5a2 6285 	sub.w	r2, r2, #1064	; 0x428
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006f56:	bf14      	ite	ne
 8006f58:	2301      	movne	r3, #1
 8006f5a:	2300      	moveq	r3, #0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006f5c:	6090      	str	r0, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006f5e:	42a9      	cmp	r1, r5
 8006f60:	bf0c      	ite	eq
 8006f62:	2300      	moveq	r3, #0
 8006f64:	f003 0301 	andne.w	r3, r3, #1
 8006f68:	b11b      	cbz	r3, 8006f72 <HAL_DMAEx_MultiBufferStart_IT+0x35a>
 8006f6a:	4b57      	ldr	r3, [pc, #348]	; (80070c8 <HAL_DMAEx_MultiBufferStart_IT+0x4b0>)
 8006f6c:	4299      	cmp	r1, r3
 8006f6e:	f040 8253 	bne.w	8007418 <HAL_DMAEx_MultiBufferStart_IT+0x800>
 8006f72:	f44f 7000 	mov.w	r0, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006f76:	4b51      	ldr	r3, [pc, #324]	; (80070bc <HAL_DMAEx_MultiBufferStart_IT+0x4a4>)
 8006f78:	4a51      	ldr	r2, [pc, #324]	; (80070c0 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>)
 8006f7a:	4d52      	ldr	r5, [pc, #328]	; (80070c4 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>)
 8006f7c:	4299      	cmp	r1, r3
 8006f7e:	bf18      	it	ne
 8006f80:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006f82:	f842 0c20 	str.w	r0, [r2, #-32]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006f86:	bf14      	ite	ne
 8006f88:	2301      	movne	r3, #1
 8006f8a:	2300      	moveq	r3, #0
 8006f8c:	42a9      	cmp	r1, r5
 8006f8e:	bf0c      	ite	eq
 8006f90:	2300      	moveq	r3, #0
 8006f92:	f003 0301 	andne.w	r3, r3, #1
 8006f96:	b11b      	cbz	r3, 8006fa0 <HAL_DMAEx_MultiBufferStart_IT+0x388>
 8006f98:	4b4b      	ldr	r3, [pc, #300]	; (80070c8 <HAL_DMAEx_MultiBufferStart_IT+0x4b0>)
 8006f9a:	4299      	cmp	r1, r3
 8006f9c:	f040 820e 	bne.w	80073bc <HAL_DMAEx_MultiBufferStart_IT+0x7a4>
 8006fa0:	f44f 7080 	mov.w	r0, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006fa4:	4b46      	ldr	r3, [pc, #280]	; (80070c0 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>)
 8006fa6:	4a45      	ldr	r2, [pc, #276]	; (80070bc <HAL_DMAEx_MultiBufferStart_IT+0x4a4>)
 8006fa8:	4d46      	ldr	r5, [pc, #280]	; (80070c4 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>)
 8006faa:	4299      	cmp	r1, r3
 8006fac:	bf18      	it	ne
 8006fae:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006fb0:	f5a2 6285 	sub.w	r2, r2, #1064	; 0x428
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006fb4:	bf14      	ite	ne
 8006fb6:	2301      	movne	r3, #1
 8006fb8:	2300      	moveq	r3, #0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006fba:	6090      	str	r0, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006fbc:	42a9      	cmp	r1, r5
 8006fbe:	bf0c      	ite	eq
 8006fc0:	2300      	moveq	r3, #0
 8006fc2:	f003 0301 	andne.w	r3, r3, #1
 8006fc6:	b11b      	cbz	r3, 8006fd0 <HAL_DMAEx_MultiBufferStart_IT+0x3b8>
 8006fc8:	4b3f      	ldr	r3, [pc, #252]	; (80070c8 <HAL_DMAEx_MultiBufferStart_IT+0x4b0>)
 8006fca:	4299      	cmp	r1, r3
 8006fcc:	f040 8250 	bne.w	8007470 <HAL_DMAEx_MultiBufferStart_IT+0x858>
 8006fd0:	2240      	movs	r2, #64	; 0x40
 8006fd2:	e6d9      	b.n	8006d88 <HAL_DMAEx_MultiBufferStart_IT+0x170>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006fd4:	4b3a      	ldr	r3, [pc, #232]	; (80070c0 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>)
 8006fd6:	3230      	adds	r2, #48	; 0x30
 8006fd8:	4838      	ldr	r0, [pc, #224]	; (80070bc <HAL_DMAEx_MultiBufferStart_IT+0x4a4>)
 8006fda:	4299      	cmp	r1, r3
 8006fdc:	bf18      	it	ne
 8006fde:	4281      	cmpne	r1, r0
 8006fe0:	bf14      	ite	ne
 8006fe2:	2301      	movne	r3, #1
 8006fe4:	2300      	moveq	r3, #0
 8006fe6:	4291      	cmp	r1, r2
 8006fe8:	bf0c      	ite	eq
 8006fea:	2300      	moveq	r3, #0
 8006fec:	f003 0301 	andne.w	r3, r3, #1
 8006ff0:	b11b      	cbz	r3, 8006ffa <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 8006ff2:	4b35      	ldr	r3, [pc, #212]	; (80070c8 <HAL_DMAEx_MultiBufferStart_IT+0x4b0>)
 8006ff4:	4299      	cmp	r1, r3
 8006ff6:	f040 8178 	bne.w	80072ea <HAL_DMAEx_MultiBufferStart_IT+0x6d2>
 8006ffa:	f44f 6000 	mov.w	r0, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006ffe:	4b2f      	ldr	r3, [pc, #188]	; (80070bc <HAL_DMAEx_MultiBufferStart_IT+0x4a4>)
 8007000:	4a2f      	ldr	r2, [pc, #188]	; (80070c0 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>)
 8007002:	4d30      	ldr	r5, [pc, #192]	; (80070c4 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>)
 8007004:	4299      	cmp	r1, r3
 8007006:	bf18      	it	ne
 8007008:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800700a:	f842 0c1c 	str.w	r0, [r2, #-28]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800700e:	bf14      	ite	ne
 8007010:	2301      	movne	r3, #1
 8007012:	2300      	moveq	r3, #0
 8007014:	42a9      	cmp	r1, r5
 8007016:	bf0c      	ite	eq
 8007018:	2300      	moveq	r3, #0
 800701a:	f003 0301 	andne.w	r3, r3, #1
 800701e:	b11b      	cbz	r3, 8007028 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8007020:	4b29      	ldr	r3, [pc, #164]	; (80070c8 <HAL_DMAEx_MultiBufferStart_IT+0x4b0>)
 8007022:	4299      	cmp	r1, r3
 8007024:	f040 817a 	bne.w	800731c <HAL_DMAEx_MultiBufferStart_IT+0x704>
 8007028:	f44f 6080 	mov.w	r0, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800702c:	4b24      	ldr	r3, [pc, #144]	; (80070c0 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>)
 800702e:	4a23      	ldr	r2, [pc, #140]	; (80070bc <HAL_DMAEx_MultiBufferStart_IT+0x4a4>)
 8007030:	4d24      	ldr	r5, [pc, #144]	; (80070c4 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>)
 8007032:	4299      	cmp	r1, r3
 8007034:	bf18      	it	ne
 8007036:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007038:	f5a2 6285 	sub.w	r2, r2, #1064	; 0x428
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800703c:	bf14      	ite	ne
 800703e:	2301      	movne	r3, #1
 8007040:	2300      	moveq	r3, #0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007042:	60d0      	str	r0, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007044:	42a9      	cmp	r1, r5
 8007046:	bf0c      	ite	eq
 8007048:	2300      	moveq	r3, #0
 800704a:	f003 0301 	andne.w	r3, r3, #1
 800704e:	b11b      	cbz	r3, 8007058 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 8007050:	4b1d      	ldr	r3, [pc, #116]	; (80070c8 <HAL_DMAEx_MultiBufferStart_IT+0x4b0>)
 8007052:	4299      	cmp	r1, r3
 8007054:	f040 81ca 	bne.w	80073ec <HAL_DMAEx_MultiBufferStart_IT+0x7d4>
 8007058:	f44f 7000 	mov.w	r0, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800705c:	4b17      	ldr	r3, [pc, #92]	; (80070bc <HAL_DMAEx_MultiBufferStart_IT+0x4a4>)
 800705e:	4a18      	ldr	r2, [pc, #96]	; (80070c0 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>)
 8007060:	4d18      	ldr	r5, [pc, #96]	; (80070c4 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>)
 8007062:	4299      	cmp	r1, r3
 8007064:	bf18      	it	ne
 8007066:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007068:	f842 0c1c 	str.w	r0, [r2, #-28]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800706c:	bf14      	ite	ne
 800706e:	2301      	movne	r3, #1
 8007070:	2300      	moveq	r3, #0
 8007072:	42a9      	cmp	r1, r5
 8007074:	bf0c      	ite	eq
 8007076:	2300      	moveq	r3, #0
 8007078:	f003 0301 	andne.w	r3, r3, #1
 800707c:	b11b      	cbz	r3, 8007086 <HAL_DMAEx_MultiBufferStart_IT+0x46e>
 800707e:	4b12      	ldr	r3, [pc, #72]	; (80070c8 <HAL_DMAEx_MultiBufferStart_IT+0x4b0>)
 8007080:	4299      	cmp	r1, r3
 8007082:	f040 817b 	bne.w	800737c <HAL_DMAEx_MultiBufferStart_IT+0x764>
 8007086:	f44f 7080 	mov.w	r0, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800708a:	4b0d      	ldr	r3, [pc, #52]	; (80070c0 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>)
 800708c:	4a0b      	ldr	r2, [pc, #44]	; (80070bc <HAL_DMAEx_MultiBufferStart_IT+0x4a4>)
 800708e:	4d0d      	ldr	r5, [pc, #52]	; (80070c4 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>)
 8007090:	4299      	cmp	r1, r3
 8007092:	bf18      	it	ne
 8007094:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007096:	f5a2 6285 	sub.w	r2, r2, #1064	; 0x428
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800709a:	bf14      	ite	ne
 800709c:	2301      	movne	r3, #1
 800709e:	2300      	moveq	r3, #0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80070a0:	60d0      	str	r0, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80070a2:	42a9      	cmp	r1, r5
 80070a4:	bf0c      	ite	eq
 80070a6:	2300      	moveq	r3, #0
 80070a8:	f003 0301 	andne.w	r3, r3, #1
 80070ac:	b11b      	cbz	r3, 80070b6 <HAL_DMAEx_MultiBufferStart_IT+0x49e>
 80070ae:	4b06      	ldr	r3, [pc, #24]	; (80070c8 <HAL_DMAEx_MultiBufferStart_IT+0x4b0>)
 80070b0:	4299      	cmp	r1, r3
 80070b2:	f040 81c7 	bne.w	8007444 <HAL_DMAEx_MultiBufferStart_IT+0x82c>
 80070b6:	2240      	movs	r2, #64	; 0x40
 80070b8:	e656      	b.n	8006d68 <HAL_DMAEx_MultiBufferStart_IT+0x150>
 80070ba:	bf00      	nop
 80070bc:	40026428 	.word	0x40026428
 80070c0:	40026028 	.word	0x40026028
 80070c4:	40026088 	.word	0x40026088
 80070c8:	40026488 	.word	0x40026488
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80070cc:	3b48      	subs	r3, #72	; 0x48
 80070ce:	3018      	adds	r0, #24
 80070d0:	3218      	adds	r2, #24
 80070d2:	4299      	cmp	r1, r3
 80070d4:	bf18      	it	ne
 80070d6:	4281      	cmpne	r1, r0
 80070d8:	bf14      	ite	ne
 80070da:	2301      	movne	r3, #1
 80070dc:	2300      	moveq	r3, #0
 80070de:	4291      	cmp	r1, r2
 80070e0:	bf0c      	ite	eq
 80070e2:	2300      	moveq	r3, #0
 80070e4:	f003 0301 	andne.w	r3, r3, #1
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	f000 81e2 	beq.w	80074b2 <HAL_DMAEx_MultiBufferStart_IT+0x89a>
 80070ee:	4baf      	ldr	r3, [pc, #700]	; (80073ac <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 80070f0:	4299      	cmp	r1, r3
 80070f2:	f000 81de 	beq.w	80074b2 <HAL_DMAEx_MultiBufferStart_IT+0x89a>
 80070f6:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80070fa:	4bad      	ldr	r3, [pc, #692]	; (80073b0 <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 80070fc:	4aad      	ldr	r2, [pc, #692]	; (80073b4 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 80070fe:	4dae      	ldr	r5, [pc, #696]	; (80073b8 <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 8007100:	4299      	cmp	r1, r3
 8007102:	bf18      	it	ne
 8007104:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007106:	f8c2 03cc 	str.w	r0, [r2, #972]	; 0x3cc
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800710a:	bf14      	ite	ne
 800710c:	2301      	movne	r3, #1
 800710e:	2300      	moveq	r3, #0
 8007110:	42a9      	cmp	r1, r5
 8007112:	bf0c      	ite	eq
 8007114:	2300      	moveq	r3, #0
 8007116:	f003 0301 	andne.w	r3, r3, #1
 800711a:	2b00      	cmp	r3, #0
 800711c:	f000 81c6 	beq.w	80074ac <HAL_DMAEx_MultiBufferStart_IT+0x894>
 8007120:	4ba2      	ldr	r3, [pc, #648]	; (80073ac <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 8007122:	4299      	cmp	r1, r3
 8007124:	f000 81c2 	beq.w	80074ac <HAL_DMAEx_MultiBufferStart_IT+0x894>
 8007128:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800712c:	4ba0      	ldr	r3, [pc, #640]	; (80073b0 <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 800712e:	4aa1      	ldr	r2, [pc, #644]	; (80073b4 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 8007130:	4da1      	ldr	r5, [pc, #644]	; (80073b8 <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 8007132:	4299      	cmp	r1, r3
 8007134:	bf18      	it	ne
 8007136:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007138:	f8c2 03cc 	str.w	r0, [r2, #972]	; 0x3cc
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800713c:	bf14      	ite	ne
 800713e:	2301      	movne	r3, #1
 8007140:	2300      	moveq	r3, #0
 8007142:	42a9      	cmp	r1, r5
 8007144:	bf0c      	ite	eq
 8007146:	2300      	moveq	r3, #0
 8007148:	f003 0301 	andne.w	r3, r3, #1
 800714c:	2b00      	cmp	r3, #0
 800714e:	f000 81aa 	beq.w	80074a6 <HAL_DMAEx_MultiBufferStart_IT+0x88e>
 8007152:	4b96      	ldr	r3, [pc, #600]	; (80073ac <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 8007154:	4299      	cmp	r1, r3
 8007156:	f000 81a6 	beq.w	80074a6 <HAL_DMAEx_MultiBufferStart_IT+0x88e>
 800715a:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800715e:	4b94      	ldr	r3, [pc, #592]	; (80073b0 <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 8007160:	4a94      	ldr	r2, [pc, #592]	; (80073b4 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 8007162:	4d95      	ldr	r5, [pc, #596]	; (80073b8 <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 8007164:	4299      	cmp	r1, r3
 8007166:	bf18      	it	ne
 8007168:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800716a:	f8c2 03cc 	str.w	r0, [r2, #972]	; 0x3cc
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800716e:	bf14      	ite	ne
 8007170:	2301      	movne	r3, #1
 8007172:	2300      	moveq	r3, #0
 8007174:	42a9      	cmp	r1, r5
 8007176:	bf0c      	ite	eq
 8007178:	2300      	moveq	r3, #0
 800717a:	f003 0301 	andne.w	r3, r3, #1
 800717e:	2b00      	cmp	r3, #0
 8007180:	f000 818e 	beq.w	80074a0 <HAL_DMAEx_MultiBufferStart_IT+0x888>
 8007184:	4b89      	ldr	r3, [pc, #548]	; (80073ac <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 8007186:	4299      	cmp	r1, r3
 8007188:	f000 818a 	beq.w	80074a0 <HAL_DMAEx_MultiBufferStart_IT+0x888>
 800718c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8007190:	4b87      	ldr	r3, [pc, #540]	; (80073b0 <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 8007192:	4a88      	ldr	r2, [pc, #544]	; (80073b4 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 8007194:	4d88      	ldr	r5, [pc, #544]	; (80073b8 <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 8007196:	4299      	cmp	r1, r3
 8007198:	bf18      	it	ne
 800719a:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800719c:	f8c2 03cc 	str.w	r0, [r2, #972]	; 0x3cc
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80071a0:	bf14      	ite	ne
 80071a2:	2301      	movne	r3, #1
 80071a4:	2300      	moveq	r3, #0
 80071a6:	42a9      	cmp	r1, r5
 80071a8:	bf0c      	ite	eq
 80071aa:	2300      	moveq	r3, #0
 80071ac:	f003 0301 	andne.w	r3, r3, #1
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f000 8172 	beq.w	800749a <HAL_DMAEx_MultiBufferStart_IT+0x882>
 80071b6:	4b7d      	ldr	r3, [pc, #500]	; (80073ac <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 80071b8:	4299      	cmp	r1, r3
 80071ba:	f000 816e 	beq.w	800749a <HAL_DMAEx_MultiBufferStart_IT+0x882>
 80071be:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80071c2:	e579      	b.n	8006cb8 <HAL_DMAEx_MultiBufferStart_IT+0xa0>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80071c4:	3b48      	subs	r3, #72	; 0x48
 80071c6:	f5a0 707a 	sub.w	r0, r0, #1000	; 0x3e8
 80071ca:	3218      	adds	r2, #24
 80071cc:	4299      	cmp	r1, r3
 80071ce:	bf18      	it	ne
 80071d0:	4281      	cmpne	r1, r0
 80071d2:	bf14      	ite	ne
 80071d4:	2301      	movne	r3, #1
 80071d6:	2300      	moveq	r3, #0
 80071d8:	4291      	cmp	r1, r2
 80071da:	bf0c      	ite	eq
 80071dc:	2300      	moveq	r3, #0
 80071de:	f003 0301 	andne.w	r3, r3, #1
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	f000 816b 	beq.w	80074be <HAL_DMAEx_MultiBufferStart_IT+0x8a6>
 80071e8:	4b70      	ldr	r3, [pc, #448]	; (80073ac <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 80071ea:	4299      	cmp	r1, r3
 80071ec:	f000 8167 	beq.w	80074be <HAL_DMAEx_MultiBufferStart_IT+0x8a6>
 80071f0:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
 80071f4:	e604      	b.n	8006e00 <HAL_DMAEx_MultiBufferStart_IT+0x1e8>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80071f6:	4b6f      	ldr	r3, [pc, #444]	; (80073b4 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 80071f8:	486d      	ldr	r0, [pc, #436]	; (80073b0 <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 80071fa:	4a6f      	ldr	r2, [pc, #444]	; (80073b8 <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 80071fc:	4299      	cmp	r1, r3
 80071fe:	bf18      	it	ne
 8007200:	4281      	cmpne	r1, r0
 8007202:	bf14      	ite	ne
 8007204:	2301      	movne	r3, #1
 8007206:	2300      	moveq	r3, #0
 8007208:	4291      	cmp	r1, r2
 800720a:	bf0c      	ite	eq
 800720c:	2300      	moveq	r3, #0
 800720e:	f003 0301 	andne.w	r3, r3, #1
 8007212:	2b00      	cmp	r3, #0
 8007214:	f000 8159 	beq.w	80074ca <HAL_DMAEx_MultiBufferStart_IT+0x8b2>
 8007218:	4b64      	ldr	r3, [pc, #400]	; (80073ac <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 800721a:	4299      	cmp	r1, r3
 800721c:	f000 8155 	beq.w	80074ca <HAL_DMAEx_MultiBufferStart_IT+0x8b2>
 8007220:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8007224:	e603      	b.n	8006e2e <HAL_DMAEx_MultiBufferStart_IT+0x216>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007226:	4b62      	ldr	r3, [pc, #392]	; (80073b0 <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 8007228:	4862      	ldr	r0, [pc, #392]	; (80073b4 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 800722a:	4a63      	ldr	r2, [pc, #396]	; (80073b8 <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 800722c:	4299      	cmp	r1, r3
 800722e:	bf18      	it	ne
 8007230:	4281      	cmpne	r1, r0
 8007232:	bf14      	ite	ne
 8007234:	2301      	movne	r3, #1
 8007236:	2300      	moveq	r3, #0
 8007238:	4291      	cmp	r1, r2
 800723a:	bf0c      	ite	eq
 800723c:	2300      	moveq	r3, #0
 800723e:	f003 0301 	andne.w	r3, r3, #1
 8007242:	2b00      	cmp	r3, #0
 8007244:	f000 813e 	beq.w	80074c4 <HAL_DMAEx_MultiBufferStart_IT+0x8ac>
 8007248:	4b58      	ldr	r3, [pc, #352]	; (80073ac <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 800724a:	4299      	cmp	r1, r3
 800724c:	f000 813a 	beq.w	80074c4 <HAL_DMAEx_MultiBufferStart_IT+0x8ac>
 8007250:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8007254:	e619      	b.n	8006e8a <HAL_DMAEx_MultiBufferStart_IT+0x272>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007256:	4b56      	ldr	r3, [pc, #344]	; (80073b0 <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 8007258:	4856      	ldr	r0, [pc, #344]	; (80073b4 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 800725a:	4a57      	ldr	r2, [pc, #348]	; (80073b8 <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 800725c:	4299      	cmp	r1, r3
 800725e:	bf18      	it	ne
 8007260:	4281      	cmpne	r1, r0
 8007262:	bf14      	ite	ne
 8007264:	2301      	movne	r3, #1
 8007266:	2300      	moveq	r3, #0
 8007268:	4291      	cmp	r1, r2
 800726a:	bf0c      	ite	eq
 800726c:	2300      	moveq	r3, #0
 800726e:	f003 0301 	andne.w	r3, r3, #1
 8007272:	2b00      	cmp	r3, #0
 8007274:	f000 812c 	beq.w	80074d0 <HAL_DMAEx_MultiBufferStart_IT+0x8b8>
 8007278:	4b4c      	ldr	r3, [pc, #304]	; (80073ac <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 800727a:	4299      	cmp	r1, r3
 800727c:	f000 8128 	beq.w	80074d0 <HAL_DMAEx_MultiBufferStart_IT+0x8b8>
 8007280:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8007284:	e5ea      	b.n	8006e5c <HAL_DMAEx_MultiBufferStart_IT+0x244>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8007286:	4b4a      	ldr	r3, [pc, #296]	; (80073b0 <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 8007288:	484a      	ldr	r0, [pc, #296]	; (80073b4 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 800728a:	4a4b      	ldr	r2, [pc, #300]	; (80073b8 <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 800728c:	4299      	cmp	r1, r3
 800728e:	bf18      	it	ne
 8007290:	4281      	cmpne	r1, r0
 8007292:	bf14      	ite	ne
 8007294:	2301      	movne	r3, #1
 8007296:	2300      	moveq	r3, #0
 8007298:	4291      	cmp	r1, r2
 800729a:	bf0c      	ite	eq
 800729c:	2300      	moveq	r3, #0
 800729e:	f003 0301 	andne.w	r3, r3, #1
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	f000 8108 	beq.w	80074b8 <HAL_DMAEx_MultiBufferStart_IT+0x8a0>
 80072a8:	4b40      	ldr	r3, [pc, #256]	; (80073ac <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 80072aa:	4299      	cmp	r1, r3
 80072ac:	f000 8104 	beq.w	80074b8 <HAL_DMAEx_MultiBufferStart_IT+0x8a0>
 80072b0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80072b4:	e53e      	b.n	8006d34 <HAL_DMAEx_MultiBufferStart_IT+0x11c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80072b6:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 80072ba:	f500 6083 	add.w	r0, r0, #1048	; 0x418
 80072be:	3218      	adds	r2, #24
 80072c0:	4299      	cmp	r1, r3
 80072c2:	bf18      	it	ne
 80072c4:	4281      	cmpne	r1, r0
 80072c6:	bf14      	ite	ne
 80072c8:	2301      	movne	r3, #1
 80072ca:	2300      	moveq	r3, #0
 80072cc:	4291      	cmp	r1, r2
 80072ce:	bf0c      	ite	eq
 80072d0:	2300      	moveq	r3, #0
 80072d2:	f003 0301 	andne.w	r3, r3, #1
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	f000 80fd 	beq.w	80074d6 <HAL_DMAEx_MultiBufferStart_IT+0x8be>
 80072dc:	4b33      	ldr	r3, [pc, #204]	; (80073ac <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 80072de:	4299      	cmp	r1, r3
 80072e0:	f000 80f9 	beq.w	80074d6 <HAL_DMAEx_MultiBufferStart_IT+0x8be>
 80072e4:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80072e8:	e615      	b.n	8006f16 <HAL_DMAEx_MultiBufferStart_IT+0x2fe>
 80072ea:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 80072ee:	3018      	adds	r0, #24
 80072f0:	3218      	adds	r2, #24
 80072f2:	4299      	cmp	r1, r3
 80072f4:	bf18      	it	ne
 80072f6:	4281      	cmpne	r1, r0
 80072f8:	bf14      	ite	ne
 80072fa:	2301      	movne	r3, #1
 80072fc:	2300      	moveq	r3, #0
 80072fe:	4291      	cmp	r1, r2
 8007300:	bf0c      	ite	eq
 8007302:	2300      	moveq	r3, #0
 8007304:	f003 0301 	andne.w	r3, r3, #1
 8007308:	2b00      	cmp	r3, #0
 800730a:	f000 80ea 	beq.w	80074e2 <HAL_DMAEx_MultiBufferStart_IT+0x8ca>
 800730e:	4b27      	ldr	r3, [pc, #156]	; (80073ac <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 8007310:	4299      	cmp	r1, r3
 8007312:	f000 80e6 	beq.w	80074e2 <HAL_DMAEx_MultiBufferStart_IT+0x8ca>
 8007316:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800731a:	e670      	b.n	8006ffe <HAL_DMAEx_MultiBufferStart_IT+0x3e6>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800731c:	4b25      	ldr	r3, [pc, #148]	; (80073b4 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 800731e:	4824      	ldr	r0, [pc, #144]	; (80073b0 <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 8007320:	4a25      	ldr	r2, [pc, #148]	; (80073b8 <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 8007322:	4299      	cmp	r1, r3
 8007324:	bf18      	it	ne
 8007326:	4281      	cmpne	r1, r0
 8007328:	bf14      	ite	ne
 800732a:	2301      	movne	r3, #1
 800732c:	2300      	moveq	r3, #0
 800732e:	4291      	cmp	r1, r2
 8007330:	bf0c      	ite	eq
 8007332:	2300      	moveq	r3, #0
 8007334:	f003 0301 	andne.w	r3, r3, #1
 8007338:	2b00      	cmp	r3, #0
 800733a:	f000 80de 	beq.w	80074fa <HAL_DMAEx_MultiBufferStart_IT+0x8e2>
 800733e:	4b1b      	ldr	r3, [pc, #108]	; (80073ac <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 8007340:	4299      	cmp	r1, r3
 8007342:	f000 80da 	beq.w	80074fa <HAL_DMAEx_MultiBufferStart_IT+0x8e2>
 8007346:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800734a:	e66f      	b.n	800702c <HAL_DMAEx_MultiBufferStart_IT+0x414>
 800734c:	4b18      	ldr	r3, [pc, #96]	; (80073b0 <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 800734e:	4819      	ldr	r0, [pc, #100]	; (80073b4 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 8007350:	4a19      	ldr	r2, [pc, #100]	; (80073b8 <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 8007352:	4299      	cmp	r1, r3
 8007354:	bf18      	it	ne
 8007356:	4281      	cmpne	r1, r0
 8007358:	bf14      	ite	ne
 800735a:	2301      	movne	r3, #1
 800735c:	2300      	moveq	r3, #0
 800735e:	4291      	cmp	r1, r2
 8007360:	bf0c      	ite	eq
 8007362:	2300      	moveq	r3, #0
 8007364:	f003 0301 	andne.w	r3, r3, #1
 8007368:	2b00      	cmp	r3, #0
 800736a:	f000 80c0 	beq.w	80074ee <HAL_DMAEx_MultiBufferStart_IT+0x8d6>
 800736e:	4b0f      	ldr	r3, [pc, #60]	; (80073ac <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 8007370:	4299      	cmp	r1, r3
 8007372:	f000 80bc 	beq.w	80074ee <HAL_DMAEx_MultiBufferStart_IT+0x8d6>
 8007376:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800737a:	e5e4      	b.n	8006f46 <HAL_DMAEx_MultiBufferStart_IT+0x32e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800737c:	4b0d      	ldr	r3, [pc, #52]	; (80073b4 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 800737e:	480c      	ldr	r0, [pc, #48]	; (80073b0 <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 8007380:	4a0d      	ldr	r2, [pc, #52]	; (80073b8 <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 8007382:	4299      	cmp	r1, r3
 8007384:	bf18      	it	ne
 8007386:	4281      	cmpne	r1, r0
 8007388:	bf14      	ite	ne
 800738a:	2301      	movne	r3, #1
 800738c:	2300      	moveq	r3, #0
 800738e:	4291      	cmp	r1, r2
 8007390:	bf0c      	ite	eq
 8007392:	2300      	moveq	r3, #0
 8007394:	f003 0301 	andne.w	r3, r3, #1
 8007398:	2b00      	cmp	r3, #0
 800739a:	f000 80b4 	beq.w	8007506 <HAL_DMAEx_MultiBufferStart_IT+0x8ee>
 800739e:	4b03      	ldr	r3, [pc, #12]	; (80073ac <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 80073a0:	4299      	cmp	r1, r3
 80073a2:	f000 80b0 	beq.w	8007506 <HAL_DMAEx_MultiBufferStart_IT+0x8ee>
 80073a6:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80073aa:	e66e      	b.n	800708a <HAL_DMAEx_MultiBufferStart_IT+0x472>
 80073ac:	400264a0 	.word	0x400264a0
 80073b0:	40026440 	.word	0x40026440
 80073b4:	40026040 	.word	0x40026040
 80073b8:	400260a0 	.word	0x400260a0
 80073bc:	4b55      	ldr	r3, [pc, #340]	; (8007514 <HAL_DMAEx_MultiBufferStart_IT+0x8fc>)
 80073be:	4856      	ldr	r0, [pc, #344]	; (8007518 <HAL_DMAEx_MultiBufferStart_IT+0x900>)
 80073c0:	4a56      	ldr	r2, [pc, #344]	; (800751c <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 80073c2:	4299      	cmp	r1, r3
 80073c4:	bf18      	it	ne
 80073c6:	4281      	cmpne	r1, r0
 80073c8:	bf14      	ite	ne
 80073ca:	2301      	movne	r3, #1
 80073cc:	2300      	moveq	r3, #0
 80073ce:	4291      	cmp	r1, r2
 80073d0:	bf0c      	ite	eq
 80073d2:	2300      	moveq	r3, #0
 80073d4:	f003 0301 	andne.w	r3, r3, #1
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f000 8085 	beq.w	80074e8 <HAL_DMAEx_MultiBufferStart_IT+0x8d0>
 80073de:	4b50      	ldr	r3, [pc, #320]	; (8007520 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 80073e0:	4299      	cmp	r1, r3
 80073e2:	f000 8081 	beq.w	80074e8 <HAL_DMAEx_MultiBufferStart_IT+0x8d0>
 80073e6:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80073ea:	e5db      	b.n	8006fa4 <HAL_DMAEx_MultiBufferStart_IT+0x38c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80073ec:	4b4a      	ldr	r3, [pc, #296]	; (8007518 <HAL_DMAEx_MultiBufferStart_IT+0x900>)
 80073ee:	4849      	ldr	r0, [pc, #292]	; (8007514 <HAL_DMAEx_MultiBufferStart_IT+0x8fc>)
 80073f0:	4a4a      	ldr	r2, [pc, #296]	; (800751c <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 80073f2:	4299      	cmp	r1, r3
 80073f4:	bf18      	it	ne
 80073f6:	4281      	cmpne	r1, r0
 80073f8:	bf14      	ite	ne
 80073fa:	2301      	movne	r3, #1
 80073fc:	2300      	moveq	r3, #0
 80073fe:	4291      	cmp	r1, r2
 8007400:	bf0c      	ite	eq
 8007402:	2300      	moveq	r3, #0
 8007404:	f003 0301 	andne.w	r3, r3, #1
 8007408:	2b00      	cmp	r3, #0
 800740a:	d079      	beq.n	8007500 <HAL_DMAEx_MultiBufferStart_IT+0x8e8>
 800740c:	4b44      	ldr	r3, [pc, #272]	; (8007520 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 800740e:	4299      	cmp	r1, r3
 8007410:	d076      	beq.n	8007500 <HAL_DMAEx_MultiBufferStart_IT+0x8e8>
 8007412:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8007416:	e621      	b.n	800705c <HAL_DMAEx_MultiBufferStart_IT+0x444>
 8007418:	4b3e      	ldr	r3, [pc, #248]	; (8007514 <HAL_DMAEx_MultiBufferStart_IT+0x8fc>)
 800741a:	483f      	ldr	r0, [pc, #252]	; (8007518 <HAL_DMAEx_MultiBufferStart_IT+0x900>)
 800741c:	4a3f      	ldr	r2, [pc, #252]	; (800751c <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 800741e:	4299      	cmp	r1, r3
 8007420:	bf18      	it	ne
 8007422:	4281      	cmpne	r1, r0
 8007424:	bf14      	ite	ne
 8007426:	2301      	movne	r3, #1
 8007428:	2300      	moveq	r3, #0
 800742a:	4291      	cmp	r1, r2
 800742c:	bf0c      	ite	eq
 800742e:	2300      	moveq	r3, #0
 8007430:	f003 0301 	andne.w	r3, r3, #1
 8007434:	2b00      	cmp	r3, #0
 8007436:	d05d      	beq.n	80074f4 <HAL_DMAEx_MultiBufferStart_IT+0x8dc>
 8007438:	4b39      	ldr	r3, [pc, #228]	; (8007520 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 800743a:	4299      	cmp	r1, r3
 800743c:	d05a      	beq.n	80074f4 <HAL_DMAEx_MultiBufferStart_IT+0x8dc>
 800743e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8007442:	e598      	b.n	8006f76 <HAL_DMAEx_MultiBufferStart_IT+0x35e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8007444:	4b34      	ldr	r3, [pc, #208]	; (8007518 <HAL_DMAEx_MultiBufferStart_IT+0x900>)
 8007446:	4833      	ldr	r0, [pc, #204]	; (8007514 <HAL_DMAEx_MultiBufferStart_IT+0x8fc>)
 8007448:	4a34      	ldr	r2, [pc, #208]	; (800751c <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 800744a:	4299      	cmp	r1, r3
 800744c:	bf18      	it	ne
 800744e:	4281      	cmpne	r1, r0
 8007450:	bf14      	ite	ne
 8007452:	2301      	movne	r3, #1
 8007454:	2300      	moveq	r3, #0
 8007456:	4291      	cmp	r1, r2
 8007458:	bf0c      	ite	eq
 800745a:	2300      	moveq	r3, #0
 800745c:	f003 0301 	andne.w	r3, r3, #1
 8007460:	2b00      	cmp	r3, #0
 8007462:	d053      	beq.n	800750c <HAL_DMAEx_MultiBufferStart_IT+0x8f4>
 8007464:	4b2e      	ldr	r3, [pc, #184]	; (8007520 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 8007466:	4299      	cmp	r1, r3
 8007468:	d050      	beq.n	800750c <HAL_DMAEx_MultiBufferStart_IT+0x8f4>
 800746a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800746e:	e47b      	b.n	8006d68 <HAL_DMAEx_MultiBufferStart_IT+0x150>
 8007470:	4b29      	ldr	r3, [pc, #164]	; (8007518 <HAL_DMAEx_MultiBufferStart_IT+0x900>)
 8007472:	4828      	ldr	r0, [pc, #160]	; (8007514 <HAL_DMAEx_MultiBufferStart_IT+0x8fc>)
 8007474:	4a29      	ldr	r2, [pc, #164]	; (800751c <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 8007476:	4299      	cmp	r1, r3
 8007478:	bf18      	it	ne
 800747a:	4281      	cmpne	r1, r0
 800747c:	bf14      	ite	ne
 800747e:	2301      	movne	r3, #1
 8007480:	2300      	moveq	r3, #0
 8007482:	4291      	cmp	r1, r2
 8007484:	bf0c      	ite	eq
 8007486:	2300      	moveq	r3, #0
 8007488:	f003 0301 	andne.w	r3, r3, #1
 800748c:	b333      	cbz	r3, 80074dc <HAL_DMAEx_MultiBufferStart_IT+0x8c4>
 800748e:	4b24      	ldr	r3, [pc, #144]	; (8007520 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 8007490:	4299      	cmp	r1, r3
 8007492:	d023      	beq.n	80074dc <HAL_DMAEx_MultiBufferStart_IT+0x8c4>
 8007494:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8007498:	e476      	b.n	8006d88 <HAL_DMAEx_MultiBufferStart_IT+0x170>
 800749a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800749e:	e40b      	b.n	8006cb8 <HAL_DMAEx_MultiBufferStart_IT+0xa0>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80074a0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80074a4:	e674      	b.n	8007190 <HAL_DMAEx_MultiBufferStart_IT+0x578>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80074a6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80074aa:	e658      	b.n	800715e <HAL_DMAEx_MultiBufferStart_IT+0x546>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80074ac:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80074b0:	e63c      	b.n	800712c <HAL_DMAEx_MultiBufferStart_IT+0x514>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80074b2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80074b6:	e620      	b.n	80070fa <HAL_DMAEx_MultiBufferStart_IT+0x4e2>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80074b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80074bc:	e43a      	b.n	8006d34 <HAL_DMAEx_MultiBufferStart_IT+0x11c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80074be:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
 80074c2:	e49d      	b.n	8006e00 <HAL_DMAEx_MultiBufferStart_IT+0x1e8>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80074c4:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 80074c8:	e4df      	b.n	8006e8a <HAL_DMAEx_MultiBufferStart_IT+0x272>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80074ca:	f44f 1580 	mov.w	r5, #1048576	; 0x100000
 80074ce:	e4ae      	b.n	8006e2e <HAL_DMAEx_MultiBufferStart_IT+0x216>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80074d0:	f44f 2500 	mov.w	r5, #524288	; 0x80000
 80074d4:	e4c2      	b.n	8006e5c <HAL_DMAEx_MultiBufferStart_IT+0x244>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80074d6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80074da:	e51c      	b.n	8006f16 <HAL_DMAEx_MultiBufferStart_IT+0x2fe>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80074dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80074e0:	e452      	b.n	8006d88 <HAL_DMAEx_MultiBufferStart_IT+0x170>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80074e2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80074e6:	e58a      	b.n	8006ffe <HAL_DMAEx_MultiBufferStart_IT+0x3e6>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80074e8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80074ec:	e55a      	b.n	8006fa4 <HAL_DMAEx_MultiBufferStart_IT+0x38c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80074ee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80074f2:	e528      	b.n	8006f46 <HAL_DMAEx_MultiBufferStart_IT+0x32e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80074f4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80074f8:	e53d      	b.n	8006f76 <HAL_DMAEx_MultiBufferStart_IT+0x35e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80074fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80074fe:	e595      	b.n	800702c <HAL_DMAEx_MultiBufferStart_IT+0x414>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007500:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007504:	e5aa      	b.n	800705c <HAL_DMAEx_MultiBufferStart_IT+0x444>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007506:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800750a:	e5be      	b.n	800708a <HAL_DMAEx_MultiBufferStart_IT+0x472>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800750c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007510:	e42a      	b.n	8006d68 <HAL_DMAEx_MultiBufferStart_IT+0x150>
 8007512:	bf00      	nop
 8007514:	40026040 	.word	0x40026040
 8007518:	40026440 	.word	0x40026440
 800751c:	400260a0 	.word	0x400260a0
 8007520:	400264a0 	.word	0x400264a0

08007524 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8007524:	b530      	push	{r4, r5, lr}
 8007526:	4605      	mov	r5, r0
 8007528:	b083      	sub	sp, #12
  __IO uint32_t tmpreg = 0;
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800752a:	f241 0418 	movw	r4, #4120	; 0x1018
  __IO uint32_t tmpreg = 0;
 800752e:	2200      	movs	r2, #0
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8007530:	682b      	ldr	r3, [r5, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007532:	2001      	movs	r0, #1
  __IO uint32_t tmpreg = 0;
 8007534:	9201      	str	r2, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8007536:	591a      	ldr	r2, [r3, r4]
 8007538:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800753c:	511a      	str	r2, [r3, r4]
  tmpreg = (heth->Instance)->DMAOMR;
 800753e:	591b      	ldr	r3, [r3, r4]
 8007540:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007542:	f7fe f81b 	bl	800557c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8007546:	682b      	ldr	r3, [r5, #0]
 8007548:	9a01      	ldr	r2, [sp, #4]
 800754a:	511a      	str	r2, [r3, r4]
}
 800754c:	b003      	add	sp, #12
 800754e:	bd30      	pop	{r4, r5, pc}

08007550 <ETH_MACDMAConfig>:
{
 8007550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007552:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8007554:	2900      	cmp	r1, #0
 8007556:	d164      	bne.n	8007622 <ETH_MACDMAConfig+0xd2>
 8007558:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
 800755c:	430b      	orrs	r3, r1
 800755e:	f443 7100 	orr.w	r1, r3, #512	; 0x200
  tmpreg = (heth->Instance)->MACCR;
 8007562:	6822      	ldr	r2, [r4, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007564:	2001      	movs	r0, #1
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8007566:	69e5      	ldr	r5, [r4, #28]
  tmpreg = (heth->Instance)->MACCR;
 8007568:	6816      	ldr	r6, [r2, #0]
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800756a:	4b32      	ldr	r3, [pc, #200]	; (8007634 <ETH_MACDMAConfig+0xe4>)
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800756c:	2d00      	cmp	r5, #0
    tmpreg = (heth->Instance)->DMAOMR;
 800756e:	f241 0518 	movw	r5, #4120	; 0x1018
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8007572:	ea03 0306 	and.w	r3, r3, r6
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8007576:	f04f 0600 	mov.w	r6, #0
 800757a:	ea43 0301 	orr.w	r3, r3, r1
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800757e:	bf14      	ite	ne
 8007580:	4631      	movne	r1, r6
 8007582:	f44f 6180 	moveq.w	r1, #1024	; 0x400
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8007586:	430b      	orrs	r3, r1
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8007588:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 800758a:	6817      	ldr	r7, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800758c:	f7fd fff6 	bl	800557c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8007590:	6823      	ldr	r3, [r4, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8007592:	2240      	movs	r2, #64	; 0x40
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8007594:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg; 
 8007596:	601f      	str	r7, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8007598:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 800759a:	685f      	ldr	r7, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800759c:	f7fd ffee 	bl	800557c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80075a0:	6823      	ldr	r3, [r4, #0]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80075a2:	f64f 7141 	movw	r1, #65345	; 0xff41
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80075a6:	2001      	movs	r0, #1
   (heth->Instance)->MACFFR = tmpreg;
 80075a8:	605f      	str	r7, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80075aa:	609e      	str	r6, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80075ac:	60de      	str	r6, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 80075ae:	699a      	ldr	r2, [r3, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80075b0:	400a      	ands	r2, r1
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80075b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80075b6:	619a      	str	r2, [r3, #24]
   tmpreg = (heth->Instance)->MACFCR;
 80075b8:	699f      	ldr	r7, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80075ba:	f7fd ffdf 	bl	800557c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80075be:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80075c0:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg;
 80075c2:	619f      	str	r7, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80075c4:	61de      	str	r6, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 80075c6:	69de      	ldr	r6, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80075c8:	f7fd ffd8 	bl	800557c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80075cc:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80075ce:	2001      	movs	r0, #1
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80075d0:	4919      	ldr	r1, [pc, #100]	; (8007638 <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->MACVLANTR = tmpreg;
 80075d2:	61de      	str	r6, [r3, #28]
    tmpreg = (heth->Instance)->DMAOMR;
 80075d4:	595a      	ldr	r2, [r3, r5]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80075d6:	4011      	ands	r1, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80075d8:	4a18      	ldr	r2, [pc, #96]	; (800763c <ETH_MACDMAConfig+0xec>)
 80075da:	430a      	orrs	r2, r1
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80075dc:	515a      	str	r2, [r3, r5]
    tmpreg = (heth->Instance)->DMAOMR;
 80075de:	595e      	ldr	r6, [r3, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80075e0:	f7fd ffcc 	bl	800557c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80075e4:	6823      	ldr	r3, [r4, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80075e6:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80075e8:	4a15      	ldr	r2, [pc, #84]	; (8007640 <ETH_MACDMAConfig+0xf0>)
    (heth->Instance)->DMAOMR = tmpreg;
 80075ea:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80075ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075f0:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 80075f2:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80075f4:	f7fd ffc2 	bl	800557c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80075f8:	6823      	ldr	r3, [r4, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80075fa:	69a2      	ldr	r2, [r4, #24]
     (heth->Instance)->DMABMR = tmpreg;
 80075fc:	f503 5180 	add.w	r1, r3, #4096	; 0x1000
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8007600:	2a01      	cmp	r2, #1
     (heth->Instance)->DMABMR = tmpreg;
 8007602:	600d      	str	r5, [r1, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8007604:	d105      	bne.n	8007612 <ETH_MACDMAConfig+0xc2>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8007606:	f241 011c 	movw	r1, #4124	; 0x101c
 800760a:	4a0e      	ldr	r2, [pc, #56]	; (8007644 <ETH_MACDMAConfig+0xf4>)
 800760c:	5858      	ldr	r0, [r3, r1]
 800760e:	4302      	orrs	r2, r0
 8007610:	505a      	str	r2, [r3, r1]
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8007612:	6963      	ldr	r3, [r4, #20]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8007614:	490c      	ldr	r1, [pc, #48]	; (8007648 <ETH_MACDMAConfig+0xf8>)
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8007616:	8898      	ldrh	r0, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8007618:	4a0c      	ldr	r2, [pc, #48]	; (800764c <ETH_MACDMAConfig+0xfc>)
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800761a:	6008      	str	r0, [r1, #0]
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800761c:	681b      	ldr	r3, [r3, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800761e:	6013      	str	r3, [r2, #0]
}
 8007620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8007622:	f44f 6200 	mov.w	r2, #2048	; 0x800
    (heth->Init).Speed = ETH_SPEED_100M;
 8007626:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800762a:	f44f 4194 	mov.w	r1, #18944	; 0x4a00
 800762e:	e9c0 3202 	strd	r3, r2, [r0, #8]
 8007632:	e796      	b.n	8007562 <ETH_MACDMAConfig+0x12>
 8007634:	ff20810f 	.word	0xff20810f
 8007638:	f8de3f23 	.word	0xf8de3f23
 800763c:	02200004 	.word	0x02200004
 8007640:	02c12080 	.word	0x02c12080
 8007644:	00010040 	.word	0x00010040
 8007648:	40028040 	.word	0x40028040
 800764c:	40028044 	.word	0x40028044

08007650 <HAL_ETH_DMATxDescListInit>:
{
 8007650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(heth);
 8007654:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8007658:	2c01      	cmp	r4, #1
 800765a:	d03f      	beq.n	80076dc <HAL_ETH_DMATxDescListInit+0x8c>
 800765c:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800765e:	2402      	movs	r4, #2
  heth->TxDesc = DMATxDescTab;
 8007660:	62c1      	str	r1, [r0, #44]	; 0x2c
  __HAL_LOCK(heth);
 8007662:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8007666:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  for(i=0; i < TxBuffCount; i++)
 800766a:	b34b      	cbz	r3, 80076c0 <HAL_ETH_DMATxDescListInit+0x70>
 800766c:	f103 3eff 	add.w	lr, r3, #4294967295
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8007670:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8007674:	eb01 1343 	add.w	r3, r1, r3, lsl #5
 8007678:	460c      	mov	r4, r1
 800767a:	2500      	movs	r5, #0
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800767c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8007680:	e007      	b.n	8007692 <HAL_ETH_DMATxDescListInit+0x42>
  for(i=0; i < TxBuffCount; i++)
 8007682:	42b3      	cmp	r3, r6
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8007684:	60e6      	str	r6, [r4, #12]
 8007686:	f105 0501 	add.w	r5, r5, #1
 800768a:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
 800768e:	4634      	mov	r4, r6
  for(i=0; i < TxBuffCount; i++)
 8007690:	d016      	beq.n	80076c0 <HAL_ETH_DMATxDescListInit+0x70>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8007692:	f104 0620 	add.w	r6, r4, #32
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8007696:	f8c4 c000 	str.w	ip, [r4]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800769a:	60a2      	str	r2, [r4, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800769c:	f1b8 0f00 	cmp.w	r8, #0
 80076a0:	d103      	bne.n	80076aa <HAL_ETH_DMATxDescListInit+0x5a>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80076a2:	6827      	ldr	r7, [r4, #0]
 80076a4:	f447 0740 	orr.w	r7, r7, #12582912	; 0xc00000
 80076a8:	6027      	str	r7, [r4, #0]
    if(i < (TxBuffCount-1))
 80076aa:	4575      	cmp	r5, lr
 80076ac:	d3e9      	bcc.n	8007682 <HAL_ETH_DMATxDescListInit+0x32>
 80076ae:	f104 0620 	add.w	r6, r4, #32
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80076b2:	60e1      	str	r1, [r4, #12]
 80076b4:	3501      	adds	r5, #1
 80076b6:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
  for(i=0; i < TxBuffCount; i++)
 80076ba:	42b3      	cmp	r3, r6
 80076bc:	4634      	mov	r4, r6
 80076be:	d1e8      	bne.n	8007692 <HAL_ETH_DMATxDescListInit+0x42>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80076c0:	6805      	ldr	r5, [r0, #0]
  __HAL_UNLOCK(heth);
 80076c2:	2300      	movs	r3, #0
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80076c4:	f241 0210 	movw	r2, #4112	; 0x1010
  heth->State= HAL_ETH_STATE_READY;
 80076c8:	2401      	movs	r4, #1
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80076ca:	50a9      	str	r1, [r5, r2]
  return HAL_OK;
 80076cc:	461a      	mov	r2, r3
  heth->State= HAL_ETH_STATE_READY;
 80076ce:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80076d2:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
}
 80076d6:	4610      	mov	r0, r2
 80076d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(heth);
 80076dc:	2202      	movs	r2, #2
}
 80076de:	4610      	mov	r0, r2
 80076e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080076e4 <HAL_ETH_DMARxDescListInit>:
{
 80076e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 80076e6:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 80076ea:	2c01      	cmp	r4, #1
 80076ec:	d038      	beq.n	8007760 <HAL_ETH_DMARxDescListInit+0x7c>
 80076ee:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 80076f0:	2402      	movs	r4, #2
  heth->RxDesc = DMARxDescTab; 
 80076f2:	6281      	str	r1, [r0, #40]	; 0x28
  __HAL_LOCK(heth);
 80076f4:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80076f8:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  for(i=0; i < RxBuffCount; i++)
 80076fc:	b31b      	cbz	r3, 8007746 <HAL_ETH_DMARxDescListInit+0x62>
 80076fe:	f103 3eff 	add.w	lr, r3, #4294967295
 8007702:	460c      	mov	r4, r1
 8007704:	eb01 1343 	add.w	r3, r1, r3, lsl #5
 8007708:	2500      	movs	r5, #0
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800770a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800770e:	f244 57f4 	movw	r7, #17908	; 0x45f4
 8007712:	e007      	b.n	8007724 <HAL_ETH_DMARxDescListInit+0x40>
  for(i=0; i < RxBuffCount; i++)
 8007714:	42b3      	cmp	r3, r6
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8007716:	60e6      	str	r6, [r4, #12]
 8007718:	f105 0501 	add.w	r5, r5, #1
 800771c:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
 8007720:	4634      	mov	r4, r6
  for(i=0; i < RxBuffCount; i++)
 8007722:	d010      	beq.n	8007746 <HAL_ETH_DMARxDescListInit+0x62>
    if(i < (RxBuffCount-1))
 8007724:	4575      	cmp	r5, lr
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8007726:	f8c4 c000 	str.w	ip, [r4]
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 800772a:	f104 0620 	add.w	r6, r4, #32
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800772e:	e9c4 7201 	strd	r7, r2, [r4, #4]
    if(i < (RxBuffCount-1))
 8007732:	d3ef      	bcc.n	8007714 <HAL_ETH_DMARxDescListInit+0x30>
 8007734:	f104 0620 	add.w	r6, r4, #32
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8007738:	60e1      	str	r1, [r4, #12]
 800773a:	3501      	adds	r5, #1
 800773c:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
  for(i=0; i < RxBuffCount; i++)
 8007740:	42b3      	cmp	r3, r6
 8007742:	4634      	mov	r4, r6
 8007744:	d1ee      	bne.n	8007724 <HAL_ETH_DMARxDescListInit+0x40>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8007746:	6805      	ldr	r5, [r0, #0]
  __HAL_UNLOCK(heth);
 8007748:	2300      	movs	r3, #0
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800774a:	f241 020c 	movw	r2, #4108	; 0x100c
  heth->State= HAL_ETH_STATE_READY;
 800774e:	2401      	movs	r4, #1
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8007750:	50a9      	str	r1, [r5, r2]
  return HAL_OK;
 8007752:	461a      	mov	r2, r3
  heth->State= HAL_ETH_STATE_READY;
 8007754:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8007758:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
}
 800775c:	4610      	mov	r0, r2
 800775e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(heth);
 8007760:	2202      	movs	r2, #2
}
 8007762:	4610      	mov	r0, r2
 8007764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007766:	bf00      	nop

08007768 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 8007768:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800776c:	2b01      	cmp	r3, #1
 800776e:	d065      	beq.n	800783c <HAL_ETH_TransmitFrame+0xd4>
 8007770:	4602      	mov	r2, r0
  heth->State = HAL_ETH_STATE_BUSY;
 8007772:	2302      	movs	r3, #2
  __HAL_LOCK(heth);
 8007774:	2001      	movs	r0, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8007776:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
  __HAL_LOCK(heth);
 800777a:	f882 0045 	strb.w	r0, [r2, #69]	; 0x45
  if (FrameLength == 0) 
 800777e:	2900      	cmp	r1, #0
 8007780:	d033      	beq.n	80077ea <HAL_ETH_TransmitFrame+0x82>
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007782:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
{
 8007784:	b4f0      	push	{r4, r5, r6, r7}
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007786:	681c      	ldr	r4, [r3, #0]
 8007788:	2c00      	cmp	r4, #0
 800778a:	db59      	blt.n	8007840 <HAL_ETH_TransmitFrame+0xd8>
  if (FrameLength > ETH_TX_BUF_SIZE)
 800778c:	f240 50f4 	movw	r0, #1524	; 0x5f4
 8007790:	4281      	cmp	r1, r0
 8007792:	d931      	bls.n	80077f8 <HAL_ETH_TransmitFrame+0x90>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8007794:	4d31      	ldr	r5, [pc, #196]	; (800785c <HAL_ETH_TransmitFrame+0xf4>)
 8007796:	fba5 4501 	umull	r4, r5, r5, r1
 800779a:	0aad      	lsrs	r5, r5, #10
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800779c:	fb00 1015 	mls	r0, r0, r5, r1
 80077a0:	b340      	cbz	r0, 80077f4 <HAL_ETH_TransmitFrame+0x8c>
      bufcount++;
 80077a2:	3501      	adds	r5, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 80077a4:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
 80077a8:	4c2d      	ldr	r4, [pc, #180]	; (8007860 <HAL_ETH_TransmitFrame+0xf8>)
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80077aa:	2000      	movs	r0, #0
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80077ac:	f240 56f4 	movw	r6, #1524	; 0x5f4
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 80077b0:	fb04 1105 	mla	r1, r4, r5, r1
      if (i == (bufcount-1))
 80077b4:	1e6f      	subs	r7, r5, #1
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80077b6:	f3c1 010c 	ubfx	r1, r1, #0, #13
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80077ba:	681c      	ldr	r4, [r3, #0]
 80077bc:	f024 5440 	bic.w	r4, r4, #805306368	; 0x30000000
 80077c0:	601c      	str	r4, [r3, #0]
      if (i == 0) 
 80077c2:	2800      	cmp	r0, #0
 80077c4:	d044      	beq.n	8007850 <HAL_ETH_TransmitFrame+0xe8>
      if (i == (bufcount-1))
 80077c6:	4287      	cmp	r7, r0
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80077c8:	605e      	str	r6, [r3, #4]
      if (i == (bufcount-1))
 80077ca:	d104      	bne.n	80077d6 <HAL_ETH_TransmitFrame+0x6e>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80077cc:	681c      	ldr	r4, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80077ce:	6059      	str	r1, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80077d0:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 80077d4:	601c      	str	r4, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80077d6:	681c      	ldr	r4, [r3, #0]
    for (i=0; i< bufcount; i++)
 80077d8:	3001      	adds	r0, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80077da:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
    for (i=0; i< bufcount; i++)
 80077de:	42a8      	cmp	r0, r5
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80077e0:	601c      	str	r4, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80077e2:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< bufcount; i++)
 80077e4:	d1e9      	bne.n	80077ba <HAL_ETH_TransmitFrame+0x52>
 80077e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80077e8:	e013      	b.n	8007812 <HAL_ETH_TransmitFrame+0xaa>
    heth->State = HAL_ETH_STATE_READY;
 80077ea:	f882 0044 	strb.w	r0, [r2, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80077ee:	f882 1045 	strb.w	r1, [r2, #69]	; 0x45
    return  HAL_ERROR;                                    
 80077f2:	4770      	bx	lr
  if (bufcount == 1)
 80077f4:	2d01      	cmp	r5, #1
 80077f6:	d1d5      	bne.n	80077a4 <HAL_ETH_TransmitFrame+0x3c>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80077f8:	6818      	ldr	r0, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80077fa:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80077fe:	68dc      	ldr	r4, [r3, #12]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8007800:	f040 5040 	orr.w	r0, r0, #805306368	; 0x30000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8007804:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8007806:	6018      	str	r0, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8007808:	6819      	ldr	r1, [r3, #0]
 800780a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800780e:	6019      	str	r1, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8007810:	62d4      	str	r4, [r2, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8007812:	6813      	ldr	r3, [r2, #0]
 8007814:	f241 0114 	movw	r1, #4116	; 0x1014
 8007818:	5858      	ldr	r0, [r3, r1]
 800781a:	0740      	lsls	r0, r0, #29
 800781c:	d505      	bpl.n	800782a <HAL_ETH_TransmitFrame+0xc2>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800781e:	2504      	movs	r5, #4
    (heth->Instance)->DMATPDR = 0;
 8007820:	f241 0004 	movw	r0, #4100	; 0x1004
 8007824:	2400      	movs	r4, #0
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8007826:	505d      	str	r5, [r3, r1]
    (heth->Instance)->DMATPDR = 0;
 8007828:	501c      	str	r4, [r3, r0]
  __HAL_UNLOCK(heth);
 800782a:	2300      	movs	r3, #0
  heth->State = HAL_ETH_STATE_READY;
 800782c:	2101      	movs	r1, #1
  return HAL_OK;
 800782e:	4618      	mov	r0, r3
  heth->State = HAL_ETH_STATE_READY;
 8007830:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8007834:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
}
 8007838:	bcf0      	pop	{r4, r5, r6, r7}
 800783a:	4770      	bx	lr
  __HAL_LOCK(heth);
 800783c:	2002      	movs	r0, #2
}
 800783e:	4770      	bx	lr
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8007840:	2112      	movs	r1, #18
    __HAL_UNLOCK(heth);
 8007842:	2300      	movs	r3, #0
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8007844:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8007848:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
}
 800784c:	bcf0      	pop	{r4, r5, r6, r7}
 800784e:	4770      	bx	lr
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8007850:	681c      	ldr	r4, [r3, #0]
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8007852:	605e      	str	r6, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8007854:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8007858:	601c      	str	r4, [r3, #0]
 800785a:	e7bc      	b.n	80077d6 <HAL_ETH_TransmitFrame+0x6e>
 800785c:	ac02b00b 	.word	0xac02b00b
 8007860:	fffffa0c 	.word	0xfffffa0c

08007864 <HAL_ETH_GetReceivedFrame_IT>:
  __HAL_LOCK(heth);
 8007864:	f890 2045 	ldrb.w	r2, [r0, #69]	; 0x45
 8007868:	2a01      	cmp	r2, #1
 800786a:	d032      	beq.n	80078d2 <HAL_ETH_GetReceivedFrame_IT+0x6e>
 800786c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800786e:	4603      	mov	r3, r0
 8007870:	2101      	movs	r1, #1
  uint32_t descriptorscancounter = 0;
 8007872:	2000      	movs	r0, #0
{
 8007874:	b470      	push	{r4, r5, r6}
  heth->State = HAL_ETH_STATE_BUSY;
 8007876:	2402      	movs	r4, #2
  __HAL_LOCK(heth);
 8007878:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
      heth->RxFrameInfos.SegCount = 1;   
 800787c:	460d      	mov	r5, r1
  heth->State = HAL_ETH_STATE_BUSY;
 800787e:	f883 4044 	strb.w	r4, [r3, #68]	; 0x44
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8007882:	6811      	ldr	r1, [r2, #0]
 8007884:	2900      	cmp	r1, #0
 8007886:	db17      	blt.n	80078b8 <HAL_ETH_GetReceivedFrame_IT+0x54>
 8007888:	2804      	cmp	r0, #4
    descriptorscancounter++;
 800788a:	f100 0001 	add.w	r0, r0, #1
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800788e:	d013      	beq.n	80078b8 <HAL_ETH_GetReceivedFrame_IT+0x54>
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8007890:	6811      	ldr	r1, [r2, #0]
 8007892:	68d4      	ldr	r4, [r2, #12]
 8007894:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8007898:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800789c:	d014      	beq.n	80078c8 <HAL_ETH_GetReceivedFrame_IT+0x64>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800789e:	6816      	ldr	r6, [r2, #0]
 80078a0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80078a2:	f416 7f40 	tst.w	r6, #768	; 0x300
 80078a6:	f101 0101 	add.w	r1, r1, #1
 80078aa:	d114      	bne.n	80078d6 <HAL_ETH_GetReceivedFrame_IT+0x72>
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80078ac:	4622      	mov	r2, r4
      (heth->RxFrameInfos.SegCount)++;
 80078ae:	6399      	str	r1, [r3, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 80078b0:	629c      	str	r4, [r3, #40]	; 0x28
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80078b2:	6811      	ldr	r1, [r2, #0]
 80078b4:	2900      	cmp	r1, #0
 80078b6:	dae7      	bge.n	8007888 <HAL_ETH_GetReceivedFrame_IT+0x24>
  heth->State = HAL_ETH_STATE_READY;
 80078b8:	2001      	movs	r0, #1
  __HAL_UNLOCK(heth);
 80078ba:	2200      	movs	r2, #0
  heth->State = HAL_ETH_STATE_READY;
 80078bc:	f883 0044 	strb.w	r0, [r3, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80078c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
}
 80078c4:	bc70      	pop	{r4, r5, r6}
 80078c6:	4770      	bx	lr
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80078c8:	631a      	str	r2, [r3, #48]	; 0x30
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80078ca:	4622      	mov	r2, r4
      heth->RxFrameInfos.SegCount = 1;   
 80078cc:	639d      	str	r5, [r3, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80078ce:	629c      	str	r4, [r3, #40]	; 0x28
 80078d0:	e7ef      	b.n	80078b2 <HAL_ETH_GetReceivedFrame_IT+0x4e>
  __HAL_LOCK(heth);
 80078d2:	2002      	movs	r0, #2
}
 80078d4:	4770      	bx	lr
      if ((heth->RxFrameInfos.SegCount) == 1)
 80078d6:	2901      	cmp	r1, #1
      (heth->RxFrameInfos.SegCount)++;
 80078d8:	e9c3 210d 	strd	r2, r1, [r3, #52]	; 0x34
      if ((heth->RxFrameInfos.SegCount) == 1)
 80078dc:	d010      	beq.n	8007900 <HAL_ETH_GetReceivedFrame_IT+0x9c>
 80078de:	6b19      	ldr	r1, [r3, #48]	; 0x30
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80078e0:	6812      	ldr	r2, [r2, #0]
      heth->State = HAL_ETH_STATE_READY;
 80078e2:	2501      	movs	r5, #1
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80078e4:	6888      	ldr	r0, [r1, #8]
      __HAL_UNLOCK(heth);
 80078e6:	2100      	movs	r1, #0
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80078e8:	f3c2 420d 	ubfx	r2, r2, #16, #14
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80078ec:	629c      	str	r4, [r3, #40]	; 0x28
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80078ee:	6418      	str	r0, [r3, #64]	; 0x40
      return HAL_OK;
 80078f0:	4608      	mov	r0, r1
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80078f2:	3a04      	subs	r2, #4
      heth->State = HAL_ETH_STATE_READY;
 80078f4:	f883 5044 	strb.w	r5, [r3, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80078f8:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80078fc:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_OK;
 80078fe:	e7e1      	b.n	80078c4 <HAL_ETH_GetReceivedFrame_IT+0x60>
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8007900:	4611      	mov	r1, r2
 8007902:	631a      	str	r2, [r3, #48]	; 0x30
 8007904:	e7ec      	b.n	80078e0 <HAL_ETH_GetReceivedFrame_IT+0x7c>
 8007906:	bf00      	nop

08007908 <HAL_ETH_TxCpltCallback>:
 8007908:	4770      	bx	lr
 800790a:	bf00      	nop

0800790c <HAL_ETH_ErrorCallback>:
 800790c:	4770      	bx	lr
 800790e:	bf00      	nop

08007910 <HAL_ETH_IRQHandler>:
{
 8007910:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8007912:	6803      	ldr	r3, [r0, #0]
 8007914:	f241 0614 	movw	r6, #4116	; 0x1014
{
 8007918:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 800791a:	599d      	ldr	r5, [r3, r6]
 800791c:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8007920:	d123      	bne.n	800796a <HAL_ETH_IRQHandler+0x5a>
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8007922:	599a      	ldr	r2, [r3, r6]
 8007924:	07d2      	lsls	r2, r2, #31
 8007926:	d416      	bmi.n	8007956 <HAL_ETH_IRQHandler+0x46>
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8007928:	f241 0514 	movw	r5, #4116	; 0x1014
 800792c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007930:	515a      	str	r2, [r3, r5]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8007932:	595b      	ldr	r3, [r3, r5]
 8007934:	041b      	lsls	r3, r3, #16
 8007936:	d400      	bmi.n	800793a <HAL_ETH_IRQHandler+0x2a>
}
 8007938:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ETH_ErrorCallback(heth);
 800793a:	4620      	mov	r0, r4
 800793c:	f7ff ffe6 	bl	800790c <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8007940:	6821      	ldr	r1, [r4, #0]
 8007942:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    heth->State = HAL_ETH_STATE_READY;
 8007946:	2201      	movs	r2, #1
    __HAL_UNLOCK(heth);
 8007948:	2300      	movs	r3, #0
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800794a:	5148      	str	r0, [r1, r5]
    heth->State = HAL_ETH_STATE_READY;
 800794c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8007950:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8007954:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ETH_TxCpltCallback(heth);
 8007956:	f7ff ffd7 	bl	8007908 <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 800795a:	2201      	movs	r2, #1
 800795c:	6823      	ldr	r3, [r4, #0]
 800795e:	519a      	str	r2, [r3, r6]
    heth->State = HAL_ETH_STATE_READY;
 8007960:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8007964:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8007968:	e7de      	b.n	8007928 <HAL_ETH_IRQHandler+0x18>
    HAL_ETH_RxCpltCallback(heth);
 800796a:	f008 fad3 	bl	800ff14 <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800796e:	6823      	ldr	r3, [r4, #0]
 8007970:	2040      	movs	r0, #64	; 0x40
    heth->State = HAL_ETH_STATE_READY;
 8007972:	2101      	movs	r1, #1
    __HAL_UNLOCK(heth);
 8007974:	2200      	movs	r2, #0
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8007976:	5198      	str	r0, [r3, r6]
    heth->State = HAL_ETH_STATE_READY;
 8007978:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800797c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8007980:	e7d2      	b.n	8007928 <HAL_ETH_IRQHandler+0x18>
 8007982:	bf00      	nop

08007984 <HAL_ETH_ReadPHYRegister>:
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 8007984:	8a03      	ldrh	r3, [r0, #16]
 8007986:	2b20      	cmp	r3, #32
{
 8007988:	b570      	push	{r4, r5, r6, lr}
 800798a:	4604      	mov	r4, r0
 800798c:	460d      	mov	r5, r1
 800798e:	4616      	mov	r6, r2
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 8007990:	d833      	bhi.n	80079fa <HAL_ETH_ReadPHYRegister+0x76>
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8007992:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007996:	2b82      	cmp	r3, #130	; 0x82
 8007998:	d038      	beq.n	8007a0c <HAL_ETH_ReadPHYRegister+0x88>
  tmpreg = heth->Instance->MACMIIAR;
 800799a:	6820      	ldr	r0, [r4, #0]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800799c:	01ab      	lsls	r3, r5, #6
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800799e:	2282      	movs	r2, #130	; 0x82
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80079a0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80079a4:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80079a8:	8a22      	ldrh	r2, [r4, #16]
 80079aa:	f043 0301 	orr.w	r3, r3, #1
  tmpreg = heth->Instance->MACMIIAR;
 80079ae:	6901      	ldr	r1, [r0, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80079b0:	02d2      	lsls	r2, r2, #11
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80079b2:	f001 011c 	and.w	r1, r1, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80079b6:	b292      	uxth	r2, r2
 80079b8:	430b      	orrs	r3, r1
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80079ba:	4313      	orrs	r3, r2
  heth->Instance->MACMIIAR = tmpreg;
 80079bc:	6103      	str	r3, [r0, #16]
  tickstart = HAL_GetTick();
 80079be:	f7fd fdd7 	bl	8005570 <HAL_GetTick>
 80079c2:	4605      	mov	r5, r0
 80079c4:	e004      	b.n	80079d0 <HAL_ETH_ReadPHYRegister+0x4c>
    tmpreg = heth->Instance->MACMIIAR;
 80079c6:	6823      	ldr	r3, [r4, #0]
 80079c8:	6918      	ldr	r0, [r3, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80079ca:	f010 0001 	ands.w	r0, r0, #1
 80079ce:	d00d      	beq.n	80079ec <HAL_ETH_ReadPHYRegister+0x68>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80079d0:	f7fd fdce 	bl	8005570 <HAL_GetTick>
 80079d4:	1b40      	subs	r0, r0, r5
 80079d6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80079da:	d3f4      	bcc.n	80079c6 <HAL_ETH_ReadPHYRegister+0x42>
      heth->State= HAL_ETH_STATE_READY;
 80079dc:	2201      	movs	r2, #1
      __HAL_UNLOCK(heth);
 80079de:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 80079e0:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 80079e2:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80079e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 80079ea:	bd70      	pop	{r4, r5, r6, pc}
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80079ec:	695b      	ldr	r3, [r3, #20]
  heth->State = HAL_ETH_STATE_READY;
 80079ee:	2201      	movs	r2, #1
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 80079f4:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
}
 80079f8:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 80079fa:	f240 5116 	movw	r1, #1302	; 0x516
 80079fe:	4804      	ldr	r0, [pc, #16]	; (8007a10 <HAL_ETH_ReadPHYRegister+0x8c>)
 8007a00:	f7fb fa10 	bl	8002e24 <assert_failed>
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8007a04:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007a08:	2b82      	cmp	r3, #130	; 0x82
 8007a0a:	d1c6      	bne.n	800799a <HAL_ETH_ReadPHYRegister+0x16>
    return HAL_BUSY;
 8007a0c:	2002      	movs	r0, #2
}
 8007a0e:	bd70      	pop	{r4, r5, r6, pc}
 8007a10:	08026608 	.word	0x08026608

08007a14 <HAL_ETH_WritePHYRegister>:
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 8007a14:	8a03      	ldrh	r3, [r0, #16]
 8007a16:	2b20      	cmp	r3, #32
{
 8007a18:	b570      	push	{r4, r5, r6, lr}
 8007a1a:	4604      	mov	r4, r0
 8007a1c:	460d      	mov	r5, r1
 8007a1e:	4616      	mov	r6, r2
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 8007a20:	d832      	bhi.n	8007a88 <HAL_ETH_WritePHYRegister+0x74>
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8007a22:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007a26:	2b42      	cmp	r3, #66	; 0x42
 8007a28:	d037      	beq.n	8007a9a <HAL_ETH_WritePHYRegister+0x86>
  tmpreg = heth->Instance->MACMIIAR;
 8007a2a:	6821      	ldr	r1, [r4, #0]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8007a2c:	01ab      	lsls	r3, r5, #6
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8007a2e:	2242      	movs	r2, #66	; 0x42
 8007a30:	b2b6      	uxth	r6, r6
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8007a32:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8007a36:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8007a3a:	8a22      	ldrh	r2, [r4, #16]
 8007a3c:	f043 0303 	orr.w	r3, r3, #3
  tmpreg = heth->Instance->MACMIIAR;
 8007a40:	6908      	ldr	r0, [r1, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8007a42:	02d2      	lsls	r2, r2, #11
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8007a44:	614e      	str	r6, [r1, #20]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8007a46:	f000 001c 	and.w	r0, r0, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8007a4a:	b292      	uxth	r2, r2
 8007a4c:	4303      	orrs	r3, r0
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8007a4e:	4313      	orrs	r3, r2
  heth->Instance->MACMIIAR = tmpreg;
 8007a50:	610b      	str	r3, [r1, #16]
  tickstart = HAL_GetTick();
 8007a52:	f7fd fd8d 	bl	8005570 <HAL_GetTick>
 8007a56:	4605      	mov	r5, r0
 8007a58:	e004      	b.n	8007a64 <HAL_ETH_WritePHYRegister+0x50>
    tmpreg = heth->Instance->MACMIIAR;
 8007a5a:	6823      	ldr	r3, [r4, #0]
 8007a5c:	6918      	ldr	r0, [r3, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8007a5e:	f010 0001 	ands.w	r0, r0, #1
 8007a62:	d00d      	beq.n	8007a80 <HAL_ETH_WritePHYRegister+0x6c>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8007a64:	f7fd fd84 	bl	8005570 <HAL_GetTick>
 8007a68:	1b40      	subs	r0, r0, r5
 8007a6a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8007a6e:	d3f4      	bcc.n	8007a5a <HAL_ETH_WritePHYRegister+0x46>
      heth->State= HAL_ETH_STATE_READY;
 8007a70:	2201      	movs	r2, #1
      __HAL_UNLOCK(heth);
 8007a72:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 8007a74:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 8007a76:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8007a7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8007a7e:	bd70      	pop	{r4, r5, r6, pc}
  heth->State = HAL_ETH_STATE_READY;
 8007a80:	2301      	movs	r3, #1
 8007a82:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8007a86:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 8007a88:	f240 515e 	movw	r1, #1374	; 0x55e
 8007a8c:	4804      	ldr	r0, [pc, #16]	; (8007aa0 <HAL_ETH_WritePHYRegister+0x8c>)
 8007a8e:	f7fb f9c9 	bl	8002e24 <assert_failed>
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8007a92:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007a96:	2b42      	cmp	r3, #66	; 0x42
 8007a98:	d1c7      	bne.n	8007a2a <HAL_ETH_WritePHYRegister+0x16>
    return HAL_BUSY;
 8007a9a:	2002      	movs	r0, #2
}
 8007a9c:	bd70      	pop	{r4, r5, r6, pc}
 8007a9e:	bf00      	nop
 8007aa0:	08026608 	.word	0x08026608

08007aa4 <HAL_ETH_Init>:
{
 8007aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tempreg = 0, phyreg = 0;
 8007aa6:	2300      	movs	r3, #0
{
 8007aa8:	b083      	sub	sp, #12
  uint32_t tempreg = 0, phyreg = 0;
 8007aaa:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 8007aac:	2800      	cmp	r0, #0
 8007aae:	f000 80bb 	beq.w	8007c28 <HAL_ETH_Init+0x184>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
 8007ab2:	6843      	ldr	r3, [r0, #4]
 8007ab4:	4604      	mov	r4, r0
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	f200 8092 	bhi.w	8007be0 <HAL_ETH_Init+0x13c>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 8007abc:	69a3      	ldr	r3, [r4, #24]
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	f200 8085 	bhi.w	8007bce <HAL_ETH_Init+0x12a>
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 8007ac4:	69e3      	ldr	r3, [r4, #28]
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d878      	bhi.n	8007bbc <HAL_ETH_Init+0x118>
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
 8007aca:	6a23      	ldr	r3, [r4, #32]
 8007acc:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 8007ad0:	f040 8095 	bne.w	8007bfe <HAL_ETH_Init+0x15a>
  if(heth->State == HAL_ETH_STATE_RESET)
 8007ad4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007ad8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	f000 8088 	beq.w	8007bf2 <HAL_ETH_Init+0x14e>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ae2:	4b90      	ldr	r3, [pc, #576]	; (8007d24 <HAL_ETH_Init+0x280>)
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8007ae4:	6821      	ldr	r1, [r4, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ae6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8007ae8:	488f      	ldr	r0, [pc, #572]	; (8007d28 <HAL_ETH_Init+0x284>)
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8007aea:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007aee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007af2:	645a      	str	r2, [r3, #68]	; 0x44
 8007af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007afa:	9301      	str	r3, [sp, #4]
 8007afc:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8007afe:	6843      	ldr	r3, [r0, #4]
 8007b00:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007b04:	6043      	str	r3, [r0, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8007b06:	6843      	ldr	r3, [r0, #4]
 8007b08:	6a22      	ldr	r2, [r4, #32]
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	6043      	str	r3, [r0, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8007b0e:	680b      	ldr	r3, [r1, #0]
 8007b10:	f043 0301 	orr.w	r3, r3, #1
 8007b14:	600b      	str	r3, [r1, #0]
  tickstart = HAL_GetTick();
 8007b16:	f7fd fd2b 	bl	8005570 <HAL_GetTick>
 8007b1a:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8007b1c:	e005      	b.n	8007b2a <HAL_ETH_Init+0x86>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8007b1e:	f7fd fd27 	bl	8005570 <HAL_GetTick>
 8007b22:	1b40      	subs	r0, r0, r5
 8007b24:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8007b28:	d875      	bhi.n	8007c16 <HAL_ETH_Init+0x172>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8007b2a:	6823      	ldr	r3, [r4, #0]
 8007b2c:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8007b30:	6812      	ldr	r2, [r2, #0]
 8007b32:	07d0      	lsls	r0, r2, #31
 8007b34:	d4f3      	bmi.n	8007b1e <HAL_ETH_Init+0x7a>
  tempreg = (heth->Instance)->MACMIIAR;
 8007b36:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 8007b38:	f002 fda6 	bl	800a688 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 8007b3c:	4b7b      	ldr	r3, [pc, #492]	; (8007d2c <HAL_ETH_Init+0x288>)
 8007b3e:	4a7c      	ldr	r2, [pc, #496]	; (8007d30 <HAL_ETH_Init+0x28c>)
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8007b40:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000)&&(hclk < 35000000))
 8007b44:	4403      	add	r3, r0
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d972      	bls.n	8007c30 <HAL_ETH_Init+0x18c>
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8007b4a:	4b7a      	ldr	r3, [pc, #488]	; (8007d34 <HAL_ETH_Init+0x290>)
 8007b4c:	4a7a      	ldr	r2, [pc, #488]	; (8007d38 <HAL_ETH_Init+0x294>)
 8007b4e:	4403      	add	r3, r0
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d87a      	bhi.n	8007c4a <HAL_ETH_Init+0x1a6>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8007b54:	f045 050c 	orr.w	r5, r5, #12
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8007b58:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8007b5a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007b5e:	2100      	movs	r1, #0
 8007b60:	4620      	mov	r0, r4
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8007b62:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8007b64:	f7ff ff56 	bl	8007a14 <HAL_ETH_WritePHYRegister>
 8007b68:	4605      	mov	r5, r0
 8007b6a:	2800      	cmp	r0, #0
 8007b6c:	d163      	bne.n	8007c36 <HAL_ETH_Init+0x192>
  HAL_Delay(PHY_RESET_DELAY);
 8007b6e:	20ff      	movs	r0, #255	; 0xff
 8007b70:	f7fd fd04 	bl	800557c <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8007b74:	6863      	ldr	r3, [r4, #4]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d176      	bne.n	8007c68 <HAL_ETH_Init+0x1c4>
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
 8007b7a:	68a3      	ldr	r3, [r4, #8]
 8007b7c:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 8007b80:	f040 8098 	bne.w	8007cb4 <HAL_ETH_Init+0x210>
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
 8007b84:	68e3      	ldr	r3, [r4, #12]
 8007b86:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8007b8a:	f040 808c 	bne.w	8007ca6 <HAL_ETH_Init+0x202>
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8007b8e:	08db      	lsrs	r3, r3, #3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8007b90:	68a2      	ldr	r2, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8007b92:	2100      	movs	r1, #0
 8007b94:	4620      	mov	r0, r4
 8007b96:	ea43 0252 	orr.w	r2, r3, r2, lsr #1
 8007b9a:	b292      	uxth	r2, r2
 8007b9c:	f7ff ff3a 	bl	8007a14 <HAL_ETH_WritePHYRegister>
 8007ba0:	2800      	cmp	r0, #0
 8007ba2:	d148      	bne.n	8007c36 <HAL_ETH_Init+0x192>
    HAL_Delay(PHY_CONFIG_DELAY);
 8007ba4:	f640 70ff 	movw	r0, #4095	; 0xfff
 8007ba8:	f7fd fce8 	bl	800557c <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 8007bac:	2100      	movs	r1, #0
 8007bae:	4620      	mov	r0, r4
 8007bb0:	f7ff fcce 	bl	8007550 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8007bba:	e032      	b.n	8007c22 <HAL_ETH_Init+0x17e>
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 8007bbc:	21e0      	movs	r1, #224	; 0xe0
 8007bbe:	485f      	ldr	r0, [pc, #380]	; (8007d3c <HAL_ETH_Init+0x298>)
 8007bc0:	f7fb f930 	bl	8002e24 <assert_failed>
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
 8007bc4:	6a23      	ldr	r3, [r4, #32]
 8007bc6:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 8007bca:	d083      	beq.n	8007ad4 <HAL_ETH_Init+0x30>
 8007bcc:	e017      	b.n	8007bfe <HAL_ETH_Init+0x15a>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 8007bce:	21df      	movs	r1, #223	; 0xdf
 8007bd0:	485a      	ldr	r0, [pc, #360]	; (8007d3c <HAL_ETH_Init+0x298>)
 8007bd2:	f7fb f927 	bl	8002e24 <assert_failed>
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 8007bd6:	69e3      	ldr	r3, [r4, #28]
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	f67f af76 	bls.w	8007aca <HAL_ETH_Init+0x26>
 8007bde:	e7ed      	b.n	8007bbc <HAL_ETH_Init+0x118>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
 8007be0:	21de      	movs	r1, #222	; 0xde
 8007be2:	4856      	ldr	r0, [pc, #344]	; (8007d3c <HAL_ETH_Init+0x298>)
 8007be4:	f7fb f91e 	bl	8002e24 <assert_failed>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 8007be8:	69a3      	ldr	r3, [r4, #24]
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	f67f af6a 	bls.w	8007ac4 <HAL_ETH_Init+0x20>
 8007bf0:	e7ed      	b.n	8007bce <HAL_ETH_Init+0x12a>
    heth->Lock = HAL_UNLOCKED;
 8007bf2:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8007bf6:	4620      	mov	r0, r4
 8007bf8:	f008 f8fe 	bl	800fdf8 <HAL_ETH_MspInit>
 8007bfc:	e771      	b.n	8007ae2 <HAL_ETH_Init+0x3e>
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
 8007bfe:	21e1      	movs	r1, #225	; 0xe1
 8007c00:	484e      	ldr	r0, [pc, #312]	; (8007d3c <HAL_ETH_Init+0x298>)
 8007c02:	f7fb f90f 	bl	8002e24 <assert_failed>
  if(heth->State == HAL_ETH_STATE_RESET)
 8007c06:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007c0a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	f47f af67 	bne.w	8007ae2 <HAL_ETH_Init+0x3e>
 8007c14:	e7ed      	b.n	8007bf2 <HAL_ETH_Init+0x14e>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8007c16:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 8007c18:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8007c1a:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8007c1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8007c22:	4628      	mov	r0, r5
 8007c24:	b003      	add	sp, #12
 8007c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8007c28:	2501      	movs	r5, #1
}
 8007c2a:	4628      	mov	r0, r5
 8007c2c:	b003      	add	sp, #12
 8007c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8007c30:	f045 0508 	orr.w	r5, r5, #8
 8007c34:	e790      	b.n	8007b58 <HAL_ETH_Init+0xb4>
      heth->State = HAL_ETH_STATE_READY;
 8007c36:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 8007c38:	4620      	mov	r0, r4
 8007c3a:	2101      	movs	r1, #1
 8007c3c:	f7ff fc88 	bl	8007550 <ETH_MACDMAConfig>
}
 8007c40:	4628      	mov	r0, r5
      heth->State = HAL_ETH_STATE_READY;
 8007c42:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
}
 8007c46:	b003      	add	sp, #12
 8007c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8007c4a:	4b3d      	ldr	r3, [pc, #244]	; (8007d40 <HAL_ETH_Init+0x29c>)
 8007c4c:	4a3d      	ldr	r2, [pc, #244]	; (8007d44 <HAL_ETH_Init+0x2a0>)
 8007c4e:	4403      	add	r3, r0
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d981      	bls.n	8007b58 <HAL_ETH_Init+0xb4>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8007c54:	4b3c      	ldr	r3, [pc, #240]	; (8007d48 <HAL_ETH_Init+0x2a4>)
 8007c56:	4a3d      	ldr	r2, [pc, #244]	; (8007d4c <HAL_ETH_Init+0x2a8>)
 8007c58:	4403      	add	r3, r0
 8007c5a:	4293      	cmp	r3, r2
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8007c5c:	bf94      	ite	ls
 8007c5e:	f045 0504 	orrls.w	r5, r5, #4
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8007c62:	f045 0510 	orrhi.w	r5, r5, #16
 8007c66:	e777      	b.n	8007b58 <HAL_ETH_Init+0xb4>
    tickstart = HAL_GetTick();
 8007c68:	f7fd fc82 	bl	8005570 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8007c6c:	f241 3688 	movw	r6, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8007c70:	4607      	mov	r7, r0
 8007c72:	e002      	b.n	8007c7a <HAL_ETH_Init+0x1d6>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8007c74:	9b00      	ldr	r3, [sp, #0]
 8007c76:	0759      	lsls	r1, r3, #29
 8007c78:	d422      	bmi.n	8007cc0 <HAL_ETH_Init+0x21c>
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8007c7a:	466a      	mov	r2, sp
 8007c7c:	2101      	movs	r1, #1
 8007c7e:	4620      	mov	r0, r4
 8007c80:	f7ff fe80 	bl	8007984 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8007c84:	f7fd fc74 	bl	8005570 <HAL_GetTick>
 8007c88:	1bc0      	subs	r0, r0, r7
 8007c8a:	42b0      	cmp	r0, r6
 8007c8c:	d9f2      	bls.n	8007c74 <HAL_ETH_Init+0x1d0>
        ETH_MACDMAConfig(heth, err);
 8007c8e:	2101      	movs	r1, #1
 8007c90:	4620      	mov	r0, r4
 8007c92:	f7ff fc5d 	bl	8007550 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8007c96:	2201      	movs	r2, #1
        __HAL_UNLOCK(heth);
 8007c98:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8007c9a:	2503      	movs	r5, #3
        heth->State= HAL_ETH_STATE_READY;
 8007c9c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8007ca0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8007ca4:	e7bd      	b.n	8007c22 <HAL_ETH_Init+0x17e>
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
 8007ca6:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8007caa:	4824      	ldr	r0, [pc, #144]	; (8007d3c <HAL_ETH_Init+0x298>)
 8007cac:	f7fb f8ba 	bl	8002e24 <assert_failed>
 8007cb0:	68e3      	ldr	r3, [r4, #12]
 8007cb2:	e76c      	b.n	8007b8e <HAL_ETH_Init+0xea>
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
 8007cb4:	f240 11c5 	movw	r1, #453	; 0x1c5
 8007cb8:	4820      	ldr	r0, [pc, #128]	; (8007d3c <HAL_ETH_Init+0x298>)
 8007cba:	f7fb f8b3 	bl	8002e24 <assert_failed>
 8007cbe:	e761      	b.n	8007b84 <HAL_ETH_Init+0xe0>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8007cc0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007cc4:	2100      	movs	r1, #0
 8007cc6:	4620      	mov	r0, r4
 8007cc8:	f7ff fea4 	bl	8007a14 <HAL_ETH_WritePHYRegister>
 8007ccc:	2800      	cmp	r0, #0
 8007cce:	d1b2      	bne.n	8007c36 <HAL_ETH_Init+0x192>
    tickstart = HAL_GetTick();
 8007cd0:	f7fd fc4e 	bl	8005570 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8007cd4:	f241 3688 	movw	r6, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8007cd8:	4607      	mov	r7, r0
 8007cda:	e002      	b.n	8007ce2 <HAL_ETH_Init+0x23e>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8007cdc:	9b00      	ldr	r3, [sp, #0]
 8007cde:	069a      	lsls	r2, r3, #26
 8007ce0:	d40a      	bmi.n	8007cf8 <HAL_ETH_Init+0x254>
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8007ce2:	466a      	mov	r2, sp
 8007ce4:	2101      	movs	r1, #1
 8007ce6:	4620      	mov	r0, r4
 8007ce8:	f7ff fe4c 	bl	8007984 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8007cec:	f7fd fc40 	bl	8005570 <HAL_GetTick>
 8007cf0:	1bc0      	subs	r0, r0, r7
 8007cf2:	42b0      	cmp	r0, r6
 8007cf4:	d9f2      	bls.n	8007cdc <HAL_ETH_Init+0x238>
 8007cf6:	e7ca      	b.n	8007c8e <HAL_ETH_Init+0x1ea>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8007cf8:	466a      	mov	r2, sp
 8007cfa:	211f      	movs	r1, #31
 8007cfc:	4620      	mov	r0, r4
 8007cfe:	f7ff fe41 	bl	8007984 <HAL_ETH_ReadPHYRegister>
 8007d02:	2800      	cmp	r0, #0
 8007d04:	d197      	bne.n	8007c36 <HAL_ETH_Init+0x192>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8007d06:	9b00      	ldr	r3, [sp, #0]
 8007d08:	f013 0210 	ands.w	r2, r3, #16
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8007d0c:	bf18      	it	ne
 8007d0e:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8007d12:	075b      	lsls	r3, r3, #29
      (heth->Init).Speed = ETH_SPEED_10M; 
 8007d14:	bf4c      	ite	mi
 8007d16:	2300      	movmi	r3, #0
      (heth->Init).Speed = ETH_SPEED_100M;
 8007d18:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8007d1c:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_100M;
 8007d1e:	60a3      	str	r3, [r4, #8]
 8007d20:	e744      	b.n	8007bac <HAL_ETH_Init+0x108>
 8007d22:	bf00      	nop
 8007d24:	40023800 	.word	0x40023800
 8007d28:	40013800 	.word	0x40013800
 8007d2c:	feced300 	.word	0xfeced300
 8007d30:	00e4e1bf 	.word	0x00e4e1bf
 8007d34:	fde9f140 	.word	0xfde9f140
 8007d38:	017d783f 	.word	0x017d783f
 8007d3c:	08026608 	.word	0x08026608
 8007d40:	fc6c7900 	.word	0xfc6c7900
 8007d44:	026259ff 	.word	0x026259ff
 8007d48:	fa0a1f00 	.word	0xfa0a1f00
 8007d4c:	02faf07f 	.word	0x02faf07f

08007d50 <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 8007d50:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d039      	beq.n	8007dcc <HAL_ETH_Start+0x7c>
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8007d58:	6803      	ldr	r3, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 8007d5a:	2202      	movs	r2, #2
{  
 8007d5c:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t tmpreg = 0;
 8007d5e:	2500      	movs	r5, #0
{  
 8007d60:	b082      	sub	sp, #8
  heth->State = HAL_ETH_STATE_BUSY;
 8007d62:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 8007d66:	4604      	mov	r4, r0
  __IO uint32_t tmpreg = 0;
 8007d68:	9501      	str	r5, [sp, #4]
  __HAL_LOCK(heth);
 8007d6a:	2601      	movs	r6, #1
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8007d6c:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(heth);
 8007d6e:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007d72:	4630      	mov	r0, r6
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8007d74:	f042 0208 	orr.w	r2, r2, #8
 8007d78:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007d7e:	f7fd fbfd 	bl	800557c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8007d82:	9a01      	ldr	r2, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007d84:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 8007d86:	6823      	ldr	r3, [r4, #0]
 8007d88:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg = 0;
 8007d8a:	9500      	str	r5, [sp, #0]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	f042 0204 	orr.w	r2, r2, #4
 8007d92:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	9300      	str	r3, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007d98:	f7fd fbf0 	bl	800557c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8007d9c:	6823      	ldr	r3, [r4, #0]
  ETH_FlushTransmitFIFO(heth);
 8007d9e:	4620      	mov	r0, r4
  (heth->Instance)->MACCR = tmpreg;
 8007da0:	9a00      	ldr	r2, [sp, #0]
 8007da2:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8007da4:	f7ff fbbe 	bl	8007524 <ETH_FlushTransmitFIFO>
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8007da8:	6822      	ldr	r2, [r4, #0]
 8007daa:	f241 0318 	movw	r3, #4120	; 0x1018
  return HAL_OK;
 8007dae:	4628      	mov	r0, r5
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8007db0:	58d1      	ldr	r1, [r2, r3]
 8007db2:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8007db6:	50d1      	str	r1, [r2, r3]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8007db8:	58d1      	ldr	r1, [r2, r3]
 8007dba:	f041 0102 	orr.w	r1, r1, #2
 8007dbe:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8007dc0:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8007dc4:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
}
 8007dc8:	b002      	add	sp, #8
 8007dca:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(heth);
 8007dcc:	2002      	movs	r0, #2
}
 8007dce:	4770      	bx	lr

08007dd0 <HAL_ETH_Stop>:
  __HAL_LOCK(heth);
 8007dd0:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d039      	beq.n	8007e4c <HAL_ETH_Stop+0x7c>
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8007dd8:	6803      	ldr	r3, [r0, #0]
 8007dda:	f241 0218 	movw	r2, #4120	; 0x1018
  heth->State = HAL_ETH_STATE_BUSY;
 8007dde:	2102      	movs	r1, #2
{  
 8007de0:	b570      	push	{r4, r5, r6, lr}
  heth->State = HAL_ETH_STATE_BUSY;
 8007de2:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 8007de6:	2601      	movs	r6, #1
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8007de8:	5899      	ldr	r1, [r3, r2]
{  
 8007dea:	b082      	sub	sp, #8
  __HAL_LOCK(heth);
 8007dec:	f880 6045 	strb.w	r6, [r0, #69]	; 0x45
  __IO uint32_t tmpreg = 0;
 8007df0:	2500      	movs	r5, #0
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8007df2:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8007df6:	4604      	mov	r4, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007df8:	4630      	mov	r0, r6
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8007dfa:	5099      	str	r1, [r3, r2]
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8007dfc:	5899      	ldr	r1, [r3, r2]
 8007dfe:	f021 0102 	bic.w	r1, r1, #2
 8007e02:	5099      	str	r1, [r3, r2]
  __IO uint32_t tmpreg = 0;
 8007e04:	9501      	str	r5, [sp, #4]
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	f022 0204 	bic.w	r2, r2, #4
 8007e0c:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007e12:	f7fd fbb3 	bl	800557c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8007e16:	6823      	ldr	r3, [r4, #0]
  ETH_FlushTransmitFIFO(heth);
 8007e18:	4620      	mov	r0, r4
  (heth->Instance)->MACCR = tmpreg;
 8007e1a:	9a01      	ldr	r2, [sp, #4]
 8007e1c:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8007e1e:	f7ff fb81 	bl	8007524 <ETH_FlushTransmitFIFO>
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8007e22:	6823      	ldr	r3, [r4, #0]
  __IO uint32_t tmpreg = 0;
 8007e24:	9500      	str	r5, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007e26:	4630      	mov	r0, r6
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	f022 0208 	bic.w	r2, r2, #8
 8007e2e:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	9300      	str	r3, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007e34:	f7fd fba2 	bl	800557c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8007e38:	9a00      	ldr	r2, [sp, #0]
  return HAL_OK;
 8007e3a:	4628      	mov	r0, r5
  (heth->Instance)->MACCR = tmpreg;
 8007e3c:	6823      	ldr	r3, [r4, #0]
 8007e3e:	601a      	str	r2, [r3, #0]
  heth->State = HAL_ETH_STATE_READY;
 8007e40:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8007e44:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
}
 8007e48:	b002      	add	sp, #8
 8007e4a:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(heth);
 8007e4c:	2002      	movs	r0, #2
}
 8007e4e:	4770      	bx	lr

08007e50 <HAL_ETH_ConfigMAC>:
{
 8007e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 8007e52:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	f000 8242 	beq.w	80082e0 <HAL_ETH_ConfigMAC+0x490>
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 8007e5c:	6883      	ldr	r3, [r0, #8]
 8007e5e:	460c      	mov	r4, r1
  heth->State= HAL_ETH_STATE_BUSY;
 8007e60:	2202      	movs	r2, #2
  __HAL_LOCK(heth);
 8007e62:	2101      	movs	r1, #1
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 8007e64:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 8007e68:	4605      	mov	r5, r0
  __HAL_LOCK(heth);
 8007e6a:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
  heth->State= HAL_ETH_STATE_BUSY;
 8007e6e:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 8007e72:	f040 8207 	bne.w	8008284 <HAL_ETH_ConfigMAC+0x434>
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
 8007e76:	68eb      	ldr	r3, [r5, #12]
 8007e78:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8007e7c:	f040 8114 	bne.w	80080a8 <HAL_ETH_ConfigMAC+0x258>
  if (macconf != NULL)
 8007e80:	2c00      	cmp	r4, #0
 8007e82:	f000 8119 	beq.w	80080b8 <HAL_ETH_ConfigMAC+0x268>
    assert_param(IS_ETH_WATCHDOG(macconf->Watchdog));
 8007e86:	6823      	ldr	r3, [r4, #0]
 8007e88:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 8007e8c:	f040 8139 	bne.w	8008102 <HAL_ETH_ConfigMAC+0x2b2>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 8007e90:	6863      	ldr	r3, [r4, #4]
 8007e92:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 8007e96:	f040 816b 	bne.w	8008170 <HAL_ETH_ConfigMAC+0x320>
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 8007e9a:	68a3      	ldr	r3, [r4, #8]
 8007e9c:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 8007ea0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007ea4:	d002      	beq.n	8007eac <HAL_ETH_ConfigMAC+0x5c>
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	f040 821c 	bne.w	80082e4 <HAL_ETH_ConfigMAC+0x494>
    assert_param(IS_ETH_CARRIER_SENSE(macconf->CarrierSense));
 8007eac:	68e3      	ldr	r3, [r4, #12]
 8007eae:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 8007eb2:	f040 8152 	bne.w	800815a <HAL_ETH_ConfigMAC+0x30a>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 8007eb6:	6923      	ldr	r3, [r4, #16]
 8007eb8:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 8007ebc:	f040 8142 	bne.w	8008144 <HAL_ETH_ConfigMAC+0x2f4>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 8007ec0:	6963      	ldr	r3, [r4, #20]
 8007ec2:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8007ec6:	f040 8132 	bne.w	800812e <HAL_ETH_ConfigMAC+0x2de>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 8007eca:	69a3      	ldr	r3, [r4, #24]
 8007ecc:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8007ed0:	f040 8122 	bne.w	8008118 <HAL_ETH_ConfigMAC+0x2c8>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 8007ed4:	69e3      	ldr	r3, [r4, #28]
 8007ed6:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8007eda:	f040 81a3 	bne.w	8008224 <HAL_ETH_ConfigMAC+0x3d4>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 8007ede:	6a23      	ldr	r3, [r4, #32]
 8007ee0:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8007ee4:	f040 818e 	bne.w	8008204 <HAL_ETH_ConfigMAC+0x3b4>
    assert_param(IS_ETH_BACKOFF_LIMIT(macconf->BackOffLimit));
 8007ee8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007eea:	f033 0360 	bics.w	r3, r3, #96	; 0x60
 8007eee:	f040 8193 	bne.w	8008218 <HAL_ETH_ConfigMAC+0x3c8>
    assert_param(IS_ETH_DEFERRAL_CHECK(macconf->DeferralCheck));
 8007ef2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007ef4:	f033 0310 	bics.w	r3, r3, #16
 8007ef8:	f040 8179 	bne.w	80081ee <HAL_ETH_ConfigMAC+0x39e>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 8007efc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007efe:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 8007f02:	f040 819a 	bne.w	800823a <HAL_ETH_ConfigMAC+0x3ea>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 8007f06:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007f08:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 8007f0c:	d003      	beq.n	8007f16 <HAL_ETH_ConfigMAC+0xc6>
 8007f0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f12:	f040 81d3 	bne.w	80082bc <HAL_ETH_ConfigMAC+0x46c>
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 8007f16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f18:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f1c:	2a40      	cmp	r2, #64	; 0x40
 8007f1e:	d002      	beq.n	8007f26 <HAL_ETH_ConfigMAC+0xd6>
 8007f20:	2b80      	cmp	r3, #128	; 0x80
 8007f22:	f040 81b5 	bne.w	8008290 <HAL_ETH_ConfigMAC+0x440>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 8007f26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007f28:	f033 0320 	bics.w	r3, r3, #32
 8007f2c:	f040 80de 	bne.w	80080ec <HAL_ETH_ConfigMAC+0x29c>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 8007f30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007f32:	f033 0308 	bics.w	r3, r3, #8
 8007f36:	f040 80cf 	bne.w	80080d8 <HAL_ETH_ConfigMAC+0x288>
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 8007f3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	f200 80a5 	bhi.w	800808c <HAL_ETH_ConfigMAC+0x23c>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 8007f42:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007f44:	f240 4204 	movw	r2, #1028	; 0x404
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	bf18      	it	ne
 8007f4c:	2b10      	cmpne	r3, #16
 8007f4e:	d003      	beq.n	8007f58 <HAL_ETH_ConfigMAC+0x108>
 8007f50:	f033 0304 	bics.w	r3, r3, #4
 8007f54:	f040 81be 	bne.w	80082d4 <HAL_ETH_ConfigMAC+0x484>
    assert_param(IS_ETH_UNICAST_FRAMES_FILTER(macconf->UnicastFramesFilter));
 8007f58:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007f5a:	f033 0202 	bics.w	r2, r3, #2
 8007f5e:	d004      	beq.n	8007f6a <HAL_ETH_ConfigMAC+0x11a>
 8007f60:	f240 4202 	movw	r2, #1026	; 0x402
 8007f64:	4293      	cmp	r3, r2
 8007f66:	f040 819e 	bne.w	80082a6 <HAL_ETH_ConfigMAC+0x456>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 8007f6a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f70:	f080 816e 	bcs.w	8008250 <HAL_ETH_ConfigMAC+0x400>
    assert_param(IS_ETH_ZEROQUANTA_PAUSE(macconf->ZeroQuantaPause));
 8007f74:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f76:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8007f7a:	f040 8173 	bne.w	8008264 <HAL_ETH_ConfigMAC+0x414>
    assert_param(IS_ETH_PAUSE_LOW_THRESHOLD(macconf->PauseLowThreshold));
 8007f7e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007f80:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 8007f84:	f040 8178 	bne.w	8008278 <HAL_ETH_ConfigMAC+0x428>
    assert_param(IS_ETH_UNICAST_PAUSE_FRAME_DETECT(macconf->UnicastPauseFrameDetect));
 8007f88:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8007f8a:	f033 0308 	bics.w	r3, r3, #8
 8007f8e:	f040 8123 	bne.w	80081d8 <HAL_ETH_ConfigMAC+0x388>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 8007f92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f94:	f033 0304 	bics.w	r3, r3, #4
 8007f98:	f040 8113 	bne.w	80081c2 <HAL_ETH_ConfigMAC+0x372>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 8007f9c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007f9e:	f033 0302 	bics.w	r3, r3, #2
 8007fa2:	f040 8103 	bne.w	80081ac <HAL_ETH_ConfigMAC+0x35c>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 8007fa6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007fa8:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 8007fac:	f040 80f3 	bne.w	8008196 <HAL_ETH_ConfigMAC+0x346>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 8007fb0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fb6:	f080 80e8 	bcs.w	800818a <HAL_ETH_ConfigMAC+0x33a>
                         macconf->BackOffLimit | 
 8007fba:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8007fbc:	2001      	movs	r0, #1
                         macconf->BackOffLimit | 
 8007fbe:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8007fc2:	430b      	orrs	r3, r1
 8007fc4:	e9d4 6103 	ldrd	r6, r1, [r4, #12]
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	6962      	ldr	r2, [r4, #20]
 8007fcc:	4333      	orrs	r3, r6
 8007fce:	69a6      	ldr	r6, [r4, #24]
 8007fd0:	430b      	orrs	r3, r1
 8007fd2:	69e1      	ldr	r1, [r4, #28]
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	6a22      	ldr	r2, [r4, #32]
 8007fd8:	4333      	orrs	r3, r6
 8007fda:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007fdc:	430b      	orrs	r3, r1
 8007fde:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	68aa      	ldr	r2, [r5, #8]
 8007fe4:	4333      	orrs	r3, r6
    tmpreg = (heth->Instance)->MACCR;
 8007fe6:	682e      	ldr	r6, [r5, #0]
                         macconf->BackOffLimit | 
 8007fe8:	430b      	orrs	r3, r1
    tmpreg = (heth->Instance)->MACCR;
 8007fea:	6837      	ldr	r7, [r6, #0]
                         macconf->BackOffLimit | 
 8007fec:	68e9      	ldr	r1, [r5, #12]
 8007fee:	4313      	orrs	r3, r2
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8007ff0:	4abf      	ldr	r2, [pc, #764]	; (80082f0 <HAL_ETH_ConfigMAC+0x4a0>)
                         macconf->BackOffLimit | 
 8007ff2:	430b      	orrs	r3, r1
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8007ff4:	403a      	ands	r2, r7
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8007ff6:	f64f 7741 	movw	r7, #65345	; 0xff41
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8007ffa:	4313      	orrs	r3, r2
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8007ffc:	6033      	str	r3, [r6, #0]
    tmpreg = (heth->Instance)->MACCR;
 8007ffe:	6836      	ldr	r6, [r6, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8008000:	f7fd fabc 	bl	800557c <HAL_Delay>
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8008004:	6b21      	ldr	r1, [r4, #48]	; 0x30
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8008006:	2001      	movs	r0, #1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8008008:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    (heth->Instance)->MACCR = tmpreg; 
 800800a:	682a      	ldr	r2, [r5, #0]
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800800c:	430b      	orrs	r3, r1
                                          macconf->SourceAddrFilter |
 800800e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    (heth->Instance)->MACCR = tmpreg; 
 8008010:	6016      	str	r6, [r2, #0]
                                          macconf->SourceAddrFilter |
 8008012:	430b      	orrs	r3, r1
                                          macconf->BroadcastFramesReception | 
 8008014:	e9d4 160e 	ldrd	r1, r6, [r4, #56]	; 0x38
                                          macconf->PassControlFrames |
 8008018:	430b      	orrs	r3, r1
                                          macconf->DestinationAddrFilter |
 800801a:	6c21      	ldr	r1, [r4, #64]	; 0x40
                                          macconf->BroadcastFramesReception | 
 800801c:	4333      	orrs	r3, r6
                                          macconf->PromiscuousMode |
 800801e:	6c66      	ldr	r6, [r4, #68]	; 0x44
                                          macconf->DestinationAddrFilter |
 8008020:	430b      	orrs	r3, r1
                                          macconf->MulticastFramesFilter |
 8008022:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                                          macconf->PromiscuousMode |
 8008024:	4333      	orrs	r3, r6
                                          macconf->MulticastFramesFilter |
 8008026:	430b      	orrs	r3, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8008028:	6053      	str	r3, [r2, #4]
     tmpreg = (heth->Instance)->MACFFR;
 800802a:	6856      	ldr	r6, [r2, #4]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800802c:	f7fd faa6 	bl	800557c <HAL_Delay>
                          macconf->ReceiveFlowControl |
 8008030:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008032:	6da3      	ldr	r3, [r4, #88]	; 0x58
     (heth->Instance)->MACFFR = tmpreg;
 8008034:	682a      	ldr	r2, [r5, #0]
                          macconf->ReceiveFlowControl |
 8008036:	430b      	orrs	r3, r1
 8008038:	6e21      	ldr	r1, [r4, #96]	; 0x60
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800803a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
                          macconf->ReceiveFlowControl |
 800803c:	430b      	orrs	r3, r1
 800803e:	6e61      	ldr	r1, [r4, #100]	; 0x64
     (heth->Instance)->MACFFR = tmpreg;
 8008040:	6056      	str	r6, [r2, #4]
                          macconf->ReceiveFlowControl |
 8008042:	430b      	orrs	r3, r1
 8008044:	6ea6      	ldr	r6, [r4, #104]	; 0x68
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8008046:	6d21      	ldr	r1, [r4, #80]	; 0x50
                          macconf->ReceiveFlowControl |
 8008048:	4333      	orrs	r3, r6
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800804a:	6090      	str	r0, [r2, #8]
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800804c:	6d66      	ldr	r6, [r4, #84]	; 0x54
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800804e:	2001      	movs	r0, #1
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8008050:	60d1      	str	r1, [r2, #12]
     tmpreg = (heth->Instance)->MACFCR;
 8008052:	6991      	ldr	r1, [r2, #24]
                          macconf->ReceiveFlowControl |
 8008054:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8008058:	4039      	ands	r1, r7
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800805a:	430b      	orrs	r3, r1
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800805c:	6193      	str	r3, [r2, #24]
     tmpreg = (heth->Instance)->MACFCR;
 800805e:	6996      	ldr	r6, [r2, #24]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8008060:	f7fd fa8c 	bl	800557c <HAL_Delay>
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8008064:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8008066:	2001      	movs	r0, #1
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8008068:	6f21      	ldr	r1, [r4, #112]	; 0x70
     (heth->Instance)->MACFCR = tmpreg;
 800806a:	682b      	ldr	r3, [r5, #0]
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800806c:	430a      	orrs	r2, r1
     (heth->Instance)->MACFCR = tmpreg;
 800806e:	619e      	str	r6, [r3, #24]
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8008070:	61da      	str	r2, [r3, #28]
      tmpreg = (heth->Instance)->MACVLANTR;
 8008072:	69dc      	ldr	r4, [r3, #28]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8008074:	f7fd fa82 	bl	800557c <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8008078:	682b      	ldr	r3, [r5, #0]
 800807a:	61dc      	str	r4, [r3, #28]
  __HAL_UNLOCK(heth);
 800807c:	2300      	movs	r3, #0
  heth->State= HAL_ETH_STATE_READY;
 800807e:	2201      	movs	r2, #1
  return HAL_OK;  
 8008080:	4618      	mov	r0, r3
  heth->State= HAL_ETH_STATE_READY;
 8008082:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8008086:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
}
 800808a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 800808c:	f240 6123 	movw	r1, #1571	; 0x623
 8008090:	4898      	ldr	r0, [pc, #608]	; (80082f4 <HAL_ETH_ConfigMAC+0x4a4>)
 8008092:	f7fa fec7 	bl	8002e24 <assert_failed>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 8008096:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008098:	f240 4204 	movw	r2, #1028	; 0x404
 800809c:	4293      	cmp	r3, r2
 800809e:	bf18      	it	ne
 80080a0:	2b10      	cmpne	r3, #16
 80080a2:	f47f af55 	bne.w	8007f50 <HAL_ETH_ConfigMAC+0x100>
 80080a6:	e757      	b.n	8007f58 <HAL_ETH_ConfigMAC+0x108>
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
 80080a8:	f240 610e 	movw	r1, #1550	; 0x60e
 80080ac:	4891      	ldr	r0, [pc, #580]	; (80082f4 <HAL_ETH_ConfigMAC+0x4a4>)
 80080ae:	f7fa feb9 	bl	8002e24 <assert_failed>
  if (macconf != NULL)
 80080b2:	2c00      	cmp	r4, #0
 80080b4:	f47f aee7 	bne.w	8007e86 <HAL_ETH_ConfigMAC+0x36>
    tmpreg = (heth->Instance)->MACCR;
 80080b8:	682a      	ldr	r2, [r5, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80080ba:	2001      	movs	r0, #1
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80080bc:	68ec      	ldr	r4, [r5, #12]
    tmpreg = (heth->Instance)->MACCR;
 80080be:	6811      	ldr	r1, [r2, #0]
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80080c0:	68ab      	ldr	r3, [r5, #8]
    tmpreg &= ~((uint32_t)0x00004800);
 80080c2:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80080c6:	4323      	orrs	r3, r4
 80080c8:	430b      	orrs	r3, r1
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80080ca:	6013      	str	r3, [r2, #0]
    tmpreg = (heth->Instance)->MACCR;
 80080cc:	6814      	ldr	r4, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80080ce:	f7fd fa55 	bl	800557c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 80080d2:	682b      	ldr	r3, [r5, #0]
 80080d4:	601c      	str	r4, [r3, #0]
 80080d6:	e7d1      	b.n	800807c <HAL_ETH_ConfigMAC+0x22c>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 80080d8:	f240 6122 	movw	r1, #1570	; 0x622
 80080dc:	4885      	ldr	r0, [pc, #532]	; (80082f4 <HAL_ETH_ConfigMAC+0x4a4>)
 80080de:	f7fa fea1 	bl	8002e24 <assert_failed>
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 80080e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	f67f af2c 	bls.w	8007f42 <HAL_ETH_ConfigMAC+0xf2>
 80080ea:	e7cf      	b.n	800808c <HAL_ETH_ConfigMAC+0x23c>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 80080ec:	f240 6121 	movw	r1, #1569	; 0x621
 80080f0:	4880      	ldr	r0, [pc, #512]	; (80082f4 <HAL_ETH_ConfigMAC+0x4a4>)
 80080f2:	f7fa fe97 	bl	8002e24 <assert_failed>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 80080f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80080f8:	f033 0308 	bics.w	r3, r3, #8
 80080fc:	f43f af1d 	beq.w	8007f3a <HAL_ETH_ConfigMAC+0xea>
 8008100:	e7ea      	b.n	80080d8 <HAL_ETH_ConfigMAC+0x288>
    assert_param(IS_ETH_WATCHDOG(macconf->Watchdog));
 8008102:	f240 6113 	movw	r1, #1555	; 0x613
 8008106:	487b      	ldr	r0, [pc, #492]	; (80082f4 <HAL_ETH_ConfigMAC+0x4a4>)
 8008108:	f7fa fe8c 	bl	8002e24 <assert_failed>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 800810c:	6863      	ldr	r3, [r4, #4]
 800810e:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 8008112:	f43f aec2 	beq.w	8007e9a <HAL_ETH_ConfigMAC+0x4a>
 8008116:	e02b      	b.n	8008170 <HAL_ETH_ConfigMAC+0x320>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 8008118:	f240 6119 	movw	r1, #1561	; 0x619
 800811c:	4875      	ldr	r0, [pc, #468]	; (80082f4 <HAL_ETH_ConfigMAC+0x4a4>)
 800811e:	f7fa fe81 	bl	8002e24 <assert_failed>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 8008122:	69e3      	ldr	r3, [r4, #28]
 8008124:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8008128:	f43f aed9 	beq.w	8007ede <HAL_ETH_ConfigMAC+0x8e>
 800812c:	e07a      	b.n	8008224 <HAL_ETH_ConfigMAC+0x3d4>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 800812e:	f44f 61c3 	mov.w	r1, #1560	; 0x618
 8008132:	4870      	ldr	r0, [pc, #448]	; (80082f4 <HAL_ETH_ConfigMAC+0x4a4>)
 8008134:	f7fa fe76 	bl	8002e24 <assert_failed>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 8008138:	69a3      	ldr	r3, [r4, #24]
 800813a:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800813e:	f43f aec9 	beq.w	8007ed4 <HAL_ETH_ConfigMAC+0x84>
 8008142:	e7e9      	b.n	8008118 <HAL_ETH_ConfigMAC+0x2c8>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 8008144:	f240 6117 	movw	r1, #1559	; 0x617
 8008148:	486a      	ldr	r0, [pc, #424]	; (80082f4 <HAL_ETH_ConfigMAC+0x4a4>)
 800814a:	f7fa fe6b 	bl	8002e24 <assert_failed>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 800814e:	6963      	ldr	r3, [r4, #20]
 8008150:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8008154:	f43f aeb9 	beq.w	8007eca <HAL_ETH_ConfigMAC+0x7a>
 8008158:	e7e9      	b.n	800812e <HAL_ETH_ConfigMAC+0x2de>
    assert_param(IS_ETH_CARRIER_SENSE(macconf->CarrierSense));
 800815a:	f240 6116 	movw	r1, #1558	; 0x616
 800815e:	4865      	ldr	r0, [pc, #404]	; (80082f4 <HAL_ETH_ConfigMAC+0x4a4>)
 8008160:	f7fa fe60 	bl	8002e24 <assert_failed>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 8008164:	6923      	ldr	r3, [r4, #16]
 8008166:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800816a:	f43f aea9 	beq.w	8007ec0 <HAL_ETH_ConfigMAC+0x70>
 800816e:	e7e9      	b.n	8008144 <HAL_ETH_ConfigMAC+0x2f4>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 8008170:	f240 6114 	movw	r1, #1556	; 0x614
 8008174:	485f      	ldr	r0, [pc, #380]	; (80082f4 <HAL_ETH_ConfigMAC+0x4a4>)
 8008176:	f7fa fe55 	bl	8002e24 <assert_failed>
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 800817a:	68a3      	ldr	r3, [r4, #8]
 800817c:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 8008180:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008184:	f47f ae8f 	bne.w	8007ea6 <HAL_ETH_ConfigMAC+0x56>
 8008188:	e690      	b.n	8007eac <HAL_ETH_ConfigMAC+0x5c>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 800818a:	f240 612d 	movw	r1, #1581	; 0x62d
 800818e:	4859      	ldr	r0, [pc, #356]	; (80082f4 <HAL_ETH_ConfigMAC+0x4a4>)
 8008190:	f7fa fe48 	bl	8002e24 <assert_failed>
 8008194:	e711      	b.n	8007fba <HAL_ETH_ConfigMAC+0x16a>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 8008196:	f240 612c 	movw	r1, #1580	; 0x62c
 800819a:	4856      	ldr	r0, [pc, #344]	; (80082f4 <HAL_ETH_ConfigMAC+0x4a4>)
 800819c:	f7fa fe42 	bl	8002e24 <assert_failed>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 80081a0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80081a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081a6:	f4ff af08 	bcc.w	8007fba <HAL_ETH_ConfigMAC+0x16a>
 80081aa:	e7ee      	b.n	800818a <HAL_ETH_ConfigMAC+0x33a>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 80081ac:	f240 612b 	movw	r1, #1579	; 0x62b
 80081b0:	4850      	ldr	r0, [pc, #320]	; (80082f4 <HAL_ETH_ConfigMAC+0x4a4>)
 80081b2:	f7fa fe37 	bl	8002e24 <assert_failed>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 80081b6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80081b8:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 80081bc:	f43f aef8 	beq.w	8007fb0 <HAL_ETH_ConfigMAC+0x160>
 80081c0:	e7e9      	b.n	8008196 <HAL_ETH_ConfigMAC+0x346>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 80081c2:	f240 612a 	movw	r1, #1578	; 0x62a
 80081c6:	484b      	ldr	r0, [pc, #300]	; (80082f4 <HAL_ETH_ConfigMAC+0x4a4>)
 80081c8:	f7fa fe2c 	bl	8002e24 <assert_failed>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 80081cc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80081ce:	f033 0302 	bics.w	r3, r3, #2
 80081d2:	f43f aee8 	beq.w	8007fa6 <HAL_ETH_ConfigMAC+0x156>
 80081d6:	e7e9      	b.n	80081ac <HAL_ETH_ConfigMAC+0x35c>
    assert_param(IS_ETH_UNICAST_PAUSE_FRAME_DETECT(macconf->UnicastPauseFrameDetect));
 80081d8:	f240 6129 	movw	r1, #1577	; 0x629
 80081dc:	4845      	ldr	r0, [pc, #276]	; (80082f4 <HAL_ETH_ConfigMAC+0x4a4>)
 80081de:	f7fa fe21 	bl	8002e24 <assert_failed>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 80081e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081e4:	f033 0304 	bics.w	r3, r3, #4
 80081e8:	f43f aed8 	beq.w	8007f9c <HAL_ETH_ConfigMAC+0x14c>
 80081ec:	e7e9      	b.n	80081c2 <HAL_ETH_ConfigMAC+0x372>
    assert_param(IS_ETH_DEFERRAL_CHECK(macconf->DeferralCheck));
 80081ee:	f240 611d 	movw	r1, #1565	; 0x61d
 80081f2:	4840      	ldr	r0, [pc, #256]	; (80082f4 <HAL_ETH_ConfigMAC+0x4a4>)
 80081f4:	f7fa fe16 	bl	8002e24 <assert_failed>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 80081f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80081fa:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 80081fe:	f43f ae82 	beq.w	8007f06 <HAL_ETH_ConfigMAC+0xb6>
 8008202:	e01a      	b.n	800823a <HAL_ETH_ConfigMAC+0x3ea>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 8008204:	f240 611b 	movw	r1, #1563	; 0x61b
 8008208:	483a      	ldr	r0, [pc, #232]	; (80082f4 <HAL_ETH_ConfigMAC+0x4a4>)
 800820a:	f7fa fe0b 	bl	8002e24 <assert_failed>
    assert_param(IS_ETH_BACKOFF_LIMIT(macconf->BackOffLimit));
 800820e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008210:	f033 0360 	bics.w	r3, r3, #96	; 0x60
 8008214:	f43f ae6d 	beq.w	8007ef2 <HAL_ETH_ConfigMAC+0xa2>
 8008218:	f240 611c 	movw	r1, #1564	; 0x61c
 800821c:	4835      	ldr	r0, [pc, #212]	; (80082f4 <HAL_ETH_ConfigMAC+0x4a4>)
 800821e:	f7fa fe01 	bl	8002e24 <assert_failed>
 8008222:	e666      	b.n	8007ef2 <HAL_ETH_ConfigMAC+0xa2>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 8008224:	f240 611a 	movw	r1, #1562	; 0x61a
 8008228:	4832      	ldr	r0, [pc, #200]	; (80082f4 <HAL_ETH_ConfigMAC+0x4a4>)
 800822a:	f7fa fdfb 	bl	8002e24 <assert_failed>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 800822e:	6a23      	ldr	r3, [r4, #32]
 8008230:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8008234:	f43f ae58 	beq.w	8007ee8 <HAL_ETH_ConfigMAC+0x98>
 8008238:	e7e4      	b.n	8008204 <HAL_ETH_ConfigMAC+0x3b4>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 800823a:	f240 611e 	movw	r1, #1566	; 0x61e
 800823e:	482d      	ldr	r0, [pc, #180]	; (80082f4 <HAL_ETH_ConfigMAC+0x4a4>)
 8008240:	f7fa fdf0 	bl	8002e24 <assert_failed>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 8008244:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008246:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 800824a:	f47f ae60 	bne.w	8007f0e <HAL_ETH_ConfigMAC+0xbe>
 800824e:	e662      	b.n	8007f16 <HAL_ETH_ConfigMAC+0xc6>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 8008250:	f240 6126 	movw	r1, #1574	; 0x626
 8008254:	4827      	ldr	r0, [pc, #156]	; (80082f4 <HAL_ETH_ConfigMAC+0x4a4>)
 8008256:	f7fa fde5 	bl	8002e24 <assert_failed>
    assert_param(IS_ETH_ZEROQUANTA_PAUSE(macconf->ZeroQuantaPause));
 800825a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800825c:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8008260:	f43f ae8d 	beq.w	8007f7e <HAL_ETH_ConfigMAC+0x12e>
 8008264:	f240 6127 	movw	r1, #1575	; 0x627
 8008268:	4822      	ldr	r0, [pc, #136]	; (80082f4 <HAL_ETH_ConfigMAC+0x4a4>)
 800826a:	f7fa fddb 	bl	8002e24 <assert_failed>
    assert_param(IS_ETH_PAUSE_LOW_THRESHOLD(macconf->PauseLowThreshold));
 800826e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8008270:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 8008274:	f43f ae88 	beq.w	8007f88 <HAL_ETH_ConfigMAC+0x138>
 8008278:	f44f 61c5 	mov.w	r1, #1576	; 0x628
 800827c:	481d      	ldr	r0, [pc, #116]	; (80082f4 <HAL_ETH_ConfigMAC+0x4a4>)
 800827e:	f7fa fdd1 	bl	8002e24 <assert_failed>
 8008282:	e681      	b.n	8007f88 <HAL_ETH_ConfigMAC+0x138>
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 8008284:	f240 610d 	movw	r1, #1549	; 0x60d
 8008288:	481a      	ldr	r0, [pc, #104]	; (80082f4 <HAL_ETH_ConfigMAC+0x4a4>)
 800828a:	f7fa fdcb 	bl	8002e24 <assert_failed>
 800828e:	e5f2      	b.n	8007e76 <HAL_ETH_ConfigMAC+0x26>
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 8008290:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8008294:	4817      	ldr	r0, [pc, #92]	; (80082f4 <HAL_ETH_ConfigMAC+0x4a4>)
 8008296:	f7fa fdc5 	bl	8002e24 <assert_failed>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 800829a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800829c:	f033 0320 	bics.w	r3, r3, #32
 80082a0:	f43f ae46 	beq.w	8007f30 <HAL_ETH_ConfigMAC+0xe0>
 80082a4:	e722      	b.n	80080ec <HAL_ETH_ConfigMAC+0x29c>
    assert_param(IS_ETH_UNICAST_FRAMES_FILTER(macconf->UnicastFramesFilter));
 80082a6:	f240 6125 	movw	r1, #1573	; 0x625
 80082aa:	4812      	ldr	r0, [pc, #72]	; (80082f4 <HAL_ETH_ConfigMAC+0x4a4>)
 80082ac:	f7fa fdba 	bl	8002e24 <assert_failed>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 80082b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80082b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082b6:	f4ff ae5d 	bcc.w	8007f74 <HAL_ETH_ConfigMAC+0x124>
 80082ba:	e7c9      	b.n	8008250 <HAL_ETH_ConfigMAC+0x400>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 80082bc:	f240 611f 	movw	r1, #1567	; 0x61f
 80082c0:	480c      	ldr	r0, [pc, #48]	; (80082f4 <HAL_ETH_ConfigMAC+0x4a4>)
 80082c2:	f7fa fdaf 	bl	8002e24 <assert_failed>
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 80082c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80082c8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80082cc:	2a40      	cmp	r2, #64	; 0x40
 80082ce:	f47f ae27 	bne.w	8007f20 <HAL_ETH_ConfigMAC+0xd0>
 80082d2:	e628      	b.n	8007f26 <HAL_ETH_ConfigMAC+0xd6>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 80082d4:	f240 6124 	movw	r1, #1572	; 0x624
 80082d8:	4806      	ldr	r0, [pc, #24]	; (80082f4 <HAL_ETH_ConfigMAC+0x4a4>)
 80082da:	f7fa fda3 	bl	8002e24 <assert_failed>
 80082de:	e63b      	b.n	8007f58 <HAL_ETH_ConfigMAC+0x108>
  __HAL_LOCK(heth);
 80082e0:	2002      	movs	r0, #2
}
 80082e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 80082e4:	f240 6115 	movw	r1, #1557	; 0x615
 80082e8:	4802      	ldr	r0, [pc, #8]	; (80082f4 <HAL_ETH_ConfigMAC+0x4a4>)
 80082ea:	f7fa fd9b 	bl	8002e24 <assert_failed>
 80082ee:	e5dd      	b.n	8007eac <HAL_ETH_ConfigMAC+0x5c>
 80082f0:	ff20810f 	.word	0xff20810f
 80082f4:	08026608 	.word	0x08026608

080082f8 <HAL_GPIO_Init>:
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80082f8:	4bbf      	ldr	r3, [pc, #764]	; (80085f8 <HAL_GPIO_Init+0x300>)
 80082fa:	4ac0      	ldr	r2, [pc, #768]	; (80085fc <HAL_GPIO_Init+0x304>)
 80082fc:	4290      	cmp	r0, r2
 80082fe:	bf18      	it	ne
 8008300:	4298      	cmpne	r0, r3
{
 8008302:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8008306:	bf18      	it	ne
 8008308:	2301      	movne	r3, #1
{
 800830a:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800830c:	bf08      	it	eq
 800830e:	2300      	moveq	r3, #0
{
 8008310:	4681      	mov	r9, r0
 8008312:	468b      	mov	fp, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8008314:	9301      	str	r3, [sp, #4]
 8008316:	d026      	beq.n	8008366 <HAL_GPIO_Init+0x6e>
 8008318:	4bb9      	ldr	r3, [pc, #740]	; (8008600 <HAL_GPIO_Init+0x308>)
 800831a:	4298      	cmp	r0, r3
 800831c:	d023      	beq.n	8008366 <HAL_GPIO_Init+0x6e>
 800831e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008322:	4298      	cmp	r0, r3
 8008324:	d01f      	beq.n	8008366 <HAL_GPIO_Init+0x6e>
 8008326:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800832a:	4298      	cmp	r0, r3
 800832c:	d01b      	beq.n	8008366 <HAL_GPIO_Init+0x6e>
 800832e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008332:	4298      	cmp	r0, r3
 8008334:	d017      	beq.n	8008366 <HAL_GPIO_Init+0x6e>
 8008336:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800833a:	4298      	cmp	r0, r3
 800833c:	d013      	beq.n	8008366 <HAL_GPIO_Init+0x6e>
 800833e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008342:	4298      	cmp	r0, r3
 8008344:	d00f      	beq.n	8008366 <HAL_GPIO_Init+0x6e>
 8008346:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800834a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800834e:	4290      	cmp	r0, r2
 8008350:	bf18      	it	ne
 8008352:	4298      	cmpne	r0, r3
 8008354:	d007      	beq.n	8008366 <HAL_GPIO_Init+0x6e>
 8008356:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800835a:	4298      	cmp	r0, r3
 800835c:	d003      	beq.n	8008366 <HAL_GPIO_Init+0x6e>
 800835e:	21b1      	movs	r1, #177	; 0xb1
 8008360:	48a8      	ldr	r0, [pc, #672]	; (8008604 <HAL_GPIO_Init+0x30c>)
 8008362:	f7fa fd5f 	bl	8002e24 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8008366:	f8bb 3000 	ldrh.w	r3, [fp]
 800836a:	2b00      	cmp	r3, #0
 800836c:	f000 8116 	beq.w	800859c <HAL_GPIO_Init+0x2a4>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8008370:	f8db 2004 	ldr.w	r2, [fp, #4]
 8008374:	4ba4      	ldr	r3, [pc, #656]	; (8008608 <HAL_GPIO_Init+0x310>)
 8008376:	4ca5      	ldr	r4, [pc, #660]	; (800860c <HAL_GPIO_Init+0x314>)
 8008378:	f1a2 0011 	sub.w	r0, r2, #17
 800837c:	429a      	cmp	r2, r3
 800837e:	bf18      	it	ne
 8008380:	2a03      	cmpne	r2, #3
 8008382:	f422 1100 	bic.w	r1, r2, #2097152	; 0x200000
 8008386:	bf8c      	ite	hi
 8008388:	2301      	movhi	r3, #1
 800838a:	2300      	movls	r3, #0
 800838c:	42a2      	cmp	r2, r4
 800838e:	bf0c      	ite	eq
 8008390:	2300      	moveq	r3, #0
 8008392:	f003 0301 	andne.w	r3, r3, #1
 8008396:	4a9e      	ldr	r2, [pc, #632]	; (8008610 <HAL_GPIO_Init+0x318>)
 8008398:	2801      	cmp	r0, #1
 800839a:	bf94      	ite	ls
 800839c:	2300      	movls	r3, #0
 800839e:	f003 0301 	andhi.w	r3, r3, #1
 80083a2:	4291      	cmp	r1, r2
 80083a4:	bf0c      	ite	eq
 80083a6:	2300      	moveq	r3, #0
 80083a8:	f003 0301 	andne.w	r3, r3, #1
 80083ac:	b11b      	cbz	r3, 80083b6 <HAL_GPIO_Init+0xbe>
 80083ae:	4b99      	ldr	r3, [pc, #612]	; (8008614 <HAL_GPIO_Init+0x31c>)
 80083b0:	4299      	cmp	r1, r3
 80083b2:	f040 8116 	bne.w	80085e2 <HAL_GPIO_Init+0x2ea>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80083b6:	f8db 3008 	ldr.w	r3, [fp, #8]
 80083ba:	2b02      	cmp	r3, #2
 80083bc:	f200 80f3 	bhi.w	80085a6 <HAL_GPIO_Init+0x2ae>
{
 80083c0:	f04f 0800 	mov.w	r8, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80083c4:	f8df a274 	ldr.w	sl, [pc, #628]	; 800863c <HAL_GPIO_Init+0x344>
 80083c8:	e005      	b.n	80083d6 <HAL_GPIO_Init+0xde>
  for(position = 0; position < GPIO_NUMBER; position++)
 80083ca:	f108 0801 	add.w	r8, r8, #1
 80083ce:	f1b8 0f10 	cmp.w	r8, #16
 80083d2:	f000 80c2 	beq.w	800855a <HAL_GPIO_Init+0x262>
    ioposition = ((uint32_t)0x01) << position;
 80083d6:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80083d8:	f8db 5000 	ldr.w	r5, [fp]
    ioposition = ((uint32_t)0x01) << position;
 80083dc:	fa04 f408 	lsl.w	r4, r4, r8
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80083e0:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 80083e2:	42ac      	cmp	r4, r5
 80083e4:	d1f1      	bne.n	80083ca <HAL_GPIO_Init+0xd2>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80083e6:	f8db 1004 	ldr.w	r1, [fp, #4]
 80083ea:	ea4f 0748 	mov.w	r7, r8, lsl #1
 80083ee:	2203      	movs	r2, #3
 80083f0:	f021 0010 	bic.w	r0, r1, #16
 80083f4:	40ba      	lsls	r2, r7
 80083f6:	1e43      	subs	r3, r0, #1
 80083f8:	43d6      	mvns	r6, r2
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d819      	bhi.n	8008432 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80083fe:	f8db 300c 	ldr.w	r3, [fp, #12]
 8008402:	2b03      	cmp	r3, #3
 8008404:	f200 80ac 	bhi.w	8008560 <HAL_GPIO_Init+0x268>
        temp = GPIOx->OSPEEDR; 
 8008408:	f8d9 2008 	ldr.w	r2, [r9, #8]
        temp |= (GPIO_Init->Speed << (position * 2));
 800840c:	fa03 fc07 	lsl.w	ip, r3, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8008410:	f3c1 1300 	ubfx	r3, r1, #4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008414:	ea02 0e06 	and.w	lr, r2, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8008418:	fa03 f308 	lsl.w	r3, r3, r8
        temp |= (GPIO_Init->Speed << (position * 2));
 800841c:	ea4c 020e 	orr.w	r2, ip, lr
        GPIOx->OSPEEDR = temp;
 8008420:	f8c9 2008 	str.w	r2, [r9, #8]
        temp = GPIOx->OTYPER;
 8008424:	f8d9 2004 	ldr.w	r2, [r9, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008428:	ea22 0404 	bic.w	r4, r2, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800842c:	431c      	orrs	r4, r3
        GPIOx->OTYPER = temp;
 800842e:	f8c9 4004 	str.w	r4, [r9, #4]
      temp = GPIOx->PUPDR;
 8008432:	f8d9 400c 	ldr.w	r4, [r9, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008436:	2802      	cmp	r0, #2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8008438:	f8db 3008 	ldr.w	r3, [fp, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800843c:	ea04 0406 	and.w	r4, r4, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8008440:	fa03 f307 	lsl.w	r3, r3, r7
 8008444:	ea43 0304 	orr.w	r3, r3, r4
      GPIOx->PUPDR = temp;
 8008448:	f8c9 300c 	str.w	r3, [r9, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800844c:	d117      	bne.n	800847e <HAL_GPIO_Init+0x186>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800844e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8008452:	2b0f      	cmp	r3, #15
 8008454:	f200 8094 	bhi.w	8008580 <HAL_GPIO_Init+0x288>
        temp = GPIOx->AFR[position >> 3];
 8008458:	ea4f 00d8 	mov.w	r0, r8, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800845c:	f008 0e07 	and.w	lr, r8, #7
 8008460:	f04f 0c0f 	mov.w	ip, #15
 8008464:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8008468:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp = GPIOx->AFR[position >> 3];
 800846c:	6a04      	ldr	r4, [r0, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800846e:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8008472:	fa03 f30e 	lsl.w	r3, r3, lr
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008476:	ea24 040c 	bic.w	r4, r4, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800847a:	4323      	orrs	r3, r4
        GPIOx->AFR[position >> 3] = temp;
 800847c:	6203      	str	r3, [r0, #32]
      temp = GPIOx->MODER;
 800847e:	f8d9 2000 	ldr.w	r2, [r9]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008482:	f001 0303 	and.w	r3, r1, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008486:	4032      	ands	r2, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008488:	40bb      	lsls	r3, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800848a:	00cf      	lsls	r7, r1, #3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800848c:	ea43 0302 	orr.w	r3, r3, r2
      GPIOx->MODER = temp;
 8008490:	f8c9 3000 	str.w	r3, [r9]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008494:	d599      	bpl.n	80083ca <HAL_GPIO_Init+0xd2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008496:	f8da 0044 	ldr.w	r0, [sl, #68]	; 0x44
 800849a:	f028 0703 	bic.w	r7, r8, #3
 800849e:	4c5e      	ldr	r4, [pc, #376]	; (8008618 <HAL_GPIO_Init+0x320>)

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80084a0:	f008 0303 	and.w	r3, r8, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80084a4:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80084a8:	220f      	movs	r2, #15
 80084aa:	443c      	add	r4, r7
 80084ac:	009b      	lsls	r3, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80084ae:	f8ca 0044 	str.w	r0, [sl, #68]	; 0x44
 80084b2:	f8da 0044 	ldr.w	r0, [sl, #68]	; 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80084b6:	409a      	lsls	r2, r3
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80084b8:	4f50      	ldr	r7, [pc, #320]	; (80085fc <HAL_GPIO_Init+0x304>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80084ba:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80084be:	45b9      	cmp	r9, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80084c0:	9003      	str	r0, [sp, #12]
 80084c2:	9803      	ldr	r0, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 80084c4:	68a0      	ldr	r0, [r4, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80084c6:	ea20 0202 	bic.w	r2, r0, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80084ca:	d01f      	beq.n	800850c <HAL_GPIO_Init+0x214>
 80084cc:	9801      	ldr	r0, [sp, #4]
 80084ce:	2800      	cmp	r0, #0
 80084d0:	d051      	beq.n	8008576 <HAL_GPIO_Init+0x27e>
 80084d2:	484b      	ldr	r0, [pc, #300]	; (8008600 <HAL_GPIO_Init+0x308>)
 80084d4:	4581      	cmp	r9, r0
 80084d6:	d05c      	beq.n	8008592 <HAL_GPIO_Init+0x29a>
 80084d8:	4850      	ldr	r0, [pc, #320]	; (800861c <HAL_GPIO_Init+0x324>)
 80084da:	4581      	cmp	r9, r0
 80084dc:	d068      	beq.n	80085b0 <HAL_GPIO_Init+0x2b8>
 80084de:	4850      	ldr	r0, [pc, #320]	; (8008620 <HAL_GPIO_Init+0x328>)
 80084e0:	4581      	cmp	r9, r0
 80084e2:	d06a      	beq.n	80085ba <HAL_GPIO_Init+0x2c2>
 80084e4:	484f      	ldr	r0, [pc, #316]	; (8008624 <HAL_GPIO_Init+0x32c>)
 80084e6:	4581      	cmp	r9, r0
 80084e8:	d071      	beq.n	80085ce <HAL_GPIO_Init+0x2d6>
 80084ea:	484f      	ldr	r0, [pc, #316]	; (8008628 <HAL_GPIO_Init+0x330>)
 80084ec:	4581      	cmp	r9, r0
 80084ee:	d073      	beq.n	80085d8 <HAL_GPIO_Init+0x2e0>
 80084f0:	484e      	ldr	r0, [pc, #312]	; (800862c <HAL_GPIO_Init+0x334>)
 80084f2:	4581      	cmp	r9, r0
 80084f4:	d066      	beq.n	80085c4 <HAL_GPIO_Init+0x2cc>
 80084f6:	484e      	ldr	r0, [pc, #312]	; (8008630 <HAL_GPIO_Init+0x338>)
 80084f8:	4581      	cmp	r9, r0
 80084fa:	d077      	beq.n	80085ec <HAL_GPIO_Init+0x2f4>
 80084fc:	484d      	ldr	r0, [pc, #308]	; (8008634 <HAL_GPIO_Init+0x33c>)
 80084fe:	4581      	cmp	r9, r0
 8008500:	bf0c      	ite	eq
 8008502:	2009      	moveq	r0, #9
 8008504:	200a      	movne	r0, #10
 8008506:	fa00 f303 	lsl.w	r3, r0, r3
 800850a:	431a      	orrs	r2, r3
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800850c:	4b4a      	ldr	r3, [pc, #296]	; (8008638 <HAL_GPIO_Init+0x340>)
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800850e:	03ce      	lsls	r6, r1, #15
        SYSCFG->EXTICR[position >> 2] = temp;
 8008510:	60a2      	str	r2, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8008512:	ea6f 0205 	mvn.w	r2, r5
        temp = EXTI->IMR;
 8008516:	681b      	ldr	r3, [r3, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8008518:	f108 0801 	add.w	r8, r8, #1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 800851c:	4846      	ldr	r0, [pc, #280]	; (8008638 <HAL_GPIO_Init+0x340>)
          temp |= iocurrent;
 800851e:	bf4c      	ite	mi
 8008520:	432b      	orrmi	r3, r5
        temp &= ~((uint32_t)iocurrent);
 8008522:	4013      	andpl	r3, r2

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008524:	038c      	lsls	r4, r1, #14
        EXTI->IMR = temp;
 8008526:	6003      	str	r3, [r0, #0]
        temp = EXTI->EMR;
 8008528:	6843      	ldr	r3, [r0, #4]
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 800852a:	4843      	ldr	r0, [pc, #268]	; (8008638 <HAL_GPIO_Init+0x340>)
          temp |= iocurrent;
 800852c:	bf4c      	ite	mi
 800852e:	432b      	orrmi	r3, r5
        temp &= ~((uint32_t)iocurrent);
 8008530:	4013      	andpl	r3, r2
        EXTI->EMR = temp;
 8008532:	6043      	str	r3, [r0, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008534:	6883      	ldr	r3, [r0, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008536:	02c8      	lsls	r0, r1, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8008538:	483f      	ldr	r0, [pc, #252]	; (8008638 <HAL_GPIO_Init+0x340>)
          temp |= iocurrent;
 800853a:	bf4c      	ite	mi
 800853c:	432b      	orrmi	r3, r5
        temp &= ~((uint32_t)iocurrent);
 800853e:	4013      	andpl	r3, r2

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008540:	0289      	lsls	r1, r1, #10
        EXTI->RTSR = temp;
 8008542:	6083      	str	r3, [r0, #8]
        temp = EXTI->FTSR;
 8008544:	68c3      	ldr	r3, [r0, #12]
        temp &= ~((uint32_t)iocurrent);
 8008546:	bf54      	ite	pl
 8008548:	ea02 0503 	andpl.w	r5, r2, r3
        {
          temp |= iocurrent;
 800854c:	431d      	orrmi	r5, r3
        }
        EXTI->FTSR = temp;
 800854e:	4b3a      	ldr	r3, [pc, #232]	; (8008638 <HAL_GPIO_Init+0x340>)
  for(position = 0; position < GPIO_NUMBER; position++)
 8008550:	f1b8 0f10 	cmp.w	r8, #16
        EXTI->FTSR = temp;
 8008554:	60dd      	str	r5, [r3, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8008556:	f47f af3e 	bne.w	80083d6 <HAL_GPIO_Init+0xde>
      }
    }
  }
}
 800855a:	b005      	add	sp, #20
 800855c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8008560:	21c6      	movs	r1, #198	; 0xc6
 8008562:	4828      	ldr	r0, [pc, #160]	; (8008604 <HAL_GPIO_Init+0x30c>)
 8008564:	f7fa fc5e 	bl	8002e24 <assert_failed>
 8008568:	f8db 1004 	ldr.w	r1, [fp, #4]
 800856c:	f8db 300c 	ldr.w	r3, [fp, #12]
 8008570:	f021 0010 	bic.w	r0, r1, #16
 8008574:	e748      	b.n	8008408 <HAL_GPIO_Init+0x110>
 8008576:	2001      	movs	r0, #1
 8008578:	fa00 f303 	lsl.w	r3, r0, r3
 800857c:	431a      	orrs	r2, r3
 800857e:	e7c5      	b.n	800850c <HAL_GPIO_Init+0x214>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8008580:	21de      	movs	r1, #222	; 0xde
 8008582:	4820      	ldr	r0, [pc, #128]	; (8008604 <HAL_GPIO_Init+0x30c>)
 8008584:	f7fa fc4e 	bl	8002e24 <assert_failed>
 8008588:	f8db 3010 	ldr.w	r3, [fp, #16]
 800858c:	f8db 1004 	ldr.w	r1, [fp, #4]
 8008590:	e762      	b.n	8008458 <HAL_GPIO_Init+0x160>
 8008592:	2002      	movs	r0, #2
 8008594:	fa00 f303 	lsl.w	r3, r0, r3
 8008598:	431a      	orrs	r2, r3
 800859a:	e7b7      	b.n	800850c <HAL_GPIO_Init+0x214>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800859c:	21b2      	movs	r1, #178	; 0xb2
 800859e:	4819      	ldr	r0, [pc, #100]	; (8008604 <HAL_GPIO_Init+0x30c>)
 80085a0:	f7fa fc40 	bl	8002e24 <assert_failed>
 80085a4:	e6e4      	b.n	8008370 <HAL_GPIO_Init+0x78>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80085a6:	21b4      	movs	r1, #180	; 0xb4
 80085a8:	4816      	ldr	r0, [pc, #88]	; (8008604 <HAL_GPIO_Init+0x30c>)
 80085aa:	f7fa fc3b 	bl	8002e24 <assert_failed>
 80085ae:	e707      	b.n	80083c0 <HAL_GPIO_Init+0xc8>
 80085b0:	2003      	movs	r0, #3
 80085b2:	fa00 f303 	lsl.w	r3, r0, r3
 80085b6:	431a      	orrs	r2, r3
 80085b8:	e7a8      	b.n	800850c <HAL_GPIO_Init+0x214>
 80085ba:	2004      	movs	r0, #4
 80085bc:	fa00 f303 	lsl.w	r3, r0, r3
 80085c0:	431a      	orrs	r2, r3
 80085c2:	e7a3      	b.n	800850c <HAL_GPIO_Init+0x214>
 80085c4:	2007      	movs	r0, #7
 80085c6:	fa00 f303 	lsl.w	r3, r0, r3
 80085ca:	431a      	orrs	r2, r3
 80085cc:	e79e      	b.n	800850c <HAL_GPIO_Init+0x214>
 80085ce:	2005      	movs	r0, #5
 80085d0:	fa00 f303 	lsl.w	r3, r0, r3
 80085d4:	431a      	orrs	r2, r3
 80085d6:	e799      	b.n	800850c <HAL_GPIO_Init+0x214>
 80085d8:	2006      	movs	r0, #6
 80085da:	fa00 f303 	lsl.w	r3, r0, r3
 80085de:	431a      	orrs	r2, r3
 80085e0:	e794      	b.n	800850c <HAL_GPIO_Init+0x214>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80085e2:	21b3      	movs	r1, #179	; 0xb3
 80085e4:	4807      	ldr	r0, [pc, #28]	; (8008604 <HAL_GPIO_Init+0x30c>)
 80085e6:	f7fa fc1d 	bl	8002e24 <assert_failed>
 80085ea:	e6e4      	b.n	80083b6 <HAL_GPIO_Init+0xbe>
 80085ec:	2008      	movs	r0, #8
 80085ee:	fa00 f303 	lsl.w	r3, r0, r3
 80085f2:	431a      	orrs	r2, r3
 80085f4:	e78a      	b.n	800850c <HAL_GPIO_Init+0x214>
 80085f6:	bf00      	nop
 80085f8:	40020400 	.word	0x40020400
 80085fc:	40020000 	.word	0x40020000
 8008600:	40020800 	.word	0x40020800
 8008604:	08026640 	.word	0x08026640
 8008608:	10210000 	.word	0x10210000
 800860c:	10220000 	.word	0x10220000
 8008610:	10110000 	.word	0x10110000
 8008614:	10120000 	.word	0x10120000
 8008618:	40013800 	.word	0x40013800
 800861c:	40020c00 	.word	0x40020c00
 8008620:	40021000 	.word	0x40021000
 8008624:	40021400 	.word	0x40021400
 8008628:	40021800 	.word	0x40021800
 800862c:	40021c00 	.word	0x40021c00
 8008630:	40022000 	.word	0x40022000
 8008634:	40022400 	.word	0x40022400
 8008638:	40013c00 	.word	0x40013c00
 800863c:	40023800 	.word	0x40023800

08008640 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008640:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t tmp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8008644:	4a6e      	ldr	r2, [pc, #440]	; (8008800 <HAL_GPIO_DeInit+0x1c0>)
{
 8008646:	4604      	mov	r4, r0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8008648:	4b6e      	ldr	r3, [pc, #440]	; (8008804 <HAL_GPIO_DeInit+0x1c4>)
{
 800864a:	4688      	mov	r8, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800864c:	4290      	cmp	r0, r2
 800864e:	bf18      	it	ne
 8008650:	4298      	cmpne	r0, r3
 8008652:	bf14      	ite	ne
 8008654:	f04f 0901 	movne.w	r9, #1
 8008658:	f04f 0900 	moveq.w	r9, #0
 800865c:	d028      	beq.n	80086b0 <HAL_GPIO_DeInit+0x70>
 800865e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008662:	4298      	cmp	r0, r3
 8008664:	d024      	beq.n	80086b0 <HAL_GPIO_DeInit+0x70>
 8008666:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800866a:	4298      	cmp	r0, r3
 800866c:	d020      	beq.n	80086b0 <HAL_GPIO_DeInit+0x70>
 800866e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008672:	4298      	cmp	r0, r3
 8008674:	d01c      	beq.n	80086b0 <HAL_GPIO_DeInit+0x70>
 8008676:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800867a:	4298      	cmp	r0, r3
 800867c:	d018      	beq.n	80086b0 <HAL_GPIO_DeInit+0x70>
 800867e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008682:	4298      	cmp	r0, r3
 8008684:	d014      	beq.n	80086b0 <HAL_GPIO_DeInit+0x70>
 8008686:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800868a:	4298      	cmp	r0, r3
 800868c:	d010      	beq.n	80086b0 <HAL_GPIO_DeInit+0x70>
 800868e:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8008692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008696:	4290      	cmp	r0, r2
 8008698:	bf18      	it	ne
 800869a:	4298      	cmpne	r0, r3
 800869c:	d008      	beq.n	80086b0 <HAL_GPIO_DeInit+0x70>
 800869e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086a2:	4298      	cmp	r0, r3
 80086a4:	d004      	beq.n	80086b0 <HAL_GPIO_DeInit+0x70>
 80086a6:	f44f 7197 	mov.w	r1, #302	; 0x12e
 80086aa:	4857      	ldr	r0, [pc, #348]	; (8008808 <HAL_GPIO_DeInit+0x1c8>)
 80086ac:	f7fa fbba 	bl	8002e24 <assert_failed>
{
 80086b0:	2300      	movs	r3, #0
 80086b2:	f8df b178 	ldr.w	fp, [pc, #376]	; 800882c <HAL_GPIO_DeInit+0x1ec>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80086b6:	f8df a148 	ldr.w	sl, [pc, #328]	; 8008800 <HAL_GPIO_DeInit+0x1c0>
 80086ba:	464e      	mov	r6, r9
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80086bc:	f8df e170 	ldr.w	lr, [pc, #368]	; 8008830 <HAL_GPIO_DeInit+0x1f0>
 80086c0:	e002      	b.n	80086c8 <HAL_GPIO_DeInit+0x88>
  for(position = 0; position < GPIO_NUMBER; position++)
 80086c2:	3301      	adds	r3, #1
 80086c4:	2b10      	cmp	r3, #16
 80086c6:	d078      	beq.n	80087ba <HAL_GPIO_DeInit+0x17a>
    ioposition = ((uint32_t)0x01) << position;
 80086c8:	2101      	movs	r1, #1
 80086ca:	fa01 f003 	lsl.w	r0, r1, r3
    iocurrent = (GPIO_Pin) & ioposition;
 80086ce:	ea00 0508 	and.w	r5, r0, r8
    if(iocurrent == ioposition)
 80086d2:	42a8      	cmp	r0, r5
 80086d4:	d1f5      	bne.n	80086c2 <HAL_GPIO_DeInit+0x82>
 80086d6:	f023 0703 	bic.w	r7, r3, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80086da:	f003 0203 	and.w	r2, r3, #3
 80086de:	f04f 0c0f 	mov.w	ip, #15
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80086e2:	4554      	cmp	r4, sl
 80086e4:	445f      	add	r7, fp
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80086e6:	ea4f 0282 	mov.w	r2, r2, lsl #2
      tmp = SYSCFG->EXTICR[position >> 2];
 80086ea:	f8d7 9008 	ldr.w	r9, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80086ee:	fa0c fc02 	lsl.w	ip, ip, r2
 80086f2:	ea0c 0909 	and.w	r9, ip, r9
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80086f6:	d01c      	beq.n	8008732 <HAL_GPIO_DeInit+0xf2>
 80086f8:	b1c6      	cbz	r6, 800872c <HAL_GPIO_DeInit+0xec>
 80086fa:	4944      	ldr	r1, [pc, #272]	; (800880c <HAL_GPIO_DeInit+0x1cc>)
 80086fc:	428c      	cmp	r4, r1
 80086fe:	d05e      	beq.n	80087be <HAL_GPIO_DeInit+0x17e>
 8008700:	4943      	ldr	r1, [pc, #268]	; (8008810 <HAL_GPIO_DeInit+0x1d0>)
 8008702:	428c      	cmp	r4, r1
 8008704:	d05f      	beq.n	80087c6 <HAL_GPIO_DeInit+0x186>
 8008706:	4943      	ldr	r1, [pc, #268]	; (8008814 <HAL_GPIO_DeInit+0x1d4>)
 8008708:	428c      	cmp	r4, r1
 800870a:	d060      	beq.n	80087ce <HAL_GPIO_DeInit+0x18e>
 800870c:	4942      	ldr	r1, [pc, #264]	; (8008818 <HAL_GPIO_DeInit+0x1d8>)
 800870e:	428c      	cmp	r4, r1
 8008710:	d061      	beq.n	80087d6 <HAL_GPIO_DeInit+0x196>
 8008712:	4942      	ldr	r1, [pc, #264]	; (800881c <HAL_GPIO_DeInit+0x1dc>)
 8008714:	428c      	cmp	r4, r1
 8008716:	d062      	beq.n	80087de <HAL_GPIO_DeInit+0x19e>
 8008718:	4941      	ldr	r1, [pc, #260]	; (8008820 <HAL_GPIO_DeInit+0x1e0>)
 800871a:	428c      	cmp	r4, r1
 800871c:	d067      	beq.n	80087ee <HAL_GPIO_DeInit+0x1ae>
 800871e:	4941      	ldr	r1, [pc, #260]	; (8008824 <HAL_GPIO_DeInit+0x1e4>)
 8008720:	428c      	cmp	r4, r1
 8008722:	d068      	beq.n	80087f6 <HAL_GPIO_DeInit+0x1b6>
 8008724:	4940      	ldr	r1, [pc, #256]	; (8008828 <HAL_GPIO_DeInit+0x1e8>)
 8008726:	428c      	cmp	r4, r1
 8008728:	d05d      	beq.n	80087e6 <HAL_GPIO_DeInit+0x1a6>
 800872a:	210a      	movs	r1, #10
 800872c:	fa01 f202 	lsl.w	r2, r1, r2
 8008730:	e000      	b.n	8008734 <HAL_GPIO_DeInit+0xf4>
 8008732:	2200      	movs	r2, #0
 8008734:	4591      	cmp	r9, r2
 8008736:	d118      	bne.n	800876a <HAL_GPIO_DeInit+0x12a>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8008738:	f8de 2000 	ldr.w	r2, [lr]
 800873c:	43ed      	mvns	r5, r5
 800873e:	402a      	ands	r2, r5
 8008740:	f8ce 2000 	str.w	r2, [lr]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8008744:	f8de 2004 	ldr.w	r2, [lr, #4]
 8008748:	402a      	ands	r2, r5
 800874a:	f8ce 2004 	str.w	r2, [lr, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800874e:	f8de 2008 	ldr.w	r2, [lr, #8]
 8008752:	402a      	ands	r2, r5
 8008754:	f8ce 2008 	str.w	r2, [lr, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8008758:	f8de 200c 	ldr.w	r2, [lr, #12]
 800875c:	4015      	ands	r5, r2
 800875e:	f8ce 500c 	str.w	r5, [lr, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8008762:	68ba      	ldr	r2, [r7, #8]
 8008764:	ea22 020c 	bic.w	r2, r2, ip
 8008768:	60ba      	str	r2, [r7, #8]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800876a:	2103      	movs	r1, #3
 800876c:	005a      	lsls	r2, r3, #1
 800876e:	f8d4 c000 	ldr.w	ip, [r4]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008772:	270f      	movs	r7, #15
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008774:	fa01 f202 	lsl.w	r2, r1, r2
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008778:	fa23 f501 	lsr.w	r5, r3, r1
 800877c:	f003 0107 	and.w	r1, r3, #7
  for(position = 0; position < GPIO_NUMBER; position++)
 8008780:	3301      	adds	r3, #1
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008782:	43d2      	mvns	r2, r2
 8008784:	eb04 0585 	add.w	r5, r4, r5, lsl #2
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008788:	0089      	lsls	r1, r1, #2
  for(position = 0; position < GPIO_NUMBER; position++)
 800878a:	2b10      	cmp	r3, #16
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800878c:	ea0c 0c02 	and.w	ip, ip, r2
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008790:	fa07 f701 	lsl.w	r7, r7, r1
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008794:	f8c4 c000 	str.w	ip, [r4]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008798:	6a29      	ldr	r1, [r5, #32]
 800879a:	ea21 0107 	bic.w	r1, r1, r7
 800879e:	6229      	str	r1, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80087a0:	68e1      	ldr	r1, [r4, #12]
 80087a2:	ea01 0102 	and.w	r1, r1, r2
 80087a6:	60e1      	str	r1, [r4, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80087a8:	6861      	ldr	r1, [r4, #4]
 80087aa:	ea21 0000 	bic.w	r0, r1, r0
 80087ae:	6060      	str	r0, [r4, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80087b0:	68a1      	ldr	r1, [r4, #8]
 80087b2:	ea02 0201 	and.w	r2, r2, r1
 80087b6:	60a2      	str	r2, [r4, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80087b8:	d186      	bne.n	80086c8 <HAL_GPIO_DeInit+0x88>
    }
  }
}
 80087ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087be:	2102      	movs	r1, #2
 80087c0:	fa01 f202 	lsl.w	r2, r1, r2
 80087c4:	e7b6      	b.n	8008734 <HAL_GPIO_DeInit+0xf4>
 80087c6:	2103      	movs	r1, #3
 80087c8:	fa01 f202 	lsl.w	r2, r1, r2
 80087cc:	e7b2      	b.n	8008734 <HAL_GPIO_DeInit+0xf4>
 80087ce:	2104      	movs	r1, #4
 80087d0:	fa01 f202 	lsl.w	r2, r1, r2
 80087d4:	e7ae      	b.n	8008734 <HAL_GPIO_DeInit+0xf4>
 80087d6:	2105      	movs	r1, #5
 80087d8:	fa01 f202 	lsl.w	r2, r1, r2
 80087dc:	e7aa      	b.n	8008734 <HAL_GPIO_DeInit+0xf4>
 80087de:	2106      	movs	r1, #6
 80087e0:	fa01 f202 	lsl.w	r2, r1, r2
 80087e4:	e7a6      	b.n	8008734 <HAL_GPIO_DeInit+0xf4>
 80087e6:	2109      	movs	r1, #9
 80087e8:	fa01 f202 	lsl.w	r2, r1, r2
 80087ec:	e7a2      	b.n	8008734 <HAL_GPIO_DeInit+0xf4>
 80087ee:	2107      	movs	r1, #7
 80087f0:	fa01 f202 	lsl.w	r2, r1, r2
 80087f4:	e79e      	b.n	8008734 <HAL_GPIO_DeInit+0xf4>
 80087f6:	2108      	movs	r1, #8
 80087f8:	fa01 f202 	lsl.w	r2, r1, r2
 80087fc:	e79a      	b.n	8008734 <HAL_GPIO_DeInit+0xf4>
 80087fe:	bf00      	nop
 8008800:	40020000 	.word	0x40020000
 8008804:	40020400 	.word	0x40020400
 8008808:	08026640 	.word	0x08026640
 800880c:	40020800 	.word	0x40020800
 8008810:	40020c00 	.word	0x40020c00
 8008814:	40021000 	.word	0x40021000
 8008818:	40021400 	.word	0x40021400
 800881c:	40021800 	.word	0x40021800
 8008820:	40021c00 	.word	0x40021c00
 8008824:	40022000 	.word	0x40022000
 8008828:	40022400 	.word	0x40022400
 800882c:	40013800 	.word	0x40013800
 8008830:	40013c00 	.word	0x40013c00

08008834 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008834:	b538      	push	{r3, r4, r5, lr}
 8008836:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8008838:	460c      	mov	r4, r1
 800883a:	b129      	cbz	r1, 8008848 <HAL_GPIO_ReadPin+0x14>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800883c:	692b      	ldr	r3, [r5, #16]
 800883e:	421c      	tst	r4, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8008840:	bf14      	ite	ne
 8008842:	2001      	movne	r0, #1
 8008844:	2000      	moveq	r0, #0
 8008846:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8008848:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 800884c:	4801      	ldr	r0, [pc, #4]	; (8008854 <HAL_GPIO_ReadPin+0x20>)
 800884e:	f7fa fae9 	bl	8002e24 <assert_failed>
 8008852:	e7f3      	b.n	800883c <HAL_GPIO_ReadPin+0x8>
 8008854:	08026640 	.word	0x08026640

08008858 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008858:	b570      	push	{r4, r5, r6, lr}
 800885a:	4606      	mov	r6, r0
 800885c:	4615      	mov	r5, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800885e:	460c      	mov	r4, r1
 8008860:	b161      	cbz	r1, 800887c <HAL_GPIO_WritePin+0x24>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8008862:	2d01      	cmp	r5, #1
 8008864:	d803      	bhi.n	800886e <HAL_GPIO_WritePin+0x16>

  if(PinState != GPIO_PIN_RESET)
 8008866:	b905      	cbnz	r5, 800886a <HAL_GPIO_WritePin+0x12>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8008868:	0424      	lsls	r4, r4, #16
 800886a:	61b4      	str	r4, [r6, #24]
  }
}
 800886c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800886e:	f240 119b 	movw	r1, #411	; 0x19b
 8008872:	4805      	ldr	r0, [pc, #20]	; (8008888 <HAL_GPIO_WritePin+0x30>)
 8008874:	f7fa fad6 	bl	8002e24 <assert_failed>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8008878:	61b4      	str	r4, [r6, #24]
}
 800887a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800887c:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8008880:	4801      	ldr	r0, [pc, #4]	; (8008888 <HAL_GPIO_WritePin+0x30>)
 8008882:	f7fa facf 	bl	8002e24 <assert_failed>
 8008886:	e7ec      	b.n	8008862 <HAL_GPIO_WritePin+0xa>
 8008888:	08026640 	.word	0x08026640

0800888c <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800888c:	b538      	push	{r3, r4, r5, lr}
 800888e:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8008890:	460c      	mov	r4, r1
 8008892:	b129      	cbz	r1, 80088a0 <HAL_GPIO_TogglePin+0x14>

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8008894:	6943      	ldr	r3, [r0, #20]
 8008896:	420b      	tst	r3, r1
 8008898:	d008      	beq.n	80088ac <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800889a:	040c      	lsls	r4, r1, #16
 800889c:	6184      	str	r4, [r0, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800889e:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80088a0:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80088a4:	4802      	ldr	r0, [pc, #8]	; (80088b0 <HAL_GPIO_TogglePin+0x24>)
 80088a6:	f7fa fabd 	bl	8002e24 <assert_failed>
  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80088aa:	696b      	ldr	r3, [r5, #20]
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80088ac:	61ac      	str	r4, [r5, #24]
}
 80088ae:	bd38      	pop	{r3, r4, r5, pc}
 80088b0:	08026640 	.word	0x08026640

080088b4 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80088b4:	4770      	bx	lr
 80088b6:	bf00      	nop

080088b8 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80088b8:	4a04      	ldr	r2, [pc, #16]	; (80088cc <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80088ba:	6951      	ldr	r1, [r2, #20]
 80088bc:	4201      	tst	r1, r0
 80088be:	d100      	bne.n	80088c2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80088c0:	4770      	bx	lr
{
 80088c2:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80088c4:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80088c6:	f7ff fff5 	bl	80088b4 <HAL_GPIO_EXTI_Callback>
}
 80088ca:	bd08      	pop	{r3, pc}
 80088cc:	40013c00 	.word	0x40013c00

080088d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80088d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088d4:	4680      	mov	r8, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80088d6:	4d25      	ldr	r5, [pc, #148]	; (800896c <I2C_TransferConfig+0x9c>)
 80088d8:	4825      	ldr	r0, [pc, #148]	; (8008970 <I2C_TransferConfig+0xa0>)
{
 80088da:	460e      	mov	r6, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80088dc:	f8d8 1000 	ldr.w	r1, [r8]
{
 80088e0:	4614      	mov	r4, r2
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80088e2:	4a24      	ldr	r2, [pc, #144]	; (8008974 <I2C_TransferConfig+0xa4>)
{
 80088e4:	461f      	mov	r7, r3
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80088e6:	4281      	cmp	r1, r0
 80088e8:	bf18      	it	ne
 80088ea:	42a9      	cmpne	r1, r5
{
 80088ec:	9d06      	ldr	r5, [sp, #24]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80088ee:	bf14      	ite	ne
 80088f0:	2001      	movne	r0, #1
 80088f2:	2000      	moveq	r0, #0
 80088f4:	4291      	cmp	r1, r2
 80088f6:	bf0c      	ite	eq
 80088f8:	2000      	moveq	r0, #0
 80088fa:	f000 0001 	andne.w	r0, r0, #1
 80088fe:	b110      	cbz	r0, 8008906 <I2C_TransferConfig+0x36>
 8008900:	4b1d      	ldr	r3, [pc, #116]	; (8008978 <I2C_TransferConfig+0xa8>)
 8008902:	4299      	cmp	r1, r3
 8008904:	d126      	bne.n	8008954 <I2C_TransferConfig+0x84>
  assert_param(IS_TRANSFER_MODE(Mode));
 8008906:	f037 7380 	bics.w	r3, r7, #16777216	; 0x1000000
 800890a:	d002      	beq.n	8008912 <I2C_TransferConfig+0x42>
 800890c:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 8008910:	d126      	bne.n	8008960 <I2C_TransferConfig+0x90>
  assert_param(IS_TRANSFER_REQUEST(Request));
 8008912:	4b1a      	ldr	r3, [pc, #104]	; (800897c <I2C_TransferConfig+0xac>)
 8008914:	429d      	cmp	r5, r3
 8008916:	d00a      	beq.n	800892e <I2C_TransferConfig+0x5e>
 8008918:	f425 6380 	bic.w	r3, r5, #1024	; 0x400
 800891c:	4a18      	ldr	r2, [pc, #96]	; (8008980 <I2C_TransferConfig+0xb0>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d005      	beq.n	800892e <I2C_TransferConfig+0x5e>
 8008922:	b125      	cbz	r5, 800892e <I2C_TransferConfig+0x5e>
 8008924:	f641 01c2 	movw	r1, #6338	; 0x18c2
 8008928:	4816      	ldr	r0, [pc, #88]	; (8008984 <I2C_TransferConfig+0xb4>)
 800892a:	f7fa fa7b 	bl	8002e24 <assert_failed>

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800892e:	f8d8 1000 	ldr.w	r1, [r8]
 8008932:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8008936:	f3c6 0309 	ubfx	r3, r6, #0, #10
 800893a:	4a13      	ldr	r2, [pc, #76]	; (8008988 <I2C_TransferConfig+0xb8>)
 800893c:	431c      	orrs	r4, r3
 800893e:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
 8008942:	684d      	ldr	r5, [r1, #4]
 8008944:	ea44 0307 	orr.w	r3, r4, r7
 8008948:	ea25 0502 	bic.w	r5, r5, r2
 800894c:	432b      	orrs	r3, r5
 800894e:	604b      	str	r3, [r1, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8008950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8008954:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
 8008958:	480a      	ldr	r0, [pc, #40]	; (8008984 <I2C_TransferConfig+0xb4>)
 800895a:	f7fa fa63 	bl	8002e24 <assert_failed>
 800895e:	e7d2      	b.n	8008906 <I2C_TransferConfig+0x36>
  assert_param(IS_TRANSFER_MODE(Mode));
 8008960:	f641 01c1 	movw	r1, #6337	; 0x18c1
 8008964:	4807      	ldr	r0, [pc, #28]	; (8008984 <I2C_TransferConfig+0xb4>)
 8008966:	f7fa fa5d 	bl	8002e24 <assert_failed>
 800896a:	e7d2      	b.n	8008912 <I2C_TransferConfig+0x42>
 800896c:	40005800 	.word	0x40005800
 8008970:	40005400 	.word	0x40005400
 8008974:	40005c00 	.word	0x40005c00
 8008978:	40006000 	.word	0x40006000
 800897c:	80004000 	.word	0x80004000
 8008980:	80002000 	.word	0x80002000
 8008984:	0802667c 	.word	0x0802667c
 8008988:	03ff63ff 	.word	0x03ff63ff

0800898c <I2C_IsAcknowledgeFailed.part.1>:
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
 800898c:	b570      	push	{r4, r5, r6, lr}
 800898e:	4605      	mov	r5, r0
 8008990:	460c      	mov	r4, r1
 8008992:	4616      	mov	r6, r2
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008994:	6828      	ldr	r0, [r5, #0]
 8008996:	e001      	b.n	800899c <I2C_IsAcknowledgeFailed.part.1+0x10>
      if (Timeout != HAL_MAX_DELAY)
 8008998:	1c63      	adds	r3, r4, #1
 800899a:	d120      	bne.n	80089de <I2C_IsAcknowledgeFailed.part.1+0x52>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800899c:	6983      	ldr	r3, [r0, #24]
 800899e:	0699      	lsls	r1, r3, #26
 80089a0:	d5fa      	bpl.n	8008998 <I2C_IsAcknowledgeFailed.part.1+0xc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80089a2:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80089a4:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80089a6:	61c2      	str	r2, [r0, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80089a8:	61c3      	str	r3, [r0, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80089aa:	6983      	ldr	r3, [r0, #24]
 80089ac:	079a      	lsls	r2, r3, #30
 80089ae:	d501      	bpl.n	80089b4 <I2C_IsAcknowledgeFailed.part.1+0x28>
    hi2c->Instance->TXDR = 0x00U;
 80089b0:	2300      	movs	r3, #0
 80089b2:	6283      	str	r3, [r0, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80089b4:	6983      	ldr	r3, [r0, #24]
 80089b6:	07db      	lsls	r3, r3, #31
 80089b8:	d524      	bpl.n	8008a04 <I2C_IsAcknowledgeFailed.part.1+0x78>
    I2C_RESET_CR2(hi2c);
 80089ba:	6843      	ldr	r3, [r0, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80089bc:	2200      	movs	r2, #0
    I2C_RESET_CR2(hi2c);
 80089be:	4c14      	ldr	r4, [pc, #80]	; (8008a10 <I2C_IsAcknowledgeFailed.part.1+0x84>)
    hi2c->State = HAL_I2C_STATE_READY;
 80089c0:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 80089c2:	4023      	ands	r3, r4
 80089c4:	6043      	str	r3, [r0, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80089c6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 80089c8:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80089cc:	f043 0304 	orr.w	r3, r3, #4
 80089d0:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80089d2:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80089d6:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 80089da:	2001      	movs	r0, #1
 80089dc:	bd70      	pop	{r4, r5, r6, pc}
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089de:	f7fc fdc7 	bl	8005570 <HAL_GetTick>
 80089e2:	1b80      	subs	r0, r0, r6
 80089e4:	4284      	cmp	r4, r0
 80089e6:	d301      	bcc.n	80089ec <I2C_IsAcknowledgeFailed.part.1+0x60>
 80089e8:	2c00      	cmp	r4, #0
 80089ea:	d1d3      	bne.n	8008994 <I2C_IsAcknowledgeFailed.part.1+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80089ec:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80089ee:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80089f0:	2200      	movs	r2, #0
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80089f2:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
 80089f4:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80089f8:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80089fa:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80089fe:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
 8008a02:	e7ea      	b.n	80089da <I2C_IsAcknowledgeFailed.part.1+0x4e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008a04:	6983      	ldr	r3, [r0, #24]
 8008a06:	f043 0301 	orr.w	r3, r3, #1
 8008a0a:	6183      	str	r3, [r0, #24]
 8008a0c:	e7d5      	b.n	80089ba <I2C_IsAcknowledgeFailed.part.1+0x2e>
 8008a0e:	bf00      	nop
 8008a10:	fe00e800 	.word	0xfe00e800

08008a14 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8008a14:	b570      	push	{r4, r5, r6, lr}
 8008a16:	4605      	mov	r5, r0
 8008a18:	460c      	mov	r4, r1
 8008a1a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008a1c:	e001      	b.n	8008a22 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8008a1e:	1c61      	adds	r1, r4, #1
 8008a20:	d111      	bne.n	8008a46 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008a22:	682b      	ldr	r3, [r5, #0]
 8008a24:	699a      	ldr	r2, [r3, #24]
 8008a26:	0792      	lsls	r2, r2, #30
 8008a28:	d40b      	bmi.n	8008a42 <I2C_WaitOnTXISFlagUntilTimeout+0x2e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008a2a:	699b      	ldr	r3, [r3, #24]
 8008a2c:	06d8      	lsls	r0, r3, #27
 8008a2e:	d5f6      	bpl.n	8008a1e <I2C_WaitOnTXISFlagUntilTimeout+0xa>
 8008a30:	4632      	mov	r2, r6
 8008a32:	4621      	mov	r1, r4
 8008a34:	4628      	mov	r0, r5
 8008a36:	f7ff ffa9 	bl	800898c <I2C_IsAcknowledgeFailed.part.1>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a3a:	2800      	cmp	r0, #0
 8008a3c:	d0ef      	beq.n	8008a1e <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      return HAL_ERROR;
 8008a3e:	2001      	movs	r0, #1
}
 8008a40:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8008a42:	2000      	movs	r0, #0
}
 8008a44:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a46:	f7fc fd93 	bl	8005570 <HAL_GetTick>
 8008a4a:	1b80      	subs	r0, r0, r6
 8008a4c:	42a0      	cmp	r0, r4
 8008a4e:	d801      	bhi.n	8008a54 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008a50:	2c00      	cmp	r4, #0
 8008a52:	d1e6      	bne.n	8008a22 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008a54:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008a56:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a58:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 8008a5a:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008a5c:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8008a5e:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008a62:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008a64:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a68:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 8008a6c:	bd70      	pop	{r4, r5, r6, pc}
 8008a6e:	bf00      	nop

08008a70 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8008a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a72:	4605      	mov	r5, r0
 8008a74:	460c      	mov	r4, r1
 8008a76:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008a78:	e00b      	b.n	8008a92 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008a7a:	699b      	ldr	r3, [r3, #24]
 8008a7c:	06db      	lsls	r3, r3, #27
 8008a7e:	d502      	bpl.n	8008a86 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
 8008a80:	f7ff ff84 	bl	800898c <I2C_IsAcknowledgeFailed.part.1>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a84:	b9d8      	cbnz	r0, 8008abe <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a86:	f7fc fd73 	bl	8005570 <HAL_GetTick>
 8008a8a:	1b80      	subs	r0, r0, r6
 8008a8c:	42a0      	cmp	r0, r4
 8008a8e:	d809      	bhi.n	8008aa4 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 8008a90:	b144      	cbz	r4, 8008aa4 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008a92:	682b      	ldr	r3, [r5, #0]
 8008a94:	4632      	mov	r2, r6
 8008a96:	4621      	mov	r1, r4
 8008a98:	4628      	mov	r0, r5
 8008a9a:	699f      	ldr	r7, [r3, #24]
 8008a9c:	06bf      	lsls	r7, r7, #26
 8008a9e:	d5ec      	bpl.n	8008a7a <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
  return HAL_OK;
 8008aa0:	2000      	movs	r0, #0
}
 8008aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008aa4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008aa6:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008aa8:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 8008aaa:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008aac:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8008aae:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008ab2:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008ab4:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ab8:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 8008abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8008abe:	2001      	movs	r0, #1
}
 8008ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ac2:	bf00      	nop

08008ac4 <I2C_WaitOnFlagUntilTimeout>:
{
 8008ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ac8:	4680      	mov	r8, r0
 8008aca:	460f      	mov	r7, r1
 8008acc:	4616      	mov	r6, r2
 8008ace:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008ad0:	f8d8 4000 	ldr.w	r4, [r8]
 8008ad4:	e001      	b.n	8008ada <I2C_WaitOnFlagUntilTimeout+0x16>
    if (Timeout != HAL_MAX_DELAY)
 8008ad6:	1c6b      	adds	r3, r5, #1
 8008ad8:	d10a      	bne.n	8008af0 <I2C_WaitOnFlagUntilTimeout+0x2c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008ada:	69a0      	ldr	r0, [r4, #24]
 8008adc:	ea37 0300 	bics.w	r3, r7, r0
 8008ae0:	bf0c      	ite	eq
 8008ae2:	2001      	moveq	r0, #1
 8008ae4:	2000      	movne	r0, #0
 8008ae6:	42b0      	cmp	r0, r6
 8008ae8:	d0f5      	beq.n	8008ad6 <I2C_WaitOnFlagUntilTimeout+0x12>
  return HAL_OK;
 8008aea:	2000      	movs	r0, #0
}
 8008aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008af0:	f7fc fd3e 	bl	8005570 <HAL_GetTick>
 8008af4:	9b06      	ldr	r3, [sp, #24]
 8008af6:	1ac0      	subs	r0, r0, r3
 8008af8:	42a8      	cmp	r0, r5
 8008afa:	d801      	bhi.n	8008b00 <I2C_WaitOnFlagUntilTimeout+0x3c>
 8008afc:	2d00      	cmp	r5, #0
 8008afe:	d1e7      	bne.n	8008ad0 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008b00:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008b04:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b06:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 8008b08:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008b0a:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8008b0c:	f888 2040 	strb.w	r2, [r8, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008b10:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008b14:	f888 1041 	strb.w	r1, [r8, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b18:	f888 2042 	strb.w	r2, [r8, #66]	; 0x42
 8008b1c:	e7e6      	b.n	8008aec <I2C_WaitOnFlagUntilTimeout+0x28>
 8008b1e:	bf00      	nop

08008b20 <I2C_RequestMemoryRead>:
{
 8008b20:	b570      	push	{r4, r5, r6, lr}
 8008b22:	461d      	mov	r5, r3
 8008b24:	b082      	sub	sp, #8
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008b26:	4b17      	ldr	r3, [pc, #92]	; (8008b84 <I2C_RequestMemoryRead+0x64>)
{
 8008b28:	4604      	mov	r4, r0
 8008b2a:	4616      	mov	r6, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008b2c:	b2ea      	uxtb	r2, r5
 8008b2e:	9300      	str	r3, [sp, #0]
 8008b30:	2300      	movs	r3, #0
 8008b32:	f7ff fecd 	bl	80088d0 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b36:	4620      	mov	r0, r4
 8008b38:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8008b3c:	f7ff ff6a 	bl	8008a14 <I2C_WaitOnTXISFlagUntilTimeout>
 8008b40:	b9c8      	cbnz	r0, 8008b76 <I2C_RequestMemoryRead+0x56>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008b42:	2d01      	cmp	r5, #1
 8008b44:	6823      	ldr	r3, [r4, #0]
 8008b46:	d10e      	bne.n	8008b66 <I2C_RequestMemoryRead+0x46>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008b48:	b2f6      	uxtb	r6, r6
 8008b4a:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008b4c:	9b07      	ldr	r3, [sp, #28]
 8008b4e:	4620      	mov	r0, r4
 8008b50:	2200      	movs	r2, #0
 8008b52:	2140      	movs	r1, #64	; 0x40
 8008b54:	9300      	str	r3, [sp, #0]
 8008b56:	9b06      	ldr	r3, [sp, #24]
 8008b58:	f7ff ffb4 	bl	8008ac4 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8008b5c:	3000      	adds	r0, #0
 8008b5e:	bf18      	it	ne
 8008b60:	2001      	movne	r0, #1
}
 8008b62:	b002      	add	sp, #8
 8008b64:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008b66:	0a30      	lsrs	r0, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b68:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008b6c:	6298      	str	r0, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b6e:	4620      	mov	r0, r4
 8008b70:	f7ff ff50 	bl	8008a14 <I2C_WaitOnTXISFlagUntilTimeout>
 8008b74:	b110      	cbz	r0, 8008b7c <I2C_RequestMemoryRead+0x5c>
    return HAL_ERROR;
 8008b76:	2001      	movs	r0, #1
}
 8008b78:	b002      	add	sp, #8
 8008b7a:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008b7c:	b2f6      	uxtb	r6, r6
 8008b7e:	6823      	ldr	r3, [r4, #0]
 8008b80:	629e      	str	r6, [r3, #40]	; 0x28
 8008b82:	e7e3      	b.n	8008b4c <I2C_RequestMemoryRead+0x2c>
 8008b84:	80002000 	.word	0x80002000

08008b88 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	f000 80c8 	beq.w	8008d1e <HAL_I2C_Init+0x196>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8008b8e:	6802      	ldr	r2, [r0, #0]
 8008b90:	4969      	ldr	r1, [pc, #420]	; (8008d38 <HAL_I2C_Init+0x1b0>)
{
 8008b92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8008b94:	4b69      	ldr	r3, [pc, #420]	; (8008d3c <HAL_I2C_Init+0x1b4>)
 8008b96:	4604      	mov	r4, r0
 8008b98:	4869      	ldr	r0, [pc, #420]	; (8008d40 <HAL_I2C_Init+0x1b8>)
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	bf18      	it	ne
 8008b9e:	4282      	cmpne	r2, r0
 8008ba0:	bf14      	ite	ne
 8008ba2:	2301      	movne	r3, #1
 8008ba4:	2300      	moveq	r3, #0
 8008ba6:	428a      	cmp	r2, r1
 8008ba8:	bf0c      	ite	eq
 8008baa:	2300      	moveq	r3, #0
 8008bac:	f003 0301 	andne.w	r3, r3, #1
 8008bb0:	b11b      	cbz	r3, 8008bba <HAL_I2C_Init+0x32>
 8008bb2:	4b64      	ldr	r3, [pc, #400]	; (8008d44 <HAL_I2C_Init+0x1bc>)
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	f040 80b4 	bne.w	8008d22 <HAL_I2C_Init+0x19a>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8008bba:	68a3      	ldr	r3, [r4, #8]
 8008bbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bc0:	d268      	bcs.n	8008c94 <HAL_I2C_Init+0x10c>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8008bc2:	68e3      	ldr	r3, [r4, #12]
 8008bc4:	3b01      	subs	r3, #1
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d856      	bhi.n	8008c78 <HAL_I2C_Init+0xf0>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8008bca:	6923      	ldr	r3, [r4, #16]
 8008bcc:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 8008bd0:	f040 809b 	bne.w	8008d0a <HAL_I2C_Init+0x182>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8008bd4:	6963      	ldr	r3, [r4, #20]
 8008bd6:	2bff      	cmp	r3, #255	; 0xff
 8008bd8:	f200 808d 	bhi.w	8008cf6 <HAL_I2C_Init+0x16e>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8008bdc:	69a3      	ldr	r3, [r4, #24]
 8008bde:	2b07      	cmp	r3, #7
 8008be0:	d87e      	bhi.n	8008ce0 <HAL_I2C_Init+0x158>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8008be2:	69e3      	ldr	r3, [r4, #28]
 8008be4:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 8008be8:	d170      	bne.n	8008ccc <HAL_I2C_Init+0x144>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8008bea:	6a23      	ldr	r3, [r4, #32]
 8008bec:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 8008bf0:	d160      	bne.n	8008cb4 <HAL_I2C_Init+0x12c>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008bf2:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8008bf6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d054      	beq.n	8008ca8 <HAL_I2C_Init+0x120>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8008bfe:	2124      	movs	r1, #36	; 0x24
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008c00:	68e5      	ldr	r5, [r4, #12]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008c02:	e9d4 3200 	ldrd	r3, r2, [r4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8008c06:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008c0a:	2d01      	cmp	r5, #1
  __HAL_I2C_DISABLE(hi2c);
 8008c0c:	6818      	ldr	r0, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008c0e:	f022 6170 	bic.w	r1, r2, #251658240	; 0xf000000
 8008c12:	68a2      	ldr	r2, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8008c14:	f020 0001 	bic.w	r0, r0, #1
 8008c18:	6018      	str	r0, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008c1a:	6119      	str	r1, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008c1c:	6899      	ldr	r1, [r3, #8]
 8008c1e:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8008c22:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008c24:	d032      	beq.n	8008c8c <HAL_I2C_Init+0x104>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008c26:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008c2a:	2d02      	cmp	r5, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008c2c:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008c2e:	d102      	bne.n	8008c36 <HAL_I2C_Init+0xae>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008c30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c34:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008c36:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c38:	2100      	movs	r1, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008c3a:	4843      	ldr	r0, [pc, #268]	; (8008d48 <HAL_I2C_Init+0x1c0>)
  hi2c->State = HAL_I2C_STATE_READY;
 8008c3c:	2720      	movs	r7, #32
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8008c3e:	69a6      	ldr	r6, [r4, #24]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008c40:	4310      	orrs	r0, r2
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8008c42:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008c46:	6058      	str	r0, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8008c48:	432a      	orrs	r2, r5
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008c4a:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008c4c:	69e5      	ldr	r5, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8008c4e:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008c52:	6a26      	ldr	r6, [r4, #32]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008c54:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008c58:	4335      	orrs	r5, r6
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008c5a:	60d8      	str	r0, [r3, #12]
  return HAL_OK;
 8008c5c:	4608      	mov	r0, r1
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8008c5e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008c60:	601d      	str	r5, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	f042 0201 	orr.w	r2, r2, #1
 8008c68:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c6a:	6461      	str	r1, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008c6c:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008c70:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c72:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 8008c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8008c78:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8008c7c:	4833      	ldr	r0, [pc, #204]	; (8008d4c <HAL_I2C_Init+0x1c4>)
 8008c7e:	f7fa f8d1 	bl	8002e24 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8008c82:	6923      	ldr	r3, [r4, #16]
 8008c84:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 8008c88:	d0a4      	beq.n	8008bd4 <HAL_I2C_Init+0x4c>
 8008c8a:	e03e      	b.n	8008d0a <HAL_I2C_Init+0x182>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008c8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c90:	609a      	str	r2, [r3, #8]
 8008c92:	e7d0      	b.n	8008c36 <HAL_I2C_Init+0xae>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8008c94:	f240 11df 	movw	r1, #479	; 0x1df
 8008c98:	482c      	ldr	r0, [pc, #176]	; (8008d4c <HAL_I2C_Init+0x1c4>)
 8008c9a:	f7fa f8c3 	bl	8002e24 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8008c9e:	68e3      	ldr	r3, [r4, #12]
 8008ca0:	3b01      	subs	r3, #1
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	d991      	bls.n	8008bca <HAL_I2C_Init+0x42>
 8008ca6:	e7e7      	b.n	8008c78 <HAL_I2C_Init+0xf0>
    hi2c->Lock = HAL_UNLOCKED;
 8008ca8:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8008cac:	4620      	mov	r0, r4
 8008cae:	f7fb f813 	bl	8003cd8 <HAL_I2C_MspInit>
 8008cb2:	e7a4      	b.n	8008bfe <HAL_I2C_Init+0x76>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8008cb4:	f240 11e5 	movw	r1, #485	; 0x1e5
 8008cb8:	4824      	ldr	r0, [pc, #144]	; (8008d4c <HAL_I2C_Init+0x1c4>)
 8008cba:	f7fa f8b3 	bl	8002e24 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008cbe:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8008cc2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d199      	bne.n	8008bfe <HAL_I2C_Init+0x76>
 8008cca:	e7ed      	b.n	8008ca8 <HAL_I2C_Init+0x120>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8008ccc:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 8008cd0:	481e      	ldr	r0, [pc, #120]	; (8008d4c <HAL_I2C_Init+0x1c4>)
 8008cd2:	f7fa f8a7 	bl	8002e24 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8008cd6:	6a23      	ldr	r3, [r4, #32]
 8008cd8:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 8008cdc:	d089      	beq.n	8008bf2 <HAL_I2C_Init+0x6a>
 8008cde:	e7e9      	b.n	8008cb4 <HAL_I2C_Init+0x12c>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8008ce0:	f240 11e3 	movw	r1, #483	; 0x1e3
 8008ce4:	4819      	ldr	r0, [pc, #100]	; (8008d4c <HAL_I2C_Init+0x1c4>)
 8008ce6:	f7fa f89d 	bl	8002e24 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8008cea:	69e3      	ldr	r3, [r4, #28]
 8008cec:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 8008cf0:	f43f af7b 	beq.w	8008bea <HAL_I2C_Init+0x62>
 8008cf4:	e7ea      	b.n	8008ccc <HAL_I2C_Init+0x144>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8008cf6:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8008cfa:	4814      	ldr	r0, [pc, #80]	; (8008d4c <HAL_I2C_Init+0x1c4>)
 8008cfc:	f7fa f892 	bl	8002e24 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8008d00:	69a3      	ldr	r3, [r4, #24]
 8008d02:	2b07      	cmp	r3, #7
 8008d04:	f67f af6d 	bls.w	8008be2 <HAL_I2C_Init+0x5a>
 8008d08:	e7ea      	b.n	8008ce0 <HAL_I2C_Init+0x158>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8008d0a:	f240 11e1 	movw	r1, #481	; 0x1e1
 8008d0e:	480f      	ldr	r0, [pc, #60]	; (8008d4c <HAL_I2C_Init+0x1c4>)
 8008d10:	f7fa f888 	bl	8002e24 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8008d14:	6963      	ldr	r3, [r4, #20]
 8008d16:	2bff      	cmp	r3, #255	; 0xff
 8008d18:	f67f af60 	bls.w	8008bdc <HAL_I2C_Init+0x54>
 8008d1c:	e7eb      	b.n	8008cf6 <HAL_I2C_Init+0x16e>
    return HAL_ERROR;
 8008d1e:	2001      	movs	r0, #1
}
 8008d20:	4770      	bx	lr
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8008d22:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008d26:	4809      	ldr	r0, [pc, #36]	; (8008d4c <HAL_I2C_Init+0x1c4>)
 8008d28:	f7fa f87c 	bl	8002e24 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8008d2c:	68a3      	ldr	r3, [r4, #8]
 8008d2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d32:	f4ff af46 	bcc.w	8008bc2 <HAL_I2C_Init+0x3a>
 8008d36:	e7ad      	b.n	8008c94 <HAL_I2C_Init+0x10c>
 8008d38:	40005c00 	.word	0x40005c00
 8008d3c:	40005400 	.word	0x40005400
 8008d40:	40005800 	.word	0x40005800
 8008d44:	40006000 	.word	0x40006000
 8008d48:	02008000 	.word	0x02008000
 8008d4c:	0802667c 	.word	0x0802667c

08008d50 <HAL_I2C_Master_Transmit>:
{
 8008d50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d54:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
{
 8008d58:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d5a:	2c20      	cmp	r4, #32
 8008d5c:	d169      	bne.n	8008e32 <HAL_I2C_Master_Transmit+0xe2>
    __HAL_LOCK(hi2c);
 8008d5e:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8008d62:	2c01      	cmp	r4, #1
 8008d64:	d065      	beq.n	8008e32 <HAL_I2C_Master_Transmit+0xe2>
 8008d66:	f04f 0901 	mov.w	r9, #1
 8008d6a:	4604      	mov	r4, r0
 8008d6c:	4698      	mov	r8, r3
 8008d6e:	4615      	mov	r5, r2
 8008d70:	f880 9040 	strb.w	r9, [r0, #64]	; 0x40
 8008d74:	460f      	mov	r7, r1
    tickstart = HAL_GetTick();
 8008d76:	f7fc fbfb 	bl	8005570 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008d7a:	464a      	mov	r2, r9
    tickstart = HAL_GetTick();
 8008d7c:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008d7e:	9000      	str	r0, [sp, #0]
 8008d80:	2319      	movs	r3, #25
 8008d82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008d86:	4620      	mov	r0, r4
 8008d88:	f7ff fe9c 	bl	8008ac4 <I2C_WaitOnFlagUntilTimeout>
 8008d8c:	2800      	cmp	r0, #0
 8008d8e:	d154      	bne.n	8008e3a <HAL_I2C_Master_Transmit+0xea>
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008d90:	2310      	movs	r3, #16
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008d92:	2221      	movs	r2, #33	; 0x21
    hi2c->pBuffPtr  = pData;
 8008d94:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008d96:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008d9a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d9e:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8008da0:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008da4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008da6:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008da8:	2bff      	cmp	r3, #255	; 0xff
 8008daa:	d954      	bls.n	8008e56 <HAL_I2C_Master_Transmit+0x106>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008dac:	4839      	ldr	r0, [pc, #228]	; (8008e94 <HAL_I2C_Master_Transmit+0x144>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008dae:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008db0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008db4:	4639      	mov	r1, r7
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008db6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008db8:	9000      	str	r0, [sp, #0]
 8008dba:	4620      	mov	r0, r4
 8008dbc:	f7ff fd88 	bl	80088d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008dc0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008dc2:	4632      	mov	r2, r6
 8008dc4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008dc6:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d050      	beq.n	8008e70 <HAL_I2C_Master_Transmit+0x120>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008dce:	f7ff fe21 	bl	8008a14 <I2C_WaitOnTXISFlagUntilTimeout>
 8008dd2:	2800      	cmp	r0, #0
 8008dd4:	d131      	bne.n	8008e3a <HAL_I2C_Master_Transmit+0xea>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008dd6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008dd8:	6822      	ldr	r2, [r4, #0]
 8008dda:	f811 5b01 	ldrb.w	r5, [r1], #1
      hi2c->XferSize--;
 8008dde:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008de0:	6295      	str	r5, [r2, #40]	; 0x28
      hi2c->XferCount--;
 8008de2:	8d65      	ldrh	r5, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8008de4:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 8008de6:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8008de8:	3d01      	subs	r5, #1
      hi2c->XferSize--;
 8008dea:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 8008dec:	b2ad      	uxth	r5, r5
      hi2c->XferSize--;
 8008dee:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8008df0:	8565      	strh	r5, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008df2:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8008df4:	b289      	uxth	r1, r1
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d1e2      	bne.n	8008dc0 <HAL_I2C_Master_Transmit+0x70>
 8008dfa:	2900      	cmp	r1, #0
 8008dfc:	d0e0      	beq.n	8008dc0 <HAL_I2C_Master_Transmit+0x70>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008dfe:	4602      	mov	r2, r0
 8008e00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e02:	2180      	movs	r1, #128	; 0x80
 8008e04:	9600      	str	r6, [sp, #0]
 8008e06:	4620      	mov	r0, r4
 8008e08:	f7ff fe5c 	bl	8008ac4 <I2C_WaitOnFlagUntilTimeout>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008e10:	4605      	mov	r5, r0
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008e12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008e16:	4639      	mov	r1, r7
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008e18:	b978      	cbnz	r0, 8008e3a <HAL_I2C_Master_Transmit+0xea>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008e1a:	f8b4 e02a 	ldrh.w	lr, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008e1e:	4662      	mov	r2, ip
 8008e20:	4620      	mov	r0, r4
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008e22:	45e6      	cmp	lr, ip
 8008e24:	d90d      	bls.n	8008e42 <HAL_I2C_Master_Transmit+0xf2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008e26:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008e2a:	9500      	str	r5, [sp, #0]
 8008e2c:	f7ff fd50 	bl	80088d0 <I2C_TransferConfig>
 8008e30:	e7c6      	b.n	8008dc0 <HAL_I2C_Master_Transmit+0x70>
    return HAL_BUSY;
 8008e32:	2002      	movs	r0, #2
}
 8008e34:	b003      	add	sp, #12
 8008e36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_ERROR;
 8008e3a:	2001      	movs	r0, #1
}
 8008e3c:	b003      	add	sp, #12
 8008e3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          hi2c->XferSize = hi2c->XferCount;
 8008e42:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008e44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008e48:	9500      	str	r5, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8008e4a:	b292      	uxth	r2, r2
 8008e4c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008e4e:	b2d2      	uxtb	r2, r2
 8008e50:	f7ff fd3e 	bl	80088d0 <I2C_TransferConfig>
 8008e54:	e7b4      	b.n	8008dc0 <HAL_I2C_Master_Transmit+0x70>
      hi2c->XferSize = hi2c->XferCount;
 8008e56:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8008e58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008e5c:	4d0d      	ldr	r5, [pc, #52]	; (8008e94 <HAL_I2C_Master_Transmit+0x144>)
 8008e5e:	4639      	mov	r1, r7
      hi2c->XferSize = hi2c->XferCount;
 8008e60:	b292      	uxth	r2, r2
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8008e62:	4620      	mov	r0, r4
 8008e64:	9500      	str	r5, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8008e66:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8008e68:	b2d2      	uxtb	r2, r2
 8008e6a:	f7ff fd31 	bl	80088d0 <I2C_TransferConfig>
 8008e6e:	e7a7      	b.n	8008dc0 <HAL_I2C_Master_Transmit+0x70>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e70:	f7ff fdfe 	bl	8008a70 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008e74:	2800      	cmp	r0, #0
 8008e76:	d1e0      	bne.n	8008e3a <HAL_I2C_Master_Transmit+0xea>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e78:	6823      	ldr	r3, [r4, #0]
 8008e7a:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 8008e7c:	4d06      	ldr	r5, [pc, #24]	; (8008e98 <HAL_I2C_Master_Transmit+0x148>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e7e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8008e80:	685a      	ldr	r2, [r3, #4]
 8008e82:	402a      	ands	r2, r5
 8008e84:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008e86:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8008e8a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008e8e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8008e92:	e7cf      	b.n	8008e34 <HAL_I2C_Master_Transmit+0xe4>
 8008e94:	80002000 	.word	0x80002000
 8008e98:	fe00e800 	.word	0xfe00e800

08008e9c <HAL_I2C_Mem_Read>:
{
 8008e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ea0:	4698      	mov	r8, r3
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8008ea2:	3b01      	subs	r3, #1
{
 8008ea4:	b083      	sub	sp, #12
 8008ea6:	4604      	mov	r4, r0
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8008ea8:	2b01      	cmp	r3, #1
{
 8008eaa:	460e      	mov	r6, r1
 8008eac:	4692      	mov	sl, r2
 8008eae:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8008eb2:	d904      	bls.n	8008ebe <HAL_I2C_Mem_Read+0x22>
 8008eb4:	f640 1174 	movw	r1, #2420	; 0x974
 8008eb8:	4862      	ldr	r0, [pc, #392]	; (8009044 <HAL_I2C_Mem_Read+0x1a8>)
 8008eba:	f7f9 ffb3 	bl	8002e24 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ebe:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8008ec2:	2b20      	cmp	r3, #32
 8008ec4:	d11c      	bne.n	8008f00 <HAL_I2C_Mem_Read+0x64>
    if ((pData == NULL) || (Size == 0U))
 8008ec6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ec8:	b1f3      	cbz	r3, 8008f08 <HAL_I2C_Mem_Read+0x6c>
 8008eca:	f1b9 0f00 	cmp.w	r9, #0
 8008ece:	d01b      	beq.n	8008f08 <HAL_I2C_Mem_Read+0x6c>
    __HAL_LOCK(hi2c);
 8008ed0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d013      	beq.n	8008f00 <HAL_I2C_Mem_Read+0x64>
 8008ed8:	2501      	movs	r5, #1
 8008eda:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    tickstart = HAL_GetTick();
 8008ede:	f7fc fb47 	bl	8005570 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008ee2:	462a      	mov	r2, r5
 8008ee4:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8008ee6:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008ee8:	2319      	movs	r3, #25
 8008eea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008eee:	4620      	mov	r0, r4
 8008ef0:	f7ff fde8 	bl	8008ac4 <I2C_WaitOnFlagUntilTimeout>
 8008ef4:	4683      	mov	fp, r0
 8008ef6:	b170      	cbz	r0, 8008f16 <HAL_I2C_Mem_Read+0x7a>
      return HAL_ERROR;
 8008ef8:	2001      	movs	r0, #1
}
 8008efa:	b003      	add	sp, #12
 8008efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 8008f00:	2002      	movs	r0, #2
}
 8008f02:	b003      	add	sp, #12
 8008f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008f08:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
 8008f0c:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008f0e:	6463      	str	r3, [r4, #68]	; 0x44
}
 8008f10:	b003      	add	sp, #12
 8008f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008f16:	2040      	movs	r0, #64	; 0x40
    hi2c->pBuffPtr  = pData;
 8008f18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008f1a:	990e      	ldr	r1, [sp, #56]	; 0x38
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008f1c:	f04f 0c22 	mov.w	ip, #34	; 0x22
    hi2c->pBuffPtr  = pData;
 8008f20:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008f22:	4652      	mov	r2, sl
    hi2c->XferISR   = NULL;
 8008f24:	f8c4 b034 	str.w	fp, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008f28:	4643      	mov	r3, r8
 8008f2a:	9100      	str	r1, [sp, #0]
 8008f2c:	4631      	mov	r1, r6
 8008f2e:	9701      	str	r7, [sp, #4]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008f30:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008f34:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008f38:	4620      	mov	r0, r4
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f3a:	f8c4 b044 	str.w	fp, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8008f3e:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008f42:	f7ff fded 	bl	8008b20 <I2C_RequestMemoryRead>
 8008f46:	2800      	cmp	r0, #0
 8008f48:	d14a      	bne.n	8008fe0 <HAL_I2C_Mem_Read+0x144>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f4a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008f4c:	2bff      	cmp	r3, #255	; 0xff
 8008f4e:	d955      	bls.n	8008ffc <HAL_I2C_Mem_Read+0x160>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008f50:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8008f52:	483d      	ldr	r0, [pc, #244]	; (8009048 <HAL_I2C_Mem_Read+0x1ac>)
 8008f54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008f58:	4631      	mov	r1, r6
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008f5a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8008f5c:	9000      	str	r0, [sp, #0]
 8008f5e:	4620      	mov	r0, r4
 8008f60:	f7ff fcb6 	bl	80088d0 <I2C_TransferConfig>
 8008f64:	e003      	b.n	8008f6e <HAL_I2C_Mem_Read+0xd2>
    while (hi2c->XferCount > 0U);
 8008f66:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d053      	beq.n	8009016 <HAL_I2C_Mem_Read+0x17a>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008f6e:	9700      	str	r7, [sp, #0]
 8008f70:	2200      	movs	r2, #0
 8008f72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f74:	2104      	movs	r1, #4
 8008f76:	4620      	mov	r0, r4
 8008f78:	f7ff fda4 	bl	8008ac4 <I2C_WaitOnFlagUntilTimeout>
 8008f7c:	2800      	cmp	r0, #0
 8008f7e:	d1bb      	bne.n	8008ef8 <HAL_I2C_Mem_Read+0x5c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008f80:	6822      	ldr	r2, [r4, #0]
 8008f82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008f86:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8008f88:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8008f8a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8008f8c:	3901      	subs	r1, #1
      hi2c->pBuffPtr++;
 8008f8e:	6a65      	ldr	r5, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8008f90:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 8008f92:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
 8008f94:	3501      	adds	r5, #1
      hi2c->XferSize--;
 8008f96:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 8008f98:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008f9a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8008f9c:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008f9e:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
 8008fa0:	6265      	str	r5, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d1df      	bne.n	8008f66 <HAL_I2C_Mem_Read+0xca>
 8008fa6:	2900      	cmp	r1, #0
 8008fa8:	d0dd      	beq.n	8008f66 <HAL_I2C_Mem_Read+0xca>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008faa:	4602      	mov	r2, r0
 8008fac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fae:	2180      	movs	r1, #128	; 0x80
 8008fb0:	9700      	str	r7, [sp, #0]
 8008fb2:	4620      	mov	r0, r4
 8008fb4:	f7ff fd86 	bl	8008ac4 <I2C_WaitOnFlagUntilTimeout>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008fb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008fbc:	4605      	mov	r5, r0
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008fbe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008fc2:	4631      	mov	r1, r6
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008fc4:	2800      	cmp	r0, #0
 8008fc6:	d197      	bne.n	8008ef8 <HAL_I2C_Mem_Read+0x5c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008fc8:	f8b4 e02a 	ldrh.w	lr, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008fcc:	4662      	mov	r2, ip
 8008fce:	4620      	mov	r0, r4
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008fd0:	45e6      	cmp	lr, ip
 8008fd2:	d909      	bls.n	8008fe8 <HAL_I2C_Mem_Read+0x14c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008fd4:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008fd8:	9500      	str	r5, [sp, #0]
 8008fda:	f7ff fc79 	bl	80088d0 <I2C_TransferConfig>
 8008fde:	e7c2      	b.n	8008f66 <HAL_I2C_Mem_Read+0xca>
      __HAL_UNLOCK(hi2c);
 8008fe0:	f884 b040 	strb.w	fp, [r4, #64]	; 0x40
      return HAL_ERROR;
 8008fe4:	4628      	mov	r0, r5
 8008fe6:	e78c      	b.n	8008f02 <HAL_I2C_Mem_Read+0x66>
          hi2c->XferSize = hi2c->XferCount;
 8008fe8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008fea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008fee:	9500      	str	r5, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8008ff0:	b292      	uxth	r2, r2
 8008ff2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008ff4:	b2d2      	uxtb	r2, r2
 8008ff6:	f7ff fc6b 	bl	80088d0 <I2C_TransferConfig>
 8008ffa:	e7b4      	b.n	8008f66 <HAL_I2C_Mem_Read+0xca>
      hi2c->XferSize = hi2c->XferCount;
 8008ffc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8008ffe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009002:	4d11      	ldr	r5, [pc, #68]	; (8009048 <HAL_I2C_Mem_Read+0x1ac>)
 8009004:	4631      	mov	r1, r6
      hi2c->XferSize = hi2c->XferCount;
 8009006:	b292      	uxth	r2, r2
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8009008:	4620      	mov	r0, r4
 800900a:	9500      	str	r5, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800900c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800900e:	b2d2      	uxtb	r2, r2
 8009010:	f7ff fc5e 	bl	80088d0 <I2C_TransferConfig>
 8009014:	e7ab      	b.n	8008f6e <HAL_I2C_Mem_Read+0xd2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009016:	463a      	mov	r2, r7
 8009018:	990e      	ldr	r1, [sp, #56]	; 0x38
 800901a:	4620      	mov	r0, r4
 800901c:	f7ff fd28 	bl	8008a70 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009020:	2800      	cmp	r0, #0
 8009022:	f47f af69 	bne.w	8008ef8 <HAL_I2C_Mem_Read+0x5c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009026:	6823      	ldr	r3, [r4, #0]
 8009028:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800902a:	4d08      	ldr	r5, [pc, #32]	; (800904c <HAL_I2C_Mem_Read+0x1b0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800902c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800902e:	685a      	ldr	r2, [r3, #4]
 8009030:	402a      	ands	r2, r5
 8009032:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009034:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009038:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800903c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8009040:	e75f      	b.n	8008f02 <HAL_I2C_Mem_Read+0x66>
 8009042:	bf00      	nop
 8009044:	0802667c 	.word	0x0802667c
 8009048:	80002400 	.word	0x80002400
 800904c:	fe00e800 	.word	0xfe00e800

08009050 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009050:	b570      	push	{r4, r5, r6, lr}
 8009052:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8009054:	4b22      	ldr	r3, [pc, #136]	; (80090e0 <HAL_I2CEx_ConfigAnalogFilter+0x90>)
 8009056:	4823      	ldr	r0, [pc, #140]	; (80090e4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
{
 8009058:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800905a:	6822      	ldr	r2, [r4, #0]
 800905c:	4922      	ldr	r1, [pc, #136]	; (80090e8 <HAL_I2CEx_ConfigAnalogFilter+0x98>)
 800905e:	429a      	cmp	r2, r3
 8009060:	bf18      	it	ne
 8009062:	4282      	cmpne	r2, r0
 8009064:	bf14      	ite	ne
 8009066:	2301      	movne	r3, #1
 8009068:	2300      	moveq	r3, #0
 800906a:	428a      	cmp	r2, r1
 800906c:	bf0c      	ite	eq
 800906e:	2300      	moveq	r3, #0
 8009070:	f003 0301 	andne.w	r3, r3, #1
 8009074:	b113      	cbz	r3, 800907c <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 8009076:	4b1d      	ldr	r3, [pc, #116]	; (80090ec <HAL_I2CEx_ConfigAnalogFilter+0x9c>)
 8009078:	429a      	cmp	r2, r3
 800907a:	d12c      	bne.n	80090d6 <HAL_I2CEx_ConfigAnalogFilter+0x86>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800907c:	f435 5380 	bics.w	r3, r5, #4096	; 0x1000
 8009080:	d124      	bne.n	80090cc <HAL_I2CEx_ConfigAnalogFilter+0x7c>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009082:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8009086:	b2db      	uxtb	r3, r3
 8009088:	2b20      	cmp	r3, #32
 800908a:	d11d      	bne.n	80090c8 <HAL_I2CEx_ConfigAnalogFilter+0x78>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800908c:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8009090:	2a01      	cmp	r2, #1
 8009092:	d019      	beq.n	80090c8 <HAL_I2CEx_ConfigAnalogFilter+0x78>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009094:	6822      	ldr	r2, [r4, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009096:	2124      	movs	r1, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009098:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 800909a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800909e:	6811      	ldr	r1, [r2, #0]

    return HAL_OK;
 80090a0:	4630      	mov	r0, r6
    __HAL_I2C_DISABLE(hi2c);
 80090a2:	f021 0101 	bic.w	r1, r1, #1
 80090a6:	6011      	str	r1, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80090a8:	6811      	ldr	r1, [r2, #0]
 80090aa:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 80090ae:	6011      	str	r1, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 80090b0:	6811      	ldr	r1, [r2, #0]
 80090b2:	430d      	orrs	r5, r1
 80090b4:	6015      	str	r5, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 80090b6:	6811      	ldr	r1, [r2, #0]
 80090b8:	f041 0101 	orr.w	r1, r1, #1
 80090bc:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80090be:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80090c2:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 80090c6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 80090c8:	2002      	movs	r0, #2
}
 80090ca:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 80090cc:	2160      	movs	r1, #96	; 0x60
 80090ce:	4808      	ldr	r0, [pc, #32]	; (80090f0 <HAL_I2CEx_ConfigAnalogFilter+0xa0>)
 80090d0:	f7f9 fea8 	bl	8002e24 <assert_failed>
 80090d4:	e7d5      	b.n	8009082 <HAL_I2CEx_ConfigAnalogFilter+0x32>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80090d6:	215f      	movs	r1, #95	; 0x5f
 80090d8:	4805      	ldr	r0, [pc, #20]	; (80090f0 <HAL_I2CEx_ConfigAnalogFilter+0xa0>)
 80090da:	f7f9 fea3 	bl	8002e24 <assert_failed>
 80090de:	e7cd      	b.n	800907c <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 80090e0:	40005400 	.word	0x40005400
 80090e4:	40005800 	.word	0x40005800
 80090e8:	40005c00 	.word	0x40005c00
 80090ec:	40006000 	.word	0x40006000
 80090f0:	080266b4 	.word	0x080266b4

080090f4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80090f4:	b570      	push	{r4, r5, r6, lr}
 80090f6:	4604      	mov	r4, r0
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80090f8:	4b21      	ldr	r3, [pc, #132]	; (8009180 <HAL_I2CEx_ConfigDigitalFilter+0x8c>)
 80090fa:	4822      	ldr	r0, [pc, #136]	; (8009184 <HAL_I2CEx_ConfigDigitalFilter+0x90>)
{
 80090fc:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80090fe:	6822      	ldr	r2, [r4, #0]
 8009100:	4921      	ldr	r1, [pc, #132]	; (8009188 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8009102:	429a      	cmp	r2, r3
 8009104:	bf18      	it	ne
 8009106:	4282      	cmpne	r2, r0
 8009108:	bf14      	ite	ne
 800910a:	2301      	movne	r3, #1
 800910c:	2300      	moveq	r3, #0
 800910e:	428a      	cmp	r2, r1
 8009110:	bf0c      	ite	eq
 8009112:	2300      	moveq	r3, #0
 8009114:	f003 0301 	andne.w	r3, r3, #1
 8009118:	b113      	cbz	r3, 8009120 <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 800911a:	4b1c      	ldr	r3, [pc, #112]	; (800918c <HAL_I2CEx_ConfigDigitalFilter+0x98>)
 800911c:	429a      	cmp	r2, r3
 800911e:	d12a      	bne.n	8009176 <HAL_I2CEx_ConfigDigitalFilter+0x82>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8009120:	2d0f      	cmp	r5, #15
 8009122:	d823      	bhi.n	800916c <HAL_I2CEx_ConfigDigitalFilter+0x78>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009124:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8009128:	b2db      	uxtb	r3, r3
 800912a:	2b20      	cmp	r3, #32
 800912c:	d11c      	bne.n	8009168 <HAL_I2CEx_ConfigDigitalFilter+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800912e:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8009132:	2a01      	cmp	r2, #1
 8009134:	d018      	beq.n	8009168 <HAL_I2CEx_ConfigDigitalFilter+0x74>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009136:	6822      	ldr	r2, [r4, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009138:	2124      	movs	r1, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800913a:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 800913c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8009140:	6811      	ldr	r1, [r2, #0]

    return HAL_OK;
 8009142:	4630      	mov	r0, r6
    __HAL_I2C_DISABLE(hi2c);
 8009144:	f021 0101 	bic.w	r1, r1, #1
 8009148:	6011      	str	r1, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 800914a:	6811      	ldr	r1, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 800914c:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 8009150:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 8009154:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8009156:	6811      	ldr	r1, [r2, #0]
 8009158:	f041 0101 	orr.w	r1, r1, #1
 800915c:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800915e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009162:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8009166:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8009168:	2002      	movs	r0, #2
}
 800916a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800916c:	218e      	movs	r1, #142	; 0x8e
 800916e:	4808      	ldr	r0, [pc, #32]	; (8009190 <HAL_I2CEx_ConfigDigitalFilter+0x9c>)
 8009170:	f7f9 fe58 	bl	8002e24 <assert_failed>
 8009174:	e7d6      	b.n	8009124 <HAL_I2CEx_ConfigDigitalFilter+0x30>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8009176:	218d      	movs	r1, #141	; 0x8d
 8009178:	4805      	ldr	r0, [pc, #20]	; (8009190 <HAL_I2CEx_ConfigDigitalFilter+0x9c>)
 800917a:	f7f9 fe53 	bl	8002e24 <assert_failed>
 800917e:	e7cf      	b.n	8009120 <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 8009180:	40005400 	.word	0x40005400
 8009184:	40005800 	.word	0x40005800
 8009188:	40005c00 	.word	0x40005c00
 800918c:	40006000 	.word	0x40006000
 8009190:	080266b4 	.word	0x080266b4

08009194 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009194:	6803      	ldr	r3, [r0, #0]
 8009196:	f64a 22aa 	movw	r2, #43690	; 0xaaaa

  /* Return function status */
  return HAL_OK;
}
 800919a:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800919c:	601a      	str	r2, [r3, #0]
}
 800919e:	4770      	bx	lr

080091a0 <HAL_MDIOS_Init>:
HAL_StatusTypeDef HAL_MDIOS_Init(MDIOS_HandleTypeDef *hmdios)
{
  uint32_t tmpcr = 0;

  /* Check the MDIOS handle allocation */
  if(hmdios == NULL)
 80091a0:	2800      	cmp	r0, #0
 80091a2:	d03c      	beq.n	800921e <HAL_MDIOS_Init+0x7e>
  {
    return HAL_ERROR;
  }
  
  /* Check the parameters */
  assert_param(IS_MDIOS_ALL_INSTANCE(hmdios->Instance));
 80091a4:	4b21      	ldr	r3, [pc, #132]	; (800922c <HAL_MDIOS_Init+0x8c>)
 80091a6:	6802      	ldr	r2, [r0, #0]
 80091a8:	429a      	cmp	r2, r3
{
 80091aa:	b570      	push	{r4, r5, r6, lr}
 80091ac:	4604      	mov	r4, r0
  assert_param(IS_MDIOS_ALL_INSTANCE(hmdios->Instance));
 80091ae:	d003      	beq.n	80091b8 <HAL_MDIOS_Init+0x18>
 80091b0:	21c7      	movs	r1, #199	; 0xc7
 80091b2:	481f      	ldr	r0, [pc, #124]	; (8009230 <HAL_MDIOS_Init+0x90>)
 80091b4:	f7f9 fe36 	bl	8002e24 <assert_failed>
  assert_param(IS_MDIOS_PORTADDRESS(hmdios->Init.PortAddress));
 80091b8:	6863      	ldr	r3, [r4, #4]
 80091ba:	2b1f      	cmp	r3, #31
 80091bc:	d826      	bhi.n	800920c <HAL_MDIOS_Init+0x6c>
  assert_param(IS_MDIOS_PREAMBLECHECK(hmdios->Init.PreambleCheck));
 80091be:	68a3      	ldr	r3, [r4, #8]
 80091c0:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80091c4:	d119      	bne.n	80091fa <HAL_MDIOS_Init+0x5a>
  
  /* Process Locked */
  __HAL_LOCK(hmdios);
 80091c6:	7b63      	ldrb	r3, [r4, #13]
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d01d      	beq.n	8009208 <HAL_MDIOS_Init+0x68>
 80091cc:	2201      	movs	r2, #1
  
  if(hmdios->State == HAL_MDIOS_STATE_RESET)
 80091ce:	7b23      	ldrb	r3, [r4, #12]
  __HAL_LOCK(hmdios);
 80091d0:	7362      	strb	r2, [r4, #13]
  if(hmdios->State == HAL_MDIOS_STATE_RESET)
 80091d2:	b333      	cbz	r3, 8009222 <HAL_MDIOS_Init+0x82>
  
  /* Change the MDIOS state */
  hmdios->State = HAL_MDIOS_STATE_BUSY;
  
  /* Get the MDIOS CR value */
  tmpcr = hmdios->Instance->CR;
 80091d4:	6825      	ldr	r5, [r4, #0]
  
  /* Write the MDIOS CR */
  hmdios->Instance->CR = tmpcr;
  
  /* Change the MDIOS state */
  hmdios->State = HAL_MDIOS_STATE_READY;
 80091d6:	2601      	movs	r6, #1
  tmpcr |=  (uint32_t)(((hmdios->Init.PortAddress) << MDIOS_PORT_ADDRESS_SHIFT)    |\
 80091d8:	68a3      	ldr	r3, [r4, #8]
  hmdios->State = HAL_MDIOS_STATE_BUSY;
 80091da:	2202      	movs	r2, #2
  tmpcr |=  (uint32_t)(((hmdios->Init.PortAddress) << MDIOS_PORT_ADDRESS_SHIFT)    |\
 80091dc:	6861      	ldr	r1, [r4, #4]
  hmdios->State = HAL_MDIOS_STATE_BUSY;
 80091de:	7322      	strb	r2, [r4, #12]
  tmpcr |=  (uint32_t)(((hmdios->Init.PortAddress) << MDIOS_PORT_ADDRESS_SHIFT)    |\
 80091e0:	4333      	orrs	r3, r6
  tmpcr = hmdios->Instance->CR;
 80091e2:	6828      	ldr	r0, [r5, #0]
  tmpcr &= ((uint32_t)~(MDIOS_CR_EN | MDIOS_CR_DPC | MDIOS_CR_PORT_ADDRESS));
 80091e4:	4a13      	ldr	r2, [pc, #76]	; (8009234 <HAL_MDIOS_Init+0x94>)
  tmpcr |=  (uint32_t)(((hmdios->Init.PortAddress) << MDIOS_PORT_ADDRESS_SHIFT)    |\
 80091e6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  
  /* Release Lock */
  __HAL_UNLOCK(hmdios);
 80091ea:	2100      	movs	r1, #0
  tmpcr &= ((uint32_t)~(MDIOS_CR_EN | MDIOS_CR_DPC | MDIOS_CR_PORT_ADDRESS));
 80091ec:	4002      	ands	r2, r0
  
  /* Return function status */
  return HAL_OK;
 80091ee:	4608      	mov	r0, r1
  tmpcr |=  (uint32_t)(((hmdios->Init.PortAddress) << MDIOS_PORT_ADDRESS_SHIFT)    |\
 80091f0:	4313      	orrs	r3, r2
  hmdios->Instance->CR = tmpcr;
 80091f2:	602b      	str	r3, [r5, #0]
  hmdios->State = HAL_MDIOS_STATE_READY;
 80091f4:	7326      	strb	r6, [r4, #12]
  __HAL_UNLOCK(hmdios);
 80091f6:	7361      	strb	r1, [r4, #13]

}
 80091f8:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_MDIOS_PREAMBLECHECK(hmdios->Init.PreambleCheck));
 80091fa:	21c9      	movs	r1, #201	; 0xc9
 80091fc:	480c      	ldr	r0, [pc, #48]	; (8009230 <HAL_MDIOS_Init+0x90>)
 80091fe:	f7f9 fe11 	bl	8002e24 <assert_failed>
  __HAL_LOCK(hmdios);
 8009202:	7b63      	ldrb	r3, [r4, #13]
 8009204:	2b01      	cmp	r3, #1
 8009206:	d1e1      	bne.n	80091cc <HAL_MDIOS_Init+0x2c>
 8009208:	2002      	movs	r0, #2
}
 800920a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_MDIOS_PORTADDRESS(hmdios->Init.PortAddress));
 800920c:	21c8      	movs	r1, #200	; 0xc8
 800920e:	4808      	ldr	r0, [pc, #32]	; (8009230 <HAL_MDIOS_Init+0x90>)
 8009210:	f7f9 fe08 	bl	8002e24 <assert_failed>
  assert_param(IS_MDIOS_PREAMBLECHECK(hmdios->Init.PreambleCheck));
 8009214:	68a3      	ldr	r3, [r4, #8]
 8009216:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800921a:	d0d4      	beq.n	80091c6 <HAL_MDIOS_Init+0x26>
 800921c:	e7ed      	b.n	80091fa <HAL_MDIOS_Init+0x5a>
    return HAL_ERROR;
 800921e:	2001      	movs	r0, #1
}
 8009220:	4770      	bx	lr
    HAL_MDIOS_MspInit(hmdios);
 8009222:	4620      	mov	r0, r4
 8009224:	f7fa fde2 	bl	8003dec <HAL_MDIOS_MspInit>
 8009228:	e7d4      	b.n	80091d4 <HAL_MDIOS_Init+0x34>
 800922a:	bf00      	nop
 800922c:	40017800 	.word	0x40017800
 8009230:	080266f0 	.word	0x080266f0
 8009234:	ffffe07e 	.word	0xffffe07e

08009238 <HAL_MDIOS_WriteCpltCallback>:
 8009238:	4770      	bx	lr
 800923a:	bf00      	nop

0800923c <HAL_MDIOS_ReadCpltCallback>:
 800923c:	4770      	bx	lr
 800923e:	bf00      	nop

08009240 <HAL_MDIOS_ErrorCallback>:
 8009240:	4770      	bx	lr
 8009242:	bf00      	nop

08009244 <HAL_MDIOS_WakeUpCallback>:
 8009244:	4770      	bx	lr
 8009246:	bf00      	nop

08009248 <HAL_MDIOS_IRQHandler>:
  * @brief This function handles MDIOS interrupt request.
  * @param hmdios MDIOS handle
  * @retval None
  */
void HAL_MDIOS_IRQHandler(MDIOS_HandleTypeDef *hmdios)
{
 8009248:	b538      	push	{r3, r4, r5, lr}
  /* Write Register Interrupt enabled ? */
  if(__HAL_MDIOS_GET_IT_SOURCE(hmdios, MDIOS_IT_WRITE) != RESET)
 800924a:	6803      	ldr	r3, [r0, #0]
{
 800924c:	4604      	mov	r4, r0
  if(__HAL_MDIOS_GET_IT_SOURCE(hmdios, MDIOS_IT_WRITE) != RESET)
 800924e:	681a      	ldr	r2, [r3, #0]
 8009250:	0795      	lsls	r5, r2, #30
 8009252:	d501      	bpl.n	8009258 <HAL_MDIOS_IRQHandler+0x10>
  return hmdios->Instance->WRFR;   
 8009254:	685a      	ldr	r2, [r3, #4]
  {
    /* Write register flag */
    if(HAL_MDIOS_GetWrittenRegAddress(hmdios) != RESET)
 8009256:	bb22      	cbnz	r2, 80092a2 <HAL_MDIOS_IRQHandler+0x5a>
      HAL_MDIOS_ClearWriteRegAddress(hmdios, MDIOS_ALL_REG_FLAG);
    }
  }
  
  /* Read Register Interrupt enabled ? */
  if(__HAL_MDIOS_GET_IT_SOURCE(hmdios, MDIOS_IT_READ) != RESET)
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	0750      	lsls	r0, r2, #29
 800925c:	d502      	bpl.n	8009264 <HAL_MDIOS_IRQHandler+0x1c>
  return hmdios->Instance->RDFR;   
 800925e:	68da      	ldr	r2, [r3, #12]
  {
    /* Read register flag */
    if(HAL_MDIOS_GetReadRegAddress(hmdios) != RESET)
 8009260:	2a00      	cmp	r2, #0
 8009262:	d130      	bne.n	80092c6 <HAL_MDIOS_IRQHandler+0x7e>
      HAL_MDIOS_ClearReadRegAddress(hmdios, MDIOS_ALL_REG_FLAG);
    }
  }
  
  /* Error Interrupt enabled ? */
  if(__HAL_MDIOS_GET_IT_SOURCE(hmdios, MDIOS_IT_ERROR) != RESET)
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	0711      	lsls	r1, r2, #28
 8009268:	d502      	bpl.n	8009270 <HAL_MDIOS_IRQHandler+0x28>
  {
    /* All Errors Flag */
    if(__HAL_MDIOS_GET_ERROR_FLAG(hmdios, MDIOS_ALL_ERRORS_FLAG) !=RESET)
 800926a:	695b      	ldr	r3, [r3, #20]
 800926c:	075a      	lsls	r2, r3, #29
 800926e:	d10b      	bne.n	8009288 <HAL_MDIOS_IRQHandler+0x40>
      __HAL_MDIOS_CLEAR_ERROR_FLAG(hmdios, MDIOS_ALL_ERRORS_FLAG);
    }
  }
   
  /* check MDIOS WAKEUP exti flag */
  if(__HAL_MDIOS_WAKEUP_EXTI_GET_FLAG() != RESET)
 8009270:	4d1e      	ldr	r5, [pc, #120]	; (80092ec <HAL_MDIOS_IRQHandler+0xa4>)
 8009272:	696b      	ldr	r3, [r5, #20]
 8009274:	01db      	lsls	r3, r3, #7
 8009276:	d400      	bmi.n	800927a <HAL_MDIOS_IRQHandler+0x32>
#endif /* USE_HAL_MDIOS_REGISTER_CALLBACKS */

    /* Clear MDIOS WAKEUP Exti pending bit */
    __HAL_MDIOS_WAKEUP_EXTI_CLEAR_FLAG();
  }
}
 8009278:	bd38      	pop	{r3, r4, r5, pc}
    HAL_MDIOS_WakeUpCallback(hmdios);
 800927a:	4620      	mov	r0, r4
 800927c:	f7ff ffe2 	bl	8009244 <HAL_MDIOS_WakeUpCallback>
    __HAL_MDIOS_WAKEUP_EXTI_CLEAR_FLAG();
 8009280:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009284:	616b      	str	r3, [r5, #20]
}
 8009286:	bd38      	pop	{r3, r4, r5, pc}
      HAL_MDIOS_ErrorCallback(hmdios);
 8009288:	4620      	mov	r0, r4
  if(__HAL_MDIOS_WAKEUP_EXTI_GET_FLAG() != RESET)
 800928a:	4d18      	ldr	r5, [pc, #96]	; (80092ec <HAL_MDIOS_IRQHandler+0xa4>)
      HAL_MDIOS_ErrorCallback(hmdios);
 800928c:	f7ff ffd8 	bl	8009240 <HAL_MDIOS_ErrorCallback>
      __HAL_MDIOS_CLEAR_ERROR_FLAG(hmdios, MDIOS_ALL_ERRORS_FLAG);
 8009290:	6822      	ldr	r2, [r4, #0]
 8009292:	6993      	ldr	r3, [r2, #24]
 8009294:	f043 0307 	orr.w	r3, r3, #7
 8009298:	6193      	str	r3, [r2, #24]
  if(__HAL_MDIOS_WAKEUP_EXTI_GET_FLAG() != RESET)
 800929a:	696b      	ldr	r3, [r5, #20]
 800929c:	01db      	lsls	r3, r3, #7
 800929e:	d5eb      	bpl.n	8009278 <HAL_MDIOS_IRQHandler+0x30>
 80092a0:	e7eb      	b.n	800927a <HAL_MDIOS_IRQHandler+0x32>
      HAL_MDIOS_WriteCpltCallback(hmdios);
 80092a2:	f7ff ffc9 	bl	8009238 <HAL_MDIOS_WriteCpltCallback>
  assert_param(IS_MDIOS_REGISTER(RegNum));
 80092a6:	f44f 7121 	mov.w	r1, #644	; 0x284
 80092aa:	4811      	ldr	r0, [pc, #68]	; (80092f0 <HAL_MDIOS_IRQHandler+0xa8>)
 80092ac:	f7f9 fdba 	bl	8002e24 <assert_failed>
  __HAL_LOCK(hmdios);
 80092b0:	7b63      	ldrb	r3, [r4, #13]
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	6823      	ldr	r3, [r4, #0]
 80092b6:	d0cf      	beq.n	8009258 <HAL_MDIOS_IRQHandler+0x10>
  hmdios->Instance->CWRFR |= (RegNum);
 80092b8:	f04f 31ff 	mov.w	r1, #4294967295
  __HAL_UNLOCK(hmdios);
 80092bc:	2200      	movs	r2, #0
  hmdios->Instance->CWRFR |= (RegNum);
 80092be:	6898      	ldr	r0, [r3, #8]
 80092c0:	6099      	str	r1, [r3, #8]
  __HAL_UNLOCK(hmdios);
 80092c2:	7362      	strb	r2, [r4, #13]
 80092c4:	e7c8      	b.n	8009258 <HAL_MDIOS_IRQHandler+0x10>
      HAL_MDIOS_ReadCpltCallback(hmdios);
 80092c6:	4620      	mov	r0, r4
 80092c8:	f7ff ffb8 	bl	800923c <HAL_MDIOS_ReadCpltCallback>
  assert_param(IS_MDIOS_REGISTER(RegNum));
 80092cc:	f240 219b 	movw	r1, #667	; 0x29b
 80092d0:	4807      	ldr	r0, [pc, #28]	; (80092f0 <HAL_MDIOS_IRQHandler+0xa8>)
 80092d2:	f7f9 fda7 	bl	8002e24 <assert_failed>
  __HAL_LOCK(hmdios);
 80092d6:	7b63      	ldrb	r3, [r4, #13]
 80092d8:	2b01      	cmp	r3, #1
 80092da:	6823      	ldr	r3, [r4, #0]
 80092dc:	d0c2      	beq.n	8009264 <HAL_MDIOS_IRQHandler+0x1c>
  hmdios->Instance->CRDFR |= (RegNum); 
 80092de:	f04f 31ff 	mov.w	r1, #4294967295
  __HAL_UNLOCK(hmdios);
 80092e2:	2200      	movs	r2, #0
  hmdios->Instance->CRDFR |= (RegNum); 
 80092e4:	6918      	ldr	r0, [r3, #16]
 80092e6:	6119      	str	r1, [r3, #16]
  __HAL_UNLOCK(hmdios);
 80092e8:	7362      	strb	r2, [r4, #13]
 80092ea:	e7bb      	b.n	8009264 <HAL_MDIOS_IRQHandler+0x1c>
 80092ec:	40013c00 	.word	0x40013c00
 80092f0:	080266f0 	.word	0x080266f0

080092f4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80092f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092f6:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80092f8:	2800      	cmp	r0, #0
 80092fa:	f000 8098 	beq.w	800942e <HAL_PCD_Init+0x13a>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 80092fe:	6805      	ldr	r5, [r0, #0]
 8009300:	4604      	mov	r4, r0
 8009302:	f1b5 4fa0 	cmp.w	r5, #1342177280	; 0x50000000
 8009306:	d007      	beq.n	8009318 <HAL_PCD_Init+0x24>
 8009308:	4b4d      	ldr	r3, [pc, #308]	; (8009440 <HAL_PCD_Init+0x14c>)
 800930a:	429d      	cmp	r5, r3
 800930c:	d004      	beq.n	8009318 <HAL_PCD_Init+0x24>
 800930e:	2187      	movs	r1, #135	; 0x87
 8009310:	484c      	ldr	r0, [pc, #304]	; (8009444 <HAL_PCD_Init+0x150>)
 8009312:	f7f9 fd87 	bl	8002e24 <assert_failed>
 8009316:	6825      	ldr	r5, [r4, #0]

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009318:	f894 33bd 	ldrb.w	r3, [r4, #957]	; 0x3bd
 800931c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009320:	b343      	cbz	r3, 8009374 <HAL_PCD_Init+0x80>
 8009322:	4628      	mov	r0, r5
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009324:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009326:	466f      	mov	r7, sp
 8009328:	1d26      	adds	r6, r4, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 800932a:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800932e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009330:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009332:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 8009336:	bf08      	it	eq
 8009338:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 800933a:	f005 ff87 	bl	800f24c <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800933e:	f855 eb10 	ldr.w	lr, [r5], #16
 8009342:	46ac      	mov	ip, r5
 8009344:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009348:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800934a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800934e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8009350:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8009354:	e887 0003 	stmia.w	r7, {r0, r1}
 8009358:	4670      	mov	r0, lr
 800935a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800935e:	f005 feaf 	bl	800f0c0 <USB_CoreInit>
 8009362:	4607      	mov	r7, r0
 8009364:	b168      	cbz	r0, 8009382 <HAL_PCD_Init+0x8e>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 8009366:	2501      	movs	r5, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009368:	2302      	movs	r3, #2
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 800936a:	4628      	mov	r0, r5
    hpcd->State = HAL_PCD_STATE_ERROR;
 800936c:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
}
 8009370:	b00b      	add	sp, #44	; 0x2c
 8009372:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_PCD_MspInit(hpcd);
 8009374:	4620      	mov	r0, r4
    hpcd->Lock = HAL_UNLOCKED;
 8009376:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 800937a:	f016 f871 	bl	801f460 <HAL_PCD_MspInit>
 800937e:	6820      	ldr	r0, [r4, #0]
 8009380:	e7d0      	b.n	8009324 <HAL_PCD_Init+0x30>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8009382:	4601      	mov	r1, r0
 8009384:	6820      	ldr	r0, [r4, #0]
 8009386:	f005 ff69 	bl	800f25c <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800938a:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800938e:	f1bc 0f00 	cmp.w	ip, #0
 8009392:	d02b      	beq.n	80093ec <HAL_PCD_Init+0xf8>
 8009394:	4638      	mov	r0, r7
    hpcd->IN_ep[i].is_in = 1U;
 8009396:	2701      	movs	r7, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009398:	4602      	mov	r2, r0
    hpcd->IN_ep[i].is_in = 1U;
 800939a:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800939e:	1c41      	adds	r1, r0, #1
    hpcd->IN_ep[i].is_in = 1U;
 80093a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    hpcd->IN_ep[i].num = i;
 80093a4:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 80093a8:	f8a3 0042 	strh.w	r0, [r3, #66]	; 0x42
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80093ac:	b2c8      	uxtb	r0, r1
    hpcd->IN_ep[i].is_in = 1U;
 80093ae:	f883 703d 	strb.w	r7, [r3, #61]	; 0x3d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80093b2:	4560      	cmp	r0, ip
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80093b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 80093b8:	651a      	str	r2, [r3, #80]	; 0x50
    hpcd->IN_ep[i].xfer_buff = 0U;
 80093ba:	e9c3 2211 	strd	r2, r2, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80093be:	d3ec      	bcc.n	800939a <HAL_PCD_Init+0xa6>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80093c0:	2200      	movs	r2, #0
    hpcd->OUT_ep[i].is_in = 0U;
 80093c2:	4611      	mov	r1, r2
 80093c4:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80093c8:	1c50      	adds	r0, r2, #1
    hpcd->OUT_ep[i].is_in = 0U;
 80093ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    hpcd->OUT_ep[i].num = i;
 80093ce:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80093d2:	b2c2      	uxtb	r2, r0
    hpcd->OUT_ep[i].is_in = 0U;
 80093d4:	f883 11fd 	strb.w	r1, [r3, #509]	; 0x1fd
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80093d8:	4562      	cmp	r2, ip
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80093da:	f883 11ff 	strb.w	r1, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 80093de:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80093e2:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 80093e6:	f8c3 1210 	str.w	r1, [r3, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80093ea:	d3eb      	bcc.n	80093c4 <HAL_PCD_Init+0xd0>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80093ec:	466f      	mov	r7, sp
 80093ee:	f8d4 c000 	ldr.w	ip, [r4]
 80093f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80093f4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80093f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80093f8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80093fa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80093fe:	e887 0003 	stmia.w	r7, {r0, r1}
 8009402:	4660      	mov	r0, ip
 8009404:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8009408:	f005 ff40 	bl	800f28c <USB_DevInit>
 800940c:	4605      	mov	r5, r0
 800940e:	2800      	cmp	r0, #0
 8009410:	d1a9      	bne.n	8009366 <HAL_PCD_Init+0x72>
  hpcd->State = HAL_PCD_STATE_READY;
 8009412:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 8009414:	6a63      	ldr	r3, [r4, #36]	; 0x24
  hpcd->USB_Address = 0U;
 8009416:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  if (hpcd->Init.lpm_enable == 1U)
 800941a:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 800941c:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 8009420:	d009      	beq.n	8009436 <HAL_PCD_Init+0x142>
  (void)USB_DevDisconnect(hpcd->Instance);
 8009422:	6820      	ldr	r0, [r4, #0]
 8009424:	f006 fafe 	bl	800fa24 <USB_DevDisconnect>
}
 8009428:	4628      	mov	r0, r5
 800942a:	b00b      	add	sp, #44	; 0x2c
 800942c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800942e:	2501      	movs	r5, #1
}
 8009430:	4628      	mov	r0, r5
 8009432:	b00b      	add	sp, #44	; 0x2c
 8009434:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009436:	4620      	mov	r0, r4
 8009438:	f000 fcd4 	bl	8009de4 <HAL_PCDEx_ActivateLPM>
 800943c:	e7f1      	b.n	8009422 <HAL_PCD_Init+0x12e>
 800943e:	bf00      	nop
 8009440:	40040000 	.word	0x40040000
 8009444:	0802672c 	.word	0x0802672c

08009448 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8009448:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800944c:	2b01      	cmp	r3, #1
 800944e:	d00e      	beq.n	800946e <HAL_PCD_Start+0x26>
 8009450:	2301      	movs	r3, #1
{
 8009452:	b510      	push	{r4, lr}
 8009454:	4604      	mov	r4, r0
  (void)USB_DevConnect(hpcd->Instance);
 8009456:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8009458:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 800945c:	f006 fad6 	bl	800fa0c <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8009460:	6820      	ldr	r0, [r4, #0]
 8009462:	f005 feeb 	bl	800f23c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8009466:	2000      	movs	r0, #0
 8009468:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
}
 800946c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800946e:	2002      	movs	r0, #2
}
 8009470:	4770      	bx	lr
 8009472:	bf00      	nop

08009474 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009478:	6806      	ldr	r6, [r0, #0]
{
 800947a:	b089      	sub	sp, #36	; 0x24
 800947c:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800947e:	4630      	mov	r0, r6
 8009480:	f006 fb0e 	bl	800faa0 <USB_GetMode>
 8009484:	b110      	cbz	r0, 800948c <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 8009486:	b009      	add	sp, #36	; 0x24
 8009488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800948c:	4605      	mov	r5, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800948e:	6820      	ldr	r0, [r4, #0]
 8009490:	f006 fad4 	bl	800fa3c <USB_ReadInterrupts>
 8009494:	2800      	cmp	r0, #0
 8009496:	d0f6      	beq.n	8009486 <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009498:	6820      	ldr	r0, [r4, #0]
 800949a:	f006 facf 	bl	800fa3c <USB_ReadInterrupts>
 800949e:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80094a2:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80094a4:	d003      	beq.n	80094ae <HAL_PCD_IRQHandler+0x3a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80094a6:	6943      	ldr	r3, [r0, #20]
 80094a8:	f003 0302 	and.w	r3, r3, #2
 80094ac:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80094ae:	f006 fac5 	bl	800fa3c <USB_ReadInterrupts>
 80094b2:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80094b6:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80094b8:	d011      	beq.n	80094de <HAL_PCD_IRQHandler+0x6a>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80094ba:	6983      	ldr	r3, [r0, #24]
 80094bc:	f023 0310 	bic.w	r3, r3, #16
 80094c0:	6183      	str	r3, [r0, #24]
      temp = USBx->GRXSTSP;
 80094c2:	6a37      	ldr	r7, [r6, #32]
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80094c4:	f3c7 4343 	ubfx	r3, r7, #17, #4
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80094c8:	f007 080f 	and.w	r8, r7, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80094cc:	2b02      	cmp	r3, #2
 80094ce:	d07d      	beq.n	80095cc <HAL_PCD_IRQHandler+0x158>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80094d0:	2b06      	cmp	r3, #6
 80094d2:	f000 82ae 	beq.w	8009a32 <HAL_PCD_IRQHandler+0x5be>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80094d6:	6983      	ldr	r3, [r0, #24]
 80094d8:	f043 0310 	orr.w	r3, r3, #16
 80094dc:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80094de:	f006 faad 	bl	800fa3c <USB_ReadInterrupts>
 80094e2:	f410 2f00 	tst.w	r0, #524288	; 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80094e6:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80094e8:	f040 8169 	bne.w	80097be <HAL_PCD_IRQHandler+0x34a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80094ec:	f006 faa6 	bl	800fa3c <USB_ReadInterrupts>
 80094f0:	0347      	lsls	r7, r0, #13
 80094f2:	f100 80a8 	bmi.w	8009646 <HAL_PCD_IRQHandler+0x1d2>
 80094f6:	f8d4 b000 	ldr.w	fp, [r4]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80094fa:	4658      	mov	r0, fp
 80094fc:	f006 fa9e 	bl	800fa3c <USB_ReadInterrupts>
 8009500:	2800      	cmp	r0, #0
 8009502:	f2c0 8083 	blt.w	800960c <HAL_PCD_IRQHandler+0x198>
 8009506:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009508:	f006 fa98 	bl	800fa3c <USB_ReadInterrupts>
 800950c:	0500      	lsls	r0, r0, #20
 800950e:	d44a      	bmi.n	80095a6 <HAL_PCD_IRQHandler+0x132>
 8009510:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8009512:	f006 fa93 	bl	800fa3c <USB_ReadInterrupts>
 8009516:	0102      	lsls	r2, r0, #4
 8009518:	d513      	bpl.n	8009542 <HAL_PCD_IRQHandler+0xce>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800951a:	6822      	ldr	r2, [r4, #0]
      if (hpcd->LPM_State == LPM_L0)
 800951c:	f894 13f4 	ldrb.w	r1, [r4, #1012]	; 0x3f4
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8009520:	6953      	ldr	r3, [r2, #20]
 8009522:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009526:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 8009528:	2900      	cmp	r1, #0
 800952a:	d146      	bne.n	80095ba <HAL_PCD_IRQHandler+0x146>
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800952c:	6d53      	ldr	r3, [r2, #84]	; 0x54
        hpcd->LPM_State = LPM_L1;
 800952e:	2101      	movs	r1, #1
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009530:	4620      	mov	r0, r4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8009532:	f3c3 0383 	ubfx	r3, r3, #2, #4
        hpcd->LPM_State = LPM_L1;
 8009536:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800953a:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800953e:	f016 f8fd 	bl	801f73c <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009542:	6820      	ldr	r0, [r4, #0]
 8009544:	f006 fa7a 	bl	800fa3c <USB_ReadInterrupts>
 8009548:	04c3      	lsls	r3, r0, #19
 800954a:	f100 8191 	bmi.w	8009870 <HAL_PCD_IRQHandler+0x3fc>
 800954e:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009550:	f006 fa74 	bl	800fa3c <USB_ReadInterrupts>
 8009554:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 8009558:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800955a:	f040 8172 	bne.w	8009842 <HAL_PCD_IRQHandler+0x3ce>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800955e:	f006 fa6d 	bl	800fa3c <USB_ReadInterrupts>
 8009562:	0707      	lsls	r7, r0, #28
 8009564:	f100 8164 	bmi.w	8009830 <HAL_PCD_IRQHandler+0x3bc>
 8009568:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800956a:	f006 fa67 	bl	800fa3c <USB_ReadInterrupts>
 800956e:	02c6      	lsls	r6, r0, #11
 8009570:	f100 81d9 	bmi.w	8009926 <HAL_PCD_IRQHandler+0x4b2>
 8009574:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009576:	f006 fa61 	bl	800fa3c <USB_ReadInterrupts>
 800957a:	0285      	lsls	r5, r0, #10
 800957c:	f100 81c9 	bmi.w	8009912 <HAL_PCD_IRQHandler+0x49e>
 8009580:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009582:	f006 fa5b 	bl	800fa3c <USB_ReadInterrupts>
 8009586:	0040      	lsls	r0, r0, #1
 8009588:	d454      	bmi.n	8009634 <HAL_PCD_IRQHandler+0x1c0>
 800958a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800958c:	f006 fa56 	bl	800fa3c <USB_ReadInterrupts>
 8009590:	0741      	lsls	r1, r0, #29
 8009592:	f57f af78 	bpl.w	8009486 <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 8009596:	6823      	ldr	r3, [r4, #0]
 8009598:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800959a:	076a      	lsls	r2, r5, #29
 800959c:	d411      	bmi.n	80095c2 <HAL_PCD_IRQHandler+0x14e>
      hpcd->Instance->GOTGINT |= temp;
 800959e:	685a      	ldr	r2, [r3, #4]
 80095a0:	432a      	orrs	r2, r5
 80095a2:	605a      	str	r2, [r3, #4]
 80095a4:	e76f      	b.n	8009486 <HAL_PCD_IRQHandler+0x12>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80095a6:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 80095aa:	07d9      	lsls	r1, r3, #31
 80095ac:	d42a      	bmi.n	8009604 <HAL_PCD_IRQHandler+0x190>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80095ae:	6820      	ldr	r0, [r4, #0]
 80095b0:	6943      	ldr	r3, [r0, #20]
 80095b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80095b6:	6143      	str	r3, [r0, #20]
 80095b8:	e7ab      	b.n	8009512 <HAL_PCD_IRQHandler+0x9e>
        HAL_PCD_SuspendCallback(hpcd);
 80095ba:	4620      	mov	r0, r4
 80095bc:	f015 ffd4 	bl	801f568 <HAL_PCD_SuspendCallback>
 80095c0:	e7bf      	b.n	8009542 <HAL_PCD_IRQHandler+0xce>
        HAL_PCD_DisconnectCallback(hpcd);
 80095c2:	4620      	mov	r0, r4
 80095c4:	f015 fff8 	bl	801f5b8 <HAL_PCD_DisconnectCallback>
 80095c8:	6823      	ldr	r3, [r4, #0]
 80095ca:	e7e8      	b.n	800959e <HAL_PCD_IRQHandler+0x12a>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80095cc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80095d0:	421f      	tst	r7, r3
 80095d2:	d080      	beq.n	80094d6 <HAL_PCD_IRQHandler+0x62>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80095d4:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 80095d8:	f3c7 170a 	ubfx	r7, r7, #4, #11
 80095dc:	4630      	mov	r0, r6
 80095de:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 80095e2:	463a      	mov	r2, r7
 80095e4:	f8d8 1208 	ldr.w	r1, [r8, #520]	; 0x208
 80095e8:	f006 f990 	bl	800f90c <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80095ec:	f8d8 2208 	ldr.w	r2, [r8, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80095f0:	f8d8 3214 	ldr.w	r3, [r8, #532]	; 0x214
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80095f4:	443a      	add	r2, r7
 80095f6:	6820      	ldr	r0, [r4, #0]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80095f8:	441f      	add	r7, r3
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80095fa:	f8c8 2208 	str.w	r2, [r8, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80095fe:	f8c8 7214 	str.w	r7, [r8, #532]	; 0x214
 8009602:	e768      	b.n	80094d6 <HAL_PCD_IRQHandler+0x62>
        HAL_PCD_SuspendCallback(hpcd);
 8009604:	4620      	mov	r0, r4
 8009606:	f015 ffaf 	bl	801f568 <HAL_PCD_SuspendCallback>
 800960a:	e7d0      	b.n	80095ae <HAL_PCD_IRQHandler+0x13a>
      if (hpcd->LPM_State == LPM_L1)
 800960c:	f894 13f4 	ldrb.w	r1, [r4, #1012]	; 0x3f4
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009610:	f8d6 2804 	ldr.w	r2, [r6, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 8009614:	2901      	cmp	r1, #1
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009616:	f022 0201 	bic.w	r2, r2, #1
 800961a:	f8c6 2804 	str.w	r2, [r6, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 800961e:	f000 81dc 	beq.w	80099da <HAL_PCD_IRQHandler+0x566>
        HAL_PCD_ResumeCallback(hpcd);
 8009622:	4620      	mov	r0, r4
 8009624:	f015 ffb8 	bl	801f598 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009628:	6820      	ldr	r0, [r4, #0]
 800962a:	6943      	ldr	r3, [r0, #20]
 800962c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009630:	6143      	str	r3, [r0, #20]
 8009632:	e769      	b.n	8009508 <HAL_PCD_IRQHandler+0x94>
      HAL_PCD_ConnectCallback(hpcd);
 8009634:	4620      	mov	r0, r4
 8009636:	f015 ffbb 	bl	801f5b0 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800963a:	6820      	ldr	r0, [r4, #0]
 800963c:	6943      	ldr	r3, [r0, #20]
 800963e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009642:	6143      	str	r3, [r0, #20]
 8009644:	e7a2      	b.n	800958c <HAL_PCD_IRQHandler+0x118>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009646:	6820      	ldr	r0, [r4, #0]
 8009648:	f006 fa04 	bl	800fa54 <USB_ReadDevAllInEpInterrupt>
 800964c:	f8d4 b000 	ldr.w	fp, [r4]
      while (ep_intr != 0U)
 8009650:	4681      	mov	r9, r0
 8009652:	2800      	cmp	r0, #0
 8009654:	f43f af51 	beq.w	80094fa <HAL_PCD_IRQHandler+0x86>
 8009658:	f506 6310 	add.w	r3, r6, #2304	; 0x900
 800965c:	46a0      	mov	r8, r4
      epnum = 0U;
 800965e:	f04f 0a00 	mov.w	sl, #0
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009662:	9505      	str	r5, [sp, #20]
 8009664:	e9cd 3603 	strd	r3, r6, [sp, #12]
 8009668:	e007      	b.n	800967a <HAL_PCD_IRQHandler+0x206>
      while (ep_intr != 0U)
 800966a:	ea5f 0959 	movs.w	r9, r9, lsr #1
        epnum++;
 800966e:	f10a 0a01 	add.w	sl, sl, #1
 8009672:	f108 081c 	add.w	r8, r8, #28
      while (ep_intr != 0U)
 8009676:	f000 8160 	beq.w	800993a <HAL_PCD_IRQHandler+0x4c6>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800967a:	f019 0f01 	tst.w	r9, #1
 800967e:	d0f4      	beq.n	800966a <HAL_PCD_IRQHandler+0x1f6>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009680:	fa5f f68a 	uxtb.w	r6, sl
 8009684:	4658      	mov	r0, fp
 8009686:	4631      	mov	r1, r6
 8009688:	f006 f9f6 	bl	800fa78 <USB_ReadDevInEPInterrupt>
 800968c:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800968e:	07e8      	lsls	r0, r5, #31
 8009690:	d518      	bpl.n	80096c4 <HAL_PCD_IRQHandler+0x250>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009692:	9b04      	ldr	r3, [sp, #16]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009694:	2701      	movs	r7, #1
 8009696:	f00a 010f 	and.w	r1, sl, #15
 800969a:	9a03      	ldr	r2, [sp, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800969c:	f8d3 0834 	ldr.w	r0, [r3, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80096a0:	fa07 f101 	lsl.w	r1, r7, r1
 80096a4:	eb02 124a 	add.w	r2, r2, sl, lsl #5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80096a8:	ea20 0001 	bic.w	r0, r0, r1
            if (hpcd->Init.dma_enable == 1U)
 80096ac:	6921      	ldr	r1, [r4, #16]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80096ae:	f8c3 0834 	str.w	r0, [r3, #2100]	; 0x834
            if (hpcd->Init.dma_enable == 1U)
 80096b2:	42b9      	cmp	r1, r7
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80096b4:	4613      	mov	r3, r2
 80096b6:	609f      	str	r7, [r3, #8]
            if (hpcd->Init.dma_enable == 1U)
 80096b8:	f000 8196 	beq.w	80099e8 <HAL_PCD_IRQHandler+0x574>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80096bc:	4631      	mov	r1, r6
 80096be:	4620      	mov	r0, r4
 80096c0:	f015 ff2e 	bl	801f520 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80096c4:	0729      	lsls	r1, r5, #28
 80096c6:	d504      	bpl.n	80096d2 <HAL_PCD_IRQHandler+0x25e>
 80096c8:	9b03      	ldr	r3, [sp, #12]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80096ca:	2208      	movs	r2, #8
 80096cc:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 80096d0:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80096d2:	06ea      	lsls	r2, r5, #27
 80096d4:	d504      	bpl.n	80096e0 <HAL_PCD_IRQHandler+0x26c>
 80096d6:	9b03      	ldr	r3, [sp, #12]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80096d8:	2210      	movs	r2, #16
 80096da:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 80096de:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80096e0:	066b      	lsls	r3, r5, #25
 80096e2:	d504      	bpl.n	80096ee <HAL_PCD_IRQHandler+0x27a>
 80096e4:	9b03      	ldr	r3, [sp, #12]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80096e6:	2240      	movs	r2, #64	; 0x40
 80096e8:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 80096ec:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80096ee:	07af      	lsls	r7, r5, #30
 80096f0:	d504      	bpl.n	80096fc <HAL_PCD_IRQHandler+0x288>
 80096f2:	9b03      	ldr	r3, [sp, #12]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80096f4:	2202      	movs	r2, #2
 80096f6:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 80096fa:	609a      	str	r2, [r3, #8]
 80096fc:	6827      	ldr	r7, [r4, #0]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80096fe:	062d      	lsls	r5, r5, #24
 8009700:	46bb      	mov	fp, r7
 8009702:	d5b2      	bpl.n	800966a <HAL_PCD_IRQHandler+0x1f6>
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8009704:	e9d8 2314 	ldrd	r2, r3, [r8, #80]	; 0x50
 8009708:	4293      	cmp	r3, r2
 800970a:	d8ae      	bhi.n	800966a <HAL_PCD_IRQHandler+0x1f6>
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 800970c:	1ad5      	subs	r5, r2, r3

  if (len > ep->maxpacket)
 800970e:	f8d8 0044 	ldr.w	r0, [r8, #68]	; 0x44
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009712:	f507 6110 	add.w	r1, r7, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 8009716:	4285      	cmp	r5, r0
 8009718:	46ac      	mov	ip, r5
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800971a:	eb01 114a 	add.w	r1, r1, sl, lsl #5
  len32b = (len + 3U) / 4U;
 800971e:	bf28      	it	cs
 8009720:	4684      	movcs	ip, r0
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009722:	9106      	str	r1, [sp, #24]
 8009724:	6989      	ldr	r1, [r1, #24]
  len32b = (len + 3U) / 4U;
 8009726:	f10c 0c03 	add.w	ip, ip, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800972a:	b289      	uxth	r1, r1
 800972c:	ebb1 0f9c 	cmp.w	r1, ip, lsr #2
 8009730:	d335      	bcc.n	800979e <HAL_PCD_IRQHandler+0x32a>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009732:	b3a2      	cbz	r2, 800979e <HAL_PCD_IRQHandler+0x32a>
 8009734:	4293      	cmp	r3, r2
 8009736:	d232      	bcs.n	800979e <HAL_PCD_IRQHandler+0x32a>
 8009738:	f8cd a01c 	str.w	sl, [sp, #28]
 800973c:	f8d8 1048 	ldr.w	r1, [r8, #72]	; 0x48
 8009740:	f8dd a018 	ldr.w	sl, [sp, #24]
 8009744:	e00b      	b.n	800975e <HAL_PCD_IRQHandler+0x2ea>
 8009746:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
 800974a:	429a      	cmp	r2, r3
 800974c:	eba2 0503 	sub.w	r5, r2, r3
 8009750:	f240 8182 	bls.w	8009a58 <HAL_PCD_IRQHandler+0x5e4>
 8009754:	2a00      	cmp	r2, #0
 8009756:	f000 817f 	beq.w	8009a58 <HAL_PCD_IRQHandler+0x5e4>
 800975a:	f8d8 0044 	ldr.w	r0, [r8, #68]	; 0x44
 800975e:	4285      	cmp	r5, r0
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009760:	4632      	mov	r2, r6
 8009762:	bf28      	it	cs
 8009764:	4605      	movcs	r5, r0
 8009766:	7c20      	ldrb	r0, [r4, #16]
 8009768:	b2ab      	uxth	r3, r5
 800976a:	9000      	str	r0, [sp, #0]
 800976c:	4638      	mov	r0, r7
 800976e:	f006 f8b7 	bl	800f8e0 <USB_WritePacket>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009772:	f8da 2018 	ldr.w	r2, [sl, #24]
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 8009776:	f8d8 1048 	ldr.w	r1, [r8, #72]	; 0x48
    len32b = (len + 3U) / 4U;
 800977a:	1ce8      	adds	r0, r5, #3
    ep->xfer_count += len;
 800977c:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009780:	b292      	uxth	r2, r2
    ep->xfer_buff  += len;
 8009782:	4429      	add	r1, r5
    ep->xfer_count += len;
 8009784:	442b      	add	r3, r5
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009786:	ebb2 0f90 	cmp.w	r2, r0, lsr #2
    ep->xfer_buff  += len;
 800978a:	f8c8 1048 	str.w	r1, [r8, #72]	; 0x48
    ep->xfer_count += len;
 800978e:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009792:	d2d8      	bcs.n	8009746 <HAL_PCD_IRQHandler+0x2d2>
 8009794:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009798:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
 800979c:	6827      	ldr	r7, [r4, #0]
  }

  if (ep->xfer_len <= ep->xfer_count)
 800979e:	4293      	cmp	r3, r2
 80097a0:	f0c0 815e 	bcc.w	8009a60 <HAL_PCD_IRQHandler+0x5ec>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80097a4:	f50b 6100 	add.w	r1, fp, #2048	; 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80097a8:	f00a 020f 	and.w	r2, sl, #15
 80097ac:	2001      	movs	r0, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80097ae:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80097b0:	46bb      	mov	fp, r7
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80097b2:	fa00 f202 	lsl.w	r2, r0, r2
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80097b6:	ea23 0302 	bic.w	r3, r3, r2
 80097ba:	634b      	str	r3, [r1, #52]	; 0x34
 80097bc:	e755      	b.n	800966a <HAL_PCD_IRQHandler+0x1f6>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80097be:	f006 f941 	bl	800fa44 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 80097c2:	4607      	mov	r7, r0
 80097c4:	6820      	ldr	r0, [r4, #0]
 80097c6:	2f00      	cmp	r7, #0
 80097c8:	f43f ae90 	beq.w	80094ec <HAL_PCD_IRQHandler+0x78>
      epnum = 0U;
 80097cc:	f04f 0800 	mov.w	r8, #0
 80097d0:	f506 6a30 	add.w	sl, r6, #2816	; 0xb00
 80097d4:	e004      	b.n	80097e0 <HAL_PCD_IRQHandler+0x36c>
      while (ep_intr != 0U)
 80097d6:	087f      	lsrs	r7, r7, #1
        epnum++;
 80097d8:	f108 0801 	add.w	r8, r8, #1
      while (ep_intr != 0U)
 80097dc:	f43f ae86 	beq.w	80094ec <HAL_PCD_IRQHandler+0x78>
        if ((ep_intr & 0x1U) != 0U)
 80097e0:	07f9      	lsls	r1, r7, #31
 80097e2:	d5f8      	bpl.n	80097d6 <HAL_PCD_IRQHandler+0x362>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80097e4:	fa5f fb88 	uxtb.w	fp, r8
 80097e8:	4659      	mov	r1, fp
 80097ea:	f006 f93b 	bl	800fa64 <USB_ReadDevOutEPInterrupt>
 80097ee:	4681      	mov	r9, r0
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80097f0:	6820      	ldr	r0, [r4, #0]
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80097f2:	f019 0f01 	tst.w	r9, #1
 80097f6:	f040 80a3 	bne.w	8009940 <HAL_PCD_IRQHandler+0x4cc>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80097fa:	f019 0f08 	tst.w	r9, #8
 80097fe:	f040 80c4 	bne.w	800998a <HAL_PCD_IRQHandler+0x516>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8009802:	f019 0f10 	tst.w	r9, #16
 8009806:	d003      	beq.n	8009810 <HAL_PCD_IRQHandler+0x39c>
 8009808:	eb0a 1348 	add.w	r3, sl, r8, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800980c:	2210      	movs	r2, #16
 800980e:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009810:	f019 0f20 	tst.w	r9, #32
 8009814:	d003      	beq.n	800981e <HAL_PCD_IRQHandler+0x3aa>
 8009816:	eb0a 1348 	add.w	r3, sl, r8, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800981a:	2220      	movs	r2, #32
 800981c:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800981e:	f419 5f00 	tst.w	r9, #8192	; 0x2000
 8009822:	d0d8      	beq.n	80097d6 <HAL_PCD_IRQHandler+0x362>
 8009824:	eb0a 1348 	add.w	r3, sl, r8, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009828:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800982c:	609a      	str	r2, [r3, #8]
 800982e:	e7d2      	b.n	80097d6 <HAL_PCD_IRQHandler+0x362>
      HAL_PCD_SOFCallback(hpcd);
 8009830:	4620      	mov	r0, r4
 8009832:	f015 fe7f 	bl	801f534 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009836:	6820      	ldr	r0, [r4, #0]
 8009838:	6943      	ldr	r3, [r0, #20]
 800983a:	f003 0308 	and.w	r3, r3, #8
 800983e:	6143      	str	r3, [r0, #20]
 8009840:	e693      	b.n	800956a <HAL_PCD_IRQHandler+0xf6>
      (void)USB_ActivateSetup(hpcd->Instance);
 8009842:	f006 f931 	bl	800faa8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009846:	6820      	ldr	r0, [r4, #0]
 8009848:	f005 fe00 	bl	800f44c <USB_GetDevSpeed>
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800984c:	6825      	ldr	r5, [r4, #0]
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800984e:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009850:	f000 ff1a 	bl	800a688 <HAL_RCC_GetHCLKFreq>
 8009854:	7b22      	ldrb	r2, [r4, #12]
 8009856:	4601      	mov	r1, r0
 8009858:	4628      	mov	r0, r5
 800985a:	f005 fc6f 	bl	800f13c <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 800985e:	4620      	mov	r0, r4
 8009860:	f015 fe6c 	bl	801f53c <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009864:	6820      	ldr	r0, [r4, #0]
 8009866:	6943      	ldr	r3, [r0, #20]
 8009868:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800986c:	6143      	str	r3, [r0, #20]
 800986e:	e676      	b.n	800955e <HAL_PCD_IRQHandler+0xea>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009870:	f506 6700 	add.w	r7, r6, #2048	; 0x800
 8009874:	687b      	ldr	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009876:	6820      	ldr	r0, [r4, #0]
 8009878:	2110      	movs	r1, #16
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800987a:	f023 0301 	bic.w	r3, r3, #1
 800987e:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009880:	f005 fdd2 	bl	800f428 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009884:	6860      	ldr	r0, [r4, #4]
 8009886:	b308      	cbz	r0, 80098cc <HAL_PCD_IRQHandler+0x458>
 8009888:	f506 6310 	add.w	r3, r6, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800988c:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 8009890:	6099      	str	r1, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009892:	3501      	adds	r5, #1
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009894:	681a      	ldr	r2, [r3, #0]
 8009896:	3320      	adds	r3, #32
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009898:	4285      	cmp	r5, r0
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800989a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800989e:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80098a2:	f853 2c20 	ldr.w	r2, [r3, #-32]
 80098a6:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80098aa:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80098ae:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80098b2:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 80098b6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80098ba:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80098be:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 80098c2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80098c6:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80098ca:	d1e1      	bne.n	8009890 <HAL_PCD_IRQHandler+0x41c>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80098cc:	69fb      	ldr	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80098ce:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80098d0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80098d4:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80098d6:	2a00      	cmp	r2, #0
 80098d8:	d075      	beq.n	80099c6 <HAL_PCD_IRQHandler+0x552>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80098da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80098de:	f043 030b 	orr.w	r3, r3, #11
 80098e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80098e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098e8:	f043 030b 	orr.w	r3, r3, #11
 80098ec:	647b      	str	r3, [r7, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80098ee:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80098f2:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80098f6:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80098f8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80098fc:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80098fe:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009902:	f006 f8e7 	bl	800fad4 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009906:	6820      	ldr	r0, [r4, #0]
 8009908:	6943      	ldr	r3, [r0, #20]
 800990a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800990e:	6143      	str	r3, [r0, #20]
 8009910:	e61e      	b.n	8009550 <HAL_PCD_IRQHandler+0xdc>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009912:	4620      	mov	r0, r4
 8009914:	2100      	movs	r1, #0
 8009916:	f015 fe43 	bl	801f5a0 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800991a:	6820      	ldr	r0, [r4, #0]
 800991c:	6943      	ldr	r3, [r0, #20]
 800991e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009922:	6143      	str	r3, [r0, #20]
 8009924:	e62d      	b.n	8009582 <HAL_PCD_IRQHandler+0x10e>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009926:	4620      	mov	r0, r4
 8009928:	2100      	movs	r1, #0
 800992a:	f015 fe3d 	bl	801f5a8 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800992e:	6820      	ldr	r0, [r4, #0]
 8009930:	6943      	ldr	r3, [r0, #20]
 8009932:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009936:	6143      	str	r3, [r0, #20]
 8009938:	e61d      	b.n	8009576 <HAL_PCD_IRQHandler+0x102>
 800993a:	e9dd 6504 	ldrd	r6, r5, [sp, #16]
 800993e:	e5dc      	b.n	80094fa <HAL_PCD_IRQHandler+0x86>
 8009940:	ea4f 1348 	mov.w	r3, r8, lsl #5
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if (hpcd->Init.dma_enable == 1U)
 8009944:	6922      	ldr	r2, [r4, #16]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009946:	f500 6e30 	add.w	lr, r0, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800994a:	f04f 0c01 	mov.w	ip, #1
 800994e:	eb0a 0103 	add.w	r1, sl, r3
  if (hpcd->Init.dma_enable == 1U)
 8009952:	2a01      	cmp	r2, #1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009954:	4473      	add	r3, lr
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009956:	f8c1 c008 	str.w	ip, [r1, #8]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800995a:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800995e:	6899      	ldr	r1, [r3, #8]
  if (hpcd->Init.dma_enable == 1U)
 8009960:	d05a      	beq.n	8009a18 <HAL_PCD_IRQHandler+0x5a4>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009962:	4a5e      	ldr	r2, [pc, #376]	; (8009adc <HAL_PCD_IRQHandler+0x668>)
 8009964:	4594      	cmp	ip, r2
 8009966:	d07d      	beq.n	8009a64 <HAL_PCD_IRQHandler+0x5f0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009968:	f1b8 0f00 	cmp.w	r8, #0
 800996c:	d107      	bne.n	800997e <HAL_PCD_IRQHandler+0x50a>
 800996e:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8009972:	b923      	cbnz	r3, 800997e <HAL_PCD_IRQHandler+0x50a>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009974:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8009978:	4641      	mov	r1, r8
 800997a:	f006 f8ab 	bl	800fad4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800997e:	4620      	mov	r0, r4
 8009980:	4659      	mov	r1, fp
 8009982:	f015 fdc3 	bl	801f50c <HAL_PCD_DataOutStageCallback>
 8009986:	6820      	ldr	r0, [r4, #0]
 8009988:	e737      	b.n	80097fa <HAL_PCD_IRQHandler+0x386>
 800998a:	ea4f 1348 	mov.w	r3, r8, lsl #5
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800998e:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009992:	f04f 0c08 	mov.w	ip, #8
 8009996:	eb0a 0103 	add.w	r1, sl, r3
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800999a:	4413      	add	r3, r2
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800999c:	f8c1 c008 	str.w	ip, [r1, #8]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80099a0:	6c02      	ldr	r2, [r0, #64]	; 0x40

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80099a2:	484f      	ldr	r0, [pc, #316]	; (8009ae0 <HAL_PCD_IRQHandler+0x66c>)
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80099a4:	6899      	ldr	r1, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80099a6:	4282      	cmp	r2, r0
 80099a8:	d931      	bls.n	8009a0e <HAL_PCD_IRQHandler+0x59a>
 80099aa:	040a      	lsls	r2, r1, #16
 80099ac:	d502      	bpl.n	80099b4 <HAL_PCD_IRQHandler+0x540>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80099ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80099b2:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80099b4:	4620      	mov	r0, r4
 80099b6:	f015 fda3 	bl	801f500 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80099ba:	6921      	ldr	r1, [r4, #16]
 80099bc:	2901      	cmp	r1, #1
 80099be:	f000 8084 	beq.w	8009aca <HAL_PCD_IRQHandler+0x656>
 80099c2:	6820      	ldr	r0, [r4, #0]
 80099c4:	e71d      	b.n	8009802 <HAL_PCD_IRQHandler+0x38e>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80099c6:	697a      	ldr	r2, [r7, #20]
 80099c8:	f242 032b 	movw	r3, #8235	; 0x202b
 80099cc:	4313      	orrs	r3, r2
 80099ce:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	f043 030b 	orr.w	r3, r3, #11
 80099d6:	613b      	str	r3, [r7, #16]
 80099d8:	e789      	b.n	80098ee <HAL_PCD_IRQHandler+0x47a>
        hpcd->LPM_State = LPM_L0;
 80099da:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80099dc:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 80099de:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80099e2:	f015 feab 	bl	801f73c <HAL_PCDEx_LPM_Callback>
 80099e6:	e61f      	b.n	8009628 <HAL_PCD_IRQHandler+0x1b4>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80099e8:	e9d8 2311 	ldrd	r2, r3, [r8, #68]	; 0x44
 80099ec:	4413      	add	r3, r2
 80099ee:	f8c8 3048 	str.w	r3, [r8, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80099f2:	f1ba 0f00 	cmp.w	sl, #0
 80099f6:	f47f ae61 	bne.w	80096bc <HAL_PCD_IRQHandler+0x248>
 80099fa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	f47f ae5d 	bne.w	80096bc <HAL_PCD_IRQHandler+0x248>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009a02:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8009a06:	6820      	ldr	r0, [r4, #0]
 8009a08:	f006 f864 	bl	800fad4 <USB_EP0_OutStart>
 8009a0c:	e656      	b.n	80096bc <HAL_PCD_IRQHandler+0x248>
  HAL_PCD_SetupStageCallback(hpcd);
 8009a0e:	4620      	mov	r0, r4
 8009a10:	f015 fd76 	bl	801f500 <HAL_PCD_SetupStageCallback>
 8009a14:	6820      	ldr	r0, [r4, #0]
 8009a16:	e6f4      	b.n	8009802 <HAL_PCD_IRQHandler+0x38e>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009a18:	070a      	lsls	r2, r1, #28
 8009a1a:	d52a      	bpl.n	8009a72 <HAL_PCD_IRQHandler+0x5fe>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009a1c:	4a30      	ldr	r2, [pc, #192]	; (8009ae0 <HAL_PCD_IRQHandler+0x66c>)
 8009a1e:	4594      	cmp	ip, r2
 8009a20:	f67f aeeb 	bls.w	80097fa <HAL_PCD_IRQHandler+0x386>
 8009a24:	0409      	lsls	r1, r1, #16
 8009a26:	f57f aee8 	bpl.w	80097fa <HAL_PCD_IRQHandler+0x386>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009a2a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8009a2e:	609a      	str	r2, [r3, #8]
 8009a30:	e6e3      	b.n	80097fa <HAL_PCD_IRQHandler+0x386>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009a32:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009a36:	2208      	movs	r2, #8
 8009a38:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8009a3c:	4630      	mov	r0, r6
 8009a3e:	f005 ff65 	bl	800f90c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009a42:	f3c7 130a 	ubfx	r3, r7, #4, #11
 8009a46:	eb04 0288 	add.w	r2, r4, r8, lsl #2
 8009a4a:	6820      	ldr	r0, [r4, #0]
 8009a4c:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 8009a50:	440b      	add	r3, r1
 8009a52:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 8009a56:	e53e      	b.n	80094d6 <HAL_PCD_IRQHandler+0x62>
 8009a58:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009a5c:	6827      	ldr	r7, [r4, #0]
 8009a5e:	e69e      	b.n	800979e <HAL_PCD_IRQHandler+0x32a>
 8009a60:	46bb      	mov	fp, r7
 8009a62:	e602      	b.n	800966a <HAL_PCD_IRQHandler+0x1f6>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009a64:	040a      	lsls	r2, r1, #16
 8009a66:	d4e0      	bmi.n	8009a2a <HAL_PCD_IRQHandler+0x5b6>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009a68:	0689      	lsls	r1, r1, #26
 8009a6a:	d588      	bpl.n	800997e <HAL_PCD_IRQHandler+0x50a>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009a6c:	2220      	movs	r2, #32
 8009a6e:	609a      	str	r2, [r3, #8]
 8009a70:	e785      	b.n	800997e <HAL_PCD_IRQHandler+0x50a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009a72:	068a      	lsls	r2, r1, #26
 8009a74:	d42f      	bmi.n	8009ad6 <HAL_PCD_IRQHandler+0x662>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009a76:	f011 0f28 	tst.w	r1, #40	; 0x28
 8009a7a:	f47f aebe 	bne.w	80097fa <HAL_PCD_IRQHandler+0x386>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009a7e:	4a18      	ldr	r2, [pc, #96]	; (8009ae0 <HAL_PCD_IRQHandler+0x66c>)
 8009a80:	4594      	cmp	ip, r2
 8009a82:	d901      	bls.n	8009a88 <HAL_PCD_IRQHandler+0x614>
 8009a84:	0409      	lsls	r1, r1, #16
 8009a86:	d4d0      	bmi.n	8009a2a <HAL_PCD_IRQHandler+0x5b6>
 8009a88:	ebc8 02c8 	rsb	r2, r8, r8, lsl #3
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009a8c:	6919      	ldr	r1, [r3, #16]
 8009a8e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009a92:	f3c1 0112 	ubfx	r1, r1, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8009a96:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009a9a:	eba2 0c01 	sub.w	ip, r2, r1
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8009a9e:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8009aa2:	440a      	add	r2, r1
        hpcd->OUT_ep[epnum].xfer_count =
 8009aa4:	f8c3 c214 	str.w	ip, [r3, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8009aa8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009aac:	f1b8 0f00 	cmp.w	r8, #0
 8009ab0:	f47f af65 	bne.w	800997e <HAL_PCD_IRQHandler+0x50a>
 8009ab4:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	f47f af60 	bne.w	800997e <HAL_PCD_IRQHandler+0x50a>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009abe:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8009ac2:	2101      	movs	r1, #1
 8009ac4:	f006 f806 	bl	800fad4 <USB_EP0_OutStart>
 8009ac8:	e759      	b.n	800997e <HAL_PCD_IRQHandler+0x50a>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009aca:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8009ace:	6820      	ldr	r0, [r4, #0]
 8009ad0:	f006 f800 	bl	800fad4 <USB_EP0_OutStart>
 8009ad4:	e775      	b.n	80099c2 <HAL_PCD_IRQHandler+0x54e>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009ad6:	2220      	movs	r2, #32
 8009ad8:	609a      	str	r2, [r3, #8]
 8009ada:	e68e      	b.n	80097fa <HAL_PCD_IRQHandler+0x386>
 8009adc:	4f54310a 	.word	0x4f54310a
 8009ae0:	4f54300a 	.word	0x4f54300a

08009ae4 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8009ae4:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8009ae8:	2a01      	cmp	r2, #1
 8009aea:	d00d      	beq.n	8009b08 <HAL_PCD_SetAddress+0x24>
 8009aec:	2201      	movs	r2, #1
{
 8009aee:	b510      	push	{r4, lr}
 8009af0:	4604      	mov	r4, r0
  hpcd->USB_Address = address;
 8009af2:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009af6:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8009af8:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009afc:	f005 ff74 	bl	800f9e8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009b00:	2000      	movs	r0, #0
 8009b02:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8009b06:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8009b08:	2002      	movs	r0, #2
}
 8009b0a:	4770      	bx	lr

08009b0c <HAL_PCD_EP_Open>:
{
 8009b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b0e:	f001 040f 	and.w	r4, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8009b12:	0609      	lsls	r1, r1, #24
 8009b14:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8009b18:	ea4f 0585 	mov.w	r5, r5, lsl #2
 8009b1c:	d422      	bmi.n	8009b64 <HAL_PCD_EP_Open+0x58>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009b1e:	f505 71fe 	add.w	r1, r5, #508	; 0x1fc
    ep->is_in = 0U;
 8009b22:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8009b26:	2600      	movs	r6, #0
 8009b28:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009b2c:	4401      	add	r1, r0
    ep->is_in = 0U;
 8009b2e:	f885 61fd 	strb.w	r6, [r5, #509]	; 0x1fd
  if (ep->is_in != 0U)
 8009b32:	784d      	ldrb	r5, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009b34:	700c      	strb	r4, [r1, #0]
  ep->maxpacket = ep_mps;
 8009b36:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 8009b38:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8009b3a:	b105      	cbz	r5, 8009b3e <HAL_PCD_EP_Open+0x32>
    ep->tx_fifo_num = ep->num;
 8009b3c:	80cc      	strh	r4, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 8009b3e:	2b02      	cmp	r3, #2
 8009b40:	d101      	bne.n	8009b46 <HAL_PCD_EP_Open+0x3a>
    ep->data_pid_start = 0U;
 8009b42:	2300      	movs	r3, #0
 8009b44:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8009b46:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8009b4a:	2b01      	cmp	r3, #1
 8009b4c:	d015      	beq.n	8009b7a <HAL_PCD_EP_Open+0x6e>
 8009b4e:	4604      	mov	r4, r0
 8009b50:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009b52:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8009b54:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009b58:	f005 fc84 	bl	800f464 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009b5c:	2000      	movs	r0, #0
 8009b5e:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8009b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep->is_in = 1U;
 8009b64:	ebc4 06c4 	rsb	r6, r4, r4, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009b68:	f105 013c 	add.w	r1, r5, #60	; 0x3c
    ep->is_in = 1U;
 8009b6c:	2701      	movs	r7, #1
 8009b6e:	eb00 0586 	add.w	r5, r0, r6, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009b72:	4401      	add	r1, r0
    ep->is_in = 1U;
 8009b74:	f885 703d 	strb.w	r7, [r5, #61]	; 0x3d
 8009b78:	e7db      	b.n	8009b32 <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 8009b7a:	2002      	movs	r0, #2
}
 8009b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b7e:	bf00      	nop

08009b80 <HAL_PCD_EP_Close>:
{
 8009b80:	f001 020f 	and.w	r2, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8009b84:	0609      	lsls	r1, r1, #24
{
 8009b86:	b538      	push	{r3, r4, r5, lr}
 8009b88:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 8009b8c:	ea4f 0383 	mov.w	r3, r3, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 8009b90:	d419      	bmi.n	8009bc6 <HAL_PCD_EP_Close+0x46>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009b92:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8009b96:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 8009b9a:	2400      	movs	r4, #0
 8009b9c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009ba0:	4401      	add	r1, r0
    ep->is_in = 0U;
 8009ba2:	f883 41fd 	strb.w	r4, [r3, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 8009ba6:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8009ba8:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	d019      	beq.n	8009be4 <HAL_PCD_EP_Close+0x64>
 8009bb0:	4604      	mov	r4, r0
 8009bb2:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009bb4:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8009bb6:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009bba:	f005 fc95 	bl	800f4e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009bbe:	2000      	movs	r0, #0
 8009bc0:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8009bc4:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009bc6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    ep->is_in = 1U;
 8009bca:	ebc2 04c2 	rsb	r4, r2, r2, lsl #3
 8009bce:	2501      	movs	r5, #1
 8009bd0:	eb00 0384 	add.w	r3, r0, r4, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009bd4:	4401      	add	r1, r0
    ep->is_in = 1U;
 8009bd6:	f883 503d 	strb.w	r5, [r3, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 8009bda:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8009bdc:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	d1e5      	bne.n	8009bb0 <HAL_PCD_EP_Close+0x30>
 8009be4:	2002      	movs	r0, #2
}
 8009be6:	bd38      	pop	{r3, r4, r5, pc}

08009be8 <HAL_PCD_EP_Receive>:
{
 8009be8:	b570      	push	{r4, r5, r6, lr}
 8009bea:	f001 050f 	and.w	r5, r1, #15
  ep->xfer_count = 0U;
 8009bee:	2600      	movs	r6, #0
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009bf0:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 8009bf2:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009bf6:	fb01 0105 	mla	r1, r1, r5, r0
  ep->xfer_buff = pBuf;
 8009bfa:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009bfe:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_buff = pBuf;
 8009c02:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_len = len;
 8009c06:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->num = ep_addr & EP_ADDR_MSK;
 8009c0a:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  ep->xfer_count = 0U;
 8009c0e:	f8c4 6214 	str.w	r6, [r4, #532]	; 0x214
  ep->is_in = 0U;
 8009c12:	f884 61fd 	strb.w	r6, [r4, #509]	; 0x1fd
  if (hpcd->Init.dma_enable == 1U)
 8009c16:	6903      	ldr	r3, [r0, #16]
 8009c18:	6800      	ldr	r0, [r0, #0]
 8009c1a:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8009c1c:	bf08      	it	eq
 8009c1e:	f8c4 220c 	streq.w	r2, [r4, #524]	; 0x20c
 8009c22:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009c24:	b11d      	cbz	r5, 8009c2e <HAL_PCD_EP_Receive+0x46>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009c26:	f005 fcbf 	bl	800f5a8 <USB_EPStartXfer>
}
 8009c2a:	2000      	movs	r0, #0
 8009c2c:	bd70      	pop	{r4, r5, r6, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009c2e:	f005 fdcf 	bl	800f7d0 <USB_EP0StartXfer>
}
 8009c32:	2000      	movs	r0, #0
 8009c34:	bd70      	pop	{r4, r5, r6, pc}
 8009c36:	bf00      	nop

08009c38 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009c38:	f001 010f 	and.w	r1, r1, #15
 8009c3c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8009c40:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 8009c44:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 8009c48:	4770      	bx	lr
 8009c4a:	bf00      	nop

08009c4c <HAL_PCD_EP_Transmit>:
{
 8009c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c4e:	f001 050f 	and.w	r5, r1, #15
  ep->is_in = 1U;
 8009c52:	2601      	movs	r6, #1
  ep->xfer_count = 0U;
 8009c54:	2700      	movs	r7, #0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009c56:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 8009c58:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009c5c:	fb01 0105 	mla	r1, r1, r5, r0
  ep->xfer_buff = pBuf;
 8009c60:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009c64:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_buff = pBuf;
 8009c66:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->xfer_len = len;
 8009c68:	6523      	str	r3, [r4, #80]	; 0x50
  ep->num = ep_addr & EP_ADDR_MSK;
 8009c6a:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 8009c6e:	6567      	str	r7, [r4, #84]	; 0x54
  ep->is_in = 1U;
 8009c70:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 8009c74:	6903      	ldr	r3, [r0, #16]
 8009c76:	6800      	ldr	r0, [r0, #0]
 8009c78:	42b3      	cmp	r3, r6
    ep->dma_addr = (uint32_t)pBuf;
 8009c7a:	bf08      	it	eq
 8009c7c:	64e2      	streq	r2, [r4, #76]	; 0x4c
 8009c7e:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009c80:	b11d      	cbz	r5, 8009c8a <HAL_PCD_EP_Transmit+0x3e>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009c82:	f005 fc91 	bl	800f5a8 <USB_EPStartXfer>
}
 8009c86:	2000      	movs	r0, #0
 8009c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009c8a:	f005 fda1 	bl	800f7d0 <USB_EP0StartXfer>
}
 8009c8e:	2000      	movs	r0, #0
 8009c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c92:	bf00      	nop

08009c94 <HAL_PCD_EP_SetStall>:
{
 8009c94:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009c96:	6843      	ldr	r3, [r0, #4]
 8009c98:	f001 050f 	and.w	r5, r1, #15
 8009c9c:	429d      	cmp	r5, r3
 8009c9e:	d81f      	bhi.n	8009ce0 <HAL_PCD_EP_SetStall+0x4c>
  if ((0x80U & ep_addr) == 0x80U)
 8009ca0:	060b      	lsls	r3, r1, #24
 8009ca2:	d41f      	bmi.n	8009ce4 <HAL_PCD_EP_SetStall+0x50>
    ep->is_in = 0U;
 8009ca4:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 8009ca8:	241c      	movs	r4, #28
    ep->is_in = 0U;
 8009caa:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8009cac:	fb04 0101 	mla	r1, r4, r1, r0
    ep->is_in = 0U;
 8009cb0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->OUT_ep[ep_addr];
 8009cb4:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8009cb8:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 8009cbc:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8009cbe:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8009cc0:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8009cc2:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d01e      	beq.n	8009d08 <HAL_PCD_EP_SetStall+0x74>
 8009cca:	4604      	mov	r4, r0
 8009ccc:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009cd0:	6800      	ldr	r0, [r0, #0]
 8009cd2:	f005 fe2d 	bl	800f930 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009cd6:	b1cd      	cbz	r5, 8009d0c <HAL_PCD_EP_SetStall+0x78>
  __HAL_UNLOCK(hpcd);
 8009cd8:	2000      	movs	r0, #0
 8009cda:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8009cde:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8009ce0:	2001      	movs	r0, #1
}
 8009ce2:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009ce4:	211c      	movs	r1, #28
    ep->is_in = 1U;
 8009ce6:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 8009cea:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009cec:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 8009cf0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009cf4:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8009cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  ep->is_stall = 1U;
 8009cfa:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8009cfc:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8009cfe:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8009d00:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8009d04:	429a      	cmp	r2, r3
 8009d06:	d1e0      	bne.n	8009cca <HAL_PCD_EP_SetStall+0x36>
 8009d08:	2002      	movs	r0, #2
}
 8009d0a:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009d0c:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8009d10:	7c21      	ldrb	r1, [r4, #16]
 8009d12:	6820      	ldr	r0, [r4, #0]
 8009d14:	f005 fede 	bl	800fad4 <USB_EP0_OutStart>
 8009d18:	e7de      	b.n	8009cd8 <HAL_PCD_EP_SetStall+0x44>
 8009d1a:	bf00      	nop

08009d1c <HAL_PCD_EP_ClrStall>:
{
 8009d1c:	b538      	push	{r3, r4, r5, lr}
 8009d1e:	f001 020f 	and.w	r2, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009d22:	6843      	ldr	r3, [r0, #4]
 8009d24:	429a      	cmp	r2, r3
 8009d26:	d821      	bhi.n	8009d6c <HAL_PCD_EP_ClrStall+0x50>
 8009d28:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 8009d2c:	0609      	lsls	r1, r1, #24
 8009d2e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8009d32:	d41d      	bmi.n	8009d70 <HAL_PCD_EP_ClrStall+0x54>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009d34:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8009d38:	ebc2 04c2 	rsb	r4, r2, r2, lsl #3
 8009d3c:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009d3e:	18c1      	adds	r1, r0, r3
    ep->is_in = 0U;
 8009d40:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 8009d44:	f883 51fd 	strb.w	r5, [r3, #509]	; 0x1fd
  ep->is_stall = 0U;
 8009d48:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8009d4a:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 8009d4c:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8009d4e:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8009d52:	2b01      	cmp	r3, #1
 8009d54:	d01c      	beq.n	8009d90 <HAL_PCD_EP_ClrStall+0x74>
 8009d56:	4604      	mov	r4, r0
 8009d58:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009d5a:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8009d5c:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009d60:	f005 fe16 	bl	800f990 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009d64:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
  return HAL_OK;
 8009d68:	4628      	mov	r0, r5
}
 8009d6a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8009d6c:	2001      	movs	r0, #1
}
 8009d6e:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 8009d70:	ebc2 04c2 	rsb	r4, r2, r2, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009d74:	333c      	adds	r3, #60	; 0x3c
    ep->is_in = 1U;
 8009d76:	2501      	movs	r5, #1
 8009d78:	eb00 0484 	add.w	r4, r0, r4, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009d7c:	18c1      	adds	r1, r0, r3
    ep->is_in = 1U;
 8009d7e:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  ep->is_stall = 0U;
 8009d82:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8009d84:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 8009d86:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8009d88:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d1e2      	bne.n	8009d56 <HAL_PCD_EP_ClrStall+0x3a>
 8009d90:	2002      	movs	r0, #2
}
 8009d92:	bd38      	pop	{r3, r4, r5, pc}

08009d94 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009d94:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009d96:	6805      	ldr	r5, [r0, #0]
 8009d98:	0412      	lsls	r2, r2, #16
 8009d9a:	6a6c      	ldr	r4, [r5, #36]	; 0x24

  if (fifo == 0U)
 8009d9c:	b1c1      	cbz	r1, 8009dd0 <HAL_PCDEx_SetTxFiFo+0x3c>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009d9e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8009da0:	3901      	subs	r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009da2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8009da6:	d00b      	beq.n	8009dc0 <HAL_PCDEx_SetTxFiFo+0x2c>
 8009da8:	2300      	movs	r3, #0
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009daa:	f103 0040 	add.w	r0, r3, #64	; 0x40
    for (i = 0U; i < (fifo - 1U); i++)
 8009dae:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009db0:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 8009db4:	b2db      	uxtb	r3, r3
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009db6:	6840      	ldr	r0, [r0, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 8009db8:	428b      	cmp	r3, r1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009dba:	eb04 4410 	add.w	r4, r4, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8009dbe:	d3f4      	bcc.n	8009daa <HAL_PCDEx_SetTxFiFo+0x16>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009dc0:	3140      	adds	r1, #64	; 0x40
 8009dc2:	4314      	orrs	r4, r2
  }

  return HAL_OK;
}
 8009dc4:	2000      	movs	r0, #0
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009dc6:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8009dca:	604c      	str	r4, [r1, #4]
}
 8009dcc:	bc30      	pop	{r4, r5}
 8009dce:	4770      	bx	lr
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009dd0:	4314      	orrs	r4, r2
}
 8009dd2:	2000      	movs	r0, #0
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009dd4:	62ac      	str	r4, [r5, #40]	; 0x28
}
 8009dd6:	bc30      	pop	{r4, r5}
 8009dd8:	4770      	bx	lr
 8009dda:	bf00      	nop

08009ddc <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8009ddc:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 8009dde:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8009de0:	6259      	str	r1, [r3, #36]	; 0x24
}
 8009de2:	4770      	bx	lr

08009de4 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009de4:	6803      	ldr	r3, [r0, #0]

  hpcd->lpm_active = 1U;
 8009de6:	2101      	movs	r1, #1
  hpcd->LPM_State = LPM_L0;
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009de8:	4a08      	ldr	r2, [pc, #32]	; (8009e0c <HAL_PCDEx_ActivateLPM+0x28>)
{
 8009dea:	b430      	push	{r4, r5}
  hpcd->lpm_active = 1U;
 8009dec:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
{
 8009df0:	4604      	mov	r4, r0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009df2:	6999      	ldr	r1, [r3, #24]
  hpcd->LPM_State = LPM_L0;
 8009df4:	2500      	movs	r5, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009df6:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
  hpcd->LPM_State = LPM_L0;
 8009dfa:	f884 53f4 	strb.w	r5, [r4, #1012]	; 0x3f4

  return HAL_OK;
}
 8009dfe:	4628      	mov	r0, r5
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009e00:	6199      	str	r1, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009e02:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009e04:	430a      	orrs	r2, r1
}
 8009e06:	bc30      	pop	{r4, r5}
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009e08:	655a      	str	r2, [r3, #84]	; 0x54
}
 8009e0a:	4770      	bx	lr
 8009e0c:	10000003 	.word	0x10000003

08009e10 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009e10:	4a02      	ldr	r2, [pc, #8]	; (8009e1c <HAL_PWR_EnableBkUpAccess+0xc>)
 8009e12:	6813      	ldr	r3, [r2, #0]
 8009e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e18:	6013      	str	r3, [r2, #0]
}
 8009e1a:	4770      	bx	lr
 8009e1c:	40007000 	.word	0x40007000

08009e20 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8009e20:	4a1b      	ldr	r2, [pc, #108]	; (8009e90 <HAL_PWREx_EnableOverDrive+0x70>)
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009e22:	4b1c      	ldr	r3, [pc, #112]	; (8009e94 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8009e24:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8009e26:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
{
 8009e2a:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8009e2c:	6411      	str	r1, [r2, #64]	; 0x40
{
 8009e2e:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 8009e30:	6c12      	ldr	r2, [r2, #64]	; 0x40

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009e32:	461c      	mov	r4, r3
  __HAL_RCC_PWR_CLK_ENABLE();
 8009e34:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8009e38:	9201      	str	r2, [sp, #4]
 8009e3a:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009e3c:	681a      	ldr	r2, [r3, #0]
 8009e3e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009e42:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8009e44:	f7fb fb94 	bl	8005570 <HAL_GetTick>
 8009e48:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009e4a:	e005      	b.n	8009e58 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009e4c:	f7fb fb90 	bl	8005570 <HAL_GetTick>
 8009e50:	1b40      	subs	r0, r0, r5
 8009e52:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8009e56:	d817      	bhi.n	8009e88 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009e58:	6863      	ldr	r3, [r4, #4]
 8009e5a:	03da      	lsls	r2, r3, #15
 8009e5c:	d5f6      	bpl.n	8009e4c <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009e5e:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009e60:	4d0c      	ldr	r5, [pc, #48]	; (8009e94 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009e62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e66:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8009e68:	f7fb fb82 	bl	8005570 <HAL_GetTick>
 8009e6c:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009e6e:	e005      	b.n	8009e7c <HAL_PWREx_EnableOverDrive+0x5c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009e70:	f7fb fb7e 	bl	8005570 <HAL_GetTick>
 8009e74:	1b00      	subs	r0, r0, r4
 8009e76:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8009e7a:	d805      	bhi.n	8009e88 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009e7c:	686b      	ldr	r3, [r5, #4]
 8009e7e:	039b      	lsls	r3, r3, #14
 8009e80:	d5f6      	bpl.n	8009e70 <HAL_PWREx_EnableOverDrive+0x50>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8009e82:	2000      	movs	r0, #0
}
 8009e84:	b003      	add	sp, #12
 8009e86:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 8009e88:	2003      	movs	r0, #3
}
 8009e8a:	b003      	add	sp, #12
 8009e8c:	bd30      	pop	{r4, r5, pc}
 8009e8e:	bf00      	nop
 8009e90:	40023800 	.word	0x40023800
 8009e94:	40007000 	.word	0x40007000

08009e98 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009e98:	2800      	cmp	r0, #0
 8009e9a:	f000 81f0 	beq.w	800a27e <HAL_RCC_OscConfig+0x3e6>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8009e9e:	6803      	ldr	r3, [r0, #0]
 8009ea0:	2b0f      	cmp	r3, #15
{
 8009ea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ea6:	4604      	mov	r4, r0
 8009ea8:	b082      	sub	sp, #8
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8009eaa:	f200 80be 	bhi.w	800a02a <HAL_RCC_OscConfig+0x192>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009eae:	07dd      	lsls	r5, r3, #31
 8009eb0:	d534      	bpl.n	8009f1c <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8009eb2:	6863      	ldr	r3, [r4, #4]
 8009eb4:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 8009eb8:	d003      	beq.n	8009ec2 <HAL_RCC_OscConfig+0x2a>
 8009eba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009ebe:	f040 817f 	bne.w	800a1c0 <HAL_RCC_OscConfig+0x328>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009ec2:	4ab3      	ldr	r2, [pc, #716]	; (800a190 <HAL_RCC_OscConfig+0x2f8>)
 8009ec4:	6893      	ldr	r3, [r2, #8]
 8009ec6:	f003 030c 	and.w	r3, r3, #12
 8009eca:	2b04      	cmp	r3, #4
 8009ecc:	d01d      	beq.n	8009f0a <HAL_RCC_OscConfig+0x72>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009ece:	6893      	ldr	r3, [r2, #8]
 8009ed0:	f003 030c 	and.w	r3, r3, #12
 8009ed4:	2b08      	cmp	r3, #8
 8009ed6:	d015      	beq.n	8009f04 <HAL_RCC_OscConfig+0x6c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009ed8:	6863      	ldr	r3, [r4, #4]
 8009eda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ede:	f000 817f 	beq.w	800a1e0 <HAL_RCC_OscConfig+0x348>
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	f000 81ae 	beq.w	800a244 <HAL_RCC_OscConfig+0x3ac>
 8009ee8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009eec:	4ba8      	ldr	r3, [pc, #672]	; (800a190 <HAL_RCC_OscConfig+0x2f8>)
 8009eee:	681a      	ldr	r2, [r3, #0]
 8009ef0:	f000 820b 	beq.w	800a30a <HAL_RCC_OscConfig+0x472>
 8009ef4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009ef8:	601a      	str	r2, [r3, #0]
 8009efa:	681a      	ldr	r2, [r3, #0]
 8009efc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009f00:	601a      	str	r2, [r3, #0]
 8009f02:	e172      	b.n	800a1ea <HAL_RCC_OscConfig+0x352>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009f04:	6853      	ldr	r3, [r2, #4]
 8009f06:	0258      	lsls	r0, r3, #9
 8009f08:	d5e6      	bpl.n	8009ed8 <HAL_RCC_OscConfig+0x40>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f0a:	4ba1      	ldr	r3, [pc, #644]	; (800a190 <HAL_RCC_OscConfig+0x2f8>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	0399      	lsls	r1, r3, #14
 8009f10:	d503      	bpl.n	8009f1a <HAL_RCC_OscConfig+0x82>
 8009f12:	6863      	ldr	r3, [r4, #4]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	f000 8126 	beq.w	800a166 <HAL_RCC_OscConfig+0x2ce>
 8009f1a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009f1c:	079f      	lsls	r7, r3, #30
 8009f1e:	d450      	bmi.n	8009fc2 <HAL_RCC_OscConfig+0x12a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009f20:	071a      	lsls	r2, r3, #28
 8009f22:	d51a      	bpl.n	8009f5a <HAL_RCC_OscConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8009f24:	6963      	ldr	r3, [r4, #20]
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	f200 8141 	bhi.w	800a1ae <HAL_RCC_OscConfig+0x316>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	f000 8124 	beq.w	800a17a <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009f32:	4b97      	ldr	r3, [pc, #604]	; (800a190 <HAL_RCC_OscConfig+0x2f8>)
 8009f34:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009f36:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 8009f38:	f042 0201 	orr.w	r2, r2, #1
 8009f3c:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8009f3e:	f7fb fb17 	bl	8005570 <HAL_GetTick>
 8009f42:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009f44:	e005      	b.n	8009f52 <HAL_RCC_OscConfig+0xba>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009f46:	f7fb fb13 	bl	8005570 <HAL_GetTick>
 8009f4a:	1b80      	subs	r0, r0, r6
 8009f4c:	2802      	cmp	r0, #2
 8009f4e:	f200 816b 	bhi.w	800a228 <HAL_RCC_OscConfig+0x390>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009f52:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8009f54:	079b      	lsls	r3, r3, #30
 8009f56:	d5f6      	bpl.n	8009f46 <HAL_RCC_OscConfig+0xae>
 8009f58:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009f5a:	075e      	lsls	r6, r3, #29
 8009f5c:	f140 808b 	bpl.w	800a076 <HAL_RCC_OscConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8009f60:	68a3      	ldr	r3, [r4, #8]
 8009f62:	2b01      	cmp	r3, #1
 8009f64:	d906      	bls.n	8009f74 <HAL_RCC_OscConfig+0xdc>
 8009f66:	2b05      	cmp	r3, #5
 8009f68:	d004      	beq.n	8009f74 <HAL_RCC_OscConfig+0xdc>
 8009f6a:	f44f 7102 	mov.w	r1, #520	; 0x208
 8009f6e:	4889      	ldr	r0, [pc, #548]	; (800a194 <HAL_RCC_OscConfig+0x2fc>)
 8009f70:	f7f8 ff58 	bl	8002e24 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009f74:	4b86      	ldr	r3, [pc, #536]	; (800a190 <HAL_RCC_OscConfig+0x2f8>)
 8009f76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009f78:	00d5      	lsls	r5, r2, #3
 8009f7a:	f100 8182 	bmi.w	800a282 <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8009f7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8009f80:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8009f82:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009f86:	641a      	str	r2, [r3, #64]	; 0x40
 8009f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f8e:	9301      	str	r3, [sp, #4]
 8009f90:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009f92:	4b81      	ldr	r3, [pc, #516]	; (800a198 <HAL_RCC_OscConfig+0x300>)
 8009f94:	681a      	ldr	r2, [r3, #0]
 8009f96:	05d0      	lsls	r0, r2, #23
 8009f98:	f140 8135 	bpl.w	800a206 <HAL_RCC_OscConfig+0x36e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009f9c:	68a3      	ldr	r3, [r4, #8]
 8009f9e:	2b01      	cmp	r3, #1
 8009fa0:	d04d      	beq.n	800a03e <HAL_RCC_OscConfig+0x1a6>
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	f000 816f 	beq.w	800a286 <HAL_RCC_OscConfig+0x3ee>
 8009fa8:	2b05      	cmp	r3, #5
 8009faa:	4b79      	ldr	r3, [pc, #484]	; (800a190 <HAL_RCC_OscConfig+0x2f8>)
 8009fac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009fae:	f000 81b4 	beq.w	800a31a <HAL_RCC_OscConfig+0x482>
 8009fb2:	f022 0201 	bic.w	r2, r2, #1
 8009fb6:	671a      	str	r2, [r3, #112]	; 0x70
 8009fb8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009fba:	f022 0204 	bic.w	r2, r2, #4
 8009fbe:	671a      	str	r2, [r3, #112]	; 0x70
 8009fc0:	e042      	b.n	800a048 <HAL_RCC_OscConfig+0x1b0>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8009fc2:	68e3      	ldr	r3, [r4, #12]
 8009fc4:	2b01      	cmp	r3, #1
 8009fc6:	f200 80d2 	bhi.w	800a16e <HAL_RCC_OscConfig+0x2d6>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8009fca:	6923      	ldr	r3, [r4, #16]
 8009fcc:	2b1f      	cmp	r3, #31
 8009fce:	f200 8150 	bhi.w	800a272 <HAL_RCC_OscConfig+0x3da>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009fd2:	4b6f      	ldr	r3, [pc, #444]	; (800a190 <HAL_RCC_OscConfig+0x2f8>)
 8009fd4:	689a      	ldr	r2, [r3, #8]
 8009fd6:	f012 0f0c 	tst.w	r2, #12
 8009fda:	f000 80bd 	beq.w	800a158 <HAL_RCC_OscConfig+0x2c0>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009fde:	689a      	ldr	r2, [r3, #8]
 8009fe0:	f002 020c 	and.w	r2, r2, #12
 8009fe4:	2a08      	cmp	r2, #8
 8009fe6:	f000 80b3 	beq.w	800a150 <HAL_RCC_OscConfig+0x2b8>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009fea:	68e3      	ldr	r3, [r4, #12]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	f000 8166 	beq.w	800a2be <HAL_RCC_OscConfig+0x426>
        __HAL_RCC_HSI_ENABLE();
 8009ff2:	4b67      	ldr	r3, [pc, #412]	; (800a190 <HAL_RCC_OscConfig+0x2f8>)
 8009ff4:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009ff6:	461d      	mov	r5, r3
        __HAL_RCC_HSI_ENABLE();
 8009ff8:	f042 0201 	orr.w	r2, r2, #1
 8009ffc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009ffe:	f7fb fab7 	bl	8005570 <HAL_GetTick>
 800a002:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a004:	e005      	b.n	800a012 <HAL_RCC_OscConfig+0x17a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a006:	f7fb fab3 	bl	8005570 <HAL_GetTick>
 800a00a:	1b80      	subs	r0, r0, r6
 800a00c:	2802      	cmp	r0, #2
 800a00e:	f200 810b 	bhi.w	800a228 <HAL_RCC_OscConfig+0x390>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a012:	682b      	ldr	r3, [r5, #0]
 800a014:	0798      	lsls	r0, r3, #30
 800a016:	d5f6      	bpl.n	800a006 <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a018:	682b      	ldr	r3, [r5, #0]
 800a01a:	6922      	ldr	r2, [r4, #16]
 800a01c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800a020:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800a024:	602b      	str	r3, [r5, #0]
 800a026:	6823      	ldr	r3, [r4, #0]
 800a028:	e77a      	b.n	8009f20 <HAL_RCC_OscConfig+0x88>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800a02a:	f240 1165 	movw	r1, #357	; 0x165
 800a02e:	4859      	ldr	r0, [pc, #356]	; (800a194 <HAL_RCC_OscConfig+0x2fc>)
 800a030:	f7f8 fef8 	bl	8002e24 <assert_failed>
 800a034:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a036:	07dd      	lsls	r5, r3, #31
 800a038:	f57f af70 	bpl.w	8009f1c <HAL_RCC_OscConfig+0x84>
 800a03c:	e739      	b.n	8009eb2 <HAL_RCC_OscConfig+0x1a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a03e:	4a54      	ldr	r2, [pc, #336]	; (800a190 <HAL_RCC_OscConfig+0x2f8>)
 800a040:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800a042:	f043 0301 	orr.w	r3, r3, #1
 800a046:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a048:	f7fb fa92 	bl	8005570 <HAL_GetTick>

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a04c:	4e50      	ldr	r6, [pc, #320]	; (800a190 <HAL_RCC_OscConfig+0x2f8>)
      tickstart = HAL_GetTick();
 800a04e:	4680      	mov	r8, r0
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a050:	f241 3788 	movw	r7, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a054:	e006      	b.n	800a064 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a056:	f7fb fa8b 	bl	8005570 <HAL_GetTick>
 800a05a:	eba0 0008 	sub.w	r0, r0, r8
 800a05e:	42b8      	cmp	r0, r7
 800a060:	f200 80e2 	bhi.w	800a228 <HAL_RCC_OscConfig+0x390>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a064:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800a066:	079a      	lsls	r2, r3, #30
 800a068:	d5f5      	bpl.n	800a056 <HAL_RCC_OscConfig+0x1be>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a06a:	b125      	cbz	r5, 800a076 <HAL_RCC_OscConfig+0x1de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a06c:	4a48      	ldr	r2, [pc, #288]	; (800a190 <HAL_RCC_OscConfig+0x2f8>)
 800a06e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800a070:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a074:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800a076:	69a0      	ldr	r0, [r4, #24]
 800a078:	2802      	cmp	r0, #2
 800a07a:	f200 80a7 	bhi.w	800a1cc <HAL_RCC_OscConfig+0x334>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a07e:	2800      	cmp	r0, #0
 800a080:	d062      	beq.n	800a148 <HAL_RCC_OscConfig+0x2b0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a082:	4a43      	ldr	r2, [pc, #268]	; (800a190 <HAL_RCC_OscConfig+0x2f8>)
 800a084:	6893      	ldr	r3, [r2, #8]
 800a086:	f003 030c 	and.w	r3, r3, #12
 800a08a:	2b08      	cmp	r3, #8
 800a08c:	f000 814d 	beq.w	800a32a <HAL_RCC_OscConfig+0x492>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a090:	2802      	cmp	r0, #2
 800a092:	f040 8128 	bne.w	800a2e6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800a096:	69e3      	ldr	r3, [r4, #28]
 800a098:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 800a09c:	f040 8195 	bne.w	800a3ca <HAL_RCC_OscConfig+0x532>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800a0a0:	6a23      	ldr	r3, [r4, #32]
 800a0a2:	3b02      	subs	r3, #2
 800a0a4:	2b3d      	cmp	r3, #61	; 0x3d
 800a0a6:	f200 818a 	bhi.w	800a3be <HAL_RCC_OscConfig+0x526>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800a0aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0ac:	3b32      	subs	r3, #50	; 0x32
 800a0ae:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800a0b2:	f200 8172 	bhi.w	800a39a <HAL_RCC_OscConfig+0x502>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800a0b6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800a0b8:	2a08      	cmp	r2, #8
 800a0ba:	f240 8167 	bls.w	800a38c <HAL_RCC_OscConfig+0x4f4>
 800a0be:	f44f 7116 	mov.w	r1, #600	; 0x258
 800a0c2:	4834      	ldr	r0, [pc, #208]	; (800a194 <HAL_RCC_OscConfig+0x2fc>)
 800a0c4:	f7f8 feae 	bl	8002e24 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800a0c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a0ca:	3b02      	subs	r3, #2
 800a0cc:	2b0d      	cmp	r3, #13
 800a0ce:	f200 8170 	bhi.w	800a3b2 <HAL_RCC_OscConfig+0x51a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800a0d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a0d4:	3b02      	subs	r3, #2
 800a0d6:	2b05      	cmp	r3, #5
 800a0d8:	f200 8165 	bhi.w	800a3a6 <HAL_RCC_OscConfig+0x50e>
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a0dc:	4b2c      	ldr	r3, [pc, #176]	; (800a190 <HAL_RCC_OscConfig+0x2f8>)
 800a0de:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a0e0:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 800a0e2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800a0e6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800a0e8:	f7fb fa42 	bl	8005570 <HAL_GetTick>
 800a0ec:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a0ee:	e005      	b.n	800a0fc <HAL_RCC_OscConfig+0x264>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a0f0:	f7fb fa3e 	bl	8005570 <HAL_GetTick>
 800a0f4:	1b80      	subs	r0, r0, r6
 800a0f6:	2802      	cmp	r0, #2
 800a0f8:	f200 8096 	bhi.w	800a228 <HAL_RCC_OscConfig+0x390>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a0fc:	682b      	ldr	r3, [r5, #0]
 800a0fe:	0199      	lsls	r1, r3, #6
 800a100:	d4f6      	bmi.n	800a0f0 <HAL_RCC_OscConfig+0x258>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a102:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800a106:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a108:	4313      	orrs	r3, r2
 800a10a:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
 800a10e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800a112:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a114:	0852      	lsrs	r2, r2, #1

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a116:	4c1e      	ldr	r4, [pc, #120]	; (800a190 <HAL_RCC_OscConfig+0x2f8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a118:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800a11c:	3a01      	subs	r2, #1
 800a11e:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800a122:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a126:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800a128:	682b      	ldr	r3, [r5, #0]
 800a12a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a12e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a130:	f7fb fa1e 	bl	8005570 <HAL_GetTick>
 800a134:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a136:	e004      	b.n	800a142 <HAL_RCC_OscConfig+0x2aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a138:	f7fb fa1a 	bl	8005570 <HAL_GetTick>
 800a13c:	1b40      	subs	r0, r0, r5
 800a13e:	2802      	cmp	r0, #2
 800a140:	d872      	bhi.n	800a228 <HAL_RCC_OscConfig+0x390>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a142:	6823      	ldr	r3, [r4, #0]
 800a144:	019a      	lsls	r2, r3, #6
 800a146:	d5f7      	bpl.n	800a138 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800a148:	2000      	movs	r0, #0
}
 800a14a:	b002      	add	sp, #8
 800a14c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	025e      	lsls	r6, r3, #9
 800a154:	f53f af49 	bmi.w	8009fea <HAL_RCC_OscConfig+0x152>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a158:	4b0d      	ldr	r3, [pc, #52]	; (800a190 <HAL_RCC_OscConfig+0x2f8>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	079d      	lsls	r5, r3, #30
 800a15e:	d567      	bpl.n	800a230 <HAL_RCC_OscConfig+0x398>
 800a160:	68e3      	ldr	r3, [r4, #12]
 800a162:	2b01      	cmp	r3, #1
 800a164:	d064      	beq.n	800a230 <HAL_RCC_OscConfig+0x398>
        return HAL_ERROR;
 800a166:	2001      	movs	r0, #1
}
 800a168:	b002      	add	sp, #8
 800a16a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800a16e:	f240 119d 	movw	r1, #413	; 0x19d
 800a172:	4808      	ldr	r0, [pc, #32]	; (800a194 <HAL_RCC_OscConfig+0x2fc>)
 800a174:	f7f8 fe56 	bl	8002e24 <assert_failed>
 800a178:	e727      	b.n	8009fca <HAL_RCC_OscConfig+0x132>
      __HAL_RCC_LSI_DISABLE();
 800a17a:	4b05      	ldr	r3, [pc, #20]	; (800a190 <HAL_RCC_OscConfig+0x2f8>)
 800a17c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a17e:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 800a180:	f022 0201 	bic.w	r2, r2, #1
 800a184:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 800a186:	f7fb f9f3 	bl	8005570 <HAL_GetTick>
 800a18a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a18c:	e00b      	b.n	800a1a6 <HAL_RCC_OscConfig+0x30e>
 800a18e:	bf00      	nop
 800a190:	40023800 	.word	0x40023800
 800a194:	08026764 	.word	0x08026764
 800a198:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a19c:	f7fb f9e8 	bl	8005570 <HAL_GetTick>
 800a1a0:	1b80      	subs	r0, r0, r6
 800a1a2:	2802      	cmp	r0, #2
 800a1a4:	d840      	bhi.n	800a228 <HAL_RCC_OscConfig+0x390>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a1a6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800a1a8:	079f      	lsls	r7, r3, #30
 800a1aa:	d4f7      	bmi.n	800a19c <HAL_RCC_OscConfig+0x304>
 800a1ac:	e6d4      	b.n	8009f58 <HAL_RCC_OscConfig+0xc0>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800a1ae:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a1b2:	4889      	ldr	r0, [pc, #548]	; (800a3d8 <HAL_RCC_OscConfig+0x540>)
 800a1b4:	f7f8 fe36 	bl	8002e24 <assert_failed>
 800a1b8:	6963      	ldr	r3, [r4, #20]
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d0dd      	beq.n	800a17a <HAL_RCC_OscConfig+0x2e2>
 800a1be:	e6b8      	b.n	8009f32 <HAL_RCC_OscConfig+0x9a>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800a1c0:	f240 116b 	movw	r1, #363	; 0x16b
 800a1c4:	4884      	ldr	r0, [pc, #528]	; (800a3d8 <HAL_RCC_OscConfig+0x540>)
 800a1c6:	f7f8 fe2d 	bl	8002e24 <assert_failed>
 800a1ca:	e67a      	b.n	8009ec2 <HAL_RCC_OscConfig+0x2a>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800a1cc:	4882      	ldr	r0, [pc, #520]	; (800a3d8 <HAL_RCC_OscConfig+0x540>)
 800a1ce:	f44f 7113 	mov.w	r1, #588	; 0x24c
 800a1d2:	f7f8 fe27 	bl	8002e24 <assert_failed>
 800a1d6:	69a0      	ldr	r0, [r4, #24]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a1d8:	2800      	cmp	r0, #0
 800a1da:	f47f af52 	bne.w	800a082 <HAL_RCC_OscConfig+0x1ea>
 800a1de:	e7b3      	b.n	800a148 <HAL_RCC_OscConfig+0x2b0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a1e0:	4a7e      	ldr	r2, [pc, #504]	; (800a3dc <HAL_RCC_OscConfig+0x544>)
 800a1e2:	6813      	ldr	r3, [r2, #0]
 800a1e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a1e8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800a1ea:	f7fb f9c1 	bl	8005570 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a1ee:	4d7b      	ldr	r5, [pc, #492]	; (800a3dc <HAL_RCC_OscConfig+0x544>)
        tickstart = HAL_GetTick();
 800a1f0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a1f2:	e004      	b.n	800a1fe <HAL_RCC_OscConfig+0x366>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a1f4:	f7fb f9bc 	bl	8005570 <HAL_GetTick>
 800a1f8:	1b80      	subs	r0, r0, r6
 800a1fa:	2864      	cmp	r0, #100	; 0x64
 800a1fc:	d814      	bhi.n	800a228 <HAL_RCC_OscConfig+0x390>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a1fe:	682b      	ldr	r3, [r5, #0]
 800a200:	039a      	lsls	r2, r3, #14
 800a202:	d5f7      	bpl.n	800a1f4 <HAL_RCC_OscConfig+0x35c>
 800a204:	e689      	b.n	8009f1a <HAL_RCC_OscConfig+0x82>
      PWR->CR1 |= PWR_CR1_DBP;
 800a206:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a208:	461e      	mov	r6, r3
      PWR->CR1 |= PWR_CR1_DBP;
 800a20a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a20e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800a210:	f7fb f9ae 	bl	8005570 <HAL_GetTick>
 800a214:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a216:	6833      	ldr	r3, [r6, #0]
 800a218:	05d9      	lsls	r1, r3, #23
 800a21a:	f53f aebf 	bmi.w	8009f9c <HAL_RCC_OscConfig+0x104>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a21e:	f7fb f9a7 	bl	8005570 <HAL_GetTick>
 800a222:	1bc0      	subs	r0, r0, r7
 800a224:	2864      	cmp	r0, #100	; 0x64
 800a226:	d9f6      	bls.n	800a216 <HAL_RCC_OscConfig+0x37e>
            return HAL_TIMEOUT;
 800a228:	2003      	movs	r0, #3
}
 800a22a:	b002      	add	sp, #8
 800a22c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a230:	4a6a      	ldr	r2, [pc, #424]	; (800a3dc <HAL_RCC_OscConfig+0x544>)
 800a232:	6921      	ldr	r1, [r4, #16]
 800a234:	6813      	ldr	r3, [r2, #0]
 800a236:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800a23a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800a23e:	6013      	str	r3, [r2, #0]
 800a240:	6823      	ldr	r3, [r4, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a242:	e66d      	b.n	8009f20 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a244:	4b65      	ldr	r3, [pc, #404]	; (800a3dc <HAL_RCC_OscConfig+0x544>)
 800a246:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a248:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a24a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a24e:	601a      	str	r2, [r3, #0]
 800a250:	681a      	ldr	r2, [r3, #0]
 800a252:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a256:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800a258:	f7fb f98a 	bl	8005570 <HAL_GetTick>
 800a25c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a25e:	e004      	b.n	800a26a <HAL_RCC_OscConfig+0x3d2>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a260:	f7fb f986 	bl	8005570 <HAL_GetTick>
 800a264:	1b80      	subs	r0, r0, r6
 800a266:	2864      	cmp	r0, #100	; 0x64
 800a268:	d8de      	bhi.n	800a228 <HAL_RCC_OscConfig+0x390>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a26a:	682b      	ldr	r3, [r5, #0]
 800a26c:	039b      	lsls	r3, r3, #14
 800a26e:	d4f7      	bmi.n	800a260 <HAL_RCC_OscConfig+0x3c8>
 800a270:	e653      	b.n	8009f1a <HAL_RCC_OscConfig+0x82>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800a272:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 800a276:	4858      	ldr	r0, [pc, #352]	; (800a3d8 <HAL_RCC_OscConfig+0x540>)
 800a278:	f7f8 fdd4 	bl	8002e24 <assert_failed>
 800a27c:	e6a9      	b.n	8009fd2 <HAL_RCC_OscConfig+0x13a>
    return HAL_ERROR;
 800a27e:	2001      	movs	r0, #1
}
 800a280:	4770      	bx	lr
  FlagStatus pwrclkchanged = RESET;
 800a282:	2500      	movs	r5, #0
 800a284:	e685      	b.n	8009f92 <HAL_RCC_OscConfig+0xfa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a286:	4b55      	ldr	r3, [pc, #340]	; (800a3dc <HAL_RCC_OscConfig+0x544>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a288:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a28c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a28e:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a290:	f022 0201 	bic.w	r2, r2, #1
 800a294:	671a      	str	r2, [r3, #112]	; 0x70
 800a296:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a298:	f022 0204 	bic.w	r2, r2, #4
 800a29c:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 800a29e:	f7fb f967 	bl	8005570 <HAL_GetTick>
 800a2a2:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a2a4:	e004      	b.n	800a2b0 <HAL_RCC_OscConfig+0x418>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a2a6:	f7fb f963 	bl	8005570 <HAL_GetTick>
 800a2aa:	1bc0      	subs	r0, r0, r7
 800a2ac:	4540      	cmp	r0, r8
 800a2ae:	d8bb      	bhi.n	800a228 <HAL_RCC_OscConfig+0x390>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a2b0:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800a2b2:	079b      	lsls	r3, r3, #30
 800a2b4:	d4f7      	bmi.n	800a2a6 <HAL_RCC_OscConfig+0x40e>
    if (pwrclkchanged == SET)
 800a2b6:	2d00      	cmp	r5, #0
 800a2b8:	f43f aedd 	beq.w	800a076 <HAL_RCC_OscConfig+0x1de>
 800a2bc:	e6d6      	b.n	800a06c <HAL_RCC_OscConfig+0x1d4>
        __HAL_RCC_HSI_DISABLE();
 800a2be:	4b47      	ldr	r3, [pc, #284]	; (800a3dc <HAL_RCC_OscConfig+0x544>)
 800a2c0:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a2c2:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 800a2c4:	f022 0201 	bic.w	r2, r2, #1
 800a2c8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800a2ca:	f7fb f951 	bl	8005570 <HAL_GetTick>
 800a2ce:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a2d0:	e004      	b.n	800a2dc <HAL_RCC_OscConfig+0x444>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a2d2:	f7fb f94d 	bl	8005570 <HAL_GetTick>
 800a2d6:	1b80      	subs	r0, r0, r6
 800a2d8:	2802      	cmp	r0, #2
 800a2da:	d8a5      	bhi.n	800a228 <HAL_RCC_OscConfig+0x390>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a2dc:	682b      	ldr	r3, [r5, #0]
 800a2de:	0799      	lsls	r1, r3, #30
 800a2e0:	d4f7      	bmi.n	800a2d2 <HAL_RCC_OscConfig+0x43a>
 800a2e2:	6823      	ldr	r3, [r4, #0]
 800a2e4:	e61c      	b.n	8009f20 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_PLL_DISABLE();
 800a2e6:	6813      	ldr	r3, [r2, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a2e8:	4614      	mov	r4, r2
        __HAL_RCC_PLL_DISABLE();
 800a2ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a2ee:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800a2f0:	f7fb f93e 	bl	8005570 <HAL_GetTick>
 800a2f4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a2f6:	e004      	b.n	800a302 <HAL_RCC_OscConfig+0x46a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a2f8:	f7fb f93a 	bl	8005570 <HAL_GetTick>
 800a2fc:	1b40      	subs	r0, r0, r5
 800a2fe:	2802      	cmp	r0, #2
 800a300:	d892      	bhi.n	800a228 <HAL_RCC_OscConfig+0x390>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a302:	6823      	ldr	r3, [r4, #0]
 800a304:	019b      	lsls	r3, r3, #6
 800a306:	d4f7      	bmi.n	800a2f8 <HAL_RCC_OscConfig+0x460>
 800a308:	e71e      	b.n	800a148 <HAL_RCC_OscConfig+0x2b0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a30a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800a30e:	601a      	str	r2, [r3, #0]
 800a310:	681a      	ldr	r2, [r3, #0]
 800a312:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a316:	601a      	str	r2, [r3, #0]
 800a318:	e767      	b.n	800a1ea <HAL_RCC_OscConfig+0x352>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a31a:	f042 0204 	orr.w	r2, r2, #4
 800a31e:	671a      	str	r2, [r3, #112]	; 0x70
 800a320:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a322:	f042 0201 	orr.w	r2, r2, #1
 800a326:	671a      	str	r2, [r3, #112]	; 0x70
 800a328:	e68e      	b.n	800a048 <HAL_RCC_OscConfig+0x1b0>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a32a:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 800a32c:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a32e:	f43f af1b 	beq.w	800a168 <HAL_RCC_OscConfig+0x2d0>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a332:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a336:	69e1      	ldr	r1, [r4, #28]
 800a338:	428b      	cmp	r3, r1
 800a33a:	f47f af14 	bne.w	800a166 <HAL_RCC_OscConfig+0x2ce>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a33e:	f002 033f 	and.w	r3, r2, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a342:	6a21      	ldr	r1, [r4, #32]
 800a344:	428b      	cmp	r3, r1
 800a346:	f47f af0e 	bne.w	800a166 <HAL_RCC_OscConfig+0x2ce>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a34a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a34e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a350:	4013      	ands	r3, r2
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a352:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 800a356:	f47f af06 	bne.w	800a166 <HAL_RCC_OscConfig+0x2ce>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a35a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a35c:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 800a360:	085b      	lsrs	r3, r3, #1
 800a362:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a364:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 800a368:	f47f aefd 	bne.w	800a166 <HAL_RCC_OscConfig+0x2ce>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a36c:	f002 6370 	and.w	r3, r2, #251658240	; 0xf000000
 800a370:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a372:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 800a376:	f47f aef6 	bne.w	800a166 <HAL_RCC_OscConfig+0x2ce>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800a37a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a37c:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a380:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
    return HAL_ERROR;
 800a384:	bf14      	ite	ne
 800a386:	2001      	movne	r0, #1
 800a388:	2000      	moveq	r0, #0
 800a38a:	e6ed      	b.n	800a168 <HAL_RCC_OscConfig+0x2d0>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800a38c:	f44f 73aa 	mov.w	r3, #340	; 0x154
 800a390:	40d3      	lsrs	r3, r2
 800a392:	07d8      	lsls	r0, r3, #31
 800a394:	f53f ae98 	bmi.w	800a0c8 <HAL_RCC_OscConfig+0x230>
 800a398:	e691      	b.n	800a0be <HAL_RCC_OscConfig+0x226>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800a39a:	f240 2157 	movw	r1, #599	; 0x257
 800a39e:	480e      	ldr	r0, [pc, #56]	; (800a3d8 <HAL_RCC_OscConfig+0x540>)
 800a3a0:	f7f8 fd40 	bl	8002e24 <assert_failed>
 800a3a4:	e687      	b.n	800a0b6 <HAL_RCC_OscConfig+0x21e>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800a3a6:	f240 215b 	movw	r1, #603	; 0x25b
 800a3aa:	480b      	ldr	r0, [pc, #44]	; (800a3d8 <HAL_RCC_OscConfig+0x540>)
 800a3ac:	f7f8 fd3a 	bl	8002e24 <assert_failed>
 800a3b0:	e694      	b.n	800a0dc <HAL_RCC_OscConfig+0x244>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800a3b2:	f240 2159 	movw	r1, #601	; 0x259
 800a3b6:	4808      	ldr	r0, [pc, #32]	; (800a3d8 <HAL_RCC_OscConfig+0x540>)
 800a3b8:	f7f8 fd34 	bl	8002e24 <assert_failed>
 800a3bc:	e689      	b.n	800a0d2 <HAL_RCC_OscConfig+0x23a>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800a3be:	f240 2156 	movw	r1, #598	; 0x256
 800a3c2:	4805      	ldr	r0, [pc, #20]	; (800a3d8 <HAL_RCC_OscConfig+0x540>)
 800a3c4:	f7f8 fd2e 	bl	8002e24 <assert_failed>
 800a3c8:	e66f      	b.n	800a0aa <HAL_RCC_OscConfig+0x212>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800a3ca:	f240 2155 	movw	r1, #597	; 0x255
 800a3ce:	4802      	ldr	r0, [pc, #8]	; (800a3d8 <HAL_RCC_OscConfig+0x540>)
 800a3d0:	f7f8 fd28 	bl	8002e24 <assert_failed>
 800a3d4:	e664      	b.n	800a0a0 <HAL_RCC_OscConfig+0x208>
 800a3d6:	bf00      	nop
 800a3d8:	08026764 	.word	0x08026764
 800a3dc:	40023800 	.word	0x40023800

0800a3e0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a3e0:	4916      	ldr	r1, [pc, #88]	; (800a43c <HAL_RCC_GetSysClockFreq+0x5c>)
{
 800a3e2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a3e4:	688b      	ldr	r3, [r1, #8]
 800a3e6:	f003 030c 	and.w	r3, r3, #12
 800a3ea:	2b04      	cmp	r3, #4
 800a3ec:	d01b      	beq.n	800a426 <HAL_RCC_GetSysClockFreq+0x46>
 800a3ee:	2b08      	cmp	r3, #8
 800a3f0:	d117      	bne.n	800a422 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a3f2:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800a3f4:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a3f6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a3fa:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800a3fc:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 800a400:	d113      	bne.n	800a42a <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a402:	480f      	ldr	r0, [pc, #60]	; (800a440 <HAL_RCC_GetSysClockFreq+0x60>)
 800a404:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800a408:	fba1 0100 	umull	r0, r1, r1, r0
 800a40c:	f7f5 ffd0 	bl	80003b0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800a410:	4b0a      	ldr	r3, [pc, #40]	; (800a43c <HAL_RCC_GetSysClockFreq+0x5c>)
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800a418:	3301      	adds	r3, #1
 800a41a:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800a41c:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800a420:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 800a422:	4807      	ldr	r0, [pc, #28]	; (800a440 <HAL_RCC_GetSysClockFreq+0x60>)
}
 800a424:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800a426:	4807      	ldr	r0, [pc, #28]	; (800a444 <HAL_RCC_GetSysClockFreq+0x64>)
}
 800a428:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a42a:	4806      	ldr	r0, [pc, #24]	; (800a444 <HAL_RCC_GetSysClockFreq+0x64>)
 800a42c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800a430:	2300      	movs	r3, #0
 800a432:	fba1 0100 	umull	r0, r1, r1, r0
 800a436:	f7f5 ffbb 	bl	80003b0 <__aeabi_uldivmod>
 800a43a:	e7e9      	b.n	800a410 <HAL_RCC_GetSysClockFreq+0x30>
 800a43c:	40023800 	.word	0x40023800
 800a440:	00f42400 	.word	0x00f42400
 800a444:	007a1200 	.word	0x007a1200

0800a448 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800a448:	2800      	cmp	r0, #0
 800a44a:	f000 80e6 	beq.w	800a61a <HAL_RCC_ClockConfig+0x1d2>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800a44e:	6803      	ldr	r3, [r0, #0]
 800a450:	3b01      	subs	r3, #1
 800a452:	2b0e      	cmp	r3, #14
{
 800a454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a458:	4604      	mov	r4, r0
 800a45a:	460d      	mov	r5, r1
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800a45c:	f200 80c9 	bhi.w	800a5f2 <HAL_RCC_ClockConfig+0x1aa>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800a460:	2d0f      	cmp	r5, #15
 800a462:	f200 80b6 	bhi.w	800a5d2 <HAL_RCC_ClockConfig+0x18a>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a466:	4a82      	ldr	r2, [pc, #520]	; (800a670 <HAL_RCC_ClockConfig+0x228>)
 800a468:	6813      	ldr	r3, [r2, #0]
 800a46a:	f003 030f 	and.w	r3, r3, #15
 800a46e:	42ab      	cmp	r3, r5
 800a470:	f0c0 80d5 	bcc.w	800a61e <HAL_RCC_ClockConfig+0x1d6>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a474:	6823      	ldr	r3, [r4, #0]
 800a476:	0798      	lsls	r0, r3, #30
 800a478:	d532      	bpl.n	800a4e0 <HAL_RCC_ClockConfig+0x98>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a47a:	0759      	lsls	r1, r3, #29
 800a47c:	d504      	bpl.n	800a488 <HAL_RCC_ClockConfig+0x40>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a47e:	497d      	ldr	r1, [pc, #500]	; (800a674 <HAL_RCC_ClockConfig+0x22c>)
 800a480:	688a      	ldr	r2, [r1, #8]
 800a482:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800a486:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a488:	071a      	lsls	r2, r3, #28
 800a48a:	d504      	bpl.n	800a496 <HAL_RCC_ClockConfig+0x4e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a48c:	4979      	ldr	r1, [pc, #484]	; (800a674 <HAL_RCC_ClockConfig+0x22c>)
 800a48e:	688a      	ldr	r2, [r1, #8]
 800a490:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800a494:	608a      	str	r2, [r1, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800a496:	68a1      	ldr	r1, [r4, #8]
 800a498:	f031 0280 	bics.w	r2, r1, #128	; 0x80
 800a49c:	f021 0620 	bic.w	r6, r1, #32
 800a4a0:	f021 0040 	bic.w	r0, r1, #64	; 0x40
 800a4a4:	bf14      	ite	ne
 800a4a6:	2201      	movne	r2, #1
 800a4a8:	2200      	moveq	r2, #0
 800a4aa:	2e90      	cmp	r6, #144	; 0x90
 800a4ac:	bf0c      	ite	eq
 800a4ae:	2200      	moveq	r2, #0
 800a4b0:	f002 0201 	andne.w	r2, r2, #1
 800a4b4:	29f0      	cmp	r1, #240	; 0xf0
 800a4b6:	bf0c      	ite	eq
 800a4b8:	2200      	moveq	r2, #0
 800a4ba:	f002 0201 	andne.w	r2, r2, #1
 800a4be:	28a0      	cmp	r0, #160	; 0xa0
 800a4c0:	bf0c      	ite	eq
 800a4c2:	2200      	moveq	r2, #0
 800a4c4:	f002 0201 	andne.w	r2, r2, #1
 800a4c8:	b122      	cbz	r2, 800a4d4 <HAL_RCC_ClockConfig+0x8c>
 800a4ca:	f021 0210 	bic.w	r2, r1, #16
 800a4ce:	2ac0      	cmp	r2, #192	; 0xc0
 800a4d0:	f040 80c6 	bne.w	800a660 <HAL_RCC_ClockConfig+0x218>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a4d4:	4867      	ldr	r0, [pc, #412]	; (800a674 <HAL_RCC_ClockConfig+0x22c>)
 800a4d6:	6882      	ldr	r2, [r0, #8]
 800a4d8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800a4dc:	4311      	orrs	r1, r2
 800a4de:	6081      	str	r1, [r0, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a4e0:	07df      	lsls	r7, r3, #31
 800a4e2:	d527      	bpl.n	800a534 <HAL_RCC_ClockConfig+0xec>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800a4e4:	6863      	ldr	r3, [r4, #4]
 800a4e6:	2b02      	cmp	r3, #2
 800a4e8:	f200 8090 	bhi.w	800a60c <HAL_RCC_ClockConfig+0x1c4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a4ec:	4a61      	ldr	r2, [pc, #388]	; (800a674 <HAL_RCC_ClockConfig+0x22c>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a4ee:	2b01      	cmp	r3, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a4f0:	6812      	ldr	r2, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a4f2:	f000 8087 	beq.w	800a604 <HAL_RCC_ClockConfig+0x1bc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a4f6:	2b02      	cmp	r3, #2
 800a4f8:	f000 809f 	beq.w	800a63a <HAL_RCC_ClockConfig+0x1f2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a4fc:	0791      	lsls	r1, r2, #30
 800a4fe:	d575      	bpl.n	800a5ec <HAL_RCC_ClockConfig+0x1a4>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a500:	495c      	ldr	r1, [pc, #368]	; (800a674 <HAL_RCC_ClockConfig+0x22c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a502:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a506:	688a      	ldr	r2, [r1, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a508:	460e      	mov	r6, r1
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a50a:	f022 0203 	bic.w	r2, r2, #3
 800a50e:	4313      	orrs	r3, r2
 800a510:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800a512:	f7fb f82d 	bl	8005570 <HAL_GetTick>
 800a516:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a518:	e005      	b.n	800a526 <HAL_RCC_ClockConfig+0xde>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a51a:	f7fb f829 	bl	8005570 <HAL_GetTick>
 800a51e:	1bc0      	subs	r0, r0, r7
 800a520:	4540      	cmp	r0, r8
 800a522:	f200 8088 	bhi.w	800a636 <HAL_RCC_ClockConfig+0x1ee>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a526:	68b3      	ldr	r3, [r6, #8]
 800a528:	6862      	ldr	r2, [r4, #4]
 800a52a:	f003 030c 	and.w	r3, r3, #12
 800a52e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800a532:	d1f2      	bne.n	800a51a <HAL_RCC_ClockConfig+0xd2>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a534:	4a4e      	ldr	r2, [pc, #312]	; (800a670 <HAL_RCC_ClockConfig+0x228>)
 800a536:	6813      	ldr	r3, [r2, #0]
 800a538:	f003 030f 	and.w	r3, r3, #15
 800a53c:	42ab      	cmp	r3, r5
 800a53e:	d909      	bls.n	800a554 <HAL_RCC_ClockConfig+0x10c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a540:	6813      	ldr	r3, [r2, #0]
 800a542:	f023 030f 	bic.w	r3, r3, #15
 800a546:	432b      	orrs	r3, r5
 800a548:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a54a:	6813      	ldr	r3, [r2, #0]
 800a54c:	f003 030f 	and.w	r3, r3, #15
 800a550:	42ab      	cmp	r3, r5
 800a552:	d14b      	bne.n	800a5ec <HAL_RCC_ClockConfig+0x1a4>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a554:	6823      	ldr	r3, [r4, #0]
 800a556:	075a      	lsls	r2, r3, #29
 800a558:	d512      	bpl.n	800a580 <HAL_RCC_ClockConfig+0x138>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800a55a:	68e1      	ldr	r1, [r4, #12]
 800a55c:	f421 6000 	bic.w	r0, r1, #2048	; 0x800
 800a560:	f421 5280 	bic.w	r2, r1, #4096	; 0x1000
 800a564:	f5b0 5fa0 	cmp.w	r0, #5120	; 0x1400
 800a568:	bf18      	it	ne
 800a56a:	2a00      	cmpne	r2, #0
 800a56c:	d002      	beq.n	800a574 <HAL_RCC_ClockConfig+0x12c>
 800a56e:	f5b1 5fc0 	cmp.w	r1, #6144	; 0x1800
 800a572:	d16d      	bne.n	800a650 <HAL_RCC_ClockConfig+0x208>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a574:	483f      	ldr	r0, [pc, #252]	; (800a674 <HAL_RCC_ClockConfig+0x22c>)
 800a576:	6882      	ldr	r2, [r0, #8]
 800a578:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800a57c:	430a      	orrs	r2, r1
 800a57e:	6082      	str	r2, [r0, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a580:	071b      	lsls	r3, r3, #28
 800a582:	d513      	bpl.n	800a5ac <HAL_RCC_ClockConfig+0x164>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800a584:	6922      	ldr	r2, [r4, #16]
 800a586:	f422 6100 	bic.w	r1, r2, #2048	; 0x800
 800a58a:	f422 5380 	bic.w	r3, r2, #4096	; 0x1000
 800a58e:	f5b1 5fa0 	cmp.w	r1, #5120	; 0x1400
 800a592:	bf18      	it	ne
 800a594:	2b00      	cmpne	r3, #0
 800a596:	d002      	beq.n	800a59e <HAL_RCC_ClockConfig+0x156>
 800a598:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 800a59c:	d151      	bne.n	800a642 <HAL_RCC_ClockConfig+0x1fa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a59e:	4935      	ldr	r1, [pc, #212]	; (800a674 <HAL_RCC_ClockConfig+0x22c>)
 800a5a0:	688b      	ldr	r3, [r1, #8]
 800a5a2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800a5a6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800a5aa:	608b      	str	r3, [r1, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a5ac:	f7ff ff18 	bl	800a3e0 <HAL_RCC_GetSysClockFreq>
 800a5b0:	4b30      	ldr	r3, [pc, #192]	; (800a674 <HAL_RCC_ClockConfig+0x22c>)
 800a5b2:	4c31      	ldr	r4, [pc, #196]	; (800a678 <HAL_RCC_ClockConfig+0x230>)
 800a5b4:	689b      	ldr	r3, [r3, #8]
  HAL_InitTick(uwTickPrio);
 800a5b6:	4931      	ldr	r1, [pc, #196]	; (800a67c <HAL_RCC_ClockConfig+0x234>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a5b8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a5bc:	4a30      	ldr	r2, [pc, #192]	; (800a680 <HAL_RCC_ClockConfig+0x238>)
 800a5be:	5ce3      	ldrb	r3, [r4, r3]
 800a5c0:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick(uwTickPrio);
 800a5c4:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a5c6:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 800a5c8:	f7fa f8e2 	bl	8004790 <HAL_InitTick>
  return HAL_OK;
 800a5cc:	2000      	movs	r0, #0
}
 800a5ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_FLASH_LATENCY(FLatency));
 800a5d2:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 800a5d6:	482b      	ldr	r0, [pc, #172]	; (800a684 <HAL_RCC_ClockConfig+0x23c>)
 800a5d8:	f7f8 fc24 	bl	8002e24 <assert_failed>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a5dc:	4b24      	ldr	r3, [pc, #144]	; (800a670 <HAL_RCC_ClockConfig+0x228>)
 800a5de:	681a      	ldr	r2, [r3, #0]
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a5e0:	6819      	ldr	r1, [r3, #0]
 800a5e2:	f021 010f 	bic.w	r1, r1, #15
 800a5e6:	430d      	orrs	r5, r1
 800a5e8:	601d      	str	r5, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a5ea:	681b      	ldr	r3, [r3, #0]
    return HAL_ERROR;
 800a5ec:	2001      	movs	r0, #1
}
 800a5ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800a5f2:	f240 21df 	movw	r1, #735	; 0x2df
 800a5f6:	4823      	ldr	r0, [pc, #140]	; (800a684 <HAL_RCC_ClockConfig+0x23c>)
 800a5f8:	f7f8 fc14 	bl	8002e24 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800a5fc:	2d0f      	cmp	r5, #15
 800a5fe:	f67f af32 	bls.w	800a466 <HAL_RCC_ClockConfig+0x1e>
 800a602:	e7e6      	b.n	800a5d2 <HAL_RCC_ClockConfig+0x18a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a604:	0396      	lsls	r6, r2, #14
 800a606:	f53f af7b 	bmi.w	800a500 <HAL_RCC_ClockConfig+0xb8>
 800a60a:	e7ef      	b.n	800a5ec <HAL_RCC_ClockConfig+0x1a4>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800a60c:	f240 310b 	movw	r1, #779	; 0x30b
 800a610:	481c      	ldr	r0, [pc, #112]	; (800a684 <HAL_RCC_ClockConfig+0x23c>)
 800a612:	f7f8 fc07 	bl	8002e24 <assert_failed>
 800a616:	6863      	ldr	r3, [r4, #4]
 800a618:	e768      	b.n	800a4ec <HAL_RCC_ClockConfig+0xa4>
    return HAL_ERROR;
 800a61a:	2001      	movs	r0, #1
}
 800a61c:	4770      	bx	lr
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a61e:	6813      	ldr	r3, [r2, #0]
 800a620:	f023 030f 	bic.w	r3, r3, #15
 800a624:	432b      	orrs	r3, r5
 800a626:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a628:	6813      	ldr	r3, [r2, #0]
 800a62a:	f003 030f 	and.w	r3, r3, #15
 800a62e:	42ab      	cmp	r3, r5
 800a630:	f43f af20 	beq.w	800a474 <HAL_RCC_ClockConfig+0x2c>
 800a634:	e7da      	b.n	800a5ec <HAL_RCC_ClockConfig+0x1a4>
        return HAL_TIMEOUT;
 800a636:	2003      	movs	r0, #3
 800a638:	e7d9      	b.n	800a5ee <HAL_RCC_ClockConfig+0x1a6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a63a:	0190      	lsls	r0, r2, #6
 800a63c:	f53f af60 	bmi.w	800a500 <HAL_RCC_ClockConfig+0xb8>
 800a640:	e7d4      	b.n	800a5ec <HAL_RCC_ClockConfig+0x1a4>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800a642:	f240 314f 	movw	r1, #847	; 0x34f
 800a646:	480f      	ldr	r0, [pc, #60]	; (800a684 <HAL_RCC_ClockConfig+0x23c>)
 800a648:	f7f8 fbec 	bl	8002e24 <assert_failed>
 800a64c:	6922      	ldr	r2, [r4, #16]
 800a64e:	e7a6      	b.n	800a59e <HAL_RCC_ClockConfig+0x156>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800a650:	f44f 7152 	mov.w	r1, #840	; 0x348
 800a654:	480b      	ldr	r0, [pc, #44]	; (800a684 <HAL_RCC_ClockConfig+0x23c>)
 800a656:	f7f8 fbe5 	bl	8002e24 <assert_failed>
 800a65a:	68e1      	ldr	r1, [r4, #12]
 800a65c:	6823      	ldr	r3, [r4, #0]
 800a65e:	e789      	b.n	800a574 <HAL_RCC_ClockConfig+0x12c>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800a660:	f44f 7141 	mov.w	r1, #772	; 0x304
 800a664:	4807      	ldr	r0, [pc, #28]	; (800a684 <HAL_RCC_ClockConfig+0x23c>)
 800a666:	f7f8 fbdd 	bl	8002e24 <assert_failed>
 800a66a:	68a1      	ldr	r1, [r4, #8]
 800a66c:	6823      	ldr	r3, [r4, #0]
 800a66e:	e731      	b.n	800a4d4 <HAL_RCC_ClockConfig+0x8c>
 800a670:	40023c00 	.word	0x40023c00
 800a674:	40023800 	.word	0x40023800
 800a678:	08025e88 	.word	0x08025e88
 800a67c:	200002a4 	.word	0x200002a4
 800a680:	20000244 	.word	0x20000244
 800a684:	08026764 	.word	0x08026764

0800a688 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800a688:	4b01      	ldr	r3, [pc, #4]	; (800a690 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800a68a:	6818      	ldr	r0, [r3, #0]
 800a68c:	4770      	bx	lr
 800a68e:	bf00      	nop
 800a690:	20000244 	.word	0x20000244

0800a694 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a694:	4b04      	ldr	r3, [pc, #16]	; (800a6a8 <HAL_RCC_GetPCLK1Freq+0x14>)
 800a696:	4a05      	ldr	r2, [pc, #20]	; (800a6ac <HAL_RCC_GetPCLK1Freq+0x18>)
 800a698:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800a69a:	4905      	ldr	r1, [pc, #20]	; (800a6b0 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a69c:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800a6a0:	6808      	ldr	r0, [r1, #0]
 800a6a2:	5cd3      	ldrb	r3, [r2, r3]
}
 800a6a4:	40d8      	lsrs	r0, r3
 800a6a6:	4770      	bx	lr
 800a6a8:	40023800 	.word	0x40023800
 800a6ac:	08025e98 	.word	0x08025e98
 800a6b0:	20000244 	.word	0x20000244

0800a6b4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a6b4:	4b04      	ldr	r3, [pc, #16]	; (800a6c8 <HAL_RCC_GetPCLK2Freq+0x14>)
 800a6b6:	4a05      	ldr	r2, [pc, #20]	; (800a6cc <HAL_RCC_GetPCLK2Freq+0x18>)
 800a6b8:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800a6ba:	4905      	ldr	r1, [pc, #20]	; (800a6d0 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a6bc:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800a6c0:	6808      	ldr	r0, [r1, #0]
 800a6c2:	5cd3      	ldrb	r3, [r2, r3]
}
 800a6c4:	40d8      	lsrs	r0, r3
 800a6c6:	4770      	bx	lr
 800a6c8:	40023800 	.word	0x40023800
 800a6cc:	08025e98 	.word	0x08025e98
 800a6d0:	20000244 	.word	0x20000244

0800a6d4 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a6d4:	4b0e      	ldr	r3, [pc, #56]	; (800a710 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a6d6:	220f      	movs	r2, #15
 800a6d8:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a6da:	689a      	ldr	r2, [r3, #8]
 800a6dc:	f002 0203 	and.w	r2, r2, #3
 800a6e0:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a6e2:	689a      	ldr	r2, [r3, #8]
 800a6e4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800a6e8:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a6ea:	689a      	ldr	r2, [r3, #8]
 800a6ec:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800a6f0:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	08db      	lsrs	r3, r3, #3
{
 800a6f6:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800a6f8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a6fc:	4c05      	ldr	r4, [pc, #20]	; (800a714 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800a6fe:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a700:	6823      	ldr	r3, [r4, #0]
}
 800a702:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a706:	f003 030f 	and.w	r3, r3, #15
 800a70a:	600b      	str	r3, [r1, #0]
}
 800a70c:	4770      	bx	lr
 800a70e:	bf00      	nop
 800a710:	40023800 	.word	0x40023800
 800a714:	40023c00 	.word	0x40023c00

0800a718 <HAL_RCCEx_PeriphCLKConfig>:
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
  uint32_t pllsaiused = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800a718:	4a54      	ldr	r2, [pc, #336]	; (800a86c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800a71a:	6803      	ldr	r3, [r0, #0]
 800a71c:	401a      	ands	r2, r3
{
 800a71e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a722:	4604      	mov	r4, r0
 800a724:	b083      	sub	sp, #12
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800a726:	2a00      	cmp	r2, #0
 800a728:	f000 8349 	beq.w	800adbe <HAL_RCCEx_PeriphCLKConfig+0x6a6>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a72c:	f013 0601 	ands.w	r6, r3, #1
 800a730:	d00f      	beq.n	800a752 <HAL_RCCEx_PeriphCLKConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800a732:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a734:	f431 0200 	bics.w	r2, r1, #8388608	; 0x800000
 800a738:	f040 834c 	bne.w	800add4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a73c:	4a4c      	ldr	r2, [pc, #304]	; (800a870 <HAL_RCCEx_PeriphCLKConfig+0x158>)

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800a73e:	fab1 f681 	clz	r6, r1
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a742:	6890      	ldr	r0, [r2, #8]
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800a744:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a746:	f420 0000 	bic.w	r0, r0, #8388608	; 0x800000
 800a74a:	6090      	str	r0, [r2, #8]
 800a74c:	6890      	ldr	r0, [r2, #8]
 800a74e:	4301      	orrs	r1, r0
 800a750:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800a752:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 800a756:	d014      	beq.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0x6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800a758:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800a75a:	f435 1240 	bics.w	r2, r5, #3145728	; 0x300000
 800a75e:	f040 836f 	bne.w	800ae40 <HAL_RCCEx_PeriphCLKConfig+0x728>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a762:	4943      	ldr	r1, [pc, #268]	; (800a870 <HAL_RCCEx_PeriphCLKConfig+0x158>)
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800a764:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a768:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800a76c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800a770:	ea42 0205 	orr.w	r2, r2, r5
 800a774:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800a778:	f000 8327 	beq.w	800adca <HAL_RCCEx_PeriphCLKConfig+0x6b2>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800a77c:	fab5 f585 	clz	r5, r5
 800a780:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800a782:	02da      	lsls	r2, r3, #11
 800a784:	d514      	bpl.n	800a7b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 800a786:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a788:	f431 0240 	bics.w	r2, r1, #12582912	; 0xc00000
 800a78c:	f040 8351 	bne.w	800ae32 <HAL_RCCEx_PeriphCLKConfig+0x71a>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a790:	4837      	ldr	r0, [pc, #220]	; (800a870 <HAL_RCCEx_PeriphCLKConfig+0x158>)

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800a792:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a796:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800a79a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800a79e:	ea42 0201 	orr.w	r2, r2, r1
 800a7a2:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800a7a6:	f000 8313 	beq.w	800add0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800a7aa:	2900      	cmp	r1, #0
 800a7ac:	bf08      	it	eq
 800a7ae:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 800a7b0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800a7b4:	bf18      	it	ne
 800a7b6:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a7b8:	069f      	lsls	r7, r3, #26
 800a7ba:	f140 8099 	bpl.w	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800a7be:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800a7c0:	492c      	ldr	r1, [pc, #176]	; (800a874 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800a7c2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800a7c6:	bf18      	it	ne
 800a7c8:	f5b2 7f00 	cmpne.w	r2, #512	; 0x200
 800a7cc:	f422 2ca0 	bic.w	ip, r2, #327680	; 0x50000
 800a7d0:	f422 2710 	bic.w	r7, r2, #589824	; 0x90000
 800a7d4:	4828      	ldr	r0, [pc, #160]	; (800a878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a7d6:	bf14      	ite	ne
 800a7d8:	2301      	movne	r3, #1
 800a7da:	2300      	moveq	r3, #0
 800a7dc:	458c      	cmp	ip, r1
 800a7de:	bf0c      	ite	eq
 800a7e0:	2300      	moveq	r3, #0
 800a7e2:	f003 0301 	andne.w	r3, r3, #1
 800a7e6:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 800a7ea:	f8df c098 	ldr.w	ip, [pc, #152]	; 800a884 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800a7ee:	4287      	cmp	r7, r0
 800a7f0:	bf0c      	ite	eq
 800a7f2:	2300      	moveq	r3, #0
 800a7f4:	f003 0301 	andne.w	r3, r3, #1
 800a7f8:	f422 1788 	bic.w	r7, r2, #1114112	; 0x110000
 800a7fc:	f500 2020 	add.w	r0, r0, #655360	; 0xa0000
 800a800:	4561      	cmp	r1, ip
 800a802:	bf0c      	ite	eq
 800a804:	2300      	moveq	r3, #0
 800a806:	f003 0301 	andne.w	r3, r3, #1
 800a80a:	f50c 2c00 	add.w	ip, ip, #524288	; 0x80000
 800a80e:	4287      	cmp	r7, r0
 800a810:	bf0c      	ite	eq
 800a812:	2300      	moveq	r3, #0
 800a814:	f003 0301 	andne.w	r3, r3, #1
 800a818:	4f18      	ldr	r7, [pc, #96]	; (800a87c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a81a:	f500 2020 	add.w	r0, r0, #655360	; 0xa0000
 800a81e:	4561      	cmp	r1, ip
 800a820:	bf0c      	ite	eq
 800a822:	2300      	moveq	r3, #0
 800a824:	f003 0301 	andne.w	r3, r3, #1
 800a828:	42b9      	cmp	r1, r7
 800a82a:	bf0c      	ite	eq
 800a82c:	2300      	moveq	r3, #0
 800a82e:	f003 0301 	andne.w	r3, r3, #1
 800a832:	4281      	cmp	r1, r0
 800a834:	bf0c      	ite	eq
 800a836:	2300      	moveq	r3, #0
 800a838:	f003 0301 	andne.w	r3, r3, #1
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	f040 823f 	bne.w	800acc0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a842:	4a0b      	ldr	r2, [pc, #44]	; (800a870 <HAL_RCCEx_PeriphCLKConfig+0x158>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a844:	4b0e      	ldr	r3, [pc, #56]	; (800a880 <HAL_RCCEx_PeriphCLKConfig+0x168>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800a846:	6c11      	ldr	r1, [r2, #64]	; 0x40

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a848:	461f      	mov	r7, r3
    __HAL_RCC_PWR_CLK_ENABLE();
 800a84a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800a84e:	6411      	str	r1, [r2, #64]	; 0x40
 800a850:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a852:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800a856:	9201      	str	r2, [sp, #4]
 800a858:	9a01      	ldr	r2, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a860:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800a862:	f7fa fe85 	bl	8005570 <HAL_GetTick>
 800a866:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a868:	e015      	b.n	800a896 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 800a86a:	bf00      	nop
 800a86c:	1dfffff9 	.word	0x1dfffff9
 800a870:	40023800 	.word	0x40023800
 800a874:	00020300 	.word	0x00020300
 800a878:	00040300 	.word	0x00040300
 800a87c:	00140300 	.word	0x00140300
 800a880:	40007000 	.word	0x40007000
 800a884:	00080300 	.word	0x00080300
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a888:	f7fa fe72 	bl	8005570 <HAL_GetTick>
 800a88c:	eba0 0008 	sub.w	r0, r0, r8
 800a890:	2864      	cmp	r0, #100	; 0x64
 800a892:	f200 8211 	bhi.w	800acb8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	05d8      	lsls	r0, r3, #23
 800a89a:	d5f5      	bpl.n	800a888 <HAL_RCCEx_PeriphCLKConfig+0x170>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a89c:	4ac4      	ldr	r2, [pc, #784]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a89e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a8a0:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800a8a2:	f403 7040 	and.w	r0, r3, #768	; 0x300

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a8a6:	f411 7140 	ands.w	r1, r1, #768	; 0x300
 800a8aa:	d011      	beq.n	800a8d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800a8ac:	4281      	cmp	r1, r0
 800a8ae:	d00f      	beq.n	800a8d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a8b0:	6f11      	ldr	r1, [r2, #112]	; 0x70

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a8b2:	6f17      	ldr	r7, [r2, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a8b4:	f421 7140 	bic.w	r1, r1, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800a8b8:	f447 3780 	orr.w	r7, r7, #65536	; 0x10000
 800a8bc:	6717      	str	r7, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a8be:	6f17      	ldr	r7, [r2, #112]	; 0x70
 800a8c0:	f427 3780 	bic.w	r7, r7, #65536	; 0x10000
 800a8c4:	6717      	str	r7, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800a8c6:	6711      	str	r1, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a8c8:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800a8ca:	07c9      	lsls	r1, r1, #31
 800a8cc:	f100 8388 	bmi.w	800afe0 <HAL_RCCEx_PeriphCLKConfig+0x8c8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a8d0:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 800a8d4:	f000 82a4 	beq.w	800ae20 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800a8d8:	49b5      	ldr	r1, [pc, #724]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a8da:	688a      	ldr	r2, [r1, #8]
 800a8dc:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800a8e0:	608a      	str	r2, [r1, #8]
 800a8e2:	4ab3      	ldr	r2, [pc, #716]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a8e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a8e8:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800a8ea:	430b      	orrs	r3, r1
 800a8ec:	6713      	str	r3, [r2, #112]	; 0x70
 800a8ee:	6823      	ldr	r3, [r4, #0]
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a8f0:	06df      	lsls	r7, r3, #27
 800a8f2:	d510      	bpl.n	800a916 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 800a8f4:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 800a8f6:	f037 7280 	bics.w	r2, r7, #16777216	; 0x1000000
 800a8fa:	f040 82a8 	bne.w	800ae4e <HAL_RCCEx_PeriphCLKConfig+0x736>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a8fe:	4aac      	ldr	r2, [pc, #688]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a900:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 800a904:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
 800a908:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
 800a90c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800a910:	4339      	orrs	r1, r7
 800a912:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a916:	0458      	lsls	r0, r3, #17
 800a918:	d50f      	bpl.n	800a93a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800a91a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800a91c:	f431 3280 	bics.w	r2, r1, #65536	; 0x10000
 800a920:	d003      	beq.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0x212>
 800a922:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800a926:	f040 8264 	bne.w	800adf2 <HAL_RCCEx_PeriphCLKConfig+0x6da>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a92a:	48a1      	ldr	r0, [pc, #644]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a92c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800a930:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800a934:	430a      	orrs	r2, r1
 800a936:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a93a:	0419      	lsls	r1, r3, #16
 800a93c:	d50f      	bpl.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800a93e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800a940:	f431 2280 	bics.w	r2, r1, #262144	; 0x40000
 800a944:	d003      	beq.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0x236>
 800a946:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 800a94a:	f040 8259 	bne.w	800ae00 <HAL_RCCEx_PeriphCLKConfig+0x6e8>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a94e:	4898      	ldr	r0, [pc, #608]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a950:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800a954:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800a958:	430a      	orrs	r2, r1
 800a95a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a95e:	03da      	lsls	r2, r3, #15
 800a960:	d50f      	bpl.n	800a982 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800a962:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800a964:	f431 1280 	bics.w	r2, r1, #1048576	; 0x100000
 800a968:	d003      	beq.n	800a972 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800a96a:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800a96e:	f040 824f 	bne.w	800ae10 <HAL_RCCEx_PeriphCLKConfig+0x6f8>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a972:	488f      	ldr	r0, [pc, #572]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a974:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800a978:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800a97c:	430a      	orrs	r2, r1
 800a97e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a982:	039f      	lsls	r7, r3, #14
 800a984:	d50f      	bpl.n	800a9a6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800a986:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800a988:	f431 0280 	bics.w	r2, r1, #4194304	; 0x400000
 800a98c:	d003      	beq.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 800a98e:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800a992:	f040 8226 	bne.w	800ade2 <HAL_RCCEx_PeriphCLKConfig+0x6ca>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a996:	4886      	ldr	r0, [pc, #536]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a998:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800a99c:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800a9a0:	430a      	orrs	r2, r1
 800a9a2:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a9a6:	0658      	lsls	r0, r3, #25
 800a9a8:	d50b      	bpl.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800a9aa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a9ac:	2903      	cmp	r1, #3
 800a9ae:	f200 8290 	bhi.w	800aed2 <HAL_RCCEx_PeriphCLKConfig+0x7ba>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a9b2:	487f      	ldr	r0, [pc, #508]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a9b4:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800a9b8:	f022 0203 	bic.w	r2, r2, #3
 800a9bc:	430a      	orrs	r2, r1
 800a9be:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a9c2:	0619      	lsls	r1, r3, #24
 800a9c4:	d50c      	bpl.n	800a9e0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800a9c6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a9c8:	f031 020c 	bics.w	r2, r1, #12
 800a9cc:	f040 828f 	bne.w	800aeee <HAL_RCCEx_PeriphCLKConfig+0x7d6>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a9d0:	4877      	ldr	r0, [pc, #476]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a9d2:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800a9d6:	f022 020c 	bic.w	r2, r2, #12
 800a9da:	430a      	orrs	r2, r1
 800a9dc:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a9e0:	05da      	lsls	r2, r3, #23
 800a9e2:	d50c      	bpl.n	800a9fe <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800a9e4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a9e6:	f031 0230 	bics.w	r2, r1, #48	; 0x30
 800a9ea:	f040 8288 	bne.w	800aefe <HAL_RCCEx_PeriphCLKConfig+0x7e6>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a9ee:	4870      	ldr	r0, [pc, #448]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a9f0:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800a9f4:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800a9f8:	430a      	orrs	r2, r1
 800a9fa:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a9fe:	059f      	lsls	r7, r3, #22
 800aa00:	d50c      	bpl.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800aa02:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800aa04:	f031 02c0 	bics.w	r2, r1, #192	; 0xc0
 800aa08:	f040 8291 	bne.w	800af2e <HAL_RCCEx_PeriphCLKConfig+0x816>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800aa0c:	4868      	ldr	r0, [pc, #416]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800aa0e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800aa12:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800aa16:	430a      	orrs	r2, r1
 800aa18:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800aa1c:	0558      	lsls	r0, r3, #21
 800aa1e:	d50c      	bpl.n	800aa3a <HAL_RCCEx_PeriphCLKConfig+0x322>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800aa20:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800aa22:	f431 7240 	bics.w	r2, r1, #768	; 0x300
 800aa26:	f040 828a 	bne.w	800af3e <HAL_RCCEx_PeriphCLKConfig+0x826>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800aa2a:	4861      	ldr	r0, [pc, #388]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800aa2c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800aa30:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800aa34:	430a      	orrs	r2, r1
 800aa36:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800aa3a:	0519      	lsls	r1, r3, #20
 800aa3c:	d50c      	bpl.n	800aa58 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 800aa3e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800aa40:	f431 6240 	bics.w	r2, r1, #3072	; 0xc00
 800aa44:	f040 8283 	bne.w	800af4e <HAL_RCCEx_PeriphCLKConfig+0x836>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800aa48:	4859      	ldr	r0, [pc, #356]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800aa4a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800aa4e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800aa52:	430a      	orrs	r2, r1
 800aa54:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800aa58:	04da      	lsls	r2, r3, #19
 800aa5a:	d50c      	bpl.n	800aa76 <HAL_RCCEx_PeriphCLKConfig+0x35e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 800aa5c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800aa5e:	f431 5240 	bics.w	r2, r1, #12288	; 0x3000
 800aa62:	f040 827c 	bne.w	800af5e <HAL_RCCEx_PeriphCLKConfig+0x846>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800aa66:	4852      	ldr	r0, [pc, #328]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800aa68:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800aa6c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800aa70:	430a      	orrs	r2, r1
 800aa72:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800aa76:	049f      	lsls	r7, r3, #18
 800aa78:	d50c      	bpl.n	800aa94 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 800aa7a:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800aa7c:	f431 4240 	bics.w	r2, r1, #49152	; 0xc000
 800aa80:	f040 824d 	bne.w	800af1e <HAL_RCCEx_PeriphCLKConfig+0x806>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800aa84:	484a      	ldr	r0, [pc, #296]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800aa86:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800aa8a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800aa8e:	430a      	orrs	r2, r1
 800aa90:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800aa94:	0258      	lsls	r0, r3, #9
 800aa96:	d50c      	bpl.n	800aab2 <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 800aa98:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800aa9a:	f031 6280 	bics.w	r2, r1, #67108864	; 0x4000000
 800aa9e:	f040 81dd 	bne.w	800ae5c <HAL_RCCEx_PeriphCLKConfig+0x744>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800aaa2:	4843      	ldr	r0, [pc, #268]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800aaa4:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800aaa8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800aaac:	430a      	orrs	r2, r1
 800aaae:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800aab2:	0299      	lsls	r1, r3, #10
 800aab4:	d510      	bpl.n	800aad8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 800aab6:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800aab8:	f031 6200 	bics.w	r2, r1, #134217728	; 0x8000000
 800aabc:	f040 81d6 	bne.w	800ae6c <HAL_RCCEx_PeriphCLKConfig+0x754>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800aac0:	483b      	ldr	r0, [pc, #236]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800aac2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800aac6:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
      pllsaiused = 1;
 800aaca:	bf08      	it	eq
 800aacc:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800aace:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 800aad2:	430a      	orrs	r2, r1
 800aad4:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 800aad8:	f013 0f08 	tst.w	r3, #8
 800aadc:	bf18      	it	ne
 800aade:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800aae0:	035a      	lsls	r2, r3, #13
 800aae2:	d50c      	bpl.n	800aafe <HAL_RCCEx_PeriphCLKConfig+0x3e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800aae4:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800aae6:	f031 7240 	bics.w	r2, r1, #50331648	; 0x3000000
 800aaea:	f040 8210 	bne.w	800af0e <HAL_RCCEx_PeriphCLKConfig+0x7f6>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800aaee:	4830      	ldr	r0, [pc, #192]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800aaf0:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800aaf4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800aaf8:	430a      	orrs	r2, r1
 800aafa:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800aafe:	021f      	lsls	r7, r3, #8
 800ab00:	d50d      	bpl.n	800ab1e <HAL_RCCEx_PeriphCLKConfig+0x406>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 800ab02:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800ab06:	f031 5280 	bics.w	r2, r1, #268435456	; 0x10000000
 800ab0a:	f040 81b7 	bne.w	800ae7c <HAL_RCCEx_PeriphCLKConfig+0x764>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800ab0e:	4828      	ldr	r0, [pc, #160]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ab10:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800ab14:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800ab18:	430a      	orrs	r2, r1
 800ab1a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800ab1e:	0158      	lsls	r0, r3, #5
 800ab20:	d50d      	bpl.n	800ab3e <HAL_RCCEx_PeriphCLKConfig+0x426>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 800ab22:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800ab26:	f031 5200 	bics.w	r2, r1, #536870912	; 0x20000000
 800ab2a:	f040 81b0 	bne.w	800ae8e <HAL_RCCEx_PeriphCLKConfig+0x776>

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800ab2e:	4820      	ldr	r0, [pc, #128]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ab30:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800ab34:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800ab38:	430a      	orrs	r2, r1
 800ab3a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ab3e:	0119      	lsls	r1, r3, #4
 800ab40:	d50d      	bpl.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800ab42:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800ab46:	f031 7200 	bics.w	r2, r1, #33554432	; 0x2000000
 800ab4a:	f040 81b1 	bne.w	800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x798>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ab4e:	4818      	ldr	r0, [pc, #96]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ab50:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800ab54:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800ab58:	430a      	orrs	r2, r1
 800ab5a:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800ab5e:	00da      	lsls	r2, r3, #3
 800ab60:	d50d      	bpl.n	800ab7e <HAL_RCCEx_PeriphCLKConfig+0x466>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 800ab62:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800ab66:	f032 6380 	bics.w	r3, r2, #67108864	; 0x4000000
 800ab6a:	f040 81aa 	bne.w	800aec2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800ab6e:	4910      	ldr	r1, [pc, #64]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ab70:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 800ab74:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ab78:	4313      	orrs	r3, r2
 800ab7a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800ab7e:	2e01      	cmp	r6, #1
 800ab80:	f000 80a9 	beq.w	800acd6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 800ab84:	6823      	ldr	r3, [r4, #0]
 800ab86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab8a:	f000 80a4 	beq.w	800acd6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800ab8e:	2d01      	cmp	r5, #1
 800ab90:	d003      	beq.n	800ab9a <HAL_RCCEx_PeriphCLKConfig+0x482>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800ab92:	2000      	movs	r0, #0
}
 800ab94:	b003      	add	sp, #12
 800ab96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 800ab9a:	4b05      	ldr	r3, [pc, #20]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ab9c:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ab9e:	461d      	mov	r5, r3
    __HAL_RCC_PLLSAI_DISABLE();
 800aba0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800aba4:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800aba6:	f7fa fce3 	bl	8005570 <HAL_GetTick>
 800abaa:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800abac:	e007      	b.n	800abbe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800abae:	bf00      	nop
 800abb0:	40023800 	.word	0x40023800
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800abb4:	f7fa fcdc 	bl	8005570 <HAL_GetTick>
 800abb8:	1b80      	subs	r0, r0, r6
 800abba:	2864      	cmp	r0, #100	; 0x64
 800abbc:	d87c      	bhi.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800abbe:	682b      	ldr	r3, [r5, #0]
 800abc0:	009f      	lsls	r7, r3, #2
 800abc2:	d4f7      	bmi.n	800abb4 <HAL_RCCEx_PeriphCLKConfig+0x49c>
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 800abc4:	6963      	ldr	r3, [r4, #20]
 800abc6:	3b32      	subs	r3, #50	; 0x32
 800abc8:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800abcc:	d904      	bls.n	800abd8 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
 800abce:	f240 2146 	movw	r1, #582	; 0x246
 800abd2:	48b3      	ldr	r0, [pc, #716]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800abd4:	f7f8 f926 	bl	8002e24 <assert_failed>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800abd8:	6823      	ldr	r3, [r4, #0]
 800abda:	031d      	lsls	r5, r3, #12
 800abdc:	d501      	bpl.n	800abe2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800abde:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800abe0:	b11a      	cbz	r2, 800abea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800abe2:	02d8      	lsls	r0, r3, #11
 800abe4:	d526      	bpl.n	800ac34 <HAL_RCCEx_PeriphCLKConfig+0x51c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800abe6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800abe8:	bb22      	cbnz	r2, 800ac34 <HAL_RCCEx_PeriphCLKConfig+0x51c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 800abea:	69a3      	ldr	r3, [r4, #24]
 800abec:	3b02      	subs	r3, #2
 800abee:	2b0d      	cmp	r3, #13
 800abf0:	f200 8259 	bhi.w	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0x98e>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 800abf4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800abf6:	1e59      	subs	r1, r3, #1
 800abf8:	291f      	cmp	r1, #31
 800abfa:	f200 824c 	bhi.w	800b096 <HAL_RCCEx_PeriphCLKConfig+0x97e>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800abfe:	4aa9      	ldr	r2, [pc, #676]	; (800aea4 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800ac00:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800ac02:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800ac06:	f8d2 6088 	ldr.w	r6, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800ac0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ac0e:	69a0      	ldr	r0, [r4, #24]
 800ac10:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 800ac14:	4333      	orrs	r3, r6
 800ac16:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800ac1a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800ac1e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800ac22:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800ac26:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800ac2a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800ac2e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800ac32:	6823      	ldr	r3, [r4, #0]
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800ac34:	0299      	lsls	r1, r3, #10
 800ac36:	d504      	bpl.n	800ac42 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800ac38:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800ac3a:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 800ac3e:	f000 8215 	beq.w	800b06c <HAL_RCCEx_PeriphCLKConfig+0x954>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800ac42:	071a      	lsls	r2, r3, #28
 800ac44:	d526      	bpl.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0x57c>
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 800ac46:	69e3      	ldr	r3, [r4, #28]
 800ac48:	3b02      	subs	r3, #2
 800ac4a:	2b05      	cmp	r3, #5
 800ac4c:	d904      	bls.n	800ac58 <HAL_RCCEx_PeriphCLKConfig+0x540>
 800ac4e:	f240 2171 	movw	r1, #625	; 0x271
 800ac52:	4893      	ldr	r0, [pc, #588]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800ac54:	f7f8 f8e6 	bl	8002e24 <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 800ac58:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800ac5a:	f430 3340 	bics.w	r3, r0, #196608	; 0x30000
 800ac5e:	f040 8228 	bne.w	800b0b2 <HAL_RCCEx_PeriphCLKConfig+0x99a>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ac62:	4a90      	ldr	r2, [pc, #576]	; (800aea4 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800ac64:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ac66:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800ac6a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800ac6e:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800ac72:	69e4      	ldr	r4, [r4, #28]
 800ac74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ac78:	430b      	orrs	r3, r1
 800ac7a:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800ac7e:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
 800ac82:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800ac86:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800ac8a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800ac8e:	4303      	orrs	r3, r0
 800ac90:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 800ac94:	4b83      	ldr	r3, [pc, #524]	; (800aea4 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800ac96:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ac98:	461c      	mov	r4, r3
    __HAL_RCC_PLLSAI_ENABLE();
 800ac9a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800ac9e:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800aca0:	f7fa fc66 	bl	8005570 <HAL_GetTick>
 800aca4:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800aca6:	6823      	ldr	r3, [r4, #0]
 800aca8:	009b      	lsls	r3, r3, #2
 800acaa:	f53f af72 	bmi.w	800ab92 <HAL_RCCEx_PeriphCLKConfig+0x47a>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800acae:	f7fa fc5f 	bl	8005570 <HAL_GetTick>
 800acb2:	1b40      	subs	r0, r0, r5
 800acb4:	2864      	cmp	r0, #100	; 0x64
 800acb6:	d9f6      	bls.n	800aca6 <HAL_RCCEx_PeriphCLKConfig+0x58e>
        return HAL_TIMEOUT;
 800acb8:	2003      	movs	r0, #3
}
 800acba:	b003      	add	sp, #12
 800acbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800acc0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800acc4:	4b78      	ldr	r3, [pc, #480]	; (800aea8 <HAL_RCCEx_PeriphCLKConfig+0x790>)
 800acc6:	429a      	cmp	r2, r3
 800acc8:	f43f adbb 	beq.w	800a842 <HAL_RCCEx_PeriphCLKConfig+0x12a>
 800accc:	21b9      	movs	r1, #185	; 0xb9
 800acce:	4874      	ldr	r0, [pc, #464]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800acd0:	f7f8 f8a8 	bl	8002e24 <assert_failed>
 800acd4:	e5b5      	b.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    __HAL_RCC_PLLI2S_DISABLE();
 800acd6:	4b73      	ldr	r3, [pc, #460]	; (800aea4 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800acd8:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800acda:	461e      	mov	r6, r3
    __HAL_RCC_PLLI2S_DISABLE();
 800acdc:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800ace0:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800ace2:	f7fa fc45 	bl	8005570 <HAL_GetTick>
 800ace6:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ace8:	e004      	b.n	800acf4 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800acea:	f7fa fc41 	bl	8005570 <HAL_GetTick>
 800acee:	1bc0      	subs	r0, r0, r7
 800acf0:	2864      	cmp	r0, #100	; 0x64
 800acf2:	d8e1      	bhi.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800acf4:	6833      	ldr	r3, [r6, #0]
 800acf6:	011b      	lsls	r3, r3, #4
 800acf8:	d4f7      	bmi.n	800acea <HAL_RCCEx_PeriphCLKConfig+0x5d2>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 800acfa:	6863      	ldr	r3, [r4, #4]
 800acfc:	3b32      	subs	r3, #50	; 0x32
 800acfe:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800ad02:	f200 80ee 	bhi.w	800aee2 <HAL_RCCEx_PeriphCLKConfig+0x7ca>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800ad06:	6823      	ldr	r3, [r4, #0]
 800ad08:	07df      	lsls	r7, r3, #31
 800ad0a:	d503      	bpl.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 800ad0c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800ad0e:	2a00      	cmp	r2, #0
 800ad10:	f000 8150 	beq.w	800afb4 <HAL_RCCEx_PeriphCLKConfig+0x89c>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800ad14:	031e      	lsls	r6, r3, #12
 800ad16:	d504      	bpl.n	800ad22 <HAL_RCCEx_PeriphCLKConfig+0x60a>
 800ad18:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800ad1a:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800ad1e:	f000 8126 	beq.w	800af6e <HAL_RCCEx_PeriphCLKConfig+0x856>
 800ad22:	02d8      	lsls	r0, r3, #11
 800ad24:	d504      	bpl.n	800ad30 <HAL_RCCEx_PeriphCLKConfig+0x618>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800ad26:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ad28:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800ad2c:	f000 811f 	beq.w	800af6e <HAL_RCCEx_PeriphCLKConfig+0x856>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ad30:	01d9      	lsls	r1, r3, #7
 800ad32:	d514      	bpl.n	800ad5e <HAL_RCCEx_PeriphCLKConfig+0x646>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800ad34:	6927      	ldr	r7, [r4, #16]
 800ad36:	2f03      	cmp	r7, #3
 800ad38:	f200 8175 	bhi.w	800b026 <HAL_RCCEx_PeriphCLKConfig+0x90e>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800ad3c:	4959      	ldr	r1, [pc, #356]	; (800aea4 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800ad3e:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800ad40:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800ad44:	f8d1 6084 	ldr.w	r6, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800ad48:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800ad4c:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 800ad50:	4332      	orrs	r2, r6
 800ad52:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800ad56:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800ad5a:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800ad5e:	019a      	lsls	r2, r3, #6
 800ad60:	d51a      	bpl.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0x680>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800ad62:	6923      	ldr	r3, [r4, #16]
 800ad64:	2b03      	cmp	r3, #3
 800ad66:	f200 8173 	bhi.w	800b050 <HAL_RCCEx_PeriphCLKConfig+0x938>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800ad6a:	68a3      	ldr	r3, [r4, #8]
 800ad6c:	3b02      	subs	r3, #2
 800ad6e:	2b05      	cmp	r3, #5
 800ad70:	f200 8168 	bhi.w	800b044 <HAL_RCCEx_PeriphCLKConfig+0x92c>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800ad74:	68e2      	ldr	r2, [r4, #12]
 800ad76:	1e93      	subs	r3, r2, #2
 800ad78:	2b0d      	cmp	r3, #13
 800ad7a:	f200 815c 	bhi.w	800b036 <HAL_RCCEx_PeriphCLKConfig+0x91e>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800ad7e:	6923      	ldr	r3, [r4, #16]
 800ad80:	6861      	ldr	r1, [r4, #4]
 800ad82:	041b      	lsls	r3, r3, #16
 800ad84:	68a0      	ldr	r0, [r4, #8]
 800ad86:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800ad8a:	4946      	ldr	r1, [pc, #280]	; (800aea4 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800ad8c:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 800ad90:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ad94:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800ad98:	4b42      	ldr	r3, [pc, #264]	; (800aea4 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800ad9a:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ad9c:	461e      	mov	r6, r3
    __HAL_RCC_PLLI2S_ENABLE();
 800ad9e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800ada2:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800ada4:	f7fa fbe4 	bl	8005570 <HAL_GetTick>
 800ada8:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800adaa:	e004      	b.n	800adb6 <HAL_RCCEx_PeriphCLKConfig+0x69e>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800adac:	f7fa fbe0 	bl	8005570 <HAL_GetTick>
 800adb0:	1bc0      	subs	r0, r0, r7
 800adb2:	2864      	cmp	r0, #100	; 0x64
 800adb4:	d880      	bhi.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800adb6:	6833      	ldr	r3, [r6, #0]
 800adb8:	011b      	lsls	r3, r3, #4
 800adba:	d5f7      	bpl.n	800adac <HAL_RCCEx_PeriphCLKConfig+0x694>
 800adbc:	e6e7      	b.n	800ab8e <HAL_RCCEx_PeriphCLKConfig+0x476>
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800adbe:	2174      	movs	r1, #116	; 0x74
 800adc0:	4837      	ldr	r0, [pc, #220]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800adc2:	f7f8 f82f 	bl	8002e24 <assert_failed>
 800adc6:	6823      	ldr	r3, [r4, #0]
 800adc8:	e4b0      	b.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0x14>
  uint32_t pllsaiused = 0;
 800adca:	2500      	movs	r5, #0
      plli2sused = 1;
 800adcc:	2601      	movs	r6, #1
 800adce:	e4d8      	b.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0x6a>
      plli2sused = 1;
 800add0:	2601      	movs	r6, #1
 800add2:	e4ed      	b.n	800a7b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800add4:	217a      	movs	r1, #122	; 0x7a
 800add6:	4832      	ldr	r0, [pc, #200]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800add8:	f7f8 f824 	bl	8002e24 <assert_failed>
 800addc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800adde:	6823      	ldr	r3, [r4, #0]
 800ade0:	e4ac      	b.n	800a73c <HAL_RCCEx_PeriphCLKConfig+0x24>
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800ade2:	f240 111b 	movw	r1, #283	; 0x11b
 800ade6:	482e      	ldr	r0, [pc, #184]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800ade8:	f7f8 f81c 	bl	8002e24 <assert_failed>
 800adec:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800adee:	6823      	ldr	r3, [r4, #0]
 800adf0:	e5d1      	b.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800adf2:	21fd      	movs	r1, #253	; 0xfd
 800adf4:	482a      	ldr	r0, [pc, #168]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800adf6:	f7f8 f815 	bl	8002e24 <assert_failed>
 800adfa:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800adfc:	6823      	ldr	r3, [r4, #0]
 800adfe:	e594      	b.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0x212>
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800ae00:	f240 1107 	movw	r1, #263	; 0x107
 800ae04:	4826      	ldr	r0, [pc, #152]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800ae06:	f7f8 f80d 	bl	8002e24 <assert_failed>
 800ae0a:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800ae0c:	6823      	ldr	r3, [r4, #0]
 800ae0e:	e59e      	b.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0x236>
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800ae10:	f240 1111 	movw	r1, #273	; 0x111
 800ae14:	4822      	ldr	r0, [pc, #136]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800ae16:	f7f8 f805 	bl	8002e24 <assert_failed>
 800ae1a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800ae1c:	6823      	ldr	r3, [r4, #0]
 800ae1e:	e5a8      	b.n	800a972 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ae20:	4820      	ldr	r0, [pc, #128]	; (800aea4 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800ae22:	4922      	ldr	r1, [pc, #136]	; (800aeac <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800ae24:	6882      	ldr	r2, [r0, #8]
 800ae26:	4019      	ands	r1, r3
 800ae28:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800ae2c:	430a      	orrs	r2, r1
 800ae2e:	6082      	str	r2, [r0, #8]
 800ae30:	e557      	b.n	800a8e2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 800ae32:	219e      	movs	r1, #158	; 0x9e
 800ae34:	481a      	ldr	r0, [pc, #104]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800ae36:	f7f7 fff5 	bl	8002e24 <assert_failed>
 800ae3a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ae3c:	6823      	ldr	r3, [r4, #0]
 800ae3e:	e4a7      	b.n	800a790 <HAL_RCCEx_PeriphCLKConfig+0x78>
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800ae40:	218a      	movs	r1, #138	; 0x8a
 800ae42:	4817      	ldr	r0, [pc, #92]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800ae44:	f7f7 ffee 	bl	8002e24 <assert_failed>
 800ae48:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800ae4a:	6823      	ldr	r3, [r4, #0]
 800ae4c:	e489      	b.n	800a762 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 800ae4e:	21f3      	movs	r1, #243	; 0xf3
 800ae50:	4813      	ldr	r0, [pc, #76]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800ae52:	f7f7 ffe7 	bl	8002e24 <assert_failed>
 800ae56:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 800ae58:	6823      	ldr	r3, [r4, #0]
 800ae5a:	e550      	b.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x1e6>
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 800ae5c:	f240 1175 	movw	r1, #373	; 0x175
 800ae60:	480f      	ldr	r0, [pc, #60]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800ae62:	f7f7 ffdf 	bl	8002e24 <assert_failed>
 800ae66:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800ae68:	6823      	ldr	r3, [r4, #0]
 800ae6a:	e61a      	b.n	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 800ae6c:	f240 117f 	movw	r1, #383	; 0x17f
 800ae70:	480b      	ldr	r0, [pc, #44]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800ae72:	f7f7 ffd7 	bl	8002e24 <assert_failed>
 800ae76:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800ae78:	6823      	ldr	r3, [r4, #0]
 800ae7a:	e621      	b.n	800aac0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 800ae7c:	f240 11a1 	movw	r1, #417	; 0x1a1
 800ae80:	4807      	ldr	r0, [pc, #28]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800ae82:	f7f7 ffcf 	bl	8002e24 <assert_failed>
 800ae86:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800ae8a:	6823      	ldr	r3, [r4, #0]
 800ae8c:	e63f      	b.n	800ab0e <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 800ae8e:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 800ae92:	4803      	ldr	r0, [pc, #12]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800ae94:	f7f7 ffc6 	bl	8002e24 <assert_failed>
 800ae98:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800ae9c:	6823      	ldr	r3, [r4, #0]
 800ae9e:	e646      	b.n	800ab2e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800aea0:	0802679c 	.word	0x0802679c
 800aea4:	40023800 	.word	0x40023800
 800aea8:	001c0300 	.word	0x001c0300
 800aeac:	0ffffcff 	.word	0x0ffffcff
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800aeb0:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 800aeb4:	4886      	ldr	r0, [pc, #536]	; (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800aeb6:	f7f7 ffb5 	bl	8002e24 <assert_failed>
 800aeba:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800aebe:	6823      	ldr	r3, [r4, #0]
 800aec0:	e645      	b.n	800ab4e <HAL_RCCEx_PeriphCLKConfig+0x436>
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 800aec2:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800aec6:	4882      	ldr	r0, [pc, #520]	; (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800aec8:	f7f7 ffac 	bl	8002e24 <assert_failed>
 800aecc:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800aed0:	e64d      	b.n	800ab6e <HAL_RCCEx_PeriphCLKConfig+0x456>
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800aed2:	f240 1125 	movw	r1, #293	; 0x125
 800aed6:	487e      	ldr	r0, [pc, #504]	; (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800aed8:	f7f7 ffa4 	bl	8002e24 <assert_failed>
 800aedc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800aede:	6823      	ldr	r3, [r4, #0]
 800aee0:	e567      	b.n	800a9b2 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 800aee2:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 800aee6:	487a      	ldr	r0, [pc, #488]	; (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800aee8:	f7f7 ff9c 	bl	8002e24 <assert_failed>
 800aeec:	e70b      	b.n	800ad06 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800aeee:	f240 112f 	movw	r1, #303	; 0x12f
 800aef2:	4877      	ldr	r0, [pc, #476]	; (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800aef4:	f7f7 ff96 	bl	8002e24 <assert_failed>
 800aef8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800aefa:	6823      	ldr	r3, [r4, #0]
 800aefc:	e568      	b.n	800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800aefe:	f240 1139 	movw	r1, #313	; 0x139
 800af02:	4873      	ldr	r0, [pc, #460]	; (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800af04:	f7f7 ff8e 	bl	8002e24 <assert_failed>
 800af08:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800af0a:	6823      	ldr	r3, [r4, #0]
 800af0c:	e56f      	b.n	800a9ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800af0e:	f240 1197 	movw	r1, #407	; 0x197
 800af12:	486f      	ldr	r0, [pc, #444]	; (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800af14:	f7f7 ff86 	bl	8002e24 <assert_failed>
 800af18:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800af1a:	6823      	ldr	r3, [r4, #0]
 800af1c:	e5e7      	b.n	800aaee <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 800af1e:	f240 116b 	movw	r1, #363	; 0x16b
 800af22:	486b      	ldr	r0, [pc, #428]	; (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800af24:	f7f7 ff7e 	bl	8002e24 <assert_failed>
 800af28:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800af2a:	6823      	ldr	r3, [r4, #0]
 800af2c:	e5aa      	b.n	800aa84 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800af2e:	f240 1143 	movw	r1, #323	; 0x143
 800af32:	4867      	ldr	r0, [pc, #412]	; (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800af34:	f7f7 ff76 	bl	8002e24 <assert_failed>
 800af38:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800af3a:	6823      	ldr	r3, [r4, #0]
 800af3c:	e566      	b.n	800aa0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800af3e:	f240 114d 	movw	r1, #333	; 0x14d
 800af42:	4863      	ldr	r0, [pc, #396]	; (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800af44:	f7f7 ff6e 	bl	8002e24 <assert_failed>
 800af48:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800af4a:	6823      	ldr	r3, [r4, #0]
 800af4c:	e56d      	b.n	800aa2a <HAL_RCCEx_PeriphCLKConfig+0x312>
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 800af4e:	f240 1157 	movw	r1, #343	; 0x157
 800af52:	485f      	ldr	r0, [pc, #380]	; (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800af54:	f7f7 ff66 	bl	8002e24 <assert_failed>
 800af58:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800af5a:	6823      	ldr	r3, [r4, #0]
 800af5c:	e574      	b.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0x330>
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 800af5e:	f240 1161 	movw	r1, #353	; 0x161
 800af62:	485b      	ldr	r0, [pc, #364]	; (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800af64:	f7f7 ff5e 	bl	8002e24 <assert_failed>
 800af68:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800af6a:	6823      	ldr	r3, [r4, #0]
 800af6c:	e57b      	b.n	800aa66 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800af6e:	68e3      	ldr	r3, [r4, #12]
 800af70:	3b02      	subs	r3, #2
 800af72:	2b0d      	cmp	r3, #13
 800af74:	d851      	bhi.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0x902>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 800af76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af78:	1e5e      	subs	r6, r3, #1
 800af7a:	2e1f      	cmp	r6, #31
 800af7c:	d845      	bhi.n	800b00a <HAL_RCCEx_PeriphCLKConfig+0x8f2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800af7e:	4a55      	ldr	r2, [pc, #340]	; (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800af80:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800af82:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800af86:	f8d2 7084 	ldr.w	r7, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800af8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800af8e:	68e1      	ldr	r1, [r4, #12]
 800af90:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 800af94:	433b      	orrs	r3, r7
 800af96:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800af9a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800af9e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800afa2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800afa6:	f023 031f 	bic.w	r3, r3, #31
 800afaa:	4333      	orrs	r3, r6
 800afac:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800afb0:	6823      	ldr	r3, [r4, #0]
 800afb2:	e6bd      	b.n	800ad30 <HAL_RCCEx_PeriphCLKConfig+0x618>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800afb4:	68a7      	ldr	r7, [r4, #8]
 800afb6:	1eba      	subs	r2, r7, #2
 800afb8:	2a05      	cmp	r2, #5
 800afba:	d84f      	bhi.n	800b05c <HAL_RCCEx_PeriphCLKConfig+0x944>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800afbc:	4945      	ldr	r1, [pc, #276]	; (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800afbe:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800afc0:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800afc4:	f8d1 6084 	ldr.w	r6, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800afc8:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800afcc:	f006 6670 	and.w	r6, r6, #251658240	; 0xf000000
 800afd0:	4332      	orrs	r2, r6
 800afd2:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800afd6:	ea42 7207 	orr.w	r2, r2, r7, lsl #28
 800afda:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
 800afde:	e699      	b.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800afe0:	4617      	mov	r7, r2
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800afe2:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800afe6:	f7fa fac3 	bl	8005570 <HAL_GetTick>
 800afea:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800afec:	e006      	b.n	800affc <HAL_RCCEx_PeriphCLKConfig+0x8e4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800afee:	f7fa fabf 	bl	8005570 <HAL_GetTick>
 800aff2:	eba0 0009 	sub.w	r0, r0, r9
 800aff6:	4540      	cmp	r0, r8
 800aff8:	f63f ae5e 	bhi.w	800acb8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800affc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800affe:	079b      	lsls	r3, r3, #30
 800b000:	d5f5      	bpl.n	800afee <HAL_RCCEx_PeriphCLKConfig+0x8d6>
 800b002:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b004:	f403 7040 	and.w	r0, r3, #768	; 0x300
 800b008:	e462      	b.n	800a8d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 800b00a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800b00e:	4830      	ldr	r0, [pc, #192]	; (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b010:	f7f7 ff08 	bl	8002e24 <assert_failed>
 800b014:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b016:	1e5e      	subs	r6, r3, #1
 800b018:	e7b1      	b.n	800af7e <HAL_RCCEx_PeriphCLKConfig+0x866>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800b01a:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 800b01e:	482c      	ldr	r0, [pc, #176]	; (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b020:	f7f7 ff00 	bl	8002e24 <assert_failed>
 800b024:	e7a7      	b.n	800af76 <HAL_RCCEx_PeriphCLKConfig+0x85e>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800b026:	f240 2107 	movw	r1, #519	; 0x207
 800b02a:	4829      	ldr	r0, [pc, #164]	; (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b02c:	f7f7 fefa 	bl	8002e24 <assert_failed>
 800b030:	6927      	ldr	r7, [r4, #16]
 800b032:	6823      	ldr	r3, [r4, #0]
 800b034:	e682      	b.n	800ad3c <HAL_RCCEx_PeriphCLKConfig+0x624>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800b036:	f44f 7106 	mov.w	r1, #536	; 0x218
 800b03a:	4825      	ldr	r0, [pc, #148]	; (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b03c:	f7f7 fef2 	bl	8002e24 <assert_failed>
 800b040:	68e2      	ldr	r2, [r4, #12]
 800b042:	e69c      	b.n	800ad7e <HAL_RCCEx_PeriphCLKConfig+0x666>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800b044:	f240 2117 	movw	r1, #535	; 0x217
 800b048:	4821      	ldr	r0, [pc, #132]	; (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b04a:	f7f7 feeb 	bl	8002e24 <assert_failed>
 800b04e:	e691      	b.n	800ad74 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800b050:	f240 2116 	movw	r1, #534	; 0x216
 800b054:	481e      	ldr	r0, [pc, #120]	; (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b056:	f7f7 fee5 	bl	8002e24 <assert_failed>
 800b05a:	e686      	b.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0x652>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800b05c:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 800b060:	481b      	ldr	r0, [pc, #108]	; (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b062:	f7f7 fedf 	bl	8002e24 <assert_failed>
 800b066:	68a7      	ldr	r7, [r4, #8]
 800b068:	6823      	ldr	r3, [r4, #0]
 800b06a:	e7a7      	b.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0x8a4>
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 800b06c:	6a26      	ldr	r6, [r4, #32]
 800b06e:	2e03      	cmp	r6, #3
 800b070:	d826      	bhi.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b072:	4918      	ldr	r1, [pc, #96]	; (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800b074:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b076:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b07a:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800b07e:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800b082:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800b086:	4302      	orrs	r2, r0
 800b088:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 800b08c:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800b090:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
 800b094:	e5d5      	b.n	800ac42 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 800b096:	f240 214f 	movw	r1, #591	; 0x24f
 800b09a:	480d      	ldr	r0, [pc, #52]	; (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b09c:	f7f7 fec2 	bl	8002e24 <assert_failed>
 800b0a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b0a2:	1e59      	subs	r1, r3, #1
 800b0a4:	e5ab      	b.n	800abfe <HAL_RCCEx_PeriphCLKConfig+0x4e6>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 800b0a6:	f240 214d 	movw	r1, #589	; 0x24d
 800b0aa:	4809      	ldr	r0, [pc, #36]	; (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b0ac:	f7f7 feba 	bl	8002e24 <assert_failed>
 800b0b0:	e5a0      	b.n	800abf4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 800b0b2:	4807      	ldr	r0, [pc, #28]	; (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b0b4:	f240 2172 	movw	r1, #626	; 0x272
 800b0b8:	f7f7 feb4 	bl	8002e24 <assert_failed>
 800b0bc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800b0be:	e5d0      	b.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0x54a>
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 800b0c0:	f240 2162 	movw	r1, #610	; 0x262
 800b0c4:	4802      	ldr	r0, [pc, #8]	; (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b0c6:	f7f7 fead 	bl	8002e24 <assert_failed>
 800b0ca:	6a26      	ldr	r6, [r4, #32]
 800b0cc:	6823      	ldr	r3, [r4, #0]
 800b0ce:	e7d0      	b.n	800b072 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800b0d0:	0802679c 	.word	0x0802679c
 800b0d4:	40023800 	.word	0x40023800

0800b0d8 <HAL_RNG_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800b0d8:	b1f8      	cbz	r0, 800b11a <HAL_RNG_Init+0x42>
  {
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
 800b0da:	6802      	ldr	r2, [r0, #0]
{
 800b0dc:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
 800b0de:	4b10      	ldr	r3, [pc, #64]	; (800b120 <HAL_RNG_Init+0x48>)
 800b0e0:	4604      	mov	r4, r0
 800b0e2:	429a      	cmp	r2, r3
 800b0e4:	d003      	beq.n	800b0ee <HAL_RNG_Init+0x16>
 800b0e6:	21a3      	movs	r1, #163	; 0xa3
 800b0e8:	480e      	ldr	r0, [pc, #56]	; (800b124 <HAL_RNG_Init+0x4c>)
 800b0ea:	f7f7 fe9b 	bl	8002e24 <assert_failed>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800b0ee:	7963      	ldrb	r3, [r4, #5]
 800b0f0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b0f4:	b163      	cbz	r3, 800b110 <HAL_RNG_Init+0x38>
  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800b0f6:	6821      	ldr	r1, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 800b0f8:	2302      	movs	r3, #2

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800b0fa:	2200      	movs	r2, #0
  hrng->State = HAL_RNG_STATE_READY;
 800b0fc:	2501      	movs	r5, #1
  hrng->State = HAL_RNG_STATE_BUSY;
 800b0fe:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 800b100:	680b      	ldr	r3, [r1, #0]

  /* Return function status */
  return HAL_OK;
 800b102:	4610      	mov	r0, r2
  __HAL_RNG_ENABLE(hrng);
 800b104:	f043 0304 	orr.w	r3, r3, #4
 800b108:	600b      	str	r3, [r1, #0]
  hrng->State = HAL_RNG_STATE_READY;
 800b10a:	7165      	strb	r5, [r4, #5]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800b10c:	60a2      	str	r2, [r4, #8]
}
 800b10e:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 800b110:	7122      	strb	r2, [r4, #4]
    HAL_RNG_MspInit(hrng);
 800b112:	4620      	mov	r0, r4
 800b114:	f7f8 fea8 	bl	8003e68 <HAL_RNG_MspInit>
 800b118:	e7ed      	b.n	800b0f6 <HAL_RNG_Init+0x1e>
    return HAL_ERROR;
 800b11a:	2001      	movs	r0, #1
}
 800b11c:	4770      	bx	lr
 800b11e:	bf00      	nop
 800b120:	50060800 	.word	0x50060800
 800b124:	080267d8 	.word	0x080267d8

0800b128 <SPI_WaitFifoStateUntilTimeout.part.1>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800b128:	4603      	mov	r3, r0
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b12a:	e9d0 2000 	ldrd	r2, r0, [r0]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b12e:	6851      	ldr	r1, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b130:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b134:	f021 01e0 	bic.w	r1, r1, #224	; 0xe0
 800b138:	6051      	str	r1, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b13a:	d013      	beq.n	800b164 <SPI_WaitFifoStateUntilTimeout.part.1+0x3c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b13c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800b13e:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800b142:	d107      	bne.n	800b154 <SPI_WaitFifoStateUntilTimeout.part.1+0x2c>
        {
          SPI_RESET_CRC(hspi);
 800b144:	6811      	ldr	r1, [r2, #0]
 800b146:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800b14a:	6011      	str	r1, [r2, #0]
 800b14c:	6811      	ldr	r1, [r2, #0]
 800b14e:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 800b152:	6011      	str	r1, [r2, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b154:	2101      	movs	r1, #1

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b156:	2200      	movs	r2, #0
      }
    }
  }

  return HAL_OK;
}
 800b158:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 800b15a:	f883 105d 	strb.w	r1, [r3, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800b15e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
}
 800b162:	4770      	bx	lr
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b164:	6899      	ldr	r1, [r3, #8]
 800b166:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800b16a:	d002      	beq.n	800b172 <SPI_WaitFifoStateUntilTimeout.part.1+0x4a>
 800b16c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b170:	d1e4      	bne.n	800b13c <SPI_WaitFifoStateUntilTimeout.part.1+0x14>
          __HAL_SPI_DISABLE(hspi);
 800b172:	6811      	ldr	r1, [r2, #0]
 800b174:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800b178:	6011      	str	r1, [r2, #0]
 800b17a:	e7df      	b.n	800b13c <SPI_WaitFifoStateUntilTimeout.part.1+0x14>

0800b17c <SPI_WaitFlagStateUntilTimeout.constprop.9>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800b17c:	b570      	push	{r4, r5, r6, lr}
 800b17e:	4605      	mov	r5, r0
 800b180:	460c      	mov	r4, r1
 800b182:	4616      	mov	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b184:	682b      	ldr	r3, [r5, #0]
 800b186:	e001      	b.n	800b18c <SPI_WaitFlagStateUntilTimeout.constprop.9+0x10>
    if (Timeout != HAL_MAX_DELAY)
 800b188:	1c62      	adds	r2, r4, #1
 800b18a:	d104      	bne.n	800b196 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x1a>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b18c:	6898      	ldr	r0, [r3, #8]
 800b18e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b192:	d1f9      	bne.n	800b188 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
}
 800b194:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800b196:	f7fa f9eb 	bl	8005570 <HAL_GetTick>
 800b19a:	1b80      	subs	r0, r0, r6
 800b19c:	4284      	cmp	r4, r0
 800b19e:	d8f1      	bhi.n	800b184 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x8>
 800b1a0:	4628      	mov	r0, r5
}
 800b1a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b1a6:	f7ff bfbf 	b.w	800b128 <SPI_WaitFifoStateUntilTimeout.part.1>
 800b1aa:	bf00      	nop

0800b1ac <SPI_WaitFifoStateUntilTimeout.constprop.10>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800b1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ae:	4606      	mov	r6, r0
 800b1b0:	460c      	mov	r4, r1
 800b1b2:	4615      	mov	r5, r2
 800b1b4:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((hspi->Instance->SR & Fifo) != State)
 800b1b6:	6831      	ldr	r1, [r6, #0]
 800b1b8:	e005      	b.n	800b1c6 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x1a>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b1ba:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 800b1be:	d100      	bne.n	800b1c2 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x16>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800b1c0:	7b0a      	ldrb	r2, [r1, #12]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b1c2:	1c6b      	adds	r3, r5, #1
 800b1c4:	d103      	bne.n	800b1ce <SPI_WaitFifoStateUntilTimeout.constprop.10+0x22>
  while ((hspi->Instance->SR & Fifo) != State)
 800b1c6:	6888      	ldr	r0, [r1, #8]
 800b1c8:	4020      	ands	r0, r4
 800b1ca:	d1f6      	bne.n	800b1ba <SPI_WaitFifoStateUntilTimeout.constprop.10+0xe>
      }
    }
  }

  return HAL_OK;
}
 800b1cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800b1ce:	f7fa f9cf 	bl	8005570 <HAL_GetTick>
 800b1d2:	1bc0      	subs	r0, r0, r7
 800b1d4:	4285      	cmp	r5, r0
 800b1d6:	d8ee      	bhi.n	800b1b6 <SPI_WaitFifoStateUntilTimeout.constprop.10+0xa>
 800b1d8:	4630      	mov	r0, r6
}
 800b1da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b1de:	f7ff bfa3 	b.w	800b128 <SPI_WaitFifoStateUntilTimeout.part.1>
 800b1e2:	bf00      	nop

0800b1e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b1e4:	b570      	push	{r4, r5, r6, lr}
 800b1e6:	460d      	mov	r5, r1
 800b1e8:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b1ea:	4613      	mov	r3, r2
 800b1ec:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800b1f0:	462a      	mov	r2, r5
{
 800b1f2:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b1f4:	f7ff ffda 	bl	800b1ac <SPI_WaitFifoStateUntilTimeout.constprop.10>
 800b1f8:	b970      	cbnz	r0, 800b218 <SPI_EndRxTxTransaction+0x34>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b1fa:	4632      	mov	r2, r6
 800b1fc:	4629      	mov	r1, r5
 800b1fe:	4620      	mov	r0, r4
 800b200:	f7ff ffbc 	bl	800b17c <SPI_WaitFlagStateUntilTimeout.constprop.9>
 800b204:	b940      	cbnz	r0, 800b218 <SPI_EndRxTxTransaction+0x34>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b206:	4633      	mov	r3, r6
 800b208:	462a      	mov	r2, r5
 800b20a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b20e:	4620      	mov	r0, r4
 800b210:	f7ff ffcc 	bl	800b1ac <SPI_WaitFifoStateUntilTimeout.constprop.10>
 800b214:	b900      	cbnz	r0, 800b218 <SPI_EndRxTxTransaction+0x34>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 800b216:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b218:	6e23      	ldr	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800b21a:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b21c:	f043 0320 	orr.w	r3, r3, #32
 800b220:	6623      	str	r3, [r4, #96]	; 0x60
}
 800b222:	bd70      	pop	{r4, r5, r6, pc}

0800b224 <HAL_SPI_Init>:
  if (hspi == NULL)
 800b224:	2800      	cmp	r0, #0
 800b226:	f000 80f9 	beq.w	800b41c <HAL_SPI_Init+0x1f8>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800b22a:	6802      	ldr	r2, [r0, #0]
 800b22c:	4b94      	ldr	r3, [pc, #592]	; (800b480 <HAL_SPI_Init+0x25c>)
 800b22e:	4995      	ldr	r1, [pc, #596]	; (800b484 <HAL_SPI_Init+0x260>)
 800b230:	429a      	cmp	r2, r3
 800b232:	bf18      	it	ne
 800b234:	428a      	cmpne	r2, r1
 800b236:	f501 318c 	add.w	r1, r1, #71680	; 0x11800
 800b23a:	bf14      	ite	ne
 800b23c:	2301      	movne	r3, #1
 800b23e:	2300      	moveq	r3, #0
{
 800b240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800b244:	4d90      	ldr	r5, [pc, #576]	; (800b488 <HAL_SPI_Init+0x264>)
 800b246:	4604      	mov	r4, r0
 800b248:	4890      	ldr	r0, [pc, #576]	; (800b48c <HAL_SPI_Init+0x268>)
 800b24a:	42aa      	cmp	r2, r5
 800b24c:	bf0c      	ite	eq
 800b24e:	2300      	moveq	r3, #0
 800b250:	f003 0301 	andne.w	r3, r3, #1
 800b254:	4282      	cmp	r2, r0
 800b256:	bf0c      	ite	eq
 800b258:	2300      	moveq	r3, #0
 800b25a:	f003 0301 	andne.w	r3, r3, #1
 800b25e:	428a      	cmp	r2, r1
 800b260:	bf0c      	ite	eq
 800b262:	2300      	moveq	r3, #0
 800b264:	f003 0301 	andne.w	r3, r3, #1
 800b268:	b11b      	cbz	r3, 800b272 <HAL_SPI_Init+0x4e>
 800b26a:	4b89      	ldr	r3, [pc, #548]	; (800b490 <HAL_SPI_Init+0x26c>)
 800b26c:	429a      	cmp	r2, r3
 800b26e:	f040 80ee 	bne.w	800b44e <HAL_SPI_Init+0x22a>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800b272:	6863      	ldr	r3, [r4, #4]
 800b274:	b13b      	cbz	r3, 800b286 <HAL_SPI_Init+0x62>
 800b276:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b27a:	d004      	beq.n	800b286 <HAL_SPI_Init+0x62>
 800b27c:	f240 1145 	movw	r1, #325	; 0x145
 800b280:	4884      	ldr	r0, [pc, #528]	; (800b494 <HAL_SPI_Init+0x270>)
 800b282:	f7f7 fdcf 	bl	8002e24 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800b286:	68a3      	ldr	r3, [r4, #8]
 800b288:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800b28c:	d003      	beq.n	800b296 <HAL_SPI_Init+0x72>
 800b28e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b292:	f040 80c5 	bne.w	800b420 <HAL_SPI_Init+0x1fc>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800b296:	68e2      	ldr	r2, [r4, #12]
 800b298:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
 800b29c:	f422 7040 	bic.w	r0, r2, #768	; 0x300
 800b2a0:	f422 6110 	bic.w	r1, r2, #2304	; 0x900
 800b2a4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b2a8:	bf18      	it	ne
 800b2aa:	f5b0 6f00 	cmpne.w	r0, #2048	; 0x800
 800b2ae:	bf14      	ite	ne
 800b2b0:	2301      	movne	r3, #1
 800b2b2:	2300      	moveq	r3, #0
 800b2b4:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 800b2b8:	bf0c      	ite	eq
 800b2ba:	2300      	moveq	r3, #0
 800b2bc:	f003 0301 	andne.w	r3, r3, #1
 800b2c0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b2c4:	bf0c      	ite	eq
 800b2c6:	2300      	moveq	r3, #0
 800b2c8:	f003 0301 	andne.w	r3, r3, #1
 800b2cc:	b12b      	cbz	r3, 800b2da <HAL_SPI_Init+0xb6>
 800b2ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b2d2:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800b2d6:	f040 80cc 	bne.w	800b472 <HAL_SPI_Init+0x24e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800b2da:	69a3      	ldr	r3, [r4, #24]
 800b2dc:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 800b2e0:	d003      	beq.n	800b2ea <HAL_SPI_Init+0xc6>
 800b2e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b2e6:	f040 80a1 	bne.w	800b42c <HAL_SPI_Init+0x208>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800b2ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b2ec:	f033 0308 	bics.w	r3, r3, #8
 800b2f0:	d17f      	bne.n	800b3f2 <HAL_SPI_Init+0x1ce>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800b2f2:	69e3      	ldr	r3, [r4, #28]
 800b2f4:	f023 0318 	bic.w	r3, r3, #24
 800b2f8:	2b20      	cmp	r3, #32
 800b2fa:	d002      	beq.n	800b302 <HAL_SPI_Init+0xde>
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	f040 80b2 	bne.w	800b466 <HAL_SPI_Init+0x242>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800b302:	6a23      	ldr	r3, [r4, #32]
 800b304:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800b308:	d169      	bne.n	800b3de <HAL_SPI_Init+0x1ba>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800b30a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b30c:	f033 0210 	bics.w	r2, r3, #16
 800b310:	d17b      	bne.n	800b40a <HAL_SPI_Init+0x1e6>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b312:	b943      	cbnz	r3, 800b326 <HAL_SPI_Init+0x102>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800b314:	6923      	ldr	r3, [r4, #16]
 800b316:	f033 0302 	bics.w	r3, r3, #2
 800b31a:	f040 809e 	bne.w	800b45a <HAL_SPI_Init+0x236>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800b31e:	6963      	ldr	r3, [r4, #20]
 800b320:	2b01      	cmp	r3, #1
 800b322:	f200 808e 	bhi.w	800b442 <HAL_SPI_Init+0x21e>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b326:	2200      	movs	r2, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 800b328:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b32c:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800b32e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b332:	2b00      	cmp	r3, #0
 800b334:	d04d      	beq.n	800b3d2 <HAL_SPI_Init+0x1ae>
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b336:	68e7      	ldr	r7, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800b338:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800b33a:	6822      	ldr	r2, [r4, #0]
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b33c:	f5b7 6fe0 	cmp.w	r7, #1792	; 0x700
  hspi->State = HAL_SPI_STATE_BUSY;
 800b340:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b344:	f427 6100 	bic.w	r1, r7, #2048	; 0x800
  __HAL_SPI_DISABLE(hspi);
 800b348:	6813      	ldr	r3, [r2, #0]
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b34a:	bf94      	ite	ls
 800b34c:	f44f 5580 	movls.w	r5, #4096	; 0x1000
 800b350:	2500      	movhi	r5, #0
  __HAL_SPI_DISABLE(hspi);
 800b352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b356:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800b35a:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b35c:	d135      	bne.n	800b3ca <HAL_SPI_Init+0x1a6>
 800b35e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800b360:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b362:	b92b      	cbnz	r3, 800b370 <HAL_SPI_Init+0x14c>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b364:	f5b7 6fe0 	cmp.w	r7, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800b368:	bf8c      	ite	hi
 800b36a:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800b36c:	2301      	movls	r3, #1
 800b36e:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800b370:	68a1      	ldr	r1, [r4, #8]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b372:	f04f 0800 	mov.w	r8, #0
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800b376:	6863      	ldr	r3, [r4, #4]
 800b378:	6920      	ldr	r0, [r4, #16]
 800b37a:	430b      	orrs	r3, r1
 800b37c:	6961      	ldr	r1, [r4, #20]
 800b37e:	4303      	orrs	r3, r0
 800b380:	430b      	orrs	r3, r1
 800b382:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 800b386:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800b388:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b38a:	ea4f 4c10 	mov.w	ip, r0, lsr #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800b38e:	f400 7e00 	and.w	lr, r0, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800b392:	430f      	orrs	r7, r1
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800b394:	6a21      	ldr	r1, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800b396:	f00c 0c04 	and.w	ip, ip, #4
  return HAL_OK;
 800b39a:	4640      	mov	r0, r8
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800b39c:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800b39e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b3a0:	430f      	orrs	r7, r1
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800b3a2:	ea43 030e 	orr.w	r3, r3, lr
  hspi->State     = HAL_SPI_STATE_READY;
 800b3a6:	f04f 0e01 	mov.w	lr, #1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800b3aa:	ea47 070c 	orr.w	r7, r7, ip
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800b3ae:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800b3b0:	433d      	orrs	r5, r7
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800b3b2:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800b3b4:	6055      	str	r5, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b3b6:	69d3      	ldr	r3, [r2, #28]
 800b3b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b3bc:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b3be:	f8c4 8060 	str.w	r8, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b3c2:	f884 e05d 	strb.w	lr, [r4, #93]	; 0x5d
}
 800b3c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	461e      	mov	r6, r3
 800b3ce:	62a3      	str	r3, [r4, #40]	; 0x28
 800b3d0:	e7c6      	b.n	800b360 <HAL_SPI_Init+0x13c>
    hspi->Lock = HAL_UNLOCKED;
 800b3d2:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800b3d6:	4620      	mov	r0, r4
 800b3d8:	f7f8 fd5c 	bl	8003e94 <HAL_SPI_MspInit>
 800b3dc:	e7ab      	b.n	800b336 <HAL_SPI_Init+0x112>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800b3de:	f240 114b 	movw	r1, #331	; 0x14b
 800b3e2:	482c      	ldr	r0, [pc, #176]	; (800b494 <HAL_SPI_Init+0x270>)
 800b3e4:	f7f7 fd1e 	bl	8002e24 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800b3e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b3ea:	f033 0210 	bics.w	r2, r3, #16
 800b3ee:	d090      	beq.n	800b312 <HAL_SPI_Init+0xee>
 800b3f0:	e00b      	b.n	800b40a <HAL_SPI_Init+0x1e6>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800b3f2:	f240 1149 	movw	r1, #329	; 0x149
 800b3f6:	4827      	ldr	r0, [pc, #156]	; (800b494 <HAL_SPI_Init+0x270>)
 800b3f8:	f7f7 fd14 	bl	8002e24 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800b3fc:	69e3      	ldr	r3, [r4, #28]
 800b3fe:	f023 0318 	bic.w	r3, r3, #24
 800b402:	2b20      	cmp	r3, #32
 800b404:	f47f af7a 	bne.w	800b2fc <HAL_SPI_Init+0xd8>
 800b408:	e77b      	b.n	800b302 <HAL_SPI_Init+0xde>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800b40a:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800b40e:	4821      	ldr	r0, [pc, #132]	; (800b494 <HAL_SPI_Init+0x270>)
 800b410:	f7f7 fd08 	bl	8002e24 <assert_failed>
 800b414:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b416:	2b00      	cmp	r3, #0
 800b418:	d185      	bne.n	800b326 <HAL_SPI_Init+0x102>
 800b41a:	e77b      	b.n	800b314 <HAL_SPI_Init+0xf0>
    return HAL_ERROR;
 800b41c:	2001      	movs	r0, #1
}
 800b41e:	4770      	bx	lr
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800b420:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800b424:	481b      	ldr	r0, [pc, #108]	; (800b494 <HAL_SPI_Init+0x270>)
 800b426:	f7f7 fcfd 	bl	8002e24 <assert_failed>
 800b42a:	e734      	b.n	800b296 <HAL_SPI_Init+0x72>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800b42c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800b430:	4818      	ldr	r0, [pc, #96]	; (800b494 <HAL_SPI_Init+0x270>)
 800b432:	f7f7 fcf7 	bl	8002e24 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800b436:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b438:	f033 0308 	bics.w	r3, r3, #8
 800b43c:	f43f af59 	beq.w	800b2f2 <HAL_SPI_Init+0xce>
 800b440:	e7d7      	b.n	800b3f2 <HAL_SPI_Init+0x1ce>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800b442:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800b446:	4813      	ldr	r0, [pc, #76]	; (800b494 <HAL_SPI_Init+0x270>)
 800b448:	f7f7 fcec 	bl	8002e24 <assert_failed>
 800b44c:	e76b      	b.n	800b326 <HAL_SPI_Init+0x102>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800b44e:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800b452:	4810      	ldr	r0, [pc, #64]	; (800b494 <HAL_SPI_Init+0x270>)
 800b454:	f7f7 fce6 	bl	8002e24 <assert_failed>
 800b458:	e70b      	b.n	800b272 <HAL_SPI_Init+0x4e>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800b45a:	f240 114f 	movw	r1, #335	; 0x14f
 800b45e:	480d      	ldr	r0, [pc, #52]	; (800b494 <HAL_SPI_Init+0x270>)
 800b460:	f7f7 fce0 	bl	8002e24 <assert_failed>
 800b464:	e75b      	b.n	800b31e <HAL_SPI_Init+0xfa>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800b466:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800b46a:	480a      	ldr	r0, [pc, #40]	; (800b494 <HAL_SPI_Init+0x270>)
 800b46c:	f7f7 fcda 	bl	8002e24 <assert_failed>
 800b470:	e747      	b.n	800b302 <HAL_SPI_Init+0xde>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800b472:	f240 1147 	movw	r1, #327	; 0x147
 800b476:	4807      	ldr	r0, [pc, #28]	; (800b494 <HAL_SPI_Init+0x270>)
 800b478:	f7f7 fcd4 	bl	8002e24 <assert_failed>
 800b47c:	e72d      	b.n	800b2da <HAL_SPI_Init+0xb6>
 800b47e:	bf00      	nop
 800b480:	40013000 	.word	0x40013000
 800b484:	40003800 	.word	0x40003800
 800b488:	40003c00 	.word	0x40003c00
 800b48c:	40013400 	.word	0x40013400
 800b490:	40015400 	.word	0x40015400
 800b494:	08026810 	.word	0x08026810

0800b498 <HAL_SPI_Transmit>:
{
 800b498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b49c:	461d      	mov	r5, r3
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800b49e:	6883      	ldr	r3, [r0, #8]
{
 800b4a0:	b082      	sub	sp, #8
 800b4a2:	4604      	mov	r4, r0
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800b4a4:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
{
 800b4a8:	4688      	mov	r8, r1
 800b4aa:	4617      	mov	r7, r2
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800b4ac:	f040 8081 	bne.w	800b5b2 <HAL_SPI_Transmit+0x11a>
  __HAL_LOCK(hspi);
 800b4b0:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800b4b4:	2b01      	cmp	r3, #1
 800b4b6:	f000 8086 	beq.w	800b5c6 <HAL_SPI_Transmit+0x12e>
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800b4c0:	f7fa f856 	bl	8005570 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800b4c4:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tickstart = HAL_GetTick();
 800b4c8:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800b4ca:	2b01      	cmp	r3, #1
 800b4cc:	d009      	beq.n	800b4e2 <HAL_SPI_Transmit+0x4a>
    errorcode = HAL_BUSY;
 800b4ce:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800b4d0:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800b4d2:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800b4d4:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800b4d8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800b4dc:	b002      	add	sp, #8
 800b4de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800b4e2:	f1b8 0f00 	cmp.w	r8, #0
 800b4e6:	d072      	beq.n	800b5ce <HAL_SPI_Transmit+0x136>
 800b4e8:	fab7 f387 	clz	r3, r7
 800b4ec:	095b      	lsrs	r3, r3, #5
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d16d      	bne.n	800b5ce <HAL_SPI_Transmit+0x136>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b4f2:	68a2      	ldr	r2, [r4, #8]
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b4f4:	2103      	movs	r1, #3
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b4f6:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b4f8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b4fc:	f884 105d 	strb.w	r1, [r4, #93]	; 0x5d
  hspi->RxXferSize  = 0U;
 800b500:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b504:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b506:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800b50a:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800b50c:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b50e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->RxISR       = NULL;
 800b512:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 800b516:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b518:	d103      	bne.n	800b522 <HAL_SPI_Transmit+0x8a>
    SPI_1LINE_TX(hspi);
 800b51a:	681a      	ldr	r2, [r3, #0]
 800b51c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b520:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b522:	681a      	ldr	r2, [r3, #0]
 800b524:	0652      	lsls	r2, r2, #25
 800b526:	d403      	bmi.n	800b530 <HAL_SPI_Transmit+0x98>
    __HAL_SPI_ENABLE(hspi);
 800b528:	681a      	ldr	r2, [r3, #0]
 800b52a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b52e:	601a      	str	r2, [r3, #0]
 800b530:	f1a7 0701 	sub.w	r7, r7, #1
 800b534:	6861      	ldr	r1, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b536:	68e2      	ldr	r2, [r4, #12]
 800b538:	fab7 f787 	clz	r7, r7
 800b53c:	097f      	lsrs	r7, r7, #5
 800b53e:	2900      	cmp	r1, #0
 800b540:	bf08      	it	eq
 800b542:	2701      	moveq	r7, #1
 800b544:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 800b548:	d94c      	bls.n	800b5e4 <HAL_SPI_Transmit+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b54a:	b147      	cbz	r7, 800b55e <HAL_SPI_Transmit+0xc6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b54c:	4642      	mov	r2, r8
 800b54e:	f832 1b02 	ldrh.w	r1, [r2], #2
 800b552:	60d9      	str	r1, [r3, #12]
      hspi->TxXferCount--;
 800b554:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b556:	63a2      	str	r2, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800b558:	3b01      	subs	r3, #1
 800b55a:	b29b      	uxth	r3, r3
 800b55c:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800b55e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b560:	b29b      	uxth	r3, r3
 800b562:	b183      	cbz	r3, 800b586 <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b564:	6823      	ldr	r3, [r4, #0]
 800b566:	689a      	ldr	r2, [r3, #8]
 800b568:	0790      	lsls	r0, r2, #30
 800b56a:	d532      	bpl.n	800b5d2 <HAL_SPI_Transmit+0x13a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b56c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b56e:	f831 2b02 	ldrh.w	r2, [r1], #2
 800b572:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 800b574:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b576:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800b578:	3b01      	subs	r3, #1
 800b57a:	b29b      	uxth	r3, r3
 800b57c:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800b57e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b580:	b29b      	uxth	r3, r3
 800b582:	2b00      	cmp	r3, #0
 800b584:	d1ee      	bne.n	800b564 <HAL_SPI_Transmit+0xcc>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b586:	4632      	mov	r2, r6
 800b588:	4629      	mov	r1, r5
 800b58a:	4620      	mov	r0, r4
 800b58c:	f7ff fe2a 	bl	800b1e4 <SPI_EndRxTxTransaction>
 800b590:	b108      	cbz	r0, 800b596 <HAL_SPI_Transmit+0xfe>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b592:	2320      	movs	r3, #32
 800b594:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b596:	68a3      	ldr	r3, [r4, #8]
 800b598:	b933      	cbnz	r3, 800b5a8 <HAL_SPI_Transmit+0x110>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b59a:	6822      	ldr	r2, [r4, #0]
 800b59c:	9301      	str	r3, [sp, #4]
 800b59e:	68d3      	ldr	r3, [r2, #12]
 800b5a0:	9301      	str	r3, [sp, #4]
 800b5a2:	6893      	ldr	r3, [r2, #8]
 800b5a4:	9301      	str	r3, [sp, #4]
 800b5a6:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b5a8:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 800b5aa:	3000      	adds	r0, #0
 800b5ac:	bf18      	it	ne
 800b5ae:	2001      	movne	r0, #1
error:
 800b5b0:	e78e      	b.n	800b4d0 <HAL_SPI_Transmit+0x38>
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800b5b2:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800b5b6:	4827      	ldr	r0, [pc, #156]	; (800b654 <HAL_SPI_Transmit+0x1bc>)
 800b5b8:	f7f7 fc34 	bl	8002e24 <assert_failed>
  __HAL_LOCK(hspi);
 800b5bc:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800b5c0:	2b01      	cmp	r3, #1
 800b5c2:	f47f af7a 	bne.w	800b4ba <HAL_SPI_Transmit+0x22>
 800b5c6:	2002      	movs	r0, #2
}
 800b5c8:	b002      	add	sp, #8
 800b5ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    errorcode = HAL_ERROR;
 800b5ce:	2001      	movs	r0, #1
 800b5d0:	e77e      	b.n	800b4d0 <HAL_SPI_Transmit+0x38>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b5d2:	f7f9 ffcd 	bl	8005570 <HAL_GetTick>
 800b5d6:	1b80      	subs	r0, r0, r6
 800b5d8:	42a8      	cmp	r0, r5
 800b5da:	d3c0      	bcc.n	800b55e <HAL_SPI_Transmit+0xc6>
 800b5dc:	1c69      	adds	r1, r5, #1
 800b5de:	d0be      	beq.n	800b55e <HAL_SPI_Transmit+0xc6>
          errorcode = HAL_TIMEOUT;
 800b5e0:	2003      	movs	r0, #3
 800b5e2:	e775      	b.n	800b4d0 <HAL_SPI_Transmit+0x38>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b5e4:	b16f      	cbz	r7, 800b602 <HAL_SPI_Transmit+0x16a>
      if (hspi->TxXferCount > 1U)
 800b5e6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800b5e8:	2a01      	cmp	r2, #1
 800b5ea:	d92f      	bls.n	800b64c <HAL_SPI_Transmit+0x1b4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b5ec:	4642      	mov	r2, r8
 800b5ee:	e015      	b.n	800b61c <HAL_SPI_Transmit+0x184>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b5f0:	780a      	ldrb	r2, [r1, #0]
 800b5f2:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 800b5f4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 800b5f6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800b5f8:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 800b5fa:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 800b5fc:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 800b5fe:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800b600:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800b602:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b604:	b29b      	uxth	r3, r3
 800b606:	2b00      	cmp	r3, #0
 800b608:	d0bd      	beq.n	800b586 <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b60a:	6823      	ldr	r3, [r4, #0]
 800b60c:	689a      	ldr	r2, [r3, #8]
 800b60e:	0792      	lsls	r2, r2, #30
 800b610:	d514      	bpl.n	800b63c <HAL_SPI_Transmit+0x1a4>
        if (hspi->TxXferCount > 1U)
 800b612:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800b614:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b616:	2a01      	cmp	r2, #1
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b618:	460a      	mov	r2, r1
        if (hspi->TxXferCount > 1U)
 800b61a:	d9e9      	bls.n	800b5f0 <HAL_SPI_Transmit+0x158>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b61c:	f832 1b02 	ldrh.w	r1, [r2], #2
 800b620:	60d9      	str	r1, [r3, #12]
          hspi->TxXferCount -= 2U;
 800b622:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b624:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800b626:	3b02      	subs	r3, #2
 800b628:	b29b      	uxth	r3, r3
 800b62a:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800b62c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b62e:	b29b      	uxth	r3, r3
 800b630:	2b00      	cmp	r3, #0
 800b632:	d0a8      	beq.n	800b586 <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b634:	6823      	ldr	r3, [r4, #0]
 800b636:	689a      	ldr	r2, [r3, #8]
 800b638:	0792      	lsls	r2, r2, #30
 800b63a:	d4ea      	bmi.n	800b612 <HAL_SPI_Transmit+0x17a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b63c:	f7f9 ff98 	bl	8005570 <HAL_GetTick>
 800b640:	1b80      	subs	r0, r0, r6
 800b642:	42a8      	cmp	r0, r5
 800b644:	d3dd      	bcc.n	800b602 <HAL_SPI_Transmit+0x16a>
 800b646:	1c6b      	adds	r3, r5, #1
 800b648:	d0db      	beq.n	800b602 <HAL_SPI_Transmit+0x16a>
 800b64a:	e7c9      	b.n	800b5e0 <HAL_SPI_Transmit+0x148>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b64c:	f898 2000 	ldrb.w	r2, [r8]
 800b650:	e7cf      	b.n	800b5f2 <HAL_SPI_Transmit+0x15a>
 800b652:	bf00      	nop
 800b654:	08026810 	.word	0x08026810

0800b658 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b658:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b65a:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b65c:	688d      	ldr	r5, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b65e:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
  tmpccmrx |= OC_Config->OCMode;
 800b662:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b664:	4a0f      	ldr	r2, [pc, #60]	; (800b6a4 <TIM_OC5_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b666:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 800b668:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800b66a:	6844      	ldr	r4, [r0, #4]
  tmpccer &= ~TIM_CCER_CC5P;
 800b66c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccmrx = TIMx->CCMR3;
 800b670:	6d47      	ldr	r7, [r0, #84]	; 0x54
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b672:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b676:	4d0c      	ldr	r5, [pc, #48]	; (800b6a8 <TIM_OC5_SetConfig+0x50>)
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b678:	403a      	ands	r2, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b67a:	42a8      	cmp	r0, r5
  tmpccmrx |= OC_Config->OCMode;
 800b67c:	ea42 0206 	orr.w	r2, r2, r6
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b680:	d00a      	beq.n	800b698 <TIM_OC5_SetConfig+0x40>
 800b682:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b686:	42a8      	cmp	r0, r5
 800b688:	d006      	beq.n	800b698 <TIM_OC5_SetConfig+0x40>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b68a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800b68c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 800b68e:	6542      	str	r2, [r0, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 800b690:	6581      	str	r1, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b692:	6203      	str	r3, [r0, #32]
}
 800b694:	bcf0      	pop	{r4, r5, r6, r7}
 800b696:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b698:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b69c:	694d      	ldr	r5, [r1, #20]
 800b69e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 800b6a2:	e7f2      	b.n	800b68a <TIM_OC5_SetConfig+0x32>
 800b6a4:	fffeff8f 	.word	0xfffeff8f
 800b6a8:	40010000 	.word	0x40010000

0800b6ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b6ac:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b6ae:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b6b0:	688d      	ldr	r5, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b6b2:	f424 1480 	bic.w	r4, r4, #1048576	; 0x100000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b6b6:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b6b8:	4a0f      	ldr	r2, [pc, #60]	; (800b6f8 <TIM_OC6_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b6ba:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 800b6bc:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800b6be:	6844      	ldr	r4, [r0, #4]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b6c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccmrx = TIMx->CCMR3;
 800b6c4:	6d47      	ldr	r7, [r0, #84]	; 0x54
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b6c6:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6ca:	4d0c      	ldr	r5, [pc, #48]	; (800b6fc <TIM_OC6_SetConfig+0x50>)
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b6cc:	403a      	ands	r2, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6ce:	42a8      	cmp	r0, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b6d0:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6d4:	d00a      	beq.n	800b6ec <TIM_OC6_SetConfig+0x40>
 800b6d6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b6da:	42a8      	cmp	r0, r5
 800b6dc:	d006      	beq.n	800b6ec <TIM_OC6_SetConfig+0x40>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b6de:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800b6e0:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 800b6e2:	6542      	str	r2, [r0, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 800b6e4:	65c1      	str	r1, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6e6:	6203      	str	r3, [r0, #32]
}
 800b6e8:	bcf0      	pop	{r4, r5, r6, r7}
 800b6ea:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b6ec:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b6f0:	694d      	ldr	r5, [r1, #20]
 800b6f2:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 800b6f6:	e7f2      	b.n	800b6de <TIM_OC6_SetConfig+0x32>
 800b6f8:	feff8fff 	.word	0xfeff8fff
 800b6fc:	40010000 	.word	0x40010000

0800b700 <TIM_OC1_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b700:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b702:	4b2c      	ldr	r3, [pc, #176]	; (800b7b4 <TIM_OC1_SetConfig+0xb4>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b704:	f022 0201 	bic.w	r2, r2, #1
{
 800b708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b70c:	460e      	mov	r6, r1
  tmpccer |= OC_Config->OCPolarity;
 800b70e:	6889      	ldr	r1, [r1, #8]
{
 800b710:	4604      	mov	r4, r0
  tmpccmrx |= OC_Config->OCMode;
 800b712:	6837      	ldr	r7, [r6, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b714:	6202      	str	r2, [r0, #32]
  tmpccer = TIMx->CCER;
 800b716:	6a05      	ldr	r5, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800b718:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800b71c:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 800b71e:	f025 0502 	bic.w	r5, r5, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b722:	4013      	ands	r3, r2
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b724:	4a24      	ldr	r2, [pc, #144]	; (800b7b8 <TIM_OC1_SetConfig+0xb8>)
  tmpccer |= OC_Config->OCPolarity;
 800b726:	430d      	orrs	r5, r1
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b728:	4290      	cmp	r0, r2
  tmpccmrx |= OC_Config->OCMode;
 800b72a:	ea47 0703 	orr.w	r7, r7, r3
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b72e:	d00a      	beq.n	800b746 <TIM_OC1_SetConfig+0x46>
 800b730:	4b22      	ldr	r3, [pc, #136]	; (800b7bc <TIM_OC1_SetConfig+0xbc>)
 800b732:	4298      	cmp	r0, r3
 800b734:	d007      	beq.n	800b746 <TIM_OC1_SetConfig+0x46>
  TIMx->CCR1 = OC_Config->Pulse;
 800b736:	6873      	ldr	r3, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800b738:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 800b73c:	61a7      	str	r7, [r4, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800b73e:	6363      	str	r3, [r4, #52]	; 0x34
  TIMx->CCER = tmpccer;
 800b740:	6225      	str	r5, [r4, #32]
}
 800b742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800b746:	68f2      	ldr	r2, [r6, #12]
 800b748:	f032 0308 	bics.w	r3, r2, #8
 800b74c:	d12a      	bne.n	800b7a4 <TIM_OC1_SetConfig+0xa4>
    tmpccer &= ~TIM_CCER_CC1NP;
 800b74e:	f025 0508 	bic.w	r5, r5, #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800b752:	69b3      	ldr	r3, [r6, #24]
    tmpccer |= OC_Config->OCNPolarity;
 800b754:	4315      	orrs	r5, r2
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800b756:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC1NE;
 800b75a:	f025 0504 	bic.w	r5, r5, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800b75e:	d117      	bne.n	800b790 <TIM_OC1_SetConfig+0x90>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800b760:	6973      	ldr	r3, [r6, #20]
 800b762:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800b766:	d106      	bne.n	800b776 <TIM_OC1_SetConfig+0x76>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b768:	f428 7240 	bic.w	r2, r8, #768	; 0x300
 800b76c:	69b1      	ldr	r1, [r6, #24]
 800b76e:	430a      	orrs	r2, r1
    tmpcr2 |= OC_Config->OCNIdleState;
 800b770:	ea42 0803 	orr.w	r8, r2, r3
 800b774:	e7df      	b.n	800b736 <TIM_OC1_SetConfig+0x36>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800b776:	f241 7199 	movw	r1, #6041	; 0x1799
 800b77a:	4811      	ldr	r0, [pc, #68]	; (800b7c0 <TIM_OC1_SetConfig+0xc0>)
 800b77c:	f7f7 fb52 	bl	8002e24 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b780:	f428 7240 	bic.w	r2, r8, #768	; 0x300
 800b784:	69b1      	ldr	r1, [r6, #24]
 800b786:	6973      	ldr	r3, [r6, #20]
 800b788:	430a      	orrs	r2, r1
    tmpcr2 |= OC_Config->OCNIdleState;
 800b78a:	ea42 0803 	orr.w	r8, r2, r3
 800b78e:	e7d2      	b.n	800b736 <TIM_OC1_SetConfig+0x36>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800b790:	f241 7198 	movw	r1, #6040	; 0x1798
 800b794:	480a      	ldr	r0, [pc, #40]	; (800b7c0 <TIM_OC1_SetConfig+0xc0>)
 800b796:	f7f7 fb45 	bl	8002e24 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800b79a:	6973      	ldr	r3, [r6, #20]
 800b79c:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800b7a0:	d0e2      	beq.n	800b768 <TIM_OC1_SetConfig+0x68>
 800b7a2:	e7e8      	b.n	800b776 <TIM_OC1_SetConfig+0x76>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800b7a4:	f241 718b 	movw	r1, #6027	; 0x178b
 800b7a8:	4805      	ldr	r0, [pc, #20]	; (800b7c0 <TIM_OC1_SetConfig+0xc0>)
 800b7aa:	f7f7 fb3b 	bl	8002e24 <assert_failed>
 800b7ae:	68f2      	ldr	r2, [r6, #12]
 800b7b0:	e7cd      	b.n	800b74e <TIM_OC1_SetConfig+0x4e>
 800b7b2:	bf00      	nop
 800b7b4:	fffeff8c 	.word	0xfffeff8c
 800b7b8:	40010000 	.word	0x40010000
 800b7bc:	40010400 	.word	0x40010400
 800b7c0:	08026848 	.word	0x08026848

0800b7c4 <TIM_OC3_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b7c4:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b7c6:	4b2e      	ldr	r3, [pc, #184]	; (800b880 <TIM_OC3_SetConfig+0xbc>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b7c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
{
 800b7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7d0:	460e      	mov	r6, r1
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b7d2:	6889      	ldr	r1, [r1, #8]
{
 800b7d4:	4604      	mov	r4, r0
  tmpccmrx |= OC_Config->OCMode;
 800b7d6:	6837      	ldr	r7, [r6, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b7d8:	6202      	str	r2, [r0, #32]
  tmpccer = TIMx->CCER;
 800b7da:	6a05      	ldr	r5, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800b7dc:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 800b7e0:	69c2      	ldr	r2, [r0, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 800b7e2:	f425 7500 	bic.w	r5, r5, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b7e6:	4013      	ands	r3, r2
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b7e8:	4a26      	ldr	r2, [pc, #152]	; (800b884 <TIM_OC3_SetConfig+0xc0>)
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b7ea:	ea45 2501 	orr.w	r5, r5, r1, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b7ee:	4290      	cmp	r0, r2
  tmpccmrx |= OC_Config->OCMode;
 800b7f0:	ea47 0703 	orr.w	r7, r7, r3
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b7f4:	d00a      	beq.n	800b80c <TIM_OC3_SetConfig+0x48>
 800b7f6:	4b24      	ldr	r3, [pc, #144]	; (800b888 <TIM_OC3_SetConfig+0xc4>)
 800b7f8:	4298      	cmp	r0, r3
 800b7fa:	d007      	beq.n	800b80c <TIM_OC3_SetConfig+0x48>
  TIMx->CCR3 = OC_Config->Pulse;
 800b7fc:	6873      	ldr	r3, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800b7fe:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 800b802:	61e7      	str	r7, [r4, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800b804:	63e3      	str	r3, [r4, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800b806:	6225      	str	r5, [r4, #32]
}
 800b808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800b80c:	68f2      	ldr	r2, [r6, #12]
 800b80e:	f032 0308 	bics.w	r3, r2, #8
 800b812:	d12d      	bne.n	800b870 <TIM_OC3_SetConfig+0xac>
    tmpccer &= ~TIM_CCER_CC3NP;
 800b814:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800b818:	69b3      	ldr	r3, [r6, #24]
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b81a:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800b81e:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC3NE;
 800b822:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800b826:	d119      	bne.n	800b85c <TIM_OC3_SetConfig+0x98>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800b828:	6973      	ldr	r3, [r6, #20]
 800b82a:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800b82e:	d107      	bne.n	800b840 <TIM_OC3_SetConfig+0x7c>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b830:	f428 5240 	bic.w	r2, r8, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b834:	69b1      	ldr	r1, [r6, #24]
 800b836:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800b83a:	ea42 1803 	orr.w	r8, r2, r3, lsl #4
 800b83e:	e7dd      	b.n	800b7fc <TIM_OC3_SetConfig+0x38>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800b840:	f641 012f 	movw	r1, #6191	; 0x182f
 800b844:	4811      	ldr	r0, [pc, #68]	; (800b88c <TIM_OC3_SetConfig+0xc8>)
 800b846:	f7f7 faed 	bl	8002e24 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b84a:	f428 5240 	bic.w	r2, r8, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b84e:	69b1      	ldr	r1, [r6, #24]
 800b850:	6973      	ldr	r3, [r6, #20]
 800b852:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800b856:	ea42 1803 	orr.w	r8, r2, r3, lsl #4
 800b85a:	e7cf      	b.n	800b7fc <TIM_OC3_SetConfig+0x38>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800b85c:	f641 012e 	movw	r1, #6190	; 0x182e
 800b860:	480a      	ldr	r0, [pc, #40]	; (800b88c <TIM_OC3_SetConfig+0xc8>)
 800b862:	f7f7 fadf 	bl	8002e24 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800b866:	6973      	ldr	r3, [r6, #20]
 800b868:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800b86c:	d0e0      	beq.n	800b830 <TIM_OC3_SetConfig+0x6c>
 800b86e:	e7e7      	b.n	800b840 <TIM_OC3_SetConfig+0x7c>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800b870:	f641 0121 	movw	r1, #6177	; 0x1821
 800b874:	4805      	ldr	r0, [pc, #20]	; (800b88c <TIM_OC3_SetConfig+0xc8>)
 800b876:	f7f7 fad5 	bl	8002e24 <assert_failed>
 800b87a:	68f2      	ldr	r2, [r6, #12]
 800b87c:	e7ca      	b.n	800b814 <TIM_OC3_SetConfig+0x50>
 800b87e:	bf00      	nop
 800b880:	fffeff8c 	.word	0xfffeff8c
 800b884:	40010000 	.word	0x40010000
 800b888:	40010400 	.word	0x40010400
 800b88c:	08026848 	.word	0x08026848

0800b890 <TIM_OC4_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b890:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b892:	4b1b      	ldr	r3, [pc, #108]	; (800b900 <TIM_OC4_SetConfig+0x70>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b894:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
{
 800b898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b89a:	460f      	mov	r7, r1
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b89c:	6889      	ldr	r1, [r1, #8]
{
 800b89e:	4604      	mov	r4, r0
 800b8a0:	b083      	sub	sp, #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b8a2:	683e      	ldr	r6, [r7, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b8a4:	6202      	str	r2, [r0, #32]
  tmpccer = TIMx->CCER;
 800b8a6:	6a05      	ldr	r5, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800b8a8:	6842      	ldr	r2, [r0, #4]
  tmpccer &= ~TIM_CCER_CC4P;
 800b8aa:	f425 5500 	bic.w	r5, r5, #8192	; 0x2000
  tmpccmrx = TIMx->CCMR2;
 800b8ae:	69c0      	ldr	r0, [r0, #28]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b8b0:	ea45 3501 	orr.w	r5, r5, r1, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8b4:	4913      	ldr	r1, [pc, #76]	; (800b904 <TIM_OC4_SetConfig+0x74>)
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b8b6:	4003      	ands	r3, r0
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8b8:	428c      	cmp	r4, r1
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b8ba:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8be:	d009      	beq.n	800b8d4 <TIM_OC4_SetConfig+0x44>
 800b8c0:	4b11      	ldr	r3, [pc, #68]	; (800b908 <TIM_OC4_SetConfig+0x78>)
 800b8c2:	429c      	cmp	r4, r3
 800b8c4:	d006      	beq.n	800b8d4 <TIM_OC4_SetConfig+0x44>
  TIMx->CCR4 = OC_Config->Pulse;
 800b8c6:	687b      	ldr	r3, [r7, #4]
  TIMx->CR2 = tmpcr2;
 800b8c8:	6062      	str	r2, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 800b8ca:	61e6      	str	r6, [r4, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800b8cc:	6423      	str	r3, [r4, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800b8ce:	6225      	str	r5, [r4, #32]
}
 800b8d0:	b003      	add	sp, #12
 800b8d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800b8d4:	697b      	ldr	r3, [r7, #20]
 800b8d6:	f433 7180 	bics.w	r1, r3, #256	; 0x100
 800b8da:	d104      	bne.n	800b8e6 <TIM_OC4_SetConfig+0x56>
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b8dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b8e0:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
 800b8e4:	e7ef      	b.n	800b8c6 <TIM_OC4_SetConfig+0x36>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800b8e6:	f641 016d 	movw	r1, #6253	; 0x186d
 800b8ea:	4808      	ldr	r0, [pc, #32]	; (800b90c <TIM_OC4_SetConfig+0x7c>)
 800b8ec:	9201      	str	r2, [sp, #4]
 800b8ee:	f7f7 fa99 	bl	8002e24 <assert_failed>
 800b8f2:	9a01      	ldr	r2, [sp, #4]
 800b8f4:	697b      	ldr	r3, [r7, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b8f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b8fa:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
 800b8fe:	e7e2      	b.n	800b8c6 <TIM_OC4_SetConfig+0x36>
 800b900:	feff8cff 	.word	0xfeff8cff
 800b904:	40010000 	.word	0x40010000
 800b908:	40010400 	.word	0x40010400
 800b90c:	08026848 	.word	0x08026848

0800b910 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800b910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b912:	6803      	ldr	r3, [r0, #0]
{
 800b914:	460c      	mov	r4, r1
 800b916:	4606      	mov	r6, r0

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800b918:	6848      	ldr	r0, [r1, #4]
  tmpsmcr = htim->Instance->SMCR;
 800b91a:	6899      	ldr	r1, [r3, #8]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800b91c:	4aac      	ldr	r2, [pc, #688]	; (800bbd0 <TIM_SlaveTimer_SetConfig+0x2c0>)

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800b91e:	2830      	cmp	r0, #48	; 0x30
  tmpsmcr &= ~TIM_SMCR_TS;
 800b920:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800b924:	6825      	ldr	r5, [r4, #0]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800b926:	ea41 0100 	orr.w	r1, r1, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 800b92a:	ea02 0201 	and.w	r2, r2, r1
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800b92e:	ea42 0205 	orr.w	r2, r2, r5
  htim->Instance->SMCR = tmpsmcr;
 800b932:	609a      	str	r2, [r3, #8]
  switch (sSlaveConfig->InputTrigger)
 800b934:	f000 80c9 	beq.w	800baca <TIM_SlaveTimer_SetConfig+0x1ba>
 800b938:	f240 80c2 	bls.w	800bac0 <TIM_SlaveTimer_SetConfig+0x1b0>
 800b93c:	2850      	cmp	r0, #80	; 0x50
 800b93e:	f000 8159 	beq.w	800bbf4 <TIM_SlaveTimer_SetConfig+0x2e4>
 800b942:	d958      	bls.n	800b9f6 <TIM_SlaveTimer_SetConfig+0xe6>
 800b944:	2860      	cmp	r0, #96	; 0x60
 800b946:	f000 80ee 	beq.w	800bb26 <TIM_SlaveTimer_SetConfig+0x216>
 800b94a:	2870      	cmp	r0, #112	; 0x70
 800b94c:	f040 80e9 	bne.w	800bb22 <TIM_SlaveTimer_SetConfig+0x212>
  {
    case TIM_TS_ETRF:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800b950:	4aa0      	ldr	r2, [pc, #640]	; (800bbd4 <TIM_SlaveTimer_SetConfig+0x2c4>)
 800b952:	49a1      	ldr	r1, [pc, #644]	; (800bbd8 <TIM_SlaveTimer_SetConfig+0x2c8>)
 800b954:	4293      	cmp	r3, r2
 800b956:	bf18      	it	ne
 800b958:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800b95c:	489f      	ldr	r0, [pc, #636]	; (800bbdc <TIM_SlaveTimer_SetConfig+0x2cc>)
 800b95e:	bf14      	ite	ne
 800b960:	2201      	movne	r2, #1
 800b962:	2200      	moveq	r2, #0
 800b964:	428b      	cmp	r3, r1
 800b966:	bf0c      	ite	eq
 800b968:	2200      	moveq	r2, #0
 800b96a:	f002 0201 	andne.w	r2, r2, #1
 800b96e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b972:	4283      	cmp	r3, r0
 800b974:	bf0c      	ite	eq
 800b976:	2200      	moveq	r2, #0
 800b978:	f002 0201 	andne.w	r2, r2, #1
 800b97c:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800b980:	428b      	cmp	r3, r1
 800b982:	bf0c      	ite	eq
 800b984:	2200      	moveq	r2, #0
 800b986:	f002 0201 	andne.w	r2, r2, #1
 800b98a:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800b98e:	4283      	cmp	r3, r0
 800b990:	bf0c      	ite	eq
 800b992:	2200      	moveq	r2, #0
 800b994:	f002 0201 	andne.w	r2, r2, #1
 800b998:	428b      	cmp	r3, r1
 800b99a:	bf0c      	ite	eq
 800b99c:	2200      	moveq	r2, #0
 800b99e:	f002 0201 	andne.w	r2, r2, #1
 800b9a2:	b11a      	cbz	r2, 800b9ac <TIM_SlaveTimer_SetConfig+0x9c>
 800b9a4:	4a8e      	ldr	r2, [pc, #568]	; (800bbe0 <TIM_SlaveTimer_SetConfig+0x2d0>)
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	f040 81bf 	bne.w	800bd2a <TIM_SlaveTimer_SetConfig+0x41a>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 800b9ac:	68e3      	ldr	r3, [r4, #12]
 800b9ae:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800b9b2:	f040 819c 	bne.w	800bcee <TIM_SlaveTimer_SetConfig+0x3de>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800b9b6:	68a3      	ldr	r3, [r4, #8]
 800b9b8:	2b0a      	cmp	r3, #10
 800b9ba:	bf18      	it	ne
 800b9bc:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800b9c0:	d003      	beq.n	800b9ca <TIM_SlaveTimer_SetConfig+0xba>
 800b9c2:	f033 0302 	bics.w	r3, r3, #2
 800b9c6:	f040 8198 	bne.w	800bcfa <TIM_SlaveTimer_SetConfig+0x3ea>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800b9ca:	6921      	ldr	r1, [r4, #16]
 800b9cc:	290f      	cmp	r1, #15
 800b9ce:	d905      	bls.n	800b9dc <TIM_SlaveTimer_SetConfig+0xcc>
 800b9d0:	f641 1114 	movw	r1, #6420	; 0x1914
 800b9d4:	4883      	ldr	r0, [pc, #524]	; (800bbe4 <TIM_SlaveTimer_SetConfig+0x2d4>)
 800b9d6:	f7f7 fa25 	bl	8002e24 <assert_failed>
 800b9da:	6921      	ldr	r1, [r4, #16]
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800b9dc:	6835      	ldr	r5, [r6, #0]
    }

    default:
      break;
  }
  return HAL_OK;
 800b9de:	2000      	movs	r0, #0
 800b9e0:	68e3      	ldr	r3, [r4, #12]
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b9e2:	68aa      	ldr	r2, [r5, #8]
 800b9e4:	68a4      	ldr	r4, [r4, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b9e6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800b9ea:	4323      	orrs	r3, r4
 800b9ec:	4313      	orrs	r3, r2

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b9ee:	ea43 2301 	orr.w	r3, r3, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b9f2:	60ab      	str	r3, [r5, #8]
}
 800b9f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sSlaveConfig->InputTrigger)
 800b9f6:	2840      	cmp	r0, #64	; 0x40
 800b9f8:	f040 8093 	bne.w	800bb22 <TIM_SlaveTimer_SetConfig+0x212>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800b9fc:	4a75      	ldr	r2, [pc, #468]	; (800bbd4 <TIM_SlaveTimer_SetConfig+0x2c4>)
 800b9fe:	4976      	ldr	r1, [pc, #472]	; (800bbd8 <TIM_SlaveTimer_SetConfig+0x2c8>)
 800ba00:	4293      	cmp	r3, r2
 800ba02:	bf18      	it	ne
 800ba04:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800ba08:	4874      	ldr	r0, [pc, #464]	; (800bbdc <TIM_SlaveTimer_SetConfig+0x2cc>)
 800ba0a:	bf14      	ite	ne
 800ba0c:	2201      	movne	r2, #1
 800ba0e:	2200      	moveq	r2, #0
 800ba10:	428b      	cmp	r3, r1
 800ba12:	bf0c      	ite	eq
 800ba14:	2200      	moveq	r2, #0
 800ba16:	f002 0201 	andne.w	r2, r2, #1
 800ba1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ba1e:	4283      	cmp	r3, r0
 800ba20:	bf0c      	ite	eq
 800ba22:	2200      	moveq	r2, #0
 800ba24:	f002 0201 	andne.w	r2, r2, #1
 800ba28:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800ba2c:	428b      	cmp	r3, r1
 800ba2e:	bf0c      	ite	eq
 800ba30:	2200      	moveq	r2, #0
 800ba32:	f002 0201 	andne.w	r2, r2, #1
 800ba36:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800ba3a:	4283      	cmp	r3, r0
 800ba3c:	bf0c      	ite	eq
 800ba3e:	2200      	moveq	r2, #0
 800ba40:	f002 0201 	andne.w	r2, r2, #1
 800ba44:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 800ba48:	428b      	cmp	r3, r1
 800ba4a:	bf0c      	ite	eq
 800ba4c:	2200      	moveq	r2, #0
 800ba4e:	f002 0201 	andne.w	r2, r2, #1
 800ba52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ba56:	4283      	cmp	r3, r0
 800ba58:	bf0c      	ite	eq
 800ba5a:	2200      	moveq	r2, #0
 800ba5c:	f002 0201 	andne.w	r2, r2, #1
 800ba60:	f5a0 3096 	sub.w	r0, r0, #76800	; 0x12c00
 800ba64:	428b      	cmp	r3, r1
 800ba66:	bf0c      	ite	eq
 800ba68:	2200      	moveq	r2, #0
 800ba6a:	f002 0201 	andne.w	r2, r2, #1
 800ba6e:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800ba72:	4283      	cmp	r3, r0
 800ba74:	bf0c      	ite	eq
 800ba76:	2200      	moveq	r2, #0
 800ba78:	f002 0201 	andne.w	r2, r2, #1
 800ba7c:	428b      	cmp	r3, r1
 800ba7e:	bf0c      	ite	eq
 800ba80:	2200      	moveq	r2, #0
 800ba82:	f002 0201 	andne.w	r2, r2, #1
 800ba86:	b11a      	cbz	r2, 800ba90 <TIM_SlaveTimer_SetConfig+0x180>
 800ba88:	4a57      	ldr	r2, [pc, #348]	; (800bbe8 <TIM_SlaveTimer_SetConfig+0x2d8>)
 800ba8a:	4293      	cmp	r3, r2
 800ba8c:	f040 8159 	bne.w	800bd42 <TIM_SlaveTimer_SetConfig+0x432>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800ba90:	6923      	ldr	r3, [r4, #16]
 800ba92:	2b0f      	cmp	r3, #15
 800ba94:	f200 811e 	bhi.w	800bcd4 <TIM_SlaveTimer_SetConfig+0x3c4>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800ba98:	6823      	ldr	r3, [r4, #0]
 800ba9a:	2b05      	cmp	r3, #5
 800ba9c:	f000 8118 	beq.w	800bcd0 <TIM_SlaveTimer_SetConfig+0x3c0>
      tmpccer = htim->Instance->CCER;
 800baa0:	6833      	ldr	r3, [r6, #0]
  return HAL_OK;
 800baa2:	2000      	movs	r0, #0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800baa4:	6925      	ldr	r5, [r4, #16]
      tmpccer = htim->Instance->CCER;
 800baa6:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800baa8:	6a19      	ldr	r1, [r3, #32]
 800baaa:	f021 0101 	bic.w	r1, r1, #1
 800baae:	6219      	str	r1, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800bab0:	699a      	ldr	r2, [r3, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bab2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800bab6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 800baba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800babc:	621c      	str	r4, [r3, #32]
}
 800babe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sSlaveConfig->InputTrigger)
 800bac0:	2810      	cmp	r0, #16
 800bac2:	d002      	beq.n	800baca <TIM_SlaveTimer_SetConfig+0x1ba>
 800bac4:	2820      	cmp	r0, #32
 800bac6:	d000      	beq.n	800baca <TIM_SlaveTimer_SetConfig+0x1ba>
 800bac8:	bb58      	cbnz	r0, 800bb22 <TIM_SlaveTimer_SetConfig+0x212>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800baca:	4a42      	ldr	r2, [pc, #264]	; (800bbd4 <TIM_SlaveTimer_SetConfig+0x2c4>)
 800bacc:	4942      	ldr	r1, [pc, #264]	; (800bbd8 <TIM_SlaveTimer_SetConfig+0x2c8>)
 800bace:	4293      	cmp	r3, r2
 800bad0:	bf18      	it	ne
 800bad2:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800bad6:	4d41      	ldr	r5, [pc, #260]	; (800bbdc <TIM_SlaveTimer_SetConfig+0x2cc>)
 800bad8:	4c44      	ldr	r4, [pc, #272]	; (800bbec <TIM_SlaveTimer_SetConfig+0x2dc>)
 800bada:	bf14      	ite	ne
 800badc:	2201      	movne	r2, #1
 800bade:	2200      	moveq	r2, #0
 800bae0:	4843      	ldr	r0, [pc, #268]	; (800bbf0 <TIM_SlaveTimer_SetConfig+0x2e0>)
 800bae2:	428b      	cmp	r3, r1
 800bae4:	bf0c      	ite	eq
 800bae6:	2200      	moveq	r2, #0
 800bae8:	f002 0201 	andne.w	r2, r2, #1
 800baec:	f501 319e 	add.w	r1, r1, #80896	; 0x13c00
 800baf0:	42ab      	cmp	r3, r5
 800baf2:	bf0c      	ite	eq
 800baf4:	2200      	moveq	r2, #0
 800baf6:	f002 0201 	andne.w	r2, r2, #1
 800bafa:	42a3      	cmp	r3, r4
 800bafc:	bf0c      	ite	eq
 800bafe:	2200      	moveq	r2, #0
 800bb00:	f002 0201 	andne.w	r2, r2, #1
 800bb04:	4283      	cmp	r3, r0
 800bb06:	bf0c      	ite	eq
 800bb08:	2200      	moveq	r2, #0
 800bb0a:	f002 0201 	andne.w	r2, r2, #1
 800bb0e:	428b      	cmp	r3, r1
 800bb10:	bf0c      	ite	eq
 800bb12:	2200      	moveq	r2, #0
 800bb14:	f002 0201 	andne.w	r2, r2, #1
 800bb18:	b11a      	cbz	r2, 800bb22 <TIM_SlaveTimer_SetConfig+0x212>
 800bb1a:	4a31      	ldr	r2, [pc, #196]	; (800bbe0 <TIM_SlaveTimer_SetConfig+0x2d0>)
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	f040 80df 	bne.w	800bce0 <TIM_SlaveTimer_SetConfig+0x3d0>
  return HAL_OK;
 800bb22:	2000      	movs	r0, #0
}
 800bb24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800bb26:	4a2b      	ldr	r2, [pc, #172]	; (800bbd4 <TIM_SlaveTimer_SetConfig+0x2c4>)
 800bb28:	492b      	ldr	r1, [pc, #172]	; (800bbd8 <TIM_SlaveTimer_SetConfig+0x2c8>)
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	bf18      	it	ne
 800bb2e:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800bb32:	482a      	ldr	r0, [pc, #168]	; (800bbdc <TIM_SlaveTimer_SetConfig+0x2cc>)
 800bb34:	bf14      	ite	ne
 800bb36:	2201      	movne	r2, #1
 800bb38:	2200      	moveq	r2, #0
 800bb3a:	428b      	cmp	r3, r1
 800bb3c:	bf0c      	ite	eq
 800bb3e:	2200      	moveq	r2, #0
 800bb40:	f002 0201 	andne.w	r2, r2, #1
 800bb44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bb48:	4283      	cmp	r3, r0
 800bb4a:	bf0c      	ite	eq
 800bb4c:	2200      	moveq	r2, #0
 800bb4e:	f002 0201 	andne.w	r2, r2, #1
 800bb52:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800bb56:	428b      	cmp	r3, r1
 800bb58:	bf0c      	ite	eq
 800bb5a:	2200      	moveq	r2, #0
 800bb5c:	f002 0201 	andne.w	r2, r2, #1
 800bb60:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800bb64:	4283      	cmp	r3, r0
 800bb66:	bf0c      	ite	eq
 800bb68:	2200      	moveq	r2, #0
 800bb6a:	f002 0201 	andne.w	r2, r2, #1
 800bb6e:	428b      	cmp	r3, r1
 800bb70:	bf0c      	ite	eq
 800bb72:	2200      	moveq	r2, #0
 800bb74:	f002 0201 	andne.w	r2, r2, #1
 800bb78:	b11a      	cbz	r2, 800bb82 <TIM_SlaveTimer_SetConfig+0x272>
 800bb7a:	4a19      	ldr	r2, [pc, #100]	; (800bbe0 <TIM_SlaveTimer_SetConfig+0x2d0>)
 800bb7c:	4293      	cmp	r3, r2
 800bb7e:	f040 80ce 	bne.w	800bd1e <TIM_SlaveTimer_SetConfig+0x40e>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800bb82:	68a3      	ldr	r3, [r4, #8]
 800bb84:	2b0a      	cmp	r3, #10
 800bb86:	bf18      	it	ne
 800bb88:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800bb8c:	d003      	beq.n	800bb96 <TIM_SlaveTimer_SetConfig+0x286>
 800bb8e:	f033 0302 	bics.w	r3, r3, #2
 800bb92:	f040 80be 	bne.w	800bd12 <TIM_SlaveTimer_SetConfig+0x402>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800bb96:	6925      	ldr	r5, [r4, #16]
 800bb98:	2d0f      	cmp	r5, #15
 800bb9a:	d905      	bls.n	800bba8 <TIM_SlaveTimer_SetConfig+0x298>
 800bb9c:	f641 114a 	movw	r1, #6474	; 0x194a
 800bba0:	4810      	ldr	r0, [pc, #64]	; (800bbe4 <TIM_SlaveTimer_SetConfig+0x2d4>)
 800bba2:	f7f7 f93f 	bl	8002e24 <assert_failed>
 800bba6:	6925      	ldr	r5, [r4, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bba8:	6833      	ldr	r3, [r6, #0]
  return HAL_OK;
 800bbaa:	2000      	movs	r0, #0
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bbac:	68a6      	ldr	r6, [r4, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bbae:	6a1c      	ldr	r4, [r3, #32]
 800bbb0:	f024 0410 	bic.w	r4, r4, #16
 800bbb4:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bbb6:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800bbb8:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bbba:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bbbe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bbc2:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800bbc6:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800bbca:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800bbcc:	621a      	str	r2, [r3, #32]
}
 800bbce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbd0:	fffefff8 	.word	0xfffefff8
 800bbd4:	40010000 	.word	0x40010000
 800bbd8:	40000400 	.word	0x40000400
 800bbdc:	40000800 	.word	0x40000800
 800bbe0:	40001800 	.word	0x40001800
 800bbe4:	08026848 	.word	0x08026848
 800bbe8:	40002000 	.word	0x40002000
 800bbec:	40000c00 	.word	0x40000c00
 800bbf0:	40010400 	.word	0x40010400
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800bbf4:	4a56      	ldr	r2, [pc, #344]	; (800bd50 <TIM_SlaveTimer_SetConfig+0x440>)
 800bbf6:	4957      	ldr	r1, [pc, #348]	; (800bd54 <TIM_SlaveTimer_SetConfig+0x444>)
 800bbf8:	4293      	cmp	r3, r2
 800bbfa:	bf18      	it	ne
 800bbfc:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800bc00:	4855      	ldr	r0, [pc, #340]	; (800bd58 <TIM_SlaveTimer_SetConfig+0x448>)
 800bc02:	bf14      	ite	ne
 800bc04:	2201      	movne	r2, #1
 800bc06:	2200      	moveq	r2, #0
 800bc08:	428b      	cmp	r3, r1
 800bc0a:	bf0c      	ite	eq
 800bc0c:	2200      	moveq	r2, #0
 800bc0e:	f002 0201 	andne.w	r2, r2, #1
 800bc12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bc16:	4283      	cmp	r3, r0
 800bc18:	bf0c      	ite	eq
 800bc1a:	2200      	moveq	r2, #0
 800bc1c:	f002 0201 	andne.w	r2, r2, #1
 800bc20:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800bc24:	428b      	cmp	r3, r1
 800bc26:	bf0c      	ite	eq
 800bc28:	2200      	moveq	r2, #0
 800bc2a:	f002 0201 	andne.w	r2, r2, #1
 800bc2e:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800bc32:	4283      	cmp	r3, r0
 800bc34:	bf0c      	ite	eq
 800bc36:	2200      	moveq	r2, #0
 800bc38:	f002 0201 	andne.w	r2, r2, #1
 800bc3c:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 800bc40:	428b      	cmp	r3, r1
 800bc42:	bf0c      	ite	eq
 800bc44:	2200      	moveq	r2, #0
 800bc46:	f002 0201 	andne.w	r2, r2, #1
 800bc4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bc4e:	4283      	cmp	r3, r0
 800bc50:	bf0c      	ite	eq
 800bc52:	2200      	moveq	r2, #0
 800bc54:	f002 0201 	andne.w	r2, r2, #1
 800bc58:	f5a0 3096 	sub.w	r0, r0, #76800	; 0x12c00
 800bc5c:	428b      	cmp	r3, r1
 800bc5e:	bf0c      	ite	eq
 800bc60:	2200      	moveq	r2, #0
 800bc62:	f002 0201 	andne.w	r2, r2, #1
 800bc66:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800bc6a:	4283      	cmp	r3, r0
 800bc6c:	bf0c      	ite	eq
 800bc6e:	2200      	moveq	r2, #0
 800bc70:	f002 0201 	andne.w	r2, r2, #1
 800bc74:	428b      	cmp	r3, r1
 800bc76:	bf0c      	ite	eq
 800bc78:	2200      	moveq	r2, #0
 800bc7a:	f002 0201 	andne.w	r2, r2, #1
 800bc7e:	b112      	cbz	r2, 800bc86 <TIM_SlaveTimer_SetConfig+0x376>
 800bc80:	4a36      	ldr	r2, [pc, #216]	; (800bd5c <TIM_SlaveTimer_SetConfig+0x44c>)
 800bc82:	4293      	cmp	r3, r2
 800bc84:	d157      	bne.n	800bd36 <TIM_SlaveTimer_SetConfig+0x426>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800bc86:	68a3      	ldr	r3, [r4, #8]
 800bc88:	2b0a      	cmp	r3, #10
 800bc8a:	bf18      	it	ne
 800bc8c:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800bc90:	d002      	beq.n	800bc98 <TIM_SlaveTimer_SetConfig+0x388>
 800bc92:	f033 0302 	bics.w	r3, r3, #2
 800bc96:	d136      	bne.n	800bd06 <TIM_SlaveTimer_SetConfig+0x3f6>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800bc98:	6927      	ldr	r7, [r4, #16]
 800bc9a:	2f0f      	cmp	r7, #15
 800bc9c:	d905      	bls.n	800bcaa <TIM_SlaveTimer_SetConfig+0x39a>
 800bc9e:	f641 113c 	movw	r1, #6460	; 0x193c
 800bca2:	482f      	ldr	r0, [pc, #188]	; (800bd60 <TIM_SlaveTimer_SetConfig+0x450>)
 800bca4:	f7f7 f8be 	bl	8002e24 <assert_failed>
 800bca8:	6927      	ldr	r7, [r4, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bcaa:	6833      	ldr	r3, [r6, #0]
  return HAL_OK;
 800bcac:	2000      	movs	r0, #0
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bcae:	68a1      	ldr	r1, [r4, #8]
  tmpccer = TIMx->CCER;
 800bcb0:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bcb2:	6a1c      	ldr	r4, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bcb4:	f025 050a 	bic.w	r5, r5, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bcb8:	f024 0401 	bic.w	r4, r4, #1
  tmpccer |= TIM_ICPolarity;
 800bcbc:	4329      	orrs	r1, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bcbe:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bcc0:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bcc2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bcc6:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800bcca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bccc:	6219      	str	r1, [r3, #32]
}
 800bcce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_ERROR;
 800bcd0:	2001      	movs	r0, #1
}
 800bcd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800bcd4:	f641 1121 	movw	r1, #6433	; 0x1921
 800bcd8:	4821      	ldr	r0, [pc, #132]	; (800bd60 <TIM_SlaveTimer_SetConfig+0x450>)
 800bcda:	f7f7 f8a3 	bl	8002e24 <assert_failed>
 800bcde:	e6db      	b.n	800ba98 <TIM_SlaveTimer_SetConfig+0x188>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800bce0:	f641 1159 	movw	r1, #6489	; 0x1959
 800bce4:	481e      	ldr	r0, [pc, #120]	; (800bd60 <TIM_SlaveTimer_SetConfig+0x450>)
 800bce6:	f7f7 f89d 	bl	8002e24 <assert_failed>
  return HAL_OK;
 800bcea:	2000      	movs	r0, #0
}
 800bcec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 800bcee:	f641 1112 	movw	r1, #6418	; 0x1912
 800bcf2:	481b      	ldr	r0, [pc, #108]	; (800bd60 <TIM_SlaveTimer_SetConfig+0x450>)
 800bcf4:	f7f7 f896 	bl	8002e24 <assert_failed>
 800bcf8:	e65d      	b.n	800b9b6 <TIM_SlaveTimer_SetConfig+0xa6>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800bcfa:	f641 1113 	movw	r1, #6419	; 0x1913
 800bcfe:	4818      	ldr	r0, [pc, #96]	; (800bd60 <TIM_SlaveTimer_SetConfig+0x450>)
 800bd00:	f7f7 f890 	bl	8002e24 <assert_failed>
 800bd04:	e661      	b.n	800b9ca <TIM_SlaveTimer_SetConfig+0xba>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800bd06:	f641 113b 	movw	r1, #6459	; 0x193b
 800bd0a:	4815      	ldr	r0, [pc, #84]	; (800bd60 <TIM_SlaveTimer_SetConfig+0x450>)
 800bd0c:	f7f7 f88a 	bl	8002e24 <assert_failed>
 800bd10:	e7c2      	b.n	800bc98 <TIM_SlaveTimer_SetConfig+0x388>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800bd12:	f641 1149 	movw	r1, #6473	; 0x1949
 800bd16:	4812      	ldr	r0, [pc, #72]	; (800bd60 <TIM_SlaveTimer_SetConfig+0x450>)
 800bd18:	f7f7 f884 	bl	8002e24 <assert_failed>
 800bd1c:	e73b      	b.n	800bb96 <TIM_SlaveTimer_SetConfig+0x286>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800bd1e:	f641 1148 	movw	r1, #6472	; 0x1948
 800bd22:	480f      	ldr	r0, [pc, #60]	; (800bd60 <TIM_SlaveTimer_SetConfig+0x450>)
 800bd24:	f7f7 f87e 	bl	8002e24 <assert_failed>
 800bd28:	e72b      	b.n	800bb82 <TIM_SlaveTimer_SetConfig+0x272>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800bd2a:	f641 1111 	movw	r1, #6417	; 0x1911
 800bd2e:	480c      	ldr	r0, [pc, #48]	; (800bd60 <TIM_SlaveTimer_SetConfig+0x450>)
 800bd30:	f7f7 f878 	bl	8002e24 <assert_failed>
 800bd34:	e63a      	b.n	800b9ac <TIM_SlaveTimer_SetConfig+0x9c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800bd36:	f641 113a 	movw	r1, #6458	; 0x193a
 800bd3a:	4809      	ldr	r0, [pc, #36]	; (800bd60 <TIM_SlaveTimer_SetConfig+0x450>)
 800bd3c:	f7f7 f872 	bl	8002e24 <assert_failed>
 800bd40:	e7a1      	b.n	800bc86 <TIM_SlaveTimer_SetConfig+0x376>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800bd42:	f44f 51c9 	mov.w	r1, #6432	; 0x1920
 800bd46:	4806      	ldr	r0, [pc, #24]	; (800bd60 <TIM_SlaveTimer_SetConfig+0x450>)
 800bd48:	f7f7 f86c 	bl	8002e24 <assert_failed>
 800bd4c:	e6a0      	b.n	800ba90 <TIM_SlaveTimer_SetConfig+0x180>
 800bd4e:	bf00      	nop
 800bd50:	40010000 	.word	0x40010000
 800bd54:	40000400 	.word	0x40000400
 800bd58:	40000800 	.word	0x40000800
 800bd5c:	40002000 	.word	0x40002000
 800bd60:	08026848 	.word	0x08026848

0800bd64 <HAL_TIM_Base_Start>:
{
 800bd64:	b538      	push	{r3, r4, r5, lr}
 800bd66:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800bd68:	4b38      	ldr	r3, [pc, #224]	; (800be4c <HAL_TIM_Base_Start+0xe8>)
 800bd6a:	4839      	ldr	r0, [pc, #228]	; (800be50 <HAL_TIM_Base_Start+0xec>)
 800bd6c:	6822      	ldr	r2, [r4, #0]
 800bd6e:	4939      	ldr	r1, [pc, #228]	; (800be54 <HAL_TIM_Base_Start+0xf0>)
 800bd70:	429a      	cmp	r2, r3
 800bd72:	bf18      	it	ne
 800bd74:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800bd78:	4d37      	ldr	r5, [pc, #220]	; (800be58 <HAL_TIM_Base_Start+0xf4>)
 800bd7a:	bf14      	ite	ne
 800bd7c:	2301      	movne	r3, #1
 800bd7e:	2300      	moveq	r3, #0
 800bd80:	4282      	cmp	r2, r0
 800bd82:	bf0c      	ite	eq
 800bd84:	2300      	moveq	r3, #0
 800bd86:	f003 0301 	andne.w	r3, r3, #1
 800bd8a:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800bd8e:	428a      	cmp	r2, r1
 800bd90:	bf0c      	ite	eq
 800bd92:	2300      	moveq	r3, #0
 800bd94:	f003 0301 	andne.w	r3, r3, #1
 800bd98:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800bd9c:	42aa      	cmp	r2, r5
 800bd9e:	bf0c      	ite	eq
 800bda0:	2300      	moveq	r3, #0
 800bda2:	f003 0301 	andne.w	r3, r3, #1
 800bda6:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800bdaa:	4282      	cmp	r2, r0
 800bdac:	bf0c      	ite	eq
 800bdae:	2300      	moveq	r3, #0
 800bdb0:	f003 0301 	andne.w	r3, r3, #1
 800bdb4:	f500 3098 	add.w	r0, r0, #77824	; 0x13000
 800bdb8:	428a      	cmp	r2, r1
 800bdba:	bf0c      	ite	eq
 800bdbc:	2300      	moveq	r3, #0
 800bdbe:	f003 0301 	andne.w	r3, r3, #1
 800bdc2:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
 800bdc6:	42aa      	cmp	r2, r5
 800bdc8:	bf0c      	ite	eq
 800bdca:	2300      	moveq	r3, #0
 800bdcc:	f003 0301 	andne.w	r3, r3, #1
 800bdd0:	f505 4588 	add.w	r5, r5, #17408	; 0x4400
 800bdd4:	4282      	cmp	r2, r0
 800bdd6:	bf0c      	ite	eq
 800bdd8:	2300      	moveq	r3, #0
 800bdda:	f003 0301 	andne.w	r3, r3, #1
 800bdde:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800bde2:	428a      	cmp	r2, r1
 800bde4:	bf0c      	ite	eq
 800bde6:	2300      	moveq	r3, #0
 800bde8:	f003 0301 	andne.w	r3, r3, #1
 800bdec:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800bdf0:	42aa      	cmp	r2, r5
 800bdf2:	bf0c      	ite	eq
 800bdf4:	2300      	moveq	r3, #0
 800bdf6:	f003 0301 	andne.w	r3, r3, #1
 800bdfa:	4282      	cmp	r2, r0
 800bdfc:	bf0c      	ite	eq
 800bdfe:	2300      	moveq	r3, #0
 800be00:	f003 0301 	andne.w	r3, r3, #1
 800be04:	428a      	cmp	r2, r1
 800be06:	bf0c      	ite	eq
 800be08:	2300      	moveq	r3, #0
 800be0a:	f003 0301 	andne.w	r3, r3, #1
 800be0e:	b113      	cbz	r3, 800be16 <HAL_TIM_Base_Start+0xb2>
 800be10:	4b12      	ldr	r3, [pc, #72]	; (800be5c <HAL_TIM_Base_Start+0xf8>)
 800be12:	429a      	cmp	r2, r3
 800be14:	d113      	bne.n	800be3e <HAL_TIM_Base_Start+0xda>
  htim->State = HAL_TIM_STATE_BUSY;
 800be16:	2102      	movs	r1, #2
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800be18:	4b11      	ldr	r3, [pc, #68]	; (800be60 <HAL_TIM_Base_Start+0xfc>)
  htim->State = HAL_TIM_STATE_BUSY;
 800be1a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800be1e:	6891      	ldr	r1, [r2, #8]
 800be20:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be22:	2b06      	cmp	r3, #6
 800be24:	d006      	beq.n	800be34 <HAL_TIM_Base_Start+0xd0>
 800be26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be2a:	d003      	beq.n	800be34 <HAL_TIM_Base_Start+0xd0>
    __HAL_TIM_ENABLE(htim);
 800be2c:	6813      	ldr	r3, [r2, #0]
 800be2e:	f043 0301 	orr.w	r3, r3, #1
 800be32:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 800be34:	2301      	movs	r3, #1
}
 800be36:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800be38:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800be3c:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800be3e:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800be42:	4808      	ldr	r0, [pc, #32]	; (800be64 <HAL_TIM_Base_Start+0x100>)
 800be44:	f7f6 ffee 	bl	8002e24 <assert_failed>
 800be48:	6822      	ldr	r2, [r4, #0]
 800be4a:	e7e4      	b.n	800be16 <HAL_TIM_Base_Start+0xb2>
 800be4c:	40010000 	.word	0x40010000
 800be50:	40000400 	.word	0x40000400
 800be54:	40000800 	.word	0x40000800
 800be58:	40000c00 	.word	0x40000c00
 800be5c:	40002000 	.word	0x40002000
 800be60:	00010007 	.word	0x00010007
 800be64:	08026848 	.word	0x08026848

0800be68 <HAL_TIM_Base_Start_IT>:
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800be68:	6802      	ldr	r2, [r0, #0]
 800be6a:	4938      	ldr	r1, [pc, #224]	; (800bf4c <HAL_TIM_Base_Start_IT+0xe4>)
{
 800be6c:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800be6e:	4b38      	ldr	r3, [pc, #224]	; (800bf50 <HAL_TIM_Base_Start_IT+0xe8>)
 800be70:	4c38      	ldr	r4, [pc, #224]	; (800bf54 <HAL_TIM_Base_Start_IT+0xec>)
 800be72:	429a      	cmp	r2, r3
 800be74:	bf18      	it	ne
 800be76:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800be7a:	4d37      	ldr	r5, [pc, #220]	; (800bf58 <HAL_TIM_Base_Start_IT+0xf0>)
 800be7c:	bf14      	ite	ne
 800be7e:	2301      	movne	r3, #1
 800be80:	2300      	moveq	r3, #0
 800be82:	42a2      	cmp	r2, r4
 800be84:	bf0c      	ite	eq
 800be86:	2300      	moveq	r3, #0
 800be88:	f003 0301 	andne.w	r3, r3, #1
 800be8c:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 800be90:	428a      	cmp	r2, r1
 800be92:	bf0c      	ite	eq
 800be94:	2300      	moveq	r3, #0
 800be96:	f003 0301 	andne.w	r3, r3, #1
 800be9a:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800be9e:	42aa      	cmp	r2, r5
 800bea0:	bf0c      	ite	eq
 800bea2:	2300      	moveq	r3, #0
 800bea4:	f003 0301 	andne.w	r3, r3, #1
 800bea8:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800beac:	42a2      	cmp	r2, r4
 800beae:	bf0c      	ite	eq
 800beb0:	2300      	moveq	r3, #0
 800beb2:	f003 0301 	andne.w	r3, r3, #1
 800beb6:	f504 3498 	add.w	r4, r4, #77824	; 0x13000
 800beba:	428a      	cmp	r2, r1
 800bebc:	bf0c      	ite	eq
 800bebe:	2300      	moveq	r3, #0
 800bec0:	f003 0301 	andne.w	r3, r3, #1
 800bec4:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
 800bec8:	42aa      	cmp	r2, r5
 800beca:	bf0c      	ite	eq
 800becc:	2300      	moveq	r3, #0
 800bece:	f003 0301 	andne.w	r3, r3, #1
 800bed2:	f505 4588 	add.w	r5, r5, #17408	; 0x4400
 800bed6:	42a2      	cmp	r2, r4
 800bed8:	bf0c      	ite	eq
 800beda:	2300      	moveq	r3, #0
 800bedc:	f003 0301 	andne.w	r3, r3, #1
 800bee0:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 800bee4:	428a      	cmp	r2, r1
 800bee6:	bf0c      	ite	eq
 800bee8:	2300      	moveq	r3, #0
 800beea:	f003 0301 	andne.w	r3, r3, #1
 800beee:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800bef2:	42aa      	cmp	r2, r5
 800bef4:	bf0c      	ite	eq
 800bef6:	2300      	moveq	r3, #0
 800bef8:	f003 0301 	andne.w	r3, r3, #1
 800befc:	42a2      	cmp	r2, r4
 800befe:	bf0c      	ite	eq
 800bf00:	2300      	moveq	r3, #0
 800bf02:	f003 0301 	andne.w	r3, r3, #1
 800bf06:	428a      	cmp	r2, r1
 800bf08:	bf0c      	ite	eq
 800bf0a:	2300      	moveq	r3, #0
 800bf0c:	f003 0301 	andne.w	r3, r3, #1
 800bf10:	b113      	cbz	r3, 800bf18 <HAL_TIM_Base_Start_IT+0xb0>
 800bf12:	4b12      	ldr	r3, [pc, #72]	; (800bf5c <HAL_TIM_Base_Start_IT+0xf4>)
 800bf14:	429a      	cmp	r2, r3
 800bf16:	d111      	bne.n	800bf3c <HAL_TIM_Base_Start_IT+0xd4>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bf18:	68d1      	ldr	r1, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bf1a:	4b11      	ldr	r3, [pc, #68]	; (800bf60 <HAL_TIM_Base_Start_IT+0xf8>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bf1c:	f041 0101 	orr.w	r1, r1, #1
 800bf20:	60d1      	str	r1, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bf22:	6891      	ldr	r1, [r2, #8]
 800bf24:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bf26:	2b06      	cmp	r3, #6
 800bf28:	d006      	beq.n	800bf38 <HAL_TIM_Base_Start_IT+0xd0>
 800bf2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf2e:	d003      	beq.n	800bf38 <HAL_TIM_Base_Start_IT+0xd0>
    __HAL_TIM_ENABLE(htim);
 800bf30:	6813      	ldr	r3, [r2, #0]
 800bf32:	f043 0301 	orr.w	r3, r3, #1
 800bf36:	6013      	str	r3, [r2, #0]
}
 800bf38:	2000      	movs	r0, #0
 800bf3a:	bd38      	pop	{r3, r4, r5, pc}
 800bf3c:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800bf3e:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 800bf42:	4808      	ldr	r0, [pc, #32]	; (800bf64 <HAL_TIM_Base_Start_IT+0xfc>)
 800bf44:	f7f6 ff6e 	bl	8002e24 <assert_failed>
 800bf48:	6822      	ldr	r2, [r4, #0]
 800bf4a:	e7e5      	b.n	800bf18 <HAL_TIM_Base_Start_IT+0xb0>
 800bf4c:	40000800 	.word	0x40000800
 800bf50:	40010000 	.word	0x40010000
 800bf54:	40000400 	.word	0x40000400
 800bf58:	40000c00 	.word	0x40000c00
 800bf5c:	40002000 	.word	0x40002000
 800bf60:	00010007 	.word	0x00010007
 800bf64:	08026848 	.word	0x08026848

0800bf68 <HAL_TIM_OC_MspInit>:
 800bf68:	4770      	bx	lr
 800bf6a:	bf00      	nop

0800bf6c <HAL_TIM_PWM_MspInit>:
 800bf6c:	4770      	bx	lr
 800bf6e:	bf00      	nop

0800bf70 <HAL_TIM_IC_MspInit>:
 800bf70:	4770      	bx	lr
 800bf72:	bf00      	nop

0800bf74 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800bf74:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800bf78:	2b01      	cmp	r3, #1
 800bf7a:	f000 81c8 	beq.w	800c30e <HAL_TIM_ConfigClockSource+0x39a>
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800bf7e:	680a      	ldr	r2, [r1, #0]
 800bf80:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800bf84:	bf18      	it	ne
 800bf86:	f5b2 5f00 	cmpne.w	r2, #8192	; 0x2000
{
 800bf8a:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800bf8c:	bf14      	ite	ne
 800bf8e:	2301      	movne	r3, #1
 800bf90:	2300      	moveq	r3, #0
 800bf92:	f032 0630 	bics.w	r6, r2, #48	; 0x30
 800bf96:	4604      	mov	r4, r0
 800bf98:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 800bf9a:	f04f 0001 	mov.w	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800bf9e:	f04f 0102 	mov.w	r1, #2
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800bfa2:	bf08      	it	eq
 800bfa4:	2300      	moveq	r3, #0
  __HAL_LOCK(htim);
 800bfa6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800bfaa:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800bfae:	b113      	cbz	r3, 800bfb6 <HAL_TIM_ConfigClockSource+0x42>
 800bfb0:	2e40      	cmp	r6, #64	; 0x40
 800bfb2:	f040 8242 	bne.w	800c43a <HAL_TIM_ConfigClockSource+0x4c6>
  tmpsmcr = htim->Instance->SMCR;
 800bfb6:	6823      	ldr	r3, [r4, #0]
  switch (sClockSourceConfig->ClockSource)
 800bfb8:	2a40      	cmp	r2, #64	; 0x40
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bfba:	49a5      	ldr	r1, [pc, #660]	; (800c250 <HAL_TIM_ConfigClockSource+0x2dc>)
  tmpsmcr = htim->Instance->SMCR;
 800bfbc:	6898      	ldr	r0, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bfbe:	ea01 0100 	and.w	r1, r1, r0
  htim->Instance->SMCR = tmpsmcr;
 800bfc2:	6099      	str	r1, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 800bfc4:	f000 81d3 	beq.w	800c36e <HAL_TIM_ConfigClockSource+0x3fa>
 800bfc8:	f240 81a3 	bls.w	800c312 <HAL_TIM_ConfigClockSource+0x39e>
 800bfcc:	2a70      	cmp	r2, #112	; 0x70
 800bfce:	f000 814d 	beq.w	800c26c <HAL_TIM_ConfigClockSource+0x2f8>
 800bfd2:	d84c      	bhi.n	800c06e <HAL_TIM_ConfigClockSource+0xfa>
 800bfd4:	2a50      	cmp	r2, #80	; 0x50
 800bfd6:	f000 8095 	beq.w	800c104 <HAL_TIM_ConfigClockSource+0x190>
 800bfda:	2a60      	cmp	r2, #96	; 0x60
 800bfdc:	f040 812f 	bne.w	800c23e <HAL_TIM_ConfigClockSource+0x2ca>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800bfe0:	4a9c      	ldr	r2, [pc, #624]	; (800c254 <HAL_TIM_ConfigClockSource+0x2e0>)
 800bfe2:	499d      	ldr	r1, [pc, #628]	; (800c258 <HAL_TIM_ConfigClockSource+0x2e4>)
 800bfe4:	4293      	cmp	r3, r2
 800bfe6:	bf18      	it	ne
 800bfe8:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800bfec:	489b      	ldr	r0, [pc, #620]	; (800c25c <HAL_TIM_ConfigClockSource+0x2e8>)
 800bfee:	bf14      	ite	ne
 800bff0:	2201      	movne	r2, #1
 800bff2:	2200      	moveq	r2, #0
 800bff4:	428b      	cmp	r3, r1
 800bff6:	bf0c      	ite	eq
 800bff8:	2200      	moveq	r2, #0
 800bffa:	f002 0201 	andne.w	r2, r2, #1
 800bffe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c002:	4283      	cmp	r3, r0
 800c004:	bf0c      	ite	eq
 800c006:	2200      	moveq	r2, #0
 800c008:	f002 0201 	andne.w	r2, r2, #1
 800c00c:	428b      	cmp	r3, r1
 800c00e:	bf0c      	ite	eq
 800c010:	2200      	moveq	r2, #0
 800c012:	f002 0201 	andne.w	r2, r2, #1
 800c016:	b11a      	cbz	r2, 800c020 <HAL_TIM_ConfigClockSource+0xac>
 800c018:	4a91      	ldr	r2, [pc, #580]	; (800c260 <HAL_TIM_ConfigClockSource+0x2ec>)
 800c01a:	4293      	cmp	r3, r2
 800c01c:	f040 8201 	bne.w	800c422 <HAL_TIM_ConfigClockSource+0x4ae>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800c020:	686b      	ldr	r3, [r5, #4]
 800c022:	2b0a      	cmp	r3, #10
 800c024:	bf18      	it	ne
 800c026:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800c02a:	d003      	beq.n	800c034 <HAL_TIM_ConfigClockSource+0xc0>
 800c02c:	f033 0302 	bics.w	r3, r3, #2
 800c030:	f040 8216 	bne.w	800c460 <HAL_TIM_ConfigClockSource+0x4ec>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800c034:	68ee      	ldr	r6, [r5, #12]
 800c036:	2e0f      	cmp	r6, #15
 800c038:	f200 823f 	bhi.w	800c4ba <HAL_TIM_ConfigClockSource+0x546>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c03c:	6823      	ldr	r3, [r4, #0]
 800c03e:	686d      	ldr	r5, [r5, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c040:	6a18      	ldr	r0, [r3, #32]
 800c042:	f020 0010 	bic.w	r0, r0, #16
 800c046:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c048:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800c04a:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c04c:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c050:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c054:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800c058:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800c05c:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800c05e:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800c060:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800c062:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c066:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800c06a:	609a      	str	r2, [r3, #8]
 800c06c:	e0e7      	b.n	800c23e <HAL_TIM_ConfigClockSource+0x2ca>
  switch (sClockSourceConfig->ClockSource)
 800c06e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800c072:	f000 808d 	beq.w	800c190 <HAL_TIM_ConfigClockSource+0x21c>
 800c076:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800c07a:	f040 80e0 	bne.w	800c23e <HAL_TIM_ConfigClockSource+0x2ca>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800c07e:	4a75      	ldr	r2, [pc, #468]	; (800c254 <HAL_TIM_ConfigClockSource+0x2e0>)
 800c080:	4975      	ldr	r1, [pc, #468]	; (800c258 <HAL_TIM_ConfigClockSource+0x2e4>)
 800c082:	4293      	cmp	r3, r2
 800c084:	bf18      	it	ne
 800c086:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800c08a:	4874      	ldr	r0, [pc, #464]	; (800c25c <HAL_TIM_ConfigClockSource+0x2e8>)
 800c08c:	bf14      	ite	ne
 800c08e:	2201      	movne	r2, #1
 800c090:	2200      	moveq	r2, #0
 800c092:	428b      	cmp	r3, r1
 800c094:	bf0c      	ite	eq
 800c096:	2200      	moveq	r2, #0
 800c098:	f002 0201 	andne.w	r2, r2, #1
 800c09c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c0a0:	4283      	cmp	r3, r0
 800c0a2:	bf0c      	ite	eq
 800c0a4:	2200      	moveq	r2, #0
 800c0a6:	f002 0201 	andne.w	r2, r2, #1
 800c0aa:	428b      	cmp	r3, r1
 800c0ac:	bf0c      	ite	eq
 800c0ae:	2200      	moveq	r2, #0
 800c0b0:	f002 0201 	andne.w	r2, r2, #1
 800c0b4:	b11a      	cbz	r2, 800c0be <HAL_TIM_ConfigClockSource+0x14a>
 800c0b6:	4a6a      	ldr	r2, [pc, #424]	; (800c260 <HAL_TIM_ConfigClockSource+0x2ec>)
 800c0b8:	4293      	cmp	r3, r2
 800c0ba:	f040 81b8 	bne.w	800c42e <HAL_TIM_ConfigClockSource+0x4ba>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800c0be:	68ab      	ldr	r3, [r5, #8]
 800c0c0:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800c0c4:	f040 8207 	bne.w	800c4d6 <HAL_TIM_ConfigClockSource+0x562>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800c0c8:	686b      	ldr	r3, [r5, #4]
 800c0ca:	2b0a      	cmp	r3, #10
 800c0cc:	bf18      	it	ne
 800c0ce:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800c0d2:	d003      	beq.n	800c0dc <HAL_TIM_ConfigClockSource+0x168>
 800c0d4:	f033 0302 	bics.w	r3, r3, #2
 800c0d8:	f040 81bc 	bne.w	800c454 <HAL_TIM_ConfigClockSource+0x4e0>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800c0dc:	68e8      	ldr	r0, [r5, #12]
 800c0de:	280f      	cmp	r0, #15
 800c0e0:	f200 81dd 	bhi.w	800c49e <HAL_TIM_ConfigClockSource+0x52a>
      TIM_ETR_SetConfig(htim->Instance,
 800c0e4:	6822      	ldr	r2, [r4, #0]
 800c0e6:	68ab      	ldr	r3, [r5, #8]
  tmpsmcr = TIMx->SMCR;
 800c0e8:	6891      	ldr	r1, [r2, #8]
 800c0ea:	686d      	ldr	r5, [r5, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c0ec:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 800c0f0:	432b      	orrs	r3, r5
 800c0f2:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c0f4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  TIMx->SMCR = tmpsmcr;
 800c0f8:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c0fa:	6893      	ldr	r3, [r2, #8]
 800c0fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c100:	6093      	str	r3, [r2, #8]
      break;
 800c102:	e09c      	b.n	800c23e <HAL_TIM_ConfigClockSource+0x2ca>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800c104:	4a53      	ldr	r2, [pc, #332]	; (800c254 <HAL_TIM_ConfigClockSource+0x2e0>)
 800c106:	4954      	ldr	r1, [pc, #336]	; (800c258 <HAL_TIM_ConfigClockSource+0x2e4>)
 800c108:	4293      	cmp	r3, r2
 800c10a:	bf18      	it	ne
 800c10c:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800c110:	4852      	ldr	r0, [pc, #328]	; (800c25c <HAL_TIM_ConfigClockSource+0x2e8>)
 800c112:	bf14      	ite	ne
 800c114:	2201      	movne	r2, #1
 800c116:	2200      	moveq	r2, #0
 800c118:	428b      	cmp	r3, r1
 800c11a:	bf0c      	ite	eq
 800c11c:	2200      	moveq	r2, #0
 800c11e:	f002 0201 	andne.w	r2, r2, #1
 800c122:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c126:	4283      	cmp	r3, r0
 800c128:	bf0c      	ite	eq
 800c12a:	2200      	moveq	r2, #0
 800c12c:	f002 0201 	andne.w	r2, r2, #1
 800c130:	428b      	cmp	r3, r1
 800c132:	bf0c      	ite	eq
 800c134:	2200      	moveq	r2, #0
 800c136:	f002 0201 	andne.w	r2, r2, #1
 800c13a:	b11a      	cbz	r2, 800c144 <HAL_TIM_ConfigClockSource+0x1d0>
 800c13c:	4a48      	ldr	r2, [pc, #288]	; (800c260 <HAL_TIM_ConfigClockSource+0x2ec>)
 800c13e:	4293      	cmp	r3, r2
 800c140:	f040 8169 	bne.w	800c416 <HAL_TIM_ConfigClockSource+0x4a2>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800c144:	686b      	ldr	r3, [r5, #4]
 800c146:	2b0a      	cmp	r3, #10
 800c148:	bf18      	it	ne
 800c14a:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800c14e:	d003      	beq.n	800c158 <HAL_TIM_ConfigClockSource+0x1e4>
 800c150:	f033 0302 	bics.w	r3, r3, #2
 800c154:	f040 818a 	bne.w	800c46c <HAL_TIM_ConfigClockSource+0x4f8>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800c158:	68ee      	ldr	r6, [r5, #12]
 800c15a:	2e0f      	cmp	r6, #15
 800c15c:	f200 81b4 	bhi.w	800c4c8 <HAL_TIM_ConfigClockSource+0x554>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c160:	6823      	ldr	r3, [r4, #0]
 800c162:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 800c164:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c166:	6a18      	ldr	r0, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c168:	f025 050a 	bic.w	r5, r5, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c16c:	f020 0001 	bic.w	r0, r0, #1
  tmpccer |= TIM_ICPolarity;
 800c170:	4329      	orrs	r1, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c172:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c174:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c176:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c17a:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800c17e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c180:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800c182:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800c184:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c188:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800c18c:	609a      	str	r2, [r3, #8]
 800c18e:	e056      	b.n	800c23e <HAL_TIM_ConfigClockSource+0x2ca>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800c190:	4a30      	ldr	r2, [pc, #192]	; (800c254 <HAL_TIM_ConfigClockSource+0x2e0>)
 800c192:	4831      	ldr	r0, [pc, #196]	; (800c258 <HAL_TIM_ConfigClockSource+0x2e4>)
 800c194:	4293      	cmp	r3, r2
 800c196:	bf18      	it	ne
 800c198:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800c19c:	492f      	ldr	r1, [pc, #188]	; (800c25c <HAL_TIM_ConfigClockSource+0x2e8>)
 800c19e:	4d31      	ldr	r5, [pc, #196]	; (800c264 <HAL_TIM_ConfigClockSource+0x2f0>)
 800c1a0:	bf14      	ite	ne
 800c1a2:	2201      	movne	r2, #1
 800c1a4:	2200      	moveq	r2, #0
 800c1a6:	4283      	cmp	r3, r0
 800c1a8:	bf0c      	ite	eq
 800c1aa:	2200      	moveq	r2, #0
 800c1ac:	f002 0201 	andne.w	r2, r2, #1
 800c1b0:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800c1b4:	428b      	cmp	r3, r1
 800c1b6:	bf0c      	ite	eq
 800c1b8:	2200      	moveq	r2, #0
 800c1ba:	f002 0201 	andne.w	r2, r2, #1
 800c1be:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800c1c2:	42ab      	cmp	r3, r5
 800c1c4:	bf0c      	ite	eq
 800c1c6:	2200      	moveq	r2, #0
 800c1c8:	f002 0201 	andne.w	r2, r2, #1
 800c1cc:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800c1d0:	4283      	cmp	r3, r0
 800c1d2:	bf0c      	ite	eq
 800c1d4:	2200      	moveq	r2, #0
 800c1d6:	f002 0201 	andne.w	r2, r2, #1
 800c1da:	f500 3098 	add.w	r0, r0, #77824	; 0x13000
 800c1de:	428b      	cmp	r3, r1
 800c1e0:	bf0c      	ite	eq
 800c1e2:	2200      	moveq	r2, #0
 800c1e4:	f002 0201 	andne.w	r2, r2, #1
 800c1e8:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
 800c1ec:	42ab      	cmp	r3, r5
 800c1ee:	bf0c      	ite	eq
 800c1f0:	2200      	moveq	r2, #0
 800c1f2:	f002 0201 	andne.w	r2, r2, #1
 800c1f6:	f505 4588 	add.w	r5, r5, #17408	; 0x4400
 800c1fa:	4283      	cmp	r3, r0
 800c1fc:	bf0c      	ite	eq
 800c1fe:	2200      	moveq	r2, #0
 800c200:	f002 0201 	andne.w	r2, r2, #1
 800c204:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800c208:	428b      	cmp	r3, r1
 800c20a:	bf0c      	ite	eq
 800c20c:	2200      	moveq	r2, #0
 800c20e:	f002 0201 	andne.w	r2, r2, #1
 800c212:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800c216:	42ab      	cmp	r3, r5
 800c218:	bf0c      	ite	eq
 800c21a:	2200      	moveq	r2, #0
 800c21c:	f002 0201 	andne.w	r2, r2, #1
 800c220:	4283      	cmp	r3, r0
 800c222:	bf0c      	ite	eq
 800c224:	2200      	moveq	r2, #0
 800c226:	f002 0201 	andne.w	r2, r2, #1
 800c22a:	428b      	cmp	r3, r1
 800c22c:	bf0c      	ite	eq
 800c22e:	2200      	moveq	r2, #0
 800c230:	f002 0201 	andne.w	r2, r2, #1
 800c234:	b11a      	cbz	r2, 800c23e <HAL_TIM_ConfigClockSource+0x2ca>
 800c236:	4a0c      	ldr	r2, [pc, #48]	; (800c268 <HAL_TIM_ConfigClockSource+0x2f4>)
 800c238:	4293      	cmp	r3, r2
 800c23a:	f040 8158 	bne.w	800c4ee <HAL_TIM_ConfigClockSource+0x57a>
  __HAL_UNLOCK(htim);
 800c23e:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800c240:	2201      	movs	r2, #1
  return HAL_OK;
 800c242:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800c244:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800c248:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800c24c:	bd70      	pop	{r4, r5, r6, pc}
 800c24e:	bf00      	nop
 800c250:	fffe0088 	.word	0xfffe0088
 800c254:	40010000 	.word	0x40010000
 800c258:	40000400 	.word	0x40000400
 800c25c:	40000800 	.word	0x40000800
 800c260:	40010400 	.word	0x40010400
 800c264:	40000c00 	.word	0x40000c00
 800c268:	40002000 	.word	0x40002000
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800c26c:	4aa3      	ldr	r2, [pc, #652]	; (800c4fc <HAL_TIM_ConfigClockSource+0x588>)
 800c26e:	49a4      	ldr	r1, [pc, #656]	; (800c500 <HAL_TIM_ConfigClockSource+0x58c>)
 800c270:	4293      	cmp	r3, r2
 800c272:	bf18      	it	ne
 800c274:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800c278:	48a2      	ldr	r0, [pc, #648]	; (800c504 <HAL_TIM_ConfigClockSource+0x590>)
 800c27a:	bf14      	ite	ne
 800c27c:	2201      	movne	r2, #1
 800c27e:	2200      	moveq	r2, #0
 800c280:	428b      	cmp	r3, r1
 800c282:	bf0c      	ite	eq
 800c284:	2200      	moveq	r2, #0
 800c286:	f002 0201 	andne.w	r2, r2, #1
 800c28a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c28e:	4283      	cmp	r3, r0
 800c290:	bf0c      	ite	eq
 800c292:	2200      	moveq	r2, #0
 800c294:	f002 0201 	andne.w	r2, r2, #1
 800c298:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800c29c:	428b      	cmp	r3, r1
 800c29e:	bf0c      	ite	eq
 800c2a0:	2200      	moveq	r2, #0
 800c2a2:	f002 0201 	andne.w	r2, r2, #1
 800c2a6:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800c2aa:	4283      	cmp	r3, r0
 800c2ac:	bf0c      	ite	eq
 800c2ae:	2200      	moveq	r2, #0
 800c2b0:	f002 0201 	andne.w	r2, r2, #1
 800c2b4:	428b      	cmp	r3, r1
 800c2b6:	bf0c      	ite	eq
 800c2b8:	2200      	moveq	r2, #0
 800c2ba:	f002 0201 	andne.w	r2, r2, #1
 800c2be:	b11a      	cbz	r2, 800c2c8 <HAL_TIM_ConfigClockSource+0x354>
 800c2c0:	4a91      	ldr	r2, [pc, #580]	; (800c508 <HAL_TIM_ConfigClockSource+0x594>)
 800c2c2:	4293      	cmp	r3, r2
 800c2c4:	f040 80de 	bne.w	800c484 <HAL_TIM_ConfigClockSource+0x510>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800c2c8:	68ab      	ldr	r3, [r5, #8]
 800c2ca:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800c2ce:	f040 8108 	bne.w	800c4e2 <HAL_TIM_ConfigClockSource+0x56e>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800c2d2:	686b      	ldr	r3, [r5, #4]
 800c2d4:	2b0a      	cmp	r3, #10
 800c2d6:	bf18      	it	ne
 800c2d8:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800c2dc:	d003      	beq.n	800c2e6 <HAL_TIM_ConfigClockSource+0x372>
 800c2de:	f033 0302 	bics.w	r3, r3, #2
 800c2e2:	f040 80c9 	bne.w	800c478 <HAL_TIM_ConfigClockSource+0x504>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800c2e6:	68e8      	ldr	r0, [r5, #12]
 800c2e8:	280f      	cmp	r0, #15
 800c2ea:	f200 80d1 	bhi.w	800c490 <HAL_TIM_ConfigClockSource+0x51c>
      TIM_ETR_SetConfig(htim->Instance,
 800c2ee:	6822      	ldr	r2, [r4, #0]
 800c2f0:	68ab      	ldr	r3, [r5, #8]
  tmpsmcr = TIMx->SMCR;
 800c2f2:	6891      	ldr	r1, [r2, #8]
 800c2f4:	686d      	ldr	r5, [r5, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c2f6:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 800c2fa:	432b      	orrs	r3, r5
 800c2fc:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c2fe:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  TIMx->SMCR = tmpsmcr;
 800c302:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 800c304:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c306:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800c30a:	6093      	str	r3, [r2, #8]
      break;
 800c30c:	e797      	b.n	800c23e <HAL_TIM_ConfigClockSource+0x2ca>
  __HAL_LOCK(htim);
 800c30e:	2002      	movs	r0, #2
}
 800c310:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800c312:	2a10      	cmp	r2, #16
 800c314:	d004      	beq.n	800c320 <HAL_TIM_ConfigClockSource+0x3ac>
 800c316:	d96d      	bls.n	800c3f4 <HAL_TIM_ConfigClockSource+0x480>
 800c318:	2a20      	cmp	r2, #32
 800c31a:	d001      	beq.n	800c320 <HAL_TIM_ConfigClockSource+0x3ac>
 800c31c:	2a30      	cmp	r2, #48	; 0x30
 800c31e:	d18e      	bne.n	800c23e <HAL_TIM_ConfigClockSource+0x2ca>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800c320:	4976      	ldr	r1, [pc, #472]	; (800c4fc <HAL_TIM_ConfigClockSource+0x588>)
 800c322:	4877      	ldr	r0, [pc, #476]	; (800c500 <HAL_TIM_ConfigClockSource+0x58c>)
 800c324:	428b      	cmp	r3, r1
 800c326:	bf18      	it	ne
 800c328:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800c32c:	4e75      	ldr	r6, [pc, #468]	; (800c504 <HAL_TIM_ConfigClockSource+0x590>)
 800c32e:	bf14      	ite	ne
 800c330:	2101      	movne	r1, #1
 800c332:	2100      	moveq	r1, #0
 800c334:	4283      	cmp	r3, r0
 800c336:	bf0c      	ite	eq
 800c338:	2100      	moveq	r1, #0
 800c33a:	f001 0101 	andne.w	r1, r1, #1
 800c33e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800c342:	42b3      	cmp	r3, r6
 800c344:	bf0c      	ite	eq
 800c346:	2100      	moveq	r1, #0
 800c348:	f001 0101 	andne.w	r1, r1, #1
 800c34c:	4283      	cmp	r3, r0
 800c34e:	bf0c      	ite	eq
 800c350:	2100      	moveq	r1, #0
 800c352:	f001 0101 	andne.w	r1, r1, #1
 800c356:	b111      	cbz	r1, 800c35e <HAL_TIM_ConfigClockSource+0x3ea>
 800c358:	496c      	ldr	r1, [pc, #432]	; (800c50c <HAL_TIM_ConfigClockSource+0x598>)
 800c35a:	428b      	cmp	r3, r1
 800c35c:	d153      	bne.n	800c406 <HAL_TIM_ConfigClockSource+0x492>
  tmpsmcr = TIMx->SMCR;
 800c35e:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c360:	f042 0207 	orr.w	r2, r2, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 800c364:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c368:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 800c36a:	609a      	str	r2, [r3, #8]
 800c36c:	e767      	b.n	800c23e <HAL_TIM_ConfigClockSource+0x2ca>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800c36e:	4a63      	ldr	r2, [pc, #396]	; (800c4fc <HAL_TIM_ConfigClockSource+0x588>)
 800c370:	4963      	ldr	r1, [pc, #396]	; (800c500 <HAL_TIM_ConfigClockSource+0x58c>)
 800c372:	4293      	cmp	r3, r2
 800c374:	bf18      	it	ne
 800c376:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800c37a:	4862      	ldr	r0, [pc, #392]	; (800c504 <HAL_TIM_ConfigClockSource+0x590>)
 800c37c:	bf14      	ite	ne
 800c37e:	2201      	movne	r2, #1
 800c380:	2200      	moveq	r2, #0
 800c382:	428b      	cmp	r3, r1
 800c384:	bf0c      	ite	eq
 800c386:	2200      	moveq	r2, #0
 800c388:	f002 0201 	andne.w	r2, r2, #1
 800c38c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c390:	4283      	cmp	r3, r0
 800c392:	bf0c      	ite	eq
 800c394:	2200      	moveq	r2, #0
 800c396:	f002 0201 	andne.w	r2, r2, #1
 800c39a:	428b      	cmp	r3, r1
 800c39c:	bf0c      	ite	eq
 800c39e:	2200      	moveq	r2, #0
 800c3a0:	f002 0201 	andne.w	r2, r2, #1
 800c3a4:	b112      	cbz	r2, 800c3ac <HAL_TIM_ConfigClockSource+0x438>
 800c3a6:	4a59      	ldr	r2, [pc, #356]	; (800c50c <HAL_TIM_ConfigClockSource+0x598>)
 800c3a8:	4293      	cmp	r3, r2
 800c3aa:	d126      	bne.n	800c3fa <HAL_TIM_ConfigClockSource+0x486>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800c3ac:	686b      	ldr	r3, [r5, #4]
 800c3ae:	2b0a      	cmp	r3, #10
 800c3b0:	bf18      	it	ne
 800c3b2:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800c3b6:	d002      	beq.n	800c3be <HAL_TIM_ConfigClockSource+0x44a>
 800c3b8:	f033 0302 	bics.w	r3, r3, #2
 800c3bc:	d144      	bne.n	800c448 <HAL_TIM_ConfigClockSource+0x4d4>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800c3be:	68ee      	ldr	r6, [r5, #12]
 800c3c0:	2e0f      	cmp	r6, #15
 800c3c2:	d873      	bhi.n	800c4ac <HAL_TIM_ConfigClockSource+0x538>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c3c4:	6823      	ldr	r3, [r4, #0]
 800c3c6:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 800c3c8:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c3ca:	6a18      	ldr	r0, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c3cc:	f025 050a 	bic.w	r5, r5, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c3d0:	f020 0001 	bic.w	r0, r0, #1
  tmpccer |= TIM_ICPolarity;
 800c3d4:	4329      	orrs	r1, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c3d6:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c3d8:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c3da:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c3de:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800c3e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c3e4:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800c3e6:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800c3e8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c3ec:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800c3f0:	609a      	str	r2, [r3, #8]
 800c3f2:	e724      	b.n	800c23e <HAL_TIM_ConfigClockSource+0x2ca>
  switch (sClockSourceConfig->ClockSource)
 800c3f4:	2a00      	cmp	r2, #0
 800c3f6:	d093      	beq.n	800c320 <HAL_TIM_ConfigClockSource+0x3ac>
 800c3f8:	e721      	b.n	800c23e <HAL_TIM_ConfigClockSource+0x2ca>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800c3fa:	f241 2169 	movw	r1, #4713	; 0x1269
 800c3fe:	4844      	ldr	r0, [pc, #272]	; (800c510 <HAL_TIM_ConfigClockSource+0x59c>)
 800c400:	f7f6 fd10 	bl	8002e24 <assert_failed>
 800c404:	e7d2      	b.n	800c3ac <HAL_TIM_ConfigClockSource+0x438>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800c406:	f241 217c 	movw	r1, #4732	; 0x127c
 800c40a:	4841      	ldr	r0, [pc, #260]	; (800c510 <HAL_TIM_ConfigClockSource+0x59c>)
 800c40c:	f7f6 fd0a 	bl	8002e24 <assert_failed>
 800c410:	682a      	ldr	r2, [r5, #0]
 800c412:	6823      	ldr	r3, [r4, #0]
 800c414:	e7a3      	b.n	800c35e <HAL_TIM_ConfigClockSource+0x3ea>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800c416:	f241 2149 	movw	r1, #4681	; 0x1249
 800c41a:	483d      	ldr	r0, [pc, #244]	; (800c510 <HAL_TIM_ConfigClockSource+0x59c>)
 800c41c:	f7f6 fd02 	bl	8002e24 <assert_failed>
 800c420:	e690      	b.n	800c144 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800c422:	f241 2159 	movw	r1, #4697	; 0x1259
 800c426:	483a      	ldr	r0, [pc, #232]	; (800c510 <HAL_TIM_ConfigClockSource+0x59c>)
 800c428:	f7f6 fcfc 	bl	8002e24 <assert_failed>
 800c42c:	e5f8      	b.n	800c020 <HAL_TIM_ConfigClockSource+0xac>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800c42e:	f241 2135 	movw	r1, #4661	; 0x1235
 800c432:	4837      	ldr	r0, [pc, #220]	; (800c510 <HAL_TIM_ConfigClockSource+0x59c>)
 800c434:	f7f6 fcf6 	bl	8002e24 <assert_failed>
 800c438:	e641      	b.n	800c0be <HAL_TIM_ConfigClockSource+0x14a>
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800c43a:	f241 210a 	movw	r1, #4618	; 0x120a
 800c43e:	4834      	ldr	r0, [pc, #208]	; (800c510 <HAL_TIM_ConfigClockSource+0x59c>)
 800c440:	f7f6 fcf0 	bl	8002e24 <assert_failed>
 800c444:	682a      	ldr	r2, [r5, #0]
 800c446:	e5b6      	b.n	800bfb6 <HAL_TIM_ConfigClockSource+0x42>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800c448:	f241 216c 	movw	r1, #4716	; 0x126c
 800c44c:	4830      	ldr	r0, [pc, #192]	; (800c510 <HAL_TIM_ConfigClockSource+0x59c>)
 800c44e:	f7f6 fce9 	bl	8002e24 <assert_failed>
 800c452:	e7b4      	b.n	800c3be <HAL_TIM_ConfigClockSource+0x44a>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800c454:	f241 2139 	movw	r1, #4665	; 0x1239
 800c458:	482d      	ldr	r0, [pc, #180]	; (800c510 <HAL_TIM_ConfigClockSource+0x59c>)
 800c45a:	f7f6 fce3 	bl	8002e24 <assert_failed>
 800c45e:	e63d      	b.n	800c0dc <HAL_TIM_ConfigClockSource+0x168>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800c460:	f241 215c 	movw	r1, #4700	; 0x125c
 800c464:	482a      	ldr	r0, [pc, #168]	; (800c510 <HAL_TIM_ConfigClockSource+0x59c>)
 800c466:	f7f6 fcdd 	bl	8002e24 <assert_failed>
 800c46a:	e5e3      	b.n	800c034 <HAL_TIM_ConfigClockSource+0xc0>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800c46c:	f241 214c 	movw	r1, #4684	; 0x124c
 800c470:	4827      	ldr	r0, [pc, #156]	; (800c510 <HAL_TIM_ConfigClockSource+0x59c>)
 800c472:	f7f6 fcd7 	bl	8002e24 <assert_failed>
 800c476:	e66f      	b.n	800c158 <HAL_TIM_ConfigClockSource+0x1e4>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800c478:	f241 2121 	movw	r1, #4641	; 0x1221
 800c47c:	4824      	ldr	r0, [pc, #144]	; (800c510 <HAL_TIM_ConfigClockSource+0x59c>)
 800c47e:	f7f6 fcd1 	bl	8002e24 <assert_failed>
 800c482:	e730      	b.n	800c2e6 <HAL_TIM_ConfigClockSource+0x372>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800c484:	f241 211d 	movw	r1, #4637	; 0x121d
 800c488:	4821      	ldr	r0, [pc, #132]	; (800c510 <HAL_TIM_ConfigClockSource+0x59c>)
 800c48a:	f7f6 fccb 	bl	8002e24 <assert_failed>
 800c48e:	e71b      	b.n	800c2c8 <HAL_TIM_ConfigClockSource+0x354>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800c490:	481f      	ldr	r0, [pc, #124]	; (800c510 <HAL_TIM_ConfigClockSource+0x59c>)
 800c492:	f241 2122 	movw	r1, #4642	; 0x1222
 800c496:	f7f6 fcc5 	bl	8002e24 <assert_failed>
 800c49a:	68e8      	ldr	r0, [r5, #12]
 800c49c:	e727      	b.n	800c2ee <HAL_TIM_ConfigClockSource+0x37a>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800c49e:	481c      	ldr	r0, [pc, #112]	; (800c510 <HAL_TIM_ConfigClockSource+0x59c>)
 800c4a0:	f241 213a 	movw	r1, #4666	; 0x123a
 800c4a4:	f7f6 fcbe 	bl	8002e24 <assert_failed>
 800c4a8:	68e8      	ldr	r0, [r5, #12]
 800c4aa:	e61b      	b.n	800c0e4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800c4ac:	f241 216d 	movw	r1, #4717	; 0x126d
 800c4b0:	4817      	ldr	r0, [pc, #92]	; (800c510 <HAL_TIM_ConfigClockSource+0x59c>)
 800c4b2:	f7f6 fcb7 	bl	8002e24 <assert_failed>
 800c4b6:	68ee      	ldr	r6, [r5, #12]
 800c4b8:	e784      	b.n	800c3c4 <HAL_TIM_ConfigClockSource+0x450>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800c4ba:	f241 215d 	movw	r1, #4701	; 0x125d
 800c4be:	4814      	ldr	r0, [pc, #80]	; (800c510 <HAL_TIM_ConfigClockSource+0x59c>)
 800c4c0:	f7f6 fcb0 	bl	8002e24 <assert_failed>
 800c4c4:	68ee      	ldr	r6, [r5, #12]
 800c4c6:	e5b9      	b.n	800c03c <HAL_TIM_ConfigClockSource+0xc8>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800c4c8:	f241 214d 	movw	r1, #4685	; 0x124d
 800c4cc:	4810      	ldr	r0, [pc, #64]	; (800c510 <HAL_TIM_ConfigClockSource+0x59c>)
 800c4ce:	f7f6 fca9 	bl	8002e24 <assert_failed>
 800c4d2:	68ee      	ldr	r6, [r5, #12]
 800c4d4:	e644      	b.n	800c160 <HAL_TIM_ConfigClockSource+0x1ec>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800c4d6:	f241 2138 	movw	r1, #4664	; 0x1238
 800c4da:	480d      	ldr	r0, [pc, #52]	; (800c510 <HAL_TIM_ConfigClockSource+0x59c>)
 800c4dc:	f7f6 fca2 	bl	8002e24 <assert_failed>
 800c4e0:	e5f2      	b.n	800c0c8 <HAL_TIM_ConfigClockSource+0x154>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800c4e2:	f44f 5191 	mov.w	r1, #4640	; 0x1220
 800c4e6:	480a      	ldr	r0, [pc, #40]	; (800c510 <HAL_TIM_ConfigClockSource+0x59c>)
 800c4e8:	f7f6 fc9c 	bl	8002e24 <assert_failed>
 800c4ec:	e6f1      	b.n	800c2d2 <HAL_TIM_ConfigClockSource+0x35e>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800c4ee:	f241 2116 	movw	r1, #4630	; 0x1216
 800c4f2:	4807      	ldr	r0, [pc, #28]	; (800c510 <HAL_TIM_ConfigClockSource+0x59c>)
 800c4f4:	f7f6 fc96 	bl	8002e24 <assert_failed>
 800c4f8:	e6a1      	b.n	800c23e <HAL_TIM_ConfigClockSource+0x2ca>
 800c4fa:	bf00      	nop
 800c4fc:	40010000 	.word	0x40010000
 800c500:	40000400 	.word	0x40000400
 800c504:	40000800 	.word	0x40000800
 800c508:	40001800 	.word	0x40001800
 800c50c:	40010400 	.word	0x40010400
 800c510:	08026848 	.word	0x08026848

0800c514 <HAL_TIM_SlaveConfigSynchro>:
{
 800c514:	b570      	push	{r4, r5, r6, lr}
 800c516:	4604      	mov	r4, r0
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800c518:	4b39      	ldr	r3, [pc, #228]	; (800c600 <HAL_TIM_SlaveConfigSynchro+0xec>)
 800c51a:	483a      	ldr	r0, [pc, #232]	; (800c604 <HAL_TIM_SlaveConfigSynchro+0xf0>)
{
 800c51c:	460d      	mov	r5, r1
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800c51e:	6822      	ldr	r2, [r4, #0]
 800c520:	4939      	ldr	r1, [pc, #228]	; (800c608 <HAL_TIM_SlaveConfigSynchro+0xf4>)
 800c522:	429a      	cmp	r2, r3
 800c524:	bf18      	it	ne
 800c526:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800c52a:	4e38      	ldr	r6, [pc, #224]	; (800c60c <HAL_TIM_SlaveConfigSynchro+0xf8>)
 800c52c:	bf14      	ite	ne
 800c52e:	2301      	movne	r3, #1
 800c530:	2300      	moveq	r3, #0
 800c532:	4282      	cmp	r2, r0
 800c534:	bf0c      	ite	eq
 800c536:	2300      	moveq	r3, #0
 800c538:	f003 0301 	andne.w	r3, r3, #1
 800c53c:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 800c540:	428a      	cmp	r2, r1
 800c542:	bf0c      	ite	eq
 800c544:	2300      	moveq	r3, #0
 800c546:	f003 0301 	andne.w	r3, r3, #1
 800c54a:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 800c54e:	42b2      	cmp	r2, r6
 800c550:	bf0c      	ite	eq
 800c552:	2300      	moveq	r3, #0
 800c554:	f003 0301 	andne.w	r3, r3, #1
 800c558:	4282      	cmp	r2, r0
 800c55a:	bf0c      	ite	eq
 800c55c:	2300      	moveq	r3, #0
 800c55e:	f003 0301 	andne.w	r3, r3, #1
 800c562:	428a      	cmp	r2, r1
 800c564:	bf0c      	ite	eq
 800c566:	2300      	moveq	r3, #0
 800c568:	f003 0301 	andne.w	r3, r3, #1
 800c56c:	b113      	cbz	r3, 800c574 <HAL_TIM_SlaveConfigSynchro+0x60>
 800c56e:	4b28      	ldr	r3, [pc, #160]	; (800c610 <HAL_TIM_SlaveConfigSynchro+0xfc>)
 800c570:	429a      	cmp	r2, r3
 800c572:	d138      	bne.n	800c5e6 <HAL_TIM_SlaveConfigSynchro+0xd2>
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 800c574:	682b      	ldr	r3, [r5, #0]
 800c576:	1f1a      	subs	r2, r3, #4
 800c578:	2a03      	cmp	r2, #3
 800c57a:	d902      	bls.n	800c582 <HAL_TIM_SlaveConfigSynchro+0x6e>
 800c57c:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800c580:	d12b      	bne.n	800c5da <HAL_TIM_SlaveConfigSynchro+0xc6>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 800c582:	686b      	ldr	r3, [r5, #4]
 800c584:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800c588:	2b40      	cmp	r3, #64	; 0x40
 800c58a:	d000      	beq.n	800c58e <HAL_TIM_SlaveConfigSynchro+0x7a>
 800c58c:	bb8b      	cbnz	r3, 800c5f2 <HAL_TIM_SlaveConfigSynchro+0xde>
  __HAL_LOCK(htim);
 800c58e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800c592:	2b01      	cmp	r3, #1
 800c594:	d01f      	beq.n	800c5d6 <HAL_TIM_SlaveConfigSynchro+0xc2>
 800c596:	2601      	movs	r6, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800c598:	2302      	movs	r3, #2
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800c59a:	4629      	mov	r1, r5
 800c59c:	4620      	mov	r0, r4
  __HAL_LOCK(htim);
 800c59e:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800c5a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800c5a6:	f7ff f9b3 	bl	800b910 <TIM_SlaveTimer_SetConfig>
 800c5aa:	b968      	cbnz	r0, 800c5c8 <HAL_TIM_SlaveConfigSynchro+0xb4>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800c5ac:	6823      	ldr	r3, [r4, #0]
 800c5ae:	68da      	ldr	r2, [r3, #12]
 800c5b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c5b4:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800c5b6:	68da      	ldr	r2, [r3, #12]
 800c5b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c5bc:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 800c5be:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800c5c2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800c5c6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(htim);
 800c5c8:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 800c5ca:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
    return HAL_ERROR;
 800c5ce:	4630      	mov	r0, r6
    __HAL_UNLOCK(htim);
 800c5d0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800c5d4:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 800c5d6:	2002      	movs	r0, #2
}
 800c5d8:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 800c5da:	f241 21bc 	movw	r1, #4796	; 0x12bc
 800c5de:	480d      	ldr	r0, [pc, #52]	; (800c614 <HAL_TIM_SlaveConfigSynchro+0x100>)
 800c5e0:	f7f6 fc20 	bl	8002e24 <assert_failed>
 800c5e4:	e7cd      	b.n	800c582 <HAL_TIM_SlaveConfigSynchro+0x6e>
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800c5e6:	f241 21bb 	movw	r1, #4795	; 0x12bb
 800c5ea:	480a      	ldr	r0, [pc, #40]	; (800c614 <HAL_TIM_SlaveConfigSynchro+0x100>)
 800c5ec:	f7f6 fc1a 	bl	8002e24 <assert_failed>
 800c5f0:	e7c0      	b.n	800c574 <HAL_TIM_SlaveConfigSynchro+0x60>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 800c5f2:	f241 21bd 	movw	r1, #4797	; 0x12bd
 800c5f6:	4807      	ldr	r0, [pc, #28]	; (800c614 <HAL_TIM_SlaveConfigSynchro+0x100>)
 800c5f8:	f7f6 fc14 	bl	8002e24 <assert_failed>
 800c5fc:	e7c7      	b.n	800c58e <HAL_TIM_SlaveConfigSynchro+0x7a>
 800c5fe:	bf00      	nop
 800c600:	40010000 	.word	0x40010000
 800c604:	40000400 	.word	0x40000400
 800c608:	40000800 	.word	0x40000800
 800c60c:	40000c00 	.word	0x40000c00
 800c610:	40001800 	.word	0x40001800
 800c614:	08026848 	.word	0x08026848

0800c618 <HAL_TIM_OC_DelayElapsedCallback>:
 800c618:	4770      	bx	lr
 800c61a:	bf00      	nop

0800c61c <TIM_DMACaptureCplt>:
{
 800c61c:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c61e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 800c620:	2301      	movs	r3, #1
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c622:	6a62      	ldr	r2, [r4, #36]	; 0x24
  htim->State = HAL_TIM_STATE_READY;
 800c624:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c628:	4282      	cmp	r2, r0
 800c62a:	d00f      	beq.n	800c64c <TIM_DMACaptureCplt+0x30>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800c62c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c62e:	4283      	cmp	r3, r0
 800c630:	d01b      	beq.n	800c66a <TIM_DMACaptureCplt+0x4e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800c632:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c634:	4283      	cmp	r3, r0
 800c636:	d010      	beq.n	800c65a <TIM_DMACaptureCplt+0x3e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800c638:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c63a:	4283      	cmp	r3, r0
 800c63c:	d005      	beq.n	800c64a <TIM_DMACaptureCplt+0x2e>
  HAL_TIM_IC_CaptureCallback(htim);
 800c63e:	4620      	mov	r0, r4
 800c640:	f7f5 fb5c 	bl	8001cfc <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c644:	2300      	movs	r3, #0
 800c646:	7723      	strb	r3, [r4, #28]
}
 800c648:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c64a:	2308      	movs	r3, #8
 800c64c:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureCallback(htim);
 800c64e:	4620      	mov	r0, r4
 800c650:	f7f5 fb54 	bl	8001cfc <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c654:	2300      	movs	r3, #0
 800c656:	7723      	strb	r3, [r4, #28]
}
 800c658:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c65a:	2304      	movs	r3, #4
  HAL_TIM_IC_CaptureCallback(htim);
 800c65c:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c65e:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureCallback(htim);
 800c660:	f7f5 fb4c 	bl	8001cfc <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c664:	2300      	movs	r3, #0
 800c666:	7723      	strb	r3, [r4, #28]
}
 800c668:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c66a:	2302      	movs	r3, #2
  HAL_TIM_IC_CaptureCallback(htim);
 800c66c:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c66e:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureCallback(htim);
 800c670:	f7f5 fb44 	bl	8001cfc <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c674:	2300      	movs	r3, #0
 800c676:	7723      	strb	r3, [r4, #28]
}
 800c678:	bd10      	pop	{r4, pc}
 800c67a:	bf00      	nop

0800c67c <HAL_TIM_IC_CaptureHalfCpltCallback>:
 800c67c:	4770      	bx	lr
 800c67e:	bf00      	nop

0800c680 <TIM_DMACaptureHalfCplt>:
{
 800c680:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c682:	6b84      	ldr	r4, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 800c684:	2301      	movs	r3, #1
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c686:	6a62      	ldr	r2, [r4, #36]	; 0x24
  htim->State = HAL_TIM_STATE_READY;
 800c688:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c68c:	4282      	cmp	r2, r0
 800c68e:	d00f      	beq.n	800c6b0 <TIM_DMACaptureHalfCplt+0x30>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800c690:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c692:	4283      	cmp	r3, r0
 800c694:	d01b      	beq.n	800c6ce <TIM_DMACaptureHalfCplt+0x4e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800c696:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c698:	4283      	cmp	r3, r0
 800c69a:	d010      	beq.n	800c6be <TIM_DMACaptureHalfCplt+0x3e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800c69c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c69e:	4283      	cmp	r3, r0
 800c6a0:	d005      	beq.n	800c6ae <TIM_DMACaptureHalfCplt+0x2e>
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800c6a2:	4620      	mov	r0, r4
 800c6a4:	f7ff ffea 	bl	800c67c <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	7723      	strb	r3, [r4, #28]
}
 800c6ac:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c6ae:	2308      	movs	r3, #8
 800c6b0:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800c6b2:	4620      	mov	r0, r4
 800c6b4:	f7ff ffe2 	bl	800c67c <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	7723      	strb	r3, [r4, #28]
}
 800c6bc:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c6be:	2304      	movs	r3, #4
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800c6c0:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c6c2:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800c6c4:	f7ff ffda 	bl	800c67c <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	7723      	strb	r3, [r4, #28]
}
 800c6cc:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c6ce:	2302      	movs	r3, #2
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800c6d0:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c6d2:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800c6d4:	f7ff ffd2 	bl	800c67c <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c6d8:	2300      	movs	r3, #0
 800c6da:	7723      	strb	r3, [r4, #28]
}
 800c6dc:	bd10      	pop	{r4, pc}
 800c6de:	bf00      	nop

0800c6e0 <HAL_TIM_PWM_PulseFinishedCallback>:
 800c6e0:	4770      	bx	lr
 800c6e2:	bf00      	nop

0800c6e4 <HAL_TIM_TriggerCallback>:
 800c6e4:	4770      	bx	lr
 800c6e6:	bf00      	nop

0800c6e8 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c6e8:	6803      	ldr	r3, [r0, #0]
 800c6ea:	691a      	ldr	r2, [r3, #16]
 800c6ec:	0791      	lsls	r1, r2, #30
{
 800c6ee:	b510      	push	{r4, lr}
 800c6f0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c6f2:	d502      	bpl.n	800c6fa <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c6f4:	68da      	ldr	r2, [r3, #12]
 800c6f6:	0792      	lsls	r2, r2, #30
 800c6f8:	d468      	bmi.n	800c7cc <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c6fa:	691a      	ldr	r2, [r3, #16]
 800c6fc:	0752      	lsls	r2, r2, #29
 800c6fe:	d502      	bpl.n	800c706 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c700:	68da      	ldr	r2, [r3, #12]
 800c702:	0750      	lsls	r0, r2, #29
 800c704:	d44f      	bmi.n	800c7a6 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c706:	691a      	ldr	r2, [r3, #16]
 800c708:	0711      	lsls	r1, r2, #28
 800c70a:	d502      	bpl.n	800c712 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c70c:	68da      	ldr	r2, [r3, #12]
 800c70e:	0712      	lsls	r2, r2, #28
 800c710:	d437      	bmi.n	800c782 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c712:	691a      	ldr	r2, [r3, #16]
 800c714:	06d0      	lsls	r0, r2, #27
 800c716:	d502      	bpl.n	800c71e <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c718:	68da      	ldr	r2, [r3, #12]
 800c71a:	06d1      	lsls	r1, r2, #27
 800c71c:	d41e      	bmi.n	800c75c <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c71e:	691a      	ldr	r2, [r3, #16]
 800c720:	07d2      	lsls	r2, r2, #31
 800c722:	d502      	bpl.n	800c72a <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c724:	68da      	ldr	r2, [r3, #12]
 800c726:	07d0      	lsls	r0, r2, #31
 800c728:	d469      	bmi.n	800c7fe <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c72a:	691a      	ldr	r2, [r3, #16]
 800c72c:	0611      	lsls	r1, r2, #24
 800c72e:	d502      	bpl.n	800c736 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c730:	68da      	ldr	r2, [r3, #12]
 800c732:	0612      	lsls	r2, r2, #24
 800c734:	d46b      	bmi.n	800c80e <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c736:	691a      	ldr	r2, [r3, #16]
 800c738:	05d0      	lsls	r0, r2, #23
 800c73a:	d502      	bpl.n	800c742 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c73c:	68da      	ldr	r2, [r3, #12]
 800c73e:	0611      	lsls	r1, r2, #24
 800c740:	d46d      	bmi.n	800c81e <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c742:	691a      	ldr	r2, [r3, #16]
 800c744:	0652      	lsls	r2, r2, #25
 800c746:	d502      	bpl.n	800c74e <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c748:	68da      	ldr	r2, [r3, #12]
 800c74a:	0650      	lsls	r0, r2, #25
 800c74c:	d46f      	bmi.n	800c82e <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c74e:	691a      	ldr	r2, [r3, #16]
 800c750:	0691      	lsls	r1, r2, #26
 800c752:	d502      	bpl.n	800c75a <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c754:	68da      	ldr	r2, [r3, #12]
 800c756:	0692      	lsls	r2, r2, #26
 800c758:	d449      	bmi.n	800c7ee <HAL_TIM_IRQHandler+0x106>
}
 800c75a:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c75c:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c760:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800c762:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c764:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c766:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c768:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c76a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800c76e:	d16f      	bne.n	800c850 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c770:	f7ff ff52 	bl	800c618 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c774:	4620      	mov	r0, r4
 800c776:	f7ff ffb3 	bl	800c6e0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c77a:	2200      	movs	r2, #0
 800c77c:	6823      	ldr	r3, [r4, #0]
 800c77e:	7722      	strb	r2, [r4, #28]
 800c780:	e7cd      	b.n	800c71e <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c782:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c786:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800c788:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c78a:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c78c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c78e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c790:	079b      	lsls	r3, r3, #30
 800c792:	d15a      	bne.n	800c84a <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c794:	f7ff ff40 	bl	800c618 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c798:	4620      	mov	r0, r4
 800c79a:	f7ff ffa1 	bl	800c6e0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c79e:	2200      	movs	r2, #0
 800c7a0:	6823      	ldr	r3, [r4, #0]
 800c7a2:	7722      	strb	r2, [r4, #28]
 800c7a4:	e7b5      	b.n	800c712 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c7a6:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c7aa:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800c7ac:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c7ae:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c7b0:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c7b2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c7b4:	f413 7f40 	tst.w	r3, #768	; 0x300
 800c7b8:	d144      	bne.n	800c844 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7ba:	f7ff ff2d 	bl	800c618 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7be:	4620      	mov	r0, r4
 800c7c0:	f7ff ff8e 	bl	800c6e0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	6823      	ldr	r3, [r4, #0]
 800c7c8:	7722      	strb	r2, [r4, #28]
 800c7ca:	e79c      	b.n	800c706 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c7cc:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c7d0:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c7d2:	6119      	str	r1, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c7d4:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c7d6:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c7d8:	0799      	lsls	r1, r3, #30
 800c7da:	d130      	bne.n	800c83e <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7dc:	f7ff ff1c 	bl	800c618 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7e0:	4620      	mov	r0, r4
 800c7e2:	f7ff ff7d 	bl	800c6e0 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	6823      	ldr	r3, [r4, #0]
 800c7ea:	7722      	strb	r2, [r4, #28]
 800c7ec:	e785      	b.n	800c6fa <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c7ee:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800c7f2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c7f4:	611a      	str	r2, [r3, #16]
}
 800c7f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800c7fa:	f001 bc63 	b.w	800e0c4 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c7fe:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800c802:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c804:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800c806:	f7f5 fac1 	bl	8001d8c <HAL_TIM_PeriodElapsedCallback>
 800c80a:	6823      	ldr	r3, [r4, #0]
 800c80c:	e78d      	b.n	800c72a <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c80e:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800c812:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c814:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800c816:	f001 fc57 	bl	800e0c8 <HAL_TIMEx_BreakCallback>
 800c81a:	6823      	ldr	r3, [r4, #0]
 800c81c:	e78b      	b.n	800c736 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c81e:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800c822:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c824:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800c826:	f001 fc51 	bl	800e0cc <HAL_TIMEx_Break2Callback>
 800c82a:	6823      	ldr	r3, [r4, #0]
 800c82c:	e789      	b.n	800c742 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c82e:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800c832:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c834:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800c836:	f7ff ff55 	bl	800c6e4 <HAL_TIM_TriggerCallback>
 800c83a:	6823      	ldr	r3, [r4, #0]
 800c83c:	e787      	b.n	800c74e <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800c83e:	f7f5 fa5d 	bl	8001cfc <HAL_TIM_IC_CaptureCallback>
 800c842:	e7d0      	b.n	800c7e6 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 800c844:	f7f5 fa5a 	bl	8001cfc <HAL_TIM_IC_CaptureCallback>
 800c848:	e7bc      	b.n	800c7c4 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800c84a:	f7f5 fa57 	bl	8001cfc <HAL_TIM_IC_CaptureCallback>
 800c84e:	e7a6      	b.n	800c79e <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 800c850:	f7f5 fa54 	bl	8001cfc <HAL_TIM_IC_CaptureCallback>
 800c854:	e791      	b.n	800c77a <HAL_TIM_IRQHandler+0x92>
 800c856:	bf00      	nop

0800c858 <HAL_TIM_ErrorCallback>:
 800c858:	4770      	bx	lr
 800c85a:	bf00      	nop

0800c85c <TIM_DMAError>:
{
 800c85c:	b508      	push	{r3, lr}
  htim->State = HAL_TIM_STATE_READY;
 800c85e:	2201      	movs	r2, #1
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c860:	6b83      	ldr	r3, [r0, #56]	; 0x38
  HAL_TIM_ErrorCallback(htim);
 800c862:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800c864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  HAL_TIM_ErrorCallback(htim);
 800c868:	f7ff fff6 	bl	800c858 <HAL_TIM_ErrorCallback>
}
 800c86c:	bd08      	pop	{r3, pc}
 800c86e:	bf00      	nop

0800c870 <TIM_Base_SetConfig>:
{
 800c870:	b4f0      	push	{r4, r5, r6, r7}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c872:	4e32      	ldr	r6, [pc, #200]	; (800c93c <TIM_Base_SetConfig+0xcc>)
 800c874:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800c878:	4f31      	ldr	r7, [pc, #196]	; (800c940 <TIM_Base_SetConfig+0xd0>)
 800c87a:	eba0 0606 	sub.w	r6, r0, r6
  tmpcr1 = TIMx->CR1;
 800c87e:	6803      	ldr	r3, [r0, #0]
 800c880:	eba0 0707 	sub.w	r7, r0, r7
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c884:	fab6 f686 	clz	r6, r6
 800c888:	fab7 f787 	clz	r7, r7
 800c88c:	ea4f 1656 	mov.w	r6, r6, lsr #5
 800c890:	ea4f 1757 	mov.w	r7, r7, lsr #5
 800c894:	d025      	beq.n	800c8e2 <TIM_Base_SetConfig+0x72>
 800c896:	bb26      	cbnz	r6, 800c8e2 <TIM_Base_SetConfig+0x72>
 800c898:	4a2a      	ldr	r2, [pc, #168]	; (800c944 <TIM_Base_SetConfig+0xd4>)
 800c89a:	4290      	cmp	r0, r2
 800c89c:	d03e      	beq.n	800c91c <TIM_Base_SetConfig+0xac>
 800c89e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c8a2:	4290      	cmp	r0, r2
 800c8a4:	d03a      	beq.n	800c91c <TIM_Base_SetConfig+0xac>
 800c8a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c8aa:	4290      	cmp	r0, r2
 800c8ac:	d03b      	beq.n	800c926 <TIM_Base_SetConfig+0xb6>
 800c8ae:	2f00      	cmp	r7, #0
 800c8b0:	d139      	bne.n	800c926 <TIM_Base_SetConfig+0xb6>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c8b2:	4a25      	ldr	r2, [pc, #148]	; (800c948 <TIM_Base_SetConfig+0xd8>)
 800c8b4:	4290      	cmp	r0, r2
 800c8b6:	d018      	beq.n	800c8ea <TIM_Base_SetConfig+0x7a>
 800c8b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c8bc:	4290      	cmp	r0, r2
 800c8be:	d014      	beq.n	800c8ea <TIM_Base_SetConfig+0x7a>
 800c8c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c8c4:	4290      	cmp	r0, r2
 800c8c6:	d010      	beq.n	800c8ea <TIM_Base_SetConfig+0x7a>
 800c8c8:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800c8cc:	4290      	cmp	r0, r2
 800c8ce:	d00c      	beq.n	800c8ea <TIM_Base_SetConfig+0x7a>
 800c8d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c8d4:	4290      	cmp	r0, r2
 800c8d6:	d008      	beq.n	800c8ea <TIM_Base_SetConfig+0x7a>
 800c8d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c8dc:	4290      	cmp	r0, r2
 800c8de:	d108      	bne.n	800c8f2 <TIM_Base_SetConfig+0x82>
 800c8e0:	e003      	b.n	800c8ea <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c8e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c8e6:	684d      	ldr	r5, [r1, #4]
 800c8e8:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 800c8ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c8ee:	68cd      	ldr	r5, [r1, #12]
 800c8f0:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c8f2:	694a      	ldr	r2, [r1, #20]
 800c8f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c8f8:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c8fa:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 800c8fc:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 800c8fe:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c900:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c902:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c904:	b926      	cbnz	r6, 800c910 <TIM_Base_SetConfig+0xa0>
 800c906:	b91f      	cbnz	r7, 800c910 <TIM_Base_SetConfig+0xa0>
  TIMx->EGR = TIM_EGR_UG;
 800c908:	2301      	movs	r3, #1
}
 800c90a:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->EGR = TIM_EGR_UG;
 800c90c:	6143      	str	r3, [r0, #20]
}
 800c90e:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800c910:	690b      	ldr	r3, [r1, #16]
 800c912:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800c914:	2301      	movs	r3, #1
}
 800c916:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->EGR = TIM_EGR_UG;
 800c918:	6143      	str	r3, [r0, #20]
}
 800c91a:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c91c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c920:	684a      	ldr	r2, [r1, #4]
 800c922:	4313      	orrs	r3, r2
 800c924:	e7e1      	b.n	800c8ea <TIM_Base_SetConfig+0x7a>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c926:	4a09      	ldr	r2, [pc, #36]	; (800c94c <TIM_Base_SetConfig+0xdc>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c92c:	684c      	ldr	r4, [r1, #4]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c92e:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 800c930:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c934:	d0d9      	beq.n	800c8ea <TIM_Base_SetConfig+0x7a>
 800c936:	2f00      	cmp	r7, #0
 800c938:	d1d7      	bne.n	800c8ea <TIM_Base_SetConfig+0x7a>
 800c93a:	e7ba      	b.n	800c8b2 <TIM_Base_SetConfig+0x42>
 800c93c:	40010000 	.word	0x40010000
 800c940:	40010400 	.word	0x40010400
 800c944:	40000400 	.word	0x40000400
 800c948:	40014000 	.word	0x40014000
 800c94c:	40000c00 	.word	0x40000c00

0800c950 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800c950:	2800      	cmp	r0, #0
 800c952:	f000 8097 	beq.w	800ca84 <HAL_TIM_Base_Init+0x134>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800c956:	6802      	ldr	r2, [r0, #0]
 800c958:	4956      	ldr	r1, [pc, #344]	; (800cab4 <HAL_TIM_Base_Init+0x164>)
{
 800c95a:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800c95c:	4b56      	ldr	r3, [pc, #344]	; (800cab8 <HAL_TIM_Base_Init+0x168>)
 800c95e:	4604      	mov	r4, r0
 800c960:	4856      	ldr	r0, [pc, #344]	; (800cabc <HAL_TIM_Base_Init+0x16c>)
 800c962:	429a      	cmp	r2, r3
 800c964:	bf18      	it	ne
 800c966:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800c96a:	4d55      	ldr	r5, [pc, #340]	; (800cac0 <HAL_TIM_Base_Init+0x170>)
 800c96c:	bf14      	ite	ne
 800c96e:	2301      	movne	r3, #1
 800c970:	2300      	moveq	r3, #0
 800c972:	4282      	cmp	r2, r0
 800c974:	bf0c      	ite	eq
 800c976:	2300      	moveq	r3, #0
 800c978:	f003 0301 	andne.w	r3, r3, #1
 800c97c:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800c980:	428a      	cmp	r2, r1
 800c982:	bf0c      	ite	eq
 800c984:	2300      	moveq	r3, #0
 800c986:	f003 0301 	andne.w	r3, r3, #1
 800c98a:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800c98e:	42aa      	cmp	r2, r5
 800c990:	bf0c      	ite	eq
 800c992:	2300      	moveq	r3, #0
 800c994:	f003 0301 	andne.w	r3, r3, #1
 800c998:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800c99c:	4282      	cmp	r2, r0
 800c99e:	bf0c      	ite	eq
 800c9a0:	2300      	moveq	r3, #0
 800c9a2:	f003 0301 	andne.w	r3, r3, #1
 800c9a6:	f500 3098 	add.w	r0, r0, #77824	; 0x13000
 800c9aa:	428a      	cmp	r2, r1
 800c9ac:	bf0c      	ite	eq
 800c9ae:	2300      	moveq	r3, #0
 800c9b0:	f003 0301 	andne.w	r3, r3, #1
 800c9b4:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
 800c9b8:	42aa      	cmp	r2, r5
 800c9ba:	bf0c      	ite	eq
 800c9bc:	2300      	moveq	r3, #0
 800c9be:	f003 0301 	andne.w	r3, r3, #1
 800c9c2:	f505 4588 	add.w	r5, r5, #17408	; 0x4400
 800c9c6:	4282      	cmp	r2, r0
 800c9c8:	bf0c      	ite	eq
 800c9ca:	2300      	moveq	r3, #0
 800c9cc:	f003 0301 	andne.w	r3, r3, #1
 800c9d0:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800c9d4:	428a      	cmp	r2, r1
 800c9d6:	bf0c      	ite	eq
 800c9d8:	2300      	moveq	r3, #0
 800c9da:	f003 0301 	andne.w	r3, r3, #1
 800c9de:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800c9e2:	42aa      	cmp	r2, r5
 800c9e4:	bf0c      	ite	eq
 800c9e6:	2300      	moveq	r3, #0
 800c9e8:	f003 0301 	andne.w	r3, r3, #1
 800c9ec:	4282      	cmp	r2, r0
 800c9ee:	bf0c      	ite	eq
 800c9f0:	2300      	moveq	r3, #0
 800c9f2:	f003 0301 	andne.w	r3, r3, #1
 800c9f6:	428a      	cmp	r2, r1
 800c9f8:	bf0c      	ite	eq
 800c9fa:	2300      	moveq	r3, #0
 800c9fc:	f003 0301 	andne.w	r3, r3, #1
 800ca00:	b113      	cbz	r3, 800ca08 <HAL_TIM_Base_Init+0xb8>
 800ca02:	4b30      	ldr	r3, [pc, #192]	; (800cac4 <HAL_TIM_Base_Init+0x174>)
 800ca04:	429a      	cmp	r2, r3
 800ca06:	d14f      	bne.n	800caa8 <HAL_TIM_Base_Init+0x158>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800ca08:	68a2      	ldr	r2, [r4, #8]
 800ca0a:	f032 0310 	bics.w	r3, r2, #16
 800ca0e:	f022 0140 	bic.w	r1, r2, #64	; 0x40
 800ca12:	bf14      	ite	ne
 800ca14:	2301      	movne	r3, #1
 800ca16:	2300      	moveq	r3, #0
 800ca18:	2920      	cmp	r1, #32
 800ca1a:	bf0c      	ite	eq
 800ca1c:	2300      	moveq	r3, #0
 800ca1e:	f003 0301 	andne.w	r3, r3, #1
 800ca22:	b10b      	cbz	r3, 800ca28 <HAL_TIM_Base_Init+0xd8>
 800ca24:	2a40      	cmp	r2, #64	; 0x40
 800ca26:	d139      	bne.n	800ca9c <HAL_TIM_Base_Init+0x14c>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800ca28:	6923      	ldr	r3, [r4, #16]
 800ca2a:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800ca2e:	d002      	beq.n	800ca36 <HAL_TIM_Base_Init+0xe6>
 800ca30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca34:	d128      	bne.n	800ca88 <HAL_TIM_Base_Init+0x138>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800ca36:	69a3      	ldr	r3, [r4, #24]
 800ca38:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800ca3c:	d116      	bne.n	800ca6c <HAL_TIM_Base_Init+0x11c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800ca3e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800ca42:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ca46:	b15b      	cbz	r3, 800ca60 <HAL_TIM_Base_Init+0x110>
  htim->State = HAL_TIM_STATE_BUSY;
 800ca48:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ca4a:	6820      	ldr	r0, [r4, #0]
 800ca4c:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800ca4e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ca52:	f7ff ff0d 	bl	800c870 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800ca56:	2301      	movs	r3, #1
  return HAL_OK;
 800ca58:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800ca5a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800ca5e:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 800ca60:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800ca64:	4620      	mov	r0, r4
 800ca66:	f7f7 fad3 	bl	8004010 <HAL_TIM_Base_MspInit>
 800ca6a:	e7ed      	b.n	800ca48 <HAL_TIM_Base_Init+0xf8>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800ca6c:	f44f 718c 	mov.w	r1, #280	; 0x118
 800ca70:	4815      	ldr	r0, [pc, #84]	; (800cac8 <HAL_TIM_Base_Init+0x178>)
 800ca72:	f7f6 f9d7 	bl	8002e24 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800ca76:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800ca7a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d1e2      	bne.n	800ca48 <HAL_TIM_Base_Init+0xf8>
 800ca82:	e7ed      	b.n	800ca60 <HAL_TIM_Base_Init+0x110>
    return HAL_ERROR;
 800ca84:	2001      	movs	r0, #1
}
 800ca86:	4770      	bx	lr
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800ca88:	f240 1117 	movw	r1, #279	; 0x117
 800ca8c:	480e      	ldr	r0, [pc, #56]	; (800cac8 <HAL_TIM_Base_Init+0x178>)
 800ca8e:	f7f6 f9c9 	bl	8002e24 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800ca92:	69a3      	ldr	r3, [r4, #24]
 800ca94:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800ca98:	d0d1      	beq.n	800ca3e <HAL_TIM_Base_Init+0xee>
 800ca9a:	e7e7      	b.n	800ca6c <HAL_TIM_Base_Init+0x11c>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800ca9c:	f44f 718b 	mov.w	r1, #278	; 0x116
 800caa0:	4809      	ldr	r0, [pc, #36]	; (800cac8 <HAL_TIM_Base_Init+0x178>)
 800caa2:	f7f6 f9bf 	bl	8002e24 <assert_failed>
 800caa6:	e7bf      	b.n	800ca28 <HAL_TIM_Base_Init+0xd8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800caa8:	f240 1115 	movw	r1, #277	; 0x115
 800caac:	4806      	ldr	r0, [pc, #24]	; (800cac8 <HAL_TIM_Base_Init+0x178>)
 800caae:	f7f6 f9b9 	bl	8002e24 <assert_failed>
 800cab2:	e7a9      	b.n	800ca08 <HAL_TIM_Base_Init+0xb8>
 800cab4:	40000800 	.word	0x40000800
 800cab8:	40010000 	.word	0x40010000
 800cabc:	40000400 	.word	0x40000400
 800cac0:	40000c00 	.word	0x40000c00
 800cac4:	40002000 	.word	0x40002000
 800cac8:	08026848 	.word	0x08026848

0800cacc <HAL_TIM_OC_Init>:
  if (htim == NULL)
 800cacc:	2800      	cmp	r0, #0
 800cace:	f000 8097 	beq.w	800cc00 <HAL_TIM_OC_Init+0x134>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800cad2:	6802      	ldr	r2, [r0, #0]
 800cad4:	4956      	ldr	r1, [pc, #344]	; (800cc30 <HAL_TIM_OC_Init+0x164>)
{
 800cad6:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800cad8:	4b56      	ldr	r3, [pc, #344]	; (800cc34 <HAL_TIM_OC_Init+0x168>)
 800cada:	4604      	mov	r4, r0
 800cadc:	4856      	ldr	r0, [pc, #344]	; (800cc38 <HAL_TIM_OC_Init+0x16c>)
 800cade:	429a      	cmp	r2, r3
 800cae0:	bf18      	it	ne
 800cae2:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800cae6:	4d55      	ldr	r5, [pc, #340]	; (800cc3c <HAL_TIM_OC_Init+0x170>)
 800cae8:	bf14      	ite	ne
 800caea:	2301      	movne	r3, #1
 800caec:	2300      	moveq	r3, #0
 800caee:	4282      	cmp	r2, r0
 800caf0:	bf0c      	ite	eq
 800caf2:	2300      	moveq	r3, #0
 800caf4:	f003 0301 	andne.w	r3, r3, #1
 800caf8:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800cafc:	428a      	cmp	r2, r1
 800cafe:	bf0c      	ite	eq
 800cb00:	2300      	moveq	r3, #0
 800cb02:	f003 0301 	andne.w	r3, r3, #1
 800cb06:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800cb0a:	42aa      	cmp	r2, r5
 800cb0c:	bf0c      	ite	eq
 800cb0e:	2300      	moveq	r3, #0
 800cb10:	f003 0301 	andne.w	r3, r3, #1
 800cb14:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800cb18:	4282      	cmp	r2, r0
 800cb1a:	bf0c      	ite	eq
 800cb1c:	2300      	moveq	r3, #0
 800cb1e:	f003 0301 	andne.w	r3, r3, #1
 800cb22:	f500 3098 	add.w	r0, r0, #77824	; 0x13000
 800cb26:	428a      	cmp	r2, r1
 800cb28:	bf0c      	ite	eq
 800cb2a:	2300      	moveq	r3, #0
 800cb2c:	f003 0301 	andne.w	r3, r3, #1
 800cb30:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
 800cb34:	42aa      	cmp	r2, r5
 800cb36:	bf0c      	ite	eq
 800cb38:	2300      	moveq	r3, #0
 800cb3a:	f003 0301 	andne.w	r3, r3, #1
 800cb3e:	f505 4588 	add.w	r5, r5, #17408	; 0x4400
 800cb42:	4282      	cmp	r2, r0
 800cb44:	bf0c      	ite	eq
 800cb46:	2300      	moveq	r3, #0
 800cb48:	f003 0301 	andne.w	r3, r3, #1
 800cb4c:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800cb50:	428a      	cmp	r2, r1
 800cb52:	bf0c      	ite	eq
 800cb54:	2300      	moveq	r3, #0
 800cb56:	f003 0301 	andne.w	r3, r3, #1
 800cb5a:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800cb5e:	42aa      	cmp	r2, r5
 800cb60:	bf0c      	ite	eq
 800cb62:	2300      	moveq	r3, #0
 800cb64:	f003 0301 	andne.w	r3, r3, #1
 800cb68:	4282      	cmp	r2, r0
 800cb6a:	bf0c      	ite	eq
 800cb6c:	2300      	moveq	r3, #0
 800cb6e:	f003 0301 	andne.w	r3, r3, #1
 800cb72:	428a      	cmp	r2, r1
 800cb74:	bf0c      	ite	eq
 800cb76:	2300      	moveq	r3, #0
 800cb78:	f003 0301 	andne.w	r3, r3, #1
 800cb7c:	b113      	cbz	r3, 800cb84 <HAL_TIM_OC_Init+0xb8>
 800cb7e:	4b30      	ldr	r3, [pc, #192]	; (800cc40 <HAL_TIM_OC_Init+0x174>)
 800cb80:	429a      	cmp	r2, r3
 800cb82:	d14f      	bne.n	800cc24 <HAL_TIM_OC_Init+0x158>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800cb84:	68a2      	ldr	r2, [r4, #8]
 800cb86:	f032 0310 	bics.w	r3, r2, #16
 800cb8a:	f022 0140 	bic.w	r1, r2, #64	; 0x40
 800cb8e:	bf14      	ite	ne
 800cb90:	2301      	movne	r3, #1
 800cb92:	2300      	moveq	r3, #0
 800cb94:	2920      	cmp	r1, #32
 800cb96:	bf0c      	ite	eq
 800cb98:	2300      	moveq	r3, #0
 800cb9a:	f003 0301 	andne.w	r3, r3, #1
 800cb9e:	b10b      	cbz	r3, 800cba4 <HAL_TIM_OC_Init+0xd8>
 800cba0:	2a40      	cmp	r2, #64	; 0x40
 800cba2:	d139      	bne.n	800cc18 <HAL_TIM_OC_Init+0x14c>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800cba4:	6923      	ldr	r3, [r4, #16]
 800cba6:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800cbaa:	d002      	beq.n	800cbb2 <HAL_TIM_OC_Init+0xe6>
 800cbac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbb0:	d128      	bne.n	800cc04 <HAL_TIM_OC_Init+0x138>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800cbb2:	69a3      	ldr	r3, [r4, #24]
 800cbb4:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800cbb8:	d116      	bne.n	800cbe8 <HAL_TIM_OC_Init+0x11c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800cbba:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800cbbe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800cbc2:	b15b      	cbz	r3, 800cbdc <HAL_TIM_OC_Init+0x110>
  htim->State = HAL_TIM_STATE_BUSY;
 800cbc4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800cbc6:	6820      	ldr	r0, [r4, #0]
 800cbc8:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800cbca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800cbce:	f7ff fe4f 	bl	800c870 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800cbd2:	2301      	movs	r3, #1
  return HAL_OK;
 800cbd4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800cbd6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800cbda:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 800cbdc:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 800cbe0:	4620      	mov	r0, r4
 800cbe2:	f7ff f9c1 	bl	800bf68 <HAL_TIM_OC_MspInit>
 800cbe6:	e7ed      	b.n	800cbc4 <HAL_TIM_OC_Init+0xf8>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800cbe8:	f44f 7119 	mov.w	r1, #612	; 0x264
 800cbec:	4815      	ldr	r0, [pc, #84]	; (800cc44 <HAL_TIM_OC_Init+0x178>)
 800cbee:	f7f6 f919 	bl	8002e24 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800cbf2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800cbf6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d1e2      	bne.n	800cbc4 <HAL_TIM_OC_Init+0xf8>
 800cbfe:	e7ed      	b.n	800cbdc <HAL_TIM_OC_Init+0x110>
    return HAL_ERROR;
 800cc00:	2001      	movs	r0, #1
}
 800cc02:	4770      	bx	lr
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800cc04:	f240 2163 	movw	r1, #611	; 0x263
 800cc08:	480e      	ldr	r0, [pc, #56]	; (800cc44 <HAL_TIM_OC_Init+0x178>)
 800cc0a:	f7f6 f90b 	bl	8002e24 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800cc0e:	69a3      	ldr	r3, [r4, #24]
 800cc10:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800cc14:	d0d1      	beq.n	800cbba <HAL_TIM_OC_Init+0xee>
 800cc16:	e7e7      	b.n	800cbe8 <HAL_TIM_OC_Init+0x11c>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800cc18:	f240 2162 	movw	r1, #610	; 0x262
 800cc1c:	4809      	ldr	r0, [pc, #36]	; (800cc44 <HAL_TIM_OC_Init+0x178>)
 800cc1e:	f7f6 f901 	bl	8002e24 <assert_failed>
 800cc22:	e7bf      	b.n	800cba4 <HAL_TIM_OC_Init+0xd8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800cc24:	f240 2161 	movw	r1, #609	; 0x261
 800cc28:	4806      	ldr	r0, [pc, #24]	; (800cc44 <HAL_TIM_OC_Init+0x178>)
 800cc2a:	f7f6 f8fb 	bl	8002e24 <assert_failed>
 800cc2e:	e7a9      	b.n	800cb84 <HAL_TIM_OC_Init+0xb8>
 800cc30:	40000800 	.word	0x40000800
 800cc34:	40010000 	.word	0x40010000
 800cc38:	40000400 	.word	0x40000400
 800cc3c:	40000c00 	.word	0x40000c00
 800cc40:	40002000 	.word	0x40002000
 800cc44:	08026848 	.word	0x08026848

0800cc48 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800cc48:	2800      	cmp	r0, #0
 800cc4a:	f000 8097 	beq.w	800cd7c <HAL_TIM_PWM_Init+0x134>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800cc4e:	6802      	ldr	r2, [r0, #0]
 800cc50:	4956      	ldr	r1, [pc, #344]	; (800cdac <HAL_TIM_PWM_Init+0x164>)
{
 800cc52:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800cc54:	4b56      	ldr	r3, [pc, #344]	; (800cdb0 <HAL_TIM_PWM_Init+0x168>)
 800cc56:	4604      	mov	r4, r0
 800cc58:	4856      	ldr	r0, [pc, #344]	; (800cdb4 <HAL_TIM_PWM_Init+0x16c>)
 800cc5a:	429a      	cmp	r2, r3
 800cc5c:	bf18      	it	ne
 800cc5e:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800cc62:	4d55      	ldr	r5, [pc, #340]	; (800cdb8 <HAL_TIM_PWM_Init+0x170>)
 800cc64:	bf14      	ite	ne
 800cc66:	2301      	movne	r3, #1
 800cc68:	2300      	moveq	r3, #0
 800cc6a:	4282      	cmp	r2, r0
 800cc6c:	bf0c      	ite	eq
 800cc6e:	2300      	moveq	r3, #0
 800cc70:	f003 0301 	andne.w	r3, r3, #1
 800cc74:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800cc78:	428a      	cmp	r2, r1
 800cc7a:	bf0c      	ite	eq
 800cc7c:	2300      	moveq	r3, #0
 800cc7e:	f003 0301 	andne.w	r3, r3, #1
 800cc82:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800cc86:	42aa      	cmp	r2, r5
 800cc88:	bf0c      	ite	eq
 800cc8a:	2300      	moveq	r3, #0
 800cc8c:	f003 0301 	andne.w	r3, r3, #1
 800cc90:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800cc94:	4282      	cmp	r2, r0
 800cc96:	bf0c      	ite	eq
 800cc98:	2300      	moveq	r3, #0
 800cc9a:	f003 0301 	andne.w	r3, r3, #1
 800cc9e:	f500 3098 	add.w	r0, r0, #77824	; 0x13000
 800cca2:	428a      	cmp	r2, r1
 800cca4:	bf0c      	ite	eq
 800cca6:	2300      	moveq	r3, #0
 800cca8:	f003 0301 	andne.w	r3, r3, #1
 800ccac:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
 800ccb0:	42aa      	cmp	r2, r5
 800ccb2:	bf0c      	ite	eq
 800ccb4:	2300      	moveq	r3, #0
 800ccb6:	f003 0301 	andne.w	r3, r3, #1
 800ccba:	f505 4588 	add.w	r5, r5, #17408	; 0x4400
 800ccbe:	4282      	cmp	r2, r0
 800ccc0:	bf0c      	ite	eq
 800ccc2:	2300      	moveq	r3, #0
 800ccc4:	f003 0301 	andne.w	r3, r3, #1
 800ccc8:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800cccc:	428a      	cmp	r2, r1
 800ccce:	bf0c      	ite	eq
 800ccd0:	2300      	moveq	r3, #0
 800ccd2:	f003 0301 	andne.w	r3, r3, #1
 800ccd6:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800ccda:	42aa      	cmp	r2, r5
 800ccdc:	bf0c      	ite	eq
 800ccde:	2300      	moveq	r3, #0
 800cce0:	f003 0301 	andne.w	r3, r3, #1
 800cce4:	4282      	cmp	r2, r0
 800cce6:	bf0c      	ite	eq
 800cce8:	2300      	moveq	r3, #0
 800ccea:	f003 0301 	andne.w	r3, r3, #1
 800ccee:	428a      	cmp	r2, r1
 800ccf0:	bf0c      	ite	eq
 800ccf2:	2300      	moveq	r3, #0
 800ccf4:	f003 0301 	andne.w	r3, r3, #1
 800ccf8:	b113      	cbz	r3, 800cd00 <HAL_TIM_PWM_Init+0xb8>
 800ccfa:	4b30      	ldr	r3, [pc, #192]	; (800cdbc <HAL_TIM_PWM_Init+0x174>)
 800ccfc:	429a      	cmp	r2, r3
 800ccfe:	d14f      	bne.n	800cda0 <HAL_TIM_PWM_Init+0x158>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800cd00:	68a2      	ldr	r2, [r4, #8]
 800cd02:	f032 0310 	bics.w	r3, r2, #16
 800cd06:	f022 0140 	bic.w	r1, r2, #64	; 0x40
 800cd0a:	bf14      	ite	ne
 800cd0c:	2301      	movne	r3, #1
 800cd0e:	2300      	moveq	r3, #0
 800cd10:	2920      	cmp	r1, #32
 800cd12:	bf0c      	ite	eq
 800cd14:	2300      	moveq	r3, #0
 800cd16:	f003 0301 	andne.w	r3, r3, #1
 800cd1a:	b10b      	cbz	r3, 800cd20 <HAL_TIM_PWM_Init+0xd8>
 800cd1c:	2a40      	cmp	r2, #64	; 0x40
 800cd1e:	d139      	bne.n	800cd94 <HAL_TIM_PWM_Init+0x14c>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800cd20:	6923      	ldr	r3, [r4, #16]
 800cd22:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800cd26:	d002      	beq.n	800cd2e <HAL_TIM_PWM_Init+0xe6>
 800cd28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd2c:	d128      	bne.n	800cd80 <HAL_TIM_PWM_Init+0x138>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800cd2e:	69a3      	ldr	r3, [r4, #24]
 800cd30:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800cd34:	d116      	bne.n	800cd64 <HAL_TIM_PWM_Init+0x11c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800cd36:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800cd3a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800cd3e:	b15b      	cbz	r3, 800cd58 <HAL_TIM_PWM_Init+0x110>
  htim->State = HAL_TIM_STATE_BUSY;
 800cd40:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cd42:	6820      	ldr	r0, [r4, #0]
 800cd44:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800cd46:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cd4a:	f7ff fd91 	bl	800c870 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800cd4e:	2301      	movs	r3, #1
  return HAL_OK;
 800cd50:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800cd52:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800cd56:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 800cd58:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800cd5c:	4620      	mov	r0, r4
 800cd5e:	f7ff f905 	bl	800bf6c <HAL_TIM_PWM_MspInit>
 800cd62:	e7ed      	b.n	800cd40 <HAL_TIM_PWM_Init+0xf8>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800cd64:	f240 41a5 	movw	r1, #1189	; 0x4a5
 800cd68:	4815      	ldr	r0, [pc, #84]	; (800cdc0 <HAL_TIM_PWM_Init+0x178>)
 800cd6a:	f7f6 f85b 	bl	8002e24 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800cd6e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800cd72:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d1e2      	bne.n	800cd40 <HAL_TIM_PWM_Init+0xf8>
 800cd7a:	e7ed      	b.n	800cd58 <HAL_TIM_PWM_Init+0x110>
    return HAL_ERROR;
 800cd7c:	2001      	movs	r0, #1
}
 800cd7e:	4770      	bx	lr
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800cd80:	f240 41a4 	movw	r1, #1188	; 0x4a4
 800cd84:	480e      	ldr	r0, [pc, #56]	; (800cdc0 <HAL_TIM_PWM_Init+0x178>)
 800cd86:	f7f6 f84d 	bl	8002e24 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800cd8a:	69a3      	ldr	r3, [r4, #24]
 800cd8c:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800cd90:	d0d1      	beq.n	800cd36 <HAL_TIM_PWM_Init+0xee>
 800cd92:	e7e7      	b.n	800cd64 <HAL_TIM_PWM_Init+0x11c>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800cd94:	f240 41a3 	movw	r1, #1187	; 0x4a3
 800cd98:	4809      	ldr	r0, [pc, #36]	; (800cdc0 <HAL_TIM_PWM_Init+0x178>)
 800cd9a:	f7f6 f843 	bl	8002e24 <assert_failed>
 800cd9e:	e7bf      	b.n	800cd20 <HAL_TIM_PWM_Init+0xd8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800cda0:	f240 41a2 	movw	r1, #1186	; 0x4a2
 800cda4:	4806      	ldr	r0, [pc, #24]	; (800cdc0 <HAL_TIM_PWM_Init+0x178>)
 800cda6:	f7f6 f83d 	bl	8002e24 <assert_failed>
 800cdaa:	e7a9      	b.n	800cd00 <HAL_TIM_PWM_Init+0xb8>
 800cdac:	40000800 	.word	0x40000800
 800cdb0:	40010000 	.word	0x40010000
 800cdb4:	40000400 	.word	0x40000400
 800cdb8:	40000c00 	.word	0x40000c00
 800cdbc:	40002000 	.word	0x40002000
 800cdc0:	08026848 	.word	0x08026848

0800cdc4 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 800cdc4:	2800      	cmp	r0, #0
 800cdc6:	f000 8097 	beq.w	800cef8 <HAL_TIM_IC_Init+0x134>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800cdca:	6802      	ldr	r2, [r0, #0]
 800cdcc:	4956      	ldr	r1, [pc, #344]	; (800cf28 <HAL_TIM_IC_Init+0x164>)
{
 800cdce:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800cdd0:	4b56      	ldr	r3, [pc, #344]	; (800cf2c <HAL_TIM_IC_Init+0x168>)
 800cdd2:	4604      	mov	r4, r0
 800cdd4:	4856      	ldr	r0, [pc, #344]	; (800cf30 <HAL_TIM_IC_Init+0x16c>)
 800cdd6:	429a      	cmp	r2, r3
 800cdd8:	bf18      	it	ne
 800cdda:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800cdde:	4d55      	ldr	r5, [pc, #340]	; (800cf34 <HAL_TIM_IC_Init+0x170>)
 800cde0:	bf14      	ite	ne
 800cde2:	2301      	movne	r3, #1
 800cde4:	2300      	moveq	r3, #0
 800cde6:	4282      	cmp	r2, r0
 800cde8:	bf0c      	ite	eq
 800cdea:	2300      	moveq	r3, #0
 800cdec:	f003 0301 	andne.w	r3, r3, #1
 800cdf0:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800cdf4:	428a      	cmp	r2, r1
 800cdf6:	bf0c      	ite	eq
 800cdf8:	2300      	moveq	r3, #0
 800cdfa:	f003 0301 	andne.w	r3, r3, #1
 800cdfe:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800ce02:	42aa      	cmp	r2, r5
 800ce04:	bf0c      	ite	eq
 800ce06:	2300      	moveq	r3, #0
 800ce08:	f003 0301 	andne.w	r3, r3, #1
 800ce0c:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800ce10:	4282      	cmp	r2, r0
 800ce12:	bf0c      	ite	eq
 800ce14:	2300      	moveq	r3, #0
 800ce16:	f003 0301 	andne.w	r3, r3, #1
 800ce1a:	f500 3098 	add.w	r0, r0, #77824	; 0x13000
 800ce1e:	428a      	cmp	r2, r1
 800ce20:	bf0c      	ite	eq
 800ce22:	2300      	moveq	r3, #0
 800ce24:	f003 0301 	andne.w	r3, r3, #1
 800ce28:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
 800ce2c:	42aa      	cmp	r2, r5
 800ce2e:	bf0c      	ite	eq
 800ce30:	2300      	moveq	r3, #0
 800ce32:	f003 0301 	andne.w	r3, r3, #1
 800ce36:	f505 4588 	add.w	r5, r5, #17408	; 0x4400
 800ce3a:	4282      	cmp	r2, r0
 800ce3c:	bf0c      	ite	eq
 800ce3e:	2300      	moveq	r3, #0
 800ce40:	f003 0301 	andne.w	r3, r3, #1
 800ce44:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800ce48:	428a      	cmp	r2, r1
 800ce4a:	bf0c      	ite	eq
 800ce4c:	2300      	moveq	r3, #0
 800ce4e:	f003 0301 	andne.w	r3, r3, #1
 800ce52:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800ce56:	42aa      	cmp	r2, r5
 800ce58:	bf0c      	ite	eq
 800ce5a:	2300      	moveq	r3, #0
 800ce5c:	f003 0301 	andne.w	r3, r3, #1
 800ce60:	4282      	cmp	r2, r0
 800ce62:	bf0c      	ite	eq
 800ce64:	2300      	moveq	r3, #0
 800ce66:	f003 0301 	andne.w	r3, r3, #1
 800ce6a:	428a      	cmp	r2, r1
 800ce6c:	bf0c      	ite	eq
 800ce6e:	2300      	moveq	r3, #0
 800ce70:	f003 0301 	andne.w	r3, r3, #1
 800ce74:	b113      	cbz	r3, 800ce7c <HAL_TIM_IC_Init+0xb8>
 800ce76:	4b30      	ldr	r3, [pc, #192]	; (800cf38 <HAL_TIM_IC_Init+0x174>)
 800ce78:	429a      	cmp	r2, r3
 800ce7a:	d14f      	bne.n	800cf1c <HAL_TIM_IC_Init+0x158>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800ce7c:	68a2      	ldr	r2, [r4, #8]
 800ce7e:	f032 0310 	bics.w	r3, r2, #16
 800ce82:	f022 0140 	bic.w	r1, r2, #64	; 0x40
 800ce86:	bf14      	ite	ne
 800ce88:	2301      	movne	r3, #1
 800ce8a:	2300      	moveq	r3, #0
 800ce8c:	2920      	cmp	r1, #32
 800ce8e:	bf0c      	ite	eq
 800ce90:	2300      	moveq	r3, #0
 800ce92:	f003 0301 	andne.w	r3, r3, #1
 800ce96:	b10b      	cbz	r3, 800ce9c <HAL_TIM_IC_Init+0xd8>
 800ce98:	2a40      	cmp	r2, #64	; 0x40
 800ce9a:	d139      	bne.n	800cf10 <HAL_TIM_IC_Init+0x14c>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800ce9c:	6923      	ldr	r3, [r4, #16]
 800ce9e:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800cea2:	d002      	beq.n	800ceaa <HAL_TIM_IC_Init+0xe6>
 800cea4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cea8:	d128      	bne.n	800cefc <HAL_TIM_IC_Init+0x138>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800ceaa:	69a3      	ldr	r3, [r4, #24]
 800ceac:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800ceb0:	d116      	bne.n	800cee0 <HAL_TIM_IC_Init+0x11c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800ceb2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800ceb6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ceba:	b15b      	cbz	r3, 800ced4 <HAL_TIM_IC_Init+0x110>
  htim->State = HAL_TIM_STATE_BUSY;
 800cebc:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cebe:	6820      	ldr	r0, [r4, #0]
 800cec0:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800cec2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cec6:	f7ff fcd3 	bl	800c870 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800ceca:	2301      	movs	r3, #1
  return HAL_OK;
 800cecc:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800cece:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800ced2:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 800ced4:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 800ced8:	4620      	mov	r0, r4
 800ceda:	f7ff f849 	bl	800bf70 <HAL_TIM_IC_MspInit>
 800cede:	e7ed      	b.n	800cebc <HAL_TIM_IC_Init+0xf8>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800cee0:	f240 61e7 	movw	r1, #1767	; 0x6e7
 800cee4:	4815      	ldr	r0, [pc, #84]	; (800cf3c <HAL_TIM_IC_Init+0x178>)
 800cee6:	f7f5 ff9d 	bl	8002e24 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800ceea:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800ceee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d1e2      	bne.n	800cebc <HAL_TIM_IC_Init+0xf8>
 800cef6:	e7ed      	b.n	800ced4 <HAL_TIM_IC_Init+0x110>
    return HAL_ERROR;
 800cef8:	2001      	movs	r0, #1
}
 800cefa:	4770      	bx	lr
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800cefc:	f240 61e6 	movw	r1, #1766	; 0x6e6
 800cf00:	480e      	ldr	r0, [pc, #56]	; (800cf3c <HAL_TIM_IC_Init+0x178>)
 800cf02:	f7f5 ff8f 	bl	8002e24 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800cf06:	69a3      	ldr	r3, [r4, #24]
 800cf08:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800cf0c:	d0d1      	beq.n	800ceb2 <HAL_TIM_IC_Init+0xee>
 800cf0e:	e7e7      	b.n	800cee0 <HAL_TIM_IC_Init+0x11c>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800cf10:	f240 61e5 	movw	r1, #1765	; 0x6e5
 800cf14:	4809      	ldr	r0, [pc, #36]	; (800cf3c <HAL_TIM_IC_Init+0x178>)
 800cf16:	f7f5 ff85 	bl	8002e24 <assert_failed>
 800cf1a:	e7bf      	b.n	800ce9c <HAL_TIM_IC_Init+0xd8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800cf1c:	f240 61e4 	movw	r1, #1764	; 0x6e4
 800cf20:	4806      	ldr	r0, [pc, #24]	; (800cf3c <HAL_TIM_IC_Init+0x178>)
 800cf22:	f7f5 ff7f 	bl	8002e24 <assert_failed>
 800cf26:	e7a9      	b.n	800ce7c <HAL_TIM_IC_Init+0xb8>
 800cf28:	40000800 	.word	0x40000800
 800cf2c:	40010000 	.word	0x40010000
 800cf30:	40000400 	.word	0x40000400
 800cf34:	40000c00 	.word	0x40000c00
 800cf38:	40002000 	.word	0x40002000
 800cf3c:	08026848 	.word	0x08026848

0800cf40 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cf40:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cf42:	4b2e      	ldr	r3, [pc, #184]	; (800cffc <TIM_OC2_SetConfig+0xbc>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cf44:	f022 0210 	bic.w	r2, r2, #16
{
 800cf48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf4c:	460e      	mov	r6, r1
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cf4e:	6889      	ldr	r1, [r1, #8]
{
 800cf50:	4604      	mov	r4, r0
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cf52:	6837      	ldr	r7, [r6, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cf54:	6202      	str	r2, [r0, #32]
  tmpccer = TIMx->CCER;
 800cf56:	6a05      	ldr	r5, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800cf58:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800cf5c:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 800cf5e:	f025 0520 	bic.w	r5, r5, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cf62:	4013      	ands	r3, r2
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cf64:	4a26      	ldr	r2, [pc, #152]	; (800d000 <TIM_OC2_SetConfig+0xc0>)
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cf66:	ea45 1501 	orr.w	r5, r5, r1, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cf6a:	4290      	cmp	r0, r2
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cf6c:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cf70:	d00a      	beq.n	800cf88 <TIM_OC2_SetConfig+0x48>
 800cf72:	4b24      	ldr	r3, [pc, #144]	; (800d004 <TIM_OC2_SetConfig+0xc4>)
 800cf74:	4298      	cmp	r0, r3
 800cf76:	d007      	beq.n	800cf88 <TIM_OC2_SetConfig+0x48>
  TIMx->CCR2 = OC_Config->Pulse;
 800cf78:	6873      	ldr	r3, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800cf7a:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 800cf7e:	61a7      	str	r7, [r4, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800cf80:	63a3      	str	r3, [r4, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800cf82:	6225      	str	r5, [r4, #32]
}
 800cf84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800cf88:	68f2      	ldr	r2, [r6, #12]
 800cf8a:	f032 0308 	bics.w	r3, r2, #8
 800cf8e:	d12d      	bne.n	800cfec <TIM_OC2_SetConfig+0xac>
    tmpccer &= ~TIM_CCER_CC2NP;
 800cf90:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800cf94:	69b3      	ldr	r3, [r6, #24]
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cf96:	ea45 1502 	orr.w	r5, r5, r2, lsl #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800cf9a:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC2NE;
 800cf9e:	f025 0540 	bic.w	r5, r5, #64	; 0x40
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800cfa2:	d119      	bne.n	800cfd8 <TIM_OC2_SetConfig+0x98>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800cfa4:	6973      	ldr	r3, [r6, #20]
 800cfa6:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800cfaa:	d107      	bne.n	800cfbc <TIM_OC2_SetConfig+0x7c>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cfac:	f428 6240 	bic.w	r2, r8, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cfb0:	69b1      	ldr	r1, [r6, #24]
 800cfb2:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 800cfb6:	ea42 0883 	orr.w	r8, r2, r3, lsl #2
 800cfba:	e7dd      	b.n	800cf78 <TIM_OC2_SetConfig+0x38>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800cfbc:	f241 71e5 	movw	r1, #6117	; 0x17e5
 800cfc0:	4811      	ldr	r0, [pc, #68]	; (800d008 <TIM_OC2_SetConfig+0xc8>)
 800cfc2:	f7f5 ff2f 	bl	8002e24 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cfc6:	f428 6240 	bic.w	r2, r8, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cfca:	69b1      	ldr	r1, [r6, #24]
 800cfcc:	6973      	ldr	r3, [r6, #20]
 800cfce:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 800cfd2:	ea42 0883 	orr.w	r8, r2, r3, lsl #2
 800cfd6:	e7cf      	b.n	800cf78 <TIM_OC2_SetConfig+0x38>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800cfd8:	f241 71e4 	movw	r1, #6116	; 0x17e4
 800cfdc:	480a      	ldr	r0, [pc, #40]	; (800d008 <TIM_OC2_SetConfig+0xc8>)
 800cfde:	f7f5 ff21 	bl	8002e24 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800cfe2:	6973      	ldr	r3, [r6, #20]
 800cfe4:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800cfe8:	d0e0      	beq.n	800cfac <TIM_OC2_SetConfig+0x6c>
 800cfea:	e7e7      	b.n	800cfbc <TIM_OC2_SetConfig+0x7c>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800cfec:	f241 71d6 	movw	r1, #6102	; 0x17d6
 800cff0:	4805      	ldr	r0, [pc, #20]	; (800d008 <TIM_OC2_SetConfig+0xc8>)
 800cff2:	f7f5 ff17 	bl	8002e24 <assert_failed>
 800cff6:	68f2      	ldr	r2, [r6, #12]
 800cff8:	e7ca      	b.n	800cf90 <TIM_OC2_SetConfig+0x50>
 800cffa:	bf00      	nop
 800cffc:	feff8cff 	.word	0xfeff8cff
 800d000:	40010000 	.word	0x40010000
 800d004:	40010400 	.word	0x40010400
 800d008:	08026848 	.word	0x08026848

0800d00c <HAL_TIM_OC_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
 800d00c:	2a14      	cmp	r2, #20
{
 800d00e:	b570      	push	{r4, r5, r6, lr}
 800d010:	4615      	mov	r5, r2
 800d012:	4604      	mov	r4, r0
 800d014:	460e      	mov	r6, r1
  assert_param(IS_TIM_CHANNELS(Channel));
 800d016:	f240 808f 	bls.w	800d138 <HAL_TIM_OC_ConfigChannel+0x12c>
 800d01a:	2a3c      	cmp	r2, #60	; 0x3c
 800d01c:	f040 8091 	bne.w	800d142 <HAL_TIM_OC_ConfigChannel+0x136>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 800d020:	6833      	ldr	r3, [r6, #0]
 800d022:	f023 0210 	bic.w	r2, r3, #16
 800d026:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800d02a:	2a40      	cmp	r2, #64	; 0x40
 800d02c:	bf18      	it	ne
 800d02e:	2b00      	cmpne	r3, #0
 800d030:	d003      	beq.n	800d03a <HAL_TIM_OC_ConfigChannel+0x2e>
 800d032:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800d036:	f040 8137 	bne.w	800d2a8 <HAL_TIM_OC_ConfigChannel+0x29c>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800d03a:	68b3      	ldr	r3, [r6, #8]
 800d03c:	f033 0302 	bics.w	r3, r3, #2
 800d040:	f040 8085 	bne.w	800d14e <HAL_TIM_OC_ConfigChannel+0x142>
  __HAL_LOCK(htim);
 800d044:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800d048:	2b01      	cmp	r3, #1
 800d04a:	f000 808a 	beq.w	800d162 <HAL_TIM_OC_ConfigChannel+0x156>
 800d04e:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800d050:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 800d052:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800d056:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  switch (Channel)
 800d05a:	2d14      	cmp	r5, #20
 800d05c:	d864      	bhi.n	800d128 <HAL_TIM_OC_ConfigChannel+0x11c>
 800d05e:	e8df f015 	tbh	[pc, r5, lsl #1]
 800d062:	0015      	.short	0x0015
 800d064:	00630063 	.word	0x00630063
 800d068:	00820063 	.word	0x00820063
 800d06c:	00630063 	.word	0x00630063
 800d070:	00b50063 	.word	0x00b50063
 800d074:	00630063 	.word	0x00630063
 800d078:	00d90063 	.word	0x00d90063
 800d07c:	00630063 	.word	0x00630063
 800d080:	00fd0063 	.word	0x00fd0063
 800d084:	00630063 	.word	0x00630063
 800d088:	01090063 	.word	0x01090063
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800d08c:	6820      	ldr	r0, [r4, #0]
 800d08e:	4b97      	ldr	r3, [pc, #604]	; (800d2ec <HAL_TIM_OC_ConfigChannel+0x2e0>)
 800d090:	4a97      	ldr	r2, [pc, #604]	; (800d2f0 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 800d092:	4298      	cmp	r0, r3
 800d094:	bf18      	it	ne
 800d096:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800d09a:	4996      	ldr	r1, [pc, #600]	; (800d2f4 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 800d09c:	bf14      	ite	ne
 800d09e:	2301      	movne	r3, #1
 800d0a0:	2300      	moveq	r3, #0
 800d0a2:	4290      	cmp	r0, r2
 800d0a4:	bf0c      	ite	eq
 800d0a6:	2300      	moveq	r3, #0
 800d0a8:	f003 0301 	andne.w	r3, r3, #1
 800d0ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d0b0:	4288      	cmp	r0, r1
 800d0b2:	bf0c      	ite	eq
 800d0b4:	2300      	moveq	r3, #0
 800d0b6:	f003 0301 	andne.w	r3, r3, #1
 800d0ba:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 800d0be:	4290      	cmp	r0, r2
 800d0c0:	bf0c      	ite	eq
 800d0c2:	2300      	moveq	r3, #0
 800d0c4:	f003 0301 	andne.w	r3, r3, #1
 800d0c8:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800d0cc:	4288      	cmp	r0, r1
 800d0ce:	bf0c      	ite	eq
 800d0d0:	2300      	moveq	r3, #0
 800d0d2:	f003 0301 	andne.w	r3, r3, #1
 800d0d6:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800d0da:	4290      	cmp	r0, r2
 800d0dc:	bf0c      	ite	eq
 800d0de:	2300      	moveq	r3, #0
 800d0e0:	f003 0301 	andne.w	r3, r3, #1
 800d0e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d0e8:	4288      	cmp	r0, r1
 800d0ea:	bf0c      	ite	eq
 800d0ec:	2300      	moveq	r3, #0
 800d0ee:	f003 0301 	andne.w	r3, r3, #1
 800d0f2:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800d0f6:	4290      	cmp	r0, r2
 800d0f8:	bf0c      	ite	eq
 800d0fa:	2300      	moveq	r3, #0
 800d0fc:	f003 0301 	andne.w	r3, r3, #1
 800d100:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00
 800d104:	4288      	cmp	r0, r1
 800d106:	bf0c      	ite	eq
 800d108:	2300      	moveq	r3, #0
 800d10a:	f003 0301 	andne.w	r3, r3, #1
 800d10e:	4290      	cmp	r0, r2
 800d110:	bf0c      	ite	eq
 800d112:	2300      	moveq	r3, #0
 800d114:	f003 0301 	andne.w	r3, r3, #1
 800d118:	b11b      	cbz	r3, 800d122 <HAL_TIM_OC_ConfigChannel+0x116>
 800d11a:	4b77      	ldr	r3, [pc, #476]	; (800d2f8 <HAL_TIM_OC_ConfigChannel+0x2ec>)
 800d11c:	4298      	cmp	r0, r3
 800d11e:	f040 80de 	bne.w	800d2de <HAL_TIM_OC_ConfigChannel+0x2d2>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d122:	4631      	mov	r1, r6
 800d124:	f7fe faec 	bl	800b700 <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim);
 800d128:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800d12a:	2201      	movs	r2, #1
  return HAL_OK;
 800d12c:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800d12e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800d132:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800d136:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
 800d138:	4b70      	ldr	r3, [pc, #448]	; (800d2fc <HAL_TIM_OC_ConfigChannel+0x2f0>)
 800d13a:	40d3      	lsrs	r3, r2
 800d13c:	07db      	lsls	r3, r3, #31
 800d13e:	f53f af6f 	bmi.w	800d020 <HAL_TIM_OC_ConfigChannel+0x14>
 800d142:	f640 5155 	movw	r1, #3413	; 0xd55
 800d146:	486e      	ldr	r0, [pc, #440]	; (800d300 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800d148:	f7f5 fe6c 	bl	8002e24 <assert_failed>
 800d14c:	e768      	b.n	800d020 <HAL_TIM_OC_ConfigChannel+0x14>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800d14e:	f640 5157 	movw	r1, #3415	; 0xd57
 800d152:	486b      	ldr	r0, [pc, #428]	; (800d300 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800d154:	f7f5 fe66 	bl	8002e24 <assert_failed>
  __HAL_LOCK(htim);
 800d158:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800d15c:	2b01      	cmp	r3, #1
 800d15e:	f47f af76 	bne.w	800d04e <HAL_TIM_OC_ConfigChannel+0x42>
 800d162:	2002      	movs	r0, #2
}
 800d164:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800d166:	6820      	ldr	r0, [r4, #0]
 800d168:	4b60      	ldr	r3, [pc, #384]	; (800d2ec <HAL_TIM_OC_ConfigChannel+0x2e0>)
 800d16a:	4a61      	ldr	r2, [pc, #388]	; (800d2f0 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 800d16c:	4298      	cmp	r0, r3
 800d16e:	bf18      	it	ne
 800d170:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800d174:	495f      	ldr	r1, [pc, #380]	; (800d2f4 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 800d176:	bf14      	ite	ne
 800d178:	2301      	movne	r3, #1
 800d17a:	2300      	moveq	r3, #0
 800d17c:	4290      	cmp	r0, r2
 800d17e:	bf0c      	ite	eq
 800d180:	2300      	moveq	r3, #0
 800d182:	f003 0301 	andne.w	r3, r3, #1
 800d186:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d18a:	4288      	cmp	r0, r1
 800d18c:	bf0c      	ite	eq
 800d18e:	2300      	moveq	r3, #0
 800d190:	f003 0301 	andne.w	r3, r3, #1
 800d194:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 800d198:	4290      	cmp	r0, r2
 800d19a:	bf0c      	ite	eq
 800d19c:	2300      	moveq	r3, #0
 800d19e:	f003 0301 	andne.w	r3, r3, #1
 800d1a2:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800d1a6:	4288      	cmp	r0, r1
 800d1a8:	bf0c      	ite	eq
 800d1aa:	2300      	moveq	r3, #0
 800d1ac:	f003 0301 	andne.w	r3, r3, #1
 800d1b0:	4290      	cmp	r0, r2
 800d1b2:	bf0c      	ite	eq
 800d1b4:	2300      	moveq	r3, #0
 800d1b6:	f003 0301 	andne.w	r3, r3, #1
 800d1ba:	b11b      	cbz	r3, 800d1c4 <HAL_TIM_OC_ConfigChannel+0x1b8>
 800d1bc:	4b51      	ldr	r3, [pc, #324]	; (800d304 <HAL_TIM_OC_ConfigChannel+0x2f8>)
 800d1be:	4298      	cmp	r0, r3
 800d1c0:	f040 8086 	bne.w	800d2d0 <HAL_TIM_OC_ConfigChannel+0x2c4>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d1c4:	4631      	mov	r1, r6
 800d1c6:	f7ff febb 	bl	800cf40 <TIM_OC2_SetConfig>
      break;
 800d1ca:	e7ad      	b.n	800d128 <HAL_TIM_OC_ConfigChannel+0x11c>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800d1cc:	6820      	ldr	r0, [r4, #0]
 800d1ce:	4b47      	ldr	r3, [pc, #284]	; (800d2ec <HAL_TIM_OC_ConfigChannel+0x2e0>)
 800d1d0:	4a47      	ldr	r2, [pc, #284]	; (800d2f0 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 800d1d2:	4298      	cmp	r0, r3
 800d1d4:	bf18      	it	ne
 800d1d6:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800d1da:	4946      	ldr	r1, [pc, #280]	; (800d2f4 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 800d1dc:	bf14      	ite	ne
 800d1de:	2301      	movne	r3, #1
 800d1e0:	2300      	moveq	r3, #0
 800d1e2:	4290      	cmp	r0, r2
 800d1e4:	bf0c      	ite	eq
 800d1e6:	2300      	moveq	r3, #0
 800d1e8:	f003 0301 	andne.w	r3, r3, #1
 800d1ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d1f0:	4288      	cmp	r0, r1
 800d1f2:	bf0c      	ite	eq
 800d1f4:	2300      	moveq	r3, #0
 800d1f6:	f003 0301 	andne.w	r3, r3, #1
 800d1fa:	4290      	cmp	r0, r2
 800d1fc:	bf0c      	ite	eq
 800d1fe:	2300      	moveq	r3, #0
 800d200:	f003 0301 	andne.w	r3, r3, #1
 800d204:	b113      	cbz	r3, 800d20c <HAL_TIM_OC_ConfigChannel+0x200>
 800d206:	4b40      	ldr	r3, [pc, #256]	; (800d308 <HAL_TIM_OC_ConfigChannel+0x2fc>)
 800d208:	4298      	cmp	r0, r3
 800d20a:	d15a      	bne.n	800d2c2 <HAL_TIM_OC_ConfigChannel+0x2b6>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d20c:	4631      	mov	r1, r6
 800d20e:	f7fe fad9 	bl	800b7c4 <TIM_OC3_SetConfig>
      break;
 800d212:	e789      	b.n	800d128 <HAL_TIM_OC_ConfigChannel+0x11c>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800d214:	6820      	ldr	r0, [r4, #0]
 800d216:	4b35      	ldr	r3, [pc, #212]	; (800d2ec <HAL_TIM_OC_ConfigChannel+0x2e0>)
 800d218:	4a35      	ldr	r2, [pc, #212]	; (800d2f0 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 800d21a:	4298      	cmp	r0, r3
 800d21c:	bf18      	it	ne
 800d21e:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800d222:	4934      	ldr	r1, [pc, #208]	; (800d2f4 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 800d224:	bf14      	ite	ne
 800d226:	2301      	movne	r3, #1
 800d228:	2300      	moveq	r3, #0
 800d22a:	4290      	cmp	r0, r2
 800d22c:	bf0c      	ite	eq
 800d22e:	2300      	moveq	r3, #0
 800d230:	f003 0301 	andne.w	r3, r3, #1
 800d234:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d238:	4288      	cmp	r0, r1
 800d23a:	bf0c      	ite	eq
 800d23c:	2300      	moveq	r3, #0
 800d23e:	f003 0301 	andne.w	r3, r3, #1
 800d242:	4290      	cmp	r0, r2
 800d244:	bf0c      	ite	eq
 800d246:	2300      	moveq	r3, #0
 800d248:	f003 0301 	andne.w	r3, r3, #1
 800d24c:	b113      	cbz	r3, 800d254 <HAL_TIM_OC_ConfigChannel+0x248>
 800d24e:	4b2e      	ldr	r3, [pc, #184]	; (800d308 <HAL_TIM_OC_ConfigChannel+0x2fc>)
 800d250:	4298      	cmp	r0, r3
 800d252:	d12f      	bne.n	800d2b4 <HAL_TIM_OC_ConfigChannel+0x2a8>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d254:	4631      	mov	r1, r6
 800d256:	f7fe fb1b 	bl	800b890 <TIM_OC4_SetConfig>
      break;
 800d25a:	e765      	b.n	800d128 <HAL_TIM_OC_ConfigChannel+0x11c>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800d25c:	6820      	ldr	r0, [r4, #0]
 800d25e:	4b23      	ldr	r3, [pc, #140]	; (800d2ec <HAL_TIM_OC_ConfigChannel+0x2e0>)
 800d260:	4298      	cmp	r0, r3
 800d262:	d003      	beq.n	800d26c <HAL_TIM_OC_ConfigChannel+0x260>
 800d264:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d268:	4298      	cmp	r0, r3
 800d26a:	d116      	bne.n	800d29a <HAL_TIM_OC_ConfigChannel+0x28e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d26c:	4631      	mov	r1, r6
 800d26e:	f7fe f9f3 	bl	800b658 <TIM_OC5_SetConfig>
      break;
 800d272:	e759      	b.n	800d128 <HAL_TIM_OC_ConfigChannel+0x11c>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800d274:	6820      	ldr	r0, [r4, #0]
 800d276:	4b1d      	ldr	r3, [pc, #116]	; (800d2ec <HAL_TIM_OC_ConfigChannel+0x2e0>)
 800d278:	4298      	cmp	r0, r3
 800d27a:	d003      	beq.n	800d284 <HAL_TIM_OC_ConfigChannel+0x278>
 800d27c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d280:	4298      	cmp	r0, r3
 800d282:	d103      	bne.n	800d28c <HAL_TIM_OC_ConfigChannel+0x280>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d284:	4631      	mov	r1, r6
 800d286:	f7fe fa11 	bl	800b6ac <TIM_OC6_SetConfig>
      break;
 800d28a:	e74d      	b.n	800d128 <HAL_TIM_OC_ConfigChannel+0x11c>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800d28c:	481c      	ldr	r0, [pc, #112]	; (800d300 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800d28e:	f640 5195 	movw	r1, #3477	; 0xd95
 800d292:	f7f5 fdc7 	bl	8002e24 <assert_failed>
 800d296:	6820      	ldr	r0, [r4, #0]
 800d298:	e7f4      	b.n	800d284 <HAL_TIM_OC_ConfigChannel+0x278>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800d29a:	4819      	ldr	r0, [pc, #100]	; (800d300 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800d29c:	f640 518b 	movw	r1, #3467	; 0xd8b
 800d2a0:	f7f5 fdc0 	bl	8002e24 <assert_failed>
 800d2a4:	6820      	ldr	r0, [r4, #0]
 800d2a6:	e7e1      	b.n	800d26c <HAL_TIM_OC_ConfigChannel+0x260>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 800d2a8:	f640 5156 	movw	r1, #3414	; 0xd56
 800d2ac:	4814      	ldr	r0, [pc, #80]	; (800d300 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800d2ae:	f7f5 fdb9 	bl	8002e24 <assert_failed>
 800d2b2:	e6c2      	b.n	800d03a <HAL_TIM_OC_ConfigChannel+0x2e>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800d2b4:	4812      	ldr	r0, [pc, #72]	; (800d300 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800d2b6:	f640 5181 	movw	r1, #3457	; 0xd81
 800d2ba:	f7f5 fdb3 	bl	8002e24 <assert_failed>
 800d2be:	6820      	ldr	r0, [r4, #0]
 800d2c0:	e7c8      	b.n	800d254 <HAL_TIM_OC_ConfigChannel+0x248>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800d2c2:	480f      	ldr	r0, [pc, #60]	; (800d300 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800d2c4:	f640 5177 	movw	r1, #3447	; 0xd77
 800d2c8:	f7f5 fdac 	bl	8002e24 <assert_failed>
 800d2cc:	6820      	ldr	r0, [r4, #0]
 800d2ce:	e79d      	b.n	800d20c <HAL_TIM_OC_ConfigChannel+0x200>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800d2d0:	480b      	ldr	r0, [pc, #44]	; (800d300 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800d2d2:	f640 516d 	movw	r1, #3437	; 0xd6d
 800d2d6:	f7f5 fda5 	bl	8002e24 <assert_failed>
 800d2da:	6820      	ldr	r0, [r4, #0]
 800d2dc:	e772      	b.n	800d1c4 <HAL_TIM_OC_ConfigChannel+0x1b8>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800d2de:	4808      	ldr	r0, [pc, #32]	; (800d300 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800d2e0:	f640 5163 	movw	r1, #3427	; 0xd63
 800d2e4:	f7f5 fd9e 	bl	8002e24 <assert_failed>
 800d2e8:	6820      	ldr	r0, [r4, #0]
 800d2ea:	e71a      	b.n	800d122 <HAL_TIM_OC_ConfigChannel+0x116>
 800d2ec:	40010000 	.word	0x40010000
 800d2f0:	40000400 	.word	0x40000400
 800d2f4:	40000800 	.word	0x40000800
 800d2f8:	40002000 	.word	0x40002000
 800d2fc:	00111111 	.word	0x00111111
 800d300:	08026848 	.word	0x08026848
 800d304:	40001800 	.word	0x40001800
 800d308:	40010400 	.word	0x40010400

0800d30c <HAL_TIM_PWM_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
 800d30c:	2a14      	cmp	r2, #20
{
 800d30e:	b570      	push	{r4, r5, r6, lr}
 800d310:	4616      	mov	r6, r2
 800d312:	4604      	mov	r4, r0
 800d314:	460d      	mov	r5, r1
  assert_param(IS_TIM_CHANNELS(Channel));
 800d316:	f240 809f 	bls.w	800d458 <HAL_TIM_PWM_ConfigChannel+0x14c>
 800d31a:	2a3c      	cmp	r2, #60	; 0x3c
 800d31c:	f040 80a1 	bne.w	800d462 <HAL_TIM_PWM_ConfigChannel+0x156>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800d320:	682a      	ldr	r2, [r5, #0]
 800d322:	4b97      	ldr	r3, [pc, #604]	; (800d580 <HAL_TIM_PWM_ConfigChannel+0x274>)
 800d324:	4013      	ands	r3, r2
 800d326:	2b60      	cmp	r3, #96	; 0x60
 800d328:	d005      	beq.n	800d336 <HAL_TIM_PWM_ConfigChannel+0x2a>
 800d32a:	f022 0210 	bic.w	r2, r2, #16
 800d32e:	4b95      	ldr	r3, [pc, #596]	; (800d584 <HAL_TIM_PWM_ConfigChannel+0x278>)
 800d330:	429a      	cmp	r2, r3
 800d332:	f040 819e 	bne.w	800d672 <HAL_TIM_PWM_ConfigChannel+0x366>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800d336:	68ab      	ldr	r3, [r5, #8]
 800d338:	f033 0302 	bics.w	r3, r3, #2
 800d33c:	f040 8097 	bne.w	800d46e <HAL_TIM_PWM_ConfigChannel+0x162>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800d340:	692b      	ldr	r3, [r5, #16]
 800d342:	f033 0304 	bics.w	r3, r3, #4
 800d346:	f040 809c 	bne.w	800d482 <HAL_TIM_PWM_ConfigChannel+0x176>
  __HAL_LOCK(htim);
 800d34a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800d34e:	2b01      	cmp	r3, #1
 800d350:	f000 80a1 	beq.w	800d496 <HAL_TIM_PWM_ConfigChannel+0x18a>
 800d354:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800d356:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 800d358:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800d35c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  switch (Channel)
 800d360:	2e14      	cmp	r6, #20
 800d362:	d871      	bhi.n	800d448 <HAL_TIM_PWM_ConfigChannel+0x13c>
 800d364:	e8df f016 	tbh	[pc, r6, lsl #1]
 800d368:	00700015 	.word	0x00700015
 800d36c:	00700070 	.word	0x00700070
 800d370:	00700099 	.word	0x00700099
 800d374:	00700070 	.word	0x00700070
 800d378:	007000da 	.word	0x007000da
 800d37c:	00700070 	.word	0x00700070
 800d380:	00700120 	.word	0x00700120
 800d384:	00700070 	.word	0x00700070
 800d388:	00700152 	.word	0x00700152
 800d38c:	00700070 	.word	0x00700070
 800d390:	016b      	.short	0x016b
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800d392:	6820      	ldr	r0, [r4, #0]
 800d394:	4b7c      	ldr	r3, [pc, #496]	; (800d588 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 800d396:	4a7d      	ldr	r2, [pc, #500]	; (800d58c <HAL_TIM_PWM_ConfigChannel+0x280>)
 800d398:	4298      	cmp	r0, r3
 800d39a:	bf18      	it	ne
 800d39c:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800d3a0:	497b      	ldr	r1, [pc, #492]	; (800d590 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800d3a2:	bf14      	ite	ne
 800d3a4:	2301      	movne	r3, #1
 800d3a6:	2300      	moveq	r3, #0
 800d3a8:	4290      	cmp	r0, r2
 800d3aa:	bf0c      	ite	eq
 800d3ac:	2300      	moveq	r3, #0
 800d3ae:	f003 0301 	andne.w	r3, r3, #1
 800d3b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d3b6:	4288      	cmp	r0, r1
 800d3b8:	bf0c      	ite	eq
 800d3ba:	2300      	moveq	r3, #0
 800d3bc:	f003 0301 	andne.w	r3, r3, #1
 800d3c0:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 800d3c4:	4290      	cmp	r0, r2
 800d3c6:	bf0c      	ite	eq
 800d3c8:	2300      	moveq	r3, #0
 800d3ca:	f003 0301 	andne.w	r3, r3, #1
 800d3ce:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800d3d2:	4288      	cmp	r0, r1
 800d3d4:	bf0c      	ite	eq
 800d3d6:	2300      	moveq	r3, #0
 800d3d8:	f003 0301 	andne.w	r3, r3, #1
 800d3dc:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800d3e0:	4290      	cmp	r0, r2
 800d3e2:	bf0c      	ite	eq
 800d3e4:	2300      	moveq	r3, #0
 800d3e6:	f003 0301 	andne.w	r3, r3, #1
 800d3ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d3ee:	4288      	cmp	r0, r1
 800d3f0:	bf0c      	ite	eq
 800d3f2:	2300      	moveq	r3, #0
 800d3f4:	f003 0301 	andne.w	r3, r3, #1
 800d3f8:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800d3fc:	4290      	cmp	r0, r2
 800d3fe:	bf0c      	ite	eq
 800d400:	2300      	moveq	r3, #0
 800d402:	f003 0301 	andne.w	r3, r3, #1
 800d406:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00
 800d40a:	4288      	cmp	r0, r1
 800d40c:	bf0c      	ite	eq
 800d40e:	2300      	moveq	r3, #0
 800d410:	f003 0301 	andne.w	r3, r3, #1
 800d414:	4290      	cmp	r0, r2
 800d416:	bf0c      	ite	eq
 800d418:	2300      	moveq	r3, #0
 800d41a:	f003 0301 	andne.w	r3, r3, #1
 800d41e:	b11b      	cbz	r3, 800d428 <HAL_TIM_PWM_ConfigChannel+0x11c>
 800d420:	4b5c      	ldr	r3, [pc, #368]	; (800d594 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800d422:	4298      	cmp	r0, r3
 800d424:	f040 814e 	bne.w	800d6c4 <HAL_TIM_PWM_ConfigChannel+0x3b8>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d428:	4629      	mov	r1, r5
 800d42a:	f7fe f969 	bl	800b700 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d42e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d430:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d432:	6999      	ldr	r1, [r3, #24]
 800d434:	f041 0108 	orr.w	r1, r1, #8
 800d438:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d43a:	6999      	ldr	r1, [r3, #24]
 800d43c:	f021 0104 	bic.w	r1, r1, #4
 800d440:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d442:	699a      	ldr	r2, [r3, #24]
 800d444:	4302      	orrs	r2, r0
 800d446:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 800d448:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800d44a:	2201      	movs	r2, #1
  return HAL_OK;
 800d44c:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800d44e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800d452:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800d456:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
 800d458:	4b4f      	ldr	r3, [pc, #316]	; (800d598 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 800d45a:	40d3      	lsrs	r3, r2
 800d45c:	07db      	lsls	r3, r3, #31
 800d45e:	f53f af5f 	bmi.w	800d320 <HAL_TIM_PWM_ConfigChannel+0x14>
 800d462:	f640 611c 	movw	r1, #3612	; 0xe1c
 800d466:	484d      	ldr	r0, [pc, #308]	; (800d59c <HAL_TIM_PWM_ConfigChannel+0x290>)
 800d468:	f7f5 fcdc 	bl	8002e24 <assert_failed>
 800d46c:	e758      	b.n	800d320 <HAL_TIM_PWM_ConfigChannel+0x14>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800d46e:	f640 611e 	movw	r1, #3614	; 0xe1e
 800d472:	484a      	ldr	r0, [pc, #296]	; (800d59c <HAL_TIM_PWM_ConfigChannel+0x290>)
 800d474:	f7f5 fcd6 	bl	8002e24 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800d478:	692b      	ldr	r3, [r5, #16]
 800d47a:	f033 0304 	bics.w	r3, r3, #4
 800d47e:	f43f af64 	beq.w	800d34a <HAL_TIM_PWM_ConfigChannel+0x3e>
 800d482:	f640 611f 	movw	r1, #3615	; 0xe1f
 800d486:	4845      	ldr	r0, [pc, #276]	; (800d59c <HAL_TIM_PWM_ConfigChannel+0x290>)
 800d488:	f7f5 fccc 	bl	8002e24 <assert_failed>
  __HAL_LOCK(htim);
 800d48c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800d490:	2b01      	cmp	r3, #1
 800d492:	f47f af5f 	bne.w	800d354 <HAL_TIM_PWM_ConfigChannel+0x48>
 800d496:	2002      	movs	r0, #2
}
 800d498:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800d49a:	6820      	ldr	r0, [r4, #0]
 800d49c:	4b3a      	ldr	r3, [pc, #232]	; (800d588 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 800d49e:	4a3b      	ldr	r2, [pc, #236]	; (800d58c <HAL_TIM_PWM_ConfigChannel+0x280>)
 800d4a0:	4298      	cmp	r0, r3
 800d4a2:	bf18      	it	ne
 800d4a4:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800d4a8:	4939      	ldr	r1, [pc, #228]	; (800d590 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800d4aa:	bf14      	ite	ne
 800d4ac:	2301      	movne	r3, #1
 800d4ae:	2300      	moveq	r3, #0
 800d4b0:	4290      	cmp	r0, r2
 800d4b2:	bf0c      	ite	eq
 800d4b4:	2300      	moveq	r3, #0
 800d4b6:	f003 0301 	andne.w	r3, r3, #1
 800d4ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d4be:	4288      	cmp	r0, r1
 800d4c0:	bf0c      	ite	eq
 800d4c2:	2300      	moveq	r3, #0
 800d4c4:	f003 0301 	andne.w	r3, r3, #1
 800d4c8:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 800d4cc:	4290      	cmp	r0, r2
 800d4ce:	bf0c      	ite	eq
 800d4d0:	2300      	moveq	r3, #0
 800d4d2:	f003 0301 	andne.w	r3, r3, #1
 800d4d6:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800d4da:	4288      	cmp	r0, r1
 800d4dc:	bf0c      	ite	eq
 800d4de:	2300      	moveq	r3, #0
 800d4e0:	f003 0301 	andne.w	r3, r3, #1
 800d4e4:	4290      	cmp	r0, r2
 800d4e6:	bf0c      	ite	eq
 800d4e8:	2300      	moveq	r3, #0
 800d4ea:	f003 0301 	andne.w	r3, r3, #1
 800d4ee:	b11b      	cbz	r3, 800d4f8 <HAL_TIM_PWM_ConfigChannel+0x1ec>
 800d4f0:	4b2b      	ldr	r3, [pc, #172]	; (800d5a0 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800d4f2:	4298      	cmp	r0, r3
 800d4f4:	f040 80df 	bne.w	800d6b6 <HAL_TIM_PWM_ConfigChannel+0x3aa>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d4f8:	4629      	mov	r1, r5
 800d4fa:	f7ff fd21 	bl	800cf40 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d4fe:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d500:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d502:	6999      	ldr	r1, [r3, #24]
 800d504:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800d508:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d50a:	6999      	ldr	r1, [r3, #24]
 800d50c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800d510:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d512:	699a      	ldr	r2, [r3, #24]
 800d514:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800d518:	619a      	str	r2, [r3, #24]
      break;
 800d51a:	e795      	b.n	800d448 <HAL_TIM_PWM_ConfigChannel+0x13c>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800d51c:	6820      	ldr	r0, [r4, #0]
 800d51e:	4b1a      	ldr	r3, [pc, #104]	; (800d588 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 800d520:	4a1a      	ldr	r2, [pc, #104]	; (800d58c <HAL_TIM_PWM_ConfigChannel+0x280>)
 800d522:	4298      	cmp	r0, r3
 800d524:	bf18      	it	ne
 800d526:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800d52a:	4919      	ldr	r1, [pc, #100]	; (800d590 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800d52c:	bf14      	ite	ne
 800d52e:	2301      	movne	r3, #1
 800d530:	2300      	moveq	r3, #0
 800d532:	4290      	cmp	r0, r2
 800d534:	bf0c      	ite	eq
 800d536:	2300      	moveq	r3, #0
 800d538:	f003 0301 	andne.w	r3, r3, #1
 800d53c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d540:	4288      	cmp	r0, r1
 800d542:	bf0c      	ite	eq
 800d544:	2300      	moveq	r3, #0
 800d546:	f003 0301 	andne.w	r3, r3, #1
 800d54a:	4290      	cmp	r0, r2
 800d54c:	bf0c      	ite	eq
 800d54e:	2300      	moveq	r3, #0
 800d550:	f003 0301 	andne.w	r3, r3, #1
 800d554:	b11b      	cbz	r3, 800d55e <HAL_TIM_PWM_ConfigChannel+0x252>
 800d556:	4b13      	ldr	r3, [pc, #76]	; (800d5a4 <HAL_TIM_PWM_ConfigChannel+0x298>)
 800d558:	4298      	cmp	r0, r3
 800d55a:	f040 80a5 	bne.w	800d6a8 <HAL_TIM_PWM_ConfigChannel+0x39c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d55e:	4629      	mov	r1, r5
 800d560:	f7fe f930 	bl	800b7c4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d564:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d566:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d568:	69d9      	ldr	r1, [r3, #28]
 800d56a:	f041 0108 	orr.w	r1, r1, #8
 800d56e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d570:	69d9      	ldr	r1, [r3, #28]
 800d572:	f021 0104 	bic.w	r1, r1, #4
 800d576:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d578:	69da      	ldr	r2, [r3, #28]
 800d57a:	4302      	orrs	r2, r0
 800d57c:	61da      	str	r2, [r3, #28]
      break;
 800d57e:	e763      	b.n	800d448 <HAL_TIM_PWM_ConfigChannel+0x13c>
 800d580:	fffeffef 	.word	0xfffeffef
 800d584:	00010040 	.word	0x00010040
 800d588:	40010000 	.word	0x40010000
 800d58c:	40000400 	.word	0x40000400
 800d590:	40000800 	.word	0x40000800
 800d594:	40002000 	.word	0x40002000
 800d598:	00111111 	.word	0x00111111
 800d59c:	08026848 	.word	0x08026848
 800d5a0:	40001800 	.word	0x40001800
 800d5a4:	40010400 	.word	0x40010400
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800d5a8:	6820      	ldr	r0, [r4, #0]
 800d5aa:	4b4a      	ldr	r3, [pc, #296]	; (800d6d4 <HAL_TIM_PWM_ConfigChannel+0x3c8>)
 800d5ac:	4a4a      	ldr	r2, [pc, #296]	; (800d6d8 <HAL_TIM_PWM_ConfigChannel+0x3cc>)
 800d5ae:	4298      	cmp	r0, r3
 800d5b0:	bf18      	it	ne
 800d5b2:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800d5b6:	4949      	ldr	r1, [pc, #292]	; (800d6dc <HAL_TIM_PWM_ConfigChannel+0x3d0>)
 800d5b8:	bf14      	ite	ne
 800d5ba:	2301      	movne	r3, #1
 800d5bc:	2300      	moveq	r3, #0
 800d5be:	4290      	cmp	r0, r2
 800d5c0:	bf0c      	ite	eq
 800d5c2:	2300      	moveq	r3, #0
 800d5c4:	f003 0301 	andne.w	r3, r3, #1
 800d5c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d5cc:	4288      	cmp	r0, r1
 800d5ce:	bf0c      	ite	eq
 800d5d0:	2300      	moveq	r3, #0
 800d5d2:	f003 0301 	andne.w	r3, r3, #1
 800d5d6:	4290      	cmp	r0, r2
 800d5d8:	bf0c      	ite	eq
 800d5da:	2300      	moveq	r3, #0
 800d5dc:	f003 0301 	andne.w	r3, r3, #1
 800d5e0:	b113      	cbz	r3, 800d5e8 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 800d5e2:	4b3f      	ldr	r3, [pc, #252]	; (800d6e0 <HAL_TIM_PWM_ConfigChannel+0x3d4>)
 800d5e4:	4298      	cmp	r0, r3
 800d5e6:	d158      	bne.n	800d69a <HAL_TIM_PWM_ConfigChannel+0x38e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d5e8:	4629      	mov	r1, r5
 800d5ea:	f7fe f951 	bl	800b890 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d5ee:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d5f0:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d5f2:	69d9      	ldr	r1, [r3, #28]
 800d5f4:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800d5f8:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d5fa:	69d9      	ldr	r1, [r3, #28]
 800d5fc:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800d600:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d602:	69da      	ldr	r2, [r3, #28]
 800d604:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800d608:	61da      	str	r2, [r3, #28]
      break;
 800d60a:	e71d      	b.n	800d448 <HAL_TIM_PWM_ConfigChannel+0x13c>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800d60c:	6820      	ldr	r0, [r4, #0]
 800d60e:	4b31      	ldr	r3, [pc, #196]	; (800d6d4 <HAL_TIM_PWM_ConfigChannel+0x3c8>)
 800d610:	4298      	cmp	r0, r3
 800d612:	d003      	beq.n	800d61c <HAL_TIM_PWM_ConfigChannel+0x310>
 800d614:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d618:	4298      	cmp	r0, r3
 800d61a:	d137      	bne.n	800d68c <HAL_TIM_PWM_ConfigChannel+0x380>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d61c:	4629      	mov	r1, r5
 800d61e:	f7fe f81b 	bl	800b658 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d622:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d624:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d626:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d628:	f041 0108 	orr.w	r1, r1, #8
 800d62c:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d62e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d630:	f021 0104 	bic.w	r1, r1, #4
 800d634:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d636:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d638:	4302      	orrs	r2, r0
 800d63a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d63c:	e704      	b.n	800d448 <HAL_TIM_PWM_ConfigChannel+0x13c>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800d63e:	6820      	ldr	r0, [r4, #0]
 800d640:	4b24      	ldr	r3, [pc, #144]	; (800d6d4 <HAL_TIM_PWM_ConfigChannel+0x3c8>)
 800d642:	4298      	cmp	r0, r3
 800d644:	d003      	beq.n	800d64e <HAL_TIM_PWM_ConfigChannel+0x342>
 800d646:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d64a:	4298      	cmp	r0, r3
 800d64c:	d117      	bne.n	800d67e <HAL_TIM_PWM_ConfigChannel+0x372>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d64e:	4629      	mov	r1, r5
 800d650:	f7fe f82c 	bl	800b6ac <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d654:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d656:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d658:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d65a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800d65e:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d660:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d662:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800d666:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d668:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d66a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800d66e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d670:	e6ea      	b.n	800d448 <HAL_TIM_PWM_ConfigChannel+0x13c>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800d672:	f640 611d 	movw	r1, #3613	; 0xe1d
 800d676:	481b      	ldr	r0, [pc, #108]	; (800d6e4 <HAL_TIM_PWM_ConfigChannel+0x3d8>)
 800d678:	f7f5 fbd4 	bl	8002e24 <assert_failed>
 800d67c:	e65b      	b.n	800d336 <HAL_TIM_PWM_ConfigChannel+0x2a>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800d67e:	4819      	ldr	r0, [pc, #100]	; (800d6e4 <HAL_TIM_PWM_ConfigChannel+0x3d8>)
 800d680:	f44f 6168 	mov.w	r1, #3712	; 0xe80
 800d684:	f7f5 fbce 	bl	8002e24 <assert_failed>
 800d688:	6820      	ldr	r0, [r4, #0]
 800d68a:	e7e0      	b.n	800d64e <HAL_TIM_PWM_ConfigChannel+0x342>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800d68c:	4815      	ldr	r0, [pc, #84]	; (800d6e4 <HAL_TIM_PWM_ConfigChannel+0x3d8>)
 800d68e:	f640 616f 	movw	r1, #3695	; 0xe6f
 800d692:	f7f5 fbc7 	bl	8002e24 <assert_failed>
 800d696:	6820      	ldr	r0, [r4, #0]
 800d698:	e7c0      	b.n	800d61c <HAL_TIM_PWM_ConfigChannel+0x310>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800d69a:	4812      	ldr	r0, [pc, #72]	; (800d6e4 <HAL_TIM_PWM_ConfigChannel+0x3d8>)
 800d69c:	f640 615e 	movw	r1, #3678	; 0xe5e
 800d6a0:	f7f5 fbc0 	bl	8002e24 <assert_failed>
 800d6a4:	6820      	ldr	r0, [r4, #0]
 800d6a6:	e79f      	b.n	800d5e8 <HAL_TIM_PWM_ConfigChannel+0x2dc>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800d6a8:	480e      	ldr	r0, [pc, #56]	; (800d6e4 <HAL_TIM_PWM_ConfigChannel+0x3d8>)
 800d6aa:	f640 614d 	movw	r1, #3661	; 0xe4d
 800d6ae:	f7f5 fbb9 	bl	8002e24 <assert_failed>
 800d6b2:	6820      	ldr	r0, [r4, #0]
 800d6b4:	e753      	b.n	800d55e <HAL_TIM_PWM_ConfigChannel+0x252>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800d6b6:	480b      	ldr	r0, [pc, #44]	; (800d6e4 <HAL_TIM_PWM_ConfigChannel+0x3d8>)
 800d6b8:	f640 613c 	movw	r1, #3644	; 0xe3c
 800d6bc:	f7f5 fbb2 	bl	8002e24 <assert_failed>
 800d6c0:	6820      	ldr	r0, [r4, #0]
 800d6c2:	e719      	b.n	800d4f8 <HAL_TIM_PWM_ConfigChannel+0x1ec>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800d6c4:	4807      	ldr	r0, [pc, #28]	; (800d6e4 <HAL_TIM_PWM_ConfigChannel+0x3d8>)
 800d6c6:	f640 612b 	movw	r1, #3627	; 0xe2b
 800d6ca:	f7f5 fbab 	bl	8002e24 <assert_failed>
 800d6ce:	6820      	ldr	r0, [r4, #0]
 800d6d0:	e6aa      	b.n	800d428 <HAL_TIM_PWM_ConfigChannel+0x11c>
 800d6d2:	bf00      	nop
 800d6d4:	40010000 	.word	0x40010000
 800d6d8:	40000400 	.word	0x40000400
 800d6dc:	40000800 	.word	0x40000800
 800d6e0:	40010400 	.word	0x40010400
 800d6e4:	08026848 	.word	0x08026848

0800d6e8 <TIM_TI1_SetConfig>:
{
 800d6e8:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d6ea:	6a04      	ldr	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800d6ec:	4e1b      	ldr	r6, [pc, #108]	; (800d75c <TIM_TI1_SetConfig+0x74>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d6ee:	f024 0401 	bic.w	r4, r4, #1
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800d6f2:	42b0      	cmp	r0, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d6f4:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d6f6:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800d6f8:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800d6fa:	d01d      	beq.n	800d738 <TIM_TI1_SetConfig+0x50>
 800d6fc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800d700:	d01a      	beq.n	800d738 <TIM_TI1_SetConfig+0x50>
 800d702:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 800d706:	42b0      	cmp	r0, r6
 800d708:	d016      	beq.n	800d738 <TIM_TI1_SetConfig+0x50>
 800d70a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800d70e:	42b0      	cmp	r0, r6
 800d710:	d012      	beq.n	800d738 <TIM_TI1_SetConfig+0x50>
 800d712:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800d716:	42b0      	cmp	r0, r6
 800d718:	d00e      	beq.n	800d738 <TIM_TI1_SetConfig+0x50>
 800d71a:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 800d71e:	42b0      	cmp	r0, r6
 800d720:	d00a      	beq.n	800d738 <TIM_TI1_SetConfig+0x50>
 800d722:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 800d726:	42b0      	cmp	r0, r6
 800d728:	d006      	beq.n	800d738 <TIM_TI1_SetConfig+0x50>
 800d72a:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 800d72e:	42b0      	cmp	r0, r6
 800d730:	d002      	beq.n	800d738 <TIM_TI1_SetConfig+0x50>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800d732:	f044 0201 	orr.w	r2, r4, #1
 800d736:	e002      	b.n	800d73e <TIM_TI1_SetConfig+0x56>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800d738:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 800d73c:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800d73e:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d740:	f025 040a 	bic.w	r4, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d744:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800d748:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800d74c:	b2db      	uxtb	r3, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800d74e:	4321      	orrs	r1, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800d750:	4313      	orrs	r3, r2
}
 800d752:	bc70      	pop	{r4, r5, r6}
  TIMx->CCMR1 = tmpccmr1;
 800d754:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800d756:	6201      	str	r1, [r0, #32]
}
 800d758:	4770      	bx	lr
 800d75a:	bf00      	nop
 800d75c:	40010000 	.word	0x40010000

0800d760 <HAL_TIM_IC_ConfigChannel>:
{
 800d760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800d762:	4bb1      	ldr	r3, [pc, #708]	; (800da28 <HAL_TIM_IC_ConfigChannel+0x2c8>)
{
 800d764:	460c      	mov	r4, r1
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800d766:	6801      	ldr	r1, [r0, #0]
{
 800d768:	4605      	mov	r5, r0
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800d76a:	4fb0      	ldr	r7, [pc, #704]	; (800da2c <HAL_TIM_IC_ConfigChannel+0x2cc>)
{
 800d76c:	4616      	mov	r6, r2
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800d76e:	4299      	cmp	r1, r3
 800d770:	bf18      	it	ne
 800d772:	f1b1 4f80 	cmpne.w	r1, #1073741824	; 0x40000000
 800d776:	48ae      	ldr	r0, [pc, #696]	; (800da30 <HAL_TIM_IC_ConfigChannel+0x2d0>)
 800d778:	4aae      	ldr	r2, [pc, #696]	; (800da34 <HAL_TIM_IC_ConfigChannel+0x2d4>)
 800d77a:	bf14      	ite	ne
 800d77c:	2301      	movne	r3, #1
 800d77e:	2300      	moveq	r3, #0
 800d780:	42b9      	cmp	r1, r7
 800d782:	bf0c      	ite	eq
 800d784:	2300      	moveq	r3, #0
 800d786:	f003 0301 	andne.w	r3, r3, #1
 800d78a:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800d78e:	4281      	cmp	r1, r0
 800d790:	bf0c      	ite	eq
 800d792:	2300      	moveq	r3, #0
 800d794:	f003 0301 	andne.w	r3, r3, #1
 800d798:	f500 309c 	add.w	r0, r0, #79872	; 0x13800
 800d79c:	4291      	cmp	r1, r2
 800d79e:	bf0c      	ite	eq
 800d7a0:	2300      	moveq	r3, #0
 800d7a2:	f003 0301 	andne.w	r3, r3, #1
 800d7a6:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 800d7aa:	42b9      	cmp	r1, r7
 800d7ac:	bf0c      	ite	eq
 800d7ae:	2300      	moveq	r3, #0
 800d7b0:	f003 0301 	andne.w	r3, r3, #1
 800d7b4:	f507 4788 	add.w	r7, r7, #17408	; 0x4400
 800d7b8:	4281      	cmp	r1, r0
 800d7ba:	bf0c      	ite	eq
 800d7bc:	2300      	moveq	r3, #0
 800d7be:	f003 0301 	andne.w	r3, r3, #1
 800d7c2:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800d7c6:	4291      	cmp	r1, r2
 800d7c8:	bf0c      	ite	eq
 800d7ca:	2300      	moveq	r3, #0
 800d7cc:	f003 0301 	andne.w	r3, r3, #1
 800d7d0:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800d7d4:	42b9      	cmp	r1, r7
 800d7d6:	bf0c      	ite	eq
 800d7d8:	2300      	moveq	r3, #0
 800d7da:	f003 0301 	andne.w	r3, r3, #1
 800d7de:	4281      	cmp	r1, r0
 800d7e0:	bf0c      	ite	eq
 800d7e2:	2300      	moveq	r3, #0
 800d7e4:	f003 0301 	andne.w	r3, r3, #1
 800d7e8:	4291      	cmp	r1, r2
 800d7ea:	bf0c      	ite	eq
 800d7ec:	2300      	moveq	r3, #0
 800d7ee:	f003 0301 	andne.w	r3, r3, #1
 800d7f2:	b11b      	cbz	r3, 800d7fc <HAL_TIM_IC_ConfigChannel+0x9c>
 800d7f4:	4b90      	ldr	r3, [pc, #576]	; (800da38 <HAL_TIM_IC_ConfigChannel+0x2d8>)
 800d7f6:	4299      	cmp	r1, r3
 800d7f8:	f040 80fb 	bne.w	800d9f2 <HAL_TIM_IC_ConfigChannel+0x292>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 800d7fc:	6823      	ldr	r3, [r4, #0]
 800d7fe:	f033 0202 	bics.w	r2, r3, #2
 800d802:	d001      	beq.n	800d808 <HAL_TIM_IC_ConfigChannel+0xa8>
 800d804:	2b0a      	cmp	r3, #10
 800d806:	d16d      	bne.n	800d8e4 <HAL_TIM_IC_ConfigChannel+0x184>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 800d808:	6863      	ldr	r3, [r4, #4]
 800d80a:	3b01      	subs	r3, #1
 800d80c:	2b02      	cmp	r3, #2
 800d80e:	d872      	bhi.n	800d8f6 <HAL_TIM_IC_ConfigChannel+0x196>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 800d810:	68a3      	ldr	r3, [r4, #8]
 800d812:	f033 030c 	bics.w	r3, r3, #12
 800d816:	d177      	bne.n	800d908 <HAL_TIM_IC_ConfigChannel+0x1a8>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 800d818:	68e3      	ldr	r3, [r4, #12]
 800d81a:	2b0f      	cmp	r3, #15
 800d81c:	d87c      	bhi.n	800d918 <HAL_TIM_IC_ConfigChannel+0x1b8>
  __HAL_LOCK(htim);
 800d81e:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800d822:	2b01      	cmp	r3, #1
 800d824:	f000 8082 	beq.w	800d92c <HAL_TIM_IC_ConfigChannel+0x1cc>
 800d828:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800d82a:	2302      	movs	r3, #2
 800d82c:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(htim);
 800d82e:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800d832:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  if (Channel == TIM_CHANNEL_1)
 800d836:	2e00      	cmp	r6, #0
 800d838:	d07a      	beq.n	800d930 <HAL_TIM_IC_ConfigChannel+0x1d0>
 800d83a:	4b7b      	ldr	r3, [pc, #492]	; (800da28 <HAL_TIM_IC_ConfigChannel+0x2c8>)
 800d83c:	497b      	ldr	r1, [pc, #492]	; (800da2c <HAL_TIM_IC_ConfigChannel+0x2cc>)
 800d83e:	4298      	cmp	r0, r3
 800d840:	bf18      	it	ne
 800d842:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800d846:	4a7a      	ldr	r2, [pc, #488]	; (800da30 <HAL_TIM_IC_ConfigChannel+0x2d0>)
 800d848:	bf14      	ite	ne
 800d84a:	2301      	movne	r3, #1
 800d84c:	2300      	moveq	r3, #0
 800d84e:	4288      	cmp	r0, r1
 800d850:	bf0c      	ite	eq
 800d852:	2300      	moveq	r3, #0
 800d854:	f003 0301 	andne.w	r3, r3, #1
 800d858:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d85c:	4290      	cmp	r0, r2
 800d85e:	bf0c      	ite	eq
 800d860:	2300      	moveq	r3, #0
 800d862:	f003 0301 	andne.w	r3, r3, #1
 800d866:	f502 427c 	add.w	r2, r2, #64512	; 0xfc00
 800d86a:	4288      	cmp	r0, r1
 800d86c:	bf0c      	ite	eq
 800d86e:	2300      	moveq	r3, #0
 800d870:	f003 0301 	andne.w	r3, r3, #1
 800d874:	4290      	cmp	r0, r2
 800d876:	bf0c      	ite	eq
 800d878:	2300      	moveq	r3, #0
 800d87a:	f003 0301 	andne.w	r3, r3, #1
  else if (Channel == TIM_CHANNEL_2)
 800d87e:	2e04      	cmp	r6, #4
 800d880:	d065      	beq.n	800d94e <HAL_TIM_IC_ConfigChannel+0x1ee>
  else if (Channel == TIM_CHANNEL_3)
 800d882:	2e08      	cmp	r6, #8
 800d884:	f000 8091 	beq.w	800d9aa <HAL_TIM_IC_ConfigChannel+0x24a>
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800d888:	2b00      	cmp	r3, #0
 800d88a:	f040 80b8 	bne.w	800d9fe <HAL_TIM_IC_ConfigChannel+0x29e>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d88e:	6a01      	ldr	r1, [r0, #32]
    TIM_TI4_SetConfig(htim->Instance,
 800d890:	6823      	ldr	r3, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d892:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    TIM_TI4_SetConfig(htim->Instance,
 800d896:	6867      	ldr	r7, [r4, #4]
 800d898:	68e2      	ldr	r2, [r4, #12]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800d89a:	031b      	lsls	r3, r3, #12
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d89c:	6201      	str	r1, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d89e:	69c1      	ldr	r1, [r0, #28]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800d8a0:	0312      	lsls	r2, r2, #12
  tmpccer = TIMx->CCER;
 800d8a2:	6a06      	ldr	r6, [r0, #32]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800d8a4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800d8a8:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800d8ac:	b292      	uxth	r2, r2
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800d8ae:	f426 4620 	bic.w	r6, r6, #40960	; 0xa000
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800d8b2:	68a4      	ldr	r4, [r4, #8]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800d8b4:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800d8b8:	4333      	orrs	r3, r6
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800d8ba:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800d8be:	430a      	orrs	r2, r1
  TIMx->CCMR2 = tmpccmr2;
 800d8c0:	61c2      	str	r2, [r0, #28]
  TIMx->CCER = tmpccer ;
 800d8c2:	6203      	str	r3, [r0, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800d8c4:	69c2      	ldr	r2, [r0, #28]
 800d8c6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800d8ca:	61c2      	str	r2, [r0, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800d8cc:	69c3      	ldr	r3, [r0, #28]
 800d8ce:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800d8d2:	61c3      	str	r3, [r0, #28]
  __HAL_UNLOCK(htim);
 800d8d4:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800d8d6:	2201      	movs	r2, #1
  return HAL_OK;
 800d8d8:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800d8da:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800d8de:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 800d8e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 800d8e4:	f640 51b8 	movw	r1, #3512	; 0xdb8
 800d8e8:	4854      	ldr	r0, [pc, #336]	; (800da3c <HAL_TIM_IC_ConfigChannel+0x2dc>)
 800d8ea:	f7f5 fa9b 	bl	8002e24 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 800d8ee:	6863      	ldr	r3, [r4, #4]
 800d8f0:	3b01      	subs	r3, #1
 800d8f2:	2b02      	cmp	r3, #2
 800d8f4:	d98c      	bls.n	800d810 <HAL_TIM_IC_ConfigChannel+0xb0>
 800d8f6:	f640 51b9 	movw	r1, #3513	; 0xdb9
 800d8fa:	4850      	ldr	r0, [pc, #320]	; (800da3c <HAL_TIM_IC_ConfigChannel+0x2dc>)
 800d8fc:	f7f5 fa92 	bl	8002e24 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 800d900:	68a3      	ldr	r3, [r4, #8]
 800d902:	f033 030c 	bics.w	r3, r3, #12
 800d906:	d087      	beq.n	800d818 <HAL_TIM_IC_ConfigChannel+0xb8>
 800d908:	f640 51ba 	movw	r1, #3514	; 0xdba
 800d90c:	484b      	ldr	r0, [pc, #300]	; (800da3c <HAL_TIM_IC_ConfigChannel+0x2dc>)
 800d90e:	f7f5 fa89 	bl	8002e24 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 800d912:	68e3      	ldr	r3, [r4, #12]
 800d914:	2b0f      	cmp	r3, #15
 800d916:	d982      	bls.n	800d81e <HAL_TIM_IC_ConfigChannel+0xbe>
 800d918:	f640 51bb 	movw	r1, #3515	; 0xdbb
 800d91c:	4847      	ldr	r0, [pc, #284]	; (800da3c <HAL_TIM_IC_ConfigChannel+0x2dc>)
 800d91e:	f7f5 fa81 	bl	8002e24 <assert_failed>
  __HAL_LOCK(htim);
 800d922:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800d926:	2b01      	cmp	r3, #1
 800d928:	f47f af7e 	bne.w	800d828 <HAL_TIM_IC_ConfigChannel+0xc8>
 800d92c:	2002      	movs	r0, #2
}
 800d92e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIM_TI1_SetConfig(htim->Instance,
 800d930:	e9d4 1200 	ldrd	r1, r2, [r4]
 800d934:	68e3      	ldr	r3, [r4, #12]
 800d936:	f7ff fed7 	bl	800d6e8 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800d93a:	682b      	ldr	r3, [r5, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800d93c:	68a0      	ldr	r0, [r4, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800d93e:	6999      	ldr	r1, [r3, #24]
 800d940:	f021 010c 	bic.w	r1, r1, #12
 800d944:	6199      	str	r1, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800d946:	699a      	ldr	r2, [r3, #24]
 800d948:	4302      	orrs	r2, r0
 800d94a:	619a      	str	r2, [r3, #24]
 800d94c:	e7c2      	b.n	800d8d4 <HAL_TIM_IC_ConfigChannel+0x174>
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800d94e:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800d952:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800d956:	4288      	cmp	r0, r1
 800d958:	bf18      	it	ne
 800d95a:	4290      	cmpne	r0, r2
 800d95c:	d001      	beq.n	800d962 <HAL_TIM_IC_ConfigChannel+0x202>
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d15b      	bne.n	800da1a <HAL_TIM_IC_ConfigChannel+0x2ba>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d962:	6a01      	ldr	r1, [r0, #32]
    TIM_TI2_SetConfig(htim->Instance,
 800d964:	6823      	ldr	r3, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d966:	f021 0110 	bic.w	r1, r1, #16
    TIM_TI2_SetConfig(htim->Instance,
 800d96a:	6867      	ldr	r7, [r4, #4]
 800d96c:	68e2      	ldr	r2, [r4, #12]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800d96e:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d970:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d972:	6981      	ldr	r1, [r0, #24]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800d974:	0312      	lsls	r2, r2, #12
  tmpccer = TIMx->CCER;
 800d976:	6a06      	ldr	r6, [r0, #32]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800d978:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800d97c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800d980:	b292      	uxth	r2, r2
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d982:	f026 06a0 	bic.w	r6, r6, #160	; 0xa0
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800d986:	68a4      	ldr	r4, [r4, #8]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800d988:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800d98c:	4333      	orrs	r3, r6
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d98e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800d992:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1 ;
 800d994:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800d996:	6203      	str	r3, [r0, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800d998:	6982      	ldr	r2, [r0, #24]
 800d99a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800d99e:	6182      	str	r2, [r0, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800d9a0:	6983      	ldr	r3, [r0, #24]
 800d9a2:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800d9a6:	6183      	str	r3, [r0, #24]
 800d9a8:	e794      	b.n	800d8d4 <HAL_TIM_IC_ConfigChannel+0x174>
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d12e      	bne.n	800da0c <HAL_TIM_IC_ConfigChannel+0x2ac>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d9ae:	6a06      	ldr	r6, [r0, #32]
    TIM_TI3_SetConfig(htim->Instance,
 800d9b0:	6823      	ldr	r3, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d9b2:	f426 7680 	bic.w	r6, r6, #256	; 0x100
    TIM_TI3_SetConfig(htim->Instance,
 800d9b6:	6861      	ldr	r1, [r4, #4]
 800d9b8:	68e2      	ldr	r2, [r4, #12]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800d9ba:	021b      	lsls	r3, r3, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d9bc:	6206      	str	r6, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d9be:	69c7      	ldr	r7, [r0, #28]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800d9c0:	0112      	lsls	r2, r2, #4
  tmpccer = TIMx->CCER;
 800d9c2:	6a06      	ldr	r6, [r0, #32]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800d9c4:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800d9c8:	f027 0703 	bic.w	r7, r7, #3
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800d9cc:	b2d2      	uxtb	r2, r2
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800d9ce:	f426 6620 	bic.w	r6, r6, #2560	; 0xa00
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800d9d2:	68a4      	ldr	r4, [r4, #8]
  tmpccmr2 |= TIM_ICSelection;
 800d9d4:	4339      	orrs	r1, r7
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800d9d6:	4333      	orrs	r3, r6
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800d9d8:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800d9dc:	430a      	orrs	r2, r1
  TIMx->CCMR2 = tmpccmr2;
 800d9de:	61c2      	str	r2, [r0, #28]
  TIMx->CCER = tmpccer;
 800d9e0:	6203      	str	r3, [r0, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800d9e2:	69c2      	ldr	r2, [r0, #28]
 800d9e4:	f022 020c 	bic.w	r2, r2, #12
 800d9e8:	61c2      	str	r2, [r0, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800d9ea:	69c3      	ldr	r3, [r0, #28]
 800d9ec:	4323      	orrs	r3, r4
 800d9ee:	61c3      	str	r3, [r0, #28]
 800d9f0:	e770      	b.n	800d8d4 <HAL_TIM_IC_ConfigChannel+0x174>
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800d9f2:	f640 51b7 	movw	r1, #3511	; 0xdb7
 800d9f6:	4811      	ldr	r0, [pc, #68]	; (800da3c <HAL_TIM_IC_ConfigChannel+0x2dc>)
 800d9f8:	f7f5 fa14 	bl	8002e24 <assert_failed>
 800d9fc:	e6fe      	b.n	800d7fc <HAL_TIM_IC_ConfigChannel+0x9c>
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800d9fe:	480f      	ldr	r0, [pc, #60]	; (800da3c <HAL_TIM_IC_ConfigChannel+0x2dc>)
 800da00:	f640 51f3 	movw	r1, #3571	; 0xdf3
 800da04:	f7f5 fa0e 	bl	8002e24 <assert_failed>
 800da08:	6828      	ldr	r0, [r5, #0]
 800da0a:	e740      	b.n	800d88e <HAL_TIM_IC_ConfigChannel+0x12e>
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800da0c:	480b      	ldr	r0, [pc, #44]	; (800da3c <HAL_TIM_IC_ConfigChannel+0x2dc>)
 800da0e:	f640 51e3 	movw	r1, #3555	; 0xde3
 800da12:	f7f5 fa07 	bl	8002e24 <assert_failed>
 800da16:	6828      	ldr	r0, [r5, #0]
 800da18:	e7c9      	b.n	800d9ae <HAL_TIM_IC_ConfigChannel+0x24e>
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800da1a:	4808      	ldr	r0, [pc, #32]	; (800da3c <HAL_TIM_IC_ConfigChannel+0x2dc>)
 800da1c:	f640 51d3 	movw	r1, #3539	; 0xdd3
 800da20:	f7f5 fa00 	bl	8002e24 <assert_failed>
 800da24:	6828      	ldr	r0, [r5, #0]
 800da26:	e79c      	b.n	800d962 <HAL_TIM_IC_ConfigChannel+0x202>
 800da28:	40010000 	.word	0x40010000
 800da2c:	40000400 	.word	0x40000400
 800da30:	40000800 	.word	0x40000800
 800da34:	40000c00 	.word	0x40000c00
 800da38:	40002000 	.word	0x40002000
 800da3c:	08026848 	.word	0x08026848

0800da40 <TIM_CCxChannelCmd>:
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800da40:	4b2b      	ldr	r3, [pc, #172]	; (800daf0 <TIM_CCxChannelCmd+0xb0>)
 800da42:	4298      	cmp	r0, r3
{
 800da44:	b530      	push	{r4, r5, lr}
 800da46:	4604      	mov	r4, r0
 800da48:	b083      	sub	sp, #12
 800da4a:	460d      	mov	r5, r1
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800da4c:	d031      	beq.n	800dab2 <TIM_CCxChannelCmd+0x72>
 800da4e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800da52:	d02e      	beq.n	800dab2 <TIM_CCxChannelCmd+0x72>
 800da54:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 800da58:	4298      	cmp	r0, r3
 800da5a:	d02a      	beq.n	800dab2 <TIM_CCxChannelCmd+0x72>
 800da5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800da60:	4298      	cmp	r0, r3
 800da62:	d026      	beq.n	800dab2 <TIM_CCxChannelCmd+0x72>
 800da64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800da68:	4298      	cmp	r0, r3
 800da6a:	d022      	beq.n	800dab2 <TIM_CCxChannelCmd+0x72>
 800da6c:	f503 4378 	add.w	r3, r3, #63488	; 0xf800
 800da70:	4298      	cmp	r0, r3
 800da72:	d01e      	beq.n	800dab2 <TIM_CCxChannelCmd+0x72>
 800da74:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800da78:	4298      	cmp	r0, r3
 800da7a:	d01a      	beq.n	800dab2 <TIM_CCxChannelCmd+0x72>
 800da7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800da80:	4298      	cmp	r0, r3
 800da82:	d016      	beq.n	800dab2 <TIM_CCxChannelCmd+0x72>
 800da84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800da88:	4298      	cmp	r0, r3
 800da8a:	d012      	beq.n	800dab2 <TIM_CCxChannelCmd+0x72>
 800da8c:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 800da90:	4298      	cmp	r0, r3
 800da92:	d00e      	beq.n	800dab2 <TIM_CCxChannelCmd+0x72>
 800da94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800da98:	4298      	cmp	r0, r3
 800da9a:	d00a      	beq.n	800dab2 <TIM_CCxChannelCmd+0x72>
 800da9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800daa0:	4298      	cmp	r0, r3
 800daa2:	d006      	beq.n	800dab2 <TIM_CCxChannelCmd+0x72>
 800daa4:	f641 21c2 	movw	r1, #6850	; 0x1ac2
 800daa8:	4812      	ldr	r0, [pc, #72]	; (800daf4 <TIM_CCxChannelCmd+0xb4>)
 800daaa:	9201      	str	r2, [sp, #4]
 800daac:	f7f5 f9ba 	bl	8002e24 <assert_failed>
 800dab0:	9a01      	ldr	r2, [sp, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
 800dab2:	2d14      	cmp	r5, #20
 800dab4:	d910      	bls.n	800dad8 <TIM_CCxChannelCmd+0x98>
 800dab6:	2d3c      	cmp	r5, #60	; 0x3c
 800dab8:	d112      	bne.n	800dae0 <TIM_CCxChannelCmd+0xa0>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800daba:	f005 051f 	and.w	r5, r5, #31
 800dabe:	2101      	movs	r1, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800dac0:	6a23      	ldr	r3, [r4, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800dac2:	40a9      	lsls	r1, r5

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dac4:	fa02 f505 	lsl.w	r5, r2, r5
  TIMx->CCER &= ~tmp;
 800dac8:	ea23 0301 	bic.w	r3, r3, r1
 800dacc:	6223      	str	r3, [r4, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dace:	6a22      	ldr	r2, [r4, #32]
 800dad0:	4315      	orrs	r5, r2
 800dad2:	6225      	str	r5, [r4, #32]
}
 800dad4:	b003      	add	sp, #12
 800dad6:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
 800dad8:	4b07      	ldr	r3, [pc, #28]	; (800daf8 <TIM_CCxChannelCmd+0xb8>)
 800dada:	40eb      	lsrs	r3, r5
 800dadc:	07db      	lsls	r3, r3, #31
 800dade:	d4ec      	bmi.n	800daba <TIM_CCxChannelCmd+0x7a>
 800dae0:	f641 21c3 	movw	r1, #6851	; 0x1ac3
 800dae4:	4803      	ldr	r0, [pc, #12]	; (800daf4 <TIM_CCxChannelCmd+0xb4>)
 800dae6:	9201      	str	r2, [sp, #4]
 800dae8:	f7f5 f99c 	bl	8002e24 <assert_failed>
 800daec:	9a01      	ldr	r2, [sp, #4]
 800daee:	e7e4      	b.n	800daba <TIM_CCxChannelCmd+0x7a>
 800daf0:	40010000 	.word	0x40010000
 800daf4:	08026848 	.word	0x08026848
 800daf8:	00111111 	.word	0x00111111

0800dafc <HAL_TIM_IC_Start_DMA>:
{
 800dafc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dafe:	4604      	mov	r4, r0
 800db00:	460d      	mov	r5, r1
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800db02:	4883      	ldr	r0, [pc, #524]	; (800dd10 <HAL_TIM_IC_Start_DMA+0x214>)
{
 800db04:	b083      	sub	sp, #12
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800db06:	6821      	ldr	r1, [r4, #0]
 800db08:	4281      	cmp	r1, r0
 800db0a:	f000 8083 	beq.w	800dc14 <HAL_TIM_IC_Start_DMA+0x118>
 800db0e:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800db12:	d053      	beq.n	800dbbc <HAL_TIM_IC_Start_DMA+0xc0>
 800db14:	487f      	ldr	r0, [pc, #508]	; (800dd14 <HAL_TIM_IC_Start_DMA+0x218>)
 800db16:	4281      	cmp	r1, r0
 800db18:	d050      	beq.n	800dbbc <HAL_TIM_IC_Start_DMA+0xc0>
 800db1a:	487f      	ldr	r0, [pc, #508]	; (800dd18 <HAL_TIM_IC_Start_DMA+0x21c>)
 800db1c:	4281      	cmp	r1, r0
 800db1e:	d04d      	beq.n	800dbbc <HAL_TIM_IC_Start_DMA+0xc0>
 800db20:	487e      	ldr	r0, [pc, #504]	; (800dd1c <HAL_TIM_IC_Start_DMA+0x220>)
 800db22:	4281      	cmp	r1, r0
 800db24:	d04a      	beq.n	800dbbc <HAL_TIM_IC_Start_DMA+0xc0>
 800db26:	487e      	ldr	r0, [pc, #504]	; (800dd20 <HAL_TIM_IC_Start_DMA+0x224>)
 800db28:	4281      	cmp	r1, r0
 800db2a:	d073      	beq.n	800dc14 <HAL_TIM_IC_Start_DMA+0x118>
 800db2c:	487d      	ldr	r0, [pc, #500]	; (800dd24 <HAL_TIM_IC_Start_DMA+0x228>)
 800db2e:	4281      	cmp	r1, r0
 800db30:	f000 80d5 	beq.w	800dcde <HAL_TIM_IC_Start_DMA+0x1e2>
 800db34:	487c      	ldr	r0, [pc, #496]	; (800dd28 <HAL_TIM_IC_Start_DMA+0x22c>)
 800db36:	4281      	cmp	r1, r0
 800db38:	f040 80d6 	bne.w	800dce8 <HAL_TIM_IC_Start_DMA+0x1ec>
 800db3c:	2d00      	cmp	r5, #0
 800db3e:	f000 80c4 	beq.w	800dcca <HAL_TIM_IC_Start_DMA+0x1ce>
 800db42:	f640 0115 	movw	r1, #2069	; 0x815
 800db46:	4879      	ldr	r0, [pc, #484]	; (800dd2c <HAL_TIM_IC_Start_DMA+0x230>)
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 800db48:	4e72      	ldr	r6, [pc, #456]	; (800dd14 <HAL_TIM_IC_Start_DMA+0x218>)
 800db4a:	4f73      	ldr	r7, [pc, #460]	; (800dd18 <HAL_TIM_IC_Start_DMA+0x21c>)
 800db4c:	e9cd 2300 	strd	r2, r3, [sp]
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800db50:	f7f5 f968 	bl	8002e24 <assert_failed>
 800db54:	6820      	ldr	r0, [r4, #0]
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 800db56:	496e      	ldr	r1, [pc, #440]	; (800dd10 <HAL_TIM_IC_Start_DMA+0x214>)
 800db58:	4288      	cmp	r0, r1
 800db5a:	bf18      	it	ne
 800db5c:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800db60:	bf14      	ite	ne
 800db62:	2101      	movne	r1, #1
 800db64:	2100      	moveq	r1, #0
 800db66:	42b0      	cmp	r0, r6
 800db68:	bf0c      	ite	eq
 800db6a:	2100      	moveq	r1, #0
 800db6c:	f001 0101 	andne.w	r1, r1, #1
 800db70:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800db74:	42b8      	cmp	r0, r7
 800db76:	bf0c      	ite	eq
 800db78:	2100      	moveq	r1, #0
 800db7a:	f001 0101 	andne.w	r1, r1, #1
 800db7e:	42b0      	cmp	r0, r6
 800db80:	bf0c      	ite	eq
 800db82:	2100      	moveq	r1, #0
 800db84:	f001 0101 	andne.w	r1, r1, #1
 800db88:	e9dd 2300 	ldrd	r2, r3, [sp]
 800db8c:	2900      	cmp	r1, #0
 800db8e:	f040 8098 	bne.w	800dcc2 <HAL_TIM_IC_Start_DMA+0x1c6>
  if (htim->State == HAL_TIM_STATE_BUSY)
 800db92:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 800db96:	b2c0      	uxtb	r0, r0
 800db98:	2802      	cmp	r0, #2
 800db9a:	d039      	beq.n	800dc10 <HAL_TIM_IC_Start_DMA+0x114>
  else if (htim->State == HAL_TIM_STATE_READY)
 800db9c:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 800dba0:	2901      	cmp	r1, #1
 800dba2:	d03e      	beq.n	800dc22 <HAL_TIM_IC_Start_DMA+0x126>
 800dba4:	6820      	ldr	r0, [r4, #0]
  switch (Channel)
 800dba6:	2d0c      	cmp	r5, #12
 800dba8:	d820      	bhi.n	800dbec <HAL_TIM_IC_Start_DMA+0xf0>
 800dbaa:	e8df f005 	tbb	[pc, r5]
 800dbae:	1f0b      	.short	0x1f0b
 800dbb0:	1f411f1f 	.word	0x1f411f1f
 800dbb4:	1f571f1f 	.word	0x1f571f1f
 800dbb8:	1f1f      	.short	0x1f1f
 800dbba:	6d          	.byte	0x6d
 800dbbb:	00          	.byte	0x00
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800dbbc:	f035 010c 	bics.w	r1, r5, #12
 800dbc0:	d1bf      	bne.n	800db42 <HAL_TIM_IC_Start_DMA+0x46>
 800dbc2:	e7e6      	b.n	800db92 <HAL_TIM_IC_Start_DMA+0x96>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800dbc4:	6a66      	ldr	r6, [r4, #36]	; 0x24
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 800dbc6:	f100 0134 	add.w	r1, r0, #52	; 0x34
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800dbca:	4f59      	ldr	r7, [pc, #356]	; (800dd30 <HAL_TIM_IC_Start_DMA+0x234>)
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800dbcc:	f8df c17c 	ldr.w	ip, [pc, #380]	; 800dd4c <HAL_TIM_IC_Start_DMA+0x250>
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 800dbd0:	4630      	mov	r0, r6
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800dbd2:	6437      	str	r7, [r6, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800dbd4:	4f57      	ldr	r7, [pc, #348]	; (800dd34 <HAL_TIM_IC_Start_DMA+0x238>)
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800dbd6:	f8c6 c03c 	str.w	ip, [r6, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800dbda:	64f7      	str	r7, [r6, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 800dbdc:	f7f8 fe8e 	bl	80068fc <HAL_DMA_Start_IT>
 800dbe0:	bb18      	cbnz	r0, 800dc2a <HAL_TIM_IC_Start_DMA+0x12e>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800dbe2:	6820      	ldr	r0, [r4, #0]
 800dbe4:	68c3      	ldr	r3, [r0, #12]
 800dbe6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dbea:	60c3      	str	r3, [r0, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800dbec:	4629      	mov	r1, r5
 800dbee:	2201      	movs	r2, #1
 800dbf0:	f7ff ff26 	bl	800da40 <TIM_CCxChannelCmd>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dbf4:	6822      	ldr	r2, [r4, #0]
 800dbf6:	4b50      	ldr	r3, [pc, #320]	; (800dd38 <HAL_TIM_IC_Start_DMA+0x23c>)
 800dbf8:	6891      	ldr	r1, [r2, #8]
 800dbfa:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dbfc:	2b06      	cmp	r3, #6
 800dbfe:	d05d      	beq.n	800dcbc <HAL_TIM_IC_Start_DMA+0x1c0>
 800dc00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dc04:	d05a      	beq.n	800dcbc <HAL_TIM_IC_Start_DMA+0x1c0>
    __HAL_TIM_ENABLE(htim);
 800dc06:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800dc08:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 800dc0a:	f043 0301 	orr.w	r3, r3, #1
 800dc0e:	6013      	str	r3, [r2, #0]
}
 800dc10:	b003      	add	sp, #12
 800dc12:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800dc14:	2d14      	cmp	r5, #20
 800dc16:	d894      	bhi.n	800db42 <HAL_TIM_IC_Start_DMA+0x46>
 800dc18:	4948      	ldr	r1, [pc, #288]	; (800dd3c <HAL_TIM_IC_Start_DMA+0x240>)
 800dc1a:	40e9      	lsrs	r1, r5
 800dc1c:	07c9      	lsls	r1, r1, #31
 800dc1e:	d4b8      	bmi.n	800db92 <HAL_TIM_IC_Start_DMA+0x96>
 800dc20:	e78f      	b.n	800db42 <HAL_TIM_IC_Start_DMA+0x46>
    if ((pData == NULL) && (Length > 0U))
 800dc22:	2a00      	cmp	r2, #0
 800dc24:	d146      	bne.n	800dcb4 <HAL_TIM_IC_Start_DMA+0x1b8>
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d044      	beq.n	800dcb4 <HAL_TIM_IC_Start_DMA+0x1b8>
      return HAL_ERROR;
 800dc2a:	2001      	movs	r0, #1
}
 800dc2c:	b003      	add	sp, #12
 800dc2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800dc30:	6aa6      	ldr	r6, [r4, #40]	; 0x28
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 800dc32:	f100 0138 	add.w	r1, r0, #56	; 0x38
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800dc36:	4f3e      	ldr	r7, [pc, #248]	; (800dd30 <HAL_TIM_IC_Start_DMA+0x234>)
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800dc38:	f8df c110 	ldr.w	ip, [pc, #272]	; 800dd4c <HAL_TIM_IC_Start_DMA+0x250>
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 800dc3c:	4630      	mov	r0, r6
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800dc3e:	6437      	str	r7, [r6, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800dc40:	4f3c      	ldr	r7, [pc, #240]	; (800dd34 <HAL_TIM_IC_Start_DMA+0x238>)
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800dc42:	f8c6 c03c 	str.w	ip, [r6, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800dc46:	64f7      	str	r7, [r6, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 800dc48:	f7f8 fe58 	bl	80068fc <HAL_DMA_Start_IT>
 800dc4c:	2800      	cmp	r0, #0
 800dc4e:	d1ec      	bne.n	800dc2a <HAL_TIM_IC_Start_DMA+0x12e>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800dc50:	6820      	ldr	r0, [r4, #0]
 800dc52:	68c3      	ldr	r3, [r0, #12]
 800dc54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800dc58:	60c3      	str	r3, [r0, #12]
      break;
 800dc5a:	e7c7      	b.n	800dbec <HAL_TIM_IC_Start_DMA+0xf0>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800dc5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 800dc5e:	f100 013c 	add.w	r1, r0, #60	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800dc62:	4f33      	ldr	r7, [pc, #204]	; (800dd30 <HAL_TIM_IC_Start_DMA+0x234>)
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800dc64:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800dd4c <HAL_TIM_IC_Start_DMA+0x250>
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 800dc68:	4630      	mov	r0, r6
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800dc6a:	6437      	str	r7, [r6, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800dc6c:	4f31      	ldr	r7, [pc, #196]	; (800dd34 <HAL_TIM_IC_Start_DMA+0x238>)
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800dc6e:	f8c6 c03c 	str.w	ip, [r6, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800dc72:	64f7      	str	r7, [r6, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 800dc74:	f7f8 fe42 	bl	80068fc <HAL_DMA_Start_IT>
 800dc78:	2800      	cmp	r0, #0
 800dc7a:	d1d6      	bne.n	800dc2a <HAL_TIM_IC_Start_DMA+0x12e>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800dc7c:	6820      	ldr	r0, [r4, #0]
 800dc7e:	68c3      	ldr	r3, [r0, #12]
 800dc80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800dc84:	60c3      	str	r3, [r0, #12]
      break;
 800dc86:	e7b1      	b.n	800dbec <HAL_TIM_IC_Start_DMA+0xf0>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800dc88:	6b26      	ldr	r6, [r4, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 800dc8a:	f100 0140 	add.w	r1, r0, #64	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800dc8e:	4f28      	ldr	r7, [pc, #160]	; (800dd30 <HAL_TIM_IC_Start_DMA+0x234>)
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800dc90:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 800dd4c <HAL_TIM_IC_Start_DMA+0x250>
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 800dc94:	4630      	mov	r0, r6
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800dc96:	6437      	str	r7, [r6, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800dc98:	4f26      	ldr	r7, [pc, #152]	; (800dd34 <HAL_TIM_IC_Start_DMA+0x238>)
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800dc9a:	f8c6 c03c 	str.w	ip, [r6, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800dc9e:	64f7      	str	r7, [r6, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 800dca0:	f7f8 fe2c 	bl	80068fc <HAL_DMA_Start_IT>
 800dca4:	2800      	cmp	r0, #0
 800dca6:	d1c0      	bne.n	800dc2a <HAL_TIM_IC_Start_DMA+0x12e>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800dca8:	6820      	ldr	r0, [r4, #0]
 800dcaa:	68c3      	ldr	r3, [r0, #12]
 800dcac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800dcb0:	60c3      	str	r3, [r0, #12]
      break;
 800dcb2:	e79b      	b.n	800dbec <HAL_TIM_IC_Start_DMA+0xf0>
      htim->State = HAL_TIM_STATE_BUSY;
 800dcb4:	2102      	movs	r1, #2
 800dcb6:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
 800dcba:	e773      	b.n	800dba4 <HAL_TIM_IC_Start_DMA+0xa8>
  return HAL_OK;
 800dcbc:	2000      	movs	r0, #0
}
 800dcbe:	b003      	add	sp, #12
 800dcc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 800dcc2:	4917      	ldr	r1, [pc, #92]	; (800dd20 <HAL_TIM_IC_Start_DMA+0x224>)
 800dcc4:	4288      	cmp	r0, r1
 800dcc6:	f43f af64 	beq.w	800db92 <HAL_TIM_IC_Start_DMA+0x96>
 800dcca:	f640 0116 	movw	r1, #2070	; 0x816
 800dcce:	4817      	ldr	r0, [pc, #92]	; (800dd2c <HAL_TIM_IC_Start_DMA+0x230>)
 800dcd0:	e9cd 2300 	strd	r2, r3, [sp]
 800dcd4:	f7f5 f8a6 	bl	8002e24 <assert_failed>
 800dcd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dcdc:	e759      	b.n	800db92 <HAL_TIM_IC_Start_DMA+0x96>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800dcde:	f035 0104 	bics.w	r1, r5, #4
 800dce2:	f47f af2e 	bne.w	800db42 <HAL_TIM_IC_Start_DMA+0x46>
 800dce6:	e7f0      	b.n	800dcca <HAL_TIM_IC_Start_DMA+0x1ce>
 800dce8:	4815      	ldr	r0, [pc, #84]	; (800dd40 <HAL_TIM_IC_Start_DMA+0x244>)
 800dcea:	4281      	cmp	r1, r0
 800dcec:	f43f af26 	beq.w	800db3c <HAL_TIM_IC_Start_DMA+0x40>
 800dcf0:	f5a0 3098 	sub.w	r0, r0, #77824	; 0x13000
 800dcf4:	4281      	cmp	r1, r0
 800dcf6:	d0f2      	beq.n	800dcde <HAL_TIM_IC_Start_DMA+0x1e2>
 800dcf8:	4812      	ldr	r0, [pc, #72]	; (800dd44 <HAL_TIM_IC_Start_DMA+0x248>)
 800dcfa:	4281      	cmp	r1, r0
 800dcfc:	f43f af1e 	beq.w	800db3c <HAL_TIM_IC_Start_DMA+0x40>
 800dd00:	4811      	ldr	r0, [pc, #68]	; (800dd48 <HAL_TIM_IC_Start_DMA+0x24c>)
 800dd02:	4281      	cmp	r1, r0
 800dd04:	f47f af1d 	bne.w	800db42 <HAL_TIM_IC_Start_DMA+0x46>
 800dd08:	2d00      	cmp	r5, #0
 800dd0a:	f47f af1a 	bne.w	800db42 <HAL_TIM_IC_Start_DMA+0x46>
 800dd0e:	e7dc      	b.n	800dcca <HAL_TIM_IC_Start_DMA+0x1ce>
 800dd10:	40010000 	.word	0x40010000
 800dd14:	40000400 	.word	0x40000400
 800dd18:	40000800 	.word	0x40000800
 800dd1c:	40000c00 	.word	0x40000c00
 800dd20:	40010400 	.word	0x40010400
 800dd24:	40014000 	.word	0x40014000
 800dd28:	40014400 	.word	0x40014400
 800dd2c:	08026848 	.word	0x08026848
 800dd30:	0800c681 	.word	0x0800c681
 800dd34:	0800c85d 	.word	0x0800c85d
 800dd38:	00010007 	.word	0x00010007
 800dd3c:	00111111 	.word	0x00111111
 800dd40:	40014800 	.word	0x40014800
 800dd44:	40001c00 	.word	0x40001c00
 800dd48:	40002000 	.word	0x40002000
 800dd4c:	0800c61d 	.word	0x0800c61d

0800dd50 <HAL_TIM_IC_Stop_DMA>:
{
 800dd50:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800dd52:	4a5a      	ldr	r2, [pc, #360]	; (800debc <HAL_TIM_IC_Stop_DMA+0x16c>)
{
 800dd54:	4604      	mov	r4, r0
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800dd56:	6803      	ldr	r3, [r0, #0]
{
 800dd58:	460d      	mov	r5, r1
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800dd5a:	4293      	cmp	r3, r2
 800dd5c:	f000 808e 	beq.w	800de7c <HAL_TIM_IC_Stop_DMA+0x12c>
 800dd60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd64:	d04a      	beq.n	800ddfc <HAL_TIM_IC_Stop_DMA+0xac>
 800dd66:	4a56      	ldr	r2, [pc, #344]	; (800dec0 <HAL_TIM_IC_Stop_DMA+0x170>)
 800dd68:	4293      	cmp	r3, r2
 800dd6a:	d047      	beq.n	800ddfc <HAL_TIM_IC_Stop_DMA+0xac>
 800dd6c:	4a55      	ldr	r2, [pc, #340]	; (800dec4 <HAL_TIM_IC_Stop_DMA+0x174>)
 800dd6e:	4293      	cmp	r3, r2
 800dd70:	d044      	beq.n	800ddfc <HAL_TIM_IC_Stop_DMA+0xac>
 800dd72:	4a55      	ldr	r2, [pc, #340]	; (800dec8 <HAL_TIM_IC_Stop_DMA+0x178>)
 800dd74:	4293      	cmp	r3, r2
 800dd76:	d041      	beq.n	800ddfc <HAL_TIM_IC_Stop_DMA+0xac>
 800dd78:	4a54      	ldr	r2, [pc, #336]	; (800decc <HAL_TIM_IC_Stop_DMA+0x17c>)
 800dd7a:	4293      	cmp	r3, r2
 800dd7c:	d07e      	beq.n	800de7c <HAL_TIM_IC_Stop_DMA+0x12c>
 800dd7e:	4a54      	ldr	r2, [pc, #336]	; (800ded0 <HAL_TIM_IC_Stop_DMA+0x180>)
 800dd80:	4293      	cmp	r3, r2
 800dd82:	f000 8082 	beq.w	800de8a <HAL_TIM_IC_Stop_DMA+0x13a>
 800dd86:	4a53      	ldr	r2, [pc, #332]	; (800ded4 <HAL_TIM_IC_Stop_DMA+0x184>)
 800dd88:	4293      	cmp	r3, r2
 800dd8a:	f040 8083 	bne.w	800de94 <HAL_TIM_IC_Stop_DMA+0x144>
 800dd8e:	b325      	cbz	r5, 800ddda <HAL_TIM_IC_Stop_DMA+0x8a>
 800dd90:	f640 019a 	movw	r1, #2202	; 0x89a
 800dd94:	4850      	ldr	r0, [pc, #320]	; (800ded8 <HAL_TIM_IC_Stop_DMA+0x188>)
 800dd96:	f7f5 f845 	bl	8002e24 <assert_failed>
 800dd9a:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 800dd9c:	4a47      	ldr	r2, [pc, #284]	; (800debc <HAL_TIM_IC_Stop_DMA+0x16c>)
 800dd9e:	4948      	ldr	r1, [pc, #288]	; (800dec0 <HAL_TIM_IC_Stop_DMA+0x170>)
 800dda0:	4293      	cmp	r3, r2
 800dda2:	bf18      	it	ne
 800dda4:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800dda8:	4846      	ldr	r0, [pc, #280]	; (800dec4 <HAL_TIM_IC_Stop_DMA+0x174>)
 800ddaa:	bf14      	ite	ne
 800ddac:	2201      	movne	r2, #1
 800ddae:	2200      	moveq	r2, #0
 800ddb0:	428b      	cmp	r3, r1
 800ddb2:	bf0c      	ite	eq
 800ddb4:	2200      	moveq	r2, #0
 800ddb6:	f002 0201 	andne.w	r2, r2, #1
 800ddba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ddbe:	4283      	cmp	r3, r0
 800ddc0:	bf0c      	ite	eq
 800ddc2:	2200      	moveq	r2, #0
 800ddc4:	f002 0201 	andne.w	r2, r2, #1
 800ddc8:	428b      	cmp	r3, r1
 800ddca:	bf0c      	ite	eq
 800ddcc:	2200      	moveq	r2, #0
 800ddce:	f002 0201 	andne.w	r2, r2, #1
 800ddd2:	b142      	cbz	r2, 800dde6 <HAL_TIM_IC_Stop_DMA+0x96>
 800ddd4:	4a3d      	ldr	r2, [pc, #244]	; (800decc <HAL_TIM_IC_Stop_DMA+0x17c>)
 800ddd6:	4293      	cmp	r3, r2
 800ddd8:	d005      	beq.n	800dde6 <HAL_TIM_IC_Stop_DMA+0x96>
 800ddda:	f640 019b 	movw	r1, #2203	; 0x89b
 800ddde:	483e      	ldr	r0, [pc, #248]	; (800ded8 <HAL_TIM_IC_Stop_DMA+0x188>)
 800dde0:	f7f5 f820 	bl	8002e24 <assert_failed>
 800dde4:	6823      	ldr	r3, [r4, #0]
  switch (Channel)
 800dde6:	2d0c      	cmp	r5, #12
 800dde8:	d814      	bhi.n	800de14 <HAL_TIM_IC_Stop_DMA+0xc4>
 800ddea:	e8df f005 	tbb	[pc, r5]
 800ddee:	130b      	.short	0x130b
 800ddf0:	133e1313 	.word	0x133e1313
 800ddf4:	13351313 	.word	0x13351313
 800ddf8:	1313      	.short	0x1313
 800ddfa:	2c          	.byte	0x2c
 800ddfb:	00          	.byte	0x00
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800ddfc:	f035 020c 	bics.w	r2, r5, #12
 800de00:	d1c6      	bne.n	800dd90 <HAL_TIM_IC_Stop_DMA+0x40>
 800de02:	e7f0      	b.n	800dde6 <HAL_TIM_IC_Stop_DMA+0x96>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800de04:	68da      	ldr	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800de06:	6a60      	ldr	r0, [r4, #36]	; 0x24
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800de08:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800de0c:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800de0e:	f7f8 fe17 	bl	8006a40 <HAL_DMA_Abort_IT>
 800de12:	6823      	ldr	r3, [r4, #0]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800de14:	4629      	mov	r1, r5
 800de16:	4618      	mov	r0, r3
 800de18:	2200      	movs	r2, #0
 800de1a:	f7ff fe11 	bl	800da40 <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 800de1e:	6823      	ldr	r3, [r4, #0]
 800de20:	f241 1211 	movw	r2, #4369	; 0x1111
 800de24:	6a19      	ldr	r1, [r3, #32]
 800de26:	4211      	tst	r1, r2
 800de28:	d108      	bne.n	800de3c <HAL_TIM_IC_Stop_DMA+0xec>
 800de2a:	6a19      	ldr	r1, [r3, #32]
 800de2c:	f240 4244 	movw	r2, #1092	; 0x444
 800de30:	4211      	tst	r1, r2
 800de32:	d103      	bne.n	800de3c <HAL_TIM_IC_Stop_DMA+0xec>
 800de34:	681a      	ldr	r2, [r3, #0]
 800de36:	f022 0201 	bic.w	r2, r2, #1
 800de3a:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800de3c:	2301      	movs	r3, #1
}
 800de3e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800de40:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800de44:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800de46:	68da      	ldr	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800de48:	6b20      	ldr	r0, [r4, #48]	; 0x30
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800de4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800de4e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800de50:	f7f8 fdf6 	bl	8006a40 <HAL_DMA_Abort_IT>
 800de54:	6823      	ldr	r3, [r4, #0]
      break;
 800de56:	e7dd      	b.n	800de14 <HAL_TIM_IC_Stop_DMA+0xc4>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800de58:	68da      	ldr	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800de5a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800de5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800de60:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800de62:	f7f8 fded 	bl	8006a40 <HAL_DMA_Abort_IT>
 800de66:	6823      	ldr	r3, [r4, #0]
      break;
 800de68:	e7d4      	b.n	800de14 <HAL_TIM_IC_Stop_DMA+0xc4>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800de6a:	68da      	ldr	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800de6c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800de6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800de72:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800de74:	f7f8 fde4 	bl	8006a40 <HAL_DMA_Abort_IT>
 800de78:	6823      	ldr	r3, [r4, #0]
      break;
 800de7a:	e7cb      	b.n	800de14 <HAL_TIM_IC_Stop_DMA+0xc4>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800de7c:	2d14      	cmp	r5, #20
 800de7e:	d887      	bhi.n	800dd90 <HAL_TIM_IC_Stop_DMA+0x40>
 800de80:	4a16      	ldr	r2, [pc, #88]	; (800dedc <HAL_TIM_IC_Stop_DMA+0x18c>)
 800de82:	40ea      	lsrs	r2, r5
 800de84:	07d2      	lsls	r2, r2, #31
 800de86:	d4ae      	bmi.n	800dde6 <HAL_TIM_IC_Stop_DMA+0x96>
 800de88:	e782      	b.n	800dd90 <HAL_TIM_IC_Stop_DMA+0x40>
 800de8a:	f035 0304 	bics.w	r3, r5, #4
 800de8e:	f47f af7f 	bne.w	800dd90 <HAL_TIM_IC_Stop_DMA+0x40>
 800de92:	e7a2      	b.n	800ddda <HAL_TIM_IC_Stop_DMA+0x8a>
 800de94:	4a12      	ldr	r2, [pc, #72]	; (800dee0 <HAL_TIM_IC_Stop_DMA+0x190>)
 800de96:	4293      	cmp	r3, r2
 800de98:	f43f af79 	beq.w	800dd8e <HAL_TIM_IC_Stop_DMA+0x3e>
 800de9c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800dea0:	4293      	cmp	r3, r2
 800dea2:	d0f2      	beq.n	800de8a <HAL_TIM_IC_Stop_DMA+0x13a>
 800dea4:	4a0f      	ldr	r2, [pc, #60]	; (800dee4 <HAL_TIM_IC_Stop_DMA+0x194>)
 800dea6:	4293      	cmp	r3, r2
 800dea8:	f43f af71 	beq.w	800dd8e <HAL_TIM_IC_Stop_DMA+0x3e>
 800deac:	4a0e      	ldr	r2, [pc, #56]	; (800dee8 <HAL_TIM_IC_Stop_DMA+0x198>)
 800deae:	4293      	cmp	r3, r2
 800deb0:	f47f af6e 	bne.w	800dd90 <HAL_TIM_IC_Stop_DMA+0x40>
 800deb4:	2d00      	cmp	r5, #0
 800deb6:	f47f af6b 	bne.w	800dd90 <HAL_TIM_IC_Stop_DMA+0x40>
 800deba:	e78e      	b.n	800ddda <HAL_TIM_IC_Stop_DMA+0x8a>
 800debc:	40010000 	.word	0x40010000
 800dec0:	40000400 	.word	0x40000400
 800dec4:	40000800 	.word	0x40000800
 800dec8:	40000c00 	.word	0x40000c00
 800decc:	40010400 	.word	0x40010400
 800ded0:	40014000 	.word	0x40014000
 800ded4:	40014400 	.word	0x40014400
 800ded8:	08026848 	.word	0x08026848
 800dedc:	00111111 	.word	0x00111111
 800dee0:	40014800 	.word	0x40014800
 800dee4:	40001c00 	.word	0x40001c00
 800dee8:	40002000 	.word	0x40002000

0800deec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800deec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800def0:	4604      	mov	r4, r0
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800def2:	4b6d      	ldr	r3, [pc, #436]	; (800e0a8 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>)
 800def4:	486d      	ldr	r0, [pc, #436]	; (800e0ac <HAL_TIMEx_MasterConfigSynchronization+0x1c0>)
{
 800def6:	460d      	mov	r5, r1
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800def8:	6822      	ldr	r2, [r4, #0]
 800defa:	496d      	ldr	r1, [pc, #436]	; (800e0b0 <HAL_TIMEx_MasterConfigSynchronization+0x1c4>)
 800defc:	429a      	cmp	r2, r3
 800defe:	bf18      	it	ne
 800df00:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800df04:	4e6b      	ldr	r6, [pc, #428]	; (800e0b4 <HAL_TIMEx_MasterConfigSynchronization+0x1c8>)
 800df06:	bf14      	ite	ne
 800df08:	2301      	movne	r3, #1
 800df0a:	2300      	moveq	r3, #0
 800df0c:	4282      	cmp	r2, r0
 800df0e:	bf0c      	ite	eq
 800df10:	2300      	moveq	r3, #0
 800df12:	f003 0301 	andne.w	r3, r3, #1
 800df16:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800df1a:	428a      	cmp	r2, r1
 800df1c:	bf0c      	ite	eq
 800df1e:	2300      	moveq	r3, #0
 800df20:	f003 0301 	andne.w	r3, r3, #1
 800df24:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800df28:	42b2      	cmp	r2, r6
 800df2a:	bf0c      	ite	eq
 800df2c:	2300      	moveq	r3, #0
 800df2e:	f003 0301 	andne.w	r3, r3, #1
 800df32:	4282      	cmp	r2, r0
 800df34:	bf0c      	ite	eq
 800df36:	2300      	moveq	r3, #0
 800df38:	f003 0301 	andne.w	r3, r3, #1
 800df3c:	428a      	cmp	r2, r1
 800df3e:	bf0c      	ite	eq
 800df40:	2300      	moveq	r3, #0
 800df42:	f003 0301 	andne.w	r3, r3, #1
 800df46:	b11b      	cbz	r3, 800df50 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800df48:	4b5b      	ldr	r3, [pc, #364]	; (800e0b8 <HAL_TIMEx_MasterConfigSynchronization+0x1cc>)
 800df4a:	429a      	cmp	r2, r3
 800df4c:	f040 808c 	bne.w	800e068 <HAL_TIMEx_MasterConfigSynchronization+0x17c>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800df50:	682b      	ldr	r3, [r5, #0]
 800df52:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800df56:	2b40      	cmp	r3, #64	; 0x40
 800df58:	d002      	beq.n	800df60 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	f040 808a 	bne.w	800e074 <HAL_TIMEx_MasterConfigSynchronization+0x188>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800df60:	68ab      	ldr	r3, [r5, #8]
 800df62:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800df66:	d173      	bne.n	800e050 <HAL_TIMEx_MasterConfigSynchronization+0x164>

  /* Check input state */
  __HAL_LOCK(htim);
 800df68:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800df6c:	2b01      	cmp	r3, #1
 800df6e:	d078      	beq.n	800e062 <HAL_TIMEx_MasterConfigSynchronization+0x176>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800df70:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800df72:	2102      	movs	r1, #2

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800df74:	f8df 9130 	ldr.w	r9, [pc, #304]	; 800e0a8 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
  __HAL_LOCK(htim);
 800df78:	2301      	movs	r3, #1
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800df7a:	f8df 813c 	ldr.w	r8, [pc, #316]	; 800e0b8 <HAL_TIMEx_MasterConfigSynchronization+0x1cc>
  htim->State = HAL_TIM_STATE_BUSY;
 800df7e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800df82:	eba2 0009 	sub.w	r0, r2, r9
 800df86:	eba2 0108 	sub.w	r1, r2, r8
  tmpcr2 = htim->Instance->CR2;
 800df8a:	6857      	ldr	r7, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800df8c:	fab0 f080 	clz	r0, r0
  __HAL_LOCK(htim);
 800df90:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800df94:	fab1 f181 	clz	r1, r1
  tmpsmcr = htim->Instance->SMCR;
 800df98:	6896      	ldr	r6, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800df9a:	0940      	lsrs	r0, r0, #5
 800df9c:	0949      	lsrs	r1, r1, #5
 800df9e:	ea50 0301 	orrs.w	r3, r0, r1
 800dfa2:	d135      	bne.n	800e010 <HAL_TIMEx_MasterConfigSynchronization+0x124>
 800dfa4:	4619      	mov	r1, r3
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dfa6:	430b      	orrs	r3, r1
 800dfa8:	4840      	ldr	r0, [pc, #256]	; (800e0ac <HAL_TIMEx_MasterConfigSynchronization+0x1c0>)
 800dfaa:	4941      	ldr	r1, [pc, #260]	; (800e0b0 <HAL_TIMEx_MasterConfigSynchronization+0x1c4>)
  tmpcr2 &= ~TIM_CR2_MMS;
 800dfac:	f027 0770 	bic.w	r7, r7, #112	; 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dfb0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800dfb4:	bf08      	it	eq
 800dfb6:	f043 0301 	orreq.w	r3, r3, #1
 800dfba:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 800e0b4 <HAL_TIMEx_MasterConfigSynchronization+0x1c8>
 800dfbe:	4282      	cmp	r2, r0
 800dfc0:	bf08      	it	eq
 800dfc2:	f043 0301 	orreq.w	r3, r3, #1
 800dfc6:	f500 309e 	add.w	r0, r0, #80896	; 0x13c00
 800dfca:	428a      	cmp	r2, r1
 800dfcc:	bf08      	it	eq
 800dfce:	f043 0301 	orreq.w	r3, r3, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dfd2:	6829      	ldr	r1, [r5, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dfd4:	4562      	cmp	r2, ip
 800dfd6:	bf08      	it	eq
 800dfd8:	f043 0301 	orreq.w	r3, r3, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dfdc:	430f      	orrs	r7, r1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dfde:	4282      	cmp	r2, r0
 800dfe0:	bf08      	it	eq
 800dfe2:	f043 0301 	orreq.w	r3, r3, #1
  htim->Instance->CR2 = tmpcr2;
 800dfe6:	6057      	str	r7, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dfe8:	f013 0fff 	tst.w	r3, #255	; 0xff
 800dfec:	d102      	bne.n	800dff4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800dfee:	4b33      	ldr	r3, [pc, #204]	; (800e0bc <HAL_TIMEx_MasterConfigSynchronization+0x1d0>)
 800dff0:	429a      	cmp	r2, r3
 800dff2:	d104      	bne.n	800dffe <HAL_TIMEx_MasterConfigSynchronization+0x112>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dff4:	68ab      	ldr	r3, [r5, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dff6:	f026 0680 	bic.w	r6, r6, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dffa:	431e      	orrs	r6, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dffc:	6096      	str	r6, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800dffe:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800e000:	2201      	movs	r2, #1

  return HAL_OK;
 800e002:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800e004:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800e008:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800e00c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800e010:	f8d5 e004 	ldr.w	lr, [r5, #4]
 800e014:	f42e 1340 	bic.w	r3, lr, #3145728	; 0x300000
 800e018:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e01c:	bf18      	it	ne
 800e01e:	2b00      	cmpne	r3, #0
 800e020:	bf14      	ite	ne
 800e022:	f04f 0c01 	movne.w	ip, #1
 800e026:	f04f 0c00 	moveq.w	ip, #0
 800e02a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e02e:	bf0c      	ite	eq
 800e030:	f04f 0c00 	moveq.w	ip, #0
 800e034:	f00c 0c01 	andne.w	ip, ip, #1
 800e038:	f1bc 0f00 	cmp.w	ip, #0
 800e03c:	d002      	beq.n	800e044 <HAL_TIMEx_MasterConfigSynchronization+0x158>
 800e03e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800e042:	d11d      	bne.n	800e080 <HAL_TIMEx_MasterConfigSynchronization+0x194>
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e044:	f427 0770 	bic.w	r7, r7, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e048:	4603      	mov	r3, r0
 800e04a:	ea47 070e 	orr.w	r7, r7, lr
 800e04e:	e7aa      	b.n	800dfa6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800e050:	f44f 61cd 	mov.w	r1, #1640	; 0x668
 800e054:	481a      	ldr	r0, [pc, #104]	; (800e0c0 <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 800e056:	f7f4 fee5 	bl	8002e24 <assert_failed>
  __HAL_LOCK(htim);
 800e05a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800e05e:	2b01      	cmp	r3, #1
 800e060:	d186      	bne.n	800df70 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800e062:	2002      	movs	r0, #2
}
 800e064:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800e068:	f240 6166 	movw	r1, #1638	; 0x666
 800e06c:	4814      	ldr	r0, [pc, #80]	; (800e0c0 <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 800e06e:	f7f4 fed9 	bl	8002e24 <assert_failed>
 800e072:	e76d      	b.n	800df50 <HAL_TIMEx_MasterConfigSynchronization+0x64>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800e074:	f240 6167 	movw	r1, #1639	; 0x667
 800e078:	4811      	ldr	r0, [pc, #68]	; (800e0c0 <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 800e07a:	f7f4 fed3 	bl	8002e24 <assert_failed>
 800e07e:	e76f      	b.n	800df60 <HAL_TIMEx_MasterConfigSynchronization+0x74>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800e080:	f240 617a 	movw	r1, #1658	; 0x67a
 800e084:	480e      	ldr	r0, [pc, #56]	; (800e0c0 <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 800e086:	f7f4 fecd 	bl	8002e24 <assert_failed>
 800e08a:	6822      	ldr	r2, [r4, #0]
 800e08c:	f8d5 e004 	ldr.w	lr, [r5, #4]
 800e090:	eba2 0309 	sub.w	r3, r2, r9
 800e094:	eba2 0c08 	sub.w	ip, r2, r8
 800e098:	4258      	negs	r0, r3
 800e09a:	4158      	adcs	r0, r3
 800e09c:	f1dc 0100 	rsbs	r1, ip, #0
 800e0a0:	eb41 010c 	adc.w	r1, r1, ip
 800e0a4:	e7ce      	b.n	800e044 <HAL_TIMEx_MasterConfigSynchronization+0x158>
 800e0a6:	bf00      	nop
 800e0a8:	40010000 	.word	0x40010000
 800e0ac:	40000400 	.word	0x40000400
 800e0b0:	40000800 	.word	0x40000800
 800e0b4:	40000c00 	.word	0x40000c00
 800e0b8:	40010400 	.word	0x40010400
 800e0bc:	40001800 	.word	0x40001800
 800e0c0:	08026880 	.word	0x08026880

0800e0c4 <HAL_TIMEx_CommutCallback>:
 800e0c4:	4770      	bx	lr
 800e0c6:	bf00      	nop

0800e0c8 <HAL_TIMEx_BreakCallback>:
 800e0c8:	4770      	bx	lr
 800e0ca:	bf00      	nop

0800e0cc <HAL_TIMEx_Break2Callback>:
 800e0cc:	4770      	bx	lr
 800e0ce:	bf00      	nop

0800e0d0 <HAL_UART_DeInit>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e0d0:	2800      	cmp	r0, #0
 800e0d2:	d043      	beq.n	800e15c <HAL_UART_DeInit+0x8c>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));
 800e0d4:	6802      	ldr	r2, [r0, #0]
 800e0d6:	4926      	ldr	r1, [pc, #152]	; (800e170 <HAL_UART_DeInit+0xa0>)
{
 800e0d8:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_INSTANCE(huart->Instance));
 800e0da:	4b26      	ldr	r3, [pc, #152]	; (800e174 <HAL_UART_DeInit+0xa4>)
 800e0dc:	4604      	mov	r4, r0
 800e0de:	4826      	ldr	r0, [pc, #152]	; (800e178 <HAL_UART_DeInit+0xa8>)
 800e0e0:	429a      	cmp	r2, r3
 800e0e2:	bf18      	it	ne
 800e0e4:	428a      	cmpne	r2, r1
 800e0e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e0ea:	4d24      	ldr	r5, [pc, #144]	; (800e17c <HAL_UART_DeInit+0xac>)
 800e0ec:	bf14      	ite	ne
 800e0ee:	2301      	movne	r3, #1
 800e0f0:	2300      	moveq	r3, #0
 800e0f2:	4282      	cmp	r2, r0
 800e0f4:	bf0c      	ite	eq
 800e0f6:	2300      	moveq	r3, #0
 800e0f8:	f003 0301 	andne.w	r3, r3, #1
 800e0fc:	f500 404c 	add.w	r0, r0, #52224	; 0xcc00
 800e100:	428a      	cmp	r2, r1
 800e102:	bf0c      	ite	eq
 800e104:	2300      	moveq	r3, #0
 800e106:	f003 0301 	andne.w	r3, r3, #1
 800e10a:	f501 5130 	add.w	r1, r1, #11264	; 0x2c00
 800e10e:	42aa      	cmp	r2, r5
 800e110:	bf0c      	ite	eq
 800e112:	2300      	moveq	r3, #0
 800e114:	f003 0301 	andne.w	r3, r3, #1
 800e118:	4282      	cmp	r2, r0
 800e11a:	bf0c      	ite	eq
 800e11c:	2300      	moveq	r3, #0
 800e11e:	f003 0301 	andne.w	r3, r3, #1
 800e122:	428a      	cmp	r2, r1
 800e124:	bf0c      	ite	eq
 800e126:	2300      	moveq	r3, #0
 800e128:	f003 0301 	andne.w	r3, r3, #1
 800e12c:	b113      	cbz	r3, 800e134 <HAL_UART_DeInit+0x64>
 800e12e:	4b14      	ldr	r3, [pc, #80]	; (800e180 <HAL_UART_DeInit+0xb0>)
 800e130:	429a      	cmp	r2, r3
 800e132:	d115      	bne.n	800e160 <HAL_UART_DeInit+0x90>

  huart->gState = HAL_UART_STATE_BUSY;
 800e134:	2324      	movs	r3, #36	; 0x24

  __HAL_UART_DISABLE(huart);

  huart->Instance->CR1 = 0x0U;
 800e136:	2500      	movs	r5, #0
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800e138:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800e13a:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800e13c:	6813      	ldr	r3, [r2, #0]
 800e13e:	f023 0301 	bic.w	r3, r3, #1
 800e142:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0U;
 800e144:	6015      	str	r5, [r2, #0]
  huart->Instance->CR2 = 0x0U;
 800e146:	6055      	str	r5, [r2, #4]
  huart->Instance->CR3 = 0x0U;
 800e148:	6095      	str	r5, [r2, #8]
  HAL_UART_MspDeInit(huart);
 800e14a:	f7f6 fa81 	bl	8004650 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e14e:	67e5      	str	r5, [r4, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_RESET;
  huart->RxState = HAL_UART_STATE_RESET;

  __HAL_UNLOCK(huart);
 800e150:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70

  return HAL_OK;
 800e154:	4628      	mov	r0, r5
  huart->gState = HAL_UART_STATE_RESET;
 800e156:	6765      	str	r5, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 800e158:	67a5      	str	r5, [r4, #120]	; 0x78
}
 800e15a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800e15c:	2001      	movs	r0, #1
}
 800e15e:	4770      	bx	lr
  assert_param(IS_UART_INSTANCE(huart->Instance));
 800e160:	f240 2165 	movw	r1, #613	; 0x265
 800e164:	4807      	ldr	r0, [pc, #28]	; (800e184 <HAL_UART_DeInit+0xb4>)
 800e166:	f7f4 fe5d 	bl	8002e24 <assert_failed>
 800e16a:	6822      	ldr	r2, [r4, #0]
 800e16c:	e7e2      	b.n	800e134 <HAL_UART_DeInit+0x64>
 800e16e:	bf00      	nop
 800e170:	40004400 	.word	0x40004400
 800e174:	40011000 	.word	0x40011000
 800e178:	40004800 	.word	0x40004800
 800e17c:	40005000 	.word	0x40005000
 800e180:	40007c00 	.word	0x40007c00
 800e184:	080268d0 	.word	0x080268d0

0800e188 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e18a:	6f46      	ldr	r6, [r0, #116]	; 0x74
 800e18c:	2e20      	cmp	r6, #32
 800e18e:	d13b      	bne.n	800e208 <HAL_UART_Transmit_DMA+0x80>
  {
    if ((pData == NULL) || (Size == 0U))
 800e190:	2900      	cmp	r1, #0
 800e192:	d03b      	beq.n	800e20c <HAL_UART_Transmit_DMA+0x84>
 800e194:	fab2 f782 	clz	r7, r2
 800e198:	097f      	lsrs	r7, r7, #5
 800e19a:	2f00      	cmp	r7, #0
 800e19c:	d136      	bne.n	800e20c <HAL_UART_Transmit_DMA+0x84>
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 800e19e:	f890 4070 	ldrb.w	r4, [r0, #112]	; 0x70
 800e1a2:	2c01      	cmp	r4, #1
 800e1a4:	d030      	beq.n	800e208 <HAL_UART_Transmit_DMA+0x80>
 800e1a6:	4613      	mov	r3, r2
 800e1a8:	4605      	mov	r5, r0
    huart->pTxBuffPtr  = pData;
    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e1aa:	2221      	movs	r2, #33	; 0x21
    __HAL_LOCK(huart);
 800e1ac:	2401      	movs	r4, #1

    if (huart->hdmatx != NULL)
 800e1ae:	f8d0 e068 	ldr.w	lr, [r0, #104]	; 0x68
    huart->TxXferCount = Size;
 800e1b2:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
    huart->pTxBuffPtr  = pData;
 800e1b6:	64e9      	str	r1, [r5, #76]	; 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e1b8:	67c7      	str	r7, [r0, #124]	; 0x7c
    huart->TxXferSize  = Size;
 800e1ba:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e1be:	6742      	str	r2, [r0, #116]	; 0x74
    __HAL_LOCK(huart);
 800e1c0:	f880 4070 	strb.w	r4, [r0, #112]	; 0x70
 800e1c4:	6802      	ldr	r2, [r0, #0]
    if (huart->hdmatx != NULL)
 800e1c6:	f1be 0f00 	cmp.w	lr, #0
 800e1ca:	d012      	beq.n	800e1f2 <HAL_UART_Transmit_DMA+0x6a>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e1cc:	f8df c054 	ldr.w	ip, [pc, #84]	; 800e224 <HAL_UART_Transmit_DMA+0x9c>

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800e1d0:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e1d2:	4813      	ldr	r0, [pc, #76]	; (800e220 <HAL_UART_Transmit_DMA+0x98>)
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e1d4:	f8ce c040 	str.w	ip, [lr, #64]	; 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e1d8:	f8df c04c 	ldr.w	ip, [pc, #76]	; 800e228 <HAL_UART_Transmit_DMA+0xa0>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e1dc:	f8ce 003c 	str.w	r0, [lr, #60]	; 0x3c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800e1e0:	4670      	mov	r0, lr
      huart->hdmatx->XferAbortCallback = NULL;
 800e1e2:	f8ce 7050 	str.w	r7, [lr, #80]	; 0x50
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e1e6:	f8ce c04c 	str.w	ip, [lr, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800e1ea:	f7f8 fb87 	bl	80068fc <HAL_DMA_Start_IT>
 800e1ee:	b978      	cbnz	r0, 800e210 <HAL_UART_Transmit_DMA+0x88>
 800e1f0:	682a      	ldr	r2, [r5, #0]

        return HAL_ERROR;
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800e1f2:	2340      	movs	r3, #64	; 0x40

    __HAL_UNLOCK(huart);
 800e1f4:	2100      	movs	r1, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800e1f6:	6213      	str	r3, [r2, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);

    return HAL_OK;
 800e1f8:	4608      	mov	r0, r1
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e1fa:	6893      	ldr	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 800e1fc:	f885 1070 	strb.w	r1, [r5, #112]	; 0x70
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e204:	6093      	str	r3, [r2, #8]
  }
  else
  {
    return HAL_BUSY;
  }
}
 800e206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800e208:	2002      	movs	r0, #2
}
 800e20a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800e20c:	2001      	movs	r0, #1
}
 800e20e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e210:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);
 800e212:	f885 7070 	strb.w	r7, [r5, #112]	; 0x70
        return HAL_ERROR;
 800e216:	4620      	mov	r0, r4
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e218:	67eb      	str	r3, [r5, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 800e21a:	676e      	str	r6, [r5, #116]	; 0x74
}
 800e21c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e21e:	bf00      	nop
 800e220:	0800e385 	.word	0x0800e385
 800e224:	0800e3b5 	.word	0x0800e3b5
 800e228:	0800e409 	.word	0x0800e409

0800e22c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e22c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e230:	6f86      	ldr	r6, [r0, #120]	; 0x78
 800e232:	2e20      	cmp	r6, #32
 800e234:	d149      	bne.n	800e2ca <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e236:	2900      	cmp	r1, #0
 800e238:	d04a      	beq.n	800e2d0 <HAL_UART_Receive_DMA+0xa4>
 800e23a:	fab2 f782 	clz	r7, r2
 800e23e:	097f      	lsrs	r7, r7, #5
 800e240:	2f00      	cmp	r7, #0
 800e242:	d145      	bne.n	800e2d0 <HAL_UART_Receive_DMA+0xa4>
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 800e244:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800e248:	2b01      	cmp	r3, #1
 800e24a:	d03e      	beq.n	800e2ca <HAL_UART_Receive_DMA+0x9e>
 800e24c:	4613      	mov	r3, r2
 800e24e:	2401      	movs	r4, #1

    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e250:	2222      	movs	r2, #34	; 0x22

    if (huart->hdmarx != NULL)
 800e252:	f8d0 e06c 	ldr.w	lr, [r0, #108]	; 0x6c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e256:	67c7      	str	r7, [r0, #124]	; 0x7c
 800e258:	4605      	mov	r5, r0
    huart->pRxBuffPtr = pData;
 800e25a:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 800e25c:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58
    __HAL_LOCK(huart);
 800e260:	f880 4070 	strb.w	r4, [r0, #112]	; 0x70
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e264:	6782      	str	r2, [r0, #120]	; 0x78
 800e266:	f8d0 c000 	ldr.w	ip, [r0]
    if (huart->hdmarx != NULL)
 800e26a:	f1be 0f00 	cmp.w	lr, #0
 800e26e:	d015      	beq.n	800e29c <HAL_UART_Receive_DMA+0x70>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e270:	481c      	ldr	r0, [pc, #112]	; (800e2e4 <HAL_UART_Receive_DMA+0xb8>)

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e272:	460a      	mov	r2, r1
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e274:	f8df 8070 	ldr.w	r8, [pc, #112]	; 800e2e8 <HAL_UART_Receive_DMA+0xbc>
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e278:	f10c 0124 	add.w	r1, ip, #36	; 0x24
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e27c:	f8df c06c 	ldr.w	ip, [pc, #108]	; 800e2ec <HAL_UART_Receive_DMA+0xc0>
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e280:	f8ce 003c 	str.w	r0, [lr, #60]	; 0x3c
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e284:	4670      	mov	r0, lr
      huart->hdmarx->XferAbortCallback = NULL;
 800e286:	f8ce 7050 	str.w	r7, [lr, #80]	; 0x50
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e28a:	f8ce 8040 	str.w	r8, [lr, #64]	; 0x40
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e28e:	f8ce c04c 	str.w	ip, [lr, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e292:	f7f8 fb33 	bl	80068fc <HAL_DMA_Start_IT>
 800e296:	b9f0      	cbnz	r0, 800e2d6 <HAL_UART_Receive_DMA+0xaa>
 800e298:	f8d5 c000 	ldr.w	ip, [r5]
      }
    }
    __HAL_UNLOCK(huart);

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e29c:	f8dc 3000 	ldr.w	r3, [ip]
    __HAL_UNLOCK(huart);
 800e2a0:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e2a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    __HAL_UNLOCK(huart);
 800e2a6:	f885 0070 	strb.w	r0, [r5, #112]	; 0x70
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e2aa:	f8cc 3000 	str.w	r3, [ip]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e2ae:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800e2b2:	f043 0301 	orr.w	r3, r3, #1
 800e2b6:	f8cc 3008 	str.w	r3, [ip, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e2ba:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800e2be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2c2:	f8cc 3008 	str.w	r3, [ip, #8]
  }
  else
  {
    return HAL_BUSY;
  }
}
 800e2c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800e2ca:	2002      	movs	r0, #2
}
 800e2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 800e2d0:	2001      	movs	r0, #1
}
 800e2d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e2d6:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);
 800e2d8:	f885 7070 	strb.w	r7, [r5, #112]	; 0x70
        return HAL_ERROR;
 800e2dc:	4620      	mov	r0, r4
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e2de:	67eb      	str	r3, [r5, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 800e2e0:	676e      	str	r6, [r5, #116]	; 0x74
        return HAL_ERROR;
 800e2e2:	e7f3      	b.n	800e2cc <HAL_UART_Receive_DMA+0xa0>
 800e2e4:	0800e3c1 	.word	0x0800e3c1
 800e2e8:	0800e3fd 	.word	0x0800e3fd
 800e2ec:	0800e409 	.word	0x0800e409

0800e2f0 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800e2f0:	b538      	push	{r3, r4, r5, lr}

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e2f2:	6803      	ldr	r3, [r0, #0]
{
 800e2f4:	4604      	mov	r4, r0
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e2f6:	6f41      	ldr	r1, [r0, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e2f8:	6f85      	ldr	r5, [r0, #120]	; 0x78
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e2fa:	689a      	ldr	r2, [r3, #8]
 800e2fc:	0610      	lsls	r0, r2, #24
 800e2fe:	d501      	bpl.n	800e304 <HAL_UART_DMAStop+0x14>
 800e300:	2921      	cmp	r1, #33	; 0x21
 800e302:	d01e      	beq.n	800e342 <HAL_UART_DMAStop+0x52>

    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e304:	689a      	ldr	r2, [r3, #8]
 800e306:	0652      	lsls	r2, r2, #25
 800e308:	d501      	bpl.n	800e30e <HAL_UART_DMAStop+0x1e>
 800e30a:	2d22      	cmp	r5, #34	; 0x22
 800e30c:	d001      	beq.n	800e312 <HAL_UART_DMAStop+0x22>
    }

    UART_EndRxTransfer(huart);
  }

  return HAL_OK;
 800e30e:	2000      	movs	r0, #0
}
 800e310:	bd38      	pop	{r3, r4, r5, pc}
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e312:	689a      	ldr	r2, [r3, #8]
    if (huart->hdmarx != NULL)
 800e314:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e316:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e31a:	609a      	str	r2, [r3, #8]
    if (huart->hdmarx != NULL)
 800e31c:	b118      	cbz	r0, 800e326 <HAL_UART_DMAStop+0x36>
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800e31e:	f7f8 fb47 	bl	80069b0 <HAL_DMA_Abort>
 800e322:	b9f8      	cbnz	r0, 800e364 <HAL_UART_DMAStop+0x74>
 800e324:	6823      	ldr	r3, [r4, #0]
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e326:	681a      	ldr	r2, [r3, #0]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e328:	2100      	movs	r1, #0
  huart->RxState = HAL_UART_STATE_READY;
 800e32a:	2520      	movs	r5, #32
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e32c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
  return HAL_OK;
 800e330:	4608      	mov	r0, r1
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e332:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e334:	689a      	ldr	r2, [r3, #8]
 800e336:	f022 0201 	bic.w	r2, r2, #1
 800e33a:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 800e33c:	67a5      	str	r5, [r4, #120]	; 0x78
  huart->RxISR = NULL;
 800e33e:	6621      	str	r1, [r4, #96]	; 0x60
}
 800e340:	bd38      	pop	{r3, r4, r5, pc}
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e342:	689a      	ldr	r2, [r3, #8]
    if (huart->hdmatx != NULL)
 800e344:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e346:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e34a:	609a      	str	r2, [r3, #8]
    if (huart->hdmatx != NULL)
 800e34c:	b118      	cbz	r0, 800e356 <HAL_UART_DMAStop+0x66>
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800e34e:	f7f8 fb2f 	bl	80069b0 <HAL_DMA_Abort>
 800e352:	b980      	cbnz	r0, 800e376 <HAL_UART_DMAStop+0x86>
 800e354:	6823      	ldr	r3, [r4, #0]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800e356:	681a      	ldr	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800e358:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800e35a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800e35e:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800e360:	6761      	str	r1, [r4, #116]	; 0x74
 800e362:	e7cf      	b.n	800e304 <HAL_UART_DMAStop+0x14>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800e364:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800e366:	f7f8 fc55 	bl	8006c14 <HAL_DMA_GetError>
 800e36a:	2820      	cmp	r0, #32
 800e36c:	d1da      	bne.n	800e324 <HAL_UART_DMAStop+0x34>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e36e:	2310      	movs	r3, #16
          return HAL_TIMEOUT;
 800e370:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e372:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 800e374:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800e376:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800e378:	f7f8 fc4c 	bl	8006c14 <HAL_DMA_GetError>
 800e37c:	2820      	cmp	r0, #32
 800e37e:	d1e9      	bne.n	800e354 <HAL_UART_DMAStop+0x64>
 800e380:	e7f5      	b.n	800e36e <HAL_UART_DMAStop+0x7e>
 800e382:	bf00      	nop

0800e384 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e384:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e386:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e388:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e38a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e38e:	d00c      	beq.n	800e3aa <UART_DMATransmitCplt+0x26>
  {
    huart->TxXferCount = 0U;

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e390:	6803      	ldr	r3, [r0, #0]
    huart->TxXferCount = 0U;
 800e392:	2200      	movs	r2, #0
 800e394:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e398:	689a      	ldr	r2, [r3, #8]
 800e39a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e39e:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e3a0:	681a      	ldr	r2, [r3, #0]
 800e3a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e3a6:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e3a8:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800e3aa:	f7f2 fe57 	bl	800105c <HAL_UART_TxCpltCallback>
}
 800e3ae:	bd08      	pop	{r3, pc}

0800e3b0 <HAL_UART_TxHalfCpltCallback>:
 800e3b0:	4770      	bx	lr
 800e3b2:	bf00      	nop

0800e3b4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e3b4:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e3b6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800e3b8:	f7ff fffa 	bl	800e3b0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e3bc:	bd08      	pop	{r3, pc}
 800e3be:	bf00      	nop

0800e3c0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e3c0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e3c2:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e3c4:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e3c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e3ca:	d011      	beq.n	800e3f0 <UART_DMAReceiveCplt+0x30>
  {
    huart->RxXferCount = 0U;

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e3cc:	6803      	ldr	r3, [r0, #0]
    huart->RxXferCount = 0U;
 800e3ce:	2200      	movs	r2, #0
    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e3d0:	2120      	movs	r1, #32
    huart->RxXferCount = 0U;
 800e3d2:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e3d6:	681a      	ldr	r2, [r3, #0]
 800e3d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e3dc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e3de:	689a      	ldr	r2, [r3, #8]
 800e3e0:	f022 0201 	bic.w	r2, r2, #1
 800e3e4:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e3e6:	689a      	ldr	r2, [r3, #8]
 800e3e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e3ec:	609a      	str	r2, [r3, #8]
    huart->RxState = HAL_UART_STATE_READY;
 800e3ee:	6781      	str	r1, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800e3f0:	f7f4 fe7c 	bl	80030ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e3f4:	bd08      	pop	{r3, pc}
 800e3f6:	bf00      	nop

0800e3f8 <HAL_UART_RxHalfCpltCallback>:
 800e3f8:	4770      	bx	lr
 800e3fa:	bf00      	nop

0800e3fc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e3fc:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800e3fe:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800e400:	f7ff fffa 	bl	800e3f8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e404:	bd08      	pop	{r3, pc}
 800e406:	bf00      	nop

0800e408 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e408:	6b83      	ldr	r3, [r0, #56]	; 0x38

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e40a:	681a      	ldr	r2, [r3, #0]
{
 800e40c:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e40e:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e410:	6f98      	ldr	r0, [r3, #120]	; 0x78
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e412:	6891      	ldr	r1, [r2, #8]
 800e414:	0609      	lsls	r1, r1, #24
 800e416:	d501      	bpl.n	800e41c <UART_DMAError+0x14>
 800e418:	2c21      	cmp	r4, #33	; 0x21
 800e41a:	d01b      	beq.n	800e454 <UART_DMAError+0x4c>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e41c:	6891      	ldr	r1, [r2, #8]
 800e41e:	0649      	lsls	r1, r1, #25
 800e420:	d501      	bpl.n	800e426 <UART_DMAError+0x1e>
 800e422:	2822      	cmp	r0, #34	; 0x22
 800e424:	d007      	beq.n	800e436 <UART_DMAError+0x2e>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e426:	6fda      	ldr	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e428:	4618      	mov	r0, r3
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e42a:	f042 0210 	orr.w	r2, r2, #16
 800e42e:	67da      	str	r2, [r3, #124]	; 0x7c
  HAL_UART_ErrorCallback(huart);
 800e430:	f7f4 fea2 	bl	8003178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e434:	bd10      	pop	{r4, pc}
    huart->RxXferCount = 0U;
 800e436:	2000      	movs	r0, #0
  huart->RxState = HAL_UART_STATE_READY;
 800e438:	2420      	movs	r4, #32
    huart->RxXferCount = 0U;
 800e43a:	f8a3 005a 	strh.w	r0, [r3, #90]	; 0x5a
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e43e:	6811      	ldr	r1, [r2, #0]
 800e440:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 800e444:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e446:	6891      	ldr	r1, [r2, #8]
 800e448:	f021 0101 	bic.w	r1, r1, #1
 800e44c:	6091      	str	r1, [r2, #8]
  huart->RxISR = NULL;
 800e44e:	6618      	str	r0, [r3, #96]	; 0x60
  huart->RxState = HAL_UART_STATE_READY;
 800e450:	679c      	str	r4, [r3, #120]	; 0x78
 800e452:	e7e8      	b.n	800e426 <UART_DMAError+0x1e>
    huart->TxXferCount = 0U;
 800e454:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 800e456:	2420      	movs	r4, #32
    huart->TxXferCount = 0U;
 800e458:	f8a3 1052 	strh.w	r1, [r3, #82]	; 0x52
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800e45c:	6811      	ldr	r1, [r2, #0]
 800e45e:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 800e462:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800e464:	675c      	str	r4, [r3, #116]	; 0x74
 800e466:	e7d9      	b.n	800e41c <UART_DMAError+0x14>

0800e468 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e468:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
  huart->RxXferCount = 0U;
 800e46a:	2200      	movs	r2, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e46c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800e46e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e472:	4618      	mov	r0, r3
  huart->TxXferCount = 0U;
 800e474:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 800e478:	f7f4 fe7e 	bl	8003178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e47c:	bd08      	pop	{r3, pc}
 800e47e:	bf00      	nop

0800e480 <HAL_UARTEx_WakeupCallback>:
}
 800e480:	4770      	bx	lr
 800e482:	bf00      	nop

0800e484 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e484:	6803      	ldr	r3, [r0, #0]
{
 800e486:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e488:	69da      	ldr	r2, [r3, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e48a:	f640 060f 	movw	r6, #2063	; 0x80f
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e48e:	6819      	ldr	r1, [r3, #0]
{
 800e490:	4604      	mov	r4, r0
  if (errorflags == 0U)
 800e492:	4232      	tst	r2, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e494:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 800e496:	d052      	beq.n	800e53e <HAL_UART_IRQHandler+0xba>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800e498:	f015 0001 	ands.w	r0, r5, #1
 800e49c:	d058      	beq.n	800e550 <HAL_UART_IRQHandler+0xcc>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e49e:	07d5      	lsls	r5, r2, #31
 800e4a0:	d507      	bpl.n	800e4b2 <HAL_UART_IRQHandler+0x2e>
 800e4a2:	05ce      	lsls	r6, r1, #23
 800e4a4:	d505      	bpl.n	800e4b2 <HAL_UART_IRQHandler+0x2e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e4a6:	2501      	movs	r5, #1
 800e4a8:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e4aa:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 800e4ac:	f045 0501 	orr.w	r5, r5, #1
 800e4b0:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e4b2:	0795      	lsls	r5, r2, #30
 800e4b4:	d474      	bmi.n	800e5a0 <HAL_UART_IRQHandler+0x11c>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e4b6:	0755      	lsls	r5, r2, #29
 800e4b8:	d501      	bpl.n	800e4be <HAL_UART_IRQHandler+0x3a>
 800e4ba:	2800      	cmp	r0, #0
 800e4bc:	d17a      	bne.n	800e5b4 <HAL_UART_IRQHandler+0x130>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e4be:	0716      	lsls	r6, r2, #28
 800e4c0:	d503      	bpl.n	800e4ca <HAL_UART_IRQHandler+0x46>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e4c2:	068d      	lsls	r5, r1, #26
 800e4c4:	d47d      	bmi.n	800e5c2 <HAL_UART_IRQHandler+0x13e>
 800e4c6:	2800      	cmp	r0, #0
 800e4c8:	d17b      	bne.n	800e5c2 <HAL_UART_IRQHandler+0x13e>
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e4ca:	0510      	lsls	r0, r2, #20
 800e4cc:	d508      	bpl.n	800e4e0 <HAL_UART_IRQHandler+0x5c>
 800e4ce:	014e      	lsls	r6, r1, #5
 800e4d0:	d506      	bpl.n	800e4e0 <HAL_UART_IRQHandler+0x5c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e4d2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800e4d6:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e4d8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800e4da:	f040 0020 	orr.w	r0, r0, #32
 800e4de:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e4e0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800e4e2:	2800      	cmp	r0, #0
 800e4e4:	d04b      	beq.n	800e57e <HAL_UART_IRQHandler+0xfa>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800e4e6:	0695      	lsls	r5, r2, #26
 800e4e8:	d501      	bpl.n	800e4ee <HAL_UART_IRQHandler+0x6a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e4ea:	0688      	lsls	r0, r1, #26
 800e4ec:	d474      	bmi.n	800e5d8 <HAL_UART_IRQHandler+0x154>
      errorcode = huart->ErrorCode;
 800e4ee:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e4f0:	6899      	ldr	r1, [r3, #8]
 800e4f2:	0649      	lsls	r1, r1, #25
 800e4f4:	d402      	bmi.n	800e4fc <HAL_UART_IRQHandler+0x78>
 800e4f6:	f015 0528 	ands.w	r5, r5, #40	; 0x28
 800e4fa:	d074      	beq.n	800e5e6 <HAL_UART_IRQHandler+0x162>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e4fc:	681a      	ldr	r2, [r3, #0]
  huart->RxState = HAL_UART_STATE_READY;
 800e4fe:	2020      	movs	r0, #32
  huart->RxISR = NULL;
 800e500:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e502:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e506:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e508:	689a      	ldr	r2, [r3, #8]
 800e50a:	f022 0201 	bic.w	r2, r2, #1
 800e50e:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 800e510:	67a0      	str	r0, [r4, #120]	; 0x78
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e512:	689a      	ldr	r2, [r3, #8]
  huart->RxISR = NULL;
 800e514:	6621      	str	r1, [r4, #96]	; 0x60
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e516:	0652      	lsls	r2, r2, #25
 800e518:	d55a      	bpl.n	800e5d0 <HAL_UART_IRQHandler+0x14c>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e51a:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800e51c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e51e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e522:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800e524:	2900      	cmp	r1, #0
 800e526:	d053      	beq.n	800e5d0 <HAL_UART_IRQHandler+0x14c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e528:	4b31      	ldr	r3, [pc, #196]	; (800e5f0 <HAL_UART_IRQHandler+0x16c>)
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e52a:	4608      	mov	r0, r1
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e52c:	650b      	str	r3, [r1, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e52e:	f7f8 fa87 	bl	8006a40 <HAL_DMA_Abort_IT>
 800e532:	b320      	cbz	r0, 800e57e <HAL_UART_IRQHandler+0xfa>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e534:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
}
 800e536:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e53a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800e53c:	4718      	bx	r3
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800e53e:	0696      	lsls	r6, r2, #26
 800e540:	d509      	bpl.n	800e556 <HAL_UART_IRQHandler+0xd2>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e542:	068e      	lsls	r6, r1, #26
 800e544:	d507      	bpl.n	800e556 <HAL_UART_IRQHandler+0xd2>
      if (huart->RxISR != NULL)
 800e546:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800e548:	b1cb      	cbz	r3, 800e57e <HAL_UART_IRQHandler+0xfa>
}
 800e54a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800e54e:	4718      	bx	r3
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800e550:	f411 7f90 	tst.w	r1, #288	; 0x120
 800e554:	d1a3      	bne.n	800e49e <HAL_UART_IRQHandler+0x1a>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e556:	02d6      	lsls	r6, r2, #11
 800e558:	d409      	bmi.n	800e56e <HAL_UART_IRQHandler+0xea>
  if (((isrflags & USART_ISR_TXE) != 0U)
 800e55a:	0616      	lsls	r6, r2, #24
 800e55c:	d510      	bpl.n	800e580 <HAL_UART_IRQHandler+0xfc>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800e55e:	060d      	lsls	r5, r1, #24
 800e560:	d50e      	bpl.n	800e580 <HAL_UART_IRQHandler+0xfc>
    if (huart->TxISR != NULL)
 800e562:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e564:	b15b      	cbz	r3, 800e57e <HAL_UART_IRQHandler+0xfa>
      huart->TxISR(huart);
 800e566:	4620      	mov	r0, r4
}
 800e568:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800e56c:	4718      	bx	r3
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e56e:	0268      	lsls	r0, r5, #9
 800e570:	d5f3      	bpl.n	800e55a <HAL_UART_IRQHandler+0xd6>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e572:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800e576:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e578:	621a      	str	r2, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800e57a:	f7ff ff81 	bl	800e480 <HAL_UARTEx_WakeupCallback>
}
 800e57e:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e580:	0650      	lsls	r0, r2, #25
 800e582:	d5fc      	bpl.n	800e57e <HAL_UART_IRQHandler+0xfa>
 800e584:	064a      	lsls	r2, r1, #25
 800e586:	d5fa      	bpl.n	800e57e <HAL_UART_IRQHandler+0xfa>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e588:	681a      	ldr	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e58a:	2520      	movs	r5, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e58c:	2100      	movs	r1, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e58e:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e590:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e594:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800e596:	6765      	str	r5, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 800e598:	6661      	str	r1, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 800e59a:	f7f2 fd5f 	bl	800105c <HAL_UART_TxCpltCallback>
}
 800e59e:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e5a0:	2800      	cmp	r0, #0
 800e5a2:	d08c      	beq.n	800e4be <HAL_UART_IRQHandler+0x3a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e5a4:	2502      	movs	r5, #2
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e5a6:	0756      	lsls	r6, r2, #29
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e5a8:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e5aa:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 800e5ac:	f045 0504 	orr.w	r5, r5, #4
 800e5b0:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e5b2:	d584      	bpl.n	800e4be <HAL_UART_IRQHandler+0x3a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e5b4:	2504      	movs	r5, #4
 800e5b6:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e5b8:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 800e5ba:	f045 0502 	orr.w	r5, r5, #2
 800e5be:	67e5      	str	r5, [r4, #124]	; 0x7c
 800e5c0:	e77d      	b.n	800e4be <HAL_UART_IRQHandler+0x3a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e5c2:	2008      	movs	r0, #8
 800e5c4:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e5c6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800e5c8:	f040 0008 	orr.w	r0, r0, #8
 800e5cc:	67e0      	str	r0, [r4, #124]	; 0x7c
 800e5ce:	e77c      	b.n	800e4ca <HAL_UART_IRQHandler+0x46>
            HAL_UART_ErrorCallback(huart);
 800e5d0:	4620      	mov	r0, r4
 800e5d2:	f7f4 fdd1 	bl	8003178 <HAL_UART_ErrorCallback>
}
 800e5d6:	bd70      	pop	{r4, r5, r6, pc}
        if (huart->RxISR != NULL)
 800e5d8:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800e5da:	2a00      	cmp	r2, #0
 800e5dc:	d087      	beq.n	800e4ee <HAL_UART_IRQHandler+0x6a>
          huart->RxISR(huart);
 800e5de:	4620      	mov	r0, r4
 800e5e0:	4790      	blx	r2
 800e5e2:	6823      	ldr	r3, [r4, #0]
 800e5e4:	e783      	b.n	800e4ee <HAL_UART_IRQHandler+0x6a>
        HAL_UART_ErrorCallback(huart);
 800e5e6:	4620      	mov	r0, r4
 800e5e8:	f7f4 fdc6 	bl	8003178 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e5ec:	67e5      	str	r5, [r4, #124]	; 0x7c
}
 800e5ee:	bd70      	pop	{r4, r5, r6, pc}
 800e5f0:	0800e469 	.word	0x0800e469

0800e5f4 <UART_SetConfig>:
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800e5f4:	4bba      	ldr	r3, [pc, #744]	; (800e8e0 <UART_SetConfig+0x2ec>)
 800e5f6:	6842      	ldr	r2, [r0, #4]
 800e5f8:	429a      	cmp	r2, r3
{
 800e5fa:	b570      	push	{r4, r5, r6, lr}
 800e5fc:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800e5fe:	f200 80bf 	bhi.w	800e780 <UART_SetConfig+0x18c>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800e602:	68a3      	ldr	r3, [r4, #8]
 800e604:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 800e608:	d002      	beq.n	800e610 <UART_SetConfig+0x1c>
 800e60a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e60e:	d17c      	bne.n	800e70a <UART_SetConfig+0x116>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800e610:	68e3      	ldr	r3, [r4, #12]
 800e612:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800e616:	f040 8082 	bne.w	800e71e <UART_SetConfig+0x12a>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800e61a:	6a23      	ldr	r3, [r4, #32]
 800e61c:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 800e620:	f040 8087 	bne.w	800e732 <UART_SetConfig+0x13e>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800e624:	6923      	ldr	r3, [r4, #16]
 800e626:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800e62a:	d002      	beq.n	800e632 <UART_SetConfig+0x3e>
 800e62c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800e630:	d165      	bne.n	800e6fe <UART_SetConfig+0x10a>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800e632:	6963      	ldr	r3, [r4, #20]
 800e634:	f033 020c 	bics.w	r2, r3, #12
 800e638:	d148      	bne.n	800e6cc <UART_SetConfig+0xd8>
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d046      	beq.n	800e6cc <UART_SetConfig+0xd8>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800e63e:	69a3      	ldr	r3, [r4, #24]
 800e640:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 800e644:	d14b      	bne.n	800e6de <UART_SetConfig+0xea>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800e646:	69e0      	ldr	r0, [r4, #28]
 800e648:	f430 4300 	bics.w	r3, r0, #32768	; 0x8000
 800e64c:	d150      	bne.n	800e6f0 <UART_SetConfig+0xfc>
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e64e:	6823      	ldr	r3, [r4, #0]
 800e650:	6921      	ldr	r1, [r4, #16]
 800e652:	68a2      	ldr	r2, [r4, #8]
 800e654:	681e      	ldr	r6, [r3, #0]
 800e656:	430a      	orrs	r2, r1
 800e658:	4da2      	ldr	r5, [pc, #648]	; (800e8e4 <UART_SetConfig+0x2f0>)
 800e65a:	6961      	ldr	r1, [r4, #20]
 800e65c:	4035      	ands	r5, r6
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e65e:	68e6      	ldr	r6, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e660:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e662:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e664:	432a      	orrs	r2, r5
  tmpreg |= huart->Init.OneBitSampling;
 800e666:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e668:	4302      	orrs	r2, r0
  tmpreg |= huart->Init.OneBitSampling;
 800e66a:	4329      	orrs	r1, r5
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e66c:	4d9e      	ldr	r5, [pc, #632]	; (800e8e8 <UART_SetConfig+0x2f4>)
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e66e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e670:	685a      	ldr	r2, [r3, #4]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e672:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e674:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800e678:	ea42 0206 	orr.w	r2, r2, r6
 800e67c:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e67e:	689a      	ldr	r2, [r3, #8]
 800e680:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 800e684:	ea41 0102 	orr.w	r1, r1, r2
 800e688:	6099      	str	r1, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e68a:	d07f      	beq.n	800e78c <UART_SetConfig+0x198>
 800e68c:	4a97      	ldr	r2, [pc, #604]	; (800e8ec <UART_SetConfig+0x2f8>)
 800e68e:	4293      	cmp	r3, r2
 800e690:	d055      	beq.n	800e73e <UART_SetConfig+0x14a>
 800e692:	4a97      	ldr	r2, [pc, #604]	; (800e8f0 <UART_SetConfig+0x2fc>)
 800e694:	4293      	cmp	r3, r2
 800e696:	f000 80f1 	beq.w	800e87c <UART_SetConfig+0x288>
 800e69a:	4a96      	ldr	r2, [pc, #600]	; (800e8f4 <UART_SetConfig+0x300>)
 800e69c:	4293      	cmp	r3, r2
 800e69e:	f000 813b 	beq.w	800e918 <UART_SetConfig+0x324>
 800e6a2:	4a95      	ldr	r2, [pc, #596]	; (800e8f8 <UART_SetConfig+0x304>)
 800e6a4:	4293      	cmp	r3, r2
 800e6a6:	f000 8091 	beq.w	800e7cc <UART_SetConfig+0x1d8>
 800e6aa:	4a94      	ldr	r2, [pc, #592]	; (800e8fc <UART_SetConfig+0x308>)
 800e6ac:	4293      	cmp	r3, r2
 800e6ae:	f000 80fd 	beq.w	800e8ac <UART_SetConfig+0x2b8>
 800e6b2:	4a93      	ldr	r2, [pc, #588]	; (800e900 <UART_SetConfig+0x30c>)
 800e6b4:	4293      	cmp	r3, r2
 800e6b6:	f000 8160 	beq.w	800e97a <UART_SetConfig+0x386>
 800e6ba:	4a92      	ldr	r2, [pc, #584]	; (800e904 <UART_SetConfig+0x310>)
 800e6bc:	4293      	cmp	r3, r2
 800e6be:	f000 816e 	beq.w	800e99e <UART_SetConfig+0x3aa>
  huart->RxISR = NULL;
 800e6c2:	2300      	movs	r3, #0
      ret = HAL_ERROR;
 800e6c4:	2001      	movs	r0, #1
  huart->TxISR = NULL;
 800e6c6:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 800e6ca:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800e6cc:	f640 21c4 	movw	r1, #2756	; 0xac4
 800e6d0:	488d      	ldr	r0, [pc, #564]	; (800e908 <UART_SetConfig+0x314>)
 800e6d2:	f7f4 fba7 	bl	8002e24 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800e6d6:	69a3      	ldr	r3, [r4, #24]
 800e6d8:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 800e6dc:	d0b3      	beq.n	800e646 <UART_SetConfig+0x52>
 800e6de:	488a      	ldr	r0, [pc, #552]	; (800e908 <UART_SetConfig+0x314>)
 800e6e0:	f640 21c5 	movw	r1, #2757	; 0xac5
 800e6e4:	f7f4 fb9e 	bl	8002e24 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800e6e8:	69e0      	ldr	r0, [r4, #28]
 800e6ea:	f430 4300 	bics.w	r3, r0, #32768	; 0x8000
 800e6ee:	d0ae      	beq.n	800e64e <UART_SetConfig+0x5a>
 800e6f0:	4885      	ldr	r0, [pc, #532]	; (800e908 <UART_SetConfig+0x314>)
 800e6f2:	f640 21c6 	movw	r1, #2758	; 0xac6
 800e6f6:	f7f4 fb95 	bl	8002e24 <assert_failed>
 800e6fa:	69e0      	ldr	r0, [r4, #28]
 800e6fc:	e7a7      	b.n	800e64e <UART_SetConfig+0x5a>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800e6fe:	f640 21c3 	movw	r1, #2755	; 0xac3
 800e702:	4881      	ldr	r0, [pc, #516]	; (800e908 <UART_SetConfig+0x314>)
 800e704:	f7f4 fb8e 	bl	8002e24 <assert_failed>
 800e708:	e793      	b.n	800e632 <UART_SetConfig+0x3e>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800e70a:	f640 21bf 	movw	r1, #2751	; 0xabf
 800e70e:	487e      	ldr	r0, [pc, #504]	; (800e908 <UART_SetConfig+0x314>)
 800e710:	f7f4 fb88 	bl	8002e24 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800e714:	68e3      	ldr	r3, [r4, #12]
 800e716:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800e71a:	f43f af7e 	beq.w	800e61a <UART_SetConfig+0x26>
 800e71e:	f44f 612c 	mov.w	r1, #2752	; 0xac0
 800e722:	4879      	ldr	r0, [pc, #484]	; (800e908 <UART_SetConfig+0x314>)
 800e724:	f7f4 fb7e 	bl	8002e24 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800e728:	6a23      	ldr	r3, [r4, #32]
 800e72a:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 800e72e:	f43f af79 	beq.w	800e624 <UART_SetConfig+0x30>
 800e732:	f640 21c1 	movw	r1, #2753	; 0xac1
 800e736:	4874      	ldr	r0, [pc, #464]	; (800e908 <UART_SetConfig+0x314>)
 800e738:	f7f4 fb74 	bl	8002e24 <assert_failed>
 800e73c:	e772      	b.n	800e624 <UART_SetConfig+0x30>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e73e:	4b73      	ldr	r3, [pc, #460]	; (800e90c <UART_SetConfig+0x318>)
 800e740:	4a73      	ldr	r2, [pc, #460]	; (800e910 <UART_SetConfig+0x31c>)
 800e742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e746:	f003 030c 	and.w	r3, r3, #12
 800e74a:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e74c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800e750:	d024      	beq.n	800e79c <UART_SetConfig+0x1a8>
    switch (clocksource)
 800e752:	2b08      	cmp	r3, #8
 800e754:	d8b5      	bhi.n	800e6c2 <UART_SetConfig+0xce>
 800e756:	a201      	add	r2, pc, #4	; (adr r2, 800e75c <UART_SetConfig+0x168>)
 800e758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e75c:	0800e86b 	.word	0x0800e86b
 800e760:	0800e7fb 	.word	0x0800e7fb
 800e764:	0800e953 	.word	0x0800e953
 800e768:	0800e6c3 	.word	0x0800e6c3
 800e76c:	0800e8c3 	.word	0x0800e8c3
 800e770:	0800e6c3 	.word	0x0800e6c3
 800e774:	0800e6c3 	.word	0x0800e6c3
 800e778:	0800e6c3 	.word	0x0800e6c3
 800e77c:	0800e89d 	.word	0x0800e89d
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800e780:	f640 21be 	movw	r1, #2750	; 0xabe
 800e784:	4860      	ldr	r0, [pc, #384]	; (800e908 <UART_SetConfig+0x314>)
 800e786:	f7f4 fb4d 	bl	8002e24 <assert_failed>
 800e78a:	e73a      	b.n	800e602 <UART_SetConfig+0xe>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e78c:	4b5f      	ldr	r3, [pc, #380]	; (800e90c <UART_SetConfig+0x318>)
 800e78e:	4a61      	ldr	r2, [pc, #388]	; (800e914 <UART_SetConfig+0x320>)
 800e790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e794:	f003 0303 	and.w	r3, r3, #3
 800e798:	5cd3      	ldrb	r3, [r2, r3]
 800e79a:	e7d7      	b.n	800e74c <UART_SetConfig+0x158>
    switch (clocksource)
 800e79c:	2b08      	cmp	r3, #8
 800e79e:	d890      	bhi.n	800e6c2 <UART_SetConfig+0xce>
 800e7a0:	a201      	add	r2, pc, #4	; (adr r2, 800e7a8 <UART_SetConfig+0x1b4>)
 800e7a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7a6:	bf00      	nop
 800e7a8:	0800e8d5 	.word	0x0800e8d5
 800e7ac:	0800e827 	.word	0x0800e827
 800e7b0:	0800e933 	.word	0x0800e933
 800e7b4:	0800e6c3 	.word	0x0800e6c3
 800e7b8:	0800e8db 	.word	0x0800e8db
 800e7bc:	0800e6c3 	.word	0x0800e6c3
 800e7c0:	0800e6c3 	.word	0x0800e6c3
 800e7c4:	0800e6c3 	.word	0x0800e6c3
 800e7c8:	0800e943 	.word	0x0800e943
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e7cc:	4b4f      	ldr	r3, [pc, #316]	; (800e90c <UART_SetConfig+0x318>)
 800e7ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e7d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e7d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e7da:	d06f      	beq.n	800e8bc <UART_SetConfig+0x2c8>
 800e7dc:	d93f      	bls.n	800e85e <UART_SetConfig+0x26a>
 800e7de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e7e2:	f000 80a3 	beq.w	800e92c <UART_SetConfig+0x338>
 800e7e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e7ea:	d054      	beq.n	800e896 <UART_SetConfig+0x2a2>
 800e7ec:	e769      	b.n	800e6c2 <UART_SetConfig+0xce>
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	f47f af67 	bne.w	800e6c2 <UART_SetConfig+0xce>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e7f4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800e7f8:	d015      	beq.n	800e826 <UART_SetConfig+0x232>
        pclk = HAL_RCC_GetPCLK2Freq();
 800e7fa:	f7fb ff5b 	bl	800a6b4 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e7fe:	6862      	ldr	r2, [r4, #4]
 800e800:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800e804:	fbb3 f3f2 	udiv	r3, r3, r2
 800e808:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e80a:	f1a3 0110 	sub.w	r1, r3, #16
 800e80e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800e812:	4291      	cmp	r1, r2
 800e814:	f63f af55 	bhi.w	800e6c2 <UART_SetConfig+0xce>
      huart->Instance->BRR = usartdiv;
 800e818:	6822      	ldr	r2, [r4, #0]
 800e81a:	2000      	movs	r0, #0
 800e81c:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 800e81e:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800e820:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 800e824:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 800e826:	f7fb ff45 	bl	800a6b4 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e82a:	6862      	ldr	r2, [r4, #4]
 800e82c:	0853      	lsrs	r3, r2, #1
 800e82e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800e832:	fbb3 f3f2 	udiv	r3, r3, r2
 800e836:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e838:	f1a3 0110 	sub.w	r1, r3, #16
 800e83c:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800e840:	4291      	cmp	r1, r2
 800e842:	f63f af3e 	bhi.w	800e6c2 <UART_SetConfig+0xce>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e846:	f023 020f 	bic.w	r2, r3, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e84a:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 800e84e:	6821      	ldr	r1, [r4, #0]
 800e850:	2000      	movs	r0, #0
 800e852:	4313      	orrs	r3, r2
 800e854:	60cb      	str	r3, [r1, #12]
  huart->RxISR = NULL;
 800e856:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800e858:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 800e85c:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e85e:	2b00      	cmp	r3, #0
 800e860:	f47f af2f 	bne.w	800e6c2 <UART_SetConfig+0xce>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e864:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800e868:	d034      	beq.n	800e8d4 <UART_SetConfig+0x2e0>
        pclk = HAL_RCC_GetPCLK1Freq();
 800e86a:	f7fb ff13 	bl	800a694 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e86e:	6862      	ldr	r2, [r4, #4]
 800e870:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800e874:	fbb3 f3f2 	udiv	r3, r3, r2
 800e878:	b29b      	uxth	r3, r3
        break;
 800e87a:	e7c6      	b.n	800e80a <UART_SetConfig+0x216>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e87c:	4b23      	ldr	r3, [pc, #140]	; (800e90c <UART_SetConfig+0x318>)
 800e87e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e882:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e886:	2b10      	cmp	r3, #16
 800e888:	d018      	beq.n	800e8bc <UART_SetConfig+0x2c8>
 800e88a:	d9e8      	bls.n	800e85e <UART_SetConfig+0x26a>
 800e88c:	2b20      	cmp	r3, #32
 800e88e:	d04d      	beq.n	800e92c <UART_SetConfig+0x338>
 800e890:	2b30      	cmp	r3, #48	; 0x30
 800e892:	f47f af16 	bne.w	800e6c2 <UART_SetConfig+0xce>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e896:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800e89a:	d052      	beq.n	800e942 <UART_SetConfig+0x34e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800e89c:	6862      	ldr	r2, [r4, #4]
 800e89e:	0853      	lsrs	r3, r2, #1
 800e8a0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e8a4:	fbb3 f3f2 	udiv	r3, r3, r2
 800e8a8:	b29b      	uxth	r3, r3
        break;
 800e8aa:	e7ae      	b.n	800e80a <UART_SetConfig+0x216>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e8ac:	4b17      	ldr	r3, [pc, #92]	; (800e90c <UART_SetConfig+0x318>)
 800e8ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e8b2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e8b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e8ba:	d152      	bne.n	800e962 <UART_SetConfig+0x36e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e8bc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800e8c0:	d00b      	beq.n	800e8da <UART_SetConfig+0x2e6>
        pclk = HAL_RCC_GetSysClockFreq();
 800e8c2:	f7fb fd8d 	bl	800a3e0 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e8c6:	6862      	ldr	r2, [r4, #4]
 800e8c8:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800e8cc:	fbb3 f3f2 	udiv	r3, r3, r2
 800e8d0:	b29b      	uxth	r3, r3
        break;
 800e8d2:	e79a      	b.n	800e80a <UART_SetConfig+0x216>
        pclk = HAL_RCC_GetPCLK1Freq();
 800e8d4:	f7fb fede 	bl	800a694 <HAL_RCC_GetPCLK1Freq>
 800e8d8:	e7a7      	b.n	800e82a <UART_SetConfig+0x236>
        pclk = HAL_RCC_GetSysClockFreq();
 800e8da:	f7fb fd81 	bl	800a3e0 <HAL_RCC_GetSysClockFreq>
 800e8de:	e7a4      	b.n	800e82a <UART_SetConfig+0x236>
 800e8e0:	019bfcc0 	.word	0x019bfcc0
 800e8e4:	efff69f3 	.word	0xefff69f3
 800e8e8:	40011000 	.word	0x40011000
 800e8ec:	40004400 	.word	0x40004400
 800e8f0:	40004800 	.word	0x40004800
 800e8f4:	40004c00 	.word	0x40004c00
 800e8f8:	40005000 	.word	0x40005000
 800e8fc:	40011400 	.word	0x40011400
 800e900:	40007800 	.word	0x40007800
 800e904:	40007c00 	.word	0x40007c00
 800e908:	080268d0 	.word	0x080268d0
 800e90c:	40023800 	.word	0x40023800
 800e910:	080268c0 	.word	0x080268c0
 800e914:	080268bc 	.word	0x080268bc
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e918:	4b2a      	ldr	r3, [pc, #168]	; (800e9c4 <UART_SetConfig+0x3d0>)
 800e91a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e91e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e922:	2b40      	cmp	r3, #64	; 0x40
 800e924:	d0ca      	beq.n	800e8bc <UART_SetConfig+0x2c8>
 800e926:	d99a      	bls.n	800e85e <UART_SetConfig+0x26a>
 800e928:	2b80      	cmp	r3, #128	; 0x80
 800e92a:	d123      	bne.n	800e974 <UART_SetConfig+0x380>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e92c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800e930:	d10f      	bne.n	800e952 <UART_SetConfig+0x35e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800e932:	6862      	ldr	r2, [r4, #4]
 800e934:	4b24      	ldr	r3, [pc, #144]	; (800e9c8 <UART_SetConfig+0x3d4>)
 800e936:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800e93a:	fbb3 f3f2 	udiv	r3, r3, r2
 800e93e:	b29b      	uxth	r3, r3
        break;
 800e940:	e77a      	b.n	800e838 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800e942:	6862      	ldr	r2, [r4, #4]
 800e944:	0853      	lsrs	r3, r2, #1
 800e946:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800e94a:	fbb3 f3f2 	udiv	r3, r3, r2
 800e94e:	b29b      	uxth	r3, r3
        break;
 800e950:	e772      	b.n	800e838 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800e952:	6862      	ldr	r2, [r4, #4]
 800e954:	4b1d      	ldr	r3, [pc, #116]	; (800e9cc <UART_SetConfig+0x3d8>)
 800e956:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800e95a:	fbb3 f3f2 	udiv	r3, r3, r2
 800e95e:	b29b      	uxth	r3, r3
        break;
 800e960:	e753      	b.n	800e80a <UART_SetConfig+0x216>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e962:	f67f af44 	bls.w	800e7ee <UART_SetConfig+0x1fa>
 800e966:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e96a:	d0df      	beq.n	800e92c <UART_SetConfig+0x338>
 800e96c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e970:	d091      	beq.n	800e896 <UART_SetConfig+0x2a2>
 800e972:	e6a6      	b.n	800e6c2 <UART_SetConfig+0xce>
 800e974:	2bc0      	cmp	r3, #192	; 0xc0
 800e976:	d08e      	beq.n	800e896 <UART_SetConfig+0x2a2>
 800e978:	e6a3      	b.n	800e6c2 <UART_SetConfig+0xce>
 800e97a:	4b12      	ldr	r3, [pc, #72]	; (800e9c4 <UART_SetConfig+0x3d0>)
 800e97c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e980:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800e984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e988:	d098      	beq.n	800e8bc <UART_SetConfig+0x2c8>
 800e98a:	f67f af68 	bls.w	800e85e <UART_SetConfig+0x26a>
 800e98e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e992:	d0cb      	beq.n	800e92c <UART_SetConfig+0x338>
 800e994:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e998:	f43f af7d 	beq.w	800e896 <UART_SetConfig+0x2a2>
 800e99c:	e691      	b.n	800e6c2 <UART_SetConfig+0xce>
 800e99e:	4b09      	ldr	r3, [pc, #36]	; (800e9c4 <UART_SetConfig+0x3d0>)
 800e9a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e9a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e9a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e9ac:	d086      	beq.n	800e8bc <UART_SetConfig+0x2c8>
 800e9ae:	f67f af56 	bls.w	800e85e <UART_SetConfig+0x26a>
 800e9b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e9b6:	d0b9      	beq.n	800e92c <UART_SetConfig+0x338>
 800e9b8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e9bc:	f43f af6b 	beq.w	800e896 <UART_SetConfig+0x2a2>
 800e9c0:	e67f      	b.n	800e6c2 <UART_SetConfig+0xce>
 800e9c2:	bf00      	nop
 800e9c4:	40023800 	.word	0x40023800
 800e9c8:	01e84800 	.word	0x01e84800
 800e9cc:	00f42400 	.word	0x00f42400

0800e9d0 <UART_AdvFeatureConfig>:
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800e9d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e9d2:	2bff      	cmp	r3, #255	; 0xff
{
 800e9d4:	b510      	push	{r4, lr}
 800e9d6:	4604      	mov	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800e9d8:	d87d      	bhi.n	800ead6 <UART_AdvFeatureConfig+0x106>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e9da:	07da      	lsls	r2, r3, #31
 800e9dc:	d50a      	bpl.n	800e9f4 <UART_AdvFeatureConfig+0x24>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800e9de:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800e9e0:	f431 3200 	bics.w	r2, r1, #131072	; 0x20000
 800e9e4:	f040 8097 	bne.w	800eb16 <UART_AdvFeatureConfig+0x146>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e9e8:	6820      	ldr	r0, [r4, #0]
 800e9ea:	6842      	ldr	r2, [r0, #4]
 800e9ec:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800e9f0:	430a      	orrs	r2, r1
 800e9f2:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e9f4:	0798      	lsls	r0, r3, #30
 800e9f6:	d50a      	bpl.n	800ea0e <UART_AdvFeatureConfig+0x3e>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800e9f8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800e9fa:	f431 3280 	bics.w	r2, r1, #65536	; 0x10000
 800e9fe:	f040 8092 	bne.w	800eb26 <UART_AdvFeatureConfig+0x156>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ea02:	6820      	ldr	r0, [r4, #0]
 800ea04:	6842      	ldr	r2, [r0, #4]
 800ea06:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ea0a:	430a      	orrs	r2, r1
 800ea0c:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ea0e:	0759      	lsls	r1, r3, #29
 800ea10:	d50a      	bpl.n	800ea28 <UART_AdvFeatureConfig+0x58>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800ea12:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ea14:	f431 2280 	bics.w	r2, r1, #262144	; 0x40000
 800ea18:	f040 808d 	bne.w	800eb36 <UART_AdvFeatureConfig+0x166>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ea1c:	6820      	ldr	r0, [r4, #0]
 800ea1e:	6842      	ldr	r2, [r0, #4]
 800ea20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ea24:	430a      	orrs	r2, r1
 800ea26:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ea28:	071a      	lsls	r2, r3, #28
 800ea2a:	d50a      	bpl.n	800ea42 <UART_AdvFeatureConfig+0x72>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800ea2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ea2e:	f431 4200 	bics.w	r2, r1, #32768	; 0x8000
 800ea32:	f040 8088 	bne.w	800eb46 <UART_AdvFeatureConfig+0x176>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ea36:	6820      	ldr	r0, [r4, #0]
 800ea38:	6842      	ldr	r2, [r0, #4]
 800ea3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ea3e:	430a      	orrs	r2, r1
 800ea40:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ea42:	06d8      	lsls	r0, r3, #27
 800ea44:	d50a      	bpl.n	800ea5c <UART_AdvFeatureConfig+0x8c>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800ea46:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ea48:	f431 5280 	bics.w	r2, r1, #4096	; 0x1000
 800ea4c:	f040 8083 	bne.w	800eb56 <UART_AdvFeatureConfig+0x186>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ea50:	6820      	ldr	r0, [r4, #0]
 800ea52:	6882      	ldr	r2, [r0, #8]
 800ea54:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ea58:	430a      	orrs	r2, r1
 800ea5a:	6082      	str	r2, [r0, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ea5c:	0699      	lsls	r1, r3, #26
 800ea5e:	d509      	bpl.n	800ea74 <UART_AdvFeatureConfig+0xa4>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800ea60:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ea62:	f431 5200 	bics.w	r2, r1, #8192	; 0x2000
 800ea66:	d17e      	bne.n	800eb66 <UART_AdvFeatureConfig+0x196>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ea68:	6820      	ldr	r0, [r4, #0]
 800ea6a:	6882      	ldr	r2, [r0, #8]
 800ea6c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ea70:	430a      	orrs	r2, r1
 800ea72:	6082      	str	r2, [r0, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ea74:	065a      	lsls	r2, r3, #25
 800ea76:	d521      	bpl.n	800eabc <UART_AdvFeatureConfig+0xec>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800ea78:	4b46      	ldr	r3, [pc, #280]	; (800eb94 <UART_AdvFeatureConfig+0x1c4>)
 800ea7a:	6822      	ldr	r2, [r4, #0]
 800ea7c:	4846      	ldr	r0, [pc, #280]	; (800eb98 <UART_AdvFeatureConfig+0x1c8>)
 800ea7e:	4947      	ldr	r1, [pc, #284]	; (800eb9c <UART_AdvFeatureConfig+0x1cc>)
 800ea80:	429a      	cmp	r2, r3
 800ea82:	bf18      	it	ne
 800ea84:	4282      	cmpne	r2, r0
 800ea86:	bf14      	ite	ne
 800ea88:	2301      	movne	r3, #1
 800ea8a:	2300      	moveq	r3, #0
 800ea8c:	428a      	cmp	r2, r1
 800ea8e:	bf0c      	ite	eq
 800ea90:	2300      	moveq	r3, #0
 800ea92:	f003 0301 	andne.w	r3, r3, #1
 800ea96:	b113      	cbz	r3, 800ea9e <UART_AdvFeatureConfig+0xce>
 800ea98:	4b41      	ldr	r3, [pc, #260]	; (800eba0 <UART_AdvFeatureConfig+0x1d0>)
 800ea9a:	429a      	cmp	r2, r3
 800ea9c:	d16b      	bne.n	800eb76 <UART_AdvFeatureConfig+0x1a6>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800ea9e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800eaa0:	f432 1380 	bics.w	r3, r2, #1048576	; 0x100000
 800eaa4:	d130      	bne.n	800eb08 <UART_AdvFeatureConfig+0x138>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800eaa6:	6821      	ldr	r1, [r4, #0]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800eaa8:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800eaac:	684b      	ldr	r3, [r1, #4]
 800eaae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800eab2:	ea43 0302 	orr.w	r3, r3, r2
 800eab6:	604b      	str	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800eab8:	d01b      	beq.n	800eaf2 <UART_AdvFeatureConfig+0x122>
 800eaba:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800eabc:	061b      	lsls	r3, r3, #24
 800eabe:	d509      	bpl.n	800ead4 <UART_AdvFeatureConfig+0x104>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800eac0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800eac2:	f432 2300 	bics.w	r3, r2, #524288	; 0x80000
 800eac6:	d10d      	bne.n	800eae4 <UART_AdvFeatureConfig+0x114>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800eac8:	6821      	ldr	r1, [r4, #0]
 800eaca:	684b      	ldr	r3, [r1, #4]
 800eacc:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800ead0:	4313      	orrs	r3, r2
 800ead2:	604b      	str	r3, [r1, #4]
}
 800ead4:	bd10      	pop	{r4, pc}
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800ead6:	f640 3143 	movw	r1, #2883	; 0xb43
 800eada:	4832      	ldr	r0, [pc, #200]	; (800eba4 <UART_AdvFeatureConfig+0x1d4>)
 800eadc:	f7f4 f9a2 	bl	8002e24 <assert_failed>
 800eae0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eae2:	e77a      	b.n	800e9da <UART_AdvFeatureConfig+0xa>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800eae4:	f44f 6138 	mov.w	r1, #2944	; 0xb80
 800eae8:	482e      	ldr	r0, [pc, #184]	; (800eba4 <UART_AdvFeatureConfig+0x1d4>)
 800eaea:	f7f4 f99b 	bl	8002e24 <assert_failed>
 800eaee:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800eaf0:	e7ea      	b.n	800eac8 <UART_AdvFeatureConfig+0xf8>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800eaf2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800eaf4:	f430 03c0 	bics.w	r3, r0, #6291456	; 0x600000
 800eaf8:	d143      	bne.n	800eb82 <UART_AdvFeatureConfig+0x1b2>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800eafa:	684a      	ldr	r2, [r1, #4]
 800eafc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eafe:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800eb02:	4302      	orrs	r2, r0
 800eb04:	604a      	str	r2, [r1, #4]
 800eb06:	e7d9      	b.n	800eabc <UART_AdvFeatureConfig+0xec>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800eb08:	f640 3173 	movw	r1, #2931	; 0xb73
 800eb0c:	4825      	ldr	r0, [pc, #148]	; (800eba4 <UART_AdvFeatureConfig+0x1d4>)
 800eb0e:	f7f4 f989 	bl	8002e24 <assert_failed>
 800eb12:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800eb14:	e7c7      	b.n	800eaa6 <UART_AdvFeatureConfig+0xd6>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800eb16:	f640 3148 	movw	r1, #2888	; 0xb48
 800eb1a:	4822      	ldr	r0, [pc, #136]	; (800eba4 <UART_AdvFeatureConfig+0x1d4>)
 800eb1c:	f7f4 f982 	bl	8002e24 <assert_failed>
 800eb20:	e9d4 3109 	ldrd	r3, r1, [r4, #36]	; 0x24
 800eb24:	e760      	b.n	800e9e8 <UART_AdvFeatureConfig+0x18>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800eb26:	f640 314f 	movw	r1, #2895	; 0xb4f
 800eb2a:	481e      	ldr	r0, [pc, #120]	; (800eba4 <UART_AdvFeatureConfig+0x1d4>)
 800eb2c:	f7f4 f97a 	bl	8002e24 <assert_failed>
 800eb30:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800eb32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb34:	e765      	b.n	800ea02 <UART_AdvFeatureConfig+0x32>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800eb36:	f640 3156 	movw	r1, #2902	; 0xb56
 800eb3a:	481a      	ldr	r0, [pc, #104]	; (800eba4 <UART_AdvFeatureConfig+0x1d4>)
 800eb3c:	f7f4 f972 	bl	8002e24 <assert_failed>
 800eb40:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800eb42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb44:	e76a      	b.n	800ea1c <UART_AdvFeatureConfig+0x4c>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800eb46:	f640 315d 	movw	r1, #2909	; 0xb5d
 800eb4a:	4816      	ldr	r0, [pc, #88]	; (800eba4 <UART_AdvFeatureConfig+0x1d4>)
 800eb4c:	f7f4 f96a 	bl	8002e24 <assert_failed>
 800eb50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eb52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb54:	e76f      	b.n	800ea36 <UART_AdvFeatureConfig+0x66>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800eb56:	f640 3164 	movw	r1, #2916	; 0xb64
 800eb5a:	4812      	ldr	r0, [pc, #72]	; (800eba4 <UART_AdvFeatureConfig+0x1d4>)
 800eb5c:	f7f4 f962 	bl	8002e24 <assert_failed>
 800eb60:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800eb62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb64:	e774      	b.n	800ea50 <UART_AdvFeatureConfig+0x80>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800eb66:	f640 316b 	movw	r1, #2923	; 0xb6b
 800eb6a:	480e      	ldr	r0, [pc, #56]	; (800eba4 <UART_AdvFeatureConfig+0x1d4>)
 800eb6c:	f7f4 f95a 	bl	8002e24 <assert_failed>
 800eb70:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800eb72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb74:	e778      	b.n	800ea68 <UART_AdvFeatureConfig+0x98>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800eb76:	f640 3172 	movw	r1, #2930	; 0xb72
 800eb7a:	480a      	ldr	r0, [pc, #40]	; (800eba4 <UART_AdvFeatureConfig+0x1d4>)
 800eb7c:	f7f4 f952 	bl	8002e24 <assert_failed>
 800eb80:	e78d      	b.n	800ea9e <UART_AdvFeatureConfig+0xce>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800eb82:	f640 3178 	movw	r1, #2936	; 0xb78
 800eb86:	4807      	ldr	r0, [pc, #28]	; (800eba4 <UART_AdvFeatureConfig+0x1d4>)
 800eb88:	f7f4 f94c 	bl	8002e24 <assert_failed>
 800eb8c:	6821      	ldr	r1, [r4, #0]
 800eb8e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800eb90:	e7b3      	b.n	800eafa <UART_AdvFeatureConfig+0x12a>
 800eb92:	bf00      	nop
 800eb94:	40011000 	.word	0x40011000
 800eb98:	40004400 	.word	0x40004400
 800eb9c:	40004800 	.word	0x40004800
 800eba0:	40011400 	.word	0x40011400
 800eba4:	080268d0 	.word	0x080268d0

0800eba8 <UART_WaitOnFlagUntilTimeout>:
{
 800eba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ebac:	9d08      	ldr	r5, [sp, #32]
 800ebae:	4680      	mov	r8, r0
 800ebb0:	460f      	mov	r7, r1
 800ebb2:	4616      	mov	r6, r2
 800ebb4:	4699      	mov	r9, r3
 800ebb6:	6804      	ldr	r4, [r0, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ebb8:	e001      	b.n	800ebbe <UART_WaitOnFlagUntilTimeout+0x16>
    if (Timeout != HAL_MAX_DELAY)
 800ebba:	1c68      	adds	r0, r5, #1
 800ebbc:	d10a      	bne.n	800ebd4 <UART_WaitOnFlagUntilTimeout+0x2c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ebbe:	69e0      	ldr	r0, [r4, #28]
 800ebc0:	ea37 0300 	bics.w	r3, r7, r0
 800ebc4:	bf0c      	ite	eq
 800ebc6:	2001      	moveq	r0, #1
 800ebc8:	2000      	movne	r0, #0
 800ebca:	42b0      	cmp	r0, r6
 800ebcc:	d0f5      	beq.n	800ebba <UART_WaitOnFlagUntilTimeout+0x12>
  return HAL_OK;
 800ebce:	2000      	movs	r0, #0
}
 800ebd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ebd4:	f7f6 fccc 	bl	8005570 <HAL_GetTick>
 800ebd8:	eba0 0009 	sub.w	r0, r0, r9
 800ebdc:	fab5 f285 	clz	r2, r5
 800ebe0:	42a8      	cmp	r0, r5
 800ebe2:	ea4f 1252 	mov.w	r2, r2, lsr #5
 800ebe6:	d81e      	bhi.n	800ec26 <UART_WaitOnFlagUntilTimeout+0x7e>
 800ebe8:	b9ea      	cbnz	r2, 800ec26 <UART_WaitOnFlagUntilTimeout+0x7e>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ebea:	f8d8 4000 	ldr.w	r4, [r8]
 800ebee:	6823      	ldr	r3, [r4, #0]
 800ebf0:	0759      	lsls	r1, r3, #29
 800ebf2:	d5e4      	bpl.n	800ebbe <UART_WaitOnFlagUntilTimeout+0x16>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ebf4:	69e3      	ldr	r3, [r4, #28]
 800ebf6:	051b      	lsls	r3, r3, #20
 800ebf8:	d5e1      	bpl.n	800ebbe <UART_WaitOnFlagUntilTimeout+0x16>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ebfa:	f44f 6100 	mov.w	r1, #2048	; 0x800
          huart->gState = HAL_UART_STATE_READY;
 800ebfe:	2320      	movs	r3, #32
          return HAL_TIMEOUT;
 800ec00:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ec02:	6221      	str	r1, [r4, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ec04:	6821      	ldr	r1, [r4, #0]
 800ec06:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 800ec0a:	6021      	str	r1, [r4, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec0c:	68a1      	ldr	r1, [r4, #8]
 800ec0e:	f021 0101 	bic.w	r1, r1, #1
 800ec12:	60a1      	str	r1, [r4, #8]
          huart->gState = HAL_UART_STATE_READY;
 800ec14:	f8c8 3074 	str.w	r3, [r8, #116]	; 0x74
          __HAL_UNLOCK(huart);
 800ec18:	f888 2070 	strb.w	r2, [r8, #112]	; 0x70
          huart->RxState = HAL_UART_STATE_READY;
 800ec1c:	f8c8 3078 	str.w	r3, [r8, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ec20:	f8c8 307c 	str.w	r3, [r8, #124]	; 0x7c
          return HAL_TIMEOUT;
 800ec24:	e7d4      	b.n	800ebd0 <UART_WaitOnFlagUntilTimeout+0x28>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ec26:	f8d8 3000 	ldr.w	r3, [r8]
        huart->gState = HAL_UART_STATE_READY;
 800ec2a:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 800ec2c:	2400      	movs	r4, #0
 800ec2e:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ec30:	681a      	ldr	r2, [r3, #0]
 800ec32:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ec36:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec38:	689a      	ldr	r2, [r3, #8]
 800ec3a:	f022 0201 	bic.w	r2, r2, #1
 800ec3e:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800ec40:	f8c8 1074 	str.w	r1, [r8, #116]	; 0x74
        __HAL_UNLOCK(huart);
 800ec44:	f888 4070 	strb.w	r4, [r8, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 800ec48:	f8c8 1078 	str.w	r1, [r8, #120]	; 0x78
 800ec4c:	e7c0      	b.n	800ebd0 <UART_WaitOnFlagUntilTimeout+0x28>
 800ec4e:	bf00      	nop

0800ec50 <HAL_UART_Transmit>:
{
 800ec50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec54:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800ec56:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 800ec58:	b084      	sub	sp, #16
  if (huart->gState == HAL_UART_STATE_READY)
 800ec5a:	2b20      	cmp	r3, #32
 800ec5c:	d145      	bne.n	800ecea <HAL_UART_Transmit+0x9a>
 800ec5e:	460d      	mov	r5, r1
    if ((pData == NULL) || (Size == 0U))
 800ec60:	2900      	cmp	r1, #0
 800ec62:	d046      	beq.n	800ecf2 <HAL_UART_Transmit+0xa2>
 800ec64:	fab2 f682 	clz	r6, r2
 800ec68:	9203      	str	r2, [sp, #12]
 800ec6a:	0976      	lsrs	r6, r6, #5
 800ec6c:	2e00      	cmp	r6, #0
 800ec6e:	d140      	bne.n	800ecf2 <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 800ec70:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800ec74:	4604      	mov	r4, r0
 800ec76:	2b01      	cmp	r3, #1
 800ec78:	d037      	beq.n	800ecea <HAL_UART_Transmit+0x9a>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ec7a:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 800ec7c:	2101      	movs	r1, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ec7e:	67c6      	str	r6, [r0, #124]	; 0x7c
    __HAL_LOCK(huart);
 800ec80:	f880 1070 	strb.w	r1, [r0, #112]	; 0x70
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ec84:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 800ec86:	f7f6 fc73 	bl	8005570 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ec8a:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 800ec8c:	9a03      	ldr	r2, [sp, #12]
    tickstart = HAL_GetTick();
 800ec8e:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ec90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize  = Size;
 800ec94:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 800ec98:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ec9c:	d03d      	beq.n	800ed1a <HAL_UART_Transmit+0xca>
    while (huart->TxXferCount > 0U)
 800ec9e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    __HAL_UNLOCK(huart);
 800eca2:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 800eca4:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 800eca6:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
    while (huart->TxXferCount > 0U)
 800ecaa:	b96b      	cbnz	r3, 800ecc8 <HAL_UART_Transmit+0x78>
 800ecac:	e029      	b.n	800ed02 <HAL_UART_Transmit+0xb2>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ecae:	f815 2b01 	ldrb.w	r2, [r5], #1
 800ecb2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 800ecb4:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800ecb8:	3b01      	subs	r3, #1
 800ecba:	b29b      	uxth	r3, r3
 800ecbc:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800ecc0:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800ecc4:	b29b      	uxth	r3, r3
 800ecc6:	b1e3      	cbz	r3, 800ed02 <HAL_UART_Transmit+0xb2>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ecc8:	9700      	str	r7, [sp, #0]
 800ecca:	4643      	mov	r3, r8
 800eccc:	2200      	movs	r2, #0
 800ecce:	2180      	movs	r1, #128	; 0x80
 800ecd0:	4620      	mov	r0, r4
 800ecd2:	f7ff ff69 	bl	800eba8 <UART_WaitOnFlagUntilTimeout>
 800ecd6:	b980      	cbnz	r0, 800ecfa <HAL_UART_Transmit+0xaa>
 800ecd8:	6823      	ldr	r3, [r4, #0]
      if (pdata8bits == NULL)
 800ecda:	2d00      	cmp	r5, #0
 800ecdc:	d1e7      	bne.n	800ecae <HAL_UART_Transmit+0x5e>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ecde:	f836 2b02 	ldrh.w	r2, [r6], #2
 800ece2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ece6:	629a      	str	r2, [r3, #40]	; 0x28
 800ece8:	e7e4      	b.n	800ecb4 <HAL_UART_Transmit+0x64>
    return HAL_BUSY;
 800ecea:	2002      	movs	r0, #2
}
 800ecec:	b004      	add	sp, #16
 800ecee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800ecf2:	2001      	movs	r0, #1
}
 800ecf4:	b004      	add	sp, #16
 800ecf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_TIMEOUT;
 800ecfa:	2003      	movs	r0, #3
}
 800ecfc:	b004      	add	sp, #16
 800ecfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ed02:	9700      	str	r7, [sp, #0]
 800ed04:	4643      	mov	r3, r8
 800ed06:	2200      	movs	r2, #0
 800ed08:	2140      	movs	r1, #64	; 0x40
 800ed0a:	4620      	mov	r0, r4
 800ed0c:	f7ff ff4c 	bl	800eba8 <UART_WaitOnFlagUntilTimeout>
 800ed10:	2800      	cmp	r0, #0
 800ed12:	d1f2      	bne.n	800ecfa <HAL_UART_Transmit+0xaa>
    huart->gState = HAL_UART_STATE_READY;
 800ed14:	2320      	movs	r3, #32
 800ed16:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 800ed18:	e7e8      	b.n	800ecec <HAL_UART_Transmit+0x9c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ed1a:	6923      	ldr	r3, [r4, #16]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d1be      	bne.n	800ec9e <HAL_UART_Transmit+0x4e>
 800ed20:	462e      	mov	r6, r5
      pdata8bits  = NULL;
 800ed22:	461d      	mov	r5, r3
 800ed24:	e7bb      	b.n	800ec9e <HAL_UART_Transmit+0x4e>
 800ed26:	bf00      	nop

0800ed28 <UART_CheckIdleState>:
{
 800ed28:	b570      	push	{r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed2a:	2500      	movs	r5, #0
{
 800ed2c:	4604      	mov	r4, r0
 800ed2e:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed30:	67c5      	str	r5, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 800ed32:	f7f6 fc1d 	bl	8005570 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ed36:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800ed38:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ed3a:	681a      	ldr	r2, [r3, #0]
 800ed3c:	0712      	lsls	r2, r2, #28
 800ed3e:	d40b      	bmi.n	800ed58 <UART_CheckIdleState+0x30>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	075b      	lsls	r3, r3, #29
 800ed44:	d417      	bmi.n	800ed76 <UART_CheckIdleState+0x4e>
  __HAL_UNLOCK(huart);
 800ed46:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800ed48:	2220      	movs	r2, #32
  return HAL_OK;
 800ed4a:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 800ed4c:	6762      	str	r2, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 800ed4e:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 800ed52:	67a2      	str	r2, [r4, #120]	; 0x78
}
 800ed54:	b002      	add	sp, #8
 800ed56:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ed58:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
 800ed5c:	462a      	mov	r2, r5
 800ed5e:	4633      	mov	r3, r6
 800ed60:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ed64:	9000      	str	r0, [sp, #0]
 800ed66:	4620      	mov	r0, r4
 800ed68:	f7ff ff1e 	bl	800eba8 <UART_WaitOnFlagUntilTimeout>
 800ed6c:	b978      	cbnz	r0, 800ed8e <UART_CheckIdleState+0x66>
 800ed6e:	6823      	ldr	r3, [r4, #0]
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	075b      	lsls	r3, r3, #29
 800ed74:	d5e7      	bpl.n	800ed46 <UART_CheckIdleState+0x1e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ed76:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
 800ed7a:	4633      	mov	r3, r6
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ed82:	9000      	str	r0, [sp, #0]
 800ed84:	4620      	mov	r0, r4
 800ed86:	f7ff ff0f 	bl	800eba8 <UART_WaitOnFlagUntilTimeout>
 800ed8a:	2800      	cmp	r0, #0
 800ed8c:	d0db      	beq.n	800ed46 <UART_CheckIdleState+0x1e>
      return HAL_TIMEOUT;
 800ed8e:	2003      	movs	r0, #3
}
 800ed90:	b002      	add	sp, #8
 800ed92:	bd70      	pop	{r4, r5, r6, pc}

0800ed94 <HAL_UART_Init>:
  if (huart == NULL)
 800ed94:	2800      	cmp	r0, #0
 800ed96:	d06c      	beq.n	800ee72 <HAL_UART_Init+0xde>
 800ed98:	6802      	ldr	r2, [r0, #0]
 800ed9a:	493a      	ldr	r1, [pc, #232]	; (800ee84 <HAL_UART_Init+0xf0>)
{
 800ed9c:	b538      	push	{r3, r4, r5, lr}
 800ed9e:	4b3a      	ldr	r3, [pc, #232]	; (800ee88 <HAL_UART_Init+0xf4>)
 800eda0:	4604      	mov	r4, r0
 800eda2:	483a      	ldr	r0, [pc, #232]	; (800ee8c <HAL_UART_Init+0xf8>)
 800eda4:	4d3a      	ldr	r5, [pc, #232]	; (800ee90 <HAL_UART_Init+0xfc>)
 800eda6:	429a      	cmp	r2, r3
 800eda8:	bf18      	it	ne
 800edaa:	4282      	cmpne	r2, r0
 800edac:	f5a0 6040 	sub.w	r0, r0, #3072	; 0xc00
 800edb0:	bf14      	ite	ne
 800edb2:	2301      	movne	r3, #1
 800edb4:	2300      	moveq	r3, #0
 800edb6:	428a      	cmp	r2, r1
 800edb8:	bf0c      	ite	eq
 800edba:	2300      	moveq	r3, #0
 800edbc:	f003 0301 	andne.w	r3, r3, #1
 800edc0:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
 800edc4:	42aa      	cmp	r2, r5
 800edc6:	bf0c      	ite	eq
 800edc8:	2300      	moveq	r3, #0
 800edca:	f003 0301 	andne.w	r3, r3, #1
 800edce:	f5a5 4518 	sub.w	r5, r5, #38912	; 0x9800
 800edd2:	4282      	cmp	r2, r0
 800edd4:	bf0c      	ite	eq
 800edd6:	2300      	moveq	r3, #0
 800edd8:	f003 0301 	andne.w	r3, r3, #1
 800eddc:	f500 5060 	add.w	r0, r0, #14336	; 0x3800
 800ede0:	428a      	cmp	r2, r1
 800ede2:	bf0c      	ite	eq
 800ede4:	2300      	moveq	r3, #0
 800ede6:	f003 0301 	andne.w	r3, r3, #1
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800edea:	69a1      	ldr	r1, [r4, #24]
 800edec:	42aa      	cmp	r2, r5
 800edee:	bf0c      	ite	eq
 800edf0:	2300      	moveq	r3, #0
 800edf2:	f003 0301 	andne.w	r3, r3, #1
 800edf6:	4282      	cmp	r2, r0
 800edf8:	bf0c      	ite	eq
 800edfa:	2300      	moveq	r3, #0
 800edfc:	f003 0301 	andne.w	r3, r3, #1
 800ee00:	bb19      	cbnz	r1, 800ee4a <HAL_UART_Init+0xb6>
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d137      	bne.n	800ee76 <HAL_UART_Init+0xe2>
  if (huart->gState == HAL_UART_STATE_RESET)
 800ee06:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800ee08:	b34b      	cbz	r3, 800ee5e <HAL_UART_Init+0xca>
  __HAL_UART_DISABLE(huart);
 800ee0a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800ee0c:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ee0e:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800ee10:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800ee12:	6813      	ldr	r3, [r2, #0]
 800ee14:	f023 0301 	bic.w	r3, r3, #1
 800ee18:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ee1a:	f7ff fbeb 	bl	800e5f4 <UART_SetConfig>
 800ee1e:	2801      	cmp	r0, #1
 800ee20:	d01b      	beq.n	800ee5a <HAL_UART_Init+0xc6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ee22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ee24:	bb0b      	cbnz	r3, 800ee6a <HAL_UART_Init+0xd6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ee26:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800ee28:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ee2a:	685a      	ldr	r2, [r3, #4]
 800ee2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ee30:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ee32:	689a      	ldr	r2, [r3, #8]
 800ee34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ee38:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800ee3a:	681a      	ldr	r2, [r3, #0]
 800ee3c:	f042 0201 	orr.w	r2, r2, #1
 800ee40:	601a      	str	r2, [r3, #0]
}
 800ee42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return (UART_CheckIdleState(huart));
 800ee46:	f7ff bf6f 	b.w	800ed28 <UART_CheckIdleState>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d0db      	beq.n	800ee06 <HAL_UART_Init+0x72>
 800ee4e:	f44f 7195 	mov.w	r1, #298	; 0x12a
 800ee52:	4810      	ldr	r0, [pc, #64]	; (800ee94 <HAL_UART_Init+0x100>)
 800ee54:	f7f3 ffe6 	bl	8002e24 <assert_failed>
 800ee58:	e7d5      	b.n	800ee06 <HAL_UART_Init+0x72>
}
 800ee5a:	2001      	movs	r0, #1
 800ee5c:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 800ee5e:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800ee62:	4620      	mov	r0, r4
 800ee64:	f7f5 fa1e 	bl	80042a4 <HAL_UART_MspInit>
 800ee68:	e7cf      	b.n	800ee0a <HAL_UART_Init+0x76>
    UART_AdvFeatureConfig(huart);
 800ee6a:	4620      	mov	r0, r4
 800ee6c:	f7ff fdb0 	bl	800e9d0 <UART_AdvFeatureConfig>
 800ee70:	e7d9      	b.n	800ee26 <HAL_UART_Init+0x92>
}
 800ee72:	2001      	movs	r0, #1
 800ee74:	4770      	bx	lr
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800ee76:	f240 112f 	movw	r1, #303	; 0x12f
 800ee7a:	4806      	ldr	r0, [pc, #24]	; (800ee94 <HAL_UART_Init+0x100>)
 800ee7c:	f7f3 ffd2 	bl	8002e24 <assert_failed>
 800ee80:	e7c1      	b.n	800ee06 <HAL_UART_Init+0x72>
 800ee82:	bf00      	nop
 800ee84:	40004c00 	.word	0x40004c00
 800ee88:	40011400 	.word	0x40011400
 800ee8c:	40005000 	.word	0x40005000
 800ee90:	40011000 	.word	0x40011000
 800ee94:	080268d0 	.word	0x080268d0

0800ee98 <HAL_MultiProcessor_Init>:
  if (huart == NULL)
 800ee98:	2800      	cmp	r0, #0
 800ee9a:	d04d      	beq.n	800ef38 <HAL_MultiProcessor_Init+0xa0>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 800ee9c:	f432 6300 	bics.w	r3, r2, #2048	; 0x800
{
 800eea0:	b570      	push	{r4, r5, r6, lr}
 800eea2:	4604      	mov	r4, r0
 800eea4:	4615      	mov	r5, r2
 800eea6:	460e      	mov	r6, r1
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 800eea8:	d130      	bne.n	800ef0c <HAL_MultiProcessor_Init+0x74>
  if (huart->gState == HAL_UART_STATE_RESET)
 800eeaa:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800eeac:	b343      	cbz	r3, 800ef00 <HAL_MultiProcessor_Init+0x68>
  __HAL_UART_DISABLE(huart);
 800eeae:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800eeb0:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800eeb2:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800eeb4:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800eeb6:	6813      	ldr	r3, [r2, #0]
 800eeb8:	f023 0301 	bic.w	r3, r3, #1
 800eebc:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800eebe:	f7ff fb99 	bl	800e5f4 <UART_SetConfig>
 800eec2:	2801      	cmp	r0, #1
 800eec4:	d02b      	beq.n	800ef1e <HAL_MultiProcessor_Init+0x86>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800eec6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d131      	bne.n	800ef30 <HAL_MultiProcessor_Init+0x98>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800eecc:	6823      	ldr	r3, [r4, #0]
  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 800eece:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800eed2:	685a      	ldr	r2, [r3, #4]
 800eed4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800eed8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800eeda:	689a      	ldr	r2, [r3, #8]
 800eedc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800eee0:	609a      	str	r2, [r3, #8]
  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 800eee2:	d01e      	beq.n	800ef22 <HAL_MultiProcessor_Init+0x8a>
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 800eee4:	6819      	ldr	r1, [r3, #0]
  return (UART_CheckIdleState(huart));
 800eee6:	4620      	mov	r0, r4
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 800eee8:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800eeec:	4329      	orrs	r1, r5
 800eeee:	6019      	str	r1, [r3, #0]
  __HAL_UART_ENABLE(huart);
 800eef0:	681a      	ldr	r2, [r3, #0]
 800eef2:	f042 0201 	orr.w	r2, r2, #1
}
 800eef6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  __HAL_UART_ENABLE(huart);
 800eefa:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800eefc:	f7ff bf14 	b.w	800ed28 <UART_CheckIdleState>
    huart->Lock = HAL_UNLOCKED;
 800ef00:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800ef04:	4620      	mov	r0, r4
 800ef06:	f7f5 f9cd 	bl	80042a4 <HAL_UART_MspInit>
 800ef0a:	e7d0      	b.n	800eeae <HAL_MultiProcessor_Init+0x16>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 800ef0c:	f240 211b 	movw	r1, #539	; 0x21b
 800ef10:	480a      	ldr	r0, [pc, #40]	; (800ef3c <HAL_MultiProcessor_Init+0xa4>)
 800ef12:	f7f3 ff87 	bl	8002e24 <assert_failed>
  if (huart->gState == HAL_UART_STATE_RESET)
 800ef16:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d1c8      	bne.n	800eeae <HAL_MultiProcessor_Init+0x16>
 800ef1c:	e7f0      	b.n	800ef00 <HAL_MultiProcessor_Init+0x68>
}
 800ef1e:	2001      	movs	r0, #1
 800ef20:	bd70      	pop	{r4, r5, r6, pc}
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 800ef22:	6859      	ldr	r1, [r3, #4]
 800ef24:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800ef28:	ea41 6606 	orr.w	r6, r1, r6, lsl #24
 800ef2c:	605e      	str	r6, [r3, #4]
 800ef2e:	e7d9      	b.n	800eee4 <HAL_MultiProcessor_Init+0x4c>
    UART_AdvFeatureConfig(huart);
 800ef30:	4620      	mov	r0, r4
 800ef32:	f7ff fd4d 	bl	800e9d0 <UART_AdvFeatureConfig>
 800ef36:	e7c9      	b.n	800eecc <HAL_MultiProcessor_Init+0x34>
}
 800ef38:	2001      	movs	r0, #1
 800ef3a:	4770      	bx	lr
 800ef3c:	080268d0 	.word	0x080268d0

0800ef40 <HAL_RS485Ex_Init>:
                                   uint32_t DeassertionTime)
{
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800ef40:	2800      	cmp	r0, #0
 800ef42:	f000 8092 	beq.w	800f06a <HAL_RS485Ex_Init+0x12a>
{
 800ef46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    return HAL_ERROR;
  }
  /* Check the Driver Enable UART instance */
  assert_param(IS_UART_DRIVER_ENABLE_INSTANCE(huart->Instance));
 800ef4a:	4c4b      	ldr	r4, [pc, #300]	; (800f078 <HAL_RS485Ex_Init+0x138>)
 800ef4c:	461d      	mov	r5, r3
 800ef4e:	460e      	mov	r6, r1
 800ef50:	6803      	ldr	r3, [r0, #0]
 800ef52:	494a      	ldr	r1, [pc, #296]	; (800f07c <HAL_RS485Ex_Init+0x13c>)
 800ef54:	4617      	mov	r7, r2
 800ef56:	4a4a      	ldr	r2, [pc, #296]	; (800f080 <HAL_RS485Ex_Init+0x140>)
 800ef58:	4680      	mov	r8, r0
 800ef5a:	42a3      	cmp	r3, r4
 800ef5c:	bf18      	it	ne
 800ef5e:	428b      	cmpne	r3, r1
 800ef60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ef64:	bf14      	ite	ne
 800ef66:	2401      	movne	r4, #1
 800ef68:	2400      	moveq	r4, #0
 800ef6a:	4293      	cmp	r3, r2
 800ef6c:	bf0c      	ite	eq
 800ef6e:	2400      	moveq	r4, #0
 800ef70:	f004 0401 	andne.w	r4, r4, #1
 800ef74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ef78:	428b      	cmp	r3, r1
 800ef7a:	bf0c      	ite	eq
 800ef7c:	2400      	moveq	r4, #0
 800ef7e:	f004 0401 	andne.w	r4, r4, #1
 800ef82:	f501 4148 	add.w	r1, r1, #51200	; 0xc800
 800ef86:	4293      	cmp	r3, r2
 800ef88:	bf0c      	ite	eq
 800ef8a:	2400      	moveq	r4, #0
 800ef8c:	f004 0401 	andne.w	r4, r4, #1
 800ef90:	f502 5220 	add.w	r2, r2, #10240	; 0x2800
 800ef94:	428b      	cmp	r3, r1
 800ef96:	bf0c      	ite	eq
 800ef98:	2400      	moveq	r4, #0
 800ef9a:	f004 0401 	andne.w	r4, r4, #1
 800ef9e:	4293      	cmp	r3, r2
 800efa0:	bf0c      	ite	eq
 800efa2:	2400      	moveq	r4, #0
 800efa4:	f004 0401 	andne.w	r4, r4, #1
 800efa8:	b11c      	cbz	r4, 800efb2 <HAL_RS485Ex_Init+0x72>
 800efaa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800efae:	4293      	cmp	r3, r2
 800efb0:	d15d      	bne.n	800f06e <HAL_RS485Ex_Init+0x12e>

  /* Check the Driver Enable polarity */
  assert_param(IS_UART_DE_POLARITY(Polarity));
 800efb2:	f436 4300 	bics.w	r3, r6, #32768	; 0x8000
 800efb6:	d14a      	bne.n	800f04e <HAL_RS485Ex_Init+0x10e>

  /* Check the Driver Enable assertion time */
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));
 800efb8:	2f1f      	cmp	r7, #31
 800efba:	d841      	bhi.n	800f040 <HAL_RS485Ex_Init+0x100>

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));
 800efbc:	2d1f      	cmp	r5, #31
 800efbe:	d836      	bhi.n	800f02e <HAL_RS485Ex_Init+0xee>

  if (huart->gState == HAL_UART_STATE_RESET)
 800efc0:	f8d8 3074 	ldr.w	r3, [r8, #116]	; 0x74
 800efc4:	b36b      	cbz	r3, 800f022 <HAL_RS485Ex_Init+0xe2>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800efc6:	f8d8 2000 	ldr.w	r2, [r8]
  huart->gState = HAL_UART_STATE_BUSY;
 800efca:	2324      	movs	r3, #36	; 0x24

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800efcc:	4640      	mov	r0, r8
  huart->gState = HAL_UART_STATE_BUSY;
 800efce:	f8c8 3074 	str.w	r3, [r8, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800efd2:	6813      	ldr	r3, [r2, #0]
 800efd4:	f023 0301 	bic.w	r3, r3, #1
 800efd8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800efda:	f7ff fb0b 	bl	800e5f4 <UART_SetConfig>
 800efde:	2801      	cmp	r0, #1
 800efe0:	d03c      	beq.n	800f05c <HAL_RS485Ex_Init+0x11c>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800efe2:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d13b      	bne.n	800f062 <HAL_RS485Ex_Init+0x122>
  {
    UART_AdvFeatureConfig(huart);
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800efea:	f8d8 3000 	ldr.w	r3, [r8]
  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800efee:	042d      	lsls	r5, r5, #16
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800eff0:	4a24      	ldr	r2, [pc, #144]	; (800f084 <HAL_RS485Ex_Init+0x144>)

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800eff2:	4640      	mov	r0, r8
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800eff4:	6899      	ldr	r1, [r3, #8]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800eff6:	ea45 5747 	orr.w	r7, r5, r7, lsl #21
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800effa:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800effe:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800f000:	6899      	ldr	r1, [r3, #8]
 800f002:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800f006:	430e      	orrs	r6, r1
 800f008:	609e      	str	r6, [r3, #8]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800f00a:	6819      	ldr	r1, [r3, #0]
 800f00c:	400a      	ands	r2, r1
 800f00e:	4317      	orrs	r7, r2
 800f010:	601f      	str	r7, [r3, #0]
  __HAL_UART_ENABLE(huart);
 800f012:	681a      	ldr	r2, [r3, #0]
 800f014:	f042 0201 	orr.w	r2, r2, #1
}
 800f018:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_UART_ENABLE(huart);
 800f01c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800f01e:	f7ff be83 	b.w	800ed28 <UART_CheckIdleState>
    huart->Lock = HAL_UNLOCKED;
 800f022:	f888 3070 	strb.w	r3, [r8, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800f026:	4640      	mov	r0, r8
 800f028:	f7f5 f93c 	bl	80042a4 <HAL_UART_MspInit>
 800f02c:	e7cb      	b.n	800efc6 <HAL_RS485Ex_Init+0x86>
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));
 800f02e:	21aa      	movs	r1, #170	; 0xaa
 800f030:	4815      	ldr	r0, [pc, #84]	; (800f088 <HAL_RS485Ex_Init+0x148>)
 800f032:	f7f3 fef7 	bl	8002e24 <assert_failed>
  if (huart->gState == HAL_UART_STATE_RESET)
 800f036:	f8d8 3074 	ldr.w	r3, [r8, #116]	; 0x74
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d1c3      	bne.n	800efc6 <HAL_RS485Ex_Init+0x86>
 800f03e:	e7f0      	b.n	800f022 <HAL_RS485Ex_Init+0xe2>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));
 800f040:	21a7      	movs	r1, #167	; 0xa7
 800f042:	4811      	ldr	r0, [pc, #68]	; (800f088 <HAL_RS485Ex_Init+0x148>)
 800f044:	f7f3 feee 	bl	8002e24 <assert_failed>
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));
 800f048:	2d1f      	cmp	r5, #31
 800f04a:	d9b9      	bls.n	800efc0 <HAL_RS485Ex_Init+0x80>
 800f04c:	e7ef      	b.n	800f02e <HAL_RS485Ex_Init+0xee>
  assert_param(IS_UART_DE_POLARITY(Polarity));
 800f04e:	21a4      	movs	r1, #164	; 0xa4
 800f050:	480d      	ldr	r0, [pc, #52]	; (800f088 <HAL_RS485Ex_Init+0x148>)
 800f052:	f7f3 fee7 	bl	8002e24 <assert_failed>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));
 800f056:	2f1f      	cmp	r7, #31
 800f058:	d9b0      	bls.n	800efbc <HAL_RS485Ex_Init+0x7c>
 800f05a:	e7f1      	b.n	800f040 <HAL_RS485Ex_Init+0x100>
}
 800f05c:	2001      	movs	r0, #1
 800f05e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_AdvFeatureConfig(huart);
 800f062:	4640      	mov	r0, r8
 800f064:	f7ff fcb4 	bl	800e9d0 <UART_AdvFeatureConfig>
 800f068:	e7bf      	b.n	800efea <HAL_RS485Ex_Init+0xaa>
}
 800f06a:	2001      	movs	r0, #1
 800f06c:	4770      	bx	lr
  assert_param(IS_UART_DRIVER_ENABLE_INSTANCE(huart->Instance));
 800f06e:	21a1      	movs	r1, #161	; 0xa1
 800f070:	4805      	ldr	r0, [pc, #20]	; (800f088 <HAL_RS485Ex_Init+0x148>)
 800f072:	f7f3 fed7 	bl	8002e24 <assert_failed>
 800f076:	e79c      	b.n	800efb2 <HAL_RS485Ex_Init+0x72>
 800f078:	40011000 	.word	0x40011000
 800f07c:	40004400 	.word	0x40004400
 800f080:	40004800 	.word	0x40004800
 800f084:	fc00ffff 	.word	0xfc00ffff
 800f088:	0802690c 	.word	0x0802690c

0800f08c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f08c:	4b0b      	ldr	r3, [pc, #44]	; (800f0bc <USB_CoreReset+0x30>)
 800f08e:	e001      	b.n	800f094 <USB_CoreReset+0x8>
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800f090:	3b01      	subs	r3, #1
 800f092:	d010      	beq.n	800f0b6 <USB_CoreReset+0x2a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f094:	6902      	ldr	r2, [r0, #16]
 800f096:	2a00      	cmp	r2, #0
 800f098:	dafa      	bge.n	800f090 <USB_CoreReset+0x4>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f09a:	6903      	ldr	r3, [r0, #16]
 800f09c:	4a07      	ldr	r2, [pc, #28]	; (800f0bc <USB_CoreReset+0x30>)
 800f09e:	f043 0301 	orr.w	r3, r3, #1
 800f0a2:	6103      	str	r3, [r0, #16]
 800f0a4:	e001      	b.n	800f0aa <USB_CoreReset+0x1e>

  do
  {
    if (++count > 200000U)
 800f0a6:	3a01      	subs	r2, #1
 800f0a8:	d005      	beq.n	800f0b6 <USB_CoreReset+0x2a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f0aa:	6903      	ldr	r3, [r0, #16]
 800f0ac:	f013 0301 	ands.w	r3, r3, #1
 800f0b0:	d1f9      	bne.n	800f0a6 <USB_CoreReset+0x1a>

  return HAL_OK;
 800f0b2:	4618      	mov	r0, r3
}
 800f0b4:	4770      	bx	lr
      return HAL_TIMEOUT;
 800f0b6:	2003      	movs	r0, #3
 800f0b8:	4770      	bx	lr
 800f0ba:	bf00      	nop
 800f0bc:	00030d40 	.word	0x00030d40

0800f0c0 <USB_CoreInit>:
{
 800f0c0:	b084      	sub	sp, #16
 800f0c2:	b538      	push	{r3, r4, r5, lr}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f0c4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
{
 800f0c6:	ac05      	add	r4, sp, #20
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f0c8:	2d01      	cmp	r5, #1
{
 800f0ca:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800f0ce:	4601      	mov	r1, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f0d0:	d121      	bne.n	800f116 <USB_CoreInit+0x56>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f0d2:	6b82      	ldr	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f0d4:	4b18      	ldr	r3, [pc, #96]	; (800f138 <USB_CoreInit+0x78>)
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f0d6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    if (cfg.use_external_vbus == 1U)
 800f0da:	9811      	ldr	r0, [sp, #68]	; 0x44
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f0dc:	638a      	str	r2, [r1, #56]	; 0x38
    if (cfg.use_external_vbus == 1U)
 800f0de:	2801      	cmp	r0, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f0e0:	68ca      	ldr	r2, [r1, #12]
 800f0e2:	ea03 0302 	and.w	r3, r3, r2
 800f0e6:	60cb      	str	r3, [r1, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f0e8:	68cb      	ldr	r3, [r1, #12]
 800f0ea:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800f0ee:	60cb      	str	r3, [r1, #12]
    if (cfg.use_external_vbus == 1U)
 800f0f0:	d01c      	beq.n	800f12c <USB_CoreInit+0x6c>
    ret = USB_CoreReset(USBx);
 800f0f2:	4608      	mov	r0, r1
 800f0f4:	f7ff ffca 	bl	800f08c <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 800f0f8:	9b08      	ldr	r3, [sp, #32]
 800f0fa:	2b01      	cmp	r3, #1
 800f0fc:	d107      	bne.n	800f10e <USB_CoreInit+0x4e>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f0fe:	688b      	ldr	r3, [r1, #8]
 800f100:	f043 0306 	orr.w	r3, r3, #6
 800f104:	608b      	str	r3, [r1, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f106:	688b      	ldr	r3, [r1, #8]
 800f108:	f043 0320 	orr.w	r3, r3, #32
 800f10c:	608b      	str	r3, [r1, #8]
}
 800f10e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f112:	b004      	add	sp, #16
 800f114:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f116:	68c3      	ldr	r3, [r0, #12]
 800f118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f11c:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 800f11e:	f7ff ffb5 	bl	800f08c <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f122:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800f124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f128:	638b      	str	r3, [r1, #56]	; 0x38
 800f12a:	e7e5      	b.n	800f0f8 <USB_CoreInit+0x38>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f12c:	68cb      	ldr	r3, [r1, #12]
 800f12e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f132:	60cb      	str	r3, [r1, #12]
 800f134:	e7dd      	b.n	800f0f2 <USB_CoreInit+0x32>
 800f136:	bf00      	nop
 800f138:	ffbdffbf 	.word	0xffbdffbf

0800f13c <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 800f13c:	2a02      	cmp	r2, #2
{
 800f13e:	4603      	mov	r3, r0
 800f140:	b410      	push	{r4}
  if (speed == USBD_FS_SPEED)
 800f142:	d00c      	beq.n	800f15e <USB_SetTurnaroundTime+0x22>
 800f144:	f44f 5410 	mov.w	r4, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f148:	68d9      	ldr	r1, [r3, #12]
}
 800f14a:	2000      	movs	r0, #0
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f14c:	f421 5170 	bic.w	r1, r1, #15360	; 0x3c00
 800f150:	60d9      	str	r1, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f152:	68da      	ldr	r2, [r3, #12]
 800f154:	4322      	orrs	r2, r4
}
 800f156:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f15a:	60da      	str	r2, [r3, #12]
}
 800f15c:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f15e:	4a29      	ldr	r2, [pc, #164]	; (800f204 <USB_SetTurnaroundTime+0xc8>)
 800f160:	4829      	ldr	r0, [pc, #164]	; (800f208 <USB_SetTurnaroundTime+0xcc>)
 800f162:	440a      	add	r2, r1
 800f164:	4282      	cmp	r2, r0
 800f166:	d93a      	bls.n	800f1de <USB_SetTurnaroundTime+0xa2>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f168:	4a28      	ldr	r2, [pc, #160]	; (800f20c <USB_SetTurnaroundTime+0xd0>)
 800f16a:	4829      	ldr	r0, [pc, #164]	; (800f210 <USB_SetTurnaroundTime+0xd4>)
 800f16c:	440a      	add	r2, r1
 800f16e:	4282      	cmp	r2, r0
 800f170:	d932      	bls.n	800f1d8 <USB_SetTurnaroundTime+0x9c>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f172:	4a28      	ldr	r2, [pc, #160]	; (800f214 <USB_SetTurnaroundTime+0xd8>)
 800f174:	4828      	ldr	r0, [pc, #160]	; (800f218 <USB_SetTurnaroundTime+0xdc>)
 800f176:	440a      	add	r2, r1
 800f178:	4282      	cmp	r2, r0
 800f17a:	d933      	bls.n	800f1e4 <USB_SetTurnaroundTime+0xa8>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f17c:	4a27      	ldr	r2, [pc, #156]	; (800f21c <USB_SetTurnaroundTime+0xe0>)
 800f17e:	f500 30c3 	add.w	r0, r0, #99840	; 0x18600
 800f182:	440a      	add	r2, r1
 800f184:	30a0      	adds	r0, #160	; 0xa0
 800f186:	4282      	cmp	r2, r0
 800f188:	d92f      	bls.n	800f1ea <USB_SetTurnaroundTime+0xae>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f18a:	4a25      	ldr	r2, [pc, #148]	; (800f220 <USB_SetTurnaroundTime+0xe4>)
 800f18c:	4825      	ldr	r0, [pc, #148]	; (800f224 <USB_SetTurnaroundTime+0xe8>)
 800f18e:	440a      	add	r2, r1
 800f190:	4282      	cmp	r2, r0
 800f192:	d92d      	bls.n	800f1f0 <USB_SetTurnaroundTime+0xb4>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f194:	4a24      	ldr	r2, [pc, #144]	; (800f228 <USB_SetTurnaroundTime+0xec>)
 800f196:	f500 2092 	add.w	r0, r0, #299008	; 0x49000
 800f19a:	440a      	add	r2, r1
 800f19c:	f500 7078 	add.w	r0, r0, #992	; 0x3e0
 800f1a0:	4282      	cmp	r2, r0
 800f1a2:	d928      	bls.n	800f1f6 <USB_SetTurnaroundTime+0xba>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f1a4:	4a21      	ldr	r2, [pc, #132]	; (800f22c <USB_SetTurnaroundTime+0xf0>)
 800f1a6:	f500 20c3 	add.w	r0, r0, #399360	; 0x61800
 800f1aa:	440a      	add	r2, r1
 800f1ac:	f500 7020 	add.w	r0, r0, #640	; 0x280
 800f1b0:	4282      	cmp	r2, r0
 800f1b2:	d9c7      	bls.n	800f144 <USB_SetTurnaroundTime+0x8>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f1b4:	4a1e      	ldr	r2, [pc, #120]	; (800f230 <USB_SetTurnaroundTime+0xf4>)
 800f1b6:	f500 10b7 	add.w	r0, r0, #1499136	; 0x16e000
 800f1ba:	440a      	add	r2, r1
 800f1bc:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800f1c0:	4282      	cmp	r2, r0
 800f1c2:	d91b      	bls.n	800f1fc <USB_SetTurnaroundTime+0xc0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f1c4:	4a1b      	ldr	r2, [pc, #108]	; (800f234 <USB_SetTurnaroundTime+0xf8>)
 800f1c6:	4c1c      	ldr	r4, [pc, #112]	; (800f238 <USB_SetTurnaroundTime+0xfc>)
 800f1c8:	440a      	add	r2, r1
 800f1ca:	42a2      	cmp	r2, r4
 800f1cc:	bf8c      	ite	hi
 800f1ce:	f44f 54c0 	movhi.w	r4, #6144	; 0x1800
 800f1d2:	f44f 54e0 	movls.w	r4, #7168	; 0x1c00
 800f1d6:	e7b7      	b.n	800f148 <USB_SetTurnaroundTime+0xc>
 800f1d8:	f44f 5460 	mov.w	r4, #14336	; 0x3800
 800f1dc:	e7b4      	b.n	800f148 <USB_SetTurnaroundTime+0xc>
 800f1de:	f44f 5470 	mov.w	r4, #15360	; 0x3c00
 800f1e2:	e7b1      	b.n	800f148 <USB_SetTurnaroundTime+0xc>
 800f1e4:	f44f 5450 	mov.w	r4, #13312	; 0x3400
 800f1e8:	e7ae      	b.n	800f148 <USB_SetTurnaroundTime+0xc>
 800f1ea:	f44f 5440 	mov.w	r4, #12288	; 0x3000
 800f1ee:	e7ab      	b.n	800f148 <USB_SetTurnaroundTime+0xc>
 800f1f0:	f44f 5430 	mov.w	r4, #11264	; 0x2c00
 800f1f4:	e7a8      	b.n	800f148 <USB_SetTurnaroundTime+0xc>
 800f1f6:	f44f 5420 	mov.w	r4, #10240	; 0x2800
 800f1fa:	e7a5      	b.n	800f148 <USB_SetTurnaroundTime+0xc>
 800f1fc:	f44f 5400 	mov.w	r4, #8192	; 0x2000
 800f200:	e7a2      	b.n	800f148 <USB_SetTurnaroundTime+0xc>
 800f202:	bf00      	nop
 800f204:	ff275340 	.word	0xff275340
 800f208:	000c34ff 	.word	0x000c34ff
 800f20c:	ff1b1e40 	.word	0xff1b1e40
 800f210:	000f423f 	.word	0x000f423f
 800f214:	ff0bdc00 	.word	0xff0bdc00
 800f218:	00124f7f 	.word	0x00124f7f
 800f21c:	fef98c80 	.word	0xfef98c80
 800f220:	fee5b660 	.word	0xfee5b660
 800f224:	0016e35f 	.word	0x0016e35f
 800f228:	feced300 	.word	0xfeced300
 800f22c:	feb35bc0 	.word	0xfeb35bc0
 800f230:	fe91ca00 	.word	0xfe91ca00
 800f234:	fe5954e0 	.word	0xfe5954e0
 800f238:	00419cdf 	.word	0x00419cdf

0800f23c <USB_EnableGlobalInt>:
{
 800f23c:	4602      	mov	r2, r0
}
 800f23e:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f240:	6893      	ldr	r3, [r2, #8]
 800f242:	f043 0301 	orr.w	r3, r3, #1
 800f246:	6093      	str	r3, [r2, #8]
}
 800f248:	4770      	bx	lr
 800f24a:	bf00      	nop

0800f24c <USB_DisableGlobalInt>:
{
 800f24c:	4602      	mov	r2, r0
}
 800f24e:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f250:	6893      	ldr	r3, [r2, #8]
 800f252:	f023 0301 	bic.w	r3, r3, #1
 800f256:	6093      	str	r3, [r2, #8]
}
 800f258:	4770      	bx	lr
 800f25a:	bf00      	nop

0800f25c <USB_SetCurrentMode>:
{
 800f25c:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f25e:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800f260:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f262:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800f266:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800f268:	d00b      	beq.n	800f282 <USB_SetCurrentMode+0x26>
  else if (mode == USB_DEVICE_MODE)
 800f26a:	b941      	cbnz	r1, 800f27e <USB_SetCurrentMode+0x22>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f26c:	68c3      	ldr	r3, [r0, #12]
 800f26e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f272:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 800f274:	2032      	movs	r0, #50	; 0x32
 800f276:	f7f6 f981 	bl	800557c <HAL_Delay>
  return HAL_OK;
 800f27a:	2000      	movs	r0, #0
}
 800f27c:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 800f27e:	2001      	movs	r0, #1
}
 800f280:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f282:	68c3      	ldr	r3, [r0, #12]
 800f284:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f288:	60c3      	str	r3, [r0, #12]
 800f28a:	e7f3      	b.n	800f274 <USB_SetCurrentMode+0x18>

0800f28c <USB_DevInit>:
{
 800f28c:	b084      	sub	sp, #16
 800f28e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  for (i = 0U; i < 15U; i++)
 800f292:	2400      	movs	r4, #0
{
 800f294:	ae08      	add	r6, sp, #32
 800f296:	4605      	mov	r5, r0
 800f298:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
    USBx->DIEPTXF[i] = 0U;
 800f29c:	4620      	mov	r0, r4
{
 800f29e:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800f2a2:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f2a4:	9e08      	ldr	r6, [sp, #32]
 800f2a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    USBx->DIEPTXF[i] = 0U;
 800f2a8:	f104 0340 	add.w	r3, r4, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 800f2ac:	3401      	adds	r4, #1
    USBx->DIEPTXF[i] = 0U;
 800f2ae:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  for (i = 0U; i < 15U; i++)
 800f2b2:	2c0f      	cmp	r4, #15
    USBx->DIEPTXF[i] = 0U;
 800f2b4:	6058      	str	r0, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f2b6:	d1f7      	bne.n	800f2a8 <USB_DevInit+0x1c>
 800f2b8:	f505 6700 	add.w	r7, r5, #2048	; 0x800
  if (cfg.vbus_sensing_enable == 0U)
 800f2bc:	2900      	cmp	r1, #0
 800f2be:	f040 809e 	bne.w	800f3fe <USB_DevInit+0x172>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	f043 0302 	orr.w	r3, r3, #2
 800f2c8:	607b      	str	r3, [r7, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800f2ca:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800f2cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f2d0:	63ab      	str	r3, [r5, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800f2d2:	682b      	ldr	r3, [r5, #0]
 800f2d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2d8:	602b      	str	r3, [r5, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800f2da:	682b      	ldr	r3, [r5, #0]
 800f2dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f2e0:	602b      	str	r3, [r5, #0]
  USBx_PCGCCTL = 0U;
 800f2e2:	2300      	movs	r3, #0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f2e4:	f1bc 0f01 	cmp.w	ip, #1
  USBx_PCGCCTL = 0U;
 800f2e8:	f8c5 3e00 	str.w	r3, [r5, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800f2ec:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 800f2f0:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
  USBx_DEVICE->DCFG |= speed;
 800f2f4:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f2f8:	d03b      	beq.n	800f372 <USB_DevInit+0xe6>
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800f2fa:	f1bc 0f03 	cmp.w	ip, #3
 800f2fe:	d038      	beq.n	800f372 <USB_DevInit+0xe6>
  USBx_DEVICE->DCFG |= speed;
 800f300:	f043 0303 	orr.w	r3, r3, #3
 800f304:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f308:	f44f 6284 	mov.w	r2, #1056	; 0x420
 800f30c:	4b43      	ldr	r3, [pc, #268]	; (800f41c <USB_DevInit+0x190>)
 800f30e:	612a      	str	r2, [r5, #16]
 800f310:	e001      	b.n	800f316 <USB_DevInit+0x8a>
    if (++count > 200000U)
 800f312:	3b01      	subs	r3, #1
 800f314:	d07a      	beq.n	800f40c <USB_DevInit+0x180>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f316:	6928      	ldr	r0, [r5, #16]
 800f318:	f010 0020 	ands.w	r0, r0, #32
 800f31c:	d1f9      	bne.n	800f312 <USB_DevInit+0x86>
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f31e:	2210      	movs	r2, #16
 800f320:	4b3e      	ldr	r3, [pc, #248]	; (800f41c <USB_DevInit+0x190>)
 800f322:	612a      	str	r2, [r5, #16]
 800f324:	e001      	b.n	800f32a <USB_DevInit+0x9e>
    if (++count > 200000U)
 800f326:	3b01      	subs	r3, #1
 800f328:	d06e      	beq.n	800f408 <USB_DevInit+0x17c>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f32a:	692a      	ldr	r2, [r5, #16]
 800f32c:	06d2      	lsls	r2, r2, #27
 800f32e:	d4fa      	bmi.n	800f326 <USB_DevInit+0x9a>
  USBx_DEVICE->DIEPMSK = 0U;
 800f330:	2200      	movs	r2, #0
 800f332:	613a      	str	r2, [r7, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f334:	617a      	str	r2, [r7, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f336:	61fa      	str	r2, [r7, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f338:	b316      	cbz	r6, 800f380 <USB_DevInit+0xf4>
 800f33a:	f505 6310 	add.w	r3, r5, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f33e:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f342:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 800f346:	4694      	mov	ip, r2
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f348:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 800f34c:	e009      	b.n	800f362 <USB_DevInit+0xd6>
      USBx_INEP(i)->DIEPCTL = 0U;
 800f34e:	f8c3 c000 	str.w	ip, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f352:	3201      	adds	r2, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f354:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f358:	f8c3 e008 	str.w	lr, [r3, #8]
 800f35c:	3320      	adds	r3, #32
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f35e:	42b2      	cmp	r2, r6
 800f360:	d031      	beq.n	800f3c6 <USB_DevInit+0x13a>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f362:	681c      	ldr	r4, [r3, #0]
 800f364:	2c00      	cmp	r4, #0
 800f366:	daf2      	bge.n	800f34e <USB_DevInit+0xc2>
      if (i == 0U)
 800f368:	2a00      	cmp	r2, #0
 800f36a:	d054      	beq.n	800f416 <USB_DevInit+0x18a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f36c:	f8c3 8000 	str.w	r8, [r3]
 800f370:	e7ef      	b.n	800f352 <USB_DevInit+0xc6>
    if (cfg.speed == USBD_HS_SPEED)
 800f372:	2a00      	cmp	r2, #0
 800f374:	d0c6      	beq.n	800f304 <USB_DevInit+0x78>
  USBx_DEVICE->DCFG |= speed;
 800f376:	f043 0301 	orr.w	r3, r3, #1
 800f37a:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
 800f37e:	e7c3      	b.n	800f308 <USB_DevInit+0x7c>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f380:	693b      	ldr	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 800f382:	2600      	movs	r6, #0
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f384:	f06f 4480 	mvn.w	r4, #1073741824	; 0x40000000
  if (cfg.dma_enable == 0U)
 800f388:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f38a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f38e:	613b      	str	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 800f390:	61ae      	str	r6, [r5, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f392:	616c      	str	r4, [r5, #20]
  if (cfg.dma_enable == 0U)
 800f394:	b91a      	cbnz	r2, 800f39e <USB_DevInit+0x112>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f396:	69ab      	ldr	r3, [r5, #24]
 800f398:	f043 0310 	orr.w	r3, r3, #16
 800f39c:	61ab      	str	r3, [r5, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f39e:	69ac      	ldr	r4, [r5, #24]
 800f3a0:	4b1f      	ldr	r3, [pc, #124]	; (800f420 <USB_DevInit+0x194>)
  if (cfg.Sof_enable != 0U)
 800f3a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f3a4:	4323      	orrs	r3, r4
 800f3a6:	61ab      	str	r3, [r5, #24]
  if (cfg.Sof_enable != 0U)
 800f3a8:	b11a      	cbz	r2, 800f3b2 <USB_DevInit+0x126>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f3aa:	69ab      	ldr	r3, [r5, #24]
 800f3ac:	f043 0308 	orr.w	r3, r3, #8
 800f3b0:	61ab      	str	r3, [r5, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800f3b2:	2901      	cmp	r1, #1
 800f3b4:	d103      	bne.n	800f3be <USB_DevInit+0x132>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f3b6:	69aa      	ldr	r2, [r5, #24]
 800f3b8:	4b1a      	ldr	r3, [pc, #104]	; (800f424 <USB_DevInit+0x198>)
 800f3ba:	4313      	orrs	r3, r2
 800f3bc:	61ab      	str	r3, [r5, #24]
}
 800f3be:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f3c2:	b004      	add	sp, #16
 800f3c4:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f3c6:	2400      	movs	r4, #0
 800f3c8:	f505 6330 	add.w	r3, r5, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f3cc:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f3d0:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f3d4:	46a4      	mov	ip, r4
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f3d6:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 800f3da:	e009      	b.n	800f3f0 <USB_DevInit+0x164>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f3dc:	f8c3 c000 	str.w	ip, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f3e0:	3401      	adds	r4, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f3e2:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f3e6:	f8c3 e008 	str.w	lr, [r3, #8]
 800f3ea:	3320      	adds	r3, #32
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f3ec:	4294      	cmp	r4, r2
 800f3ee:	d0c7      	beq.n	800f380 <USB_DevInit+0xf4>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f3f0:	681e      	ldr	r6, [r3, #0]
 800f3f2:	2e00      	cmp	r6, #0
 800f3f4:	daf2      	bge.n	800f3dc <USB_DevInit+0x150>
      if (i == 0U)
 800f3f6:	b15c      	cbz	r4, 800f410 <USB_DevInit+0x184>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f3f8:	f8c3 8000 	str.w	r8, [r3]
 800f3fc:	e7f0      	b.n	800f3e0 <USB_DevInit+0x154>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800f3fe:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800f400:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f404:	63ab      	str	r3, [r5, #56]	; 0x38
 800f406:	e76c      	b.n	800f2e2 <USB_DevInit+0x56>
    ret = HAL_ERROR;
 800f408:	2001      	movs	r0, #1
 800f40a:	e791      	b.n	800f330 <USB_DevInit+0xa4>
    ret = HAL_ERROR;
 800f40c:	2001      	movs	r0, #1
 800f40e:	e786      	b.n	800f31e <USB_DevInit+0x92>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f410:	f8c3 9000 	str.w	r9, [r3]
 800f414:	e7e4      	b.n	800f3e0 <USB_DevInit+0x154>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f416:	f8c3 9000 	str.w	r9, [r3]
 800f41a:	e79a      	b.n	800f352 <USB_DevInit+0xc6>
 800f41c:	00030d40 	.word	0x00030d40
 800f420:	803c3800 	.word	0x803c3800
 800f424:	40000004 	.word	0x40000004

0800f428 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f428:	0189      	lsls	r1, r1, #6
 800f42a:	4a07      	ldr	r2, [pc, #28]	; (800f448 <USB_FlushTxFifo+0x20>)
 800f42c:	f041 0120 	orr.w	r1, r1, #32
 800f430:	6101      	str	r1, [r0, #16]
 800f432:	e001      	b.n	800f438 <USB_FlushTxFifo+0x10>
    if (++count > 200000U)
 800f434:	3a01      	subs	r2, #1
 800f436:	d005      	beq.n	800f444 <USB_FlushTxFifo+0x1c>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f438:	6903      	ldr	r3, [r0, #16]
 800f43a:	f013 0320 	ands.w	r3, r3, #32
 800f43e:	d1f9      	bne.n	800f434 <USB_FlushTxFifo+0xc>
  return HAL_OK;
 800f440:	4618      	mov	r0, r3
 800f442:	4770      	bx	lr
      return HAL_TIMEOUT;
 800f444:	2003      	movs	r0, #3
}
 800f446:	4770      	bx	lr
 800f448:	00030d40 	.word	0x00030d40

0800f44c <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800f44c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800f450:	f013 0006 	ands.w	r0, r3, #6
 800f454:	d004      	beq.n	800f460 <USB_GetDevSpeed+0x14>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800f456:	f013 0f02 	tst.w	r3, #2
    speed = 0xFU;
 800f45a:	bf14      	ite	ne
 800f45c:	2002      	movne	r0, #2
 800f45e:	200f      	moveq	r0, #15
}
 800f460:	4770      	bx	lr
 800f462:	bf00      	nop

0800f464 <USB_ActivateEndpoint>:
{
 800f464:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 800f466:	780a      	ldrb	r2, [r1, #0]
 800f468:	2301      	movs	r3, #1
  if (ep->is_in == 1U)
 800f46a:	784d      	ldrb	r5, [r1, #1]
 800f46c:	f500 6400 	add.w	r4, r0, #2048	; 0x800
 800f470:	f002 060f 	and.w	r6, r2, #15
 800f474:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 800f478:	2d01      	cmp	r5, #1
 800f47a:	fa03 f306 	lsl.w	r3, r3, r6
 800f47e:	d017      	beq.n	800f4b0 <USB_ActivateEndpoint+0x4c>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800f480:	69e2      	ldr	r2, [r4, #28]
 800f482:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800f486:	61e3      	str	r3, [r4, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800f488:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800f48c:	041b      	lsls	r3, r3, #16
 800f48e:	d40c      	bmi.n	800f4aa <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f490:	688a      	ldr	r2, [r1, #8]
 800f492:	4b14      	ldr	r3, [pc, #80]	; (800f4e4 <USB_ActivateEndpoint+0x80>)
 800f494:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800f498:	78cc      	ldrb	r4, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f49a:	f8d0 1b00 	ldr.w	r1, [r0, #2816]	; 0xb00
 800f49e:	4313      	orrs	r3, r2
 800f4a0:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800f4a4:	430b      	orrs	r3, r1
 800f4a6:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800f4aa:	2000      	movs	r0, #0
 800f4ac:	bc70      	pop	{r4, r5, r6}
 800f4ae:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800f4b0:	69e5      	ldr	r5, [r4, #28]
 800f4b2:	432b      	orrs	r3, r5
 800f4b4:	61e3      	str	r3, [r4, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800f4b6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800f4ba:	041c      	lsls	r4, r3, #16
 800f4bc:	d4f5      	bmi.n	800f4aa <USB_ActivateEndpoint+0x46>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f4be:	688c      	ldr	r4, [r1, #8]
 800f4c0:	4b08      	ldr	r3, [pc, #32]	; (800f4e4 <USB_ActivateEndpoint+0x80>)
 800f4c2:	f3c4 040a 	ubfx	r4, r4, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f4c6:	78cd      	ldrb	r5, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f4c8:	f8d0 1900 	ldr.w	r1, [r0, #2304]	; 0x900
 800f4cc:	4323      	orrs	r3, r4
 800f4ce:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
 800f4d2:	ea43 5282 	orr.w	r2, r3, r2, lsl #22
 800f4d6:	430a      	orrs	r2, r1
}
 800f4d8:	bc70      	pop	{r4, r5, r6}
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f4da:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
}
 800f4de:	2000      	movs	r0, #0
 800f4e0:	4770      	bx	lr
 800f4e2:	bf00      	nop
 800f4e4:	10008000 	.word	0x10008000

0800f4e8 <USB_DeactivateEndpoint>:
{
 800f4e8:	b410      	push	{r4}
  uint32_t epnum = (uint32_t)ep->num;
 800f4ea:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800f4ec:	7849      	ldrb	r1, [r1, #1]
 800f4ee:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 800f4f2:	2901      	cmp	r1, #1
 800f4f4:	d02a      	beq.n	800f54c <USB_DeactivateEndpoint+0x64>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f4f6:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	; 0xb00
 800f4fa:	2900      	cmp	r1, #0
 800f4fc:	db19      	blt.n	800f532 <USB_DeactivateEndpoint+0x4a>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f4fe:	f003 010f 	and.w	r1, r3, #15
 800f502:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800f506:	4c26      	ldr	r4, [pc, #152]	; (800f5a0 <USB_DeactivateEndpoint+0xb8>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f508:	408b      	lsls	r3, r1
 800f50a:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 800f50e:	43db      	mvns	r3, r3
 800f510:	4019      	ands	r1, r3
 800f512:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f516:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 800f51a:	400b      	ands	r3, r1
 800f51c:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 800f520:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800f522:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 800f526:	401c      	ands	r4, r3
 800f528:	f8c2 4b00 	str.w	r4, [r2, #2816]	; 0xb00
}
 800f52c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f530:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800f532:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	; 0xb00
 800f536:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 800f53a:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800f53e:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	; 0xb00
 800f542:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800f546:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
 800f54a:	e7d8      	b.n	800f4fe <USB_DeactivateEndpoint+0x16>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f54c:	f8d2 1900 	ldr.w	r1, [r2, #2304]	; 0x900
 800f550:	2900      	cmp	r1, #0
 800f552:	da0b      	bge.n	800f56c <USB_DeactivateEndpoint+0x84>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800f554:	f8d2 1900 	ldr.w	r1, [r2, #2304]	; 0x900
 800f558:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 800f55c:	f8c2 1900 	str.w	r1, [r2, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800f560:	f8d2 1900 	ldr.w	r1, [r2, #2304]	; 0x900
 800f564:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800f568:	f8c2 1900 	str.w	r1, [r2, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f56c:	f003 040f 	and.w	r4, r3, #15
 800f570:	2301      	movs	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800f572:	490c      	ldr	r1, [pc, #48]	; (800f5a4 <USB_DeactivateEndpoint+0xbc>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f574:	40a3      	lsls	r3, r4
 800f576:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 800f57a:	43db      	mvns	r3, r3
 800f57c:	401c      	ands	r4, r3
 800f57e:	f8c0 483c 	str.w	r4, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f582:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
 800f586:	4023      	ands	r3, r4
}
 800f588:	f85d 4b04 	ldr.w	r4, [sp], #4
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f58c:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 800f590:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800f592:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 800f596:	4019      	ands	r1, r3
 800f598:	f8c2 1900 	str.w	r1, [r2, #2304]	; 0x900
}
 800f59c:	4770      	bx	lr
 800f59e:	bf00      	nop
 800f5a0:	eff37800 	.word	0xeff37800
 800f5a4:	ec337800 	.word	0xec337800

0800f5a8 <USB_EPStartXfer>:
{
 800f5a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (ep->is_in == 1U)
 800f5ac:	784f      	ldrb	r7, [r1, #1]
 800f5ae:	780b      	ldrb	r3, [r1, #0]
 800f5b0:	2f01      	cmp	r7, #1
 800f5b2:	694c      	ldr	r4, [r1, #20]
 800f5b4:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800f5b8:	78ce      	ldrb	r6, [r1, #3]
 800f5ba:	d055      	beq.n	800f668 <USB_EPStartXfer+0xc0>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f5bc:	f503 6730 	add.w	r7, r3, #2816	; 0xb00
 800f5c0:	f8df e208 	ldr.w	lr, [pc, #520]	; 800f7cc <USB_EPStartXfer+0x224>
 800f5c4:	f8d7 c010 	ldr.w	ip, [r7, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f5c8:	4d7e      	ldr	r5, [pc, #504]	; (800f7c4 <USB_EPStartXfer+0x21c>)
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f5ca:	ea0c 0e0e 	and.w	lr, ip, lr
 800f5ce:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800f5d2:	f8c7 e010 	str.w	lr, [r7, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f5d6:	f8d7 e010 	ldr.w	lr, [r7, #16]
 800f5da:	ea0e 0505 	and.w	r5, lr, r5
 800f5de:	613d      	str	r5, [r7, #16]
    if (ep->xfer_len == 0U)
 800f5e0:	b38c      	cbz	r4, 800f646 <USB_EPStartXfer+0x9e>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f5e2:	eb04 050c 	add.w	r5, r4, ip
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f5e6:	4c78      	ldr	r4, [pc, #480]	; (800f7c8 <USB_EPStartXfer+0x220>)
 800f5e8:	f8d7 8010 	ldr.w	r8, [r7, #16]
    if (dma == 1U)
 800f5ec:	2a01      	cmp	r2, #1
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f5ee:	f105 35ff 	add.w	r5, r5, #4294967295
 800f5f2:	fbb5 f5fc 	udiv	r5, r5, ip
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f5f6:	ea04 4ec5 	and.w	lr, r4, r5, lsl #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800f5fa:	b2ad      	uxth	r5, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f5fc:	ea4e 0e08 	orr.w	lr, lr, r8
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800f600:	fb0c f405 	mul.w	r4, ip, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f604:	f8c7 e010 	str.w	lr, [r7, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800f608:	693d      	ldr	r5, [r7, #16]
 800f60a:	f3c4 0412 	ubfx	r4, r4, #0, #19
 800f60e:	ea44 0405 	orr.w	r4, r4, r5
 800f612:	613c      	str	r4, [r7, #16]
    if (dma == 1U)
 800f614:	d023      	beq.n	800f65e <USB_EPStartXfer+0xb6>
    if (ep->type == EP_TYPE_ISOC)
 800f616:	2e01      	cmp	r6, #1
 800f618:	d10c      	bne.n	800f634 <USB_EPStartXfer+0x8c>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f61a:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 800f61e:	f412 7f80 	tst.w	r2, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f622:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800f626:	bf0c      	ite	eq
 800f628:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f62c:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 800f630:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f634:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800f638:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800f63c:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 800f640:	2000      	movs	r0, #0
 800f642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f646:	693d      	ldr	r5, [r7, #16]
 800f648:	f3cc 0412 	ubfx	r4, ip, #0, #19
    if (dma == 1U)
 800f64c:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f64e:	ea44 0405 	orr.w	r4, r4, r5
 800f652:	613c      	str	r4, [r7, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f654:	693c      	ldr	r4, [r7, #16]
 800f656:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800f65a:	613c      	str	r4, [r7, #16]
    if (dma == 1U)
 800f65c:	d1db      	bne.n	800f616 <USB_EPStartXfer+0x6e>
      if ((uint32_t)ep->xfer_buff != 0U)
 800f65e:	68ca      	ldr	r2, [r1, #12]
 800f660:	2a00      	cmp	r2, #0
 800f662:	d0d8      	beq.n	800f616 <USB_EPStartXfer+0x6e>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f664:	617a      	str	r2, [r7, #20]
 800f666:	e7d6      	b.n	800f616 <USB_EPStartXfer+0x6e>
 800f668:	f503 6510 	add.w	r5, r3, #2304	; 0x900
    if (ep->xfer_len == 0U)
 800f66c:	b3ec      	cbz	r4, 800f6ea <USB_EPStartXfer+0x142>
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f66e:	f8d1 8008 	ldr.w	r8, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f672:	f3c4 0c12 	ubfx	ip, r4, #0, #19
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f676:	f8d5 9010 	ldr.w	r9, [r5, #16]
      if (ep->type == EP_TYPE_ISOC)
 800f67a:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f67c:	eb08 0e04 	add.w	lr, r8, r4
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f680:	f8df a148 	ldr.w	sl, [pc, #328]	; 800f7cc <USB_EPStartXfer+0x224>
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f684:	f10e 3eff 	add.w	lr, lr, #4294967295
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f688:	ea09 0a0a 	and.w	sl, r9, sl
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f68c:	f8df 9134 	ldr.w	r9, [pc, #308]	; 800f7c4 <USB_EPStartXfer+0x21c>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f690:	f8c5 a010 	str.w	sl, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f694:	f8d5 a010 	ldr.w	sl, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f698:	fbbe f8f8 	udiv	r8, lr, r8
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f69c:	ea0a 0909 	and.w	r9, sl, r9
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f6a0:	f8df e124 	ldr.w	lr, [pc, #292]	; 800f7c8 <USB_EPStartXfer+0x220>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f6a4:	f8c5 9010 	str.w	r9, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f6a8:	ea0e 4ec8 	and.w	lr, lr, r8, lsl #19
 800f6ac:	f8d5 8010 	ldr.w	r8, [r5, #16]
 800f6b0:	ea4e 0e08 	orr.w	lr, lr, r8
 800f6b4:	f8c5 e010 	str.w	lr, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f6b8:	f8d5 e010 	ldr.w	lr, [r5, #16]
 800f6bc:	ea4c 0c0e 	orr.w	ip, ip, lr
 800f6c0:	f8c5 c010 	str.w	ip, [r5, #16]
      if (ep->type == EP_TYPE_ISOC)
 800f6c4:	d052      	beq.n	800f76c <USB_EPStartXfer+0x1c4>
    if (dma == 1U)
 800f6c6:	2a01      	cmp	r2, #1
 800f6c8:	d05a      	beq.n	800f780 <USB_EPStartXfer+0x1d8>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f6ca:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800f6ce:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800f6d2:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f6d6:	780b      	ldrb	r3, [r1, #0]
 800f6d8:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 800f6dc:	f003 030f 	and.w	r3, r3, #15
 800f6e0:	409f      	lsls	r7, r3
 800f6e2:	4317      	orrs	r7, r2
 800f6e4:	f8c0 7834 	str.w	r7, [r0, #2100]	; 0x834
 800f6e8:	e7aa      	b.n	800f640 <USB_EPStartXfer+0x98>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f6ea:	f8d5 e010 	ldr.w	lr, [r5, #16]
    if (dma == 1U)
 800f6ee:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f6f0:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 800f7c4 <USB_EPStartXfer+0x21c>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f6f4:	4f35      	ldr	r7, [pc, #212]	; (800f7cc <USB_EPStartXfer+0x224>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f6f6:	ea0e 0c0c 	and.w	ip, lr, ip
 800f6fa:	f8c5 c010 	str.w	ip, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f6fe:	f8d5 c010 	ldr.w	ip, [r5, #16]
 800f702:	f44c 2c00 	orr.w	ip, ip, #524288	; 0x80000
 800f706:	f8c5 c010 	str.w	ip, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f70a:	f8d5 c010 	ldr.w	ip, [r5, #16]
 800f70e:	ea0c 0707 	and.w	r7, ip, r7
 800f712:	612f      	str	r7, [r5, #16]
    if (dma == 1U)
 800f714:	d034      	beq.n	800f780 <USB_EPStartXfer+0x1d8>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f716:	f8d3 5900 	ldr.w	r5, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800f71a:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f71c:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 800f720:	f8c3 5900 	str.w	r5, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800f724:	d18c      	bne.n	800f640 <USB_EPStartXfer+0x98>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f726:	f8d0 5808 	ldr.w	r5, [r0, #2056]	; 0x808
 800f72a:	f415 7f80 	tst.w	r5, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f72e:	f8d3 5900 	ldr.w	r5, [r3, #2304]	; 0x900
 800f732:	bf0c      	ite	eq
 800f734:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f738:	f045 5580 	orrne.w	r5, r5, #268435456	; 0x10000000
 800f73c:	f8c3 5900 	str.w	r5, [r3, #2304]	; 0x900
  if (dma == 0U)
 800f740:	2a00      	cmp	r2, #0
 800f742:	f47f af7d 	bne.w	800f640 <USB_EPStartXfer+0x98>
    count32b = ((uint32_t)len + 3U) / 4U;
 800f746:	b2a2      	uxth	r2, r4
 800f748:	3203      	adds	r2, #3
    for (i = 0U; i < count32b; i++)
 800f74a:	0892      	lsrs	r2, r2, #2
 800f74c:	f43f af78 	beq.w	800f640 <USB_EPStartXfer+0x98>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f750:	780c      	ldrb	r4, [r1, #0]
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800f752:	68cb      	ldr	r3, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f754:	eb00 3004 	add.w	r0, r0, r4, lsl #12
 800f758:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800f75c:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800f760:	f853 1b04 	ldr.w	r1, [r3], #4
    for (i = 0U; i < count32b; i++)
 800f764:	4293      	cmp	r3, r2
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f766:	6001      	str	r1, [r0, #0]
    for (i = 0U; i < count32b; i++)
 800f768:	d1fa      	bne.n	800f760 <USB_EPStartXfer+0x1b8>
 800f76a:	e769      	b.n	800f640 <USB_EPStartXfer+0x98>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f76c:	692f      	ldr	r7, [r5, #16]
    if (dma == 1U)
 800f76e:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f770:	f027 47c0 	bic.w	r7, r7, #1610612736	; 0x60000000
 800f774:	612f      	str	r7, [r5, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800f776:	692f      	ldr	r7, [r5, #16]
 800f778:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 800f77c:	612f      	str	r7, [r5, #16]
    if (dma == 1U)
 800f77e:	d11a      	bne.n	800f7b6 <USB_EPStartXfer+0x20e>
      if ((uint32_t)ep->dma_addr != 0U)
 800f780:	690a      	ldr	r2, [r1, #16]
 800f782:	b102      	cbz	r2, 800f786 <USB_EPStartXfer+0x1de>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f784:	616a      	str	r2, [r5, #20]
      if (ep->type == EP_TYPE_ISOC)
 800f786:	2e01      	cmp	r6, #1
 800f788:	d10c      	bne.n	800f7a4 <USB_EPStartXfer+0x1fc>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f78a:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 800f78e:	f412 7f80 	tst.w	r2, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f792:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800f796:	bf0c      	ite	eq
 800f798:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f79c:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 800f7a0:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f7a4:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
}
 800f7a8:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f7aa:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800f7ae:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
}
 800f7b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f7b6:	f8d3 5900 	ldr.w	r5, [r3, #2304]	; 0x900
 800f7ba:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 800f7be:	f8c3 5900 	str.w	r5, [r3, #2304]	; 0x900
 800f7c2:	e7b0      	b.n	800f726 <USB_EPStartXfer+0x17e>
 800f7c4:	e007ffff 	.word	0xe007ffff
 800f7c8:	1ff80000 	.word	0x1ff80000
 800f7cc:	fff80000 	.word	0xfff80000

0800f7d0 <USB_EP0StartXfer>:
{
 800f7d0:	b4f0      	push	{r4, r5, r6, r7}
  if (ep->is_in == 1U)
 800f7d2:	784b      	ldrb	r3, [r1, #1]
 800f7d4:	780c      	ldrb	r4, [r1, #0]
 800f7d6:	2b01      	cmp	r3, #1
 800f7d8:	694d      	ldr	r5, [r1, #20]
 800f7da:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 800f7de:	d026      	beq.n	800f82e <USB_EP0StartXfer+0x5e>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f7e0:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 800f7e4:	4f3c      	ldr	r7, [pc, #240]	; (800f8d8 <USB_EP0StartXfer+0x108>)
 800f7e6:	6918      	ldr	r0, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f7e8:	4e3c      	ldr	r6, [pc, #240]	; (800f8dc <USB_EP0StartXfer+0x10c>)
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f7ea:	4007      	ands	r7, r0
 800f7ec:	6888      	ldr	r0, [r1, #8]
 800f7ee:	611f      	str	r7, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f7f0:	691f      	ldr	r7, [r3, #16]
 800f7f2:	403e      	ands	r6, r7
 800f7f4:	611e      	str	r6, [r3, #16]
    if (ep->xfer_len > 0U)
 800f7f6:	b105      	cbz	r5, 800f7fa <USB_EP0StartXfer+0x2a>
      ep->xfer_len = ep->maxpacket;
 800f7f8:	6148      	str	r0, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f7fa:	691d      	ldr	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800f7fc:	f3c0 0012 	ubfx	r0, r0, #0, #19
    if (dma == 1U)
 800f800:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f802:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800f806:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800f808:	691d      	ldr	r5, [r3, #16]
 800f80a:	ea40 0005 	orr.w	r0, r0, r5
 800f80e:	6118      	str	r0, [r3, #16]
    if (dma == 1U)
 800f810:	d008      	beq.n	800f824 <USB_EP0StartXfer+0x54>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f812:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 800f816:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f81a:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
}
 800f81e:	2000      	movs	r0, #0
 800f820:	bcf0      	pop	{r4, r5, r6, r7}
 800f822:	4770      	bx	lr
      if ((uint32_t)ep->xfer_buff != 0U)
 800f824:	68ca      	ldr	r2, [r1, #12]
 800f826:	2a00      	cmp	r2, #0
 800f828:	d0f3      	beq.n	800f812 <USB_EP0StartXfer+0x42>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f82a:	615a      	str	r2, [r3, #20]
 800f82c:	e7f1      	b.n	800f812 <USB_EP0StartXfer+0x42>
 800f82e:	f504 6310 	add.w	r3, r4, #2304	; 0x900
    if (ep->xfer_len == 0U)
 800f832:	2d00      	cmp	r5, #0
 800f834:	d033      	beq.n	800f89e <USB_EP0StartXfer+0xce>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f836:	f8d3 c010 	ldr.w	ip, [r3, #16]
 800f83a:	4f27      	ldr	r7, [pc, #156]	; (800f8d8 <USB_EP0StartXfer+0x108>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f83c:	4e27      	ldr	r6, [pc, #156]	; (800f8dc <USB_EP0StartXfer+0x10c>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f83e:	ea0c 0707 	and.w	r7, ip, r7
      if (ep->xfer_len > ep->maxpacket)
 800f842:	f8d1 c008 	ldr.w	ip, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f846:	611f      	str	r7, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 800f848:	45ac      	cmp	ip, r5
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f84a:	691f      	ldr	r7, [r3, #16]
 800f84c:	ea06 0607 	and.w	r6, r6, r7
 800f850:	611e      	str	r6, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 800f852:	d202      	bcs.n	800f85a <USB_EP0StartXfer+0x8a>
        ep->xfer_len = ep->maxpacket;
 800f854:	4665      	mov	r5, ip
 800f856:	f8c1 c014 	str.w	ip, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f85a:	691e      	ldr	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f85c:	f3c5 0512 	ubfx	r5, r5, #0, #19
    if (dma == 1U)
 800f860:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f862:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 800f866:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f868:	691e      	ldr	r6, [r3, #16]
 800f86a:	ea45 0506 	orr.w	r5, r5, r6
 800f86e:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 800f870:	d026      	beq.n	800f8c0 <USB_EP0StartXfer+0xf0>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f872:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 800f876:	694a      	ldr	r2, [r1, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f878:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f87c:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 800f880:	2a00      	cmp	r2, #0
 800f882:	d0cc      	beq.n	800f81e <USB_EP0StartXfer+0x4e>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f884:	780a      	ldrb	r2, [r1, #0]
 800f886:	2301      	movs	r3, #1
 800f888:	f8d0 1834 	ldr.w	r1, [r0, #2100]	; 0x834
 800f88c:	f002 020f 	and.w	r2, r2, #15
 800f890:	4093      	lsls	r3, r2
 800f892:	430b      	orrs	r3, r1
}
 800f894:	bcf0      	pop	{r4, r5, r6, r7}
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f896:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
}
 800f89a:	2000      	movs	r0, #0
 800f89c:	4770      	bx	lr
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f89e:	691f      	ldr	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f8a0:	f5a5 2500 	sub.w	r5, r5, #524288	; 0x80000
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f8a4:	4e0d      	ldr	r6, [pc, #52]	; (800f8dc <USB_EP0StartXfer+0x10c>)
    if (dma == 1U)
 800f8a6:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f8a8:	ea06 0607 	and.w	r6, r6, r7
 800f8ac:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f8ae:	691e      	ldr	r6, [r3, #16]
 800f8b0:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 800f8b4:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f8b6:	691e      	ldr	r6, [r3, #16]
 800f8b8:	ea05 0506 	and.w	r5, r5, r6
 800f8bc:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 800f8be:	d1d8      	bne.n	800f872 <USB_EP0StartXfer+0xa2>
      if ((uint32_t)ep->dma_addr != 0U)
 800f8c0:	690a      	ldr	r2, [r1, #16]
 800f8c2:	b102      	cbz	r2, 800f8c6 <USB_EP0StartXfer+0xf6>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f8c4:	615a      	str	r2, [r3, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f8c6:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
}
 800f8ca:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f8cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f8d0:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
}
 800f8d4:	bcf0      	pop	{r4, r5, r6, r7}
 800f8d6:	4770      	bx	lr
 800f8d8:	fff80000 	.word	0xfff80000
 800f8dc:	e007ffff 	.word	0xe007ffff

0800f8e0 <USB_WritePacket>:
{
 800f8e0:	b410      	push	{r4}
 800f8e2:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 800f8e6:	b96c      	cbnz	r4, 800f904 <USB_WritePacket+0x24>
    count32b = ((uint32_t)len + 3U) / 4U;
 800f8e8:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 800f8ea:	089b      	lsrs	r3, r3, #2
 800f8ec:	d00a      	beq.n	800f904 <USB_WritePacket+0x24>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f8ee:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 800f8f2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800f8f6:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800f8fa:	f851 2b04 	ldr.w	r2, [r1], #4
    for (i = 0U; i < count32b; i++)
 800f8fe:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f900:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 800f902:	d1fa      	bne.n	800f8fa <USB_WritePacket+0x1a>
}
 800f904:	2000      	movs	r0, #0
 800f906:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f90a:	4770      	bx	lr

0800f90c <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800f90c:	3203      	adds	r2, #3
  for (i = 0U; i < count32b; i++)
 800f90e:	0892      	lsrs	r2, r2, #2
 800f910:	d00c      	beq.n	800f92c <USB_ReadPacket+0x20>
{
 800f912:	b410      	push	{r4}
 800f914:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
 800f918:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f91c:	6823      	ldr	r3, [r4, #0]
 800f91e:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0U; i < count32b; i++)
 800f922:	4281      	cmp	r1, r0
 800f924:	d1fa      	bne.n	800f91c <USB_ReadPacket+0x10>
}
 800f926:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f92a:	4770      	bx	lr
  uint32_t *pDest = (uint32_t *)dest;
 800f92c:	4608      	mov	r0, r1
}
 800f92e:	4770      	bx	lr

0800f930 <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 800f930:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800f932:	784a      	ldrb	r2, [r1, #1]
 800f934:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800f938:	3300      	adds	r3, #0
 800f93a:	bf18      	it	ne
 800f93c:	2301      	movne	r3, #1
 800f93e:	2a01      	cmp	r2, #1
 800f940:	d012      	beq.n	800f968 <USB_EPSetStall+0x38>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f942:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800f946:	2a00      	cmp	r2, #0
 800f948:	db06      	blt.n	800f958 <USB_EPSetStall+0x28>
 800f94a:	b12b      	cbz	r3, 800f958 <USB_EPSetStall+0x28>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f94c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800f950:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f954:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f958:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800f95c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f960:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800f964:	2000      	movs	r0, #0
 800f966:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f968:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800f96c:	2a00      	cmp	r2, #0
 800f96e:	db06      	blt.n	800f97e <USB_EPSetStall+0x4e>
 800f970:	b12b      	cbz	r3, 800f97e <USB_EPSetStall+0x4e>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f972:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800f976:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f97a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f97e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800f982:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f986:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800f98a:	2000      	movs	r0, #0
 800f98c:	4770      	bx	lr
 800f98e:	bf00      	nop

0800f990 <USB_EPClearStall>:
{
 800f990:	78cb      	ldrb	r3, [r1, #3]
 800f992:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 800f994:	7849      	ldrb	r1, [r1, #1]
 800f996:	3b02      	subs	r3, #2
 800f998:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 800f99c:	2901      	cmp	r1, #1
 800f99e:	b2db      	uxtb	r3, r3
 800f9a0:	d011      	beq.n	800f9c6 <USB_EPClearStall+0x36>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f9a2:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f9a6:	2b01      	cmp	r3, #1
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f9a8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800f9ac:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f9b0:	d901      	bls.n	800f9b6 <USB_EPClearStall+0x26>
}
 800f9b2:	2000      	movs	r0, #0
 800f9b4:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f9b6:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800f9ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f9be:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800f9c2:	2000      	movs	r0, #0
 800f9c4:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f9c6:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f9ca:	2b01      	cmp	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f9cc:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800f9d0:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f9d4:	d8ed      	bhi.n	800f9b2 <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f9d6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800f9da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f9de:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800f9e2:	2000      	movs	r0, #0
 800f9e4:	4770      	bx	lr
 800f9e6:	bf00      	nop

0800f9e8 <USB_SetDevAddress>:
{
 800f9e8:	4603      	mov	r3, r0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f9ea:	0109      	lsls	r1, r1, #4
}
 800f9ec:	2000      	movs	r0, #0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f9ee:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f9f2:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f9f6:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
 800f9fa:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f9fe:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 800fa02:	4311      	orrs	r1, r2
 800fa04:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
}
 800fa08:	4770      	bx	lr
 800fa0a:	bf00      	nop

0800fa0c <USB_DevConnect>:
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800fa0c:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  HAL_Delay(3U);
 800fa10:	2003      	movs	r0, #3
{
 800fa12:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800fa14:	6853      	ldr	r3, [r2, #4]
 800fa16:	f023 0302 	bic.w	r3, r3, #2
 800fa1a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800fa1c:	f7f5 fdae 	bl	800557c <HAL_Delay>
}
 800fa20:	2000      	movs	r0, #0
 800fa22:	bd08      	pop	{r3, pc}

0800fa24 <USB_DevDisconnect>:
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fa24:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  HAL_Delay(3U);
 800fa28:	2003      	movs	r0, #3
{
 800fa2a:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fa2c:	6853      	ldr	r3, [r2, #4]
 800fa2e:	f043 0302 	orr.w	r3, r3, #2
 800fa32:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800fa34:	f7f5 fda2 	bl	800557c <HAL_Delay>
}
 800fa38:	2000      	movs	r0, #0
 800fa3a:	bd08      	pop	{r3, pc}

0800fa3c <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800fa3c:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800fa3e:	6980      	ldr	r0, [r0, #24]
}
 800fa40:	4010      	ands	r0, r2
 800fa42:	4770      	bx	lr

0800fa44 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800fa44:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800fa48:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800fa4c:	69c0      	ldr	r0, [r0, #28]
 800fa4e:	4018      	ands	r0, r3
}
 800fa50:	0c00      	lsrs	r0, r0, #16
 800fa52:	4770      	bx	lr

0800fa54 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800fa54:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800fa58:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800fa5c:	69c0      	ldr	r0, [r0, #28]
 800fa5e:	4018      	ands	r0, r3
}
 800fa60:	b280      	uxth	r0, r0
 800fa62:	4770      	bx	lr

0800fa64 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800fa64:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800fa68:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800fa6c:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800fa70:	6940      	ldr	r0, [r0, #20]
}
 800fa72:	4010      	ands	r0, r2
 800fa74:	4770      	bx	lr
 800fa76:	bf00      	nop

0800fa78 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 800fa78:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800fa7c:	eb00 1041 	add.w	r0, r0, r1, lsl #5
{
 800fa80:	b410      	push	{r4}
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800fa82:	f001 040f 	and.w	r4, r1, #15
  msk = USBx_DEVICE->DIEPMSK;
 800fa86:	6911      	ldr	r1, [r2, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800fa88:	6b53      	ldr	r3, [r2, #52]	; 0x34
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800fa8a:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800fa8e:	40e3      	lsrs	r3, r4
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800fa90:	6880      	ldr	r0, [r0, #8]
}
 800fa92:	f85d 4b04 	ldr.w	r4, [sp], #4
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800fa96:	01db      	lsls	r3, r3, #7
 800fa98:	b2db      	uxtb	r3, r3
 800fa9a:	430b      	orrs	r3, r1
}
 800fa9c:	4018      	ands	r0, r3
 800fa9e:	4770      	bx	lr

0800faa0 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800faa0:	6940      	ldr	r0, [r0, #20]
}
 800faa2:	f000 0001 	and.w	r0, r0, #1
 800faa6:	4770      	bx	lr

0800faa8 <USB_ActivateSetup>:
{
 800faa8:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800faaa:	4a09      	ldr	r2, [pc, #36]	; (800fad0 <USB_ActivateSetup+0x28>)
}
 800faac:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800faae:	f503 6100 	add.w	r1, r3, #2048	; 0x800
{
 800fab2:	b410      	push	{r4}
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800fab4:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 800fab8:	4022      	ands	r2, r4
}
 800faba:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800fabe:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800fac2:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800fac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800faca:	604b      	str	r3, [r1, #4]
}
 800facc:	4770      	bx	lr
 800face:	bf00      	nop
 800fad0:	fffff800 	.word	0xfffff800

0800fad4 <USB_EP0_OutStart>:
{
 800fad4:	b430      	push	{r4, r5}
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800fad6:	4c12      	ldr	r4, [pc, #72]	; (800fb20 <USB_EP0_OutStart+0x4c>)
 800fad8:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800fadc:	6c05      	ldr	r5, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800fade:	42a5      	cmp	r5, r4
 800fae0:	d903      	bls.n	800faea <USB_EP0_OutStart+0x16>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fae2:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	; 0xb00
 800fae6:	2c00      	cmp	r4, #0
 800fae8:	db16      	blt.n	800fb18 <USB_EP0_OutStart+0x44>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800faea:	2400      	movs	r4, #0
  if (dma == 1U)
 800faec:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800faee:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800faf0:	691c      	ldr	r4, [r3, #16]
 800faf2:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800faf6:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800faf8:	691c      	ldr	r4, [r3, #16]
 800fafa:	f044 0418 	orr.w	r4, r4, #24
 800fafe:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800fb00:	691c      	ldr	r4, [r3, #16]
 800fb02:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 800fb06:	611c      	str	r4, [r3, #16]
  if (dma == 1U)
 800fb08:	d106      	bne.n	800fb18 <USB_EP0_OutStart+0x44>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800fb0a:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800fb0c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800fb10:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800fb14:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800fb18:	2000      	movs	r0, #0
 800fb1a:	bc30      	pop	{r4, r5}
 800fb1c:	4770      	bx	lr
 800fb1e:	bf00      	nop
 800fb20:	4f54300a 	.word	0x4f54300a

0800fb24 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800fb24:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800fb26:	4903      	ldr	r1, [pc, #12]	; (800fb34 <MX_FATFS_Init+0x10>)
 800fb28:	4803      	ldr	r0, [pc, #12]	; (800fb38 <MX_FATFS_Init+0x14>)
 800fb2a:	f001 f97f 	bl	8010e2c <FATFS_LinkDriver>
 800fb2e:	4b03      	ldr	r3, [pc, #12]	; (800fb3c <MX_FATFS_Init+0x18>)
 800fb30:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800fb32:	bd08      	pop	{r3, pc}
 800fb34:	20023484 	.word	0x20023484
 800fb38:	200002ac 	.word	0x200002ac
 800fb3c:	20023488 	.word	0x20023488

0800fb40 <USER_initialize>:
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800fb40:	4b02      	ldr	r3, [pc, #8]	; (800fb4c <USER_initialize+0xc>)
 800fb42:	2201      	movs	r2, #1
 800fb44:	701a      	strb	r2, [r3, #0]
    return Stat;
 800fb46:	7818      	ldrb	r0, [r3, #0]
  /* USER CODE END INIT */
}
 800fb48:	4770      	bx	lr
 800fb4a:	bf00      	nop
 800fb4c:	200002a8 	.word	0x200002a8

0800fb50 <USER_read>:
)
{
  /* USER CODE BEGIN READ */
    return RES_OK;
  /* USER CODE END READ */
}
 800fb50:	2000      	movs	r0, #0
 800fb52:	4770      	bx	lr

0800fb54 <USER_ioctl>:
{
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
    return res;
  /* USER CODE END IOCTL */
}
 800fb54:	2001      	movs	r0, #1
 800fb56:	4770      	bx	lr

0800fb58 <USER_write>:
 800fb58:	2000      	movs	r0, #0
 800fb5a:	4770      	bx	lr

0800fb5c <USER_status>:
 800fb5c:	4b02      	ldr	r3, [pc, #8]	; (800fb68 <USER_status+0xc>)
 800fb5e:	2201      	movs	r2, #1
 800fb60:	701a      	strb	r2, [r3, #0]
 800fb62:	7818      	ldrb	r0, [r3, #0]
 800fb64:	4770      	bx	lr
 800fb66:	bf00      	nop
 800fb68:	200002a8 	.word	0x200002a8

0800fb6c <MX_LWIP_Init>:
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800fb6c:	2100      	movs	r1, #0
{
 800fb6e:	b5f0      	push	{r4, r5, r6, r7, lr}
  tcpip_init( NULL, NULL );
 800fb70:	4608      	mov	r0, r1
{
 800fb72:	b08f      	sub	sp, #60	; 0x3c
  tcpip_init( NULL, NULL );
 800fb74:	f003 fdae 	bl	80136d4 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800fb78:	2400      	movs	r4, #0
  netmask.addr = 0;
 800fb7a:	4f20      	ldr	r7, [pc, #128]	; (800fbfc <MX_LWIP_Init+0x90>)
  gw.addr = 0;

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800fb7c:	4b20      	ldr	r3, [pc, #128]	; (800fc00 <MX_LWIP_Init+0x94>)
 800fb7e:	4e21      	ldr	r6, [pc, #132]	; (800fc04 <MX_LWIP_Init+0x98>)
 800fb80:	463a      	mov	r2, r7
 800fb82:	9302      	str	r3, [sp, #8]
 800fb84:	9400      	str	r4, [sp, #0]
  ipaddr.addr = 0;
 800fb86:	4820      	ldr	r0, [pc, #128]	; (800fc08 <MX_LWIP_Init+0x9c>)
  netmask.addr = 0;
 800fb88:	603c      	str	r4, [r7, #0]
  gw.addr = 0;
 800fb8a:	4d20      	ldr	r5, [pc, #128]	; (800fc0c <MX_LWIP_Init+0xa0>)
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800fb8c:	4601      	mov	r1, r0
 800fb8e:	4f20      	ldr	r7, [pc, #128]	; (800fc10 <MX_LWIP_Init+0xa4>)
 800fb90:	462b      	mov	r3, r5
  ipaddr.addr = 0;
 800fb92:	6004      	str	r4, [r0, #0]
  gw.addr = 0;
 800fb94:	602c      	str	r4, [r5, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800fb96:	4630      	mov	r0, r6
 800fb98:	9701      	str	r7, [sp, #4]
 800fb9a:	f006 fb97 	bl	80162cc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800fb9e:	4630      	mov	r0, r6
 800fba0:	f006 fc40 	bl	8016424 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800fba4:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800fba8:	4630      	mov	r0, r6
  if (netif_is_link_up(&gnetif))
 800fbaa:	075b      	lsls	r3, r3, #29
 800fbac:	d422      	bmi.n	800fbf4 <MX_LWIP_Init+0x88>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800fbae:	f006 fc61 	bl	8016474 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800fbb2:	4918      	ldr	r1, [pc, #96]	; (800fc14 <MX_LWIP_Init+0xa8>)

  link_arg.netif = &gnetif;
  link_arg.semaphore = Netif_LinkSemaphore;
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 800fbb4:	ac07      	add	r4, sp, #28
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800fbb6:	4813      	ldr	r0, [pc, #76]	; (800fc04 <MX_LWIP_Init+0x98>)
 800fbb8:	f006 fcc4 	bl	8016544 <netif_set_link_callback>
  osSemaphoreDef(Netif_SEM);
 800fbbc:	2300      	movs	r3, #0
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 800fbbe:	2101      	movs	r1, #1
 800fbc0:	a805      	add	r0, sp, #20
  link_arg.netif = &gnetif;
 800fbc2:	4f15      	ldr	r7, [pc, #84]	; (800fc18 <MX_LWIP_Init+0xac>)
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 800fbc4:	4d15      	ldr	r5, [pc, #84]	; (800fc1c <MX_LWIP_Init+0xb0>)
  osSemaphoreDef(Netif_SEM);
 800fbc6:	e9cd 3305 	strd	r3, r3, [sp, #20]
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 800fbca:	f001 fa0f 	bl	8010fec <osSemaphoreCreate>
 800fbce:	4b14      	ldr	r3, [pc, #80]	; (800fc20 <MX_LWIP_Init+0xb4>)
  link_arg.semaphore = Netif_LinkSemaphore;
 800fbd0:	6078      	str	r0, [r7, #4]
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 800fbd2:	6018      	str	r0, [r3, #0]
  link_arg.netif = &gnetif;
 800fbd4:	603e      	str	r6, [r7, #0]
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 800fbd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fbd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fbda:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fbde:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 800fbe2:	4639      	mov	r1, r7
 800fbe4:	a807      	add	r0, sp, #28
 800fbe6:	f001 f955 	bl	8010e94 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800fbea:	4806      	ldr	r0, [pc, #24]	; (800fc04 <MX_LWIP_Init+0x98>)
 800fbec:	f00d fa9c 	bl	801d128 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800fbf0:	b00f      	add	sp, #60	; 0x3c
 800fbf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    netif_set_up(&gnetif);
 800fbf4:	f006 fc1c 	bl	8016430 <netif_set_up>
 800fbf8:	e7db      	b.n	800fbb2 <MX_LWIP_Init+0x46>
 800fbfa:	bf00      	nop
 800fbfc:	20023938 	.word	0x20023938
 800fc00:	0801364d 	.word	0x0801364d
 800fc04:	200238f8 	.word	0x200238f8
 800fc08:	20023934 	.word	0x20023934
 800fc0c:	2002393c 	.word	0x2002393c
 800fc10:	0800ff21 	.word	0x0800ff21
 800fc14:	08010111 	.word	0x08010111
 800fc18:	200238f0 	.word	0x200238f0
 800fc1c:	080248b4 	.word	0x080248b4
 800fc20:	200016dc 	.word	0x200016dc

0800fc24 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800fc24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800fc28:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 800fcdc <low_level_output+0xb8>
{
 800fc2c:	b083      	sub	sp, #12
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800fc2e:	468b      	mov	fp, r1
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800fc30:	f8da 402c 	ldr.w	r4, [sl, #44]	; 0x2c
 800fc34:	68a3      	ldr	r3, [r4, #8]
  for(q = p; q != NULL; q = q->next)
 800fc36:	2900      	cmp	r1, #0
 800fc38:	d048      	beq.n	800fccc <low_level_output+0xa8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800fc3a:	6822      	ldr	r2, [r4, #0]
 800fc3c:	2a00      	cmp	r2, #0
 800fc3e:	db1f      	blt.n	800fc80 <low_level_output+0x5c>
  bufferoffset = 0;
 800fc40:	2000      	movs	r0, #0
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800fc42:	f240 59f4 	movw	r9, #1524	; 0x5f4
  uint32_t framelength = 0;
 800fc46:	4680      	mov	r8, r0
      byteslefttocopy = q->len;
 800fc48:	f8bb 200a 	ldrh.w	r2, [fp, #10]
      payloadoffset = 0;
 800fc4c:	2700      	movs	r7, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800fc4e:	1816      	adds	r6, r2, r0
 800fc50:	454e      	cmp	r6, r9
 800fc52:	d803      	bhi.n	800fc5c <low_level_output+0x38>
 800fc54:	e027      	b.n	800fca6 <low_level_output+0x82>
 800fc56:	454e      	cmp	r6, r9
        {
          errval = ERR_USE;
          goto error;
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800fc58:	68a3      	ldr	r3, [r4, #8]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800fc5a:	d923      	bls.n	800fca4 <low_level_output+0x80>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800fc5c:	eba9 0500 	sub.w	r5, r9, r0
 800fc60:	f8db 1004 	ldr.w	r1, [fp, #4]
 800fc64:	4418      	add	r0, r3

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800fc66:	f2a6 56f4 	subw	r6, r6, #1524	; 0x5f4
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800fc6a:	4439      	add	r1, r7
 800fc6c:	462a      	mov	r2, r5
 800fc6e:	f00f ff06 	bl	801fa7e <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800fc72:	68e4      	ldr	r4, [r4, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
        bufferoffset = 0;
 800fc74:	2000      	movs	r0, #0
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800fc76:	442f      	add	r7, r5
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800fc78:	6823      	ldr	r3, [r4, #0]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800fc7a:	44a8      	add	r8, r5
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800fc7c:	4283      	cmp	r3, r0
 800fc7e:	daea      	bge.n	800fc56 <low_level_output+0x32>
        errval = ERR_USE;
 800fc80:	f06f 0007 	mvn.w	r0, #7
  errval = ERR_OK;

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800fc84:	f8da 3000 	ldr.w	r3, [sl]
 800fc88:	f241 0214 	movw	r2, #4116	; 0x1014
 800fc8c:	5899      	ldr	r1, [r3, r2]
 800fc8e:	0689      	lsls	r1, r1, #26
 800fc90:	d505      	bpl.n	800fc9e <low_level_output+0x7a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800fc92:	2520      	movs	r5, #32

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800fc94:	f241 0104 	movw	r1, #4100	; 0x1004
 800fc98:	2400      	movs	r4, #0
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800fc9a:	509d      	str	r5, [r3, r2]
    heth.Instance->DMATPDR = 0;
 800fc9c:	505c      	str	r4, [r3, r1]
  }
  return errval;
}
 800fc9e:	b003      	add	sp, #12
 800fca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800fca4:	4632      	mov	r2, r6
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800fca6:	f8db 1004 	ldr.w	r1, [fp, #4]
 800fcaa:	4418      	add	r0, r3
 800fcac:	9301      	str	r3, [sp, #4]
      framelength = framelength + byteslefttocopy;
 800fcae:	4490      	add	r8, r2
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800fcb0:	4439      	add	r1, r7
 800fcb2:	f00f fee4 	bl	801fa7e <memcpy>
  for(q = p; q != NULL; q = q->next)
 800fcb6:	f8db b000 	ldr.w	fp, [fp]
 800fcba:	9b01      	ldr	r3, [sp, #4]
 800fcbc:	f1bb 0f00 	cmp.w	fp, #0
 800fcc0:	d005      	beq.n	800fcce <low_level_output+0xaa>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800fcc2:	6822      	ldr	r2, [r4, #0]
 800fcc4:	4630      	mov	r0, r6
 800fcc6:	2a00      	cmp	r2, #0
 800fcc8:	dabe      	bge.n	800fc48 <low_level_output+0x24>
 800fcca:	e7d9      	b.n	800fc80 <low_level_output+0x5c>
  uint32_t framelength = 0;
 800fccc:	4688      	mov	r8, r1
  HAL_ETH_TransmitFrame(&heth, framelength);
 800fcce:	4641      	mov	r1, r8
 800fcd0:	4802      	ldr	r0, [pc, #8]	; (800fcdc <low_level_output+0xb8>)
 800fcd2:	f7f7 fd49 	bl	8007768 <HAL_ETH_TransmitFrame>
  errval = ERR_OK;
 800fcd6:	2000      	movs	r0, #0
 800fcd8:	e7d4      	b.n	800fc84 <low_level_output+0x60>
 800fcda:	bf00      	nop
 800fcdc:	20025210 	.word	0x20025210

0800fce0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800fce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fce4:	f8df a10c 	ldr.w	sl, [pc, #268]	; 800fdf4 <ethernetif_input+0x114>
 800fce8:	b083      	sub	sp, #12
 800fcea:	9001      	str	r0, [sp, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800fcec:	4b3f      	ldr	r3, [pc, #252]	; (800fdec <ethernetif_input+0x10c>)
 800fcee:	f04f 31ff 	mov.w	r1, #4294967295
 800fcf2:	6818      	ldr	r0, [r3, #0]
 800fcf4:	f001 f9a4 	bl	8011040 <osSemaphoreWait>
 800fcf8:	2800      	cmp	r0, #0
 800fcfa:	d1f7      	bne.n	800fcec <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 800fcfc:	483c      	ldr	r0, [pc, #240]	; (800fdf0 <ethernetif_input+0x110>)
 800fcfe:	f00f faaf 	bl	801f260 <sys_mutex_lock>
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800fd02:	483c      	ldr	r0, [pc, #240]	; (800fdf4 <ethernetif_input+0x114>)
 800fd04:	f7f7 fdae 	bl	8007864 <HAL_ETH_GetReceivedFrame_IT>
 800fd08:	4604      	mov	r4, r0
 800fd0a:	2800      	cmp	r0, #0
 800fd0c:	d169      	bne.n	800fde2 <ethernetif_input+0x102>
  len = heth.RxFrameInfos.length;
 800fd0e:	f8ba 103c 	ldrh.w	r1, [sl, #60]	; 0x3c
  if (len > 0)
 800fd12:	bb71      	cbnz	r1, 800fd72 <ethernetif_input+0x92>
  struct pbuf *p = NULL;
 800fd14:	2300      	movs	r3, #0
 800fd16:	9300      	str	r3, [sp, #0]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800fd18:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800fd1c:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800fd20:	b140      	cbz	r0, 800fd34 <ethernetif_input+0x54>
 800fd22:	2100      	movs	r1, #0
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800fd24:	681a      	ldr	r2, [r3, #0]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800fd26:	3101      	adds	r1, #1
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800fd28:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800fd2c:	4281      	cmp	r1, r0
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800fd2e:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800fd30:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800fd32:	d1f7      	bne.n	800fd24 <ethernetif_input+0x44>
    heth.RxFrameInfos.SegCount =0;
 800fd34:	2100      	movs	r1, #0
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800fd36:	f8da 3000 	ldr.w	r3, [sl]
 800fd3a:	f241 0214 	movw	r2, #4116	; 0x1014
    heth.RxFrameInfos.SegCount =0;
 800fd3e:	f8ca 1038 	str.w	r1, [sl, #56]	; 0x38
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800fd42:	5899      	ldr	r1, [r3, r2]
 800fd44:	0609      	lsls	r1, r1, #24
 800fd46:	d505      	bpl.n	800fd54 <ethernetif_input+0x74>
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800fd48:	2080      	movs	r0, #128	; 0x80
    heth.Instance->DMARPDR = 0;
 800fd4a:	f241 0108 	movw	r1, #4104	; 0x1008
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800fd4e:	5098      	str	r0, [r3, r2]
    heth.Instance->DMARPDR = 0;
 800fd50:	2200      	movs	r2, #0
 800fd52:	505a      	str	r2, [r3, r1]
        p = low_level_input( netif );
        if   (p != NULL)
 800fd54:	9800      	ldr	r0, [sp, #0]
 800fd56:	2800      	cmp	r0, #0
 800fd58:	d043      	beq.n	800fde2 <ethernetif_input+0x102>
        {
          if (netif->input( p, netif) != ERR_OK )
 800fd5a:	9901      	ldr	r1, [sp, #4]
 800fd5c:	690b      	ldr	r3, [r1, #16]
 800fd5e:	4798      	blx	r3
 800fd60:	b918      	cbnz	r0, 800fd6a <ethernetif_input+0x8a>
          {
            pbuf_free(p);
          }
        }
        UNLOCK_TCPIP_CORE();
 800fd62:	4823      	ldr	r0, [pc, #140]	; (800fdf0 <ethernetif_input+0x110>)
 800fd64:	f00f fa82 	bl	801f26c <sys_mutex_unlock>
 800fd68:	e7c8      	b.n	800fcfc <ethernetif_input+0x1c>
            pbuf_free(p);
 800fd6a:	9800      	ldr	r0, [sp, #0]
 800fd6c:	f006 fcd4 	bl	8016718 <pbuf_free>
 800fd70:	e7f7      	b.n	800fd62 <ethernetif_input+0x82>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800fd72:	f44f 72c1 	mov.w	r2, #386	; 0x182
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800fd76:	f8da 5040 	ldr.w	r5, [sl, #64]	; 0x40
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800fd7a:	f006 fd3b 	bl	80167f4 <pbuf_alloc>
  if (p != NULL)
 800fd7e:	9000      	str	r0, [sp, #0]
 800fd80:	2800      	cmp	r0, #0
 800fd82:	d0c7      	beq.n	800fd14 <ethernetif_input+0x34>
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800fd84:	46a8      	mov	r8, r5
    bufferoffset = 0;
 800fd86:	4621      	mov	r1, r4
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800fd88:	f8da 6030 	ldr.w	r6, [sl, #48]	; 0x30
 800fd8c:	4683      	mov	fp, r0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800fd8e:	f240 59f4 	movw	r9, #1524	; 0x5f4
      byteslefttocopy = q->len;
 800fd92:	f8bb 200a 	ldrh.w	r2, [fp, #10]
      payloadoffset = 0;
 800fd96:	2500      	movs	r5, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800fd98:	1854      	adds	r4, r2, r1
 800fd9a:	454c      	cmp	r4, r9
 800fd9c:	d914      	bls.n	800fdc8 <ethernetif_input+0xe8>
      payloadoffset = 0;
 800fd9e:	4643      	mov	r3, r8
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800fda0:	eba9 0701 	sub.w	r7, r9, r1
 800fda4:	f8db 0004 	ldr.w	r0, [fp, #4]
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800fda8:	f2a4 54f4 	subw	r4, r4, #1524	; 0x5f4
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800fdac:	4419      	add	r1, r3
 800fdae:	4428      	add	r0, r5
 800fdb0:	463a      	mov	r2, r7
 800fdb2:	f00f fe64 	bl	801fa7e <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800fdb6:	68f6      	ldr	r6, [r6, #12]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800fdb8:	454c      	cmp	r4, r9
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800fdba:	443d      	add	r5, r7
        bufferoffset = 0;
 800fdbc:	f04f 0100 	mov.w	r1, #0
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800fdc0:	68b3      	ldr	r3, [r6, #8]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800fdc2:	d8ed      	bhi.n	800fda0 <ethernetif_input+0xc0>
 800fdc4:	4698      	mov	r8, r3
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800fdc6:	4622      	mov	r2, r4
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800fdc8:	f8db 0004 	ldr.w	r0, [fp, #4]
 800fdcc:	4441      	add	r1, r8
 800fdce:	4428      	add	r0, r5
 800fdd0:	f00f fe55 	bl	801fa7e <memcpy>
    for(q = p; q != NULL; q = q->next)
 800fdd4:	f8db b000 	ldr.w	fp, [fp]
 800fdd8:	4621      	mov	r1, r4
 800fdda:	f1bb 0f00 	cmp.w	fp, #0
 800fdde:	d1d8      	bne.n	800fd92 <ethernetif_input+0xb2>
 800fde0:	e79a      	b.n	800fd18 <ethernetif_input+0x38>
        UNLOCK_TCPIP_CORE();
 800fde2:	4803      	ldr	r0, [pc, #12]	; (800fdf0 <ethernetif_input+0x110>)
 800fde4:	f00f fa42 	bl	801f26c <sys_mutex_unlock>
 800fde8:	e780      	b.n	800fcec <ethernetif_input+0xc>
 800fdea:	bf00      	nop
 800fdec:	200016e0 	.word	0x200016e0
 800fdf0:	20026a68 	.word	0x20026a68
 800fdf4:	20025210 	.word	0x20025210

0800fdf8 <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 800fdf8:	6802      	ldr	r2, [r0, #0]
 800fdfa:	4b41      	ldr	r3, [pc, #260]	; (800ff00 <HAL_ETH_MspInit+0x108>)
{
 800fdfc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(ethHandle->Instance==ETH)
 800fdfe:	429a      	cmp	r2, r3
{
 800fe00:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fe02:	f04f 0400 	mov.w	r4, #0
 800fe06:	e9cd 4407 	strd	r4, r4, [sp, #28]
 800fe0a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 800fe0e:	940b      	str	r4, [sp, #44]	; 0x2c
  if(ethHandle->Instance==ETH)
 800fe10:	d001      	beq.n	800fe16 <HAL_ETH_MspInit+0x1e>
}
 800fe12:	b00d      	add	sp, #52	; 0x34
 800fe14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH_CLK_ENABLE();
 800fe16:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fe1a:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800fe1c:	2032      	movs	r0, #50	; 0x32
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fe1e:	2603      	movs	r6, #3
    __HAL_RCC_ETH_CLK_ENABLE();
 800fe20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800fe22:	250b      	movs	r5, #11
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800fe24:	a907      	add	r1, sp, #28
    __HAL_RCC_ETH_CLK_ENABLE();
 800fe26:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800fe2a:	631a      	str	r2, [r3, #48]	; 0x30
 800fe2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fe2e:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800fe32:	9200      	str	r2, [sp, #0]
 800fe34:	9a00      	ldr	r2, [sp, #0]
 800fe36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fe38:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800fe3c:	631a      	str	r2, [r3, #48]	; 0x30
 800fe3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fe40:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800fe44:	9201      	str	r2, [sp, #4]
 800fe46:	9a01      	ldr	r2, [sp, #4]
 800fe48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fe4a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800fe4e:	631a      	str	r2, [r3, #48]	; 0x30
 800fe50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fe52:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800fe56:	9202      	str	r2, [sp, #8]
 800fe58:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800fe5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fe5c:	f042 0204 	orr.w	r2, r2, #4
 800fe60:	631a      	str	r2, [r3, #48]	; 0x30
 800fe62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fe64:	f002 0204 	and.w	r2, r2, #4
 800fe68:	9203      	str	r2, [sp, #12]
 800fe6a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fe6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fe6e:	f042 0201 	orr.w	r2, r2, #1
 800fe72:	631a      	str	r2, [r3, #48]	; 0x30
 800fe74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fe76:	f002 0201 	and.w	r2, r2, #1
 800fe7a:	9204      	str	r2, [sp, #16]
 800fe7c:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800fe7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fe80:	433a      	orrs	r2, r7
 800fe82:	631a      	str	r2, [r3, #48]	; 0x30
 800fe84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fe86:	403a      	ands	r2, r7
 800fe88:	9205      	str	r2, [sp, #20]
 800fe8a:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800fe8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fe8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fe92:	631a      	str	r2, [r3, #48]	; 0x30
 800fe94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800fe96:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800fe98:	f003 0340 	and.w	r3, r3, #64	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800fe9c:	4819      	ldr	r0, [pc, #100]	; (800ff04 <HAL_ETH_MspInit+0x10c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fe9e:	9708      	str	r7, [sp, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800fea0:	9306      	str	r3, [sp, #24]
 800fea2:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800fea4:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800fea8:	f7f8 fa26 	bl	80082f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800feac:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800feae:	a907      	add	r1, sp, #28
 800feb0:	4815      	ldr	r0, [pc, #84]	; (800ff08 <HAL_ETH_MspInit+0x110>)
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800feb2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800feb4:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800feb6:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800feb8:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800febc:	f7f8 fa1c 	bl	80082f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800fec0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800fec4:	a907      	add	r1, sp, #28
 800fec6:	4811      	ldr	r0, [pc, #68]	; (800ff0c <HAL_ETH_MspInit+0x114>)
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800fec8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800feca:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fecc:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800fece:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800fed2:	f7f8 fa11 	bl	80082f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800fed6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800feda:	a907      	add	r1, sp, #28
 800fedc:	480c      	ldr	r0, [pc, #48]	; (800ff10 <HAL_ETH_MspInit+0x118>)
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800fede:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fee0:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fee2:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800fee4:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800fee8:	f7f8 fa06 	bl	80082f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 6, 0);
 800feec:	4622      	mov	r2, r4
 800feee:	2106      	movs	r1, #6
 800fef0:	203d      	movs	r0, #61	; 0x3d
 800fef2:	f7f5 ff9d 	bl	8005e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800fef6:	203d      	movs	r0, #61	; 0x3d
 800fef8:	f7f5 ffe0 	bl	8005ebc <HAL_NVIC_EnableIRQ>
}
 800fefc:	b00d      	add	sp, #52	; 0x34
 800fefe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff00:	40028000 	.word	0x40028000
 800ff04:	40020800 	.word	0x40020800
 800ff08:	40020000 	.word	0x40020000
 800ff0c:	40020400 	.word	0x40020400
 800ff10:	40021800 	.word	0x40021800

0800ff14 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(s_xSemaphore);
 800ff14:	4b01      	ldr	r3, [pc, #4]	; (800ff1c <HAL_ETH_RxCpltCallback+0x8>)
 800ff16:	6818      	ldr	r0, [r3, #0]
 800ff18:	f001 b8be 	b.w	8011098 <osSemaphoreRelease>
 800ff1c:	200016e0 	.word	0x200016e0

0800ff20 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800ff20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800ff24:	4604      	mov	r4, r0
{
 800ff26:	b08d      	sub	sp, #52	; 0x34
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800ff28:	2800      	cmp	r0, #0
 800ff2a:	f000 8099 	beq.w	8010060 <ethernetif_init+0x140>
  uint32_t regvalue = 0;
 800ff2e:	f04f 0800 	mov.w	r8, #0
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800ff32:	f247 4073 	movw	r0, #29811	; 0x7473
  MACAddr[0] = 0x00;
 800ff36:	a90c      	add	r1, sp, #48	; 0x30
 800ff38:	4b4d      	ldr	r3, [pc, #308]	; (8010070 <ethernetif_init+0x150>)
  heth.Instance = ETH;
 800ff3a:	4d4e      	ldr	r5, [pc, #312]	; (8010074 <ethernetif_init+0x154>)
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800ff3c:	f44f 0900 	mov.w	r9, #8388608	; 0x800000
  heth.Instance = ETH;
 800ff40:	4a4d      	ldr	r2, [pc, #308]	; (8010078 <ethernetif_init+0x158>)
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 800ff42:	f8df e168 	ldr.w	lr, [pc, #360]	; 80100ac <ethernetif_init+0x18c>
 800ff46:	4f4d      	ldr	r7, [pc, #308]	; (801007c <ethernetif_init+0x15c>)
  netif->name[0] = IFNAME0;
 800ff48:	86e0      	strh	r0, [r4, #54]	; 0x36
  uint32_t regvalue = 0;
 800ff4a:	f8cd 8000 	str.w	r8, [sp]
  MACAddr[0] = 0x00;
 800ff4e:	f841 3d2c 	str.w	r3, [r1, #-44]!
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 800ff52:	683e      	ldr	r6, [r7, #0]
 800ff54:	f8de 3000 	ldr.w	r3, [lr]
 800ff58:	4849      	ldr	r0, [pc, #292]	; (8010080 <ethernetif_init+0x160>)
  heth.Instance = ETH;
 800ff5a:	602a      	str	r2, [r5, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800ff5c:	2201      	movs	r2, #1
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 800ff5e:	4073      	eors	r3, r6
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800ff60:	f8a5 8010 	strh.w	r8, [r5, #16]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800ff64:	606a      	str	r2, [r5, #4]
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 800ff66:	6806      	ldr	r6, [r0, #0]
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800ff68:	f8df 8144 	ldr.w	r8, [pc, #324]	; 80100b0 <ethernetif_init+0x190>
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 800ff6c:	4073      	eors	r3, r6
 800ff6e:	f88d 3009 	strb.w	r3, [sp, #9]
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 800ff72:	683f      	ldr	r7, [r7, #0]
 800ff74:	f8de 3000 	ldr.w	r3, [lr]
 800ff78:	f8d0 c000 	ldr.w	ip, [r0]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800ff7c:	4628      	mov	r0, r5
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 800ff7e:	407b      	eors	r3, r7

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800ff80:	4f40      	ldr	r7, [pc, #256]	; (8010084 <ethernetif_init+0x164>)
  netif->output = etharp_output;
 800ff82:	f8c4 8014 	str.w	r8, [r4, #20]
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 800ff86:	ea83 030c 	eor.w	r3, r3, ip
  netif->linkoutput = low_level_output;
 800ff8a:	61a7      	str	r7, [r4, #24]
  heth.Init.MACAddr = &MACAddr[0];
 800ff8c:	6169      	str	r1, [r5, #20]
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 800ff8e:	f88d 3008 	strb.w	r3, [sp, #8]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800ff92:	f8c5 9020 	str.w	r9, [r5, #32]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_SOFTWARE;
 800ff96:	e9c5 2206 	strd	r2, r2, [r5, #24]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800ff9a:	f7f7 fd83 	bl	8007aa4 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 800ff9e:	b928      	cbnz	r0, 800ffac <ethernetif_init+0x8c>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800ffa0:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800ffa4:	f043 0304 	orr.w	r3, r3, #4
 800ffa8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800ffac:	2304      	movs	r3, #4
 800ffae:	4a36      	ldr	r2, [pc, #216]	; (8010088 <ethernetif_init+0x168>)
 800ffb0:	4936      	ldr	r1, [pc, #216]	; (801008c <ethernetif_init+0x16c>)
  osSemaphoreDef(SEM);
 800ffb2:	2700      	movs	r7, #0
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800ffb4:	482f      	ldr	r0, [pc, #188]	; (8010074 <ethernetif_init+0x154>)
 800ffb6:	f7f7 fb4b 	bl	8007650 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800ffba:	2304      	movs	r3, #4
 800ffbc:	4a34      	ldr	r2, [pc, #208]	; (8010090 <ethernetif_init+0x170>)
 800ffbe:	4935      	ldr	r1, [pc, #212]	; (8010094 <ethernetif_init+0x174>)
 800ffc0:	482c      	ldr	r0, [pc, #176]	; (8010074 <ethernetif_init+0x154>)
 800ffc2:	f7f7 fb8f 	bl	80076e4 <HAL_ETH_DMARxDescListInit>
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800ffc6:	696b      	ldr	r3, [r5, #20]
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800ffc8:	2006      	movs	r0, #6
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800ffca:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  netif->mtu = 1500;
 800ffce:	f240 55dc 	movw	r5, #1500	; 0x5dc
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800ffd2:	2101      	movs	r1, #1
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800ffd4:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800ffd8:	f042 020a 	orr.w	r2, r2, #10
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800ffdc:	781e      	ldrb	r6, [r3, #0]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800ffde:	a803      	add	r0, sp, #12
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800ffe0:	f884 602e 	strb.w	r6, [r4, #46]	; 0x2e
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800ffe4:	785e      	ldrb	r6, [r3, #1]
 800ffe6:	f884 602f 	strb.w	r6, [r4, #47]	; 0x2f
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800ffea:	789e      	ldrb	r6, [r3, #2]
 800ffec:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800fff0:	78de      	ldrb	r6, [r3, #3]
  osSemaphoreDef(SEM);
 800fff2:	9703      	str	r7, [sp, #12]
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800fff4:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800fff8:	791e      	ldrb	r6, [r3, #4]
 800fffa:	f884 6032 	strb.w	r6, [r4, #50]	; 0x32
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800fffe:	795b      	ldrb	r3, [r3, #5]
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8010000:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8010004:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  netif->mtu = 1500;
 8010008:	85a5      	strh	r5, [r4, #44]	; 0x2c
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 801000a:	ad05      	add	r5, sp, #20
  osSemaphoreDef(SEM);
 801000c:	9704      	str	r7, [sp, #16]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 801000e:	f000 ffed 	bl	8010fec <osSemaphoreCreate>
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8010012:	4e21      	ldr	r6, [pc, #132]	; (8010098 <ethernetif_init+0x178>)
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8010014:	4b21      	ldr	r3, [pc, #132]	; (801009c <ethernetif_init+0x17c>)
 8010016:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8010018:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801001a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801001c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8010020:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8010024:	4621      	mov	r1, r4
 8010026:	a805      	add	r0, sp, #20
 8010028:	f000 ff34 	bl	8010e94 <osThreadCreate>
  HAL_ETH_Start(&heth);
 801002c:	4811      	ldr	r0, [pc, #68]	; (8010074 <ethernetif_init+0x154>)
 801002e:	f7f7 fe8f 	bl	8007d50 <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8010032:	466a      	mov	r2, sp
 8010034:	211d      	movs	r1, #29
 8010036:	480f      	ldr	r0, [pc, #60]	; (8010074 <ethernetif_init+0x154>)
 8010038:	f7f7 fca4 	bl	8007984 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 801003c:	9b00      	ldr	r3, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 801003e:	211d      	movs	r1, #29
 8010040:	480c      	ldr	r0, [pc, #48]	; (8010074 <ethernetif_init+0x154>)
  regvalue |= (PHY_ISFR_INT4);
 8010042:	f043 030b 	orr.w	r3, r3, #11
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8010046:	461a      	mov	r2, r3
  regvalue |= (PHY_ISFR_INT4);
 8010048:	9300      	str	r3, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 801004a:	f7f7 fce3 	bl	8007a14 <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 801004e:	466a      	mov	r2, sp
 8010050:	211d      	movs	r1, #29
 8010052:	4808      	ldr	r0, [pc, #32]	; (8010074 <ethernetif_init+0x154>)
 8010054:	f7f7 fc96 	bl	8007984 <HAL_ETH_ReadPHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 8010058:	4638      	mov	r0, r7
 801005a:	b00d      	add	sp, #52	; 0x34
 801005c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8010060:	4b0f      	ldr	r3, [pc, #60]	; (80100a0 <ethernetif_init+0x180>)
 8010062:	f240 2237 	movw	r2, #567	; 0x237
 8010066:	490f      	ldr	r1, [pc, #60]	; (80100a4 <ethernetif_init+0x184>)
 8010068:	480f      	ldr	r0, [pc, #60]	; (80100a8 <ethernetif_init+0x188>)
 801006a:	f010 fcad 	bl	80209c8 <iprintf>
 801006e:	e75e      	b.n	800ff2e <ethernetif_init+0xe>
 8010070:	00e18000 	.word	0x00e18000
 8010074:	20025210 	.word	0x20025210
 8010078:	40028000 	.word	0x40028000
 801007c:	1ff0f424 	.word	0x1ff0f424
 8010080:	1ff0f428 	.word	0x1ff0f428
 8010084:	0800fc25 	.word	0x0800fc25
 8010088:	20025258 	.word	0x20025258
 801008c:	20023940 	.word	0x20023940
 8010090:	200239c0 	.word	0x200239c0
 8010094:	20025190 	.word	0x20025190
 8010098:	080248d0 	.word	0x080248d0
 801009c:	200016e0 	.word	0x200016e0
 80100a0:	08026950 	.word	0x08026950
 80100a4:	0802696c 	.word	0x0802696c
 80100a8:	0802697c 	.word	0x0802697c
 80100ac:	1ff0f420 	.word	0x1ff0f420
 80100b0:	0801dc29 	.word	0x0801dc29

080100b4 <sys_now>:
 80100b4:	f7f5 ba5c 	b.w	8005570 <HAL_GetTick>

080100b8 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 80100b8:	b570      	push	{r4, r5, r6, lr}
 80100ba:	b082      	sub	sp, #8
  uint32_t regvalue = 0;
 80100bc:	2300      	movs	r3, #0
{
 80100be:	4606      	mov	r6, r0
  struct link_str *link_arg = (struct link_str *)argument;

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80100c0:	4d11      	ldr	r5, [pc, #68]	; (8010108 <ethernetif_set_link+0x50>)
  uint32_t regvalue = 0;
 80100c2:	ac02      	add	r4, sp, #8
 80100c4:	f844 3d04 	str.w	r3, [r4, #-4]!
 80100c8:	e005      	b.n	80100d6 <ethernetif_set_link+0x1e>

    regvalue &= PHY_LINKED_STATUS;

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 80100ca:	b9cb      	cbnz	r3, 8010100 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 80100cc:	0753      	lsls	r3, r2, #29
 80100ce:	d414      	bmi.n	80100fa <ethernetif_set_link+0x42>
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 80100d0:	20c8      	movs	r0, #200	; 0xc8
 80100d2:	f000 ff09 	bl	8010ee8 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80100d6:	4622      	mov	r2, r4
 80100d8:	2101      	movs	r1, #1
 80100da:	4628      	mov	r0, r5
 80100dc:	f7f7 fc52 	bl	8007984 <HAL_ETH_ReadPHYRegister>
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 80100e0:	6830      	ldr	r0, [r6, #0]
    regvalue &= PHY_LINKED_STATUS;
 80100e2:	9b01      	ldr	r3, [sp, #4]
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 80100e4:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
    regvalue &= PHY_LINKED_STATUS;
 80100e8:	f003 0304 	and.w	r3, r3, #4
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 80100ec:	0751      	lsls	r1, r2, #29
    regvalue &= PHY_LINKED_STATUS;
 80100ee:	9301      	str	r3, [sp, #4]
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 80100f0:	d5eb      	bpl.n	80100ca <ethernetif_set_link+0x12>
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 80100f2:	0752      	lsls	r2, r2, #29
 80100f4:	d5ec      	bpl.n	80100d0 <ethernetif_set_link+0x18>
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d1ea      	bne.n	80100d0 <ethernetif_set_link+0x18>
      netif_set_link_down(link_arg->netif);
 80100fa:	f006 fa09 	bl	8016510 <netif_set_link_down>
 80100fe:	e7e7      	b.n	80100d0 <ethernetif_set_link+0x18>
      netif_set_link_up(link_arg->netif);
 8010100:	f006 f9e0 	bl	80164c4 <netif_set_link_up>
 8010104:	e7e4      	b.n	80100d0 <ethernetif_set_link+0x18>
 8010106:	bf00      	nop
 8010108:	20025210 	.word	0x20025210

0801010c <ethernetif_notify_conn_changed>:
{
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 801010c:	4770      	bx	lr
 801010e:	bf00      	nop

08010110 <ethernetif_update_config>:
{
 8010110:	b570      	push	{r4, r5, r6, lr}
  if(netif_is_link_up(netif))
 8010112:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
{
 8010116:	b082      	sub	sp, #8
  __IO uint32_t tickstart = 0;
 8010118:	2100      	movs	r1, #0
{
 801011a:	4605      	mov	r5, r0
  if(netif_is_link_up(netif))
 801011c:	0758      	lsls	r0, r3, #29
  __IO uint32_t tickstart = 0;
 801011e:	9100      	str	r1, [sp, #0]
  uint32_t regvalue = 0;
 8010120:	9101      	str	r1, [sp, #4]
  if(netif_is_link_up(netif))
 8010122:	d539      	bpl.n	8010198 <ethernetif_update_config+0x88>
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8010124:	4c32      	ldr	r4, [pc, #200]	; (80101f0 <ethernetif_update_config+0xe0>)
 8010126:	6863      	ldr	r3, [r4, #4]
 8010128:	b9e3      	cbnz	r3, 8010164 <ethernetif_update_config+0x54>
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
 801012a:	68a3      	ldr	r3, [r4, #8]
 801012c:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 8010130:	d141      	bne.n	80101b6 <ethernetif_update_config+0xa6>
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 8010132:	68e3      	ldr	r3, [r4, #12]
 8010134:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8010138:	d136      	bne.n	80101a8 <ethernetif_update_config+0x98>
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 801013a:	68a2      	ldr	r2, [r4, #8]
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 801013c:	08db      	lsrs	r3, r3, #3
 801013e:	2100      	movs	r1, #0
 8010140:	482b      	ldr	r0, [pc, #172]	; (80101f0 <ethernetif_update_config+0xe0>)
 8010142:	ea43 0252 	orr.w	r2, r3, r2, lsr #1
 8010146:	b292      	uxth	r2, r2
 8010148:	f7f7 fc64 	bl	8007a14 <HAL_ETH_WritePHYRegister>
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 801014c:	2100      	movs	r1, #0
 801014e:	4828      	ldr	r0, [pc, #160]	; (80101f0 <ethernetif_update_config+0xe0>)
 8010150:	f7f7 fe7e 	bl	8007e50 <HAL_ETH_ConfigMAC>
    HAL_ETH_Start(&heth);
 8010154:	4826      	ldr	r0, [pc, #152]	; (80101f0 <ethernetif_update_config+0xe0>)
 8010156:	f7f7 fdfb 	bl	8007d50 <HAL_ETH_Start>
  ethernetif_notify_conn_changed(netif);
 801015a:	4628      	mov	r0, r5
 801015c:	f7ff ffd6 	bl	801010c <ethernetif_notify_conn_changed>
}
 8010160:	b002      	add	sp, #8
 8010162:	bd70      	pop	{r4, r5, r6, pc}
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8010164:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010168:	4620      	mov	r0, r4
 801016a:	f7f7 fc53 	bl	8007a14 <HAL_ETH_WritePHYRegister>
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 801016e:	4626      	mov	r6, r4
      tickstart = HAL_GetTick();
 8010170:	f7f5 f9fe 	bl	8005570 <HAL_GetTick>
 8010174:	9000      	str	r0, [sp, #0]
 8010176:	e002      	b.n	801017e <ethernetif_update_config+0x6e>
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8010178:	9b01      	ldr	r3, [sp, #4]
 801017a:	069a      	lsls	r2, r3, #26
 801017c:	d425      	bmi.n	80101ca <ethernetif_update_config+0xba>
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 801017e:	aa01      	add	r2, sp, #4
 8010180:	2101      	movs	r1, #1
 8010182:	4630      	mov	r0, r6
 8010184:	f7f7 fbfe 	bl	8007984 <HAL_ETH_ReadPHYRegister>
        if((HAL_GetTick() - tickstart ) > 1000)
 8010188:	f7f5 f9f2 	bl	8005570 <HAL_GetTick>
 801018c:	9b00      	ldr	r3, [sp, #0]
 801018e:	1ac0      	subs	r0, r0, r3
 8010190:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8010194:	d9f0      	bls.n	8010178 <ethernetif_update_config+0x68>
    error :
 8010196:	e7c8      	b.n	801012a <ethernetif_update_config+0x1a>
    HAL_ETH_Stop(&heth);
 8010198:	4815      	ldr	r0, [pc, #84]	; (80101f0 <ethernetif_update_config+0xe0>)
 801019a:	f7f7 fe19 	bl	8007dd0 <HAL_ETH_Stop>
  ethernetif_notify_conn_changed(netif);
 801019e:	4628      	mov	r0, r5
 80101a0:	f7ff ffb4 	bl	801010c <ethernetif_notify_conn_changed>
}
 80101a4:	b002      	add	sp, #8
 80101a6:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 80101a8:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 80101ac:	4811      	ldr	r0, [pc, #68]	; (80101f4 <ethernetif_update_config+0xe4>)
 80101ae:	f7f2 fe39 	bl	8002e24 <assert_failed>
 80101b2:	68e3      	ldr	r3, [r4, #12]
 80101b4:	e7c1      	b.n	801013a <ethernetif_update_config+0x2a>
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
 80101b6:	f240 21df 	movw	r1, #735	; 0x2df
 80101ba:	480e      	ldr	r0, [pc, #56]	; (80101f4 <ethernetif_update_config+0xe4>)
 80101bc:	f7f2 fe32 	bl	8002e24 <assert_failed>
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 80101c0:	68e3      	ldr	r3, [r4, #12]
 80101c2:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 80101c6:	d0b8      	beq.n	801013a <ethernetif_update_config+0x2a>
 80101c8:	e7ee      	b.n	80101a8 <ethernetif_update_config+0x98>
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80101ca:	aa01      	add	r2, sp, #4
 80101cc:	211f      	movs	r1, #31
 80101ce:	4808      	ldr	r0, [pc, #32]	; (80101f0 <ethernetif_update_config+0xe0>)
 80101d0:	f7f7 fbd8 	bl	8007984 <HAL_ETH_ReadPHYRegister>
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80101d4:	9b01      	ldr	r3, [sp, #4]
 80101d6:	f013 0210 	ands.w	r2, r3, #16
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80101da:	bf18      	it	ne
 80101dc:	f44f 6200 	movne.w	r2, #2048	; 0x800
      if(regvalue & PHY_SPEED_STATUS)
 80101e0:	075b      	lsls	r3, r3, #29
        heth.Init.Speed = ETH_SPEED_10M;
 80101e2:	bf4c      	ite	mi
 80101e4:	2300      	movmi	r3, #0
        heth.Init.Speed = ETH_SPEED_100M;
 80101e6:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80101ea:	60e2      	str	r2, [r4, #12]
        heth.Init.Speed = ETH_SPEED_100M;
 80101ec:	60a3      	str	r3, [r4, #8]
 80101ee:	e7ad      	b.n	801014c <ethernetif_update_config+0x3c>
 80101f0:	20025210 	.word	0x20025210
 80101f4:	08026950 	.word	0x08026950

080101f8 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80101f8:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 80101fc:	b183      	cbz	r3, 8010220 <USBD_CDC_EP0_RxReady+0x28>
{
 80101fe:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010200:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010204:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8010208:	28ff      	cmp	r0, #255	; 0xff
 801020a:	d007      	beq.n	801021c <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801020c:	689b      	ldr	r3, [r3, #8]
 801020e:	4621      	mov	r1, r4
 8010210:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8010214:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8010216:	23ff      	movs	r3, #255	; 0xff
 8010218:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
}
 801021c:	2000      	movs	r0, #0
 801021e:	bd10      	pop	{r4, pc}
 8010220:	2000      	movs	r0, #0
 8010222:	4770      	bx	lr

08010224 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8010224:	2343      	movs	r3, #67	; 0x43
 8010226:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 8010228:	4800      	ldr	r0, [pc, #0]	; (801022c <USBD_CDC_GetFSCfgDesc+0x8>)
 801022a:	4770      	bx	lr
 801022c:	200002f8 	.word	0x200002f8

08010230 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8010230:	2343      	movs	r3, #67	; 0x43
 8010232:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 8010234:	4800      	ldr	r0, [pc, #0]	; (8010238 <USBD_CDC_GetHSCfgDesc+0x8>)
 8010236:	4770      	bx	lr
 8010238:	2000033c 	.word	0x2000033c

0801023c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801023c:	2343      	movs	r3, #67	; 0x43
 801023e:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 8010240:	4800      	ldr	r0, [pc, #0]	; (8010244 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8010242:	4770      	bx	lr
 8010244:	2000038c 	.word	0x2000038c

08010248 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8010248:	230a      	movs	r3, #10
 801024a:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 801024c:	4800      	ldr	r0, [pc, #0]	; (8010250 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 801024e:	4770      	bx	lr
 8010250:	20000380 	.word	0x20000380

08010254 <USBD_CDC_DataOut>:
{
 8010254:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010256:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 801025a:	b174      	cbz	r4, 801027a <USBD_CDC_DataOut+0x26>
 801025c:	4605      	mov	r5, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801025e:	f00f fa69 	bl	801f734 <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010262:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8010266:	f8d5 32c0 	ldr.w	r3, [r5, #704]	; 0x2c0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801026a:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801026e:	68db      	ldr	r3, [r3, #12]
 8010270:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8010274:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8010276:	2000      	movs	r0, #0
}
 8010278:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 801027a:	2003      	movs	r0, #3
}
 801027c:	bd38      	pop	{r3, r4, r5, pc}
 801027e:	bf00      	nop

08010280 <USBD_CDC_DataIn>:
{
 8010280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pdev->pClassData == NULL)
 8010282:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
 8010286:	b1a7      	cbz	r7, 80102b2 <USBD_CDC_DataIn+0x32>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8010288:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 801028c:	4603      	mov	r3, r0
 801028e:	460a      	mov	r2, r1
 8010290:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8010294:	69ae      	ldr	r6, [r5, #24]
 8010296:	b976      	cbnz	r6, 80102b6 <USBD_CDC_DataIn+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010298:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
    hcdc->TxState = 0U;
 801029c:	2400      	movs	r4, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801029e:	f507 7104 	add.w	r1, r7, #528	; 0x210
 80102a2:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 80102a6:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 80102a8:	f8c7 4214 	str.w	r4, [r7, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80102ac:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 80102ae:	4620      	mov	r0, r4
}
 80102b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 80102b2:	2003      	movs	r0, #3
}
 80102b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80102b6:	ebc1 0cc1 	rsb	ip, r1, r1, lsl #3
 80102ba:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
 80102be:	eb04 048c 	add.w	r4, r4, ip, lsl #2
 80102c2:	f8d4 c044 	ldr.w	ip, [r4, #68]	; 0x44
 80102c6:	fbb6 f4fc 	udiv	r4, r6, ip
 80102ca:	fb0c 6414 	mls	r4, ip, r4, r6
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80102ce:	2c00      	cmp	r4, #0
 80102d0:	d1e2      	bne.n	8010298 <USBD_CDC_DataIn+0x18>
    pdev->ep_in[epnum].total_length = 0U;
 80102d2:	61ac      	str	r4, [r5, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80102d4:	4623      	mov	r3, r4
 80102d6:	4622      	mov	r2, r4
 80102d8:	f00f fa10 	bl	801f6fc <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 80102dc:	4620      	mov	r0, r4
}
 80102de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080102e0 <USBD_CDC_Setup>:
{
 80102e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80102e4:	780b      	ldrb	r3, [r1, #0]
{
 80102e6:	b082      	sub	sp, #8
  uint8_t ifalt = 0U;
 80102e8:	2700      	movs	r7, #0
{
 80102ea:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80102ec:	f013 0260 	ands.w	r2, r3, #96	; 0x60
{
 80102f0:	4606      	mov	r6, r0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80102f2:	f8d0 82bc 	ldr.w	r8, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 80102f6:	f88d 7005 	strb.w	r7, [sp, #5]
  uint16_t status_info = 0U;
 80102fa:	f8ad 7006 	strh.w	r7, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80102fe:	d01c      	beq.n	801033a <USBD_CDC_Setup+0x5a>
 8010300:	2a20      	cmp	r2, #32
 8010302:	d112      	bne.n	801032a <USBD_CDC_Setup+0x4a>
    if (req->wLength != 0U)
 8010304:	88cd      	ldrh	r5, [r1, #6]
 8010306:	f891 c001 	ldrb.w	ip, [r1, #1]
 801030a:	2d00      	cmp	r5, #0
 801030c:	d147      	bne.n	801039e <USBD_CDC_Setup+0xbe>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801030e:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8010312:	462a      	mov	r2, r5
 8010314:	4660      	mov	r0, ip
 8010316:	689b      	ldr	r3, [r3, #8]
 8010318:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 801031a:	4628      	mov	r0, r5
}
 801031c:	b002      	add	sp, #8
 801031e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010322:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8010326:	2b03      	cmp	r3, #3
 8010328:	d049      	beq.n	80103be <USBD_CDC_Setup+0xde>
      USBD_CtlError(pdev, req);
 801032a:	4630      	mov	r0, r6
 801032c:	4621      	mov	r1, r4
 801032e:	f000 fd05 	bl	8010d3c <USBD_CtlError>
      ret = USBD_FAIL;
 8010332:	2003      	movs	r0, #3
}
 8010334:	b002      	add	sp, #8
 8010336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (req->bRequest)
 801033a:	784b      	ldrb	r3, [r1, #1]
 801033c:	2b0b      	cmp	r3, #11
 801033e:	d8f4      	bhi.n	801032a <USBD_CDC_Setup+0x4a>
 8010340:	a201      	add	r2, pc, #4	; (adr r2, 8010348 <USBD_CDC_Setup+0x68>)
 8010342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010346:	bf00      	nop
 8010348:	08010323 	.word	0x08010323
 801034c:	08010381 	.word	0x08010381
 8010350:	0801032b 	.word	0x0801032b
 8010354:	0801032b 	.word	0x0801032b
 8010358:	0801032b 	.word	0x0801032b
 801035c:	0801032b 	.word	0x0801032b
 8010360:	0801032b 	.word	0x0801032b
 8010364:	0801032b 	.word	0x0801032b
 8010368:	0801032b 	.word	0x0801032b
 801036c:	0801032b 	.word	0x0801032b
 8010370:	08010389 	.word	0x08010389
 8010374:	08010379 	.word	0x08010379
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010378:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 801037c:	2b03      	cmp	r3, #3
 801037e:	d1d4      	bne.n	801032a <USBD_CDC_Setup+0x4a>
  USBD_StatusTypeDef ret = USBD_OK;
 8010380:	2000      	movs	r0, #0
}
 8010382:	b002      	add	sp, #8
 8010384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010388:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 801038c:	2b03      	cmp	r3, #3
 801038e:	d1cc      	bne.n	801032a <USBD_CDC_Setup+0x4a>
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8010390:	2201      	movs	r2, #1
 8010392:	f10d 0105 	add.w	r1, sp, #5
 8010396:	f000 fd03 	bl	8010da0 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 801039a:	2000      	movs	r0, #0
 801039c:	e7ca      	b.n	8010334 <USBD_CDC_Setup+0x54>
      if ((req->bmRequest & 0x80U) != 0U)
 801039e:	061b      	lsls	r3, r3, #24
 80103a0:	d514      	bpl.n	80103cc <USBD_CDC_Setup+0xec>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80103a2:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 80103a6:	462a      	mov	r2, r5
 80103a8:	4660      	mov	r0, ip
 80103aa:	4641      	mov	r1, r8
 80103ac:	689b      	ldr	r3, [r3, #8]
 80103ae:	4798      	blx	r3
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80103b0:	88e2      	ldrh	r2, [r4, #6]
 80103b2:	4641      	mov	r1, r8
 80103b4:	4630      	mov	r0, r6
 80103b6:	f000 fcf3 	bl	8010da0 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80103ba:	4638      	mov	r0, r7
 80103bc:	e7ba      	b.n	8010334 <USBD_CDC_Setup+0x54>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80103be:	2202      	movs	r2, #2
 80103c0:	f10d 0106 	add.w	r1, sp, #6
 80103c4:	f000 fcec 	bl	8010da0 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80103c8:	2000      	movs	r0, #0
 80103ca:	e7b3      	b.n	8010334 <USBD_CDC_Setup+0x54>
        hcdc->CmdOpCode = req->bRequest;
 80103cc:	f888 c200 	strb.w	ip, [r8, #512]	; 0x200
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80103d0:	462a      	mov	r2, r5
        hcdc->CmdLength = (uint8_t)req->wLength;
 80103d2:	f888 5201 	strb.w	r5, [r8, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80103d6:	4641      	mov	r1, r8
 80103d8:	f000 fcf8 	bl	8010dcc <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 80103dc:	4638      	mov	r0, r7
 80103de:	e7a9      	b.n	8010334 <USBD_CDC_Setup+0x54>

080103e0 <USBD_CDC_DeInit>:
{
 80103e0:	b538      	push	{r3, r4, r5, lr}
 80103e2:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80103e4:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80103e6:	2181      	movs	r1, #129	; 0x81
 80103e8:	f00f f93c 	bl	801f664 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80103ec:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80103ee:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80103f0:	4620      	mov	r0, r4
 80103f2:	f00f f937 	bl	801f664 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80103f6:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80103fa:	4620      	mov	r0, r4
 80103fc:	2182      	movs	r1, #130	; 0x82
 80103fe:	f00f f931 	bl	801f664 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8010402:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8010406:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 8010408:	b14b      	cbz	r3, 801041e <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801040a:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 801040e:	685b      	ldr	r3, [r3, #4]
 8010410:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8010412:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 8010416:	f00f fb09 	bl	801fa2c <free>
    pdev->pClassData = NULL;
 801041a:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 801041e:	2000      	movs	r0, #0
 8010420:	bd38      	pop	{r3, r4, r5, pc}
 8010422:	bf00      	nop

08010424 <USBD_CDC_Init>:
{
 8010424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010428:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801042a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801042e:	f00f faf5 	bl	801fa1c <malloc>
  if (hcdc == NULL)
 8010432:	4605      	mov	r5, r0
 8010434:	2800      	cmp	r0, #0
 8010436:	d04a      	beq.n	80104ce <USBD_CDC_Init+0xaa>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010438:	7c23      	ldrb	r3, [r4, #16]
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801043a:	2601      	movs	r6, #1
  pdev->pClassData = (void *)hcdc;
 801043c:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010440:	b393      	cbz	r3, 80104a8 <USBD_CDC_Init+0x84>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010442:	2340      	movs	r3, #64	; 0x40
 8010444:	2181      	movs	r1, #129	; 0x81
 8010446:	2202      	movs	r2, #2
 8010448:	4620      	mov	r0, r4
 801044a:	f00f f8f9 	bl	801f640 <USBD_LL_OpenEP>
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801044e:	4631      	mov	r1, r6
 8010450:	2340      	movs	r3, #64	; 0x40
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010452:	8726      	strh	r6, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010454:	2202      	movs	r2, #2
 8010456:	4620      	mov	r0, r4
 8010458:	f00f f8f2 	bl	801f640 <USBD_LL_OpenEP>
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801045c:	2310      	movs	r3, #16
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801045e:	2203      	movs	r2, #3
 8010460:	2182      	movs	r1, #130	; 0x82
      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010462:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010466:	4620      	mov	r0, r4
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8010468:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801046c:	2308      	movs	r3, #8
 801046e:	f00f f8e7 	bl	801f640 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8010472:	2701      	movs	r7, #1
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8010474:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  hcdc->TxState = 0U;
 8010478:	2600      	movs	r6, #0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801047a:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	4798      	blx	r3
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010482:	f894 8010 	ldrb.w	r8, [r4, #16]
  hcdc->TxState = 0U;
 8010486:	f8c5 6214 	str.w	r6, [r5, #532]	; 0x214
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801048a:	4639      	mov	r1, r7
  hcdc->RxState = 0U;
 801048c:	f8c5 6218 	str.w	r6, [r5, #536]	; 0x218
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010490:	4620      	mov	r0, r4
 8010492:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010496:	f1b8 0f00 	cmp.w	r8, #0
 801049a:	d011      	beq.n	80104c0 <USBD_CDC_Init+0x9c>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801049c:	2340      	movs	r3, #64	; 0x40
 801049e:	f00f f93b 	bl	801f718 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 80104a2:	4630      	mov	r0, r6
}
 80104a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80104a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80104ac:	2181      	movs	r1, #129	; 0x81
 80104ae:	2202      	movs	r2, #2
 80104b0:	4620      	mov	r0, r4
 80104b2:	f00f f8c5 	bl	801f640 <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80104b6:	8726      	strh	r6, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80104b8:	4631      	mov	r1, r6
 80104ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80104be:	e7c9      	b.n	8010454 <USBD_CDC_Init+0x30>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80104c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80104c4:	f00f f928 	bl	801f718 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 80104c8:	4640      	mov	r0, r8
}
 80104ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->pClassData = NULL;
 80104ce:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80104d2:	2002      	movs	r0, #2
}
 80104d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080104d8 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 80104d8:	b119      	cbz	r1, 80104e2 <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 80104da:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80104de:	2000      	movs	r0, #0
 80104e0:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 80104e2:	2003      	movs	r0, #3
}
 80104e4:	4770      	bx	lr
 80104e6:	bf00      	nop

080104e8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80104e8:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return (uint8_t)USBD_OK;
}
 80104ec:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 80104ee:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80104f2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 80104f6:	4770      	bx	lr

080104f8 <USBD_CDC_SetRxBuffer>:
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 80104f8:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
}
 80104fc:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 80104fe:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8010502:	4770      	bx	lr

08010504 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010504:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 8010508:	b18a      	cbz	r2, 801052e <USBD_CDC_ReceivePacket+0x2a>
 801050a:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
{
 801050e:	b510      	push	{r4, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010510:	7c04      	ldrb	r4, [r0, #16]
 8010512:	b12c      	cbz	r4, 8010520 <USBD_CDC_ReceivePacket+0x1c>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010514:	2340      	movs	r3, #64	; 0x40
 8010516:	2101      	movs	r1, #1
 8010518:	f00f f8fe 	bl	801f718 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801051c:	2000      	movs	r0, #0
}
 801051e:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010520:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010524:	2101      	movs	r1, #1
 8010526:	f00f f8f7 	bl	801f718 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 801052a:	4620      	mov	r0, r4
}
 801052c:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 801052e:	2003      	movs	r0, #3
}
 8010530:	4770      	bx	lr
 8010532:	bf00      	nop

08010534 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010534:	4603      	mov	r3, r0
 8010536:	b1a8      	cbz	r0, 8010564 <USBD_Init+0x30>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8010538:	f8d0 02b8 	ldr.w	r0, [r0, #696]	; 0x2b8
 801053c:	b110      	cbz	r0, 8010544 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 801053e:	2000      	movs	r0, #0
 8010540:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8010544:	f8d3 02cc 	ldr.w	r0, [r3, #716]	; 0x2cc
 8010548:	b110      	cbz	r0, 8010550 <USBD_Init+0x1c>
  {
    pdev->pConfDesc = NULL;
 801054a:	2000      	movs	r0, #0
 801054c:	f8c3 02cc 	str.w	r0, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010550:	b109      	cbz	r1, 8010556 <USBD_Init+0x22>
  {
    pdev->pDesc = pdesc;
 8010552:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010556:	2101      	movs	r1, #1
  pdev->id = id;
 8010558:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801055a:	4618      	mov	r0, r3
  pdev->dev_state = USBD_STATE_DEFAULT;
 801055c:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  ret = USBD_LL_Init(pdev);
 8010560:	f00f b82e 	b.w	801f5c0 <USBD_LL_Init>

  return ret;
}
 8010564:	2003      	movs	r0, #3
 8010566:	4770      	bx	lr

08010568 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010568:	b530      	push	{r4, r5, lr}
  uint16_t len = 0U;
 801056a:	2400      	movs	r4, #0
{
 801056c:	b083      	sub	sp, #12
  uint16_t len = 0U;
 801056e:	f8ad 4006 	strh.w	r4, [sp, #6]

  if (pclass == NULL)
 8010572:	b159      	cbz	r1, 801058c <USBD_RegisterClass+0x24>
 8010574:	4605      	mov	r5, r0
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8010576:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 801057a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 801057c:	f10d 0006 	add.w	r0, sp, #6
 8010580:	4798      	blx	r3
 8010582:	f8c5 02cc 	str.w	r0, [r5, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
}
 8010586:	4620      	mov	r0, r4
 8010588:	b003      	add	sp, #12
 801058a:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 801058c:	2403      	movs	r4, #3
 801058e:	e7fa      	b.n	8010586 <USBD_RegisterClass+0x1e>

08010590 <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010590:	f00f b848 	b.w	801f624 <USBD_LL_Start>

08010594 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8010594:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8010598:	b10b      	cbz	r3, 801059e <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	4718      	bx	r3
  }

  return ret;
}
 801059e:	2003      	movs	r0, #3
 80105a0:	4770      	bx	lr
 80105a2:	bf00      	nop

080105a4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80105a4:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80105a6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80105aa:	b10b      	cbz	r3, 80105b0 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80105ac:	685b      	ldr	r3, [r3, #4]
 80105ae:	4798      	blx	r3
  }

  return USBD_OK;
}
 80105b0:	2000      	movs	r0, #0
 80105b2:	bd08      	pop	{r3, pc}

080105b4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80105b4:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80105b6:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
{
 80105ba:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80105bc:	4628      	mov	r0, r5
 80105be:	f000 fba9 	bl	8010d14 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 80105c2:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 80105c6:	2001      	movs	r0, #1
  pdev->ep0_data_len = pdev->request.wLength;
 80105c8:	f8b4 22b0 	ldrh.w	r2, [r4, #688]	; 0x2b0
  switch (pdev->request.bmRequest & 0x1FU)
 80105cc:	f001 031f 	and.w	r3, r1, #31
  pdev->ep0_state = USBD_EP0_SETUP;
 80105d0:	f8c4 0294 	str.w	r0, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 80105d4:	4283      	cmp	r3, r0
  pdev->ep0_data_len = pdev->request.wLength;
 80105d6:	f8c4 2298 	str.w	r2, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 80105da:	d015      	beq.n	8010608 <USBD_LL_SetupStage+0x54>
 80105dc:	d30e      	bcc.n	80105fc <USBD_LL_SetupStage+0x48>
 80105de:	2b02      	cmp	r3, #2
 80105e0:	d105      	bne.n	80105ee <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
      break;

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80105e2:	4629      	mov	r1, r5
 80105e4:	4620      	mov	r0, r4
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 80105e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80105ea:	f000 baf5 	b.w	8010bd8 <USBD_StdEPReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80105ee:	4620      	mov	r0, r4
 80105f0:	f001 0180 	and.w	r1, r1, #128	; 0x80
}
 80105f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80105f8:	f00f b842 	b.w	801f680 <USBD_LL_StallEP>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80105fc:	4629      	mov	r1, r5
 80105fe:	4620      	mov	r0, r4
}
 8010600:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8010604:	f000 b8fe 	b.w	8010804 <USBD_StdDevReq>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8010608:	4629      	mov	r1, r5
 801060a:	4620      	mov	r0, r4
}
 801060c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8010610:	f000 baaa 	b.w	8010b68 <USBD_StdItfReq>

08010614 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010614:	b570      	push	{r4, r5, r6, lr}
 8010616:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010618:	b931      	cbnz	r1, 8010628 <USBD_LL_DataOutStage+0x14>
 801061a:	460d      	mov	r5, r1
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801061c:	f8d0 1294 	ldr.w	r1, [r0, #660]	; 0x294
 8010620:	2903      	cmp	r1, #3
 8010622:	d00c      	beq.n	801063e <USBD_LL_DataOutStage+0x2a>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8010624:	2000      	movs	r0, #0
}
 8010626:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataOut != NULL) &&
 8010628:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 801062c:	6992      	ldr	r2, [r2, #24]
 801062e:	b1da      	cbz	r2, 8010668 <USBD_LL_DataOutStage+0x54>
 8010630:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8010634:	2b03      	cmp	r3, #3
 8010636:	d117      	bne.n	8010668 <USBD_LL_DataOutStage+0x54>
}
 8010638:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 801063c:	4710      	bx	r2
 801063e:	4611      	mov	r1, r2
      if (pep->rem_length > pep->maxpacket)
 8010640:	f8d0 315c 	ldr.w	r3, [r0, #348]	; 0x15c
 8010644:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 8010648:	4293      	cmp	r3, r2
 801064a:	d80f      	bhi.n	801066c <USBD_LL_DataOutStage+0x58>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801064c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8010650:	691b      	ldr	r3, [r3, #16]
 8010652:	b123      	cbz	r3, 801065e <USBD_LL_DataOutStage+0x4a>
 8010654:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8010658:	2a03      	cmp	r2, #3
 801065a:	d100      	bne.n	801065e <USBD_LL_DataOutStage+0x4a>
          pdev->pClass->EP0_RxReady(pdev);
 801065c:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 801065e:	4620      	mov	r0, r4
 8010660:	f000 fbcc 	bl	8010dfc <USBD_CtlSendStatus>
  return USBD_OK;
 8010664:	2000      	movs	r0, #0
 8010666:	e7de      	b.n	8010626 <USBD_LL_DataOutStage+0x12>
    return USBD_FAIL;
 8010668:	2003      	movs	r0, #3
}
 801066a:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 801066c:	1a9b      	subs	r3, r3, r2
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801066e:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 8010670:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8010674:	bf28      	it	cs
 8010676:	461a      	movcs	r2, r3
 8010678:	f000 fbb8 	bl	8010dec <USBD_CtlContinueRx>
  return USBD_OK;
 801067c:	4628      	mov	r0, r5
}
 801067e:	bd70      	pop	{r4, r5, r6, pc}

08010680 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8010680:	b570      	push	{r4, r5, r6, lr}
 8010682:	4604      	mov	r4, r0
 8010684:	b082      	sub	sp, #8
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010686:	b951      	cbnz	r1, 801069e <USBD_LL_DataInStage+0x1e>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010688:	f8d0 5294 	ldr.w	r5, [r0, #660]	; 0x294
 801068c:	2d02      	cmp	r5, #2
 801068e:	d016      	beq.n	80106be <USBD_LL_DataInStage+0x3e>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8010690:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8010694:	2000      	movs	r0, #0
    if (pdev->dev_test_mode == 1U)
 8010696:	2b01      	cmp	r3, #1
 8010698:	d00d      	beq.n	80106b6 <USBD_LL_DataInStage+0x36>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 801069a:	b002      	add	sp, #8
 801069c:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataIn != NULL) &&
 801069e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80106a2:	695b      	ldr	r3, [r3, #20]
 80106a4:	b33b      	cbz	r3, 80106f6 <USBD_LL_DataInStage+0x76>
 80106a6:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80106aa:	2a03      	cmp	r2, #3
 80106ac:	d123      	bne.n	80106f6 <USBD_LL_DataInStage+0x76>
}
 80106ae:	b002      	add	sp, #8
 80106b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80106b4:	4718      	bx	r3
      pdev->dev_test_mode = 0U;
 80106b6:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
}
 80106ba:	b002      	add	sp, #8
 80106bc:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 80106be:	e9d0 5607 	ldrd	r5, r6, [r0, #28]
 80106c2:	42b5      	cmp	r5, r6
 80106c4:	d81a      	bhi.n	80106fc <USBD_LL_DataInStage+0x7c>
        if ((pep->maxpacket == pep->rem_length) &&
 80106c6:	d027      	beq.n	8010718 <USBD_LL_DataInStage+0x98>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80106c8:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80106cc:	68db      	ldr	r3, [r3, #12]
 80106ce:	b12b      	cbz	r3, 80106dc <USBD_LL_DataInStage+0x5c>
 80106d0:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 80106d4:	2a03      	cmp	r2, #3
 80106d6:	d101      	bne.n	80106dc <USBD_LL_DataInStage+0x5c>
            pdev->pClass->EP0_TxSent(pdev);
 80106d8:	4620      	mov	r0, r4
 80106da:	4798      	blx	r3
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80106dc:	2180      	movs	r1, #128	; 0x80
 80106de:	4620      	mov	r0, r4
 80106e0:	f00e ffce 	bl	801f680 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80106e4:	4620      	mov	r0, r4
 80106e6:	f000 fb95 	bl	8010e14 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 80106ea:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
      pdev->dev_test_mode = 0U;
 80106ee:	2000      	movs	r0, #0
    if (pdev->dev_test_mode == 1U)
 80106f0:	2b01      	cmp	r3, #1
 80106f2:	d1d2      	bne.n	801069a <USBD_LL_DataInStage+0x1a>
 80106f4:	e7df      	b.n	80106b6 <USBD_LL_DataInStage+0x36>
    return USBD_FAIL;
 80106f6:	2003      	movs	r0, #3
}
 80106f8:	b002      	add	sp, #8
 80106fa:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 80106fc:	1bad      	subs	r5, r5, r6
 80106fe:	9101      	str	r1, [sp, #4]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010700:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 8010702:	61c5      	str	r5, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010704:	462a      	mov	r2, r5
 8010706:	f000 fb59 	bl	8010dbc <USBD_CtlContinueSendData>
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801070a:	9b01      	ldr	r3, [sp, #4]
 801070c:	4620      	mov	r0, r4
 801070e:	461a      	mov	r2, r3
 8010710:	4619      	mov	r1, r3
 8010712:	f00f f801 	bl	801f718 <USBD_LL_PrepareReceive>
 8010716:	e7bb      	b.n	8010690 <USBD_LL_DataInStage+0x10>
            (pep->total_length >= pep->maxpacket) &&
 8010718:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 801071a:	4295      	cmp	r5, r2
 801071c:	d8d4      	bhi.n	80106c8 <USBD_LL_DataInStage+0x48>
            (pep->total_length >= pep->maxpacket) &&
 801071e:	f8d0 5298 	ldr.w	r5, [r0, #664]	; 0x298
 8010722:	42aa      	cmp	r2, r5
 8010724:	d2d0      	bcs.n	80106c8 <USBD_LL_DataInStage+0x48>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010726:	460a      	mov	r2, r1
 8010728:	9101      	str	r1, [sp, #4]
 801072a:	f000 fb47 	bl	8010dbc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801072e:	9b01      	ldr	r3, [sp, #4]
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010730:	4620      	mov	r0, r4
          pdev->ep0_data_len = 0U;
 8010732:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010736:	461a      	mov	r2, r3
 8010738:	4619      	mov	r1, r3
 801073a:	f00e ffed 	bl	801f718 <USBD_LL_PrepareReceive>
 801073e:	e7a7      	b.n	8010690 <USBD_LL_DataInStage+0x10>

08010740 <USBD_LL_Reset>:

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8010740:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010742:	2201      	movs	r2, #1
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData != NULL)
 8010744:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 8010748:	b570      	push	{r4, r5, r6, lr}
 801074a:	4604      	mov	r4, r0
  pdev->dev_state = USBD_STATE_DEFAULT;
 801074c:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010750:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 8010754:	6041      	str	r1, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8010756:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClassData != NULL)
 801075a:	b11b      	cbz	r3, 8010764 <USBD_LL_Reset+0x24>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801075c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8010760:	685b      	ldr	r3, [r3, #4]
 8010762:	4798      	blx	r3

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010764:	2540      	movs	r5, #64	; 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010766:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010768:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801076a:	4620      	mov	r0, r4
 801076c:	462b      	mov	r3, r5
 801076e:	4611      	mov	r1, r2
 8010770:	f00e ff66 	bl	801f640 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010774:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010778:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801077c:	462b      	mov	r3, r5
 801077e:	2200      	movs	r2, #0
 8010780:	2180      	movs	r1, #128	; 0x80
 8010782:	4620      	mov	r0, r4
 8010784:	f00e ff5c 	bl	801f640 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010788:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801078a:	6225      	str	r5, [r4, #32]

  return USBD_OK;
}
 801078c:	2000      	movs	r0, #0
 801078e:	bd70      	pop	{r4, r5, r6, pc}

08010790 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8010790:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8010792:	2000      	movs	r0, #0
 8010794:	4770      	bx	lr
 8010796:	bf00      	nop

08010798 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010798:	4603      	mov	r3, r0
  pdev->dev_old_state = pdev->dev_state;
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801079a:	2104      	movs	r1, #4

  return USBD_OK;
}
 801079c:	2000      	movs	r0, #0
  pdev->dev_old_state = pdev->dev_state;
 801079e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80107a2:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->dev_old_state = pdev->dev_state;
 80107a6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
}
 80107aa:	4770      	bx	lr

080107ac <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80107ac:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80107b0:	2b04      	cmp	r3, #4
 80107b2:	d103      	bne.n	80107bc <USBD_LL_Resume+0x10>
  {
    pdev->dev_state = pdev->dev_old_state;
 80107b4:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 80107b8:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 80107bc:	2000      	movs	r0, #0
 80107be:	4770      	bx	lr

080107c0 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80107c0:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80107c4:	2a03      	cmp	r2, #3
 80107c6:	d001      	beq.n	80107cc <USBD_LL_SOF+0xc>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 80107c8:	2000      	movs	r0, #0
 80107ca:	4770      	bx	lr
{
 80107cc:	b508      	push	{r3, lr}
    if (pdev->pClass->SOF != NULL)
 80107ce:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80107d2:	69db      	ldr	r3, [r3, #28]
 80107d4:	b103      	cbz	r3, 80107d8 <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 80107d6:	4798      	blx	r3
}
 80107d8:	2000      	movs	r0, #0
 80107da:	bd08      	pop	{r3, pc}

080107dc <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 80107dc:	2000      	movs	r0, #0
 80107de:	4770      	bx	lr

080107e0 <USBD_LL_IsoOUTIncomplete>:
 80107e0:	2000      	movs	r0, #0
 80107e2:	4770      	bx	lr

080107e4 <USBD_LL_DevConnected>:
 80107e4:	2000      	movs	r0, #0
 80107e6:	4770      	bx	lr

080107e8 <USBD_LL_DevDisconnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80107e8:	2101      	movs	r1, #1

  if (pdev->pClass != NULL)
 80107ea:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 80107ee:	f880 129c 	strb.w	r1, [r0, #668]	; 0x29c
  if (pdev->pClass != NULL)
 80107f2:	b12a      	cbz	r2, 8010800 <USBD_LL_DevDisconnected+0x18>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80107f4:	6852      	ldr	r2, [r2, #4]
 80107f6:	7901      	ldrb	r1, [r0, #4]
{
 80107f8:	b508      	push	{r3, lr}
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80107fa:	4790      	blx	r2
  }

  return USBD_OK;
}
 80107fc:	2000      	movs	r0, #0
 80107fe:	bd08      	pop	{r3, pc}
 8010800:	2000      	movs	r0, #0
 8010802:	4770      	bx	lr

08010804 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010804:	b570      	push	{r4, r5, r6, lr}
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010806:	780b      	ldrb	r3, [r1, #0]
{
 8010808:	b082      	sub	sp, #8
 801080a:	460d      	mov	r5, r1
 801080c:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801080e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010812:	2b20      	cmp	r3, #32
 8010814:	d028      	beq.n	8010868 <USBD_StdDevReq+0x64>
 8010816:	2b40      	cmp	r3, #64	; 0x40
 8010818:	d026      	beq.n	8010868 <USBD_StdDevReq+0x64>
 801081a:	b15b      	cbz	r3, 8010834 <USBD_StdDevReq+0x30>

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801081c:	2180      	movs	r1, #128	; 0x80
 801081e:	4620      	mov	r0, r4
 8010820:	f00e ff2e 	bl	801f680 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010824:	2100      	movs	r1, #0
 8010826:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 8010828:	460d      	mov	r5, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 801082a:	f00e ff29 	bl	801f680 <USBD_LL_StallEP>
}
 801082e:	4628      	mov	r0, r5
 8010830:	b002      	add	sp, #8
 8010832:	bd70      	pop	{r4, r5, r6, pc}
    switch (req->bRequest)
 8010834:	784b      	ldrb	r3, [r1, #1]
 8010836:	2b09      	cmp	r3, #9
 8010838:	d8f0      	bhi.n	801081c <USBD_StdDevReq+0x18>
 801083a:	a201      	add	r2, pc, #4	; (adr r2, 8010840 <USBD_StdDevReq+0x3c>)
 801083c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010840:	080108df 	.word	0x080108df
 8010844:	0801090d 	.word	0x0801090d
 8010848:	0801081d 	.word	0x0801081d
 801084c:	08010929 	.word	0x08010929
 8010850:	0801081d 	.word	0x0801081d
 8010854:	08010935 	.word	0x08010935
 8010858:	08010977 	.word	0x08010977
 801085c:	0801081d 	.word	0x0801081d
 8010860:	0801099b 	.word	0x0801099b
 8010864:	0801087d 	.word	0x0801087d
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010868:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 801086c:	4629      	mov	r1, r5
 801086e:	4620      	mov	r0, r4
 8010870:	689b      	ldr	r3, [r3, #8]
 8010872:	4798      	blx	r3
 8010874:	4605      	mov	r5, r0
}
 8010876:	4628      	mov	r0, r5
 8010878:	b002      	add	sp, #8
 801087a:	bd70      	pop	{r4, r5, r6, pc}
  cfgidx = (uint8_t)(req->wValue);
 801087c:	7889      	ldrb	r1, [r1, #2]
 801087e:	4eae      	ldr	r6, [pc, #696]	; (8010b38 <USBD_StdDevReq+0x334>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010880:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8010882:	7031      	strb	r1, [r6, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010884:	f200 8114 	bhi.w	8010ab0 <USBD_StdDevReq+0x2ac>
  switch (pdev->dev_state)
 8010888:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 801088c:	2b02      	cmp	r3, #2
 801088e:	f000 811c 	beq.w	8010aca <USBD_StdDevReq+0x2c6>
 8010892:	2b03      	cmp	r3, #3
 8010894:	f040 812a 	bne.w	8010aec <USBD_StdDevReq+0x2e8>
    if (cfgidx == 0U)
 8010898:	2900      	cmp	r1, #0
 801089a:	f000 814f 	beq.w	8010b3c <USBD_StdDevReq+0x338>
    else if (cfgidx != pdev->dev_config)
 801089e:	6841      	ldr	r1, [r0, #4]
 80108a0:	2901      	cmp	r1, #1
 80108a2:	f000 8130 	beq.w	8010b06 <USBD_StdDevReq+0x302>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80108a6:	b2c9      	uxtb	r1, r1
 80108a8:	f7ff fe7c 	bl	80105a4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80108ac:	7831      	ldrb	r1, [r6, #0]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80108ae:	4620      	mov	r0, r4
      pdev->dev_config = cfgidx;
 80108b0:	6061      	str	r1, [r4, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80108b2:	f7ff fe6f 	bl	8010594 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 80108b6:	4605      	mov	r5, r0
 80108b8:	2800      	cmp	r0, #0
 80108ba:	f000 8124 	beq.w	8010b06 <USBD_StdDevReq+0x302>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80108be:	2180      	movs	r1, #128	; 0x80
 80108c0:	4620      	mov	r0, r4
 80108c2:	f00e fedd 	bl	801f680 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80108c6:	2100      	movs	r1, #0
 80108c8:	4620      	mov	r0, r4
 80108ca:	f00e fed9 	bl	801f680 <USBD_LL_StallEP>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80108ce:	7921      	ldrb	r1, [r4, #4]
 80108d0:	4620      	mov	r0, r4
 80108d2:	f7ff fe67 	bl	80105a4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80108d6:	2302      	movs	r3, #2
 80108d8:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80108dc:	e7a7      	b.n	801082e <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 80108de:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80108e2:	2203      	movs	r2, #3
 80108e4:	3b01      	subs	r3, #1
 80108e6:	2b02      	cmp	r3, #2
 80108e8:	d898      	bhi.n	801081c <USBD_StdDevReq+0x18>
    if (req->wLength != 0x2U)
 80108ea:	88cb      	ldrh	r3, [r1, #6]
 80108ec:	2b02      	cmp	r3, #2
 80108ee:	d195      	bne.n	801081c <USBD_StdDevReq+0x18>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80108f0:	2101      	movs	r1, #1
    if (pdev->dev_remote_wakeup != 0U)
 80108f2:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80108f6:	60c1      	str	r1, [r0, #12]
    if (pdev->dev_remote_wakeup != 0U)
 80108f8:	b103      	cbz	r3, 80108fc <USBD_StdDevReq+0xf8>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80108fa:	60c2      	str	r2, [r0, #12]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80108fc:	2202      	movs	r2, #2
 80108fe:	f104 010c 	add.w	r1, r4, #12
 8010902:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 8010904:	2500      	movs	r5, #0
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010906:	f000 fa4b 	bl	8010da0 <USBD_CtlSendData>
 801090a:	e790      	b.n	801082e <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 801090c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8010910:	3b01      	subs	r3, #1
 8010912:	2b02      	cmp	r3, #2
 8010914:	d882      	bhi.n	801081c <USBD_StdDevReq+0x18>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010916:	884b      	ldrh	r3, [r1, #2]
        pdev->dev_remote_wakeup = 0U;
 8010918:	2500      	movs	r5, #0
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801091a:	2b01      	cmp	r3, #1
 801091c:	d187      	bne.n	801082e <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 801091e:	f8c0 52a4 	str.w	r5, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010922:	f000 fa6b 	bl	8010dfc <USBD_CtlSendStatus>
 8010926:	e782      	b.n	801082e <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010928:	884b      	ldrh	r3, [r1, #2]
 801092a:	2b01      	cmp	r3, #1
 801092c:	f000 80f0 	beq.w	8010b10 <USBD_StdDevReq+0x30c>
  USBD_StatusTypeDef ret = USBD_OK;
 8010930:	2500      	movs	r5, #0
 8010932:	e77c      	b.n	801082e <USBD_StdDevReq+0x2a>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010934:	888b      	ldrh	r3, [r1, #4]
 8010936:	2b00      	cmp	r3, #0
 8010938:	f47f af70 	bne.w	801081c <USBD_StdDevReq+0x18>
 801093c:	88ce      	ldrh	r6, [r1, #6]
 801093e:	2e00      	cmp	r6, #0
 8010940:	f47f af6c 	bne.w	801081c <USBD_StdDevReq+0x18>
 8010944:	884d      	ldrh	r5, [r1, #2]
 8010946:	2d7f      	cmp	r5, #127	; 0x7f
 8010948:	f63f af68 	bhi.w	801081c <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801094c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8010950:	2b03      	cmp	r3, #3
 8010952:	f43f af63 	beq.w	801081c <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010956:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8010958:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801095c:	f00e fec0 	bl	801f6e0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010960:	4620      	mov	r0, r4
 8010962:	f000 fa4b 	bl	8010dfc <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8010966:	2d00      	cmp	r5, #0
 8010968:	f000 80fa 	beq.w	8010b60 <USBD_StdDevReq+0x35c>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801096c:	2302      	movs	r3, #2
  USBD_StatusTypeDef ret = USBD_OK;
 801096e:	4635      	mov	r5, r6
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010970:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8010974:	e75b      	b.n	801082e <USBD_StdDevReq+0x2a>
      USBD_GetDescriptor(pdev, req);
 8010976:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 8010978:	2100      	movs	r1, #0
  switch (req->wValue >> 8)
 801097a:	0a13      	lsrs	r3, r2, #8
  uint16_t len = 0U;
 801097c:	f8ad 1006 	strh.w	r1, [sp, #6]
  switch (req->wValue >> 8)
 8010980:	3b01      	subs	r3, #1
 8010982:	2b0e      	cmp	r3, #14
 8010984:	d86d      	bhi.n	8010a62 <USBD_StdDevReq+0x25e>
 8010986:	e8df f003 	tbb	[pc, r3]
 801098a:	5b53      	.short	0x5b53
 801098c:	4a6c6c37 	.word	0x4a6c6c37
 8010990:	6c6c6c3f 	.word	0x6c6c6c3f
 8010994:	6c6c6c6c 	.word	0x6c6c6c6c
 8010998:	1c          	.byte	0x1c
 8010999:	00          	.byte	0x00
  if (req->wLength != 1U)
 801099a:	88ca      	ldrh	r2, [r1, #6]
 801099c:	2a01      	cmp	r2, #1
 801099e:	f47f af3d 	bne.w	801081c <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 80109a2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	f43f af38 	beq.w	801081c <USBD_StdDevReq+0x18>
 80109ac:	2b02      	cmp	r3, #2
 80109ae:	f240 80b5 	bls.w	8010b1c <USBD_StdDevReq+0x318>
 80109b2:	2b03      	cmp	r3, #3
 80109b4:	f47f af32 	bne.w	801081c <USBD_StdDevReq+0x18>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80109b8:	1d01      	adds	r1, r0, #4
  USBD_StatusTypeDef ret = USBD_OK;
 80109ba:	2500      	movs	r5, #0
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80109bc:	f000 f9f0 	bl	8010da0 <USBD_CtlSendData>
 80109c0:	e735      	b.n	801082e <USBD_StdDevReq+0x2a>
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 80109c2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80109c6:	69db      	ldr	r3, [r3, #28]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d04a      	beq.n	8010a62 <USBD_StdDevReq+0x25e>
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80109cc:	f10d 0106 	add.w	r1, sp, #6
 80109d0:	7c20      	ldrb	r0, [r4, #16]
 80109d2:	4798      	blx	r3
    if (req->wLength != 0U)
 80109d4:	88eb      	ldrh	r3, [r5, #6]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d073      	beq.n	8010ac2 <USBD_StdDevReq+0x2be>
      if (len != 0U)
 80109da:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80109de:	2a00      	cmp	r2, #0
 80109e0:	d03f      	beq.n	8010a62 <USBD_StdDevReq+0x25e>
        len = MIN(len, req->wLength);
 80109e2:	4293      	cmp	r3, r2
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80109e4:	4601      	mov	r1, r0
 80109e6:	4620      	mov	r0, r4
        len = MIN(len, req->wLength);
 80109e8:	bf28      	it	cs
 80109ea:	4613      	movcs	r3, r2
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80109ec:	461a      	mov	r2, r3
        len = MIN(len, req->wLength);
 80109ee:	f8ad 3006 	strh.w	r3, [sp, #6]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80109f2:	f000 f9d5 	bl	8010da0 <USBD_CtlSendData>
 80109f6:	e79b      	b.n	8010930 <USBD_StdDevReq+0x12c>
    switch ((uint8_t)(req->wValue))
 80109f8:	b2d2      	uxtb	r2, r2
 80109fa:	2a05      	cmp	r2, #5
 80109fc:	d831      	bhi.n	8010a62 <USBD_StdDevReq+0x25e>
 80109fe:	e8df f002 	tbb	[pc, r2]
 8010a02:	512b      	.short	0x512b
 8010a04:	393f454b 	.word	0x393f454b
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010a08:	7c03      	ldrb	r3, [r0, #16]
 8010a0a:	bb53      	cbnz	r3, 8010a62 <USBD_StdDevReq+0x25e>
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8010a0c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8010a10:	f10d 0006 	add.w	r0, sp, #6
 8010a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a16:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010a18:	2307      	movs	r3, #7
 8010a1a:	7043      	strb	r3, [r0, #1]
 8010a1c:	e7da      	b.n	80109d4 <USBD_StdDevReq+0x1d0>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010a1e:	7c03      	ldrb	r3, [r0, #16]
 8010a20:	b9fb      	cbnz	r3, 8010a62 <USBD_StdDevReq+0x25e>
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8010a22:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8010a26:	f10d 0006 	add.w	r0, sp, #6
 8010a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a2c:	4798      	blx	r3
 8010a2e:	e7d1      	b.n	80109d4 <USBD_StdDevReq+0x1d0>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010a30:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8010a34:	f10d 0106 	add.w	r1, sp, #6
 8010a38:	7c00      	ldrb	r0, [r0, #16]
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	4798      	blx	r3
 8010a3e:	e7c9      	b.n	80109d4 <USBD_StdDevReq+0x1d0>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010a40:	7c02      	ldrb	r2, [r0, #16]
 8010a42:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8010a46:	2a00      	cmp	r2, #0
 8010a48:	d16f      	bne.n	8010b2a <USBD_StdDevReq+0x326>
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8010a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a4c:	f10d 0006 	add.w	r0, sp, #6
 8010a50:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010a52:	2302      	movs	r3, #2
 8010a54:	7043      	strb	r3, [r0, #1]
 8010a56:	e7bd      	b.n	80109d4 <USBD_StdDevReq+0x1d0>
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010a58:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8010a5c:	685b      	ldr	r3, [r3, #4]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d1b4      	bne.n	80109cc <USBD_StdDevReq+0x1c8>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010a62:	2180      	movs	r1, #128	; 0x80
 8010a64:	4620      	mov	r0, r4
 8010a66:	f00e fe0b 	bl	801f680 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010a6a:	4620      	mov	r0, r4
 8010a6c:	2100      	movs	r1, #0
 8010a6e:	f00e fe07 	bl	801f680 <USBD_LL_StallEP>
 8010a72:	e75d      	b.n	8010930 <USBD_StdDevReq+0x12c>
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010a74:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8010a78:	699b      	ldr	r3, [r3, #24]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d1a6      	bne.n	80109cc <USBD_StdDevReq+0x1c8>
 8010a7e:	e7f0      	b.n	8010a62 <USBD_StdDevReq+0x25e>
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010a80:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8010a84:	695b      	ldr	r3, [r3, #20]
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d1a0      	bne.n	80109cc <USBD_StdDevReq+0x1c8>
 8010a8a:	e7ea      	b.n	8010a62 <USBD_StdDevReq+0x25e>
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010a8c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8010a90:	691b      	ldr	r3, [r3, #16]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d19a      	bne.n	80109cc <USBD_StdDevReq+0x1c8>
 8010a96:	e7e4      	b.n	8010a62 <USBD_StdDevReq+0x25e>
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010a98:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8010a9c:	68db      	ldr	r3, [r3, #12]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d194      	bne.n	80109cc <USBD_StdDevReq+0x1c8>
 8010aa2:	e7de      	b.n	8010a62 <USBD_StdDevReq+0x25e>
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010aa4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8010aa8:	689b      	ldr	r3, [r3, #8]
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d18e      	bne.n	80109cc <USBD_StdDevReq+0x1c8>
 8010aae:	e7d8      	b.n	8010a62 <USBD_StdDevReq+0x25e>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010ab0:	2180      	movs	r1, #128	; 0x80
    return USBD_FAIL;
 8010ab2:	2503      	movs	r5, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010ab4:	f00e fde4 	bl	801f680 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010ab8:	4620      	mov	r0, r4
 8010aba:	2100      	movs	r1, #0
 8010abc:	f00e fde0 	bl	801f680 <USBD_LL_StallEP>
 8010ac0:	e6b5      	b.n	801082e <USBD_StdDevReq+0x2a>
      (void)USBD_CtlSendStatus(pdev);
 8010ac2:	4620      	mov	r0, r4
 8010ac4:	f000 f99a 	bl	8010dfc <USBD_CtlSendStatus>
 8010ac8:	e732      	b.n	8010930 <USBD_StdDevReq+0x12c>
    if (cfgidx != 0U)
 8010aca:	b1e1      	cbz	r1, 8010b06 <USBD_StdDevReq+0x302>
      pdev->dev_config = cfgidx;
 8010acc:	2101      	movs	r1, #1
 8010ace:	6041      	str	r1, [r0, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8010ad0:	f7ff fd60 	bl	8010594 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 8010ad4:	4605      	mov	r5, r0
 8010ad6:	2800      	cmp	r0, #0
 8010ad8:	d03b      	beq.n	8010b52 <USBD_StdDevReq+0x34e>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010ada:	2180      	movs	r1, #128	; 0x80
 8010adc:	4620      	mov	r0, r4
 8010ade:	f00e fdcf 	bl	801f680 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010ae2:	4620      	mov	r0, r4
 8010ae4:	2100      	movs	r1, #0
 8010ae6:	f00e fdcb 	bl	801f680 <USBD_LL_StallEP>
 8010aea:	e6a0      	b.n	801082e <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010aec:	2180      	movs	r1, #128	; 0x80
    ret = USBD_FAIL;
 8010aee:	2503      	movs	r5, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010af0:	f00e fdc6 	bl	801f680 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010af4:	2100      	movs	r1, #0
 8010af6:	4620      	mov	r0, r4
 8010af8:	f00e fdc2 	bl	801f680 <USBD_LL_StallEP>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010afc:	7831      	ldrb	r1, [r6, #0]
 8010afe:	4620      	mov	r0, r4
 8010b00:	f7ff fd50 	bl	80105a4 <USBD_ClrClassConfig>
 8010b04:	e693      	b.n	801082e <USBD_StdDevReq+0x2a>
      (void)USBD_CtlSendStatus(pdev);
 8010b06:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 8010b08:	2500      	movs	r5, #0
      (void)USBD_CtlSendStatus(pdev);
 8010b0a:	f000 f977 	bl	8010dfc <USBD_CtlSendStatus>
 8010b0e:	e68e      	b.n	801082e <USBD_StdDevReq+0x2a>
    pdev->dev_remote_wakeup = 1U;
 8010b10:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
  USBD_StatusTypeDef ret = USBD_OK;
 8010b14:	2500      	movs	r5, #0
    (void)USBD_CtlSendStatus(pdev);
 8010b16:	f000 f971 	bl	8010dfc <USBD_CtlSendStatus>
 8010b1a:	e688      	b.n	801082e <USBD_StdDevReq+0x2a>
      pdev->dev_default_config = 0U;
 8010b1c:	2500      	movs	r5, #0
 8010b1e:	4601      	mov	r1, r0
 8010b20:	f841 5f08 	str.w	r5, [r1, #8]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010b24:	f000 f93c 	bl	8010da0 <USBD_CtlSendData>
 8010b28:	e681      	b.n	801082e <USBD_StdDevReq+0x2a>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8010b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b2c:	f10d 0006 	add.w	r0, sp, #6
 8010b30:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010b32:	2302      	movs	r3, #2
 8010b34:	7043      	strb	r3, [r0, #1]
 8010b36:	e74d      	b.n	80109d4 <USBD_StdDevReq+0x1d0>
 8010b38:	200016e4 	.word	0x200016e4
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8010b3c:	2302      	movs	r3, #2
      pdev->dev_config = cfgidx;
 8010b3e:	6041      	str	r1, [r0, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8010b40:	460d      	mov	r5, r1
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8010b42:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010b46:	f7ff fd2d 	bl	80105a4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8010b4a:	4620      	mov	r0, r4
 8010b4c:	f000 f956 	bl	8010dfc <USBD_CtlSendStatus>
 8010b50:	e66d      	b.n	801082e <USBD_StdDevReq+0x2a>
        (void)USBD_CtlSendStatus(pdev);
 8010b52:	4620      	mov	r0, r4
 8010b54:	f000 f952 	bl	8010dfc <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8010b58:	2303      	movs	r3, #3
 8010b5a:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8010b5e:	e666      	b.n	801082e <USBD_StdDevReq+0x2a>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010b60:	2301      	movs	r3, #1
 8010b62:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8010b66:	e662      	b.n	801082e <USBD_StdDevReq+0x2a>

08010b68 <USBD_StdItfReq>:
{
 8010b68:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010b6a:	780b      	ldrb	r3, [r1, #0]
{
 8010b6c:	460d      	mov	r5, r1
 8010b6e:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010b70:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010b74:	2b20      	cmp	r3, #32
 8010b76:	d00d      	beq.n	8010b94 <USBD_StdItfReq+0x2c>
 8010b78:	2b40      	cmp	r3, #64	; 0x40
 8010b7a:	d00b      	beq.n	8010b94 <USBD_StdItfReq+0x2c>
 8010b7c:	b153      	cbz	r3, 8010b94 <USBD_StdItfReq+0x2c>
  USBD_StatusTypeDef ret = USBD_OK;
 8010b7e:	2600      	movs	r6, #0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010b80:	2180      	movs	r1, #128	; 0x80
 8010b82:	4620      	mov	r0, r4
 8010b84:	f00e fd7c 	bl	801f680 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010b88:	4620      	mov	r0, r4
 8010b8a:	4631      	mov	r1, r6
 8010b8c:	f00e fd78 	bl	801f680 <USBD_LL_StallEP>
}
 8010b90:	4630      	mov	r0, r6
 8010b92:	bd70      	pop	{r4, r5, r6, pc}
    switch (pdev->dev_state)
 8010b94:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8010b98:	3b01      	subs	r3, #1
 8010b9a:	2b02      	cmp	r3, #2
 8010b9c:	d8ef      	bhi.n	8010b7e <USBD_StdItfReq+0x16>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010b9e:	792b      	ldrb	r3, [r5, #4]
 8010ba0:	2b01      	cmp	r3, #1
 8010ba2:	d80f      	bhi.n	8010bc4 <USBD_StdItfReq+0x5c>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010ba4:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8010ba8:	4629      	mov	r1, r5
 8010baa:	4620      	mov	r0, r4
 8010bac:	689b      	ldr	r3, [r3, #8]
 8010bae:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8010bb0:	88eb      	ldrh	r3, [r5, #6]
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010bb2:	4606      	mov	r6, r0
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d1eb      	bne.n	8010b90 <USBD_StdItfReq+0x28>
 8010bb8:	2800      	cmp	r0, #0
 8010bba:	d1e9      	bne.n	8010b90 <USBD_StdItfReq+0x28>
          (void)USBD_CtlSendStatus(pdev);
 8010bbc:	4620      	mov	r0, r4
 8010bbe:	f000 f91d 	bl	8010dfc <USBD_CtlSendStatus>
 8010bc2:	e7e5      	b.n	8010b90 <USBD_StdItfReq+0x28>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010bc4:	2180      	movs	r1, #128	; 0x80
 8010bc6:	4620      	mov	r0, r4
 8010bc8:	f00e fd5a 	bl	801f680 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010bcc:	2100      	movs	r1, #0
 8010bce:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 8010bd0:	460e      	mov	r6, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 8010bd2:	f00e fd55 	bl	801f680 <USBD_LL_StallEP>
 8010bd6:	e7db      	b.n	8010b90 <USBD_StdItfReq+0x28>

08010bd8 <USBD_StdEPReq>:
{
 8010bd8:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010bda:	780b      	ldrb	r3, [r1, #0]
{
 8010bdc:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010bde:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010be2:	2b20      	cmp	r3, #32
 8010be4:	d027      	beq.n	8010c36 <USBD_StdEPReq+0x5e>
 8010be6:	2b40      	cmp	r3, #64	; 0x40
 8010be8:	d025      	beq.n	8010c36 <USBD_StdEPReq+0x5e>
 8010bea:	460c      	mov	r4, r1
 8010bec:	b14b      	cbz	r3, 8010c02 <USBD_StdEPReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010bee:	2180      	movs	r1, #128	; 0x80
 8010bf0:	4628      	mov	r0, r5
 8010bf2:	f00e fd45 	bl	801f680 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010bf6:	4628      	mov	r0, r5
 8010bf8:	2100      	movs	r1, #0
 8010bfa:	f00e fd41 	bl	801f680 <USBD_LL_StallEP>
}
 8010bfe:	2000      	movs	r0, #0
 8010c00:	bd70      	pop	{r4, r5, r6, pc}
    switch (req->bRequest)
 8010c02:	784b      	ldrb	r3, [r1, #1]
  ep_addr = LOBYTE(req->wIndex);
 8010c04:	888a      	ldrh	r2, [r1, #4]
    switch (req->bRequest)
 8010c06:	2b01      	cmp	r3, #1
  ep_addr = LOBYTE(req->wIndex);
 8010c08:	b2d1      	uxtb	r1, r2
    switch (req->bRequest)
 8010c0a:	d03d      	beq.n	8010c88 <USBD_StdEPReq+0xb0>
 8010c0c:	d31a      	bcc.n	8010c44 <USBD_StdEPReq+0x6c>
 8010c0e:	2b03      	cmp	r3, #3
 8010c10:	d1ed      	bne.n	8010bee <USBD_StdEPReq+0x16>
      switch (pdev->dev_state)
 8010c12:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8010c16:	2b02      	cmp	r3, #2
 8010c18:	d04d      	beq.n	8010cb6 <USBD_StdEPReq+0xde>
 8010c1a:	2b03      	cmp	r3, #3
 8010c1c:	d1e7      	bne.n	8010bee <USBD_StdEPReq+0x16>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8010c1e:	8863      	ldrh	r3, [r4, #2]
 8010c20:	b92b      	cbnz	r3, 8010c2e <USBD_StdEPReq+0x56>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010c22:	064a      	lsls	r2, r1, #25
 8010c24:	d003      	beq.n	8010c2e <USBD_StdEPReq+0x56>
 8010c26:	88e3      	ldrh	r3, [r4, #6]
 8010c28:	b90b      	cbnz	r3, 8010c2e <USBD_StdEPReq+0x56>
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8010c2a:	f00e fd29 	bl	801f680 <USBD_LL_StallEP>
        (void)USBD_CtlSendStatus(pdev);
 8010c2e:	4628      	mov	r0, r5
 8010c30:	f000 f8e4 	bl	8010dfc <USBD_CtlSendStatus>
        break;
 8010c34:	e7e3      	b.n	8010bfe <USBD_StdEPReq+0x26>
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010c36:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 8010c3a:	4628      	mov	r0, r5
 8010c3c:	689b      	ldr	r3, [r3, #8]
}
 8010c3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010c42:	4718      	bx	r3
      switch (pdev->dev_state)
 8010c44:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8010c48:	2b02      	cmp	r3, #2
 8010c4a:	d03d      	beq.n	8010cc8 <USBD_StdEPReq+0xf0>
 8010c4c:	2b03      	cmp	r3, #3
 8010c4e:	d1ce      	bne.n	8010bee <USBD_StdEPReq+0x16>
 8010c50:	f001 030f 	and.w	r3, r1, #15
        if ((ep_addr & 0x80U) == 0x80U)
 8010c54:	0612      	lsls	r2, r2, #24
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010c56:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8010c5a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        if ((ep_addr & 0x80U) == 0x80U)
 8010c5e:	d445      	bmi.n	8010cec <USBD_StdEPReq+0x114>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010c60:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d0c2      	beq.n	8010bee <USBD_StdEPReq+0x16>
 8010c68:	f001 037f 	and.w	r3, r1, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010c6c:	2414      	movs	r4, #20
 8010c6e:	fb04 0403 	mla	r4, r4, r3, r0
 8010c72:	f504 74aa 	add.w	r4, r4, #340	; 0x154
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d144      	bne.n	8010d04 <USBD_StdEPReq+0x12c>
            pep->status = 0x0001U;
 8010c7a:	6023      	str	r3, [r4, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010c7c:	4621      	mov	r1, r4
 8010c7e:	4628      	mov	r0, r5
 8010c80:	2202      	movs	r2, #2
 8010c82:	f000 f88d 	bl	8010da0 <USBD_CtlSendData>
          break;
 8010c86:	e7ba      	b.n	8010bfe <USBD_StdEPReq+0x26>
      switch (pdev->dev_state)
 8010c88:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8010c8c:	2b02      	cmp	r3, #2
 8010c8e:	d012      	beq.n	8010cb6 <USBD_StdEPReq+0xde>
 8010c90:	2b03      	cmp	r3, #3
 8010c92:	d1ac      	bne.n	8010bee <USBD_StdEPReq+0x16>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8010c94:	8863      	ldrh	r3, [r4, #2]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d1b1      	bne.n	8010bfe <USBD_StdEPReq+0x26>
          if ((ep_addr & 0x7FU) != 0x00U)
 8010c9a:	064e      	lsls	r6, r1, #25
 8010c9c:	d001      	beq.n	8010ca2 <USBD_StdEPReq+0xca>
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010c9e:	f00e fcfd 	bl	801f69c <USBD_LL_ClearStallEP>
          (void)USBD_CtlSendStatus(pdev);
 8010ca2:	4628      	mov	r0, r5
 8010ca4:	f000 f8aa 	bl	8010dfc <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010ca8:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 8010cac:	4621      	mov	r1, r4
 8010cae:	4628      	mov	r0, r5
 8010cb0:	689b      	ldr	r3, [r3, #8]
 8010cb2:	4798      	blx	r3
 8010cb4:	e7a3      	b.n	8010bfe <USBD_StdEPReq+0x26>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010cb6:	064b      	lsls	r3, r1, #25
 8010cb8:	d099      	beq.n	8010bee <USBD_StdEPReq+0x16>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8010cba:	f00e fce1 	bl	801f680 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010cbe:	4628      	mov	r0, r5
 8010cc0:	2180      	movs	r1, #128	; 0x80
 8010cc2:	f00e fcdd 	bl	801f680 <USBD_LL_StallEP>
 8010cc6:	e79a      	b.n	8010bfe <USBD_StdEPReq+0x26>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010cc8:	0648      	lsls	r0, r1, #25
 8010cca:	d190      	bne.n	8010bee <USBD_StdEPReq+0x16>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010ccc:	0611      	lsls	r1, r2, #24
        pep->status = 0x0000U;
 8010cce:	f04f 0400 	mov.w	r4, #0
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010cd2:	4628      	mov	r0, r5
 8010cd4:	f04f 0202 	mov.w	r2, #2
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010cd8:	bf4c      	ite	mi
 8010cda:	f105 0314 	addmi.w	r3, r5, #20
 8010cde:	f505 73aa 	addpl.w	r3, r5, #340	; 0x154
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010ce2:	4619      	mov	r1, r3
        pep->status = 0x0000U;
 8010ce4:	601c      	str	r4, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010ce6:	f000 f85b 	bl	8010da0 <USBD_CtlSendData>
        break;
 8010cea:	e788      	b.n	8010bfe <USBD_StdEPReq+0x26>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010cec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	f43f af7d 	beq.w	8010bee <USBD_StdEPReq+0x16>
 8010cf4:	f001 037f 	and.w	r3, r1, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010cf8:	1c5c      	adds	r4, r3, #1
 8010cfa:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8010cfe:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8010d02:	e7b8      	b.n	8010c76 <USBD_StdEPReq+0x9e>
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010d04:	4628      	mov	r0, r5
 8010d06:	f00e fcd7 	bl	801f6b8 <USBD_LL_IsStallEP>
 8010d0a:	b108      	cbz	r0, 8010d10 <USBD_StdEPReq+0x138>
            pep->status = 0x0001U;
 8010d0c:	2301      	movs	r3, #1
 8010d0e:	e7b4      	b.n	8010c7a <USBD_StdEPReq+0xa2>
            pep->status = 0x0000U;
 8010d10:	6020      	str	r0, [r4, #0]
 8010d12:	e7b3      	b.n	8010c7c <USBD_StdEPReq+0xa4>

08010d14 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8010d14:	780b      	ldrb	r3, [r1, #0]
 8010d16:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8010d18:	784b      	ldrb	r3, [r1, #1]
 8010d1a:	7043      	strb	r3, [r0, #1]

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8010d1c:	78ca      	ldrb	r2, [r1, #3]
 8010d1e:	788b      	ldrb	r3, [r1, #2]
 8010d20:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 8010d24:	8043      	strh	r3, [r0, #2]
 8010d26:	794a      	ldrb	r2, [r1, #5]
 8010d28:	790b      	ldrb	r3, [r1, #4]
 8010d2a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 8010d2e:	8083      	strh	r3, [r0, #4]
 8010d30:	79ca      	ldrb	r2, [r1, #7]
 8010d32:	798b      	ldrb	r3, [r1, #6]
 8010d34:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 8010d38:	80c3      	strh	r3, [r0, #6]
}
 8010d3a:	4770      	bx	lr

08010d3c <USBD_CtlError>:
{
 8010d3c:	b510      	push	{r4, lr}
 8010d3e:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010d40:	2180      	movs	r1, #128	; 0x80
 8010d42:	f00e fc9d 	bl	801f680 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010d46:	2100      	movs	r1, #0
 8010d48:	4620      	mov	r0, r4
}
 8010d4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8010d4e:	f00e bc97 	b.w	801f680 <USBD_LL_StallEP>
 8010d52:	bf00      	nop

08010d54 <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 8010d54:	b300      	cbz	r0, 8010d98 <USBD_GetString+0x44>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8010d56:	7803      	ldrb	r3, [r0, #0]
{
 8010d58:	b430      	push	{r4, r5}
  while (*pbuff != (uint8_t)'\0')
 8010d5a:	b1f3      	cbz	r3, 8010d9a <USBD_GetString+0x46>
 8010d5c:	4604      	mov	r4, r0
  uint8_t  len = 0U;
 8010d5e:	2300      	movs	r3, #0
  {
    len++;
 8010d60:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 8010d62:	f814 5f01 	ldrb.w	r5, [r4, #1]!
    len++;
 8010d66:	b2db      	uxtb	r3, r3
  while (*pbuff != (uint8_t)'\0')
 8010d68:	2d00      	cmp	r5, #0
 8010d6a:	d1f9      	bne.n	8010d60 <USBD_GetString+0xc>
 8010d6c:	005b      	lsls	r3, r3, #1
 8010d6e:	3302      	adds	r3, #2
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010d70:	2403      	movs	r4, #3
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010d72:	8013      	strh	r3, [r2, #0]
  unicode[idx] = *(uint8_t *)len;
 8010d74:	700b      	strb	r3, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010d76:	704c      	strb	r4, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 8010d78:	7804      	ldrb	r4, [r0, #0]
 8010d7a:	b15c      	cbz	r4, 8010d94 <USBD_GetString+0x40>
  idx++;
 8010d7c:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 8010d7e:	2500      	movs	r5, #0
    idx++;
 8010d80:	1c5a      	adds	r2, r3, #1
    unicode[idx] = *pdesc;
 8010d82:	54cc      	strb	r4, [r1, r3]
    idx++;
 8010d84:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 8010d86:	b2d2      	uxtb	r2, r2
    idx++;
 8010d88:	b2db      	uxtb	r3, r3
    unicode[idx] = 0U;
 8010d8a:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 8010d8c:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8010d90:	2c00      	cmp	r4, #0
 8010d92:	d1f5      	bne.n	8010d80 <USBD_GetString+0x2c>
}
 8010d94:	bc30      	pop	{r4, r5}
 8010d96:	4770      	bx	lr
 8010d98:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 8010d9a:	2302      	movs	r3, #2
 8010d9c:	e7e8      	b.n	8010d70 <USBD_GetString+0x1c>
 8010d9e:	bf00      	nop

08010da0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010da0:	b570      	push	{r4, r5, r6, lr}
 8010da2:	4615      	mov	r5, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010da4:	2602      	movs	r6, #2
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010da6:	460a      	mov	r2, r1
 8010da8:	2100      	movs	r1, #0
  pdev->ep_in[0].total_length = len;
 8010daa:	6185      	str	r5, [r0, #24]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010dac:	462b      	mov	r3, r5
  pdev->ep_in[0].rem_length = len;
 8010dae:	61c5      	str	r5, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010db0:	f8c0 6294 	str.w	r6, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010db4:	f00e fca2 	bl	801f6fc <USBD_LL_Transmit>

  return USBD_OK;
}
 8010db8:	2000      	movs	r0, #0
 8010dba:	bd70      	pop	{r4, r5, r6, pc}

08010dbc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010dbc:	b508      	push	{r3, lr}
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010dbe:	4613      	mov	r3, r2
 8010dc0:	460a      	mov	r2, r1
 8010dc2:	2100      	movs	r1, #0
 8010dc4:	f00e fc9a 	bl	801f6fc <USBD_LL_Transmit>

  return USBD_OK;
}
 8010dc8:	2000      	movs	r0, #0
 8010dca:	bd08      	pop	{r3, pc}

08010dcc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8010dcc:	b570      	push	{r4, r5, r6, lr}
 8010dce:	4615      	mov	r5, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010dd0:	2603      	movs	r6, #3
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010dd2:	460a      	mov	r2, r1
 8010dd4:	2100      	movs	r1, #0
  pdev->ep_out[0].total_length = len;
 8010dd6:	f8c0 5158 	str.w	r5, [r0, #344]	; 0x158
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010dda:	462b      	mov	r3, r5
  pdev->ep_out[0].rem_length = len;
 8010ddc:	f8c0 515c 	str.w	r5, [r0, #348]	; 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010de0:	f8c0 6294 	str.w	r6, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010de4:	f00e fc98 	bl	801f718 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8010de8:	2000      	movs	r0, #0
 8010dea:	bd70      	pop	{r4, r5, r6, pc}

08010dec <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010dec:	b508      	push	{r3, lr}
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010dee:	4613      	mov	r3, r2
 8010df0:	460a      	mov	r2, r1
 8010df2:	2100      	movs	r1, #0
 8010df4:	f00e fc90 	bl	801f718 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8010df8:	2000      	movs	r0, #0
 8010dfa:	bd08      	pop	{r3, pc}

08010dfc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010dfc:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010dfe:	2204      	movs	r2, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010e00:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010e02:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010e06:	4619      	mov	r1, r3
 8010e08:	461a      	mov	r2, r3
 8010e0a:	f00e fc77 	bl	801f6fc <USBD_LL_Transmit>

  return USBD_OK;
}
 8010e0e:	2000      	movs	r0, #0
 8010e10:	bd08      	pop	{r3, pc}
 8010e12:	bf00      	nop

08010e14 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010e14:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010e16:	2205      	movs	r2, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010e18:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010e1a:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010e1e:	4619      	mov	r1, r3
 8010e20:	461a      	mov	r2, r3
 8010e22:	f00e fc79 	bl	801f718 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8010e26:	2000      	movs	r0, #0
 8010e28:	bd08      	pop	{r3, pc}
 8010e2a:	bf00      	nop

08010e2c <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8010e2c:	4b11      	ldr	r3, [pc, #68]	; (8010e74 <FATFS_LinkDriver+0x48>)
 8010e2e:	7a5a      	ldrb	r2, [r3, #9]
 8010e30:	b10a      	cbz	r2, 8010e36 <FATFS_LinkDriver+0xa>
  uint8_t ret = 1;
 8010e32:	2001      	movs	r0, #1
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
}
 8010e34:	4770      	bx	lr
{
 8010e36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e38:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    disk.is_initialized[disk.nbr] = 0;
 8010e3c:	f893 e009 	ldrb.w	lr, [r3, #9]
    disk.drv[disk.nbr] = drv;
 8010e40:	7a5e      	ldrb	r6, [r3, #9]
    path[1] = ':';
 8010e42:	f04f 0c3a 	mov.w	ip, #58	; 0x3a
    disk.lun[disk.nbr] = lun;
 8010e46:	7a5d      	ldrb	r5, [r3, #9]
    path[2] = '/';
 8010e48:	272f      	movs	r7, #47	; 0x2f
    DiskNum = disk.nbr++;
 8010e4a:	7a5a      	ldrb	r2, [r3, #9]
    disk.drv[disk.nbr] = drv;
 8010e4c:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    disk.lun[disk.nbr] = lun;
 8010e50:	441d      	add	r5, r3
    disk.is_initialized[disk.nbr] = 0;
 8010e52:	f803 400e 	strb.w	r4, [r3, lr]
    DiskNum = disk.nbr++;
 8010e56:	b2d2      	uxtb	r2, r2
    disk.drv[disk.nbr] = drv;
 8010e58:	6070      	str	r0, [r6, #4]
    disk.lun[disk.nbr] = lun;
 8010e5a:	722c      	strb	r4, [r5, #8]
    DiskNum = disk.nbr++;
 8010e5c:	1c50      	adds	r0, r2, #1
    path[0] = DiskNum + '0';
 8010e5e:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 8010e60:	b2c0      	uxtb	r0, r0
 8010e62:	7258      	strb	r0, [r3, #9]
    path[3] = 0;
 8010e64:	4620      	mov	r0, r4
    path[0] = DiskNum + '0';
 8010e66:	700a      	strb	r2, [r1, #0]
    path[3] = 0;
 8010e68:	70cc      	strb	r4, [r1, #3]
    path[1] = ':';
 8010e6a:	f881 c001 	strb.w	ip, [r1, #1]
    path[2] = '/';
 8010e6e:	708f      	strb	r7, [r1, #2]
}
 8010e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e72:	bf00      	nop
 8010e74:	200016e8 	.word	0x200016e8

08010e78 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8010e78:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8010e7a:	f001 f929 	bl	80120d0 <vTaskStartScheduler>
  
  return osOK;
}
 8010e7e:	2000      	movs	r0, #0
 8010e80:	bd08      	pop	{r3, pc}
 8010e82:	bf00      	nop

08010e84 <osKernelSysTick>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010e84:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 8010e88:	b90b      	cbnz	r3, 8010e8e <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
  }
  else {
    return xTaskGetTickCount();
 8010e8a:	f001 b971 	b.w	8012170 <xTaskGetTickCount>
    return xTaskGetTickCountFromISR();
 8010e8e:	f001 b975 	b.w	801217c <xTaskGetTickCountFromISR>
 8010e92:	bf00      	nop

08010e94 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8010e94:	b570      	push	{r4, r5, r6, lr}
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8010e96:	6945      	ldr	r5, [r0, #20]
{
 8010e98:	460b      	mov	r3, r1
 8010e9a:	b086      	sub	sp, #24
 8010e9c:	6902      	ldr	r2, [r0, #16]
 8010e9e:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8010ea2:	e9d0 1600 	ldrd	r1, r6, [r0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8010ea6:	b16d      	cbz	r5, 8010ec4 <osThreadCreate+0x30>
 8010ea8:	6980      	ldr	r0, [r0, #24]
 8010eaa:	b158      	cbz	r0, 8010ec4 <osThreadCreate+0x30>
  if (priority != osPriorityError) {
 8010eac:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8010eae:	bf14      	ite	ne
 8010eb0:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8010eb2:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010eb4:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8010eb8:	9400      	str	r4, [sp, #0]
 8010eba:	4630      	mov	r0, r6
 8010ebc:	f001 f896 	bl	8011fec <xTaskCreateStatic>
    return NULL;
  }     
#endif
  
  return handle;
}
 8010ec0:	b006      	add	sp, #24
 8010ec2:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8010ec4:	2c84      	cmp	r4, #132	; 0x84
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010ec6:	ad05      	add	r5, sp, #20
 8010ec8:	b292      	uxth	r2, r2
 8010eca:	4630      	mov	r0, r6
    fpriority += (priority - osPriorityIdle);
 8010ecc:	bf14      	ite	ne
 8010ece:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8010ed0:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010ed2:	9501      	str	r5, [sp, #4]
 8010ed4:	9400      	str	r4, [sp, #0]
 8010ed6:	f001 f8c7 	bl	8012068 <xTaskCreate>
 8010eda:	2801      	cmp	r0, #1
 8010edc:	bf0c      	ite	eq
 8010ede:	9805      	ldreq	r0, [sp, #20]
      return NULL;
 8010ee0:	2000      	movne	r0, #0
}
 8010ee2:	b006      	add	sp, #24
 8010ee4:	bd70      	pop	{r4, r5, r6, pc}
 8010ee6:	bf00      	nop

08010ee8 <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8010ee8:	2800      	cmp	r0, #0
 8010eea:	bf08      	it	eq
 8010eec:	2001      	moveq	r0, #1
{
 8010eee:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8010ef0:	f001 fa7c 	bl	80123ec <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8010ef4:	2000      	movs	r0, #0
 8010ef6:	bd08      	pop	{r3, pc}

08010ef8 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8010ef8:	f1a1 0101 	sub.w	r1, r1, #1
 8010efc:	4613      	mov	r3, r2
 8010efe:	b510      	push	{r4, lr}
 8010f00:	fab1 f181 	clz	r1, r1
 8010f04:	b082      	sub	sp, #8
 8010f06:	e9d0 2400 	ldrd	r2, r4, [r0]
 8010f0a:	0949      	lsrs	r1, r1, #5
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8010f0c:	b144      	cbz	r4, 8010f20 <osTimerCreate+0x28>
    return xTimerCreateStatic((const char *)"",
 8010f0e:	4808      	ldr	r0, [pc, #32]	; (8010f30 <osTimerCreate+0x38>)
 8010f10:	e9cd 2400 	strd	r2, r4, [sp]
 8010f14:	460a      	mov	r2, r1
 8010f16:	2101      	movs	r1, #1
 8010f18:	f001 fe5a 	bl	8012bd0 <xTimerCreateStatic>
#endif

#else 
	return NULL;
#endif
}
 8010f1c:	b002      	add	sp, #8
 8010f1e:	bd10      	pop	{r4, pc}
    return xTimerCreate((const char *)"",
 8010f20:	9200      	str	r2, [sp, #0]
 8010f22:	460a      	mov	r2, r1
 8010f24:	2101      	movs	r1, #1
 8010f26:	4802      	ldr	r0, [pc, #8]	; (8010f30 <osTimerCreate+0x38>)
 8010f28:	f001 fe22 	bl	8012b70 <xTimerCreate>
}
 8010f2c:	b002      	add	sp, #8
 8010f2e:	bd10      	pop	{r4, pc}
 8010f30:	08024a00 	.word	0x08024a00

08010f34 <osMutexCreate>:
{
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8010f34:	6841      	ldr	r1, [r0, #4]
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8010f36:	2001      	movs	r0, #1
  if (mutex_def->controlblock != NULL) {
 8010f38:	b109      	cbz	r1, 8010f3e <osMutexCreate+0xa>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8010f3a:	f000 bbb5 	b.w	80116a8 <xQueueCreateMutexStatic>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8010f3e:	f000 bbc9 	b.w	80116d4 <xQueueCreateMutex>
 8010f42:	bf00      	nop

08010f44 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8010f44:	b510      	push	{r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8010f46:	2400      	movs	r4, #0
{
 8010f48:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;  
 8010f4a:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8010f4c:	b300      	cbz	r0, 8010f90 <osMutexWait+0x4c>
 8010f4e:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8010f52:	b933      	cbnz	r3, 8010f62 <osMutexWait+0x1e>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8010f54:	f000 fd64 	bl	8011a20 <xQueueSemaphoreTake>
 8010f58:	2801      	cmp	r0, #1
 8010f5a:	d116      	bne.n	8010f8a <osMutexWait+0x46>
    return osErrorOS;
  }
  
  return osOK;
 8010f5c:	2000      	movs	r0, #0
}
 8010f5e:	b002      	add	sp, #8
 8010f60:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8010f62:	aa01      	add	r2, sp, #4
 8010f64:	4621      	mov	r1, r4
 8010f66:	f000 fe31 	bl	8011bcc <xQueueReceiveFromISR>
 8010f6a:	2801      	cmp	r0, #1
 8010f6c:	d10d      	bne.n	8010f8a <osMutexWait+0x46>
	portEND_SWITCHING_ISR(taskWoken);
 8010f6e:	9b01      	ldr	r3, [sp, #4]
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d0f3      	beq.n	8010f5c <osMutexWait+0x18>
 8010f74:	4b08      	ldr	r3, [pc, #32]	; (8010f98 <osMutexWait+0x54>)
 8010f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f7a:	601a      	str	r2, [r3, #0]
 8010f7c:	f3bf 8f4f 	dsb	sy
 8010f80:	f3bf 8f6f 	isb	sy
  return osOK;
 8010f84:	4620      	mov	r0, r4
}
 8010f86:	b002      	add	sp, #8
 8010f88:	bd10      	pop	{r4, pc}
      return osErrorOS;
 8010f8a:	20ff      	movs	r0, #255	; 0xff
}
 8010f8c:	b002      	add	sp, #8
 8010f8e:	bd10      	pop	{r4, pc}
    return osErrorParameter;
 8010f90:	2080      	movs	r0, #128	; 0x80
}
 8010f92:	b002      	add	sp, #8
 8010f94:	bd10      	pop	{r4, pc}
 8010f96:	bf00      	nop
 8010f98:	e000ed04 	.word	0xe000ed04

08010f9c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8010f9c:	b510      	push	{r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8010f9e:	2400      	movs	r4, #0
{
 8010fa0:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;
 8010fa2:	9401      	str	r4, [sp, #4]
 8010fa4:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 8010fa8:	b14b      	cbz	r3, 8010fbe <osMutexRelease+0x22>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8010faa:	a901      	add	r1, sp, #4
 8010fac:	f000 fc16 	bl	80117dc <xQueueGiveFromISR>
 8010fb0:	2801      	cmp	r0, #1
 8010fb2:	d10a      	bne.n	8010fca <osMutexRelease+0x2e>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010fb4:	9b01      	ldr	r3, [sp, #4]
 8010fb6:	b95b      	cbnz	r3, 8010fd0 <osMutexRelease+0x34>
  osStatus result = osOK;
 8010fb8:	2000      	movs	r0, #0
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 8010fba:	b002      	add	sp, #8
 8010fbc:	bd10      	pop	{r4, pc}
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8010fbe:	461a      	mov	r2, r3
 8010fc0:	4619      	mov	r1, r3
 8010fc2:	f000 faa7 	bl	8011514 <xQueueGenericSend>
 8010fc6:	2801      	cmp	r0, #1
 8010fc8:	d0f6      	beq.n	8010fb8 <osMutexRelease+0x1c>
    result = osErrorOS;
 8010fca:	20ff      	movs	r0, #255	; 0xff
}
 8010fcc:	b002      	add	sp, #8
 8010fce:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8010fd0:	4b05      	ldr	r3, [pc, #20]	; (8010fe8 <osMutexRelease+0x4c>)
 8010fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010fd6:	601a      	str	r2, [r3, #0]
 8010fd8:	f3bf 8f4f 	dsb	sy
 8010fdc:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8010fe0:	4620      	mov	r0, r4
}
 8010fe2:	b002      	add	sp, #8
 8010fe4:	bd10      	pop	{r4, pc}
 8010fe6:	bf00      	nop
 8010fe8:	e000ed04 	.word	0xe000ed04

08010fec <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8010fec:	b530      	push	{r4, r5, lr}
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8010fee:	6844      	ldr	r4, [r0, #4]
{ 
 8010ff0:	b083      	sub	sp, #12
  if (semaphore_def->controlblock != NULL){
 8010ff2:	b16c      	cbz	r4, 8011010 <osSemaphoreCreate+0x24>
    if (count == 1) {
 8010ff4:	2901      	cmp	r1, #1
 8010ff6:	d11d      	bne.n	8011034 <osSemaphoreCreate+0x48>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8010ff8:	2503      	movs	r5, #3
 8010ffa:	2200      	movs	r2, #0
 8010ffc:	4608      	mov	r0, r1
 8010ffe:	4623      	mov	r3, r4
 8011000:	9500      	str	r5, [sp, #0]
 8011002:	4611      	mov	r1, r2
 8011004:	f000 f9fc 	bl	8011400 <xQueueGenericCreateStatic>
 8011008:	4605      	mov	r5, r0
#else
    return NULL;
#endif
  }
#endif
}
 801100a:	4628      	mov	r0, r5
 801100c:	b003      	add	sp, #12
 801100e:	bd30      	pop	{r4, r5, pc}
    if (count == 1) {
 8011010:	2901      	cmp	r1, #1
 8011012:	d113      	bne.n	801103c <osSemaphoreCreate+0x50>
      vSemaphoreCreateBinary(sema);
 8011014:	4608      	mov	r0, r1
 8011016:	2203      	movs	r2, #3
 8011018:	4621      	mov	r1, r4
 801101a:	f000 fa49 	bl	80114b0 <xQueueGenericCreate>
 801101e:	4605      	mov	r5, r0
 8011020:	2800      	cmp	r0, #0
 8011022:	d0f2      	beq.n	801100a <osSemaphoreCreate+0x1e>
 8011024:	4623      	mov	r3, r4
 8011026:	4622      	mov	r2, r4
 8011028:	4621      	mov	r1, r4
 801102a:	f000 fa73 	bl	8011514 <xQueueGenericSend>
}
 801102e:	4628      	mov	r0, r5
 8011030:	b003      	add	sp, #12
 8011032:	bd30      	pop	{r4, r5, pc}
      return NULL;
 8011034:	2500      	movs	r5, #0
}
 8011036:	4628      	mov	r0, r5
 8011038:	b003      	add	sp, #12
 801103a:	bd30      	pop	{r4, r5, pc}
      return NULL;
 801103c:	4625      	mov	r5, r4
 801103e:	e7e4      	b.n	801100a <osSemaphoreCreate+0x1e>

08011040 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8011040:	b510      	push	{r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8011042:	2400      	movs	r4, #0
{
 8011044:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;  
 8011046:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 8011048:	b300      	cbz	r0, 801108c <osSemaphoreWait+0x4c>
 801104a:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 801104e:	b933      	cbnz	r3, 801105e <osSemaphoreWait+0x1e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8011050:	f000 fce6 	bl	8011a20 <xQueueSemaphoreTake>
 8011054:	2801      	cmp	r0, #1
 8011056:	d116      	bne.n	8011086 <osSemaphoreWait+0x46>
    return osErrorOS;
  }
  
  return osOK;
 8011058:	2000      	movs	r0, #0
}
 801105a:	b002      	add	sp, #8
 801105c:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801105e:	aa01      	add	r2, sp, #4
 8011060:	4621      	mov	r1, r4
 8011062:	f000 fdb3 	bl	8011bcc <xQueueReceiveFromISR>
 8011066:	2801      	cmp	r0, #1
 8011068:	d10d      	bne.n	8011086 <osSemaphoreWait+0x46>
	portEND_SWITCHING_ISR(taskWoken);
 801106a:	9b01      	ldr	r3, [sp, #4]
 801106c:	2b00      	cmp	r3, #0
 801106e:	d0f3      	beq.n	8011058 <osSemaphoreWait+0x18>
 8011070:	4b08      	ldr	r3, [pc, #32]	; (8011094 <osSemaphoreWait+0x54>)
 8011072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011076:	601a      	str	r2, [r3, #0]
 8011078:	f3bf 8f4f 	dsb	sy
 801107c:	f3bf 8f6f 	isb	sy
  return osOK;
 8011080:	4620      	mov	r0, r4
}
 8011082:	b002      	add	sp, #8
 8011084:	bd10      	pop	{r4, pc}
      return osErrorOS;
 8011086:	20ff      	movs	r0, #255	; 0xff
}
 8011088:	b002      	add	sp, #8
 801108a:	bd10      	pop	{r4, pc}
    return osErrorParameter;
 801108c:	2080      	movs	r0, #128	; 0x80
}
 801108e:	b002      	add	sp, #8
 8011090:	bd10      	pop	{r4, pc}
 8011092:	bf00      	nop
 8011094:	e000ed04 	.word	0xe000ed04

08011098 <osSemaphoreRelease>:
 8011098:	f7ff bf80 	b.w	8010f9c <osMutexRelease>

0801109c <osMessageCreate>:
{
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 801109c:	6882      	ldr	r2, [r0, #8]
{
 801109e:	b530      	push	{r4, r5, lr}
 80110a0:	e9d0 4100 	ldrd	r4, r1, [r0]
 80110a4:	b083      	sub	sp, #12
  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80110a6:	b10a      	cbz	r2, 80110ac <osMessageCreate+0x10>
 80110a8:	68c3      	ldr	r3, [r0, #12]
 80110aa:	b933      	cbnz	r3, 80110ba <osMessageCreate+0x1e>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80110ac:	4620      	mov	r0, r4
 80110ae:	2200      	movs	r2, #0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80110b0:	b003      	add	sp, #12
 80110b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80110b6:	f000 b9fb 	b.w	80114b0 <xQueueGenericCreate>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80110ba:	2500      	movs	r5, #0
 80110bc:	4620      	mov	r0, r4
 80110be:	9500      	str	r5, [sp, #0]
 80110c0:	f000 f99e 	bl	8011400 <xQueueGenericCreateStatic>
}
 80110c4:	b003      	add	sp, #12
 80110c6:	bd30      	pop	{r4, r5, pc}

080110c8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80110c8:	b510      	push	{r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 80110ca:	2400      	movs	r4, #0
{
 80110cc:	b084      	sub	sp, #16
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
 80110ce:	42a2      	cmp	r2, r4
 80110d0:	bf08      	it	eq
 80110d2:	2201      	moveq	r2, #1
{
 80110d4:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80110d6:	9403      	str	r4, [sp, #12]
 80110d8:	f3ef 8305 	mrs	r3, IPSR
  }
  
  if (inHandlerMode()) {
 80110dc:	b15b      	cbz	r3, 80110f6 <osMessagePut+0x2e>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80110de:	4623      	mov	r3, r4
 80110e0:	aa03      	add	r2, sp, #12
 80110e2:	a901      	add	r1, sp, #4
 80110e4:	f000 fb08 	bl	80116f8 <xQueueGenericSendFromISR>
 80110e8:	2801      	cmp	r0, #1
 80110ea:	d109      	bne.n	8011100 <osMessagePut+0x38>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 80110ec:	9b03      	ldr	r3, [sp, #12]
 80110ee:	b953      	cbnz	r3, 8011106 <osMessagePut+0x3e>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 80110f0:	2000      	movs	r0, #0
}
 80110f2:	b004      	add	sp, #16
 80110f4:	bd10      	pop	{r4, pc}
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80110f6:	a901      	add	r1, sp, #4
 80110f8:	f000 fa0c 	bl	8011514 <xQueueGenericSend>
 80110fc:	2801      	cmp	r0, #1
 80110fe:	d0f7      	beq.n	80110f0 <osMessagePut+0x28>
      return osErrorOS;
 8011100:	20ff      	movs	r0, #255	; 0xff
}
 8011102:	b004      	add	sp, #16
 8011104:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8011106:	4b05      	ldr	r3, [pc, #20]	; (801111c <osMessagePut+0x54>)
 8011108:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801110c:	601a      	str	r2, [r3, #0]
 801110e:	f3bf 8f4f 	dsb	sy
 8011112:	f3bf 8f6f 	isb	sy
  return osOK;
 8011116:	4620      	mov	r0, r4
}
 8011118:	b004      	add	sp, #16
 801111a:	bd10      	pop	{r4, pc}
 801111c:	e000ed04 	.word	0xe000ed04

08011120 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8011120:	b570      	push	{r4, r5, r6, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 8011122:	2500      	movs	r5, #0
{
 8011124:	b084      	sub	sp, #16
 8011126:	4604      	mov	r4, r0
  event.value.v = 0;
 8011128:	e9cd 5102 	strd	r5, r1, [sp, #8]
  
  if (queue_id == NULL) {
 801112c:	b359      	cbz	r1, 8011186 <osMessageGet+0x66>
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 801112e:	9500      	str	r5, [sp, #0]
 8011130:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8011134:	b99b      	cbnz	r3, 801115e <osMessageGet+0x3e>
      event.status = osOK;
    }
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8011136:	4608      	mov	r0, r1
 8011138:	a902      	add	r1, sp, #8
 801113a:	4616      	mov	r6, r2
 801113c:	f000 fbae 	bl	801189c <xQueueReceive>
 8011140:	2801      	cmp	r0, #1
 8011142:	d02e      	beq.n	80111a2 <osMessageGet+0x82>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8011144:	2e00      	cmp	r6, #0
 8011146:	bf0c      	ite	eq
 8011148:	2300      	moveq	r3, #0
 801114a:	2340      	movne	r3, #64	; 0x40
 801114c:	9301      	str	r3, [sp, #4]
    }
  }
  
  return event;
 801114e:	ab04      	add	r3, sp, #16
 8011150:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8011154:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8011158:	4620      	mov	r0, r4
 801115a:	b004      	add	sp, #16
 801115c:	bd70      	pop	{r4, r5, r6, pc}
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 801115e:	4608      	mov	r0, r1
 8011160:	466a      	mov	r2, sp
 8011162:	a902      	add	r1, sp, #8
 8011164:	f000 fd32 	bl	8011bcc <xQueueReceiveFromISR>
 8011168:	2801      	cmp	r0, #1
 801116a:	d017      	beq.n	801119c <osMessageGet+0x7c>
      event.status = osOK;
 801116c:	9501      	str	r5, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 801116e:	9b00      	ldr	r3, [sp, #0]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d0ec      	beq.n	801114e <osMessageGet+0x2e>
 8011174:	4b0c      	ldr	r3, [pc, #48]	; (80111a8 <osMessageGet+0x88>)
 8011176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801117a:	601a      	str	r2, [r3, #0]
 801117c:	f3bf 8f4f 	dsb	sy
 8011180:	f3bf 8f6f 	isb	sy
 8011184:	e7e3      	b.n	801114e <osMessageGet+0x2e>
    event.status = osErrorParameter;
 8011186:	ab04      	add	r3, sp, #16
 8011188:	2280      	movs	r2, #128	; 0x80
 801118a:	f843 2d0c 	str.w	r2, [r3, #-12]!
    return event;
 801118e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011192:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8011196:	4620      	mov	r0, r4
 8011198:	b004      	add	sp, #16
 801119a:	bd70      	pop	{r4, r5, r6, pc}
      event.status = osEventMessage;
 801119c:	2310      	movs	r3, #16
 801119e:	9301      	str	r3, [sp, #4]
 80111a0:	e7e5      	b.n	801116e <osMessageGet+0x4e>
      event.status = osEventMessage;
 80111a2:	2310      	movs	r3, #16
 80111a4:	9301      	str	r3, [sp, #4]
 80111a6:	e7d2      	b.n	801114e <osMessageGet+0x2e>
 80111a8:	e000ed04 	.word	0xe000ed04

080111ac <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80111ac:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80111b0:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80111b4:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80111b6:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80111b8:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80111ba:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80111bc:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80111c0:	4770      	bx	lr
 80111c2:	bf00      	nop

080111c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80111c4:	2300      	movs	r3, #0
 80111c6:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80111c8:	4770      	bx	lr
 80111ca:	bf00      	nop

080111cc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80111cc:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80111ce:	6802      	ldr	r2, [r0, #0]
{
 80111d0:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80111d2:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
 80111d4:	3201      	adds	r2, #1
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80111d6:	e9c1 3401 	strd	r3, r4, [r1, #4]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80111da:	689c      	ldr	r4, [r3, #8]
 80111dc:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80111de:	6099      	str	r1, [r3, #8]
}
 80111e0:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 80111e4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80111e6:	6002      	str	r2, [r0, #0]
}
 80111e8:	4770      	bx	lr
 80111ea:	bf00      	nop

080111ec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80111ec:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80111ee:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80111f0:	1c6b      	adds	r3, r5, #1
 80111f2:	d011      	beq.n	8011218 <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80111f4:	f100 0208 	add.w	r2, r0, #8
 80111f8:	e000      	b.n	80111fc <vListInsert+0x10>
 80111fa:	461a      	mov	r2, r3
 80111fc:	6853      	ldr	r3, [r2, #4]
 80111fe:	681c      	ldr	r4, [r3, #0]
 8011200:	42ac      	cmp	r4, r5
 8011202:	d9fa      	bls.n	80111fa <vListInsert+0xe>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8011204:	6804      	ldr	r4, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8011206:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8011208:	3401      	adds	r4, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801120a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801120c:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 801120e:	6051      	str	r1, [r2, #4]
	pxNewListItem->pxContainer = pxList;
 8011210:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8011212:	6004      	str	r4, [r0, #0]
}
 8011214:	bc30      	pop	{r4, r5}
 8011216:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8011218:	6902      	ldr	r2, [r0, #16]
 801121a:	6853      	ldr	r3, [r2, #4]
 801121c:	e7f2      	b.n	8011204 <vListInsert+0x18>
 801121e:	bf00      	nop

08011220 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011220:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011222:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
{
 8011226:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011228:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801122a:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801122c:	6881      	ldr	r1, [r0, #8]
	if( pxList->pxIndex == pxItemToRemove )
 801122e:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 8011230:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011234:	604a      	str	r2, [r1, #4]
	( pxList->uxNumberOfItems )--;
 8011236:	681a      	ldr	r2, [r3, #0]
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011238:	bf08      	it	eq
 801123a:	6059      	streq	r1, [r3, #4]
	pxItemToRemove->pxContainer = NULL;
 801123c:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 801123e:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
 8011240:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8011242:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 8011244:	6818      	ldr	r0, [r3, #0]
}
 8011246:	4770      	bx	lr

08011248 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011248:	b570      	push	{r4, r5, r6, lr}
 801124a:	4616      	mov	r6, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801124c:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 801124e:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011250:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011252:	b92a      	cbnz	r2, 8011260 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011254:	6806      	ldr	r6, [r0, #0]
 8011256:	3501      	adds	r5, #1
 8011258:	b366      	cbz	r6, 80112b4 <prvCopyDataToQueue+0x6c>
BaseType_t xReturn = pdFALSE;
 801125a:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801125c:	63a5      	str	r5, [r4, #56]	; 0x38

	return xReturn;
}
 801125e:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8011260:	b97e      	cbnz	r6, 8011282 <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011262:	6840      	ldr	r0, [r0, #4]
 8011264:	3501      	adds	r5, #1
 8011266:	f00e fc0a 	bl	801fa7e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801126a:	6863      	ldr	r3, [r4, #4]
 801126c:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801126e:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011270:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011272:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011274:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011276:	d3f0      	bcc.n	801125a <prvCopyDataToQueue+0x12>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011278:	6823      	ldr	r3, [r4, #0]
BaseType_t xReturn = pdFALSE;
 801127a:	4630      	mov	r0, r6
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801127c:	63a5      	str	r5, [r4, #56]	; 0x38
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801127e:	6063      	str	r3, [r4, #4]
}
 8011280:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011282:	68c0      	ldr	r0, [r0, #12]
 8011284:	f00e fbfb 	bl	801fa7e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011288:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801128a:	68e3      	ldr	r3, [r4, #12]
 801128c:	4252      	negs	r2, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801128e:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011290:	4413      	add	r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011292:	428b      	cmp	r3, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011294:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011296:	d202      	bcs.n	801129e <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011298:	68a3      	ldr	r3, [r4, #8]
 801129a:	441a      	add	r2, r3
 801129c:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 801129e:	2e02      	cmp	r6, #2
 80112a0:	d003      	beq.n	80112aa <prvCopyDataToQueue+0x62>
 80112a2:	3501      	adds	r5, #1
BaseType_t xReturn = pdFALSE;
 80112a4:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80112a6:	63a5      	str	r5, [r4, #56]	; 0x38
}
 80112a8:	bd70      	pop	{r4, r5, r6, pc}
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80112aa:	2d00      	cmp	r5, #0
 80112ac:	d1d5      	bne.n	801125a <prvCopyDataToQueue+0x12>
 80112ae:	2501      	movs	r5, #1
BaseType_t xReturn = pdFALSE;
 80112b0:	2000      	movs	r0, #0
 80112b2:	e7d3      	b.n	801125c <prvCopyDataToQueue+0x14>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80112b4:	6880      	ldr	r0, [r0, #8]
 80112b6:	f001 fa57 	bl	8012768 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80112ba:	60a6      	str	r6, [r4, #8]
 80112bc:	e7ce      	b.n	801125c <prvCopyDataToQueue+0x14>
 80112be:	bf00      	nop

080112c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80112c0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80112c2:	b172      	cbz	r2, 80112e2 <prvCopyDataFromQueue+0x22>
 80112c4:	460b      	mov	r3, r1
{
 80112c6:	b410      	push	{r4}
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80112c8:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80112cc:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80112ce:	42a1      	cmp	r1, r4
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80112d0:	60c1      	str	r1, [r0, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80112d2:	d301      	bcc.n	80112d8 <prvCopyDataFromQueue+0x18>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80112d4:	6801      	ldr	r1, [r0, #0]
 80112d6:	60c1      	str	r1, [r0, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80112d8:	4618      	mov	r0, r3
	}
}
 80112da:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80112de:	f00e bbce 	b.w	801fa7e <memcpy>
 80112e2:	4770      	bx	lr

080112e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80112e4:	b570      	push	{r4, r5, r6, lr}
 80112e6:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80112e8:	f001 feb4 	bl	8013054 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80112ec:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 80112f0:	b264      	sxtb	r4, r4

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80112f2:	2c00      	cmp	r4, #0
 80112f4:	dd16      	ble.n	8011324 <prvUnlockQueue+0x40>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80112f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80112f8:	b1a3      	cbz	r3, 8011324 <prvUnlockQueue+0x40>
 80112fa:	f105 0624 	add.w	r6, r5, #36	; 0x24
 80112fe:	e005      	b.n	801130c <prvUnlockQueue+0x28>
 8011300:	3c01      	subs	r4, #1
 8011302:	b2e3      	uxtb	r3, r4
 8011304:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011306:	b16b      	cbz	r3, 8011324 <prvUnlockQueue+0x40>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011308:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801130a:	b15b      	cbz	r3, 8011324 <prvUnlockQueue+0x40>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801130c:	4630      	mov	r0, r6
 801130e:	f001 f919 	bl	8012544 <xTaskRemoveFromEventList>
 8011312:	2800      	cmp	r0, #0
 8011314:	d0f4      	beq.n	8011300 <prvUnlockQueue+0x1c>
 8011316:	3c01      	subs	r4, #1
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011318:	f001 f9b2 	bl	8012680 <vTaskMissedYield>
 801131c:	b2e3      	uxtb	r3, r4
 801131e:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011320:	2b00      	cmp	r3, #0
 8011322:	d1f1      	bne.n	8011308 <prvUnlockQueue+0x24>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011324:	23ff      	movs	r3, #255	; 0xff
 8011326:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801132a:	f001 feb9 	bl	80130a0 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801132e:	f001 fe91 	bl	8013054 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011332:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8011336:	b264      	sxtb	r4, r4

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011338:	2c00      	cmp	r4, #0
 801133a:	dd16      	ble.n	801136a <prvUnlockQueue+0x86>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801133c:	692b      	ldr	r3, [r5, #16]
 801133e:	b1a3      	cbz	r3, 801136a <prvUnlockQueue+0x86>
 8011340:	f105 0610 	add.w	r6, r5, #16
 8011344:	e005      	b.n	8011352 <prvUnlockQueue+0x6e>
 8011346:	3c01      	subs	r4, #1
 8011348:	b2e3      	uxtb	r3, r4
 801134a:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801134c:	b16b      	cbz	r3, 801136a <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801134e:	692b      	ldr	r3, [r5, #16]
 8011350:	b15b      	cbz	r3, 801136a <prvUnlockQueue+0x86>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011352:	4630      	mov	r0, r6
 8011354:	f001 f8f6 	bl	8012544 <xTaskRemoveFromEventList>
 8011358:	2800      	cmp	r0, #0
 801135a:	d0f4      	beq.n	8011346 <prvUnlockQueue+0x62>
 801135c:	3c01      	subs	r4, #1
				{
					vTaskMissedYield();
 801135e:	f001 f98f 	bl	8012680 <vTaskMissedYield>
 8011362:	b2e3      	uxtb	r3, r4
 8011364:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011366:	2b00      	cmp	r3, #0
 8011368:	d1f1      	bne.n	801134e <prvUnlockQueue+0x6a>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801136a:	23ff      	movs	r3, #255	; 0xff
 801136c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8011370:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8011374:	f001 be94 	b.w	80130a0 <vPortExitCritical>

08011378 <xQueueGenericReset>:
{
 8011378:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 801137a:	b1e0      	cbz	r0, 80113b6 <xQueueGenericReset+0x3e>
 801137c:	4604      	mov	r4, r0
 801137e:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8011380:	f001 fe68 	bl	8013054 <vPortEnterCritical>
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011384:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011386:	6822      	ldr	r2, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011388:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 801138a:	20ff      	movs	r0, #255	; 0xff
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801138c:	6062      	str	r2, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
 801138e:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011392:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011396:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
 801139a:	fb03 f301 	mul.w	r3, r3, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801139e:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80113a0:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80113a2:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80113a4:	60a3      	str	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80113a6:	60e2      	str	r2, [r4, #12]
		if( xNewQueue == pdFALSE )
 80113a8:	b985      	cbnz	r5, 80113cc <xQueueGenericReset+0x54>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80113aa:	6923      	ldr	r3, [r4, #16]
 80113ac:	b9bb      	cbnz	r3, 80113de <xQueueGenericReset+0x66>
	taskEXIT_CRITICAL();
 80113ae:	f001 fe77 	bl	80130a0 <vPortExitCritical>
}
 80113b2:	2001      	movs	r0, #1
 80113b4:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80113b6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80113ba:	b672      	cpsid	i
 80113bc:	f383 8811 	msr	BASEPRI, r3
 80113c0:	f3bf 8f6f 	isb	sy
 80113c4:	f3bf 8f4f 	dsb	sy
 80113c8:	b662      	cpsie	i
 80113ca:	e7fe      	b.n	80113ca <xQueueGenericReset+0x52>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80113cc:	f104 0010 	add.w	r0, r4, #16
 80113d0:	f7ff feec 	bl	80111ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80113d4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80113d8:	f7ff fee8 	bl	80111ac <vListInitialise>
 80113dc:	e7e7      	b.n	80113ae <xQueueGenericReset+0x36>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80113de:	f104 0010 	add.w	r0, r4, #16
 80113e2:	f001 f8af 	bl	8012544 <xTaskRemoveFromEventList>
 80113e6:	2800      	cmp	r0, #0
 80113e8:	d0e1      	beq.n	80113ae <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 80113ea:	4b04      	ldr	r3, [pc, #16]	; (80113fc <xQueueGenericReset+0x84>)
 80113ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80113f0:	601a      	str	r2, [r3, #0]
 80113f2:	f3bf 8f4f 	dsb	sy
 80113f6:	f3bf 8f6f 	isb	sy
 80113fa:	e7d8      	b.n	80113ae <xQueueGenericReset+0x36>
 80113fc:	e000ed04 	.word	0xe000ed04

08011400 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011400:	b950      	cbnz	r0, 8011418 <xQueueGenericCreateStatic+0x18>
 8011402:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011406:	b672      	cpsid	i
 8011408:	f383 8811 	msr	BASEPRI, r3
 801140c:	f3bf 8f6f 	isb	sy
 8011410:	f3bf 8f4f 	dsb	sy
 8011414:	b662      	cpsie	i
 8011416:	e7fe      	b.n	8011416 <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 8011418:	b163      	cbz	r3, 8011434 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801141a:	b1b2      	cbz	r2, 801144a <xQueueGenericCreateStatic+0x4a>
 801141c:	b9a9      	cbnz	r1, 801144a <xQueueGenericCreateStatic+0x4a>
 801141e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011422:	b672      	cpsid	i
 8011424:	f383 8811 	msr	BASEPRI, r3
 8011428:	f3bf 8f6f 	isb	sy
 801142c:	f3bf 8f4f 	dsb	sy
 8011430:	b662      	cpsie	i
 8011432:	e7fe      	b.n	8011432 <xQueueGenericCreateStatic+0x32>
 8011434:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011438:	b672      	cpsid	i
 801143a:	f383 8811 	msr	BASEPRI, r3
 801143e:	f3bf 8f6f 	isb	sy
 8011442:	f3bf 8f4f 	dsb	sy
 8011446:	b662      	cpsie	i
 8011448:	e7fe      	b.n	8011448 <xQueueGenericCreateStatic+0x48>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801144a:	b95a      	cbnz	r2, 8011464 <xQueueGenericCreateStatic+0x64>
 801144c:	b151      	cbz	r1, 8011464 <xQueueGenericCreateStatic+0x64>
 801144e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011452:	b672      	cpsid	i
 8011454:	f383 8811 	msr	BASEPRI, r3
 8011458:	f3bf 8f6f 	isb	sy
 801145c:	f3bf 8f4f 	dsb	sy
 8011460:	b662      	cpsie	i
 8011462:	e7fe      	b.n	8011462 <xQueueGenericCreateStatic+0x62>
	{
 8011464:	b530      	push	{r4, r5, lr}
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011466:	2448      	movs	r4, #72	; 0x48
	{
 8011468:	b083      	sub	sp, #12
			volatile size_t xSize = sizeof( StaticQueue_t );
 801146a:	9401      	str	r4, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 801146c:	9c01      	ldr	r4, [sp, #4]
 801146e:	2c48      	cmp	r4, #72	; 0x48
 8011470:	d00a      	beq.n	8011488 <xQueueGenericCreateStatic+0x88>
 8011472:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011476:	b672      	cpsid	i
 8011478:	f383 8811 	msr	BASEPRI, r3
 801147c:	f3bf 8f6f 	isb	sy
 8011480:	f3bf 8f4f 	dsb	sy
 8011484:	b662      	cpsie	i
 8011486:	e7fe      	b.n	8011486 <xQueueGenericCreateStatic+0x86>
 8011488:	461c      	mov	r4, r3
 801148a:	4613      	mov	r3, r2
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801148c:	2501      	movs	r5, #1
 801148e:	460a      	mov	r2, r1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011490:	2900      	cmp	r1, #0
 8011492:	bf08      	it	eq
 8011494:	4623      	moveq	r3, r4
	pxNewQueue->uxLength = uxQueueLength;
 8011496:	63e0      	str	r0, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011498:	4629      	mov	r1, r5
 801149a:	4620      	mov	r0, r4
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801149c:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 801149e:	6422      	str	r2, [r4, #64]	; 0x40
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80114a0:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80114a4:	9b01      	ldr	r3, [sp, #4]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80114a6:	f7ff ff67 	bl	8011378 <xQueueGenericReset>
	}
 80114aa:	4620      	mov	r0, r4
 80114ac:	b003      	add	sp, #12
 80114ae:	bd30      	pop	{r4, r5, pc}

080114b0 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80114b0:	b950      	cbnz	r0, 80114c8 <xQueueGenericCreate+0x18>
 80114b2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80114b6:	b672      	cpsid	i
 80114b8:	f383 8811 	msr	BASEPRI, r3
 80114bc:	f3bf 8f6f 	isb	sy
 80114c0:	f3bf 8f4f 	dsb	sy
 80114c4:	b662      	cpsie	i
 80114c6:	e7fe      	b.n	80114c6 <xQueueGenericCreate+0x16>
	{
 80114c8:	b570      	push	{r4, r5, r6, lr}
 80114ca:	4606      	mov	r6, r0
 80114cc:	460d      	mov	r5, r1
		if( uxItemSize == ( UBaseType_t ) 0 )
 80114ce:	b169      	cbz	r1, 80114ec <xQueueGenericCreate+0x3c>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80114d0:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80114d4:	3048      	adds	r0, #72	; 0x48
 80114d6:	f001 ff25 	bl	8013324 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80114da:	4604      	mov	r4, r0
 80114dc:	b1b0      	cbz	r0, 801150c <xQueueGenericCreate+0x5c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80114de:	2200      	movs	r2, #0
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80114e0:	f100 0348 	add.w	r3, r0, #72	; 0x48
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80114e4:	f880 2046 	strb.w	r2, [r0, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80114e8:	6003      	str	r3, [r0, #0]
 80114ea:	e007      	b.n	80114fc <xQueueGenericCreate+0x4c>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80114ec:	2048      	movs	r0, #72	; 0x48
 80114ee:	f001 ff19 	bl	8013324 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80114f2:	4604      	mov	r4, r0
 80114f4:	b150      	cbz	r0, 801150c <xQueueGenericCreate+0x5c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80114f6:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80114fa:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80114fc:	63e6      	str	r6, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80114fe:	2101      	movs	r1, #1
	pxNewQueue->uxItemSize = uxItemSize;
 8011500:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011502:	4620      	mov	r0, r4
 8011504:	f7ff ff38 	bl	8011378 <xQueueGenericReset>
	}
 8011508:	4620      	mov	r0, r4
 801150a:	bd70      	pop	{r4, r5, r6, pc}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801150c:	2400      	movs	r4, #0
	}
 801150e:	4620      	mov	r0, r4
 8011510:	bd70      	pop	{r4, r5, r6, pc}
 8011512:	bf00      	nop

08011514 <xQueueGenericSend>:
{
 8011514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011518:	b084      	sub	sp, #16
 801151a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 801151c:	2800      	cmp	r0, #0
 801151e:	f000 80a3 	beq.w	8011668 <xQueueGenericSend+0x154>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011522:	2900      	cmp	r1, #0
 8011524:	f000 8091 	beq.w	801164a <xQueueGenericSend+0x136>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011528:	2b02      	cmp	r3, #2
 801152a:	d10d      	bne.n	8011548 <xQueueGenericSend+0x34>
 801152c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801152e:	2a01      	cmp	r2, #1
 8011530:	d00a      	beq.n	8011548 <xQueueGenericSend+0x34>
 8011532:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011536:	b672      	cpsid	i
 8011538:	f383 8811 	msr	BASEPRI, r3
 801153c:	f3bf 8f6f 	isb	sy
 8011540:	f3bf 8f4f 	dsb	sy
 8011544:	b662      	cpsie	i
 8011546:	e7fe      	b.n	8011546 <xQueueGenericSend+0x32>
 8011548:	4604      	mov	r4, r0
 801154a:	461e      	mov	r6, r3
 801154c:	4689      	mov	r9, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801154e:	f001 f8a3 	bl	8012698 <xTaskGetSchedulerState>
 8011552:	b960      	cbnz	r0, 801156e <xQueueGenericSend+0x5a>
 8011554:	9b01      	ldr	r3, [sp, #4]
 8011556:	b153      	cbz	r3, 801156e <xQueueGenericSend+0x5a>
 8011558:	f04f 0330 	mov.w	r3, #48	; 0x30
 801155c:	b672      	cpsid	i
 801155e:	f383 8811 	msr	BASEPRI, r3
 8011562:	f3bf 8f6f 	isb	sy
 8011566:	f3bf 8f4f 	dsb	sy
 801156a:	b662      	cpsie	i
 801156c:	e7fe      	b.n	801156c <xQueueGenericSend+0x58>
 801156e:	f1a6 0502 	sub.w	r5, r6, #2
{
 8011572:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8011574:	f8df a12c 	ldr.w	sl, [pc, #300]	; 80116a4 <xQueueGenericSend+0x190>
 8011578:	fab5 f585 	clz	r5, r5
		prvLockQueue( pxQueue );
 801157c:	46b8      	mov	r8, r7
 801157e:	096d      	lsrs	r5, r5, #5
 8011580:	e007      	b.n	8011592 <xQueueGenericSend+0x7e>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8011582:	f001 fd8d 	bl	80130a0 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8011586:	4620      	mov	r0, r4
 8011588:	f7ff feac 	bl	80112e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801158c:	f000 fea8 	bl	80122e0 <xTaskResumeAll>
 8011590:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 8011592:	f001 fd5f 	bl	8013054 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011596:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8011598:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801159a:	429a      	cmp	r2, r3
 801159c:	d33f      	bcc.n	801161e <xQueueGenericSend+0x10a>
 801159e:	2d00      	cmp	r5, #0
 80115a0:	d13d      	bne.n	801161e <xQueueGenericSend+0x10a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80115a2:	9b01      	ldr	r3, [sp, #4]
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d06a      	beq.n	801167e <xQueueGenericSend+0x16a>
				else if( xEntryTimeSet == pdFALSE )
 80115a8:	b917      	cbnz	r7, 80115b0 <xQueueGenericSend+0x9c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80115aa:	a802      	add	r0, sp, #8
 80115ac:	f001 f812 	bl	80125d4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80115b0:	f001 fd76 	bl	80130a0 <vPortExitCritical>
		vTaskSuspendAll();
 80115b4:	f000 fdd4 	bl	8012160 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80115b8:	f001 fd4c 	bl	8013054 <vPortEnterCritical>
 80115bc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80115c0:	2bff      	cmp	r3, #255	; 0xff
 80115c2:	d101      	bne.n	80115c8 <xQueueGenericSend+0xb4>
 80115c4:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 80115c8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80115cc:	2bff      	cmp	r3, #255	; 0xff
 80115ce:	d101      	bne.n	80115d4 <xQueueGenericSend+0xc0>
 80115d0:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 80115d4:	f001 fd64 	bl	80130a0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80115d8:	a901      	add	r1, sp, #4
 80115da:	a802      	add	r0, sp, #8
 80115dc:	f001 f806 	bl	80125ec <xTaskCheckForTimeOut>
 80115e0:	2800      	cmp	r0, #0
 80115e2:	d157      	bne.n	8011694 <xQueueGenericSend+0x180>
	taskENTER_CRITICAL();
 80115e4:	f001 fd36 	bl	8013054 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80115e8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80115ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80115ec:	429a      	cmp	r2, r3
 80115ee:	d1c8      	bne.n	8011582 <xQueueGenericSend+0x6e>
	taskEXIT_CRITICAL();
 80115f0:	f001 fd56 	bl	80130a0 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80115f4:	9901      	ldr	r1, [sp, #4]
 80115f6:	f104 0010 	add.w	r0, r4, #16
 80115fa:	f000 ff67 	bl	80124cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80115fe:	4620      	mov	r0, r4
 8011600:	f7ff fe70 	bl	80112e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011604:	f000 fe6c 	bl	80122e0 <xTaskResumeAll>
 8011608:	2800      	cmp	r0, #0
 801160a:	d1c1      	bne.n	8011590 <xQueueGenericSend+0x7c>
					portYIELD_WITHIN_API();
 801160c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011610:	f8ca 3000 	str.w	r3, [sl]
 8011614:	f3bf 8f4f 	dsb	sy
 8011618:	f3bf 8f6f 	isb	sy
 801161c:	e7b8      	b.n	8011590 <xQueueGenericSend+0x7c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801161e:	4632      	mov	r2, r6
 8011620:	4649      	mov	r1, r9
 8011622:	4620      	mov	r0, r4
 8011624:	f7ff fe10 	bl	8011248 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011628:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801162a:	bb63      	cbnz	r3, 8011686 <xQueueGenericSend+0x172>
					else if( xYieldRequired != pdFALSE )
 801162c:	b138      	cbz	r0, 801163e <xQueueGenericSend+0x12a>
						queueYIELD_IF_USING_PREEMPTION();
 801162e:	4b1d      	ldr	r3, [pc, #116]	; (80116a4 <xQueueGenericSend+0x190>)
 8011630:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011634:	601a      	str	r2, [r3, #0]
 8011636:	f3bf 8f4f 	dsb	sy
 801163a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 801163e:	f001 fd2f 	bl	80130a0 <vPortExitCritical>
				return pdPASS;
 8011642:	2001      	movs	r0, #1
}
 8011644:	b004      	add	sp, #16
 8011646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801164a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 801164c:	2a00      	cmp	r2, #0
 801164e:	f43f af6b 	beq.w	8011528 <xQueueGenericSend+0x14>
 8011652:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011656:	b672      	cpsid	i
 8011658:	f383 8811 	msr	BASEPRI, r3
 801165c:	f3bf 8f6f 	isb	sy
 8011660:	f3bf 8f4f 	dsb	sy
 8011664:	b662      	cpsie	i
 8011666:	e7fe      	b.n	8011666 <xQueueGenericSend+0x152>
 8011668:	f04f 0330 	mov.w	r3, #48	; 0x30
 801166c:	b672      	cpsid	i
 801166e:	f383 8811 	msr	BASEPRI, r3
 8011672:	f3bf 8f6f 	isb	sy
 8011676:	f3bf 8f4f 	dsb	sy
 801167a:	b662      	cpsie	i
 801167c:	e7fe      	b.n	801167c <xQueueGenericSend+0x168>
					taskEXIT_CRITICAL();
 801167e:	f001 fd0f 	bl	80130a0 <vPortExitCritical>
					return errQUEUE_FULL;
 8011682:	4628      	mov	r0, r5
 8011684:	e7de      	b.n	8011644 <xQueueGenericSend+0x130>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011686:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801168a:	f000 ff5b 	bl	8012544 <xTaskRemoveFromEventList>
 801168e:	2800      	cmp	r0, #0
 8011690:	d1cd      	bne.n	801162e <xQueueGenericSend+0x11a>
 8011692:	e7d4      	b.n	801163e <xQueueGenericSend+0x12a>
			prvUnlockQueue( pxQueue );
 8011694:	4620      	mov	r0, r4
 8011696:	f7ff fe25 	bl	80112e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801169a:	f000 fe21 	bl	80122e0 <xTaskResumeAll>
			return errQUEUE_FULL;
 801169e:	2000      	movs	r0, #0
 80116a0:	e7d0      	b.n	8011644 <xQueueGenericSend+0x130>
 80116a2:	bf00      	nop
 80116a4:	e000ed04 	.word	0xe000ed04

080116a8 <xQueueCreateMutexStatic>:
	{
 80116a8:	b510      	push	{r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80116aa:	2200      	movs	r2, #0
	{
 80116ac:	b082      	sub	sp, #8
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80116ae:	460b      	mov	r3, r1
 80116b0:	9000      	str	r0, [sp, #0]
 80116b2:	4611      	mov	r1, r2
 80116b4:	2001      	movs	r0, #1
 80116b6:	f7ff fea3 	bl	8011400 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 80116ba:	4604      	mov	r4, r0
 80116bc:	b138      	cbz	r0, 80116ce <xQueueCreateMutexStatic+0x26>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80116be:	2300      	movs	r3, #0
 80116c0:	6083      	str	r3, [r0, #8]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80116c2:	461a      	mov	r2, r3
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80116c4:	6003      	str	r3, [r0, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80116c6:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80116c8:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80116ca:	f7ff ff23 	bl	8011514 <xQueueGenericSend>
	}
 80116ce:	4620      	mov	r0, r4
 80116d0:	b002      	add	sp, #8
 80116d2:	bd10      	pop	{r4, pc}

080116d4 <xQueueCreateMutex>:
	{
 80116d4:	b510      	push	{r4, lr}
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80116d6:	4602      	mov	r2, r0
 80116d8:	2100      	movs	r1, #0
 80116da:	2001      	movs	r0, #1
 80116dc:	f7ff fee8 	bl	80114b0 <xQueueGenericCreate>
		if( pxNewQueue != NULL )
 80116e0:	4604      	mov	r4, r0
 80116e2:	b138      	cbz	r0, 80116f4 <xQueueCreateMutex+0x20>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80116e4:	2300      	movs	r3, #0
 80116e6:	6083      	str	r3, [r0, #8]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80116e8:	461a      	mov	r2, r3
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80116ea:	6003      	str	r3, [r0, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80116ec:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80116ee:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80116f0:	f7ff ff10 	bl	8011514 <xQueueGenericSend>
	}
 80116f4:	4620      	mov	r0, r4
 80116f6:	bd10      	pop	{r4, pc}

080116f8 <xQueueGenericSendFromISR>:
{
 80116f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80116fc:	2800      	cmp	r0, #0
 80116fe:	d03e      	beq.n	801177e <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011700:	b379      	cbz	r1, 8011762 <xQueueGenericSendFromISR+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011702:	2b02      	cmp	r3, #2
 8011704:	d10d      	bne.n	8011722 <xQueueGenericSendFromISR+0x2a>
 8011706:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8011708:	2c01      	cmp	r4, #1
 801170a:	d00a      	beq.n	8011722 <xQueueGenericSendFromISR+0x2a>
 801170c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011710:	b672      	cpsid	i
 8011712:	f383 8811 	msr	BASEPRI, r3
 8011716:	f3bf 8f6f 	isb	sy
 801171a:	f3bf 8f4f 	dsb	sy
 801171e:	b662      	cpsie	i
 8011720:	e7fe      	b.n	8011720 <xQueueGenericSendFromISR+0x28>
 8011722:	4604      	mov	r4, r0
 8011724:	461f      	mov	r7, r3
 8011726:	4690      	mov	r8, r2
 8011728:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801172a:	f001 fda1 	bl	8013270 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801172e:	f3ef 8611 	mrs	r6, BASEPRI
 8011732:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011736:	b672      	cpsid	i
 8011738:	f383 8811 	msr	BASEPRI, r3
 801173c:	f3bf 8f6f 	isb	sy
 8011740:	f3bf 8f4f 	dsb	sy
 8011744:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011746:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8011748:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801174a:	429a      	cmp	r2, r3
 801174c:	d322      	bcc.n	8011794 <xQueueGenericSendFromISR+0x9c>
 801174e:	f1a7 0002 	sub.w	r0, r7, #2
 8011752:	fab0 f080 	clz	r0, r0
 8011756:	0940      	lsrs	r0, r0, #5
 8011758:	b9e0      	cbnz	r0, 8011794 <xQueueGenericSendFromISR+0x9c>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801175a:	f386 8811 	msr	BASEPRI, r6
}
 801175e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011762:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8011764:	2c00      	cmp	r4, #0
 8011766:	d0cc      	beq.n	8011702 <xQueueGenericSendFromISR+0xa>
	__asm volatile
 8011768:	f04f 0330 	mov.w	r3, #48	; 0x30
 801176c:	b672      	cpsid	i
 801176e:	f383 8811 	msr	BASEPRI, r3
 8011772:	f3bf 8f6f 	isb	sy
 8011776:	f3bf 8f4f 	dsb	sy
 801177a:	b662      	cpsie	i
 801177c:	e7fe      	b.n	801177c <xQueueGenericSendFromISR+0x84>
 801177e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011782:	b672      	cpsid	i
 8011784:	f383 8811 	msr	BASEPRI, r3
 8011788:	f3bf 8f6f 	isb	sy
 801178c:	f3bf 8f4f 	dsb	sy
 8011790:	b662      	cpsie	i
 8011792:	e7fe      	b.n	8011792 <xQueueGenericSendFromISR+0x9a>
			const int8_t cTxLock = pxQueue->cTxLock;
 8011794:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011798:	463a      	mov	r2, r7
 801179a:	4649      	mov	r1, r9
 801179c:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 801179e:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80117a0:	f7ff fd52 	bl	8011248 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80117a4:	1c6b      	adds	r3, r5, #1
 80117a6:	d008      	beq.n	80117ba <xQueueGenericSendFromISR+0xc2>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80117a8:	1c6b      	adds	r3, r5, #1
			xReturn = pdPASS;
 80117aa:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80117ac:	b25b      	sxtb	r3, r3
 80117ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
 80117b2:	f386 8811 	msr	BASEPRI, r6
}
 80117b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80117ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80117bc:	b90b      	cbnz	r3, 80117c2 <xQueueGenericSendFromISR+0xca>
			xReturn = pdPASS;
 80117be:	2001      	movs	r0, #1
 80117c0:	e7cb      	b.n	801175a <xQueueGenericSendFromISR+0x62>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80117c2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80117c6:	f000 febd 	bl	8012544 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 80117ca:	2800      	cmp	r0, #0
 80117cc:	d0f7      	beq.n	80117be <xQueueGenericSendFromISR+0xc6>
 80117ce:	f1b8 0f00 	cmp.w	r8, #0
 80117d2:	d0f4      	beq.n	80117be <xQueueGenericSendFromISR+0xc6>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80117d4:	2001      	movs	r0, #1
 80117d6:	f8c8 0000 	str.w	r0, [r8]
 80117da:	e7be      	b.n	801175a <xQueueGenericSendFromISR+0x62>

080117dc <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 80117dc:	2800      	cmp	r0, #0
 80117de:	d032      	beq.n	8011846 <xQueueGiveFromISR+0x6a>
	configASSERT( pxQueue->uxItemSize == 0 );
 80117e0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80117e2:	b153      	cbz	r3, 80117fa <xQueueGiveFromISR+0x1e>
	__asm volatile
 80117e4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80117e8:	b672      	cpsid	i
 80117ea:	f383 8811 	msr	BASEPRI, r3
 80117ee:	f3bf 8f6f 	isb	sy
 80117f2:	f3bf 8f4f 	dsb	sy
 80117f6:	b662      	cpsie	i
 80117f8:	e7fe      	b.n	80117f8 <xQueueGiveFromISR+0x1c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80117fa:	6803      	ldr	r3, [r0, #0]
 80117fc:	b373      	cbz	r3, 801185c <xQueueGiveFromISR+0x80>
{
 80117fe:	b570      	push	{r4, r5, r6, lr}
 8011800:	4604      	mov	r4, r0
 8011802:	460d      	mov	r5, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011804:	f001 fd34 	bl	8013270 <vPortValidateInterruptPriority>
	__asm volatile
 8011808:	f3ef 8611 	mrs	r6, BASEPRI
 801180c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011810:	b672      	cpsid	i
 8011812:	f383 8811 	msr	BASEPRI, r3
 8011816:	f3bf 8f6f 	isb	sy
 801181a:	f3bf 8f4f 	dsb	sy
 801181e:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011820:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8011822:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011824:	4293      	cmp	r3, r2
 8011826:	d92b      	bls.n	8011880 <xQueueGiveFromISR+0xa4>
			const int8_t cTxLock = pxQueue->cTxLock;
 8011828:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801182c:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 801182e:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011830:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8011832:	1c5a      	adds	r2, r3, #1
 8011834:	d020      	beq.n	8011878 <xQueueGiveFromISR+0x9c>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011836:	3301      	adds	r3, #1
			xReturn = pdPASS;
 8011838:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801183a:	b25b      	sxtb	r3, r3
 801183c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
 8011840:	f386 8811 	msr	BASEPRI, r6
}
 8011844:	bd70      	pop	{r4, r5, r6, pc}
	__asm volatile
 8011846:	f04f 0330 	mov.w	r3, #48	; 0x30
 801184a:	b672      	cpsid	i
 801184c:	f383 8811 	msr	BASEPRI, r3
 8011850:	f3bf 8f6f 	isb	sy
 8011854:	f3bf 8f4f 	dsb	sy
 8011858:	b662      	cpsie	i
 801185a:	e7fe      	b.n	801185a <xQueueGiveFromISR+0x7e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801185c:	6883      	ldr	r3, [r0, #8]
 801185e:	2b00      	cmp	r3, #0
 8011860:	d0cd      	beq.n	80117fe <xQueueGiveFromISR+0x22>
 8011862:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011866:	b672      	cpsid	i
 8011868:	f383 8811 	msr	BASEPRI, r3
 801186c:	f3bf 8f6f 	isb	sy
 8011870:	f3bf 8f4f 	dsb	sy
 8011874:	b662      	cpsie	i
 8011876:	e7fe      	b.n	8011876 <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011878:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801187a:	b91b      	cbnz	r3, 8011884 <xQueueGiveFromISR+0xa8>
			xReturn = pdPASS;
 801187c:	2001      	movs	r0, #1
 801187e:	e7df      	b.n	8011840 <xQueueGiveFromISR+0x64>
			xReturn = errQUEUE_FULL;
 8011880:	2000      	movs	r0, #0
 8011882:	e7dd      	b.n	8011840 <xQueueGiveFromISR+0x64>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011884:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8011888:	f000 fe5c 	bl	8012544 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 801188c:	2d00      	cmp	r5, #0
 801188e:	d0f5      	beq.n	801187c <xQueueGiveFromISR+0xa0>
 8011890:	2800      	cmp	r0, #0
 8011892:	d0f3      	beq.n	801187c <xQueueGiveFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011894:	2001      	movs	r0, #1
 8011896:	6028      	str	r0, [r5, #0]
 8011898:	e7d2      	b.n	8011840 <xQueueGiveFromISR+0x64>
 801189a:	bf00      	nop

0801189c <xQueueReceive>:
{
 801189c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80118a0:	b085      	sub	sp, #20
 80118a2:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80118a4:	2800      	cmp	r0, #0
 80118a6:	f000 809f 	beq.w	80119e8 <xQueueReceive+0x14c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80118aa:	2900      	cmp	r1, #0
 80118ac:	f000 808d 	beq.w	80119ca <xQueueReceive+0x12e>
 80118b0:	4604      	mov	r4, r0
 80118b2:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80118b4:	f000 fef0 	bl	8012698 <xTaskGetSchedulerState>
 80118b8:	b960      	cbnz	r0, 80118d4 <xQueueReceive+0x38>
 80118ba:	9b01      	ldr	r3, [sp, #4]
 80118bc:	b153      	cbz	r3, 80118d4 <xQueueReceive+0x38>
 80118be:	f04f 0330 	mov.w	r3, #48	; 0x30
 80118c2:	b672      	cpsid	i
 80118c4:	f383 8811 	msr	BASEPRI, r3
 80118c8:	f3bf 8f6f 	isb	sy
 80118cc:	f3bf 8f4f 	dsb	sy
 80118d0:	b662      	cpsie	i
 80118d2:	e7fe      	b.n	80118d2 <xQueueReceive+0x36>
		taskENTER_CRITICAL();
 80118d4:	f001 fbbe 	bl	8013054 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80118d8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80118da:	2d00      	cmp	r5, #0
 80118dc:	d144      	bne.n	8011968 <xQueueReceive+0xcc>
				if( xTicksToWait == ( TickType_t ) 0 )
 80118de:	9b01      	ldr	r3, [sp, #4]
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d06c      	beq.n	80119be <xQueueReceive+0x122>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80118e4:	a802      	add	r0, sp, #8
		prvLockQueue( pxQueue );
 80118e6:	462e      	mov	r6, r5
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80118e8:	f104 0924 	add.w	r9, r4, #36	; 0x24
					portYIELD_WITHIN_API();
 80118ec:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8011a1c <xQueueReceive+0x180>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80118f0:	f000 fe70 	bl	80125d4 <vTaskInternalSetTimeOutState>
 80118f4:	e012      	b.n	801191c <xQueueReceive+0x80>
	taskENTER_CRITICAL();
 80118f6:	f001 fbad 	bl	8013054 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80118fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d048      	beq.n	8011992 <xQueueReceive+0xf6>
	taskEXIT_CRITICAL();
 8011900:	f001 fbce 	bl	80130a0 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8011904:	4620      	mov	r0, r4
 8011906:	f7ff fced 	bl	80112e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801190a:	f000 fce9 	bl	80122e0 <xTaskResumeAll>
		taskENTER_CRITICAL();
 801190e:	f001 fba1 	bl	8013054 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011912:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011914:	bb45      	cbnz	r5, 8011968 <xQueueReceive+0xcc>
				if( xTicksToWait == ( TickType_t ) 0 )
 8011916:	9b01      	ldr	r3, [sp, #4]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d050      	beq.n	80119be <xQueueReceive+0x122>
		taskEXIT_CRITICAL();
 801191c:	f001 fbc0 	bl	80130a0 <vPortExitCritical>
		vTaskSuspendAll();
 8011920:	f000 fc1e 	bl	8012160 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011924:	f001 fb96 	bl	8013054 <vPortEnterCritical>
 8011928:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801192c:	2bff      	cmp	r3, #255	; 0xff
 801192e:	d02d      	beq.n	801198c <xQueueReceive+0xf0>
 8011930:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8011934:	2bff      	cmp	r3, #255	; 0xff
 8011936:	d026      	beq.n	8011986 <xQueueReceive+0xea>
 8011938:	f001 fbb2 	bl	80130a0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801193c:	a901      	add	r1, sp, #4
 801193e:	a802      	add	r0, sp, #8
 8011940:	f000 fe54 	bl	80125ec <xTaskCheckForTimeOut>
 8011944:	2800      	cmp	r0, #0
 8011946:	d0d6      	beq.n	80118f6 <xQueueReceive+0x5a>
			prvUnlockQueue( pxQueue );
 8011948:	4620      	mov	r0, r4
 801194a:	f7ff fccb 	bl	80112e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801194e:	f000 fcc7 	bl	80122e0 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8011952:	f001 fb7f 	bl	8013054 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011956:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011958:	b38b      	cbz	r3, 80119be <xQueueReceive+0x122>
	taskEXIT_CRITICAL();
 801195a:	f001 fba1 	bl	80130a0 <vPortExitCritical>
		taskENTER_CRITICAL();
 801195e:	f001 fb79 	bl	8013054 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011962:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011964:	2d00      	cmp	r5, #0
 8011966:	d0d6      	beq.n	8011916 <xQueueReceive+0x7a>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011968:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801196a:	4639      	mov	r1, r7
 801196c:	4620      	mov	r0, r4
 801196e:	f7ff fca7 	bl	80112c0 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011972:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011974:	6923      	ldr	r3, [r4, #16]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d141      	bne.n	80119fe <xQueueReceive+0x162>
				taskEXIT_CRITICAL();
 801197a:	f001 fb91 	bl	80130a0 <vPortExitCritical>
				return pdPASS;
 801197e:	2001      	movs	r0, #1
}
 8011980:	b005      	add	sp, #20
 8011982:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		prvLockQueue( pxQueue );
 8011986:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
 801198a:	e7d5      	b.n	8011938 <xQueueReceive+0x9c>
 801198c:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
 8011990:	e7ce      	b.n	8011930 <xQueueReceive+0x94>
	taskEXIT_CRITICAL();
 8011992:	f001 fb85 	bl	80130a0 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011996:	9901      	ldr	r1, [sp, #4]
 8011998:	4648      	mov	r0, r9
 801199a:	f000 fd97 	bl	80124cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801199e:	4620      	mov	r0, r4
 80119a0:	f7ff fca0 	bl	80112e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80119a4:	f000 fc9c 	bl	80122e0 <xTaskResumeAll>
 80119a8:	2800      	cmp	r0, #0
 80119aa:	d1d8      	bne.n	801195e <xQueueReceive+0xc2>
					portYIELD_WITHIN_API();
 80119ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80119b0:	f8c8 3000 	str.w	r3, [r8]
 80119b4:	f3bf 8f4f 	dsb	sy
 80119b8:	f3bf 8f6f 	isb	sy
 80119bc:	e7cf      	b.n	801195e <xQueueReceive+0xc2>
					taskEXIT_CRITICAL();
 80119be:	f001 fb6f 	bl	80130a0 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80119c2:	2000      	movs	r0, #0
}
 80119c4:	b005      	add	sp, #20
 80119c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80119ca:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	f43f af6f 	beq.w	80118b0 <xQueueReceive+0x14>
 80119d2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80119d6:	b672      	cpsid	i
 80119d8:	f383 8811 	msr	BASEPRI, r3
 80119dc:	f3bf 8f6f 	isb	sy
 80119e0:	f3bf 8f4f 	dsb	sy
 80119e4:	b662      	cpsie	i
 80119e6:	e7fe      	b.n	80119e6 <xQueueReceive+0x14a>
 80119e8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80119ec:	b672      	cpsid	i
 80119ee:	f383 8811 	msr	BASEPRI, r3
 80119f2:	f3bf 8f6f 	isb	sy
 80119f6:	f3bf 8f4f 	dsb	sy
 80119fa:	b662      	cpsie	i
 80119fc:	e7fe      	b.n	80119fc <xQueueReceive+0x160>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80119fe:	f104 0010 	add.w	r0, r4, #16
 8011a02:	f000 fd9f 	bl	8012544 <xTaskRemoveFromEventList>
 8011a06:	2800      	cmp	r0, #0
 8011a08:	d0b7      	beq.n	801197a <xQueueReceive+0xde>
						queueYIELD_IF_USING_PREEMPTION();
 8011a0a:	4b04      	ldr	r3, [pc, #16]	; (8011a1c <xQueueReceive+0x180>)
 8011a0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a10:	601a      	str	r2, [r3, #0]
 8011a12:	f3bf 8f4f 	dsb	sy
 8011a16:	f3bf 8f6f 	isb	sy
 8011a1a:	e7ae      	b.n	801197a <xQueueReceive+0xde>
 8011a1c:	e000ed04 	.word	0xe000ed04

08011a20 <xQueueSemaphoreTake>:
{
 8011a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a24:	b084      	sub	sp, #16
 8011a26:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8011a28:	b160      	cbz	r0, 8011a44 <xQueueSemaphoreTake+0x24>
	configASSERT( pxQueue->uxItemSize == 0 );
 8011a2a:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8011a2c:	b1ad      	cbz	r5, 8011a5a <xQueueSemaphoreTake+0x3a>
 8011a2e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011a32:	b672      	cpsid	i
 8011a34:	f383 8811 	msr	BASEPRI, r3
 8011a38:	f3bf 8f6f 	isb	sy
 8011a3c:	f3bf 8f4f 	dsb	sy
 8011a40:	b662      	cpsie	i
 8011a42:	e7fe      	b.n	8011a42 <xQueueSemaphoreTake+0x22>
 8011a44:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011a48:	b672      	cpsid	i
 8011a4a:	f383 8811 	msr	BASEPRI, r3
 8011a4e:	f3bf 8f6f 	isb	sy
 8011a52:	f3bf 8f4f 	dsb	sy
 8011a56:	b662      	cpsie	i
 8011a58:	e7fe      	b.n	8011a58 <xQueueSemaphoreTake+0x38>
 8011a5a:	4604      	mov	r4, r0
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011a5c:	f000 fe1c 	bl	8012698 <xTaskGetSchedulerState>
 8011a60:	b960      	cbnz	r0, 8011a7c <xQueueSemaphoreTake+0x5c>
 8011a62:	9d01      	ldr	r5, [sp, #4]
 8011a64:	b155      	cbz	r5, 8011a7c <xQueueSemaphoreTake+0x5c>
 8011a66:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011a6a:	b672      	cpsid	i
 8011a6c:	f383 8811 	msr	BASEPRI, r3
 8011a70:	f3bf 8f6f 	isb	sy
 8011a74:	f3bf 8f4f 	dsb	sy
 8011a78:	b662      	cpsie	i
 8011a7a:	e7fe      	b.n	8011a7a <xQueueSemaphoreTake+0x5a>
 8011a7c:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8011a7e:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8011a80:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8011bc8 <xQueueSemaphoreTake+0x1a8>
 8011a84:	e00c      	b.n	8011aa0 <xQueueSemaphoreTake+0x80>
	taskENTER_CRITICAL();
 8011a86:	f001 fae5 	bl	8013054 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011a8a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d039      	beq.n	8011b04 <xQueueSemaphoreTake+0xe4>
	taskEXIT_CRITICAL();
 8011a90:	f001 fb06 	bl	80130a0 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8011a94:	4620      	mov	r0, r4
 8011a96:	f7ff fc25 	bl	80112e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011a9a:	f000 fc21 	bl	80122e0 <xTaskResumeAll>
 8011a9e:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8011aa0:	f001 fad8 	bl	8013054 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8011aa4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d171      	bne.n	8011b8e <xQueueSemaphoreTake+0x16e>
				if( xTicksToWait == ( TickType_t ) 0 )
 8011aaa:	9b01      	ldr	r3, [sp, #4]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d061      	beq.n	8011b74 <xQueueSemaphoreTake+0x154>
				else if( xEntryTimeSet == pdFALSE )
 8011ab0:	b916      	cbnz	r6, 8011ab8 <xQueueSemaphoreTake+0x98>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011ab2:	a802      	add	r0, sp, #8
 8011ab4:	f000 fd8e 	bl	80125d4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8011ab8:	f001 faf2 	bl	80130a0 <vPortExitCritical>
		vTaskSuspendAll();
 8011abc:	f000 fb50 	bl	8012160 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011ac0:	f001 fac8 	bl	8013054 <vPortEnterCritical>
 8011ac4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8011ac8:	2bff      	cmp	r3, #255	; 0xff
 8011aca:	d101      	bne.n	8011ad0 <xQueueSemaphoreTake+0xb0>
 8011acc:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8011ad0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8011ad4:	2bff      	cmp	r3, #255	; 0xff
 8011ad6:	d101      	bne.n	8011adc <xQueueSemaphoreTake+0xbc>
 8011ad8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011adc:	f001 fae0 	bl	80130a0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011ae0:	a901      	add	r1, sp, #4
 8011ae2:	a802      	add	r0, sp, #8
 8011ae4:	f000 fd82 	bl	80125ec <xTaskCheckForTimeOut>
 8011ae8:	2800      	cmp	r0, #0
 8011aea:	d0cc      	beq.n	8011a86 <xQueueSemaphoreTake+0x66>
			prvUnlockQueue( pxQueue );
 8011aec:	4620      	mov	r0, r4
 8011aee:	f7ff fbf9 	bl	80112e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011af2:	f000 fbf5 	bl	80122e0 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8011af6:	f001 faad 	bl	8013054 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011afa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011afc:	b1db      	cbz	r3, 8011b36 <xQueueSemaphoreTake+0x116>
	taskEXIT_CRITICAL();
 8011afe:	f001 facf 	bl	80130a0 <vPortExitCritical>
 8011b02:	e7cc      	b.n	8011a9e <xQueueSemaphoreTake+0x7e>
 8011b04:	f001 facc 	bl	80130a0 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011b08:	6823      	ldr	r3, [r4, #0]
 8011b0a:	b1db      	cbz	r3, 8011b44 <xQueueSemaphoreTake+0x124>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011b0c:	9901      	ldr	r1, [sp, #4]
 8011b0e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8011b12:	f000 fcdb 	bl	80124cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011b16:	4620      	mov	r0, r4
 8011b18:	f7ff fbe4 	bl	80112e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011b1c:	f000 fbe0 	bl	80122e0 <xTaskResumeAll>
 8011b20:	2800      	cmp	r0, #0
 8011b22:	d1bc      	bne.n	8011a9e <xQueueSemaphoreTake+0x7e>
					portYIELD_WITHIN_API();
 8011b24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011b28:	f8c8 3000 	str.w	r3, [r8]
 8011b2c:	f3bf 8f4f 	dsb	sy
 8011b30:	f3bf 8f6f 	isb	sy
 8011b34:	e7b3      	b.n	8011a9e <xQueueSemaphoreTake+0x7e>
	taskEXIT_CRITICAL();
 8011b36:	f001 fab3 	bl	80130a0 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 8011b3a:	b965      	cbnz	r5, 8011b56 <xQueueSemaphoreTake+0x136>
}
 8011b3c:	4628      	mov	r0, r5
 8011b3e:	b004      	add	sp, #16
 8011b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						taskENTER_CRITICAL();
 8011b44:	f001 fa86 	bl	8013054 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011b48:	68a0      	ldr	r0, [r4, #8]
 8011b4a:	f000 fdb5 	bl	80126b8 <xTaskPriorityInherit>
 8011b4e:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8011b50:	f001 faa6 	bl	80130a0 <vPortExitCritical>
 8011b54:	e7da      	b.n	8011b0c <xQueueSemaphoreTake+0xec>
						taskENTER_CRITICAL();
 8011b56:	f001 fa7d 	bl	8013054 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8011b5a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011b5c:	b119      	cbz	r1, 8011b66 <xQueueSemaphoreTake+0x146>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8011b5e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011b60:	6819      	ldr	r1, [r3, #0]
 8011b62:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8011b66:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 8011b68:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8011b6a:	f000 fe5b 	bl	8012824 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8011b6e:	f001 fa97 	bl	80130a0 <vPortExitCritical>
 8011b72:	e7e3      	b.n	8011b3c <xQueueSemaphoreTake+0x11c>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011b74:	2d00      	cmp	r5, #0
 8011b76:	d0fa      	beq.n	8011b6e <xQueueSemaphoreTake+0x14e>
 8011b78:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011b7c:	b672      	cpsid	i
 8011b7e:	f383 8811 	msr	BASEPRI, r3
 8011b82:	f3bf 8f6f 	isb	sy
 8011b86:	f3bf 8f4f 	dsb	sy
 8011b8a:	b662      	cpsie	i
 8011b8c:	e7fe      	b.n	8011b8c <xQueueSemaphoreTake+0x16c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011b8e:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011b90:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011b92:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011b94:	b912      	cbnz	r2, 8011b9c <xQueueSemaphoreTake+0x17c>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8011b96:	f000 fea7 	bl	80128e8 <pvTaskIncrementMutexHeldCount>
 8011b9a:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011b9c:	6923      	ldr	r3, [r4, #16]
 8011b9e:	b91b      	cbnz	r3, 8011ba8 <xQueueSemaphoreTake+0x188>
				taskEXIT_CRITICAL();
 8011ba0:	f001 fa7e 	bl	80130a0 <vPortExitCritical>
				return pdPASS;
 8011ba4:	2501      	movs	r5, #1
 8011ba6:	e7c9      	b.n	8011b3c <xQueueSemaphoreTake+0x11c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011ba8:	f104 0010 	add.w	r0, r4, #16
 8011bac:	f000 fcca 	bl	8012544 <xTaskRemoveFromEventList>
 8011bb0:	2800      	cmp	r0, #0
 8011bb2:	d0f5      	beq.n	8011ba0 <xQueueSemaphoreTake+0x180>
						queueYIELD_IF_USING_PREEMPTION();
 8011bb4:	4b04      	ldr	r3, [pc, #16]	; (8011bc8 <xQueueSemaphoreTake+0x1a8>)
 8011bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011bba:	601a      	str	r2, [r3, #0]
 8011bbc:	f3bf 8f4f 	dsb	sy
 8011bc0:	f3bf 8f6f 	isb	sy
 8011bc4:	e7ec      	b.n	8011ba0 <xQueueSemaphoreTake+0x180>
 8011bc6:	bf00      	nop
 8011bc8:	e000ed04 	.word	0xe000ed04

08011bcc <xQueueReceiveFromISR>:
{
 8011bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8011bd0:	b1c8      	cbz	r0, 8011c06 <xQueueReceiveFromISR+0x3a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011bd2:	2900      	cmp	r1, #0
 8011bd4:	d033      	beq.n	8011c3e <xQueueReceiveFromISR+0x72>
 8011bd6:	4605      	mov	r5, r0
 8011bd8:	4690      	mov	r8, r2
 8011bda:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011bdc:	f001 fb48 	bl	8013270 <vPortValidateInterruptPriority>
	__asm volatile
 8011be0:	f3ef 8711 	mrs	r7, BASEPRI
 8011be4:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011be8:	b672      	cpsid	i
 8011bea:	f383 8811 	msr	BASEPRI, r3
 8011bee:	f3bf 8f6f 	isb	sy
 8011bf2:	f3bf 8f4f 	dsb	sy
 8011bf6:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011bf8:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011bfa:	b97c      	cbnz	r4, 8011c1c <xQueueReceiveFromISR+0x50>
			xReturn = pdFAIL;
 8011bfc:	4620      	mov	r0, r4
	__asm volatile
 8011bfe:	f387 8811 	msr	BASEPRI, r7
}
 8011c02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 8011c06:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011c0a:	b672      	cpsid	i
 8011c0c:	f383 8811 	msr	BASEPRI, r3
 8011c10:	f3bf 8f6f 	isb	sy
 8011c14:	f3bf 8f4f 	dsb	sy
 8011c18:	b662      	cpsie	i
 8011c1a:	e7fe      	b.n	8011c1a <xQueueReceiveFromISR+0x4e>
			const int8_t cRxLock = pxQueue->cRxLock;
 8011c1c:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011c20:	4649      	mov	r1, r9
 8011c22:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011c24:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 8011c26:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011c28:	f7ff fb4a 	bl	80112c0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011c2c:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8011c2e:	1c73      	adds	r3, r6, #1
 8011c30:	d013      	beq.n	8011c5a <xQueueReceiveFromISR+0x8e>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011c32:	1c73      	adds	r3, r6, #1
			xReturn = pdPASS;
 8011c34:	2001      	movs	r0, #1
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011c36:	b25b      	sxtb	r3, r3
 8011c38:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8011c3c:	e7df      	b.n	8011bfe <xQueueReceiveFromISR+0x32>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011c3e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d0c8      	beq.n	8011bd6 <xQueueReceiveFromISR+0xa>
 8011c44:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011c48:	b672      	cpsid	i
 8011c4a:	f383 8811 	msr	BASEPRI, r3
 8011c4e:	f3bf 8f6f 	isb	sy
 8011c52:	f3bf 8f4f 	dsb	sy
 8011c56:	b662      	cpsie	i
 8011c58:	e7fe      	b.n	8011c58 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011c5a:	692b      	ldr	r3, [r5, #16]
 8011c5c:	b90b      	cbnz	r3, 8011c62 <xQueueReceiveFromISR+0x96>
			xReturn = pdPASS;
 8011c5e:	2001      	movs	r0, #1
 8011c60:	e7cd      	b.n	8011bfe <xQueueReceiveFromISR+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011c62:	f105 0010 	add.w	r0, r5, #16
 8011c66:	f000 fc6d 	bl	8012544 <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
 8011c6a:	f1b8 0f00 	cmp.w	r8, #0
 8011c6e:	d0f6      	beq.n	8011c5e <xQueueReceiveFromISR+0x92>
 8011c70:	2800      	cmp	r0, #0
 8011c72:	d0f4      	beq.n	8011c5e <xQueueReceiveFromISR+0x92>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011c74:	2001      	movs	r0, #1
 8011c76:	f8c8 0000 	str.w	r0, [r8]
 8011c7a:	e7c0      	b.n	8011bfe <xQueueReceiveFromISR+0x32>

08011c7c <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011c7c:	2300      	movs	r3, #0
 8011c7e:	4a08      	ldr	r2, [pc, #32]	; (8011ca0 <vQueueAddToRegistry+0x24>)
	{
 8011c80:	b430      	push	{r4, r5}
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8011c82:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8011c86:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8011c8a:	b124      	cbz	r4, 8011c96 <vQueueAddToRegistry+0x1a>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011c8c:	3301      	adds	r3, #1
 8011c8e:	2b08      	cmp	r3, #8
 8011c90:	d1f7      	bne.n	8011c82 <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011c92:	bc30      	pop	{r4, r5}
 8011c94:	4770      	bx	lr
				xQueueRegistry[ ux ].xHandle = xQueue;
 8011c96:	6068      	str	r0, [r5, #4]
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011c98:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	}
 8011c9c:	bc30      	pop	{r4, r5}
 8011c9e:	4770      	bx	lr
 8011ca0:	20026a28 	.word	0x20026a28

08011ca4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011ca4:	b570      	push	{r4, r5, r6, lr}
 8011ca6:	4604      	mov	r4, r0
 8011ca8:	460d      	mov	r5, r1
 8011caa:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011cac:	f001 f9d2 	bl	8013054 <vPortEnterCritical>
 8011cb0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8011cb4:	2bff      	cmp	r3, #255	; 0xff
 8011cb6:	d102      	bne.n	8011cbe <vQueueWaitForMessageRestricted+0x1a>
 8011cb8:	2300      	movs	r3, #0
 8011cba:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8011cbe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8011cc2:	2bff      	cmp	r3, #255	; 0xff
 8011cc4:	d102      	bne.n	8011ccc <vQueueWaitForMessageRestricted+0x28>
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011ccc:	f001 f9e8 	bl	80130a0 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011cd0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011cd2:	b92b      	cbnz	r3, 8011ce0 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8011cd4:	4632      	mov	r2, r6
 8011cd6:	4629      	mov	r1, r5
 8011cd8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8011cdc:	f000 fc12 	bl	8012504 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8011ce0:	4620      	mov	r0, r4
	}
 8011ce2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8011ce6:	f7ff bafd 	b.w	80112e4 <prvUnlockQueue>
 8011cea:	bf00      	nop

08011cec <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011cf0:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011cf2:	f001 f9af 	bl	8013054 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011cf6:	4a35      	ldr	r2, [pc, #212]	; (8011dcc <prvAddNewTaskToReadyList+0xe0>)
		if( pxCurrentTCB == NULL )
 8011cf8:	4d35      	ldr	r5, [pc, #212]	; (8011dd0 <prvAddNewTaskToReadyList+0xe4>)
		uxCurrentNumberOfTasks++;
 8011cfa:	6813      	ldr	r3, [r2, #0]
 8011cfc:	3301      	adds	r3, #1
 8011cfe:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011d00:	682b      	ldr	r3, [r5, #0]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d034      	beq.n	8011d70 <prvAddNewTaskToReadyList+0x84>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011d06:	4f33      	ldr	r7, [pc, #204]	; (8011dd4 <prvAddNewTaskToReadyList+0xe8>)
 8011d08:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8011d0a:	683b      	ldr	r3, [r7, #0]
 8011d0c:	b343      	cbz	r3, 8011d60 <prvAddNewTaskToReadyList+0x74>
 8011d0e:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8011df8 <prvAddNewTaskToReadyList+0x10c>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011d12:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 8011dfc <prvAddNewTaskToReadyList+0x110>
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011d16:	2301      	movs	r3, #1
 8011d18:	4e2f      	ldr	r6, [pc, #188]	; (8011dd8 <prvAddNewTaskToReadyList+0xec>)
		uxTaskNumber++;
 8011d1a:	f8dc 2000 	ldr.w	r2, [ip]
		prvAddTaskToReadyList( pxNewTCB );
 8011d1e:	4083      	lsls	r3, r0
 8011d20:	6831      	ldr	r1, [r6, #0]
 8011d22:	eb00 0080 	add.w	r0, r0, r0, lsl #2
		uxTaskNumber++;
 8011d26:	3201      	adds	r2, #1
		prvAddTaskToReadyList( pxNewTCB );
 8011d28:	430b      	orrs	r3, r1
 8011d2a:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8011d2e:	1d21      	adds	r1, r4, #4
		uxTaskNumber++;
 8011d30:	f8cc 2000 	str.w	r2, [ip]
		prvAddTaskToReadyList( pxNewTCB );
 8011d34:	6033      	str	r3, [r6, #0]
 8011d36:	f7ff fa49 	bl	80111cc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011d3a:	f001 f9b1 	bl	80130a0 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011d3e:	683b      	ldr	r3, [r7, #0]
 8011d40:	b163      	cbz	r3, 8011d5c <prvAddNewTaskToReadyList+0x70>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011d42:	682a      	ldr	r2, [r5, #0]
 8011d44:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011d46:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8011d48:	429a      	cmp	r2, r3
 8011d4a:	d207      	bcs.n	8011d5c <prvAddNewTaskToReadyList+0x70>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011d4c:	4b23      	ldr	r3, [pc, #140]	; (8011ddc <prvAddNewTaskToReadyList+0xf0>)
 8011d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d52:	601a      	str	r2, [r3, #0]
 8011d54:	f3bf 8f4f 	dsb	sy
 8011d58:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011d5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011d60:	682b      	ldr	r3, [r5, #0]
 8011d62:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8011df8 <prvAddNewTaskToReadyList+0x10c>
 8011d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d68:	4283      	cmp	r3, r0
 8011d6a:	d8d2      	bhi.n	8011d12 <prvAddNewTaskToReadyList+0x26>
					pxCurrentTCB = pxNewTCB;
 8011d6c:	602c      	str	r4, [r5, #0]
 8011d6e:	e7d0      	b.n	8011d12 <prvAddNewTaskToReadyList+0x26>
			pxCurrentTCB = pxNewTCB;
 8011d70:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011d72:	6813      	ldr	r3, [r2, #0]
 8011d74:	2b01      	cmp	r3, #1
 8011d76:	d004      	beq.n	8011d82 <prvAddNewTaskToReadyList+0x96>
 8011d78:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8011d7a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8011df8 <prvAddNewTaskToReadyList+0x10c>
 8011d7e:	4f15      	ldr	r7, [pc, #84]	; (8011dd4 <prvAddNewTaskToReadyList+0xe8>)
 8011d80:	e7c7      	b.n	8011d12 <prvAddNewTaskToReadyList+0x26>
 8011d82:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8011df8 <prvAddNewTaskToReadyList+0x10c>
 8011d86:	4646      	mov	r6, r8
 8011d88:	f108 078c 	add.w	r7, r8, #140	; 0x8c
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011d8c:	4630      	mov	r0, r6
 8011d8e:	3614      	adds	r6, #20
 8011d90:	f7ff fa0c 	bl	80111ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011d94:	42b7      	cmp	r7, r6
 8011d96:	d1f9      	bne.n	8011d8c <prvAddNewTaskToReadyList+0xa0>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011d98:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8011e00 <prvAddNewTaskToReadyList+0x114>
	vListInitialise( &xDelayedTaskList2 );
 8011d9c:	4e10      	ldr	r6, [pc, #64]	; (8011de0 <prvAddNewTaskToReadyList+0xf4>)
	vListInitialise( &xDelayedTaskList1 );
 8011d9e:	4648      	mov	r0, r9
 8011da0:	4f0c      	ldr	r7, [pc, #48]	; (8011dd4 <prvAddNewTaskToReadyList+0xe8>)
 8011da2:	f7ff fa03 	bl	80111ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011da6:	4630      	mov	r0, r6
 8011da8:	f7ff fa00 	bl	80111ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011dac:	480d      	ldr	r0, [pc, #52]	; (8011de4 <prvAddNewTaskToReadyList+0xf8>)
 8011dae:	f7ff f9fd 	bl	80111ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011db2:	480d      	ldr	r0, [pc, #52]	; (8011de8 <prvAddNewTaskToReadyList+0xfc>)
 8011db4:	f7ff f9fa 	bl	80111ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011db8:	480c      	ldr	r0, [pc, #48]	; (8011dec <prvAddNewTaskToReadyList+0x100>)
 8011dba:	f7ff f9f7 	bl	80111ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011dbe:	4a0c      	ldr	r2, [pc, #48]	; (8011df0 <prvAddNewTaskToReadyList+0x104>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011dc0:	4b0c      	ldr	r3, [pc, #48]	; (8011df4 <prvAddNewTaskToReadyList+0x108>)
	pxDelayedTaskList = &xDelayedTaskList1;
 8011dc2:	f8c2 9000 	str.w	r9, [r2]
 8011dc6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011dc8:	601e      	str	r6, [r3, #0]
 8011dca:	e7a2      	b.n	8011d12 <prvAddNewTaskToReadyList+0x26>
 8011dcc:	2000178c 	.word	0x2000178c
 8011dd0:	200016f4 	.word	0x200016f4
 8011dd4:	200017e8 	.word	0x200017e8
 8011dd8:	200017a0 	.word	0x200017a0
 8011ddc:	e000ed04 	.word	0xe000ed04
 8011de0:	200017b8 	.word	0x200017b8
 8011de4:	200017d4 	.word	0x200017d4
 8011de8:	20001800 	.word	0x20001800
 8011dec:	200017ec 	.word	0x200017ec
 8011df0:	200016f8 	.word	0x200016f8
 8011df4:	200016fc 	.word	0x200016fc
 8011df8:	20001700 	.word	0x20001700
 8011dfc:	2000179c 	.word	0x2000179c
 8011e00:	200017a4 	.word	0x200017a4

08011e04 <prvDeleteTCB>:
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011e04:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8011e08:	b173      	cbz	r3, 8011e28 <prvDeleteTCB+0x24>
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
				vPortFree( pxTCB );
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011e0a:	2b01      	cmp	r3, #1
 8011e0c:	d016      	beq.n	8011e3c <prvDeleteTCB+0x38>
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011e0e:	2b02      	cmp	r3, #2
 8011e10:	d016      	beq.n	8011e40 <prvDeleteTCB+0x3c>
 8011e12:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011e16:	b672      	cpsid	i
 8011e18:	f383 8811 	msr	BASEPRI, r3
 8011e1c:	f3bf 8f6f 	isb	sy
 8011e20:	f3bf 8f4f 	dsb	sy
 8011e24:	b662      	cpsie	i
 8011e26:	e7fe      	b.n	8011e26 <prvDeleteTCB+0x22>
	{
 8011e28:	b510      	push	{r4, lr}
 8011e2a:	4604      	mov	r4, r0
				vPortFree( pxTCB->pxStack );
 8011e2c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8011e2e:	f001 fb17 	bl	8013460 <vPortFree>
				vPortFree( pxTCB );
 8011e32:	4620      	mov	r0, r4
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8011e38:	f001 bb12 	b.w	8013460 <vPortFree>
				vPortFree( pxTCB );
 8011e3c:	f001 bb10 	b.w	8013460 <vPortFree>
 8011e40:	4770      	bx	lr
 8011e42:	bf00      	nop

08011e44 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011e46:	4b1a      	ldr	r3, [pc, #104]	; (8011eb0 <prvAddCurrentTaskToDelayedList+0x6c>)
{
 8011e48:	4606      	mov	r6, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011e4a:	4d1a      	ldr	r5, [pc, #104]	; (8011eb4 <prvAddCurrentTaskToDelayedList+0x70>)
{
 8011e4c:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8011e4e:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011e50:	6828      	ldr	r0, [r5, #0]
 8011e52:	3004      	adds	r0, #4
 8011e54:	f7ff f9e4 	bl	8011220 <uxListRemove>
 8011e58:	b940      	cbnz	r0, 8011e6c <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8011e5a:	682b      	ldr	r3, [r5, #0]
 8011e5c:	2201      	movs	r2, #1
 8011e5e:	4916      	ldr	r1, [pc, #88]	; (8011eb8 <prvAddCurrentTaskToDelayedList+0x74>)
 8011e60:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8011e62:	680b      	ldr	r3, [r1, #0]
 8011e64:	4082      	lsls	r2, r0
 8011e66:	ea23 0302 	bic.w	r3, r3, r2
 8011e6a:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011e6c:	1c73      	adds	r3, r6, #1
 8011e6e:	d100      	bne.n	8011e72 <prvAddCurrentTaskToDelayedList+0x2e>
 8011e70:	b9bf      	cbnz	r7, 8011ea2 <prvAddCurrentTaskToDelayedList+0x5e>
 8011e72:	19a4      	adds	r4, r4, r6
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011e74:	682b      	ldr	r3, [r5, #0]
 8011e76:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8011e78:	d20b      	bcs.n	8011e92 <prvAddCurrentTaskToDelayedList+0x4e>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011e7a:	4b10      	ldr	r3, [pc, #64]	; (8011ebc <prvAddCurrentTaskToDelayedList+0x78>)
 8011e7c:	6818      	ldr	r0, [r3, #0]
 8011e7e:	6829      	ldr	r1, [r5, #0]
 8011e80:	3104      	adds	r1, #4
 8011e82:	f7ff f9b3 	bl	80111ec <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8011e86:	4b0e      	ldr	r3, [pc, #56]	; (8011ec0 <prvAddCurrentTaskToDelayedList+0x7c>)
 8011e88:	681a      	ldr	r2, [r3, #0]
 8011e8a:	42a2      	cmp	r2, r4
 8011e8c:	d900      	bls.n	8011e90 <prvAddCurrentTaskToDelayedList+0x4c>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8011e8e:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011e92:	4b0c      	ldr	r3, [pc, #48]	; (8011ec4 <prvAddCurrentTaskToDelayedList+0x80>)
 8011e94:	6818      	ldr	r0, [r3, #0]
 8011e96:	6829      	ldr	r1, [r5, #0]
}
 8011e98:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011e9c:	3104      	adds	r1, #4
 8011e9e:	f7ff b9a5 	b.w	80111ec <vListInsert>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011ea2:	6829      	ldr	r1, [r5, #0]
 8011ea4:	4808      	ldr	r0, [pc, #32]	; (8011ec8 <prvAddCurrentTaskToDelayedList+0x84>)
 8011ea6:	3104      	adds	r1, #4
}
 8011ea8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011eac:	f7ff b98e 	b.w	80111cc <vListInsertEnd>
 8011eb0:	20001814 	.word	0x20001814
 8011eb4:	200016f4 	.word	0x200016f4
 8011eb8:	200017a0 	.word	0x200017a0
 8011ebc:	200016f8 	.word	0x200016f8
 8011ec0:	200017cc 	.word	0x200017cc
 8011ec4:	200016fc 	.word	0x200016fc
 8011ec8:	200017ec 	.word	0x200017ec

08011ecc <prvIdleTask>:
{
 8011ecc:	b580      	push	{r7, lr}
 8011ece:	4c16      	ldr	r4, [pc, #88]	; (8011f28 <prvIdleTask+0x5c>)
				taskYIELD();
 8011ed0:	f04f 5980 	mov.w	r9, #268435456	; 0x10000000
 8011ed4:	4e15      	ldr	r6, [pc, #84]	; (8011f2c <prvIdleTask+0x60>)
 8011ed6:	4d16      	ldr	r5, [pc, #88]	; (8011f30 <prvIdleTask+0x64>)
 8011ed8:	f8df a058 	ldr.w	sl, [pc, #88]	; 8011f34 <prvIdleTask+0x68>
 8011edc:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8011f38 <prvIdleTask+0x6c>
 8011ee0:	e011      	b.n	8011f06 <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 8011ee2:	f001 f8b7 	bl	8013054 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011ee6:	68f3      	ldr	r3, [r6, #12]
 8011ee8:	68df      	ldr	r7, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011eea:	1d38      	adds	r0, r7, #4
 8011eec:	f7ff f998 	bl	8011220 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011ef0:	682b      	ldr	r3, [r5, #0]
 8011ef2:	3b01      	subs	r3, #1
 8011ef4:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011ef6:	6823      	ldr	r3, [r4, #0]
 8011ef8:	3b01      	subs	r3, #1
 8011efa:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8011efc:	f001 f8d0 	bl	80130a0 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8011f00:	4638      	mov	r0, r7
 8011f02:	f7ff ff7f 	bl	8011e04 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011f06:	6823      	ldr	r3, [r4, #0]
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d1ea      	bne.n	8011ee2 <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011f0c:	f8da 3000 	ldr.w	r3, [sl]
 8011f10:	2b01      	cmp	r3, #1
 8011f12:	d905      	bls.n	8011f20 <prvIdleTask+0x54>
				taskYIELD();
 8011f14:	f8c8 9000 	str.w	r9, [r8]
 8011f18:	f3bf 8f4f 	dsb	sy
 8011f1c:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8011f20:	f7ee fe46 	bl	8000bb0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8011f24:	e7ef      	b.n	8011f06 <prvIdleTask+0x3a>
 8011f26:	bf00      	nop
 8011f28:	20001790 	.word	0x20001790
 8011f2c:	20001800 	.word	0x20001800
 8011f30:	2000178c 	.word	0x2000178c
 8011f34:	20001700 	.word	0x20001700
 8011f38:	e000ed04 	.word	0xe000ed04

08011f3c <prvResetNextTaskUnblockTime.part.1>:
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011f3c:	4a03      	ldr	r2, [pc, #12]	; (8011f4c <prvResetNextTaskUnblockTime.part.1+0x10>)
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011f3e:	4b04      	ldr	r3, [pc, #16]	; (8011f50 <prvResetNextTaskUnblockTime.part.1+0x14>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011f40:	6812      	ldr	r2, [r2, #0]
 8011f42:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011f44:	68d2      	ldr	r2, [r2, #12]
 8011f46:	6852      	ldr	r2, [r2, #4]
 8011f48:	601a      	str	r2, [r3, #0]
}
 8011f4a:	4770      	bx	lr
 8011f4c:	200016f8 	.word	0x200016f8
 8011f50:	200017cc 	.word	0x200017cc

08011f54 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8011f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f58:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011f5a:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8011f5e:	4681      	mov	r9, r0
 8011f60:	469a      	mov	sl, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011f62:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8011f64:	4415      	add	r5, r2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8011f66:	9e08      	ldr	r6, [sp, #32]
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011f68:	eb07 0785 	add.w	r7, r7, r5, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8011f6c:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011f70:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8011f74:	2900      	cmp	r1, #0
 8011f76:	d035      	beq.n	8011fe4 <prvInitialiseNewTask.isra.2+0x90>
 8011f78:	1e4a      	subs	r2, r1, #1
 8011f7a:	f104 0033 	add.w	r0, r4, #51	; 0x33
 8011f7e:	310f      	adds	r1, #15
 8011f80:	e001      	b.n	8011f86 <prvInitialiseNewTask.isra.2+0x32>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011f82:	428a      	cmp	r2, r1
 8011f84:	d006      	beq.n	8011f94 <prvInitialiseNewTask.isra.2+0x40>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011f86:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8011f8a:	f800 3f01 	strb.w	r3, [r0, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8011f8e:	7815      	ldrb	r5, [r2, #0]
 8011f90:	2d00      	cmp	r5, #0
 8011f92:	d1f6      	bne.n	8011f82 <prvInitialiseNewTask.isra.2+0x2e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011f94:	2300      	movs	r3, #0
 8011f96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011f9a:	2e06      	cmp	r6, #6
		pxNewTCB->uxMutexesHeld = 0;
 8011f9c:	f04f 0500 	mov.w	r5, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011fa0:	f104 0004 	add.w	r0, r4, #4
 8011fa4:	bf28      	it	cs
 8011fa6:	2606      	movcs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
 8011fa8:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
 8011faa:	e9c4 6511 	strd	r6, r5, [r4, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011fae:	f1c6 0607 	rsb	r6, r6, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011fb2:	f7ff f907 	bl	80111c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011fb6:	f104 0018 	add.w	r0, r4, #24
 8011fba:	f7ff f903 	bl	80111c4 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8011fbe:	64e5      	str	r5, [r4, #76]	; 0x4c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011fc0:	4652      	mov	r2, sl
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011fc2:	61a6      	str	r6, [r4, #24]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011fc4:	4649      	mov	r1, r9
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011fc6:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011fca:	4638      	mov	r0, r7
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011fcc:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011fce:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011fd0:	f001 f814 	bl	8012ffc <pxPortInitialiseStack>
 8011fd4:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8011fd6:	f1b8 0f00 	cmp.w	r8, #0
 8011fda:	d001      	beq.n	8011fe0 <prvInitialiseNewTask.isra.2+0x8c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011fdc:	f8c8 4000 	str.w	r4, [r8]
}
 8011fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011fe4:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 8011fe8:	e7d7      	b.n	8011f9a <prvInitialiseNewTask.isra.2+0x46>
 8011fea:	bf00      	nop

08011fec <xTaskCreateStatic>:
	{
 8011fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011fee:	b087      	sub	sp, #28
 8011ff0:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	; 0x30
 8011ff4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
		configASSERT( puxStackBuffer != NULL );
 8011ff6:	b1dd      	cbz	r5, 8012030 <xTaskCreateStatic+0x44>
		configASSERT( pxTaskBuffer != NULL );
 8011ff8:	b17c      	cbz	r4, 801201a <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8011ffa:	2754      	movs	r7, #84	; 0x54
 8011ffc:	9705      	str	r7, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011ffe:	9f05      	ldr	r7, [sp, #20]
 8012000:	2f54      	cmp	r7, #84	; 0x54
 8012002:	d020      	beq.n	8012046 <xTaskCreateStatic+0x5a>
 8012004:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012008:	b672      	cpsid	i
 801200a:	f383 8811 	msr	BASEPRI, r3
 801200e:	f3bf 8f6f 	isb	sy
 8012012:	f3bf 8f4f 	dsb	sy
 8012016:	b662      	cpsie	i
 8012018:	e7fe      	b.n	8012018 <xTaskCreateStatic+0x2c>
 801201a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801201e:	b672      	cpsid	i
 8012020:	f383 8811 	msr	BASEPRI, r3
 8012024:	f3bf 8f6f 	isb	sy
 8012028:	f3bf 8f4f 	dsb	sy
 801202c:	b662      	cpsie	i
 801202e:	e7fe      	b.n	801202e <xTaskCreateStatic+0x42>
 8012030:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012034:	b672      	cpsid	i
 8012036:	f383 8811 	msr	BASEPRI, r3
 801203a:	f3bf 8f6f 	isb	sy
 801203e:	f3bf 8f4f 	dsb	sy
 8012042:	b662      	cpsie	i
 8012044:	e7fe      	b.n	8012044 <xTaskCreateStatic+0x58>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012046:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8012048:	2702      	movs	r7, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801204a:	ad04      	add	r5, sp, #16
 801204c:	9402      	str	r4, [sp, #8]
 801204e:	9600      	str	r6, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8012050:	f884 7051 	strb.w	r7, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012054:	9501      	str	r5, [sp, #4]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8012056:	9d05      	ldr	r5, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012058:	f7ff ff7c 	bl	8011f54 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 801205c:	4620      	mov	r0, r4
 801205e:	f7ff fe45 	bl	8011cec <prvAddNewTaskToReadyList>
	}
 8012062:	9804      	ldr	r0, [sp, #16]
 8012064:	b007      	add	sp, #28
 8012066:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012068 <xTaskCreate>:
	{
 8012068:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801206c:	4607      	mov	r7, r0
 801206e:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012070:	0090      	lsls	r0, r2, #2
	{
 8012072:	4616      	mov	r6, r2
 8012074:	4688      	mov	r8, r1
 8012076:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012078:	f001 f954 	bl	8013324 <pvPortMalloc>
			if( pxStack != NULL )
 801207c:	b320      	cbz	r0, 80120c8 <xTaskCreate+0x60>
 801207e:	4605      	mov	r5, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012080:	2054      	movs	r0, #84	; 0x54
 8012082:	f001 f94f 	bl	8013324 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8012086:	4604      	mov	r4, r0
 8012088:	b1b0      	cbz	r0, 80120b8 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 801208a:	6305      	str	r5, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801208c:	f04f 0c00 	mov.w	ip, #0
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012090:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8012092:	464b      	mov	r3, r9
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012094:	f884 c051 	strb.w	ip, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012098:	4632      	mov	r2, r6
 801209a:	9501      	str	r5, [sp, #4]
 801209c:	4641      	mov	r1, r8
 801209e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80120a0:	4638      	mov	r0, r7
 80120a2:	9402      	str	r4, [sp, #8]
 80120a4:	9500      	str	r5, [sp, #0]
 80120a6:	f7ff ff55 	bl	8011f54 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 80120aa:	4620      	mov	r0, r4
 80120ac:	f7ff fe1e 	bl	8011cec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80120b0:	2001      	movs	r0, #1
	}
 80120b2:	b005      	add	sp, #20
 80120b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80120b8:	4628      	mov	r0, r5
 80120ba:	f001 f9d1 	bl	8013460 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80120be:	f04f 30ff 	mov.w	r0, #4294967295
	}
 80120c2:	b005      	add	sp, #20
 80120c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80120c8:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 80120cc:	e7f1      	b.n	80120b2 <xTaskCreate+0x4a>
 80120ce:	bf00      	nop

080120d0 <vTaskStartScheduler>:
{
 80120d0:	b530      	push	{r4, r5, lr}
 80120d2:	b089      	sub	sp, #36	; 0x24
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80120d4:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80120d6:	aa07      	add	r2, sp, #28
 80120d8:	a906      	add	r1, sp, #24
 80120da:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80120dc:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80120e0:	f7ee fd6c 	bl	8000bbc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80120e4:	9a07      	ldr	r2, [sp, #28]
 80120e6:	4623      	mov	r3, r4
 80120e8:	9400      	str	r4, [sp, #0]
 80120ea:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 80120ee:	e9cd 1001 	strd	r1, r0, [sp, #4]
 80120f2:	4916      	ldr	r1, [pc, #88]	; (801214c <vTaskStartScheduler+0x7c>)
 80120f4:	4816      	ldr	r0, [pc, #88]	; (8012150 <vTaskStartScheduler+0x80>)
 80120f6:	f7ff ff79 	bl	8011fec <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80120fa:	b320      	cbz	r0, 8012146 <vTaskStartScheduler+0x76>
			xReturn = xTimerCreateTimerTask();
 80120fc:	f000 fd04 	bl	8012b08 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8012100:	2801      	cmp	r0, #1
 8012102:	d00c      	beq.n	801211e <vTaskStartScheduler+0x4e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012104:	3001      	adds	r0, #1
 8012106:	d11e      	bne.n	8012146 <vTaskStartScheduler+0x76>
 8012108:	f04f 0330 	mov.w	r3, #48	; 0x30
 801210c:	b672      	cpsid	i
 801210e:	f383 8811 	msr	BASEPRI, r3
 8012112:	f3bf 8f6f 	isb	sy
 8012116:	f3bf 8f4f 	dsb	sy
 801211a:	b662      	cpsie	i
 801211c:	e7fe      	b.n	801211c <vTaskStartScheduler+0x4c>
 801211e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012122:	b672      	cpsid	i
 8012124:	f383 8811 	msr	BASEPRI, r3
 8012128:	f3bf 8f6f 	isb	sy
 801212c:	f3bf 8f4f 	dsb	sy
 8012130:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8012132:	4908      	ldr	r1, [pc, #32]	; (8012154 <vTaskStartScheduler+0x84>)
 8012134:	f04f 35ff 	mov.w	r5, #4294967295
		xSchedulerRunning = pdTRUE;
 8012138:	4a07      	ldr	r2, [pc, #28]	; (8012158 <vTaskStartScheduler+0x88>)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801213a:	4b08      	ldr	r3, [pc, #32]	; (801215c <vTaskStartScheduler+0x8c>)
		xNextTaskUnblockTime = portMAX_DELAY;
 801213c:	600d      	str	r5, [r1, #0]
		xSchedulerRunning = pdTRUE;
 801213e:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012140:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8012142:	f001 f82d 	bl	80131a0 <xPortStartScheduler>
}
 8012146:	b009      	add	sp, #36	; 0x24
 8012148:	bd30      	pop	{r4, r5, pc}
 801214a:	bf00      	nop
 801214c:	080269ac 	.word	0x080269ac
 8012150:	08011ecd 	.word	0x08011ecd
 8012154:	200017cc 	.word	0x200017cc
 8012158:	200017e8 	.word	0x200017e8
 801215c:	20001814 	.word	0x20001814

08012160 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8012160:	4a02      	ldr	r2, [pc, #8]	; (801216c <vTaskSuspendAll+0xc>)
 8012162:	6813      	ldr	r3, [r2, #0]
 8012164:	3301      	adds	r3, #1
 8012166:	6013      	str	r3, [r2, #0]
}
 8012168:	4770      	bx	lr
 801216a:	bf00      	nop
 801216c:	20001798 	.word	0x20001798

08012170 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8012170:	4b01      	ldr	r3, [pc, #4]	; (8012178 <xTaskGetTickCount+0x8>)
 8012172:	6818      	ldr	r0, [r3, #0]
}
 8012174:	4770      	bx	lr
 8012176:	bf00      	nop
 8012178:	20001814 	.word	0x20001814

0801217c <xTaskGetTickCountFromISR>:
{
 801217c:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801217e:	f001 f877 	bl	8013270 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8012182:	4b01      	ldr	r3, [pc, #4]	; (8012188 <xTaskGetTickCountFromISR+0xc>)
 8012184:	6818      	ldr	r0, [r3, #0]
}
 8012186:	bd08      	pop	{r3, pc}
 8012188:	20001814 	.word	0x20001814

0801218c <xTaskIncrementTick>:
{
 801218c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012190:	4b48      	ldr	r3, [pc, #288]	; (80122b4 <xTaskIncrementTick+0x128>)
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	b9bb      	cbnz	r3, 80121c6 <xTaskIncrementTick+0x3a>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012196:	4b48      	ldr	r3, [pc, #288]	; (80122b8 <xTaskIncrementTick+0x12c>)
 8012198:	681e      	ldr	r6, [r3, #0]
 801219a:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 801219c:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801219e:	b1fe      	cbz	r6, 80121e0 <xTaskIncrementTick+0x54>
 80121a0:	4d46      	ldr	r5, [pc, #280]	; (80122bc <xTaskIncrementTick+0x130>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 80121a2:	682b      	ldr	r3, [r5, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80121a4:	2400      	movs	r4, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 80121a6:	42b3      	cmp	r3, r6
 80121a8:	d92c      	bls.n	8012204 <xTaskIncrementTick+0x78>
 80121aa:	4f45      	ldr	r7, [pc, #276]	; (80122c0 <xTaskIncrementTick+0x134>)
 80121ac:	f8df 8128 	ldr.w	r8, [pc, #296]	; 80122d8 <xTaskIncrementTick+0x14c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80121b0:	f8d8 3000 	ldr.w	r3, [r8]
 80121b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121b6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80121ba:	009b      	lsls	r3, r3, #2
 80121bc:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 80121be:	2b02      	cmp	r3, #2
 80121c0:	bf28      	it	cs
 80121c2:	2401      	movcs	r4, #1
 80121c4:	e004      	b.n	80121d0 <xTaskIncrementTick+0x44>
		++uxPendedTicks;
 80121c6:	4a3f      	ldr	r2, [pc, #252]	; (80122c4 <xTaskIncrementTick+0x138>)
BaseType_t xSwitchRequired = pdFALSE;
 80121c8:	2400      	movs	r4, #0
		++uxPendedTicks;
 80121ca:	6813      	ldr	r3, [r2, #0]
 80121cc:	3301      	adds	r3, #1
 80121ce:	6013      	str	r3, [r2, #0]
		if( xYieldPending != pdFALSE )
 80121d0:	4b3d      	ldr	r3, [pc, #244]	; (80122c8 <xTaskIncrementTick+0x13c>)
 80121d2:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 80121d4:	2b00      	cmp	r3, #0
}
 80121d6:	bf0c      	ite	eq
 80121d8:	4620      	moveq	r0, r4
 80121da:	2001      	movne	r0, #1
 80121dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 80121e0:	f8df b0f8 	ldr.w	fp, [pc, #248]	; 80122dc <xTaskIncrementTick+0x150>
 80121e4:	f8db 2000 	ldr.w	r2, [fp]
 80121e8:	6812      	ldr	r2, [r2, #0]
 80121ea:	2a00      	cmp	r2, #0
 80121ec:	d04b      	beq.n	8012286 <xTaskIncrementTick+0xfa>
 80121ee:	f04f 0330 	mov.w	r3, #48	; 0x30
 80121f2:	b672      	cpsid	i
 80121f4:	f383 8811 	msr	BASEPRI, r3
 80121f8:	f3bf 8f6f 	isb	sy
 80121fc:	f3bf 8f4f 	dsb	sy
 8012200:	b662      	cpsie	i
 8012202:	e7fe      	b.n	8012202 <xTaskIncrementTick+0x76>
 8012204:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 80122dc <xTaskIncrementTick+0x150>
 8012208:	4f2d      	ldr	r7, [pc, #180]	; (80122c0 <xTaskIncrementTick+0x134>)
 801220a:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 80122d8 <xTaskIncrementTick+0x14c>
 801220e:	e02f      	b.n	8012270 <xTaskIncrementTick+0xe4>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012210:	f8db 2000 	ldr.w	r2, [fp]
 8012214:	68d2      	ldr	r2, [r2, #12]
 8012216:	f8d2 900c 	ldr.w	r9, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801221a:	f8d9 1004 	ldr.w	r1, [r9, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801221e:	f109 0a04 	add.w	sl, r9, #4
					if( xConstTickCount < xItemValue )
 8012222:	428e      	cmp	r6, r1
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012224:	4650      	mov	r0, sl
					if( xConstTickCount < xItemValue )
 8012226:	d32c      	bcc.n	8012282 <xTaskIncrementTick+0xf6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012228:	f7fe fffa 	bl	8011220 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801222c:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012230:	f109 0018 	add.w	r0, r9, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012234:	b109      	cbz	r1, 801223a <xTaskIncrementTick+0xae>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012236:	f7fe fff3 	bl	8011220 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801223a:	4a24      	ldr	r2, [pc, #144]	; (80122cc <xTaskIncrementTick+0x140>)
 801223c:	f04f 0c01 	mov.w	ip, #1
 8012240:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 8012244:	4651      	mov	r1, sl
 8012246:	6813      	ldr	r3, [r2, #0]
 8012248:	fa0c fc00 	lsl.w	ip, ip, r0
 801224c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012250:	ea4c 0c03 	orr.w	ip, ip, r3
 8012254:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8012258:	f8c2 c000 	str.w	ip, [r2]
 801225c:	f7fe ffb6 	bl	80111cc <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012260:	f8d8 0000 	ldr.w	r0, [r8]
 8012264:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
 8012268:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 801226a:	4291      	cmp	r1, r2
 801226c:	bf28      	it	cs
 801226e:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012270:	f8db 2000 	ldr.w	r2, [fp]
 8012274:	6812      	ldr	r2, [r2, #0]
 8012276:	2a00      	cmp	r2, #0
 8012278:	d1ca      	bne.n	8012210 <xTaskIncrementTick+0x84>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801227a:	f04f 33ff 	mov.w	r3, #4294967295
 801227e:	602b      	str	r3, [r5, #0]
					break;
 8012280:	e796      	b.n	80121b0 <xTaskIncrementTick+0x24>
						xNextTaskUnblockTime = xItemValue;
 8012282:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012284:	e794      	b.n	80121b0 <xTaskIncrementTick+0x24>
			taskSWITCH_DELAYED_LISTS();
 8012286:	4a12      	ldr	r2, [pc, #72]	; (80122d0 <xTaskIncrementTick+0x144>)
 8012288:	f8db 0000 	ldr.w	r0, [fp]
 801228c:	4911      	ldr	r1, [pc, #68]	; (80122d4 <xTaskIncrementTick+0x148>)
 801228e:	6814      	ldr	r4, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8012290:	4d0a      	ldr	r5, [pc, #40]	; (80122bc <xTaskIncrementTick+0x130>)
			taskSWITCH_DELAYED_LISTS();
 8012292:	f8cb 4000 	str.w	r4, [fp]
 8012296:	6010      	str	r0, [r2, #0]
 8012298:	680a      	ldr	r2, [r1, #0]
 801229a:	3201      	adds	r2, #1
 801229c:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801229e:	f8db 3000 	ldr.w	r3, [fp]
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	b91b      	cbnz	r3, 80122ae <xTaskIncrementTick+0x122>
		xNextTaskUnblockTime = portMAX_DELAY;
 80122a6:	f04f 33ff 	mov.w	r3, #4294967295
 80122aa:	602b      	str	r3, [r5, #0]
 80122ac:	e779      	b.n	80121a2 <xTaskIncrementTick+0x16>
 80122ae:	f7ff fe45 	bl	8011f3c <prvResetNextTaskUnblockTime.part.1>
 80122b2:	e776      	b.n	80121a2 <xTaskIncrementTick+0x16>
 80122b4:	20001798 	.word	0x20001798
 80122b8:	20001814 	.word	0x20001814
 80122bc:	200017cc 	.word	0x200017cc
 80122c0:	20001700 	.word	0x20001700
 80122c4:	20001794 	.word	0x20001794
 80122c8:	20001818 	.word	0x20001818
 80122cc:	200017a0 	.word	0x200017a0
 80122d0:	200016fc 	.word	0x200016fc
 80122d4:	200017d0 	.word	0x200017d0
 80122d8:	200016f4 	.word	0x200016f4
 80122dc:	200016f8 	.word	0x200016f8

080122e0 <xTaskResumeAll>:
{
 80122e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
 80122e4:	4c36      	ldr	r4, [pc, #216]	; (80123c0 <xTaskResumeAll+0xe0>)
 80122e6:	6823      	ldr	r3, [r4, #0]
 80122e8:	b953      	cbnz	r3, 8012300 <xTaskResumeAll+0x20>
 80122ea:	f04f 0330 	mov.w	r3, #48	; 0x30
 80122ee:	b672      	cpsid	i
 80122f0:	f383 8811 	msr	BASEPRI, r3
 80122f4:	f3bf 8f6f 	isb	sy
 80122f8:	f3bf 8f4f 	dsb	sy
 80122fc:	b662      	cpsie	i
 80122fe:	e7fe      	b.n	80122fe <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 8012300:	f000 fea8 	bl	8013054 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8012304:	6823      	ldr	r3, [r4, #0]
 8012306:	3b01      	subs	r3, #1
 8012308:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801230a:	6824      	ldr	r4, [r4, #0]
 801230c:	bb74      	cbnz	r4, 801236c <xTaskResumeAll+0x8c>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801230e:	4b2d      	ldr	r3, [pc, #180]	; (80123c4 <xTaskResumeAll+0xe4>)
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	b35b      	cbz	r3, 801236c <xTaskResumeAll+0x8c>
 8012314:	4d2c      	ldr	r5, [pc, #176]	; (80123c8 <xTaskResumeAll+0xe8>)
 8012316:	4f2d      	ldr	r7, [pc, #180]	; (80123cc <xTaskResumeAll+0xec>)
					prvAddTaskToReadyList( pxTCB );
 8012318:	4e2d      	ldr	r6, [pc, #180]	; (80123d0 <xTaskResumeAll+0xf0>)
 801231a:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 80123e4 <xTaskResumeAll+0x104>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801231e:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 80123e8 <xTaskResumeAll+0x108>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012322:	683b      	ldr	r3, [r7, #0]
					prvAddTaskToReadyList( pxTCB );
 8012324:	f04f 0801 	mov.w	r8, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012328:	b333      	cbz	r3, 8012378 <xTaskResumeAll+0x98>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801232e:	f104 0a04 	add.w	sl, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012332:	f104 0018 	add.w	r0, r4, #24
 8012336:	f7fe ff73 	bl	8011220 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801233a:	4650      	mov	r0, sl
 801233c:	f7fe ff70 	bl	8011220 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012340:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8012342:	6832      	ldr	r2, [r6, #0]
 8012344:	4651      	mov	r1, sl
 8012346:	fa08 f300 	lsl.w	r3, r8, r0
 801234a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801234e:	4313      	orrs	r3, r2
 8012350:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8012354:	6033      	str	r3, [r6, #0]
 8012356:	f7fe ff39 	bl	80111cc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801235a:	f8db 3000 	ldr.w	r3, [fp]
 801235e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012362:	429a      	cmp	r2, r3
 8012364:	d3dd      	bcc.n	8012322 <xTaskResumeAll+0x42>
						xYieldPending = pdTRUE;
 8012366:	f8c5 8000 	str.w	r8, [r5]
 801236a:	e7da      	b.n	8012322 <xTaskResumeAll+0x42>
BaseType_t xAlreadyYielded = pdFALSE;
 801236c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 801236e:	f000 fe97 	bl	80130a0 <vPortExitCritical>
}
 8012372:	4620      	mov	r0, r4
 8012374:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( pxTCB != NULL )
 8012378:	b13c      	cbz	r4, 801238a <xTaskResumeAll+0xaa>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801237a:	4b16      	ldr	r3, [pc, #88]	; (80123d4 <xTaskResumeAll+0xf4>)
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	b9db      	cbnz	r3, 80123ba <xTaskResumeAll+0xda>
		xNextTaskUnblockTime = portMAX_DELAY;
 8012382:	4b15      	ldr	r3, [pc, #84]	; (80123d8 <xTaskResumeAll+0xf8>)
 8012384:	f04f 32ff 	mov.w	r2, #4294967295
 8012388:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801238a:	4e14      	ldr	r6, [pc, #80]	; (80123dc <xTaskResumeAll+0xfc>)
 801238c:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801238e:	b13c      	cbz	r4, 80123a0 <xTaskResumeAll+0xc0>
								xYieldPending = pdTRUE;
 8012390:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8012392:	f7ff fefb 	bl	801218c <xTaskIncrementTick>
 8012396:	b100      	cbz	r0, 801239a <xTaskResumeAll+0xba>
								xYieldPending = pdTRUE;
 8012398:	602f      	str	r7, [r5, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801239a:	3c01      	subs	r4, #1
 801239c:	d1f9      	bne.n	8012392 <xTaskResumeAll+0xb2>
						uxPendedTicks = 0;
 801239e:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 80123a0:	682b      	ldr	r3, [r5, #0]
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d0e2      	beq.n	801236c <xTaskResumeAll+0x8c>
					taskYIELD_IF_USING_PREEMPTION();
 80123a6:	4b0e      	ldr	r3, [pc, #56]	; (80123e0 <xTaskResumeAll+0x100>)
 80123a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80123ac:	601a      	str	r2, [r3, #0]
 80123ae:	f3bf 8f4f 	dsb	sy
 80123b2:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80123b6:	2401      	movs	r4, #1
 80123b8:	e7d9      	b.n	801236e <xTaskResumeAll+0x8e>
 80123ba:	f7ff fdbf 	bl	8011f3c <prvResetNextTaskUnblockTime.part.1>
 80123be:	e7e4      	b.n	801238a <xTaskResumeAll+0xaa>
 80123c0:	20001798 	.word	0x20001798
 80123c4:	2000178c 	.word	0x2000178c
 80123c8:	20001818 	.word	0x20001818
 80123cc:	200017d4 	.word	0x200017d4
 80123d0:	200017a0 	.word	0x200017a0
 80123d4:	200016f8 	.word	0x200016f8
 80123d8:	200017cc 	.word	0x200017cc
 80123dc:	20001794 	.word	0x20001794
 80123e0:	e000ed04 	.word	0xe000ed04
 80123e4:	20001700 	.word	0x20001700
 80123e8:	200016f4 	.word	0x200016f4

080123ec <vTaskDelay>:
	{
 80123ec:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80123ee:	b1a8      	cbz	r0, 801241c <vTaskDelay+0x30>
			configASSERT( uxSchedulerSuspended == 0 );
 80123f0:	4b0f      	ldr	r3, [pc, #60]	; (8012430 <vTaskDelay+0x44>)
 80123f2:	6819      	ldr	r1, [r3, #0]
 80123f4:	b151      	cbz	r1, 801240c <vTaskDelay+0x20>
 80123f6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80123fa:	b672      	cpsid	i
 80123fc:	f383 8811 	msr	BASEPRI, r3
 8012400:	f3bf 8f6f 	isb	sy
 8012404:	f3bf 8f4f 	dsb	sy
 8012408:	b662      	cpsie	i
 801240a:	e7fe      	b.n	801240a <vTaskDelay+0x1e>
	++uxSchedulerSuspended;
 801240c:	681a      	ldr	r2, [r3, #0]
 801240e:	3201      	adds	r2, #1
 8012410:	601a      	str	r2, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012412:	f7ff fd17 	bl	8011e44 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8012416:	f7ff ff63 	bl	80122e0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 801241a:	b938      	cbnz	r0, 801242c <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 801241c:	4b05      	ldr	r3, [pc, #20]	; (8012434 <vTaskDelay+0x48>)
 801241e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012422:	601a      	str	r2, [r3, #0]
 8012424:	f3bf 8f4f 	dsb	sy
 8012428:	f3bf 8f6f 	isb	sy
	}
 801242c:	bd08      	pop	{r3, pc}
 801242e:	bf00      	nop
 8012430:	20001798 	.word	0x20001798
 8012434:	e000ed04 	.word	0xe000ed04

08012438 <vTaskSwitchContext>:
{
 8012438:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801243a:	4b1f      	ldr	r3, [pc, #124]	; (80124b8 <vTaskSwitchContext+0x80>)
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	bb03      	cbnz	r3, 8012482 <vTaskSwitchContext+0x4a>
		xYieldPending = pdFALSE;
 8012440:	4a1e      	ldr	r2, [pc, #120]	; (80124bc <vTaskSwitchContext+0x84>)
		taskCHECK_FOR_STACK_OVERFLOW();
 8012442:	4c1f      	ldr	r4, [pc, #124]	; (80124c0 <vTaskSwitchContext+0x88>)
		xYieldPending = pdFALSE;
 8012444:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8012446:	6822      	ldr	r2, [r4, #0]
 8012448:	6823      	ldr	r3, [r4, #0]
 801244a:	6812      	ldr	r2, [r2, #0]
 801244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801244e:	429a      	cmp	r2, r3
 8012450:	d926      	bls.n	80124a0 <vTaskSwitchContext+0x68>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012452:	4b1c      	ldr	r3, [pc, #112]	; (80124c4 <vTaskSwitchContext+0x8c>)
 8012454:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8012456:	fab3 f383 	clz	r3, r3
 801245a:	b2db      	uxtb	r3, r3
 801245c:	481a      	ldr	r0, [pc, #104]	; (80124c8 <vTaskSwitchContext+0x90>)
 801245e:	f1c3 031f 	rsb	r3, r3, #31
 8012462:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8012466:	0092      	lsls	r2, r2, #2
 8012468:	5881      	ldr	r1, [r0, r2]
 801246a:	1885      	adds	r5, r0, r2
 801246c:	b169      	cbz	r1, 801248a <vTaskSwitchContext+0x52>
 801246e:	6869      	ldr	r1, [r5, #4]
 8012470:	3208      	adds	r2, #8
 8012472:	6849      	ldr	r1, [r1, #4]
 8012474:	4402      	add	r2, r0
 8012476:	4291      	cmp	r1, r2
 8012478:	6069      	str	r1, [r5, #4]
 801247a:	d017      	beq.n	80124ac <vTaskSwitchContext+0x74>
 801247c:	68cb      	ldr	r3, [r1, #12]
 801247e:	6023      	str	r3, [r4, #0]
}
 8012480:	bd38      	pop	{r3, r4, r5, pc}
		xYieldPending = pdTRUE;
 8012482:	4b0e      	ldr	r3, [pc, #56]	; (80124bc <vTaskSwitchContext+0x84>)
 8012484:	2201      	movs	r2, #1
 8012486:	601a      	str	r2, [r3, #0]
}
 8012488:	bd38      	pop	{r3, r4, r5, pc}
	__asm volatile
 801248a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801248e:	b672      	cpsid	i
 8012490:	f383 8811 	msr	BASEPRI, r3
 8012494:	f3bf 8f6f 	isb	sy
 8012498:	f3bf 8f4f 	dsb	sy
 801249c:	b662      	cpsie	i
 801249e:	e7fe      	b.n	801249e <vTaskSwitchContext+0x66>
		taskCHECK_FOR_STACK_OVERFLOW();
 80124a0:	6820      	ldr	r0, [r4, #0]
 80124a2:	6821      	ldr	r1, [r4, #0]
 80124a4:	3134      	adds	r1, #52	; 0x34
 80124a6:	f7ee fb85 	bl	8000bb4 <vApplicationStackOverflowHook>
 80124aa:	e7d2      	b.n	8012452 <vTaskSwitchContext+0x1a>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80124ac:	2214      	movs	r2, #20
 80124ae:	6849      	ldr	r1, [r1, #4]
 80124b0:	fb02 0303 	mla	r3, r2, r3, r0
 80124b4:	6059      	str	r1, [r3, #4]
 80124b6:	e7e1      	b.n	801247c <vTaskSwitchContext+0x44>
 80124b8:	20001798 	.word	0x20001798
 80124bc:	20001818 	.word	0x20001818
 80124c0:	200016f4 	.word	0x200016f4
 80124c4:	200017a0 	.word	0x200017a0
 80124c8:	20001700 	.word	0x20001700

080124cc <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 80124cc:	b950      	cbnz	r0, 80124e4 <vTaskPlaceOnEventList+0x18>
 80124ce:	f04f 0330 	mov.w	r3, #48	; 0x30
 80124d2:	b672      	cpsid	i
 80124d4:	f383 8811 	msr	BASEPRI, r3
 80124d8:	f3bf 8f6f 	isb	sy
 80124dc:	f3bf 8f4f 	dsb	sy
 80124e0:	b662      	cpsie	i
 80124e2:	e7fe      	b.n	80124e2 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80124e4:	4b06      	ldr	r3, [pc, #24]	; (8012500 <vTaskPlaceOnEventList+0x34>)
{
 80124e6:	b510      	push	{r4, lr}
 80124e8:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80124ea:	6819      	ldr	r1, [r3, #0]
 80124ec:	3118      	adds	r1, #24
 80124ee:	f7fe fe7d 	bl	80111ec <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80124f2:	4620      	mov	r0, r4
 80124f4:	2101      	movs	r1, #1
}
 80124f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80124fa:	f7ff bca3 	b.w	8011e44 <prvAddCurrentTaskToDelayedList>
 80124fe:	bf00      	nop
 8012500:	200016f4 	.word	0x200016f4

08012504 <vTaskPlaceOnEventListRestricted>:
	{
 8012504:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8012506:	b180      	cbz	r0, 801252a <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012508:	4b0d      	ldr	r3, [pc, #52]	; (8012540 <vTaskPlaceOnEventListRestricted+0x3c>)
 801250a:	460d      	mov	r5, r1
 801250c:	4614      	mov	r4, r2
 801250e:	6819      	ldr	r1, [r3, #0]
 8012510:	3118      	adds	r1, #24
 8012512:	f7fe fe5b 	bl	80111cc <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8012516:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8012518:	4621      	mov	r1, r4
 801251a:	bf0c      	ite	eq
 801251c:	4628      	moveq	r0, r5
 801251e:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8012522:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8012526:	f7ff bc8d 	b.w	8011e44 <prvAddCurrentTaskToDelayedList>
 801252a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801252e:	b672      	cpsid	i
 8012530:	f383 8811 	msr	BASEPRI, r3
 8012534:	f3bf 8f6f 	isb	sy
 8012538:	f3bf 8f4f 	dsb	sy
 801253c:	b662      	cpsie	i
 801253e:	e7fe      	b.n	801253e <vTaskPlaceOnEventListRestricted+0x3a>
 8012540:	200016f4 	.word	0x200016f4

08012544 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012544:	68c3      	ldr	r3, [r0, #12]
{
 8012546:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012548:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 801254a:	b34c      	cbz	r4, 80125a0 <xTaskRemoveFromEventList+0x5c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801254c:	f104 0518 	add.w	r5, r4, #24
 8012550:	4628      	mov	r0, r5
 8012552:	f7fe fe65 	bl	8011220 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012556:	4b19      	ldr	r3, [pc, #100]	; (80125bc <xTaskRemoveFromEventList+0x78>)
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	b9e3      	cbnz	r3, 8012596 <xTaskRemoveFromEventList+0x52>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801255c:	1d26      	adds	r6, r4, #4
		prvAddTaskToReadyList( pxUnblockedTCB );
 801255e:	4d18      	ldr	r5, [pc, #96]	; (80125c0 <xTaskRemoveFromEventList+0x7c>)
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012560:	4630      	mov	r0, r6
 8012562:	f7fe fe5d 	bl	8011220 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012566:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012568:	2301      	movs	r3, #1
 801256a:	4631      	mov	r1, r6
 801256c:	682e      	ldr	r6, [r5, #0]
 801256e:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 8012572:	4093      	lsls	r3, r2
 8012574:	4a13      	ldr	r2, [pc, #76]	; (80125c4 <xTaskRemoveFromEventList+0x80>)
 8012576:	4333      	orrs	r3, r6
 8012578:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 801257c:	602b      	str	r3, [r5, #0]
 801257e:	f7fe fe25 	bl	80111cc <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012582:	4b11      	ldr	r3, [pc, #68]	; (80125c8 <xTaskRemoveFromEventList+0x84>)
 8012584:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801258a:	429a      	cmp	r2, r3
 801258c:	d913      	bls.n	80125b6 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
 801258e:	4b0f      	ldr	r3, [pc, #60]	; (80125cc <xTaskRemoveFromEventList+0x88>)
 8012590:	2001      	movs	r0, #1
 8012592:	6018      	str	r0, [r3, #0]
}
 8012594:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012596:	4629      	mov	r1, r5
 8012598:	480d      	ldr	r0, [pc, #52]	; (80125d0 <xTaskRemoveFromEventList+0x8c>)
 801259a:	f7fe fe17 	bl	80111cc <vListInsertEnd>
 801259e:	e7f0      	b.n	8012582 <xTaskRemoveFromEventList+0x3e>
 80125a0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80125a4:	b672      	cpsid	i
 80125a6:	f383 8811 	msr	BASEPRI, r3
 80125aa:	f3bf 8f6f 	isb	sy
 80125ae:	f3bf 8f4f 	dsb	sy
 80125b2:	b662      	cpsie	i
 80125b4:	e7fe      	b.n	80125b4 <xTaskRemoveFromEventList+0x70>
		xReturn = pdFALSE;
 80125b6:	2000      	movs	r0, #0
}
 80125b8:	bd70      	pop	{r4, r5, r6, pc}
 80125ba:	bf00      	nop
 80125bc:	20001798 	.word	0x20001798
 80125c0:	200017a0 	.word	0x200017a0
 80125c4:	20001700 	.word	0x20001700
 80125c8:	200016f4 	.word	0x200016f4
 80125cc:	20001818 	.word	0x20001818
 80125d0:	200017d4 	.word	0x200017d4

080125d4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80125d4:	4a03      	ldr	r2, [pc, #12]	; (80125e4 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 80125d6:	4b04      	ldr	r3, [pc, #16]	; (80125e8 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80125d8:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	e9c0 2300 	strd	r2, r3, [r0]
}
 80125e0:	4770      	bx	lr
 80125e2:	bf00      	nop
 80125e4:	200017d0 	.word	0x200017d0
 80125e8:	20001814 	.word	0x20001814

080125ec <xTaskCheckForTimeOut>:
{
 80125ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 80125ee:	b350      	cbz	r0, 8012646 <xTaskCheckForTimeOut+0x5a>
	configASSERT( pxTicksToWait );
 80125f0:	b1f1      	cbz	r1, 8012630 <xTaskCheckForTimeOut+0x44>
 80125f2:	460d      	mov	r5, r1
 80125f4:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80125f6:	f000 fd2d 	bl	8013054 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80125fa:	f8df c080 	ldr.w	ip, [pc, #128]	; 801267c <xTaskCheckForTimeOut+0x90>
			if( *pxTicksToWait == portMAX_DELAY )
 80125fe:	682b      	ldr	r3, [r5, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012600:	6867      	ldr	r7, [r4, #4]
		const TickType_t xConstTickCount = xTickCount;
 8012602:	f8dc 6000 	ldr.w	r6, [ip]
			if( *pxTicksToWait == portMAX_DELAY )
 8012606:	1c5a      	adds	r2, r3, #1
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012608:	eba6 0007 	sub.w	r0, r6, r7
			if( *pxTicksToWait == portMAX_DELAY )
 801260c:	d026      	beq.n	801265c <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801260e:	491a      	ldr	r1, [pc, #104]	; (8012678 <xTaskCheckForTimeOut+0x8c>)
 8012610:	6822      	ldr	r2, [r4, #0]
 8012612:	f8d1 e000 	ldr.w	lr, [r1]
 8012616:	4572      	cmp	r2, lr
 8012618:	d001      	beq.n	801261e <xTaskCheckForTimeOut+0x32>
 801261a:	42b7      	cmp	r7, r6
 801261c:	d929      	bls.n	8012672 <xTaskCheckForTimeOut+0x86>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801261e:	4283      	cmp	r3, r0
 8012620:	d81e      	bhi.n	8012660 <xTaskCheckForTimeOut+0x74>
			*pxTicksToWait = 0;
 8012622:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 8012624:	2601      	movs	r6, #1
			*pxTicksToWait = 0;
 8012626:	602b      	str	r3, [r5, #0]
	taskEXIT_CRITICAL();
 8012628:	f000 fd3a 	bl	80130a0 <vPortExitCritical>
}
 801262c:	4630      	mov	r0, r6
 801262e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012630:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012634:	b672      	cpsid	i
 8012636:	f383 8811 	msr	BASEPRI, r3
 801263a:	f3bf 8f6f 	isb	sy
 801263e:	f3bf 8f4f 	dsb	sy
 8012642:	b662      	cpsie	i
 8012644:	e7fe      	b.n	8012644 <xTaskCheckForTimeOut+0x58>
 8012646:	f04f 0330 	mov.w	r3, #48	; 0x30
 801264a:	b672      	cpsid	i
 801264c:	f383 8811 	msr	BASEPRI, r3
 8012650:	f3bf 8f6f 	isb	sy
 8012654:	f3bf 8f4f 	dsb	sy
 8012658:	b662      	cpsie	i
 801265a:	e7fe      	b.n	801265a <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 801265c:	2600      	movs	r6, #0
 801265e:	e7e3      	b.n	8012628 <xTaskCheckForTimeOut+0x3c>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012660:	6809      	ldr	r1, [r1, #0]
			*pxTicksToWait -= xElapsedTime;
 8012662:	1a1b      	subs	r3, r3, r0
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012664:	f8dc 2000 	ldr.w	r2, [ip]
			xReturn = pdFALSE;
 8012668:	2600      	movs	r6, #0
			*pxTicksToWait -= xElapsedTime;
 801266a:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801266c:	e9c4 1200 	strd	r1, r2, [r4]
 8012670:	e7da      	b.n	8012628 <xTaskCheckForTimeOut+0x3c>
			xReturn = pdTRUE;
 8012672:	2601      	movs	r6, #1
 8012674:	e7d8      	b.n	8012628 <xTaskCheckForTimeOut+0x3c>
 8012676:	bf00      	nop
 8012678:	200017d0 	.word	0x200017d0
 801267c:	20001814 	.word	0x20001814

08012680 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8012680:	4b01      	ldr	r3, [pc, #4]	; (8012688 <vTaskMissedYield+0x8>)
 8012682:	2201      	movs	r2, #1
 8012684:	601a      	str	r2, [r3, #0]
}
 8012686:	4770      	bx	lr
 8012688:	20001818 	.word	0x20001818

0801268c <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 801268c:	4b01      	ldr	r3, [pc, #4]	; (8012694 <xTaskGetCurrentTaskHandle+0x8>)
 801268e:	6818      	ldr	r0, [r3, #0]
	}
 8012690:	4770      	bx	lr
 8012692:	bf00      	nop
 8012694:	200016f4 	.word	0x200016f4

08012698 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8012698:	4b05      	ldr	r3, [pc, #20]	; (80126b0 <xTaskGetSchedulerState+0x18>)
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	b133      	cbz	r3, 80126ac <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801269e:	4b05      	ldr	r3, [pc, #20]	; (80126b4 <xTaskGetSchedulerState+0x1c>)
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 80126a4:	bf0c      	ite	eq
 80126a6:	2002      	moveq	r0, #2
 80126a8:	2000      	movne	r0, #0
 80126aa:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80126ac:	2001      	movs	r0, #1
	}
 80126ae:	4770      	bx	lr
 80126b0:	200017e8 	.word	0x200017e8
 80126b4:	20001798 	.word	0x20001798

080126b8 <xTaskPriorityInherit>:
	{
 80126b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 80126bc:	4607      	mov	r7, r0
 80126be:	b1c8      	cbz	r0, 80126f4 <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80126c0:	4c26      	ldr	r4, [pc, #152]	; (801275c <xTaskPriorityInherit+0xa4>)
 80126c2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80126c4:	6821      	ldr	r1, [r4, #0]
 80126c6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80126c8:	428a      	cmp	r2, r1
 80126ca:	d215      	bcs.n	80126f8 <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80126cc:	6981      	ldr	r1, [r0, #24]
 80126ce:	2900      	cmp	r1, #0
 80126d0:	db04      	blt.n	80126dc <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80126d2:	6821      	ldr	r1, [r4, #0]
 80126d4:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80126d6:	f1c1 0107 	rsb	r1, r1, #7
 80126da:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80126dc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80126e0:	4d1f      	ldr	r5, [pc, #124]	; (8012760 <xTaskPriorityInherit+0xa8>)
 80126e2:	6979      	ldr	r1, [r7, #20]
 80126e4:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80126e8:	4291      	cmp	r1, r2
 80126ea:	d00e      	beq.n	801270a <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80126ec:	6822      	ldr	r2, [r4, #0]
				xReturn = pdTRUE;
 80126ee:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80126f0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80126f2:	62fa      	str	r2, [r7, #44]	; 0x2c
	}
 80126f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80126f8:	6822      	ldr	r2, [r4, #0]
 80126fa:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80126fc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80126fe:	4298      	cmp	r0, r3
 8012700:	bf2c      	ite	cs
 8012702:	2000      	movcs	r0, #0
 8012704:	2001      	movcc	r0, #1
	}
 8012706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801270a:	f107 0804 	add.w	r8, r7, #4
 801270e:	4640      	mov	r0, r8
 8012710:	f7fe fd86 	bl	8011220 <uxListRemove>
 8012714:	b9f8      	cbnz	r0, 8012756 <xTaskPriorityInherit+0x9e>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8012716:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012718:	4e12      	ldr	r6, [pc, #72]	; (8012764 <xTaskPriorityInherit+0xac>)
 801271a:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 801271e:	009b      	lsls	r3, r3, #2
 8012720:	58eb      	ldr	r3, [r5, r3]
 8012722:	b933      	cbnz	r3, 8012732 <xTaskPriorityInherit+0x7a>
 8012724:	2101      	movs	r1, #1
 8012726:	6833      	ldr	r3, [r6, #0]
 8012728:	fa01 f202 	lsl.w	r2, r1, r2
 801272c:	ea23 0202 	bic.w	r2, r3, r2
 8012730:	6032      	str	r2, [r6, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012732:	6822      	ldr	r2, [r4, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012734:	2401      	movs	r4, #1
 8012736:	6833      	ldr	r3, [r6, #0]
 8012738:	4641      	mov	r1, r8
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801273a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801273c:	fa04 f200 	lsl.w	r2, r4, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012740:	62f8      	str	r0, [r7, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012742:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012746:	4313      	orrs	r3, r2
 8012748:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 801274c:	6033      	str	r3, [r6, #0]
 801274e:	f7fe fd3d 	bl	80111cc <vListInsertEnd>
				xReturn = pdTRUE;
 8012752:	4620      	mov	r0, r4
 8012754:	e7ce      	b.n	80126f4 <xTaskPriorityInherit+0x3c>
 8012756:	4e03      	ldr	r6, [pc, #12]	; (8012764 <xTaskPriorityInherit+0xac>)
 8012758:	e7eb      	b.n	8012732 <xTaskPriorityInherit+0x7a>
 801275a:	bf00      	nop
 801275c:	200016f4 	.word	0x200016f4
 8012760:	20001700 	.word	0x20001700
 8012764:	200017a0 	.word	0x200017a0

08012768 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8012768:	b178      	cbz	r0, 801278a <xTaskPriorityDisinherit+0x22>
	{
 801276a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 801276c:	4b2a      	ldr	r3, [pc, #168]	; (8012818 <xTaskPriorityDisinherit+0xb0>)
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	4283      	cmp	r3, r0
 8012772:	d00c      	beq.n	801278e <xTaskPriorityDisinherit+0x26>
 8012774:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012778:	b672      	cpsid	i
 801277a:	f383 8811 	msr	BASEPRI, r3
 801277e:	f3bf 8f6f 	isb	sy
 8012782:	f3bf 8f4f 	dsb	sy
 8012786:	b662      	cpsie	i
 8012788:	e7fe      	b.n	8012788 <xTaskPriorityDisinherit+0x20>
	BaseType_t xReturn = pdFALSE;
 801278a:	2000      	movs	r0, #0
	}
 801278c:	4770      	bx	lr
			configASSERT( pxTCB->uxMutexesHeld );
 801278e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012790:	b953      	cbnz	r3, 80127a8 <xTaskPriorityDisinherit+0x40>
 8012792:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012796:	b672      	cpsid	i
 8012798:	f383 8811 	msr	BASEPRI, r3
 801279c:	f3bf 8f6f 	isb	sy
 80127a0:	f3bf 8f4f 	dsb	sy
 80127a4:	b662      	cpsie	i
 80127a6:	e7fe      	b.n	80127a6 <xTaskPriorityDisinherit+0x3e>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80127a8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 80127aa:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80127ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 80127ae:	6483      	str	r3, [r0, #72]	; 0x48
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80127b0:	4291      	cmp	r1, r2
 80127b2:	d000      	beq.n	80127b6 <xTaskPriorityDisinherit+0x4e>
 80127b4:	b10b      	cbz	r3, 80127ba <xTaskPriorityDisinherit+0x52>
	BaseType_t xReturn = pdFALSE;
 80127b6:	2000      	movs	r0, #0
	}
 80127b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80127ba:	1d07      	adds	r7, r0, #4
 80127bc:	4604      	mov	r4, r0
 80127be:	4638      	mov	r0, r7
 80127c0:	f7fe fd2e 	bl	8011220 <uxListRemove>
 80127c4:	b1b8      	cbz	r0, 80127f6 <xTaskPriorityDisinherit+0x8e>
 80127c6:	4815      	ldr	r0, [pc, #84]	; (801281c <xTaskPriorityDisinherit+0xb4>)
 80127c8:	4a15      	ldr	r2, [pc, #84]	; (8012820 <xTaskPriorityDisinherit+0xb8>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80127ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
					prvAddTaskToReadyList( pxTCB );
 80127cc:	2501      	movs	r5, #1
 80127ce:	f04f 0c14 	mov.w	ip, #20
 80127d2:	f8d2 e000 	ldr.w	lr, [r2]
 80127d6:	fa05 f603 	lsl.w	r6, r5, r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80127da:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80127dc:	fb0c 0003 	mla	r0, ip, r3, r0
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80127e0:	f1c3 0307 	rsb	r3, r3, #7
					prvAddTaskToReadyList( pxTCB );
 80127e4:	ea46 060e 	orr.w	r6, r6, lr
 80127e8:	4639      	mov	r1, r7
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80127ea:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80127ec:	6016      	str	r6, [r2, #0]
 80127ee:	f7fe fced 	bl	80111cc <vListInsertEnd>
					xReturn = pdTRUE;
 80127f2:	4628      	mov	r0, r5
	}
 80127f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80127f6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80127f8:	2314      	movs	r3, #20
 80127fa:	4808      	ldr	r0, [pc, #32]	; (801281c <xTaskPriorityDisinherit+0xb4>)
 80127fc:	fb03 f301 	mul.w	r3, r3, r1
 8012800:	4a07      	ldr	r2, [pc, #28]	; (8012820 <xTaskPriorityDisinherit+0xb8>)
 8012802:	58c3      	ldr	r3, [r0, r3]
 8012804:	2b00      	cmp	r3, #0
 8012806:	d1e0      	bne.n	80127ca <xTaskPriorityDisinherit+0x62>
 8012808:	2501      	movs	r5, #1
 801280a:	6813      	ldr	r3, [r2, #0]
 801280c:	408d      	lsls	r5, r1
 801280e:	ea23 0305 	bic.w	r3, r3, r5
 8012812:	6013      	str	r3, [r2, #0]
 8012814:	e7d9      	b.n	80127ca <xTaskPriorityDisinherit+0x62>
 8012816:	bf00      	nop
 8012818:	200016f4 	.word	0x200016f4
 801281c:	20001700 	.word	0x20001700
 8012820:	200017a0 	.word	0x200017a0

08012824 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8012824:	b1b8      	cbz	r0, 8012856 <vTaskPriorityDisinheritAfterTimeout+0x32>
	{
 8012826:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB->uxMutexesHeld );
 8012828:	6c84      	ldr	r4, [r0, #72]	; 0x48
 801282a:	b954      	cbnz	r4, 8012842 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 801282c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012830:	b672      	cpsid	i
 8012832:	f383 8811 	msr	BASEPRI, r3
 8012836:	f3bf 8f6f 	isb	sy
 801283a:	f3bf 8f4f 	dsb	sy
 801283e:	b662      	cpsie	i
 8012840:	e7fe      	b.n	8012840 <vTaskPriorityDisinheritAfterTimeout+0x1c>
 8012842:	6c43      	ldr	r3, [r0, #68]	; 0x44
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012844:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8012846:	428b      	cmp	r3, r1
 8012848:	bf38      	it	cc
 801284a:	460b      	movcc	r3, r1
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801284c:	429a      	cmp	r2, r3
 801284e:	d001      	beq.n	8012854 <vTaskPriorityDisinheritAfterTimeout+0x30>
 8012850:	2c01      	cmp	r4, #1
 8012852:	d001      	beq.n	8012858 <vTaskPriorityDisinheritAfterTimeout+0x34>
	}
 8012854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012856:	4770      	bx	lr
					configASSERT( pxTCB != pxCurrentTCB );
 8012858:	4920      	ldr	r1, [pc, #128]	; (80128dc <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 801285a:	6809      	ldr	r1, [r1, #0]
 801285c:	4281      	cmp	r1, r0
 801285e:	d022      	beq.n	80128a6 <vTaskPriorityDisinheritAfterTimeout+0x82>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012860:	6981      	ldr	r1, [r0, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 8012862:	62c3      	str	r3, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012864:	2900      	cmp	r1, #0
 8012866:	db02      	blt.n	801286e <vTaskPriorityDisinheritAfterTimeout+0x4a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012868:	f1c3 0307 	rsb	r3, r3, #7
 801286c:	6183      	str	r3, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801286e:	4e1c      	ldr	r6, [pc, #112]	; (80128e0 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 8012870:	2514      	movs	r5, #20
 8012872:	6943      	ldr	r3, [r0, #20]
 8012874:	fb05 6202 	mla	r2, r5, r2, r6
 8012878:	4293      	cmp	r3, r2
 801287a:	d1eb      	bne.n	8012854 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801287c:	1d07      	adds	r7, r0, #4
 801287e:	4604      	mov	r4, r0
 8012880:	4638      	mov	r0, r7
 8012882:	f7fe fccd 	bl	8011220 <uxListRemove>
 8012886:	b1c8      	cbz	r0, 80128bc <vTaskPriorityDisinheritAfterTimeout+0x98>
 8012888:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801288a:	4b16      	ldr	r3, [pc, #88]	; (80128e4 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
						prvAddTaskToReadyList( pxTCB );
 801288c:	2201      	movs	r2, #1
 801288e:	681c      	ldr	r4, [r3, #0]
 8012890:	2514      	movs	r5, #20
 8012892:	4639      	mov	r1, r7
 8012894:	4082      	lsls	r2, r0
 8012896:	fb05 6000 	mla	r0, r5, r0, r6
 801289a:	4322      	orrs	r2, r4
 801289c:	601a      	str	r2, [r3, #0]
	}
 801289e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 80128a2:	f7fe bc93 	b.w	80111cc <vListInsertEnd>
 80128a6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80128aa:	b672      	cpsid	i
 80128ac:	f383 8811 	msr	BASEPRI, r3
 80128b0:	f3bf 8f6f 	isb	sy
 80128b4:	f3bf 8f4f 	dsb	sy
 80128b8:	b662      	cpsie	i
 80128ba:	e7fe      	b.n	80128ba <vTaskPriorityDisinheritAfterTimeout+0x96>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80128bc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80128be:	2201      	movs	r2, #1
 80128c0:	fb05 f500 	mul.w	r5, r5, r0
 80128c4:	fa02 f400 	lsl.w	r4, r2, r0
 80128c8:	5973      	ldr	r3, [r6, r5]
 80128ca:	b10b      	cbz	r3, 80128d0 <vTaskPriorityDisinheritAfterTimeout+0xac>
 80128cc:	4b05      	ldr	r3, [pc, #20]	; (80128e4 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 80128ce:	e7dd      	b.n	801288c <vTaskPriorityDisinheritAfterTimeout+0x68>
 80128d0:	4b04      	ldr	r3, [pc, #16]	; (80128e4 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 80128d2:	681a      	ldr	r2, [r3, #0]
 80128d4:	ea22 0204 	bic.w	r2, r2, r4
 80128d8:	601a      	str	r2, [r3, #0]
 80128da:	e7d7      	b.n	801288c <vTaskPriorityDisinheritAfterTimeout+0x68>
 80128dc:	200016f4 	.word	0x200016f4
 80128e0:	20001700 	.word	0x20001700
 80128e4:	200017a0 	.word	0x200017a0

080128e8 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80128e8:	4b04      	ldr	r3, [pc, #16]	; (80128fc <pvTaskIncrementMutexHeldCount+0x14>)
 80128ea:	681a      	ldr	r2, [r3, #0]
 80128ec:	b11a      	cbz	r2, 80128f6 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80128ee:	6819      	ldr	r1, [r3, #0]
 80128f0:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 80128f2:	3201      	adds	r2, #1
 80128f4:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 80128f6:	6818      	ldr	r0, [r3, #0]
	}
 80128f8:	4770      	bx	lr
 80128fa:	bf00      	nop
 80128fc:	200016f4 	.word	0x200016f4

08012900 <ulTaskNotifyTake>:
	{
 8012900:	b570      	push	{r4, r5, r6, lr}
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8012902:	4c17      	ldr	r4, [pc, #92]	; (8012960 <ulTaskNotifyTake+0x60>)
	{
 8012904:	4606      	mov	r6, r0
 8012906:	460d      	mov	r5, r1
		taskENTER_CRITICAL();
 8012908:	f000 fba4 	bl	8013054 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 801290c:	6823      	ldr	r3, [r4, #0]
 801290e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012910:	b923      	cbnz	r3, 801291c <ulTaskNotifyTake+0x1c>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8012912:	6823      	ldr	r3, [r4, #0]
 8012914:	2101      	movs	r1, #1
 8012916:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
				if( xTicksToWait > ( TickType_t ) 0 )
 801291a:	b9ad      	cbnz	r5, 8012948 <ulTaskNotifyTake+0x48>
		taskEXIT_CRITICAL();
 801291c:	f000 fbc0 	bl	80130a0 <vPortExitCritical>
		taskENTER_CRITICAL();
 8012920:	f000 fb98 	bl	8013054 <vPortEnterCritical>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8012924:	6823      	ldr	r3, [r4, #0]
 8012926:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
			if( ulReturn != 0UL )
 8012928:	b11d      	cbz	r5, 8012932 <ulTaskNotifyTake+0x32>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 801292a:	6823      	ldr	r3, [r4, #0]
				if( xClearCountOnExit != pdFALSE )
 801292c:	b94e      	cbnz	r6, 8012942 <ulTaskNotifyTake+0x42>
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 801292e:	1e6a      	subs	r2, r5, #1
 8012930:	64da      	str	r2, [r3, #76]	; 0x4c
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012932:	6823      	ldr	r3, [r4, #0]
 8012934:	2200      	movs	r2, #0
 8012936:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		taskEXIT_CRITICAL();
 801293a:	f000 fbb1 	bl	80130a0 <vPortExitCritical>
	}
 801293e:	4628      	mov	r0, r5
 8012940:	bd70      	pop	{r4, r5, r6, pc}
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8012942:	2200      	movs	r2, #0
 8012944:	64da      	str	r2, [r3, #76]	; 0x4c
 8012946:	e7f4      	b.n	8012932 <ulTaskNotifyTake+0x32>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012948:	4628      	mov	r0, r5
 801294a:	f7ff fa7b 	bl	8011e44 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 801294e:	4b05      	ldr	r3, [pc, #20]	; (8012964 <ulTaskNotifyTake+0x64>)
 8012950:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012954:	601a      	str	r2, [r3, #0]
 8012956:	f3bf 8f4f 	dsb	sy
 801295a:	f3bf 8f6f 	isb	sy
 801295e:	e7dd      	b.n	801291c <ulTaskNotifyTake+0x1c>
 8012960:	200016f4 	.word	0x200016f4
 8012964:	e000ed04 	.word	0xe000ed04

08012968 <vTaskNotifyGiveFromISR>:
		configASSERT( xTaskToNotify );
 8012968:	b308      	cbz	r0, 80129ae <vTaskNotifyGiveFromISR+0x46>
	{
 801296a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801296e:	4604      	mov	r4, r0
 8012970:	460e      	mov	r6, r1
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012972:	f000 fc7d 	bl	8013270 <vPortValidateInterruptPriority>
	__asm volatile
 8012976:	f3ef 8711 	mrs	r7, BASEPRI
 801297a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801297e:	b672      	cpsid	i
 8012980:	f383 8811 	msr	BASEPRI, r3
 8012984:	f3bf 8f6f 	isb	sy
 8012988:	f3bf 8f4f 	dsb	sy
 801298c:	b662      	cpsie	i
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801298e:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8012990:	f894 5050 	ldrb.w	r5, [r4, #80]	; 0x50
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8012994:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8012998:	b2ed      	uxtb	r5, r5
			( pxTCB->ulNotifiedValue )++;
 801299a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801299c:	2d01      	cmp	r5, #1
			( pxTCB->ulNotifiedValue )++;
 801299e:	f103 0301 	add.w	r3, r3, #1
 80129a2:	64e3      	str	r3, [r4, #76]	; 0x4c
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80129a4:	d00e      	beq.n	80129c4 <vTaskNotifyGiveFromISR+0x5c>
	__asm volatile
 80129a6:	f387 8811 	msr	BASEPRI, r7
	}
 80129aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
 80129ae:	f04f 0330 	mov.w	r3, #48	; 0x30
 80129b2:	b672      	cpsid	i
 80129b4:	f383 8811 	msr	BASEPRI, r3
 80129b8:	f3bf 8f6f 	isb	sy
 80129bc:	f3bf 8f4f 	dsb	sy
 80129c0:	b662      	cpsie	i
 80129c2:	e7fe      	b.n	80129c2 <vTaskNotifyGiveFromISR+0x5a>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80129c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80129c6:	b153      	cbz	r3, 80129de <vTaskNotifyGiveFromISR+0x76>
 80129c8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80129cc:	b672      	cpsid	i
 80129ce:	f383 8811 	msr	BASEPRI, r3
 80129d2:	f3bf 8f6f 	isb	sy
 80129d6:	f3bf 8f4f 	dsb	sy
 80129da:	b662      	cpsie	i
 80129dc:	e7fe      	b.n	80129dc <vTaskNotifyGiveFromISR+0x74>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80129de:	4b16      	ldr	r3, [pc, #88]	; (8012a38 <vTaskNotifyGiveFromISR+0xd0>)
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	bb13      	cbnz	r3, 8012a2a <vTaskNotifyGiveFromISR+0xc2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80129e4:	f104 0804 	add.w	r8, r4, #4
 80129e8:	4640      	mov	r0, r8
 80129ea:	f7fe fc19 	bl	8011220 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80129ee:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80129f0:	4a12      	ldr	r2, [pc, #72]	; (8012a3c <vTaskNotifyGiveFromISR+0xd4>)
 80129f2:	f04f 0c14 	mov.w	ip, #20
 80129f6:	fa05 f300 	lsl.w	r3, r5, r0
 80129fa:	4d11      	ldr	r5, [pc, #68]	; (8012a40 <vTaskNotifyGiveFromISR+0xd8>)
 80129fc:	f8d2 e000 	ldr.w	lr, [r2]
 8012a00:	4641      	mov	r1, r8
 8012a02:	fb0c 5000 	mla	r0, ip, r0, r5
 8012a06:	ea43 030e 	orr.w	r3, r3, lr
 8012a0a:	6013      	str	r3, [r2, #0]
 8012a0c:	f7fe fbde 	bl	80111cc <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012a10:	4b0c      	ldr	r3, [pc, #48]	; (8012a44 <vTaskNotifyGiveFromISR+0xdc>)
 8012a12:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a18:	429a      	cmp	r2, r3
 8012a1a:	d9c4      	bls.n	80129a6 <vTaskNotifyGiveFromISR+0x3e>
					if( pxHigherPriorityTaskWoken != NULL )
 8012a1c:	b10e      	cbz	r6, 8012a22 <vTaskNotifyGiveFromISR+0xba>
						*pxHigherPriorityTaskWoken = pdTRUE;
 8012a1e:	2301      	movs	r3, #1
 8012a20:	6033      	str	r3, [r6, #0]
					xYieldPending = pdTRUE;
 8012a22:	4b09      	ldr	r3, [pc, #36]	; (8012a48 <vTaskNotifyGiveFromISR+0xe0>)
 8012a24:	2201      	movs	r2, #1
 8012a26:	601a      	str	r2, [r3, #0]
 8012a28:	e7bd      	b.n	80129a6 <vTaskNotifyGiveFromISR+0x3e>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8012a2a:	f104 0118 	add.w	r1, r4, #24
 8012a2e:	4807      	ldr	r0, [pc, #28]	; (8012a4c <vTaskNotifyGiveFromISR+0xe4>)
 8012a30:	f7fe fbcc 	bl	80111cc <vListInsertEnd>
 8012a34:	e7ec      	b.n	8012a10 <vTaskNotifyGiveFromISR+0xa8>
 8012a36:	bf00      	nop
 8012a38:	20001798 	.word	0x20001798
 8012a3c:	200017a0 	.word	0x200017a0
 8012a40:	20001700 	.word	0x20001700
 8012a44:	200016f4 	.word	0x200016f4
 8012a48:	20001818 	.word	0x20001818
 8012a4c:	200017d4 	.word	0x200017d4

08012a50 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012a50:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8012a52:	4c14      	ldr	r4, [pc, #80]	; (8012aa4 <prvCheckForValidListAndQueue+0x54>)
{
 8012a54:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 8012a56:	f000 fafd 	bl	8013054 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8012a5a:	6825      	ldr	r5, [r4, #0]
 8012a5c:	b125      	cbz	r5, 8012a68 <prvCheckForValidListAndQueue+0x18>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8012a5e:	b003      	add	sp, #12
 8012a60:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8012a64:	f000 bb1c 	b.w	80130a0 <vPortExitCritical>
			vListInitialise( &xActiveTimerList1 );
 8012a68:	4f0f      	ldr	r7, [pc, #60]	; (8012aa8 <prvCheckForValidListAndQueue+0x58>)
			vListInitialise( &xActiveTimerList2 );
 8012a6a:	4e10      	ldr	r6, [pc, #64]	; (8012aac <prvCheckForValidListAndQueue+0x5c>)
			vListInitialise( &xActiveTimerList1 );
 8012a6c:	4638      	mov	r0, r7
 8012a6e:	f7fe fb9d 	bl	80111ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012a72:	4630      	mov	r0, r6
 8012a74:	f7fe fb9a 	bl	80111ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8012a78:	4b0d      	ldr	r3, [pc, #52]	; (8012ab0 <prvCheckForValidListAndQueue+0x60>)
			pxOverflowTimerList = &xActiveTimerList2;
 8012a7a:	4a0e      	ldr	r2, [pc, #56]	; (8012ab4 <prvCheckForValidListAndQueue+0x64>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012a7c:	2110      	movs	r1, #16
 8012a7e:	9500      	str	r5, [sp, #0]
 8012a80:	200a      	movs	r0, #10
			pxCurrentTimerList = &xActiveTimerList1;
 8012a82:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012a84:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012a86:	4b0c      	ldr	r3, [pc, #48]	; (8012ab8 <prvCheckForValidListAndQueue+0x68>)
 8012a88:	4a0c      	ldr	r2, [pc, #48]	; (8012abc <prvCheckForValidListAndQueue+0x6c>)
 8012a8a:	f7fe fcb9 	bl	8011400 <xQueueGenericCreateStatic>
 8012a8e:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 8012a90:	2800      	cmp	r0, #0
 8012a92:	d0e4      	beq.n	8012a5e <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012a94:	490a      	ldr	r1, [pc, #40]	; (8012ac0 <prvCheckForValidListAndQueue+0x70>)
 8012a96:	f7ff f8f1 	bl	8011c7c <vQueueAddToRegistry>
}
 8012a9a:	b003      	add	sp, #12
 8012a9c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8012aa0:	f000 bafe 	b.w	80130a0 <vPortExitCritical>
 8012aa4:	20001938 	.word	0x20001938
 8012aa8:	200018c4 	.word	0x200018c4
 8012aac:	200018d8 	.word	0x200018d8
 8012ab0:	2000181c 	.word	0x2000181c
 8012ab4:	20001820 	.word	0x20001820
 8012ab8:	200018f0 	.word	0x200018f0
 8012abc:	20001824 	.word	0x20001824
 8012ac0:	080269b4 	.word	0x080269b4

08012ac4 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8012ac4:	4291      	cmp	r1, r2
{
 8012ac6:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012ac8:	6100      	str	r0, [r0, #16]
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8012aca:	6041      	str	r1, [r0, #4]
	if( xNextExpiryTime <= xTimeNow )
 8012acc:	d805      	bhi.n	8012ada <prvInsertTimerInActiveList+0x16>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012ace:	1ad2      	subs	r2, r2, r3
 8012ad0:	6983      	ldr	r3, [r0, #24]
 8012ad2:	429a      	cmp	r2, r3
 8012ad4:	d30c      	bcc.n	8012af0 <prvInsertTimerInActiveList+0x2c>
			xProcessTimerNow = pdTRUE;
 8012ad6:	2001      	movs	r0, #1
}
 8012ad8:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012ada:	429a      	cmp	r2, r3
 8012adc:	d201      	bcs.n	8012ae2 <prvInsertTimerInActiveList+0x1e>
 8012ade:	4299      	cmp	r1, r3
 8012ae0:	d2f9      	bcs.n	8012ad6 <prvInsertTimerInActiveList+0x12>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012ae2:	4b07      	ldr	r3, [pc, #28]	; (8012b00 <prvInsertTimerInActiveList+0x3c>)
 8012ae4:	1d01      	adds	r1, r0, #4
 8012ae6:	6818      	ldr	r0, [r3, #0]
 8012ae8:	f7fe fb80 	bl	80111ec <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8012aec:	2000      	movs	r0, #0
}
 8012aee:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8012af0:	4b04      	ldr	r3, [pc, #16]	; (8012b04 <prvInsertTimerInActiveList+0x40>)
 8012af2:	1d01      	adds	r1, r0, #4
 8012af4:	6818      	ldr	r0, [r3, #0]
 8012af6:	f7fe fb79 	bl	80111ec <vListInsert>
 8012afa:	2000      	movs	r0, #0
}
 8012afc:	bd08      	pop	{r3, pc}
 8012afe:	bf00      	nop
 8012b00:	2000181c 	.word	0x2000181c
 8012b04:	20001820 	.word	0x20001820

08012b08 <xTimerCreateTimerTask>:
{
 8012b08:	b530      	push	{r4, r5, lr}
 8012b0a:	b089      	sub	sp, #36	; 0x24
	prvCheckForValidListAndQueue();
 8012b0c:	f7ff ffa0 	bl	8012a50 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8012b10:	4b13      	ldr	r3, [pc, #76]	; (8012b60 <xTimerCreateTimerTask+0x58>)
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	b1cb      	cbz	r3, 8012b4a <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8012b16:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8012b18:	aa07      	add	r2, sp, #28
 8012b1a:	a906      	add	r1, sp, #24
 8012b1c:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8012b1e:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8012b22:	f7ee f859 	bl	8000bd8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8012b26:	9806      	ldr	r0, [sp, #24]
 8012b28:	2102      	movs	r1, #2
 8012b2a:	9d05      	ldr	r5, [sp, #20]
 8012b2c:	4623      	mov	r3, r4
 8012b2e:	9a07      	ldr	r2, [sp, #28]
 8012b30:	9100      	str	r1, [sp, #0]
 8012b32:	490c      	ldr	r1, [pc, #48]	; (8012b64 <xTimerCreateTimerTask+0x5c>)
 8012b34:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8012b38:	480b      	ldr	r0, [pc, #44]	; (8012b68 <xTimerCreateTimerTask+0x60>)
 8012b3a:	f7ff fa57 	bl	8011fec <xTaskCreateStatic>
 8012b3e:	4b0b      	ldr	r3, [pc, #44]	; (8012b6c <xTimerCreateTimerTask+0x64>)
 8012b40:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8012b42:	b110      	cbz	r0, 8012b4a <xTimerCreateTimerTask+0x42>
}
 8012b44:	2001      	movs	r0, #1
 8012b46:	b009      	add	sp, #36	; 0x24
 8012b48:	bd30      	pop	{r4, r5, pc}
 8012b4a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012b4e:	b672      	cpsid	i
 8012b50:	f383 8811 	msr	BASEPRI, r3
 8012b54:	f3bf 8f6f 	isb	sy
 8012b58:	f3bf 8f4f 	dsb	sy
 8012b5c:	b662      	cpsie	i
 8012b5e:	e7fe      	b.n	8012b5e <xTimerCreateTimerTask+0x56>
 8012b60:	20001938 	.word	0x20001938
 8012b64:	080269bc 	.word	0x080269bc
 8012b68:	08012d55 	.word	0x08012d55
 8012b6c:	2000193c 	.word	0x2000193c

08012b70 <xTimerCreate>:
	{
 8012b70:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8012b74:	4681      	mov	r9, r0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8012b76:	2028      	movs	r0, #40	; 0x28
	{
 8012b78:	460d      	mov	r5, r1
 8012b7a:	4616      	mov	r6, r2
 8012b7c:	461f      	mov	r7, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8012b7e:	f000 fbd1 	bl	8013324 <pvPortMalloc>
		if( pxNewTimer != NULL )
 8012b82:	4604      	mov	r4, r0
 8012b84:	b300      	cbz	r0, 8012bc8 <xTimerCreate+0x58>
			pxNewTimer->ucStatus = 0x00;
 8012b86:	2300      	movs	r3, #0
 8012b88:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8012b8c:	b955      	cbnz	r5, 8012ba4 <xTimerCreate+0x34>
 8012b8e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012b92:	b672      	cpsid	i
 8012b94:	f383 8811 	msr	BASEPRI, r3
 8012b98:	f3bf 8f6f 	isb	sy
 8012b9c:	f3bf 8f4f 	dsb	sy
 8012ba0:	b662      	cpsie	i
 8012ba2:	e7fe      	b.n	8012ba2 <xTimerCreate+0x32>
		prvCheckForValidListAndQueue();
 8012ba4:	f7ff ff54 	bl	8012a50 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8012ba8:	9b06      	ldr	r3, [sp, #24]
		pxNewTimer->pcTimerName = pcTimerName;
 8012baa:	f8c4 9000 	str.w	r9, [r4]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8012bae:	1d20      	adds	r0, r4, #4
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8012bb0:	61a5      	str	r5, [r4, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8012bb2:	61e7      	str	r7, [r4, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8012bb4:	6223      	str	r3, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8012bb6:	f7fe fb05 	bl	80111c4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8012bba:	b12e      	cbz	r6, 8012bc8 <xTimerCreate+0x58>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8012bbc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8012bc0:	f043 0304 	orr.w	r3, r3, #4
 8012bc4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	}
 8012bc8:	4620      	mov	r0, r4
 8012bca:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 8012bce:	bf00      	nop

08012bd0 <xTimerCreateStatic>:
	{
 8012bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
			volatile size_t xSize = sizeof( StaticTimer_t );
 8012bd4:	2428      	movs	r4, #40	; 0x28
	{
 8012bd6:	b083      	sub	sp, #12
			volatile size_t xSize = sizeof( StaticTimer_t );
 8012bd8:	9401      	str	r4, [sp, #4]
			configASSERT( xSize == sizeof( Timer_t ) );
 8012bda:	9d01      	ldr	r5, [sp, #4]
 8012bdc:	2d28      	cmp	r5, #40	; 0x28
	{
 8012bde:	e9dd 640a 	ldrd	r6, r4, [sp, #40]	; 0x28
			configASSERT( xSize == sizeof( Timer_t ) );
 8012be2:	d00a      	beq.n	8012bfa <xTimerCreateStatic+0x2a>
 8012be4:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012be8:	b672      	cpsid	i
 8012bea:	f383 8811 	msr	BASEPRI, r3
 8012bee:	f3bf 8f6f 	isb	sy
 8012bf2:	f3bf 8f4f 	dsb	sy
 8012bf6:	b662      	cpsie	i
 8012bf8:	e7fe      	b.n	8012bf8 <xTimerCreateStatic+0x28>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012bfa:	9d01      	ldr	r5, [sp, #4]
		configASSERT( pxTimerBuffer );
 8012bfc:	b954      	cbnz	r4, 8012c14 <xTimerCreateStatic+0x44>
 8012bfe:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012c02:	b672      	cpsid	i
 8012c04:	f383 8811 	msr	BASEPRI, r3
 8012c08:	f3bf 8f6f 	isb	sy
 8012c0c:	f3bf 8f4f 	dsb	sy
 8012c10:	b662      	cpsie	i
 8012c12:	e7fe      	b.n	8012c12 <xTimerCreateStatic+0x42>
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8012c14:	2502      	movs	r5, #2
 8012c16:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8012c1a:	b951      	cbnz	r1, 8012c32 <xTimerCreateStatic+0x62>
 8012c1c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012c20:	b672      	cpsid	i
 8012c22:	f383 8811 	msr	BASEPRI, r3
 8012c26:	f3bf 8f6f 	isb	sy
 8012c2a:	f3bf 8f4f 	dsb	sy
 8012c2e:	b662      	cpsie	i
 8012c30:	e7fe      	b.n	8012c30 <xTimerCreateStatic+0x60>
 8012c32:	4681      	mov	r9, r0
 8012c34:	4698      	mov	r8, r3
 8012c36:	460d      	mov	r5, r1
 8012c38:	4617      	mov	r7, r2
		prvCheckForValidListAndQueue();
 8012c3a:	f7ff ff09 	bl	8012a50 <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
 8012c3e:	f8c4 9000 	str.w	r9, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8012c42:	61a5      	str	r5, [r4, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8012c44:	1d20      	adds	r0, r4, #4
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8012c46:	e9c4 8607 	strd	r8, r6, [r4, #28]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8012c4a:	f7fe fabb 	bl	80111c4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8012c4e:	b12f      	cbz	r7, 8012c5c <xTimerCreateStatic+0x8c>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8012c50:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8012c54:	f043 0304 	orr.w	r3, r3, #4
 8012c58:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	}
 8012c5c:	4620      	mov	r0, r4
 8012c5e:	b003      	add	sp, #12
 8012c60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08012c64 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8012c64:	b1c0      	cbz	r0, 8012c98 <xTimerGenericCommand+0x34>
{
 8012c66:	b570      	push	{r4, r5, r6, lr}
	if( xTimerQueue != NULL )
 8012c68:	4d17      	ldr	r5, [pc, #92]	; (8012cc8 <xTimerGenericCommand+0x64>)
 8012c6a:	4604      	mov	r4, r0
{
 8012c6c:	b084      	sub	sp, #16
	if( xTimerQueue != NULL )
 8012c6e:	6828      	ldr	r0, [r5, #0]
 8012c70:	b180      	cbz	r0, 8012c94 <xTimerGenericCommand+0x30>
 8012c72:	4616      	mov	r6, r2
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012c74:	2905      	cmp	r1, #5
 8012c76:	461a      	mov	r2, r3
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8012c78:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012c7a:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012c7e:	dc16      	bgt.n	8012cae <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012c80:	f7ff fd0a 	bl	8012698 <xTaskGetSchedulerState>
 8012c84:	2802      	cmp	r0, #2
 8012c86:	d018      	beq.n	8012cba <xTimerGenericCommand+0x56>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012c88:	2300      	movs	r3, #0
 8012c8a:	6828      	ldr	r0, [r5, #0]
 8012c8c:	4669      	mov	r1, sp
 8012c8e:	461a      	mov	r2, r3
 8012c90:	f7fe fc40 	bl	8011514 <xQueueGenericSend>
}
 8012c94:	b004      	add	sp, #16
 8012c96:	bd70      	pop	{r4, r5, r6, pc}
 8012c98:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012c9c:	b672      	cpsid	i
 8012c9e:	f383 8811 	msr	BASEPRI, r3
 8012ca2:	f3bf 8f6f 	isb	sy
 8012ca6:	f3bf 8f4f 	dsb	sy
 8012caa:	b662      	cpsie	i
 8012cac:	e7fe      	b.n	8012cac <xTimerGenericCommand+0x48>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012cae:	2300      	movs	r3, #0
 8012cb0:	4669      	mov	r1, sp
 8012cb2:	f7fe fd21 	bl	80116f8 <xQueueGenericSendFromISR>
}
 8012cb6:	b004      	add	sp, #16
 8012cb8:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012cba:	6828      	ldr	r0, [r5, #0]
 8012cbc:	2300      	movs	r3, #0
 8012cbe:	9a08      	ldr	r2, [sp, #32]
 8012cc0:	4669      	mov	r1, sp
 8012cc2:	f7fe fc27 	bl	8011514 <xQueueGenericSend>
 8012cc6:	e7e5      	b.n	8012c94 <xTimerGenericCommand+0x30>
 8012cc8:	20001938 	.word	0x20001938

08012ccc <prvSwitchTimerLists>:
{
 8012ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cd0:	4e1e      	ldr	r6, [pc, #120]	; (8012d4c <prvSwitchTimerLists+0x80>)
 8012cd2:	b082      	sub	sp, #8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012cd4:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012cd8:	e00d      	b.n	8012cf6 <prvSwitchTimerLists+0x2a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012cda:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012cdc:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012cde:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012ce0:	1d25      	adds	r5, r4, #4
 8012ce2:	4628      	mov	r0, r5
 8012ce4:	f7fe fa9c 	bl	8011220 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012ce8:	6a23      	ldr	r3, [r4, #32]
 8012cea:	4620      	mov	r0, r4
 8012cec:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012cee:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8012cf2:	075b      	lsls	r3, r3, #29
 8012cf4:	d40a      	bmi.n	8012d0c <prvSwitchTimerLists+0x40>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012cf6:	6833      	ldr	r3, [r6, #0]
 8012cf8:	681a      	ldr	r2, [r3, #0]
 8012cfa:	2a00      	cmp	r2, #0
 8012cfc:	d1ed      	bne.n	8012cda <prvSwitchTimerLists+0xe>
	pxCurrentTimerList = pxOverflowTimerList;
 8012cfe:	4a14      	ldr	r2, [pc, #80]	; (8012d50 <prvSwitchTimerLists+0x84>)
 8012d00:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012d02:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 8012d04:	6031      	str	r1, [r6, #0]
}
 8012d06:	b002      	add	sp, #8
 8012d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012d0c:	69a0      	ldr	r0, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012d0e:	4629      	mov	r1, r5
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012d10:	2300      	movs	r3, #0
 8012d12:	463a      	mov	r2, r7
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012d14:	183d      	adds	r5, r7, r0
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012d16:	4620      	mov	r0, r4
			if( xReloadTime > xNextExpireTime )
 8012d18:	42af      	cmp	r7, r5
 8012d1a:	d205      	bcs.n	8012d28 <prvSwitchTimerLists+0x5c>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012d1c:	6065      	str	r5, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012d1e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012d20:	6830      	ldr	r0, [r6, #0]
 8012d22:	f7fe fa63 	bl	80111ec <vListInsert>
 8012d26:	e7e6      	b.n	8012cf6 <prvSwitchTimerLists+0x2a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012d28:	f8cd 8000 	str.w	r8, [sp]
 8012d2c:	4619      	mov	r1, r3
 8012d2e:	f7ff ff99 	bl	8012c64 <xTimerGenericCommand>
				configASSERT( xResult );
 8012d32:	2800      	cmp	r0, #0
 8012d34:	d1df      	bne.n	8012cf6 <prvSwitchTimerLists+0x2a>
 8012d36:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012d3a:	b672      	cpsid	i
 8012d3c:	f383 8811 	msr	BASEPRI, r3
 8012d40:	f3bf 8f6f 	isb	sy
 8012d44:	f3bf 8f4f 	dsb	sy
 8012d48:	b662      	cpsie	i
 8012d4a:	e7fe      	b.n	8012d4a <prvSwitchTimerLists+0x7e>
 8012d4c:	2000181c 	.word	0x2000181c
 8012d50:	20001820 	.word	0x20001820

08012d54 <prvTimerTask>:
{
 8012d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d58:	4f82      	ldr	r7, [pc, #520]	; (8012f64 <prvTimerTask+0x210>)
 8012d5a:	b087      	sub	sp, #28
 8012d5c:	4e82      	ldr	r6, [pc, #520]	; (8012f68 <prvTimerTask+0x214>)
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012d5e:	f04f 0900 	mov.w	r9, #0
 8012d62:	4c82      	ldr	r4, [pc, #520]	; (8012f6c <prvTimerTask+0x218>)
 8012d64:	f8df a20c 	ldr.w	sl, [pc, #524]	; 8012f74 <prvTimerTask+0x220>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012d68:	683b      	ldr	r3, [r7, #0]
 8012d6a:	681d      	ldr	r5, [r3, #0]
 8012d6c:	2d00      	cmp	r5, #0
 8012d6e:	f000 8099 	beq.w	8012ea4 <prvTimerTask+0x150>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012d72:	68db      	ldr	r3, [r3, #12]
 8012d74:	681d      	ldr	r5, [r3, #0]
	vTaskSuspendAll();
 8012d76:	f7ff f9f3 	bl	8012160 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8012d7a:	f7ff f9f9 	bl	8012170 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8012d7e:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 8012d80:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 8012d82:	4298      	cmp	r0, r3
 8012d84:	f0c0 8096 	bcc.w	8012eb4 <prvTimerTask+0x160>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012d88:	4285      	cmp	r5, r0
	xLastTime = xTimeNow;
 8012d8a:	6030      	str	r0, [r6, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012d8c:	f240 80a5 	bls.w	8012eda <prvTimerTask+0x186>
 8012d90:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012d92:	eba5 010b 	sub.w	r1, r5, fp
 8012d96:	6820      	ldr	r0, [r4, #0]
 8012d98:	f7fe ff84 	bl	8011ca4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8012d9c:	f7ff faa0 	bl	80122e0 <xTaskResumeAll>
 8012da0:	b938      	cbnz	r0, 8012db2 <prvTimerTask+0x5e>
					portYIELD_WITHIN_API();
 8012da2:	4b73      	ldr	r3, [pc, #460]	; (8012f70 <prvTimerTask+0x21c>)
 8012da4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012da8:	601a      	str	r2, [r3, #0]
 8012daa:	f3bf 8f4f 	dsb	sy
 8012dae:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012db2:	2200      	movs	r2, #0
 8012db4:	a902      	add	r1, sp, #8
 8012db6:	6820      	ldr	r0, [r4, #0]
 8012db8:	f7fe fd70 	bl	801189c <xQueueReceive>
 8012dbc:	2800      	cmp	r0, #0
 8012dbe:	d0d3      	beq.n	8012d68 <prvTimerTask+0x14>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012dc0:	9b02      	ldr	r3, [sp, #8]
 8012dc2:	9d04      	ldr	r5, [sp, #16]
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	da07      	bge.n	8012dd8 <prvTimerTask+0x84>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8012dc8:	9b03      	ldr	r3, [sp, #12]
 8012dca:	4628      	mov	r0, r5
 8012dcc:	9905      	ldr	r1, [sp, #20]
 8012dce:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8012dd0:	9b02      	ldr	r3, [sp, #8]
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	dbed      	blt.n	8012db2 <prvTimerTask+0x5e>
 8012dd6:	9d04      	ldr	r5, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8012dd8:	696b      	ldr	r3, [r5, #20]
 8012dda:	b113      	cbz	r3, 8012de2 <prvTimerTask+0x8e>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012ddc:	1d28      	adds	r0, r5, #4
 8012dde:	f7fe fa1f 	bl	8011220 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8012de2:	f7ff f9c5 	bl	8012170 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8012de6:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 8012de8:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
 8012dea:	4298      	cmp	r0, r3
 8012dec:	d369      	bcc.n	8012ec2 <prvTimerTask+0x16e>
			switch( xMessage.xMessageID )
 8012dee:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 8012df0:	f8c6 8000 	str.w	r8, [r6]
			switch( xMessage.xMessageID )
 8012df4:	2b09      	cmp	r3, #9
 8012df6:	d8dc      	bhi.n	8012db2 <prvTimerTask+0x5e>
 8012df8:	e8df f003 	tbb	[pc, r3]
 8012dfc:	20272727 	.word	0x20272727
 8012e00:	2727050e 	.word	0x2727050e
 8012e04:	0e20      	.short	0x0e20
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8012e06:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8012e0a:	079a      	lsls	r2, r3, #30
 8012e0c:	d57c      	bpl.n	8012f08 <prvTimerTask+0x1b4>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012e0e:	f023 0301 	bic.w	r3, r3, #1
 8012e12:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8012e16:	e7cc      	b.n	8012db2 <prvTimerTask+0x5e>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012e18:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012e1c:	9903      	ldr	r1, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012e1e:	f043 0301 	orr.w	r3, r3, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012e22:	61a9      	str	r1, [r5, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012e24:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012e28:	2900      	cmp	r1, #0
 8012e2a:	f000 8090 	beq.w	8012f4e <prvTimerTask+0x1fa>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8012e2e:	4441      	add	r1, r8
 8012e30:	4628      	mov	r0, r5
 8012e32:	4643      	mov	r3, r8
 8012e34:	4642      	mov	r2, r8
 8012e36:	f7ff fe45 	bl	8012ac4 <prvInsertTimerInActiveList>
 8012e3a:	e7ba      	b.n	8012db2 <prvTimerTask+0x5e>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012e3c:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8012e40:	f023 0301 	bic.w	r3, r3, #1
 8012e44:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8012e48:	e7b3      	b.n	8012db2 <prvTimerTask+0x5e>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012e4a:	f895 c024 	ldrb.w	ip, [r5, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012e4e:	4642      	mov	r2, r8
 8012e50:	9b03      	ldr	r3, [sp, #12]
 8012e52:	4628      	mov	r0, r5
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012e54:	f04c 0c01 	orr.w	ip, ip, #1
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012e58:	69a9      	ldr	r1, [r5, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012e5a:	f885 c024 	strb.w	ip, [r5, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012e5e:	4419      	add	r1, r3
 8012e60:	f7ff fe30 	bl	8012ac4 <prvInsertTimerInActiveList>
 8012e64:	2800      	cmp	r0, #0
 8012e66:	d0a4      	beq.n	8012db2 <prvTimerTask+0x5e>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012e68:	6a2b      	ldr	r3, [r5, #32]
 8012e6a:	4628      	mov	r0, r5
 8012e6c:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012e6e:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8012e72:	0759      	lsls	r1, r3, #29
 8012e74:	d59d      	bpl.n	8012db2 <prvTimerTask+0x5e>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8012e76:	69aa      	ldr	r2, [r5, #24]
 8012e78:	2300      	movs	r3, #0
 8012e7a:	4628      	mov	r0, r5
 8012e7c:	9d03      	ldr	r5, [sp, #12]
 8012e7e:	f8cd 9000 	str.w	r9, [sp]
 8012e82:	4619      	mov	r1, r3
 8012e84:	442a      	add	r2, r5
 8012e86:	f7ff feed 	bl	8012c64 <xTimerGenericCommand>
							configASSERT( xResult );
 8012e8a:	2800      	cmp	r0, #0
 8012e8c:	d191      	bne.n	8012db2 <prvTimerTask+0x5e>
 8012e8e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012e92:	b672      	cpsid	i
 8012e94:	f383 8811 	msr	BASEPRI, r3
 8012e98:	f3bf 8f6f 	isb	sy
 8012e9c:	f3bf 8f4f 	dsb	sy
 8012ea0:	b662      	cpsie	i
 8012ea2:	e7fe      	b.n	8012ea2 <prvTimerTask+0x14e>
	vTaskSuspendAll();
 8012ea4:	f7ff f95c 	bl	8012160 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8012ea8:	f7ff f962 	bl	8012170 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8012eac:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 8012eae:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 8012eb0:	4298      	cmp	r0, r3
 8012eb2:	d209      	bcs.n	8012ec8 <prvTimerTask+0x174>
		prvSwitchTimerLists();
 8012eb4:	f7ff ff0a 	bl	8012ccc <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8012eb8:	f8c6 b000 	str.w	fp, [r6]
			( void ) xTaskResumeAll();
 8012ebc:	f7ff fa10 	bl	80122e0 <xTaskResumeAll>
 8012ec0:	e777      	b.n	8012db2 <prvTimerTask+0x5e>
		prvSwitchTimerLists();
 8012ec2:	f7ff ff03 	bl	8012ccc <prvSwitchTimerLists>
 8012ec6:	e792      	b.n	8012dee <prvTimerTask+0x9a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012ec8:	f8da 3000 	ldr.w	r3, [sl]
	xLastTime = xTimeNow;
 8012ecc:	f8c6 b000 	str.w	fp, [r6]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012ed0:	681a      	ldr	r2, [r3, #0]
 8012ed2:	fab2 f282 	clz	r2, r2
 8012ed6:	0952      	lsrs	r2, r2, #5
 8012ed8:	e75b      	b.n	8012d92 <prvTimerTask+0x3e>
				( void ) xTaskResumeAll();
 8012eda:	f7ff fa01 	bl	80122e0 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012ede:	683b      	ldr	r3, [r7, #0]
 8012ee0:	68db      	ldr	r3, [r3, #12]
 8012ee2:	f8d3 800c 	ldr.w	r8, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012ee6:	f108 0004 	add.w	r0, r8, #4
 8012eea:	f7fe f999 	bl	8011220 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012eee:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
 8012ef2:	0758      	lsls	r0, r3, #29
 8012ef4:	d40c      	bmi.n	8012f10 <prvTimerTask+0x1bc>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012ef6:	f023 0301 	bic.w	r3, r3, #1
 8012efa:	f888 3024 	strb.w	r3, [r8, #36]	; 0x24
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012efe:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8012f02:	4640      	mov	r0, r8
 8012f04:	4798      	blx	r3
 8012f06:	e754      	b.n	8012db2 <prvTimerTask+0x5e>
							vPortFree( pxTimer );
 8012f08:	4628      	mov	r0, r5
 8012f0a:	f000 faa9 	bl	8013460 <vPortFree>
 8012f0e:	e750      	b.n	8012db2 <prvTimerTask+0x5e>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8012f10:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8012f14:	465a      	mov	r2, fp
 8012f16:	462b      	mov	r3, r5
 8012f18:	4640      	mov	r0, r8
 8012f1a:	4429      	add	r1, r5
 8012f1c:	f7ff fdd2 	bl	8012ac4 <prvInsertTimerInActiveList>
 8012f20:	2800      	cmp	r0, #0
 8012f22:	d0ec      	beq.n	8012efe <prvTimerTask+0x1aa>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012f24:	2300      	movs	r3, #0
 8012f26:	f8cd 9000 	str.w	r9, [sp]
 8012f2a:	462a      	mov	r2, r5
 8012f2c:	4640      	mov	r0, r8
 8012f2e:	4619      	mov	r1, r3
 8012f30:	f7ff fe98 	bl	8012c64 <xTimerGenericCommand>
			configASSERT( xResult );
 8012f34:	2800      	cmp	r0, #0
 8012f36:	d1e2      	bne.n	8012efe <prvTimerTask+0x1aa>
 8012f38:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012f3c:	b672      	cpsid	i
 8012f3e:	f383 8811 	msr	BASEPRI, r3
 8012f42:	f3bf 8f6f 	isb	sy
 8012f46:	f3bf 8f4f 	dsb	sy
 8012f4a:	b662      	cpsie	i
 8012f4c:	e7fe      	b.n	8012f4c <prvTimerTask+0x1f8>
 8012f4e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012f52:	b672      	cpsid	i
 8012f54:	f383 8811 	msr	BASEPRI, r3
 8012f58:	f3bf 8f6f 	isb	sy
 8012f5c:	f3bf 8f4f 	dsb	sy
 8012f60:	b662      	cpsie	i
 8012f62:	e7fe      	b.n	8012f62 <prvTimerTask+0x20e>
 8012f64:	2000181c 	.word	0x2000181c
 8012f68:	200018ec 	.word	0x200018ec
 8012f6c:	20001938 	.word	0x20001938
 8012f70:	e000ed04 	.word	0xe000ed04
 8012f74:	20001820 	.word	0x20001820

08012f78 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012f78:	4b10      	ldr	r3, [pc, #64]	; (8012fbc <prvTaskExitError+0x44>)
{
 8012f7a:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8012f7c:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8012f7e:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
 8012f80:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8012f82:	3301      	adds	r3, #1
 8012f84:	d00a      	beq.n	8012f9c <prvTaskExitError+0x24>
 8012f86:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012f8a:	b672      	cpsid	i
 8012f8c:	f383 8811 	msr	BASEPRI, r3
 8012f90:	f3bf 8f6f 	isb	sy
 8012f94:	f3bf 8f4f 	dsb	sy
 8012f98:	b662      	cpsie	i
 8012f9a:	e7fe      	b.n	8012f9a <prvTaskExitError+0x22>
 8012f9c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012fa0:	b672      	cpsid	i
 8012fa2:	f383 8811 	msr	BASEPRI, r3
 8012fa6:	f3bf 8f6f 	isb	sy
 8012faa:	f3bf 8f4f 	dsb	sy
 8012fae:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012fb0:	9b01      	ldr	r3, [sp, #4]
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d0fc      	beq.n	8012fb0 <prvTaskExitError+0x38>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012fb6:	b002      	add	sp, #8
 8012fb8:	4770      	bx	lr
 8012fba:	bf00      	nop
 8012fbc:	200003d0 	.word	0x200003d0

08012fc0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012fc0:	4808      	ldr	r0, [pc, #32]	; (8012fe4 <prvPortStartFirstTask+0x24>)
 8012fc2:	6800      	ldr	r0, [r0, #0]
 8012fc4:	6800      	ldr	r0, [r0, #0]
 8012fc6:	f380 8808 	msr	MSP, r0
 8012fca:	f04f 0000 	mov.w	r0, #0
 8012fce:	f380 8814 	msr	CONTROL, r0
 8012fd2:	b662      	cpsie	i
 8012fd4:	b661      	cpsie	f
 8012fd6:	f3bf 8f4f 	dsb	sy
 8012fda:	f3bf 8f6f 	isb	sy
 8012fde:	df00      	svc	0
 8012fe0:	bf00      	nop
 8012fe2:	0000      	.short	0x0000
 8012fe4:	e000ed08 	.word	0xe000ed08

08012fe8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012fe8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012ff8 <vPortEnableVFP+0x10>
 8012fec:	6801      	ldr	r1, [r0, #0]
 8012fee:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012ff2:	6001      	str	r1, [r0, #0]
 8012ff4:	4770      	bx	lr
 8012ff6:	0000      	.short	0x0000
 8012ff8:	e000ed88 	.word	0xe000ed88

08012ffc <pxPortInitialiseStack>:
{
 8012ffc:	b470      	push	{r4, r5, r6}
 8012ffe:	4603      	mov	r3, r0
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013000:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013004:	4d08      	ldr	r5, [pc, #32]	; (8013028 <pxPortInitialiseStack+0x2c>)
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013006:	f06f 0402 	mvn.w	r4, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801300a:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801300e:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8013012:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013014:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013016:	f843 6c04 	str.w	r6, [r3, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801301a:	f843 5c0c 	str.w	r5, [r3, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801301e:	f843 4c24 	str.w	r4, [r3, #-36]
}
 8013022:	bc70      	pop	{r4, r5, r6}
 8013024:	4770      	bx	lr
 8013026:	bf00      	nop
 8013028:	08012f79 	.word	0x08012f79
 801302c:	00000000 	.word	0x00000000

08013030 <SVC_Handler>:
	__asm volatile (
 8013030:	4b07      	ldr	r3, [pc, #28]	; (8013050 <pxCurrentTCBConst2>)
 8013032:	6819      	ldr	r1, [r3, #0]
 8013034:	6808      	ldr	r0, [r1, #0]
 8013036:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801303a:	f380 8809 	msr	PSP, r0
 801303e:	f3bf 8f6f 	isb	sy
 8013042:	f04f 0000 	mov.w	r0, #0
 8013046:	f380 8811 	msr	BASEPRI, r0
 801304a:	4770      	bx	lr
 801304c:	f3af 8000 	nop.w

08013050 <pxCurrentTCBConst2>:
 8013050:	200016f4 	.word	0x200016f4

08013054 <vPortEnterCritical>:
 8013054:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013058:	b672      	cpsid	i
 801305a:	f383 8811 	msr	BASEPRI, r3
 801305e:	f3bf 8f6f 	isb	sy
 8013062:	f3bf 8f4f 	dsb	sy
 8013066:	b662      	cpsie	i
	uxCriticalNesting++;
 8013068:	4a0b      	ldr	r2, [pc, #44]	; (8013098 <vPortEnterCritical+0x44>)
 801306a:	6813      	ldr	r3, [r2, #0]
 801306c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 801306e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8013070:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8013072:	d000      	beq.n	8013076 <vPortEnterCritical+0x22>
}
 8013074:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013076:	4b09      	ldr	r3, [pc, #36]	; (801309c <vPortEnterCritical+0x48>)
 8013078:	681b      	ldr	r3, [r3, #0]
 801307a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801307e:	d0f9      	beq.n	8013074 <vPortEnterCritical+0x20>
 8013080:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013084:	b672      	cpsid	i
 8013086:	f383 8811 	msr	BASEPRI, r3
 801308a:	f3bf 8f6f 	isb	sy
 801308e:	f3bf 8f4f 	dsb	sy
 8013092:	b662      	cpsie	i
 8013094:	e7fe      	b.n	8013094 <vPortEnterCritical+0x40>
 8013096:	bf00      	nop
 8013098:	200003d0 	.word	0x200003d0
 801309c:	e000ed04 	.word	0xe000ed04

080130a0 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80130a0:	4a09      	ldr	r2, [pc, #36]	; (80130c8 <vPortExitCritical+0x28>)
 80130a2:	6813      	ldr	r3, [r2, #0]
 80130a4:	b953      	cbnz	r3, 80130bc <vPortExitCritical+0x1c>
 80130a6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80130aa:	b672      	cpsid	i
 80130ac:	f383 8811 	msr	BASEPRI, r3
 80130b0:	f3bf 8f6f 	isb	sy
 80130b4:	f3bf 8f4f 	dsb	sy
 80130b8:	b662      	cpsie	i
 80130ba:	e7fe      	b.n	80130ba <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 80130bc:	3b01      	subs	r3, #1
 80130be:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80130c0:	b90b      	cbnz	r3, 80130c6 <vPortExitCritical+0x26>
	__asm volatile
 80130c2:	f383 8811 	msr	BASEPRI, r3
}
 80130c6:	4770      	bx	lr
 80130c8:	200003d0 	.word	0x200003d0
 80130cc:	00000000 	.word	0x00000000

080130d0 <PendSV_Handler>:
	__asm volatile
 80130d0:	f3ef 8009 	mrs	r0, PSP
 80130d4:	f3bf 8f6f 	isb	sy
 80130d8:	4b15      	ldr	r3, [pc, #84]	; (8013130 <pxCurrentTCBConst>)
 80130da:	681a      	ldr	r2, [r3, #0]
 80130dc:	f01e 0f10 	tst.w	lr, #16
 80130e0:	bf08      	it	eq
 80130e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80130e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130ea:	6010      	str	r0, [r2, #0]
 80130ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80130f0:	f04f 0030 	mov.w	r0, #48	; 0x30
 80130f4:	b672      	cpsid	i
 80130f6:	f380 8811 	msr	BASEPRI, r0
 80130fa:	f3bf 8f4f 	dsb	sy
 80130fe:	f3bf 8f6f 	isb	sy
 8013102:	b662      	cpsie	i
 8013104:	f7ff f998 	bl	8012438 <vTaskSwitchContext>
 8013108:	f04f 0000 	mov.w	r0, #0
 801310c:	f380 8811 	msr	BASEPRI, r0
 8013110:	bc09      	pop	{r0, r3}
 8013112:	6819      	ldr	r1, [r3, #0]
 8013114:	6808      	ldr	r0, [r1, #0]
 8013116:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801311a:	f01e 0f10 	tst.w	lr, #16
 801311e:	bf08      	it	eq
 8013120:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013124:	f380 8809 	msr	PSP, r0
 8013128:	f3bf 8f6f 	isb	sy
 801312c:	4770      	bx	lr
 801312e:	bf00      	nop

08013130 <pxCurrentTCBConst>:
 8013130:	200016f4 	.word	0x200016f4

08013134 <SysTick_Handler>:
{
 8013134:	b508      	push	{r3, lr}
	__asm volatile
 8013136:	f04f 0330 	mov.w	r3, #48	; 0x30
 801313a:	b672      	cpsid	i
 801313c:	f383 8811 	msr	BASEPRI, r3
 8013140:	f3bf 8f6f 	isb	sy
 8013144:	f3bf 8f4f 	dsb	sy
 8013148:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 801314a:	f7ff f81f 	bl	801218c <xTaskIncrementTick>
 801314e:	b118      	cbz	r0, 8013158 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8013150:	4b03      	ldr	r3, [pc, #12]	; (8013160 <SysTick_Handler+0x2c>)
 8013152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013156:	601a      	str	r2, [r3, #0]
	__asm volatile
 8013158:	2300      	movs	r3, #0
 801315a:	f383 8811 	msr	BASEPRI, r3
}
 801315e:	bd08      	pop	{r3, pc}
 8013160:	e000ed04 	.word	0xe000ed04

08013164 <vPortSetupTimerInterrupt>:
{
 8013164:	b410      	push	{r4}
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013166:	2300      	movs	r3, #0
 8013168:	4a08      	ldr	r2, [pc, #32]	; (801318c <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801316a:	4c09      	ldr	r4, [pc, #36]	; (8013190 <vPortSetupTimerInterrupt+0x2c>)
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801316c:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801316e:	4809      	ldr	r0, [pc, #36]	; (8013194 <vPortSetupTimerInterrupt+0x30>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013170:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013172:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013174:	4c08      	ldr	r4, [pc, #32]	; (8013198 <vPortSetupTimerInterrupt+0x34>)
 8013176:	6803      	ldr	r3, [r0, #0]
 8013178:	4808      	ldr	r0, [pc, #32]	; (801319c <vPortSetupTimerInterrupt+0x38>)
 801317a:	fba4 4303 	umull	r4, r3, r4, r3
}
 801317e:	f85d 4b04 	ldr.w	r4, [sp], #4
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013182:	099b      	lsrs	r3, r3, #6
 8013184:	3b01      	subs	r3, #1
 8013186:	6003      	str	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8013188:	6011      	str	r1, [r2, #0]
}
 801318a:	4770      	bx	lr
 801318c:	e000e010 	.word	0xe000e010
 8013190:	e000e018 	.word	0xe000e018
 8013194:	20000244 	.word	0x20000244
 8013198:	10624dd3 	.word	0x10624dd3
 801319c:	e000e014 	.word	0xe000e014

080131a0 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80131a0:	4b2d      	ldr	r3, [pc, #180]	; (8013258 <xPortStartScheduler+0xb8>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80131a2:	492e      	ldr	r1, [pc, #184]	; (801325c <xPortStartScheduler+0xbc>)
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80131a4:	482e      	ldr	r0, [pc, #184]	; (8013260 <xPortStartScheduler+0xc0>)
{
 80131a6:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80131a8:	781a      	ldrb	r2, [r3, #0]
{
 80131aa:	b083      	sub	sp, #12
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80131ac:	25ff      	movs	r5, #255	; 0xff
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80131ae:	2407      	movs	r4, #7
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80131b0:	b2d2      	uxtb	r2, r2
 80131b2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80131b4:	701d      	strb	r5, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80131b6:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80131b8:	6004      	str	r4, [r0, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80131ba:	b2db      	uxtb	r3, r3
 80131bc:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80131c0:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80131c4:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80131c8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80131cc:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80131ce:	0611      	lsls	r1, r2, #24
 80131d0:	d510      	bpl.n	80131f4 <xPortStartScheduler+0x54>
 80131d2:	2306      	movs	r3, #6
 80131d4:	e000      	b.n	80131d8 <xPortStartScheduler+0x38>
 80131d6:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80131d8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80131dc:	1e59      	subs	r1, r3, #1
 80131de:	0052      	lsls	r2, r2, #1
 80131e0:	b2d2      	uxtb	r2, r2
 80131e2:	f88d 2003 	strb.w	r2, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80131e6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80131ea:	0612      	lsls	r2, r2, #24
 80131ec:	d4f3      	bmi.n	80131d6 <xPortStartScheduler+0x36>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80131ee:	2b03      	cmp	r3, #3
 80131f0:	6003      	str	r3, [r0, #0]
 80131f2:	d00a      	beq.n	801320a <xPortStartScheduler+0x6a>
	__asm volatile
 80131f4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80131f8:	b672      	cpsid	i
 80131fa:	f383 8811 	msr	BASEPRI, r3
 80131fe:	f3bf 8f6f 	isb	sy
 8013202:	f3bf 8f4f 	dsb	sy
 8013206:	b662      	cpsie	i
 8013208:	e7fe      	b.n	8013208 <xPortStartScheduler+0x68>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801320a:	9901      	ldr	r1, [sp, #4]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801320c:	021b      	lsls	r3, r3, #8
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801320e:	4a15      	ldr	r2, [pc, #84]	; (8013264 <xPortStartScheduler+0xc4>)
	uxCriticalNesting = 0;
 8013210:	2400      	movs	r4, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013212:	b2c9      	uxtb	r1, r1
 8013214:	4d10      	ldr	r5, [pc, #64]	; (8013258 <xPortStartScheduler+0xb8>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013216:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801321a:	6003      	str	r3, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801321c:	7029      	strb	r1, [r5, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801321e:	6813      	ldr	r3, [r2, #0]
 8013220:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013224:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013226:	6813      	ldr	r3, [r2, #0]
 8013228:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801322c:	6013      	str	r3, [r2, #0]
	vPortSetupTimerInterrupt();
 801322e:	f7ff ff99 	bl	8013164 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8013232:	4b0d      	ldr	r3, [pc, #52]	; (8013268 <xPortStartScheduler+0xc8>)
 8013234:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8013236:	f7ff fed7 	bl	8012fe8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801323a:	4a0c      	ldr	r2, [pc, #48]	; (801326c <xPortStartScheduler+0xcc>)
 801323c:	6813      	ldr	r3, [r2, #0]
 801323e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8013242:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8013244:	f7ff febc 	bl	8012fc0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8013248:	f7ff f8f6 	bl	8012438 <vTaskSwitchContext>
	prvTaskExitError();
 801324c:	f7ff fe94 	bl	8012f78 <prvTaskExitError>
}
 8013250:	4620      	mov	r0, r4
 8013252:	b003      	add	sp, #12
 8013254:	bd30      	pop	{r4, r5, pc}
 8013256:	bf00      	nop
 8013258:	e000e400 	.word	0xe000e400
 801325c:	20001940 	.word	0x20001940
 8013260:	20001944 	.word	0x20001944
 8013264:	e000ed20 	.word	0xe000ed20
 8013268:	200003d0 	.word	0x200003d0
 801326c:	e000ef34 	.word	0xe000ef34

08013270 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8013270:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013274:	2b0f      	cmp	r3, #15
 8013276:	d910      	bls.n	801329a <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8013278:	4912      	ldr	r1, [pc, #72]	; (80132c4 <vPortValidateInterruptPriority+0x54>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801327a:	4a13      	ldr	r2, [pc, #76]	; (80132c8 <vPortValidateInterruptPriority+0x58>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801327c:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801327e:	7812      	ldrb	r2, [r2, #0]
 8013280:	429a      	cmp	r2, r3
 8013282:	d90a      	bls.n	801329a <vPortValidateInterruptPriority+0x2a>
 8013284:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013288:	b672      	cpsid	i
 801328a:	f383 8811 	msr	BASEPRI, r3
 801328e:	f3bf 8f6f 	isb	sy
 8013292:	f3bf 8f4f 	dsb	sy
 8013296:	b662      	cpsie	i
 8013298:	e7fe      	b.n	8013298 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801329a:	4b0c      	ldr	r3, [pc, #48]	; (80132cc <vPortValidateInterruptPriority+0x5c>)
 801329c:	4a0c      	ldr	r2, [pc, #48]	; (80132d0 <vPortValidateInterruptPriority+0x60>)
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	6812      	ldr	r2, [r2, #0]
 80132a2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80132a6:	4293      	cmp	r3, r2
 80132a8:	d90a      	bls.n	80132c0 <vPortValidateInterruptPriority+0x50>
 80132aa:	f04f 0330 	mov.w	r3, #48	; 0x30
 80132ae:	b672      	cpsid	i
 80132b0:	f383 8811 	msr	BASEPRI, r3
 80132b4:	f3bf 8f6f 	isb	sy
 80132b8:	f3bf 8f4f 	dsb	sy
 80132bc:	b662      	cpsie	i
 80132be:	e7fe      	b.n	80132be <vPortValidateInterruptPriority+0x4e>
	}
 80132c0:	4770      	bx	lr
 80132c2:	bf00      	nop
 80132c4:	e000e3f0 	.word	0xe000e3f0
 80132c8:	20001940 	.word	0x20001940
 80132cc:	e000ed0c 	.word	0xe000ed0c
 80132d0:	20001944 	.word	0x20001944

080132d4 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80132d4:	4b11      	ldr	r3, [pc, #68]	; (801331c <prvInsertBlockIntoFreeList+0x48>)
{
 80132d6:	b430      	push	{r4, r5}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80132d8:	681a      	ldr	r2, [r3, #0]
 80132da:	4282      	cmp	r2, r0
 80132dc:	d201      	bcs.n	80132e2 <prvInsertBlockIntoFreeList+0xe>
 80132de:	4613      	mov	r3, r2
 80132e0:	e7fa      	b.n	80132d8 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80132e2:	685c      	ldr	r4, [r3, #4]
 80132e4:	1919      	adds	r1, r3, r4
 80132e6:	4288      	cmp	r0, r1
 80132e8:	d103      	bne.n	80132f2 <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80132ea:	6841      	ldr	r1, [r0, #4]
 80132ec:	4618      	mov	r0, r3
 80132ee:	4421      	add	r1, r4
 80132f0:	6059      	str	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80132f2:	6844      	ldr	r4, [r0, #4]
 80132f4:	1901      	adds	r1, r0, r4
 80132f6:	428a      	cmp	r2, r1
 80132f8:	d109      	bne.n	801330e <prvInsertBlockIntoFreeList+0x3a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80132fa:	4909      	ldr	r1, [pc, #36]	; (8013320 <prvInsertBlockIntoFreeList+0x4c>)
 80132fc:	6809      	ldr	r1, [r1, #0]
 80132fe:	428a      	cmp	r2, r1
 8013300:	d005      	beq.n	801330e <prvInsertBlockIntoFreeList+0x3a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013302:	e9d2 5100 	ldrd	r5, r1, [r2]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013306:	4421      	add	r1, r4
 8013308:	e9c0 5100 	strd	r5, r1, [r0]
 801330c:	e000      	b.n	8013310 <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801330e:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013310:	4298      	cmp	r0, r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013312:	bc30      	pop	{r4, r5}
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013314:	bf18      	it	ne
 8013316:	6018      	strne	r0, [r3, #0]
}
 8013318:	4770      	bx	lr
 801331a:	bf00      	nop
 801331c:	20021958 	.word	0x20021958
 8013320:	20001948 	.word	0x20001948

08013324 <pvPortMalloc>:
{
 8013324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013328:	4604      	mov	r4, r0
	vTaskSuspendAll();
 801332a:	f7fe ff19 	bl	8012160 <vTaskSuspendAll>
		if( pxEnd == NULL )
 801332e:	4845      	ldr	r0, [pc, #276]	; (8013444 <pvPortMalloc+0x120>)
 8013330:	6803      	ldr	r3, [r0, #0]
 8013332:	2b00      	cmp	r3, #0
 8013334:	d037      	beq.n	80133a6 <pvPortMalloc+0x82>
 8013336:	4b44      	ldr	r3, [pc, #272]	; (8013448 <pvPortMalloc+0x124>)
 8013338:	681f      	ldr	r7, [r3, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801333a:	423c      	tst	r4, r7
 801333c:	d156      	bne.n	80133ec <pvPortMalloc+0xc8>
			if( xWantedSize > 0 )
 801333e:	2c00      	cmp	r4, #0
 8013340:	d054      	beq.n	80133ec <pvPortMalloc+0xc8>
				xWantedSize += xHeapStructSize;
 8013342:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013346:	0759      	lsls	r1, r3, #29
 8013348:	d002      	beq.n	8013350 <pvPortMalloc+0x2c>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801334a:	f023 0307 	bic.w	r3, r3, #7
 801334e:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013350:	2b00      	cmp	r3, #0
 8013352:	d04b      	beq.n	80133ec <pvPortMalloc+0xc8>
 8013354:	f8df 8104 	ldr.w	r8, [pc, #260]	; 801345c <pvPortMalloc+0x138>
 8013358:	f8d8 6000 	ldr.w	r6, [r8]
 801335c:	429e      	cmp	r6, r3
 801335e:	d345      	bcc.n	80133ec <pvPortMalloc+0xc8>
				pxBlock = xStart.pxNextFreeBlock;
 8013360:	493a      	ldr	r1, [pc, #232]	; (801344c <pvPortMalloc+0x128>)
 8013362:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013364:	e003      	b.n	801336e <pvPortMalloc+0x4a>
 8013366:	6825      	ldr	r5, [r4, #0]
 8013368:	b125      	cbz	r5, 8013374 <pvPortMalloc+0x50>
 801336a:	4621      	mov	r1, r4
 801336c:	462c      	mov	r4, r5
 801336e:	6862      	ldr	r2, [r4, #4]
 8013370:	429a      	cmp	r2, r3
 8013372:	d3f8      	bcc.n	8013366 <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 8013374:	6800      	ldr	r0, [r0, #0]
 8013376:	42a0      	cmp	r0, r4
 8013378:	d038      	beq.n	80133ec <pvPortMalloc+0xc8>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801337a:	eba2 0c03 	sub.w	ip, r2, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801337e:	6820      	ldr	r0, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013380:	680d      	ldr	r5, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013382:	f1bc 0f10 	cmp.w	ip, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013386:	6008      	str	r0, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013388:	d93e      	bls.n	8013408 <pvPortMalloc+0xe4>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801338a:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801338c:	0742      	lsls	r2, r0, #29
 801338e:	d035      	beq.n	80133fc <pvPortMalloc+0xd8>
 8013390:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013394:	b672      	cpsid	i
 8013396:	f383 8811 	msr	BASEPRI, r3
 801339a:	f3bf 8f6f 	isb	sy
 801339e:	f3bf 8f4f 	dsb	sy
 80133a2:	b662      	cpsie	i
 80133a4:	e7fe      	b.n	80133a4 <pvPortMalloc+0x80>
	uxAddress = ( size_t ) ucHeap;
 80133a6:	4b2a      	ldr	r3, [pc, #168]	; (8013450 <pvPortMalloc+0x12c>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80133a8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
	uxAddress -= xHeapStructSize;
 80133ac:	4a29      	ldr	r2, [pc, #164]	; (8013454 <pvPortMalloc+0x130>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80133ae:	075d      	lsls	r5, r3, #29
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80133b0:	4f29      	ldr	r7, [pc, #164]	; (8013458 <pvPortMalloc+0x134>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80133b2:	f022 0207 	bic.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 80133b6:	f04f 0500 	mov.w	r5, #0
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80133ba:	bf18      	it	ne
 80133bc:	3307      	addne	r3, #7
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80133be:	f8df c09c 	ldr.w	ip, [pc, #156]	; 801345c <pvPortMalloc+0x138>
	pxEnd = ( void * ) uxAddress;
 80133c2:	6002      	str	r2, [r0, #0]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80133c4:	bf18      	it	ne
 80133c6:	f023 0307 	bicne.w	r3, r3, #7
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80133ca:	4619      	mov	r1, r3
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80133cc:	1ad3      	subs	r3, r2, r3
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80133ce:	603b      	str	r3, [r7, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80133d0:	4637      	mov	r7, r6
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80133d2:	f8cc 3000 	str.w	r3, [ip]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80133d6:	423c      	tst	r4, r7
	pxEnd->pxNextFreeBlock = NULL;
 80133d8:	e9c2 5500 	strd	r5, r5, [r2]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80133dc:	e9c1 2300 	strd	r2, r3, [r1]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80133e0:	4b1a      	ldr	r3, [pc, #104]	; (801344c <pvPortMalloc+0x128>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80133e2:	4a19      	ldr	r2, [pc, #100]	; (8013448 <pvPortMalloc+0x124>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80133e4:	e9c3 1500 	strd	r1, r5, [r3]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80133e8:	6016      	str	r6, [r2, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80133ea:	d0a8      	beq.n	801333e <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
 80133ec:	f7fe ff78 	bl	80122e0 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 80133f0:	2500      	movs	r5, #0
 80133f2:	f7ed fbe1 	bl	8000bb8 <vApplicationMallocFailedHook>
}
 80133f6:	4628      	mov	r0, r5
 80133f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80133fc:	f8c0 c004 	str.w	ip, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013400:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013402:	f7ff ff67 	bl	80132d4 <prvInsertBlockIntoFreeList>
 8013406:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013408:	4913      	ldr	r1, [pc, #76]	; (8013458 <pvPortMalloc+0x134>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801340a:	1ab6      	subs	r6, r6, r2
					pxBlock->pxNextFreeBlock = NULL;
 801340c:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801340e:	433a      	orrs	r2, r7
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013410:	6808      	ldr	r0, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013412:	3508      	adds	r5, #8
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013414:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013418:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 801341a:	e9c4 3200 	strd	r3, r2, [r4]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801341e:	bf38      	it	cc
 8013420:	600e      	strcc	r6, [r1, #0]
	( void ) xTaskResumeAll();
 8013422:	f7fe ff5d 	bl	80122e0 <xTaskResumeAll>
		if( pvReturn == NULL )
 8013426:	2d00      	cmp	r5, #0
 8013428:	d0e2      	beq.n	80133f0 <pvPortMalloc+0xcc>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801342a:	076b      	lsls	r3, r5, #29
 801342c:	d0e3      	beq.n	80133f6 <pvPortMalloc+0xd2>
 801342e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013432:	b672      	cpsid	i
 8013434:	f383 8811 	msr	BASEPRI, r3
 8013438:	f3bf 8f6f 	isb	sy
 801343c:	f3bf 8f4f 	dsb	sy
 8013440:	b662      	cpsie	i
 8013442:	e7fe      	b.n	8013442 <pvPortMalloc+0x11e>
 8013444:	20001948 	.word	0x20001948
 8013448:	2002194c 	.word	0x2002194c
 801344c:	20021958 	.word	0x20021958
 8013450:	2000194c 	.word	0x2000194c
 8013454:	20021944 	.word	0x20021944
 8013458:	20021954 	.word	0x20021954
 801345c:	20021950 	.word	0x20021950

08013460 <vPortFree>:
	if( pv != NULL )
 8013460:	b1f0      	cbz	r0, 80134a0 <vPortFree+0x40>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013462:	4a1b      	ldr	r2, [pc, #108]	; (80134d0 <vPortFree+0x70>)
 8013464:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8013468:	6812      	ldr	r2, [r2, #0]
 801346a:	4213      	tst	r3, r2
 801346c:	d10a      	bne.n	8013484 <vPortFree+0x24>
 801346e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013472:	b672      	cpsid	i
 8013474:	f383 8811 	msr	BASEPRI, r3
 8013478:	f3bf 8f6f 	isb	sy
 801347c:	f3bf 8f4f 	dsb	sy
 8013480:	b662      	cpsie	i
 8013482:	e7fe      	b.n	8013482 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013484:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8013488:	b159      	cbz	r1, 80134a2 <vPortFree+0x42>
 801348a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801348e:	b672      	cpsid	i
 8013490:	f383 8811 	msr	BASEPRI, r3
 8013494:	f3bf 8f6f 	isb	sy
 8013498:	f3bf 8f4f 	dsb	sy
 801349c:	b662      	cpsie	i
 801349e:	e7fe      	b.n	801349e <vPortFree+0x3e>
 80134a0:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80134a2:	ea23 0302 	bic.w	r3, r3, r2
{
 80134a6:	b510      	push	{r4, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80134a8:	f840 3c04 	str.w	r3, [r0, #-4]
 80134ac:	4604      	mov	r4, r0
				vTaskSuspendAll();
 80134ae:	f7fe fe57 	bl	8012160 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80134b2:	4a08      	ldr	r2, [pc, #32]	; (80134d4 <vPortFree+0x74>)
 80134b4:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80134b8:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80134bc:	6811      	ldr	r1, [r2, #0]
 80134be:	440b      	add	r3, r1
 80134c0:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80134c2:	f7ff ff07 	bl	80132d4 <prvInsertBlockIntoFreeList>
}
 80134c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80134ca:	f7fe bf09 	b.w	80122e0 <xTaskResumeAll>
 80134ce:	bf00      	nop
 80134d0:	2002194c 	.word	0x2002194c
 80134d4:	20021950 	.word	0x20021950

080134d8 <pbuf_free_int>:
 */
static void
pbuf_free_int(void *p)
{
  struct pbuf *q = (struct pbuf *)p;
  pbuf_free(q);
 80134d8:	f003 b91e 	b.w	8016718 <pbuf_free>

080134dc <tcpip_thread>:
{
 80134dc:	b580      	push	{r7, lr}
  LOCK_TCPIP_CORE();
 80134de:	483a      	ldr	r0, [pc, #232]	; (80135c8 <tcpip_thread+0xec>)
{
 80134e0:	b082      	sub	sp, #8
  LOCK_TCPIP_CORE();
 80134e2:	f00b febd 	bl	801f260 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80134e6:	4b39      	ldr	r3, [pc, #228]	; (80135cc <tcpip_thread+0xf0>)
 80134e8:	681b      	ldr	r3, [r3, #0]
 80134ea:	b113      	cbz	r3, 80134f2 <tcpip_thread+0x16>
    tcpip_init_done(tcpip_init_done_arg);
 80134ec:	4a38      	ldr	r2, [pc, #224]	; (80135d0 <tcpip_thread+0xf4>)
 80134ee:	6810      	ldr	r0, [r2, #0]
 80134f0:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 80134f2:	4d35      	ldr	r5, [pc, #212]	; (80135c8 <tcpip_thread+0xec>)
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80134f4:	4e37      	ldr	r6, [pc, #220]	; (80135d4 <tcpip_thread+0xf8>)
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80134f6:	4f38      	ldr	r7, [pc, #224]	; (80135d8 <tcpip_thread+0xfc>)
 80134f8:	e010      	b.n	801351c <tcpip_thread+0x40>
  } else if (sleeptime == 0) {
 80134fa:	b168      	cbz	r0, 8013518 <tcpip_thread+0x3c>
  UNLOCK_TCPIP_CORE();
 80134fc:	4628      	mov	r0, r5
 80134fe:	f00b feb5 	bl	801f26c <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8013502:	4622      	mov	r2, r4
 8013504:	a901      	add	r1, sp, #4
 8013506:	4630      	mov	r0, r6
 8013508:	f00b fe50 	bl	801f1ac <sys_arch_mbox_fetch>
 801350c:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 801350e:	4628      	mov	r0, r5
 8013510:	f00b fea6 	bl	801f260 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8013514:	3401      	adds	r4, #1
 8013516:	d111      	bne.n	801353c <tcpip_thread+0x60>
    sys_check_timeouts();
 8013518:	f008 f87e 	bl	801b618 <sys_check_timeouts>
  sleeptime = sys_timeouts_sleeptime();
 801351c:	f008 f8a0 	bl	801b660 <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8013520:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 8013522:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8013524:	d1e9      	bne.n	80134fa <tcpip_thread+0x1e>
    UNLOCK_TCPIP_CORE();
 8013526:	4628      	mov	r0, r5
 8013528:	f00b fea0 	bl	801f26c <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801352c:	2200      	movs	r2, #0
 801352e:	a901      	add	r1, sp, #4
 8013530:	4630      	mov	r0, r6
 8013532:	f00b fe3b 	bl	801f1ac <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8013536:	4628      	mov	r0, r5
 8013538:	f00b fe92 	bl	801f260 <sys_mutex_lock>
    if (msg == NULL) {
 801353c:	9c01      	ldr	r4, [sp, #4]
 801353e:	2c00      	cmp	r4, #0
 8013540:	d033      	beq.n	80135aa <tcpip_thread+0xce>
  switch (msg->type) {
 8013542:	7823      	ldrb	r3, [r4, #0]
 8013544:	2b04      	cmp	r3, #4
 8013546:	d837      	bhi.n	80135b8 <tcpip_thread+0xdc>
 8013548:	e8df f003 	tbb	[pc, r3]
 801354c:	070f1822 	.word	0x070f1822
 8013550:	03          	.byte	0x03
 8013551:	00          	.byte	0x00
      msg->msg.cb.function(msg->msg.cb.ctx);
 8013552:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8013556:	4798      	blx	r3
 8013558:	e7e0      	b.n	801351c <tcpip_thread+0x40>
      msg->msg.cb.function(msg->msg.cb.ctx);
 801355a:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 801355e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8013560:	4621      	mov	r1, r4
 8013562:	2009      	movs	r0, #9
 8013564:	f002 fdfe 	bl	8016164 <memp_free>
 8013568:	e7d8      	b.n	801351c <tcpip_thread+0x40>
      sys_untimeout(msg->msg.tmo.h, msg->msg.tmo.arg);
 801356a:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 801356e:	f008 f835 	bl	801b5dc <sys_untimeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8013572:	4621      	mov	r1, r4
 8013574:	2009      	movs	r0, #9
 8013576:	f002 fdf5 	bl	8016164 <memp_free>
 801357a:	e7cf      	b.n	801351c <tcpip_thread+0x40>
      sys_timeout(msg->msg.tmo.msecs, msg->msg.tmo.h, msg->msg.tmo.arg);
 801357c:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8013580:	6860      	ldr	r0, [r4, #4]
 8013582:	f007 fff3 	bl	801b56c <sys_timeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8013586:	4621      	mov	r1, r4
 8013588:	2009      	movs	r0, #9
 801358a:	f002 fdeb 	bl	8016164 <memp_free>
 801358e:	e7c5      	b.n	801351c <tcpip_thread+0x40>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8013590:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8013594:	6860      	ldr	r0, [r4, #4]
 8013596:	4798      	blx	r3
 8013598:	b110      	cbz	r0, 80135a0 <tcpip_thread+0xc4>
        pbuf_free(msg->msg.inp.p);
 801359a:	6860      	ldr	r0, [r4, #4]
 801359c:	f003 f8bc 	bl	8016718 <pbuf_free>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80135a0:	4621      	mov	r1, r4
 80135a2:	200a      	movs	r0, #10
 80135a4:	f002 fdde 	bl	8016164 <memp_free>
 80135a8:	e7b8      	b.n	801351c <tcpip_thread+0x40>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80135aa:	463b      	mov	r3, r7
 80135ac:	2291      	movs	r2, #145	; 0x91
 80135ae:	490b      	ldr	r1, [pc, #44]	; (80135dc <tcpip_thread+0x100>)
 80135b0:	480b      	ldr	r0, [pc, #44]	; (80135e0 <tcpip_thread+0x104>)
 80135b2:	f00d fa09 	bl	80209c8 <iprintf>
      continue;
 80135b6:	e7b1      	b.n	801351c <tcpip_thread+0x40>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80135b8:	463b      	mov	r3, r7
 80135ba:	22cf      	movs	r2, #207	; 0xcf
 80135bc:	4907      	ldr	r1, [pc, #28]	; (80135dc <tcpip_thread+0x100>)
 80135be:	4808      	ldr	r0, [pc, #32]	; (80135e0 <tcpip_thread+0x104>)
 80135c0:	f00d fa02 	bl	80209c8 <iprintf>
 80135c4:	e7aa      	b.n	801351c <tcpip_thread+0x40>
 80135c6:	bf00      	nop
 80135c8:	20026a68 	.word	0x20026a68
 80135cc:	20021960 	.word	0x20021960
 80135d0:	20021964 	.word	0x20021964
 80135d4:	20021968 	.word	0x20021968
 80135d8:	08026a2c 	.word	0x08026a2c
 80135dc:	08026a5c 	.word	0x08026a5c
 80135e0:	0802697c 	.word	0x0802697c

080135e4 <tcpip_inpkt>:
{
 80135e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135e6:	4607      	mov	r7, r0
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80135e8:	4814      	ldr	r0, [pc, #80]	; (801363c <tcpip_inpkt+0x58>)
{
 80135ea:	460e      	mov	r6, r1
 80135ec:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80135ee:	f00b fdff 	bl	801f1f0 <sys_mbox_valid>
 80135f2:	b188      	cbz	r0, 8013618 <tcpip_inpkt+0x34>
  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80135f4:	22fe      	movs	r2, #254	; 0xfe
 80135f6:	4912      	ldr	r1, [pc, #72]	; (8013640 <tcpip_inpkt+0x5c>)
 80135f8:	200a      	movs	r0, #10
 80135fa:	f002 fd8f 	bl	801611c <memp_malloc_fn>
  if (msg == NULL) {
 80135fe:	4604      	mov	r4, r0
 8013600:	b1c0      	cbz	r0, 8013634 <tcpip_inpkt+0x50>
  msg->type = TCPIP_MSG_INPKT;
 8013602:	2300      	movs	r3, #0
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8013604:	4601      	mov	r1, r0
  msg->msg.inp.input_fn = input_fn;
 8013606:	60c5      	str	r5, [r0, #12]
  msg->type = TCPIP_MSG_INPKT;
 8013608:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.netif = inp;
 801360a:	e9c0 7601 	strd	r7, r6, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801360e:	480b      	ldr	r0, [pc, #44]	; (801363c <tcpip_inpkt+0x58>)
 8013610:	f00b fdba 	bl	801f188 <sys_mbox_trypost>
 8013614:	b938      	cbnz	r0, 8013626 <tcpip_inpkt+0x42>
}
 8013616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8013618:	4b09      	ldr	r3, [pc, #36]	; (8013640 <tcpip_inpkt+0x5c>)
 801361a:	22fc      	movs	r2, #252	; 0xfc
 801361c:	4909      	ldr	r1, [pc, #36]	; (8013644 <tcpip_inpkt+0x60>)
 801361e:	480a      	ldr	r0, [pc, #40]	; (8013648 <tcpip_inpkt+0x64>)
 8013620:	f00d f9d2 	bl	80209c8 <iprintf>
 8013624:	e7e6      	b.n	80135f4 <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8013626:	4621      	mov	r1, r4
 8013628:	200a      	movs	r0, #10
 801362a:	f002 fd9b 	bl	8016164 <memp_free>
    return ERR_MEM;
 801362e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8013632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_MEM;
 8013634:	f04f 30ff 	mov.w	r0, #4294967295
}
 8013638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801363a:	bf00      	nop
 801363c:	20021968 	.word	0x20021968
 8013640:	08026a2c 	.word	0x08026a2c
 8013644:	08026a1c 	.word	0x08026a1c
 8013648:	0802697c 	.word	0x0802697c

0801364c <tcpip_input>:
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801364c:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
 8013650:	f013 0f18 	tst.w	r3, #24
 8013654:	d102      	bne.n	801365c <tcpip_input+0x10>
    return tcpip_inpkt(p, inp, ip_input);
 8013656:	4a03      	ldr	r2, [pc, #12]	; (8013664 <tcpip_input+0x18>)
 8013658:	f7ff bfc4 	b.w	80135e4 <tcpip_inpkt>
    return tcpip_inpkt(p, inp, ethernet_input);
 801365c:	4a02      	ldr	r2, [pc, #8]	; (8013668 <tcpip_input+0x1c>)
 801365e:	f7ff bfc1 	b.w	80135e4 <tcpip_inpkt>
 8013662:	bf00      	nop
 8013664:	0801e12d 	.word	0x0801e12d
 8013668:	0801f001 	.word	0x0801f001

0801366c <tcpip_try_callback>:
{
 801366c:	b570      	push	{r4, r5, r6, lr}
 801366e:	4606      	mov	r6, r0
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8013670:	4814      	ldr	r0, [pc, #80]	; (80136c4 <tcpip_try_callback+0x58>)
{
 8013672:	460d      	mov	r5, r1
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8013674:	f00b fdbc 	bl	801f1f0 <sys_mbox_valid>
 8013678:	b188      	cbz	r0, 801369e <tcpip_try_callback+0x32>
  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 801367a:	f240 125f 	movw	r2, #351	; 0x15f
 801367e:	4912      	ldr	r1, [pc, #72]	; (80136c8 <tcpip_try_callback+0x5c>)
 8013680:	2009      	movs	r0, #9
 8013682:	f002 fd4b 	bl	801611c <memp_malloc_fn>
  if (msg == NULL) {
 8013686:	4604      	mov	r4, r0
 8013688:	b1c0      	cbz	r0, 80136bc <tcpip_try_callback+0x50>
  msg->type = TCPIP_MSG_CALLBACK;
 801368a:	2303      	movs	r3, #3
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801368c:	4601      	mov	r1, r0
  msg->msg.cb.ctx = ctx;
 801368e:	e9c0 6501 	strd	r6, r5, [r0, #4]
  msg->type = TCPIP_MSG_CALLBACK;
 8013692:	7003      	strb	r3, [r0, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8013694:	480b      	ldr	r0, [pc, #44]	; (80136c4 <tcpip_try_callback+0x58>)
 8013696:	f00b fd77 	bl	801f188 <sys_mbox_trypost>
 801369a:	b940      	cbnz	r0, 80136ae <tcpip_try_callback+0x42>
}
 801369c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801369e:	4b0a      	ldr	r3, [pc, #40]	; (80136c8 <tcpip_try_callback+0x5c>)
 80136a0:	f240 125d 	movw	r2, #349	; 0x15d
 80136a4:	4909      	ldr	r1, [pc, #36]	; (80136cc <tcpip_try_callback+0x60>)
 80136a6:	480a      	ldr	r0, [pc, #40]	; (80136d0 <tcpip_try_callback+0x64>)
 80136a8:	f00d f98e 	bl	80209c8 <iprintf>
 80136ac:	e7e5      	b.n	801367a <tcpip_try_callback+0xe>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80136ae:	4621      	mov	r1, r4
 80136b0:	2009      	movs	r0, #9
 80136b2:	f002 fd57 	bl	8016164 <memp_free>
    return ERR_MEM;
 80136b6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80136ba:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 80136bc:	f04f 30ff 	mov.w	r0, #4294967295
}
 80136c0:	bd70      	pop	{r4, r5, r6, pc}
 80136c2:	bf00      	nop
 80136c4:	20021968 	.word	0x20021968
 80136c8:	08026a2c 	.word	0x08026a2c
 80136cc:	08026a1c 	.word	0x08026a1c
 80136d0:	0802697c 	.word	0x0802697c

080136d4 <tcpip_init>:
{
 80136d4:	b530      	push	{r4, r5, lr}
 80136d6:	b083      	sub	sp, #12
 80136d8:	4605      	mov	r5, r0
 80136da:	460c      	mov	r4, r1
  lwip_init();
 80136dc:	f001 ff9c 	bl	8015618 <lwip_init>
  tcpip_init_done = initfunc;
 80136e0:	4a12      	ldr	r2, [pc, #72]	; (801372c <tcpip_init+0x58>)
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80136e2:	2106      	movs	r1, #6
  tcpip_init_done_arg = arg;
 80136e4:	4b12      	ldr	r3, [pc, #72]	; (8013730 <tcpip_init+0x5c>)
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80136e6:	4813      	ldr	r0, [pc, #76]	; (8013734 <tcpip_init+0x60>)
  tcpip_init_done = initfunc;
 80136e8:	6015      	str	r5, [r2, #0]
  tcpip_init_done_arg = arg;
 80136ea:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80136ec:	f00b fd28 	bl	801f140 <sys_mbox_new>
 80136f0:	b9a0      	cbnz	r0, 801371c <tcpip_init+0x48>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80136f2:	4811      	ldr	r0, [pc, #68]	; (8013738 <tcpip_init+0x64>)
 80136f4:	f00b fd8e 	bl	801f214 <sys_mutex_new>
 80136f8:	b130      	cbz	r0, 8013708 <tcpip_init+0x34>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80136fa:	4b10      	ldr	r3, [pc, #64]	; (801373c <tcpip_init+0x68>)
 80136fc:	f240 2265 	movw	r2, #613	; 0x265
 8013700:	490f      	ldr	r1, [pc, #60]	; (8013740 <tcpip_init+0x6c>)
 8013702:	4810      	ldr	r0, [pc, #64]	; (8013744 <tcpip_init+0x70>)
 8013704:	f00d f960 	bl	80209c8 <iprintf>
  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8013708:	2200      	movs	r2, #0
 801370a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801370e:	490e      	ldr	r1, [pc, #56]	; (8013748 <tcpip_init+0x74>)
 8013710:	9200      	str	r2, [sp, #0]
 8013712:	480e      	ldr	r0, [pc, #56]	; (801374c <tcpip_init+0x78>)
 8013714:	f00b fdae 	bl	801f274 <sys_thread_new>
}
 8013718:	b003      	add	sp, #12
 801371a:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 801371c:	4b07      	ldr	r3, [pc, #28]	; (801373c <tcpip_init+0x68>)
 801371e:	f240 2261 	movw	r2, #609	; 0x261
 8013722:	490b      	ldr	r1, [pc, #44]	; (8013750 <tcpip_init+0x7c>)
 8013724:	4807      	ldr	r0, [pc, #28]	; (8013744 <tcpip_init+0x70>)
 8013726:	f00d f94f 	bl	80209c8 <iprintf>
 801372a:	e7e2      	b.n	80136f2 <tcpip_init+0x1e>
 801372c:	20021960 	.word	0x20021960
 8013730:	20021964 	.word	0x20021964
 8013734:	20021968 	.word	0x20021968
 8013738:	20026a68 	.word	0x20026a68
 801373c:	08026a2c 	.word	0x08026a2c
 8013740:	080269e8 	.word	0x080269e8
 8013744:	0802697c 	.word	0x0802697c
 8013748:	080134dd 	.word	0x080134dd
 801374c:	08026a0c 	.word	0x08026a0c
 8013750:	080269c4 	.word	0x080269c4

08013754 <pbuf_free_callback>:
 * @return ERR_OK if callback could be enqueued, an err_t if not
 */
err_t
pbuf_free_callback(struct pbuf *p)
{
  return tcpip_try_callback(pbuf_free_int, p);
 8013754:	4601      	mov	r1, r0
 8013756:	4801      	ldr	r0, [pc, #4]	; (801375c <pbuf_free_callback+0x8>)
 8013758:	f7ff bf88 	b.w	801366c <tcpip_try_callback>
 801375c:	080134d9 	.word	0x080134d9

08013760 <fs_open>:
err_t
fs_open(struct fs_file *file, const char *name)
{
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8013760:	b1e8      	cbz	r0, 801379e <fs_open+0x3e>
 8013762:	b1e1      	cbz	r1, 801379e <fs_open+0x3e>
{
 8013764:	b570      	push	{r4, r5, r6, lr}
 8013766:	460d      	mov	r5, r1
 8013768:	4606      	mov	r6, r0
 801376a:	490f      	ldr	r1, [pc, #60]	; (80137a8 <fs_open+0x48>)
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 801376c:	4c0f      	ldr	r4, [pc, #60]	; (80137ac <fs_open+0x4c>)
 801376e:	e000      	b.n	8013772 <fs_open+0x12>
 8013770:	6861      	ldr	r1, [r4, #4]
    if (!strcmp(name, (const char *)f->name)) {
 8013772:	4628      	mov	r0, r5
 8013774:	f7ec fd64 	bl	8000240 <strcmp>
 8013778:	b130      	cbz	r0, 8013788 <fs_open+0x28>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 801377a:	6824      	ldr	r4, [r4, #0]
 801377c:	2c00      	cmp	r4, #0
 801377e:	d1f7      	bne.n	8013770 <fs_open+0x10>
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
    }
  }
  /* file not found */
  return ERR_VAL;
 8013780:	f06f 0305 	mvn.w	r3, #5
}
 8013784:	4618      	mov	r0, r3
 8013786:	bd70      	pop	{r4, r5, r6, pc}
      file->len = f->len;
 8013788:	68e2      	ldr	r2, [r4, #12]
      return ERR_OK;
 801378a:	4603      	mov	r3, r0
      file->data = (const char *)f->data;
 801378c:	68a1      	ldr	r1, [r4, #8]
      file->pextension = NULL;
 801378e:	e9c6 2002 	strd	r2, r0, [r6, #8]
      file->len = f->len;
 8013792:	e9c6 1200 	strd	r1, r2, [r6]
      file->flags = f->flags;
 8013796:	7c22      	ldrb	r2, [r4, #16]
}
 8013798:	4618      	mov	r0, r3
      file->flags = f->flags;
 801379a:	7432      	strb	r2, [r6, #16]
}
 801379c:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_ARG;
 801379e:	f06f 030f 	mvn.w	r3, #15
}
 80137a2:	4618      	mov	r0, r3
 80137a4:	4770      	bx	lr
 80137a6:	bf00      	nop
 80137a8:	08031900 	.word	0x08031900
 80137ac:	0803ca6c 	.word	0x0803ca6c

080137b0 <fs_close>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 80137b0:	4770      	bx	lr
 80137b2:	bf00      	nop

080137b4 <fs_bytes_left>:
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
  return file->len - file->index;
 80137b4:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
}
 80137b8:	1a10      	subs	r0, r2, r0
 80137ba:	4770      	bx	lr

080137bc <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 80137bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
  len = *length;
 80137c0:	8814      	ldrh	r4, [r2, #0]
  if (len == 0) {
 80137c2:	b374      	cbz	r4, 8013822 <http_write+0x66>
 80137c4:	461f      	mov	r7, r3
  if (max_len < len) {
    len = max_len;
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 80137c6:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80137c8:	4605      	mov	r5, r0
 80137ca:	4690      	mov	r8, r2
 80137cc:	005b      	lsls	r3, r3, #1
 80137ce:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
 80137d2:	460e      	mov	r6, r1
 80137d4:	b298      	uxth	r0, r3
 80137d6:	4290      	cmp	r0, r2
 80137d8:	bf28      	it	cs
 80137da:	4610      	movcs	r0, r2
 80137dc:	4284      	cmp	r4, r0
 80137de:	bf28      	it	cs
 80137e0:	4604      	movcs	r4, r0
    len = max_len;
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 80137e2:	463b      	mov	r3, r7
 80137e4:	4622      	mov	r2, r4
 80137e6:	4631      	mov	r1, r6
 80137e8:	4628      	mov	r0, r5
 80137ea:	f006 fd41 	bl	801a270 <tcp_write>
    if (err == ERR_MEM) {
 80137ee:	1c43      	adds	r3, r0, #1
 80137f0:	d003      	beq.n	80137fa <http_write+0x3e>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));

  if (err == ERR_OK) {
 80137f2:	b950      	cbnz	r0, 801380a <http_write+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 80137f4:	f8a8 4000 	strh.w	r4, [r8]
 80137f8:	e00a      	b.n	8013810 <http_write+0x54>
      if ((altcp_sndbuf(pcb) == 0) ||
 80137fa:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
 80137fe:	b123      	cbz	r3, 801380a <http_write+0x4e>
 8013800:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
        len /= 2;
 8013804:	0864      	lsrs	r4, r4, #1
      if ((altcp_sndbuf(pcb) == 0) ||
 8013806:	2b08      	cmp	r3, #8
 8013808:	d908      	bls.n	801381c <http_write+0x60>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 801380a:	2300      	movs	r3, #0
 801380c:	f8a8 3000 	strh.w	r3, [r8]

#if LWIP_HTTPD_SUPPORT_11_KEEPALIVE
  /* ensure nagle is normally enabled (only disabled for persistent connections
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
 8013810:	8b6b      	ldrh	r3, [r5, #26]
 8013812:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013816:	836b      	strh	r3, [r5, #26]
#endif

  return err;
}
 8013818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } while ((err == ERR_MEM) && (len > 1));
 801381c:	2c01      	cmp	r4, #1
 801381e:	d8e0      	bhi.n	80137e2 <http_write+0x26>
 8013820:	e7f3      	b.n	801380a <http_write+0x4e>
    return ERR_OK;
 8013822:	4620      	mov	r0, r4
}
 8013824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013828 <http_state_eof>:
{
 8013828:	b510      	push	{r4, lr}
 801382a:	4604      	mov	r4, r0
  if (hs->handle) {
 801382c:	6940      	ldr	r0, [r0, #20]
 801382e:	b118      	cbz	r0, 8013838 <http_state_eof+0x10>
    fs_close(hs->handle);
 8013830:	f7ff ffbe 	bl	80137b0 <fs_close>
    hs->handle = NULL;
 8013834:	2300      	movs	r3, #0
 8013836:	6163      	str	r3, [r4, #20]
  if (hs->ssi) {
 8013838:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801383a:	b118      	cbz	r0, 8013844 <http_state_eof+0x1c>
    HTTP_FREE_SSI_STATE(ssi);
 801383c:	f002 f8ac 	bl	8015998 <mem_free>
    hs->ssi = NULL;
 8013840:	2300      	movs	r3, #0
 8013842:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (hs->req) {
 8013844:	6a20      	ldr	r0, [r4, #32]
 8013846:	b118      	cbz	r0, 8013850 <http_state_eof+0x28>
    pbuf_free(hs->req);
 8013848:	f002 ff66 	bl	8016718 <pbuf_free>
    hs->req = NULL;
 801384c:	2300      	movs	r3, #0
 801384e:	6223      	str	r3, [r4, #32]
}
 8013850:	bd10      	pop	{r4, pc}
 8013852:	bf00      	nop

08013854 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8013854:	b538      	push	{r3, r4, r5, lr}
 8013856:	460d      	mov	r5, r1
  err_t err;

  *uri = "/404.html";
 8013858:	490c      	ldr	r1, [pc, #48]	; (801388c <http_get_404_file+0x38>)
  err = fs_open(&hs->file_handle, *uri);
 801385a:	4604      	mov	r4, r0
  *uri = "/404.html";
 801385c:	6029      	str	r1, [r5, #0]
  err = fs_open(&hs->file_handle, *uri);
 801385e:	f7ff ff7f 	bl	8013760 <fs_open>
  if (err != ERR_OK) {
 8013862:	b908      	cbnz	r0, 8013868 <http_get_404_file+0x14>
      }
    }
  }

  return &hs->file_handle;
}
 8013864:	4620      	mov	r0, r4
 8013866:	bd38      	pop	{r3, r4, r5, pc}
    *uri = "/404.htm";
 8013868:	4909      	ldr	r1, [pc, #36]	; (8013890 <http_get_404_file+0x3c>)
    err = fs_open(&hs->file_handle, *uri);
 801386a:	4620      	mov	r0, r4
    *uri = "/404.htm";
 801386c:	6029      	str	r1, [r5, #0]
    err = fs_open(&hs->file_handle, *uri);
 801386e:	f7ff ff77 	bl	8013760 <fs_open>
    if (err != ERR_OK) {
 8013872:	2800      	cmp	r0, #0
 8013874:	d0f6      	beq.n	8013864 <http_get_404_file+0x10>
      *uri = "/404.shtml";
 8013876:	4907      	ldr	r1, [pc, #28]	; (8013894 <http_get_404_file+0x40>)
      err = fs_open(&hs->file_handle, *uri);
 8013878:	4620      	mov	r0, r4
      *uri = "/404.shtml";
 801387a:	6029      	str	r1, [r5, #0]
      err = fs_open(&hs->file_handle, *uri);
 801387c:	f7ff ff70 	bl	8013760 <fs_open>
      if (err != ERR_OK) {
 8013880:	2800      	cmp	r0, #0
 8013882:	d0ef      	beq.n	8013864 <http_get_404_file+0x10>
        *uri = NULL;
 8013884:	2300      	movs	r3, #0
        return NULL;
 8013886:	461c      	mov	r4, r3
        *uri = NULL;
 8013888:	602b      	str	r3, [r5, #0]
        return NULL;
 801388a:	e7eb      	b.n	8013864 <http_get_404_file+0x10>
 801388c:	0803cadc 	.word	0x0803cadc
 8013890:	0803cae8 	.word	0x0803cae8
 8013894:	0803caf4 	.word	0x0803caf4

08013898 <http_accept>:
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8013898:	bb82      	cbnz	r2, 80138fc <http_accept+0x64>
{
 801389a:	b570      	push	{r4, r5, r6, lr}
  if ((err != ERR_OK) || (pcb == NULL)) {
 801389c:	fab1 f581 	clz	r5, r1
 80138a0:	096d      	lsrs	r5, r5, #5
 80138a2:	bb45      	cbnz	r5, 80138f6 <http_accept+0x5e>
 80138a4:	460c      	mov	r4, r1
    return ERR_VAL;
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 80138a6:	2101      	movs	r1, #1
 80138a8:	4620      	mov	r0, r4
 80138aa:	f003 fd81 	bl	80173b0 <tcp_setprio>
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 80138ae:	2034      	movs	r0, #52	; 0x34
 80138b0:	f002 fa42 	bl	8015d38 <mem_malloc>
  if (ret != NULL) {
 80138b4:	4606      	mov	r6, r0
 80138b6:	b1d8      	cbz	r0, 80138f0 <http_accept+0x58>
  memset(hs, 0, sizeof(struct http_state));
 80138b8:	2234      	movs	r2, #52	; 0x34
 80138ba:	4629      	mov	r1, r5
 80138bc:	f00c f903 	bl	801fac6 <memset>
  }
  hs->pcb = pcb;

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 80138c0:	4631      	mov	r1, r6
 80138c2:	4620      	mov	r0, r4
  hs->pcb = pcb;
 80138c4:	61f4      	str	r4, [r6, #28]
  altcp_arg(pcb, hs);
 80138c6:	f003 fda9 	bl	801741c <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 80138ca:	4620      	mov	r0, r4
 80138cc:	490d      	ldr	r1, [pc, #52]	; (8013904 <http_accept+0x6c>)
 80138ce:	f003 fda9 	bl	8017424 <tcp_recv>
  altcp_err(pcb, http_err);
 80138d2:	4620      	mov	r0, r4
 80138d4:	490c      	ldr	r1, [pc, #48]	; (8013908 <http_accept+0x70>)
 80138d6:	f003 fddd 	bl	8017494 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80138da:	2204      	movs	r2, #4
 80138dc:	4620      	mov	r0, r4
 80138de:	490b      	ldr	r1, [pc, #44]	; (801390c <http_accept+0x74>)
 80138e0:	f003 fdfa 	bl	80174d8 <tcp_poll>
  altcp_sent(pcb, http_sent);
 80138e4:	4620      	mov	r0, r4
 80138e6:	490a      	ldr	r1, [pc, #40]	; (8013910 <http_accept+0x78>)
 80138e8:	f003 fdb8 	bl	801745c <tcp_sent>

  return ERR_OK;
 80138ec:	4628      	mov	r0, r5
}
 80138ee:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 80138f0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80138f4:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 80138f6:	f06f 0005 	mvn.w	r0, #5
}
 80138fa:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 80138fc:	f06f 0005 	mvn.w	r0, #5
}
 8013900:	4770      	bx	lr
 8013902:	bf00      	nop
 8013904:	080144d1 	.word	0x080144d1
 8013908:	08014925 	.word	0x08014925
 801390c:	08014479 	.word	0x08014479
 8013910:	0801445d 	.word	0x0801445d

08013914 <http_init_file>:
{
 8013914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013918:	b087      	sub	sp, #28
 801391a:	4604      	mov	r4, r0
  if (file != NULL) {
 801391c:	460d      	mov	r5, r1
{
 801391e:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8013922:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8013924:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (file != NULL) {
 8013928:	2900      	cmp	r1, #0
 801392a:	f000 80ad 	beq.w	8013a88 <http_init_file+0x174>
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 801392e:	680b      	ldr	r3, [r1, #0]
 8013930:	2b00      	cmp	r3, #0
 8013932:	f000 80af 	beq.w	8013a94 <http_init_file+0x180>
    if (tag_check) {
 8013936:	2f00      	cmp	r7, #0
 8013938:	d16e      	bne.n	8013a18 <http_init_file+0x104>
    hs->handle = file;
 801393a:	6165      	str	r5, [r4, #20]
    if (params != NULL) {
 801393c:	2e00      	cmp	r6, #0
 801393e:	d04e      	beq.n	80139de <http_init_file+0xca>
 8013940:	4b64      	ldr	r3, [pc, #400]	; (8013ad4 <http_init_file+0x1c0>)
  if (!params || (params[0] == '\0')) {
 8013942:	7837      	ldrb	r7, [r6, #0]
 8013944:	9305      	str	r3, [sp, #20]
 8013946:	2f00      	cmp	r7, #0
 8013948:	d041      	beq.n	80139ce <http_init_file+0xba>
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 801394a:	2700      	movs	r7, #0
 801394c:	f8df a188 	ldr.w	sl, [pc, #392]	; 8013ad8 <http_init_file+0x1c4>
 8013950:	4699      	mov	r9, r3
 8013952:	46b3      	mov	fp, r6
 8013954:	e016      	b.n	8013984 <http_init_file+0x70>
      *pair = '\0';
 8013956:	f04f 0300 	mov.w	r3, #0
 801395a:	f808 3b01 	strb.w	r3, [r8], #1
 801395e:	f1b8 0f00 	cmp.w	r8, #0
 8013962:	bf08      	it	eq
 8013964:	2600      	moveq	r6, #0
    equals = strchr(equals, '=');
 8013966:	4658      	mov	r0, fp
 8013968:	213d      	movs	r1, #61	; 0x3d
 801396a:	f00d fa1d 	bl	8020da8 <strchr>
    if (equals) {
 801396e:	b338      	cbz	r0, 80139c0 <http_init_file+0xac>
      *equals = '\0';
 8013970:	f04f 0300 	mov.w	r3, #0
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8013974:	46c3      	mov	fp, r8
 8013976:	f109 0904 	add.w	r9, r9, #4
      *equals = '\0';
 801397a:	f800 3b01 	strb.w	r3, [r0], #1
      http_cgi_param_vals[loop] = equals + 1;
 801397e:	f849 0c04 	str.w	r0, [r9, #-4]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8013982:	b326      	cbz	r6, 80139ce <http_init_file+0xba>
 8013984:	3701      	adds	r7, #1
    pair = strchr(pair, '&');
 8013986:	2126      	movs	r1, #38	; 0x26
 8013988:	4658      	mov	r0, fp
    http_cgi_params[loop] = pair;
 801398a:	f84a bb04 	str.w	fp, [sl], #4
    pair = strchr(pair, '&');
 801398e:	f00d fa0b 	bl	8020da8 <strchr>
 8013992:	2f0f      	cmp	r7, #15
    if (pair) {
 8013994:	4680      	mov	r8, r0
 8013996:	bfcc      	ite	gt
 8013998:	2600      	movgt	r6, #0
 801399a:	2601      	movle	r6, #1
 801399c:	2800      	cmp	r0, #0
 801399e:	d1da      	bne.n	8013956 <http_init_file+0x42>
      pair = strchr(equals, ' ');
 80139a0:	2120      	movs	r1, #32
 80139a2:	4658      	mov	r0, fp
 80139a4:	f00d fa00 	bl	8020da8 <strchr>
      if (pair) {
 80139a8:	2800      	cmp	r0, #0
 80139aa:	f000 8090 	beq.w	8013ace <http_init_file+0x1ba>
        *pair = '\0';
 80139ae:	f880 8000 	strb.w	r8, [r0]
    equals = strchr(equals, '=');
 80139b2:	213d      	movs	r1, #61	; 0x3d
 80139b4:	4658      	mov	r0, fp
        *pair = '\0';
 80139b6:	4646      	mov	r6, r8
    equals = strchr(equals, '=');
 80139b8:	f00d f9f6 	bl	8020da8 <strchr>
    if (equals) {
 80139bc:	2800      	cmp	r0, #0
 80139be:	d1d7      	bne.n	8013970 <http_init_file+0x5c>
      http_cgi_param_vals[loop] = NULL;
 80139c0:	f8c9 0000 	str.w	r0, [r9]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 80139c4:	46c3      	mov	fp, r8
 80139c6:	f109 0904 	add.w	r9, r9, #4
 80139ca:	2e00      	cmp	r6, #0
 80139cc:	d1da      	bne.n	8013984 <http_init_file+0x70>
      httpd_cgi_handler(file, uri, count, http_cgi_params, http_cgi_param_vals
 80139ce:	9b05      	ldr	r3, [sp, #20]
 80139d0:	463a      	mov	r2, r7
 80139d2:	9904      	ldr	r1, [sp, #16]
 80139d4:	4628      	mov	r0, r5
 80139d6:	9300      	str	r3, [sp, #0]
 80139d8:	4b3f      	ldr	r3, [pc, #252]	; (8013ad8 <http_init_file+0x1c4>)
 80139da:	f7f1 fbd9 	bl	8005190 <httpd_cgi_handler>
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 80139de:	e9d5 3200 	ldrd	r3, r2, [r5]
 80139e2:	2a00      	cmp	r2, #0
    hs->file = file->data;
 80139e4:	61a3      	str	r3, [r4, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 80139e6:	db69      	blt.n	8013abc <http_init_file+0x1a8>
    hs->retries = 0;
 80139e8:	2100      	movs	r1, #0
    LWIP_ASSERT("HTTP headers not included in file system",
 80139ea:	6963      	ldr	r3, [r4, #20]
      hs->left = (u32_t)file->len;
 80139ec:	6262      	str	r2, [r4, #36]	; 0x24
    hs->retries = 0;
 80139ee:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    LWIP_ASSERT("HTTP headers not included in file system",
 80139f2:	7c1b      	ldrb	r3, [r3, #16]
 80139f4:	07d9      	lsls	r1, r3, #31
 80139f6:	d52a      	bpl.n	8013a4e <http_init_file+0x13a>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 80139f8:	9b03      	ldr	r3, [sp, #12]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d136      	bne.n	8013a6c <http_init_file+0x158>
  if (hs->keepalive) {
 80139fe:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8013a02:	b12b      	cbz	r3, 8013a10 <http_init_file+0xfc>
    if (hs->ssi != NULL) {
 8013a04:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d04f      	beq.n	8013aaa <http_init_file+0x196>
      hs->keepalive = 0;
 8013a0a:	2300      	movs	r3, #0
 8013a0c:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
 8013a10:	2000      	movs	r0, #0
 8013a12:	b007      	add	sp, #28
 8013a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 8013a18:	f44f 7090 	mov.w	r0, #288	; 0x120
 8013a1c:	f002 f98c 	bl	8015d38 <mem_malloc>
  if (ret != NULL) {
 8013a20:	4607      	mov	r7, r0
 8013a22:	2800      	cmp	r0, #0
 8013a24:	d089      	beq.n	801393a <http_init_file+0x26>
    memset(ret, 0, sizeof(struct http_ssi_state));
 8013a26:	f44f 7290 	mov.w	r2, #288	; 0x120
 8013a2a:	2100      	movs	r1, #0
 8013a2c:	f00c f84b 	bl	801fac6 <memset>
        ssi->tag_index = 0;
 8013a30:	2200      	movs	r2, #0
        ssi->parse_left = file->len;
 8013a32:	e9d5 3100 	ldrd	r3, r1, [r5]
        ssi->tag_index = 0;
 8013a36:	823a      	strh	r2, [r7, #16]
        ssi->tag_state = TAG_NONE;
 8013a38:	f887 211e 	strb.w	r2, [r7, #286]	; 0x11e
        ssi->parsed = file->data;
 8013a3c:	603b      	str	r3, [r7, #0]
        ssi->parse_left = file->len;
 8013a3e:	e9c7 3102 	strd	r3, r1, [r7, #8]
        hs->ssi = ssi;
 8013a42:	62e7      	str	r7, [r4, #44]	; 0x2c
    hs->handle = file;
 8013a44:	6165      	str	r5, [r4, #20]
    if (params != NULL) {
 8013a46:	2e00      	cmp	r6, #0
 8013a48:	f47f af7a 	bne.w	8013940 <http_init_file+0x2c>
 8013a4c:	e7c7      	b.n	80139de <http_init_file+0xca>
    LWIP_ASSERT("HTTP headers not included in file system",
 8013a4e:	4b23      	ldr	r3, [pc, #140]	; (8013adc <http_init_file+0x1c8>)
 8013a50:	f640 1244 	movw	r2, #2372	; 0x944
 8013a54:	4922      	ldr	r1, [pc, #136]	; (8013ae0 <http_init_file+0x1cc>)
 8013a56:	4823      	ldr	r0, [pc, #140]	; (8013ae4 <http_init_file+0x1d0>)
 8013a58:	f00c ffb6 	bl	80209c8 <iprintf>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8013a5c:	9b03      	ldr	r3, [sp, #12]
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d0cd      	beq.n	80139fe <http_init_file+0xea>
 8013a62:	6963      	ldr	r3, [r4, #20]
 8013a64:	7c1b      	ldrb	r3, [r3, #16]
 8013a66:	07db      	lsls	r3, r3, #31
 8013a68:	d5c9      	bpl.n	80139fe <http_init_file+0xea>
 8013a6a:	6a62      	ldr	r2, [r4, #36]	; 0x24
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8013a6c:	491e      	ldr	r1, [pc, #120]	; (8013ae8 <http_init_file+0x1d4>)
 8013a6e:	69a0      	ldr	r0, [r4, #24]
 8013a70:	f000 ffea 	bl	8014a48 <lwip_strnstr>
      if (file_start != NULL) {
 8013a74:	2800      	cmp	r0, #0
 8013a76:	d0c2      	beq.n	80139fe <http_init_file+0xea>
        int diff = file_start + 4 - hs->file;
 8013a78:	3004      	adds	r0, #4
 8013a7a:	69a2      	ldr	r2, [r4, #24]
        hs->left -= (u32_t)diff;
 8013a7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
        int diff = file_start + 4 - hs->file;
 8013a7e:	1a82      	subs	r2, r0, r2
        hs->file += diff;
 8013a80:	61a0      	str	r0, [r4, #24]
        hs->left -= (u32_t)diff;
 8013a82:	1a9b      	subs	r3, r3, r2
 8013a84:	6263      	str	r3, [r4, #36]	; 0x24
 8013a86:	e7ba      	b.n	80139fe <http_init_file+0xea>
    hs->file = NULL;
 8013a88:	e9c0 1105 	strd	r1, r1, [r0, #20]
    hs->left = 0;
 8013a8c:	6261      	str	r1, [r4, #36]	; 0x24
    hs->retries = 0;
 8013a8e:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 8013a92:	e7b4      	b.n	80139fe <http_init_file+0xea>
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8013a94:	4b11      	ldr	r3, [pc, #68]	; (8013adc <http_init_file+0x1c8>)
 8013a96:	f640 120b 	movw	r2, #2315	; 0x90b
 8013a9a:	4914      	ldr	r1, [pc, #80]	; (8013aec <http_init_file+0x1d8>)
 8013a9c:	4811      	ldr	r0, [pc, #68]	; (8013ae4 <http_init_file+0x1d0>)
 8013a9e:	f00c ff93 	bl	80209c8 <iprintf>
    if (tag_check) {
 8013aa2:	2f00      	cmp	r7, #0
 8013aa4:	f43f af49 	beq.w	801393a <http_init_file+0x26>
 8013aa8:	e7b6      	b.n	8013a18 <http_init_file+0x104>
      if ((hs->handle != NULL) &&
 8013aaa:	6963      	ldr	r3, [r4, #20]
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d0af      	beq.n	8013a10 <http_init_file+0xfc>
 8013ab0:	7c1b      	ldrb	r3, [r3, #16]
 8013ab2:	f003 0303 	and.w	r3, r3, #3
 8013ab6:	2b01      	cmp	r3, #1
 8013ab8:	d1aa      	bne.n	8013a10 <http_init_file+0xfc>
 8013aba:	e7a6      	b.n	8013a0a <http_init_file+0xf6>
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8013abc:	f640 1234 	movw	r2, #2356	; 0x934
 8013ac0:	4b06      	ldr	r3, [pc, #24]	; (8013adc <http_init_file+0x1c8>)
 8013ac2:	490b      	ldr	r1, [pc, #44]	; (8013af0 <http_init_file+0x1dc>)
 8013ac4:	4807      	ldr	r0, [pc, #28]	; (8013ae4 <http_init_file+0x1d0>)
 8013ac6:	f00c ff7f 	bl	80209c8 <iprintf>
 8013aca:	686a      	ldr	r2, [r5, #4]
 8013acc:	e78c      	b.n	80139e8 <http_init_file+0xd4>
      if (pair) {
 8013ace:	4646      	mov	r6, r8
 8013ad0:	e749      	b.n	8013966 <http_init_file+0x52>
 8013ad2:	bf00      	nop
 8013ad4:	2002196c 	.word	0x2002196c
 8013ad8:	200219ac 	.word	0x200219ac
 8013adc:	0803cb00 	.word	0x0803cb00
 8013ae0:	0803cb6c 	.word	0x0803cb6c
 8013ae4:	0802697c 	.word	0x0802697c
 8013ae8:	080249fc 	.word	0x080249fc
 8013aec:	0803cb38 	.word	0x0803cb38
 8013af0:	0803cb4c 	.word	0x0803cb4c

08013af4 <http_find_file>:
{
 8013af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013af8:	4605      	mov	r5, r0
 8013afa:	b087      	sub	sp, #28
  size_t uri_len = strlen(uri);
 8013afc:	4608      	mov	r0, r1
 8013afe:	460c      	mov	r4, r1
{
 8013b00:	9105      	str	r1, [sp, #20]
 8013b02:	4690      	mov	r8, r2
 8013b04:	462e      	mov	r6, r5
  size_t uri_len = strlen(uri);
 8013b06:	f7ec fba5 	bl	8000254 <strlen>
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8013b0a:	4607      	mov	r7, r0
 8013b0c:	b118      	cbz	r0, 8013b16 <http_find_file+0x22>
 8013b0e:	1e43      	subs	r3, r0, #1
 8013b10:	5ce2      	ldrb	r2, [r4, r3]
 8013b12:	2a2f      	cmp	r2, #47	; 0x2f
 8013b14:	d064      	beq.n	8013be0 <http_find_file+0xec>
  u8_t tag_check = 0;
 8013b16:	f04f 0900 	mov.w	r9, #0
    params = (char *)strchr(uri, '?');
 8013b1a:	213f      	movs	r1, #63	; 0x3f
 8013b1c:	4620      	mov	r0, r4
 8013b1e:	f00d f943 	bl	8020da8 <strchr>
    if (params != NULL) {
 8013b22:	4607      	mov	r7, r0
 8013b24:	b118      	cbz	r0, 8013b2e <http_find_file+0x3a>
      *params = '\0';
 8013b26:	2300      	movs	r3, #0
 8013b28:	f807 3b01 	strb.w	r3, [r7], #1
 8013b2c:	9c05      	ldr	r4, [sp, #20]
    err = fs_open(&hs->file_handle, uri);
 8013b2e:	4621      	mov	r1, r4
 8013b30:	4628      	mov	r0, r5
 8013b32:	f7ff fe15 	bl	8013760 <fs_open>
    if (err == ERR_OK) {
 8013b36:	b998      	cbnz	r0, 8013b60 <http_find_file+0x6c>
    if (file != NULL) {
 8013b38:	b1ce      	cbz	r6, 8013b6e <http_find_file+0x7a>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 8013b3a:	7c33      	ldrb	r3, [r6, #16]
 8013b3c:	9c05      	ldr	r4, [sp, #20]
 8013b3e:	f013 0908 	ands.w	r9, r3, #8
 8013b42:	d01b      	beq.n	8013b7c <http_find_file+0x88>
        tag_check = 1;
 8013b44:	f04f 0901 	mov.w	r9, #1
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8013b48:	4623      	mov	r3, r4
 8013b4a:	4642      	mov	r2, r8
 8013b4c:	4631      	mov	r1, r6
 8013b4e:	9701      	str	r7, [sp, #4]
 8013b50:	f8cd 9000 	str.w	r9, [sp]
 8013b54:	4628      	mov	r0, r5
 8013b56:	f7ff fedd 	bl	8013914 <http_init_file>
}
 8013b5a:	b007      	add	sp, #28
 8013b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      file = http_get_404_file(hs, &uri);
 8013b60:	a905      	add	r1, sp, #20
 8013b62:	4628      	mov	r0, r5
 8013b64:	f7ff fe76 	bl	8013854 <http_get_404_file>
 8013b68:	4606      	mov	r6, r0
    if (file != NULL) {
 8013b6a:	2e00      	cmp	r6, #0
 8013b6c:	d1e5      	bne.n	8013b3a <http_find_file+0x46>
    file = http_get_404_file(hs, &uri);
 8013b6e:	a905      	add	r1, sp, #20
 8013b70:	4628      	mov	r0, r5
 8013b72:	f7ff fe6f 	bl	8013854 <http_get_404_file>
 8013b76:	9c05      	ldr	r4, [sp, #20]
 8013b78:	4606      	mov	r6, r0
 8013b7a:	e7e5      	b.n	8013b48 <http_find_file+0x54>
    char *param = (char *)strstr(uri, "?");
 8013b7c:	213f      	movs	r1, #63	; 0x3f
 8013b7e:	4620      	mov	r0, r4
 8013b80:	f00d f912 	bl	8020da8 <strchr>
    if (param != NULL) {
 8013b84:	4682      	mov	sl, r0
 8013b86:	b108      	cbz	r0, 8013b8c <http_find_file+0x98>
      *param = 0;
 8013b88:	f880 9000 	strb.w	r9, [r0]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 8013b8c:	212e      	movs	r1, #46	; 0x2e
 8013b8e:	4620      	mov	r0, r4
 8013b90:	f00d f90a 	bl	8020da8 <strchr>
 8013b94:	4681      	mov	r9, r0
 8013b96:	b908      	cbnz	r0, 8013b9c <http_find_file+0xa8>
 8013b98:	e08b      	b.n	8013cb2 <http_find_file+0x1be>
 8013b9a:	4681      	mov	r9, r0
 8013b9c:	212e      	movs	r1, #46	; 0x2e
 8013b9e:	f109 0001 	add.w	r0, r9, #1
 8013ba2:	f00d f901 	bl	8020da8 <strchr>
 8013ba6:	2800      	cmp	r0, #0
 8013ba8:	d1f7      	bne.n	8013b9a <http_find_file+0xa6>
 8013baa:	4c43      	ldr	r4, [pc, #268]	; (8013cb8 <http_find_file+0x1c4>)
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 8013bac:	4648      	mov	r0, r9
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 8013bae:	4943      	ldr	r1, [pc, #268]	; (8013cbc <http_find_file+0x1c8>)
 8013bb0:	f104 0b10 	add.w	fp, r4, #16
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 8013bb4:	f000 ff70 	bl	8014a98 <lwip_stricmp>
 8013bb8:	b140      	cbz	r0, 8013bcc <http_find_file+0xd8>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8013bba:	455c      	cmp	r4, fp
 8013bbc:	d04c      	beq.n	8013c58 <http_find_file+0x164>
 8013bbe:	f854 1b04 	ldr.w	r1, [r4], #4
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 8013bc2:	4648      	mov	r0, r9
 8013bc4:	f000 ff68 	bl	8014a98 <lwip_stricmp>
 8013bc8:	2800      	cmp	r0, #0
 8013bca:	d1f6      	bne.n	8013bba <http_find_file+0xc6>
        tag_check = 1;
 8013bcc:	f04f 0901 	mov.w	r9, #1
    if (param != NULL) {
 8013bd0:	f1ba 0f00 	cmp.w	sl, #0
 8013bd4:	d002      	beq.n	8013bdc <http_find_file+0xe8>
      *param = '?';
 8013bd6:	233f      	movs	r3, #63	; 0x3f
 8013bd8:	f88a 3000 	strb.w	r3, [sl]
 8013bdc:	9c05      	ldr	r4, [sp, #20]
 8013bde:	e7b3      	b.n	8013b48 <http_find_file+0x54>
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8013be0:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8013cc0 <http_find_file+0x1cc>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8013be4:	4554      	cmp	r4, sl
 8013be6:	d106      	bne.n	8013bf6 <http_find_file+0x102>
 8013be8:	f1a0 0201 	sub.w	r2, r0, #1
 8013bec:	fab2 f282 	clz	r2, r2
 8013bf0:	0952      	lsrs	r2, r2, #5
 8013bf2:	2a00      	cmp	r2, #0
 8013bf4:	d05a      	beq.n	8013cac <http_find_file+0x1b8>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8013bf6:	2b3f      	cmp	r3, #63	; 0x3f
 8013bf8:	bf28      	it	cs
 8013bfa:	233f      	movcs	r3, #63	; 0x3f
    if (copy_len > 0) {
 8013bfc:	2f01      	cmp	r7, #1
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8013bfe:	9302      	str	r3, [sp, #8]
    if (copy_len > 0) {
 8013c00:	d008      	beq.n	8013c14 <http_find_file+0x120>
      MEMCPY(http_uri_buf, uri, copy_len);
 8013c02:	4621      	mov	r1, r4
 8013c04:	461a      	mov	r2, r3
 8013c06:	482e      	ldr	r0, [pc, #184]	; (8013cc0 <http_find_file+0x1cc>)
 8013c08:	461c      	mov	r4, r3
 8013c0a:	f00b ff38 	bl	801fa7e <memcpy>
      http_uri_buf[copy_len] = 0;
 8013c0e:	2300      	movs	r3, #0
 8013c10:	f80a 3004 	strb.w	r3, [sl, r4]
{
 8013c14:	f04f 0900 	mov.w	r9, #0
        file_name = http_uri_buf;
 8013c18:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 8013cc0 <http_find_file+0x1cc>
 8013c1c:	9603      	str	r6, [sp, #12]
 8013c1e:	9e02      	ldr	r6, [sp, #8]
 8013c20:	f8cd 8008 	str.w	r8, [sp, #8]
      if (copy_len > 0) {
 8013c24:	2f01      	cmp	r7, #1
        file_name = http_uri_buf;
 8013c26:	465c      	mov	r4, fp
      if (copy_len > 0) {
 8013c28:	d012      	beq.n	8013c50 <http_find_file+0x15c>
        if (len_left > 0) {
 8013c2a:	f1d6 033f 	rsbs	r3, r6, #63	; 0x3f
 8013c2e:	d116      	bne.n	8013c5e <http_find_file+0x16a>
      err = fs_open(&hs->file_handle, file_name);
 8013c30:	4621      	mov	r1, r4
 8013c32:	4628      	mov	r0, r5
 8013c34:	f7ff fd94 	bl	8013760 <fs_open>
      if (err == ERR_OK) {
 8013c38:	b358      	cbz	r0, 8013c92 <http_find_file+0x19e>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8013c3a:	f109 0901 	add.w	r9, r9, #1
 8013c3e:	f1b9 0f05 	cmp.w	r9, #5
 8013c42:	d1ef      	bne.n	8013c24 <http_find_file+0x130>
 8013c44:	9c05      	ldr	r4, [sp, #20]
  u8_t tag_check = 0;
 8013c46:	f04f 0900 	mov.w	r9, #0
 8013c4a:	e9dd 8602 	ldrd	r8, r6, [sp, #8]
 8013c4e:	e764      	b.n	8013b1a <http_find_file+0x26>
        file_name = httpd_default_filenames[loop].name;
 8013c50:	4b1c      	ldr	r3, [pc, #112]	; (8013cc4 <http_find_file+0x1d0>)
 8013c52:	f853 4039 	ldr.w	r4, [r3, r9, lsl #3]
 8013c56:	e7eb      	b.n	8013c30 <http_find_file+0x13c>
  u8_t tag_check = 0;
 8013c58:	f04f 0900 	mov.w	r9, #0
 8013c5c:	e7b8      	b.n	8013bd0 <http_find_file+0xdc>
 8013c5e:	9304      	str	r3, [sp, #16]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8013c60:	eb0a 0806 	add.w	r8, sl, r6
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8013c64:	4b17      	ldr	r3, [pc, #92]	; (8013cc4 <http_find_file+0x1d0>)
 8013c66:	f853 1039 	ldr.w	r1, [r3, r9, lsl #3]
 8013c6a:	4608      	mov	r0, r1
 8013c6c:	468a      	mov	sl, r1
 8013c6e:	f7ec faf1 	bl	8000254 <strlen>
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8013c72:	9b04      	ldr	r3, [sp, #16]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8013c74:	4651      	mov	r1, sl
        file_name = http_uri_buf;
 8013c76:	46da      	mov	sl, fp
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8013c78:	4283      	cmp	r3, r0
 8013c7a:	bf28      	it	cs
 8013c7c:	4603      	movcs	r3, r0
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8013c7e:	4640      	mov	r0, r8
 8013c80:	461a      	mov	r2, r3
 8013c82:	9304      	str	r3, [sp, #16]
 8013c84:	f00b fefb 	bl	801fa7e <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8013c88:	2200      	movs	r2, #0
 8013c8a:	9b04      	ldr	r3, [sp, #16]
 8013c8c:	f808 2003 	strb.w	r2, [r8, r3]
 8013c90:	e7ce      	b.n	8013c30 <http_find_file+0x13c>
        tag_check = httpd_default_filenames[loop].shtml;
 8013c92:	4b0c      	ldr	r3, [pc, #48]	; (8013cc4 <http_find_file+0x1d0>)
        uri = file_name;
 8013c94:	9405      	str	r4, [sp, #20]
        tag_check = httpd_default_filenames[loop].shtml;
 8013c96:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8013c9a:	e9dd 8602 	ldrd	r8, r6, [sp, #8]
 8013c9e:	f899 9004 	ldrb.w	r9, [r9, #4]
  if (file == NULL) {
 8013ca2:	2d00      	cmp	r5, #0
 8013ca4:	f43f af39 	beq.w	8013b1a <http_find_file+0x26>
  char *params = NULL;
 8013ca8:	4607      	mov	r7, r0
 8013caa:	e74d      	b.n	8013b48 <http_find_file+0x54>
 8013cac:	4654      	mov	r4, sl
  u8_t tag_check = 0;
 8013cae:	4691      	mov	r9, r2
 8013cb0:	e733      	b.n	8013b1a <http_find_file+0x26>
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 8013cb2:	46a1      	mov	r9, r4
 8013cb4:	e779      	b.n	8013baa <http_find_file+0xb6>
 8013cb6:	bf00      	nop
 8013cb8:	0803ca84 	.word	0x0803ca84
 8013cbc:	0803cabc 	.word	0x0803cabc
 8013cc0:	200219ec 	.word	0x200219ec
 8013cc4:	0803cd08 	.word	0x0803cd08

08013cc8 <http_post_rxpbuf>:
{
 8013cc8:	b570      	push	{r4, r5, r6, lr}
 8013cca:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8013ccc:	4604      	mov	r4, r0
  if (p != NULL) {
 8013cce:	b1d1      	cbz	r1, 8013d06 <http_post_rxpbuf+0x3e>
    if (hs->post_content_len_left < p->tot_len) {
 8013cd0:	890a      	ldrh	r2, [r1, #8]
 8013cd2:	429a      	cmp	r2, r3
      hs->post_content_len_left = 0;
 8013cd4:	bf8c      	ite	hi
 8013cd6:	2300      	movhi	r3, #0
      hs->post_content_len_left -= p->tot_len;
 8013cd8:	1a9b      	subls	r3, r3, r2
 8013cda:	6303      	str	r3, [r0, #48]	; 0x30
    err = httpd_post_receive_data(hs, p);
 8013cdc:	f7f1 fb58 	bl	8005390 <httpd_post_receive_data>
  if (err != ERR_OK) {
 8013ce0:	b180      	cbz	r0, 8013d04 <http_post_rxpbuf+0x3c>
    hs->post_content_len_left = 0;
 8013ce2:	2300      	movs	r3, #0
 8013ce4:	6323      	str	r3, [r4, #48]	; 0x30
  http_uri_buf[0] = 0;
 8013ce6:	4d0a      	ldr	r5, [pc, #40]	; (8013d10 <http_post_rxpbuf+0x48>)
 8013ce8:	2600      	movs	r6, #0
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8013cea:	4620      	mov	r0, r4
 8013cec:	223f      	movs	r2, #63	; 0x3f
 8013cee:	4629      	mov	r1, r5
  http_uri_buf[0] = 0;
 8013cf0:	702e      	strb	r6, [r5, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8013cf2:	f7f1 fb5d 	bl	80053b0 <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 8013cf6:	4632      	mov	r2, r6
 8013cf8:	4629      	mov	r1, r5
 8013cfa:	4620      	mov	r0, r4
}
 8013cfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return http_find_file(hs, http_uri_buf, 0);
 8013d00:	f7ff bef8 	b.w	8013af4 <http_find_file>
 8013d04:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if (hs->post_content_len_left == 0) {
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d0ed      	beq.n	8013ce6 <http_post_rxpbuf+0x1e>
}
 8013d0a:	2000      	movs	r0, #0
 8013d0c:	bd70      	pop	{r4, r5, r6, pc}
 8013d0e:	bf00      	nop
 8013d10:	200219ec 	.word	0x200219ec

08013d14 <http_find_error_file>:
  if (error_nr == 501) {
 8013d14:	f240 12f5 	movw	r2, #501	; 0x1f5
    uri3 = "/400.shtml";
 8013d18:	4b16      	ldr	r3, [pc, #88]	; (8013d74 <http_find_error_file+0x60>)
 8013d1a:	4291      	cmp	r1, r2
 8013d1c:	4a16      	ldr	r2, [pc, #88]	; (8013d78 <http_find_error_file+0x64>)
{
 8013d1e:	b5f0      	push	{r4, r5, r6, r7, lr}
    uri3 = "/400.shtml";
 8013d20:	4c16      	ldr	r4, [pc, #88]	; (8013d7c <http_find_error_file+0x68>)
 8013d22:	bf18      	it	ne
 8013d24:	461c      	movne	r4, r3
 8013d26:	4b16      	ldr	r3, [pc, #88]	; (8013d80 <http_find_error_file+0x6c>)
{
 8013d28:	b083      	sub	sp, #12
  if (fs_open(&hs->file_handle, uri1) == ERR_OK) {
 8013d2a:	4621      	mov	r1, r4
    uri3 = "/400.shtml";
 8013d2c:	4e15      	ldr	r6, [pc, #84]	; (8013d84 <http_find_error_file+0x70>)
 8013d2e:	4d16      	ldr	r5, [pc, #88]	; (8013d88 <http_find_error_file+0x74>)
 8013d30:	bf04      	itt	eq
 8013d32:	4616      	moveq	r6, r2
 8013d34:	461d      	moveq	r5, r3
{
 8013d36:	4607      	mov	r7, r0
  if (fs_open(&hs->file_handle, uri1) == ERR_OK) {
 8013d38:	f7ff fd12 	bl	8013760 <fs_open>
 8013d3c:	b128      	cbz	r0, 8013d4a <http_find_error_file+0x36>
  } else if (fs_open(&hs->file_handle, uri2) == ERR_OK) {
 8013d3e:	4629      	mov	r1, r5
 8013d40:	4638      	mov	r0, r7
 8013d42:	f7ff fd0d 	bl	8013760 <fs_open>
 8013d46:	b958      	cbnz	r0, 8013d60 <http_find_error_file+0x4c>
    uri = uri2;
 8013d48:	462c      	mov	r4, r5
  return http_init_file(hs, &hs->file_handle, 0, uri, 0, NULL);
 8013d4a:	2500      	movs	r5, #0
 8013d4c:	4623      	mov	r3, r4
 8013d4e:	4639      	mov	r1, r7
 8013d50:	4638      	mov	r0, r7
 8013d52:	9501      	str	r5, [sp, #4]
 8013d54:	462a      	mov	r2, r5
 8013d56:	9500      	str	r5, [sp, #0]
 8013d58:	f7ff fddc 	bl	8013914 <http_init_file>
}
 8013d5c:	b003      	add	sp, #12
 8013d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } else if (fs_open(&hs->file_handle, uri3) == ERR_OK) {
 8013d60:	4631      	mov	r1, r6
 8013d62:	4638      	mov	r0, r7
 8013d64:	f7ff fcfc 	bl	8013760 <fs_open>
 8013d68:	b908      	cbnz	r0, 8013d6e <http_find_error_file+0x5a>
    uri = uri3;
 8013d6a:	4634      	mov	r4, r6
 8013d6c:	e7ed      	b.n	8013d4a <http_find_error_file+0x36>
    return ERR_ARG;
 8013d6e:	f06f 000f 	mvn.w	r0, #15
 8013d72:	e7f3      	b.n	8013d5c <http_find_error_file+0x48>
 8013d74:	0803cad0 	.word	0x0803cad0
 8013d78:	0803ca94 	.word	0x0803ca94
 8013d7c:	0803caac 	.word	0x0803caac
 8013d80:	0803caa0 	.word	0x0803caa0
 8013d84:	0803cab8 	.word	0x0803cab8
 8013d88:	0803cac4 	.word	0x0803cac4

08013d8c <http_close_or_abort_conn.constprop.9>:
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
 8013d8c:	b538      	push	{r3, r4, r5, lr}
 8013d8e:	4604      	mov	r4, r0
  if (hs != NULL) {
 8013d90:	460d      	mov	r5, r1
 8013d92:	b381      	cbz	r1, 8013df6 <http_close_or_abort_conn.constprop.9+0x6a>
    if ((hs->post_content_len_left != 0)
 8013d94:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8013d96:	bb33      	cbnz	r3, 8013de6 <http_close_or_abort_conn.constprop.9+0x5a>
  altcp_arg(pcb, NULL);
 8013d98:	2100      	movs	r1, #0
 8013d9a:	4620      	mov	r0, r4
 8013d9c:	f003 fb3e 	bl	801741c <tcp_arg>
  altcp_recv(pcb, NULL);
 8013da0:	2100      	movs	r1, #0
 8013da2:	4620      	mov	r0, r4
 8013da4:	f003 fb3e 	bl	8017424 <tcp_recv>
  altcp_err(pcb, NULL);
 8013da8:	2100      	movs	r1, #0
 8013daa:	4620      	mov	r0, r4
 8013dac:	f003 fb72 	bl	8017494 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8013db0:	2200      	movs	r2, #0
 8013db2:	4620      	mov	r0, r4
 8013db4:	4611      	mov	r1, r2
 8013db6:	f003 fb8f 	bl	80174d8 <tcp_poll>
  altcp_sent(pcb, NULL);
 8013dba:	2100      	movs	r1, #0
 8013dbc:	4620      	mov	r0, r4
 8013dbe:	f003 fb4d 	bl	801745c <tcp_sent>
    http_state_eof(hs);
 8013dc2:	4628      	mov	r0, r5
 8013dc4:	f7ff fd30 	bl	8013828 <http_state_eof>
    HTTP_FREE_HTTP_STATE(hs);
 8013dc8:	4628      	mov	r0, r5
 8013dca:	f001 fde5 	bl	8015998 <mem_free>
  err = altcp_close(pcb);
 8013dce:	4620      	mov	r0, r4
 8013dd0:	f004 f988 	bl	80180e4 <tcp_close>
  if (err != ERR_OK) {
 8013dd4:	4605      	mov	r5, r0
 8013dd6:	b120      	cbz	r0, 8013de2 <http_close_or_abort_conn.constprop.9+0x56>
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8013dd8:	4620      	mov	r0, r4
 8013dda:	2204      	movs	r2, #4
 8013ddc:	4910      	ldr	r1, [pc, #64]	; (8013e20 <http_close_or_abort_conn.constprop.9+0x94>)
 8013dde:	f003 fb7b 	bl	80174d8 <tcp_poll>
}
 8013de2:	4628      	mov	r0, r5
 8013de4:	bd38      	pop	{r3, r4, r5, pc}
      http_uri_buf[0] = 0;
 8013de6:	490f      	ldr	r1, [pc, #60]	; (8013e24 <http_close_or_abort_conn.constprop.9+0x98>)
 8013de8:	2300      	movs	r3, #0
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8013dea:	223f      	movs	r2, #63	; 0x3f
 8013dec:	4628      	mov	r0, r5
      http_uri_buf[0] = 0;
 8013dee:	700b      	strb	r3, [r1, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8013df0:	f7f1 fade 	bl	80053b0 <httpd_post_finished>
 8013df4:	e7d0      	b.n	8013d98 <http_close_or_abort_conn.constprop.9+0xc>
  altcp_arg(pcb, NULL);
 8013df6:	f003 fb11 	bl	801741c <tcp_arg>
  altcp_recv(pcb, NULL);
 8013dfa:	4629      	mov	r1, r5
 8013dfc:	4620      	mov	r0, r4
 8013dfe:	f003 fb11 	bl	8017424 <tcp_recv>
  altcp_err(pcb, NULL);
 8013e02:	4629      	mov	r1, r5
 8013e04:	4620      	mov	r0, r4
 8013e06:	f003 fb45 	bl	8017494 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8013e0a:	4629      	mov	r1, r5
 8013e0c:	4620      	mov	r0, r4
 8013e0e:	462a      	mov	r2, r5
 8013e10:	f003 fb62 	bl	80174d8 <tcp_poll>
  altcp_sent(pcb, NULL);
 8013e14:	4629      	mov	r1, r5
 8013e16:	4620      	mov	r0, r4
 8013e18:	f003 fb20 	bl	801745c <tcp_sent>
 8013e1c:	e7d7      	b.n	8013dce <http_close_or_abort_conn.constprop.9+0x42>
 8013e1e:	bf00      	nop
 8013e20:	08014479 	.word	0x08014479
 8013e24:	200219ec 	.word	0x200219ec

08013e28 <http_eof>:
  if (hs->keepalive) {
 8013e28:	f891 2029 	ldrb.w	r2, [r1, #41]	; 0x29
 8013e2c:	b90a      	cbnz	r2, 8013e32 <http_eof+0xa>
  return http_close_or_abort_conn(pcb, hs, 0);
 8013e2e:	f7ff bfad 	b.w	8013d8c <http_close_or_abort_conn.constprop.9>
{
 8013e32:	b538      	push	{r3, r4, r5, lr}
 8013e34:	460c      	mov	r4, r1
 8013e36:	4605      	mov	r5, r0
    http_state_eof(hs);
 8013e38:	4608      	mov	r0, r1
 8013e3a:	f7ff fcf5 	bl	8013828 <http_state_eof>
  memset(hs, 0, sizeof(struct http_state));
 8013e3e:	2234      	movs	r2, #52	; 0x34
 8013e40:	2100      	movs	r1, #0
 8013e42:	4620      	mov	r0, r4
 8013e44:	f00b fe3f 	bl	801fac6 <memset>
    hs->keepalive = 1;
 8013e48:	2301      	movs	r3, #1
    hs->pcb = pcb;
 8013e4a:	61e5      	str	r5, [r4, #28]
    hs->keepalive = 1;
 8013e4c:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    altcp_nagle_disable(pcb);
 8013e50:	8b6b      	ldrh	r3, [r5, #26]
 8013e52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013e56:	836b      	strh	r3, [r5, #26]
}
 8013e58:	bd38      	pop	{r3, r4, r5, pc}
 8013e5a:	bf00      	nop

08013e5c <http_send>:
{
 8013e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e60:	b089      	sub	sp, #36	; 0x24
  if (hs == NULL) {
 8013e62:	2900      	cmp	r1, #0
 8013e64:	d05f      	beq.n	8013f26 <http_send+0xca>
  if (hs->left == 0) {
 8013e66:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8013e68:	460d      	mov	r5, r1
 8013e6a:	4683      	mov	fp, r0
 8013e6c:	b323      	cbz	r3, 8013eb8 <http_send+0x5c>
  if (hs->ssi) {
 8013e6e:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 8013e70:	69a9      	ldr	r1, [r5, #24]
 8013e72:	2c00      	cmp	r4, #0
 8013e74:	d032      	beq.n	8013edc <http_send+0x80>
  if (ssi->parsed > hs->file) {
 8013e76:	6826      	ldr	r6, [r4, #0]
  len = altcp_sndbuf(pcb);
 8013e78:	f8bb 2064 	ldrh.w	r2, [fp, #100]	; 0x64
  if (ssi->parsed > hs->file) {
 8013e7c:	428e      	cmp	r6, r1
  len = altcp_sndbuf(pcb);
 8013e7e:	f8ad 201e 	strh.w	r2, [sp, #30]
  if (ssi->parsed > hs->file) {
 8013e82:	d955      	bls.n	8013f30 <http_send+0xd4>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8013e84:	1a76      	subs	r6, r6, r1
 8013e86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013e8a:	aa08      	add	r2, sp, #32
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8013e8c:	4658      	mov	r0, fp
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8013e8e:	429e      	cmp	r6, r3
 8013e90:	bfa8      	it	ge
 8013e92:	461e      	movge	r6, r3
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8013e94:	2300      	movs	r3, #0
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8013e96:	f822 6d02 	strh.w	r6, [r2, #-2]!
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8013e9a:	f7ff fc8f 	bl	80137bc <http_write>
    if (err == ERR_OK) {
 8013e9e:	4606      	mov	r6, r0
 8013ea0:	2800      	cmp	r0, #0
 8013ea2:	f000 81c0 	beq.w	8014226 <http_send+0x3ca>
    if (altcp_sndbuf(pcb) == 0) {
 8013ea6:	f8bb 3064 	ldrh.w	r3, [fp, #100]	; 0x64
  u8_t data_to_send = 0;
 8013eaa:	2700      	movs	r7, #0
    if (altcp_sndbuf(pcb) == 0) {
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	f000 81c8 	beq.w	8014242 <http_send+0x3e6>
 8013eb2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8013eb6:	e03d      	b.n	8013f34 <http_send+0xd8>
  if (hs->handle == NULL) {
 8013eb8:	6948      	ldr	r0, [r1, #20]
 8013eba:	2800      	cmp	r0, #0
 8013ebc:	d02f      	beq.n	8013f1e <http_send+0xc2>
  bytes_left = fs_bytes_left(hs->handle);
 8013ebe:	f7ff fc79 	bl	80137b4 <fs_bytes_left>
  if (bytes_left <= 0) {
 8013ec2:	2800      	cmp	r0, #0
 8013ec4:	dd2b      	ble.n	8013f1e <http_send+0xc2>
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8013ec6:	49b2      	ldr	r1, [pc, #712]	; (8014190 <http_send+0x334>)
 8013ec8:	f240 429d 	movw	r2, #1181	; 0x49d
 8013ecc:	4bb1      	ldr	r3, [pc, #708]	; (8014194 <http_send+0x338>)
 8013ece:	48b2      	ldr	r0, [pc, #712]	; (8014198 <http_send+0x33c>)
 8013ed0:	f00c fd7a 	bl	80209c8 <iprintf>
  if (hs->ssi) {
 8013ed4:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 8013ed6:	69a9      	ldr	r1, [r5, #24]
 8013ed8:	2c00      	cmp	r4, #0
 8013eda:	d1cc      	bne.n	8013e76 <http_send+0x1a>
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8013edc:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 8013ee0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013ee4:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 8013ee6:	aa08      	add	r2, sp, #32
 8013ee8:	4286      	cmp	r6, r0
 8013eea:	bf88      	it	hi
 8013eec:	461e      	movhi	r6, r3
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8013eee:	4623      	mov	r3, r4
 8013ef0:	4658      	mov	r0, fp
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8013ef2:	f822 6d02 	strh.w	r6, [r2, #-2]!
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8013ef6:	f7ff fc61 	bl	80137bc <http_write>
  if (err == ERR_OK) {
 8013efa:	2800      	cmp	r0, #0
 8013efc:	f040 8278 	bne.w	80143f0 <http_send+0x594>
    hs->file += len;
 8013f00:	f8bd 101e 	ldrh.w	r1, [sp, #30]
    data_to_send = 1;
 8013f04:	2701      	movs	r7, #1
    hs->file += len;
 8013f06:	69aa      	ldr	r2, [r5, #24]
    hs->left -= len;
 8013f08:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    hs->file += len;
 8013f0a:	440a      	add	r2, r1
    hs->left -= len;
 8013f0c:	1a5b      	subs	r3, r3, r1
    hs->file += len;
 8013f0e:	61aa      	str	r2, [r5, #24]
    hs->left -= len;
 8013f10:	626b      	str	r3, [r5, #36]	; 0x24
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8013f12:	b94b      	cbnz	r3, 8013f28 <http_send+0xcc>
 8013f14:	6968      	ldr	r0, [r5, #20]
 8013f16:	f7ff fc4d 	bl	80137b4 <fs_bytes_left>
 8013f1a:	2800      	cmp	r0, #0
 8013f1c:	dc04      	bgt.n	8013f28 <http_send+0xcc>
    http_eof(pcb, hs);
 8013f1e:	4629      	mov	r1, r5
 8013f20:	4658      	mov	r0, fp
 8013f22:	f7ff ff81 	bl	8013e28 <http_eof>
      return 0;
 8013f26:	2700      	movs	r7, #0
}
 8013f28:	4638      	mov	r0, r7
 8013f2a:	b009      	add	sp, #36	; 0x24
 8013f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u8_t data_to_send = 0;
 8013f30:	2700      	movs	r7, #0
  err_t err = ERR_OK;
 8013f32:	463e      	mov	r6, r7
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 8013f34:	46d9      	mov	r9, fp
 8013f36:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
              ssi->tag_index = 0;
 8013f3a:	f04f 0a00 	mov.w	sl, #0
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 8013f3e:	46bb      	mov	fp, r7
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8013f40:	2b04      	cmp	r3, #4
 8013f42:	d003      	beq.n	8013f4c <http_send+0xf0>
 8013f44:	68e1      	ldr	r1, [r4, #12]
 8013f46:	2900      	cmp	r1, #0
 8013f48:	f000 8196 	beq.w	8014278 <http_send+0x41c>
 8013f4c:	2e00      	cmp	r6, #0
 8013f4e:	f040 8245 	bne.w	80143dc <http_send+0x580>
    if (len == 0) {
 8013f52:	2a00      	cmp	r2, #0
 8013f54:	f000 8248 	beq.w	80143e8 <http_send+0x58c>
    switch (ssi->tag_state) {
 8013f58:	2b04      	cmp	r3, #4
 8013f5a:	d8f1      	bhi.n	8013f40 <http_send+0xe4>
 8013f5c:	e8df f003 	tbb	[pc, r3]
 8013f60:	253d606e 	.word	0x253d606e
 8013f64:	03          	.byte	0x03
 8013f65:	00          	.byte	0x00
        if (ssi->tag_end > hs->file) {
 8013f66:	68a0      	ldr	r0, [r4, #8]
 8013f68:	69a9      	ldr	r1, [r5, #24]
 8013f6a:	4288      	cmp	r0, r1
 8013f6c:	f240 8086 	bls.w	801407c <http_send+0x220>
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 8013f70:	6863      	ldr	r3, [r4, #4]
 8013f72:	4299      	cmp	r1, r3
 8013f74:	f200 8228 	bhi.w	80143c8 <http_send+0x56c>
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8013f78:	1a5a      	subs	r2, r3, r1
 8013f7a:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 8013f7e:	4282      	cmp	r2, r0
 8013f80:	f340 80ed 	ble.w	801415e <http_send+0x302>
 8013f84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013f88:	f8ad 301e 	strh.w	r3, [sp, #30]
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8013f8c:	2300      	movs	r3, #0
 8013f8e:	f10d 021e 	add.w	r2, sp, #30
 8013f92:	4648      	mov	r0, r9
 8013f94:	f7ff fc12 	bl	80137bc <http_write>
          if (err == ERR_OK) {
 8013f98:	2800      	cmp	r0, #0
 8013f9a:	f000 8184 	beq.w	80142a6 <http_send+0x44a>
 8013f9e:	4606      	mov	r6, r0
 8013fa0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8013fa4:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
 8013fa8:	e7ca      	b.n	8013f40 <http_send+0xe4>
 8013faa:	6820      	ldr	r0, [r4, #0]
 8013fac:	68e7      	ldr	r7, [r4, #12]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8013fae:	8a21      	ldrh	r1, [r4, #16]
 8013fb0:	f810 cb01 	ldrb.w	ip, [r0], #1
 8013fb4:	f107 3eff 	add.w	lr, r7, #4294967295
 8013fb8:	2900      	cmp	r1, #0
 8013fba:	d14d      	bne.n	8014058 <http_send+0x1fc>
 8013fbc:	f1ac 0709 	sub.w	r7, ip, #9
 8013fc0:	b2ff      	uxtb	r7, r7
 8013fc2:	2f17      	cmp	r7, #23
 8013fc4:	d848      	bhi.n	8014058 <http_send+0x1fc>
 8013fc6:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 80141a0 <http_send+0x344>
 8013fca:	fa28 f707 	lsr.w	r7, r8, r7
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8013fce:	07ff      	lsls	r7, r7, #31
 8013fd0:	d542      	bpl.n	8014058 <http_send+0x1fc>
          ssi->parse_left--;
 8013fd2:	f8c4 e00c 	str.w	lr, [r4, #12]
          ssi->parsed++;
 8013fd6:	6020      	str	r0, [r4, #0]
 8013fd8:	e7b2      	b.n	8013f40 <http_send+0xe4>
 8013fda:	6820      	ldr	r0, [r4, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8013fdc:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8013fe0:	f890 e000 	ldrb.w	lr, [r0]
 8013fe4:	f1bc 0f00 	cmp.w	ip, #0
 8013fe8:	d163      	bne.n	80140b2 <http_send+0x256>
 8013fea:	f1ae 0709 	sub.w	r7, lr, #9
 8013fee:	b2ff      	uxtb	r7, r7
 8013ff0:	2f17      	cmp	r7, #23
 8013ff2:	d94f      	bls.n	8014094 <http_send+0x238>
 8013ff4:	68e1      	ldr	r1, [r4, #12]
 8013ff6:	f100 0801 	add.w	r8, r0, #1
 8013ffa:	3901      	subs	r1, #1
 8013ffc:	9101      	str	r1, [sp, #4]
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 8013ffe:	7d27      	ldrb	r7, [r4, #20]
 8014000:	4966      	ldr	r1, [pc, #408]	; (801419c <http_send+0x340>)
 8014002:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 8014006:	687f      	ldr	r7, [r7, #4]
 8014008:	783f      	ldrb	r7, [r7, #0]
 801400a:	4577      	cmp	r7, lr
 801400c:	f000 80a2 	beq.w	8014154 <http_send+0x2f8>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 8014010:	f10c 0701 	add.w	r7, ip, #1
 8014014:	44a4      	add	ip, r4
 8014016:	8227      	strh	r7, [r4, #16]
 8014018:	7800      	ldrb	r0, [r0, #0]
 801401a:	f88c 0016 	strb.w	r0, [ip, #22]
 801401e:	e09c      	b.n	801415a <http_send+0x2fe>
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 8014020:	495e      	ldr	r1, [pc, #376]	; (801419c <http_send+0x340>)
 8014022:	7d20      	ldrb	r0, [r4, #20]
 8014024:	8a27      	ldrh	r7, [r4, #16]
 8014026:	f851 1030 	ldr.w	r1, [r1, r0, lsl #3]
 801402a:	5dc9      	ldrb	r1, [r1, r7]
 801402c:	2900      	cmp	r1, #0
 801402e:	f040 8082 	bne.w	8014136 <http_send+0x2da>
          ssi->tag_state = TAG_FOUND;
 8014032:	2302      	movs	r3, #2
          ssi->tag_index = 0;
 8014034:	8221      	strh	r1, [r4, #16]
          ssi->tag_state = TAG_FOUND;
 8014036:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
 801403a:	e783      	b.n	8013f44 <http_send+0xe8>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 801403c:	6821      	ldr	r1, [r4, #0]
 801403e:	7808      	ldrb	r0, [r1, #0]
 8014040:	283c      	cmp	r0, #60	; 0x3c
 8014042:	f000 81d7 	beq.w	80143f4 <http_send+0x598>
 8014046:	282f      	cmp	r0, #47	; 0x2f
 8014048:	f000 81dd 	beq.w	8014406 <http_send+0x5aa>
        ssi->parse_left--;
 801404c:	68e0      	ldr	r0, [r4, #12]
        ssi->parsed++;
 801404e:	3101      	adds	r1, #1
        ssi->parse_left--;
 8014050:	3801      	subs	r0, #1
        ssi->parsed++;
 8014052:	6021      	str	r1, [r4, #0]
        ssi->parse_left--;
 8014054:	60e0      	str	r0, [r4, #12]
 8014056:	e773      	b.n	8013f40 <http_send+0xe4>
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 8014058:	f894 8014 	ldrb.w	r8, [r4, #20]
 801405c:	4f4f      	ldr	r7, [pc, #316]	; (801419c <http_send+0x340>)
 801405e:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8014062:	687f      	ldr	r7, [r7, #4]
 8014064:	f817 8001 	ldrb.w	r8, [r7, r1]
 8014068:	45e0      	cmp	r8, ip
 801406a:	f000 809b 	beq.w	80141a4 <http_send+0x348>
          ssi->parse_left--;
 801406e:	f8c4 e00c 	str.w	lr, [r4, #12]
          ssi->tag_state = TAG_NONE;
 8014072:	2300      	movs	r3, #0
          ssi->parsed++;
 8014074:	6020      	str	r0, [r4, #0]
          ssi->tag_state = TAG_NONE;
 8014076:	f884 a11e 	strb.w	sl, [r4, #286]	; 0x11e
 801407a:	e763      	b.n	8013f44 <http_send+0xe8>
          if (ssi->tag_index < ssi->tag_insert_len) {
 801407c:	8a21      	ldrh	r1, [r4, #16]
 801407e:	8a63      	ldrh	r3, [r4, #18]
 8014080:	4299      	cmp	r1, r3
 8014082:	f0c0 8189 	bcc.w	8014398 <http_send+0x53c>
              ssi->tag_index = 0;
 8014086:	f8a4 a010 	strh.w	sl, [r4, #16]
              ssi->parsed = ssi->tag_end;
 801408a:	2300      	movs	r3, #0
              ssi->tag_state = TAG_NONE;
 801408c:	f884 a11e 	strb.w	sl, [r4, #286]	; 0x11e
              ssi->parsed = ssi->tag_end;
 8014090:	6020      	str	r0, [r4, #0]
 8014092:	e757      	b.n	8013f44 <http_send+0xe8>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8014094:	4942      	ldr	r1, [pc, #264]	; (80141a0 <http_send+0x344>)
 8014096:	f100 0801 	add.w	r8, r0, #1
 801409a:	fa21 f707 	lsr.w	r7, r1, r7
 801409e:	68e1      	ldr	r1, [r4, #12]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80140a0:	07ff      	lsls	r7, r7, #31
 80140a2:	f101 31ff 	add.w	r1, r1, #4294967295
 80140a6:	9101      	str	r1, [sp, #4]
 80140a8:	d5a9      	bpl.n	8013ffe <http_send+0x1a2>
        ssi->parse_left--;
 80140aa:	60e1      	str	r1, [r4, #12]
        ssi->parsed++;
 80140ac:	f8c4 8000 	str.w	r8, [r4]
 80140b0:	e746      	b.n	8013f40 <http_send+0xe4>
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 80140b2:	4f3a      	ldr	r7, [pc, #232]	; (801419c <http_send+0x340>)
 80140b4:	7d21      	ldrb	r1, [r4, #20]
 80140b6:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 80140ba:	6849      	ldr	r1, [r1, #4]
 80140bc:	f891 8000 	ldrb.w	r8, [r1]
 80140c0:	45f0      	cmp	r8, lr
 80140c2:	d01a      	beq.n	80140fa <http_send+0x29e>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 80140c4:	f1ae 0e09 	sub.w	lr, lr, #9
 80140c8:	fa5f fe8e 	uxtb.w	lr, lr
 80140cc:	f1be 0f17 	cmp.w	lr, #23
 80140d0:	d90c      	bls.n	80140ec <http_send+0x290>
 80140d2:	68e1      	ldr	r1, [r4, #12]
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 80140d4:	f1bc 0f07 	cmp.w	ip, #7
 80140d8:	f100 0801 	add.w	r8, r0, #1
 80140dc:	f101 31ff 	add.w	r1, r1, #4294967295
 80140e0:	9101      	str	r1, [sp, #4]
 80140e2:	d995      	bls.n	8014010 <http_send+0x1b4>
            ssi->tag_state = TAG_NONE;
 80140e4:	2300      	movs	r3, #0
 80140e6:	f884 a11e 	strb.w	sl, [r4, #286]	; 0x11e
 80140ea:	e036      	b.n	801415a <http_send+0x2fe>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 80140ec:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80141a0 <http_send+0x344>
 80140f0:	fa28 fe0e 	lsr.w	lr, r8, lr
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 80140f4:	f01e 0f01 	tst.w	lr, #1
 80140f8:	d0eb      	beq.n	80140d2 <http_send+0x276>
            ssi->tag_state = TAG_LEADOUT;
 80140fa:	2303      	movs	r3, #3
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 80140fc:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
            ssi->tag_state = TAG_LEADOUT;
 8014100:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8014104:	f200 80a9 	bhi.w	801425a <http_send+0x3fe>
            ssi->tag_name[ssi->tag_index] = '\0';
 8014108:	eb04 030c 	add.w	r3, r4, ip
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 801410c:	f884 c015 	strb.w	ip, [r4, #21]
 8014110:	f100 0801 	add.w	r8, r0, #1
            ssi->tag_name[ssi->tag_index] = '\0';
 8014114:	f883 a016 	strb.w	sl, [r3, #22]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 8014118:	780b      	ldrb	r3, [r1, #0]
 801411a:	7802      	ldrb	r2, [r0, #0]
 801411c:	429a      	cmp	r2, r3
 801411e:	f000 8092 	beq.w	8014246 <http_send+0x3ea>
 8014122:	68e1      	ldr	r1, [r4, #12]
              ssi->tag_index = 0;
 8014124:	f8a4 a010 	strh.w	sl, [r4, #16]
 8014128:	1e4b      	subs	r3, r1, #1
 801412a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801412e:	9301      	str	r3, [sp, #4]
 8014130:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
 8014134:	e011      	b.n	801415a <http_send+0x2fe>
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 8014136:	6820      	ldr	r0, [r4, #0]
 8014138:	f890 c000 	ldrb.w	ip, [r0]
 801413c:	458c      	cmp	ip, r1
 801413e:	f000 8128 	beq.w	8014392 <http_send+0x536>
            ssi->tag_state = TAG_NONE;
 8014142:	2300      	movs	r3, #0
 8014144:	f884 a11e 	strb.w	sl, [r4, #286]	; 0x11e
          ssi->parse_left--;
 8014148:	68e1      	ldr	r1, [r4, #12]
          ssi->parsed++;
 801414a:	3001      	adds	r0, #1
          ssi->parse_left--;
 801414c:	3901      	subs	r1, #1
          ssi->parsed++;
 801414e:	6020      	str	r0, [r4, #0]
          ssi->parse_left--;
 8014150:	60e1      	str	r1, [r4, #12]
 8014152:	e6f5      	b.n	8013f40 <http_send+0xe4>
            ssi->tag_state = TAG_NONE;
 8014154:	2300      	movs	r3, #0
 8014156:	f884 a11e 	strb.w	sl, [r4, #286]	; 0x11e
        ssi->parse_left--;
 801415a:	9901      	ldr	r1, [sp, #4]
 801415c:	e7a5      	b.n	80140aa <http_send+0x24e>
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 801415e:	b292      	uxth	r2, r2
 8014160:	f8ad 201e 	strh.w	r2, [sp, #30]
          if (len != 0) {
 8014164:	2a00      	cmp	r2, #0
 8014166:	f47f af11 	bne.w	8013f8c <http_send+0x130>
            if (ssi->tag_started <= hs->file) {
 801416a:	428b      	cmp	r3, r1
 801416c:	d805      	bhi.n	801417a <http_send+0x31e>
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
 801416e:	68a0      	ldr	r0, [r4, #8]
 8014170:	1ac3      	subs	r3, r0, r3
 8014172:	441a      	add	r2, r3
 8014174:	b292      	uxth	r2, r2
 8014176:	f8ad 201e 	strh.w	r2, [sp, #30]
            hs->left -= len;
 801417a:	6a68      	ldr	r0, [r5, #36]	; 0x24
            hs->file += len;
 801417c:	4411      	add	r1, r2
 801417e:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
            data_to_send = 1;
 8014182:	f04f 0b01 	mov.w	fp, #1
            hs->left -= len;
 8014186:	1a80      	subs	r0, r0, r2
            hs->file += len;
 8014188:	61a9      	str	r1, [r5, #24]
            hs->left -= len;
 801418a:	6268      	str	r0, [r5, #36]	; 0x24
 801418c:	e6d8      	b.n	8013f40 <http_send+0xe4>
 801418e:	bf00      	nop
 8014190:	0803cc18 	.word	0x0803cc18
 8014194:	0803cb00 	.word	0x0803cb00
 8014198:	0802697c 	.word	0x0802697c
 801419c:	0803ccf8 	.word	0x0803ccf8
 80141a0:	00800013 	.word	0x00800013
          ssi->tag_index++;
 80141a4:	3101      	adds	r1, #1
          ssi->parse_left--;
 80141a6:	f8c4 e00c 	str.w	lr, [r4, #12]
          ssi->parsed++;
 80141aa:	6020      	str	r0, [r4, #0]
          ssi->tag_index++;
 80141ac:	b289      	uxth	r1, r1
 80141ae:	8221      	strh	r1, [r4, #16]
          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 80141b0:	5c79      	ldrb	r1, [r7, r1]
 80141b2:	2900      	cmp	r1, #0
 80141b4:	f47f aec4 	bne.w	8013f40 <http_send+0xe4>
  ssi = hs->ssi;
 80141b8:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 80141bc:	f1b8 0f00 	cmp.w	r8, #0
 80141c0:	f000 812e 	beq.w	8014420 <http_send+0x5c4>
  if (httpd_ssi_handler
 80141c4:	4b9a      	ldr	r3, [pc, #616]	; (8014430 <http_send+0x5d4>)
 80141c6:	f108 0116 	add.w	r1, r8, #22
 80141ca:	681b      	ldr	r3, [r3, #0]
 80141cc:	9101      	str	r1, [sp, #4]
 80141ce:	9302      	str	r3, [sp, #8]
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d070      	beq.n	80142b6 <http_send+0x45a>
      && httpd_tags && httpd_num_tags
 80141d4:	4b97      	ldr	r3, [pc, #604]	; (8014434 <http_send+0x5d8>)
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d06c      	beq.n	80142b6 <http_send+0x45a>
 80141dc:	4a96      	ldr	r2, [pc, #600]	; (8014438 <http_send+0x5dc>)
 80141de:	6812      	ldr	r2, [r2, #0]
    for (tag = 0; tag < httpd_num_tags; tag++) {
 80141e0:	2a00      	cmp	r2, #0
 80141e2:	dd68      	ble.n	80142b6 <http_send+0x45a>
 80141e4:	2700      	movs	r7, #0
 80141e6:	3b04      	subs	r3, #4
 80141e8:	9505      	str	r5, [sp, #20]
 80141ea:	463d      	mov	r5, r7
 80141ec:	4617      	mov	r7, r2
 80141ee:	e9cd 4603 	strd	r4, r6, [sp, #12]
 80141f2:	461c      	mov	r4, r3
 80141f4:	460e      	mov	r6, r1
 80141f6:	e002      	b.n	80141fe <http_send+0x3a2>
 80141f8:	3501      	adds	r5, #1
 80141fa:	42af      	cmp	r7, r5
 80141fc:	d058      	beq.n	80142b0 <http_send+0x454>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 80141fe:	f854 1f04 	ldr.w	r1, [r4, #4]!
 8014202:	4630      	mov	r0, r6
 8014204:	f7ec f81c 	bl	8000240 <strcmp>
 8014208:	2800      	cmp	r0, #0
 801420a:	d1f5      	bne.n	80141f8 <http_send+0x39c>
 801420c:	462f      	mov	r7, r5
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 801420e:	22fe      	movs	r2, #254	; 0xfe
 8014210:	f108 011f 	add.w	r1, r8, #31
 8014214:	9b02      	ldr	r3, [sp, #8]
 8014216:	4638      	mov	r0, r7
 8014218:	9d05      	ldr	r5, [sp, #20]
 801421a:	e9dd 4603 	ldrd	r4, r6, [sp, #12]
 801421e:	4798      	blx	r3
 8014220:	f8a8 0012 	strh.w	r0, [r8, #18]
 8014224:	e082      	b.n	801432c <http_send+0x4d0>
      hs->file += len;
 8014226:	f8bd 101e 	ldrh.w	r1, [sp, #30]
      data_to_send = 1;
 801422a:	2701      	movs	r7, #1
      hs->left -= len;
 801422c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      hs->file += len;
 801422e:	69aa      	ldr	r2, [r5, #24]
      hs->left -= len;
 8014230:	1a5b      	subs	r3, r3, r1
      hs->file += len;
 8014232:	440a      	add	r2, r1
      hs->left -= len;
 8014234:	626b      	str	r3, [r5, #36]	; 0x24
    if (altcp_sndbuf(pcb) == 0) {
 8014236:	f8bb 3064 	ldrh.w	r3, [fp, #100]	; 0x64
      hs->file += len;
 801423a:	61aa      	str	r2, [r5, #24]
    if (altcp_sndbuf(pcb) == 0) {
 801423c:	2b00      	cmp	r3, #0
 801423e:	f47f ae38 	bne.w	8013eb2 <http_send+0x56>
 8014242:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014244:	e665      	b.n	8013f12 <http_send+0xb6>
              ssi->tag_index = 1;
 8014246:	2201      	movs	r2, #1
 8014248:	68e1      	ldr	r1, [r4, #12]
 801424a:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
 801424e:	8222      	strh	r2, [r4, #16]
 8014250:	1e4a      	subs	r2, r1, #1
 8014252:	9201      	str	r2, [sp, #4]
 8014254:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8014258:	e77f      	b.n	801415a <http_send+0x2fe>
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 801425a:	4b78      	ldr	r3, [pc, #480]	; (801443c <http_send+0x5e0>)
 801425c:	f240 523a 	movw	r2, #1338	; 0x53a
 8014260:	4977      	ldr	r1, [pc, #476]	; (8014440 <http_send+0x5e4>)
 8014262:	4878      	ldr	r0, [pc, #480]	; (8014444 <http_send+0x5e8>)
 8014264:	f00c fbb0 	bl	80209c8 <iprintf>
 8014268:	7d23      	ldrb	r3, [r4, #20]
 801426a:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801426e:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
 8014272:	6820      	ldr	r0, [r4, #0]
 8014274:	6879      	ldr	r1, [r7, #4]
 8014276:	e747      	b.n	8014108 <http_send+0x2ac>
 8014278:	465f      	mov	r7, fp
 801427a:	46cb      	mov	fp, r9
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 801427c:	6824      	ldr	r4, [r4, #0]
 801427e:	69a9      	ldr	r1, [r5, #24]
 8014280:	428c      	cmp	r4, r1
 8014282:	d9de      	bls.n	8014242 <http_send+0x3e6>
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8014284:	1a64      	subs	r4, r4, r1
 8014286:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801428a:	aa08      	add	r2, sp, #32
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 801428c:	4658      	mov	r0, fp
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 801428e:	429c      	cmp	r4, r3
 8014290:	bfa8      	it	ge
 8014292:	461c      	movge	r4, r3
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8014294:	2300      	movs	r3, #0
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8014296:	f822 4d02 	strh.w	r4, [r2, #-2]!
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 801429a:	f7ff fa8f 	bl	80137bc <http_write>
    if (err == ERR_OK) {
 801429e:	2800      	cmp	r0, #0
 80142a0:	f43f ae2e 	beq.w	8013f00 <http_send+0xa4>
 80142a4:	e7cd      	b.n	8014242 <http_send+0x3e6>
 80142a6:	6863      	ldr	r3, [r4, #4]
 80142a8:	69a9      	ldr	r1, [r5, #24]
 80142aa:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80142ae:	e75c      	b.n	801416a <http_send+0x30e>
 80142b0:	e9dd 4603 	ldrd	r4, r6, [sp, #12]
 80142b4:	9d05      	ldr	r5, [sp, #20]
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 80142b6:	9801      	ldr	r0, [sp, #4]
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 80142b8:	f108 071f 	add.w	r7, r8, #31
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 80142bc:	f7eb ffca 	bl	8000254 <strlen>
 80142c0:	2809      	cmp	r0, #9
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 80142c2:	f8df c194 	ldr.w	ip, [pc, #404]	; 8014458 <http_send+0x5fc>
 80142c6:	bf28      	it	cs
 80142c8:	2009      	movcs	r0, #9
 80142ca:	9002      	str	r0, [sp, #8]
 80142cc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80142d0:	f8bc c000 	ldrh.w	ip, [ip]
 80142d4:	f8c8 001f 	str.w	r0, [r8, #31]
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 80142d8:	f108 0031 	add.w	r0, r8, #49	; 0x31
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 80142dc:	f8a8 c02f 	strh.w	ip, [r8, #47]	; 0x2f
 80142e0:	f8c8 1023 	str.w	r1, [r8, #35]	; 0x23
 80142e4:	f8c8 2027 	str.w	r2, [r8, #39]	; 0x27
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 80142e8:	9901      	ldr	r1, [sp, #4]
 80142ea:	9a02      	ldr	r2, [sp, #8]
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 80142ec:	f8c8 302b 	str.w	r3, [r8, #43]	; 0x2b
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 80142f0:	f00b fbc5 	bl	801fa7e <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 80142f4:	9802      	ldr	r0, [sp, #8]
 80142f6:	4b54      	ldr	r3, [pc, #336]	; (8014448 <http_send+0x5ec>)
 80142f8:	f100 0131 	add.w	r1, r0, #49	; 0x31
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 80142fc:	eb08 0e00 	add.w	lr, r8, r0
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8014300:	f8b3 c004 	ldrh.w	ip, [r3, #4]
 8014304:	eb08 0201 	add.w	r2, r8, r1
 8014308:	6818      	ldr	r0, [r3, #0]
 801430a:	799b      	ldrb	r3, [r3, #6]
 801430c:	f848 0001 	str.w	r0, [r8, r1]
  len = strlen(ssi->tag_insert);
 8014310:	4638      	mov	r0, r7
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8014312:	f8a2 c004 	strh.w	ip, [r2, #4]
 8014316:	7193      	strb	r3, [r2, #6]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8014318:	f88e a038 	strb.w	sl, [lr, #56]	; 0x38
  len = strlen(ssi->tag_insert);
 801431c:	f7eb ff9a 	bl	8000254 <strlen>
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8014320:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  len = strlen(ssi->tag_insert);
 8014324:	4607      	mov	r7, r0
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8014326:	d273      	bcs.n	8014410 <http_send+0x5b4>
  ssi->tag_insert_len = (u16_t)len;
 8014328:	f8a8 7012 	strh.w	r7, [r8, #18]
            if (ssi->tag_end > hs->file) {
 801432c:	69a9      	ldr	r1, [r5, #24]
            ssi->tag_state = TAG_SENDING;
 801432e:	2304      	movs	r3, #4
            ssi->tag_index = 0;
 8014330:	f8a4 a010 	strh.w	sl, [r4, #16]
            ssi->tag_state = TAG_SENDING;
 8014334:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
            ssi->parsed = ssi->tag_started;
 8014338:	e9d4 0200 	ldrd	r0, r2, [r4]
            if (ssi->tag_end > hs->file) {
 801433c:	4288      	cmp	r0, r1
            ssi->tag_end = ssi->parsed;
 801433e:	60a0      	str	r0, [r4, #8]
            ssi->parsed = ssi->tag_started;
 8014340:	6022      	str	r2, [r4, #0]
            if (ssi->tag_end > hs->file) {
 8014342:	d962      	bls.n	801440a <http_send+0x5ae>
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8014344:	1a56      	subs	r6, r2, r1
 8014346:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801434a:	aa08      	add	r2, sp, #32
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 801434c:	4648      	mov	r0, r9
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 801434e:	429e      	cmp	r6, r3
 8014350:	bfa8      	it	ge
 8014352:	461e      	movge	r6, r3
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8014354:	2300      	movs	r3, #0
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8014356:	f822 6d02 	strh.w	r6, [r2, #-2]!
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 801435a:	f7ff fa2f 	bl	80137bc <http_write>
              if (err == ERR_OK) {
 801435e:	4606      	mov	r6, r0
 8014360:	2800      	cmp	r0, #0
 8014362:	f47f ae1d 	bne.w	8013fa0 <http_send+0x144>
                if (ssi->tag_started <= hs->file) {
 8014366:	6860      	ldr	r0, [r4, #4]
 8014368:	69ab      	ldr	r3, [r5, #24]
 801436a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801436e:	4298      	cmp	r0, r3
 8014370:	d805      	bhi.n	801437e <http_send+0x522>
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
 8014372:	68a1      	ldr	r1, [r4, #8]
 8014374:	1a09      	subs	r1, r1, r0
 8014376:	440a      	add	r2, r1
 8014378:	b292      	uxth	r2, r2
 801437a:	f8ad 201e 	strh.w	r2, [sp, #30]
                hs->left -= len;
 801437e:	6a69      	ldr	r1, [r5, #36]	; 0x24
                hs->file += len;
 8014380:	1898      	adds	r0, r3, r2
                data_to_send = 1;
 8014382:	f04f 0b01 	mov.w	fp, #1
 8014386:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
                hs->left -= len;
 801438a:	1a89      	subs	r1, r1, r2
                hs->file += len;
 801438c:	61a8      	str	r0, [r5, #24]
                hs->left -= len;
 801438e:	6269      	str	r1, [r5, #36]	; 0x24
 8014390:	e5d6      	b.n	8013f40 <http_send+0xe4>
            ssi->tag_index++;
 8014392:	3701      	adds	r7, #1
 8014394:	8227      	strh	r7, [r4, #16]
 8014396:	e6d7      	b.n	8014148 <http_send+0x2ec>
            len = (ssi->tag_insert_len - ssi->tag_index);
 8014398:	1a5e      	subs	r6, r3, r1
 801439a:	aa08      	add	r2, sp, #32
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 801439c:	311f      	adds	r1, #31
 801439e:	2301      	movs	r3, #1
            len = (ssi->tag_insert_len - ssi->tag_index);
 80143a0:	f822 6d02 	strh.w	r6, [r2, #-2]!
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 80143a4:	4648      	mov	r0, r9
 80143a6:	4421      	add	r1, r4
 80143a8:	f7ff fa08 	bl	80137bc <http_write>
              ssi->tag_index += len;
 80143ac:	f8bd 201e 	ldrh.w	r2, [sp, #30]
            if (err == ERR_OK) {
 80143b0:	4606      	mov	r6, r0
 80143b2:	2800      	cmp	r0, #0
 80143b4:	f47f adf6 	bne.w	8013fa4 <http_send+0x148>
              ssi->tag_index += len;
 80143b8:	8a21      	ldrh	r1, [r4, #16]
              data_to_send = 1;
 80143ba:	f04f 0b01 	mov.w	fp, #1
 80143be:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
              ssi->tag_index += len;
 80143c2:	4411      	add	r1, r2
 80143c4:	8221      	strh	r1, [r4, #16]
 80143c6:	e5bb      	b.n	8013f40 <http_send+0xe4>
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 80143c8:	4b1c      	ldr	r3, [pc, #112]	; (801443c <http_send+0x5e0>)
 80143ca:	f240 52ac 	movw	r2, #1452	; 0x5ac
 80143ce:	491f      	ldr	r1, [pc, #124]	; (801444c <http_send+0x5f0>)
 80143d0:	481c      	ldr	r0, [pc, #112]	; (8014444 <http_send+0x5e8>)
 80143d2:	f00c faf9 	bl	80209c8 <iprintf>
 80143d6:	6863      	ldr	r3, [r4, #4]
 80143d8:	69a9      	ldr	r1, [r5, #24]
 80143da:	e5cd      	b.n	8013f78 <http_send+0x11c>
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 80143dc:	2b04      	cmp	r3, #4
 80143de:	465f      	mov	r7, fp
 80143e0:	46cb      	mov	fp, r9
 80143e2:	f43f af2e 	beq.w	8014242 <http_send+0x3e6>
 80143e6:	e749      	b.n	801427c <http_send+0x420>
 80143e8:	465f      	mov	r7, fp
 80143ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80143ec:	46cb      	mov	fp, r9
 80143ee:	e590      	b.n	8013f12 <http_send+0xb6>
  u8_t data_to_send = 0;
 80143f0:	4627      	mov	r7, r4
 80143f2:	e726      	b.n	8014242 <http_send+0x3e6>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 80143f4:	2300      	movs	r3, #0
            ssi->tag_state = TAG_LEADIN;
 80143f6:	2001      	movs	r0, #1
            ssi->tag_type = tag_type;
 80143f8:	7523      	strb	r3, [r4, #20]
            ssi->tag_started = ssi->parsed;
 80143fa:	6061      	str	r1, [r4, #4]
 80143fc:	4603      	mov	r3, r0
            ssi->tag_state = TAG_LEADIN;
 80143fe:	f884 011e 	strb.w	r0, [r4, #286]	; 0x11e
            ssi->tag_index = 1;
 8014402:	8220      	strh	r0, [r4, #16]
 8014404:	e622      	b.n	801404c <http_send+0x1f0>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8014406:	2301      	movs	r3, #1
 8014408:	e7f5      	b.n	80143f6 <http_send+0x59a>
 801440a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801440e:	e59d      	b.n	8013f4c <http_send+0xf0>
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8014410:	4b0a      	ldr	r3, [pc, #40]	; (801443c <http_send+0x5e0>)
 8014412:	f240 323f 	movw	r2, #831	; 0x33f
 8014416:	490e      	ldr	r1, [pc, #56]	; (8014450 <http_send+0x5f4>)
 8014418:	480a      	ldr	r0, [pc, #40]	; (8014444 <http_send+0x5e8>)
 801441a:	f00c fad5 	bl	80209c8 <iprintf>
 801441e:	e783      	b.n	8014328 <http_send+0x4cc>
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8014420:	4b06      	ldr	r3, [pc, #24]	; (801443c <http_send+0x5e0>)
 8014422:	f240 3206 	movw	r2, #774	; 0x306
 8014426:	490b      	ldr	r1, [pc, #44]	; (8014454 <http_send+0x5f8>)
 8014428:	4806      	ldr	r0, [pc, #24]	; (8014444 <http_send+0x5e8>)
 801442a:	f00c facd 	bl	80209c8 <iprintf>
 801442e:	e6c9      	b.n	80141c4 <http_send+0x368>
 8014430:	20021e30 	.word	0x20021e30
 8014434:	20021e34 	.word	0x20021e34
 8014438:	20021a2c 	.word	0x20021a2c
 801443c:	0803cb00 	.word	0x0803cb00
 8014440:	0803cc50 	.word	0x0803cc50
 8014444:	0802697c 	.word	0x0802697c
 8014448:	0803cc88 	.word	0x0803cc88
 801444c:	0803cca0 	.word	0x0803cca0
 8014450:	0803cc90 	.word	0x0803cc90
 8014454:	0803cc68 	.word	0x0803cc68
 8014458:	0803cc74 	.word	0x0803cc74

0801445c <http_sent>:
  if (hs == NULL) {
 801445c:	b150      	cbz	r0, 8014474 <http_sent+0x18>
  hs->retries = 0;
 801445e:	2200      	movs	r2, #0
{
 8014460:	b508      	push	{r3, lr}
 8014462:	4603      	mov	r3, r0
 8014464:	4608      	mov	r0, r1
  hs->retries = 0;
 8014466:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  http_send(pcb, hs);
 801446a:	4619      	mov	r1, r3
 801446c:	f7ff fcf6 	bl	8013e5c <http_send>
}
 8014470:	2000      	movs	r0, #0
 8014472:	bd08      	pop	{r3, pc}
 8014474:	2000      	movs	r0, #0
 8014476:	4770      	bx	lr

08014478 <http_poll>:
{
 8014478:	b510      	push	{r4, lr}
 801447a:	460c      	mov	r4, r1
  if (hs == NULL) {
 801447c:	b1a8      	cbz	r0, 80144aa <http_poll+0x32>
    hs->retries++;
 801447e:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8014482:	3301      	adds	r3, #1
 8014484:	b2db      	uxtb	r3, r3
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8014486:	2b04      	cmp	r3, #4
    hs->retries++;
 8014488:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 801448c:	d019      	beq.n	80144c2 <http_poll+0x4a>
    if (hs->handle) {
 801448e:	6943      	ldr	r3, [r0, #20]
 8014490:	b123      	cbz	r3, 801449c <http_poll+0x24>
      if (http_send(pcb, hs)) {
 8014492:	4601      	mov	r1, r0
 8014494:	4620      	mov	r0, r4
 8014496:	f7ff fce1 	bl	8013e5c <http_send>
 801449a:	b908      	cbnz	r0, 80144a0 <http_poll+0x28>
  return ERR_OK;
 801449c:	2000      	movs	r0, #0
}
 801449e:	bd10      	pop	{r4, pc}
        altcp_output(pcb);
 80144a0:	4620      	mov	r0, r4
 80144a2:	f006 fd0f 	bl	801aec4 <tcp_output>
  return ERR_OK;
 80144a6:	2000      	movs	r0, #0
 80144a8:	e7f9      	b.n	801449e <http_poll+0x26>
  return http_close_or_abort_conn(pcb, hs, 0);
 80144aa:	4601      	mov	r1, r0
 80144ac:	4620      	mov	r0, r4
 80144ae:	f7ff fc6d 	bl	8013d8c <http_close_or_abort_conn.constprop.9>
    if (closed == ERR_MEM) {
 80144b2:	3001      	adds	r0, #1
 80144b4:	d1f2      	bne.n	801449c <http_poll+0x24>
      altcp_abort(pcb);
 80144b6:	4620      	mov	r0, r4
 80144b8:	f003 fbfe 	bl	8017cb8 <tcp_abort>
      return ERR_ABRT;
 80144bc:	f06f 000c 	mvn.w	r0, #12
}
 80144c0:	bd10      	pop	{r4, pc}
  return http_close_or_abort_conn(pcb, hs, 0);
 80144c2:	4601      	mov	r1, r0
 80144c4:	4620      	mov	r0, r4
 80144c6:	f7ff fc61 	bl	8013d8c <http_close_or_abort_conn.constprop.9>
      return ERR_OK;
 80144ca:	2000      	movs	r0, #0
}
 80144cc:	bd10      	pop	{r4, pc}
 80144ce:	bf00      	nop

080144d0 <http_recv>:
{
 80144d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144d4:	4605      	mov	r5, r0
 80144d6:	b08d      	sub	sp, #52	; 0x34
 80144d8:	460e      	mov	r6, r1
 80144da:	4614      	mov	r4, r2
  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 80144dc:	b99b      	cbnz	r3, 8014506 <http_recv+0x36>
 80144de:	fab2 f782 	clz	r7, r2
 80144e2:	097f      	lsrs	r7, r7, #5
 80144e4:	b97f      	cbnz	r7, 8014506 <http_recv+0x36>
 80144e6:	8911      	ldrh	r1, [r2, #8]
 80144e8:	b1b8      	cbz	r0, 801451a <http_recv+0x4a>
    altcp_recved(pcb, p->tot_len);
 80144ea:	4630      	mov	r0, r6
 80144ec:	f002 ff08 	bl	8017300 <tcp_recved>
  if (hs->post_content_len_left > 0) {
 80144f0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80144f2:	b9cb      	cbnz	r3, 8014528 <http_recv+0x58>
    if (hs->handle == NULL) {
 80144f4:	696f      	ldr	r7, [r5, #20]
 80144f6:	b32f      	cbz	r7, 8014544 <http_recv+0x74>
      pbuf_free(p);
 80144f8:	4620      	mov	r0, r4
 80144fa:	f002 f90d 	bl	8016718 <pbuf_free>
}
 80144fe:	2000      	movs	r0, #0
 8014500:	b00d      	add	sp, #52	; 0x34
 8014502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (p != NULL) {
 8014506:	b93c      	cbnz	r4, 8014518 <http_recv+0x48>
  return http_close_or_abort_conn(pcb, hs, 0);
 8014508:	4629      	mov	r1, r5
 801450a:	4630      	mov	r0, r6
 801450c:	f7ff fc3e 	bl	8013d8c <http_close_or_abort_conn.constprop.9>
}
 8014510:	2000      	movs	r0, #0
 8014512:	b00d      	add	sp, #52	; 0x34
 8014514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014518:	8921      	ldrh	r1, [r4, #8]
      altcp_recved(pcb, p->tot_len);
 801451a:	4630      	mov	r0, r6
 801451c:	f002 fef0 	bl	8017300 <tcp_recved>
      pbuf_free(p);
 8014520:	4620      	mov	r0, r4
 8014522:	f002 f8f9 	bl	8016718 <pbuf_free>
 8014526:	e7ef      	b.n	8014508 <http_recv+0x38>
    hs->retries = 0;
 8014528:	f885 7028 	strb.w	r7, [r5, #40]	; 0x28
    http_post_rxpbuf(hs, p);
 801452c:	4621      	mov	r1, r4
 801452e:	4628      	mov	r0, r5
 8014530:	f7ff fbca 	bl	8013cc8 <http_post_rxpbuf>
    if (hs->post_content_len_left == 0) {
 8014534:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8014536:	2b00      	cmp	r3, #0
 8014538:	d1ea      	bne.n	8014510 <http_recv+0x40>
      http_send(pcb, hs);
 801453a:	4629      	mov	r1, r5
 801453c:	4630      	mov	r0, r6
 801453e:	f7ff fc8d 	bl	8013e5c <http_send>
 8014542:	e7e5      	b.n	8014510 <http_recv+0x40>
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8014544:	69ab      	ldr	r3, [r5, #24]
 8014546:	6a28      	ldr	r0, [r5, #32]
 8014548:	2b00      	cmp	r3, #0
 801454a:	f040 814b 	bne.w	80147e4 <http_recv+0x314>
  if (hs->req == NULL) {
 801454e:	2800      	cmp	r0, #0
 8014550:	f000 80e9 	beq.w	8014726 <http_recv+0x256>
    pbuf_cat(hs->req, p);
 8014554:	4621      	mov	r1, r4
 8014556:	f002 fa67 	bl	8016a28 <pbuf_cat>
  pbuf_ref(p);
 801455a:	4620      	mov	r0, r4
 801455c:	f002 fa50 	bl	8016a00 <pbuf_ref>
  if (hs->req->next != NULL) {
 8014560:	6a28      	ldr	r0, [r5, #32]
 8014562:	6803      	ldr	r3, [r0, #0]
 8014564:	2b00      	cmp	r3, #0
 8014566:	f000 8110 	beq.w	801478a <http_recv+0x2ba>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 801456a:	8907      	ldrh	r7, [r0, #8]
 801456c:	f240 32ff 	movw	r2, #1023	; 0x3ff
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8014570:	49bb      	ldr	r1, [pc, #748]	; (8014860 <http_recv+0x390>)
 8014572:	2300      	movs	r3, #0
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8014574:	4297      	cmp	r7, r2
    data = httpd_req_buf;
 8014576:	4688      	mov	r8, r1
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8014578:	bf28      	it	cs
 801457a:	4617      	movcs	r7, r2
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 801457c:	463a      	mov	r2, r7
 801457e:	f002 fb5b 	bl	8016c38 <pbuf_copy_partial>
  if (data_len >= MIN_REQ_LEN) {
 8014582:	2f06      	cmp	r7, #6
 8014584:	f240 80d1 	bls.w	801472a <http_recv+0x25a>
    crlf = lwip_strnstr(data, CRLF, data_len);
 8014588:	463a      	mov	r2, r7
 801458a:	49b6      	ldr	r1, [pc, #728]	; (8014864 <http_recv+0x394>)
 801458c:	4640      	mov	r0, r8
 801458e:	f000 fa5b 	bl	8014a48 <lwip_strnstr>
    if (crlf != NULL) {
 8014592:	2800      	cmp	r0, #0
 8014594:	f000 80c9 	beq.w	801472a <http_recv+0x25a>
      if (!strncmp(data, "GET ", 4)) {
 8014598:	2204      	movs	r2, #4
 801459a:	49b3      	ldr	r1, [pc, #716]	; (8014868 <http_recv+0x398>)
 801459c:	4640      	mov	r0, r8
 801459e:	f00d f98f 	bl	80218c0 <strncmp>
 80145a2:	9005      	str	r0, [sp, #20]
 80145a4:	2800      	cmp	r0, #0
 80145a6:	f040 80fa 	bne.w	801479e <http_recv+0x2ce>
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 80145aa:	f1a7 0a04 	sub.w	sl, r7, #4
 80145ae:	f108 0b04 	add.w	fp, r8, #4
        sp1 = data + 3;
 80145b2:	f108 0303 	add.w	r3, r8, #3
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 80145b6:	49ad      	ldr	r1, [pc, #692]	; (801486c <http_recv+0x39c>)
 80145b8:	fa1f fa8a 	uxth.w	sl, sl
 80145bc:	4658      	mov	r0, fp
        sp1 = data + 3;
 80145be:	9304      	str	r3, [sp, #16]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 80145c0:	4652      	mov	r2, sl
 80145c2:	f000 fa41 	bl	8014a48 <lwip_strnstr>
      if (sp2 == NULL) {
 80145c6:	9b05      	ldr	r3, [sp, #20]
 80145c8:	4681      	mov	r9, r0
 80145ca:	2800      	cmp	r0, #0
 80145cc:	f000 811b 	beq.w	8014806 <http_recv+0x336>
      int is_09 = 0;
 80145d0:	469a      	mov	sl, r3
 80145d2:	9305      	str	r3, [sp, #20]
      if ((sp2 != 0) && (sp2 > sp1)) {
 80145d4:	f1b9 0f00 	cmp.w	r9, #0
 80145d8:	f000 80a7 	beq.w	801472a <http_recv+0x25a>
 80145dc:	9b04      	ldr	r3, [sp, #16]
 80145de:	4599      	cmp	r9, r3
 80145e0:	f240 80a3 	bls.w	801472a <http_recv+0x25a>
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 80145e4:	463a      	mov	r2, r7
 80145e6:	49a2      	ldr	r1, [pc, #648]	; (8014870 <http_recv+0x3a0>)
 80145e8:	4640      	mov	r0, r8
 80145ea:	f000 fa2d 	bl	8014a48 <lwip_strnstr>
 80145ee:	2800      	cmp	r0, #0
 80145f0:	f000 809b 	beq.w	801472a <http_recv+0x25a>
          if (!is_09 && (lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE, data_len) ||
 80145f4:	9b05      	ldr	r3, [sp, #20]
 80145f6:	f1ba 0f00 	cmp.w	sl, #0
 80145fa:	f000 8115 	beq.w	8014828 <http_recv+0x358>
            hs->keepalive = 0;
 80145fe:	2200      	movs	r2, #0
 8014600:	f885 2029 	strb.w	r2, [r5, #41]	; 0x29
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8014604:	eba9 020b 	sub.w	r2, r9, fp
          *sp1 = 0;
 8014608:	2100      	movs	r1, #0
 801460a:	9804      	ldr	r0, [sp, #16]
          uri[uri_len] = 0;
 801460c:	b292      	uxth	r2, r2
          *sp1 = 0;
 801460e:	7001      	strb	r1, [r0, #0]
          uri[uri_len] = 0;
 8014610:	eb0b 0002 	add.w	r0, fp, r2
 8014614:	f80b 1002 	strb.w	r1, [fp, r2]
 8014618:	9005      	str	r0, [sp, #20]
          if (is_post) {
 801461a:	2b00      	cmp	r3, #0
 801461c:	f000 80ec 	beq.w	80147f8 <http_recv+0x328>
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 8014620:	f109 0301 	add.w	r3, r9, #1
 8014624:	4992      	ldr	r1, [pc, #584]	; (8014870 <http_recv+0x3a0>)
            struct pbuf *q = hs->req;
 8014626:	f8d5 a020 	ldr.w	sl, [r5, #32]
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 801462a:	eba3 0208 	sub.w	r2, r3, r8
 801462e:	4618      	mov	r0, r3
 8014630:	9306      	str	r3, [sp, #24]
 8014632:	1aba      	subs	r2, r7, r2
 8014634:	f000 fa08 	bl	8014a48 <lwip_strnstr>
  if (crlfcrlf != NULL) {
 8014638:	9008      	str	r0, [sp, #32]
 801463a:	2800      	cmp	r0, #0
 801463c:	f000 8166 	beq.w	801490c <http_recv+0x43c>
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 8014640:	9b06      	ldr	r3, [sp, #24]
 8014642:	498c      	ldr	r1, [pc, #560]	; (8014874 <http_recv+0x3a4>)
 8014644:	1ac2      	subs	r2, r0, r3
 8014646:	4618      	mov	r0, r3
 8014648:	f000 f9fe 	bl	8014a48 <lwip_strnstr>
    if (scontent_len != NULL) {
 801464c:	2800      	cmp	r0, #0
 801464e:	f000 80ff 	beq.w	8014850 <http_recv+0x380>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 8014652:	f100 0310 	add.w	r3, r0, #16
 8014656:	9009      	str	r0, [sp, #36]	; 0x24
 8014658:	220a      	movs	r2, #10
 801465a:	4982      	ldr	r1, [pc, #520]	; (8014864 <http_recv+0x394>)
 801465c:	4618      	mov	r0, r3
 801465e:	9307      	str	r3, [sp, #28]
 8014660:	f000 f9f2 	bl	8014a48 <lwip_strnstr>
      if (scontent_len_end != NULL) {
 8014664:	2800      	cmp	r0, #0
 8014666:	f000 80f3 	beq.w	8014850 <http_recv+0x380>
        content_len = atoi(content_len_num);
 801466a:	9b07      	ldr	r3, [sp, #28]
 801466c:	4618      	mov	r0, r3
 801466e:	f00b f895 	bl	801f79c <atoi>
        if (content_len == 0) {
 8014672:	1e01      	subs	r1, r0, #0
 8014674:	9107      	str	r1, [sp, #28]
 8014676:	f000 80e3 	beq.w	8014840 <http_recv+0x370>
        if (content_len >= 0) {
 801467a:	f2c0 80e9 	blt.w	8014850 <http_recv+0x380>
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 801467e:	9b08      	ldr	r3, [sp, #32]
          u8_t post_auto_wnd = 1;
 8014680:	2001      	movs	r0, #1
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8014682:	9a06      	ldr	r2, [sp, #24]
          u8_t post_auto_wnd = 1;
 8014684:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8014688:	3304      	adds	r3, #4
          http_uri_buf[0] = 0;
 801468a:	f04f 0e00 	mov.w	lr, #0
          u8_t post_auto_wnd = 1;
 801468e:	f80c 0d01 	strb.w	r0, [ip, #-1]!
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8014692:	4659      	mov	r1, fp
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8014694:	eba3 0808 	sub.w	r8, r3, r8
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8014698:	1a9b      	subs	r3, r3, r2
          http_uri_buf[0] = 0;
 801469a:	4877      	ldr	r0, [pc, #476]	; (8014878 <http_recv+0x3a8>)
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 801469c:	f04f 0b3f 	mov.w	fp, #63	; 0x3f
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 80146a0:	4547      	cmp	r7, r8
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 80146a2:	9a06      	ldr	r2, [sp, #24]
          http_uri_buf[0] = 0;
 80146a4:	f880 e000 	strb.w	lr, [r0]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 80146a8:	bfb4      	ite	lt
 80146aa:	46b8      	movlt	r8, r7
 80146ac:	fa1f f888 	uxthge.w	r8, r8
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 80146b0:	429f      	cmp	r7, r3
 80146b2:	bfa8      	it	ge
 80146b4:	b29f      	uxthge	r7, r3
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 80146b6:	463b      	mov	r3, r7
          http_uri_buf[0] = 0;
 80146b8:	4607      	mov	r7, r0
          *crlfcrlf = 0;
 80146ba:	9808      	ldr	r0, [sp, #32]
 80146bc:	f880 e000 	strb.w	lr, [r0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 80146c0:	4628      	mov	r0, r5
 80146c2:	9701      	str	r7, [sp, #4]
 80146c4:	9f07      	ldr	r7, [sp, #28]
 80146c6:	f8cd c00c 	str.w	ip, [sp, #12]
 80146ca:	9700      	str	r7, [sp, #0]
 80146cc:	f8cd b008 	str.w	fp, [sp, #8]
 80146d0:	f7f0 fe66 	bl	80053a0 <httpd_post_begin>
          if (err == ERR_OK) {
 80146d4:	2800      	cmp	r0, #0
 80146d6:	f040 80f9 	bne.w	80148cc <http_recv+0x3fc>
            hs->post_content_len_left = (u32_t)content_len;
 80146da:	632f      	str	r7, [r5, #48]	; 0x30
            while ((q != NULL) && (q->len <= start_offset)) {
 80146dc:	f1ba 0f00 	cmp.w	sl, #0
 80146e0:	d011      	beq.n	8014706 <http_recv+0x236>
 80146e2:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 80146e6:	4598      	cmp	r8, r3
 80146e8:	f0c0 80d5 	bcc.w	8014896 <http_recv+0x3c6>
 80146ec:	4652      	mov	r2, sl
 80146ee:	e003      	b.n	80146f8 <http_recv+0x228>
 80146f0:	8953      	ldrh	r3, [r2, #10]
 80146f2:	4543      	cmp	r3, r8
 80146f4:	f200 80ce 	bhi.w	8014894 <http_recv+0x3c4>
              start_offset -= q->len;
 80146f8:	eba8 0803 	sub.w	r8, r8, r3
              q = q->next;
 80146fc:	6812      	ldr	r2, [r2, #0]
              start_offset -= q->len;
 80146fe:	fa1f f888 	uxth.w	r8, r8
            while ((q != NULL) && (q->len <= start_offset)) {
 8014702:	2a00      	cmp	r2, #0
 8014704:	d1f4      	bne.n	80146f0 <http_recv+0x220>
            } else if (hs->post_content_len_left == 0) {
 8014706:	9b07      	ldr	r3, [sp, #28]
 8014708:	2b00      	cmp	r3, #0
 801470a:	f000 80f4 	beq.w	80148f6 <http_recv+0x426>
        if (hs->req != NULL) {
 801470e:	6a28      	ldr	r0, [r5, #32]
 8014710:	2800      	cmp	r0, #0
 8014712:	f000 80ec 	beq.w	80148ee <http_recv+0x41e>
          pbuf_free(hs->req);
 8014716:	f001 ffff 	bl	8016718 <pbuf_free>
          hs->req = NULL;
 801471a:	2300      	movs	r3, #0
      pbuf_free(p);
 801471c:	4620      	mov	r0, r4
          hs->req = NULL;
 801471e:	622b      	str	r3, [r5, #32]
      pbuf_free(p);
 8014720:	f001 fffa 	bl	8016718 <pbuf_free>
 8014724:	e706      	b.n	8014534 <http_recv+0x64>
    hs->req = p;
 8014726:	622c      	str	r4, [r5, #32]
 8014728:	e717      	b.n	801455a <http_recv+0x8a>
  clen = pbuf_clen(hs->req);
 801472a:	6a28      	ldr	r0, [r5, #32]
 801472c:	f002 f95c 	bl	80169e8 <pbuf_clen>
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8014730:	6a2b      	ldr	r3, [r5, #32]
 8014732:	891b      	ldrh	r3, [r3, #8]
 8014734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014738:	d202      	bcs.n	8014740 <http_recv+0x270>
 801473a:	2805      	cmp	r0, #5
 801473c:	f67f aedc 	bls.w	80144f8 <http_recv+0x28>
    return http_find_error_file(hs, 400);
 8014740:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8014744:	4628      	mov	r0, r5
 8014746:	f7ff fae5 	bl	8013d14 <http_find_error_file>
 801474a:	4607      	mov	r7, r0
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 801474c:	f107 0310 	add.w	r3, r7, #16
 8014750:	b2db      	uxtb	r3, r3
 8014752:	2b10      	cmp	r3, #16
 8014754:	d91d      	bls.n	8014792 <http_recv+0x2c2>
 8014756:	4b49      	ldr	r3, [pc, #292]	; (801487c <http_recv+0x3ac>)
 8014758:	f640 2205 	movw	r2, #2565	; 0xa05
 801475c:	4948      	ldr	r1, [pc, #288]	; (8014880 <http_recv+0x3b0>)
 801475e:	4849      	ldr	r0, [pc, #292]	; (8014884 <http_recv+0x3b4>)
 8014760:	f00c f932 	bl	80209c8 <iprintf>
      if (parsed != ERR_INPROGRESS) {
 8014764:	1d7b      	adds	r3, r7, #5
 8014766:	f43f aec7 	beq.w	80144f8 <http_recv+0x28>
        if (hs->req != NULL) {
 801476a:	6a28      	ldr	r0, [r5, #32]
 801476c:	b118      	cbz	r0, 8014776 <http_recv+0x2a6>
          pbuf_free(hs->req);
 801476e:	f001 ffd3 	bl	8016718 <pbuf_free>
          hs->req = NULL;
 8014772:	2300      	movs	r3, #0
 8014774:	622b      	str	r3, [r5, #32]
      pbuf_free(p);
 8014776:	4620      	mov	r0, r4
 8014778:	f001 ffce 	bl	8016718 <pbuf_free>
      if (parsed == ERR_OK) {
 801477c:	2f00      	cmp	r7, #0
 801477e:	f43f aed9 	beq.w	8014534 <http_recv+0x64>
      } else if (parsed == ERR_ARG) {
 8014782:	3710      	adds	r7, #16
 8014784:	f43f aec0 	beq.w	8014508 <http_recv+0x38>
 8014788:	e6c2      	b.n	8014510 <http_recv+0x40>
    data = (char *)p->payload;
 801478a:	f8d4 8004 	ldr.w	r8, [r4, #4]
    data_len = p->len;
 801478e:	8967      	ldrh	r7, [r4, #10]
 8014790:	e6f7      	b.n	8014582 <http_recv+0xb2>
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8014792:	4a3d      	ldr	r2, [pc, #244]	; (8014888 <http_recv+0x3b8>)
 8014794:	fa22 f303 	lsr.w	r3, r2, r3
 8014798:	07da      	lsls	r2, r3, #31
 801479a:	d4e3      	bmi.n	8014764 <http_recv+0x294>
 801479c:	e7db      	b.n	8014756 <http_recv+0x286>
      } else if (!strncmp(data, "POST ", 5)) {
 801479e:	2205      	movs	r2, #5
 80147a0:	493a      	ldr	r1, [pc, #232]	; (801488c <http_recv+0x3bc>)
 80147a2:	4640      	mov	r0, r8
 80147a4:	f00d f88c 	bl	80218c0 <strncmp>
 80147a8:	4682      	mov	sl, r0
 80147aa:	b988      	cbnz	r0, 80147d0 <http_recv+0x300>
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 80147ac:	1f7b      	subs	r3, r7, #5
        sp1 = data + 4;
 80147ae:	f108 0204 	add.w	r2, r8, #4
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 80147b2:	f108 0b05 	add.w	fp, r8, #5
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 80147b6:	492d      	ldr	r1, [pc, #180]	; (801486c <http_recv+0x39c>)
 80147b8:	b29b      	uxth	r3, r3
        sp1 = data + 4;
 80147ba:	9204      	str	r2, [sp, #16]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 80147bc:	4658      	mov	r0, fp
 80147be:	461a      	mov	r2, r3
 80147c0:	9305      	str	r3, [sp, #20]
 80147c2:	f000 f941 	bl	8014a48 <lwip_strnstr>
      if (sp2 == NULL) {
 80147c6:	9b05      	ldr	r3, [sp, #20]
 80147c8:	4681      	mov	r9, r0
 80147ca:	b338      	cbz	r0, 801481c <http_recv+0x34c>
        is_post = 1;
 80147cc:	2301      	movs	r3, #1
 80147ce:	e700      	b.n	80145d2 <http_recv+0x102>
        data[4] = 0;
 80147d0:	2300      	movs	r3, #0
        return http_find_error_file(hs, 501);
 80147d2:	f240 11f5 	movw	r1, #501	; 0x1f5
 80147d6:	4628      	mov	r0, r5
        data[4] = 0;
 80147d8:	f888 3004 	strb.w	r3, [r8, #4]
        return http_find_error_file(hs, 501);
 80147dc:	f7ff fa9a 	bl	8013d14 <http_find_error_file>
 80147e0:	4607      	mov	r7, r0
 80147e2:	e7b3      	b.n	801474c <http_recv+0x27c>
        if (hs->req != NULL) {
 80147e4:	2800      	cmp	r0, #0
 80147e6:	f43f ae87 	beq.w	80144f8 <http_recv+0x28>
          pbuf_free(hs->req);
 80147ea:	f001 ff95 	bl	8016718 <pbuf_free>
          hs->req = NULL;
 80147ee:	622f      	str	r7, [r5, #32]
      pbuf_free(p);
 80147f0:	4620      	mov	r0, r4
 80147f2:	f001 ff91 	bl	8016718 <pbuf_free>
 80147f6:	e68b      	b.n	8014510 <http_recv+0x40>
            return http_find_file(hs, uri, is_09);
 80147f8:	4652      	mov	r2, sl
 80147fa:	4659      	mov	r1, fp
 80147fc:	4628      	mov	r0, r5
 80147fe:	f7ff f979 	bl	8013af4 <http_find_file>
 8014802:	4607      	mov	r7, r0
 8014804:	e7a2      	b.n	801474c <http_recv+0x27c>
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8014806:	4652      	mov	r2, sl
 8014808:	4916      	ldr	r1, [pc, #88]	; (8014864 <http_recv+0x394>)
 801480a:	4658      	mov	r0, fp
 801480c:	9305      	str	r3, [sp, #20]
        is_09 = 1;
 801480e:	f04f 0a01 	mov.w	sl, #1
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8014812:	f000 f919 	bl	8014a48 <lwip_strnstr>
 8014816:	9b05      	ldr	r3, [sp, #20]
 8014818:	4681      	mov	r9, r0
 801481a:	e6da      	b.n	80145d2 <http_recv+0x102>
 801481c:	461a      	mov	r2, r3
 801481e:	4658      	mov	r0, fp
 8014820:	4910      	ldr	r1, [pc, #64]	; (8014864 <http_recv+0x394>)
 8014822:	f000 f911 	bl	8014a48 <lwip_strnstr>
 8014826:	e78b      	b.n	8014740 <http_recv+0x270>
          if (!is_09 && (lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE, data_len) ||
 8014828:	463a      	mov	r2, r7
 801482a:	4919      	ldr	r1, [pc, #100]	; (8014890 <http_recv+0x3c0>)
 801482c:	4640      	mov	r0, r8
 801482e:	f000 f90b 	bl	8014a48 <lwip_strnstr>
 8014832:	9b05      	ldr	r3, [sp, #20]
 8014834:	2800      	cmp	r0, #0
 8014836:	d050      	beq.n	80148da <http_recv+0x40a>
            hs->keepalive = 1;
 8014838:	2201      	movs	r2, #1
 801483a:	f885 2029 	strb.w	r2, [r5, #41]	; 0x29
 801483e:	e6e1      	b.n	8014604 <http_recv+0x134>
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 8014840:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014842:	7c13      	ldrb	r3, [r2, #16]
 8014844:	2b30      	cmp	r3, #48	; 0x30
 8014846:	d103      	bne.n	8014850 <http_recv+0x380>
 8014848:	7c53      	ldrb	r3, [r2, #17]
 801484a:	2b0d      	cmp	r3, #13
 801484c:	f43f af17 	beq.w	801467e <http_recv+0x1ae>
              *sp1 = ' ';
 8014850:	2320      	movs	r3, #32
 8014852:	9a04      	ldr	r2, [sp, #16]
 8014854:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 8014856:	9a05      	ldr	r2, [sp, #20]
              *sp2 = ' ';
 8014858:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 801485c:	7013      	strb	r3, [r2, #0]
 801485e:	e76f      	b.n	8014740 <http_recv+0x270>
 8014860:	20021a30 	.word	0x20021a30
 8014864:	08025ac0 	.word	0x08025ac0
 8014868:	0803cb98 	.word	0x0803cb98
 801486c:	080261a0 	.word	0x080261a0
 8014870:	080249fc 	.word	0x080249fc
 8014874:	0803cbd8 	.word	0x0803cbd8
 8014878:	200219ec 	.word	0x200219ec
 801487c:	0803cb00 	.word	0x0803cb00
 8014880:	0803cbec 	.word	0x0803cbec
 8014884:	0802697c 	.word	0x0802697c
 8014888:	00010901 	.word	0x00010901
 801488c:	0803cba0 	.word	0x0803cba0
 8014890:	0803cba8 	.word	0x0803cba8
 8014894:	4692      	mov	sl, r2
              pbuf_remove_header(q, start_offset);
 8014896:	4641      	mov	r1, r8
 8014898:	4650      	mov	r0, sl
 801489a:	f001 ff01 	bl	80166a0 <pbuf_remove_header>
              pbuf_ref(q);
 801489e:	4650      	mov	r0, sl
 80148a0:	f002 f8ae 	bl	8016a00 <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 80148a4:	4651      	mov	r1, sl
 80148a6:	4628      	mov	r0, r5
 80148a8:	f7ff fa0e 	bl	8013cc8 <http_post_rxpbuf>
 80148ac:	4607      	mov	r7, r0
            if (err != ERR_OK) {
 80148ae:	2f00      	cmp	r7, #0
 80148b0:	f43f af2d 	beq.w	801470e <http_recv+0x23e>
              *sp1 = ' ';
 80148b4:	2320      	movs	r3, #32
 80148b6:	9a04      	ldr	r2, [sp, #16]
            if (err == ERR_ARG) {
 80148b8:	f117 0f10 	cmn.w	r7, #16
              *sp1 = ' ';
 80148bc:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 80148be:	9a05      	ldr	r2, [sp, #20]
              *sp2 = ' ';
 80148c0:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 80148c4:	7013      	strb	r3, [r2, #0]
            if (err == ERR_ARG) {
 80148c6:	f43f af3b 	beq.w	8014740 <http_recv+0x270>
 80148ca:	e73f      	b.n	801474c <http_recv+0x27c>
            return http_find_file(hs, http_uri_buf, 0);
 80148cc:	2200      	movs	r2, #0
 80148ce:	4913      	ldr	r1, [pc, #76]	; (801491c <http_recv+0x44c>)
 80148d0:	4628      	mov	r0, r5
 80148d2:	f7ff f90f 	bl	8013af4 <http_find_file>
 80148d6:	4607      	mov	r7, r0
 80148d8:	e7e9      	b.n	80148ae <http_recv+0x3de>
                         lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE2, data_len))) {
 80148da:	463a      	mov	r2, r7
 80148dc:	4910      	ldr	r1, [pc, #64]	; (8014920 <http_recv+0x450>)
 80148de:	4640      	mov	r0, r8
 80148e0:	9305      	str	r3, [sp, #20]
 80148e2:	f000 f8b1 	bl	8014a48 <lwip_strnstr>
          if (!is_09 && (lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE, data_len) ||
 80148e6:	9b05      	ldr	r3, [sp, #20]
 80148e8:	2800      	cmp	r0, #0
 80148ea:	d1a5      	bne.n	8014838 <http_recv+0x368>
 80148ec:	e687      	b.n	80145fe <http_recv+0x12e>
      pbuf_free(p);
 80148ee:	4620      	mov	r0, r4
 80148f0:	f001 ff12 	bl	8016718 <pbuf_free>
 80148f4:	e61e      	b.n	8014534 <http_recv+0x64>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 80148f6:	9907      	ldr	r1, [sp, #28]
 80148f8:	2241      	movs	r2, #65	; 0x41
 80148fa:	4608      	mov	r0, r1
 80148fc:	f001 ff7a 	bl	80167f4 <pbuf_alloc>
              return http_post_rxpbuf(hs, q);
 8014900:	4601      	mov	r1, r0
 8014902:	4628      	mov	r0, r5
 8014904:	f7ff f9e0 	bl	8013cc8 <http_post_rxpbuf>
 8014908:	4607      	mov	r7, r0
 801490a:	e7d0      	b.n	80148ae <http_recv+0x3de>
              *sp1 = ' ';
 801490c:	2320      	movs	r3, #32
 801490e:	9a04      	ldr	r2, [sp, #16]
 8014910:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 8014912:	9a05      	ldr	r2, [sp, #20]
              *sp2 = ' ';
 8014914:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 8014918:	7013      	strb	r3, [r2, #0]
 801491a:	e5ed      	b.n	80144f8 <http_recv+0x28>
 801491c:	200219ec 	.word	0x200219ec
 8014920:	0803cbc0 	.word	0x0803cbc0

08014924 <http_err>:
  if (hs != NULL) {
 8014924:	b140      	cbz	r0, 8014938 <http_err+0x14>
{
 8014926:	b510      	push	{r4, lr}
 8014928:	4604      	mov	r4, r0
    http_state_eof(hs);
 801492a:	f7fe ff7d 	bl	8013828 <http_state_eof>
    HTTP_FREE_HTTP_STATE(hs);
 801492e:	4620      	mov	r0, r4
}
 8014930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HTTP_FREE_HTTP_STATE(hs);
 8014934:	f001 b830 	b.w	8015998 <mem_free>
 8014938:	4770      	bx	lr
 801493a:	bf00      	nop

0801493c <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 801493c:	b510      	push	{r4, lr}
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 801493e:	202e      	movs	r0, #46	; 0x2e
 8014940:	f003 fafe 	bl	8017f40 <tcp_new_ip_type>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8014944:	b310      	cbz	r0, 801498c <httpd_init+0x50>
 8014946:	4604      	mov	r4, r0
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8014948:	2101      	movs	r1, #1
 801494a:	f002 fd31 	bl	80173b0 <tcp_setprio>
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 801494e:	2250      	movs	r2, #80	; 0x50
 8014950:	4917      	ldr	r1, [pc, #92]	; (80149b0 <httpd_init+0x74>)
 8014952:	4620      	mov	r0, r4
 8014954:	f002 fbca 	bl	80170ec <tcp_bind>
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8014958:	bb08      	cbnz	r0, 801499e <httpd_init+0x62>
    pcb = altcp_listen(pcb);
 801495a:	4620      	mov	r0, r4
 801495c:	21ff      	movs	r1, #255	; 0xff
 801495e:	f002 fc93 	bl	8017288 <tcp_listen_with_backlog>
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8014962:	4604      	mov	r4, r0
 8014964:	b128      	cbz	r0, 8014972 <httpd_init+0x36>
    altcp_accept(pcb, http_accept);
 8014966:	4620      	mov	r0, r4
 8014968:	4912      	ldr	r1, [pc, #72]	; (80149b4 <httpd_init+0x78>)
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
}
 801496a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    altcp_accept(pcb, http_accept);
 801496e:	f002 bdad 	b.w	80174cc <tcp_accept>
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8014972:	4911      	ldr	r1, [pc, #68]	; (80149b8 <httpd_init+0x7c>)
 8014974:	f640 2259 	movw	r2, #2649	; 0xa59
 8014978:	4b10      	ldr	r3, [pc, #64]	; (80149bc <httpd_init+0x80>)
 801497a:	4811      	ldr	r0, [pc, #68]	; (80149c0 <httpd_init+0x84>)
 801497c:	f00c f824 	bl	80209c8 <iprintf>
    altcp_accept(pcb, http_accept);
 8014980:	4620      	mov	r0, r4
 8014982:	490c      	ldr	r1, [pc, #48]	; (80149b4 <httpd_init+0x78>)
}
 8014984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    altcp_accept(pcb, http_accept);
 8014988:	f002 bda0 	b.w	80174cc <tcp_accept>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 801498c:	4b0b      	ldr	r3, [pc, #44]	; (80149bc <httpd_init+0x80>)
 801498e:	f640 2272 	movw	r2, #2674	; 0xa72
 8014992:	490c      	ldr	r1, [pc, #48]	; (80149c4 <httpd_init+0x88>)
 8014994:	480a      	ldr	r0, [pc, #40]	; (80149c0 <httpd_init+0x84>)
}
 8014996:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 801499a:	f00c b815 	b.w	80209c8 <iprintf>
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 801499e:	4b07      	ldr	r3, [pc, #28]	; (80149bc <httpd_init+0x80>)
 80149a0:	f640 2257 	movw	r2, #2647	; 0xa57
 80149a4:	4908      	ldr	r1, [pc, #32]	; (80149c8 <httpd_init+0x8c>)
 80149a6:	4806      	ldr	r0, [pc, #24]	; (80149c0 <httpd_init+0x84>)
 80149a8:	f00c f80e 	bl	80209c8 <iprintf>
 80149ac:	e7d5      	b.n	801495a <httpd_init+0x1e>
 80149ae:	bf00      	nop
 80149b0:	0803f66c 	.word	0x0803f66c
 80149b4:	08013899 	.word	0x08013899
 80149b8:	0803cd68 	.word	0x0803cd68
 80149bc:	0803cb00 	.word	0x0803cb00
 80149c0:	0802697c 	.word	0x0802697c
 80149c4:	0803cd30 	.word	0x0803cd30
 80149c8:	0803cd4c 	.word	0x0803cd4c

080149cc <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 80149cc:	b570      	push	{r4, r5, r6, lr}
 80149ce:	460d      	mov	r5, r1
 80149d0:	4614      	mov	r4, r2
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 80149d2:	4606      	mov	r6, r0
 80149d4:	b1c8      	cbz	r0, 8014a0a <http_set_ssi_handler+0x3e>
  httpd_ssi_handler = ssi_handler;
 80149d6:	4b11      	ldr	r3, [pc, #68]	; (8014a1c <http_set_ssi_handler+0x50>)
 80149d8:	601e      	str	r6, [r3, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 80149da:	b175      	cbz	r5, 80149fa <http_set_ssi_handler+0x2e>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 80149dc:	2c00      	cmp	r4, #0
 80149de:	dd04      	ble.n	80149ea <http_set_ssi_handler+0x1e>

  httpd_tags = tags;
 80149e0:	4a0f      	ldr	r2, [pc, #60]	; (8014a20 <http_set_ssi_handler+0x54>)
  httpd_num_tags = num_tags;
 80149e2:	4b10      	ldr	r3, [pc, #64]	; (8014a24 <http_set_ssi_handler+0x58>)
  httpd_tags = tags;
 80149e4:	6015      	str	r5, [r2, #0]
  httpd_num_tags = num_tags;
 80149e6:	601c      	str	r4, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 80149e8:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 80149ea:	4b0f      	ldr	r3, [pc, #60]	; (8014a28 <http_set_ssi_handler+0x5c>)
 80149ec:	f640 229f 	movw	r2, #2719	; 0xa9f
 80149f0:	490e      	ldr	r1, [pc, #56]	; (8014a2c <http_set_ssi_handler+0x60>)
 80149f2:	480f      	ldr	r0, [pc, #60]	; (8014a30 <http_set_ssi_handler+0x64>)
 80149f4:	f00b ffe8 	bl	80209c8 <iprintf>
 80149f8:	e7f2      	b.n	80149e0 <http_set_ssi_handler+0x14>
  LWIP_ASSERT("no tags given", tags != NULL);
 80149fa:	4b0b      	ldr	r3, [pc, #44]	; (8014a28 <http_set_ssi_handler+0x5c>)
 80149fc:	f640 229e 	movw	r2, #2718	; 0xa9e
 8014a00:	490c      	ldr	r1, [pc, #48]	; (8014a34 <http_set_ssi_handler+0x68>)
 8014a02:	480b      	ldr	r0, [pc, #44]	; (8014a30 <http_set_ssi_handler+0x64>)
 8014a04:	f00b ffe0 	bl	80209c8 <iprintf>
 8014a08:	e7e8      	b.n	80149dc <http_set_ssi_handler+0x10>
  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 8014a0a:	4b07      	ldr	r3, [pc, #28]	; (8014a28 <http_set_ssi_handler+0x5c>)
 8014a0c:	f640 2297 	movw	r2, #2711	; 0xa97
 8014a10:	4909      	ldr	r1, [pc, #36]	; (8014a38 <http_set_ssi_handler+0x6c>)
 8014a12:	4807      	ldr	r0, [pc, #28]	; (8014a30 <http_set_ssi_handler+0x64>)
 8014a14:	f00b ffd8 	bl	80209c8 <iprintf>
 8014a18:	e7dd      	b.n	80149d6 <http_set_ssi_handler+0xa>
 8014a1a:	bf00      	nop
 8014a1c:	20021e30 	.word	0x20021e30
 8014a20:	20021e34 	.word	0x20021e34
 8014a24:	20021a2c 	.word	0x20021a2c
 8014a28:	0803cb00 	.word	0x0803cb00
 8014a2c:	0803cce0 	.word	0x0803cce0
 8014a30:	0802697c 	.word	0x0802697c
 8014a34:	0803ccd0 	.word	0x0803ccd0
 8014a38:	0803ccb8 	.word	0x0803ccb8

08014a3c <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 8014a3c:	ba40      	rev16	r0, r0
}
 8014a3e:	b280      	uxth	r0, r0
 8014a40:	4770      	bx	lr
 8014a42:	bf00      	nop

08014a44 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 8014a44:	ba00      	rev	r0, r0
 8014a46:	4770      	bx	lr

08014a48 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8014a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a4c:	4604      	mov	r4, r0
  const char *p;
  size_t tokenlen = strlen(token);
 8014a4e:	4608      	mov	r0, r1
{
 8014a50:	4688      	mov	r8, r1
 8014a52:	4616      	mov	r6, r2
  size_t tokenlen = strlen(token);
 8014a54:	f7eb fbfe 	bl	8000254 <strlen>
  if (tokenlen == 0) {
 8014a58:	b1c0      	cbz	r0, 8014a8c <lwip_strnstr+0x44>
 8014a5a:	4605      	mov	r5, r0
    return LWIP_CONST_CAST(char *, buffer);
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8014a5c:	7820      	ldrb	r0, [r4, #0]
 8014a5e:	b1b0      	cbz	r0, 8014a8e <lwip_strnstr+0x46>
 8014a60:	4426      	add	r6, r4
 8014a62:	1963      	adds	r3, r4, r5
 8014a64:	429e      	cmp	r6, r3
 8014a66:	d314      	bcc.n	8014a92 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8014a68:	f898 7000 	ldrb.w	r7, [r8]
 8014a6c:	e005      	b.n	8014a7a <lwip_strnstr+0x32>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8014a6e:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8014a72:	1963      	adds	r3, r4, r5
 8014a74:	b158      	cbz	r0, 8014a8e <lwip_strnstr+0x46>
 8014a76:	429e      	cmp	r6, r3
 8014a78:	d30b      	bcc.n	8014a92 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8014a7a:	4287      	cmp	r7, r0
 8014a7c:	d1f7      	bne.n	8014a6e <lwip_strnstr+0x26>
 8014a7e:	462a      	mov	r2, r5
 8014a80:	4641      	mov	r1, r8
 8014a82:	4620      	mov	r0, r4
 8014a84:	f00c ff1c 	bl	80218c0 <strncmp>
 8014a88:	2800      	cmp	r0, #0
 8014a8a:	d1f0      	bne.n	8014a6e <lwip_strnstr+0x26>
 8014a8c:	4620      	mov	r0, r4
      return LWIP_CONST_CAST(char *, p);
    }
  }
  return NULL;
}
 8014a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return NULL;
 8014a92:	2000      	movs	r0, #0
}
 8014a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014a98 <lwip_stricmp>:
lwip_stricmp(const char *str1, const char *str2)
{
  char c1, c2;

  do {
    c1 = *str1++;
 8014a98:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 8014a9c:	f811 2b01 	ldrb.w	r2, [r1], #1
    if (c1 != c2) {
 8014aa0:	4293      	cmp	r3, r2
 8014aa2:	d01c      	beq.n	8014ade <lwip_stricmp+0x46>
{
 8014aa4:	b430      	push	{r4, r5}
 8014aa6:	f043 0420 	orr.w	r4, r3, #32
 8014aaa:	f042 0520 	orr.w	r5, r2, #32
 8014aae:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
      char c1_upc = c1 | 0x20;
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8014ab2:	2a19      	cmp	r2, #25
 8014ab4:	d810      	bhi.n	8014ad8 <lwip_stricmp+0x40>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
        if (c1_upc != c2_upc) {
 8014ab6:	42ac      	cmp	r4, r5
 8014ab8:	d10e      	bne.n	8014ad8 <lwip_stricmp+0x40>
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
  } while (c1 != 0);
 8014aba:	b1a3      	cbz	r3, 8014ae6 <lwip_stricmp+0x4e>
    c1 = *str1++;
 8014abc:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 8014ac0:	f811 2b01 	ldrb.w	r2, [r1], #1
    if (c1 != c2) {
 8014ac4:	4293      	cmp	r3, r2
 8014ac6:	d0f8      	beq.n	8014aba <lwip_stricmp+0x22>
 8014ac8:	f043 0420 	orr.w	r4, r3, #32
 8014acc:	f042 0520 	orr.w	r5, r2, #32
 8014ad0:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8014ad4:	2a19      	cmp	r2, #25
 8014ad6:	d9ee      	bls.n	8014ab6 <lwip_stricmp+0x1e>
        return 1;
 8014ad8:	2001      	movs	r0, #1
  return 0;
}
 8014ada:	bc30      	pop	{r4, r5}
 8014adc:	4770      	bx	lr
  } while (c1 != 0);
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d1da      	bne.n	8014a98 <lwip_stricmp>
  return 0;
 8014ae2:	4618      	mov	r0, r3
}
 8014ae4:	4770      	bx	lr
  return 0;
 8014ae6:	4618      	mov	r0, r3
}
 8014ae8:	bc30      	pop	{r4, r5}
 8014aea:	4770      	bx	lr

08014aec <lwip_strnicmp>:
 * lwIP default implementation for strnicmp() non-standard function.
 * This can be \#defined to strnicmp() depending on your platform port.
 */
int
lwip_strnicmp(const char *str1, const char *str2, size_t len)
{
 8014aec:	b470      	push	{r4, r5, r6}
 8014aee:	e005      	b.n	8014afc <lwip_strnicmp+0x10>
      char c1_upc = c1 | 0x20;
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
        if (c1_upc != c2_upc) {
 8014af0:	42b5      	cmp	r5, r6
 8014af2:	d111      	bne.n	8014b18 <lwip_strnicmp+0x2c>
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
    len--;
  } while ((len != 0) && (c1 != 0));
 8014af4:	f112 32ff 	adds.w	r2, r2, #4294967295
 8014af8:	d011      	beq.n	8014b1e <lwip_strnicmp+0x32>
 8014afa:	b183      	cbz	r3, 8014b1e <lwip_strnicmp+0x32>
    c1 = *str1++;
 8014afc:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 8014b00:	f811 4b01 	ldrb.w	r4, [r1], #1
    if (c1 != c2) {
 8014b04:	42a3      	cmp	r3, r4
 8014b06:	d0f5      	beq.n	8014af4 <lwip_strnicmp+0x8>
 8014b08:	f043 0520 	orr.w	r5, r3, #32
 8014b0c:	f044 0620 	orr.w	r6, r4, #32
 8014b10:	f1a5 0461 	sub.w	r4, r5, #97	; 0x61
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8014b14:	2c19      	cmp	r4, #25
 8014b16:	d9eb      	bls.n	8014af0 <lwip_strnicmp+0x4>
        return 1;
 8014b18:	2001      	movs	r0, #1
  return 0;
}
 8014b1a:	bc70      	pop	{r4, r5, r6}
 8014b1c:	4770      	bx	lr
  return 0;
 8014b1e:	2000      	movs	r0, #0
}
 8014b20:	bc70      	pop	{r4, r5, r6}
 8014b22:	4770      	bx	lr

08014b24 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 8014b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b28:	0106      	lsls	r6, r0, #4
 8014b2a:	4c24      	ldr	r4, [pc, #144]	; (8014bbc <dns_call_found+0x98>)
 8014b2c:	4605      	mov	r5, r0
 8014b2e:	468a      	mov	sl, r1
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8014b30:	eb06 0800 	add.w	r8, r6, r0
 8014b34:	4f22      	ldr	r7, [pc, #136]	; (8014bc0 <dns_call_found+0x9c>)
 8014b36:	f104 0930 	add.w	r9, r4, #48	; 0x30
 8014b3a:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8014b3e:	f108 0810 	add.w	r8, r8, #16
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 8014b42:	6823      	ldr	r3, [r4, #0]
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8014b44:	4651      	mov	r1, sl
 8014b46:	eb07 0008 	add.w	r0, r7, r8
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 8014b4a:	b133      	cbz	r3, 8014b5a <dns_call_found+0x36>
 8014b4c:	7a22      	ldrb	r2, [r4, #8]
 8014b4e:	42aa      	cmp	r2, r5
 8014b50:	d103      	bne.n	8014b5a <dns_call_found+0x36>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8014b52:	6862      	ldr	r2, [r4, #4]
 8014b54:	4798      	blx	r3
      /* flush this entry */
      dns_requests[i].found = NULL;
 8014b56:	2300      	movs	r3, #0
 8014b58:	6023      	str	r3, [r4, #0]
 8014b5a:	340c      	adds	r4, #12
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8014b5c:	454c      	cmp	r4, r9
 8014b5e:	d1f0      	bne.n	8014b42 <dns_call_found+0x1e>
 8014b60:	1973      	adds	r3, r6, r5
 8014b62:	2400      	movs	r4, #0
 8014b64:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 8014b68:	4f15      	ldr	r7, [pc, #84]	; (8014bc0 <dns_call_found+0x9c>)
 8014b6a:	7bd9      	ldrb	r1, [r3, #15]
 8014b6c:	463a      	mov	r2, r7
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (i == idx) {
 8014b6e:	b2e3      	uxtb	r3, r4
 8014b70:	3401      	adds	r4, #1
 8014b72:	42ab      	cmp	r3, r5
 8014b74:	d002      	beq.n	8014b7c <dns_call_found+0x58>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 8014b76:	7a93      	ldrb	r3, [r2, #10]
 8014b78:	2b02      	cmp	r3, #2
 8014b7a:	d015      	beq.n	8014ba8 <dns_call_found+0x84>
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8014b7c:	2c04      	cmp	r4, #4
 8014b7e:	f502 7288 	add.w	r2, r2, #272	; 0x110
 8014b82:	d1f4      	bne.n	8014b6e <dns_call_found+0x4a>
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
        break;
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 8014b84:	2903      	cmp	r1, #3
 8014b86:	d80d      	bhi.n	8014ba4 <dns_call_found+0x80>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8014b88:	4435      	add	r5, r6
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 8014b8a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 8014bc4 <dns_call_found+0xa0>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8014b8e:	eb07 1705 	add.w	r7, r7, r5, lsl #4
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 8014b92:	f858 0021 	ldr.w	r0, [r8, r1, lsl #2]
 8014b96:	f007 f8d9 	bl	801bd4c <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8014b9a:	2200      	movs	r2, #0
 8014b9c:	7bfb      	ldrb	r3, [r7, #15]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8014b9e:	73fc      	strb	r4, [r7, #15]
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8014ba0:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
  }
#endif
}
 8014ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 8014ba8:	7bd3      	ldrb	r3, [r2, #15]
 8014baa:	428b      	cmp	r3, r1
 8014bac:	d1e6      	bne.n	8014b7c <dns_call_found+0x58>
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8014bae:	4435      	add	r5, r6
 8014bb0:	2304      	movs	r3, #4
 8014bb2:	eb07 1705 	add.w	r7, r7, r5, lsl #4
 8014bb6:	73fb      	strb	r3, [r7, #15]
 8014bb8:	e7f4      	b.n	8014ba4 <dns_call_found+0x80>
 8014bba:	bf00      	nop
 8014bbc:	20021e4c 	.word	0x20021e4c
 8014bc0:	20021e88 	.word	0x20021e88
 8014bc4:	20021e3c 	.word	0x20021e3c

08014bc8 <dns_send>:
{
 8014bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8014bcc:	0103      	lsls	r3, r0, #4
{
 8014bce:	b087      	sub	sp, #28
 8014bd0:	4681      	mov	r9, r0
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8014bd2:	181c      	adds	r4, r3, r0
 8014bd4:	9301      	str	r3, [sp, #4]
 8014bd6:	4b60      	ldr	r3, [pc, #384]	; (8014d58 <dns_send+0x190>)
 8014bd8:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8014bdc:	7ae3      	ldrb	r3, [r4, #11]
 8014bde:	2b01      	cmp	r3, #1
 8014be0:	d907      	bls.n	8014bf2 <dns_send+0x2a>
 8014be2:	4b5e      	ldr	r3, [pc, #376]	; (8014d5c <dns_send+0x194>)
 8014be4:	f240 22fa 	movw	r2, #762	; 0x2fa
 8014be8:	495d      	ldr	r1, [pc, #372]	; (8014d60 <dns_send+0x198>)
 8014bea:	485e      	ldr	r0, [pc, #376]	; (8014d64 <dns_send+0x19c>)
 8014bec:	f00b feec 	bl	80209c8 <iprintf>
 8014bf0:	7ae3      	ldrb	r3, [r4, #11]
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 8014bf2:	4a5d      	ldr	r2, [pc, #372]	; (8014d68 <dns_send+0x1a0>)
 8014bf4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014bf8:	2c00      	cmp	r4, #0
 8014bfa:	f000 8099 	beq.w	8014d30 <dns_send+0x168>
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 8014bfe:	9b01      	ldr	r3, [sp, #4]
 8014c00:	4e55      	ldr	r6, [pc, #340]	; (8014d58 <dns_send+0x190>)
 8014c02:	eb03 0409 	add.w	r4, r3, r9
 8014c06:	0124      	lsls	r4, r4, #4
 8014c08:	f104 0510 	add.w	r5, r4, #16
 8014c0c:	4435      	add	r5, r6
 8014c0e:	4628      	mov	r0, r5
 8014c10:	f7eb fb20 	bl	8000254 <strlen>
 8014c14:	f100 0112 	add.w	r1, r0, #18
 8014c18:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014c1c:	2036      	movs	r0, #54	; 0x36
 8014c1e:	b289      	uxth	r1, r1
 8014c20:	f001 fde8 	bl	80167f4 <pbuf_alloc>
  if (p != NULL) {
 8014c24:	4680      	mov	r8, r0
 8014c26:	2800      	cmp	r0, #0
 8014c28:	f000 8093 	beq.w	8014d52 <dns_send+0x18a>
    hdr.id = lwip_htons(entry->txid);
 8014c2c:	4434      	add	r4, r6
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 8014c2e:	2300      	movs	r3, #0
    query_idx = SIZEOF_DNS_HDR;
 8014c30:	260c      	movs	r6, #12
    --hostname;
 8014c32:	3d01      	subs	r5, #1
    hdr.id = lwip_htons(entry->txid);
 8014c34:	8920      	ldrh	r0, [r4, #8]
      if (query_idx + n + 1 > 0xFFFF) {
 8014c36:	f64f 7bfe 	movw	fp, #65534	; 0xfffe
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 8014c3a:	9304      	str	r3, [sp, #16]
 8014c3c:	9303      	str	r3, [sp, #12]
 8014c3e:	9305      	str	r3, [sp, #20]
    hdr.id = lwip_htons(entry->txid);
 8014c40:	f7ff fefc 	bl	8014a3c <lwip_htons>
    hdr.flags1 = DNS_FLAG1_RD;
 8014c44:	2201      	movs	r2, #1
    hdr.numquestions = PP_HTONS(1);
 8014c46:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdr.id = lwip_htons(entry->txid);
 8014c4a:	f8ad 000c 	strh.w	r0, [sp, #12]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 8014c4e:	eb0d 0106 	add.w	r1, sp, r6
    hdr.flags1 = DNS_FLAG1_RD;
 8014c52:	f88d 200e 	strb.w	r2, [sp, #14]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 8014c56:	4640      	mov	r0, r8
 8014c58:	4632      	mov	r2, r6
    hdr.numquestions = PP_HTONS(1);
 8014c5a:	f8ad 3010 	strh.w	r3, [sp, #16]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 8014c5e:	f002 f83f 	bl	8016ce0 <pbuf_take>
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8014c62:	786b      	ldrb	r3, [r5, #1]
      ++hostname;
 8014c64:	1c6f      	adds	r7, r5, #1
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8014c66:	2b2e      	cmp	r3, #46	; 0x2e
 8014c68:	d051      	beq.n	8014d0e <dns_send+0x146>
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d04f      	beq.n	8014d0e <dns_send+0x146>
      ++hostname;
 8014c6e:	463d      	mov	r5, r7
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8014c70:	2400      	movs	r4, #0
 8014c72:	e000      	b.n	8014c76 <dns_send+0xae>
 8014c74:	b12b      	cbz	r3, 8014c82 <dns_send+0xba>
 8014c76:	f815 3f01 	ldrb.w	r3, [r5, #1]!
        ++n;
 8014c7a:	3401      	adds	r4, #1
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8014c7c:	2b2e      	cmp	r3, #46	; 0x2e
        ++n;
 8014c7e:	b2e4      	uxtb	r4, r4
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8014c80:	d1f8      	bne.n	8014c74 <dns_send+0xac>
 8014c82:	4623      	mov	r3, r4
 8014c84:	eba5 0a07 	sub.w	sl, r5, r7
      if (query_idx + n + 1 > 0xFFFF) {
 8014c88:	4433      	add	r3, r6
 8014c8a:	fa1f fa8a 	uxth.w	sl, sl
 8014c8e:	455b      	cmp	r3, fp
 8014c90:	dc45      	bgt.n	8014d1e <dns_send+0x156>
      pbuf_put_at(p, query_idx, n);
 8014c92:	4622      	mov	r2, r4
 8014c94:	4631      	mov	r1, r6
 8014c96:	4640      	mov	r0, r8
      query_idx = (u16_t)(query_idx + n + 1);
 8014c98:	4434      	add	r4, r6
      pbuf_put_at(p, query_idx, n);
 8014c9a:	f002 f8ef 	bl	8016e7c <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 8014c9e:	1c73      	adds	r3, r6, #1
      query_idx = (u16_t)(query_idx + n + 1);
 8014ca0:	b2a4      	uxth	r4, r4
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 8014ca2:	4652      	mov	r2, sl
 8014ca4:	4639      	mov	r1, r7
 8014ca6:	b29b      	uxth	r3, r3
 8014ca8:	4640      	mov	r0, r8
      query_idx = (u16_t)(query_idx + n + 1);
 8014caa:	1c66      	adds	r6, r4, #1
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 8014cac:	f002 f880 	bl	8016db0 <pbuf_take_at>
    } while (*hostname != 0);
 8014cb0:	782a      	ldrb	r2, [r5, #0]
      query_idx = (u16_t)(query_idx + n + 1);
 8014cb2:	b2b6      	uxth	r6, r6
    } while (*hostname != 0);
 8014cb4:	2a00      	cmp	r2, #0
 8014cb6:	d1d4      	bne.n	8014c62 <dns_send+0x9a>
    pbuf_put_at(p, query_idx, 0);
 8014cb8:	4631      	mov	r1, r6
 8014cba:	4640      	mov	r0, r8
 8014cbc:	f002 f8de 	bl	8016e7c <pbuf_put_at>
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 8014cc0:	a906      	add	r1, sp, #24
    query_idx++;
 8014cc2:	1ca3      	adds	r3, r4, #2
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 8014cc4:	f04f 2001 	mov.w	r0, #16777472	; 0x1000100
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 8014cc8:	2204      	movs	r2, #4
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8014cca:	4d27      	ldr	r5, [pc, #156]	; (8014d68 <dns_send+0x1a0>)
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 8014ccc:	f841 0d10 	str.w	r0, [r1, #-16]!
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 8014cd0:	b29b      	uxth	r3, r3
 8014cd2:	4640      	mov	r0, r8
 8014cd4:	f002 f86c 	bl	8016db0 <pbuf_take_at>
      dst = &dns_servers[entry->server_idx];
 8014cd8:	9b01      	ldr	r3, [sp, #4]
 8014cda:	4a1f      	ldr	r2, [pc, #124]	; (8014d58 <dns_send+0x190>)
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8014cdc:	4641      	mov	r1, r8
      dst = &dns_servers[entry->server_idx];
 8014cde:	444b      	add	r3, r9
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8014ce0:	4822      	ldr	r0, [pc, #136]	; (8014d6c <dns_send+0x1a4>)
      dst = &dns_servers[entry->server_idx];
 8014ce2:	4699      	mov	r9, r3
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8014ce4:	2335      	movs	r3, #53	; 0x35
      dst = &dns_servers[entry->server_idx];
 8014ce6:	eb02 1a09 	add.w	sl, r2, r9, lsl #4
 8014cea:	f89a 200b 	ldrb.w	r2, [sl, #11]
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8014cee:	f89a 400f 	ldrb.w	r4, [sl, #15]
 8014cf2:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8014cf6:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8014cfa:	f006 ff81 	bl	801bc00 <udp_sendto>
 8014cfe:	4605      	mov	r5, r0
    pbuf_free(p);
 8014d00:	4640      	mov	r0, r8
 8014d02:	f001 fd09 	bl	8016718 <pbuf_free>
}
 8014d06:	4628      	mov	r0, r5
 8014d08:	b007      	add	sp, #28
 8014d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8014d0e:	f04f 0a00 	mov.w	sl, #0
      ++hostname;
 8014d12:	463d      	mov	r5, r7
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8014d14:	4653      	mov	r3, sl
 8014d16:	4654      	mov	r4, sl
      if (query_idx + n + 1 > 0xFFFF) {
 8014d18:	4433      	add	r3, r6
 8014d1a:	455b      	cmp	r3, fp
 8014d1c:	ddb9      	ble.n	8014c92 <dns_send+0xca>
  return ERR_VAL;
 8014d1e:	f06f 0505 	mvn.w	r5, #5
  pbuf_free(p);
 8014d22:	4640      	mov	r0, r8
 8014d24:	f001 fcf8 	bl	8016718 <pbuf_free>
}
 8014d28:	4628      	mov	r0, r5
 8014d2a:	b007      	add	sp, #28
 8014d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dns_call_found(idx, NULL);
 8014d30:	4648      	mov	r0, r9
 8014d32:	4621      	mov	r1, r4
 8014d34:	f7ff fef6 	bl	8014b24 <dns_call_found>
    entry->state = DNS_STATE_UNUSED;
 8014d38:	9b01      	ldr	r3, [sp, #4]
    return ERR_OK;
 8014d3a:	4625      	mov	r5, r4
    entry->state = DNS_STATE_UNUSED;
 8014d3c:	444b      	add	r3, r9
}
 8014d3e:	4628      	mov	r0, r5
    entry->state = DNS_STATE_UNUSED;
 8014d40:	4699      	mov	r9, r3
 8014d42:	4b05      	ldr	r3, [pc, #20]	; (8014d58 <dns_send+0x190>)
 8014d44:	eb03 1a09 	add.w	sl, r3, r9, lsl #4
 8014d48:	f88a 400a 	strb.w	r4, [sl, #10]
}
 8014d4c:	b007      	add	sp, #28
 8014d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    err = ERR_MEM;
 8014d52:	f04f 35ff 	mov.w	r5, #4294967295
 8014d56:	e7d6      	b.n	8014d06 <dns_send+0x13e>
 8014d58:	20021e88 	.word	0x20021e88
 8014d5c:	0803ce38 	.word	0x0803ce38
 8014d60:	0803ce68 	.word	0x0803ce68
 8014d64:	0802697c 	.word	0x0802697c
 8014d68:	20021e80 	.word	0x20021e80
 8014d6c:	20021e3c 	.word	0x20021e3c

08014d70 <dns_check_entry>:
dns_check_entry(u8_t i)
{
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8014d70:	2803      	cmp	r0, #3
{
 8014d72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d76:	4604      	mov	r4, r0
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8014d78:	d84a      	bhi.n	8014e10 <dns_check_entry+0xa0>

  switch (entry->state) {
 8014d7a:	0125      	lsls	r5, r4, #4
 8014d7c:	4e39      	ldr	r6, [pc, #228]	; (8014e64 <dns_check_entry+0xf4>)
 8014d7e:	192b      	adds	r3, r5, r4
 8014d80:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 8014d84:	7a9b      	ldrb	r3, [r3, #10]
 8014d86:	2b03      	cmp	r3, #3
 8014d88:	d84e      	bhi.n	8014e28 <dns_check_entry+0xb8>
 8014d8a:	e8df f003 	tbb	[pc, r3]
 8014d8e:	100e      	.short	0x100e
 8014d90:	022c      	.short	0x022c
        }
      }
      break;
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 8014d92:	192b      	adds	r3, r5, r4
 8014d94:	011b      	lsls	r3, r3, #4
 8014d96:	58f2      	ldr	r2, [r6, r3]
 8014d98:	b112      	cbz	r2, 8014da0 <dns_check_entry+0x30>
 8014d9a:	3a01      	subs	r2, #1
 8014d9c:	50f2      	str	r2, [r6, r3]
 8014d9e:	b922      	cbnz	r2, 8014daa <dns_check_entry+0x3a>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 8014da0:	442c      	add	r4, r5
 8014da2:	2300      	movs	r3, #0
 8014da4:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 8014da8:	72b3      	strb	r3, [r6, #10]
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
      break;
  }
}
 8014daa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014dae:	4f2e      	ldr	r7, [pc, #184]	; (8014e68 <dns_check_entry+0xf8>)
  txid = (u16_t)DNS_RAND_TXID();
 8014db0:	f00b fe9a 	bl	8020ae8 <rand>
 8014db4:	4b2b      	ldr	r3, [pc, #172]	; (8014e64 <dns_check_entry+0xf4>)
 8014db6:	b281      	uxth	r1, r0
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8014db8:	7a9a      	ldrb	r2, [r3, #10]
 8014dba:	2a02      	cmp	r2, #2
 8014dbc:	d030      	beq.n	8014e20 <dns_check_entry+0xb0>
 8014dbe:	f503 7388 	add.w	r3, r3, #272	; 0x110
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8014dc2:	429f      	cmp	r7, r3
 8014dc4:	d1f8      	bne.n	8014db8 <dns_check_entry+0x48>
      entry->txid = dns_create_txid();
 8014dc6:	4425      	add	r5, r4
      err = dns_send(i);
 8014dc8:	4620      	mov	r0, r4
      entry->server_idx = 0;
 8014dca:	2201      	movs	r2, #1
      entry->state = DNS_STATE_ASKING;
 8014dcc:	2402      	movs	r4, #2
      entry->txid = dns_create_txid();
 8014dce:	012d      	lsls	r5, r5, #4
 8014dd0:	f105 0308 	add.w	r3, r5, #8
 8014dd4:	4435      	add	r5, r6
 8014dd6:	441e      	add	r6, r3
 8014dd8:	8129      	strh	r1, [r5, #8]
      entry->state = DNS_STATE_ASKING;
 8014dda:	8074      	strh	r4, [r6, #2]
      entry->server_idx = 0;
 8014ddc:	80b2      	strh	r2, [r6, #4]
}
 8014dde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      err = dns_send(i);
 8014de2:	f7ff bef1 	b.w	8014bc8 <dns_send>
      if (--entry->tmr == 0) {
 8014de6:	192a      	adds	r2, r5, r4
 8014de8:	eb06 1202 	add.w	r2, r6, r2, lsl #4
 8014dec:	7b13      	ldrb	r3, [r2, #12]
 8014dee:	3b01      	subs	r3, #1
 8014df0:	b2db      	uxtb	r3, r3
 8014df2:	7313      	strb	r3, [r2, #12]
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d1d8      	bne.n	8014daa <dns_check_entry+0x3a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 8014df8:	7b53      	ldrb	r3, [r2, #13]
 8014dfa:	3301      	adds	r3, #1
 8014dfc:	b2db      	uxtb	r3, r3
 8014dfe:	2b04      	cmp	r3, #4
 8014e00:	7353      	strb	r3, [r2, #13]
 8014e02:	d01a      	beq.n	8014e3a <dns_check_entry+0xca>
          entry->tmr = entry->retries;
 8014e04:	7313      	strb	r3, [r2, #12]
        err = dns_send(i);
 8014e06:	4620      	mov	r0, r4
}
 8014e08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        err = dns_send(i);
 8014e0c:	f7ff bedc 	b.w	8014bc8 <dns_send>
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8014e10:	4b16      	ldr	r3, [pc, #88]	; (8014e6c <dns_check_entry+0xfc>)
 8014e12:	f240 421c 	movw	r2, #1052	; 0x41c
 8014e16:	4916      	ldr	r1, [pc, #88]	; (8014e70 <dns_check_entry+0x100>)
 8014e18:	4816      	ldr	r0, [pc, #88]	; (8014e74 <dns_check_entry+0x104>)
 8014e1a:	f00b fdd5 	bl	80209c8 <iprintf>
 8014e1e:	e7ac      	b.n	8014d7a <dns_check_entry+0xa>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8014e20:	891a      	ldrh	r2, [r3, #8]
 8014e22:	428a      	cmp	r2, r1
 8014e24:	d1cb      	bne.n	8014dbe <dns_check_entry+0x4e>
 8014e26:	e7c3      	b.n	8014db0 <dns_check_entry+0x40>
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 8014e28:	4b10      	ldr	r3, [pc, #64]	; (8014e6c <dns_check_entry+0xfc>)
 8014e2a:	f240 425b 	movw	r2, #1115	; 0x45b
 8014e2e:	4912      	ldr	r1, [pc, #72]	; (8014e78 <dns_check_entry+0x108>)
 8014e30:	4810      	ldr	r0, [pc, #64]	; (8014e74 <dns_check_entry+0x104>)
}
 8014e32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 8014e36:	f00b bdc7 	b.w	80209c8 <iprintf>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 8014e3a:	7ad3      	ldrb	r3, [r2, #11]
 8014e3c:	b93b      	cbnz	r3, 8014e4e <dns_check_entry+0xde>
 8014e3e:	490f      	ldr	r1, [pc, #60]	; (8014e7c <dns_check_entry+0x10c>)
 8014e40:	6849      	ldr	r1, [r1, #4]
 8014e42:	b121      	cbz	r1, 8014e4e <dns_check_entry+0xde>
            entry->server_idx++;
 8014e44:	2101      	movs	r1, #1
            entry->retries = 0;
 8014e46:	7353      	strb	r3, [r2, #13]
            entry->server_idx++;
 8014e48:	72d1      	strb	r1, [r2, #11]
            entry->tmr = 1;
 8014e4a:	7311      	strb	r1, [r2, #12]
 8014e4c:	e7db      	b.n	8014e06 <dns_check_entry+0x96>
            dns_call_found(i, NULL);
 8014e4e:	4620      	mov	r0, r4
            entry->state = DNS_STATE_UNUSED;
 8014e50:	442c      	add	r4, r5
            dns_call_found(i, NULL);
 8014e52:	2100      	movs	r1, #0
 8014e54:	f7ff fe66 	bl	8014b24 <dns_call_found>
            entry->state = DNS_STATE_UNUSED;
 8014e58:	2300      	movs	r3, #0
 8014e5a:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 8014e5e:	72b3      	strb	r3, [r6, #10]
            break;
 8014e60:	e7a3      	b.n	8014daa <dns_check_entry+0x3a>
 8014e62:	bf00      	nop
 8014e64:	20021e88 	.word	0x20021e88
 8014e68:	200222c8 	.word	0x200222c8
 8014e6c:	0803ce38 	.word	0x0803ce38
 8014e70:	0803cdfc 	.word	0x0803cdfc
 8014e74:	0802697c 	.word	0x0802697c
 8014e78:	0803ce18 	.word	0x0803ce18
 8014e7c:	20021e80 	.word	0x20021e80

08014e80 <dns_recv>:
/**
 * Receive input function for DNS response packets arriving for the dns UDP pcb.
 */
static void
dns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8014e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e84:	4699      	mov	r9, r3
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(port);

  /* is the dns message big enough ? */
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 8014e86:	8913      	ldrh	r3, [r2, #8]
{
 8014e88:	b08d      	sub	sp, #52	; 0x34
 8014e8a:	4614      	mov	r4, r2
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 8014e8c:	2b0f      	cmp	r3, #15
 8014e8e:	d908      	bls.n	8014ea2 <dns_recv+0x22>
    /* free pbuf and return */
    goto ignore_packet;
  }

  /* copy dns payload inside static buffer for processing */
  if (pbuf_copy_partial(p, &hdr, SIZEOF_DNS_HDR, 0) == SIZEOF_DNS_HDR) {
 8014e90:	2300      	movs	r3, #0
 8014e92:	220c      	movs	r2, #12
 8014e94:	a906      	add	r1, sp, #24
 8014e96:	4620      	mov	r0, r4
 8014e98:	f001 fece 	bl	8016c38 <pbuf_copy_partial>
 8014e9c:	280c      	cmp	r0, #12
 8014e9e:	4606      	mov	r6, r0
 8014ea0:	d005      	beq.n	8014eae <dns_recv+0x2e>
    }
  }

ignore_packet:
  /* deallocate memory and return */
  pbuf_free(p);
 8014ea2:	4620      	mov	r0, r4
 8014ea4:	f001 fc38 	bl	8016718 <pbuf_free>
  return;
}
 8014ea8:	b00d      	add	sp, #52	; 0x34
 8014eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014eae:	f8df 8300 	ldr.w	r8, [pc, #768]	; 80151b0 <dns_recv+0x330>
    txid = lwip_htons(hdr.id);
 8014eb2:	2500      	movs	r5, #0
 8014eb4:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8014eb8:	f7ff fdc0 	bl	8014a3c <lwip_htons>
 8014ebc:	4643      	mov	r3, r8
 8014ebe:	b2ef      	uxtb	r7, r5
      if ((entry->state == DNS_STATE_ASKING) &&
 8014ec0:	7a9a      	ldrb	r2, [r3, #10]
 8014ec2:	2a02      	cmp	r2, #2
 8014ec4:	d008      	beq.n	8014ed8 <dns_recv+0x58>
 8014ec6:	3501      	adds	r5, #1
 8014ec8:	f503 7388 	add.w	r3, r3, #272	; 0x110
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8014ecc:	2d04      	cmp	r5, #4
 8014ece:	d0e8      	beq.n	8014ea2 <dns_recv+0x22>
      if ((entry->state == DNS_STATE_ASKING) &&
 8014ed0:	7a9a      	ldrb	r2, [r3, #10]
 8014ed2:	b2ef      	uxtb	r7, r5
 8014ed4:	2a02      	cmp	r2, #2
 8014ed6:	d1f6      	bne.n	8014ec6 <dns_recv+0x46>
 8014ed8:	891a      	ldrh	r2, [r3, #8]
 8014eda:	4282      	cmp	r2, r0
 8014edc:	d1f3      	bne.n	8014ec6 <dns_recv+0x46>
        nquestions = lwip_htons(hdr.numquestions);
 8014ede:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 8014ee2:	f7ff fdab 	bl	8014a3c <lwip_htons>
 8014ee6:	4682      	mov	sl, r0
        nanswers   = lwip_htons(hdr.numanswers);
 8014ee8:	f8bd 001e 	ldrh.w	r0, [sp, #30]
 8014eec:	f7ff fda6 	bl	8014a3c <lwip_htons>
        if ((hdr.flags1 & DNS_FLAG1_RESPONSE) == 0) {
 8014ef0:	f89d 301a 	ldrb.w	r3, [sp, #26]
        nanswers   = lwip_htons(hdr.numanswers);
 8014ef4:	4683      	mov	fp, r0
        if (nquestions != 1) {
 8014ef6:	09db      	lsrs	r3, r3, #7
 8014ef8:	d0d3      	beq.n	8014ea2 <dns_recv+0x22>
 8014efa:	f1ba 0f01 	cmp.w	sl, #1
 8014efe:	d1d0      	bne.n	8014ea2 <dns_recv+0x22>
          if (!ip_addr_cmp(addr, &dns_servers[entry->server_idx])) {
 8014f00:	eb05 1305 	add.w	r3, r5, r5, lsl #4
 8014f04:	49a8      	ldr	r1, [pc, #672]	; (80151a8 <dns_recv+0x328>)
 8014f06:	f8d9 2000 	ldr.w	r2, [r9]
 8014f0a:	eb08 1303 	add.w	r3, r8, r3, lsl #4
 8014f0e:	7adb      	ldrb	r3, [r3, #11]
 8014f10:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014f14:	429a      	cmp	r2, r3
 8014f16:	d1c4      	bne.n	8014ea2 <dns_recv+0x22>
 8014f18:	f44f 7388 	mov.w	r3, #272	; 0x110
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 8014f1c:	9502      	str	r5, [sp, #8]
 8014f1e:	fb03 f305 	mul.w	r3, r3, r5
 8014f22:	4625      	mov	r5, r4
 8014f24:	9301      	str	r3, [sp, #4]
 8014f26:	3310      	adds	r3, #16
 8014f28:	4443      	add	r3, r8
 8014f2a:	9300      	str	r3, [sp, #0]
    n = pbuf_try_get_at(p, response_offset);
 8014f2c:	4631      	mov	r1, r6
 8014f2e:	4628      	mov	r0, r5
 8014f30:	f001 ff90 	bl	8016e54 <pbuf_try_get_at>
    if ((n < 0) || (response_offset == 0xFFFF)) {
 8014f34:	2800      	cmp	r0, #0
 8014f36:	db3c      	blt.n	8014fb2 <dns_recv+0x132>
 8014f38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014f3c:	429e      	cmp	r6, r3
 8014f3e:	d038      	beq.n	8014fb2 <dns_recv+0x132>
    if ((n & 0xc0) == 0xc0) {
 8014f40:	f000 02c0 	and.w	r2, r0, #192	; 0xc0
    response_offset++;
 8014f44:	1c73      	adds	r3, r6, #1
    if ((n & 0xc0) == 0xc0) {
 8014f46:	2ac0      	cmp	r2, #192	; 0xc0
    response_offset++;
 8014f48:	b29e      	uxth	r6, r3
    if ((n & 0xc0) == 0xc0) {
 8014f4a:	d032      	beq.n	8014fb2 <dns_recv+0x132>
      while (n > 0) {
 8014f4c:	b398      	cbz	r0, 8014fb6 <dns_recv+0x136>
 8014f4e:	9c00      	ldr	r4, [sp, #0]
 8014f50:	eb04 0a00 	add.w	sl, r4, r0
 8014f54:	e026      	b.n	8014fa4 <dns_recv+0x124>
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 8014f56:	f814 2b01 	ldrb.w	r2, [r4], #1
 8014f5a:	9200      	str	r2, [sp, #0]
 8014f5c:	f00a fd50 	bl	801fa00 <__locale_ctype_ptr>
 8014f60:	9a00      	ldr	r2, [sp, #0]
        ++query;
 8014f62:	9400      	str	r4, [sp, #0]
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 8014f64:	4410      	add	r0, r2
 8014f66:	7843      	ldrb	r3, [r0, #1]
 8014f68:	f003 0303 	and.w	r3, r3, #3
 8014f6c:	2b01      	cmp	r3, #1
 8014f6e:	bf08      	it	eq
 8014f70:	3220      	addeq	r2, #32
 8014f72:	9203      	str	r2, [sp, #12]
 8014f74:	f00a fd44 	bl	801fa00 <__locale_ctype_ptr>
 8014f78:	fa5f f389 	uxtb.w	r3, r9
 8014f7c:	9a03      	ldr	r2, [sp, #12]
        response_offset++;
 8014f7e:	f106 0c01 	add.w	ip, r6, #1
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 8014f82:	4418      	add	r0, r3
 8014f84:	7841      	ldrb	r1, [r0, #1]
 8014f86:	f001 0103 	and.w	r1, r1, #3
 8014f8a:	2901      	cmp	r1, #1
 8014f8c:	bf08      	it	eq
 8014f8e:	3320      	addeq	r3, #32
        if (response_offset == 0xFFFF) {
 8014f90:	429a      	cmp	r2, r3
 8014f92:	d10e      	bne.n	8014fb2 <dns_recv+0x132>
 8014f94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014f98:	429e      	cmp	r6, r3
        response_offset++;
 8014f9a:	fa1f f68c 	uxth.w	r6, ip
        if (response_offset == 0xFFFF) {
 8014f9e:	d008      	beq.n	8014fb2 <dns_recv+0x132>
      while (n > 0) {
 8014fa0:	45a2      	cmp	sl, r4
 8014fa2:	d008      	beq.n	8014fb6 <dns_recv+0x136>
        int c = pbuf_try_get_at(p, response_offset);
 8014fa4:	4631      	mov	r1, r6
 8014fa6:	4628      	mov	r0, r5
 8014fa8:	f001 ff54 	bl	8016e54 <pbuf_try_get_at>
        if (c < 0) {
 8014fac:	f1b0 0900 	subs.w	r9, r0, #0
 8014fb0:	dad1      	bge.n	8014f56 <dns_recv+0xd6>
 8014fb2:	462c      	mov	r4, r5
 8014fb4:	e775      	b.n	8014ea2 <dns_recv+0x22>
      ++query;
 8014fb6:	9b00      	ldr	r3, [sp, #0]
    n = pbuf_try_get_at(p, response_offset);
 8014fb8:	4631      	mov	r1, r6
 8014fba:	4628      	mov	r0, r5
      ++query;
 8014fbc:	3301      	adds	r3, #1
 8014fbe:	9300      	str	r3, [sp, #0]
    n = pbuf_try_get_at(p, response_offset);
 8014fc0:	f001 ff48 	bl	8016e54 <pbuf_try_get_at>
    if (n < 0) {
 8014fc4:	2800      	cmp	r0, #0
 8014fc6:	dbf4      	blt.n	8014fb2 <dns_recv+0x132>
  } while (n != 0);
 8014fc8:	d1b0      	bne.n	8014f2c <dns_recv+0xac>
  if (response_offset == 0xFFFF) {
 8014fca:	f64f 79ff 	movw	r9, #65535	; 0xffff
 8014fce:	462c      	mov	r4, r5
 8014fd0:	9d02      	ldr	r5, [sp, #8]
 8014fd2:	454e      	cmp	r6, r9
 8014fd4:	f43f af65 	beq.w	8014ea2 <dns_recv+0x22>
  return (u16_t)(response_offset + 1);
 8014fd8:	f106 0a01 	add.w	sl, r6, #1
 8014fdc:	fa1f fa8a 	uxth.w	sl, sl
        if (res_idx == 0xFFFF) {
 8014fe0:	45ca      	cmp	sl, r9
 8014fe2:	f43f af5e 	beq.w	8014ea2 <dns_recv+0x22>
        if (pbuf_copy_partial(p, &qry, SIZEOF_DNS_QUERY, res_idx) != SIZEOF_DNS_QUERY) {
 8014fe6:	4653      	mov	r3, sl
 8014fe8:	2204      	movs	r2, #4
 8014fea:	a904      	add	r1, sp, #16
 8014fec:	4620      	mov	r0, r4
 8014fee:	f001 fe23 	bl	8016c38 <pbuf_copy_partial>
 8014ff2:	2804      	cmp	r0, #4
 8014ff4:	f47f af55 	bne.w	8014ea2 <dns_recv+0x22>
        if ((qry.cls != PP_HTONS(DNS_RRCLASS_IN)) ||
 8014ff8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8014ffc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015000:	f47f af4f 	bne.w	8014ea2 <dns_recv+0x22>
            (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
 8015004:	f8bd 3010 	ldrh.w	r3, [sp, #16]
        if (res_idx + SIZEOF_DNS_QUERY > 0xFFFF) {
 8015008:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801500c:	f47f af49 	bne.w	8014ea2 <dns_recv+0x22>
 8015010:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8015014:	459a      	cmp	sl, r3
 8015016:	f63f af44 	bhi.w	8014ea2 <dns_recv+0x22>
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 801501a:	f89d 301b 	ldrb.w	r3, [sp, #27]
        res_idx = (u16_t)(res_idx + SIZEOF_DNS_QUERY);
 801501e:	3605      	adds	r6, #5
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 8015020:	071b      	lsls	r3, r3, #28
        res_idx = (u16_t)(res_idx + SIZEOF_DNS_QUERY);
 8015022:	b2b6      	uxth	r6, r6
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 8015024:	d04d      	beq.n	80150c2 <dns_recv+0x242>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 8015026:	f44f 7388 	mov.w	r3, #272	; 0x110
 801502a:	fb03 8305 	mla	r3, r3, r5, r8
 801502e:	7adb      	ldrb	r3, [r3, #11]
 8015030:	2b00      	cmp	r3, #0
 8015032:	d16e      	bne.n	8015112 <dns_recv+0x292>
 8015034:	4b5c      	ldr	r3, [pc, #368]	; (80151a8 <dns_recv+0x328>)
 8015036:	685b      	ldr	r3, [r3, #4]
 8015038:	2b00      	cmp	r3, #0
 801503a:	d06a      	beq.n	8015112 <dns_recv+0x292>
            entry->tmr     = 1;
 801503c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8015040:	f240 3201 	movw	r2, #769	; 0x301
            dns_check_entry(i);
 8015044:	4638      	mov	r0, r7
            entry->tmr     = 1;
 8015046:	fb03 8505 	mla	r5, r3, r5, r8
 801504a:	81aa      	strh	r2, [r5, #12]
            dns_check_entry(i);
 801504c:	f7ff fe90 	bl	8014d70 <dns_check_entry>
            goto ignore_packet;
 8015050:	e727      	b.n	8014ea2 <dns_recv+0x22>
    n = pbuf_try_get_at(p, offset++);
 8015052:	4656      	mov	r6, sl
  if (offset == 0xFFFF) {
 8015054:	454e      	cmp	r6, r9
 8015056:	f43f af24 	beq.w	8014ea2 <dns_recv+0x22>
  return (u16_t)(offset + 1);
 801505a:	f106 0a01 	add.w	sl, r6, #1
 801505e:	fa1f fa8a 	uxth.w	sl, sl
            if (res_idx == 0xFFFF) {
 8015062:	45ca      	cmp	sl, r9
 8015064:	f43f af1d 	beq.w	8014ea2 <dns_recv+0x22>
            if (pbuf_copy_partial(p, &ans, SIZEOF_DNS_ANSWER, res_idx) != SIZEOF_DNS_ANSWER) {
 8015068:	4653      	mov	r3, sl
 801506a:	220a      	movs	r2, #10
 801506c:	a909      	add	r1, sp, #36	; 0x24
 801506e:	4620      	mov	r0, r4
 8015070:	f001 fde2 	bl	8016c38 <pbuf_copy_partial>
            if (res_idx + SIZEOF_DNS_ANSWER > 0xFFFF) {
 8015074:	280a      	cmp	r0, #10
 8015076:	f47f af14 	bne.w	8014ea2 <dns_recv+0x22>
 801507a:	f64f 73f5 	movw	r3, #65525	; 0xfff5
 801507e:	459a      	cmp	sl, r3
 8015080:	f63f af0f 	bhi.w	8014ea2 <dns_recv+0x22>
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 8015084:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 8015088:	360b      	adds	r6, #11
 801508a:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 801508e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 8015092:	b2b6      	uxth	r6, r6
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 8015094:	d104      	bne.n	80150a0 <dns_recv+0x220>
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
 8015096:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801509a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801509e:	d046      	beq.n	801512e <dns_recv+0x2ae>
            if ((int)(res_idx + lwip_htons(ans.len)) > 0xFFFF) {
 80150a0:	f7ff fccc 	bl	8014a3c <lwip_htons>
 80150a4:	4430      	add	r0, r6
 80150a6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80150aa:	f6bf aefa 	bge.w	8014ea2 <dns_recv+0x22>
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 80150ae:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
            --nanswers;
 80150b2:	f10b 3bff 	add.w	fp, fp, #4294967295
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 80150b6:	f7ff fcc1 	bl	8014a3c <lwip_htons>
 80150ba:	4406      	add	r6, r0
            --nanswers;
 80150bc:	fa1f fb8b 	uxth.w	fp, fp
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 80150c0:	b2b6      	uxth	r6, r6
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
 80150c2:	f1bb 0f00 	cmp.w	fp, #0
 80150c6:	d024      	beq.n	8015112 <dns_recv+0x292>
 80150c8:	8923      	ldrh	r3, [r4, #8]
 80150ca:	42b3      	cmp	r3, r6
 80150cc:	d812      	bhi.n	80150f4 <dns_recv+0x274>
 80150ce:	e020      	b.n	8015112 <dns_recv+0x292>
      offset = (u16_t)(offset + n);
 80150d0:	b29e      	uxth	r6, r3
    if ((n < 0) || (offset == 0)) {
 80150d2:	f1ba 0f00 	cmp.w	sl, #0
 80150d6:	f43f aee4 	beq.w	8014ea2 <dns_recv+0x22>
    if ((n & 0xc0) == 0xc0) {
 80150da:	2ac0      	cmp	r2, #192	; 0xc0
    n = pbuf_try_get_at(p, offset);
 80150dc:	4631      	mov	r1, r6
    if ((n & 0xc0) == 0xc0) {
 80150de:	d0b8      	beq.n	8015052 <dns_recv+0x1d2>
      if (offset + n >= p->tot_len) {
 80150e0:	8922      	ldrh	r2, [r4, #8]
 80150e2:	4293      	cmp	r3, r2
 80150e4:	f6bf aedd 	bge.w	8014ea2 <dns_recv+0x22>
    n = pbuf_try_get_at(p, offset);
 80150e8:	f001 feb4 	bl	8016e54 <pbuf_try_get_at>
    if (n < 0) {
 80150ec:	2800      	cmp	r0, #0
 80150ee:	f6ff aed8 	blt.w	8014ea2 <dns_recv+0x22>
  } while (n != 0);
 80150f2:	d0af      	beq.n	8015054 <dns_recv+0x1d4>
    n = pbuf_try_get_at(p, offset++);
 80150f4:	f106 0a01 	add.w	sl, r6, #1
 80150f8:	4631      	mov	r1, r6
 80150fa:	4620      	mov	r0, r4
 80150fc:	f001 feaa 	bl	8016e54 <pbuf_try_get_at>
    if ((n < 0) || (offset == 0)) {
 8015100:	1e03      	subs	r3, r0, #0
    n = pbuf_try_get_at(p, offset++);
 8015102:	fa1f fa8a 	uxth.w	sl, sl
    n = pbuf_try_get_at(p, offset);
 8015106:	4620      	mov	r0, r4
    if ((n & 0xc0) == 0xc0) {
 8015108:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
      if (offset + n >= p->tot_len) {
 801510c:	4453      	add	r3, sl
    if ((n < 0) || (offset == 0)) {
 801510e:	dadf      	bge.n	80150d0 <dns_recv+0x250>
 8015110:	e6c7      	b.n	8014ea2 <dns_recv+0x22>
        pbuf_free(p);
 8015112:	4620      	mov	r0, r4
 8015114:	f001 fb00 	bl	8016718 <pbuf_free>
        dns_call_found(i, NULL);
 8015118:	4638      	mov	r0, r7
 801511a:	2100      	movs	r1, #0
 801511c:	f7ff fd02 	bl	8014b24 <dns_call_found>
        dns_table[i].state = DNS_STATE_UNUSED;
 8015120:	f44f 7388 	mov.w	r3, #272	; 0x110
 8015124:	2200      	movs	r2, #0
 8015126:	fb03 8505 	mla	r5, r3, r5, r8
 801512a:	72aa      	strb	r2, [r5, #10]
        return;
 801512c:	e6bc      	b.n	8014ea8 <dns_recv+0x28>
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
 801512e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8015132:	d1b5      	bne.n	80150a0 <dns_recv+0x220>
                  if (pbuf_copy_partial(p, &ip4addr, sizeof(ip4_addr_t), res_idx) != sizeof(ip4_addr_t)) {
 8015134:	4633      	mov	r3, r6
 8015136:	2204      	movs	r2, #4
 8015138:	a905      	add	r1, sp, #20
 801513a:	4620      	mov	r0, r4
 801513c:	f001 fd7c 	bl	8016c38 <pbuf_copy_partial>
 8015140:	2804      	cmp	r0, #4
 8015142:	f47f aeae 	bne.w	8014ea2 <dns_recv+0x22>
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 8015146:	f44f 7388 	mov.w	r3, #272	; 0x110
                  pbuf_free(p);
 801514a:	4620      	mov	r0, r4
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 801514c:	9a05      	ldr	r2, [sp, #20]
 801514e:	fb03 f405 	mul.w	r4, r3, r5
 8015152:	eb08 0604 	add.w	r6, r8, r4
 8015156:	6072      	str	r2, [r6, #4]
                  pbuf_free(p);
 8015158:	f001 fade 	bl	8016718 <pbuf_free>
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
 801515c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801515e:	f7ff fc71 	bl	8014a44 <lwip_htonl>
  if (entry->ttl > DNS_MAX_TTL) {
 8015162:	4b12      	ldr	r3, [pc, #72]	; (80151ac <dns_recv+0x32c>)
  dns_call_found(idx, &entry->ipaddr);
 8015164:	9901      	ldr	r1, [sp, #4]
  entry->state = DNS_STATE_DONE;
 8015166:	2203      	movs	r2, #3
  if (entry->ttl > DNS_MAX_TTL) {
 8015168:	4298      	cmp	r0, r3
  entry->ttl = ttl;
 801516a:	f848 0004 	str.w	r0, [r8, r4]
  dns_call_found(idx, &entry->ipaddr);
 801516e:	f101 0104 	add.w	r1, r1, #4
  entry->state = DNS_STATE_DONE;
 8015172:	72b2      	strb	r2, [r6, #10]
    entry->ttl = DNS_MAX_TTL;
 8015174:	bf88      	it	hi
 8015176:	f848 3004 	strhi.w	r3, [r8, r4]
  dns_call_found(idx, &entry->ipaddr);
 801517a:	4638      	mov	r0, r7
 801517c:	4441      	add	r1, r8
 801517e:	f7ff fcd1 	bl	8014b24 <dns_call_found>
  if (entry->ttl == 0) {
 8015182:	f44f 7388 	mov.w	r3, #272	; 0x110
 8015186:	fb03 f505 	mul.w	r5, r3, r5
 801518a:	f858 3005 	ldr.w	r3, [r8, r5]
 801518e:	44a8      	add	r8, r5
 8015190:	2b00      	cmp	r3, #0
 8015192:	f47f ae89 	bne.w	8014ea8 <dns_recv+0x28>
    if (entry->state == DNS_STATE_DONE) {
 8015196:	f898 200a 	ldrb.w	r2, [r8, #10]
 801519a:	2a03      	cmp	r2, #3
 801519c:	f47f ae84 	bne.w	8014ea8 <dns_recv+0x28>
      entry->state = DNS_STATE_UNUSED;
 80151a0:	f888 300a 	strb.w	r3, [r8, #10]
 80151a4:	e680      	b.n	8014ea8 <dns_recv+0x28>
 80151a6:	bf00      	nop
 80151a8:	20021e80 	.word	0x20021e80
 80151ac:	00093a80 	.word	0x00093a80
 80151b0:	20021e88 	.word	0x20021e88

080151b4 <dns_init>:
}
 80151b4:	4770      	bx	lr
 80151b6:	bf00      	nop

080151b8 <dns_setserver>:
  if (numdns < DNS_MAX_SERVERS) {
 80151b8:	2801      	cmp	r0, #1
 80151ba:	d900      	bls.n	80151be <dns_setserver+0x6>
}
 80151bc:	4770      	bx	lr
    if (dnsserver != NULL) {
 80151be:	b121      	cbz	r1, 80151ca <dns_setserver+0x12>
      dns_servers[numdns] = (*dnsserver);
 80151c0:	680a      	ldr	r2, [r1, #0]
 80151c2:	4b05      	ldr	r3, [pc, #20]	; (80151d8 <dns_setserver+0x20>)
 80151c4:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 80151c8:	4770      	bx	lr
      dns_servers[numdns] = *IP_ADDR_ANY;
 80151ca:	4a04      	ldr	r2, [pc, #16]	; (80151dc <dns_setserver+0x24>)
 80151cc:	4b02      	ldr	r3, [pc, #8]	; (80151d8 <dns_setserver+0x20>)
 80151ce:	6812      	ldr	r2, [r2, #0]
 80151d0:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
 80151d4:	4770      	bx	lr
 80151d6:	bf00      	nop
 80151d8:	20021e80 	.word	0x20021e80
 80151dc:	0803f66c 	.word	0x0803f66c

080151e0 <dns_tmr>:
{
 80151e0:	b508      	push	{r3, lr}
    dns_check_entry(i);
 80151e2:	2000      	movs	r0, #0
 80151e4:	f7ff fdc4 	bl	8014d70 <dns_check_entry>
 80151e8:	2001      	movs	r0, #1
 80151ea:	f7ff fdc1 	bl	8014d70 <dns_check_entry>
 80151ee:	2002      	movs	r0, #2
 80151f0:	f7ff fdbe 	bl	8014d70 <dns_check_entry>
 80151f4:	2003      	movs	r0, #3
}
 80151f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dns_check_entry(i);
 80151fa:	f7ff bdb9 	b.w	8014d70 <dns_check_entry>
 80151fe:	bf00      	nop

08015200 <dns_gethostbyname_addrtype>:
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  u8_t is_mdns;
#endif
  /* not initialized or no valid server yet, or invalid addr pointer
   * or invalid hostname or invalid hostname length */
  if ((addr == NULL) ||
 8015200:	2900      	cmp	r1, #0
 8015202:	f000 8139 	beq.w	8015478 <dns_gethostbyname_addrtype+0x278>
{
 8015206:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((addr == NULL) ||
 801520a:	fab0 f580 	clz	r5, r0
{
 801520e:	b083      	sub	sp, #12
 8015210:	4604      	mov	r4, r0
  if ((addr == NULL) ||
 8015212:	096d      	lsrs	r5, r5, #5
 8015214:	2d00      	cmp	r5, #0
 8015216:	f040 808c 	bne.w	8015332 <dns_gethostbyname_addrtype+0x132>
      (!hostname) || (!hostname[0])) {
 801521a:	7806      	ldrb	r6, [r0, #0]
 801521c:	2e00      	cmp	r6, #0
 801521e:	f000 8088 	beq.w	8015332 <dns_gethostbyname_addrtype+0x132>
 8015222:	468b      	mov	fp, r1
 8015224:	461f      	mov	r7, r3
 8015226:	4616      	mov	r6, r2
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) == 0)
  if (dns_pcbs[0] == NULL) {
    return ERR_ARG;
  }
#endif
  hostnamelen = strlen(hostname);
 8015228:	f7eb f814 	bl	8000254 <strlen>
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 801522c:	28ff      	cmp	r0, #255	; 0xff
  hostnamelen = strlen(hostname);
 801522e:	4680      	mov	r8, r0
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 8015230:	d87f      	bhi.n	8015332 <dns_gethostbyname_addrtype+0x132>
    return ERR_OK;
  }
#endif /* LWIP_HAVE_LOOPIF */

  /* host name already in octet notation? set ip addr and return ERR_OK */
  if (ipaddr_aton(hostname, addr)) {
 8015232:	4659      	mov	r1, fp
 8015234:	4620      	mov	r0, r4
 8015236:	f009 f985 	bl	801e544 <ip4addr_aton>
 801523a:	b118      	cbz	r0, 8015244 <dns_gethostbyname_addrtype+0x44>
#if LWIP_IPV4 && LWIP_IPV6
    if ((IP_IS_V6(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV4)) ||
        (IP_IS_V4(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV6)))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
    {
      return ERR_OK;
 801523c:	4628      	mov	r0, r5
  }

  /* queue query with specified callback */
  return dns_enqueue(hostname, hostnamelen, found, callback_arg LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)
                     LWIP_DNS_ISMDNS_ARG(is_mdns));
}
 801523e:	b003      	add	sp, #12
 8015240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015244:	f8df a244 	ldr.w	sl, [pc, #580]	; 801548c <dns_gethostbyname_addrtype+0x28c>
  if (ipaddr_aton(hostname, addr)) {
 8015248:	4605      	mov	r5, r0
 801524a:	46d1      	mov	r9, sl
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 801524c:	f899 300a 	ldrb.w	r3, [r9, #10]
 8015250:	2b03      	cmp	r3, #3
 8015252:	d03b      	beq.n	80152cc <dns_gethostbyname_addrtype+0xcc>
 8015254:	3501      	adds	r5, #1
 8015256:	f509 7988 	add.w	r9, r9, #272	; 0x110
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 801525a:	2d04      	cmp	r5, #4
 801525c:	d1f6      	bne.n	801524c <dns_gethostbyname_addrtype+0x4c>
    if (ip_addr_isany_val(dns_servers[0])) {
 801525e:	4b88      	ldr	r3, [pc, #544]	; (8015480 <dns_gethostbyname_addrtype+0x280>)
 8015260:	681b      	ldr	r3, [r3, #0]
 8015262:	2b00      	cmp	r3, #0
 8015264:	f000 80f2 	beq.w	801544c <dns_gethostbyname_addrtype+0x24c>
 8015268:	f8df b220 	ldr.w	fp, [pc, #544]	; 801548c <dns_gethostbyname_addrtype+0x28c>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 801526c:	2500      	movs	r5, #0
 801526e:	4b85      	ldr	r3, [pc, #532]	; (8015484 <dns_gethostbyname_addrtype+0x284>)
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8015270:	f89b 200a 	ldrb.w	r2, [fp, #10]
 8015274:	2a02      	cmp	r2, #2
 8015276:	d045      	beq.n	8015304 <dns_gethostbyname_addrtype+0x104>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8015278:	3501      	adds	r5, #1
 801527a:	f50b 7b88 	add.w	fp, fp, #272	; 0x110
 801527e:	b2ed      	uxtb	r5, r5
 8015280:	2d04      	cmp	r5, #4
 8015282:	d1f5      	bne.n	8015270 <dns_gethostbyname_addrtype+0x70>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 8015284:	2300      	movs	r3, #0
 8015286:	4a80      	ldr	r2, [pc, #512]	; (8015488 <dns_gethostbyname_addrtype+0x288>)
  lseqi = DNS_TABLE_SIZE;
 8015288:	4629      	mov	r1, r5
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 801528a:	7810      	ldrb	r0, [r2, #0]
  lseq = 0;
 801528c:	469c      	mov	ip, r3
    if (entry->state == DNS_STATE_UNUSED) {
 801528e:	f89a 200a 	ldrb.w	r2, [sl, #10]
 8015292:	fa5f fb83 	uxtb.w	fp, r3
 8015296:	2a00      	cmp	r2, #0
 8015298:	f000 80a9 	beq.w	80153ee <dns_gethostbyname_addrtype+0x1ee>
    if (entry->state == DNS_STATE_DONE) {
 801529c:	2a03      	cmp	r2, #3
 801529e:	f103 0301 	add.w	r3, r3, #1
 80152a2:	d026      	beq.n	80152f2 <dns_gethostbyname_addrtype+0xf2>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 80152a4:	2b04      	cmp	r3, #4
 80152a6:	f50a 7a88 	add.w	sl, sl, #272	; 0x110
 80152aa:	d1f0      	bne.n	801528e <dns_gethostbyname_addrtype+0x8e>
    if ((lseqi >= DNS_TABLE_SIZE) || (dns_table[lseqi].state != DNS_STATE_DONE)) {
 80152ac:	2904      	cmp	r1, #4
 80152ae:	d008      	beq.n	80152c2 <dns_gethostbyname_addrtype+0xc2>
 80152b0:	eb01 1301 	add.w	r3, r1, r1, lsl #4
 80152b4:	4a75      	ldr	r2, [pc, #468]	; (801548c <dns_gethostbyname_addrtype+0x28c>)
 80152b6:	eb02 1903 	add.w	r9, r2, r3, lsl #4
 80152ba:	f899 300a 	ldrb.w	r3, [r9, #10]
 80152be:	2b03      	cmp	r3, #3
 80152c0:	d03a      	beq.n	8015338 <dns_gethostbyname_addrtype+0x138>
      return ERR_MEM;
 80152c2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80152c6:	b003      	add	sp, #12
 80152c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0) &&
 80152cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80152d0:	f109 0110 	add.w	r1, r9, #16
 80152d4:	4620      	mov	r0, r4
 80152d6:	f7ff fc09 	bl	8014aec <lwip_strnicmp>
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 80152da:	2800      	cmp	r0, #0
 80152dc:	d1ba      	bne.n	8015254 <dns_gethostbyname_addrtype+0x54>
        ip_addr_copy(*addr, dns_table[i].ipaddr);
 80152de:	4b6b      	ldr	r3, [pc, #428]	; (801548c <dns_gethostbyname_addrtype+0x28c>)
 80152e0:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80152e4:	eb03 1905 	add.w	r9, r3, r5, lsl #4
 80152e8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80152ec:	f8cb 3000 	str.w	r3, [fp]
 80152f0:	e7a5      	b.n	801523e <dns_gethostbyname_addrtype+0x3e>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 80152f2:	f89a 200e 	ldrb.w	r2, [sl, #14]
 80152f6:	1a82      	subs	r2, r0, r2
 80152f8:	b2d2      	uxtb	r2, r2
      if (age > lseq) {
 80152fa:	4562      	cmp	r2, ip
 80152fc:	d9d2      	bls.n	80152a4 <dns_gethostbyname_addrtype+0xa4>
 80152fe:	4659      	mov	r1, fp
 8015300:	4694      	mov	ip, r2
 8015302:	e7cf      	b.n	80152a4 <dns_gethostbyname_addrtype+0xa4>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0)) {
 8015304:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015308:	f10b 0110 	add.w	r1, fp, #16
 801530c:	4620      	mov	r0, r4
 801530e:	9300      	str	r3, [sp, #0]
 8015310:	f7ff fbec 	bl	8014aec <lwip_strnicmp>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8015314:	9b00      	ldr	r3, [sp, #0]
 8015316:	2800      	cmp	r0, #0
 8015318:	d1ae      	bne.n	8015278 <dns_gethostbyname_addrtype+0x78>
        if (dns_requests[r].found == 0) {
 801531a:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 801531e:	3001      	adds	r0, #1
 8015320:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015324:	0092      	lsls	r2, r2, #2
 8015326:	2900      	cmp	r1, #0
 8015328:	f000 8095 	beq.w	8015456 <dns_gethostbyname_addrtype+0x256>
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 801532c:	2804      	cmp	r0, #4
 801532e:	d1f4      	bne.n	801531a <dns_gethostbyname_addrtype+0x11a>
 8015330:	e7a2      	b.n	8015278 <dns_gethostbyname_addrtype+0x78>
    return ERR_ARG;
 8015332:	f06f 000f 	mvn.w	r0, #15
 8015336:	e782      	b.n	801523e <dns_gethostbyname_addrtype+0x3e>
      entry = &dns_table[i];
 8015338:	468b      	mov	fp, r1
 801533a:	f8cd 9000 	str.w	r9, [sp]
 801533e:	f04f 0900 	mov.w	r9, #0
    if (dns_requests[r].found == NULL) {
 8015342:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8015346:	4b4f      	ldr	r3, [pc, #316]	; (8015484 <dns_gethostbyname_addrtype+0x284>)
 8015348:	eb0a 0209 	add.w	r2, sl, r9
 801534c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015350:	0092      	lsls	r2, r2, #2
 8015352:	b12b      	cbz	r3, 8015360 <dns_gethostbyname_addrtype+0x160>
 8015354:	f109 0901 	add.w	r9, r9, #1
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8015358:	f1b9 0f04 	cmp.w	r9, #4
 801535c:	d1f1      	bne.n	8015342 <dns_gethostbyname_addrtype+0x142>
 801535e:	e7b0      	b.n	80152c2 <dns_gethostbyname_addrtype+0xc2>
 8015360:	4611      	mov	r1, r2
  req->dns_table_idx = i;
 8015362:	4a48      	ldr	r2, [pc, #288]	; (8015484 <dns_gethostbyname_addrtype+0x284>)
  entry->state = DNS_STATE_NEW;
 8015364:	f04f 0e01 	mov.w	lr, #1
  req->dns_table_idx = i;
 8015368:	eb02 0c01 	add.w	ip, r2, r1
 801536c:	9101      	str	r1, [sp, #4]
  MEMCPY(entry->name, name, namelen);
 801536e:	4621      	mov	r1, r4
  entry->seqno = dns_seqno;
 8015370:	9c00      	ldr	r4, [sp, #0]
  req->found = found;
 8015372:	4a44      	ldr	r2, [pc, #272]	; (8015484 <dns_gethostbyname_addrtype+0x284>)
  entry->seqno = dns_seqno;
 8015374:	73a0      	strb	r0, [r4, #14]
  req->found = found;
 8015376:	9801      	ldr	r0, [sp, #4]
  req->arg   = callback_arg;
 8015378:	f8cc 7004 	str.w	r7, [ip, #4]
  req->found = found;
 801537c:	5016      	str	r6, [r2, r0]
  MEMCPY(entry->name, name, namelen);
 801537e:	4626      	mov	r6, r4
 8015380:	4620      	mov	r0, r4
 8015382:	4642      	mov	r2, r8
  entry->state = DNS_STATE_NEW;
 8015384:	4637      	mov	r7, r6
 8015386:	f886 e00a 	strb.w	lr, [r6, #10]
 801538a:	4e41      	ldr	r6, [pc, #260]	; (8015490 <dns_gethostbyname_addrtype+0x290>)
  MEMCPY(entry->name, name, namelen);
 801538c:	3010      	adds	r0, #16
  req->dns_table_idx = i;
 801538e:	f88c b008 	strb.w	fp, [ip, #8]
  entry->name[namelen] = 0;
 8015392:	461c      	mov	r4, r3
 8015394:	9301      	str	r3, [sp, #4]
 8015396:	44b8      	add	r8, r7
  MEMCPY(entry->name, name, namelen);
 8015398:	f00a fb71 	bl	801fa7e <memcpy>
  entry->name[namelen] = 0;
 801539c:	9b01      	ldr	r3, [sp, #4]
 801539e:	4632      	mov	r2, r6
 80153a0:	f888 3010 	strb.w	r3, [r8, #16]
    if (dns_pcbs[i] == NULL) {
 80153a4:	f852 3b04 	ldr.w	r3, [r2], #4
 80153a8:	b2e7      	uxtb	r7, r4
 80153aa:	b33b      	cbz	r3, 80153fc <dns_gethostbyname_addrtype+0x1fc>
 80153ac:	3401      	adds	r4, #1
  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 80153ae:	2c04      	cmp	r4, #4
 80153b0:	d1f8      	bne.n	80153a4 <dns_gethostbyname_addrtype+0x1a4>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 80153b2:	4938      	ldr	r1, [pc, #224]	; (8015494 <dns_gethostbyname_addrtype+0x294>)
 80153b4:	780f      	ldrb	r7, [r1, #0]
 80153b6:	3701      	adds	r7, #1
 80153b8:	b2ff      	uxtb	r7, r7
    if (idx >= DNS_MAX_SOURCE_PORTS) {
 80153ba:	2f03      	cmp	r7, #3
 80153bc:	463b      	mov	r3, r7
 80153be:	d901      	bls.n	80153c4 <dns_gethostbyname_addrtype+0x1c4>
 80153c0:	2700      	movs	r7, #0
      idx = 0;
 80153c2:	463b      	mov	r3, r7
    if (dns_pcbs[idx] != NULL) {
 80153c4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 80153c8:	1c7a      	adds	r2, r7, #1
 80153ca:	3d01      	subs	r5, #1
    if (dns_pcbs[idx] != NULL) {
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	d140      	bne.n	8015452 <dns_gethostbyname_addrtype+0x252>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 80153d0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 80153d4:	b2d7      	uxtb	r7, r2
 80153d6:	d1f0      	bne.n	80153ba <dns_gethostbyname_addrtype+0x1ba>
    entry->state = DNS_STATE_UNUSED;
 80153d8:	9a00      	ldr	r2, [sp, #0]
    req->found = NULL;
 80153da:	44d1      	add	r9, sl
  entry->pcb_idx = dns_alloc_pcb();
 80153dc:	2304      	movs	r3, #4
    req->found = NULL;
 80153de:	4929      	ldr	r1, [pc, #164]	; (8015484 <dns_gethostbyname_addrtype+0x284>)
    entry->state = DNS_STATE_UNUSED;
 80153e0:	7295      	strb	r5, [r2, #10]
    return ERR_MEM;
 80153e2:	f04f 30ff 	mov.w	r0, #4294967295
    req->found = NULL;
 80153e6:	f841 5029 	str.w	r5, [r1, r9, lsl #2]
  entry->pcb_idx = dns_alloc_pcb();
 80153ea:	73d3      	strb	r3, [r2, #15]
 80153ec:	e727      	b.n	801523e <dns_gethostbyname_addrtype+0x3e>
    entry = &dns_table[i];
 80153ee:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80153f2:	4a26      	ldr	r2, [pc, #152]	; (801548c <dns_gethostbyname_addrtype+0x28c>)
 80153f4:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 80153f8:	9300      	str	r3, [sp, #0]
 80153fa:	e7a0      	b.n	801533e <dns_gethostbyname_addrtype+0x13e>
  pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 80153fc:	202e      	movs	r0, #46	; 0x2e
 80153fe:	f006 fce5 	bl	801bdcc <udp_new_ip_type>
  if (pcb == NULL) {
 8015402:	4680      	mov	r8, r0
 8015404:	b3a8      	cbz	r0, 8015472 <dns_gethostbyname_addrtype+0x272>
    u16_t port = (u16_t)DNS_RAND_TXID();
 8015406:	f00b fb6f 	bl	8020ae8 <rand>
 801540a:	b282      	uxth	r2, r0
    if (DNS_PORT_ALLOWED(port)) {
 801540c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8015410:	d3f9      	bcc.n	8015406 <dns_gethostbyname_addrtype+0x206>
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 8015412:	4921      	ldr	r1, [pc, #132]	; (8015498 <dns_gethostbyname_addrtype+0x298>)
 8015414:	4640      	mov	r0, r8
 8015416:	f006 fa63 	bl	801b8e0 <udp_bind>
  } while (err == ERR_USE);
 801541a:	f110 0f08 	cmn.w	r0, #8
 801541e:	d0f2      	beq.n	8015406 <dns_gethostbyname_addrtype+0x206>
  if (err != ERR_OK) {
 8015420:	bb00      	cbnz	r0, 8015464 <dns_gethostbyname_addrtype+0x264>
  udp_recv(pcb, dns_recv, NULL);
 8015422:	4602      	mov	r2, r0
 8015424:	491d      	ldr	r1, [pc, #116]	; (801549c <dns_gethostbyname_addrtype+0x29c>)
 8015426:	4640      	mov	r0, r8
 8015428:	f006 fc7e 	bl	801bd28 <udp_recv>
      dns_last_pcb_idx = i;
 801542c:	4b19      	ldr	r3, [pc, #100]	; (8015494 <dns_gethostbyname_addrtype+0x294>)
    dns_pcbs[i] = dns_alloc_random_port();
 801542e:	f846 8024 	str.w	r8, [r6, r4, lsl #2]
      dns_last_pcb_idx = i;
 8015432:	701f      	strb	r7, [r3, #0]
  dns_seqno++;
 8015434:	4a14      	ldr	r2, [pc, #80]	; (8015488 <dns_gethostbyname_addrtype+0x288>)
  dns_check_entry(i);
 8015436:	4658      	mov	r0, fp
  entry->pcb_idx = dns_alloc_pcb();
 8015438:	9900      	ldr	r1, [sp, #0]
  dns_seqno++;
 801543a:	7813      	ldrb	r3, [r2, #0]
  entry->pcb_idx = dns_alloc_pcb();
 801543c:	73cf      	strb	r7, [r1, #15]
  dns_seqno++;
 801543e:	3301      	adds	r3, #1
 8015440:	7013      	strb	r3, [r2, #0]
  dns_check_entry(i);
 8015442:	f7ff fc95 	bl	8014d70 <dns_check_entry>
  return ERR_INPROGRESS;
 8015446:	f06f 0004 	mvn.w	r0, #4
 801544a:	e6f8      	b.n	801523e <dns_gethostbyname_addrtype+0x3e>
      return ERR_VAL;
 801544c:	f06f 0005 	mvn.w	r0, #5
 8015450:	e6f5      	b.n	801523e <dns_gethostbyname_addrtype+0x3e>
      dns_last_pcb_idx = idx;
 8015452:	700f      	strb	r7, [r1, #0]
 8015454:	e7ee      	b.n	8015434 <dns_gethostbyname_addrtype+0x234>
          dns_requests[r].found = found;
 8015456:	1899      	adds	r1, r3, r2
 8015458:	509e      	str	r6, [r3, r2]
          return ERR_INPROGRESS;
 801545a:	f06f 0004 	mvn.w	r0, #4
          dns_requests[r].arg = callback_arg;
 801545e:	604f      	str	r7, [r1, #4]
          dns_requests[r].dns_table_idx = i;
 8015460:	720d      	strb	r5, [r1, #8]
 8015462:	e6ec      	b.n	801523e <dns_gethostbyname_addrtype+0x3e>
    udp_remove(pcb);
 8015464:	4640      	mov	r0, r8
 8015466:	f006 fc71 	bl	801bd4c <udp_remove>
    dns_pcbs[i] = dns_alloc_random_port();
 801546a:	2300      	movs	r3, #0
 801546c:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
 8015470:	e79f      	b.n	80153b2 <dns_gethostbyname_addrtype+0x1b2>
 8015472:	f846 8024 	str.w	r8, [r6, r4, lsl #2]
 8015476:	e79c      	b.n	80153b2 <dns_gethostbyname_addrtype+0x1b2>
    return ERR_ARG;
 8015478:	f06f 000f 	mvn.w	r0, #15
}
 801547c:	4770      	bx	lr
 801547e:	bf00      	nop
 8015480:	20021e80 	.word	0x20021e80
 8015484:	20021e4c 	.word	0x20021e4c
 8015488:	20021e7c 	.word	0x20021e7c
 801548c:	20021e88 	.word	0x20021e88
 8015490:	20021e3c 	.word	0x20021e3c
 8015494:	20021e38 	.word	0x20021e38
 8015498:	0803f66c 	.word	0x0803f66c
 801549c:	08014e81 	.word	0x08014e81

080154a0 <dns_gethostbyname>:
{
 80154a0:	b510      	push	{r4, lr}
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
 80154a2:	2400      	movs	r4, #0
{
 80154a4:	b082      	sub	sp, #8
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
 80154a6:	9400      	str	r4, [sp, #0]
 80154a8:	f7ff feaa 	bl	8015200 <dns_gethostbyname_addrtype>
}
 80154ac:	b002      	add	sp, #8
 80154ae:	bd10      	pop	{r4, pc}

080154b0 <lwip_standard_chksum>:
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 80154b0:	2300      	movs	r3, #0
{
 80154b2:	b470      	push	{r4, r5, r6}
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80154b4:	4299      	cmp	r1, r3
{
 80154b6:	b083      	sub	sp, #12
  int odd = ((mem_ptr_t)pb & 1);
 80154b8:	f000 0601 	and.w	r6, r0, #1
  u16_t t = 0;
 80154bc:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (odd && len > 0) {
 80154c0:	dd05      	ble.n	80154ce <lwip_standard_chksum+0x1e>
 80154c2:	b126      	cbz	r6, 80154ce <lwip_standard_chksum+0x1e>
    ((u8_t *)&t)[1] = *pb++;
 80154c4:	7803      	ldrb	r3, [r0, #0]
    len--;
 80154c6:	3901      	subs	r1, #1
    ((u8_t *)&t)[1] = *pb++;
 80154c8:	3001      	adds	r0, #1
 80154ca:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 80154ce:	2901      	cmp	r1, #1
 80154d0:	dd26      	ble.n	8015520 <lwip_standard_chksum+0x70>
 80154d2:	3902      	subs	r1, #2
  u32_t sum = 0;
 80154d4:	2300      	movs	r3, #0
 80154d6:	084d      	lsrs	r5, r1, #1
 80154d8:	1c6c      	adds	r4, r5, #1
 80154da:	eb00 0444 	add.w	r4, r0, r4, lsl #1
    sum += *ps++;
 80154de:	f830 2b02 	ldrh.w	r2, [r0], #2
  while (len > 1) {
 80154e2:	4284      	cmp	r4, r0
    sum += *ps++;
 80154e4:	4413      	add	r3, r2
  while (len > 1) {
 80154e6:	d1fa      	bne.n	80154de <lwip_standard_chksum+0x2e>
 80154e8:	ebc5 75c5 	rsb	r5, r5, r5, lsl #31
 80154ec:	eb01 0145 	add.w	r1, r1, r5, lsl #1
    len -= 2;
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 80154f0:	2901      	cmp	r1, #1
 80154f2:	d102      	bne.n	80154fa <lwip_standard_chksum+0x4a>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80154f4:	7802      	ldrb	r2, [r0, #0]
 80154f6:	f88d 2006 	strb.w	r2, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
 80154fa:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80154fe:	4403      	add	r3, r0

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8015500:	b298      	uxth	r0, r3
 8015502:	eb00 4313 	add.w	r3, r0, r3, lsr #16
  sum = FOLD_U32T(sum);
 8015506:	b298      	uxth	r0, r3
 8015508:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 801550c:	b126      	cbz	r6, 8015518 <lwip_standard_chksum+0x68>
    sum = SWAP_BYTES_IN_WORD(sum);
 801550e:	0203      	lsls	r3, r0, #8
 8015510:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8015514:	b29b      	uxth	r3, r3
 8015516:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 8015518:	b280      	uxth	r0, r0
 801551a:	b003      	add	sp, #12
 801551c:	bc70      	pop	{r4, r5, r6}
 801551e:	4770      	bx	lr
  u32_t sum = 0;
 8015520:	2300      	movs	r3, #0
 8015522:	e7e5      	b.n	80154f0 <lwip_standard_chksum+0x40>

08015524 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 8015524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015528:	9d06      	ldr	r5, [sp, #24]
 801552a:	4617      	mov	r7, r2
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 801552c:	681c      	ldr	r4, [r3, #0]
{
 801552e:	4688      	mov	r8, r1
  acc = (addr & 0xffffUL);
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
  addr = ip4_addr_get_u32(dest);
 8015530:	682b      	ldr	r3, [r5, #0]
  acc = (u32_t)(acc + (addr & 0xffffUL));
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 8015532:	0c1a      	lsrs	r2, r3, #16
 8015534:	fa12 f383 	uxtah	r3, r2, r3
 8015538:	fa13 f384 	uxtah	r3, r3, r4
 801553c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 8015540:	b29c      	uxth	r4, r3
 8015542:	eb04 4313 	add.w	r3, r4, r3, lsr #16
  acc = FOLD_U32T(acc);
 8015546:	b29c      	uxth	r4, r3
 8015548:	eb04 4413 	add.w	r4, r4, r3, lsr #16
  for (q = p; q != NULL; q = q->next) {
 801554c:	b1f8      	cbz	r0, 801558e <inet_chksum_pseudo+0x6a>
 801554e:	4605      	mov	r5, r0
  int swapped = 0;
 8015550:	2600      	movs	r6, #0
    acc += LWIP_CHKSUM(q->payload, q->len);
 8015552:	8969      	ldrh	r1, [r5, #10]
 8015554:	6868      	ldr	r0, [r5, #4]
 8015556:	f7ff ffab 	bl	80154b0 <lwip_standard_chksum>
 801555a:	4404      	add	r4, r0
    if (q->len % 2 != 0) {
 801555c:	896b      	ldrh	r3, [r5, #10]
    acc = FOLD_U32T(acc);
 801555e:	b2a0      	uxth	r0, r4
    if (q->len % 2 != 0) {
 8015560:	f013 0f01 	tst.w	r3, #1
    acc = FOLD_U32T(acc);
 8015564:	eb00 4414 	add.w	r4, r0, r4, lsr #16
      acc = SWAP_BYTES_IN_WORD(acc);
 8015568:	ea4f 2004 	mov.w	r0, r4, lsl #8
 801556c:	f3c4 2307 	ubfx	r3, r4, #8, #8
    if (q->len % 2 != 0) {
 8015570:	d004      	beq.n	801557c <inet_chksum_pseudo+0x58>
      acc = SWAP_BYTES_IN_WORD(acc);
 8015572:	b280      	uxth	r0, r0
 8015574:	f086 0601 	eor.w	r6, r6, #1
 8015578:	ea40 0403 	orr.w	r4, r0, r3
  for (q = p; q != NULL; q = q->next) {
 801557c:	682d      	ldr	r5, [r5, #0]
 801557e:	2d00      	cmp	r5, #0
 8015580:	d1e7      	bne.n	8015552 <inet_chksum_pseudo+0x2e>
  if (swapped) {
 8015582:	b126      	cbz	r6, 801558e <inet_chksum_pseudo+0x6a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8015584:	0223      	lsls	r3, r4, #8
 8015586:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801558a:	b29b      	uxth	r3, r3
 801558c:	431c      	orrs	r4, r3
  acc += (u32_t)lwip_htons((u16_t)proto);
 801558e:	4640      	mov	r0, r8
 8015590:	f7ff fa54 	bl	8014a3c <lwip_htons>
 8015594:	4605      	mov	r5, r0
  acc += (u32_t)lwip_htons(proto_len);
 8015596:	4638      	mov	r0, r7
 8015598:	f7ff fa50 	bl	8014a3c <lwip_htons>
 801559c:	4428      	add	r0, r5
 801559e:	4404      	add	r4, r0
  acc = FOLD_U32T(acc);
 80155a0:	b2a0      	uxth	r0, r4
 80155a2:	eb00 4414 	add.w	r4, r0, r4, lsr #16
  acc = FOLD_U32T(acc);
 80155a6:	b2a0      	uxth	r0, r4
 80155a8:	eb00 4014 	add.w	r0, r0, r4, lsr #16
  return (u16_t)~(acc & 0xffffUL);
 80155ac:	43c0      	mvns	r0, r0

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
}
 80155ae:	b280      	uxth	r0, r0
 80155b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080155b4 <ip_chksum_pseudo>:
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 80155b4:	f7ff bfb6 	b.w	8015524 <inet_chksum_pseudo>

080155b8 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80155b8:	b508      	push	{r3, lr}
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 80155ba:	f7ff ff79 	bl	80154b0 <lwip_standard_chksum>
 80155be:	43c0      	mvns	r0, r0
}
 80155c0:	b280      	uxth	r0, r0
 80155c2:	bd08      	pop	{r3, pc}

080155c4 <inet_chksum_pbuf>:
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;

  acc = 0;
  for (q = p; q != NULL; q = q->next) {
 80155c4:	b320      	cbz	r0, 8015610 <inet_chksum_pbuf+0x4c>
{
 80155c6:	b570      	push	{r4, r5, r6, lr}
  int swapped = 0;
 80155c8:	2600      	movs	r6, #0
 80155ca:	4605      	mov	r5, r0
  acc = 0;
 80155cc:	4634      	mov	r4, r6
    acc += LWIP_CHKSUM(q->payload, q->len);
 80155ce:	8969      	ldrh	r1, [r5, #10]
 80155d0:	6868      	ldr	r0, [r5, #4]
 80155d2:	f7ff ff6d 	bl	80154b0 <lwip_standard_chksum>
 80155d6:	4404      	add	r4, r0
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
 80155d8:	896b      	ldrh	r3, [r5, #10]
    acc = FOLD_U32T(acc);
 80155da:	b2a0      	uxth	r0, r4
    if (q->len % 2 != 0) {
 80155dc:	f013 0f01 	tst.w	r3, #1
    acc = FOLD_U32T(acc);
 80155e0:	eb00 4414 	add.w	r4, r0, r4, lsr #16
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
 80155e4:	ea4f 2004 	mov.w	r0, r4, lsl #8
 80155e8:	f3c4 2307 	ubfx	r3, r4, #8, #8
    if (q->len % 2 != 0) {
 80155ec:	d004      	beq.n	80155f8 <inet_chksum_pbuf+0x34>
      acc = SWAP_BYTES_IN_WORD(acc);
 80155ee:	b280      	uxth	r0, r0
 80155f0:	f086 0601 	eor.w	r6, r6, #1
 80155f4:	ea40 0403 	orr.w	r4, r0, r3
  for (q = p; q != NULL; q = q->next) {
 80155f8:	682d      	ldr	r5, [r5, #0]
 80155fa:	2d00      	cmp	r5, #0
 80155fc:	d1e7      	bne.n	80155ce <inet_chksum_pbuf+0xa>
    }
  }

  if (swapped) {
 80155fe:	b126      	cbz	r6, 801560a <inet_chksum_pbuf+0x46>
    acc = SWAP_BYTES_IN_WORD(acc);
 8015600:	0220      	lsls	r0, r4, #8
 8015602:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8015606:	b280      	uxth	r0, r0
 8015608:	4304      	orrs	r4, r0
 801560a:	43e4      	mvns	r4, r4
 801560c:	b2a0      	uxth	r0, r4
  }
  return (u16_t)~(acc & 0xffffUL);
}
 801560e:	bd70      	pop	{r4, r5, r6, pc}
  for (q = p; q != NULL; q = q->next) {
 8015610:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 8015614:	4770      	bx	lr
 8015616:	bf00      	nop

08015618 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8015618:	b508      	push	{r3, lr}
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
 801561a:	f001 fcd3 	bl	8016fc4 <stats_init>
#if !NO_SYS
  sys_init();
 801561e:	f009 fded 	bl	801f1fc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8015622:	f000 f97b 	bl	801591c <mem_init>
  memp_init();
 8015626:	f000 fd5d 	bl	80160e4 <memp_init>
  pbuf_init();
  netif_init();
 801562a:	f000 fe21 	bl	8016270 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801562e:	f006 f829 	bl	801b684 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8015632:	f001 fd31 	bl	8017098 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 8015636:	f7ff fdbd 	bl	80151b4 <dns_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 801563a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 801563e:	f005 bfb3 	b.w	801b5a8 <sys_timeouts_init>
 8015642:	bf00      	nop

08015644 <mem_link_valid>:
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
  nmem = ptr_to_mem(mem->next);
  pmem = ptr_to_mem(mem->prev);
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8015644:	f642 63e0 	movw	r3, #12000	; 0x2ee0
  pmem = ptr_to_mem(mem->prev);
 8015648:	8841      	ldrh	r1, [r0, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801564a:	4299      	cmp	r1, r3
{
 801564c:	b430      	push	{r4, r5}
  nmem = ptr_to_mem(mem->next);
 801564e:	8804      	ldrh	r4, [r0, #0]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8015650:	d804      	bhi.n	801565c <mem_link_valid+0x18>
 8015652:	429c      	cmp	r4, r3
 8015654:	bf94      	ite	ls
 8015656:	2300      	movls	r3, #0
 8015658:	2301      	movhi	r3, #1
 801565a:	b113      	cbz	r3, 8015662 <mem_link_valid+0x1e>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
    return 0;
 801565c:	2000      	movs	r0, #0
  }
  return 1;
}
 801565e:	bc30      	pop	{r4, r5}
 8015660:	4770      	bx	lr
  return (mem_size_t)((u8_t *)mem - ram);
 8015662:	4a0b      	ldr	r2, [pc, #44]	; (8015690 <mem_link_valid+0x4c>)
 8015664:	6815      	ldr	r5, [r2, #0]
 8015666:	1b40      	subs	r0, r0, r5
 8015668:	b282      	uxth	r2, r0
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801566a:	4291      	cmp	r1, r2
 801566c:	d002      	beq.n	8015674 <mem_link_valid+0x30>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801566e:	5a69      	ldrh	r1, [r5, r1]
 8015670:	4291      	cmp	r1, r2
 8015672:	d1f3      	bne.n	801565c <mem_link_valid+0x18>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8015674:	4b07      	ldr	r3, [pc, #28]	; (8015694 <mem_link_valid+0x50>)
  return (struct mem *)(void *)&ram[ptr];
 8015676:	442c      	add	r4, r5
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8015678:	681b      	ldr	r3, [r3, #0]
 801567a:	42a3      	cmp	r3, r4
 801567c:	d006      	beq.n	801568c <mem_link_valid+0x48>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801567e:	8860      	ldrh	r0, [r4, #2]
 8015680:	1a80      	subs	r0, r0, r2
 8015682:	fab0 f080 	clz	r0, r0
}
 8015686:	bc30      	pop	{r4, r5}
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8015688:	0940      	lsrs	r0, r0, #5
}
 801568a:	4770      	bx	lr
  return 1;
 801568c:	2001      	movs	r0, #1
 801568e:	e7e6      	b.n	801565e <mem_link_valid+0x1a>
 8015690:	200222d4 	.word	0x200222d4
 8015694:	200222d8 	.word	0x200222d8

08015698 <mem_sanity>:

#if MEM_SANITY_CHECK
static void
mem_sanity(void)
{
 8015698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  struct mem *mem;
  u8_t last_used;

  /* begin with first element here */
  mem = (struct mem *)ram;
 801569c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8015850 <mem_sanity+0x1b8>
 80156a0:	f8d8 6000 	ldr.w	r6, [r8]
  LWIP_ASSERT("heap element used valid", (mem->used == 0) || (mem->used == 1));
 80156a4:	7935      	ldrb	r5, [r6, #4]
 80156a6:	2d01      	cmp	r5, #1
 80156a8:	d907      	bls.n	80156ba <mem_sanity+0x22>
 80156aa:	4b60      	ldr	r3, [pc, #384]	; (801582c <mem_sanity+0x194>)
 80156ac:	f240 223f 	movw	r2, #575	; 0x23f
 80156b0:	495f      	ldr	r1, [pc, #380]	; (8015830 <mem_sanity+0x198>)
 80156b2:	4860      	ldr	r0, [pc, #384]	; (8015834 <mem_sanity+0x19c>)
 80156b4:	f00b f988 	bl	80209c8 <iprintf>
 80156b8:	7935      	ldrb	r5, [r6, #4]
  last_used = mem->used;
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == 0);
 80156ba:	8873      	ldrh	r3, [r6, #2]
 80156bc:	2b00      	cmp	r3, #0
 80156be:	f040 80ac 	bne.w	801581a <mem_sanity+0x182>
  LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 80156c2:	8834      	ldrh	r4, [r6, #0]
 80156c4:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 80156c8:	429c      	cmp	r4, r3
 80156ca:	f200 809d 	bhi.w	8015808 <mem_sanity+0x170>
  return (struct mem *)(void *)&ram[ptr];
 80156ce:	f8d8 3000 	ldr.w	r3, [r8]
 80156d2:	441c      	add	r4, r3
  LWIP_ASSERT("heap element next ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->next) == ptr_to_mem(mem->next)));

  /* check all elements before the end of the heap */
  for (mem = ptr_to_mem(mem->next);
 80156d4:	429c      	cmp	r4, r3
 80156d6:	d965      	bls.n	80157a4 <mem_sanity+0x10c>
       ((u8_t *)mem > ram) && (mem < ram_end);
 80156d8:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8015854 <mem_sanity+0x1bc>
 80156dc:	f8d9 2000 	ldr.w	r2, [r9]
 80156e0:	4294      	cmp	r4, r2
 80156e2:	d25f      	bcs.n	80157a4 <mem_sanity+0x10c>
       mem = ptr_to_mem(mem->next)) {
    LWIP_ASSERT("heap element aligned", LWIP_MEM_ALIGN(mem) == mem);
 80156e4:	4f51      	ldr	r7, [pc, #324]	; (801582c <mem_sanity+0x194>)
 80156e6:	f8df a170 	ldr.w	sl, [pc, #368]	; 8015858 <mem_sanity+0x1c0>
 80156ea:	4e52      	ldr	r6, [pc, #328]	; (8015834 <mem_sanity+0x19c>)
 80156ec:	e017      	b.n	801571e <mem_sanity+0x86>
    LWIP_ASSERT("heap element prev ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->prev) == ptr_to_mem(mem->prev)));
    LWIP_ASSERT("heap element next ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->next) == ptr_to_mem(mem->next)));

    if (last_used == 0) {
      /* 2 unused elements in a row? */
      LWIP_ASSERT("heap element unused?", mem->used == 1);
 80156ee:	2b01      	cmp	r3, #1
 80156f0:	d006      	beq.n	8015700 <mem_sanity+0x68>
 80156f2:	463b      	mov	r3, r7
 80156f4:	f240 2251 	movw	r2, #593	; 0x251
 80156f8:	494f      	ldr	r1, [pc, #316]	; (8015838 <mem_sanity+0x1a0>)
 80156fa:	4630      	mov	r0, r6
 80156fc:	f00b f964 	bl	80209c8 <iprintf>
    } else {
      LWIP_ASSERT("heap element unused member", (mem->used == 0) || (mem->used == 1));
    }

    LWIP_ASSERT("heap element link valid", mem_link_valid(mem));
 8015700:	4620      	mov	r0, r4
 8015702:	f7ff ff9f 	bl	8015644 <mem_link_valid>
 8015706:	b388      	cbz	r0, 801576c <mem_sanity+0xd4>
  return (struct mem *)(void *)&ram[ptr];
 8015708:	f8d8 3000 	ldr.w	r3, [r8]
 801570c:	8822      	ldrh	r2, [r4, #0]

    /* used/unused altering */
    last_used = mem->used;
 801570e:	7925      	ldrb	r5, [r4, #4]
  return (struct mem *)(void *)&ram[ptr];
 8015710:	189c      	adds	r4, r3, r2
  for (mem = ptr_to_mem(mem->next);
 8015712:	42a3      	cmp	r3, r4
 8015714:	d246      	bcs.n	80157a4 <mem_sanity+0x10c>
       ((u8_t *)mem > ram) && (mem < ram_end);
 8015716:	f8d9 2000 	ldr.w	r2, [r9]
 801571a:	42a2      	cmp	r2, r4
 801571c:	d942      	bls.n	80157a4 <mem_sanity+0x10c>
    LWIP_ASSERT("heap element aligned", LWIP_MEM_ALIGN(mem) == mem);
 801571e:	1ce3      	adds	r3, r4, #3
 8015720:	f023 0303 	bic.w	r3, r3, #3
 8015724:	429c      	cmp	r4, r3
 8015726:	d006      	beq.n	8015736 <mem_sanity+0x9e>
 8015728:	463b      	mov	r3, r7
 801572a:	f240 2249 	movw	r2, #585	; 0x249
 801572e:	4651      	mov	r1, sl
 8015730:	4630      	mov	r0, r6
 8015732:	f00b f949 	bl	80209c8 <iprintf>
    LWIP_ASSERT("heap element prev ptr valid", mem->prev <= MEM_SIZE_ALIGNED);
 8015736:	8862      	ldrh	r2, [r4, #2]
 8015738:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 801573c:	429a      	cmp	r2, r3
 801573e:	d81d      	bhi.n	801577c <mem_sanity+0xe4>
    LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 8015740:	8822      	ldrh	r2, [r4, #0]
 8015742:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8015746:	429a      	cmp	r2, r3
 8015748:	d824      	bhi.n	8015794 <mem_sanity+0xfc>
 801574a:	7923      	ldrb	r3, [r4, #4]
    if (last_used == 0) {
 801574c:	2d00      	cmp	r5, #0
 801574e:	d0ce      	beq.n	80156ee <mem_sanity+0x56>
      LWIP_ASSERT("heap element unused member", (mem->used == 0) || (mem->used == 1));
 8015750:	2b01      	cmp	r3, #1
 8015752:	d9d5      	bls.n	8015700 <mem_sanity+0x68>
 8015754:	463b      	mov	r3, r7
 8015756:	f240 2253 	movw	r2, #595	; 0x253
 801575a:	4938      	ldr	r1, [pc, #224]	; (801583c <mem_sanity+0x1a4>)
 801575c:	4630      	mov	r0, r6
 801575e:	f00b f933 	bl	80209c8 <iprintf>
    LWIP_ASSERT("heap element link valid", mem_link_valid(mem));
 8015762:	4620      	mov	r0, r4
 8015764:	f7ff ff6e 	bl	8015644 <mem_link_valid>
 8015768:	2800      	cmp	r0, #0
 801576a:	d1cd      	bne.n	8015708 <mem_sanity+0x70>
 801576c:	463b      	mov	r3, r7
 801576e:	f240 2256 	movw	r2, #598	; 0x256
 8015772:	4933      	ldr	r1, [pc, #204]	; (8015840 <mem_sanity+0x1a8>)
 8015774:	4630      	mov	r0, r6
 8015776:	f00b f927 	bl	80209c8 <iprintf>
 801577a:	e7c5      	b.n	8015708 <mem_sanity+0x70>
    LWIP_ASSERT("heap element prev ptr valid", mem->prev <= MEM_SIZE_ALIGNED);
 801577c:	463b      	mov	r3, r7
 801577e:	f240 224a 	movw	r2, #586	; 0x24a
 8015782:	4930      	ldr	r1, [pc, #192]	; (8015844 <mem_sanity+0x1ac>)
 8015784:	4630      	mov	r0, r6
 8015786:	f00b f91f 	bl	80209c8 <iprintf>
    LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 801578a:	8822      	ldrh	r2, [r4, #0]
 801578c:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8015790:	429a      	cmp	r2, r3
 8015792:	d9da      	bls.n	801574a <mem_sanity+0xb2>
 8015794:	463b      	mov	r3, r7
 8015796:	f240 224b 	movw	r2, #587	; 0x24b
 801579a:	492b      	ldr	r1, [pc, #172]	; (8015848 <mem_sanity+0x1b0>)
 801579c:	4630      	mov	r0, r6
 801579e:	f00b f913 	bl	80209c8 <iprintf>
 80157a2:	e7d2      	b.n	801574a <mem_sanity+0xb2>
  return (struct mem *)(void *)&ram[ptr];
 80157a4:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80157a8:	441a      	add	r2, r3
  }
  LWIP_ASSERT("heap end ptr sanity", mem == ptr_to_mem(MEM_SIZE_ALIGNED));
 80157aa:	4294      	cmp	r4, r2
 80157ac:	d006      	beq.n	80157bc <mem_sanity+0x124>
 80157ae:	4b1f      	ldr	r3, [pc, #124]	; (801582c <mem_sanity+0x194>)
 80157b0:	f240 225b 	movw	r2, #603	; 0x25b
 80157b4:	4925      	ldr	r1, [pc, #148]	; (801584c <mem_sanity+0x1b4>)
 80157b6:	481f      	ldr	r0, [pc, #124]	; (8015834 <mem_sanity+0x19c>)
 80157b8:	f00b f906 	bl	80209c8 <iprintf>
  LWIP_ASSERT("heap element used valid", mem->used == 1);
 80157bc:	7923      	ldrb	r3, [r4, #4]
 80157be:	2b01      	cmp	r3, #1
 80157c0:	d006      	beq.n	80157d0 <mem_sanity+0x138>
 80157c2:	4b1a      	ldr	r3, [pc, #104]	; (801582c <mem_sanity+0x194>)
 80157c4:	f44f 7217 	mov.w	r2, #604	; 0x25c
 80157c8:	4919      	ldr	r1, [pc, #100]	; (8015830 <mem_sanity+0x198>)
 80157ca:	481a      	ldr	r0, [pc, #104]	; (8015834 <mem_sanity+0x19c>)
 80157cc:	f00b f8fc 	bl	80209c8 <iprintf>
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == MEM_SIZE_ALIGNED);
 80157d0:	8862      	ldrh	r2, [r4, #2]
 80157d2:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 80157d6:	429a      	cmp	r2, r3
 80157d8:	d006      	beq.n	80157e8 <mem_sanity+0x150>
 80157da:	4b14      	ldr	r3, [pc, #80]	; (801582c <mem_sanity+0x194>)
 80157dc:	f240 225d 	movw	r2, #605	; 0x25d
 80157e0:	4918      	ldr	r1, [pc, #96]	; (8015844 <mem_sanity+0x1ac>)
 80157e2:	4814      	ldr	r0, [pc, #80]	; (8015834 <mem_sanity+0x19c>)
 80157e4:	f00b f8f0 	bl	80209c8 <iprintf>
  LWIP_ASSERT("heap element next ptr valid", mem->next == MEM_SIZE_ALIGNED);
 80157e8:	8822      	ldrh	r2, [r4, #0]
 80157ea:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 80157ee:	429a      	cmp	r2, r3
 80157f0:	d008      	beq.n	8015804 <mem_sanity+0x16c>
 80157f2:	4b0e      	ldr	r3, [pc, #56]	; (801582c <mem_sanity+0x194>)
 80157f4:	f240 225e 	movw	r2, #606	; 0x25e
 80157f8:	4913      	ldr	r1, [pc, #76]	; (8015848 <mem_sanity+0x1b0>)
 80157fa:	480e      	ldr	r0, [pc, #56]	; (8015834 <mem_sanity+0x19c>)
}
 80157fc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("heap element next ptr valid", mem->next == MEM_SIZE_ALIGNED);
 8015800:	f00b b8e2 	b.w	80209c8 <iprintf>
}
 8015804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 8015808:	4b08      	ldr	r3, [pc, #32]	; (801582c <mem_sanity+0x194>)
 801580a:	f240 2242 	movw	r2, #578	; 0x242
 801580e:	490e      	ldr	r1, [pc, #56]	; (8015848 <mem_sanity+0x1b0>)
 8015810:	4808      	ldr	r0, [pc, #32]	; (8015834 <mem_sanity+0x19c>)
 8015812:	f00b f8d9 	bl	80209c8 <iprintf>
 8015816:	8834      	ldrh	r4, [r6, #0]
 8015818:	e759      	b.n	80156ce <mem_sanity+0x36>
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == 0);
 801581a:	4b04      	ldr	r3, [pc, #16]	; (801582c <mem_sanity+0x194>)
 801581c:	f240 2241 	movw	r2, #577	; 0x241
 8015820:	4908      	ldr	r1, [pc, #32]	; (8015844 <mem_sanity+0x1ac>)
 8015822:	4804      	ldr	r0, [pc, #16]	; (8015834 <mem_sanity+0x19c>)
 8015824:	f00b f8d0 	bl	80209c8 <iprintf>
 8015828:	e74b      	b.n	80156c2 <mem_sanity+0x2a>
 801582a:	bf00      	nop
 801582c:	0803d09c 	.word	0x0803d09c
 8015830:	0803d0cc 	.word	0x0803d0cc
 8015834:	0802697c 	.word	0x0802697c
 8015838:	0803d134 	.word	0x0803d134
 801583c:	0803d14c 	.word	0x0803d14c
 8015840:	0803d168 	.word	0x0803d168
 8015844:	0803d0e4 	.word	0x0803d0e4
 8015848:	0803d100 	.word	0x0803d100
 801584c:	0803d180 	.word	0x0803d180
 8015850:	200222d4 	.word	0x200222d4
 8015854:	200222d8 	.word	0x200222d8
 8015858:	0803d11c 	.word	0x0803d11c

0801585c <mem_overflow_check_raw>:
{
 801585c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015860:	1e4c      	subs	r4, r1, #1
 8015862:	310f      	adds	r1, #15
 8015864:	b0a3      	sub	sp, #140	; 0x8c
 8015866:	4606      	mov	r6, r0
 8015868:	4615      	mov	r5, r2
 801586a:	4699      	mov	r9, r3
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 801586c:	f8df 8078 	ldr.w	r8, [pc, #120]	; 80158e8 <mem_overflow_check_raw+0x8c>
 8015870:	4404      	add	r4, r0
 8015872:	180f      	adds	r7, r1, r0
      LWIP_ASSERT(errstr, 0);
 8015874:	f8df b074 	ldr.w	fp, [pc, #116]	; 80158ec <mem_overflow_check_raw+0x90>
 8015878:	f8df a074 	ldr.w	sl, [pc, #116]	; 80158f0 <mem_overflow_check_raw+0x94>
    if (m[k] != 0xcd) {
 801587c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 8015880:	4642      	mov	r2, r8
 8015882:	2180      	movs	r1, #128	; 0x80
 8015884:	a802      	add	r0, sp, #8
    if (m[k] != 0xcd) {
 8015886:	2bcd      	cmp	r3, #205	; 0xcd
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 8015888:	462b      	mov	r3, r5
    if (m[k] != 0xcd) {
 801588a:	d009      	beq.n	80158a0 <mem_overflow_check_raw+0x44>
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 801588c:	f8cd 9000 	str.w	r9, [sp]
 8015890:	f00b f9be 	bl	8020c10 <sniprintf>
      LWIP_ASSERT(errstr, 0);
 8015894:	465b      	mov	r3, fp
 8015896:	a902      	add	r1, sp, #8
 8015898:	226d      	movs	r2, #109	; 0x6d
 801589a:	4650      	mov	r0, sl
 801589c:	f00b f894 	bl	80209c8 <iprintf>
  for (k = 0; k < MEM_SANITY_REGION_AFTER_ALIGNED; k++) {
 80158a0:	42bc      	cmp	r4, r7
 80158a2:	d1eb      	bne.n	801587c <mem_overflow_check_raw+0x20>
 80158a4:	f1a6 0411 	sub.w	r4, r6, #17
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 80158a8:	4f0e      	ldr	r7, [pc, #56]	; (80158e4 <mem_overflow_check_raw+0x88>)
 80158aa:	3e01      	subs	r6, #1
      LWIP_ASSERT(errstr, 0);
 80158ac:	f8df a03c 	ldr.w	sl, [pc, #60]	; 80158ec <mem_overflow_check_raw+0x90>
 80158b0:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80158f0 <mem_overflow_check_raw+0x94>
    if (m[k] != 0xcd) {
 80158b4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 80158b8:	463a      	mov	r2, r7
 80158ba:	2180      	movs	r1, #128	; 0x80
 80158bc:	a802      	add	r0, sp, #8
    if (m[k] != 0xcd) {
 80158be:	2bcd      	cmp	r3, #205	; 0xcd
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 80158c0:	462b      	mov	r3, r5
    if (m[k] != 0xcd) {
 80158c2:	d009      	beq.n	80158d8 <mem_overflow_check_raw+0x7c>
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 80158c4:	f8cd 9000 	str.w	r9, [sp]
 80158c8:	f00b f9a2 	bl	8020c10 <sniprintf>
      LWIP_ASSERT(errstr, 0);
 80158cc:	4653      	mov	r3, sl
 80158ce:	a902      	add	r1, sp, #8
 80158d0:	2278      	movs	r2, #120	; 0x78
 80158d2:	4640      	mov	r0, r8
 80158d4:	f00b f878 	bl	80209c8 <iprintf>
  for (k = 0; k < MEM_SANITY_REGION_BEFORE_ALIGNED; k++) {
 80158d8:	42b4      	cmp	r4, r6
 80158da:	d1eb      	bne.n	80158b4 <mem_overflow_check_raw+0x58>
}
 80158dc:	b023      	add	sp, #140	; 0x8c
 80158de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158e2:	bf00      	nop
 80158e4:	0803d07c 	.word	0x0803d07c
 80158e8:	0803d05c 	.word	0x0803d05c
 80158ec:	0803d09c 	.word	0x0803d09c
 80158f0:	0802697c 	.word	0x0802697c

080158f4 <mem_overflow_init_raw>:
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 80158f4:	f04f 33cd 	mov.w	r3, #3452816845	; 0xcdcdcdcd
  m = (u8_t *)p + size;
 80158f8:	1842      	adds	r2, r0, r1
{
 80158fa:	b410      	push	{r4}
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 80158fc:	f840 3c10 	str.w	r3, [r0, #-16]
 8015900:	f840 3c0c 	str.w	r3, [r0, #-12]
 8015904:	f840 3c08 	str.w	r3, [r0, #-8]
 8015908:	f840 3c04 	str.w	r3, [r0, #-4]
  memset(m, 0xcd, MEM_SANITY_REGION_AFTER_ALIGNED);
 801590c:	5043      	str	r3, [r0, r1]
 801590e:	6053      	str	r3, [r2, #4]
 8015910:	6093      	str	r3, [r2, #8]
 8015912:	60d3      	str	r3, [r2, #12]
}
 8015914:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015918:	4770      	bx	lr
 801591a:	bf00      	nop

0801591c <mem_init>:
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801591c:	4b14      	ldr	r3, [pc, #80]	; (8015970 <mem_init+0x54>)
  ram_end->prev = MEM_SIZE_ALIGNED;
 801591e:	f642 60e4 	movw	r0, #12004	; 0x2ee4
  mem->prev = 0;
 8015922:	2100      	movs	r1, #0
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8015924:	4a13      	ldr	r2, [pc, #76]	; (8015974 <mem_init+0x58>)
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8015926:	f023 0303 	bic.w	r3, r3, #3
{
 801592a:	b570      	push	{r4, r5, r6, lr}
  mem->next = MEM_SIZE_ALIGNED;
 801592c:	f642 64e0 	movw	r4, #12000	; 0x2ee0
  ram_end->prev = MEM_SIZE_ALIGNED;
 8015930:	2501      	movs	r5, #1
  ram_end->next = MEM_SIZE_ALIGNED;
 8015932:	4e11      	ldr	r6, [pc, #68]	; (8015978 <mem_init+0x5c>)
  mem->prev = 0;
 8015934:	7119      	strb	r1, [r3, #4]
  return (struct mem *)(void *)&ram[ptr];
 8015936:	1919      	adds	r1, r3, r4
  mem->next = MEM_SIZE_ALIGNED;
 8015938:	601c      	str	r4, [r3, #0]
  ram_end->next = MEM_SIZE_ALIGNED;
 801593a:	511e      	str	r6, [r3, r4]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801593c:	541d      	strb	r5, [r3, r0]
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801593e:	4d0f      	ldr	r5, [pc, #60]	; (801597c <mem_init+0x60>)
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8015940:	6011      	str	r1, [r2, #0]
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8015942:	602b      	str	r3, [r5, #0]
  MEM_SANITY();
 8015944:	f7ff fea8 	bl	8015698 <mem_sanity>
  lfree = (struct mem *)(void *)ram;
 8015948:	682a      	ldr	r2, [r5, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 801594a:	490d      	ldr	r1, [pc, #52]	; (8015980 <mem_init+0x64>)
  lfree = (struct mem *)(void *)ram;
 801594c:	4b0d      	ldr	r3, [pc, #52]	; (8015984 <mem_init+0x68>)
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 801594e:	480e      	ldr	r0, [pc, #56]	; (8015988 <mem_init+0x6c>)
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 8015950:	f8a1 40aa 	strh.w	r4, [r1, #170]	; 0xaa
  lfree = (struct mem *)(void *)ram;
 8015954:	601a      	str	r2, [r3, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8015956:	f009 fc5d 	bl	801f214 <sys_mutex_new>
 801595a:	b900      	cbnz	r0, 801595e <mem_init+0x42>
}
 801595c:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 801595e:	4b0b      	ldr	r3, [pc, #44]	; (801598c <mem_init+0x70>)
 8015960:	f240 221f 	movw	r2, #543	; 0x21f
 8015964:	490a      	ldr	r1, [pc, #40]	; (8015990 <mem_init+0x74>)
 8015966:	480b      	ldr	r0, [pc, #44]	; (8015994 <mem_init+0x78>)
}
 8015968:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 801596c:	f00b b82c 	b.w	80209c8 <iprintf>
 8015970:	20026a87 	.word	0x20026a87
 8015974:	200222d8 	.word	0x200222d8
 8015978:	2ee02ee0 	.word	0x2ee02ee0
 801597c:	200222d4 	.word	0x200222d4
 8015980:	20036164 	.word	0x20036164
 8015984:	200222c8 	.word	0x200222c8
 8015988:	200222d0 	.word	0x200222d0
 801598c:	0803d09c 	.word	0x0803d09c
 8015990:	0803cfa0 	.word	0x0803cfa0
 8015994:	0802697c 	.word	0x0802697c

08015998 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8015998:	b300      	cbz	r0, 80159dc <mem_free+0x44>
{
 801599a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801599e:	f010 0803 	ands.w	r8, r0, #3
 80159a2:	4604      	mov	r4, r0
 80159a4:	d11b      	bne.n	80159de <mem_free+0x46>

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80159a6:	4e5e      	ldr	r6, [pc, #376]	; (8015b20 <mem_free+0x188>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80159a8:	f1a0 0518 	sub.w	r5, r0, #24
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80159ac:	6833      	ldr	r3, [r6, #0]
 80159ae:	42ab      	cmp	r3, r5
 80159b0:	d805      	bhi.n	80159be <mem_free+0x26>
 80159b2:	4f5c      	ldr	r7, [pc, #368]	; (8015b24 <mem_free+0x18c>)
 80159b4:	f100 030c 	add.w	r3, r0, #12
 80159b8:	683a      	ldr	r2, [r7, #0]
 80159ba:	429a      	cmp	r2, r3
 80159bc:	d214      	bcs.n	80159e8 <mem_free+0x50>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80159be:	4b5a      	ldr	r3, [pc, #360]	; (8015b28 <mem_free+0x190>)
 80159c0:	f240 227f 	movw	r2, #639	; 0x27f
 80159c4:	4959      	ldr	r1, [pc, #356]	; (8015b2c <mem_free+0x194>)
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  if (!mem_link_valid(mem)) {
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80159c6:	485a      	ldr	r0, [pc, #360]	; (8015b30 <mem_free+0x198>)
 80159c8:	f00a fffe 	bl	80209c8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80159cc:	4a59      	ldr	r2, [pc, #356]	; (8015b34 <mem_free+0x19c>)
 80159ce:	f8b2 30b0 	ldrh.w	r3, [r2, #176]	; 0xb0
 80159d2:	3301      	adds	r3, #1
 80159d4:	f8a2 30b0 	strh.w	r3, [r2, #176]	; 0xb0
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80159d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80159dc:	4770      	bx	lr
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80159de:	4b52      	ldr	r3, [pc, #328]	; (8015b28 <mem_free+0x190>)
 80159e0:	f240 2273 	movw	r2, #627	; 0x273
 80159e4:	4954      	ldr	r1, [pc, #336]	; (8015b38 <mem_free+0x1a0>)
 80159e6:	e7ee      	b.n	80159c6 <mem_free+0x2e>
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 80159e8:	4b54      	ldr	r3, [pc, #336]	; (8015b3c <mem_free+0x1a4>)
 80159ea:	4a55      	ldr	r2, [pc, #340]	; (8015b40 <mem_free+0x1a8>)
 80159ec:	f830 1c12 	ldrh.w	r1, [r0, #-18]
 80159f0:	f7ff ff34 	bl	801585c <mem_overflow_check_raw>
  if (!mem->used) {
 80159f4:	f814 3c14 	ldrb.w	r3, [r4, #-20]
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	d06e      	beq.n	8015ada <mem_free+0x142>
  if (!mem_link_valid(mem)) {
 80159fc:	4628      	mov	r0, r5
 80159fe:	f7ff fe21 	bl	8015644 <mem_link_valid>
 8015a02:	2800      	cmp	r0, #0
 8015a04:	d06e      	beq.n	8015ae4 <mem_free+0x14c>
  if (mem < lfree) {
 8015a06:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8015b60 <mem_free+0x1c8>
  mem->used = 0;
 8015a0a:	f804 8c14 	strb.w	r8, [r4, #-20]
  if (mem < lfree) {
 8015a0e:	f8d9 3000 	ldr.w	r3, [r9]
 8015a12:	42ab      	cmp	r3, r5
 8015a14:	d901      	bls.n	8015a1a <mem_free+0x82>
    lfree = mem;
 8015a16:	f8c9 5000 	str.w	r5, [r9]
  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 8015a1a:	4846      	ldr	r0, [pc, #280]	; (8015b34 <mem_free+0x19c>)
 8015a1c:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 8015a20:	f8b0 20ac 	ldrh.w	r2, [r0, #172]	; 0xac
 8015a24:	6831      	ldr	r1, [r6, #0]
 8015a26:	1ad2      	subs	r2, r2, r3
 8015a28:	eba5 0c01 	sub.w	ip, r5, r1
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8015a2c:	42a9      	cmp	r1, r5
  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 8015a2e:	4462      	add	r2, ip
 8015a30:	f8a0 20ac 	strh.w	r2, [r0, #172]	; 0xac
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8015a34:	d83a      	bhi.n	8015aac <mem_free+0x114>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8015a36:	683a      	ldr	r2, [r7, #0]
 8015a38:	4295      	cmp	r5, r2
 8015a3a:	d258      	bcs.n	8015aee <mem_free+0x156>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8015a3c:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8015a40:	4293      	cmp	r3, r2
 8015a42:	d85c      	bhi.n	8015afe <mem_free+0x166>
  return (struct mem *)(void *)&ram[ptr];
 8015a44:	6832      	ldr	r2, [r6, #0]
 8015a46:	4413      	add	r3, r2
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8015a48:	429d      	cmp	r5, r3
 8015a4a:	d013      	beq.n	8015a74 <mem_free+0xdc>
 8015a4c:	7919      	ldrb	r1, [r3, #4]
 8015a4e:	b989      	cbnz	r1, 8015a74 <mem_free+0xdc>
 8015a50:	6839      	ldr	r1, [r7, #0]
 8015a52:	428b      	cmp	r3, r1
 8015a54:	d00e      	beq.n	8015a74 <mem_free+0xdc>
    if (lfree == nmem) {
 8015a56:	f8d9 1000 	ldr.w	r1, [r9]
 8015a5a:	428b      	cmp	r3, r1
 8015a5c:	d05c      	beq.n	8015b18 <mem_free+0x180>
    mem->next = nmem->next;
 8015a5e:	8818      	ldrh	r0, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8015a60:	f642 61e0 	movw	r1, #12000	; 0x2ee0
    mem->next = nmem->next;
 8015a64:	f824 0c18 	strh.w	r0, [r4, #-24]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8015a68:	881b      	ldrh	r3, [r3, #0]
 8015a6a:	428b      	cmp	r3, r1
 8015a6c:	d002      	beq.n	8015a74 <mem_free+0xdc>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8015a6e:	4413      	add	r3, r2
  return (mem_size_t)((u8_t *)mem - ram);
 8015a70:	1aa9      	subs	r1, r5, r2
 8015a72:	8059      	strh	r1, [r3, #2]
  pmem = ptr_to_mem(mem->prev);
 8015a74:	f834 1c16 	ldrh.w	r1, [r4, #-22]
  return (struct mem *)(void *)&ram[ptr];
 8015a78:	1853      	adds	r3, r2, r1
  if (pmem != mem && pmem->used == 0) {
 8015a7a:	429d      	cmp	r5, r3
 8015a7c:	d010      	beq.n	8015aa0 <mem_free+0x108>
 8015a7e:	7918      	ldrb	r0, [r3, #4]
 8015a80:	b970      	cbnz	r0, 8015aa0 <mem_free+0x108>
    if (lfree == mem) {
 8015a82:	f8d9 0000 	ldr.w	r0, [r9]
 8015a86:	4285      	cmp	r5, r0
 8015a88:	d043      	beq.n	8015b12 <mem_free+0x17a>
    pmem->next = mem->next;
 8015a8a:	f834 3c18 	ldrh.w	r3, [r4, #-24]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8015a8e:	f642 60e0 	movw	r0, #12000	; 0x2ee0
    pmem->next = mem->next;
 8015a92:	5253      	strh	r3, [r2, r1]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8015a94:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 8015a98:	4283      	cmp	r3, r0
 8015a9a:	d001      	beq.n	8015aa0 <mem_free+0x108>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8015a9c:	441a      	add	r2, r3
 8015a9e:	8051      	strh	r1, [r2, #2]
  MEM_SANITY();
 8015aa0:	f7ff fdfa 	bl	8015698 <mem_sanity>
  mem_free_count = 1;
 8015aa4:	4b27      	ldr	r3, [pc, #156]	; (8015b44 <mem_free+0x1ac>)
 8015aa6:	2201      	movs	r2, #1
 8015aa8:	701a      	strb	r2, [r3, #0]
 8015aaa:	e795      	b.n	80159d8 <mem_free+0x40>
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8015aac:	4b1e      	ldr	r3, [pc, #120]	; (8015b28 <mem_free+0x190>)
 8015aae:	f240 12df 	movw	r2, #479	; 0x1df
 8015ab2:	4925      	ldr	r1, [pc, #148]	; (8015b48 <mem_free+0x1b0>)
 8015ab4:	481e      	ldr	r0, [pc, #120]	; (8015b30 <mem_free+0x198>)
 8015ab6:	f00a ff87 	bl	80209c8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8015aba:	683b      	ldr	r3, [r7, #0]
 8015abc:	429d      	cmp	r5, r3
 8015abe:	d216      	bcs.n	8015aee <mem_free+0x156>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8015ac0:	f814 3c14 	ldrb.w	r3, [r4, #-20]
 8015ac4:	b133      	cbz	r3, 8015ad4 <mem_free+0x13c>
 8015ac6:	4b18      	ldr	r3, [pc, #96]	; (8015b28 <mem_free+0x190>)
 8015ac8:	f240 12e1 	movw	r2, #481	; 0x1e1
 8015acc:	491f      	ldr	r1, [pc, #124]	; (8015b4c <mem_free+0x1b4>)
 8015ace:	4818      	ldr	r0, [pc, #96]	; (8015b30 <mem_free+0x198>)
 8015ad0:	f00a ff7a 	bl	80209c8 <iprintf>
 8015ad4:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 8015ad8:	e7b0      	b.n	8015a3c <mem_free+0xa4>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8015ada:	4b13      	ldr	r3, [pc, #76]	; (8015b28 <mem_free+0x190>)
 8015adc:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8015ae0:	491b      	ldr	r1, [pc, #108]	; (8015b50 <mem_free+0x1b8>)
 8015ae2:	e770      	b.n	80159c6 <mem_free+0x2e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8015ae4:	4b10      	ldr	r3, [pc, #64]	; (8015b28 <mem_free+0x190>)
 8015ae6:	f240 2295 	movw	r2, #661	; 0x295
 8015aea:	491a      	ldr	r1, [pc, #104]	; (8015b54 <mem_free+0x1bc>)
 8015aec:	e76b      	b.n	80159c6 <mem_free+0x2e>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8015aee:	4b0e      	ldr	r3, [pc, #56]	; (8015b28 <mem_free+0x190>)
 8015af0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8015af4:	4918      	ldr	r1, [pc, #96]	; (8015b58 <mem_free+0x1c0>)
 8015af6:	480e      	ldr	r0, [pc, #56]	; (8015b30 <mem_free+0x198>)
 8015af8:	f00a ff66 	bl	80209c8 <iprintf>
 8015afc:	e7e0      	b.n	8015ac0 <mem_free+0x128>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8015afe:	4b0a      	ldr	r3, [pc, #40]	; (8015b28 <mem_free+0x190>)
 8015b00:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8015b04:	4915      	ldr	r1, [pc, #84]	; (8015b5c <mem_free+0x1c4>)
 8015b06:	480a      	ldr	r0, [pc, #40]	; (8015b30 <mem_free+0x198>)
 8015b08:	f00a ff5e 	bl	80209c8 <iprintf>
 8015b0c:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 8015b10:	e798      	b.n	8015a44 <mem_free+0xac>
      lfree = pmem;
 8015b12:	f8c9 3000 	str.w	r3, [r9]
 8015b16:	e7b8      	b.n	8015a8a <mem_free+0xf2>
      lfree = mem;
 8015b18:	f8c9 5000 	str.w	r5, [r9]
 8015b1c:	e79f      	b.n	8015a5e <mem_free+0xc6>
 8015b1e:	bf00      	nop
 8015b20:	200222d4 	.word	0x200222d4
 8015b24:	200222d8 	.word	0x200222d8
 8015b28:	0803d09c 	.word	0x0803d09c
 8015b2c:	0803cea4 	.word	0x0803cea4
 8015b30:	0802697c 	.word	0x0802697c
 8015b34:	20036164 	.word	0x20036164
 8015b38:	0803ce80 	.word	0x0803ce80
 8015b3c:	08024a00 	.word	0x08024a00
 8015b40:	0803cec0 	.word	0x0803cec0
 8015b44:	200222cc 	.word	0x200222cc
 8015b48:	0803cf24 	.word	0x0803cf24
 8015b4c:	0803cf58 	.word	0x0803cf58
 8015b50:	0803cec8 	.word	0x0803cec8
 8015b54:	0803cef0 	.word	0x0803cef0
 8015b58:	0803cf3c 	.word	0x0803cf3c
 8015b5c:	0803cf74 	.word	0x0803cf74
 8015b60:	200222c8 	.word	0x200222c8

08015b64 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8015b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8015b68:	1ccc      	adds	r4, r1, #3
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8015b6a:	f642 63e0 	movw	r3, #12000	; 0x2ee0
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8015b6e:	f024 0403 	bic.w	r4, r4, #3
 8015b72:	b2a4      	uxth	r4, r4
 8015b74:	2c0c      	cmp	r4, #12
 8015b76:	bf38      	it	cc
 8015b78:	240c      	movcc	r4, #12
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
 8015b7a:	3420      	adds	r4, #32
 8015b7c:	b2a4      	uxth	r4, r4
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8015b7e:	429c      	cmp	r4, r3
 8015b80:	d87a      	bhi.n	8015c78 <mem_trim+0x114>
 8015b82:	42a1      	cmp	r1, r4
 8015b84:	d878      	bhi.n	8015c78 <mem_trim+0x114>
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8015b86:	4f60      	ldr	r7, [pc, #384]	; (8015d08 <mem_trim+0x1a4>)
 8015b88:	4605      	mov	r5, r0
 8015b8a:	460e      	mov	r6, r1
 8015b8c:	683b      	ldr	r3, [r7, #0]
 8015b8e:	4283      	cmp	r3, r0
 8015b90:	d85a      	bhi.n	8015c48 <mem_trim+0xe4>
 8015b92:	4b5e      	ldr	r3, [pc, #376]	; (8015d0c <mem_trim+0x1a8>)
 8015b94:	681b      	ldr	r3, [r3, #0]
 8015b96:	4283      	cmp	r3, r0
 8015b98:	d956      	bls.n	8015c48 <mem_trim+0xe4>
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 8015b9a:	4b5d      	ldr	r3, [pc, #372]	; (8015d10 <mem_trim+0x1ac>)
 8015b9c:	4628      	mov	r0, r5
 8015b9e:	4a5d      	ldr	r2, [pc, #372]	; (8015d14 <mem_trim+0x1b0>)
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8015ba0:	f1a5 0818 	sub.w	r8, r5, #24
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 8015ba4:	f835 1c12 	ldrh.w	r1, [r5, #-18]
 8015ba8:	f7ff fe58 	bl	801585c <mem_overflow_check_raw>
  return (mem_size_t)((u8_t *)mem - ram);
 8015bac:	683b      	ldr	r3, [r7, #0]
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8015bae:	f835 2c18 	ldrh.w	r2, [r5, #-24]
  return (mem_size_t)((u8_t *)mem - ram);
 8015bb2:	eba8 0803 	sub.w	r8, r8, r3
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8015bb6:	f1a2 0928 	sub.w	r9, r2, #40	; 0x28
  return (mem_size_t)((u8_t *)mem - ram);
 8015bba:	fa1f f888 	uxth.w	r8, r8
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8015bbe:	eba9 0908 	sub.w	r9, r9, r8
 8015bc2:	fa1f f989 	uxth.w	r9, r9
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8015bc6:	454c      	cmp	r4, r9
 8015bc8:	d858      	bhi.n	8015c7c <mem_trim+0x118>
  if (newsize > size) {
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
 8015bca:	f000 8084 	beq.w	8015cd6 <mem_trim+0x172>
  return (struct mem *)(void *)&ram[ptr];
 8015bce:	eb03 0a02 	add.w	sl, r3, r2

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
  if (mem2->used == 0) {
 8015bd2:	f89a 1004 	ldrb.w	r1, [sl, #4]
 8015bd6:	2900      	cmp	r1, #0
 8015bd8:	d159      	bne.n	8015c8e <mem_trim+0x12a>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8015bda:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 8015bde:	428a      	cmp	r2, r1
 8015be0:	d07d      	beq.n	8015cde <mem_trim+0x17a>
    /* remember the old next pointer */
    next = mem2->next;
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8015be2:	f108 0208 	add.w	r2, r8, #8
    if (lfree == mem2) {
 8015be6:	484c      	ldr	r0, [pc, #304]	; (8015d18 <mem_trim+0x1b4>)
    next = mem2->next;
 8015be8:	f8ba 7000 	ldrh.w	r7, [sl]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8015bec:	4422      	add	r2, r4
    if (lfree == mem2) {
 8015bee:	f8d0 c000 	ldr.w	ip, [r0]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8015bf2:	b292      	uxth	r2, r2
    if (lfree == mem2) {
 8015bf4:	45d4      	cmp	ip, sl
 8015bf6:	eb03 0102 	add.w	r1, r3, r2
 8015bfa:	d06e      	beq.n	8015cda <mem_trim+0x176>
      lfree = ptr_to_mem(ptr2);
    }
    mem2 = ptr_to_mem(ptr2);
    mem2->used = 0;
 8015bfc:	f04f 0c00 	mov.w	ip, #0
    /* restore the next pointer */
    mem2->next = next;
 8015c00:	800f      	strh	r7, [r1, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8015c02:	f8a1 8002 	strh.w	r8, [r1, #2]
    /* link mem to it */
    mem->next = ptr2;
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8015c06:	f642 60e0 	movw	r0, #12000	; 0x2ee0
    mem2->used = 0;
 8015c0a:	f881 c004 	strb.w	ip, [r1, #4]
    mem->next = ptr2;
 8015c0e:	f825 2c18 	strh.w	r2, [r5, #-24]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8015c12:	8809      	ldrh	r1, [r1, #0]
 8015c14:	4281      	cmp	r1, r0
 8015c16:	d001      	beq.n	8015c1c <mem_trim+0xb8>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8015c18:	440b      	add	r3, r1
 8015c1a:	805a      	strh	r2, [r3, #2]
    mem2->prev = ptr;
    mem->next = ptr2;
    if (mem2->next != MEM_SIZE_ALIGNED) {
      ptr_to_mem(mem2->next)->prev = ptr2;
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 8015c1c:	4a3f      	ldr	r2, [pc, #252]	; (8015d1c <mem_trim+0x1b8>)
 8015c1e:	f8b2 30ac 	ldrh.w	r3, [r2, #172]	; 0xac
 8015c22:	441c      	add	r4, r3
 8015c24:	eba4 0909 	sub.w	r9, r4, r9
 8015c28:	f8a2 90ac 	strh.w	r9, [r2, #172]	; 0xac
  mem_overflow_init_raw(p, user_size);
 8015c2c:	4628      	mov	r0, r5
 8015c2e:	4631      	mov	r1, r6
  mem->user_size = user_size;
 8015c30:	f825 6c12 	strh.w	r6, [r5, #-18]
  mem_overflow_init_raw(p, user_size);
 8015c34:	f7ff fe5e 	bl	80158f4 <mem_overflow_init_raw>
    -> the remaining space stays unused since it is too small
  } */
#if MEM_OVERFLOW_CHECK
  mem_overflow_init_element(mem, new_size);
#endif
  MEM_SANITY();
 8015c38:	f7ff fd2e 	bl	8015698 <mem_sanity>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
 8015c3c:	4b38      	ldr	r3, [pc, #224]	; (8015d20 <mem_trim+0x1bc>)
 8015c3e:	2201      	movs	r2, #1
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8015c40:	4628      	mov	r0, r5
  mem_free_count = 1;
 8015c42:	701a      	strb	r2, [r3, #0]
}
 8015c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8015c48:	4b36      	ldr	r3, [pc, #216]	; (8015d24 <mem_trim+0x1c0>)
 8015c4a:	f240 22d2 	movw	r2, #722	; 0x2d2
 8015c4e:	4936      	ldr	r1, [pc, #216]	; (8015d28 <mem_trim+0x1c4>)
 8015c50:	4836      	ldr	r0, [pc, #216]	; (8015d2c <mem_trim+0x1c8>)
 8015c52:	f00a feb9 	bl	80209c8 <iprintf>
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8015c56:	683b      	ldr	r3, [r7, #0]
 8015c58:	42ab      	cmp	r3, r5
 8015c5a:	d908      	bls.n	8015c6e <mem_trim+0x10a>
    MEM_STATS_INC_LOCKED(illegal);
 8015c5c:	4a2f      	ldr	r2, [pc, #188]	; (8015d1c <mem_trim+0x1b8>)
    return rmem;
 8015c5e:	4628      	mov	r0, r5
    MEM_STATS_INC_LOCKED(illegal);
 8015c60:	f8b2 30b0 	ldrh.w	r3, [r2, #176]	; 0xb0
 8015c64:	3301      	adds	r3, #1
 8015c66:	f8a2 30b0 	strh.w	r3, [r2, #176]	; 0xb0
}
 8015c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8015c6e:	4b27      	ldr	r3, [pc, #156]	; (8015d0c <mem_trim+0x1a8>)
 8015c70:	681b      	ldr	r3, [r3, #0]
 8015c72:	429d      	cmp	r5, r3
 8015c74:	d2f2      	bcs.n	8015c5c <mem_trim+0xf8>
 8015c76:	e790      	b.n	8015b9a <mem_trim+0x36>
    return NULL;
 8015c78:	2000      	movs	r0, #0
 8015c7a:	e7f6      	b.n	8015c6a <mem_trim+0x106>
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8015c7c:	4b29      	ldr	r3, [pc, #164]	; (8015d24 <mem_trim+0x1c0>)
 8015c7e:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8015c82:	492b      	ldr	r1, [pc, #172]	; (8015d30 <mem_trim+0x1cc>)
 8015c84:	4829      	ldr	r0, [pc, #164]	; (8015d2c <mem_trim+0x1c8>)
 8015c86:	f00a fe9f 	bl	80209c8 <iprintf>
    return NULL;
 8015c8a:	2000      	movs	r0, #0
 8015c8c:	e7ed      	b.n	8015c6a <mem_trim+0x106>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8015c8e:	f104 0114 	add.w	r1, r4, #20
 8015c92:	4549      	cmp	r1, r9
 8015c94:	d8ca      	bhi.n	8015c2c <mem_trim+0xc8>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8015c96:	f108 0a08 	add.w	sl, r8, #8
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8015c9a:	f642 61e0 	movw	r1, #12000	; 0x2ee0
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8015c9e:	44a2      	add	sl, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8015ca0:	428a      	cmp	r2, r1
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8015ca2:	fa1f fa8a 	uxth.w	sl, sl
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8015ca6:	d023      	beq.n	8015cf0 <mem_trim+0x18c>
    if (mem2 < lfree) {
 8015ca8:	481b      	ldr	r0, [pc, #108]	; (8015d18 <mem_trim+0x1b4>)
  return (struct mem *)(void *)&ram[ptr];
 8015caa:	eb03 010a 	add.w	r1, r3, sl
    if (mem2 < lfree) {
 8015cae:	6807      	ldr	r7, [r0, #0]
 8015cb0:	428f      	cmp	r7, r1
 8015cb2:	d900      	bls.n	8015cb6 <mem_trim+0x152>
      lfree = mem2;
 8015cb4:	6001      	str	r1, [r0, #0]
    mem2->used = 0;
 8015cb6:	2700      	movs	r7, #0
    mem2->next = mem->next;
 8015cb8:	800a      	strh	r2, [r1, #0]
    mem2->prev = ptr;
 8015cba:	f8a1 8002 	strh.w	r8, [r1, #2]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8015cbe:	f642 60e0 	movw	r0, #12000	; 0x2ee0
    mem2->used = 0;
 8015cc2:	710f      	strb	r7, [r1, #4]
    mem->next = ptr2;
 8015cc4:	f825 ac18 	strh.w	sl, [r5, #-24]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8015cc8:	880a      	ldrh	r2, [r1, #0]
 8015cca:	4282      	cmp	r2, r0
 8015ccc:	d0a6      	beq.n	8015c1c <mem_trim+0xb8>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8015cce:	4413      	add	r3, r2
 8015cd0:	f8a3 a002 	strh.w	sl, [r3, #2]
 8015cd4:	e7a2      	b.n	8015c1c <mem_trim+0xb8>
 8015cd6:	4628      	mov	r0, r5
 8015cd8:	e7c7      	b.n	8015c6a <mem_trim+0x106>
      lfree = ptr_to_mem(ptr2);
 8015cda:	6001      	str	r1, [r0, #0]
 8015cdc:	e78e      	b.n	8015bfc <mem_trim+0x98>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8015cde:	4b11      	ldr	r3, [pc, #68]	; (8015d24 <mem_trim+0x1c0>)
 8015ce0:	f240 22f5 	movw	r2, #757	; 0x2f5
 8015ce4:	4913      	ldr	r1, [pc, #76]	; (8015d34 <mem_trim+0x1d0>)
 8015ce6:	4811      	ldr	r0, [pc, #68]	; (8015d2c <mem_trim+0x1c8>)
 8015ce8:	f00a fe6e 	bl	80209c8 <iprintf>
 8015cec:	683b      	ldr	r3, [r7, #0]
 8015cee:	e778      	b.n	8015be2 <mem_trim+0x7e>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8015cf0:	4b0c      	ldr	r3, [pc, #48]	; (8015d24 <mem_trim+0x1c0>)
 8015cf2:	f240 3216 	movw	r2, #790	; 0x316
 8015cf6:	490f      	ldr	r1, [pc, #60]	; (8015d34 <mem_trim+0x1d0>)
 8015cf8:	480c      	ldr	r0, [pc, #48]	; (8015d2c <mem_trim+0x1c8>)
 8015cfa:	f00a fe65 	bl	80209c8 <iprintf>
 8015cfe:	683b      	ldr	r3, [r7, #0]
 8015d00:	f835 2c18 	ldrh.w	r2, [r5, #-24]
 8015d04:	e7d0      	b.n	8015ca8 <mem_trim+0x144>
 8015d06:	bf00      	nop
 8015d08:	200222d4 	.word	0x200222d4
 8015d0c:	200222d8 	.word	0x200222d8
 8015d10:	08024a00 	.word	0x08024a00
 8015d14:	0803cec0 	.word	0x0803cec0
 8015d18:	200222c8 	.word	0x200222c8
 8015d1c:	20036164 	.word	0x20036164
 8015d20:	200222cc 	.word	0x200222cc
 8015d24:	0803d09c 	.word	0x0803d09c
 8015d28:	0803d194 	.word	0x0803d194
 8015d2c:	0802697c 	.word	0x0802697c
 8015d30:	0803d1ac 	.word	0x0803d1ac
 8015d34:	0803d1cc 	.word	0x0803d1cc

08015d38 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8015d38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8015d3c:	2800      	cmp	r0, #0
 8015d3e:	f000 80e0 	beq.w	8015f02 <mem_malloc+0x1ca>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8015d42:	f100 0a03 	add.w	sl, r0, #3
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8015d46:	f642 64e0 	movw	r4, #12000	; 0x2ee0
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8015d4a:	f02a 0a03 	bic.w	sl, sl, #3
 8015d4e:	fa1f fa8a 	uxth.w	sl, sl
 8015d52:	f1ba 0f0c 	cmp.w	sl, #12
 8015d56:	bf38      	it	cc
 8015d58:	f04f 0a0c 	movcc.w	sl, #12
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
 8015d5c:	f10a 0720 	add.w	r7, sl, #32
 8015d60:	b2bf      	uxth	r7, r7
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8015d62:	42a7      	cmp	r7, r4
 8015d64:	f200 80cd 	bhi.w	8015f02 <mem_malloc+0x1ca>
 8015d68:	42b8      	cmp	r0, r7
 8015d6a:	bf94      	ite	ls
 8015d6c:	2500      	movls	r5, #0
 8015d6e:	2501      	movhi	r5, #1
 8015d70:	2d00      	cmp	r5, #0
 8015d72:	f040 80c6 	bne.w	8015f02 <mem_malloc+0x1ca>
 8015d76:	4681      	mov	r9, r0
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8015d78:	4871      	ldr	r0, [pc, #452]	; (8015f40 <mem_malloc+0x208>)
 8015d7a:	f009 fa71 	bl	801f260 <sys_mutex_lock>
  return (mem_size_t)((u8_t *)mem - ram);
 8015d7e:	4b71      	ldr	r3, [pc, #452]	; (8015f44 <mem_malloc+0x20c>)
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
      mem_free_count = 0;
 8015d80:	46ae      	mov	lr, r5
 8015d82:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 8015f70 <mem_malloc+0x238>
 8015d86:	eba4 0c07 	sub.w	ip, r4, r7
  return (mem_size_t)((u8_t *)mem - ram);
 8015d8a:	6818      	ldr	r0, [r3, #0]
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8015d8c:	f06f 0b07 	mvn.w	fp, #7
      mem_free_count = 0;
 8015d90:	4d6d      	ldr	r5, [pc, #436]	; (8015f48 <mem_malloc+0x210>)
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8015d92:	f8d8 6000 	ldr.w	r6, [r8]
  return (mem_size_t)((u8_t *)mem - ram);
 8015d96:	1a36      	subs	r6, r6, r0
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8015d98:	b2b3      	uxth	r3, r6
 8015d9a:	459c      	cmp	ip, r3
  return (mem_size_t)((u8_t *)mem - ram);
 8015d9c:	461e      	mov	r6, r3
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8015d9e:	d918      	bls.n	8015dd2 <mem_malloc+0x9a>
      mem_free_count = 0;
 8015da0:	f885 e000 	strb.w	lr, [r5]
  return (struct mem *)(void *)&ram[ptr];
 8015da4:	18c4      	adds	r4, r0, r3
      if (mem_free_count != 0) {
 8015da6:	782a      	ldrb	r2, [r5, #0]
 8015da8:	b132      	cbz	r2, 8015db8 <mem_malloc+0x80>
 8015daa:	e7f2      	b.n	8015d92 <mem_malloc+0x5a>
      mem_free_count = 0;
 8015dac:	f885 e000 	strb.w	lr, [r5]
 8015db0:	461e      	mov	r6, r3
      if (mem_free_count != 0) {
 8015db2:	782a      	ldrb	r2, [r5, #0]
 8015db4:	2a00      	cmp	r2, #0
 8015db6:	d1ec      	bne.n	8015d92 <mem_malloc+0x5a>
      if ((!mem->used) &&
 8015db8:	7921      	ldrb	r1, [r4, #4]
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8015dba:	ebab 0303 	sub.w	r3, fp, r3
 8015dbe:	8822      	ldrh	r2, [r4, #0]
      if ((!mem->used) &&
 8015dc0:	b911      	cbnz	r1, 8015dc8 <mem_malloc+0x90>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8015dc2:	4413      	add	r3, r2
      if ((!mem->used) &&
 8015dc4:	42bb      	cmp	r3, r7
 8015dc6:	d211      	bcs.n	8015dec <mem_malloc+0xb4>
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8015dc8:	4594      	cmp	ip, r2
 8015dca:	4613      	mov	r3, r2
  return (struct mem *)(void *)&ram[ptr];
 8015dcc:	eb00 0402 	add.w	r4, r0, r2
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8015dd0:	d8ec      	bhi.n	8015dac <mem_malloc+0x74>
    }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
 8015dd2:	4a5e      	ldr	r2, [pc, #376]	; (8015f4c <mem_malloc+0x214>)
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8015dd4:	2500      	movs	r5, #0
  sys_mutex_unlock(&mem_mutex);
 8015dd6:	485a      	ldr	r0, [pc, #360]	; (8015f40 <mem_malloc+0x208>)
  MEM_STATS_INC(err);
 8015dd8:	f8b2 30a8 	ldrh.w	r3, [r2, #168]	; 0xa8
 8015ddc:	3301      	adds	r3, #1
 8015dde:	f8a2 30a8 	strh.w	r3, [r2, #168]	; 0xa8
  sys_mutex_unlock(&mem_mutex);
 8015de2:	f009 fa43 	bl	801f26c <sys_mutex_unlock>
}
 8015de6:	4628      	mov	r0, r5
 8015de8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8015dec:	f107 0114 	add.w	r1, r7, #20
 8015df0:	428b      	cmp	r3, r1
 8015df2:	d258      	bcs.n	8015ea6 <mem_malloc+0x16e>
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
 8015df4:	4955      	ldr	r1, [pc, #340]	; (8015f4c <mem_malloc+0x214>)
          mem->used = 1;
 8015df6:	2301      	movs	r3, #1
 8015df8:	7123      	strb	r3, [r4, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
 8015dfa:	f8b1 30ac 	ldrh.w	r3, [r1, #172]	; 0xac
 8015dfe:	f8b1 c0ae 	ldrh.w	ip, [r1, #174]	; 0xae
 8015e02:	4413      	add	r3, r2
 8015e04:	1b9b      	subs	r3, r3, r6
 8015e06:	b29b      	uxth	r3, r3
 8015e08:	459c      	cmp	ip, r3
 8015e0a:	f8a1 30ac 	strh.w	r3, [r1, #172]	; 0xac
 8015e0e:	bf38      	it	cc
 8015e10:	f8a1 30ae 	strhcc.w	r3, [r1, #174]	; 0xae
          while (cur->used && cur != ram_end) {
 8015e14:	4e4e      	ldr	r6, [pc, #312]	; (8015f50 <mem_malloc+0x218>)
            mem_free_count = 0;
 8015e16:	f04f 0c00 	mov.w	ip, #0
          while (cur->used && cur != ram_end) {
 8015e1a:	6831      	ldr	r1, [r6, #0]
        if (mem == lfree) {
 8015e1c:	f8d8 3000 	ldr.w	r3, [r8]
 8015e20:	42a3      	cmp	r3, r4
 8015e22:	d11b      	bne.n	8015e5c <mem_malloc+0x124>
          struct mem *cur = lfree;
 8015e24:	f8d8 3000 	ldr.w	r3, [r8]
          while (cur->used && cur != ram_end) {
 8015e28:	791a      	ldrb	r2, [r3, #4]
 8015e2a:	b94a      	cbnz	r2, 8015e40 <mem_malloc+0x108>
 8015e2c:	e00b      	b.n	8015e46 <mem_malloc+0x10e>
            mem_free_count = 0;
 8015e2e:	f885 c000 	strb.w	ip, [r5]
            if (mem_free_count != 0) {
 8015e32:	782a      	ldrb	r2, [r5, #0]
 8015e34:	2a00      	cmp	r2, #0
 8015e36:	d1f1      	bne.n	8015e1c <mem_malloc+0xe4>
  return (struct mem *)(void *)&ram[ptr];
 8015e38:	881b      	ldrh	r3, [r3, #0]
 8015e3a:	4403      	add	r3, r0
          while (cur->used && cur != ram_end) {
 8015e3c:	791a      	ldrb	r2, [r3, #4]
 8015e3e:	b112      	cbz	r2, 8015e46 <mem_malloc+0x10e>
 8015e40:	4299      	cmp	r1, r3
 8015e42:	d1f4      	bne.n	8015e2e <mem_malloc+0xf6>
 8015e44:	460b      	mov	r3, r1
          lfree = cur;
 8015e46:	f8c8 3000 	str.w	r3, [r8]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8015e4a:	f8d8 3000 	ldr.w	r3, [r8]
 8015e4e:	428b      	cmp	r3, r1
 8015e50:	d004      	beq.n	8015e5c <mem_malloc+0x124>
 8015e52:	f8d8 3000 	ldr.w	r3, [r8]
 8015e56:	791b      	ldrb	r3, [r3, #4]
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	d15e      	bne.n	8015f1a <mem_malloc+0x1e2>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8015e5c:	3708      	adds	r7, #8
        sys_mutex_unlock(&mem_mutex);
 8015e5e:	4838      	ldr	r0, [pc, #224]	; (8015f40 <mem_malloc+0x208>)
 8015e60:	f009 fa04 	bl	801f26c <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8015e64:	6833      	ldr	r3, [r6, #0]
 8015e66:	4427      	add	r7, r4
 8015e68:	42bb      	cmp	r3, r7
 8015e6a:	d34e      	bcc.n	8015f0a <mem_malloc+0x1d2>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8015e6c:	07a3      	lsls	r3, r4, #30
 8015e6e:	d00d      	beq.n	8015e8c <mem_malloc+0x154>
 8015e70:	4b38      	ldr	r3, [pc, #224]	; (8015f54 <mem_malloc+0x21c>)
 8015e72:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8015e76:	4938      	ldr	r1, [pc, #224]	; (8015f58 <mem_malloc+0x220>)
 8015e78:	4838      	ldr	r0, [pc, #224]	; (8015f5c <mem_malloc+0x224>)
 8015e7a:	f00a fda5 	bl	80209c8 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8015e7e:	4b35      	ldr	r3, [pc, #212]	; (8015f54 <mem_malloc+0x21c>)
 8015e80:	f240 32be 	movw	r2, #958	; 0x3be
 8015e84:	4936      	ldr	r1, [pc, #216]	; (8015f60 <mem_malloc+0x228>)
 8015e86:	4835      	ldr	r0, [pc, #212]	; (8015f5c <mem_malloc+0x224>)
 8015e88:	f00a fd9e 	bl	80209c8 <iprintf>
  void *p = (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8015e8c:	f104 0518 	add.w	r5, r4, #24
  mem_overflow_init_raw(p, user_size);
 8015e90:	4649      	mov	r1, r9
  mem->user_size = user_size;
 8015e92:	f8a4 9006 	strh.w	r9, [r4, #6]
  mem_overflow_init_raw(p, user_size);
 8015e96:	4628      	mov	r0, r5
 8015e98:	f7ff fd2c 	bl	80158f4 <mem_overflow_init_raw>
        MEM_SANITY();
 8015e9c:	f7ff fbfc 	bl	8015698 <mem_sanity>
}
 8015ea0:	4628      	mov	r0, r5
 8015ea2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8015ea6:	f10a 0a28 	add.w	sl, sl, #40	; 0x28
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8015eaa:	f642 63e0 	movw	r3, #12000	; 0x2ee0
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8015eae:	44b2      	add	sl, r6
 8015eb0:	fa1f fa8a 	uxth.w	sl, sl
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8015eb4:	459a      	cmp	sl, r3
 8015eb6:	d038      	beq.n	8015f2a <mem_malloc+0x1f2>
  return (struct mem *)(void *)&ram[ptr];
 8015eb8:	eb00 030a 	add.w	r3, r0, sl
          mem2->used = 0;
 8015ebc:	2100      	movs	r1, #0
          mem->used = 1;
 8015ebe:	f04f 0c01 	mov.w	ip, #1
          mem2->used = 0;
 8015ec2:	7119      	strb	r1, [r3, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8015ec4:	f642 61e0 	movw	r1, #12000	; 0x2ee0
          mem2->next = mem->next;
 8015ec8:	f820 200a 	strh.w	r2, [r0, sl]
          mem2->prev = ptr;
 8015ecc:	805e      	strh	r6, [r3, #2]
          mem->next = ptr2;
 8015ece:	f8a4 a000 	strh.w	sl, [r4]
          mem->used = 1;
 8015ed2:	f884 c004 	strb.w	ip, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8015ed6:	f830 300a 	ldrh.w	r3, [r0, sl]
 8015eda:	428b      	cmp	r3, r1
 8015edc:	d002      	beq.n	8015ee4 <mem_malloc+0x1ac>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8015ede:	4403      	add	r3, r0
 8015ee0:	f8a3 a002 	strh.w	sl, [r3, #2]
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 8015ee4:	4a19      	ldr	r2, [pc, #100]	; (8015f4c <mem_malloc+0x214>)
 8015ee6:	f8b2 30ac 	ldrh.w	r3, [r2, #172]	; 0xac
 8015eea:	f8b2 10ae 	ldrh.w	r1, [r2, #174]	; 0xae
 8015eee:	3308      	adds	r3, #8
 8015ef0:	443b      	add	r3, r7
 8015ef2:	b29b      	uxth	r3, r3
 8015ef4:	4299      	cmp	r1, r3
 8015ef6:	f8a2 30ac 	strh.w	r3, [r2, #172]	; 0xac
 8015efa:	d28b      	bcs.n	8015e14 <mem_malloc+0xdc>
 8015efc:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 8015f00:	e788      	b.n	8015e14 <mem_malloc+0xdc>
    return NULL;
 8015f02:	2500      	movs	r5, #0
}
 8015f04:	4628      	mov	r0, r5
 8015f06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8015f0a:	4b12      	ldr	r3, [pc, #72]	; (8015f54 <mem_malloc+0x21c>)
 8015f0c:	f240 32ba 	movw	r2, #954	; 0x3ba
 8015f10:	4914      	ldr	r1, [pc, #80]	; (8015f64 <mem_malloc+0x22c>)
 8015f12:	4812      	ldr	r0, [pc, #72]	; (8015f5c <mem_malloc+0x224>)
 8015f14:	f00a fd58 	bl	80209c8 <iprintf>
 8015f18:	e7a8      	b.n	8015e6c <mem_malloc+0x134>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8015f1a:	4b0e      	ldr	r3, [pc, #56]	; (8015f54 <mem_malloc+0x21c>)
 8015f1c:	f240 32b5 	movw	r2, #949	; 0x3b5
 8015f20:	4911      	ldr	r1, [pc, #68]	; (8015f68 <mem_malloc+0x230>)
 8015f22:	480e      	ldr	r0, [pc, #56]	; (8015f5c <mem_malloc+0x224>)
 8015f24:	f00a fd50 	bl	80209c8 <iprintf>
 8015f28:	e798      	b.n	8015e5c <mem_malloc+0x124>
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8015f2a:	4b0a      	ldr	r3, [pc, #40]	; (8015f54 <mem_malloc+0x21c>)
 8015f2c:	f240 3287 	movw	r2, #903	; 0x387
 8015f30:	490e      	ldr	r1, [pc, #56]	; (8015f6c <mem_malloc+0x234>)
 8015f32:	480a      	ldr	r0, [pc, #40]	; (8015f5c <mem_malloc+0x224>)
 8015f34:	f00a fd48 	bl	80209c8 <iprintf>
 8015f38:	4b02      	ldr	r3, [pc, #8]	; (8015f44 <mem_malloc+0x20c>)
 8015f3a:	8822      	ldrh	r2, [r4, #0]
 8015f3c:	6818      	ldr	r0, [r3, #0]
 8015f3e:	e7bb      	b.n	8015eb8 <mem_malloc+0x180>
 8015f40:	200222d0 	.word	0x200222d0
 8015f44:	200222d4 	.word	0x200222d4
 8015f48:	200222cc 	.word	0x200222cc
 8015f4c:	20036164 	.word	0x20036164
 8015f50:	200222d8 	.word	0x200222d8
 8015f54:	0803d09c 	.word	0x0803d09c
 8015f58:	0803d008 	.word	0x0803d008
 8015f5c:	0802697c 	.word	0x0802697c
 8015f60:	0803d038 	.word	0x0803d038
 8015f64:	0803cfd8 	.word	0x0803cfd8
 8015f68:	0803cfbc 	.word	0x0803cfbc
 8015f6c:	0803d1cc 	.word	0x0803d1cc
 8015f70:	200222c8 	.word	0x200222c8

08015f74 <memp_overflow_check_all>:
 *
 * @see memp_overflow_check_element for a description of the check
 */
static void
memp_overflow_check_all(void)
{
 8015f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015f78:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8015fd0 <memp_overflow_check_all+0x5c>
 8015f7c:	2308      	movs	r3, #8
 8015f7e:	4d11      	ldr	r5, [pc, #68]	; (8015fc4 <memp_overflow_check_all+0x50>)
 8015f80:	f108 093c 	add.w	r9, r8, #60	; 0x3c
 8015f84:	4e10      	ldr	r6, [pc, #64]	; (8015fc8 <memp_overflow_check_all+0x54>)
  mem_overflow_check_raw((u8_t *)p + MEMP_SIZE, desc->size, "pool ", desc->desc);
 8015f86:	4f11      	ldr	r7, [pc, #68]	; (8015fcc <memp_overflow_check_all+0x58>)
  struct memp *p;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);

  for (i = 0; i < MEMP_MAX; ++i) {
    p = (struct memp *)LWIP_MEM_ALIGN(memp_pools[i]->base);
 8015f88:	3503      	adds	r5, #3
 8015f8a:	f025 0503 	bic.w	r5, r5, #3
    for (j = 0; j < memp_pools[i]->num; ++j) {
 8015f8e:	b183      	cbz	r3, 8015fb2 <memp_overflow_check_all+0x3e>
 8015f90:	8931      	ldrh	r1, [r6, #8]
 8015f92:	2400      	movs	r4, #0
 8015f94:	3401      	adds	r4, #1
  mem_overflow_check_raw((u8_t *)p + MEMP_SIZE, desc->size, "pool ", desc->desc);
 8015f96:	6833      	ldr	r3, [r6, #0]
 8015f98:	463a      	mov	r2, r7
 8015f9a:	f105 001c 	add.w	r0, r5, #28
 8015f9e:	f7ff fc5d 	bl	801585c <mem_overflow_check_raw>
      memp_overflow_check_element(p, memp_pools[i]);
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 8015fa2:	8931      	ldrh	r1, [r6, #8]
    for (j = 0; j < memp_pools[i]->num; ++j) {
 8015fa4:	b2a4      	uxth	r4, r4
 8015fa6:	8973      	ldrh	r3, [r6, #10]
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 8015fa8:	f101 022c 	add.w	r2, r1, #44	; 0x2c
    for (j = 0; j < memp_pools[i]->num; ++j) {
 8015fac:	42a3      	cmp	r3, r4
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 8015fae:	4415      	add	r5, r2
    for (j = 0; j < memp_pools[i]->num; ++j) {
 8015fb0:	d8f0      	bhi.n	8015f94 <memp_overflow_check_all+0x20>
  for (i = 0; i < MEMP_MAX; ++i) {
 8015fb2:	45c1      	cmp	r9, r8
 8015fb4:	d004      	beq.n	8015fc0 <memp_overflow_check_all+0x4c>
 8015fb6:	f858 6b04 	ldr.w	r6, [r8], #4
 8015fba:	68f5      	ldr	r5, [r6, #12]
 8015fbc:	8973      	ldrh	r3, [r6, #10]
 8015fbe:	e7e3      	b.n	8015f88 <memp_overflow_check_all+0x14>
    }
  }
  SYS_ARCH_UNPROTECT(old_level);
}
 8015fc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015fc4:	2002a358 	.word	0x2002a358
 8015fc8:	0803d2ec 	.word	0x0803d2ec
 8015fcc:	0803d3dc 	.word	0x0803d3dc
 8015fd0:	0803d3e8 	.word	0x0803d3e8

08015fd4 <do_memp_malloc_pool_fn.isra.3>:

static void *
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
 8015fd4:	b570      	push	{r4, r5, r6, lr}
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8015fd6:	680c      	ldr	r4, [r1, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8015fd8:	b1e4      	cbz	r4, 8016014 <do_memp_malloc_pool_fn.isra.3+0x40>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8015fda:	6826      	ldr	r6, [r4, #0]
 8015fdc:	4605      	mov	r5, r0
#if MEMP_OVERFLOW_CHECK
    memp->next = NULL;
 8015fde:	2000      	movs	r0, #0
    *desc->tab = memp->next;
 8015fe0:	600e      	str	r6, [r1, #0]
    memp->next = NULL;
 8015fe2:	6020      	str	r0, [r4, #0]
#endif /* MEMP_OVERFLOW_CHECK */
#endif /* !MEMP_MEM_MALLOC */
#if MEMP_OVERFLOW_CHECK
    memp->file = file;
    memp->line = line;
 8015fe4:	e9c4 2301 	strd	r2, r3, [r4, #4]
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8015fe8:	07a3      	lsls	r3, r4, #30
 8015fea:	d10b      	bne.n	8016004 <do_memp_malloc_pool_fn.isra.3+0x30>
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
 8015fec:	682a      	ldr	r2, [r5, #0]
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8015fee:	f104 001c 	add.w	r0, r4, #28
    desc->stats->used++;
 8015ff2:	8893      	ldrh	r3, [r2, #4]
    if (desc->stats->used > desc->stats->max) {
 8015ff4:	88d1      	ldrh	r1, [r2, #6]
    desc->stats->used++;
 8015ff6:	3301      	adds	r3, #1
 8015ff8:	b29b      	uxth	r3, r3
    if (desc->stats->used > desc->stats->max) {
 8015ffa:	4299      	cmp	r1, r3
    desc->stats->used++;
 8015ffc:	8093      	strh	r3, [r2, #4]
      desc->stats->max = desc->stats->used;
 8015ffe:	bf38      	it	cc
 8016000:	80d3      	strhcc	r3, [r2, #6]
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 8016002:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8016004:	4b06      	ldr	r3, [pc, #24]	; (8016020 <do_memp_malloc_pool_fn.isra.3+0x4c>)
 8016006:	f240 1219 	movw	r2, #281	; 0x119
 801600a:	4906      	ldr	r1, [pc, #24]	; (8016024 <do_memp_malloc_pool_fn.isra.3+0x50>)
 801600c:	4806      	ldr	r0, [pc, #24]	; (8016028 <do_memp_malloc_pool_fn.isra.3+0x54>)
 801600e:	f00a fcdb 	bl	80209c8 <iprintf>
 8016012:	e7eb      	b.n	8015fec <do_memp_malloc_pool_fn.isra.3+0x18>
    desc->stats->err++;
 8016014:	6802      	ldr	r2, [r0, #0]
 8016016:	4620      	mov	r0, r4
 8016018:	8813      	ldrh	r3, [r2, #0]
 801601a:	3301      	adds	r3, #1
 801601c:	8013      	strh	r3, [r2, #0]
}
 801601e:	bd70      	pop	{r4, r5, r6, pc}
 8016020:	0803d20c 	.word	0x0803d20c
 8016024:	0803d23c 	.word	0x0803d23c
 8016028:	0802697c 	.word	0x0802697c

0801602c <do_memp_free_pool.isra.5>:
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801602c:	0793      	lsls	r3, r2, #30
do_memp_free_pool(const struct memp_desc *desc, void *mem)
 801602e:	b570      	push	{r4, r5, r6, lr}
 8016030:	4614      	mov	r4, r2
 8016032:	4606      	mov	r6, r0
 8016034:	460d      	mov	r5, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 8016036:	d122      	bne.n	801607e <do_memp_free_pool.isra.5+0x52>
#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
 8016038:	6830      	ldr	r0, [r6, #0]
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801603a:	f1a4 021c 	sub.w	r2, r4, #28
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801603e:	6829      	ldr	r1, [r5, #0]
  desc->stats->used--;
 8016040:	8883      	ldrh	r3, [r0, #4]
  memp->next = *desc->tab;
 8016042:	680d      	ldr	r5, [r1, #0]
  desc->stats->used--;
 8016044:	3b01      	subs	r3, #1
 8016046:	8083      	strh	r3, [r0, #4]
  memp->next = *desc->tab;
 8016048:	f844 5c1c 	str.w	r5, [r4, #-28]
  *desc->tab = memp;
 801604c:	600a      	str	r2, [r1, #0]
  if (t != NULL) {
 801604e:	b162      	cbz	r2, 801606a <do_memp_free_pool.isra.5+0x3e>
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 8016050:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 8016054:	b14a      	cbz	r2, 801606a <do_memp_free_pool.isra.5+0x3e>
 8016056:	b143      	cbz	r3, 801606a <do_memp_free_pool.isra.5+0x3e>
      if (t == h) {
 8016058:	429a      	cmp	r2, r3
 801605a:	d007      	beq.n	801606c <do_memp_free_pool.isra.5+0x40>
         h = ((h->next != NULL) ? h->next->next : NULL)) {
 801605c:	681b      	ldr	r3, [r3, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 801605e:	6812      	ldr	r2, [r2, #0]
         h = ((h->next != NULL) ? h->next->next : NULL)) {
 8016060:	2b00      	cmp	r3, #0
 8016062:	d0f7      	beq.n	8016054 <do_memp_free_pool.isra.5+0x28>
 8016064:	681b      	ldr	r3, [r3, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 8016066:	2a00      	cmp	r2, #0
 8016068:	d1f5      	bne.n	8016056 <do_memp_free_pool.isra.5+0x2a>
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 801606a:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
 801606c:	4b08      	ldr	r3, [pc, #32]	; (8016090 <do_memp_free_pool.isra.5+0x64>)
 801606e:	f240 1285 	movw	r2, #389	; 0x185
 8016072:	4908      	ldr	r1, [pc, #32]	; (8016094 <do_memp_free_pool.isra.5+0x68>)
 8016074:	4808      	ldr	r0, [pc, #32]	; (8016098 <do_memp_free_pool.isra.5+0x6c>)
}
 8016076:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
 801607a:	f00a bca5 	b.w	80209c8 <iprintf>
  LWIP_ASSERT("memp_free: mem properly aligned",
 801607e:	4b04      	ldr	r3, [pc, #16]	; (8016090 <do_memp_free_pool.isra.5+0x64>)
 8016080:	f240 126d 	movw	r2, #365	; 0x16d
 8016084:	4905      	ldr	r1, [pc, #20]	; (801609c <do_memp_free_pool.isra.5+0x70>)
 8016086:	4804      	ldr	r0, [pc, #16]	; (8016098 <do_memp_free_pool.isra.5+0x6c>)
 8016088:	f00a fc9e 	bl	80209c8 <iprintf>
 801608c:	e7d4      	b.n	8016038 <do_memp_free_pool.isra.5+0xc>
 801608e:	bf00      	nop
 8016090:	0803d20c 	.word	0x0803d20c
 8016094:	0803d200 	.word	0x0803d200
 8016098:	0802697c 	.word	0x0802697c
 801609c:	0803d1e0 	.word	0x0803d1e0

080160a0 <memp_init_pool>:
{
 80160a0:	b570      	push	{r4, r5, r6, lr}
  *desc->tab = NULL;
 80160a2:	2200      	movs	r2, #0
{
 80160a4:	4605      	mov	r5, r0
  *desc->tab = NULL;
 80160a6:	e9d0 4303 	ldrd	r4, r3, [r0, #12]
  for (i = 0; i < desc->num; ++i) {
 80160aa:	8940      	ldrh	r0, [r0, #10]
  *desc->tab = NULL;
 80160ac:	601a      	str	r2, [r3, #0]
  for (i = 0; i < desc->num; ++i) {
 80160ae:	b1a8      	cbz	r0, 80160dc <memp_init_pool+0x3c>
 80160b0:	3403      	adds	r4, #3
 80160b2:	8929      	ldrh	r1, [r5, #8]
 80160b4:	4616      	mov	r6, r2
 80160b6:	f024 0403 	bic.w	r4, r4, #3
 80160ba:	e001      	b.n	80160c0 <memp_init_pool+0x20>
 80160bc:	692b      	ldr	r3, [r5, #16]
 80160be:	681a      	ldr	r2, [r3, #0]
    memp->next = *desc->tab;
 80160c0:	6022      	str	r2, [r4, #0]
  mem_overflow_init_raw((u8_t *)p + MEMP_SIZE, desc->size);
 80160c2:	f104 001c 	add.w	r0, r4, #28
    *desc->tab = memp;
 80160c6:	601c      	str	r4, [r3, #0]
  for (i = 0; i < desc->num; ++i) {
 80160c8:	3601      	adds	r6, #1
  mem_overflow_init_raw((u8_t *)p + MEMP_SIZE, desc->size);
 80160ca:	f7ff fc13 	bl	80158f4 <mem_overflow_init_raw>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80160ce:	8929      	ldrh	r1, [r5, #8]
  for (i = 0; i < desc->num; ++i) {
 80160d0:	8968      	ldrh	r0, [r5, #10]
                                   + MEM_SANITY_REGION_AFTER_ALIGNED
 80160d2:	f101 032c 	add.w	r3, r1, #44	; 0x2c
  for (i = 0; i < desc->num; ++i) {
 80160d6:	42b0      	cmp	r0, r6
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80160d8:	441c      	add	r4, r3
  for (i = 0; i < desc->num; ++i) {
 80160da:	dcef      	bgt.n	80160bc <memp_init_pool+0x1c>
  desc->stats->avail = desc->num;
 80160dc:	686b      	ldr	r3, [r5, #4]
 80160de:	8058      	strh	r0, [r3, #2]
}
 80160e0:	bd70      	pop	{r4, r5, r6, pc}
 80160e2:	bf00      	nop

080160e4 <memp_init>:
{
 80160e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160e6:	4c0a      	ldr	r4, [pc, #40]	; (8016110 <memp_init+0x2c>)
 80160e8:	4e0a      	ldr	r6, [pc, #40]	; (8016114 <memp_init+0x30>)
 80160ea:	f104 0740 	add.w	r7, r4, #64	; 0x40
 80160ee:	4d0a      	ldr	r5, [pc, #40]	; (8016118 <memp_init+0x34>)
 80160f0:	e001      	b.n	80160f6 <memp_init+0x12>
 80160f2:	f856 5b04 	ldr.w	r5, [r6], #4
    memp_init_pool(memp_pools[i]);
 80160f6:	4628      	mov	r0, r5
 80160f8:	f7ff ffd2 	bl	80160a0 <memp_init_pool>
    lwip_stats.memp[i] = memp_pools[i]->stats;
 80160fc:	686b      	ldr	r3, [r5, #4]
 80160fe:	f844 3b04 	str.w	r3, [r4], #4
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8016102:	42bc      	cmp	r4, r7
 8016104:	d1f5      	bne.n	80160f2 <memp_init+0xe>
}
 8016106:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  memp_overflow_check_all();
 801610a:	f7ff bf33 	b.w	8015f74 <memp_overflow_check_all>
 801610e:	bf00      	nop
 8016110:	20036218 	.word	0x20036218
 8016114:	0803d3e8 	.word	0x0803d3e8
 8016118:	0803d2ec 	.word	0x0803d2ec

0801611c <memp_malloc_fn>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801611c:	280f      	cmp	r0, #15
{
 801611e:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8016120:	d80f      	bhi.n	8016142 <memp_malloc_fn+0x26>
 8016122:	460d      	mov	r5, r1
 8016124:	4616      	mov	r6, r2
 8016126:	4604      	mov	r4, r0
  memp_overflow_check_all();
 8016128:	f7ff ff24 	bl	8015f74 <memp_overflow_check_all>
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
 801612c:	4909      	ldr	r1, [pc, #36]	; (8016154 <memp_malloc_fn+0x38>)
 801612e:	4633      	mov	r3, r6
 8016130:	462a      	mov	r2, r5
 8016132:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
}
 8016136:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
 801613a:	6901      	ldr	r1, [r0, #16]
 801613c:	3004      	adds	r0, #4
 801613e:	f7ff bf49 	b.w	8015fd4 <do_memp_malloc_pool_fn.isra.3>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8016142:	4b05      	ldr	r3, [pc, #20]	; (8016158 <memp_malloc_fn+0x3c>)
 8016144:	f240 1257 	movw	r2, #343	; 0x157
 8016148:	4904      	ldr	r1, [pc, #16]	; (801615c <memp_malloc_fn+0x40>)
 801614a:	4805      	ldr	r0, [pc, #20]	; (8016160 <memp_malloc_fn+0x44>)
 801614c:	f00a fc3c 	bl	80209c8 <iprintf>
}
 8016150:	2000      	movs	r0, #0
 8016152:	bd70      	pop	{r4, r5, r6, pc}
 8016154:	0803d3e4 	.word	0x0803d3e4
 8016158:	0803d20c 	.word	0x0803d20c
 801615c:	0803d3bc 	.word	0x0803d3bc
 8016160:	0802697c 	.word	0x0802697c

08016164 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8016164:	280f      	cmp	r0, #15
 8016166:	d811      	bhi.n	801618c <memp_free+0x28>

  if (mem == NULL) {
 8016168:	b179      	cbz	r1, 801618a <memp_free+0x26>
{
 801616a:	b570      	push	{r4, r5, r6, lr}
 801616c:	460d      	mov	r5, r1
 801616e:	4604      	mov	r4, r0
    return;
  }

#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
 8016170:	f7ff ff00 	bl	8015f74 <memp_overflow_check_all>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8016174:	4b09      	ldr	r3, [pc, #36]	; (801619c <memp_free+0x38>)
 8016176:	462a      	mov	r2, r5
 8016178:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801617c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  do_memp_free_pool(memp_pools[type], mem);
 8016180:	f100 0110 	add.w	r1, r0, #16
 8016184:	3004      	adds	r0, #4
 8016186:	f7ff bf51 	b.w	801602c <do_memp_free_pool.isra.5>
 801618a:	4770      	bx	lr
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801618c:	4b04      	ldr	r3, [pc, #16]	; (80161a0 <memp_free+0x3c>)
 801618e:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8016192:	4904      	ldr	r1, [pc, #16]	; (80161a4 <memp_free+0x40>)
 8016194:	4804      	ldr	r0, [pc, #16]	; (80161a8 <memp_free+0x44>)
 8016196:	f00a bc17 	b.w	80209c8 <iprintf>
 801619a:	bf00      	nop
 801619c:	0803d3e4 	.word	0x0803d3e4
 80161a0:	0803d20c 	.word	0x0803d20c
 80161a4:	0803d3a0 	.word	0x0803d3a0
 80161a8:	0802697c 	.word	0x0802697c

080161ac <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 80161ac:	f06f 000b 	mvn.w	r0, #11
 80161b0:	4770      	bx	lr
 80161b2:	bf00      	nop

080161b4 <netif_issue_reports>:
{
 80161b4:	b538      	push	{r3, r4, r5, lr}
 80161b6:	460d      	mov	r5, r1
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80161b8:	4604      	mov	r4, r0
 80161ba:	b198      	cbz	r0, 80161e4 <netif_issue_reports+0x30>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80161bc:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80161c0:	f003 0205 	and.w	r2, r3, #5
 80161c4:	2a05      	cmp	r2, #5
 80161c6:	d000      	beq.n	80161ca <netif_issue_reports+0x16>
}
 80161c8:	bd38      	pop	{r3, r4, r5, pc}
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80161ca:	07ea      	lsls	r2, r5, #31
 80161cc:	d5fc      	bpl.n	80161c8 <netif_issue_reports+0x14>
 80161ce:	6862      	ldr	r2, [r4, #4]
 80161d0:	2a00      	cmp	r2, #0
 80161d2:	d0f9      	beq.n	80161c8 <netif_issue_reports+0x14>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80161d4:	071b      	lsls	r3, r3, #28
 80161d6:	d5f7      	bpl.n	80161c8 <netif_issue_reports+0x14>
      etharp_gratuitous(netif);
 80161d8:	1d21      	adds	r1, r4, #4
 80161da:	4620      	mov	r0, r4
}
 80161dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      etharp_gratuitous(netif);
 80161e0:	f007 bdd6 	b.w	801dd90 <etharp_request>
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80161e4:	4b03      	ldr	r3, [pc, #12]	; (80161f4 <netif_issue_reports+0x40>)
 80161e6:	f240 326d 	movw	r2, #877	; 0x36d
 80161ea:	4903      	ldr	r1, [pc, #12]	; (80161f8 <netif_issue_reports+0x44>)
 80161ec:	4803      	ldr	r0, [pc, #12]	; (80161fc <netif_issue_reports+0x48>)
 80161ee:	f00a fbeb 	bl	80209c8 <iprintf>
 80161f2:	e7e3      	b.n	80161bc <netif_issue_reports+0x8>
 80161f4:	0803d56c 	.word	0x0803d56c
 80161f8:	0803d5a0 	.word	0x0803d5a0
 80161fc:	0802697c 	.word	0x0802697c

08016200 <netif_do_set_ipaddr>:
{
 8016200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016202:	4604      	mov	r4, r0
 8016204:	b083      	sub	sp, #12
 8016206:	4617      	mov	r7, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8016208:	460d      	mov	r5, r1
 801620a:	b319      	cbz	r1, 8016254 <netif_do_set_ipaddr+0x54>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 801620c:	6863      	ldr	r3, [r4, #4]
 801620e:	682a      	ldr	r2, [r5, #0]
 8016210:	429a      	cmp	r2, r3
 8016212:	d01c      	beq.n	801624e <netif_do_set_ipaddr+0x4e>
    *ip_2_ip4(&new_addr) = *ipaddr;
 8016214:	ae02      	add	r6, sp, #8
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8016216:	603b      	str	r3, [r7, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8016218:	4638      	mov	r0, r7
    *ip_2_ip4(&new_addr) = *ipaddr;
 801621a:	f846 2d04 	str.w	r2, [r6, #-4]!
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801621e:	4631      	mov	r1, r6
 8016220:	f002 f928 	bl	8018474 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8016224:	4631      	mov	r1, r6
 8016226:	4638      	mov	r0, r7
 8016228:	f005 fdd2 	bl	801bdd0 <udp_netif_ip_addr_changed>
  raw_netif_ip_addr_changed(old_addr, new_addr);
 801622c:	4631      	mov	r1, r6
 801622e:	4638      	mov	r0, r7
 8016230:	f000 feae 	bl	8016f90 <raw_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8016234:	682b      	ldr	r3, [r5, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8016236:	2101      	movs	r1, #1
 8016238:	4620      	mov	r0, r4
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801623a:	6063      	str	r3, [r4, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801623c:	f7ff ffba 	bl	80161b4 <netif_issue_reports>
    NETIF_STATUS_CALLBACK(netif);
 8016240:	69e3      	ldr	r3, [r4, #28]
 8016242:	b10b      	cbz	r3, 8016248 <netif_do_set_ipaddr+0x48>
 8016244:	4620      	mov	r0, r4
 8016246:	4798      	blx	r3
    return 1; /* address changed */
 8016248:	2001      	movs	r0, #1
}
 801624a:	b003      	add	sp, #12
 801624c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return 0; /* address unchanged */
 801624e:	2000      	movs	r0, #0
}
 8016250:	b003      	add	sp, #12
 8016252:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8016254:	4b03      	ldr	r3, [pc, #12]	; (8016264 <netif_do_set_ipaddr+0x64>)
 8016256:	f240 12cb 	movw	r2, #459	; 0x1cb
 801625a:	4903      	ldr	r1, [pc, #12]	; (8016268 <netif_do_set_ipaddr+0x68>)
 801625c:	4803      	ldr	r0, [pc, #12]	; (801626c <netif_do_set_ipaddr+0x6c>)
 801625e:	f00a fbb3 	bl	80209c8 <iprintf>
 8016262:	e7d3      	b.n	801620c <netif_do_set_ipaddr+0xc>
 8016264:	0803d56c 	.word	0x0803d56c
 8016268:	0803d55c 	.word	0x0803d55c
 801626c:	0802697c 	.word	0x0802697c

08016270 <netif_init>:
}
 8016270:	4770      	bx	lr
 8016272:	bf00      	nop

08016274 <netif_set_addr>:
{
 8016274:	b5f0      	push	{r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY4;
 8016276:	4c14      	ldr	r4, [pc, #80]	; (80162c8 <netif_set_addr+0x54>)
{
 8016278:	b083      	sub	sp, #12
 801627a:	4605      	mov	r5, r0
    ipaddr = IP4_ADDR_ANY4;
 801627c:	2900      	cmp	r1, #0
 801627e:	bf14      	ite	ne
 8016280:	460e      	movne	r6, r1
 8016282:	4626      	moveq	r6, r4
    netmask = IP4_ADDR_ANY4;
 8016284:	2a00      	cmp	r2, #0
 8016286:	bf14      	ite	ne
 8016288:	4617      	movne	r7, r2
 801628a:	4627      	moveq	r7, r4
    gw = IP4_ADDR_ANY4;
 801628c:	2b00      	cmp	r3, #0
 801628e:	bf18      	it	ne
 8016290:	461c      	movne	r4, r3
  remove = ip4_addr_isany(ipaddr);
 8016292:	6833      	ldr	r3, [r6, #0]
 8016294:	b193      	cbz	r3, 80162bc <netif_set_addr+0x48>
 8016296:	2200      	movs	r2, #0
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8016298:	683b      	ldr	r3, [r7, #0]
 801629a:	68a9      	ldr	r1, [r5, #8]
 801629c:	428b      	cmp	r3, r1
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801629e:	68e9      	ldr	r1, [r5, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80162a0:	bf18      	it	ne
 80162a2:	60ab      	strne	r3, [r5, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80162a4:	6823      	ldr	r3, [r4, #0]
 80162a6:	428b      	cmp	r3, r1
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80162a8:	bf18      	it	ne
 80162aa:	60eb      	strne	r3, [r5, #12]
  if (!remove) {
 80162ac:	b922      	cbnz	r2, 80162b8 <netif_set_addr+0x44>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80162ae:	4631      	mov	r1, r6
 80162b0:	4628      	mov	r0, r5
 80162b2:	aa01      	add	r2, sp, #4
 80162b4:	f7ff ffa4 	bl	8016200 <netif_do_set_ipaddr>
}
 80162b8:	b003      	add	sp, #12
 80162ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80162bc:	aa01      	add	r2, sp, #4
 80162be:	4631      	mov	r1, r6
 80162c0:	f7ff ff9e 	bl	8016200 <netif_do_set_ipaddr>
 80162c4:	2201      	movs	r2, #1
 80162c6:	e7e7      	b.n	8016298 <netif_set_addr+0x24>
 80162c8:	0803f66c 	.word	0x0803f66c

080162cc <netif_add>:
{
 80162cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162d0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80162d2:	4606      	mov	r6, r0
 80162d4:	2800      	cmp	r0, #0
 80162d6:	f000 8087 	beq.w	80163e8 <netif_add+0x11c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80162da:	2f00      	cmp	r7, #0
 80162dc:	d07b      	beq.n	80163d6 <netif_add+0x10a>
 80162de:	4688      	mov	r8, r1
  netif->num = netif_num;
 80162e0:	f8df b130 	ldr.w	fp, [pc, #304]	; 8016414 <netif_add+0x148>
  netif->state = state;
 80162e4:	990a      	ldr	r1, [sp, #40]	; 0x28
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80162e6:	2400      	movs	r4, #0
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80162e8:	4d44      	ldr	r5, [pc, #272]	; (80163fc <netif_add+0x130>)
  netif->state = state;
 80162ea:	6241      	str	r1, [r0, #36]	; 0x24
  netif->num = netif_num;
 80162ec:	f89b e000 	ldrb.w	lr, [fp]
  netif_set_addr(netif, ipaddr, netmask, gw);
 80162f0:	42a3      	cmp	r3, r4
 80162f2:	bf08      	it	eq
 80162f4:	462b      	moveq	r3, r5
  netif->input = input;
 80162f6:	990c      	ldr	r1, [sp, #48]	; 0x30
  netif_set_addr(netif, ipaddr, netmask, gw);
 80162f8:	42a2      	cmp	r2, r4
 80162fa:	bf08      	it	eq
 80162fc:	462a      	moveq	r2, r5
  netif->output = netif_null_output_ip4;
 80162fe:	f8df c118 	ldr.w	ip, [pc, #280]	; 8016418 <netif_add+0x14c>
  netif->input = input;
 8016302:	6101      	str	r1, [r0, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8016304:	45a0      	cmp	r8, r4
 8016306:	bf14      	ite	ne
 8016308:	4641      	movne	r1, r8
 801630a:	4629      	moveq	r1, r5
  netif->num = netif_num;
 801630c:	f880 e038 	strb.w	lr, [r0, #56]	; 0x38
  ip_addr_set_zero_ip4(&netif->gw);
 8016310:	60c4      	str	r4, [r0, #12]
  netif->mtu = 0;
 8016312:	8584      	strh	r4, [r0, #44]	; 0x2c
  netif->flags = 0;
 8016314:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8016318:	6284      	str	r4, [r0, #40]	; 0x28
  netif->output = netif_null_output_ip4;
 801631a:	f8c0 c014 	str.w	ip, [r0, #20]
  ip_addr_set_zero_ip4(&netif->netmask);
 801631e:	e9c0 4401 	strd	r4, r4, [r0, #4]
  netif->link_callback = NULL;
 8016322:	e9c0 4407 	strd	r4, r4, [r0, #28]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8016326:	f7ff ffa5 	bl	8016274 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 801632a:	4630      	mov	r0, r6
 801632c:	47b8      	blx	r7
 801632e:	2800      	cmp	r0, #0
 8016330:	d14f      	bne.n	80163d2 <netif_add+0x106>
 8016332:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 8016336:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 801641c <netif_add+0x150>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801633a:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8016408 <netif_add+0x13c>
 801633e:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8016420 <netif_add+0x154>
 8016342:	4f2f      	ldr	r7, [pc, #188]	; (8016400 <netif_add+0x134>)
      if (netif->num == 255) {
 8016344:	2bff      	cmp	r3, #255	; 0xff
 8016346:	d102      	bne.n	801634e <netif_add+0x82>
        netif->num = 0;
 8016348:	2300      	movs	r3, #0
 801634a:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801634e:	f8d9 4000 	ldr.w	r4, [r9]
 8016352:	b3b4      	cbz	r4, 80163c2 <netif_add+0xf6>
      num_netifs = 0;
 8016354:	2500      	movs	r5, #0
 8016356:	e007      	b.n	8016368 <netif_add+0x9c>
        if (netif2->num == netif->num) {
 8016358:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801635c:	f896 2038 	ldrb.w	r2, [r6, #56]	; 0x38
 8016360:	4293      	cmp	r3, r2
 8016362:	d014      	beq.n	801638e <netif_add+0xc2>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8016364:	6824      	ldr	r4, [r4, #0]
 8016366:	b1fc      	cbz	r4, 80163a8 <netif_add+0xdc>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8016368:	42a6      	cmp	r6, r4
        num_netifs++;
 801636a:	f105 0501 	add.w	r5, r5, #1
        LWIP_ASSERT("netif already added", netif2 != netif);
 801636e:	d013      	beq.n	8016398 <netif_add+0xcc>
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8016370:	2dff      	cmp	r5, #255	; 0xff
 8016372:	ddf1      	ble.n	8016358 <netif_add+0x8c>
 8016374:	4643      	mov	r3, r8
 8016376:	f240 128d 	movw	r2, #397	; 0x18d
 801637a:	4922      	ldr	r1, [pc, #136]	; (8016404 <netif_add+0x138>)
 801637c:	4638      	mov	r0, r7
 801637e:	f00a fb23 	bl	80209c8 <iprintf>
        if (netif2->num == netif->num) {
 8016382:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8016386:	f896 2038 	ldrb.w	r2, [r6, #56]	; 0x38
 801638a:	4293      	cmp	r3, r2
 801638c:	d1ea      	bne.n	8016364 <netif_add+0x98>
          netif->num++;
 801638e:	3301      	adds	r3, #1
 8016390:	b2db      	uxtb	r3, r3
 8016392:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
 8016396:	e7d5      	b.n	8016344 <netif_add+0x78>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8016398:	4643      	mov	r3, r8
 801639a:	f240 128b 	movw	r2, #395	; 0x18b
 801639e:	4651      	mov	r1, sl
 80163a0:	4638      	mov	r0, r7
 80163a2:	f00a fb11 	bl	80209c8 <iprintf>
 80163a6:	e7e3      	b.n	8016370 <netif_add+0xa4>
  if (netif->num == 254) {
 80163a8:	2afe      	cmp	r2, #254	; 0xfe
 80163aa:	f8d9 4000 	ldr.w	r4, [r9]
 80163ae:	d00c      	beq.n	80163ca <netif_add+0xfe>
    netif_num = (u8_t)(netif->num + 1);
 80163b0:	3201      	adds	r2, #1
 80163b2:	f88b 2000 	strb.w	r2, [fp]
  return netif;
 80163b6:	4630      	mov	r0, r6
  netif->next = netif_list;
 80163b8:	6034      	str	r4, [r6, #0]
  netif_list = netif;
 80163ba:	f8c9 6000 	str.w	r6, [r9]
}
 80163be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163c2:	f896 2038 	ldrb.w	r2, [r6, #56]	; 0x38
  if (netif->num == 254) {
 80163c6:	2afe      	cmp	r2, #254	; 0xfe
 80163c8:	d1f2      	bne.n	80163b0 <netif_add+0xe4>
    netif_num = 0;
 80163ca:	2300      	movs	r3, #0
 80163cc:	f88b 3000 	strb.w	r3, [fp]
 80163d0:	e7f1      	b.n	80163b6 <netif_add+0xea>
    return NULL;
 80163d2:	4620      	mov	r0, r4
 80163d4:	e7f3      	b.n	80163be <netif_add+0xf2>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80163d6:	4b0c      	ldr	r3, [pc, #48]	; (8016408 <netif_add+0x13c>)
 80163d8:	f44f 7294 	mov.w	r2, #296	; 0x128
 80163dc:	490b      	ldr	r1, [pc, #44]	; (801640c <netif_add+0x140>)
 80163de:	4808      	ldr	r0, [pc, #32]	; (8016400 <netif_add+0x134>)
 80163e0:	f00a faf2 	bl	80209c8 <iprintf>
 80163e4:	4638      	mov	r0, r7
 80163e6:	e7ea      	b.n	80163be <netif_add+0xf2>
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80163e8:	4b07      	ldr	r3, [pc, #28]	; (8016408 <netif_add+0x13c>)
 80163ea:	f240 1227 	movw	r2, #295	; 0x127
 80163ee:	4908      	ldr	r1, [pc, #32]	; (8016410 <netif_add+0x144>)
 80163f0:	4803      	ldr	r0, [pc, #12]	; (8016400 <netif_add+0x134>)
 80163f2:	f00a fae9 	bl	80209c8 <iprintf>
 80163f6:	4630      	mov	r0, r6
 80163f8:	e7e1      	b.n	80163be <netif_add+0xf2>
 80163fa:	bf00      	nop
 80163fc:	0803f66c 	.word	0x0803f66c
 8016400:	0802697c 	.word	0x0802697c
 8016404:	0803d52c 	.word	0x0803d52c
 8016408:	0803d56c 	.word	0x0803d56c
 801640c:	0803d4f4 	.word	0x0803d4f4
 8016410:	0803d4d8 	.word	0x0803d4d8
 8016414:	200223dc 	.word	0x200223dc
 8016418:	080161ad 	.word	0x080161ad
 801641c:	20036158 	.word	0x20036158
 8016420:	0803d518 	.word	0x0803d518

08016424 <netif_set_default>:
  netif_default = netif;
 8016424:	4b01      	ldr	r3, [pc, #4]	; (801642c <netif_set_default+0x8>)
 8016426:	6018      	str	r0, [r3, #0]
}
 8016428:	4770      	bx	lr
 801642a:	bf00      	nop
 801642c:	2003615c 	.word	0x2003615c

08016430 <netif_set_up>:
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8016430:	b198      	cbz	r0, 801645a <netif_set_up+0x2a>
{
 8016432:	b510      	push	{r4, lr}
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8016434:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8016438:	4604      	mov	r4, r0
 801643a:	07d3      	lsls	r3, r2, #31
 801643c:	d40c      	bmi.n	8016458 <netif_set_up+0x28>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801643e:	f042 0201 	orr.w	r2, r2, #1
    NETIF_STATUS_CALLBACK(netif);
 8016442:	69c3      	ldr	r3, [r0, #28]
    netif_set_flags(netif, NETIF_FLAG_UP);
 8016444:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    NETIF_STATUS_CALLBACK(netif);
 8016448:	b103      	cbz	r3, 801644c <netif_set_up+0x1c>
 801644a:	4798      	blx	r3
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801644c:	4620      	mov	r0, r4
 801644e:	2103      	movs	r1, #3
}
 8016450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8016454:	f7ff beae 	b.w	80161b4 <netif_issue_reports>
}
 8016458:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801645a:	4b03      	ldr	r3, [pc, #12]	; (8016468 <netif_set_up+0x38>)
 801645c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8016460:	4902      	ldr	r1, [pc, #8]	; (801646c <netif_set_up+0x3c>)
 8016462:	4803      	ldr	r0, [pc, #12]	; (8016470 <netif_set_up+0x40>)
 8016464:	f00a bab0 	b.w	80209c8 <iprintf>
 8016468:	0803d56c 	.word	0x0803d56c
 801646c:	0803d62c 	.word	0x0803d62c
 8016470:	0802697c 	.word	0x0802697c

08016474 <netif_set_down>:
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8016474:	b190      	cbz	r0, 801649c <netif_set_down+0x28>
{
 8016476:	b510      	push	{r4, lr}
  if (netif->flags & NETIF_FLAG_UP) {
 8016478:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 801647c:	4604      	mov	r4, r0
 801647e:	07d1      	lsls	r1, r2, #31
 8016480:	d50b      	bpl.n	801649a <netif_set_down+0x26>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 8016482:	f022 0301 	bic.w	r3, r2, #1
 8016486:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801648a:	0713      	lsls	r3, r2, #28
 801648c:	d40d      	bmi.n	80164aa <netif_set_down+0x36>
    NETIF_STATUS_CALLBACK(netif);
 801648e:	69e3      	ldr	r3, [r4, #28]
 8016490:	b11b      	cbz	r3, 801649a <netif_set_down+0x26>
 8016492:	4620      	mov	r0, r4
}
 8016494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_STATUS_CALLBACK(netif);
 8016498:	4718      	bx	r3
}
 801649a:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801649c:	4b04      	ldr	r3, [pc, #16]	; (80164b0 <netif_set_down+0x3c>)
 801649e:	f240 329b 	movw	r2, #923	; 0x39b
 80164a2:	4904      	ldr	r1, [pc, #16]	; (80164b4 <netif_set_down+0x40>)
 80164a4:	4804      	ldr	r0, [pc, #16]	; (80164b8 <netif_set_down+0x44>)
 80164a6:	f00a ba8f 	b.w	80209c8 <iprintf>
      etharp_cleanup_netif(netif);
 80164aa:	f007 f9c3 	bl	801d834 <etharp_cleanup_netif>
 80164ae:	e7ee      	b.n	801648e <netif_set_down+0x1a>
 80164b0:	0803d56c 	.word	0x0803d56c
 80164b4:	0803d5c4 	.word	0x0803d5c4
 80164b8:	0802697c 	.word	0x0802697c

080164bc <netif_set_status_callback>:
  if (netif) {
 80164bc:	b100      	cbz	r0, 80164c0 <netif_set_status_callback+0x4>
    netif->status_callback = status_callback;
 80164be:	61c1      	str	r1, [r0, #28]
}
 80164c0:	4770      	bx	lr
 80164c2:	bf00      	nop

080164c4 <netif_set_link_up>:
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80164c4:	b1b8      	cbz	r0, 80164f6 <netif_set_link_up+0x32>
{
 80164c6:	b510      	push	{r4, lr}
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80164c8:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 80164cc:	4604      	mov	r4, r0
 80164ce:	0753      	lsls	r3, r2, #29
 80164d0:	d500      	bpl.n	80164d4 <netif_set_link_up+0x10>
}
 80164d2:	bd10      	pop	{r4, pc}
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80164d4:	f042 0204 	orr.w	r2, r2, #4
 80164d8:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    dhcp_network_changed(netif);
 80164dc:	f006 fc9c 	bl	801ce18 <dhcp_network_changed>
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80164e0:	2103      	movs	r1, #3
 80164e2:	4620      	mov	r0, r4
 80164e4:	f7ff fe66 	bl	80161b4 <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 80164e8:	6a23      	ldr	r3, [r4, #32]
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d0f1      	beq.n	80164d2 <netif_set_link_up+0xe>
 80164ee:	4620      	mov	r0, r4
}
 80164f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 80164f4:	4718      	bx	r3
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80164f6:	4b03      	ldr	r3, [pc, #12]	; (8016504 <netif_set_link_up+0x40>)
 80164f8:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80164fc:	4902      	ldr	r1, [pc, #8]	; (8016508 <netif_set_link_up+0x44>)
 80164fe:	4803      	ldr	r0, [pc, #12]	; (801650c <netif_set_link_up+0x48>)
 8016500:	f00a ba62 	b.w	80209c8 <iprintf>
 8016504:	0803d56c 	.word	0x0803d56c
 8016508:	0803d608 	.word	0x0803d608
 801650c:	0802697c 	.word	0x0802697c

08016510 <netif_set_link_down>:
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8016510:	b158      	cbz	r0, 801652a <netif_set_link_down+0x1a>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8016512:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8016516:	0759      	lsls	r1, r3, #29
 8016518:	d506      	bpl.n	8016528 <netif_set_link_down+0x18>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801651a:	f023 0304 	bic.w	r3, r3, #4
    NETIF_LINK_CALLBACK(netif);
 801651e:	6a01      	ldr	r1, [r0, #32]
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8016520:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    NETIF_LINK_CALLBACK(netif);
 8016524:	b101      	cbz	r1, 8016528 <netif_set_link_down+0x18>
 8016526:	4708      	bx	r1
}
 8016528:	4770      	bx	lr
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801652a:	4b03      	ldr	r3, [pc, #12]	; (8016538 <netif_set_link_down+0x28>)
 801652c:	f240 4206 	movw	r2, #1030	; 0x406
 8016530:	4902      	ldr	r1, [pc, #8]	; (801653c <netif_set_link_down+0x2c>)
 8016532:	4803      	ldr	r0, [pc, #12]	; (8016540 <netif_set_link_down+0x30>)
 8016534:	f00a ba48 	b.w	80209c8 <iprintf>
 8016538:	0803d56c 	.word	0x0803d56c
 801653c:	0803d5e4 	.word	0x0803d5e4
 8016540:	0802697c 	.word	0x0802697c

08016544 <netif_set_link_callback>:
  if (netif) {
 8016544:	b100      	cbz	r0, 8016548 <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 8016546:	6201      	str	r1, [r0, #32]
}
 8016548:	4770      	bx	lr
 801654a:	bf00      	nop

0801654c <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801654c:	b1a0      	cbz	r0, 8016578 <netif_get_by_index+0x2c>
    NETIF_FOREACH(netif) {
 801654e:	4b0b      	ldr	r3, [pc, #44]	; (801657c <netif_get_by_index+0x30>)
 8016550:	681a      	ldr	r2, [r3, #0]
 8016552:	b17a      	cbz	r2, 8016574 <netif_get_by_index+0x28>
      if (idx == netif_get_index(netif)) {
 8016554:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8016558:	3301      	adds	r3, #1
 801655a:	b2db      	uxtb	r3, r3
 801655c:	4298      	cmp	r0, r3
 801655e:	d106      	bne.n	801656e <netif_get_by_index+0x22>
 8016560:	e008      	b.n	8016574 <netif_get_by_index+0x28>
 8016562:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8016566:	3301      	adds	r3, #1
 8016568:	b2db      	uxtb	r3, r3
 801656a:	4283      	cmp	r3, r0
 801656c:	d002      	beq.n	8016574 <netif_get_by_index+0x28>
    NETIF_FOREACH(netif) {
 801656e:	6812      	ldr	r2, [r2, #0]
 8016570:	2a00      	cmp	r2, #0
 8016572:	d1f6      	bne.n	8016562 <netif_get_by_index+0x16>
      }
    }
  }

  return NULL;
}
 8016574:	4610      	mov	r0, r2
 8016576:	4770      	bx	lr
  return NULL;
 8016578:	4602      	mov	r2, r0
 801657a:	e7fb      	b.n	8016574 <netif_get_by_index+0x28>
 801657c:	20036158 	.word	0x20036158

08016580 <pbuf_free_ooseq_callback>:
pbuf_free_ooseq(void)
{
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8016580:	4907      	ldr	r1, [pc, #28]	; (80165a0 <pbuf_free_ooseq_callback+0x20>)
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8016582:	2200      	movs	r2, #0
 8016584:	4b07      	ldr	r3, [pc, #28]	; (80165a4 <pbuf_free_ooseq_callback+0x24>)
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8016586:	6808      	ldr	r0, [r1, #0]
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8016588:	701a      	strb	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801658a:	b910      	cbnz	r0, 8016592 <pbuf_free_ooseq_callback+0x12>
 801658c:	e006      	b.n	801659c <pbuf_free_ooseq_callback+0x1c>
 801658e:	68c0      	ldr	r0, [r0, #12]
 8016590:	b120      	cbz	r0, 801659c <pbuf_free_ooseq_callback+0x1c>
    if (pcb->ooseq != NULL) {
 8016592:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8016594:	2b00      	cmp	r3, #0
 8016596:	d0fa      	beq.n	801658e <pbuf_free_ooseq_callback+0xe>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8016598:	f001 bf96 	b.w	80184c8 <tcp_free_ooseq>
static void
pbuf_free_ooseq_callback(void *arg)
{
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
}
 801659c:	4770      	bx	lr
 801659e:	bf00      	nop
 80165a0:	20036270 	.word	0x20036270
 80165a4:	20036160 	.word	0x20036160

080165a8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80165a8:	b538      	push	{r3, r4, r5, lr}
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80165aa:	b308      	cbz	r0, 80165f0 <pbuf_add_header_impl+0x48>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80165ac:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80165b0:	d21b      	bcs.n	80165ea <pbuf_add_header_impl+0x42>
    return 1;
  }
  if (header_size_increment == 0) {
 80165b2:	b191      	cbz	r1, 80165da <pbuf_add_header_impl+0x32>
    return 0;
  }

  increment_magnitude = (u16_t)header_size_increment;
 80165b4:	b28c      	uxth	r4, r1
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80165b6:	8903      	ldrh	r3, [r0, #8]
 80165b8:	4423      	add	r3, r4
 80165ba:	b29b      	uxth	r3, r3
 80165bc:	429c      	cmp	r4, r3
 80165be:	d814      	bhi.n	80165ea <pbuf_add_header_impl+0x42>
  }

  type_internal = p->type_internal;

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80165c0:	f990 500c 	ldrsb.w	r5, [r0, #12]
 80165c4:	2d00      	cmp	r5, #0
 80165c6:	db0a      	blt.n	80165de <pbuf_add_header_impl+0x36>
      return 1;
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80165c8:	b17a      	cbz	r2, 80165ea <pbuf_add_header_impl+0x42>
      payload = (u8_t *)p->payload - header_size_increment;
 80165ca:	6842      	ldr	r2, [r0, #4]
 80165cc:	1a52      	subs	r2, r2, r1
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
  p->len = (u16_t)(p->len + increment_magnitude);
 80165ce:	8945      	ldrh	r5, [r0, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);


  return 0;
 80165d0:	2100      	movs	r1, #0
  p->payload = payload;
 80165d2:	6042      	str	r2, [r0, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80165d4:	442c      	add	r4, r5
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80165d6:	8103      	strh	r3, [r0, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 80165d8:	8144      	strh	r4, [r0, #10]
}
 80165da:	4608      	mov	r0, r1
 80165dc:	bd38      	pop	{r3, r4, r5, pc}
    payload = (u8_t *)p->payload - header_size_increment;
 80165de:	6842      	ldr	r2, [r0, #4]
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80165e0:	f100 0510 	add.w	r5, r0, #16
    payload = (u8_t *)p->payload - header_size_increment;
 80165e4:	1a52      	subs	r2, r2, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80165e6:	42aa      	cmp	r2, r5
 80165e8:	d2f1      	bcs.n	80165ce <pbuf_add_header_impl+0x26>
    return 1;
 80165ea:	2101      	movs	r1, #1
}
 80165ec:	4608      	mov	r0, r1
 80165ee:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 80165f0:	4b04      	ldr	r3, [pc, #16]	; (8016604 <pbuf_add_header_impl+0x5c>)
 80165f2:	f240 12df 	movw	r2, #479	; 0x1df
 80165f6:	4904      	ldr	r1, [pc, #16]	; (8016608 <pbuf_add_header_impl+0x60>)
 80165f8:	4804      	ldr	r0, [pc, #16]	; (801660c <pbuf_add_header_impl+0x64>)
 80165fa:	f00a f9e5 	bl	80209c8 <iprintf>
    return 1;
 80165fe:	2101      	movs	r1, #1
}
 8016600:	4608      	mov	r0, r1
 8016602:	bd38      	pop	{r3, r4, r5, pc}
 8016604:	0803d648 	.word	0x0803d648
 8016608:	0803f020 	.word	0x0803f020
 801660c:	0802697c 	.word	0x0802697c

08016610 <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8016610:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8016614:	2b01      	cmp	r3, #1
{
 8016616:	b570      	push	{r4, r5, r6, lr}
 8016618:	4614      	mov	r4, r2
 801661a:	4606      	mov	r6, r0
 801661c:	460d      	mov	r5, r1
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801661e:	d111      	bne.n	8016644 <pbuf_alloc_reference+0x34>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8016620:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8016624:	490b      	ldr	r1, [pc, #44]	; (8016654 <pbuf_alloc_reference+0x44>)
 8016626:	200e      	movs	r0, #14
 8016628:	f7ff fd78 	bl	801611c <memp_malloc_fn>
  if (p == NULL) {
 801662c:	b148      	cbz	r0, 8016642 <pbuf_alloc_reference+0x32>
  p->next = NULL;
 801662e:	2300      	movs	r3, #0
  p->ref = 1;
 8016630:	2201      	movs	r2, #1
  p->payload = payload;
 8016632:	6046      	str	r6, [r0, #4]
  p->tot_len = tot_len;
 8016634:	8105      	strh	r5, [r0, #8]
  p->len = len;
 8016636:	8145      	strh	r5, [r0, #10]
  p->type_internal = (u8_t)type;
 8016638:	7304      	strb	r4, [r0, #12]
  p->next = NULL;
 801663a:	6003      	str	r3, [r0, #0]
  p->flags = flags;
 801663c:	7343      	strb	r3, [r0, #13]
  p->if_idx = NETIF_NO_INDEX;
 801663e:	73c3      	strb	r3, [r0, #15]
  p->ref = 1;
 8016640:	7382      	strb	r2, [r0, #14]
}
 8016642:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8016644:	4b03      	ldr	r3, [pc, #12]	; (8016654 <pbuf_alloc_reference+0x44>)
 8016646:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801664a:	4903      	ldr	r1, [pc, #12]	; (8016658 <pbuf_alloc_reference+0x48>)
 801664c:	4803      	ldr	r0, [pc, #12]	; (801665c <pbuf_alloc_reference+0x4c>)
 801664e:	f00a f9bb 	bl	80209c8 <iprintf>
 8016652:	e7e5      	b.n	8016620 <pbuf_alloc_reference+0x10>
 8016654:	0803d648 	.word	0x0803d648
 8016658:	0803d694 	.word	0x0803d694
 801665c:	0802697c 	.word	0x0802697c

08016660 <pbuf_alloced_custom>:
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8016660:	3003      	adds	r0, #3
 8016662:	f020 0003 	bic.w	r0, r0, #3
{
 8016666:	b470      	push	{r4, r5, r6}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8016668:	180e      	adds	r6, r1, r0
{
 801666a:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 801666e:	9c03      	ldr	r4, [sp, #12]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8016670:	42ae      	cmp	r6, r5
 8016672:	d80f      	bhi.n	8016694 <pbuf_alloced_custom+0x34>
  if (payload_mem != NULL) {
 8016674:	b104      	cbz	r4, 8016678 <pbuf_alloced_custom+0x18>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8016676:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8016678:	4618      	mov	r0, r3
  p->flags = flags;
 801667a:	2602      	movs	r6, #2
  p->next = NULL;
 801667c:	2300      	movs	r3, #0
  p->ref = 1;
 801667e:	2501      	movs	r5, #1
  p->payload = payload;
 8016680:	6044      	str	r4, [r0, #4]
  p->tot_len = tot_len;
 8016682:	8101      	strh	r1, [r0, #8]
  p->len = len;
 8016684:	8141      	strh	r1, [r0, #10]
  p->type_internal = (u8_t)type;
 8016686:	7302      	strb	r2, [r0, #12]
  p->flags = flags;
 8016688:	7346      	strb	r6, [r0, #13]
  p->ref = 1;
 801668a:	7385      	strb	r5, [r0, #14]
  p->next = NULL;
 801668c:	6003      	str	r3, [r0, #0]
  p->if_idx = NETIF_NO_INDEX;
 801668e:	73c3      	strb	r3, [r0, #15]
}
 8016690:	bc70      	pop	{r4, r5, r6}
 8016692:	4770      	bx	lr
    return NULL;
 8016694:	2000      	movs	r0, #0
 8016696:	e7fb      	b.n	8016690 <pbuf_alloced_custom+0x30>

08016698 <pbuf_add_header>:
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8016698:	2200      	movs	r2, #0
 801669a:	f7ff bf85 	b.w	80165a8 <pbuf_add_header_impl>
 801669e:	bf00      	nop

080166a0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80166a0:	b538      	push	{r3, r4, r5, lr}
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80166a2:	b1a8      	cbz	r0, 80166d0 <pbuf_remove_header+0x30>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80166a4:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80166a8:	d20f      	bcs.n	80166ca <pbuf_remove_header+0x2a>
    return 1;
  }
  if (header_size_decrement == 0) {
 80166aa:	b161      	cbz	r1, 80166c6 <pbuf_remove_header+0x26>
    return 0;
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80166ac:	b28a      	uxth	r2, r1
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80166ae:	8943      	ldrh	r3, [r0, #10]
 80166b0:	4293      	cmp	r3, r2
 80166b2:	d317      	bcc.n	80166e4 <pbuf_remove_header+0x44>
  /* remember current payload pointer */
  payload = p->payload;
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80166b4:	6845      	ldr	r5, [r0, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80166b6:	1a9b      	subs	r3, r3, r2
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80166b8:	8904      	ldrh	r4, [r0, #8]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80166ba:	440d      	add	r5, r1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80166bc:	2100      	movs	r1, #0
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80166be:	1aa2      	subs	r2, r4, r2
  p->len = (u16_t)(p->len - increment_magnitude);
 80166c0:	8143      	strh	r3, [r0, #10]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80166c2:	6045      	str	r5, [r0, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80166c4:	8102      	strh	r2, [r0, #8]
}
 80166c6:	4608      	mov	r0, r1
 80166c8:	bd38      	pop	{r3, r4, r5, pc}
    return 1;
 80166ca:	2101      	movs	r1, #1
}
 80166cc:	4608      	mov	r0, r1
 80166ce:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 80166d0:	4b09      	ldr	r3, [pc, #36]	; (80166f8 <pbuf_remove_header+0x58>)
 80166d2:	f240 224b 	movw	r2, #587	; 0x24b
 80166d6:	4909      	ldr	r1, [pc, #36]	; (80166fc <pbuf_remove_header+0x5c>)
 80166d8:	4809      	ldr	r0, [pc, #36]	; (8016700 <pbuf_remove_header+0x60>)
 80166da:	f00a f975 	bl	80209c8 <iprintf>
    return 1;
 80166de:	2101      	movs	r1, #1
}
 80166e0:	4608      	mov	r0, r1
 80166e2:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80166e4:	4907      	ldr	r1, [pc, #28]	; (8016704 <pbuf_remove_header+0x64>)
 80166e6:	f240 2255 	movw	r2, #597	; 0x255
 80166ea:	4b03      	ldr	r3, [pc, #12]	; (80166f8 <pbuf_remove_header+0x58>)
 80166ec:	4804      	ldr	r0, [pc, #16]	; (8016700 <pbuf_remove_header+0x60>)
 80166ee:	f00a f96b 	bl	80209c8 <iprintf>
 80166f2:	2101      	movs	r1, #1
 80166f4:	e7e7      	b.n	80166c6 <pbuf_remove_header+0x26>
 80166f6:	bf00      	nop
 80166f8:	0803d648 	.word	0x0803d648
 80166fc:	0803f020 	.word	0x0803f020
 8016700:	0802697c 	.word	0x0802697c
 8016704:	0803d8c8 	.word	0x0803d8c8

08016708 <pbuf_header_force>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
  if (header_size_increment < 0) {
 8016708:	1e0b      	subs	r3, r1, #0
 801670a:	db02      	blt.n	8016712 <pbuf_header_force+0xa>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801670c:	2201      	movs	r2, #1
 801670e:	f7ff bf4b 	b.w	80165a8 <pbuf_add_header_impl>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8016712:	4259      	negs	r1, r3
 8016714:	f7ff bfc4 	b.w	80166a0 <pbuf_remove_header>

08016718 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8016718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801671c:	4604      	mov	r4, r0
 801671e:	2800      	cmp	r0, #0
 8016720:	d050      	beq.n	80167c4 <pbuf_free+0xac>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8016722:	2500      	movs	r5, #0
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8016724:	4f2d      	ldr	r7, [pc, #180]	; (80167dc <pbuf_free+0xc4>)
 8016726:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 80167f0 <pbuf_free+0xd8>
 801672a:	4e2d      	ldr	r6, [pc, #180]	; (80167e0 <pbuf_free+0xc8>)
 801672c:	e008      	b.n	8016740 <pbuf_free+0x28>
      alloc_src = pbuf_get_allocsrc(p);
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801672e:	6923      	ldr	r3, [r4, #16]
 8016730:	2b00      	cmp	r3, #0
 8016732:	d039      	beq.n	80167a8 <pbuf_free+0x90>
        pc->custom_free_function(p);
 8016734:	4620      	mov	r0, r4
 8016736:	4798      	blx	r3
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
        }
      }
      count++;
 8016738:	3501      	adds	r5, #1
  while (p != NULL) {
 801673a:	464c      	mov	r4, r9
      count++;
 801673c:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 801673e:	b1d4      	cbz	r4, 8016776 <pbuf_free+0x5e>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8016740:	7ba3      	ldrb	r3, [r4, #14]
 8016742:	b1db      	cbz	r3, 801677c <pbuf_free+0x64>
    ref = --(p->ref);
 8016744:	3b01      	subs	r3, #1
 8016746:	b2db      	uxtb	r3, r3
 8016748:	73a3      	strb	r3, [r4, #14]
    if (ref == 0) {
 801674a:	b9a3      	cbnz	r3, 8016776 <pbuf_free+0x5e>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801674c:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 801674e:	f8d4 9000 	ldr.w	r9, [r4]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8016752:	079b      	lsls	r3, r3, #30
 8016754:	d4eb      	bmi.n	801672e <pbuf_free+0x16>
      alloc_src = pbuf_get_allocsrc(p);
 8016756:	7b23      	ldrb	r3, [r4, #12]
 8016758:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801675c:	2b02      	cmp	r3, #2
 801675e:	d01e      	beq.n	801679e <pbuf_free+0x86>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8016760:	2b01      	cmp	r3, #1
 8016762:	d02a      	beq.n	80167ba <pbuf_free+0xa2>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8016764:	b99b      	cbnz	r3, 801678e <pbuf_free+0x76>
          mem_free(p);
 8016766:	4620      	mov	r0, r4
      count++;
 8016768:	3501      	adds	r5, #1
  while (p != NULL) {
 801676a:	464c      	mov	r4, r9
          mem_free(p);
 801676c:	f7ff f914 	bl	8015998 <mem_free>
      count++;
 8016770:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 8016772:	2c00      	cmp	r4, #0
 8016774:	d1e4      	bne.n	8016740 <pbuf_free+0x28>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8016776:	4628      	mov	r0, r5
 8016778:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801677c:	463b      	mov	r3, r7
 801677e:	f240 22f1 	movw	r2, #753	; 0x2f1
 8016782:	4641      	mov	r1, r8
 8016784:	4630      	mov	r0, r6
 8016786:	f00a f91f 	bl	80209c8 <iprintf>
 801678a:	7ba3      	ldrb	r3, [r4, #14]
 801678c:	e7da      	b.n	8016744 <pbuf_free+0x2c>
          LWIP_ASSERT("invalid pbuf type", 0);
 801678e:	463b      	mov	r3, r7
 8016790:	f240 320f 	movw	r2, #783	; 0x30f
 8016794:	4913      	ldr	r1, [pc, #76]	; (80167e4 <pbuf_free+0xcc>)
 8016796:	4630      	mov	r0, r6
 8016798:	f00a f916 	bl	80209c8 <iprintf>
 801679c:	e7cc      	b.n	8016738 <pbuf_free+0x20>
          memp_free(MEMP_PBUF_POOL, p);
 801679e:	4621      	mov	r1, r4
 80167a0:	200f      	movs	r0, #15
 80167a2:	f7ff fcdf 	bl	8016164 <memp_free>
 80167a6:	e7c7      	b.n	8016738 <pbuf_free+0x20>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80167a8:	463b      	mov	r3, r7
 80167aa:	f240 22ff 	movw	r2, #767	; 0x2ff
 80167ae:	490e      	ldr	r1, [pc, #56]	; (80167e8 <pbuf_free+0xd0>)
 80167b0:	4630      	mov	r0, r6
 80167b2:	f00a f909 	bl	80209c8 <iprintf>
 80167b6:	6923      	ldr	r3, [r4, #16]
 80167b8:	e7bc      	b.n	8016734 <pbuf_free+0x1c>
          memp_free(MEMP_PBUF, p);
 80167ba:	4621      	mov	r1, r4
 80167bc:	200e      	movs	r0, #14
 80167be:	f7ff fcd1 	bl	8016164 <memp_free>
 80167c2:	e7b9      	b.n	8016738 <pbuf_free+0x20>
    return 0;
 80167c4:	4605      	mov	r5, r0
    LWIP_ASSERT("p != NULL", p != NULL);
 80167c6:	4b05      	ldr	r3, [pc, #20]	; (80167dc <pbuf_free+0xc4>)
 80167c8:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80167cc:	4907      	ldr	r1, [pc, #28]	; (80167ec <pbuf_free+0xd4>)
 80167ce:	4804      	ldr	r0, [pc, #16]	; (80167e0 <pbuf_free+0xc8>)
 80167d0:	f00a f8fa 	bl	80209c8 <iprintf>
}
 80167d4:	4628      	mov	r0, r5
 80167d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80167da:	bf00      	nop
 80167dc:	0803d648 	.word	0x0803d648
 80167e0:	0802697c 	.word	0x0802697c
 80167e4:	0803d854 	.word	0x0803d854
 80167e8:	0803d830 	.word	0x0803d830
 80167ec:	0803f020 	.word	0x0803f020
 80167f0:	0803d818 	.word	0x0803d818

080167f4 <pbuf_alloc>:
  switch (type) {
 80167f4:	2a41      	cmp	r2, #65	; 0x41
{
 80167f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80167fa:	4688      	mov	r8, r1
  switch (type) {
 80167fc:	d06a      	beq.n	80168d4 <pbuf_alloc+0xe0>
 80167fe:	d95c      	bls.n	80168ba <pbuf_alloc+0xc6>
 8016800:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
 8016804:	fa1f f980 	uxth.w	r9, r0
 8016808:	d027      	beq.n	801685a <pbuf_alloc+0x66>
 801680a:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 801680e:	d156      	bne.n	80168be <pbuf_alloc+0xca>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8016810:	f109 0303 	add.w	r3, r9, #3
 8016814:	1cca      	adds	r2, r1, #3
 8016816:	4605      	mov	r5, r0
 8016818:	f022 0203 	bic.w	r2, r2, #3
 801681c:	f023 0303 	bic.w	r3, r3, #3
 8016820:	4413      	add	r3, r2
 8016822:	b29b      	uxth	r3, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8016824:	f103 0010 	add.w	r0, r3, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8016828:	4293      	cmp	r3, r2
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801682a:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801682c:	d358      	bcc.n	80168e0 <pbuf_alloc+0xec>
 801682e:	4282      	cmp	r2, r0
 8016830:	d856      	bhi.n	80168e0 <pbuf_alloc+0xec>
      p = (struct pbuf *)mem_malloc(alloc_len);
 8016832:	f7ff fa81 	bl	8015d38 <mem_malloc>
      if (p == NULL) {
 8016836:	4604      	mov	r4, r0
 8016838:	b160      	cbz	r0, 8016854 <pbuf_alloc+0x60>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801683a:	4405      	add	r5, r0
  p->next = NULL;
 801683c:	2200      	movs	r2, #0
  p->type_internal = (u8_t)type;
 801683e:	4b35      	ldr	r3, [pc, #212]	; (8016914 <pbuf_alloc+0x120>)
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8016840:	3513      	adds	r5, #19
  p->tot_len = tot_len;
 8016842:	f8a0 8008 	strh.w	r8, [r0, #8]
  p->len = len;
 8016846:	f8a0 800a 	strh.w	r8, [r0, #10]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801684a:	f025 0503 	bic.w	r5, r5, #3
  p->next = NULL;
 801684e:	6002      	str	r2, [r0, #0]
  p->type_internal = (u8_t)type;
 8016850:	60c3      	str	r3, [r0, #12]
  p->payload = payload;
 8016852:	6045      	str	r5, [r0, #4]
}
 8016854:	4620      	mov	r0, r4
 8016856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      last = NULL;
 801685a:	2500      	movs	r5, #0
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801685c:	4e2e      	ldr	r6, [pc, #184]	; (8016918 <pbuf_alloc+0x124>)
  p->type_internal = (u8_t)type;
 801685e:	4f2f      	ldr	r7, [pc, #188]	; (801691c <pbuf_alloc+0x128>)
      p = NULL;
 8016860:	462c      	mov	r4, r5
 8016862:	e00a      	b.n	801687a <pbuf_alloc+0x86>
          last->next = q;
 8016864:	6028      	str	r0, [r5, #0]
        rem_len = (u16_t)(rem_len - qlen);
 8016866:	eba8 0101 	sub.w	r1, r8, r1
 801686a:	4605      	mov	r5, r0
        offset = 0;
 801686c:	f04f 0900 	mov.w	r9, #0
        rem_len = (u16_t)(rem_len - qlen);
 8016870:	fa1f f881 	uxth.w	r8, r1
      } while (rem_len > 0);
 8016874:	f1b8 0f00 	cmp.w	r8, #0
 8016878:	d0ec      	beq.n	8016854 <pbuf_alloc+0x60>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801687a:	22f3      	movs	r2, #243	; 0xf3
 801687c:	4631      	mov	r1, r6
 801687e:	200f      	movs	r0, #15
 8016880:	f7ff fc4c 	bl	801611c <memp_malloc_fn>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8016884:	f109 0303 	add.w	r3, r9, #3
  p->next = NULL;
 8016888:	2200      	movs	r2, #0
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801688a:	4481      	add	r9, r0
        if (q == NULL) {
 801688c:	b360      	cbz	r0, 80168e8 <pbuf_alloc+0xf4>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801688e:	f023 0103 	bic.w	r1, r3, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8016892:	f109 0913 	add.w	r9, r9, #19
  p->next = NULL;
 8016896:	6002      	str	r2, [r0, #0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8016898:	f5c1 7114 	rsb	r1, r1, #592	; 0x250
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801689c:	f029 0303 	bic.w	r3, r9, #3
  p->tot_len = tot_len;
 80168a0:	f8a0 8008 	strh.w	r8, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80168a4:	b289      	uxth	r1, r1
  p->type_internal = (u8_t)type;
 80168a6:	60c7      	str	r7, [r0, #12]
  p->payload = payload;
 80168a8:	6043      	str	r3, [r0, #4]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80168aa:	4541      	cmp	r1, r8
 80168ac:	bf28      	it	cs
 80168ae:	4641      	movcs	r1, r8
  p->len = len;
 80168b0:	8141      	strh	r1, [r0, #10]
        if (p == NULL) {
 80168b2:	2c00      	cmp	r4, #0
 80168b4:	d1d6      	bne.n	8016864 <pbuf_alloc+0x70>
 80168b6:	4604      	mov	r4, r0
 80168b8:	e7d5      	b.n	8016866 <pbuf_alloc+0x72>
  switch (type) {
 80168ba:	2a01      	cmp	r2, #1
 80168bc:	d00a      	beq.n	80168d4 <pbuf_alloc+0xe0>
      return NULL;
 80168be:	2400      	movs	r4, #0
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80168c0:	4b15      	ldr	r3, [pc, #84]	; (8016918 <pbuf_alloc+0x124>)
 80168c2:	f240 1227 	movw	r2, #295	; 0x127
 80168c6:	4916      	ldr	r1, [pc, #88]	; (8016920 <pbuf_alloc+0x12c>)
 80168c8:	4816      	ldr	r0, [pc, #88]	; (8016924 <pbuf_alloc+0x130>)
 80168ca:	f00a f87d 	bl	80209c8 <iprintf>
}
 80168ce:	4620      	mov	r0, r4
 80168d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      p = pbuf_alloc_reference(NULL, length, type);
 80168d4:	4641      	mov	r1, r8
 80168d6:	2000      	movs	r0, #0
}
 80168d8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 80168dc:	f7ff be98 	b.w	8016610 <pbuf_alloc_reference>
          return NULL;
 80168e0:	2400      	movs	r4, #0
}
 80168e2:	4620      	mov	r0, r4
 80168e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  queued = pbuf_free_ooseq_pending;
 80168e8:	4d0f      	ldr	r5, [pc, #60]	; (8016928 <pbuf_alloc+0x134>)
  pbuf_free_ooseq_pending = 1;
 80168ea:	2201      	movs	r2, #1
  queued = pbuf_free_ooseq_pending;
 80168ec:	782b      	ldrb	r3, [r5, #0]
  pbuf_free_ooseq_pending = 1;
 80168ee:	702a      	strb	r2, [r5, #0]
  if (!queued) {
 80168f0:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 80168f4:	b133      	cbz	r3, 8016904 <pbuf_alloc+0x110>
          if (p) {
 80168f6:	2c00      	cmp	r4, #0
 80168f8:	d0f2      	beq.n	80168e0 <pbuf_alloc+0xec>
            pbuf_free(p);
 80168fa:	4620      	mov	r0, r4
          return NULL;
 80168fc:	2400      	movs	r4, #0
            pbuf_free(p);
 80168fe:	f7ff ff0b 	bl	8016718 <pbuf_free>
 8016902:	e7a7      	b.n	8016854 <pbuf_alloc+0x60>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8016904:	4631      	mov	r1, r6
 8016906:	4809      	ldr	r0, [pc, #36]	; (801692c <pbuf_alloc+0x138>)
 8016908:	f7fc feb0 	bl	801366c <tcpip_try_callback>
 801690c:	2800      	cmp	r0, #0
 801690e:	d0f2      	beq.n	80168f6 <pbuf_alloc+0x102>
 8016910:	702e      	strb	r6, [r5, #0]
 8016912:	e7f0      	b.n	80168f6 <pbuf_alloc+0x102>
 8016914:	00010080 	.word	0x00010080
 8016918:	0803d648 	.word	0x0803d648
 801691c:	00010082 	.word	0x00010082
 8016920:	0803d678 	.word	0x0803d678
 8016924:	0802697c 	.word	0x0802697c
 8016928:	20036160 	.word	0x20036160
 801692c:	08016581 	.word	0x08016581

08016930 <pbuf_realloc>:
{
 8016930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016934:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8016936:	4604      	mov	r4, r0
 8016938:	2800      	cmp	r0, #0
 801693a:	d043      	beq.n	80169c4 <pbuf_realloc+0x94>
  if (new_len >= p->tot_len) {
 801693c:	8926      	ldrh	r6, [r4, #8]
 801693e:	42ae      	cmp	r6, r5
 8016940:	d928      	bls.n	8016994 <pbuf_realloc+0x64>
  shrink = (u16_t)(p->tot_len - new_len);
 8016942:	1b76      	subs	r6, r6, r5
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8016944:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80169d8 <pbuf_realloc+0xa8>
 8016948:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80169e4 <pbuf_realloc+0xb4>
  shrink = (u16_t)(p->tot_len - new_len);
 801694c:	b2b6      	uxth	r6, r6
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801694e:	4f21      	ldr	r7, [pc, #132]	; (80169d4 <pbuf_realloc+0xa4>)
  while (rem_len > q->len) {
 8016950:	8961      	ldrh	r1, [r4, #10]
 8016952:	42a9      	cmp	r1, r5
 8016954:	d211      	bcs.n	801697a <pbuf_realloc+0x4a>
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8016956:	8923      	ldrh	r3, [r4, #8]
    rem_len = (u16_t)(rem_len - q->len);
 8016958:	1a69      	subs	r1, r5, r1
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801695a:	1b9b      	subs	r3, r3, r6
    rem_len = (u16_t)(rem_len - q->len);
 801695c:	b28d      	uxth	r5, r1
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801695e:	8123      	strh	r3, [r4, #8]
    q = q->next;
 8016960:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8016962:	2c00      	cmp	r4, #0
 8016964:	d1f4      	bne.n	8016950 <pbuf_realloc+0x20>
 8016966:	4641      	mov	r1, r8
 8016968:	464b      	mov	r3, r9
 801696a:	f240 12af 	movw	r2, #431	; 0x1af
 801696e:	4638      	mov	r0, r7
 8016970:	f00a f82a 	bl	80209c8 <iprintf>
  while (rem_len > q->len) {
 8016974:	8961      	ldrh	r1, [r4, #10]
 8016976:	42a9      	cmp	r1, r5
 8016978:	d3ed      	bcc.n	8016956 <pbuf_realloc+0x26>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801697a:	7b23      	ldrb	r3, [r4, #12]
 801697c:	071a      	lsls	r2, r3, #28
 801697e:	d101      	bne.n	8016984 <pbuf_realloc+0x54>
 8016980:	42a9      	cmp	r1, r5
 8016982:	d109      	bne.n	8016998 <pbuf_realloc+0x68>
  if (q->next != NULL) {
 8016984:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 8016986:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8016988:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 801698a:	b108      	cbz	r0, 8016990 <pbuf_realloc+0x60>
    pbuf_free(q->next);
 801698c:	f7ff fec4 	bl	8016718 <pbuf_free>
  q->next = NULL;
 8016990:	2300      	movs	r3, #0
 8016992:	6023      	str	r3, [r4, #0]
}
 8016994:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8016998:	7b63      	ldrb	r3, [r4, #13]
 801699a:	079b      	lsls	r3, r3, #30
 801699c:	d4f2      	bmi.n	8016984 <pbuf_realloc+0x54>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801699e:	6863      	ldr	r3, [r4, #4]
 80169a0:	4620      	mov	r0, r4
 80169a2:	1b1c      	subs	r4, r3, r4
 80169a4:	1929      	adds	r1, r5, r4
 80169a6:	b289      	uxth	r1, r1
 80169a8:	f7ff f8dc 	bl	8015b64 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80169ac:	4604      	mov	r4, r0
 80169ae:	2800      	cmp	r0, #0
 80169b0:	d1e8      	bne.n	8016984 <pbuf_realloc+0x54>
 80169b2:	4b09      	ldr	r3, [pc, #36]	; (80169d8 <pbuf_realloc+0xa8>)
 80169b4:	f240 12bd 	movw	r2, #445	; 0x1bd
 80169b8:	4908      	ldr	r1, [pc, #32]	; (80169dc <pbuf_realloc+0xac>)
 80169ba:	4806      	ldr	r0, [pc, #24]	; (80169d4 <pbuf_realloc+0xa4>)
 80169bc:	f00a f804 	bl	80209c8 <iprintf>
  q->len = rem_len;
 80169c0:	8164      	strh	r4, [r4, #10]
 80169c2:	deff      	udf	#255	; 0xff
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80169c4:	4b04      	ldr	r3, [pc, #16]	; (80169d8 <pbuf_realloc+0xa8>)
 80169c6:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80169ca:	4905      	ldr	r1, [pc, #20]	; (80169e0 <pbuf_realloc+0xb0>)
 80169cc:	4801      	ldr	r0, [pc, #4]	; (80169d4 <pbuf_realloc+0xa4>)
 80169ce:	f009 fffb 	bl	80209c8 <iprintf>
 80169d2:	e7b3      	b.n	801693c <pbuf_realloc+0xc>
 80169d4:	0802697c 	.word	0x0802697c
 80169d8:	0803d648 	.word	0x0803d648
 80169dc:	0803d898 	.word	0x0803d898
 80169e0:	0803d868 	.word	0x0803d868
 80169e4:	0803d880 	.word	0x0803d880

080169e8 <pbuf_clen>:
pbuf_clen(const struct pbuf *p)
{
  u16_t len;

  len = 0;
  while (p != NULL) {
 80169e8:	b138      	cbz	r0, 80169fa <pbuf_clen+0x12>
  len = 0;
 80169ea:	2300      	movs	r3, #0
    ++len;
 80169ec:	3301      	adds	r3, #1
    p = p->next;
 80169ee:	6800      	ldr	r0, [r0, #0]
    ++len;
 80169f0:	b29b      	uxth	r3, r3
  while (p != NULL) {
 80169f2:	2800      	cmp	r0, #0
 80169f4:	d1fa      	bne.n	80169ec <pbuf_clen+0x4>
  }
  return len;
}
 80169f6:	4618      	mov	r0, r3
 80169f8:	4770      	bx	lr
  len = 0;
 80169fa:	4603      	mov	r3, r0
}
 80169fc:	4618      	mov	r0, r3
 80169fe:	4770      	bx	lr

08016a00 <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 8016a00:	b120      	cbz	r0, 8016a0c <pbuf_ref+0xc>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8016a02:	7b83      	ldrb	r3, [r0, #14]
 8016a04:	3301      	adds	r3, #1
 8016a06:	b2db      	uxtb	r3, r3
 8016a08:	7383      	strb	r3, [r0, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8016a0a:	b103      	cbz	r3, 8016a0e <pbuf_ref+0xe>
  }
}
 8016a0c:	4770      	bx	lr
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8016a0e:	4b03      	ldr	r3, [pc, #12]	; (8016a1c <pbuf_ref+0x1c>)
 8016a10:	f240 3242 	movw	r2, #834	; 0x342
 8016a14:	4902      	ldr	r1, [pc, #8]	; (8016a20 <pbuf_ref+0x20>)
 8016a16:	4803      	ldr	r0, [pc, #12]	; (8016a24 <pbuf_ref+0x24>)
 8016a18:	f009 bfd6 	b.w	80209c8 <iprintf>
 8016a1c:	0803d648 	.word	0x0803d648
 8016a20:	0803d8b4 	.word	0x0803d8b4
 8016a24:	0802697c 	.word	0x0802697c

08016a28 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8016a28:	b570      	push	{r4, r5, r6, lr}
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8016a2a:	b338      	cbz	r0, 8016a7c <pbuf_cat+0x54>
 8016a2c:	460d      	mov	r5, r1
 8016a2e:	b329      	cbz	r1, 8016a7c <pbuf_cat+0x54>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8016a30:	6804      	ldr	r4, [r0, #0]
 8016a32:	b90c      	cbnz	r4, 8016a38 <pbuf_cat+0x10>
 8016a34:	e02b      	b.n	8016a8e <pbuf_cat+0x66>
 8016a36:	4614      	mov	r4, r2
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8016a38:	8903      	ldrh	r3, [r0, #8]
 8016a3a:	8929      	ldrh	r1, [r5, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8016a3c:	6822      	ldr	r2, [r4, #0]
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8016a3e:	440b      	add	r3, r1
 8016a40:	8103      	strh	r3, [r0, #8]
 8016a42:	4620      	mov	r0, r4
  for (p = h; p->next != NULL; p = p->next) {
 8016a44:	2a00      	cmp	r2, #0
 8016a46:	d1f6      	bne.n	8016a36 <pbuf_cat+0xe>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8016a48:	8963      	ldrh	r3, [r4, #10]
 8016a4a:	8922      	ldrh	r2, [r4, #8]
 8016a4c:	429a      	cmp	r2, r3
 8016a4e:	d010      	beq.n	8016a72 <pbuf_cat+0x4a>
 8016a50:	4b12      	ldr	r3, [pc, #72]	; (8016a9c <pbuf_cat+0x74>)
 8016a52:	f240 3262 	movw	r2, #866	; 0x362
 8016a56:	4912      	ldr	r1, [pc, #72]	; (8016aa0 <pbuf_cat+0x78>)
 8016a58:	4812      	ldr	r0, [pc, #72]	; (8016aa4 <pbuf_cat+0x7c>)
 8016a5a:	f009 ffb5 	bl	80209c8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8016a5e:	6823      	ldr	r3, [r4, #0]
 8016a60:	b133      	cbz	r3, 8016a70 <pbuf_cat+0x48>
 8016a62:	4b0e      	ldr	r3, [pc, #56]	; (8016a9c <pbuf_cat+0x74>)
 8016a64:	f240 3263 	movw	r2, #867	; 0x363
 8016a68:	490f      	ldr	r1, [pc, #60]	; (8016aa8 <pbuf_cat+0x80>)
 8016a6a:	480e      	ldr	r0, [pc, #56]	; (8016aa4 <pbuf_cat+0x7c>)
 8016a6c:	f009 ffac 	bl	80209c8 <iprintf>
 8016a70:	8923      	ldrh	r3, [r4, #8]
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8016a72:	892a      	ldrh	r2, [r5, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8016a74:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8016a76:	4413      	add	r3, r2
 8016a78:	8123      	strh	r3, [r4, #8]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8016a7a:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8016a7c:	4b07      	ldr	r3, [pc, #28]	; (8016a9c <pbuf_cat+0x74>)
 8016a7e:	f240 325a 	movw	r2, #858	; 0x35a
 8016a82:	490a      	ldr	r1, [pc, #40]	; (8016aac <pbuf_cat+0x84>)
 8016a84:	4807      	ldr	r0, [pc, #28]	; (8016aa4 <pbuf_cat+0x7c>)
}
 8016a86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8016a8a:	f009 bf9d 	b.w	80209c8 <iprintf>
  for (p = h; p->next != NULL; p = p->next) {
 8016a8e:	4604      	mov	r4, r0
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8016a90:	8963      	ldrh	r3, [r4, #10]
 8016a92:	8922      	ldrh	r2, [r4, #8]
 8016a94:	429a      	cmp	r2, r3
 8016a96:	d1db      	bne.n	8016a50 <pbuf_cat+0x28>
 8016a98:	e7eb      	b.n	8016a72 <pbuf_cat+0x4a>
 8016a9a:	bf00      	nop
 8016a9c:	0803d648 	.word	0x0803d648
 8016aa0:	0803d6e0 	.word	0x0803d6e0
 8016aa4:	0802697c 	.word	0x0802697c
 8016aa8:	0803d710 	.word	0x0803d710
 8016aac:	0803d6a8 	.word	0x0803d6a8

08016ab0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8016ab0:	b510      	push	{r4, lr}
 8016ab2:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 8016ab4:	f7ff ffb8 	bl	8016a28 <pbuf_cat>
  if (p != NULL) {
 8016ab8:	b124      	cbz	r4, 8016ac4 <pbuf_chain+0x14>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8016aba:	7ba3      	ldrb	r3, [r4, #14]
 8016abc:	3301      	adds	r3, #1
 8016abe:	b2db      	uxtb	r3, r3
 8016ac0:	73a3      	strb	r3, [r4, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8016ac2:	b103      	cbz	r3, 8016ac6 <pbuf_chain+0x16>
  /* t is now referenced by h */
  pbuf_ref(t);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8016ac4:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8016ac6:	4b04      	ldr	r3, [pc, #16]	; (8016ad8 <pbuf_chain+0x28>)
 8016ac8:	f240 3242 	movw	r2, #834	; 0x342
 8016acc:	4903      	ldr	r1, [pc, #12]	; (8016adc <pbuf_chain+0x2c>)
 8016ace:	4804      	ldr	r0, [pc, #16]	; (8016ae0 <pbuf_chain+0x30>)
}
 8016ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8016ad4:	f009 bf78 	b.w	80209c8 <iprintf>
 8016ad8:	0803d648 	.word	0x0803d648
 8016adc:	0803d8b4 	.word	0x0803d8b4
 8016ae0:	0802697c 	.word	0x0802697c

08016ae4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8016ae4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8016ae8:	2800      	cmp	r0, #0
 8016aea:	f000 808c 	beq.w	8016c06 <pbuf_copy+0x122>
 8016aee:	fab1 f681 	clz	r6, r1
 8016af2:	460f      	mov	r7, r1
 8016af4:	0976      	lsrs	r6, r6, #5
 8016af6:	2e00      	cmp	r6, #0
 8016af8:	f040 8085 	bne.w	8016c06 <pbuf_copy+0x122>
 8016afc:	8902      	ldrh	r2, [r0, #8]
 8016afe:	4605      	mov	r5, r0
 8016b00:	890b      	ldrh	r3, [r1, #8]
 8016b02:	429a      	cmp	r2, r3
 8016b04:	d37f      	bcc.n	8016c06 <pbuf_copy+0x122>
 8016b06:	8943      	ldrh	r3, [r0, #10]
  size_t offset_to = 0, offset_from = 0, len;
 8016b08:	46b0      	mov	r8, r6
 8016b0a:	894c      	ldrh	r4, [r1, #10]
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8016b0c:	f8df a10c 	ldr.w	sl, [pc, #268]	; 8016c1c <pbuf_copy+0x138>
 8016b10:	f8df b120 	ldr.w	fp, [pc, #288]	; 8016c34 <pbuf_copy+0x150>
 8016b14:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8016c24 <pbuf_copy+0x140>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8016b18:	eba3 0308 	sub.w	r3, r3, r8
 8016b1c:	1ba4      	subs	r4, r4, r6
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8016b1e:	6868      	ldr	r0, [r5, #4]
 8016b20:	429c      	cmp	r4, r3
 8016b22:	6879      	ldr	r1, [r7, #4]
 8016b24:	4440      	add	r0, r8
 8016b26:	bf28      	it	cs
 8016b28:	461c      	movcs	r4, r3
 8016b2a:	4431      	add	r1, r6
 8016b2c:	4622      	mov	r2, r4
    offset_to += len;
 8016b2e:	44a0      	add	r8, r4
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8016b30:	f008 ffa5 	bl	801fa7e <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8016b34:	896b      	ldrh	r3, [r5, #10]
    offset_from += len;
 8016b36:	4426      	add	r6, r4
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8016b38:	4598      	cmp	r8, r3
 8016b3a:	d83d      	bhi.n	8016bb8 <pbuf_copy+0xd4>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8016b3c:	897b      	ldrh	r3, [r7, #10]
 8016b3e:	429e      	cmp	r6, r3
 8016b40:	d831      	bhi.n	8016ba6 <pbuf_copy+0xc2>
    if (offset_from >= p_from->len) {
 8016b42:	429e      	cmp	r6, r3
 8016b44:	d301      	bcc.n	8016b4a <pbuf_copy+0x66>
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
 8016b46:	683f      	ldr	r7, [r7, #0]
      offset_from = 0;
 8016b48:	2600      	movs	r6, #0
    }
    if (offset_to == p_to->len) {
 8016b4a:	896b      	ldrh	r3, [r5, #10]
 8016b4c:	4598      	cmp	r8, r3
 8016b4e:	d011      	beq.n	8016b74 <pbuf_copy+0x90>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8016b50:	2f00      	cmp	r7, #0
 8016b52:	d03b      	beq.n	8016bcc <pbuf_copy+0xe8>
 8016b54:	897c      	ldrh	r4, [r7, #10]
 8016b56:	893b      	ldrh	r3, [r7, #8]
 8016b58:	429c      	cmp	r4, r3
 8016b5a:	d016      	beq.n	8016b8a <pbuf_copy+0xa6>
 8016b5c:	896b      	ldrh	r3, [r5, #10]
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8016b5e:	892a      	ldrh	r2, [r5, #8]
 8016b60:	429a      	cmp	r2, r3
 8016b62:	d1d9      	bne.n	8016b18 <pbuf_copy+0x34>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8016b64:	682a      	ldr	r2, [r5, #0]
 8016b66:	2a00      	cmp	r2, #0
 8016b68:	d137      	bne.n	8016bda <pbuf_copy+0xf6>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8016b6a:	2f00      	cmp	r7, #0
 8016b6c:	d1d4      	bne.n	8016b18 <pbuf_copy+0x34>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8016b6e:	2000      	movs	r0, #0
}
 8016b70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p_to = p_to->next;
 8016b74:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8016b76:	b90d      	cbnz	r5, 8016b7c <pbuf_copy+0x98>
 8016b78:	2f00      	cmp	r7, #0
 8016b7a:	d139      	bne.n	8016bf0 <pbuf_copy+0x10c>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8016b7c:	b327      	cbz	r7, 8016bc8 <pbuf_copy+0xe4>
 8016b7e:	897c      	ldrh	r4, [r7, #10]
      offset_to = 0;
 8016b80:	f04f 0800 	mov.w	r8, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8016b84:	893b      	ldrh	r3, [r7, #8]
 8016b86:	429c      	cmp	r4, r3
 8016b88:	d1e8      	bne.n	8016b5c <pbuf_copy+0x78>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8016b8a:	683b      	ldr	r3, [r7, #0]
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	d0e5      	beq.n	8016b5c <pbuf_copy+0x78>
 8016b90:	4b22      	ldr	r3, [pc, #136]	; (8016c1c <pbuf_copy+0x138>)
 8016b92:	f240 32ea 	movw	r2, #1002	; 0x3ea
 8016b96:	4922      	ldr	r1, [pc, #136]	; (8016c20 <pbuf_copy+0x13c>)
 8016b98:	4822      	ldr	r0, [pc, #136]	; (8016c24 <pbuf_copy+0x140>)
 8016b9a:	f009 ff15 	bl	80209c8 <iprintf>
 8016b9e:	f06f 0005 	mvn.w	r0, #5
}
 8016ba2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8016ba6:	4653      	mov	r3, sl
 8016ba8:	f240 32da 	movw	r2, #986	; 0x3da
 8016bac:	491e      	ldr	r1, [pc, #120]	; (8016c28 <pbuf_copy+0x144>)
 8016bae:	4648      	mov	r0, r9
 8016bb0:	f009 ff0a 	bl	80209c8 <iprintf>
 8016bb4:	897b      	ldrh	r3, [r7, #10]
 8016bb6:	e7c4      	b.n	8016b42 <pbuf_copy+0x5e>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8016bb8:	4653      	mov	r3, sl
 8016bba:	f240 32d9 	movw	r2, #985	; 0x3d9
 8016bbe:	4659      	mov	r1, fp
 8016bc0:	4648      	mov	r0, r9
 8016bc2:	f009 ff01 	bl	80209c8 <iprintf>
 8016bc6:	e7b9      	b.n	8016b3c <pbuf_copy+0x58>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8016bc8:	2d00      	cmp	r5, #0
 8016bca:	d0d0      	beq.n	8016b6e <pbuf_copy+0x8a>
 8016bcc:	892a      	ldrh	r2, [r5, #8]
 8016bce:	896b      	ldrh	r3, [r5, #10]
 8016bd0:	429a      	cmp	r2, r3
 8016bd2:	d1cc      	bne.n	8016b6e <pbuf_copy+0x8a>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8016bd4:	6828      	ldr	r0, [r5, #0]
 8016bd6:	2800      	cmp	r0, #0
 8016bd8:	d0ca      	beq.n	8016b70 <pbuf_copy+0x8c>
 8016bda:	4b10      	ldr	r3, [pc, #64]	; (8016c1c <pbuf_copy+0x138>)
 8016bdc:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8016be0:	490f      	ldr	r1, [pc, #60]	; (8016c20 <pbuf_copy+0x13c>)
 8016be2:	4810      	ldr	r0, [pc, #64]	; (8016c24 <pbuf_copy+0x140>)
 8016be4:	f009 fef0 	bl	80209c8 <iprintf>
 8016be8:	f06f 0005 	mvn.w	r0, #5
}
 8016bec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8016bf0:	4b0a      	ldr	r3, [pc, #40]	; (8016c1c <pbuf_copy+0x138>)
 8016bf2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8016bf6:	490d      	ldr	r1, [pc, #52]	; (8016c2c <pbuf_copy+0x148>)
 8016bf8:	480a      	ldr	r0, [pc, #40]	; (8016c24 <pbuf_copy+0x140>)
 8016bfa:	f009 fee5 	bl	80209c8 <iprintf>
 8016bfe:	f06f 000f 	mvn.w	r0, #15
}
 8016c02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8016c06:	4b05      	ldr	r3, [pc, #20]	; (8016c1c <pbuf_copy+0x138>)
 8016c08:	f240 32ca 	movw	r2, #970	; 0x3ca
 8016c0c:	4908      	ldr	r1, [pc, #32]	; (8016c30 <pbuf_copy+0x14c>)
 8016c0e:	4805      	ldr	r0, [pc, #20]	; (8016c24 <pbuf_copy+0x140>)
 8016c10:	f009 feda 	bl	80209c8 <iprintf>
 8016c14:	f06f 000f 	mvn.w	r0, #15
 8016c18:	e7aa      	b.n	8016b70 <pbuf_copy+0x8c>
 8016c1a:	bf00      	nop
 8016c1c:	0803d648 	.word	0x0803d648
 8016c20:	0803d7a8 	.word	0x0803d7a8
 8016c24:	0802697c 	.word	0x0802697c
 8016c28:	0803d77c 	.word	0x0803d77c
 8016c2c:	0803d798 	.word	0x0803d798
 8016c30:	0803d734 	.word	0x0803d734
 8016c34:	0803d764 	.word	0x0803d764

08016c38 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8016c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8016c3c:	4605      	mov	r5, r0
 8016c3e:	b368      	cbz	r0, 8016c9c <pbuf_copy_partial+0x64>
 8016c40:	460f      	mov	r7, r1
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8016c42:	2900      	cmp	r1, #0
 8016c44:	d035      	beq.n	8016cb2 <pbuf_copy_partial+0x7a>
 8016c46:	4690      	mov	r8, r2

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8016c48:	2a00      	cmp	r2, #0
 8016c4a:	d03d      	beq.n	8016cc8 <pbuf_copy_partial+0x90>
  u16_t left = 0;
 8016c4c:	2600      	movs	r6, #0
 8016c4e:	e009      	b.n	8016c64 <pbuf_copy_partial+0x2c>
    if ((offset != 0) && (offset >= p->len)) {
 8016c50:	429a      	cmp	r2, r3
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8016c52:	eba3 0102 	sub.w	r1, r3, r2
    if ((offset != 0) && (offset >= p->len)) {
 8016c56:	d809      	bhi.n	8016c6c <pbuf_copy_partial+0x34>
      offset = (u16_t)(offset - p->len);
 8016c58:	b28b      	uxth	r3, r1
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8016c5a:	682d      	ldr	r5, [r5, #0]
 8016c5c:	f1b8 0f00 	cmp.w	r8, #0
 8016c60:	d019      	beq.n	8016c96 <pbuf_copy_partial+0x5e>
 8016c62:	b1c5      	cbz	r5, 8016c96 <pbuf_copy_partial+0x5e>
      buf_copy_len = (u16_t)(p->len - offset);
      if (buf_copy_len > len) {
        buf_copy_len = len;
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8016c64:	19b8      	adds	r0, r7, r6
 8016c66:	896a      	ldrh	r2, [r5, #10]
    if ((offset != 0) && (offset >= p->len)) {
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	d1f1      	bne.n	8016c50 <pbuf_copy_partial+0x18>
      buf_copy_len = (u16_t)(p->len - offset);
 8016c6c:	1ad4      	subs	r4, r2, r3
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8016c6e:	6869      	ldr	r1, [r5, #4]
      buf_copy_len = (u16_t)(p->len - offset);
 8016c70:	b2a4      	uxth	r4, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8016c72:	4419      	add	r1, r3
 8016c74:	4544      	cmp	r4, r8
 8016c76:	bf28      	it	cs
 8016c78:	4644      	movcs	r4, r8
 8016c7a:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8016c7c:	4426      	add	r6, r4
      left = (u16_t)(left + buf_copy_len);
      len = (u16_t)(len - buf_copy_len);
 8016c7e:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8016c82:	f008 fefc 	bl	801fa7e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8016c86:	b2b6      	uxth	r6, r6
      offset = 0;
 8016c88:	2300      	movs	r3, #0
      len = (u16_t)(len - buf_copy_len);
 8016c8a:	fa1f f884 	uxth.w	r8, r4
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8016c8e:	682d      	ldr	r5, [r5, #0]
 8016c90:	f1b8 0f00 	cmp.w	r8, #0
 8016c94:	d1e5      	bne.n	8016c62 <pbuf_copy_partial+0x2a>
    }
  }
  return copied_total;
}
 8016c96:	4630      	mov	r0, r6
 8016c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8016c9c:	4606      	mov	r6, r0
 8016c9e:	4b0c      	ldr	r3, [pc, #48]	; (8016cd0 <pbuf_copy_partial+0x98>)
 8016ca0:	f240 420a 	movw	r2, #1034	; 0x40a
 8016ca4:	490b      	ldr	r1, [pc, #44]	; (8016cd4 <pbuf_copy_partial+0x9c>)
 8016ca6:	480c      	ldr	r0, [pc, #48]	; (8016cd8 <pbuf_copy_partial+0xa0>)
 8016ca8:	f009 fe8e 	bl	80209c8 <iprintf>
}
 8016cac:	4630      	mov	r0, r6
 8016cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8016cb2:	463e      	mov	r6, r7
 8016cb4:	4b06      	ldr	r3, [pc, #24]	; (8016cd0 <pbuf_copy_partial+0x98>)
 8016cb6:	f240 420b 	movw	r2, #1035	; 0x40b
 8016cba:	4908      	ldr	r1, [pc, #32]	; (8016cdc <pbuf_copy_partial+0xa4>)
 8016cbc:	4806      	ldr	r0, [pc, #24]	; (8016cd8 <pbuf_copy_partial+0xa0>)
 8016cbe:	f009 fe83 	bl	80209c8 <iprintf>
}
 8016cc2:	4630      	mov	r0, r6
 8016cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  u16_t left = 0;
 8016cc8:	4616      	mov	r6, r2
}
 8016cca:	4630      	mov	r0, r6
 8016ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016cd0:	0803d648 	.word	0x0803d648
 8016cd4:	0803d7d4 	.word	0x0803d7d4
 8016cd8:	0802697c 	.word	0x0802697c
 8016cdc:	0803d7f4 	.word	0x0803d7f4

08016ce0 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8016ce0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
  size_t copied_total = 0;

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8016ce4:	2800      	cmp	r0, #0
 8016ce6:	d04a      	beq.n	8016d7e <pbuf_take+0x9e>
 8016ce8:	460f      	mov	r7, r1
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8016cea:	2900      	cmp	r1, #0
 8016cec:	d03d      	beq.n	8016d6a <pbuf_take+0x8a>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8016cee:	8903      	ldrh	r3, [r0, #8]
 8016cf0:	4690      	mov	r8, r2
 8016cf2:	4604      	mov	r4, r0
 8016cf4:	4293      	cmp	r3, r2
 8016cf6:	d32e      	bcc.n	8016d56 <pbuf_take+0x76>
  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
    return ERR_ARG;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8016cf8:	b352      	cbz	r2, 8016d50 <pbuf_take+0x70>
 8016cfa:	4615      	mov	r5, r2
  size_t copied_total = 0;
 8016cfc:	2600      	movs	r6, #0
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8016cfe:	f8df b098 	ldr.w	fp, [pc, #152]	; 8016d98 <pbuf_take+0xb8>
 8016d02:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8016dac <pbuf_take+0xcc>
    buf_copy_len = total_copy_len;
    if (buf_copy_len > p->len) {
 8016d06:	8963      	ldrh	r3, [r4, #10]
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8016d08:	19b9      	adds	r1, r7, r6
 8016d0a:	6860      	ldr	r0, [r4, #4]
 8016d0c:	42ab      	cmp	r3, r5
 8016d0e:	bf28      	it	cs
 8016d10:	462b      	movcs	r3, r5
 8016d12:	4699      	mov	r9, r3
 8016d14:	461a      	mov	r2, r3
    total_copy_len -= buf_copy_len;
    copied_total += buf_copy_len;
 8016d16:	441e      	add	r6, r3
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8016d18:	f008 feb1 	bl	801fa7e <memcpy>
  for (p = buf; total_copy_len != 0; p = p->next) {
 8016d1c:	ebb5 0509 	subs.w	r5, r5, r9
 8016d20:	6824      	ldr	r4, [r4, #0]
 8016d22:	d009      	beq.n	8016d38 <pbuf_take+0x58>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8016d24:	2c00      	cmp	r4, #0
 8016d26:	d1ee      	bne.n	8016d06 <pbuf_take+0x26>
 8016d28:	465b      	mov	r3, fp
 8016d2a:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8016d2e:	4651      	mov	r1, sl
 8016d30:	4818      	ldr	r0, [pc, #96]	; (8016d94 <pbuf_take+0xb4>)
 8016d32:	f009 fe49 	bl	80209c8 <iprintf>
 8016d36:	e7e6      	b.n	8016d06 <pbuf_take+0x26>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8016d38:	45b0      	cmp	r8, r6
 8016d3a:	d009      	beq.n	8016d50 <pbuf_take+0x70>
 8016d3c:	4b16      	ldr	r3, [pc, #88]	; (8016d98 <pbuf_take+0xb8>)
 8016d3e:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8016d42:	4916      	ldr	r1, [pc, #88]	; (8016d9c <pbuf_take+0xbc>)
 8016d44:	4813      	ldr	r0, [pc, #76]	; (8016d94 <pbuf_take+0xb4>)
 8016d46:	f009 fe3f 	bl	80209c8 <iprintf>
  return ERR_OK;
 8016d4a:	4628      	mov	r0, r5
}
 8016d4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_OK;
 8016d50:	2000      	movs	r0, #0
}
 8016d52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8016d56:	4b10      	ldr	r3, [pc, #64]	; (8016d98 <pbuf_take+0xb8>)
 8016d58:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8016d5c:	4910      	ldr	r1, [pc, #64]	; (8016da0 <pbuf_take+0xc0>)
 8016d5e:	480d      	ldr	r0, [pc, #52]	; (8016d94 <pbuf_take+0xb4>)
 8016d60:	f009 fe32 	bl	80209c8 <iprintf>
 8016d64:	f04f 30ff 	mov.w	r0, #4294967295
 8016d68:	e7f0      	b.n	8016d4c <pbuf_take+0x6c>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8016d6a:	4b0b      	ldr	r3, [pc, #44]	; (8016d98 <pbuf_take+0xb8>)
 8016d6c:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8016d70:	490c      	ldr	r1, [pc, #48]	; (8016da4 <pbuf_take+0xc4>)
 8016d72:	4808      	ldr	r0, [pc, #32]	; (8016d94 <pbuf_take+0xb4>)
 8016d74:	f009 fe28 	bl	80209c8 <iprintf>
 8016d78:	f06f 000f 	mvn.w	r0, #15
 8016d7c:	e7e6      	b.n	8016d4c <pbuf_take+0x6c>
  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8016d7e:	4b06      	ldr	r3, [pc, #24]	; (8016d98 <pbuf_take+0xb8>)
 8016d80:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8016d84:	4908      	ldr	r1, [pc, #32]	; (8016da8 <pbuf_take+0xc8>)
 8016d86:	4803      	ldr	r0, [pc, #12]	; (8016d94 <pbuf_take+0xb4>)
 8016d88:	f009 fe1e 	bl	80209c8 <iprintf>
 8016d8c:	f06f 000f 	mvn.w	r0, #15
 8016d90:	e7dc      	b.n	8016d4c <pbuf_take+0x6c>
 8016d92:	bf00      	nop
 8016d94:	0802697c 	.word	0x0802697c
 8016d98:	0803d648 	.word	0x0803d648
 8016d9c:	0803d954 	.word	0x0803d954
 8016da0:	0803d91c 	.word	0x0803d91c
 8016da4:	0803d900 	.word	0x0803d900
 8016da8:	0803d8e8 	.word	0x0803d8e8
 8016dac:	0803d93c 	.word	0x0803d93c

08016db0 <pbuf_take_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 8016db0:	b380      	cbz	r0, 8016e14 <pbuf_take_at+0x64>
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 8016db2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016db4:	4604      	mov	r4, r0
  while ((q != NULL) && (q->len <= offset_left)) {
 8016db6:	8940      	ldrh	r0, [r0, #10]
 8016db8:	460e      	mov	r6, r1
 8016dba:	4615      	mov	r5, r2
 8016dbc:	4283      	cmp	r3, r0
 8016dbe:	d203      	bcs.n	8016dc8 <pbuf_take_at+0x18>
 8016dc0:	e00a      	b.n	8016dd8 <pbuf_take_at+0x28>
 8016dc2:	8960      	ldrh	r0, [r4, #10]
 8016dc4:	4298      	cmp	r0, r3
 8016dc6:	d807      	bhi.n	8016dd8 <pbuf_take_at+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 8016dc8:	1a1b      	subs	r3, r3, r0
    q = q->next;
 8016dca:	6824      	ldr	r4, [r4, #0]
    offset_left = (u16_t)(offset_left - q->len);
 8016dcc:	b29b      	uxth	r3, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 8016dce:	2c00      	cmp	r4, #0
 8016dd0:	d1f7      	bne.n	8016dc2 <pbuf_take_at+0x12>
    if (remaining_len > 0) {
      return pbuf_take(q->next, src_ptr, remaining_len);
    }
    return ERR_OK;
  }
  return ERR_MEM;
 8016dd2:	f04f 30ff 	mov.w	r0, #4294967295
}
 8016dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 8016dd8:	8921      	ldrh	r1, [r4, #8]
 8016dda:	195a      	adds	r2, r3, r5
 8016ddc:	4291      	cmp	r1, r2
 8016dde:	dbf8      	blt.n	8016dd2 <pbuf_take_at+0x22>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 8016de0:	8962      	ldrh	r2, [r4, #10]
 8016de2:	6860      	ldr	r0, [r4, #4]
 8016de4:	1ad2      	subs	r2, r2, r3
 8016de6:	4418      	add	r0, r3
 8016de8:	42aa      	cmp	r2, r5
 8016dea:	da0d      	bge.n	8016e08 <pbuf_take_at+0x58>
 8016dec:	b297      	uxth	r7, r2
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 8016dee:	4631      	mov	r1, r6
 8016df0:	463a      	mov	r2, r7
 8016df2:	f008 fe44 	bl	801fa7e <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 8016df6:	1be8      	subs	r0, r5, r7
 8016df8:	b282      	uxth	r2, r0
    if (remaining_len > 0) {
 8016dfa:	b14a      	cbz	r2, 8016e10 <pbuf_take_at+0x60>
      return pbuf_take(q->next, src_ptr, remaining_len);
 8016dfc:	19f1      	adds	r1, r6, r7
 8016dfe:	6820      	ldr	r0, [r4, #0]
}
 8016e00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      return pbuf_take(q->next, src_ptr, remaining_len);
 8016e04:	f7ff bf6c 	b.w	8016ce0 <pbuf_take>
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 8016e08:	462a      	mov	r2, r5
 8016e0a:	4631      	mov	r1, r6
 8016e0c:	f008 fe37 	bl	801fa7e <memcpy>
    return ERR_OK;
 8016e10:	2000      	movs	r0, #0
}
 8016e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return ERR_MEM;
 8016e14:	f04f 30ff 	mov.w	r0, #4294967295
}
 8016e18:	4770      	bx	lr
 8016e1a:	bf00      	nop

08016e1c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8016e1c:	b538      	push	{r3, r4, r5, lr}
 8016e1e:	4614      	mov	r4, r2
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8016e20:	460a      	mov	r2, r1
 8016e22:	8921      	ldrh	r1, [r4, #8]
 8016e24:	f7ff fce6 	bl	80167f4 <pbuf_alloc>
  if (q == NULL) {
 8016e28:	4605      	mov	r5, r0
 8016e2a:	b150      	cbz	r0, 8016e42 <pbuf_clone+0x26>
    return NULL;
  }
  err = pbuf_copy(q, p);
 8016e2c:	4621      	mov	r1, r4
 8016e2e:	f7ff fe59 	bl	8016ae4 <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8016e32:	b130      	cbz	r0, 8016e42 <pbuf_clone+0x26>
 8016e34:	4b04      	ldr	r3, [pc, #16]	; (8016e48 <pbuf_clone+0x2c>)
 8016e36:	f240 5224 	movw	r2, #1316	; 0x524
 8016e3a:	4904      	ldr	r1, [pc, #16]	; (8016e4c <pbuf_clone+0x30>)
 8016e3c:	4804      	ldr	r0, [pc, #16]	; (8016e50 <pbuf_clone+0x34>)
 8016e3e:	f009 fdc3 	bl	80209c8 <iprintf>
  return q;
}
 8016e42:	4628      	mov	r0, r5
 8016e44:	bd38      	pop	{r3, r4, r5, pc}
 8016e46:	bf00      	nop
 8016e48:	0803d648 	.word	0x0803d648
 8016e4c:	0803d720 	.word	0x0803d720
 8016e50:	0802697c 	.word	0x0802697c

08016e54 <pbuf_try_get_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 8016e54:	b158      	cbz	r0, 8016e6e <pbuf_try_get_at+0x1a>
 8016e56:	8943      	ldrh	r3, [r0, #10]
 8016e58:	4299      	cmp	r1, r3
 8016e5a:	d203      	bcs.n	8016e64 <pbuf_try_get_at+0x10>
 8016e5c:	e00a      	b.n	8016e74 <pbuf_try_get_at+0x20>
 8016e5e:	8943      	ldrh	r3, [r0, #10]
 8016e60:	428b      	cmp	r3, r1
 8016e62:	d807      	bhi.n	8016e74 <pbuf_try_get_at+0x20>
    offset_left = (u16_t)(offset_left - q->len);
 8016e64:	1ac9      	subs	r1, r1, r3
    q = q->next;
 8016e66:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
 8016e68:	b289      	uxth	r1, r1
  while ((q != NULL) && (q->len <= offset_left)) {
 8016e6a:	2800      	cmp	r0, #0
 8016e6c:	d1f7      	bne.n	8016e5e <pbuf_try_get_at+0xa>

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
    return ((u8_t *)q->payload)[q_idx];
  }
  return -1;
 8016e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8016e72:	4770      	bx	lr
    return ((u8_t *)q->payload)[q_idx];
 8016e74:	6843      	ldr	r3, [r0, #4]
 8016e76:	5c58      	ldrb	r0, [r3, r1]
}
 8016e78:	4770      	bx	lr
 8016e7a:	bf00      	nop

08016e7c <pbuf_put_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 8016e7c:	b158      	cbz	r0, 8016e96 <pbuf_put_at+0x1a>
 8016e7e:	8943      	ldrh	r3, [r0, #10]
 8016e80:	4299      	cmp	r1, r3
 8016e82:	d203      	bcs.n	8016e8c <pbuf_put_at+0x10>
 8016e84:	e008      	b.n	8016e98 <pbuf_put_at+0x1c>
 8016e86:	8943      	ldrh	r3, [r0, #10]
 8016e88:	428b      	cmp	r3, r1
 8016e8a:	d805      	bhi.n	8016e98 <pbuf_put_at+0x1c>
    offset_left = (u16_t)(offset_left - q->len);
 8016e8c:	1ac9      	subs	r1, r1, r3
    q = q->next;
 8016e8e:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
 8016e90:	b289      	uxth	r1, r1
  while ((q != NULL) && (q->len <= offset_left)) {
 8016e92:	2800      	cmp	r0, #0
 8016e94:	d1f7      	bne.n	8016e86 <pbuf_put_at+0xa>

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
    ((u8_t *)q->payload)[q_idx] = data;
  }
}
 8016e96:	4770      	bx	lr
    ((u8_t *)q->payload)[q_idx] = data;
 8016e98:	6843      	ldr	r3, [r0, #4]
 8016e9a:	545a      	strb	r2, [r3, r1]
}
 8016e9c:	4770      	bx	lr
 8016e9e:	bf00      	nop

08016ea0 <raw_input>:
 *           caller).
 *
 */
raw_input_state_t
raw_input(struct pbuf *p, struct netif *inp)
{
 8016ea0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct raw_pcb *pcb, *prev;
  s16_t proto;
  raw_input_state_t ret = RAW_INPUT_NONE;
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8016ea4:	4b34      	ldr	r3, [pc, #208]	; (8016f78 <raw_input+0xd8>)
{
 8016ea6:	4680      	mov	r8, r0
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
  }
#endif /* LWIP_IPV4 */

  prev = NULL;
  pcb = raw_pcbs;
 8016ea8:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 8016f8c <raw_input+0xec>
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8016eac:	6819      	ldr	r1, [r3, #0]
 8016eae:	6958      	ldr	r0, [r3, #20]
 8016eb0:	f007 fb2e 	bl	801e510 <ip4_addr_isbroadcast_u32>
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
 8016eb4:	f8d8 3004 	ldr.w	r3, [r8, #4]
  pcb = raw_pcbs;
 8016eb8:	f8db 4000 	ldr.w	r4, [fp]
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
 8016ebc:	7a5d      	ldrb	r5, [r3, #9]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while (pcb != NULL) {
 8016ebe:	2c00      	cmp	r4, #0
 8016ec0:	d04b      	beq.n	8016f5a <raw_input+0xba>
 8016ec2:	4681      	mov	r9, r0
  raw_input_state_t ret = RAW_INPUT_NONE;
 8016ec4:	2000      	movs	r0, #0
 8016ec6:	46ca      	mov	sl, r9
  prev = NULL;
 8016ec8:	4606      	mov	r6, r0
 8016eca:	e004      	b.n	8016ed6 <raw_input+0x36>
      }
      /* no receive callback function was set for this raw PCB */
    }
    /* drop the packet */
    prev = pcb;
    pcb = pcb->next;
 8016ecc:	68e3      	ldr	r3, [r4, #12]
 8016ece:	4626      	mov	r6, r4
  while (pcb != NULL) {
 8016ed0:	2b00      	cmp	r3, #0
 8016ed2:	d037      	beq.n	8016f44 <raw_input+0xa4>
 8016ed4:	461c      	mov	r4, r3
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 8016ed6:	7c23      	ldrb	r3, [r4, #16]
 8016ed8:	42ab      	cmp	r3, r5
 8016eda:	d1f7      	bne.n	8016ecc <raw_input+0x2c>
 8016edc:	7a22      	ldrb	r2, [r4, #8]
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016ede:	b13a      	cbz	r2, 8016ef0 <raw_input+0x50>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016ee0:	4b25      	ldr	r3, [pc, #148]	; (8016f78 <raw_input+0xd8>)
 8016ee2:	685b      	ldr	r3, [r3, #4]
 8016ee4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016ee8:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016eea:	b2db      	uxtb	r3, r3
 8016eec:	429a      	cmp	r2, r3
 8016eee:	d1ed      	bne.n	8016ecc <raw_input+0x2c>
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 8016ef0:	6823      	ldr	r3, [r4, #0]
    if (broadcast != 0) {
 8016ef2:	f1ba 0f00 	cmp.w	sl, #0
 8016ef6:	d027      	beq.n	8016f48 <raw_input+0xa8>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	d1e7      	bne.n	8016ecc <raw_input+0x2c>
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 8016efc:	7c63      	ldrb	r3, [r4, #17]
 8016efe:	07db      	lsls	r3, r3, #31
 8016f00:	d504      	bpl.n	8016f0c <raw_input+0x6c>
        (((pcb->flags & RAW_FLAGS_CONNECTED) == 0) ||
 8016f02:	4b1d      	ldr	r3, [pc, #116]	; (8016f78 <raw_input+0xd8>)
 8016f04:	6862      	ldr	r2, [r4, #4]
 8016f06:	691b      	ldr	r3, [r3, #16]
 8016f08:	429a      	cmp	r2, r3
 8016f0a:	d1df      	bne.n	8016ecc <raw_input+0x2c>
      if (pcb->recv != NULL) {
 8016f0c:	f8d4 9014 	ldr.w	r9, [r4, #20]
 8016f10:	f1b9 0f00 	cmp.w	r9, #0
 8016f14:	d0da      	beq.n	8016ecc <raw_input+0x2c>
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 8016f16:	4b19      	ldr	r3, [pc, #100]	; (8016f7c <raw_input+0xdc>)
 8016f18:	4642      	mov	r2, r8
 8016f1a:	4621      	mov	r1, r4
 8016f1c:	69a0      	ldr	r0, [r4, #24]
        void *old_payload = p->payload;
 8016f1e:	f8d8 7004 	ldr.w	r7, [r8, #4]
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 8016f22:	47c8      	blx	r9
        if (eaten != 0) {
 8016f24:	b9d8      	cbnz	r0, 8016f5e <raw_input+0xbe>
          LWIP_ASSERT("raw pcb recv callback altered pbuf payload pointer without eating packet",
 8016f26:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016f2a:	42bb      	cmp	r3, r7
 8016f2c:	d013      	beq.n	8016f56 <raw_input+0xb6>
 8016f2e:	4b14      	ldr	r3, [pc, #80]	; (8016f80 <raw_input+0xe0>)
 8016f30:	22c1      	movs	r2, #193	; 0xc1
 8016f32:	4914      	ldr	r1, [pc, #80]	; (8016f84 <raw_input+0xe4>)
 8016f34:	4626      	mov	r6, r4
 8016f36:	4814      	ldr	r0, [pc, #80]	; (8016f88 <raw_input+0xe8>)
 8016f38:	f009 fd46 	bl	80209c8 <iprintf>
    pcb = pcb->next;
 8016f3c:	68e3      	ldr	r3, [r4, #12]
        ret = RAW_INPUT_DELIVERED;
 8016f3e:	2002      	movs	r0, #2
  while (pcb != NULL) {
 8016f40:	2b00      	cmp	r3, #0
 8016f42:	d1c7      	bne.n	8016ed4 <raw_input+0x34>
  }
  return ret;
}
 8016f44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ip_addr_isany(&pcb->local_ip) ||
 8016f48:	2b00      	cmp	r3, #0
 8016f4a:	d0d7      	beq.n	8016efc <raw_input+0x5c>
 8016f4c:	4a0a      	ldr	r2, [pc, #40]	; (8016f78 <raw_input+0xd8>)
 8016f4e:	6952      	ldr	r2, [r2, #20]
 8016f50:	4293      	cmp	r3, r2
 8016f52:	d1bb      	bne.n	8016ecc <raw_input+0x2c>
 8016f54:	e7d2      	b.n	8016efc <raw_input+0x5c>
        ret = RAW_INPUT_DELIVERED;
 8016f56:	2002      	movs	r0, #2
 8016f58:	e7b8      	b.n	8016ecc <raw_input+0x2c>
  raw_input_state_t ret = RAW_INPUT_NONE;
 8016f5a:	4620      	mov	r0, r4
 8016f5c:	e7f2      	b.n	8016f44 <raw_input+0xa4>
          if (prev != NULL) {
 8016f5e:	b146      	cbz	r6, 8016f72 <raw_input+0xd2>
            prev->next = pcb->next;
 8016f60:	68e2      	ldr	r2, [r4, #12]
          return RAW_INPUT_EATEN;
 8016f62:	2001      	movs	r0, #1
            pcb->next = raw_pcbs;
 8016f64:	f8db 3000 	ldr.w	r3, [fp]
            prev->next = pcb->next;
 8016f68:	60f2      	str	r2, [r6, #12]
            raw_pcbs = pcb;
 8016f6a:	f8cb 4000 	str.w	r4, [fp]
            pcb->next = raw_pcbs;
 8016f6e:	60e3      	str	r3, [r4, #12]
 8016f70:	e7e8      	b.n	8016f44 <raw_input+0xa4>
          return RAW_INPUT_EATEN;
 8016f72:	2001      	movs	r0, #1
 8016f74:	e7e6      	b.n	8016f44 <raw_input+0xa4>
 8016f76:	bf00      	nop
 8016f78:	20026a6c 	.word	0x20026a6c
 8016f7c:	20026a7c 	.word	0x20026a7c
 8016f80:	0803d96c 	.word	0x0803d96c
 8016f84:	0803d99c 	.word	0x0803d99c
 8016f88:	0802697c 	.word	0x0802697c
 8016f8c:	200223e0 	.word	0x200223e0

08016f90 <raw_netif_ip_addr_changed>:
 */
void raw_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct raw_pcb *rpcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8016f90:	b1a8      	cbz	r0, 8016fbe <raw_netif_ip_addr_changed+0x2e>
 8016f92:	6802      	ldr	r2, [r0, #0]
 8016f94:	b199      	cbz	r1, 8016fbe <raw_netif_ip_addr_changed+0x2e>
 8016f96:	b192      	cbz	r2, 8016fbe <raw_netif_ip_addr_changed+0x2e>
 8016f98:	680b      	ldr	r3, [r1, #0]
 8016f9a:	b183      	cbz	r3, 8016fbe <raw_netif_ip_addr_changed+0x2e>
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 8016f9c:	4b08      	ldr	r3, [pc, #32]	; (8016fc0 <raw_netif_ip_addr_changed+0x30>)
 8016f9e:	681b      	ldr	r3, [r3, #0]
 8016fa0:	b16b      	cbz	r3, 8016fbe <raw_netif_ip_addr_changed+0x2e>
{
 8016fa2:	b410      	push	{r4}
 8016fa4:	e000      	b.n	8016fa8 <raw_netif_ip_addr_changed+0x18>
 8016fa6:	6802      	ldr	r2, [r0, #0]
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&rpcb->local_ip, old_addr)) {
 8016fa8:	681c      	ldr	r4, [r3, #0]
 8016faa:	4294      	cmp	r4, r2
 8016fac:	d101      	bne.n	8016fb2 <raw_netif_ip_addr_changed+0x22>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(rpcb->local_ip, *new_addr);
 8016fae:	680a      	ldr	r2, [r1, #0]
 8016fb0:	601a      	str	r2, [r3, #0]
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 8016fb2:	68db      	ldr	r3, [r3, #12]
 8016fb4:	2b00      	cmp	r3, #0
 8016fb6:	d1f6      	bne.n	8016fa6 <raw_netif_ip_addr_changed+0x16>
      }
    }
  }
}
 8016fb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016fbc:	4770      	bx	lr
 8016fbe:	4770      	bx	lr
 8016fc0:	200223e0 	.word	0x200223e0

08016fc4 <stats_init>:
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 8016fc4:	4770      	bx	lr
 8016fc6:	bf00      	nop

08016fc8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8016fc8:	f8df c060 	ldr.w	ip, [pc, #96]	; 801702c <tcp_new_port+0x64>
 8016fcc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8016fd0:	b4f0      	push	{r4, r5, r6, r7}
 8016fd2:	f8bc 0000 	ldrh.w	r0, [ip]
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8016fd6:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8016fda:	4f11      	ldr	r7, [pc, #68]	; (8017020 <tcp_new_port+0x58>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8016fdc:	4d11      	ldr	r5, [pc, #68]	; (8017024 <tcp_new_port+0x5c>)
  tcp_port++;
 8016fde:	3001      	adds	r0, #1
 8016fe0:	4c11      	ldr	r4, [pc, #68]	; (8017028 <tcp_new_port+0x60>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8016fe2:	462b      	mov	r3, r5
  tcp_port++;
 8016fe4:	b280      	uxth	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8016fe6:	42b0      	cmp	r0, r6
 8016fe8:	bf08      	it	eq
 8016fea:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8016fee:	681b      	ldr	r3, [r3, #0]
 8016ff0:	b913      	cbnz	r3, 8016ff8 <tcp_new_port+0x30>
 8016ff2:	e00c      	b.n	801700e <tcp_new_port+0x46>
 8016ff4:	68db      	ldr	r3, [r3, #12]
 8016ff6:	b153      	cbz	r3, 801700e <tcp_new_port+0x46>
      if (pcb->local_port == tcp_port) {
 8016ff8:	8ada      	ldrh	r2, [r3, #22]
 8016ffa:	4282      	cmp	r2, r0
 8016ffc:	d1fa      	bne.n	8016ff4 <tcp_new_port+0x2c>
 8016ffe:	3901      	subs	r1, #1
 8017000:	b289      	uxth	r1, r1
        n++;
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8017002:	2900      	cmp	r1, #0
 8017004:	d1eb      	bne.n	8016fde <tcp_new_port+0x16>
 8017006:	f8ac 0000 	strh.w	r0, [ip]
          return 0;
 801700a:	4608      	mov	r0, r1
 801700c:	e006      	b.n	801701c <tcp_new_port+0x54>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801700e:	42a7      	cmp	r7, r4
 8017010:	d002      	beq.n	8017018 <tcp_new_port+0x50>
 8017012:	f854 3b04 	ldr.w	r3, [r4], #4
 8017016:	e7ea      	b.n	8016fee <tcp_new_port+0x26>
 8017018:	f8ac 0000 	strh.w	r0, [ip]
        goto again;
      }
    }
  }
  return tcp_port;
}
 801701c:	bcf0      	pop	{r4, r5, r6, r7}
 801701e:	4770      	bx	lr
 8017020:	0803dce8 	.word	0x0803dce8
 8017024:	20036278 	.word	0x20036278
 8017028:	0803dcdc 	.word	0x0803dcdc
 801702c:	200003d8 	.word	0x200003d8

08017030 <tcp_close_shutdown_fin>:
{
 8017030:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8017032:	4604      	mov	r4, r0
 8017034:	b310      	cbz	r0, 801707c <tcp_close_shutdown_fin+0x4c>
  switch (pcb->state) {
 8017036:	7d23      	ldrb	r3, [r4, #20]
 8017038:	2b04      	cmp	r3, #4
 801703a:	d005      	beq.n	8017048 <tcp_close_shutdown_fin+0x18>
 801703c:	2b07      	cmp	r3, #7
 801703e:	d00e      	beq.n	801705e <tcp_close_shutdown_fin+0x2e>
 8017040:	2b03      	cmp	r3, #3
 8017042:	d001      	beq.n	8017048 <tcp_close_shutdown_fin+0x18>
      return ERR_OK;
 8017044:	2000      	movs	r0, #0
}
 8017046:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 8017048:	4620      	mov	r0, r4
 801704a:	f003 fdcd 	bl	801abe8 <tcp_send_fin>
      if (err == ERR_OK) {
 801704e:	b950      	cbnz	r0, 8017066 <tcp_close_shutdown_fin+0x36>
        pcb->state = FIN_WAIT_1;
 8017050:	2305      	movs	r3, #5
 8017052:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 8017054:	4620      	mov	r0, r4
 8017056:	f003 ff35 	bl	801aec4 <tcp_output>
 801705a:	2000      	movs	r0, #0
}
 801705c:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 801705e:	4620      	mov	r0, r4
 8017060:	f003 fdc2 	bl	801abe8 <tcp_send_fin>
      if (err == ERR_OK) {
 8017064:	b138      	cbz	r0, 8017076 <tcp_close_shutdown_fin+0x46>
  } else if (err == ERR_MEM) {
 8017066:	1c43      	adds	r3, r0, #1
 8017068:	d1ed      	bne.n	8017046 <tcp_close_shutdown_fin+0x16>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801706a:	8b63      	ldrh	r3, [r4, #26]
    return ERR_OK;
 801706c:	2000      	movs	r0, #0
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801706e:	f043 0308 	orr.w	r3, r3, #8
 8017072:	8363      	strh	r3, [r4, #26]
}
 8017074:	bd10      	pop	{r4, pc}
        pcb->state = LAST_ACK;
 8017076:	2309      	movs	r3, #9
 8017078:	7523      	strb	r3, [r4, #20]
 801707a:	e7eb      	b.n	8017054 <tcp_close_shutdown_fin+0x24>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801707c:	4b03      	ldr	r3, [pc, #12]	; (801708c <tcp_close_shutdown_fin+0x5c>)
 801707e:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8017082:	4903      	ldr	r1, [pc, #12]	; (8017090 <tcp_close_shutdown_fin+0x60>)
 8017084:	4803      	ldr	r0, [pc, #12]	; (8017094 <tcp_close_shutdown_fin+0x64>)
 8017086:	f009 fc9f 	bl	80209c8 <iprintf>
 801708a:	e7d4      	b.n	8017036 <tcp_close_shutdown_fin+0x6>
 801708c:	0803db18 	.word	0x0803db18
 8017090:	0803db48 	.word	0x0803db48
 8017094:	0802697c 	.word	0x0802697c

08017098 <tcp_init>:
{
 8017098:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801709a:	f009 fd25 	bl	8020ae8 <rand>
 801709e:	4b02      	ldr	r3, [pc, #8]	; (80170a8 <tcp_init+0x10>)
 80170a0:	4a02      	ldr	r2, [pc, #8]	; (80170ac <tcp_init+0x14>)
 80170a2:	4303      	orrs	r3, r0
 80170a4:	8013      	strh	r3, [r2, #0]
}
 80170a6:	bd08      	pop	{r3, pc}
 80170a8:	ffffc000 	.word	0xffffc000
 80170ac:	200003d8 	.word	0x200003d8

080170b0 <tcp_free>:
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80170b0:	7d03      	ldrb	r3, [r0, #20]
 80170b2:	2b01      	cmp	r3, #1
{
 80170b4:	b510      	push	{r4, lr}
 80170b6:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80170b8:	d005      	beq.n	80170c6 <tcp_free+0x16>
  memp_free(MEMP_TCP_PCB, pcb);
 80170ba:	4621      	mov	r1, r4
 80170bc:	2002      	movs	r0, #2
}
 80170be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 80170c2:	f7ff b84f 	b.w	8016164 <memp_free>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80170c6:	4906      	ldr	r1, [pc, #24]	; (80170e0 <tcp_free+0x30>)
 80170c8:	22d4      	movs	r2, #212	; 0xd4
 80170ca:	4b06      	ldr	r3, [pc, #24]	; (80170e4 <tcp_free+0x34>)
 80170cc:	4806      	ldr	r0, [pc, #24]	; (80170e8 <tcp_free+0x38>)
 80170ce:	f009 fc7b 	bl	80209c8 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 80170d2:	4621      	mov	r1, r4
 80170d4:	2002      	movs	r0, #2
}
 80170d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 80170da:	f7ff b843 	b.w	8016164 <memp_free>
 80170de:	bf00      	nop
 80170e0:	0803dc0c 	.word	0x0803dc0c
 80170e4:	0803db18 	.word	0x0803db18
 80170e8:	0802697c 	.word	0x0802697c

080170ec <tcp_bind>:
{
 80170ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 80170ee:	4d25      	ldr	r5, [pc, #148]	; (8017184 <tcp_bind+0x98>)
 80170f0:	2900      	cmp	r1, #0
 80170f2:	bf18      	it	ne
 80170f4:	460d      	movne	r5, r1
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80170f6:	2800      	cmp	r0, #0
 80170f8:	d03a      	beq.n	8017170 <tcp_bind+0x84>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80170fa:	7d01      	ldrb	r1, [r0, #20]
 80170fc:	4606      	mov	r6, r0
 80170fe:	bb69      	cbnz	r1, 801715c <tcp_bind+0x70>
  if (port == 0) {
 8017100:	b30a      	cbz	r2, 8017146 <tcp_bind+0x5a>
 8017102:	4b21      	ldr	r3, [pc, #132]	; (8017188 <tcp_bind+0x9c>)
 8017104:	4f21      	ldr	r7, [pc, #132]	; (801718c <tcp_bind+0xa0>)
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8017106:	681b      	ldr	r3, [r3, #0]
 8017108:	b913      	cbnz	r3, 8017110 <tcp_bind+0x24>
 801710a:	e00d      	b.n	8017128 <tcp_bind+0x3c>
 801710c:	68db      	ldr	r3, [r3, #12]
 801710e:	b15b      	cbz	r3, 8017128 <tcp_bind+0x3c>
        if (cpcb->local_port == port) {
 8017110:	8ad8      	ldrh	r0, [r3, #22]
 8017112:	4290      	cmp	r0, r2
 8017114:	d1fa      	bne.n	801710c <tcp_bind+0x20>
                (ip_addr_isany(&cpcb->local_ip) ||
 8017116:	6818      	ldr	r0, [r3, #0]
 8017118:	b118      	cbz	r0, 8017122 <tcp_bind+0x36>
                 ip_addr_isany(ipaddr) ||
 801711a:	682c      	ldr	r4, [r5, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801711c:	b10c      	cbz	r4, 8017122 <tcp_bind+0x36>
 801711e:	42a0      	cmp	r0, r4
 8017120:	d1f4      	bne.n	801710c <tcp_bind+0x20>
              return ERR_USE;
 8017122:	f06f 0007 	mvn.w	r0, #7
}
 8017126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < max_pcb_list; i++) {
 8017128:	3101      	adds	r1, #1
 801712a:	2904      	cmp	r1, #4
 801712c:	d113      	bne.n	8017156 <tcp_bind+0x6a>
  if (!ip_addr_isany(ipaddr)
 801712e:	682b      	ldr	r3, [r5, #0]
 8017130:	b103      	cbz	r3, 8017134 <tcp_bind+0x48>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8017132:	6033      	str	r3, [r6, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8017134:	4b16      	ldr	r3, [pc, #88]	; (8017190 <tcp_bind+0xa4>)
  pcb->local_port = port;
 8017136:	82f2      	strh	r2, [r6, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8017138:	681a      	ldr	r2, [r3, #0]
 801713a:	601e      	str	r6, [r3, #0]
 801713c:	60f2      	str	r2, [r6, #12]
 801713e:	f004 f9f5 	bl	801b52c <tcp_timer_needed>
  return ERR_OK;
 8017142:	2000      	movs	r0, #0
}
 8017144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    port = tcp_new_port();
 8017146:	f7ff ff3f 	bl	8016fc8 <tcp_new_port>
    if (port == 0) {
 801714a:	4602      	mov	r2, r0
 801714c:	2800      	cmp	r0, #0
 801714e:	d1ee      	bne.n	801712e <tcp_bind+0x42>
      return ERR_BUF;
 8017150:	f06f 0001 	mvn.w	r0, #1
}
 8017154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017156:	f857 3021 	ldr.w	r3, [r7, r1, lsl #2]
 801715a:	e7d4      	b.n	8017106 <tcp_bind+0x1a>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801715c:	4b0d      	ldr	r3, [pc, #52]	; (8017194 <tcp_bind+0xa8>)
 801715e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8017162:	490d      	ldr	r1, [pc, #52]	; (8017198 <tcp_bind+0xac>)
 8017164:	480d      	ldr	r0, [pc, #52]	; (801719c <tcp_bind+0xb0>)
 8017166:	f009 fc2f 	bl	80209c8 <iprintf>
 801716a:	f06f 0005 	mvn.w	r0, #5
}
 801716e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8017170:	4b08      	ldr	r3, [pc, #32]	; (8017194 <tcp_bind+0xa8>)
 8017172:	f240 22a9 	movw	r2, #681	; 0x2a9
 8017176:	490a      	ldr	r1, [pc, #40]	; (80171a0 <tcp_bind+0xb4>)
 8017178:	4808      	ldr	r0, [pc, #32]	; (801719c <tcp_bind+0xb0>)
 801717a:	f009 fc25 	bl	80209c8 <iprintf>
 801717e:	f06f 000f 	mvn.w	r0, #15
}
 8017182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017184:	0803f66c 	.word	0x0803f66c
 8017188:	20036278 	.word	0x20036278
 801718c:	0803dcd8 	.word	0x0803dcd8
 8017190:	2003627c 	.word	0x2003627c
 8017194:	0803db18 	.word	0x0803db18
 8017198:	0803da80 	.word	0x0803da80
 801719c:	0802697c 	.word	0x0802697c
 80171a0:	0803da68 	.word	0x0803da68

080171a4 <tcp_listen_with_backlog_and_err>:
{
 80171a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171a6:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80171a8:	4605      	mov	r5, r0
 80171aa:	2800      	cmp	r0, #0
 80171ac:	d053      	beq.n	8017256 <tcp_listen_with_backlog_and_err+0xb2>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80171ae:	7d07      	ldrb	r7, [r0, #20]
 80171b0:	2f00      	cmp	r7, #0
 80171b2:	d145      	bne.n	8017240 <tcp_listen_with_backlog_and_err+0x9c>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80171b4:	f240 3272 	movw	r2, #882	; 0x372
 80171b8:	492c      	ldr	r1, [pc, #176]	; (801726c <tcp_listen_with_backlog_and_err+0xc8>)
 80171ba:	2003      	movs	r0, #3
 80171bc:	f7fe ffae 	bl	801611c <memp_malloc_fn>
  if (lpcb == NULL) {
 80171c0:	4604      	mov	r4, r0
 80171c2:	2800      	cmp	r0, #0
 80171c4:	d033      	beq.n	801722e <tcp_listen_with_backlog_and_err+0x8a>
  lpcb->callback_arg = pcb->callback_arg;
 80171c6:	6929      	ldr	r1, [r5, #16]
  lpcb->state = LISTEN;
 80171c8:	2201      	movs	r2, #1
  lpcb->local_port = pcb->local_port;
 80171ca:	8aeb      	ldrh	r3, [r5, #22]
  lpcb->callback_arg = pcb->callback_arg;
 80171cc:	6101      	str	r1, [r0, #16]
  lpcb->local_port = pcb->local_port;
 80171ce:	82c3      	strh	r3, [r0, #22]
  lpcb->state = LISTEN;
 80171d0:	7502      	strb	r2, [r0, #20]
  lpcb->prio = pcb->prio;
 80171d2:	7d6a      	ldrb	r2, [r5, #21]
 80171d4:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 80171d6:	7a6a      	ldrb	r2, [r5, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 80171d8:	7207      	strb	r7, [r0, #8]
  lpcb->so_options = pcb->so_options;
 80171da:	7242      	strb	r2, [r0, #9]
  lpcb->ttl = pcb->ttl;
 80171dc:	7aea      	ldrb	r2, [r5, #11]
 80171de:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
 80171e0:	7aaa      	ldrb	r2, [r5, #10]
 80171e2:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80171e4:	682a      	ldr	r2, [r5, #0]
 80171e6:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 80171e8:	b18b      	cbz	r3, 801720e <tcp_listen_with_backlog_and_err+0x6a>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80171ea:	4b21      	ldr	r3, [pc, #132]	; (8017270 <tcp_listen_with_backlog_and_err+0xcc>)
 80171ec:	681a      	ldr	r2, [r3, #0]
 80171ee:	42aa      	cmp	r2, r5
 80171f0:	d009      	beq.n	8017206 <tcp_listen_with_backlog_and_err+0x62>
 80171f2:	b152      	cbz	r2, 801720a <tcp_listen_with_backlog_and_err+0x66>
 80171f4:	68d3      	ldr	r3, [r2, #12]
 80171f6:	429d      	cmp	r5, r3
 80171f8:	d01c      	beq.n	8017234 <tcp_listen_with_backlog_and_err+0x90>
 80171fa:	b133      	cbz	r3, 801720a <tcp_listen_with_backlog_and_err+0x66>
 80171fc:	68da      	ldr	r2, [r3, #12]
 80171fe:	42aa      	cmp	r2, r5
 8017200:	d019      	beq.n	8017236 <tcp_listen_with_backlog_and_err+0x92>
 8017202:	4613      	mov	r3, r2
 8017204:	e7f9      	b.n	80171fa <tcp_listen_with_backlog_and_err+0x56>
 8017206:	68ea      	ldr	r2, [r5, #12]
 8017208:	601a      	str	r2, [r3, #0]
 801720a:	2300      	movs	r3, #0
 801720c:	60eb      	str	r3, [r5, #12]
  tcp_free(pcb);
 801720e:	4628      	mov	r0, r5
 8017210:	f7ff ff4e 	bl	80170b0 <tcp_free>
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8017214:	4b17      	ldr	r3, [pc, #92]	; (8017274 <tcp_listen_with_backlog_and_err+0xd0>)
  lpcb->accept = tcp_accept_null;
 8017216:	4918      	ldr	r1, [pc, #96]	; (8017278 <tcp_listen_with_backlog_and_err+0xd4>)
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8017218:	681a      	ldr	r2, [r3, #0]
  lpcb->accept = tcp_accept_null;
 801721a:	61a1      	str	r1, [r4, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801721c:	60e2      	str	r2, [r4, #12]
 801721e:	601c      	str	r4, [r3, #0]
 8017220:	f004 f984 	bl	801b52c <tcp_timer_needed>
  res = ERR_OK;
 8017224:	2300      	movs	r3, #0
  if (err != NULL) {
 8017226:	b106      	cbz	r6, 801722a <tcp_listen_with_backlog_and_err+0x86>
    *err = res;
 8017228:	7033      	strb	r3, [r6, #0]
}
 801722a:	4620      	mov	r0, r4
 801722c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    res = ERR_MEM;
 801722e:	f04f 33ff 	mov.w	r3, #4294967295
 8017232:	e7f8      	b.n	8017226 <tcp_listen_with_backlog_and_err+0x82>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8017234:	4613      	mov	r3, r2
 8017236:	68ea      	ldr	r2, [r5, #12]
 8017238:	60da      	str	r2, [r3, #12]
 801723a:	2300      	movs	r3, #0
 801723c:	60eb      	str	r3, [r5, #12]
 801723e:	e7e6      	b.n	801720e <tcp_listen_with_backlog_and_err+0x6a>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8017240:	4b0a      	ldr	r3, [pc, #40]	; (801726c <tcp_listen_with_backlog_and_err+0xc8>)
 8017242:	f240 325a 	movw	r2, #858	; 0x35a
 8017246:	490d      	ldr	r1, [pc, #52]	; (801727c <tcp_listen_with_backlog_and_err+0xd8>)
  struct tcp_pcb_listen *lpcb = NULL;
 8017248:	2400      	movs	r4, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801724a:	480d      	ldr	r0, [pc, #52]	; (8017280 <tcp_listen_with_backlog_and_err+0xdc>)
 801724c:	f009 fbbc 	bl	80209c8 <iprintf>
 8017250:	f06f 030e 	mvn.w	r3, #14
 8017254:	e7e7      	b.n	8017226 <tcp_listen_with_backlog_and_err+0x82>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8017256:	4b05      	ldr	r3, [pc, #20]	; (801726c <tcp_listen_with_backlog_and_err+0xc8>)
 8017258:	f240 3259 	movw	r2, #857	; 0x359
 801725c:	4909      	ldr	r1, [pc, #36]	; (8017284 <tcp_listen_with_backlog_and_err+0xe0>)
  struct tcp_pcb_listen *lpcb = NULL;
 801725e:	4604      	mov	r4, r0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8017260:	4807      	ldr	r0, [pc, #28]	; (8017280 <tcp_listen_with_backlog_and_err+0xdc>)
 8017262:	f009 fbb1 	bl	80209c8 <iprintf>
 8017266:	f06f 030f 	mvn.w	r3, #15
 801726a:	e7dc      	b.n	8017226 <tcp_listen_with_backlog_and_err+0x82>
 801726c:	0803db18 	.word	0x0803db18
 8017270:	2003627c 	.word	0x2003627c
 8017274:	20036278 	.word	0x20036278
 8017278:	08017cc1 	.word	0x08017cc1
 801727c:	0803dc50 	.word	0x0803dc50
 8017280:	0802697c 	.word	0x0802697c
 8017284:	0803dc20 	.word	0x0803dc20

08017288 <tcp_listen_with_backlog>:
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8017288:	2200      	movs	r2, #0
 801728a:	f7ff bf8b 	b.w	80171a4 <tcp_listen_with_backlog_and_err>
 801728e:	bf00      	nop

08017290 <tcp_update_rcv_ann_wnd>:
{
 8017290:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8017292:	4604      	mov	r4, r0
 8017294:	b1a8      	cbz	r0, 80172c2 <tcp_update_rcv_ann_wnd+0x32>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8017296:	8d21      	ldrh	r1, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8017298:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801729a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801729c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801729e:	1a88      	subs	r0, r1, r2
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80172a0:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80172a4:	4428      	add	r0, r5
 80172a6:	bf94      	ite	ls
 80172a8:	1ac3      	subls	r3, r0, r3
 80172aa:	f5a0 6386 	subhi.w	r3, r0, #1072	; 0x430
 80172ae:	2b00      	cmp	r3, #0
 80172b0:	db01      	blt.n	80172b6 <tcp_update_rcv_ann_wnd+0x26>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80172b2:	8561      	strh	r1, [r4, #42]	; 0x2a
}
 80172b4:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80172b6:	1aab      	subs	r3, r5, r2
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	dd0a      	ble.n	80172d2 <tcp_update_rcv_ann_wnd+0x42>
      pcb->rcv_ann_wnd = 0;
 80172bc:	2000      	movs	r0, #0
 80172be:	8560      	strh	r0, [r4, #42]	; 0x2a
}
 80172c0:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80172c2:	4b0b      	ldr	r3, [pc, #44]	; (80172f0 <tcp_update_rcv_ann_wnd+0x60>)
 80172c4:	f240 32a6 	movw	r2, #934	; 0x3a6
 80172c8:	490a      	ldr	r1, [pc, #40]	; (80172f4 <tcp_update_rcv_ann_wnd+0x64>)
 80172ca:	480b      	ldr	r0, [pc, #44]	; (80172f8 <tcp_update_rcv_ann_wnd+0x68>)
 80172cc:	f009 fb7c 	bl	80209c8 <iprintf>
 80172d0:	e7e1      	b.n	8017296 <tcp_update_rcv_ann_wnd+0x6>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80172d2:	1b55      	subs	r5, r2, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80172d4:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 80172d8:	d202      	bcs.n	80172e0 <tcp_update_rcv_ann_wnd+0x50>
    return 0;
 80172da:	2000      	movs	r0, #0
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80172dc:	8565      	strh	r5, [r4, #42]	; 0x2a
}
 80172de:	bd38      	pop	{r3, r4, r5, pc}
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80172e0:	4b03      	ldr	r3, [pc, #12]	; (80172f0 <tcp_update_rcv_ann_wnd+0x60>)
 80172e2:	f240 32b6 	movw	r2, #950	; 0x3b6
 80172e6:	4905      	ldr	r1, [pc, #20]	; (80172fc <tcp_update_rcv_ann_wnd+0x6c>)
 80172e8:	4803      	ldr	r0, [pc, #12]	; (80172f8 <tcp_update_rcv_ann_wnd+0x68>)
 80172ea:	f009 fb6d 	bl	80209c8 <iprintf>
 80172ee:	e7f4      	b.n	80172da <tcp_update_rcv_ann_wnd+0x4a>
 80172f0:	0803db18 	.word	0x0803db18
 80172f4:	0803e0a4 	.word	0x0803e0a4
 80172f8:	0802697c 	.word	0x0802697c
 80172fc:	0803e0c8 	.word	0x0803e0c8

08017300 <tcp_recved>:
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8017300:	b378      	cbz	r0, 8017362 <tcp_recved+0x62>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8017302:	7d03      	ldrb	r3, [r0, #20]
 8017304:	2b01      	cmp	r3, #1
{
 8017306:	b570      	push	{r4, r5, r6, lr}
 8017308:	4604      	mov	r4, r0
 801730a:	460d      	mov	r5, r1
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801730c:	d021      	beq.n	8017352 <tcp_recved+0x52>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801730e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8017310:	1959      	adds	r1, r3, r5
 8017312:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8017314:	428b      	cmp	r3, r1
 8017316:	d802      	bhi.n	801731e <tcp_recved+0x1e>
 8017318:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
 801731c:	d909      	bls.n	8017332 <tcp_recved+0x32>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801731e:	f44f 6306 	mov.w	r3, #2144	; 0x860
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8017322:	4620      	mov	r0, r4
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8017324:	8523      	strh	r3, [r4, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8017326:	f7ff ffb3 	bl	8017290 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801732a:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 801732e:	d207      	bcs.n	8017340 <tcp_recved+0x40>
}
 8017330:	bd70      	pop	{r4, r5, r6, pc}
    pcb->rcv_wnd = rcv_wnd;
 8017332:	8521      	strh	r1, [r4, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8017334:	4620      	mov	r0, r4
 8017336:	f7ff ffab 	bl	8017290 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801733a:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 801733e:	d3f7      	bcc.n	8017330 <tcp_recved+0x30>
    tcp_ack_now(pcb);
 8017340:	8b63      	ldrh	r3, [r4, #26]
    tcp_output(pcb);
 8017342:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 8017344:	f043 0302 	orr.w	r3, r3, #2
 8017348:	8363      	strh	r3, [r4, #26]
}
 801734a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 801734e:	f003 bdb9 	b.w	801aec4 <tcp_output>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8017352:	4b07      	ldr	r3, [pc, #28]	; (8017370 <tcp_recved+0x70>)
 8017354:	f240 32d3 	movw	r2, #979	; 0x3d3
 8017358:	4906      	ldr	r1, [pc, #24]	; (8017374 <tcp_recved+0x74>)
 801735a:	4807      	ldr	r0, [pc, #28]	; (8017378 <tcp_recved+0x78>)
 801735c:	f009 fb34 	bl	80209c8 <iprintf>
 8017360:	e7d5      	b.n	801730e <tcp_recved+0xe>
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8017362:	4b03      	ldr	r3, [pc, #12]	; (8017370 <tcp_recved+0x70>)
 8017364:	f240 32cf 	movw	r2, #975	; 0x3cf
 8017368:	4904      	ldr	r1, [pc, #16]	; (801737c <tcp_recved+0x7c>)
 801736a:	4803      	ldr	r0, [pc, #12]	; (8017378 <tcp_recved+0x78>)
 801736c:	f009 bb2c 	b.w	80209c8 <iprintf>
 8017370:	0803db18 	.word	0x0803db18
 8017374:	0803de50 	.word	0x0803de50
 8017378:	0802697c 	.word	0x0802697c
 801737c:	0803de38 	.word	0x0803de38

08017380 <tcp_seg_free>:
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  if (seg != NULL) {
 8017380:	b158      	cbz	r0, 801739a <tcp_seg_free+0x1a>
{
 8017382:	b510      	push	{r4, lr}
 8017384:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 8017386:	6840      	ldr	r0, [r0, #4]
 8017388:	b108      	cbz	r0, 801738e <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 801738a:	f7ff f9c5 	bl	8016718 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801738e:	4621      	mov	r1, r4
 8017390:	2004      	movs	r0, #4
  }
}
 8017392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 8017396:	f7fe bee5 	b.w	8016164 <memp_free>
 801739a:	4770      	bx	lr

0801739c <tcp_segs_free>:
  while (seg != NULL) {
 801739c:	b138      	cbz	r0, 80173ae <tcp_segs_free+0x12>
{
 801739e:	b510      	push	{r4, lr}
    struct tcp_seg *next = seg->next;
 80173a0:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 80173a2:	f7ff ffed 	bl	8017380 <tcp_seg_free>
  while (seg != NULL) {
 80173a6:	4620      	mov	r0, r4
 80173a8:	2c00      	cmp	r4, #0
 80173aa:	d1f9      	bne.n	80173a0 <tcp_segs_free+0x4>
}
 80173ac:	bd10      	pop	{r4, pc}
 80173ae:	4770      	bx	lr

080173b0 <tcp_setprio>:
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 80173b0:	b108      	cbz	r0, 80173b6 <tcp_setprio+0x6>

  pcb->prio = prio;
 80173b2:	7541      	strb	r1, [r0, #21]
}
 80173b4:	4770      	bx	lr
  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 80173b6:	4b03      	ldr	r3, [pc, #12]	; (80173c4 <tcp_setprio+0x14>)
 80173b8:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 80173bc:	4902      	ldr	r1, [pc, #8]	; (80173c8 <tcp_setprio+0x18>)
 80173be:	4803      	ldr	r0, [pc, #12]	; (80173cc <tcp_setprio+0x1c>)
 80173c0:	f009 bb02 	b.w	80209c8 <iprintf>
 80173c4:	0803db18 	.word	0x0803db18
 80173c8:	0803debc 	.word	0x0803debc
 80173cc:	0802697c 	.word	0x0802697c

080173d0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80173d0:	b538      	push	{r3, r4, r5, lr}
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80173d2:	4605      	mov	r5, r0
 80173d4:	b1a0      	cbz	r0, 8017400 <tcp_seg_copy+0x30>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80173d6:	f240 6284 	movw	r2, #1668	; 0x684
 80173da:	490d      	ldr	r1, [pc, #52]	; (8017410 <tcp_seg_copy+0x40>)
 80173dc:	2004      	movs	r0, #4
 80173de:	f7fe fe9d 	bl	801611c <memp_malloc_fn>
  if (cseg == NULL) {
 80173e2:	4604      	mov	r4, r0
 80173e4:	b150      	cbz	r0, 80173fc <tcp_seg_copy+0x2c>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80173e6:	6828      	ldr	r0, [r5, #0]
 80173e8:	6869      	ldr	r1, [r5, #4]
 80173ea:	68aa      	ldr	r2, [r5, #8]
 80173ec:	68eb      	ldr	r3, [r5, #12]
 80173ee:	6020      	str	r0, [r4, #0]
 80173f0:	6061      	str	r1, [r4, #4]
 80173f2:	60a2      	str	r2, [r4, #8]
 80173f4:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 80173f6:	6860      	ldr	r0, [r4, #4]
 80173f8:	f7ff fb02 	bl	8016a00 <pbuf_ref>
  return cseg;
}
 80173fc:	4620      	mov	r0, r4
 80173fe:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8017400:	4b03      	ldr	r3, [pc, #12]	; (8017410 <tcp_seg_copy+0x40>)
 8017402:	f240 6282 	movw	r2, #1666	; 0x682
 8017406:	4903      	ldr	r1, [pc, #12]	; (8017414 <tcp_seg_copy+0x44>)
 8017408:	4803      	ldr	r0, [pc, #12]	; (8017418 <tcp_seg_copy+0x48>)
 801740a:	f009 fadd 	bl	80209c8 <iprintf>
 801740e:	e7e2      	b.n	80173d6 <tcp_seg_copy+0x6>
 8017410:	0803db18 	.word	0x0803db18
 8017414:	0803de78 	.word	0x0803de78
 8017418:	0802697c 	.word	0x0802697c

0801741c <tcp_arg>:
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801741c:	b100      	cbz	r0, 8017420 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 801741e:	6101      	str	r1, [r0, #16]
  }
}
 8017420:	4770      	bx	lr
 8017422:	bf00      	nop

08017424 <tcp_recv>:
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8017424:	b140      	cbz	r0, 8017438 <tcp_recv+0x14>
{
 8017426:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8017428:	7d03      	ldrb	r3, [r0, #20]
 801742a:	4604      	mov	r4, r0
 801742c:	460d      	mov	r5, r1
 801742e:	2b01      	cmp	r3, #1
 8017430:	d003      	beq.n	801743a <tcp_recv+0x16>
    pcb->recv = recv;
 8017432:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  }
}
 8017436:	bd38      	pop	{r3, r4, r5, pc}
 8017438:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801743a:	4b05      	ldr	r3, [pc, #20]	; (8017450 <tcp_recv+0x2c>)
 801743c:	f240 72df 	movw	r2, #2015	; 0x7df
 8017440:	4904      	ldr	r1, [pc, #16]	; (8017454 <tcp_recv+0x30>)
 8017442:	4805      	ldr	r0, [pc, #20]	; (8017458 <tcp_recv+0x34>)
 8017444:	f009 fac0 	bl	80209c8 <iprintf>
    pcb->recv = recv;
 8017448:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 801744c:	bd38      	pop	{r3, r4, r5, pc}
 801744e:	bf00      	nop
 8017450:	0803db18 	.word	0x0803db18
 8017454:	0803ddf4 	.word	0x0803ddf4
 8017458:	0802697c 	.word	0x0802697c

0801745c <tcp_sent>:
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801745c:	b140      	cbz	r0, 8017470 <tcp_sent+0x14>
{
 801745e:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8017460:	7d03      	ldrb	r3, [r0, #20]
 8017462:	4604      	mov	r4, r0
 8017464:	460d      	mov	r5, r1
 8017466:	2b01      	cmp	r3, #1
 8017468:	d003      	beq.n	8017472 <tcp_sent+0x16>
    pcb->sent = sent;
 801746a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  }
}
 801746e:	bd38      	pop	{r3, r4, r5, pc}
 8017470:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8017472:	4b05      	ldr	r3, [pc, #20]	; (8017488 <tcp_sent+0x2c>)
 8017474:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8017478:	4904      	ldr	r1, [pc, #16]	; (801748c <tcp_sent+0x30>)
 801747a:	4805      	ldr	r0, [pc, #20]	; (8017490 <tcp_sent+0x34>)
 801747c:	f009 faa4 	bl	80209c8 <iprintf>
    pcb->sent = sent;
 8017480:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 8017484:	bd38      	pop	{r3, r4, r5, pc}
 8017486:	bf00      	nop
 8017488:	0803db18 	.word	0x0803db18
 801748c:	0803de94 	.word	0x0803de94
 8017490:	0802697c 	.word	0x0802697c

08017494 <tcp_err>:
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8017494:	b140      	cbz	r0, 80174a8 <tcp_err+0x14>
{
 8017496:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8017498:	7d03      	ldrb	r3, [r0, #20]
 801749a:	4604      	mov	r4, r0
 801749c:	460d      	mov	r5, r1
 801749e:	2b01      	cmp	r3, #1
 80174a0:	d003      	beq.n	80174aa <tcp_err+0x16>
    pcb->errf = err;
 80174a2:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
  }
}
 80174a6:	bd38      	pop	{r3, r4, r5, pc}
 80174a8:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80174aa:	4b05      	ldr	r3, [pc, #20]	; (80174c0 <tcp_err+0x2c>)
 80174ac:	f640 020d 	movw	r2, #2061	; 0x80d
 80174b0:	4904      	ldr	r1, [pc, #16]	; (80174c4 <tcp_err+0x30>)
 80174b2:	4805      	ldr	r0, [pc, #20]	; (80174c8 <tcp_err+0x34>)
 80174b4:	f009 fa88 	bl	80209c8 <iprintf>
    pcb->errf = err;
 80174b8:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
 80174bc:	bd38      	pop	{r3, r4, r5, pc}
 80174be:	bf00      	nop
 80174c0:	0803db18 	.word	0x0803db18
 80174c4:	0803dbe4 	.word	0x0803dbe4
 80174c8:	0802697c 	.word	0x0802697c

080174cc <tcp_accept>:
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80174cc:	b118      	cbz	r0, 80174d6 <tcp_accept+0xa>
 80174ce:	7d03      	ldrb	r3, [r0, #20]
 80174d0:	2b01      	cmp	r3, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
    lpcb->accept = accept;
 80174d2:	bf08      	it	eq
 80174d4:	6181      	streq	r1, [r0, #24]
  }
}
 80174d6:	4770      	bx	lr

080174d8 <tcp_poll>:
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80174d8:	b1a8      	cbz	r0, 8017506 <tcp_poll+0x2e>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80174da:	7d03      	ldrb	r3, [r0, #20]
 80174dc:	2b01      	cmp	r3, #1
{
 80174de:	b570      	push	{r4, r5, r6, lr}
 80174e0:	4604      	mov	r4, r0
 80174e2:	4615      	mov	r5, r2
 80174e4:	460e      	mov	r6, r1
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80174e6:	d003      	beq.n	80174f0 <tcp_poll+0x18>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80174e8:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80174ec:	7765      	strb	r5, [r4, #29]
}
 80174ee:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80174f0:	4b08      	ldr	r3, [pc, #32]	; (8017514 <tcp_poll+0x3c>)
 80174f2:	f640 023e 	movw	r2, #2110	; 0x83e
 80174f6:	4908      	ldr	r1, [pc, #32]	; (8017518 <tcp_poll+0x40>)
 80174f8:	4808      	ldr	r0, [pc, #32]	; (801751c <tcp_poll+0x44>)
 80174fa:	f009 fa65 	bl	80209c8 <iprintf>
  pcb->poll = poll;
 80174fe:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  pcb->pollinterval = interval;
 8017502:	7765      	strb	r5, [r4, #29]
}
 8017504:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8017506:	4b03      	ldr	r3, [pc, #12]	; (8017514 <tcp_poll+0x3c>)
 8017508:	f640 023d 	movw	r2, #2109	; 0x83d
 801750c:	4904      	ldr	r1, [pc, #16]	; (8017520 <tcp_poll+0x48>)
 801750e:	4803      	ldr	r0, [pc, #12]	; (801751c <tcp_poll+0x44>)
 8017510:	f009 ba5a 	b.w	80209c8 <iprintf>
 8017514:	0803db18 	.word	0x0803db18
 8017518:	0803ddac 	.word	0x0803ddac
 801751c:	0802697c 	.word	0x0802697c
 8017520:	0803dd94 	.word	0x0803dd94

08017524 <tcp_pcb_purge>:
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8017524:	2800      	cmp	r0, #0
 8017526:	d02f      	beq.n	8017588 <tcp_pcb_purge+0x64>

  if (pcb->state != CLOSED &&
 8017528:	7d03      	ldrb	r3, [r0, #20]
      pcb->state != TIME_WAIT &&
 801752a:	2b0a      	cmp	r3, #10
 801752c:	d02b      	beq.n	8017586 <tcp_pcb_purge+0x62>
 801752e:	2b01      	cmp	r3, #1
 8017530:	d929      	bls.n	8017586 <tcp_pcb_purge+0x62>
{
 8017532:	b570      	push	{r4, r5, r6, lr}
 8017534:	4604      	mov	r4, r0

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8017536:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8017538:	b118      	cbz	r0, 8017542 <tcp_pcb_purge+0x1e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801753a:	f7ff f8ed 	bl	8016718 <pbuf_free>
      pcb->refused_data = NULL;
 801753e:	2300      	movs	r3, #0
 8017540:	67a3      	str	r3, [r4, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8017542:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8017544:	b130      	cbz	r0, 8017554 <tcp_pcb_purge+0x30>
    struct tcp_seg *next = seg->next;
 8017546:	6805      	ldr	r5, [r0, #0]
    tcp_seg_free(seg);
 8017548:	f7ff ff1a 	bl	8017380 <tcp_seg_free>
  while (seg != NULL) {
 801754c:	4628      	mov	r0, r5
 801754e:	2d00      	cmp	r5, #0
 8017550:	d1f9      	bne.n	8017546 <tcp_pcb_purge+0x22>
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
  if (pcb->ooseq) {
    tcp_segs_free(pcb->ooseq);
    pcb->ooseq = NULL;
 8017552:	6765      	str	r5, [r4, #116]	; 0x74
    pcb->rtime = -1;
 8017554:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tcp_segs_free(pcb->unsent);
 8017558:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    pcb->rtime = -1;
 801755a:	8623      	strh	r3, [r4, #48]	; 0x30
  while (seg != NULL) {
 801755c:	b128      	cbz	r0, 801756a <tcp_pcb_purge+0x46>
    struct tcp_seg *next = seg->next;
 801755e:	6805      	ldr	r5, [r0, #0]
    tcp_seg_free(seg);
 8017560:	f7ff ff0e 	bl	8017380 <tcp_seg_free>
  while (seg != NULL) {
 8017564:	4628      	mov	r0, r5
 8017566:	2d00      	cmp	r5, #0
 8017568:	d1f9      	bne.n	801755e <tcp_pcb_purge+0x3a>
    tcp_segs_free(pcb->unacked);
 801756a:	6f20      	ldr	r0, [r4, #112]	; 0x70
  while (seg != NULL) {
 801756c:	b128      	cbz	r0, 801757a <tcp_pcb_purge+0x56>
    struct tcp_seg *next = seg->next;
 801756e:	6805      	ldr	r5, [r0, #0]
    tcp_seg_free(seg);
 8017570:	f7ff ff06 	bl	8017380 <tcp_seg_free>
  while (seg != NULL) {
 8017574:	4628      	mov	r0, r5
 8017576:	2d00      	cmp	r5, #0
 8017578:	d1f9      	bne.n	801756e <tcp_pcb_purge+0x4a>
    pcb->unacked = pcb->unsent = NULL;
 801757a:	2300      	movs	r3, #0
 801757c:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
    pcb->unsent_oversize = 0;
 8017580:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
}
 8017584:	bd70      	pop	{r4, r5, r6, pc}
 8017586:	4770      	bx	lr
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8017588:	4b03      	ldr	r3, [pc, #12]	; (8017598 <tcp_pcb_purge+0x74>)
 801758a:	f640 0251 	movw	r2, #2129	; 0x851
 801758e:	4903      	ldr	r1, [pc, #12]	; (801759c <tcp_pcb_purge+0x78>)
 8017590:	4803      	ldr	r0, [pc, #12]	; (80175a0 <tcp_pcb_purge+0x7c>)
 8017592:	f009 ba19 	b.w	80209c8 <iprintf>
 8017596:	bf00      	nop
 8017598:	0803db18 	.word	0x0803db18
 801759c:	0803dce8 	.word	0x0803dce8
 80175a0:	0802697c 	.word	0x0802697c

080175a4 <tcp_slowtmr>:
{
 80175a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 80175a8:	4e9d      	ldr	r6, [pc, #628]	; (8017820 <tcp_slowtmr+0x27c>)
{
 80175aa:	b087      	sub	sp, #28
  ++tcp_timer_ctr;
 80175ac:	f8df 829c 	ldr.w	r8, [pc, #668]	; 801784c <tcp_slowtmr+0x2a8>
  ++tcp_ticks;
 80175b0:	6832      	ldr	r2, [r6, #0]
  ++tcp_timer_ctr;
 80175b2:	f898 3000 	ldrb.w	r3, [r8]
  ++tcp_ticks;
 80175b6:	3201      	adds	r2, #1
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80175b8:	f8df 9294 	ldr.w	r9, [pc, #660]	; 8017850 <tcp_slowtmr+0x2ac>
  ++tcp_timer_ctr;
 80175bc:	3301      	adds	r3, #1
  ++tcp_ticks;
 80175be:	6032      	str	r2, [r6, #0]
  ++tcp_timer_ctr;
 80175c0:	f888 3000 	strb.w	r3, [r8]
  pcb = tcp_active_pcbs;
 80175c4:	4b97      	ldr	r3, [pc, #604]	; (8017824 <tcp_slowtmr+0x280>)
 80175c6:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 80175c8:	2c00      	cmp	r4, #0
 80175ca:	d07f      	beq.n	80176cc <tcp_slowtmr+0x128>
  prev = NULL;
 80175cc:	2700      	movs	r7, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80175ce:	7d23      	ldrb	r3, [r4, #20]
 80175d0:	2b00      	cmp	r3, #0
 80175d2:	f000 80f6 	beq.w	80177c2 <tcp_slowtmr+0x21e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80175d6:	2b01      	cmp	r3, #1
 80175d8:	f000 80fe 	beq.w	80177d8 <tcp_slowtmr+0x234>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80175dc:	2b0a      	cmp	r3, #10
 80175de:	f000 8106 	beq.w	80177ee <tcp_slowtmr+0x24a>
    if (pcb->last_timer == tcp_timer_ctr) {
 80175e2:	f898 2000 	ldrb.w	r2, [r8]
 80175e6:	7fa3      	ldrb	r3, [r4, #30]
 80175e8:	4293      	cmp	r3, r2
 80175ea:	f000 810d 	beq.w	8017808 <tcp_slowtmr+0x264>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80175ee:	7d23      	ldrb	r3, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 80175f0:	77a2      	strb	r2, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80175f2:	2b02      	cmp	r3, #2
 80175f4:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 80175f8:	f000 810c 	beq.w	8017814 <tcp_slowtmr+0x270>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80175fc:	2a0b      	cmp	r2, #11
 80175fe:	f240 80c7 	bls.w	8017790 <tcp_slowtmr+0x1ec>
      ++pcb_remove;
 8017602:	2501      	movs	r5, #1
    if (pcb->state == FIN_WAIT_2) {
 8017604:	2b06      	cmp	r3, #6
 8017606:	f000 80b6 	beq.w	8017776 <tcp_slowtmr+0x1d2>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801760a:	f894 a009 	ldrb.w	sl, [r4, #9]
 801760e:	f01a 0a08 	ands.w	sl, sl, #8
 8017612:	d01d      	beq.n	8017650 <tcp_slowtmr+0xac>
 8017614:	2b04      	cmp	r3, #4
 8017616:	d007      	beq.n	8017628 <tcp_slowtmr+0x84>
 8017618:	f1a3 0307 	sub.w	r3, r3, #7
 801761c:	fab3 f383 	clz	r3, r3
 8017620:	095b      	lsrs	r3, r3, #5
 8017622:	2b00      	cmp	r3, #0
 8017624:	f000 80b1 	beq.w	801778a <tcp_slowtmr+0x1e6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017628:	6832      	ldr	r2, [r6, #0]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801762a:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 801762e:	4b7e      	ldr	r3, [pc, #504]	; (8017828 <tcp_slowtmr+0x284>)
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017630:	9205      	str	r2, [sp, #20]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8017632:	4403      	add	r3, r0
 8017634:	4a7d      	ldr	r2, [pc, #500]	; (801782c <tcp_slowtmr+0x288>)
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017636:	6a21      	ldr	r1, [r4, #32]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8017638:	fba2 2303 	umull	r2, r3, r2, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801763c:	9a05      	ldr	r2, [sp, #20]
 801763e:	1a52      	subs	r2, r2, r1
 8017640:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8017644:	f240 8157 	bls.w	80178f6 <tcp_slowtmr+0x352>
        ++pcb_remove;
 8017648:	3501      	adds	r5, #1
        ++pcb_reset;
 801764a:	f04f 0a01 	mov.w	sl, #1
        ++pcb_remove;
 801764e:	b2ed      	uxtb	r5, r5
    if (pcb->ooseq != NULL &&
 8017650:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8017652:	b148      	cbz	r0, 8017668 <tcp_slowtmr+0xc4>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8017654:	6833      	ldr	r3, [r6, #0]
 8017656:	6a22      	ldr	r2, [r4, #32]
 8017658:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 801765c:	1a9b      	subs	r3, r3, r2
 801765e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    if (pcb->ooseq != NULL &&
 8017662:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
 8017666:	d252      	bcs.n	801770e <tcp_slowtmr+0x16a>
    if (pcb->state == SYN_RCVD) {
 8017668:	7d23      	ldrb	r3, [r4, #20]
 801766a:	2b03      	cmp	r3, #3
 801766c:	d05b      	beq.n	8017726 <tcp_slowtmr+0x182>
    if (pcb->state == LAST_ACK) {
 801766e:	2b09      	cmp	r3, #9
 8017670:	d15e      	bne.n	8017730 <tcp_slowtmr+0x18c>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8017672:	6833      	ldr	r3, [r6, #0]
 8017674:	6a22      	ldr	r2, [r4, #32]
 8017676:	1a9b      	subs	r3, r3, r2
 8017678:	2bf0      	cmp	r3, #240	; 0xf0
 801767a:	d959      	bls.n	8017730 <tcp_slowtmr+0x18c>
      tcp_pcb_purge(pcb);
 801767c:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 801767e:	f8d4 b090 	ldr.w	fp, [r4, #144]	; 0x90
      tcp_pcb_purge(pcb);
 8017682:	f7ff ff4f 	bl	8017524 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8017686:	4b67      	ldr	r3, [pc, #412]	; (8017824 <tcp_slowtmr+0x280>)
 8017688:	681b      	ldr	r3, [r3, #0]
      if (prev != NULL) {
 801768a:	2f00      	cmp	r7, #0
 801768c:	f000 8197 	beq.w	80179be <tcp_slowtmr+0x41a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8017690:	42a3      	cmp	r3, r4
 8017692:	f000 81aa 	beq.w	80179ea <tcp_slowtmr+0x446>
        prev->next = pcb->next;
 8017696:	68e3      	ldr	r3, [r4, #12]
 8017698:	60fb      	str	r3, [r7, #12]
      if (pcb_reset) {
 801769a:	f1ba 0f00 	cmp.w	sl, #0
 801769e:	f040 8157 	bne.w	8017950 <tcp_slowtmr+0x3ac>
      tcp_free(pcb2);
 80176a2:	4620      	mov	r0, r4
      tcp_active_pcbs_changed = 0;
 80176a4:	4d62      	ldr	r5, [pc, #392]	; (8017830 <tcp_slowtmr+0x28c>)
      pcb = pcb->next;
 80176a6:	e9d4 4a03 	ldrd	r4, sl, [r4, #12]
      tcp_free(pcb2);
 80176aa:	f7ff fd01 	bl	80170b0 <tcp_free>
      tcp_active_pcbs_changed = 0;
 80176ae:	2300      	movs	r3, #0
 80176b0:	702b      	strb	r3, [r5, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80176b2:	f1bb 0f00 	cmp.w	fp, #0
 80176b6:	d007      	beq.n	80176c8 <tcp_slowtmr+0x124>
 80176b8:	4650      	mov	r0, sl
 80176ba:	f06f 010c 	mvn.w	r1, #12
 80176be:	47d8      	blx	fp
      if (tcp_active_pcbs_changed) {
 80176c0:	782b      	ldrb	r3, [r5, #0]
 80176c2:	2b00      	cmp	r3, #0
 80176c4:	f47f af7e 	bne.w	80175c4 <tcp_slowtmr+0x20>
  while (pcb != NULL) {
 80176c8:	2c00      	cmp	r4, #0
 80176ca:	d180      	bne.n	80175ce <tcp_slowtmr+0x2a>
  pcb = tcp_tw_pcbs;
 80176cc:	4f59      	ldr	r7, [pc, #356]	; (8017834 <tcp_slowtmr+0x290>)
 80176ce:	683c      	ldr	r4, [r7, #0]
  while (pcb != NULL) {
 80176d0:	b1d4      	cbz	r4, 8017708 <tcp_slowtmr+0x164>
  prev = NULL;
 80176d2:	2500      	movs	r5, #0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80176d4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8017850 <tcp_slowtmr+0x2ac>
 80176d8:	f8df a178 	ldr.w	sl, [pc, #376]	; 8017854 <tcp_slowtmr+0x2b0>
 80176dc:	f8df 815c 	ldr.w	r8, [pc, #348]	; 801783c <tcp_slowtmr+0x298>
 80176e0:	7d23      	ldrb	r3, [r4, #20]
 80176e2:	2b0a      	cmp	r3, #10
 80176e4:	d006      	beq.n	80176f4 <tcp_slowtmr+0x150>
 80176e6:	464b      	mov	r3, r9
 80176e8:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80176ec:	4651      	mov	r1, sl
 80176ee:	4640      	mov	r0, r8
 80176f0:	f009 f96a 	bl	80209c8 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80176f4:	6833      	ldr	r3, [r6, #0]
 80176f6:	6a22      	ldr	r2, [r4, #32]
 80176f8:	1a9b      	subs	r3, r3, r2
 80176fa:	2bf0      	cmp	r3, #240	; 0xf0
 80176fc:	f200 8114 	bhi.w	8017928 <tcp_slowtmr+0x384>
      pcb = pcb->next;
 8017700:	4625      	mov	r5, r4
 8017702:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 8017704:	2c00      	cmp	r4, #0
 8017706:	d1eb      	bne.n	80176e0 <tcp_slowtmr+0x13c>
}
 8017708:	b007      	add	sp, #28
 801770a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    struct tcp_seg *next = seg->next;
 801770e:	f8d0 b000 	ldr.w	fp, [r0]
    tcp_seg_free(seg);
 8017712:	f7ff fe35 	bl	8017380 <tcp_seg_free>
  while (seg != NULL) {
 8017716:	4658      	mov	r0, fp
 8017718:	2800      	cmp	r0, #0
 801771a:	d1f8      	bne.n	801770e <tcp_slowtmr+0x16a>
    if (pcb->state == SYN_RCVD) {
 801771c:	7d23      	ldrb	r3, [r4, #20]
    pcb->ooseq = NULL;
 801771e:	f8c4 b074 	str.w	fp, [r4, #116]	; 0x74
    if (pcb->state == SYN_RCVD) {
 8017722:	2b03      	cmp	r3, #3
 8017724:	d1a3      	bne.n	801766e <tcp_slowtmr+0xca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017726:	6833      	ldr	r3, [r6, #0]
 8017728:	6a22      	ldr	r2, [r4, #32]
 801772a:	1a9b      	subs	r3, r3, r2
 801772c:	2b28      	cmp	r3, #40	; 0x28
 801772e:	d8a5      	bhi.n	801767c <tcp_slowtmr+0xd8>
    if (pcb_remove) {
 8017730:	2d00      	cmp	r5, #0
 8017732:	d1a3      	bne.n	801767c <tcp_slowtmr+0xd8>
      ++prev->polltmr;
 8017734:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8017736:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 8017738:	3301      	adds	r3, #1
      pcb = pcb->next;
 801773a:	f8d4 a00c 	ldr.w	sl, [r4, #12]
      ++prev->polltmr;
 801773e:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 8017740:	429a      	cmp	r2, r3
      ++prev->polltmr;
 8017742:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8017744:	d811      	bhi.n	801776a <tcp_slowtmr+0x1c6>
        tcp_active_pcbs_changed = 0;
 8017746:	4f3a      	ldr	r7, [pc, #232]	; (8017830 <tcp_slowtmr+0x28c>)
        TCP_EVENT_POLL(prev, err);
 8017748:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        prev->polltmr = 0;
 801774c:	7725      	strb	r5, [r4, #28]
        tcp_active_pcbs_changed = 0;
 801774e:	703d      	strb	r5, [r7, #0]
        TCP_EVENT_POLL(prev, err);
 8017750:	2b00      	cmp	r3, #0
 8017752:	f000 810a 	beq.w	801796a <tcp_slowtmr+0x3c6>
 8017756:	4621      	mov	r1, r4
 8017758:	6920      	ldr	r0, [r4, #16]
 801775a:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 801775c:	783b      	ldrb	r3, [r7, #0]
 801775e:	2b00      	cmp	r3, #0
 8017760:	f47f af30 	bne.w	80175c4 <tcp_slowtmr+0x20>
        if (err == ERR_OK) {
 8017764:	2800      	cmp	r0, #0
 8017766:	f000 8100 	beq.w	801796a <tcp_slowtmr+0x3c6>
 801776a:	4627      	mov	r7, r4
      pcb = pcb->next;
 801776c:	4654      	mov	r4, sl
  while (pcb != NULL) {
 801776e:	2c00      	cmp	r4, #0
 8017770:	f47f af2d 	bne.w	80175ce <tcp_slowtmr+0x2a>
 8017774:	e7aa      	b.n	80176cc <tcp_slowtmr+0x128>
      if (pcb->flags & TF_RXCLOSED) {
 8017776:	8b63      	ldrh	r3, [r4, #26]
 8017778:	06db      	lsls	r3, r3, #27
 801777a:	d506      	bpl.n	801778a <tcp_slowtmr+0x1e6>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801777c:	6833      	ldr	r3, [r6, #0]
 801777e:	6a22      	ldr	r2, [r4, #32]
 8017780:	1a9b      	subs	r3, r3, r2
 8017782:	2b28      	cmp	r3, #40	; 0x28
 8017784:	d901      	bls.n	801778a <tcp_slowtmr+0x1e6>
          ++pcb_remove;
 8017786:	3501      	adds	r5, #1
 8017788:	b2ed      	uxtb	r5, r5
    pcb_reset = 0;
 801778a:	f04f 0a00 	mov.w	sl, #0
 801778e:	e75f      	b.n	8017650 <tcp_slowtmr+0xac>
      if (pcb->persist_backoff > 0) {
 8017790:	f894 5099 	ldrb.w	r5, [r4, #153]	; 0x99
 8017794:	2d00      	cmp	r5, #0
 8017796:	d05f      	beq.n	8017858 <tcp_slowtmr+0x2b4>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8017798:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801779a:	b133      	cbz	r3, 80177aa <tcp_slowtmr+0x206>
 801779c:	464b      	mov	r3, r9
 801779e:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80177a2:	4925      	ldr	r1, [pc, #148]	; (8017838 <tcp_slowtmr+0x294>)
 80177a4:	4825      	ldr	r0, [pc, #148]	; (801783c <tcp_slowtmr+0x298>)
 80177a6:	f009 f90f 	bl	80209c8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80177aa:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80177ac:	2b00      	cmp	r3, #0
 80177ae:	f000 8131 	beq.w	8017a14 <tcp_slowtmr+0x470>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80177b2:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 80177b6:	2b0b      	cmp	r3, #11
 80177b8:	f240 80e0 	bls.w	801797c <tcp_slowtmr+0x3d8>
 80177bc:	7d23      	ldrb	r3, [r4, #20]
          ++pcb_remove; /* max probes reached */
 80177be:	2501      	movs	r5, #1
 80177c0:	e720      	b.n	8017604 <tcp_slowtmr+0x60>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80177c2:	464b      	mov	r3, r9
 80177c4:	f240 42be 	movw	r2, #1214	; 0x4be
 80177c8:	491d      	ldr	r1, [pc, #116]	; (8017840 <tcp_slowtmr+0x29c>)
 80177ca:	481c      	ldr	r0, [pc, #112]	; (801783c <tcp_slowtmr+0x298>)
 80177cc:	f009 f8fc 	bl	80209c8 <iprintf>
 80177d0:	7d23      	ldrb	r3, [r4, #20]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80177d2:	2b01      	cmp	r3, #1
 80177d4:	f47f af02 	bne.w	80175dc <tcp_slowtmr+0x38>
 80177d8:	464b      	mov	r3, r9
 80177da:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80177de:	4919      	ldr	r1, [pc, #100]	; (8017844 <tcp_slowtmr+0x2a0>)
 80177e0:	4816      	ldr	r0, [pc, #88]	; (801783c <tcp_slowtmr+0x298>)
 80177e2:	f009 f8f1 	bl	80209c8 <iprintf>
 80177e6:	7d23      	ldrb	r3, [r4, #20]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80177e8:	2b0a      	cmp	r3, #10
 80177ea:	f47f aefa 	bne.w	80175e2 <tcp_slowtmr+0x3e>
 80177ee:	464b      	mov	r3, r9
 80177f0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80177f4:	4914      	ldr	r1, [pc, #80]	; (8017848 <tcp_slowtmr+0x2a4>)
 80177f6:	4811      	ldr	r0, [pc, #68]	; (801783c <tcp_slowtmr+0x298>)
 80177f8:	f009 f8e6 	bl	80209c8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80177fc:	f898 2000 	ldrb.w	r2, [r8]
 8017800:	7fa3      	ldrb	r3, [r4, #30]
 8017802:	4293      	cmp	r3, r2
 8017804:	f47f aef3 	bne.w	80175ee <tcp_slowtmr+0x4a>
      continue;
 8017808:	4627      	mov	r7, r4
      pcb = pcb->next;
 801780a:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 801780c:	2c00      	cmp	r4, #0
 801780e:	f47f aede 	bne.w	80175ce <tcp_slowtmr+0x2a>
 8017812:	e75b      	b.n	80176cc <tcp_slowtmr+0x128>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8017814:	2a05      	cmp	r2, #5
 8017816:	d9bb      	bls.n	8017790 <tcp_slowtmr+0x1ec>
    pcb_reset = 0;
 8017818:	f04f 0a00 	mov.w	sl, #0
      ++pcb_remove;
 801781c:	2501      	movs	r5, #1
 801781e:	e717      	b.n	8017650 <tcp_slowtmr+0xac>
 8017820:	20036274 	.word	0x20036274
 8017824:	20036270 	.word	0x20036270
 8017828:	000a4cb8 	.word	0x000a4cb8
 801782c:	10624dd3 	.word	0x10624dd3
 8017830:	2003626c 	.word	0x2003626c
 8017834:	20036280 	.word	0x20036280
 8017838:	0803df60 	.word	0x0803df60
 801783c:	0802697c 	.word	0x0802697c
 8017840:	0803ded8 	.word	0x0803ded8
 8017844:	0803df04 	.word	0x0803df04
 8017848:	0803df30 	.word	0x0803df30
 801784c:	200223e5 	.word	0x200223e5
 8017850:	0803db18 	.word	0x0803db18
 8017854:	0803e024 	.word	0x0803e024
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8017858:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 801785c:	2a00      	cmp	r2, #0
 801785e:	db06      	blt.n	801786e <tcp_slowtmr+0x2ca>
 8017860:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8017864:	428a      	cmp	r2, r1
 8017866:	d002      	beq.n	801786e <tcp_slowtmr+0x2ca>
          ++pcb->rtime;
 8017868:	3201      	adds	r2, #1
 801786a:	b212      	sxth	r2, r2
 801786c:	8622      	strh	r2, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 801786e:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 8017872:	4291      	cmp	r1, r2
 8017874:	f73f aec6 	bgt.w	8017604 <tcp_slowtmr+0x60>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8017878:	4620      	mov	r0, r4
 801787a:	f003 f9e9 	bl	801ac50 <tcp_rexmit_rto_prepare>
 801787e:	2800      	cmp	r0, #0
 8017880:	f040 80d0 	bne.w	8017a24 <tcp_slowtmr+0x480>
 8017884:	7d23      	ldrb	r3, [r4, #20]
            if (pcb->state != SYN_SENT) {
 8017886:	2b02      	cmp	r3, #2
 8017888:	d016      	beq.n	80178b8 <tcp_slowtmr+0x314>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801788a:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801788e:	f647 71ff 	movw	r1, #32767	; 0x7fff
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8017892:	f8df c1f8 	ldr.w	ip, [pc, #504]	; 8017a8c <tcp_slowtmr+0x4e8>
 8017896:	2a0c      	cmp	r2, #12
 8017898:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 801789c:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 80178a0:	bf28      	it	cs
 80178a2:	220c      	movcs	r2, #12
 80178a4:	eb03 03e0 	add.w	r3, r3, r0, asr #3
 80178a8:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80178ac:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80178ae:	428b      	cmp	r3, r1
 80178b0:	bfa8      	it	ge
 80178b2:	460b      	movge	r3, r1
 80178b4:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80178b8:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
            pcb->rtime = 0;
 80178bc:	2200      	movs	r2, #0
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80178be:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80178c2:	8e61      	ldrh	r1, [r4, #50]	; 0x32
            pcb->ssthresh = eff_wnd >> 1;
 80178c4:	4283      	cmp	r3, r0
            pcb->rtime = 0;
 80178c6:	8622      	strh	r2, [r4, #48]	; 0x30
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80178c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
            pcb->cwnd = pcb->mss;
 80178cc:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
            pcb->ssthresh = eff_wnd >> 1;
 80178d0:	bf28      	it	cs
 80178d2:	4603      	movcs	r3, r0
            tcp_rexmit_rto_commit(pcb);
 80178d4:	4620      	mov	r0, r4
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80178d6:	b292      	uxth	r2, r2
            pcb->ssthresh = eff_wnd >> 1;
 80178d8:	085b      	lsrs	r3, r3, #1
 80178da:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80178de:	4293      	cmp	r3, r2
            pcb->bytes_acked = 0;
 80178e0:	f04f 0300 	mov.w	r3, #0
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80178e4:	bf38      	it	cc
 80178e6:	f8a4 204a 	strhcc.w	r2, [r4, #74]	; 0x4a
            pcb->bytes_acked = 0;
 80178ea:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
 80178ee:	f003 fce1 	bl	801b2b4 <tcp_rexmit_rto_commit>
 80178f2:	7d23      	ldrb	r3, [r4, #20]
 80178f4:	e686      	b.n	8017604 <tcp_slowtmr+0x60>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80178f6:	495b      	ldr	r1, [pc, #364]	; (8017a64 <tcp_slowtmr+0x4c0>)
 80178f8:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 80178fc:	fb01 0303 	mla	r3, r1, r3, r0
                 / TCP_SLOW_INTERVAL) {
 8017900:	4959      	ldr	r1, [pc, #356]	; (8017a68 <tcp_slowtmr+0x4c4>)
 8017902:	fba1 1303 	umull	r1, r3, r1, r3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017906:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 801790a:	f67f af3e 	bls.w	801778a <tcp_slowtmr+0x1e6>
        err = tcp_keepalive(pcb);
 801790e:	4620      	mov	r0, r4
 8017910:	f003 fd0a 	bl	801b328 <tcp_keepalive>
        if (err == ERR_OK) {
 8017914:	2800      	cmp	r0, #0
 8017916:	f47f af38 	bne.w	801778a <tcp_slowtmr+0x1e6>
          pcb->keep_cnt_sent++;
 801791a:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
    pcb_reset = 0;
 801791e:	4682      	mov	sl, r0
          pcb->keep_cnt_sent++;
 8017920:	3301      	adds	r3, #1
 8017922:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
 8017926:	e693      	b.n	8017650 <tcp_slowtmr+0xac>
      tcp_pcb_purge(pcb);
 8017928:	4620      	mov	r0, r4
 801792a:	f7ff fdfb 	bl	8017524 <tcp_pcb_purge>
      if (prev != NULL) {
 801792e:	2d00      	cmp	r5, #0
 8017930:	d063      	beq.n	80179fa <tcp_slowtmr+0x456>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8017932:	683b      	ldr	r3, [r7, #0]
 8017934:	42a3      	cmp	r3, r4
 8017936:	f000 8086 	beq.w	8017a46 <tcp_slowtmr+0x4a2>
        prev->next = pcb->next;
 801793a:	68e3      	ldr	r3, [r4, #12]
 801793c:	60eb      	str	r3, [r5, #12]
 801793e:	68e3      	ldr	r3, [r4, #12]
      tcp_free(pcb2);
 8017940:	4620      	mov	r0, r4
      pcb = pcb->next;
 8017942:	461c      	mov	r4, r3
      tcp_free(pcb2);
 8017944:	f7ff fbb4 	bl	80170b0 <tcp_free>
  while (pcb != NULL) {
 8017948:	2c00      	cmp	r4, #0
 801794a:	f47f aec9 	bne.w	80176e0 <tcp_slowtmr+0x13c>
 801794e:	e6db      	b.n	8017708 <tcp_slowtmr+0x164>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8017950:	8b25      	ldrh	r5, [r4, #24]
 8017952:	1d20      	adds	r0, r4, #4
 8017954:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8017956:	4623      	mov	r3, r4
 8017958:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801795a:	9502      	str	r5, [sp, #8]
 801795c:	8ae5      	ldrh	r5, [r4, #22]
 801795e:	9000      	str	r0, [sp, #0]
 8017960:	4620      	mov	r0, r4
 8017962:	9501      	str	r5, [sp, #4]
 8017964:	f003 fa32 	bl	801adcc <tcp_rst>
 8017968:	e69b      	b.n	80176a2 <tcp_slowtmr+0xfe>
          tcp_output(prev);
 801796a:	4620      	mov	r0, r4
 801796c:	4627      	mov	r7, r4
      pcb = pcb->next;
 801796e:	4654      	mov	r4, sl
          tcp_output(prev);
 8017970:	f003 faa8 	bl	801aec4 <tcp_output>
  while (pcb != NULL) {
 8017974:	2c00      	cmp	r4, #0
 8017976:	f47f ae2a 	bne.w	80175ce <tcp_slowtmr+0x2a>
 801797a:	e6a7      	b.n	80176cc <tcp_slowtmr+0x128>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801797c:	4a3b      	ldr	r2, [pc, #236]	; (8017a6c <tcp_slowtmr+0x4c8>)
 801797e:	f894 1099 	ldrb.w	r1, [r4, #153]	; 0x99
          if (pcb->persist_cnt < backoff_cnt) {
 8017982:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8017986:	440a      	add	r2, r1
 8017988:	f812 2c01 	ldrb.w	r2, [r2, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 801798c:	4293      	cmp	r3, r2
 801798e:	d323      	bcc.n	80179d8 <tcp_slowtmr+0x434>
            if (pcb->snd_wnd == 0) {
 8017990:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8017994:	2d00      	cmp	r5, #0
 8017996:	d04f      	beq.n	8017a38 <tcp_slowtmr+0x494>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8017998:	4629      	mov	r1, r5
 801799a:	4620      	mov	r0, r4
 801799c:	f002 ff9a 	bl	801a8d4 <tcp_split_unsent_seg>
 80179a0:	2800      	cmp	r0, #0
 80179a2:	d058      	beq.n	8017a56 <tcp_slowtmr+0x4b2>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80179a4:	f894 2099 	ldrb.w	r2, [r4, #153]	; 0x99
              pcb->persist_cnt = 0;
 80179a8:	2500      	movs	r5, #0
 80179aa:	7d23      	ldrb	r3, [r4, #20]
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80179ac:	2a06      	cmp	r2, #6
              pcb->persist_cnt = 0;
 80179ae:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80179b2:	f63f ae27 	bhi.w	8017604 <tcp_slowtmr+0x60>
                pcb->persist_backoff++;
 80179b6:	3201      	adds	r2, #1
 80179b8:	f884 2099 	strb.w	r2, [r4, #153]	; 0x99
 80179bc:	e622      	b.n	8017604 <tcp_slowtmr+0x60>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80179be:	42a3      	cmp	r3, r4
 80179c0:	d006      	beq.n	80179d0 <tcp_slowtmr+0x42c>
 80179c2:	464b      	mov	r3, r9
 80179c4:	f240 5271 	movw	r2, #1393	; 0x571
 80179c8:	4929      	ldr	r1, [pc, #164]	; (8017a70 <tcp_slowtmr+0x4cc>)
 80179ca:	482a      	ldr	r0, [pc, #168]	; (8017a74 <tcp_slowtmr+0x4d0>)
 80179cc:	f008 fffc 	bl	80209c8 <iprintf>
        tcp_active_pcbs = pcb->next;
 80179d0:	68e3      	ldr	r3, [r4, #12]
 80179d2:	4a29      	ldr	r2, [pc, #164]	; (8017a78 <tcp_slowtmr+0x4d4>)
 80179d4:	6013      	str	r3, [r2, #0]
 80179d6:	e660      	b.n	801769a <tcp_slowtmr+0xf6>
            pcb->persist_cnt++;
 80179d8:	3301      	adds	r3, #1
 80179da:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 80179dc:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 80179de:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80179e2:	d2d5      	bcs.n	8017990 <tcp_slowtmr+0x3ec>
 80179e4:	7d23      	ldrb	r3, [r4, #20]
    pcb_remove = 0;
 80179e6:	2500      	movs	r5, #0
 80179e8:	e60c      	b.n	8017604 <tcp_slowtmr+0x60>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80179ea:	464b      	mov	r3, r9
 80179ec:	f240 526d 	movw	r2, #1389	; 0x56d
 80179f0:	4922      	ldr	r1, [pc, #136]	; (8017a7c <tcp_slowtmr+0x4d8>)
 80179f2:	4820      	ldr	r0, [pc, #128]	; (8017a74 <tcp_slowtmr+0x4d0>)
 80179f4:	f008 ffe8 	bl	80209c8 <iprintf>
 80179f8:	e64d      	b.n	8017696 <tcp_slowtmr+0xf2>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80179fa:	683b      	ldr	r3, [r7, #0]
 80179fc:	42a3      	cmp	r3, r4
 80179fe:	d006      	beq.n	8017a0e <tcp_slowtmr+0x46a>
 8017a00:	464b      	mov	r3, r9
 8017a02:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8017a06:	491e      	ldr	r1, [pc, #120]	; (8017a80 <tcp_slowtmr+0x4dc>)
 8017a08:	4640      	mov	r0, r8
 8017a0a:	f008 ffdd 	bl	80209c8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8017a0e:	68e3      	ldr	r3, [r4, #12]
 8017a10:	603b      	str	r3, [r7, #0]
 8017a12:	e795      	b.n	8017940 <tcp_slowtmr+0x39c>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8017a14:	464b      	mov	r3, r9
 8017a16:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8017a1a:	491a      	ldr	r1, [pc, #104]	; (8017a84 <tcp_slowtmr+0x4e0>)
 8017a1c:	4815      	ldr	r0, [pc, #84]	; (8017a74 <tcp_slowtmr+0x4d0>)
 8017a1e:	f008 ffd3 	bl	80209c8 <iprintf>
 8017a22:	e6c6      	b.n	80177b2 <tcp_slowtmr+0x20e>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8017a24:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8017a26:	7d23      	ldrb	r3, [r4, #20]
 8017a28:	2a00      	cmp	r2, #0
 8017a2a:	f47f adeb 	bne.w	8017604 <tcp_slowtmr+0x60>
 8017a2e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8017a30:	2a00      	cmp	r2, #0
 8017a32:	f47f af28 	bne.w	8017886 <tcp_slowtmr+0x2e2>
 8017a36:	e5e5      	b.n	8017604 <tcp_slowtmr+0x60>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8017a38:	4620      	mov	r0, r4
 8017a3a:	f003 fc9f 	bl	801b37c <tcp_zero_window_probe>
 8017a3e:	2800      	cmp	r0, #0
 8017a40:	d0b0      	beq.n	80179a4 <tcp_slowtmr+0x400>
 8017a42:	7d23      	ldrb	r3, [r4, #20]
 8017a44:	e5de      	b.n	8017604 <tcp_slowtmr+0x60>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8017a46:	464b      	mov	r3, r9
 8017a48:	f240 52af 	movw	r2, #1455	; 0x5af
 8017a4c:	490e      	ldr	r1, [pc, #56]	; (8017a88 <tcp_slowtmr+0x4e4>)
 8017a4e:	4640      	mov	r0, r8
 8017a50:	f008 ffba 	bl	80209c8 <iprintf>
 8017a54:	e771      	b.n	801793a <tcp_slowtmr+0x396>
                if (tcp_output(pcb) == ERR_OK) {
 8017a56:	4620      	mov	r0, r4
 8017a58:	f003 fa34 	bl	801aec4 <tcp_output>
 8017a5c:	2800      	cmp	r0, #0
 8017a5e:	d1a1      	bne.n	80179a4 <tcp_slowtmr+0x400>
    pcb_remove = 0;
 8017a60:	4605      	mov	r5, r0
 8017a62:	e7ee      	b.n	8017a42 <tcp_slowtmr+0x49e>
 8017a64:	000124f8 	.word	0x000124f8
 8017a68:	10624dd3 	.word	0x10624dd3
 8017a6c:	0803dd8c 	.word	0x0803dd8c
 8017a70:	0803dff8 	.word	0x0803dff8
 8017a74:	0802697c 	.word	0x0802697c
 8017a78:	20036270 	.word	0x20036270
 8017a7c:	0803dfcc 	.word	0x0803dfcc
 8017a80:	0803e07c 	.word	0x0803e07c
 8017a84:	0803df94 	.word	0x0803df94
 8017a88:	0803e054 	.word	0x0803e054
 8017a8c:	0803da58 	.word	0x0803da58

08017a90 <tcp_pcb_remove>:
{
 8017a90:	b538      	push	{r3, r4, r5, lr}
 8017a92:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8017a94:	460c      	mov	r4, r1
 8017a96:	2900      	cmp	r1, #0
 8017a98:	d04f      	beq.n	8017b3a <tcp_pcb_remove+0xaa>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8017a9a:	2d00      	cmp	r5, #0
 8017a9c:	d056      	beq.n	8017b4c <tcp_pcb_remove+0xbc>
  TCP_RMV(pcblist, pcb);
 8017a9e:	682a      	ldr	r2, [r5, #0]
 8017aa0:	42a2      	cmp	r2, r4
 8017aa2:	d047      	beq.n	8017b34 <tcp_pcb_remove+0xa4>
 8017aa4:	b14a      	cbz	r2, 8017aba <tcp_pcb_remove+0x2a>
 8017aa6:	68d3      	ldr	r3, [r2, #12]
 8017aa8:	429c      	cmp	r4, r3
 8017aaa:	d03f      	beq.n	8017b2c <tcp_pcb_remove+0x9c>
 8017aac:	b12b      	cbz	r3, 8017aba <tcp_pcb_remove+0x2a>
 8017aae:	68da      	ldr	r2, [r3, #12]
 8017ab0:	42a2      	cmp	r2, r4
 8017ab2:	d03c      	beq.n	8017b2e <tcp_pcb_remove+0x9e>
 8017ab4:	4613      	mov	r3, r2
 8017ab6:	2b00      	cmp	r3, #0
 8017ab8:	d1f9      	bne.n	8017aae <tcp_pcb_remove+0x1e>
 8017aba:	2300      	movs	r3, #0
  tcp_pcb_purge(pcb);
 8017abc:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 8017abe:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 8017ac0:	f7ff fd30 	bl	8017524 <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 8017ac4:	7d23      	ldrb	r3, [r4, #20]
 8017ac6:	2b0a      	cmp	r3, #10
 8017ac8:	d02a      	beq.n	8017b20 <tcp_pcb_remove+0x90>
 8017aca:	2b01      	cmp	r3, #1
 8017acc:	d028      	beq.n	8017b20 <tcp_pcb_remove+0x90>
      (pcb->flags & TF_ACK_DELAY)) {
 8017ace:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 8017ad0:	07da      	lsls	r2, r3, #31
 8017ad2:	d41e      	bmi.n	8017b12 <tcp_pcb_remove+0x82>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8017ad4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8017ad6:	b133      	cbz	r3, 8017ae6 <tcp_pcb_remove+0x56>
 8017ad8:	4b20      	ldr	r3, [pc, #128]	; (8017b5c <tcp_pcb_remove+0xcc>)
 8017ada:	f640 0293 	movw	r2, #2195	; 0x893
 8017ade:	4920      	ldr	r1, [pc, #128]	; (8017b60 <tcp_pcb_remove+0xd0>)
 8017ae0:	4820      	ldr	r0, [pc, #128]	; (8017b64 <tcp_pcb_remove+0xd4>)
 8017ae2:	f008 ff71 	bl	80209c8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8017ae6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017ae8:	b133      	cbz	r3, 8017af8 <tcp_pcb_remove+0x68>
 8017aea:	4b1c      	ldr	r3, [pc, #112]	; (8017b5c <tcp_pcb_remove+0xcc>)
 8017aec:	f640 0294 	movw	r2, #2196	; 0x894
 8017af0:	491d      	ldr	r1, [pc, #116]	; (8017b68 <tcp_pcb_remove+0xd8>)
 8017af2:	481c      	ldr	r0, [pc, #112]	; (8017b64 <tcp_pcb_remove+0xd4>)
 8017af4:	f008 ff68 	bl	80209c8 <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8017af8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8017afa:	b133      	cbz	r3, 8017b0a <tcp_pcb_remove+0x7a>
 8017afc:	4b17      	ldr	r3, [pc, #92]	; (8017b5c <tcp_pcb_remove+0xcc>)
 8017afe:	f640 0296 	movw	r2, #2198	; 0x896
 8017b02:	491a      	ldr	r1, [pc, #104]	; (8017b6c <tcp_pcb_remove+0xdc>)
 8017b04:	4817      	ldr	r0, [pc, #92]	; (8017b64 <tcp_pcb_remove+0xd4>)
 8017b06:	f008 ff5f 	bl	80209c8 <iprintf>
  pcb->state = CLOSED;
 8017b0a:	2300      	movs	r3, #0
 8017b0c:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 8017b0e:	82e3      	strh	r3, [r4, #22]
}
 8017b10:	bd38      	pop	{r3, r4, r5, pc}
    tcp_ack_now(pcb);
 8017b12:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 8017b16:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 8017b18:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 8017b1a:	f003 f9d3 	bl	801aec4 <tcp_output>
 8017b1e:	7d23      	ldrb	r3, [r4, #20]
  if (pcb->state != LISTEN) {
 8017b20:	2b01      	cmp	r3, #1
 8017b22:	d0f2      	beq.n	8017b0a <tcp_pcb_remove+0x7a>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8017b24:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8017b26:	2b00      	cmp	r3, #0
 8017b28:	d1d6      	bne.n	8017ad8 <tcp_pcb_remove+0x48>
 8017b2a:	e7dc      	b.n	8017ae6 <tcp_pcb_remove+0x56>
  TCP_RMV(pcblist, pcb);
 8017b2c:	4613      	mov	r3, r2
 8017b2e:	68e2      	ldr	r2, [r4, #12]
 8017b30:	60da      	str	r2, [r3, #12]
 8017b32:	e7c2      	b.n	8017aba <tcp_pcb_remove+0x2a>
 8017b34:	68e3      	ldr	r3, [r4, #12]
 8017b36:	602b      	str	r3, [r5, #0]
 8017b38:	e7bf      	b.n	8017aba <tcp_pcb_remove+0x2a>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8017b3a:	4b08      	ldr	r3, [pc, #32]	; (8017b5c <tcp_pcb_remove+0xcc>)
 8017b3c:	f640 0283 	movw	r2, #2179	; 0x883
 8017b40:	490b      	ldr	r1, [pc, #44]	; (8017b70 <tcp_pcb_remove+0xe0>)
 8017b42:	4808      	ldr	r0, [pc, #32]	; (8017b64 <tcp_pcb_remove+0xd4>)
 8017b44:	f008 ff40 	bl	80209c8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8017b48:	2d00      	cmp	r5, #0
 8017b4a:	d1a8      	bne.n	8017a9e <tcp_pcb_remove+0xe>
 8017b4c:	4b03      	ldr	r3, [pc, #12]	; (8017b5c <tcp_pcb_remove+0xcc>)
 8017b4e:	f640 0284 	movw	r2, #2180	; 0x884
 8017b52:	4908      	ldr	r1, [pc, #32]	; (8017b74 <tcp_pcb_remove+0xe4>)
 8017b54:	4803      	ldr	r0, [pc, #12]	; (8017b64 <tcp_pcb_remove+0xd4>)
 8017b56:	f008 ff37 	bl	80209c8 <iprintf>
 8017b5a:	e7a0      	b.n	8017a9e <tcp_pcb_remove+0xe>
 8017b5c:	0803db18 	.word	0x0803db18
 8017b60:	0803dd40 	.word	0x0803dd40
 8017b64:	0802697c 	.word	0x0802697c
 8017b68:	0803dd58 	.word	0x0803dd58
 8017b6c:	0803dd74 	.word	0x0803dd74
 8017b70:	0803dd04 	.word	0x0803dd04
 8017b74:	0803dd20 	.word	0x0803dd20

08017b78 <tcp_abandon>:
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8017b78:	2800      	cmp	r0, #0
 8017b7a:	d07e      	beq.n	8017c7a <tcp_abandon+0x102>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8017b7c:	7d03      	ldrb	r3, [r0, #20]
 8017b7e:	2b01      	cmp	r3, #1
{
 8017b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b84:	460d      	mov	r5, r1
 8017b86:	b085      	sub	sp, #20
 8017b88:	4604      	mov	r4, r0
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8017b8a:	d062      	beq.n	8017c52 <tcp_abandon+0xda>
  if (pcb->state == TIME_WAIT) {
 8017b8c:	2b0a      	cmp	r3, #10
 8017b8e:	d06a      	beq.n	8017c66 <tcp_abandon+0xee>
    seqno = pcb->snd_nxt;
 8017b90:	f8d4 9050 	ldr.w	r9, [r4, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 8017b94:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    errf = pcb->errf;
 8017b98:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
    errf_arg = pcb->callback_arg;
 8017b9c:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8017ba0:	8ae7      	ldrh	r7, [r4, #22]
    if (pcb->state == CLOSED) {
 8017ba2:	b98b      	cbnz	r3, 8017bc8 <tcp_abandon+0x50>
      if (pcb->local_port != 0) {
 8017ba4:	2f00      	cmp	r7, #0
 8017ba6:	d03f      	beq.n	8017c28 <tcp_abandon+0xb0>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8017ba8:	4b3b      	ldr	r3, [pc, #236]	; (8017c98 <tcp_abandon+0x120>)
 8017baa:	681a      	ldr	r2, [r3, #0]
 8017bac:	42a2      	cmp	r2, r4
 8017bae:	d049      	beq.n	8017c44 <tcp_abandon+0xcc>
 8017bb0:	2a00      	cmp	r2, #0
 8017bb2:	d049      	beq.n	8017c48 <tcp_abandon+0xd0>
 8017bb4:	68d3      	ldr	r3, [r2, #12]
 8017bb6:	429c      	cmp	r4, r3
 8017bb8:	d066      	beq.n	8017c88 <tcp_abandon+0x110>
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	d044      	beq.n	8017c48 <tcp_abandon+0xd0>
 8017bbe:	68da      	ldr	r2, [r3, #12]
 8017bc0:	42a2      	cmp	r2, r4
 8017bc2:	d062      	beq.n	8017c8a <tcp_abandon+0x112>
 8017bc4:	4613      	mov	r3, r2
 8017bc6:	e7f8      	b.n	8017bba <tcp_abandon+0x42>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8017bc8:	4621      	mov	r1, r4
 8017bca:	4834      	ldr	r0, [pc, #208]	; (8017c9c <tcp_abandon+0x124>)
 8017bcc:	f7ff ff60 	bl	8017a90 <tcp_pcb_remove>
 8017bd0:	4b33      	ldr	r3, [pc, #204]	; (8017ca0 <tcp_abandon+0x128>)
 8017bd2:	2201      	movs	r2, #1
 8017bd4:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8017bd6:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8017bd8:	b130      	cbz	r0, 8017be8 <tcp_abandon+0x70>
    struct tcp_seg *next = seg->next;
 8017bda:	f8d0 b000 	ldr.w	fp, [r0]
    tcp_seg_free(seg);
 8017bde:	f7ff fbcf 	bl	8017380 <tcp_seg_free>
  while (seg != NULL) {
 8017be2:	4658      	mov	r0, fp
 8017be4:	2800      	cmp	r0, #0
 8017be6:	d1f8      	bne.n	8017bda <tcp_abandon+0x62>
    if (pcb->unsent != NULL) {
 8017be8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8017bea:	b130      	cbz	r0, 8017bfa <tcp_abandon+0x82>
    struct tcp_seg *next = seg->next;
 8017bec:	f8d0 b000 	ldr.w	fp, [r0]
    tcp_seg_free(seg);
 8017bf0:	f7ff fbc6 	bl	8017380 <tcp_seg_free>
  while (seg != NULL) {
 8017bf4:	4658      	mov	r0, fp
 8017bf6:	2800      	cmp	r0, #0
 8017bf8:	d1f8      	bne.n	8017bec <tcp_abandon+0x74>
    if (pcb->ooseq != NULL) {
 8017bfa:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8017bfc:	b130      	cbz	r0, 8017c0c <tcp_abandon+0x94>
    struct tcp_seg *next = seg->next;
 8017bfe:	f8d0 b000 	ldr.w	fp, [r0]
    tcp_seg_free(seg);
 8017c02:	f7ff fbbd 	bl	8017380 <tcp_seg_free>
  while (seg != NULL) {
 8017c06:	4658      	mov	r0, fp
 8017c08:	2800      	cmp	r0, #0
 8017c0a:	d1f8      	bne.n	8017bfe <tcp_abandon+0x86>
    if (send_rst) {
 8017c0c:	b975      	cbnz	r5, 8017c2c <tcp_abandon+0xb4>
    tcp_free(pcb);
 8017c0e:	4620      	mov	r0, r4
 8017c10:	f7ff fa4e 	bl	80170b0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8017c14:	2e00      	cmp	r6, #0
 8017c16:	d03b      	beq.n	8017c90 <tcp_abandon+0x118>
 8017c18:	4640      	mov	r0, r8
 8017c1a:	f06f 010c 	mvn.w	r1, #12
 8017c1e:	4633      	mov	r3, r6
}
 8017c20:	b005      	add	sp, #20
 8017c22:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8017c26:	4718      	bx	r3
    int send_rst = 0;
 8017c28:	461d      	mov	r5, r3
 8017c2a:	e7d4      	b.n	8017bd6 <tcp_abandon+0x5e>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8017c2c:	8b23      	ldrh	r3, [r4, #24]
 8017c2e:	1d25      	adds	r5, r4, #4
 8017c30:	4652      	mov	r2, sl
 8017c32:	4649      	mov	r1, r9
 8017c34:	9302      	str	r3, [sp, #8]
 8017c36:	4620      	mov	r0, r4
 8017c38:	4623      	mov	r3, r4
 8017c3a:	9701      	str	r7, [sp, #4]
 8017c3c:	9500      	str	r5, [sp, #0]
 8017c3e:	f003 f8c5 	bl	801adcc <tcp_rst>
 8017c42:	e7e4      	b.n	8017c0e <tcp_abandon+0x96>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8017c44:	68e2      	ldr	r2, [r4, #12]
 8017c46:	601a      	str	r2, [r3, #0]
 8017c48:	2300      	movs	r3, #0
    u16_t local_port = 0;
 8017c4a:	461f      	mov	r7, r3
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8017c4c:	60e3      	str	r3, [r4, #12]
    int send_rst = 0;
 8017c4e:	461d      	mov	r5, r3
 8017c50:	e7c1      	b.n	8017bd6 <tcp_abandon+0x5e>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8017c52:	4b14      	ldr	r3, [pc, #80]	; (8017ca4 <tcp_abandon+0x12c>)
 8017c54:	f240 2241 	movw	r2, #577	; 0x241
 8017c58:	4913      	ldr	r1, [pc, #76]	; (8017ca8 <tcp_abandon+0x130>)
 8017c5a:	4814      	ldr	r0, [pc, #80]	; (8017cac <tcp_abandon+0x134>)
 8017c5c:	f008 feb4 	bl	80209c8 <iprintf>
 8017c60:	7d23      	ldrb	r3, [r4, #20]
  if (pcb->state == TIME_WAIT) {
 8017c62:	2b0a      	cmp	r3, #10
 8017c64:	d194      	bne.n	8017b90 <tcp_abandon+0x18>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8017c66:	4621      	mov	r1, r4
 8017c68:	4811      	ldr	r0, [pc, #68]	; (8017cb0 <tcp_abandon+0x138>)
 8017c6a:	f7ff ff11 	bl	8017a90 <tcp_pcb_remove>
    tcp_free(pcb);
 8017c6e:	4620      	mov	r0, r4
}
 8017c70:	b005      	add	sp, #20
 8017c72:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    tcp_free(pcb);
 8017c76:	f7ff ba1b 	b.w	80170b0 <tcp_free>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8017c7a:	4b0a      	ldr	r3, [pc, #40]	; (8017ca4 <tcp_abandon+0x12c>)
 8017c7c:	f240 223d 	movw	r2, #573	; 0x23d
 8017c80:	490c      	ldr	r1, [pc, #48]	; (8017cb4 <tcp_abandon+0x13c>)
 8017c82:	480a      	ldr	r0, [pc, #40]	; (8017cac <tcp_abandon+0x134>)
 8017c84:	f008 bea0 	b.w	80209c8 <iprintf>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8017c88:	4613      	mov	r3, r2
 8017c8a:	68e2      	ldr	r2, [r4, #12]
 8017c8c:	60da      	str	r2, [r3, #12]
 8017c8e:	e7db      	b.n	8017c48 <tcp_abandon+0xd0>
}
 8017c90:	b005      	add	sp, #20
 8017c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c96:	bf00      	nop
 8017c98:	2003627c 	.word	0x2003627c
 8017c9c:	20036270 	.word	0x20036270
 8017ca0:	2003626c 	.word	0x2003626c
 8017ca4:	0803db18 	.word	0x0803db18
 8017ca8:	0803da04 	.word	0x0803da04
 8017cac:	0802697c 	.word	0x0802697c
 8017cb0:	20036280 	.word	0x20036280
 8017cb4:	0803d9e8 	.word	0x0803d9e8

08017cb8 <tcp_abort>:
  tcp_abandon(pcb, 1);
 8017cb8:	2101      	movs	r1, #1
 8017cba:	f7ff bf5d 	b.w	8017b78 <tcp_abandon>
 8017cbe:	bf00      	nop

08017cc0 <tcp_accept_null>:
{
 8017cc0:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8017cc2:	460c      	mov	r4, r1
 8017cc4:	b131      	cbz	r1, 8017cd4 <tcp_accept_null+0x14>
  tcp_abandon(pcb, 1);
 8017cc6:	4620      	mov	r0, r4
 8017cc8:	2101      	movs	r1, #1
 8017cca:	f7ff ff55 	bl	8017b78 <tcp_abandon>
}
 8017cce:	f06f 000c 	mvn.w	r0, #12
 8017cd2:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8017cd4:	4b06      	ldr	r3, [pc, #24]	; (8017cf0 <tcp_accept_null+0x30>)
 8017cd6:	f240 320f 	movw	r2, #783	; 0x30f
 8017cda:	4906      	ldr	r1, [pc, #24]	; (8017cf4 <tcp_accept_null+0x34>)
 8017cdc:	4806      	ldr	r0, [pc, #24]	; (8017cf8 <tcp_accept_null+0x38>)
 8017cde:	f008 fe73 	bl	80209c8 <iprintf>
  tcp_abandon(pcb, 1);
 8017ce2:	4620      	mov	r0, r4
 8017ce4:	2101      	movs	r1, #1
 8017ce6:	f7ff ff47 	bl	8017b78 <tcp_abandon>
}
 8017cea:	f06f 000c 	mvn.w	r0, #12
 8017cee:	bd10      	pop	{r4, pc}
 8017cf0:	0803db18 	.word	0x0803db18
 8017cf4:	0803da38 	.word	0x0803da38
 8017cf8:	0802697c 	.word	0x0802697c

08017cfc <tcp_netif_ip_addr_changed_pcblist>:
{
 8017cfc:	b570      	push	{r4, r5, r6, lr}
 8017cfe:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8017d00:	4606      	mov	r6, r0
 8017d02:	b178      	cbz	r0, 8017d24 <tcp_netif_ip_addr_changed_pcblist+0x28>
  while (pcb != NULL) {
 8017d04:	b13c      	cbz	r4, 8017d16 <tcp_netif_ip_addr_changed_pcblist+0x1a>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8017d06:	6822      	ldr	r2, [r4, #0]
 8017d08:	6833      	ldr	r3, [r6, #0]
 8017d0a:	68e5      	ldr	r5, [r4, #12]
 8017d0c:	429a      	cmp	r2, r3
 8017d0e:	d003      	beq.n	8017d18 <tcp_netif_ip_addr_changed_pcblist+0x1c>
  while (pcb != NULL) {
 8017d10:	462c      	mov	r4, r5
 8017d12:	2c00      	cmp	r4, #0
 8017d14:	d1f7      	bne.n	8017d06 <tcp_netif_ip_addr_changed_pcblist+0xa>
}
 8017d16:	bd70      	pop	{r4, r5, r6, pc}
  tcp_abandon(pcb, 1);
 8017d18:	4620      	mov	r0, r4
 8017d1a:	2101      	movs	r1, #1
 8017d1c:	f7ff ff2c 	bl	8017b78 <tcp_abandon>
  while (pcb != NULL) {
 8017d20:	462c      	mov	r4, r5
 8017d22:	e7f6      	b.n	8017d12 <tcp_netif_ip_addr_changed_pcblist+0x16>
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8017d24:	4b03      	ldr	r3, [pc, #12]	; (8017d34 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 8017d26:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8017d2a:	4903      	ldr	r1, [pc, #12]	; (8017d38 <tcp_netif_ip_addr_changed_pcblist+0x3c>)
 8017d2c:	4803      	ldr	r0, [pc, #12]	; (8017d3c <tcp_netif_ip_addr_changed_pcblist+0x40>)
 8017d2e:	f008 fe4b 	bl	80209c8 <iprintf>
 8017d32:	e7e7      	b.n	8017d04 <tcp_netif_ip_addr_changed_pcblist+0x8>
 8017d34:	0803db18 	.word	0x0803db18
 8017d38:	0803dc88 	.word	0x0803dc88
 8017d3c:	0802697c 	.word	0x0802697c

08017d40 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017d40:	4b0f      	ldr	r3, [pc, #60]	; (8017d80 <tcp_kill_state+0x40>)
 8017d42:	6819      	ldr	r1, [r3, #0]
 8017d44:	b1d1      	cbz	r1, 8017d7c <tcp_kill_state+0x3c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8017d46:	4b0f      	ldr	r3, [pc, #60]	; (8017d84 <tcp_kill_state+0x44>)
  inactivity = 0;
 8017d48:	2200      	movs	r2, #0
{
 8017d4a:	b430      	push	{r4, r5}
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8017d4c:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 8017d4e:	4614      	mov	r4, r2
 8017d50:	e001      	b.n	8017d56 <tcp_kill_state+0x16>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017d52:	68c9      	ldr	r1, [r1, #12]
 8017d54:	b159      	cbz	r1, 8017d6e <tcp_kill_state+0x2e>
    if (pcb->state == state) {
 8017d56:	7d0b      	ldrb	r3, [r1, #20]
 8017d58:	4283      	cmp	r3, r0
 8017d5a:	d1fa      	bne.n	8017d52 <tcp_kill_state+0x12>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8017d5c:	6a0b      	ldr	r3, [r1, #32]
 8017d5e:	1aeb      	subs	r3, r5, r3
 8017d60:	4293      	cmp	r3, r2
 8017d62:	d3f6      	bcc.n	8017d52 <tcp_kill_state+0x12>
 8017d64:	460c      	mov	r4, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017d66:	68c9      	ldr	r1, [r1, #12]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8017d68:	461a      	mov	r2, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017d6a:	2900      	cmp	r1, #0
 8017d6c:	d1f3      	bne.n	8017d56 <tcp_kill_state+0x16>
  if (inactive != NULL) {
 8017d6e:	b11c      	cbz	r4, 8017d78 <tcp_kill_state+0x38>
    tcp_abandon(inactive, 0);
 8017d70:	4620      	mov	r0, r4
}
 8017d72:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 8017d74:	f7ff bf00 	b.w	8017b78 <tcp_abandon>
}
 8017d78:	bc30      	pop	{r4, r5}
 8017d7a:	4770      	bx	lr
 8017d7c:	4770      	bx	lr
 8017d7e:	bf00      	nop
 8017d80:	20036270 	.word	0x20036270
 8017d84:	20036274 	.word	0x20036274

08017d88 <tcp_alloc>:
{
 8017d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017d8a:	f44f 62e6 	mov.w	r2, #1840	; 0x730
{
 8017d8e:	4604      	mov	r4, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017d90:	495f      	ldr	r1, [pc, #380]	; (8017f10 <tcp_alloc+0x188>)
 8017d92:	2002      	movs	r0, #2
 8017d94:	f7fe f9c2 	bl	801611c <memp_malloc_fn>
  if (pcb == NULL) {
 8017d98:	b340      	cbz	r0, 8017dec <tcp_alloc+0x64>
 8017d9a:	4603      	mov	r3, r0
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8017d9c:	229c      	movs	r2, #156	; 0x9c
 8017d9e:	2100      	movs	r1, #0
 8017da0:	4618      	mov	r0, r3
    pcb->ttl = TCP_TTL;
 8017da2:	26ff      	movs	r6, #255	; 0xff
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8017da4:	f007 fe8f 	bl	801fac6 <memset>
    pcb->last_timer = tcp_timer_ctr;
 8017da8:	4a5a      	ldr	r2, [pc, #360]	; (8017f14 <tcp_alloc+0x18c>)
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8017daa:	4603      	mov	r3, r0
    pcb->tmr = tcp_ticks;
 8017dac:	485a      	ldr	r0, [pc, #360]	; (8017f18 <tcp_alloc+0x190>)
    pcb->snd_buf = TCP_SND_BUF;
 8017dae:	f44f 6186 	mov.w	r1, #1072	; 0x430
    pcb->tmr = tcp_ticks;
 8017db2:	6805      	ldr	r5, [r0, #0]
    pcb->last_timer = tcp_timer_ctr;
 8017db4:	7810      	ldrb	r0, [r2, #0]
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8017db6:	2206      	movs	r2, #6
    pcb->prio = prio;
 8017db8:	755c      	strb	r4, [r3, #21]
    pcb->cwnd = 1;
 8017dba:	2401      	movs	r4, #1
    pcb->last_timer = tcp_timer_ctr;
 8017dbc:	7798      	strb	r0, [r3, #30]
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8017dbe:	4857      	ldr	r0, [pc, #348]	; (8017f1c <tcp_alloc+0x194>)
    pcb->tmr = tcp_ticks;
 8017dc0:	621d      	str	r5, [r3, #32]
    pcb->snd_buf = TCP_SND_BUF;
 8017dc2:	f8a3 1064 	strh.w	r1, [r3, #100]	; 0x64
    pcb->ssthresh = TCP_SND_BUF;
 8017dc6:	f8a3 104a 	strh.w	r1, [r3, #74]	; 0x4a
    pcb->rtime = -1;
 8017dca:	4d55      	ldr	r5, [pc, #340]	; (8017f20 <tcp_alloc+0x198>)
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8017dcc:	6298      	str	r0, [r3, #40]	; 0x28
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8017dce:	4955      	ldr	r1, [pc, #340]	; (8017f24 <tcp_alloc+0x19c>)
    pcb->recv = tcp_recv_null;
 8017dd0:	4855      	ldr	r0, [pc, #340]	; (8017f28 <tcp_alloc+0x1a0>)
    pcb->ttl = TCP_TTL;
 8017dd2:	72de      	strb	r6, [r3, #11]
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8017dd4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8017dd8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8017dda:	631d      	str	r5, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8017ddc:	f8a3 4048 	strh.w	r4, [r3, #72]	; 0x48
    pcb->recv = tcp_recv_null;
 8017de0:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8017de4:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
 8017de8:	4618      	mov	r0, r3
 8017dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8017dec:	4d4f      	ldr	r5, [pc, #316]	; (8017f2c <tcp_alloc+0x1a4>)
 8017dee:	682b      	ldr	r3, [r5, #0]
  while (pcb != NULL) {
 8017df0:	b913      	cbnz	r3, 8017df8 <tcp_alloc+0x70>
 8017df2:	e00e      	b.n	8017e12 <tcp_alloc+0x8a>
 8017df4:	4633      	mov	r3, r6
 8017df6:	b166      	cbz	r6, 8017e12 <tcp_alloc+0x8a>
    if (pcb->flags & TF_CLOSEPEND) {
 8017df8:	8b5a      	ldrh	r2, [r3, #26]
    struct tcp_pcb *next = pcb->next;
 8017dfa:	68de      	ldr	r6, [r3, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 8017dfc:	0711      	lsls	r1, r2, #28
 8017dfe:	d5f9      	bpl.n	8017df4 <tcp_alloc+0x6c>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8017e00:	f022 0208 	bic.w	r2, r2, #8
      tcp_close_shutdown_fin(pcb);
 8017e04:	4618      	mov	r0, r3
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8017e06:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8017e08:	f7ff f912 	bl	8017030 <tcp_close_shutdown_fin>
  while (pcb != NULL) {
 8017e0c:	4633      	mov	r3, r6
 8017e0e:	2e00      	cmp	r6, #0
 8017e10:	d1f2      	bne.n	8017df8 <tcp_alloc+0x70>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017e12:	4b47      	ldr	r3, [pc, #284]	; (8017f30 <tcp_alloc+0x1a8>)
 8017e14:	681b      	ldr	r3, [r3, #0]
 8017e16:	b193      	cbz	r3, 8017e3e <tcp_alloc+0xb6>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8017e18:	4a3f      	ldr	r2, [pc, #252]	; (8017f18 <tcp_alloc+0x190>)
 8017e1a:	4618      	mov	r0, r3
 8017e1c:	6a19      	ldr	r1, [r3, #32]
 8017e1e:	6816      	ldr	r6, [r2, #0]
 8017e20:	1a71      	subs	r1, r6, r1
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017e22:	68db      	ldr	r3, [r3, #12]
 8017e24:	b143      	cbz	r3, 8017e38 <tcp_alloc+0xb0>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8017e26:	6a1a      	ldr	r2, [r3, #32]
 8017e28:	1ab2      	subs	r2, r6, r2
 8017e2a:	428a      	cmp	r2, r1
 8017e2c:	d3f9      	bcc.n	8017e22 <tcp_alloc+0x9a>
 8017e2e:	4618      	mov	r0, r3
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017e30:	68db      	ldr	r3, [r3, #12]
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8017e32:	4611      	mov	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017e34:	2b00      	cmp	r3, #0
 8017e36:	d1f6      	bne.n	8017e26 <tcp_alloc+0x9e>
  tcp_abandon(pcb, 1);
 8017e38:	2101      	movs	r1, #1
 8017e3a:	f7ff fe9d 	bl	8017b78 <tcp_abandon>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017e3e:	f240 7239 	movw	r2, #1849	; 0x739
 8017e42:	4933      	ldr	r1, [pc, #204]	; (8017f10 <tcp_alloc+0x188>)
 8017e44:	2002      	movs	r0, #2
 8017e46:	f7fe f969 	bl	801611c <memp_malloc_fn>
    if (pcb == NULL) {
 8017e4a:	4603      	mov	r3, r0
 8017e4c:	b130      	cbz	r0, 8017e5c <tcp_alloc+0xd4>
 8017e4e:	4a39      	ldr	r2, [pc, #228]	; (8017f34 <tcp_alloc+0x1ac>)
 8017e50:	f8d2 10bc 	ldr.w	r1, [r2, #188]	; 0xbc
 8017e54:	880a      	ldrh	r2, [r1, #0]
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8017e56:	3a01      	subs	r2, #1
 8017e58:	800a      	strh	r2, [r1, #0]
 8017e5a:	e79f      	b.n	8017d9c <tcp_alloc+0x14>
      tcp_kill_state(LAST_ACK);
 8017e5c:	2009      	movs	r0, #9
 8017e5e:	f7ff ff6f 	bl	8017d40 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017e62:	f240 723f 	movw	r2, #1855	; 0x73f
 8017e66:	492a      	ldr	r1, [pc, #168]	; (8017f10 <tcp_alloc+0x188>)
 8017e68:	2002      	movs	r0, #2
 8017e6a:	f7fe f957 	bl	801611c <memp_malloc_fn>
      if (pcb == NULL) {
 8017e6e:	4603      	mov	r3, r0
 8017e70:	b138      	cbz	r0, 8017e82 <tcp_alloc+0xfa>
 8017e72:	4a30      	ldr	r2, [pc, #192]	; (8017f34 <tcp_alloc+0x1ac>)
 8017e74:	f8d2 10bc 	ldr.w	r1, [r2, #188]	; 0xbc
 8017e78:	880a      	ldrh	r2, [r1, #0]
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8017e7a:	3a01      	subs	r2, #1
 8017e7c:	b292      	uxth	r2, r2
 8017e7e:	800a      	strh	r2, [r1, #0]
 8017e80:	e7e9      	b.n	8017e56 <tcp_alloc+0xce>
        tcp_kill_state(CLOSING);
 8017e82:	2008      	movs	r0, #8
 8017e84:	f7ff ff5c 	bl	8017d40 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017e88:	f240 7245 	movw	r2, #1861	; 0x745
 8017e8c:	4920      	ldr	r1, [pc, #128]	; (8017f10 <tcp_alloc+0x188>)
 8017e8e:	2002      	movs	r0, #2
 8017e90:	f7fe f944 	bl	801611c <memp_malloc_fn>
        if (pcb == NULL) {
 8017e94:	4603      	mov	r3, r0
 8017e96:	b138      	cbz	r0, 8017ea8 <tcp_alloc+0x120>
 8017e98:	4a26      	ldr	r2, [pc, #152]	; (8017f34 <tcp_alloc+0x1ac>)
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8017e9a:	f8d2 10bc 	ldr.w	r1, [r2, #188]	; 0xbc
 8017e9e:	880a      	ldrh	r2, [r1, #0]
 8017ea0:	3a01      	subs	r2, #1
 8017ea2:	b292      	uxth	r2, r2
 8017ea4:	800a      	strh	r2, [r1, #0]
 8017ea6:	e7e8      	b.n	8017e7a <tcp_alloc+0xf2>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8017ea8:	0622      	lsls	r2, r4, #24
 8017eaa:	d42f      	bmi.n	8017f0c <tcp_alloc+0x184>
  if (mprio == 0) {
 8017eac:	b1ec      	cbz	r4, 8017eea <tcp_alloc+0x162>
 8017eae:	4622      	mov	r2, r4
  mprio--;
 8017eb0:	1e51      	subs	r1, r2, #1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017eb2:	682a      	ldr	r2, [r5, #0]
  mprio--;
 8017eb4:	b2c9      	uxtb	r1, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017eb6:	b1c2      	cbz	r2, 8017eea <tcp_alloc+0x162>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8017eb8:	4817      	ldr	r0, [pc, #92]	; (8017f18 <tcp_alloc+0x190>)
  inactivity = 0;
 8017eba:	2700      	movs	r7, #0
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8017ebc:	6806      	ldr	r6, [r0, #0]
 8017ebe:	e005      	b.n	8017ecc <tcp_alloc+0x144>
 8017ec0:	6a15      	ldr	r5, [r2, #32]
      inactivity = tcp_ticks - pcb->tmr;
 8017ec2:	1b77      	subs	r7, r6, r5
    if ((pcb->prio < mprio) ||
 8017ec4:	4601      	mov	r1, r0
      inactivity = tcp_ticks - pcb->tmr;
 8017ec6:	4613      	mov	r3, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017ec8:	68d2      	ldr	r2, [r2, #12]
 8017eca:	b14a      	cbz	r2, 8017ee0 <tcp_alloc+0x158>
    if ((pcb->prio < mprio) ||
 8017ecc:	7d50      	ldrb	r0, [r2, #21]
 8017ece:	4281      	cmp	r1, r0
 8017ed0:	d8f6      	bhi.n	8017ec0 <tcp_alloc+0x138>
 8017ed2:	d1f9      	bne.n	8017ec8 <tcp_alloc+0x140>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8017ed4:	6a15      	ldr	r5, [r2, #32]
 8017ed6:	eba6 0c05 	sub.w	ip, r6, r5
 8017eda:	4567      	cmp	r7, ip
 8017edc:	d8f4      	bhi.n	8017ec8 <tcp_alloc+0x140>
 8017ede:	e7f0      	b.n	8017ec2 <tcp_alloc+0x13a>
  if (inactive != NULL) {
 8017ee0:	b11b      	cbz	r3, 8017eea <tcp_alloc+0x162>
  tcp_abandon(pcb, 1);
 8017ee2:	4618      	mov	r0, r3
 8017ee4:	2101      	movs	r1, #1
 8017ee6:	f7ff fe47 	bl	8017b78 <tcp_abandon>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017eea:	f240 724b 	movw	r2, #1867	; 0x74b
 8017eee:	4908      	ldr	r1, [pc, #32]	; (8017f10 <tcp_alloc+0x188>)
 8017ef0:	2002      	movs	r0, #2
 8017ef2:	f7fe f913 	bl	801611c <memp_malloc_fn>
          if (pcb != NULL) {
 8017ef6:	4603      	mov	r3, r0
 8017ef8:	2800      	cmp	r0, #0
 8017efa:	f43f af75 	beq.w	8017de8 <tcp_alloc+0x60>
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8017efe:	4a0d      	ldr	r2, [pc, #52]	; (8017f34 <tcp_alloc+0x1ac>)
 8017f00:	f8d2 00bc 	ldr.w	r0, [r2, #188]	; 0xbc
 8017f04:	8801      	ldrh	r1, [r0, #0]
 8017f06:	3901      	subs	r1, #1
 8017f08:	8001      	strh	r1, [r0, #0]
 8017f0a:	e7c6      	b.n	8017e9a <tcp_alloc+0x112>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8017f0c:	227f      	movs	r2, #127	; 0x7f
 8017f0e:	e7cf      	b.n	8017eb0 <tcp_alloc+0x128>
 8017f10:	0803db18 	.word	0x0803db18
 8017f14:	200223e5 	.word	0x200223e5
 8017f18:	20036274 	.word	0x20036274
 8017f1c:	08600860 	.word	0x08600860
 8017f20:	0218ffff 	.word	0x0218ffff
 8017f24:	006ddd00 	.word	0x006ddd00
 8017f28:	08018121 	.word	0x08018121
 8017f2c:	20036270 	.word	0x20036270
 8017f30:	20036280 	.word	0x20036280
 8017f34:	20036164 	.word	0x20036164

08017f38 <tcp_new>:
  return tcp_alloc(TCP_PRIO_NORMAL);
 8017f38:	2040      	movs	r0, #64	; 0x40
 8017f3a:	f7ff bf25 	b.w	8017d88 <tcp_alloc>
 8017f3e:	bf00      	nop

08017f40 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8017f40:	2040      	movs	r0, #64	; 0x40
 8017f42:	f7ff bf21 	b.w	8017d88 <tcp_alloc>
 8017f46:	bf00      	nop

08017f48 <tcp_close_shutdown>:
{
 8017f48:	b530      	push	{r4, r5, lr}
 8017f4a:	460d      	mov	r5, r1
 8017f4c:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8017f4e:	4604      	mov	r4, r0
 8017f50:	2800      	cmp	r0, #0
 8017f52:	d070      	beq.n	8018036 <tcp_close_shutdown+0xee>
 8017f54:	7d23      	ldrb	r3, [r4, #20]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8017f56:	b11d      	cbz	r5, 8017f60 <tcp_close_shutdown+0x18>
 8017f58:	2b04      	cmp	r3, #4
 8017f5a:	d013      	beq.n	8017f84 <tcp_close_shutdown+0x3c>
 8017f5c:	2b07      	cmp	r3, #7
 8017f5e:	d011      	beq.n	8017f84 <tcp_close_shutdown+0x3c>
  switch (pcb->state) {
 8017f60:	2b01      	cmp	r3, #1
 8017f62:	d070      	beq.n	8018046 <tcp_close_shutdown+0xfe>
 8017f64:	d331      	bcc.n	8017fca <tcp_close_shutdown+0x82>
 8017f66:	2b02      	cmp	r3, #2
 8017f68:	d15f      	bne.n	801802a <tcp_close_shutdown+0xe2>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8017f6a:	4853      	ldr	r0, [pc, #332]	; (80180b8 <tcp_close_shutdown+0x170>)
 8017f6c:	4621      	mov	r1, r4
 8017f6e:	f7ff fd8f 	bl	8017a90 <tcp_pcb_remove>
 8017f72:	4b52      	ldr	r3, [pc, #328]	; (80180bc <tcp_close_shutdown+0x174>)
 8017f74:	2201      	movs	r2, #1
      tcp_free(pcb);
 8017f76:	4620      	mov	r0, r4
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8017f78:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8017f7a:	f7ff f899 	bl	80170b0 <tcp_free>
}
 8017f7e:	2000      	movs	r0, #0
 8017f80:	b005      	add	sp, #20
 8017f82:	bd30      	pop	{r4, r5, pc}
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8017f84:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8017f86:	2a00      	cmp	r2, #0
 8017f88:	d031      	beq.n	8017fee <tcp_close_shutdown+0xa6>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8017f8a:	8b63      	ldrh	r3, [r4, #26]
 8017f8c:	06db      	lsls	r3, r3, #27
 8017f8e:	d533      	bpl.n	8017ff8 <tcp_close_shutdown+0xb0>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8017f90:	8b25      	ldrh	r5, [r4, #24]
 8017f92:	1d20      	adds	r0, r4, #4
 8017f94:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8017f96:	4623      	mov	r3, r4
 8017f98:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8017f9a:	9502      	str	r5, [sp, #8]
 8017f9c:	8ae5      	ldrh	r5, [r4, #22]
 8017f9e:	9000      	str	r0, [sp, #0]
 8017fa0:	4620      	mov	r0, r4
 8017fa2:	9501      	str	r5, [sp, #4]
 8017fa4:	f002 ff12 	bl	801adcc <tcp_rst>
      tcp_pcb_purge(pcb);
 8017fa8:	4620      	mov	r0, r4
 8017faa:	f7ff fabb 	bl	8017524 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8017fae:	4b42      	ldr	r3, [pc, #264]	; (80180b8 <tcp_close_shutdown+0x170>)
 8017fb0:	681a      	ldr	r2, [r3, #0]
 8017fb2:	42a2      	cmp	r2, r4
 8017fb4:	d028      	beq.n	8018008 <tcp_close_shutdown+0xc0>
 8017fb6:	b34a      	cbz	r2, 801800c <tcp_close_shutdown+0xc4>
 8017fb8:	68d3      	ldr	r3, [r2, #12]
 8017fba:	429c      	cmp	r4, r3
 8017fbc:	d06a      	beq.n	8018094 <tcp_close_shutdown+0x14c>
 8017fbe:	b32b      	cbz	r3, 801800c <tcp_close_shutdown+0xc4>
 8017fc0:	68da      	ldr	r2, [r3, #12]
 8017fc2:	42a2      	cmp	r2, r4
 8017fc4:	d067      	beq.n	8018096 <tcp_close_shutdown+0x14e>
 8017fc6:	4613      	mov	r3, r2
 8017fc8:	e7f9      	b.n	8017fbe <tcp_close_shutdown+0x76>
      if (pcb->local_port != 0) {
 8017fca:	8ae3      	ldrh	r3, [r4, #22]
 8017fcc:	b33b      	cbz	r3, 801801e <tcp_close_shutdown+0xd6>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8017fce:	4b3c      	ldr	r3, [pc, #240]	; (80180c0 <tcp_close_shutdown+0x178>)
 8017fd0:	681a      	ldr	r2, [r3, #0]
 8017fd2:	42a2      	cmp	r2, r4
 8017fd4:	d06c      	beq.n	80180b0 <tcp_close_shutdown+0x168>
 8017fd6:	2a00      	cmp	r2, #0
 8017fd8:	d059      	beq.n	801808e <tcp_close_shutdown+0x146>
 8017fda:	68d3      	ldr	r3, [r2, #12]
 8017fdc:	429c      	cmp	r4, r3
 8017fde:	d053      	beq.n	8018088 <tcp_close_shutdown+0x140>
 8017fe0:	2b00      	cmp	r3, #0
 8017fe2:	d054      	beq.n	801808e <tcp_close_shutdown+0x146>
 8017fe4:	68da      	ldr	r2, [r3, #12]
 8017fe6:	42a2      	cmp	r2, r4
 8017fe8:	d04f      	beq.n	801808a <tcp_close_shutdown+0x142>
 8017fea:	4613      	mov	r3, r2
 8017fec:	e7f8      	b.n	8017fe0 <tcp_close_shutdown+0x98>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8017fee:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8017ff0:	f5b2 6f06 	cmp.w	r2, #2144	; 0x860
 8017ff4:	d1c9      	bne.n	8017f8a <tcp_close_shutdown+0x42>
 8017ff6:	e7b3      	b.n	8017f60 <tcp_close_shutdown+0x18>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8017ff8:	4b32      	ldr	r3, [pc, #200]	; (80180c4 <tcp_close_shutdown+0x17c>)
 8017ffa:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8017ffe:	4932      	ldr	r1, [pc, #200]	; (80180c8 <tcp_close_shutdown+0x180>)
 8018000:	4832      	ldr	r0, [pc, #200]	; (80180cc <tcp_close_shutdown+0x184>)
 8018002:	f008 fce1 	bl	80209c8 <iprintf>
 8018006:	e7c3      	b.n	8017f90 <tcp_close_shutdown+0x48>
      TCP_RMV_ACTIVE(pcb);
 8018008:	68e2      	ldr	r2, [r4, #12]
 801800a:	601a      	str	r2, [r3, #0]
      if (tcp_input_pcb == pcb) {
 801800c:	4b30      	ldr	r3, [pc, #192]	; (80180d0 <tcp_close_shutdown+0x188>)
      TCP_RMV_ACTIVE(pcb);
 801800e:	2000      	movs	r0, #0
 8018010:	4a2a      	ldr	r2, [pc, #168]	; (80180bc <tcp_close_shutdown+0x174>)
 8018012:	2101      	movs	r1, #1
      if (tcp_input_pcb == pcb) {
 8018014:	681b      	ldr	r3, [r3, #0]
      TCP_RMV_ACTIVE(pcb);
 8018016:	60e0      	str	r0, [r4, #12]
      if (tcp_input_pcb == pcb) {
 8018018:	42a3      	cmp	r3, r4
      TCP_RMV_ACTIVE(pcb);
 801801a:	7011      	strb	r1, [r2, #0]
      if (tcp_input_pcb == pcb) {
 801801c:	d03e      	beq.n	801809c <tcp_close_shutdown+0x154>
        tcp_free(pcb);
 801801e:	4620      	mov	r0, r4
 8018020:	f7ff f846 	bl	80170b0 <tcp_free>
}
 8018024:	2000      	movs	r0, #0
 8018026:	b005      	add	sp, #20
 8018028:	bd30      	pop	{r4, r5, pc}
      return tcp_close_shutdown_fin(pcb);
 801802a:	4620      	mov	r0, r4
}
 801802c:	b005      	add	sp, #20
 801802e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 8018032:	f7fe bffd 	b.w	8017030 <tcp_close_shutdown_fin>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8018036:	4b23      	ldr	r3, [pc, #140]	; (80180c4 <tcp_close_shutdown+0x17c>)
 8018038:	f44f 72af 	mov.w	r2, #350	; 0x15e
 801803c:	4925      	ldr	r1, [pc, #148]	; (80180d4 <tcp_close_shutdown+0x18c>)
 801803e:	4823      	ldr	r0, [pc, #140]	; (80180cc <tcp_close_shutdown+0x184>)
 8018040:	f008 fcc2 	bl	80209c8 <iprintf>
 8018044:	e786      	b.n	8017f54 <tcp_close_shutdown+0xc>
  switch (pcb->state) {
 8018046:	4619      	mov	r1, r3
      pcb->listener = NULL;
 8018048:	2000      	movs	r0, #0
  switch (pcb->state) {
 801804a:	4b1d      	ldr	r3, [pc, #116]	; (80180c0 <tcp_close_shutdown+0x178>)
 801804c:	4d22      	ldr	r5, [pc, #136]	; (80180d8 <tcp_close_shutdown+0x190>)
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801804e:	681b      	ldr	r3, [r3, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8018050:	b133      	cbz	r3, 8018060 <tcp_close_shutdown+0x118>
    if (pcb->listener == lpcb) {
 8018052:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8018054:	4294      	cmp	r4, r2
      pcb->listener = NULL;
 8018056:	bf08      	it	eq
 8018058:	67d8      	streq	r0, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801805a:	68db      	ldr	r3, [r3, #12]
 801805c:	2b00      	cmp	r3, #0
 801805e:	d1f8      	bne.n	8018052 <tcp_close_shutdown+0x10a>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8018060:	3101      	adds	r1, #1
 8018062:	2904      	cmp	r1, #4
 8018064:	d002      	beq.n	801806c <tcp_close_shutdown+0x124>
 8018066:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
 801806a:	e7f0      	b.n	801804e <tcp_close_shutdown+0x106>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801806c:	4621      	mov	r1, r4
 801806e:	481b      	ldr	r0, [pc, #108]	; (80180dc <tcp_close_shutdown+0x194>)
 8018070:	f7ff fd0e 	bl	8017a90 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8018074:	7d23      	ldrb	r3, [r4, #20]
 8018076:	2b01      	cmp	r3, #1
 8018078:	d013      	beq.n	80180a2 <tcp_close_shutdown+0x15a>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801807a:	4621      	mov	r1, r4
 801807c:	2003      	movs	r0, #3
 801807e:	f7fe f871 	bl	8016164 <memp_free>
}
 8018082:	2000      	movs	r0, #0
 8018084:	b005      	add	sp, #20
 8018086:	bd30      	pop	{r4, r5, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8018088:	4613      	mov	r3, r2
 801808a:	68e2      	ldr	r2, [r4, #12]
 801808c:	60da      	str	r2, [r3, #12]
 801808e:	2300      	movs	r3, #0
 8018090:	60e3      	str	r3, [r4, #12]
 8018092:	e7c4      	b.n	801801e <tcp_close_shutdown+0xd6>
      TCP_RMV_ACTIVE(pcb);
 8018094:	4613      	mov	r3, r2
 8018096:	68e2      	ldr	r2, [r4, #12]
 8018098:	60da      	str	r2, [r3, #12]
 801809a:	e7b7      	b.n	801800c <tcp_close_shutdown+0xc4>
        tcp_trigger_input_pcb_close();
 801809c:	f001 ff02 	bl	8019ea4 <tcp_trigger_input_pcb_close>
 80180a0:	e76d      	b.n	8017f7e <tcp_close_shutdown+0x36>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80180a2:	4b08      	ldr	r3, [pc, #32]	; (80180c4 <tcp_close_shutdown+0x17c>)
 80180a4:	22df      	movs	r2, #223	; 0xdf
 80180a6:	490e      	ldr	r1, [pc, #56]	; (80180e0 <tcp_close_shutdown+0x198>)
 80180a8:	4808      	ldr	r0, [pc, #32]	; (80180cc <tcp_close_shutdown+0x184>)
 80180aa:	f008 fc8d 	bl	80209c8 <iprintf>
 80180ae:	e7e4      	b.n	801807a <tcp_close_shutdown+0x132>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80180b0:	68e2      	ldr	r2, [r4, #12]
 80180b2:	601a      	str	r2, [r3, #0]
 80180b4:	e7eb      	b.n	801808e <tcp_close_shutdown+0x146>
 80180b6:	bf00      	nop
 80180b8:	20036270 	.word	0x20036270
 80180bc:	2003626c 	.word	0x2003626c
 80180c0:	2003627c 	.word	0x2003627c
 80180c4:	0803db18 	.word	0x0803db18
 80180c8:	0803dae0 	.word	0x0803dae0
 80180cc:	0802697c 	.word	0x0802697c
 80180d0:	20036284 	.word	0x20036284
 80180d4:	0803dac0 	.word	0x0803dac0
 80180d8:	0803dcd8 	.word	0x0803dcd8
 80180dc:	20036278 	.word	0x20036278
 80180e0:	0803dafc 	.word	0x0803dafc

080180e4 <tcp_close>:
{
 80180e4:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80180e6:	b158      	cbz	r0, 8018100 <tcp_close+0x1c>
  if (pcb->state != LISTEN) {
 80180e8:	7d03      	ldrb	r3, [r0, #20]
 80180ea:	2b01      	cmp	r3, #1
 80180ec:	d003      	beq.n	80180f6 <tcp_close+0x12>
    tcp_set_flags(pcb, TF_RXCLOSED);
 80180ee:	8b43      	ldrh	r3, [r0, #26]
 80180f0:	f043 0310 	orr.w	r3, r3, #16
 80180f4:	8343      	strh	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 80180f6:	2101      	movs	r1, #1
}
 80180f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return tcp_close_shutdown(pcb, 1);
 80180fc:	f7ff bf24 	b.w	8017f48 <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8018100:	4b04      	ldr	r3, [pc, #16]	; (8018114 <tcp_close+0x30>)
 8018102:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8018106:	4904      	ldr	r1, [pc, #16]	; (8018118 <tcp_close+0x34>)
 8018108:	4804      	ldr	r0, [pc, #16]	; (801811c <tcp_close+0x38>)
 801810a:	f008 fc5d 	bl	80209c8 <iprintf>
}
 801810e:	f06f 000f 	mvn.w	r0, #15
 8018112:	bd08      	pop	{r3, pc}
 8018114:	0803db18 	.word	0x0803db18
 8018118:	0803daa8 	.word	0x0803daa8
 801811c:	0802697c 	.word	0x0802697c

08018120 <tcp_recv_null>:
{
 8018120:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8018122:	b191      	cbz	r1, 801814a <tcp_recv_null+0x2a>
 8018124:	4614      	mov	r4, r2
  if (p != NULL) {
 8018126:	b912      	cbnz	r2, 801812e <tcp_recv_null+0xe>
  } else if (err == ERR_OK) {
 8018128:	b153      	cbz	r3, 8018140 <tcp_recv_null+0x20>
  return ERR_OK;
 801812a:	4610      	mov	r0, r2
}
 801812c:	bd10      	pop	{r4, pc}
    tcp_recved(pcb, p->tot_len);
 801812e:	4608      	mov	r0, r1
 8018130:	8911      	ldrh	r1, [r2, #8]
 8018132:	f7ff f8e5 	bl	8017300 <tcp_recved>
    pbuf_free(p);
 8018136:	4620      	mov	r0, r4
 8018138:	f7fe faee 	bl	8016718 <pbuf_free>
  return ERR_OK;
 801813c:	2000      	movs	r0, #0
}
 801813e:	bd10      	pop	{r4, pc}
    return tcp_close(pcb);
 8018140:	4608      	mov	r0, r1
}
 8018142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 8018146:	f7ff bfcd 	b.w	80180e4 <tcp_close>
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801814a:	4b05      	ldr	r3, [pc, #20]	; (8018160 <tcp_recv_null+0x40>)
 801814c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8018150:	4904      	ldr	r1, [pc, #16]	; (8018164 <tcp_recv_null+0x44>)
 8018152:	4805      	ldr	r0, [pc, #20]	; (8018168 <tcp_recv_null+0x48>)
 8018154:	f008 fc38 	bl	80209c8 <iprintf>
 8018158:	f06f 000f 	mvn.w	r0, #15
}
 801815c:	bd10      	pop	{r4, pc}
 801815e:	bf00      	nop
 8018160:	0803db18 	.word	0x0803db18
 8018164:	0803de1c 	.word	0x0803de1c
 8018168:	0802697c 	.word	0x0802697c

0801816c <tcp_process_refused_data>:
{
 801816c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801816e:	2800      	cmp	r0, #0
 8018170:	d035      	beq.n	80181de <tcp_process_refused_data+0x72>
    u8_t refused_flags = pcb->refused_data->flags;
 8018172:	6f86      	ldr	r6, [r0, #120]	; 0x78
    pcb->refused_data = NULL;
 8018174:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8018176:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 801817a:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 801817c:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 801817e:	6783      	str	r3, [r0, #120]	; 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8018180:	b31d      	cbz	r5, 80181ca <tcp_process_refused_data+0x5e>
 8018182:	4601      	mov	r1, r0
 8018184:	4632      	mov	r2, r6
 8018186:	6900      	ldr	r0, [r0, #16]
 8018188:	47a8      	blx	r5
 801818a:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 801818c:	b135      	cbz	r5, 801819c <tcp_process_refused_data+0x30>
    } else if (err == ERR_ABRT) {
 801818e:	350d      	adds	r5, #13
 8018190:	d017      	beq.n	80181c2 <tcp_process_refused_data+0x56>
      return ERR_INPROGRESS;
 8018192:	f06f 0504 	mvn.w	r5, #4
      pcb->refused_data = refused_data;
 8018196:	67a6      	str	r6, [r4, #120]	; 0x78
}
 8018198:	4628      	mov	r0, r5
 801819a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801819c:	06bb      	lsls	r3, r7, #26
 801819e:	d5fb      	bpl.n	8018198 <tcp_process_refused_data+0x2c>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80181a0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80181a2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80181a6:	d001      	beq.n	80181ac <tcp_process_refused_data+0x40>
          pcb->rcv_wnd++;
 80181a8:	3301      	adds	r3, #1
 80181aa:	8523      	strh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 80181ac:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
 80181b0:	2e00      	cmp	r6, #0
 80181b2:	d0f1      	beq.n	8018198 <tcp_process_refused_data+0x2c>
 80181b4:	2300      	movs	r3, #0
 80181b6:	4621      	mov	r1, r4
 80181b8:	6920      	ldr	r0, [r4, #16]
 80181ba:	461a      	mov	r2, r3
 80181bc:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 80181be:	300d      	adds	r0, #13
 80181c0:	d1ea      	bne.n	8018198 <tcp_process_refused_data+0x2c>
          return ERR_ABRT;
 80181c2:	f06f 050c 	mvn.w	r5, #12
}
 80181c6:	4628      	mov	r0, r5
 80181c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80181ca:	462b      	mov	r3, r5
 80181cc:	4628      	mov	r0, r5
 80181ce:	4632      	mov	r2, r6
 80181d0:	4621      	mov	r1, r4
 80181d2:	f7ff ffa5 	bl	8018120 <tcp_recv_null>
 80181d6:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 80181d8:	2d00      	cmp	r5, #0
 80181da:	d1d8      	bne.n	801818e <tcp_process_refused_data+0x22>
 80181dc:	e7de      	b.n	801819c <tcp_process_refused_data+0x30>
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80181de:	4b05      	ldr	r3, [pc, #20]	; (80181f4 <tcp_process_refused_data+0x88>)
 80181e0:	f240 6209 	movw	r2, #1545	; 0x609
 80181e4:	4904      	ldr	r1, [pc, #16]	; (80181f8 <tcp_process_refused_data+0x8c>)
 80181e6:	f06f 050f 	mvn.w	r5, #15
 80181ea:	4804      	ldr	r0, [pc, #16]	; (80181fc <tcp_process_refused_data+0x90>)
 80181ec:	f008 fbec 	bl	80209c8 <iprintf>
 80181f0:	e7d2      	b.n	8018198 <tcp_process_refused_data+0x2c>
 80181f2:	bf00      	nop
 80181f4:	0803db18 	.word	0x0803db18
 80181f8:	0803ddcc 	.word	0x0803ddcc
 80181fc:	0802697c 	.word	0x0802697c

08018200 <tcp_fasttmr>:
{
 8018200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 8018204:	4d1c      	ldr	r5, [pc, #112]	; (8018278 <tcp_fasttmr+0x78>)
        tcp_active_pcbs_changed = 0;
 8018206:	2700      	movs	r7, #0
 8018208:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8018280 <tcp_fasttmr+0x80>
  ++tcp_timer_ctr;
 801820c:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 801820e:	4e1b      	ldr	r6, [pc, #108]	; (801827c <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 8018210:	3301      	adds	r3, #1
 8018212:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 8018214:	f8d8 4000 	ldr.w	r4, [r8]
  while (pcb != NULL) {
 8018218:	b1bc      	cbz	r4, 801824a <tcp_fasttmr+0x4a>
    if (pcb->last_timer != tcp_timer_ctr) {
 801821a:	782a      	ldrb	r2, [r5, #0]
 801821c:	7fa3      	ldrb	r3, [r4, #30]
 801821e:	4293      	cmp	r3, r2
 8018220:	d015      	beq.n	801824e <tcp_fasttmr+0x4e>
      if (pcb->flags & TF_ACK_DELAY) {
 8018222:	8b63      	ldrh	r3, [r4, #26]
      pcb->last_timer = tcp_timer_ctr;
 8018224:	77a2      	strb	r2, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 8018226:	07d9      	lsls	r1, r3, #31
 8018228:	d41a      	bmi.n	8018260 <tcp_fasttmr+0x60>
      if (pcb->flags & TF_CLOSEPEND) {
 801822a:	071a      	lsls	r2, r3, #28
 801822c:	d411      	bmi.n	8018252 <tcp_fasttmr+0x52>
      if (pcb->refused_data != NULL) {
 801822e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
      next = pcb->next;
 8018230:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 8018234:	b133      	cbz	r3, 8018244 <tcp_fasttmr+0x44>
        tcp_process_refused_data(pcb);
 8018236:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 8018238:	7037      	strb	r7, [r6, #0]
        tcp_process_refused_data(pcb);
 801823a:	f7ff ff97 	bl	801816c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801823e:	7833      	ldrb	r3, [r6, #0]
 8018240:	2b00      	cmp	r3, #0
 8018242:	d1e7      	bne.n	8018214 <tcp_fasttmr+0x14>
      pcb = next;
 8018244:	464c      	mov	r4, r9
  while (pcb != NULL) {
 8018246:	2c00      	cmp	r4, #0
 8018248:	d1e7      	bne.n	801821a <tcp_fasttmr+0x1a>
}
 801824a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      pcb = pcb->next;
 801824e:	68e4      	ldr	r4, [r4, #12]
 8018250:	e7e2      	b.n	8018218 <tcp_fasttmr+0x18>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8018252:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 8018256:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8018258:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 801825a:	f7fe fee9 	bl	8017030 <tcp_close_shutdown_fin>
 801825e:	e7e6      	b.n	801822e <tcp_fasttmr+0x2e>
        tcp_ack_now(pcb);
 8018260:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 8018264:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 8018266:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 8018268:	f002 fe2c 	bl	801aec4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801826c:	8b63      	ldrh	r3, [r4, #26]
 801826e:	f023 0303 	bic.w	r3, r3, #3
 8018272:	b29b      	uxth	r3, r3
 8018274:	8363      	strh	r3, [r4, #26]
 8018276:	e7d8      	b.n	801822a <tcp_fasttmr+0x2a>
 8018278:	200223e5 	.word	0x200223e5
 801827c:	2003626c 	.word	0x2003626c
 8018280:	20036270 	.word	0x20036270

08018284 <tcp_tmr>:
{
 8018284:	b508      	push	{r3, lr}
  tcp_fasttmr();
 8018286:	f7ff ffbb 	bl	8018200 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 801828a:	4a06      	ldr	r2, [pc, #24]	; (80182a4 <tcp_tmr+0x20>)
 801828c:	7813      	ldrb	r3, [r2, #0]
 801828e:	3301      	adds	r3, #1
 8018290:	b2db      	uxtb	r3, r3
 8018292:	7013      	strb	r3, [r2, #0]
 8018294:	07db      	lsls	r3, r3, #31
 8018296:	d400      	bmi.n	801829a <tcp_tmr+0x16>
}
 8018298:	bd08      	pop	{r3, pc}
 801829a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 801829e:	f7ff b981 	b.w	80175a4 <tcp_slowtmr>
 80182a2:	bf00      	nop
 80182a4:	200223e4 	.word	0x200223e4

080182a8 <tcp_next_iss>:
{
 80182a8:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80182aa:	b130      	cbz	r0, 80182ba <tcp_next_iss+0x12>
  iss += tcp_ticks;       /* XXX */
 80182ac:	4b07      	ldr	r3, [pc, #28]	; (80182cc <tcp_next_iss+0x24>)
 80182ae:	4a08      	ldr	r2, [pc, #32]	; (80182d0 <tcp_next_iss+0x28>)
 80182b0:	6818      	ldr	r0, [r3, #0]
 80182b2:	6812      	ldr	r2, [r2, #0]
 80182b4:	4410      	add	r0, r2
 80182b6:	6018      	str	r0, [r3, #0]
}
 80182b8:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80182ba:	4b06      	ldr	r3, [pc, #24]	; (80182d4 <tcp_next_iss+0x2c>)
 80182bc:	f640 02af 	movw	r2, #2223	; 0x8af
 80182c0:	4905      	ldr	r1, [pc, #20]	; (80182d8 <tcp_next_iss+0x30>)
 80182c2:	4806      	ldr	r0, [pc, #24]	; (80182dc <tcp_next_iss+0x34>)
 80182c4:	f008 fb80 	bl	80209c8 <iprintf>
 80182c8:	e7f0      	b.n	80182ac <tcp_next_iss+0x4>
 80182ca:	bf00      	nop
 80182cc:	200003d4 	.word	0x200003d4
 80182d0:	20036274 	.word	0x20036274
 80182d4:	0803db18 	.word	0x0803db18
 80182d8:	0803dcbc 	.word	0x0803dcbc
 80182dc:	0802697c 	.word	0x0802697c

080182e0 <tcp_eff_send_mss_netif>:
{
 80182e0:	b538      	push	{r3, r4, r5, lr}
 80182e2:	4605      	mov	r5, r0
 80182e4:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80182e6:	b172      	cbz	r2, 8018306 <tcp_eff_send_mss_netif+0x26>
    if (outif == NULL) {
 80182e8:	b144      	cbz	r4, 80182fc <tcp_eff_send_mss_netif+0x1c>
    mtu = outif->mtu;
 80182ea:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  if (mtu != 0) {
 80182ec:	b133      	cbz	r3, 80182fc <tcp_eff_send_mss_netif+0x1c>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80182ee:	2b28      	cmp	r3, #40	; 0x28
 80182f0:	d906      	bls.n	8018300 <tcp_eff_send_mss_netif+0x20>
 80182f2:	3b28      	subs	r3, #40	; 0x28
 80182f4:	b29b      	uxth	r3, r3
 80182f6:	429d      	cmp	r5, r3
 80182f8:	bf28      	it	cs
 80182fa:	461d      	movcs	r5, r3
}
 80182fc:	4628      	mov	r0, r5
 80182fe:	bd38      	pop	{r3, r4, r5, pc}
 8018300:	2500      	movs	r5, #0
 8018302:	4628      	mov	r0, r5
 8018304:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8018306:	4b04      	ldr	r3, [pc, #16]	; (8018318 <tcp_eff_send_mss_netif+0x38>)
 8018308:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801830c:	4903      	ldr	r1, [pc, #12]	; (801831c <tcp_eff_send_mss_netif+0x3c>)
 801830e:	4804      	ldr	r0, [pc, #16]	; (8018320 <tcp_eff_send_mss_netif+0x40>)
 8018310:	f008 fb5a 	bl	80209c8 <iprintf>
 8018314:	e7e8      	b.n	80182e8 <tcp_eff_send_mss_netif+0x8>
 8018316:	bf00      	nop
 8018318:	0803db18 	.word	0x0803db18
 801831c:	0803dbbc 	.word	0x0803dbbc
 8018320:	0802697c 	.word	0x0802697c

08018324 <tcp_connect>:
{
 8018324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8018326:	2800      	cmp	r0, #0
 8018328:	d07d      	beq.n	8018426 <tcp_connect+0x102>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801832a:	2900      	cmp	r1, #0
 801832c:	f000 8085 	beq.w	801843a <tcp_connect+0x116>
 8018330:	461f      	mov	r7, r3
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8018332:	7d03      	ldrb	r3, [r0, #20]
 8018334:	4604      	mov	r4, r0
 8018336:	2b00      	cmp	r3, #0
 8018338:	d165      	bne.n	8018406 <tcp_connect+0xe2>
  ip_addr_set(&pcb->remote_ip, ipaddr);
 801833a:	680b      	ldr	r3, [r1, #0]
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801833c:	7a00      	ldrb	r0, [r0, #8]
  ip_addr_set(&pcb->remote_ip, ipaddr);
 801833e:	6063      	str	r3, [r4, #4]
  pcb->remote_port = port;
 8018340:	8322      	strh	r2, [r4, #24]
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8018342:	2800      	cmp	r0, #0
 8018344:	d046      	beq.n	80183d4 <tcp_connect+0xb0>
    netif = netif_get_by_index(pcb->netif_idx);
 8018346:	f7fe f901 	bl	801654c <netif_get_by_index>
 801834a:	4605      	mov	r5, r0
  if (netif == NULL) {
 801834c:	2d00      	cmp	r5, #0
 801834e:	d067      	beq.n	8018420 <tcp_connect+0xfc>
  if (ip_addr_isany(&pcb->local_ip)) {
 8018350:	6823      	ldr	r3, [r4, #0]
 8018352:	b90b      	cbnz	r3, 8018358 <tcp_connect+0x34>
    ip_addr_copy(pcb->local_ip, *local_ip);
 8018354:	686b      	ldr	r3, [r5, #4]
 8018356:	6023      	str	r3, [r4, #0]
  old_local_port = pcb->local_port;
 8018358:	8ae6      	ldrh	r6, [r4, #22]
  if (pcb->local_port == 0) {
 801835a:	b926      	cbnz	r6, 8018366 <tcp_connect+0x42>
    pcb->local_port = tcp_new_port();
 801835c:	f7fe fe34 	bl	8016fc8 <tcp_new_port>
 8018360:	82e0      	strh	r0, [r4, #22]
    if (pcb->local_port == 0) {
 8018362:	2800      	cmp	r0, #0
 8018364:	d059      	beq.n	801841a <tcp_connect+0xf6>
  iss = tcp_next_iss(pcb);
 8018366:	4620      	mov	r0, r4
 8018368:	f7ff ff9e 	bl	80182a8 <tcp_next_iss>
  pcb->rcv_nxt = 0;
 801836c:	2200      	movs	r2, #0
  pcb->lastack = iss - 1;
 801836e:	1e43      	subs	r3, r0, #1
  pcb->rcv_nxt = 0;
 8018370:	f8df e0fc 	ldr.w	lr, [pc, #252]	; 8018470 <tcp_connect+0x14c>
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8018374:	4629      	mov	r1, r5
  pcb->snd_wnd = TCP_WND;
 8018376:	f44f 6c06 	mov.w	ip, #2144	; 0x860
  pcb->mss = INITIAL_MSS;
 801837a:	f44f 7506 	mov.w	r5, #536	; 0x218
  pcb->snd_nxt = iss;
 801837e:	6520      	str	r0, [r4, #80]	; 0x50
  pcb->rcv_nxt = 0;
 8018380:	6262      	str	r2, [r4, #36]	; 0x24
  pcb->lastack = iss - 1;
 8018382:	6463      	str	r3, [r4, #68]	; 0x44
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8018384:	4628      	mov	r0, r5
  pcb->snd_wl2 = iss - 1;
 8018386:	65a3      	str	r3, [r4, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 8018388:	65e3      	str	r3, [r4, #92]	; 0x5c
  pcb->snd_wnd = TCP_WND;
 801838a:	f8a4 c060 	strh.w	ip, [r4, #96]	; 0x60
  pcb->mss = INITIAL_MSS;
 801838e:	8665      	strh	r5, [r4, #50]	; 0x32
  pcb->rcv_nxt = 0;
 8018390:	e9c4 e20a 	strd	lr, r2, [r4, #40]	; 0x28
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8018394:	1d22      	adds	r2, r4, #4
 8018396:	f7ff ffa3 	bl	80182e0 <tcp_eff_send_mss_netif>
  pcb->cwnd = 1;
 801839a:	2301      	movs	r3, #1
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 801839c:	8660      	strh	r0, [r4, #50]	; 0x32
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 801839e:	2102      	movs	r1, #2
  pcb->connected = connected;
 80183a0:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 80183a4:	4620      	mov	r0, r4
  pcb->cwnd = 1;
 80183a6:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 80183aa:	f002 fb71 	bl	801aa90 <tcp_enqueue_flags>
  if (ret == ERR_OK) {
 80183ae:	4605      	mov	r5, r0
 80183b0:	bb18      	cbnz	r0, 80183fa <tcp_connect+0xd6>
    pcb->state = SYN_SENT;
 80183b2:	2302      	movs	r3, #2
 80183b4:	7523      	strb	r3, [r4, #20]
    if (old_local_port != 0) {
 80183b6:	b1a6      	cbz	r6, 80183e2 <tcp_connect+0xbe>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80183b8:	4b25      	ldr	r3, [pc, #148]	; (8018450 <tcp_connect+0x12c>)
 80183ba:	681a      	ldr	r2, [r3, #0]
 80183bc:	42a2      	cmp	r2, r4
 80183be:	d00e      	beq.n	80183de <tcp_connect+0xba>
 80183c0:	b17a      	cbz	r2, 80183e2 <tcp_connect+0xbe>
 80183c2:	68d3      	ldr	r3, [r2, #12]
 80183c4:	429c      	cmp	r4, r3
 80183c6:	d01a      	beq.n	80183fe <tcp_connect+0xda>
 80183c8:	b15b      	cbz	r3, 80183e2 <tcp_connect+0xbe>
 80183ca:	68da      	ldr	r2, [r3, #12]
 80183cc:	42a2      	cmp	r2, r4
 80183ce:	d017      	beq.n	8018400 <tcp_connect+0xdc>
 80183d0:	4613      	mov	r3, r2
 80183d2:	e7f9      	b.n	80183c8 <tcp_connect+0xa4>
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80183d4:	1d20      	adds	r0, r4, #4
 80183d6:	f005 fe71 	bl	801e0bc <ip4_route>
 80183da:	4605      	mov	r5, r0
 80183dc:	e7b6      	b.n	801834c <tcp_connect+0x28>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80183de:	68e2      	ldr	r2, [r4, #12]
 80183e0:	601a      	str	r2, [r3, #0]
    TCP_REG_ACTIVE(pcb);
 80183e2:	4b1c      	ldr	r3, [pc, #112]	; (8018454 <tcp_connect+0x130>)
 80183e4:	681a      	ldr	r2, [r3, #0]
 80183e6:	601c      	str	r4, [r3, #0]
 80183e8:	60e2      	str	r2, [r4, #12]
 80183ea:	f003 f89f 	bl	801b52c <tcp_timer_needed>
 80183ee:	4b1a      	ldr	r3, [pc, #104]	; (8018458 <tcp_connect+0x134>)
 80183f0:	2201      	movs	r2, #1
    tcp_output(pcb);
 80183f2:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(pcb);
 80183f4:	701a      	strb	r2, [r3, #0]
    tcp_output(pcb);
 80183f6:	f002 fd65 	bl	801aec4 <tcp_output>
}
 80183fa:	4628      	mov	r0, r5
 80183fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80183fe:	4613      	mov	r3, r2
 8018400:	68e2      	ldr	r2, [r4, #12]
 8018402:	60da      	str	r2, [r3, #12]
 8018404:	e7ed      	b.n	80183e2 <tcp_connect+0xbe>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8018406:	4b15      	ldr	r3, [pc, #84]	; (801845c <tcp_connect+0x138>)
 8018408:	f44f 6287 	mov.w	r2, #1080	; 0x438
 801840c:	4914      	ldr	r1, [pc, #80]	; (8018460 <tcp_connect+0x13c>)
 801840e:	f06f 0509 	mvn.w	r5, #9
 8018412:	4814      	ldr	r0, [pc, #80]	; (8018464 <tcp_connect+0x140>)
 8018414:	f008 fad8 	bl	80209c8 <iprintf>
 8018418:	e7ef      	b.n	80183fa <tcp_connect+0xd6>
      return ERR_BUF;
 801841a:	f06f 0501 	mvn.w	r5, #1
 801841e:	e7ec      	b.n	80183fa <tcp_connect+0xd6>
    return ERR_RTE;
 8018420:	f06f 0503 	mvn.w	r5, #3
 8018424:	e7e9      	b.n	80183fa <tcp_connect+0xd6>
  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8018426:	4b0d      	ldr	r3, [pc, #52]	; (801845c <tcp_connect+0x138>)
 8018428:	f240 4235 	movw	r2, #1077	; 0x435
 801842c:	490e      	ldr	r1, [pc, #56]	; (8018468 <tcp_connect+0x144>)
 801842e:	f06f 050f 	mvn.w	r5, #15
 8018432:	480c      	ldr	r0, [pc, #48]	; (8018464 <tcp_connect+0x140>)
 8018434:	f008 fac8 	bl	80209c8 <iprintf>
 8018438:	e7df      	b.n	80183fa <tcp_connect+0xd6>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801843a:	4b08      	ldr	r3, [pc, #32]	; (801845c <tcp_connect+0x138>)
 801843c:	f240 4236 	movw	r2, #1078	; 0x436
 8018440:	490a      	ldr	r1, [pc, #40]	; (801846c <tcp_connect+0x148>)
 8018442:	f06f 050f 	mvn.w	r5, #15
 8018446:	4807      	ldr	r0, [pc, #28]	; (8018464 <tcp_connect+0x140>)
 8018448:	f008 fabe 	bl	80209c8 <iprintf>
 801844c:	e7d5      	b.n	80183fa <tcp_connect+0xd6>
 801844e:	bf00      	nop
 8018450:	2003627c 	.word	0x2003627c
 8018454:	20036270 	.word	0x20036270
 8018458:	2003626c 	.word	0x2003626c
 801845c:	0803db18 	.word	0x0803db18
 8018460:	0803db8c 	.word	0x0803db8c
 8018464:	0802697c 	.word	0x0802697c
 8018468:	0803db54 	.word	0x0803db54
 801846c:	0803db70 	.word	0x0803db70
 8018470:	08600860 	.word	0x08600860

08018474 <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
 8018474:	b308      	cbz	r0, 80184ba <tcp_netif_ip_addr_changed+0x46>
 8018476:	6802      	ldr	r2, [r0, #0]
{
 8018478:	b538      	push	{r3, r4, r5, lr}
 801847a:	4605      	mov	r5, r0
  if (!ip_addr_isany(old_addr)) {
 801847c:	b902      	cbnz	r2, 8018480 <tcp_netif_ip_addr_changed+0xc>
}
 801847e:	bd38      	pop	{r3, r4, r5, pc}
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8018480:	4b0e      	ldr	r3, [pc, #56]	; (80184bc <tcp_netif_ip_addr_changed+0x48>)
 8018482:	460c      	mov	r4, r1
 8018484:	6819      	ldr	r1, [r3, #0]
 8018486:	f7ff fc39 	bl	8017cfc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801848a:	4b0d      	ldr	r3, [pc, #52]	; (80184c0 <tcp_netif_ip_addr_changed+0x4c>)
 801848c:	4628      	mov	r0, r5
 801848e:	6819      	ldr	r1, [r3, #0]
 8018490:	f7ff fc34 	bl	8017cfc <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 8018494:	2c00      	cmp	r4, #0
 8018496:	d0f2      	beq.n	801847e <tcp_netif_ip_addr_changed+0xa>
 8018498:	6823      	ldr	r3, [r4, #0]
 801849a:	2b00      	cmp	r3, #0
 801849c:	d0ef      	beq.n	801847e <tcp_netif_ip_addr_changed+0xa>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801849e:	4b09      	ldr	r3, [pc, #36]	; (80184c4 <tcp_netif_ip_addr_changed+0x50>)
 80184a0:	681b      	ldr	r3, [r3, #0]
 80184a2:	2b00      	cmp	r3, #0
 80184a4:	d0eb      	beq.n	801847e <tcp_netif_ip_addr_changed+0xa>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80184a6:	6819      	ldr	r1, [r3, #0]
 80184a8:	682a      	ldr	r2, [r5, #0]
 80184aa:	4291      	cmp	r1, r2
 80184ac:	d101      	bne.n	80184b2 <tcp_netif_ip_addr_changed+0x3e>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80184ae:	6822      	ldr	r2, [r4, #0]
 80184b0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80184b2:	68db      	ldr	r3, [r3, #12]
 80184b4:	2b00      	cmp	r3, #0
 80184b6:	d1f6      	bne.n	80184a6 <tcp_netif_ip_addr_changed+0x32>
}
 80184b8:	bd38      	pop	{r3, r4, r5, pc}
 80184ba:	4770      	bx	lr
 80184bc:	20036270 	.word	0x20036270
 80184c0:	2003627c 	.word	0x2003627c
 80184c4:	20036278 	.word	0x20036278

080184c8 <tcp_free_ooseq>:
{
 80184c8:	b538      	push	{r3, r4, r5, lr}
 80184ca:	4605      	mov	r5, r0
  if (pcb->ooseq) {
 80184cc:	6f40      	ldr	r0, [r0, #116]	; 0x74
 80184ce:	b130      	cbz	r0, 80184de <tcp_free_ooseq+0x16>
    struct tcp_seg *next = seg->next;
 80184d0:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 80184d2:	f7fe ff55 	bl	8017380 <tcp_seg_free>
  while (seg != NULL) {
 80184d6:	4620      	mov	r0, r4
 80184d8:	2c00      	cmp	r4, #0
 80184da:	d1f9      	bne.n	80184d0 <tcp_free_ooseq+0x8>
    pcb->ooseq = NULL;
 80184dc:	676c      	str	r4, [r5, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80184de:	bd38      	pop	{r3, r4, r5, pc}

080184e0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80184e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80184e4:	4606      	mov	r6, r0
 80184e6:	2800      	cmp	r0, #0
 80184e8:	f000 808a 	beq.w	8018600 <tcp_parseopt+0x120>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80184ec:	4b51      	ldr	r3, [pc, #324]	; (8018634 <tcp_parseopt+0x154>)
 80184ee:	881f      	ldrh	r7, [r3, #0]
 80184f0:	2f00      	cmp	r7, #0
 80184f2:	d063      	beq.n	80185bc <tcp_parseopt+0xdc>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80184f4:	4a50      	ldr	r2, [pc, #320]	; (8018638 <tcp_parseopt+0x158>)
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80184f6:	2300      	movs	r3, #0
 80184f8:	4c50      	ldr	r4, [pc, #320]	; (801863c <tcp_parseopt+0x15c>)
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80184fa:	f8b2 c000 	ldrh.w	ip, [r2]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80184fe:	461a      	mov	r2, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8018500:	484f      	ldr	r0, [pc, #316]	; (8018640 <tcp_parseopt+0x160>)
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8018502:	4950      	ldr	r1, [pc, #320]	; (8018644 <tcp_parseopt+0x164>)
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8018504:	fa5f fa8c 	uxtb.w	sl, ip
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018508:	8023      	strh	r3, [r4, #0]
 801850a:	461c      	mov	r4, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801850c:	6805      	ldr	r5, [r0, #0]
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801850e:	f8d1 8000 	ldr.w	r8, [r1]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018512:	4613      	mov	r3, r2
 8018514:	f04f 0e00 	mov.w	lr, #0
    return tcphdr_opt2[idx];
 8018518:	eba2 090a 	sub.w	r9, r2, sl
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801851c:	eb02 000e 	add.w	r0, r2, lr
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018520:	429f      	cmp	r7, r3
  u16_t optidx = tcp_optidx++;
 8018522:	f103 0101 	add.w	r1, r3, #1
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8018526:	fa1f fb80 	uxth.w	fp, r0
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801852a:	d977      	bls.n	801861c <tcp_parseopt+0x13c>
  u16_t optidx = tcp_optidx++;
 801852c:	b289      	uxth	r1, r1
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801852e:	2d00      	cmp	r5, #0
 8018530:	d034      	beq.n	801859c <tcp_parseopt+0xbc>
    return tcphdr_opt2[idx];
 8018532:	eb09 040e 	add.w	r4, r9, lr
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8018536:	45dc      	cmp	ip, fp
    return tcphdr_opt2[idx];
 8018538:	b2e4      	uxtb	r4, r4
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801853a:	d831      	bhi.n	80185a0 <tcp_parseopt+0xc0>
    return tcphdr_opt2[idx];
 801853c:	f815 b004 	ldrb.w	fp, [r5, r4]
      u8_t opt = tcp_get_next_optbyte();
      switch (opt) {
 8018540:	f1bb 0f01 	cmp.w	fp, #1
 8018544:	d032      	beq.n	80185ac <tcp_parseopt+0xcc>
 8018546:	d371      	bcc.n	801862c <tcp_parseopt+0x14c>
 8018548:	f1bb 0f02 	cmp.w	fp, #2
 801854c:	d138      	bne.n	80185c0 <tcp_parseopt+0xe0>
  u16_t optidx = tcp_optidx++;
 801854e:	1c98      	adds	r0, r3, #2
 8018550:	b280      	uxth	r0, r0
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8018552:	b10d      	cbz	r5, 8018558 <tcp_parseopt+0x78>
 8018554:	4561      	cmp	r1, ip
 8018556:	d23e      	bcs.n	80185d6 <tcp_parseopt+0xf6>
    return opts[optidx];
 8018558:	4441      	add	r1, r8
 801855a:	7d0a      	ldrb	r2, [r1, #20]
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801855c:	2a04      	cmp	r2, #4
 801855e:	d162      	bne.n	8018626 <tcp_parseopt+0x146>
 8018560:	1c42      	adds	r2, r0, #1
 8018562:	42ba      	cmp	r2, r7
 8018564:	da5f      	bge.n	8018626 <tcp_parseopt+0x146>
  u16_t optidx = tcp_optidx++;
 8018566:	1cd9      	adds	r1, r3, #3
 8018568:	1d1a      	adds	r2, r3, #4
 801856a:	b289      	uxth	r1, r1
 801856c:	b292      	uxth	r2, r2
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801856e:	2d00      	cmp	r5, #0
 8018570:	d04e      	beq.n	8018610 <tcp_parseopt+0x130>
 8018572:	4584      	cmp	ip, r0
 8018574:	d939      	bls.n	80185ea <tcp_parseopt+0x10a>
    return opts[optidx];
 8018576:	4440      	add	r0, r8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8018578:	458c      	cmp	ip, r1
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801857a:	7d03      	ldrb	r3, [r0, #20]
 801857c:	ea4f 2303 	mov.w	r3, r3, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8018580:	d83b      	bhi.n	80185fa <tcp_parseopt+0x11a>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8018582:	eba1 010a 	sub.w	r1, r1, sl
    return tcphdr_opt2[idx];
 8018586:	b2c9      	uxtb	r1, r1
 8018588:	5c69      	ldrb	r1, [r5, r1]
          mss |= tcp_get_next_optbyte();
 801858a:	430b      	orrs	r3, r1
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801858c:	1e59      	subs	r1, r3, #1
 801858e:	f5b1 7f06 	cmp.w	r1, #536	; 0x218
 8018592:	bf28      	it	cs
 8018594:	f44f 7306 	movcs.w	r3, #536	; 0x218
 8018598:	8673      	strh	r3, [r6, #50]	; 0x32
          break;
 801859a:	e01a      	b.n	80185d2 <tcp_parseopt+0xf2>
 801859c:	eb02 000e 	add.w	r0, r2, lr
    return opts[optidx];
 80185a0:	4440      	add	r0, r8
 80185a2:	f890 b014 	ldrb.w	fp, [r0, #20]
      switch (opt) {
 80185a6:	f1bb 0f01 	cmp.w	fp, #1
 80185aa:	d1cc      	bne.n	8018546 <tcp_parseopt+0x66>
 80185ac:	f10e 0e01 	add.w	lr, lr, #1
  u16_t optidx = tcp_optidx++;
 80185b0:	460b      	mov	r3, r1
 80185b2:	465c      	mov	r4, fp
 80185b4:	e7b2      	b.n	801851c <tcp_parseopt+0x3c>
 80185b6:	3302      	adds	r3, #2
 80185b8:	4a20      	ldr	r2, [pc, #128]	; (801863c <tcp_parseopt+0x15c>)
 80185ba:	8013      	strh	r3, [r2, #0]
             can skip past them. */
          tcp_optidx += data - 2;
      }
    }
  }
}
 80185bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80185c0:	b10d      	cbz	r5, 80185c6 <tcp_parseopt+0xe6>
 80185c2:	4561      	cmp	r1, ip
 80185c4:	d20c      	bcs.n	80185e0 <tcp_parseopt+0x100>
    return opts[optidx];
 80185c6:	4441      	add	r1, r8
 80185c8:	7d0a      	ldrb	r2, [r1, #20]
          if (data < 2) {
 80185ca:	2a01      	cmp	r2, #1
 80185cc:	d9f3      	bls.n	80185b6 <tcp_parseopt+0xd6>
          tcp_optidx += data - 2;
 80185ce:	441a      	add	r2, r3
 80185d0:	b292      	uxth	r2, r2
 80185d2:	2401      	movs	r4, #1
 80185d4:	e79d      	b.n	8018512 <tcp_parseopt+0x32>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80185d6:	eba1 010a 	sub.w	r1, r1, sl
    return tcphdr_opt2[idx];
 80185da:	b2c9      	uxtb	r1, r1
 80185dc:	5c6a      	ldrb	r2, [r5, r1]
 80185de:	e7bd      	b.n	801855c <tcp_parseopt+0x7c>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80185e0:	eba1 010a 	sub.w	r1, r1, sl
    return tcphdr_opt2[idx];
 80185e4:	b2c9      	uxtb	r1, r1
 80185e6:	5c6a      	ldrb	r2, [r5, r1]
 80185e8:	e7ef      	b.n	80185ca <tcp_parseopt+0xea>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80185ea:	eba0 000a 	sub.w	r0, r0, sl
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80185ee:	458c      	cmp	ip, r1
    return tcphdr_opt2[idx];
 80185f0:	b2c0      	uxtb	r0, r0
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80185f2:	5c2b      	ldrb	r3, [r5, r0]
 80185f4:	ea4f 2303 	mov.w	r3, r3, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80185f8:	d9c3      	bls.n	8018582 <tcp_parseopt+0xa2>
    return opts[optidx];
 80185fa:	4441      	add	r1, r8
 80185fc:	7d09      	ldrb	r1, [r1, #20]
 80185fe:	e7c4      	b.n	801858a <tcp_parseopt+0xaa>
  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8018600:	4b11      	ldr	r3, [pc, #68]	; (8018648 <tcp_parseopt+0x168>)
 8018602:	f240 727d 	movw	r2, #1917	; 0x77d
 8018606:	4911      	ldr	r1, [pc, #68]	; (801864c <tcp_parseopt+0x16c>)
 8018608:	4811      	ldr	r0, [pc, #68]	; (8018650 <tcp_parseopt+0x170>)
 801860a:	f008 f9dd 	bl	80209c8 <iprintf>
 801860e:	e76d      	b.n	80184ec <tcp_parseopt+0xc>
    return opts[optidx];
 8018610:	4440      	add	r0, r8
 8018612:	4441      	add	r1, r8
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8018614:	7d03      	ldrb	r3, [r0, #20]
    return opts[optidx];
 8018616:	7d09      	ldrb	r1, [r1, #20]
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8018618:	021b      	lsls	r3, r3, #8
 801861a:	e7b6      	b.n	801858a <tcp_parseopt+0xaa>
 801861c:	2c00      	cmp	r4, #0
 801861e:	d0cd      	beq.n	80185bc <tcp_parseopt+0xdc>
 8018620:	4a06      	ldr	r2, [pc, #24]	; (801863c <tcp_parseopt+0x15c>)
 8018622:	8013      	strh	r3, [r2, #0]
 8018624:	e7ca      	b.n	80185bc <tcp_parseopt+0xdc>
 8018626:	4b05      	ldr	r3, [pc, #20]	; (801863c <tcp_parseopt+0x15c>)
 8018628:	8018      	strh	r0, [r3, #0]
 801862a:	e7c7      	b.n	80185bc <tcp_parseopt+0xdc>
 801862c:	4b03      	ldr	r3, [pc, #12]	; (801863c <tcp_parseopt+0x15c>)
 801862e:	8019      	strh	r1, [r3, #0]
 8018630:	e7c4      	b.n	80185bc <tcp_parseopt+0xdc>
 8018632:	bf00      	nop
 8018634:	20022420 	.word	0x20022420
 8018638:	20022418 	.word	0x20022418
 801863c:	20022410 	.word	0x20022410
 8018640:	2002241c 	.word	0x2002241c
 8018644:	20022414 	.word	0x20022414
 8018648:	0803e35c 	.word	0x0803e35c
 801864c:	0803e390 	.word	0x0803e390
 8018650:	0802697c 	.word	0x0802697c

08018654 <tcp_oos_insert_segment>:
{
 8018654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018656:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8018658:	4605      	mov	r5, r0
 801865a:	2800      	cmp	r0, #0
 801865c:	d03e      	beq.n	80186dc <tcp_oos_insert_segment+0x88>
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801865e:	68eb      	ldr	r3, [r5, #12]
 8018660:	8998      	ldrh	r0, [r3, #12]
 8018662:	f7fc f9eb 	bl	8014a3c <lwip_htons>
 8018666:	07c2      	lsls	r2, r0, #31
 8018668:	d432      	bmi.n	80186d0 <tcp_oos_insert_segment+0x7c>
 801866a:	4e20      	ldr	r6, [pc, #128]	; (80186ec <tcp_oos_insert_segment+0x98>)
 801866c:	e005      	b.n	801867a <tcp_oos_insert_segment+0x26>
      next = next->next;
 801866e:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 8018670:	4620      	mov	r0, r4
 8018672:	f7fe fe85 	bl	8017380 <tcp_seg_free>
 8018676:	463c      	mov	r4, r7
    while (next &&
 8018678:	b1ef      	cbz	r7, 80186b6 <tcp_oos_insert_segment+0x62>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801867a:	68e1      	ldr	r1, [r4, #12]
 801867c:	8923      	ldrh	r3, [r4, #8]
 801867e:	6848      	ldr	r0, [r1, #4]
 8018680:	6837      	ldr	r7, [r6, #0]
 8018682:	892a      	ldrh	r2, [r5, #8]
 8018684:	4403      	add	r3, r0
 8018686:	443a      	add	r2, r7
 8018688:	1ad3      	subs	r3, r2, r3
    while (next &&
 801868a:	2b00      	cmp	r3, #0
 801868c:	db15      	blt.n	80186ba <tcp_oos_insert_segment+0x66>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801868e:	8988      	ldrh	r0, [r1, #12]
 8018690:	f7fc f9d4 	bl	8014a3c <lwip_htons>
 8018694:	07c3      	lsls	r3, r0, #31
 8018696:	d5ea      	bpl.n	801866e <tcp_oos_insert_segment+0x1a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8018698:	68eb      	ldr	r3, [r5, #12]
 801869a:	2001      	movs	r0, #1
 801869c:	899f      	ldrh	r7, [r3, #12]
 801869e:	f7fc f9cd 	bl	8014a3c <lwip_htons>
 80186a2:	68eb      	ldr	r3, [r5, #12]
 80186a4:	4338      	orrs	r0, r7
      next = next->next;
 80186a6:	6827      	ldr	r7, [r4, #0]
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80186a8:	8198      	strh	r0, [r3, #12]
      tcp_seg_free(old_seg);
 80186aa:	4620      	mov	r0, r4
 80186ac:	f7fe fe68 	bl	8017380 <tcp_seg_free>
 80186b0:	463c      	mov	r4, r7
    while (next &&
 80186b2:	2f00      	cmp	r7, #0
 80186b4:	d1e1      	bne.n	801867a <tcp_oos_insert_segment+0x26>
  cseg->next = next;
 80186b6:	602c      	str	r4, [r5, #0]
}
 80186b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80186ba:	1a12      	subs	r2, r2, r0
    if (next &&
 80186bc:	2a00      	cmp	r2, #0
 80186be:	ddfa      	ble.n	80186b6 <tcp_oos_insert_segment+0x62>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80186c0:	1bc1      	subs	r1, r0, r7
      pbuf_realloc(cseg->p, cseg->len);
 80186c2:	6868      	ldr	r0, [r5, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80186c4:	b289      	uxth	r1, r1
 80186c6:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80186c8:	f7fe f932 	bl	8016930 <pbuf_realloc>
  cseg->next = next;
 80186cc:	602c      	str	r4, [r5, #0]
}
 80186ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_segs_free(next);
 80186d0:	4620      	mov	r0, r4
    next = NULL;
 80186d2:	2400      	movs	r4, #0
    tcp_segs_free(next);
 80186d4:	f7fe fe62 	bl	801739c <tcp_segs_free>
  cseg->next = next;
 80186d8:	602c      	str	r4, [r5, #0]
}
 80186da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80186dc:	4b04      	ldr	r3, [pc, #16]	; (80186f0 <tcp_oos_insert_segment+0x9c>)
 80186de:	f240 421f 	movw	r2, #1055	; 0x41f
 80186e2:	4904      	ldr	r1, [pc, #16]	; (80186f4 <tcp_oos_insert_segment+0xa0>)
 80186e4:	4804      	ldr	r0, [pc, #16]	; (80186f8 <tcp_oos_insert_segment+0xa4>)
 80186e6:	f008 f96f 	bl	80209c8 <iprintf>
 80186ea:	e7b8      	b.n	801865e <tcp_oos_insert_segment+0xa>
 80186ec:	2002240c 	.word	0x2002240c
 80186f0:	0803e35c 	.word	0x0803e35c
 80186f4:	0803e334 	.word	0x0803e334
 80186f8:	0802697c 	.word	0x0802697c

080186fc <tcp_input_delayed_close>:
{
 80186fc:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80186fe:	4604      	mov	r4, r0
 8018700:	b930      	cbnz	r0, 8018710 <tcp_input_delayed_close+0x14>
 8018702:	4b0f      	ldr	r3, [pc, #60]	; (8018740 <tcp_input_delayed_close+0x44>)
 8018704:	f240 225a 	movw	r2, #602	; 0x25a
 8018708:	490e      	ldr	r1, [pc, #56]	; (8018744 <tcp_input_delayed_close+0x48>)
 801870a:	480f      	ldr	r0, [pc, #60]	; (8018748 <tcp_input_delayed_close+0x4c>)
 801870c:	f008 f95c 	bl	80209c8 <iprintf>
  if (recv_flags & TF_CLOSED) {
 8018710:	4b0e      	ldr	r3, [pc, #56]	; (801874c <tcp_input_delayed_close+0x50>)
 8018712:	7818      	ldrb	r0, [r3, #0]
 8018714:	f010 0010 	ands.w	r0, r0, #16
 8018718:	d011      	beq.n	801873e <tcp_input_delayed_close+0x42>
    if (!(pcb->flags & TF_RXCLOSED)) {
 801871a:	8b63      	ldrh	r3, [r4, #26]
 801871c:	06db      	lsls	r3, r3, #27
 801871e:	d406      	bmi.n	801872e <tcp_input_delayed_close+0x32>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8018720:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8018724:	b11b      	cbz	r3, 801872e <tcp_input_delayed_close+0x32>
 8018726:	f06f 010e 	mvn.w	r1, #14
 801872a:	6920      	ldr	r0, [r4, #16]
 801872c:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801872e:	4621      	mov	r1, r4
 8018730:	4807      	ldr	r0, [pc, #28]	; (8018750 <tcp_input_delayed_close+0x54>)
 8018732:	f7ff f9ad 	bl	8017a90 <tcp_pcb_remove>
    tcp_free(pcb);
 8018736:	4620      	mov	r0, r4
 8018738:	f7fe fcba 	bl	80170b0 <tcp_free>
 801873c:	2001      	movs	r0, #1
}
 801873e:	bd10      	pop	{r4, pc}
 8018740:	0803e35c 	.word	0x0803e35c
 8018744:	0803e30c 	.word	0x0803e30c
 8018748:	0802697c 	.word	0x0802697c
 801874c:	20022408 	.word	0x20022408
 8018750:	20036270 	.word	0x20036270

08018754 <tcp_free_acked_segments.isra.1>:
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 8018754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018758:	b083      	sub	sp, #12
 801875a:	9201      	str	r2, [sp, #4]
  while (seg_list != NULL &&
 801875c:	2900      	cmp	r1, #0
 801875e:	d03e      	beq.n	80187de <tcp_free_acked_segments.isra.1+0x8a>
 8018760:	4606      	mov	r6, r0
 8018762:	460c      	mov	r4, r1
 8018764:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8018818 <tcp_free_acked_segments.isra.1+0xc4>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8018768:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 801880c <tcp_free_acked_segments.isra.1+0xb8>
 801876c:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 801881c <tcp_free_acked_segments.isra.1+0xc8>
 8018770:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8018814 <tcp_free_acked_segments.isra.1+0xc0>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8018774:	68e3      	ldr	r3, [r4, #12]
 8018776:	6858      	ldr	r0, [r3, #4]
 8018778:	f7fc f964 	bl	8014a44 <lwip_htonl>
 801877c:	68e3      	ldr	r3, [r4, #12]
 801877e:	4605      	mov	r5, r0
 8018780:	8927      	ldrh	r7, [r4, #8]
 8018782:	8998      	ldrh	r0, [r3, #12]
 8018784:	f7fc f95a 	bl	8014a3c <lwip_htons>
 8018788:	f8d8 3000 	ldr.w	r3, [r8]
 801878c:	f010 0003 	ands.w	r0, r0, #3
 8018790:	eba5 0503 	sub.w	r5, r5, r3
 8018794:	bf18      	it	ne
 8018796:	2001      	movne	r0, #1
 8018798:	443d      	add	r5, r7
 801879a:	4428      	add	r0, r5
  while (seg_list != NULL &&
 801879c:	2800      	cmp	r0, #0
 801879e:	dc2e      	bgt.n	80187fe <tcp_free_acked_segments.isra.1+0xaa>
    seg_list = seg_list->next;
 80187a0:	e9d4 5000 	ldrd	r5, r0, [r4]
    clen = pbuf_clen(next->p);
 80187a4:	f7fe f920 	bl	80169e8 <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80187a8:	8833      	ldrh	r3, [r6, #0]
    clen = pbuf_clen(next->p);
 80187aa:	4607      	mov	r7, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80187ac:	4298      	cmp	r0, r3
 80187ae:	d81d      	bhi.n	80187ec <tcp_free_acked_segments.isra.1+0x98>
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80187b0:	4a15      	ldr	r2, [pc, #84]	; (8018808 <tcp_free_acked_segments.isra.1+0xb4>)
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80187b2:	1bdf      	subs	r7, r3, r7
    tcp_seg_free(next);
 80187b4:	4620      	mov	r0, r4
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80187b6:	8811      	ldrh	r1, [r2, #0]
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80187b8:	8037      	strh	r7, [r6, #0]
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80187ba:	8923      	ldrh	r3, [r4, #8]
  while (seg_list != NULL &&
 80187bc:	462c      	mov	r4, r5
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80187be:	440b      	add	r3, r1
 80187c0:	8013      	strh	r3, [r2, #0]
    tcp_seg_free(next);
 80187c2:	f7fe fddd 	bl	8017380 <tcp_seg_free>
    if (pcb->snd_queuelen != 0) {
 80187c6:	8833      	ldrh	r3, [r6, #0]
 80187c8:	b16b      	cbz	r3, 80187e6 <tcp_free_acked_segments.isra.1+0x92>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80187ca:	b965      	cbnz	r5, 80187e6 <tcp_free_acked_segments.isra.1+0x92>
 80187cc:	9b01      	ldr	r3, [sp, #4]
 80187ce:	b953      	cbnz	r3, 80187e6 <tcp_free_acked_segments.isra.1+0x92>
 80187d0:	4b0e      	ldr	r3, [pc, #56]	; (801880c <tcp_free_acked_segments.isra.1+0xb8>)
 80187d2:	f240 4262 	movw	r2, #1122	; 0x462
 80187d6:	490e      	ldr	r1, [pc, #56]	; (8018810 <tcp_free_acked_segments.isra.1+0xbc>)
 80187d8:	480e      	ldr	r0, [pc, #56]	; (8018814 <tcp_free_acked_segments.isra.1+0xc0>)
 80187da:	f008 f8f5 	bl	80209c8 <iprintf>
  while (seg_list != NULL &&
 80187de:	2000      	movs	r0, #0
}
 80187e0:	b003      	add	sp, #12
 80187e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (seg_list != NULL &&
 80187e6:	2d00      	cmp	r5, #0
 80187e8:	d1c4      	bne.n	8018774 <tcp_free_acked_segments.isra.1+0x20>
 80187ea:	e7f8      	b.n	80187de <tcp_free_acked_segments.isra.1+0x8a>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80187ec:	465b      	mov	r3, fp
 80187ee:	f240 4257 	movw	r2, #1111	; 0x457
 80187f2:	4651      	mov	r1, sl
 80187f4:	4648      	mov	r0, r9
 80187f6:	f008 f8e7 	bl	80209c8 <iprintf>
 80187fa:	8833      	ldrh	r3, [r6, #0]
 80187fc:	e7d8      	b.n	80187b0 <tcp_free_acked_segments.isra.1+0x5c>
  while (seg_list != NULL &&
 80187fe:	4620      	mov	r0, r4
}
 8018800:	b003      	add	sp, #12
 8018802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018806:	bf00      	nop
 8018808:	20022400 	.word	0x20022400
 801880c:	0803e35c 	.word	0x0803e35c
 8018810:	0803e10c 	.word	0x0803e10c
 8018814:	0802697c 	.word	0x0802697c
 8018818:	200223e8 	.word	0x200223e8
 801881c:	0803e0e4 	.word	0x0803e0e4

08018820 <tcp_receive>:
{
 8018820:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8018824:	4604      	mov	r4, r0
 8018826:	2800      	cmp	r0, #0
 8018828:	f000 8119 	beq.w	8018a5e <tcp_receive+0x23e>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801882c:	7d23      	ldrb	r3, [r4, #20]
 801882e:	2b03      	cmp	r3, #3
 8018830:	f240 8085 	bls.w	801893e <tcp_receive+0x11e>
  if (flags & TCP_ACK) {
 8018834:	4bb5      	ldr	r3, [pc, #724]	; (8018b0c <tcp_receive+0x2ec>)
 8018836:	4db6      	ldr	r5, [pc, #728]	; (8018b10 <tcp_receive+0x2f0>)
 8018838:	781a      	ldrb	r2, [r3, #0]
 801883a:	682b      	ldr	r3, [r5, #0]
 801883c:	06d6      	lsls	r6, r2, #27
 801883e:	d46a      	bmi.n	8018916 <tcp_receive+0xf6>
 8018840:	4eb4      	ldr	r6, [pc, #720]	; (8018b14 <tcp_receive+0x2f4>)
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8018842:	8832      	ldrh	r2, [r6, #0]
 8018844:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8018846:	2a00      	cmp	r2, #0
 8018848:	d055      	beq.n	80188f6 <tcp_receive+0xd6>
 801884a:	7d20      	ldrb	r0, [r4, #20]
 801884c:	2806      	cmp	r0, #6
 801884e:	d852      	bhi.n	80188f6 <tcp_receive+0xd6>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8018850:	1acf      	subs	r7, r1, r3
 8018852:	2f01      	cmp	r7, #1
 8018854:	d406      	bmi.n	8018864 <tcp_receive+0x44>
 8018856:	1a8a      	subs	r2, r1, r2
 8018858:	f1c3 0001 	rsb	r0, r3, #1
 801885c:	4402      	add	r2, r0
 801885e:	2a00      	cmp	r2, #0
 8018860:	f340 81c5 	ble.w	8018bee <tcp_receive+0x3ce>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8018864:	1a5a      	subs	r2, r3, r1
 8018866:	2a00      	cmp	r2, #0
 8018868:	f2c0 8101 	blt.w	8018a6e <tcp_receive+0x24e>
 801886c:	f103 0c01 	add.w	ip, r3, #1
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018870:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 8018872:	ebac 0201 	sub.w	r2, ip, r1
 8018876:	1a12      	subs	r2, r2, r0
 8018878:	2a00      	cmp	r2, #0
 801887a:	f340 80fd 	ble.w	8018a78 <tcp_receive+0x258>
        tcp_send_empty_ack(pcb);
 801887e:	4620      	mov	r0, r4
}
 8018880:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        tcp_send_empty_ack(pcb);
 8018884:	f002 baea 	b.w	801ae5c <tcp_send_empty_ack>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8018888:	ebac 0102 	sub.w	r1, ip, r2
 801888c:	2900      	cmp	r1, #0
 801888e:	da4e      	bge.n	801892e <tcp_receive+0x10e>
 8018890:	49a1      	ldr	r1, [pc, #644]	; (8018b18 <tcp_receive+0x2f8>)
 8018892:	6809      	ldr	r1, [r1, #0]
 8018894:	89c9      	ldrh	r1, [r1, #14]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8018896:	f8b4 0062 	ldrh.w	r0, [r4, #98]	; 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801889a:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801889e:	4288      	cmp	r0, r1
      pcb->snd_wl2 = ackno;
 80188a0:	e9c4 3215 	strd	r3, r2, [r4, #84]	; 0x54
        pcb->snd_wnd_max = pcb->snd_wnd;
 80188a4:	bf38      	it	cc
 80188a6:	f8a4 1062 	strhcc.w	r1, [r4, #98]	; 0x62
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80188aa:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80188ac:	1a11      	subs	r1, r2, r0
 80188ae:	2900      	cmp	r1, #0
 80188b0:	dc4d      	bgt.n	801894e <tcp_receive+0x12e>
      if (tcplen == 0) {
 80188b2:	4e98      	ldr	r6, [pc, #608]	; (8018b14 <tcp_receive+0x2f4>)
 80188b4:	8831      	ldrh	r1, [r6, #0]
 80188b6:	2900      	cmp	r1, #0
 80188b8:	d15a      	bne.n	8018970 <tcp_receive+0x150>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80188ba:	f8b4 8060 	ldrh.w	r8, [r4, #96]	; 0x60
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80188be:	44f4      	add	ip, lr
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80188c0:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80188c2:	4441      	add	r1, r8
 80188c4:	4561      	cmp	r1, ip
 80188c6:	d153      	bne.n	8018970 <tcp_receive+0x150>
          if (pcb->rtime >= 0) {
 80188c8:	8e21      	ldrh	r1, [r4, #48]	; 0x30
            if (pcb->lastack == ackno) {
 80188ca:	0bc9      	lsrs	r1, r1, #15
 80188cc:	d150      	bne.n	8018970 <tcp_receive+0x150>
 80188ce:	4290      	cmp	r0, r2
 80188d0:	d14e      	bne.n	8018970 <tcp_receive+0x150>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80188d2:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
 80188d6:	29ff      	cmp	r1, #255	; 0xff
 80188d8:	f000 83c2 	beq.w	8019060 <tcp_receive+0x840>
                ++pcb->dupacks;
 80188dc:	3101      	adds	r1, #1
 80188de:	b2c9      	uxtb	r1, r1
              if (pcb->dupacks > 3) {
 80188e0:	2903      	cmp	r1, #3
                ++pcb->dupacks;
 80188e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 80188e6:	f200 83bb 	bhi.w	8019060 <tcp_receive+0x840>
              if (pcb->dupacks >= 3) {
 80188ea:	f000 83c4 	beq.w	8019076 <tcp_receive+0x856>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80188ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80188f0:	2900      	cmp	r1, #0
 80188f2:	d137      	bne.n	8018964 <tcp_receive+0x144>
 80188f4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80188f6:	1a5a      	subs	r2, r3, r1
 80188f8:	2a00      	cmp	r2, #0
 80188fa:	db06      	blt.n	801890a <tcp_receive+0xea>
 80188fc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80188fe:	f1c2 0201 	rsb	r2, r2, #1
 8018902:	4413      	add	r3, r2
 8018904:	1a5b      	subs	r3, r3, r1
 8018906:	2b00      	cmp	r3, #0
 8018908:	dd03      	ble.n	8018912 <tcp_receive+0xf2>
      tcp_ack_now(pcb);
 801890a:	8b63      	ldrh	r3, [r4, #26]
 801890c:	f043 0302 	orr.w	r3, r3, #2
 8018910:	8363      	strh	r3, [r4, #26]
}
 8018912:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8018916:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8018918:	4f80      	ldr	r7, [pc, #512]	; (8018b1c <tcp_receive+0x2fc>)
 801891a:	1ac8      	subs	r0, r1, r3
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801891c:	f8b4 e060 	ldrh.w	lr, [r4, #96]	; 0x60
 8018920:	683a      	ldr	r2, [r7, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8018922:	2800      	cmp	r0, #0
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8018924:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8018928:	dbb2      	blt.n	8018890 <tcp_receive+0x70>
 801892a:	4299      	cmp	r1, r3
 801892c:	d0ac      	beq.n	8018888 <tcp_receive+0x68>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801892e:	4594      	cmp	ip, r2
 8018930:	d1bb      	bne.n	80188aa <tcp_receive+0x8a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8018932:	4979      	ldr	r1, [pc, #484]	; (8018b18 <tcp_receive+0x2f8>)
 8018934:	6809      	ldr	r1, [r1, #0]
 8018936:	89c9      	ldrh	r1, [r1, #14]
 8018938:	458e      	cmp	lr, r1
 801893a:	d2b6      	bcs.n	80188aa <tcp_receive+0x8a>
 801893c:	e7ab      	b.n	8018896 <tcp_receive+0x76>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801893e:	4b78      	ldr	r3, [pc, #480]	; (8018b20 <tcp_receive+0x300>)
 8018940:	f240 427c 	movw	r2, #1148	; 0x47c
 8018944:	4977      	ldr	r1, [pc, #476]	; (8018b24 <tcp_receive+0x304>)
 8018946:	4878      	ldr	r0, [pc, #480]	; (8018b28 <tcp_receive+0x308>)
 8018948:	f008 f83e 	bl	80209c8 <iprintf>
 801894c:	e772      	b.n	8018834 <tcp_receive+0x14>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801894e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8018950:	1ad3      	subs	r3, r2, r3
 8018952:	2b00      	cmp	r3, #0
 8018954:	dd10      	ble.n	8018978 <tcp_receive+0x158>
      tcp_send_empty_ack(pcb);
 8018956:	4620      	mov	r0, r4
 8018958:	4e6e      	ldr	r6, [pc, #440]	; (8018b14 <tcp_receive+0x2f4>)
 801895a:	f002 fa7f 	bl	801ae5c <tcp_send_empty_ack>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801895e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018960:	b121      	cbz	r1, 801896c <tcp_receive+0x14c>
 8018962:	683a      	ldr	r2, [r7, #0]
 8018964:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018966:	1a9a      	subs	r2, r3, r2
 8018968:	2a00      	cmp	r2, #0
 801896a:	db57      	blt.n	8018a1c <tcp_receive+0x1fc>
 801896c:	682b      	ldr	r3, [r5, #0]
 801896e:	e768      	b.n	8018842 <tcp_receive+0x22>
        pcb->dupacks = 0;
 8018970:	2300      	movs	r3, #0
 8018972:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018976:	e7f2      	b.n	801895e <tcp_receive+0x13e>
      if (pcb->flags & TF_INFR) {
 8018978:	8b63      	ldrh	r3, [r4, #26]
 801897a:	0758      	lsls	r0, r3, #29
 801897c:	d509      	bpl.n	8018992 <tcp_receive+0x172>
        tcp_clear_flags(pcb, TF_INFR);
 801897e:	f023 0304 	bic.w	r3, r3, #4
        pcb->cwnd = pcb->ssthresh;
 8018982:	f8b4 604a 	ldrh.w	r6, [r4, #74]	; 0x4a
        pcb->bytes_acked = 0;
 8018986:	2000      	movs	r0, #0
        tcp_clear_flags(pcb, TF_INFR);
 8018988:	8363      	strh	r3, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 801898a:	f8a4 6048 	strh.w	r6, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 801898e:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8018992:	f9b4 603c 	ldrsh.w	r6, [r4, #60]	; 0x3c
      pcb->nrtx = 0;
 8018996:	2000      	movs	r0, #0
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8018998:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      pcb->lastack = ackno;
 801899a:	6462      	str	r2, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
 801899c:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801899e:	eb03 03e6 	add.w	r3, r3, r6, asr #3
      pcb->nrtx = 0;
 80189a2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
      if (pcb->state >= ESTABLISHED) {
 80189a6:	2a03      	cmp	r2, #3
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80189a8:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->dupacks = 0;
 80189ac:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
      if (pcb->state >= ESTABLISHED) {
 80189b0:	f200 81c7 	bhi.w	8018d42 <tcp_receive+0x522>
 80189b4:	f104 0666 	add.w	r6, r4, #102	; 0x66
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80189b8:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
 80189bc:	4630      	mov	r0, r6
 80189be:	f7ff fec9 	bl	8018754 <tcp_free_acked_segments.isra.1>
 80189c2:	4602      	mov	r2, r0
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80189c4:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80189c6:	4630      	mov	r0, r6
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80189c8:	6722      	str	r2, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80189ca:	f7ff fec3 	bl	8018754 <tcp_free_acked_segments.isra.1>
      if (pcb->unacked == NULL) {
 80189ce:	6f22      	ldr	r2, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80189d0:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 80189d2:	2a00      	cmp	r2, #0
 80189d4:	f000 8299 	beq.w	8018f0a <tcp_receive+0x6ea>
        pcb->rtime = 0;
 80189d8:	2300      	movs	r3, #0
 80189da:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 80189dc:	2300      	movs	r3, #0
 80189de:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 80189e0:	2800      	cmp	r0, #0
 80189e2:	f000 828f 	beq.w	8018f04 <tcp_receive+0x6e4>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80189e6:	4951      	ldr	r1, [pc, #324]	; (8018b2c <tcp_receive+0x30c>)
 80189e8:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 80189ec:	880e      	ldrh	r6, [r1, #0]
      if (pcb->flags & TF_RTO) {
 80189ee:	8b61      	ldrh	r1, [r4, #26]
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80189f0:	4433      	add	r3, r6
      if (pcb->flags & TF_RTO) {
 80189f2:	050e      	lsls	r6, r1, #20
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80189f4:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 80189f8:	d52f      	bpl.n	8018a5a <tcp_receive+0x23a>
        if (pcb->unacked == NULL) {
 80189fa:	2a00      	cmp	r2, #0
 80189fc:	f000 82a1 	beq.w	8018f42 <tcp_receive+0x722>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8018a00:	68d3      	ldr	r3, [r2, #12]
 8018a02:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 8018a04:	6858      	ldr	r0, [r3, #4]
 8018a06:	f7fc f81d 	bl	8014a44 <lwip_htonl>
 8018a0a:	1a30      	subs	r0, r6, r0
 8018a0c:	2800      	cmp	r0, #0
 8018a0e:	dc24      	bgt.n	8018a5a <tcp_receive+0x23a>
          tcp_clear_flags(pcb, TF_RTO);
 8018a10:	8b63      	ldrh	r3, [r4, #26]
 8018a12:	4e40      	ldr	r6, [pc, #256]	; (8018b14 <tcp_receive+0x2f4>)
 8018a14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8018a18:	8363      	strh	r3, [r4, #26]
 8018a1a:	e7a0      	b.n	801895e <tcp_receive+0x13e>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8018a1c:	4b44      	ldr	r3, [pc, #272]	; (8018b30 <tcp_receive+0x310>)
      m = (s16_t)(m - (pcb->sa >> 3));
 8018a1e:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8018a22:	681b      	ldr	r3, [r3, #0]
 8018a24:	1a59      	subs	r1, r3, r1
      m = (s16_t)(m - (pcb->sa >> 3));
 8018a26:	eba1 01e2 	sub.w	r1, r1, r2, asr #3
 8018a2a:	b289      	uxth	r1, r1
      pcb->sa = (s16_t)(pcb->sa + m);
 8018a2c:	440a      	add	r2, r1
      m = (s16_t)(m - (pcb->sa >> 3));
 8018a2e:	b208      	sxth	r0, r1
      pcb->sa = (s16_t)(pcb->sa + m);
 8018a30:	b212      	sxth	r2, r2
      if (m < 0) {
 8018a32:	2800      	cmp	r0, #0
      pcb->sa = (s16_t)(pcb->sa + m);
 8018a34:	87a2      	strh	r2, [r4, #60]	; 0x3c
      if (m < 0) {
 8018a36:	da01      	bge.n	8018a3c <tcp_receive+0x21c>
        m = (s16_t) - m;
 8018a38:	4249      	negs	r1, r1
 8018a3a:	b208      	sxth	r0, r1
      m = (s16_t)(m - (pcb->sv >> 2));
 8018a3c:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
      pcb->rttest = 0;
 8018a40:	2700      	movs	r7, #0
      pcb->sv = (s16_t)(pcb->sv + m);
 8018a42:	eba3 01a3 	sub.w	r1, r3, r3, asr #2
      pcb->rttest = 0;
 8018a46:	6367      	str	r7, [r4, #52]	; 0x34
 8018a48:	682b      	ldr	r3, [r5, #0]
      pcb->sv = (s16_t)(pcb->sv + m);
 8018a4a:	4401      	add	r1, r0
 8018a4c:	b289      	uxth	r1, r1
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8018a4e:	eb01 02e2 	add.w	r2, r1, r2, asr #3
      pcb->sv = (s16_t)(pcb->sv + m);
 8018a52:	87e1      	strh	r1, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8018a54:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
 8018a58:	e6f3      	b.n	8018842 <tcp_receive+0x22>
 8018a5a:	4e2e      	ldr	r6, [pc, #184]	; (8018b14 <tcp_receive+0x2f4>)
 8018a5c:	e77f      	b.n	801895e <tcp_receive+0x13e>
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8018a5e:	4b30      	ldr	r3, [pc, #192]	; (8018b20 <tcp_receive+0x300>)
 8018a60:	f240 427b 	movw	r2, #1147	; 0x47b
 8018a64:	4933      	ldr	r1, [pc, #204]	; (8018b34 <tcp_receive+0x314>)
 8018a66:	4830      	ldr	r0, [pc, #192]	; (8018b28 <tcp_receive+0x308>)
 8018a68:	f007 ffae 	bl	80209c8 <iprintf>
 8018a6c:	e6de      	b.n	801882c <tcp_receive+0xc>
        tcp_ack_now(pcb);
 8018a6e:	8b63      	ldrh	r3, [r4, #26]
 8018a70:	f043 0302 	orr.w	r3, r3, #2
 8018a74:	8363      	strh	r3, [r4, #26]
 8018a76:	e702      	b.n	801887e <tcp_receive+0x5e>
      if (pcb->rcv_nxt == seqno) {
 8018a78:	428b      	cmp	r3, r1
 8018a7a:	f000 8363 	beq.w	8019144 <tcp_receive+0x924>
        if (pcb->ooseq == NULL) {
 8018a7e:	6f67      	ldr	r7, [r4, #116]	; 0x74
 8018a80:	2f00      	cmp	r7, #0
 8018a82:	f000 827f 	beq.w	8018f84 <tcp_receive+0x764>
            if (seqno == next->tcphdr->seqno) {
 8018a86:	68f8      	ldr	r0, [r7, #12]
          struct tcp_seg *next, *prev = NULL;
 8018a88:	f04f 0800 	mov.w	r8, #0
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8018a8c:	f103 3eff 	add.w	lr, r3, #4294967295
            if (seqno == next->tcphdr->seqno) {
 8018a90:	6842      	ldr	r2, [r0, #4]
 8018a92:	429a      	cmp	r2, r3
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8018a94:	ebac 0902 	sub.w	r9, ip, r2
            if (seqno == next->tcphdr->seqno) {
 8018a98:	d018      	beq.n	8018acc <tcp_receive+0x2ac>
              if (prev == NULL) {
 8018a9a:	f1b8 0f00 	cmp.w	r8, #0
 8018a9e:	d02a      	beq.n	8018af6 <tcp_receive+0x2d6>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8018aa0:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8018aa4:	6849      	ldr	r1, [r1, #4]
 8018aa6:	ebae 0101 	sub.w	r1, lr, r1
 8018aaa:	2900      	cmp	r1, #0
 8018aac:	db03      	blt.n	8018ab6 <tcp_receive+0x296>
 8018aae:	f1b9 0f00 	cmp.w	r9, #0
 8018ab2:	f340 8270 	ble.w	8018f96 <tcp_receive+0x776>
              if (next->next == NULL &&
 8018ab6:	6839      	ldr	r1, [r7, #0]
 8018ab8:	46b8      	mov	r8, r7
 8018aba:	2900      	cmp	r1, #0
 8018abc:	d03e      	beq.n	8018b3c <tcp_receive+0x31c>
 8018abe:	460f      	mov	r7, r1
            if (seqno == next->tcphdr->seqno) {
 8018ac0:	68f8      	ldr	r0, [r7, #12]
 8018ac2:	6842      	ldr	r2, [r0, #4]
 8018ac4:	429a      	cmp	r2, r3
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8018ac6:	ebac 0902 	sub.w	r9, ip, r2
            if (seqno == next->tcphdr->seqno) {
 8018aca:	d1e6      	bne.n	8018a9a <tcp_receive+0x27a>
              if (inseg.len > next->len) {
 8018acc:	481a      	ldr	r0, [pc, #104]	; (8018b38 <tcp_receive+0x318>)
 8018ace:	893b      	ldrh	r3, [r7, #8]
 8018ad0:	8902      	ldrh	r2, [r0, #8]
 8018ad2:	429a      	cmp	r2, r3
 8018ad4:	f67f aed3 	bls.w	801887e <tcp_receive+0x5e>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018ad8:	f7fe fc7a 	bl	80173d0 <tcp_seg_copy>
                if (cseg != NULL) {
 8018adc:	2800      	cmp	r0, #0
 8018ade:	f43f aece 	beq.w	801887e <tcp_receive+0x5e>
                  if (prev != NULL) {
 8018ae2:	f1b8 0f00 	cmp.w	r8, #0
 8018ae6:	f000 8315 	beq.w	8019114 <tcp_receive+0x8f4>
                    prev->next = cseg;
 8018aea:	f8c8 0000 	str.w	r0, [r8]
                    tcp_oos_insert_segment(cseg, next);
 8018aee:	4639      	mov	r1, r7
 8018af0:	f7ff fdb0 	bl	8018654 <tcp_oos_insert_segment>
 8018af4:	e6c3      	b.n	801887e <tcp_receive+0x5e>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8018af6:	1a99      	subs	r1, r3, r2
 8018af8:	2900      	cmp	r1, #0
 8018afa:	dadc      	bge.n	8018ab6 <tcp_receive+0x296>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018afc:	480e      	ldr	r0, [pc, #56]	; (8018b38 <tcp_receive+0x318>)
 8018afe:	f7fe fc67 	bl	80173d0 <tcp_seg_copy>
                  if (cseg != NULL) {
 8018b02:	2800      	cmp	r0, #0
 8018b04:	f43f aebb 	beq.w	801887e <tcp_receive+0x5e>
                    pcb->ooseq = cseg;
 8018b08:	6760      	str	r0, [r4, #116]	; 0x74
 8018b0a:	e7f0      	b.n	8018aee <tcp_receive+0x2ce>
 8018b0c:	200223ec 	.word	0x200223ec
 8018b10:	2002240c 	.word	0x2002240c
 8018b14:	20022422 	.word	0x20022422
 8018b18:	20022414 	.word	0x20022414
 8018b1c:	200223e8 	.word	0x200223e8
 8018b20:	0803e35c 	.word	0x0803e35c
 8018b24:	0803e3c8 	.word	0x0803e3c8
 8018b28:	0802697c 	.word	0x0802697c
 8018b2c:	20022400 	.word	0x20022400
 8018b30:	20036274 	.word	0x20036274
 8018b34:	0803e3ac 	.word	0x0803e3ac
 8018b38:	200223f0 	.word	0x200223f0
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8018b3c:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 8018b3e:	2b00      	cmp	r3, #0
 8018b40:	f77f ae9d 	ble.w	801887e <tcp_receive+0x5e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8018b44:	8980      	ldrh	r0, [r0, #12]
 8018b46:	f7fb ff79 	bl	8014a3c <lwip_htons>
 8018b4a:	07c2      	lsls	r2, r0, #31
 8018b4c:	f53f ae97 	bmi.w	801887e <tcp_receive+0x5e>
                next->next = tcp_seg_copy(&inseg);
 8018b50:	48b0      	ldr	r0, [pc, #704]	; (8018e14 <tcp_receive+0x5f4>)
 8018b52:	f7fe fc3d 	bl	80173d0 <tcp_seg_copy>
 8018b56:	6038      	str	r0, [r7, #0]
                if (next->next != NULL) {
 8018b58:	2800      	cmp	r0, #0
 8018b5a:	f43f ae90 	beq.w	801887e <tcp_receive+0x5e>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8018b5e:	68fb      	ldr	r3, [r7, #12]
 8018b60:	893a      	ldrh	r2, [r7, #8]
 8018b62:	6859      	ldr	r1, [r3, #4]
 8018b64:	682b      	ldr	r3, [r5, #0]
 8018b66:	440a      	add	r2, r1
 8018b68:	1ad2      	subs	r2, r2, r3
 8018b6a:	2a00      	cmp	r2, #0
 8018b6c:	dd05      	ble.n	8018b7a <tcp_receive+0x35a>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8018b6e:	1a5b      	subs	r3, r3, r1
                    pbuf_realloc(next->p, next->len);
 8018b70:	6878      	ldr	r0, [r7, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8018b72:	b299      	uxth	r1, r3
 8018b74:	8139      	strh	r1, [r7, #8]
                    pbuf_realloc(next->p, next->len);
 8018b76:	f7fd fedb 	bl	8016930 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8018b7a:	682a      	ldr	r2, [r5, #0]
 8018b7c:	8833      	ldrh	r3, [r6, #0]
 8018b7e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8018b80:	4413      	add	r3, r2
 8018b82:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8018b84:	1a5b      	subs	r3, r3, r1
 8018b86:	1a9b      	subs	r3, r3, r2
 8018b88:	2b00      	cmp	r3, #0
 8018b8a:	f77f ae78 	ble.w	801887e <tcp_receive+0x5e>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8018b8e:	683b      	ldr	r3, [r7, #0]
 8018b90:	68db      	ldr	r3, [r3, #12]
 8018b92:	8998      	ldrh	r0, [r3, #12]
 8018b94:	f7fb ff52 	bl	8014a3c <lwip_htons>
 8018b98:	07c3      	lsls	r3, r0, #31
 8018b9a:	f100 82bf 	bmi.w	801911c <tcp_receive+0x8fc>
 8018b9e:	683a      	ldr	r2, [r7, #0]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8018ba0:	6828      	ldr	r0, [r5, #0]
 8018ba2:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8018ba4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018ba6:	1a09      	subs	r1, r1, r0
                    pbuf_realloc(next->next->p, next->next->len);
 8018ba8:	6850      	ldr	r0, [r2, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8018baa:	4419      	add	r1, r3
 8018bac:	b289      	uxth	r1, r1
 8018bae:	8111      	strh	r1, [r2, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8018bb0:	f7fd febe 	bl	8016930 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8018bb4:	683b      	ldr	r3, [r7, #0]
 8018bb6:	68da      	ldr	r2, [r3, #12]
 8018bb8:	891f      	ldrh	r7, [r3, #8]
 8018bba:	8990      	ldrh	r0, [r2, #12]
 8018bbc:	f7fb ff3e 	bl	8014a3c <lwip_htons>
 8018bc0:	f010 0303 	ands.w	r3, r0, #3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018bc4:	6829      	ldr	r1, [r5, #0]
                    tcplen = TCP_TCPLEN(next->next);
 8018bc6:	bf18      	it	ne
 8018bc8:	2301      	movne	r3, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018bca:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8018bcc:	6a60      	ldr	r0, [r4, #36]	; 0x24
                    tcplen = TCP_TCPLEN(next->next);
 8018bce:	443b      	add	r3, r7
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018bd0:	4402      	add	r2, r0
                    tcplen = TCP_TCPLEN(next->next);
 8018bd2:	b29b      	uxth	r3, r3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018bd4:	4419      	add	r1, r3
                    tcplen = TCP_TCPLEN(next->next);
 8018bd6:	8033      	strh	r3, [r6, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018bd8:	4291      	cmp	r1, r2
 8018bda:	f43f ae50 	beq.w	801887e <tcp_receive+0x5e>
 8018bde:	4b8e      	ldr	r3, [pc, #568]	; (8018e18 <tcp_receive+0x5f8>)
 8018be0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8018be4:	498d      	ldr	r1, [pc, #564]	; (8018e1c <tcp_receive+0x5fc>)
 8018be6:	488e      	ldr	r0, [pc, #568]	; (8018e20 <tcp_receive+0x600>)
 8018be8:	f007 feee 	bl	80209c8 <iprintf>
 8018bec:	e647      	b.n	801887e <tcp_receive+0x5e>
      struct pbuf *p = inseg.p;
 8018bee:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8018e14 <tcp_receive+0x5f4>
 8018bf2:	f8d9 8004 	ldr.w	r8, [r9, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8018bf6:	f1b8 0f00 	cmp.w	r8, #0
 8018bfa:	f000 817b 	beq.w	8018ef4 <tcp_receive+0x6d4>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8018bfe:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8018c02:	429f      	cmp	r7, r3
 8018c04:	f200 80c5 	bhi.w	8018d92 <tcp_receive+0x572>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8018c08:	f8d9 3004 	ldr.w	r3, [r9, #4]
      off = (u16_t)off32;
 8018c0c:	b2bf      	uxth	r7, r7
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8018c0e:	891a      	ldrh	r2, [r3, #8]
 8018c10:	42ba      	cmp	r2, r7
 8018c12:	f0c0 80b3 	bcc.w	8018d7c <tcp_receive+0x55c>
      inseg.len -= off;
 8018c16:	f8b9 1008 	ldrh.w	r1, [r9, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8018c1a:	1bd2      	subs	r2, r2, r7
      while (p->len < off) {
 8018c1c:	f8b8 300a 	ldrh.w	r3, [r8, #10]
      inseg.len -= off;
 8018c20:	1bc9      	subs	r1, r1, r7
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8018c22:	b292      	uxth	r2, r2
      while (p->len < off) {
 8018c24:	429f      	cmp	r7, r3
      inseg.len -= off;
 8018c26:	f8a9 1008 	strh.w	r1, [r9, #8]
      while (p->len < off) {
 8018c2a:	d90c      	bls.n	8018c46 <tcp_receive+0x426>
        p->len = 0;
 8018c2c:	2100      	movs	r1, #0
        off -= p->len;
 8018c2e:	1afb      	subs	r3, r7, r3
        p->len = 0;
 8018c30:	f8a8 100a 	strh.w	r1, [r8, #10]
        p->tot_len = new_tot_len;
 8018c34:	f8a8 2008 	strh.w	r2, [r8, #8]
        p = p->next;
 8018c38:	f8d8 8000 	ldr.w	r8, [r8]
        off -= p->len;
 8018c3c:	b29f      	uxth	r7, r3
      while (p->len < off) {
 8018c3e:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8018c42:	42bb      	cmp	r3, r7
 8018c44:	d3f3      	bcc.n	8018c2e <tcp_receive+0x40e>
      pbuf_remove_header(p, off);
 8018c46:	4639      	mov	r1, r7
 8018c48:	4640      	mov	r0, r8
 8018c4a:	f7fd fd29 	bl	80166a0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8018c4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018c50:	f8d9 100c 	ldr.w	r1, [r9, #12]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018c54:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8018c56:	602b      	str	r3, [r5, #0]
 8018c58:	604b      	str	r3, [r1, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018c5a:	2a00      	cmp	r2, #0
 8018c5c:	f43f ae0f 	beq.w	801887e <tcp_receive+0x5e>
        tcplen = TCP_TCPLEN(&inseg);
 8018c60:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8018c64:	f8b9 7008 	ldrh.w	r7, [r9, #8]
 8018c68:	8998      	ldrh	r0, [r3, #12]
 8018c6a:	f7fb fee7 	bl	8014a3c <lwip_htons>
 8018c6e:	f010 0303 	ands.w	r3, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 8018c72:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 8018c74:	bf18      	it	ne
 8018c76:	2301      	movne	r3, #1
 8018c78:	443b      	add	r3, r7
 8018c7a:	b29b      	uxth	r3, r3
        if (tcplen > pcb->rcv_wnd) {
 8018c7c:	429a      	cmp	r2, r3
        tcplen = TCP_TCPLEN(&inseg);
 8018c7e:	8033      	strh	r3, [r6, #0]
        if (tcplen > pcb->rcv_wnd) {
 8018c80:	f0c0 81a9 	bcc.w	8018fd6 <tcp_receive+0x7b6>
        if (pcb->ooseq != NULL) {
 8018c84:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8018c86:	2b00      	cmp	r3, #0
 8018c88:	f000 8092 	beq.w	8018db0 <tcp_receive+0x590>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018c8c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8018c90:	8998      	ldrh	r0, [r3, #12]
 8018c92:	f7fb fed3 	bl	8014a3c <lwip_htons>
 8018c96:	07c0      	lsls	r0, r0, #31
 8018c98:	f100 8087 	bmi.w	8018daa <tcp_receive+0x58a>
 8018c9c:	8833      	ldrh	r3, [r6, #0]
 8018c9e:	f8d5 c000 	ldr.w	ip, [r5]
            struct tcp_seg *next = pcb->ooseq;
 8018ca2:	f8d4 8074 	ldr.w	r8, [r4, #116]	; 0x74
 8018ca6:	eb03 020c 	add.w	r2, r3, ip
            while (next &&
 8018caa:	f1b8 0f00 	cmp.w	r8, #0
 8018cae:	f000 8233 	beq.w	8019118 <tcp_receive+0x8f8>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8018cb2:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8018cb6:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 8018cba:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8018cbe:	eba2 0e0a 	sub.w	lr, r2, sl
 8018cc2:	ebae 0101 	sub.w	r1, lr, r1
            while (next &&
 8018cc6:	2900      	cmp	r1, #0
 8018cc8:	da19      	bge.n	8018cfe <tcp_receive+0x4de>
 8018cca:	e1d8      	b.n	801907e <tcp_receive+0x85e>
              next = next->next;
 8018ccc:	f8d8 7000 	ldr.w	r7, [r8]
              tcp_seg_free(tmp);
 8018cd0:	4640      	mov	r0, r8
 8018cd2:	f7fe fb55 	bl	8017380 <tcp_seg_free>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8018cd6:	8833      	ldrh	r3, [r6, #0]
 8018cd8:	46b8      	mov	r8, r7
            while (next &&
 8018cda:	2f00      	cmp	r7, #0
 8018cdc:	f000 8207 	beq.w	80190ee <tcp_receive+0x8ce>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8018ce0:	f8d5 c000 	ldr.w	ip, [r5]
 8018ce4:	68f8      	ldr	r0, [r7, #12]
 8018ce6:	eb03 020c 	add.w	r2, r3, ip
 8018cea:	8939      	ldrh	r1, [r7, #8]
 8018cec:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8018cf0:	eba2 0e0a 	sub.w	lr, r2, sl
 8018cf4:	ebae 0101 	sub.w	r1, lr, r1
            while (next &&
 8018cf8:	2900      	cmp	r1, #0
 8018cfa:	f2c0 81c1 	blt.w	8019080 <tcp_receive+0x860>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8018cfe:	8980      	ldrh	r0, [r0, #12]
 8018d00:	f7fb fe9c 	bl	8014a3c <lwip_htons>
 8018d04:	07c1      	lsls	r1, r0, #31
 8018d06:	d5e1      	bpl.n	8018ccc <tcp_receive+0x4ac>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8018d08:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8018d0c:	8998      	ldrh	r0, [r3, #12]
 8018d0e:	f7fb fe95 	bl	8014a3c <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8018d12:	0782      	lsls	r2, r0, #30
 8018d14:	d4da      	bmi.n	8018ccc <tcp_receive+0x4ac>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8018d16:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8018d1a:	2001      	movs	r0, #1
 8018d1c:	899f      	ldrh	r7, [r3, #12]
 8018d1e:	f7fb fe8d 	bl	8014a3c <lwip_htons>
 8018d22:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8018d26:	4338      	orrs	r0, r7
                tcplen = TCP_TCPLEN(&inseg);
 8018d28:	f8b9 7008 	ldrh.w	r7, [r9, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8018d2c:	b280      	uxth	r0, r0
 8018d2e:	8198      	strh	r0, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8018d30:	f7fb fe84 	bl	8014a3c <lwip_htons>
 8018d34:	f010 0003 	ands.w	r0, r0, #3
 8018d38:	bf18      	it	ne
 8018d3a:	2001      	movne	r0, #1
 8018d3c:	4407      	add	r7, r0
 8018d3e:	8037      	strh	r7, [r6, #0]
 8018d40:	e7c4      	b.n	8018ccc <tcp_receive+0x4ac>
        if (pcb->cwnd < pcb->ssthresh) {
 8018d42:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8018d46:	b289      	uxth	r1, r1
        if (pcb->cwnd < pcb->ssthresh) {
 8018d48:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 8018d4c:	4293      	cmp	r3, r2
 8018d4e:	f240 80e0 	bls.w	8018f12 <tcp_receive+0x6f2>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8018d52:	8b60      	ldrh	r0, [r4, #26]
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8018d54:	8e63      	ldrh	r3, [r4, #50]	; 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8018d56:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8018d5a:	bf0c      	ite	eq
 8018d5c:	2002      	moveq	r0, #2
 8018d5e:	2001      	movne	r0, #1
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8018d60:	fb13 f300 	smulbb	r3, r3, r0
 8018d64:	b29b      	uxth	r3, r3
          TCP_WND_INC(pcb->cwnd, increase);
 8018d66:	428b      	cmp	r3, r1
 8018d68:	bf94      	ite	ls
 8018d6a:	18d1      	addls	r1, r2, r3
 8018d6c:	1851      	addhi	r1, r2, r1
 8018d6e:	b289      	uxth	r1, r1
 8018d70:	428a      	cmp	r2, r1
 8018d72:	f200 80f6 	bhi.w	8018f62 <tcp_receive+0x742>
 8018d76:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
 8018d7a:	e61b      	b.n	80189b4 <tcp_receive+0x194>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8018d7c:	4b26      	ldr	r3, [pc, #152]	; (8018e18 <tcp_receive+0x5f8>)
 8018d7e:	f240 5297 	movw	r2, #1431	; 0x597
 8018d82:	4928      	ldr	r1, [pc, #160]	; (8018e24 <tcp_receive+0x604>)
 8018d84:	4826      	ldr	r0, [pc, #152]	; (8018e20 <tcp_receive+0x600>)
 8018d86:	f007 fe1f 	bl	80209c8 <iprintf>
 8018d8a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8018d8e:	891a      	ldrh	r2, [r3, #8]
 8018d90:	e741      	b.n	8018c16 <tcp_receive+0x3f6>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8018d92:	4b21      	ldr	r3, [pc, #132]	; (8018e18 <tcp_receive+0x5f8>)
 8018d94:	f240 5295 	movw	r2, #1429	; 0x595
 8018d98:	4923      	ldr	r1, [pc, #140]	; (8018e28 <tcp_receive+0x608>)
 8018d9a:	4821      	ldr	r0, [pc, #132]	; (8018e20 <tcp_receive+0x600>)
 8018d9c:	f007 fe14 	bl	80209c8 <iprintf>
 8018da0:	e732      	b.n	8018c08 <tcp_receive+0x3e8>
              pcb->ooseq = pcb->ooseq->next;
 8018da2:	6803      	ldr	r3, [r0, #0]
 8018da4:	6763      	str	r3, [r4, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8018da6:	f7fe faeb 	bl	8017380 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8018daa:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8018dac:	2800      	cmp	r0, #0
 8018dae:	d1f8      	bne.n	8018da2 <tcp_receive+0x582>
 8018db0:	8833      	ldrh	r3, [r6, #0]
 8018db2:	682a      	ldr	r2, [r5, #0]
 8018db4:	441a      	add	r2, r3
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8018db6:	8d21      	ldrh	r1, [r4, #40]	; 0x28
        pcb->rcv_nxt = seqno + tcplen;
 8018db8:	6262      	str	r2, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8018dba:	4299      	cmp	r1, r3
 8018dbc:	f0c0 8146 	bcc.w	801904c <tcp_receive+0x82c>
        pcb->rcv_wnd -= tcplen;
 8018dc0:	1acb      	subs	r3, r1, r3
        tcp_update_rcv_ann_wnd(pcb);
 8018dc2:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 8018dc4:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 8018dc6:	f7fe fa63 	bl	8017290 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 8018dca:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8018dce:	891a      	ldrh	r2, [r3, #8]
 8018dd0:	b122      	cbz	r2, 8018ddc <tcp_receive+0x5bc>
          recv_data = inseg.p;
 8018dd2:	4916      	ldr	r1, [pc, #88]	; (8018e2c <tcp_receive+0x60c>)
          inseg.p = NULL;
 8018dd4:	2200      	movs	r2, #0
          recv_data = inseg.p;
 8018dd6:	600b      	str	r3, [r1, #0]
          inseg.p = NULL;
 8018dd8:	f8c9 2004 	str.w	r2, [r9, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018ddc:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8018de0:	8998      	ldrh	r0, [r3, #12]
 8018de2:	f7fb fe2b 	bl	8014a3c <lwip_htons>
 8018de6:	07c6      	lsls	r6, r0, #31
 8018de8:	d504      	bpl.n	8018df4 <tcp_receive+0x5d4>
          recv_flags |= TF_GOT_FIN;
 8018dea:	4a11      	ldr	r2, [pc, #68]	; (8018e30 <tcp_receive+0x610>)
 8018dec:	7813      	ldrb	r3, [r2, #0]
 8018dee:	f043 0320 	orr.w	r3, r3, #32
 8018df2:	7013      	strb	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 8018df4:	6f66      	ldr	r6, [r4, #116]	; 0x74
 8018df6:	2e00      	cmp	r6, #0
 8018df8:	f000 80b8 	beq.w	8018f6c <tcp_receive+0x74c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8018dfc:	68f3      	ldr	r3, [r6, #12]
 8018dfe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8018e00:	6859      	ldr	r1, [r3, #4]
        while (pcb->ooseq != NULL &&
 8018e02:	428a      	cmp	r2, r1
 8018e04:	f040 80b2 	bne.w	8018f6c <tcp_receive+0x74c>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8018e08:	f8df 900c 	ldr.w	r9, [pc, #12]	; 8018e18 <tcp_receive+0x5f8>
 8018e0c:	f8df 8024 	ldr.w	r8, [pc, #36]	; 8018e34 <tcp_receive+0x614>
 8018e10:	4f03      	ldr	r7, [pc, #12]	; (8018e20 <tcp_receive+0x600>)
 8018e12:	e04a      	b.n	8018eaa <tcp_receive+0x68a>
 8018e14:	200223f0 	.word	0x200223f0
 8018e18:	0803e35c 	.word	0x0803e35c
 8018e1c:	0803e414 	.word	0x0803e414
 8018e20:	0802697c 	.word	0x0802697c
 8018e24:	0803e404 	.word	0x0803e404
 8018e28:	0803e3f4 	.word	0x0803e3f4
 8018e2c:	20022404 	.word	0x20022404
 8018e30:	20022408 	.word	0x20022408
 8018e34:	0803e4a8 	.word	0x0803e4a8
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8018e38:	68f3      	ldr	r3, [r6, #12]
 8018e3a:	f8b6 a008 	ldrh.w	sl, [r6, #8]
 8018e3e:	8998      	ldrh	r0, [r3, #12]
 8018e40:	f7fb fdfc 	bl	8014a3c <lwip_htons>
 8018e44:	f010 0303 	ands.w	r3, r0, #3
 8018e48:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 8018e4a:	4620      	mov	r0, r4
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8018e4c:	bf18      	it	ne
 8018e4e:	2301      	movne	r3, #1
 8018e50:	4453      	add	r3, sl
 8018e52:	1ad3      	subs	r3, r2, r3
 8018e54:	8523      	strh	r3, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 8018e56:	f7fe fa1b 	bl	8017290 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 8018e5a:	6871      	ldr	r1, [r6, #4]
 8018e5c:	890b      	ldrh	r3, [r1, #8]
 8018e5e:	b13b      	cbz	r3, 8018e70 <tcp_receive+0x650>
            if (recv_data) {
 8018e60:	4bba      	ldr	r3, [pc, #744]	; (801914c <tcp_receive+0x92c>)
 8018e62:	6818      	ldr	r0, [r3, #0]
 8018e64:	2800      	cmp	r0, #0
 8018e66:	d06a      	beq.n	8018f3e <tcp_receive+0x71e>
              pbuf_cat(recv_data, cseg->p);
 8018e68:	f7fd fdde 	bl	8016a28 <pbuf_cat>
            cseg->p = NULL;
 8018e6c:	2300      	movs	r3, #0
 8018e6e:	6073      	str	r3, [r6, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8018e70:	68f3      	ldr	r3, [r6, #12]
 8018e72:	8998      	ldrh	r0, [r3, #12]
 8018e74:	f7fb fde2 	bl	8014a3c <lwip_htons>
 8018e78:	07c0      	lsls	r0, r0, #31
 8018e7a:	d509      	bpl.n	8018e90 <tcp_receive+0x670>
            recv_flags |= TF_GOT_FIN;
 8018e7c:	4ab4      	ldr	r2, [pc, #720]	; (8019150 <tcp_receive+0x930>)
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8018e7e:	7d21      	ldrb	r1, [r4, #20]
            recv_flags |= TF_GOT_FIN;
 8018e80:	7813      	ldrb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8018e82:	2904      	cmp	r1, #4
            recv_flags |= TF_GOT_FIN;
 8018e84:	f043 0320 	orr.w	r3, r3, #32
 8018e88:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8018e8a:	d101      	bne.n	8018e90 <tcp_receive+0x670>
              pcb->state = CLOSE_WAIT;
 8018e8c:	2307      	movs	r3, #7
 8018e8e:	7523      	strb	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 8018e90:	6833      	ldr	r3, [r6, #0]
          tcp_seg_free(cseg);
 8018e92:	4630      	mov	r0, r6
          pcb->ooseq = cseg->next;
 8018e94:	6763      	str	r3, [r4, #116]	; 0x74
          tcp_seg_free(cseg);
 8018e96:	f7fe fa73 	bl	8017380 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8018e9a:	6f66      	ldr	r6, [r4, #116]	; 0x74
 8018e9c:	2e00      	cmp	r6, #0
 8018e9e:	d065      	beq.n	8018f6c <tcp_receive+0x74c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8018ea0:	68f3      	ldr	r3, [r6, #12]
        while (pcb->ooseq != NULL &&
 8018ea2:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8018ea4:	685a      	ldr	r2, [r3, #4]
        while (pcb->ooseq != NULL &&
 8018ea6:	428a      	cmp	r2, r1
 8018ea8:	d160      	bne.n	8018f6c <tcp_receive+0x74c>
          seqno = pcb->ooseq->tcphdr->seqno;
 8018eaa:	602a      	str	r2, [r5, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8018eac:	8998      	ldrh	r0, [r3, #12]
 8018eae:	f8b6 a008 	ldrh.w	sl, [r6, #8]
 8018eb2:	f7fb fdc3 	bl	8014a3c <lwip_htons>
 8018eb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018eb8:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8018ebc:	68f2      	ldr	r2, [r6, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8018ebe:	bf18      	it	ne
 8018ec0:	2001      	movne	r0, #1
 8018ec2:	449a      	add	sl, r3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8018ec4:	f8b4 b028 	ldrh.w	fp, [r4, #40]	; 0x28
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8018ec8:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8018eca:	f8b6 a008 	ldrh.w	sl, [r6, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8018ece:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8018ed0:	8990      	ldrh	r0, [r2, #12]
 8018ed2:	f7fb fdb3 	bl	8014a3c <lwip_htons>
 8018ed6:	f010 0003 	ands.w	r0, r0, #3
 8018eda:	bf18      	it	ne
 8018edc:	2001      	movne	r0, #1
 8018ede:	4450      	add	r0, sl
 8018ee0:	4583      	cmp	fp, r0
 8018ee2:	d2a9      	bcs.n	8018e38 <tcp_receive+0x618>
 8018ee4:	464b      	mov	r3, r9
 8018ee6:	f240 622c 	movw	r2, #1580	; 0x62c
 8018eea:	4641      	mov	r1, r8
 8018eec:	4638      	mov	r0, r7
 8018eee:	f007 fd6b 	bl	80209c8 <iprintf>
 8018ef2:	e7a1      	b.n	8018e38 <tcp_receive+0x618>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8018ef4:	4b97      	ldr	r3, [pc, #604]	; (8019154 <tcp_receive+0x934>)
 8018ef6:	f240 5294 	movw	r2, #1428	; 0x594
 8018efa:	4997      	ldr	r1, [pc, #604]	; (8019158 <tcp_receive+0x938>)
 8018efc:	4897      	ldr	r0, [pc, #604]	; (801915c <tcp_receive+0x93c>)
 8018efe:	f007 fd63 	bl	80209c8 <iprintf>
 8018f02:	e67c      	b.n	8018bfe <tcp_receive+0x3de>
        pcb->unsent_oversize = 0;
 8018f04:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
 8018f08:	e56d      	b.n	80189e6 <tcp_receive+0x1c6>
        pcb->rtime = -1;
 8018f0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018f0e:	8623      	strh	r3, [r4, #48]	; 0x30
 8018f10:	e564      	b.n	80189dc <tcp_receive+0x1bc>
          TCP_WND_INC(pcb->bytes_acked, acked);
 8018f12:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8018f16:	4419      	add	r1, r3
 8018f18:	b289      	uxth	r1, r1
 8018f1a:	428b      	cmp	r3, r1
 8018f1c:	d82f      	bhi.n	8018f7e <tcp_receive+0x75e>
          if (pcb->bytes_acked >= pcb->cwnd) {
 8018f1e:	428a      	cmp	r2, r1
          TCP_WND_INC(pcb->bytes_acked, acked);
 8018f20:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8018f24:	f63f ad46 	bhi.w	80189b4 <tcp_receive+0x194>
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8018f28:	8e63      	ldrh	r3, [r4, #50]	; 0x32
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8018f2a:	1a89      	subs	r1, r1, r2
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8018f2c:	4413      	add	r3, r2
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8018f2e:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8018f32:	b29b      	uxth	r3, r3
 8018f34:	429a      	cmp	r2, r3
 8018f36:	d814      	bhi.n	8018f62 <tcp_receive+0x742>
 8018f38:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 8018f3c:	e53a      	b.n	80189b4 <tcp_receive+0x194>
              recv_data = cseg->p;
 8018f3e:	6019      	str	r1, [r3, #0]
 8018f40:	e794      	b.n	8018e6c <tcp_receive+0x64c>
          if ((pcb->unsent == NULL) ||
 8018f42:	b148      	cbz	r0, 8018f58 <tcp_receive+0x738>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8018f44:	68c3      	ldr	r3, [r0, #12]
 8018f46:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 8018f48:	6858      	ldr	r0, [r3, #4]
 8018f4a:	f7fb fd7b 	bl	8014a44 <lwip_htonl>
 8018f4e:	1a30      	subs	r0, r6, r0
          if ((pcb->unsent == NULL) ||
 8018f50:	2800      	cmp	r0, #0
 8018f52:	f73f ad82 	bgt.w	8018a5a <tcp_receive+0x23a>
 8018f56:	8b61      	ldrh	r1, [r4, #26]
            tcp_clear_flags(pcb, TF_RTO);
 8018f58:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8018f5c:	4e80      	ldr	r6, [pc, #512]	; (8019160 <tcp_receive+0x940>)
 8018f5e:	8361      	strh	r1, [r4, #26]
 8018f60:	e4fd      	b.n	801895e <tcp_receive+0x13e>
          TCP_WND_INC(pcb->cwnd, increase);
 8018f62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018f66:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 8018f6a:	e523      	b.n	80189b4 <tcp_receive+0x194>
        tcp_ack(pcb);
 8018f6c:	8b63      	ldrh	r3, [r4, #26]
 8018f6e:	07d9      	lsls	r1, r3, #31
 8018f70:	d50d      	bpl.n	8018f8e <tcp_receive+0x76e>
 8018f72:	f023 0301 	bic.w	r3, r3, #1
 8018f76:	f043 0302 	orr.w	r3, r3, #2
 8018f7a:	8363      	strh	r3, [r4, #26]
 8018f7c:	e4c9      	b.n	8018912 <tcp_receive+0xf2>
          if (pcb->bytes_acked >= pcb->cwnd) {
 8018f7e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018f82:	e7d1      	b.n	8018f28 <tcp_receive+0x708>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8018f84:	4877      	ldr	r0, [pc, #476]	; (8019164 <tcp_receive+0x944>)
 8018f86:	f7fe fa23 	bl	80173d0 <tcp_seg_copy>
 8018f8a:	6760      	str	r0, [r4, #116]	; 0x74
 8018f8c:	e477      	b.n	801887e <tcp_receive+0x5e>
        tcp_ack(pcb);
 8018f8e:	f043 0301 	orr.w	r3, r3, #1
 8018f92:	8363      	strh	r3, [r4, #26]
 8018f94:	e4bd      	b.n	8018912 <tcp_receive+0xf2>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018f96:	4873      	ldr	r0, [pc, #460]	; (8019164 <tcp_receive+0x944>)
 8018f98:	f7fe fa1a 	bl	80173d0 <tcp_seg_copy>
                  if (cseg != NULL) {
 8018f9c:	4606      	mov	r6, r0
 8018f9e:	2800      	cmp	r0, #0
 8018fa0:	f43f ac6d 	beq.w	801887e <tcp_receive+0x5e>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8018fa4:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8018fa8:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8018fac:	6851      	ldr	r1, [r2, #4]
 8018fae:	682a      	ldr	r2, [r5, #0]
 8018fb0:	440b      	add	r3, r1
 8018fb2:	1a9b      	subs	r3, r3, r2
 8018fb4:	2b00      	cmp	r3, #0
 8018fb6:	dd07      	ble.n	8018fc8 <tcp_receive+0x7a8>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8018fb8:	1a52      	subs	r2, r2, r1
                      pbuf_realloc(prev->p, prev->len);
 8018fba:	f8d8 0004 	ldr.w	r0, [r8, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8018fbe:	b291      	uxth	r1, r2
 8018fc0:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 8018fc4:	f7fd fcb4 	bl	8016930 <pbuf_realloc>
                    prev->next = cseg;
 8018fc8:	f8c8 6000 	str.w	r6, [r8]
                    tcp_oos_insert_segment(cseg, next);
 8018fcc:	4639      	mov	r1, r7
 8018fce:	4630      	mov	r0, r6
 8018fd0:	f7ff fb40 	bl	8018654 <tcp_oos_insert_segment>
 8018fd4:	e453      	b.n	801887e <tcp_receive+0x5e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018fd6:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8018fda:	8998      	ldrh	r0, [r3, #12]
 8018fdc:	f7fb fd2e 	bl	8014a3c <lwip_htons>
 8018fe0:	07c2      	lsls	r2, r0, #31
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8018fe2:	f8d9 300c 	ldr.w	r3, [r9, #12]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018fe6:	f100 8085 	bmi.w	80190f4 <tcp_receive+0x8d4>
 8018fea:	8998      	ldrh	r0, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 8018fec:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8018fee:	f8a9 3008 	strh.w	r3, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8018ff2:	f7fb fd23 	bl	8014a3c <lwip_htons>
 8018ff6:	0787      	lsls	r7, r0, #30
            inseg.len -= 1;
 8018ff8:	f8b9 1008 	ldrh.w	r1, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8018ffc:	d503      	bpl.n	8019006 <tcp_receive+0x7e6>
            inseg.len -= 1;
 8018ffe:	3901      	subs	r1, #1
 8019000:	b289      	uxth	r1, r1
 8019002:	f8a9 1008 	strh.w	r1, [r9, #8]
          pbuf_realloc(inseg.p, inseg.len);
 8019006:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801900a:	f7fd fc91 	bl	8016930 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801900e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8019012:	f8b9 7008 	ldrh.w	r7, [r9, #8]
 8019016:	8998      	ldrh	r0, [r3, #12]
 8019018:	f7fb fd10 	bl	8014a3c <lwip_htons>
 801901c:	f010 0303 	ands.w	r3, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019020:	682a      	ldr	r2, [r5, #0]
          tcplen = TCP_TCPLEN(&inseg);
 8019022:	bf18      	it	ne
 8019024:	2301      	movne	r3, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019026:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
 801902a:	6a61      	ldr	r1, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 801902c:	443b      	add	r3, r7
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801902e:	4461      	add	r1, ip
          tcplen = TCP_TCPLEN(&inseg);
 8019030:	b29b      	uxth	r3, r3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019032:	441a      	add	r2, r3
          tcplen = TCP_TCPLEN(&inseg);
 8019034:	8033      	strh	r3, [r6, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019036:	428a      	cmp	r2, r1
 8019038:	f43f ae24 	beq.w	8018c84 <tcp_receive+0x464>
 801903c:	4b45      	ldr	r3, [pc, #276]	; (8019154 <tcp_receive+0x934>)
 801903e:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8019042:	4949      	ldr	r1, [pc, #292]	; (8019168 <tcp_receive+0x948>)
 8019044:	4845      	ldr	r0, [pc, #276]	; (801915c <tcp_receive+0x93c>)
 8019046:	f007 fcbf 	bl	80209c8 <iprintf>
 801904a:	e61b      	b.n	8018c84 <tcp_receive+0x464>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801904c:	4b41      	ldr	r3, [pc, #260]	; (8019154 <tcp_receive+0x934>)
 801904e:	f240 6207 	movw	r2, #1543	; 0x607
 8019052:	4946      	ldr	r1, [pc, #280]	; (801916c <tcp_receive+0x94c>)
 8019054:	4841      	ldr	r0, [pc, #260]	; (801915c <tcp_receive+0x93c>)
 8019056:	f007 fcb7 	bl	80209c8 <iprintf>
 801905a:	8833      	ldrh	r3, [r6, #0]
 801905c:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801905e:	e6af      	b.n	8018dc0 <tcp_receive+0x5a0>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8019060:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8019064:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8019066:	4413      	add	r3, r2
 8019068:	b29b      	uxth	r3, r3
 801906a:	429a      	cmp	r2, r3
 801906c:	d901      	bls.n	8019072 <tcp_receive+0x852>
 801906e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019072:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 8019076:	4620      	mov	r0, r4
 8019078:	f001 fe6e 	bl	801ad58 <tcp_rexmit_fast>
 801907c:	e46f      	b.n	801895e <tcp_receive+0x13e>
            while (next &&
 801907e:	4647      	mov	r7, r8
            if (next &&
 8019080:	f1be 0f00 	cmp.w	lr, #0
 8019084:	dc01      	bgt.n	801908a <tcp_receive+0x86a>
            pcb->ooseq = next;
 8019086:	6767      	str	r7, [r4, #116]	; 0x74
 8019088:	e695      	b.n	8018db6 <tcp_receive+0x596>
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801908a:	f8d9 300c 	ldr.w	r3, [r9, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801908e:	ebaa 0c0c 	sub.w	ip, sl, ip
 8019092:	f8a9 c008 	strh.w	ip, [r9, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8019096:	8998      	ldrh	r0, [r3, #12]
 8019098:	f7fb fcd0 	bl	8014a3c <lwip_htons>
 801909c:	0783      	lsls	r3, r0, #30
 801909e:	d504      	bpl.n	80190aa <tcp_receive+0x88a>
                inseg.len -= 1;
 80190a0:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 80190a4:	3b01      	subs	r3, #1
 80190a6:	f8a9 3008 	strh.w	r3, [r9, #8]
              pbuf_realloc(inseg.p, inseg.len);
 80190aa:	f8b9 1008 	ldrh.w	r1, [r9, #8]
 80190ae:	f8d9 0004 	ldr.w	r0, [r9, #4]
 80190b2:	f7fd fc3d 	bl	8016930 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80190b6:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80190ba:	f8b9 8008 	ldrh.w	r8, [r9, #8]
 80190be:	8998      	ldrh	r0, [r3, #12]
 80190c0:	f7fb fcbc 	bl	8014a3c <lwip_htons>
 80190c4:	f010 0303 	ands.w	r3, r0, #3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80190c8:	682a      	ldr	r2, [r5, #0]
              tcplen = TCP_TCPLEN(&inseg);
 80190ca:	bf18      	it	ne
 80190cc:	2301      	movne	r3, #1
 80190ce:	4443      	add	r3, r8
 80190d0:	b29b      	uxth	r3, r3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80190d2:	1899      	adds	r1, r3, r2
 80190d4:	68fa      	ldr	r2, [r7, #12]
              tcplen = TCP_TCPLEN(&inseg);
 80190d6:	8033      	strh	r3, [r6, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80190d8:	6852      	ldr	r2, [r2, #4]
 80190da:	4291      	cmp	r1, r2
 80190dc:	d0d3      	beq.n	8019086 <tcp_receive+0x866>
 80190de:	4b1d      	ldr	r3, [pc, #116]	; (8019154 <tcp_receive+0x934>)
 80190e0:	f240 52fd 	movw	r2, #1533	; 0x5fd
 80190e4:	4922      	ldr	r1, [pc, #136]	; (8019170 <tcp_receive+0x950>)
 80190e6:	481d      	ldr	r0, [pc, #116]	; (801915c <tcp_receive+0x93c>)
 80190e8:	f007 fc6e 	bl	80209c8 <iprintf>
 80190ec:	8833      	ldrh	r3, [r6, #0]
 80190ee:	682a      	ldr	r2, [r5, #0]
 80190f0:	441a      	add	r2, r3
 80190f2:	e7c8      	b.n	8019086 <tcp_receive+0x866>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80190f4:	899f      	ldrh	r7, [r3, #12]
 80190f6:	4638      	mov	r0, r7
 80190f8:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 80190fc:	f7fb fc9e 	bl	8014a3c <lwip_htons>
 8019100:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8019104:	f7fb fc9a 	bl	8014a3c <lwip_htons>
 8019108:	4338      	orrs	r0, r7
 801910a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801910e:	b280      	uxth	r0, r0
 8019110:	8198      	strh	r0, [r3, #12]
 8019112:	e76b      	b.n	8018fec <tcp_receive+0x7cc>
                    pcb->ooseq = cseg;
 8019114:	6760      	str	r0, [r4, #116]	; 0x74
 8019116:	e4ea      	b.n	8018aee <tcp_receive+0x2ce>
            while (next &&
 8019118:	4647      	mov	r7, r8
 801911a:	e7b4      	b.n	8019086 <tcp_receive+0x866>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801911c:	683b      	ldr	r3, [r7, #0]
 801911e:	68db      	ldr	r3, [r3, #12]
 8019120:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 8019124:	4640      	mov	r0, r8
 8019126:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 801912a:	f7fb fc87 	bl	8014a3c <lwip_htons>
 801912e:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8019132:	f7fb fc83 	bl	8014a3c <lwip_htons>
 8019136:	683a      	ldr	r2, [r7, #0]
 8019138:	ea48 0800 	orr.w	r8, r8, r0
 801913c:	68d3      	ldr	r3, [r2, #12]
 801913e:	f8a3 800c 	strh.w	r8, [r3, #12]
 8019142:	e52d      	b.n	8018ba0 <tcp_receive+0x380>
 8019144:	f8df 901c 	ldr.w	r9, [pc, #28]	; 8019164 <tcp_receive+0x944>
 8019148:	e58a      	b.n	8018c60 <tcp_receive+0x440>
 801914a:	bf00      	nop
 801914c:	20022404 	.word	0x20022404
 8019150:	20022408 	.word	0x20022408
 8019154:	0803e35c 	.word	0x0803e35c
 8019158:	0803e3e4 	.word	0x0803e3e4
 801915c:	0802697c 	.word	0x0802697c
 8019160:	20022422 	.word	0x20022422
 8019164:	200223f0 	.word	0x200223f0
 8019168:	0803e414 	.word	0x0803e414
 801916c:	0803e488 	.word	0x0803e488
 8019170:	0803e44c 	.word	0x0803e44c

08019174 <tcp_input>:
{
 8019174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8019178:	4605      	mov	r5, r0
{
 801917a:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801917c:	2800      	cmp	r0, #0
 801917e:	d040      	beq.n	8019202 <tcp_input+0x8e>
  TCP_STATS_INC(tcp.recv);
 8019180:	4cbf      	ldr	r4, [pc, #764]	; (8019480 <tcp_input+0x30c>)
  if (p->len < TCP_HLEN) {
 8019182:	896a      	ldrh	r2, [r5, #10]
  TCP_STATS_INC(tcp.recv);
 8019184:	f8b4 3092 	ldrh.w	r3, [r4, #146]	; 0x92
  tcphdr = (struct tcp_hdr *)p->payload;
 8019188:	6869      	ldr	r1, [r5, #4]
  if (p->len < TCP_HLEN) {
 801918a:	2a13      	cmp	r2, #19
  tcphdr = (struct tcp_hdr *)p->payload;
 801918c:	4ebd      	ldr	r6, [pc, #756]	; (8019484 <tcp_input+0x310>)
  TCP_STATS_INC(tcp.recv);
 801918e:	f103 0301 	add.w	r3, r3, #1
  tcphdr = (struct tcp_hdr *)p->payload;
 8019192:	6031      	str	r1, [r6, #0]
  TCP_STATS_INC(tcp.recv);
 8019194:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
  if (p->len < TCP_HLEN) {
 8019198:	d80f      	bhi.n	80191ba <tcp_input+0x46>
      TCP_STATS_INC(tcp.lenerr);
 801919a:	f8b4 309a 	ldrh.w	r3, [r4, #154]	; 0x9a
 801919e:	3301      	adds	r3, #1
 80191a0:	f8a4 309a 	strh.w	r3, [r4, #154]	; 0x9a
  TCP_STATS_INC(tcp.drop);
 80191a4:	f8b4 3096 	ldrh.w	r3, [r4, #150]	; 0x96
  pbuf_free(p);
 80191a8:	4628      	mov	r0, r5
  TCP_STATS_INC(tcp.drop);
 80191aa:	3301      	adds	r3, #1
 80191ac:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
}
 80191b0:	b007      	add	sp, #28
 80191b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 80191b6:	f7fd baaf 	b.w	8016718 <pbuf_free>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80191ba:	4fb3      	ldr	r7, [pc, #716]	; (8019488 <tcp_input+0x314>)
 80191bc:	6839      	ldr	r1, [r7, #0]
 80191be:	6978      	ldr	r0, [r7, #20]
 80191c0:	f005 f9a6 	bl	801e510 <ip4_addr_isbroadcast_u32>
 80191c4:	b9b8      	cbnz	r0, 80191f6 <tcp_input+0x82>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80191c6:	697b      	ldr	r3, [r7, #20]
 80191c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80191cc:	2be0      	cmp	r3, #224	; 0xe0
 80191ce:	d012      	beq.n	80191f6 <tcp_input+0x82>
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 80191d0:	f107 0014 	add.w	r0, r7, #20
 80191d4:	f107 0910 	add.w	r9, r7, #16
 80191d8:	892a      	ldrh	r2, [r5, #8]
 80191da:	2106      	movs	r1, #6
 80191dc:	9000      	str	r0, [sp, #0]
 80191de:	464b      	mov	r3, r9
 80191e0:	4628      	mov	r0, r5
 80191e2:	f7fc f9e7 	bl	80155b4 <ip_chksum_pseudo>
    if (chksum != 0) {
 80191e6:	4680      	mov	r8, r0
 80191e8:	b190      	cbz	r0, 8019210 <tcp_input+0x9c>
      TCP_STATS_INC(tcp.chkerr);
 80191ea:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
 80191ee:	3301      	adds	r3, #1
 80191f0:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
      goto dropped;
 80191f4:	e7d6      	b.n	80191a4 <tcp_input+0x30>
    TCP_STATS_INC(tcp.proterr);
 80191f6:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
 80191fa:	3301      	adds	r3, #1
 80191fc:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
    goto dropped;
 8019200:	e7d0      	b.n	80191a4 <tcp_input+0x30>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8019202:	4ba2      	ldr	r3, [pc, #648]	; (801948c <tcp_input+0x318>)
 8019204:	2283      	movs	r2, #131	; 0x83
 8019206:	49a2      	ldr	r1, [pc, #648]	; (8019490 <tcp_input+0x31c>)
 8019208:	48a2      	ldr	r0, [pc, #648]	; (8019494 <tcp_input+0x320>)
 801920a:	f007 fbdd 	bl	80209c8 <iprintf>
 801920e:	e7b7      	b.n	8019180 <tcp_input+0xc>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8019210:	6833      	ldr	r3, [r6, #0]
 8019212:	8998      	ldrh	r0, [r3, #12]
 8019214:	f7fb fc12 	bl	8014a3c <lwip_htons>
 8019218:	0a81      	lsrs	r1, r0, #10
 801921a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801921e:	2913      	cmp	r1, #19
 8019220:	d9bb      	bls.n	801919a <tcp_input+0x26>
 8019222:	b28b      	uxth	r3, r1
 8019224:	892a      	ldrh	r2, [r5, #8]
 8019226:	429a      	cmp	r2, r3
 8019228:	d3b7      	bcc.n	801919a <tcp_input+0x26>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801922a:	f1a3 0214 	sub.w	r2, r3, #20
  if (p->len >= hdrlen_bytes) {
 801922e:	8968      	ldrh	r0, [r5, #10]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8019230:	f8df a294 	ldr.w	sl, [pc, #660]	; 80194c8 <tcp_input+0x354>
  tcphdr_opt2 = NULL;
 8019234:	f8df b294 	ldr.w	fp, [pc, #660]	; 80194cc <tcp_input+0x358>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8019238:	b292      	uxth	r2, r2
  if (p->len >= hdrlen_bytes) {
 801923a:	4298      	cmp	r0, r3
  tcphdr_opt2 = NULL;
 801923c:	f8cb 8000 	str.w	r8, [fp]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8019240:	f8aa 2000 	strh.w	r2, [sl]
  if (p->len >= hdrlen_bytes) {
 8019244:	f080 81ab 	bcs.w	801959e <tcp_input+0x42a>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8019248:	682b      	ldr	r3, [r5, #0]
 801924a:	2b00      	cmp	r3, #0
 801924c:	f000 8288 	beq.w	8019760 <tcp_input+0x5ec>
    pbuf_remove_header(p, TCP_HLEN);
 8019250:	2114      	movs	r1, #20
 8019252:	4628      	mov	r0, r5
 8019254:	f7fd fa24 	bl	80166a0 <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 8019258:	896b      	ldrh	r3, [r5, #10]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801925a:	f8ba 8000 	ldrh.w	r8, [sl]
    pbuf_remove_header(p, tcphdr_opt1len);
 801925e:	4628      	mov	r0, r5
    tcphdr_opt1len = p->len;
 8019260:	4a8d      	ldr	r2, [pc, #564]	; (8019498 <tcp_input+0x324>)
    pbuf_remove_header(p, tcphdr_opt1len);
 8019262:	4619      	mov	r1, r3
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8019264:	eba8 0803 	sub.w	r8, r8, r3
    tcphdr_opt1len = p->len;
 8019268:	8013      	strh	r3, [r2, #0]
    pbuf_remove_header(p, tcphdr_opt1len);
 801926a:	f7fd fa19 	bl	80166a0 <pbuf_remove_header>
    if (opt2len > p->next->len) {
 801926e:	6828      	ldr	r0, [r5, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8019270:	fa1f f888 	uxth.w	r8, r8
    if (opt2len > p->next->len) {
 8019274:	8943      	ldrh	r3, [r0, #10]
 8019276:	4543      	cmp	r3, r8
 8019278:	d38f      	bcc.n	801919a <tcp_input+0x26>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801927a:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 801927c:	4641      	mov	r1, r8
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801927e:	f8cb 3000 	str.w	r3, [fp]
    pbuf_remove_header(p->next, opt2len);
 8019282:	f7fd fa0d 	bl	80166a0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8019286:	892b      	ldrh	r3, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8019288:	896a      	ldrh	r2, [r5, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801928a:	eba3 0308 	sub.w	r3, r3, r8
 801928e:	b29b      	uxth	r3, r3
 8019290:	812b      	strh	r3, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8019292:	b132      	cbz	r2, 80192a2 <tcp_input+0x12e>
 8019294:	4b7d      	ldr	r3, [pc, #500]	; (801948c <tcp_input+0x318>)
 8019296:	22df      	movs	r2, #223	; 0xdf
 8019298:	4980      	ldr	r1, [pc, #512]	; (801949c <tcp_input+0x328>)
 801929a:	487e      	ldr	r0, [pc, #504]	; (8019494 <tcp_input+0x320>)
 801929c:	f007 fb94 	bl	80209c8 <iprintf>
 80192a0:	892b      	ldrh	r3, [r5, #8]
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80192a2:	682a      	ldr	r2, [r5, #0]
 80192a4:	8912      	ldrh	r2, [r2, #8]
 80192a6:	429a      	cmp	r2, r3
 80192a8:	d005      	beq.n	80192b6 <tcp_input+0x142>
 80192aa:	4b78      	ldr	r3, [pc, #480]	; (801948c <tcp_input+0x318>)
 80192ac:	22e0      	movs	r2, #224	; 0xe0
 80192ae:	497c      	ldr	r1, [pc, #496]	; (80194a0 <tcp_input+0x32c>)
 80192b0:	4878      	ldr	r0, [pc, #480]	; (8019494 <tcp_input+0x320>)
 80192b2:	f007 fb89 	bl	80209c8 <iprintf>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80192b6:	f8d6 8000 	ldr.w	r8, [r6]
 80192ba:	f8b8 0000 	ldrh.w	r0, [r8]
 80192be:	f7fb fbbd 	bl	8014a3c <lwip_htons>
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80192c2:	f8d6 a000 	ldr.w	sl, [r6]
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80192c6:	f8a8 0000 	strh.w	r0, [r8]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80192ca:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 80192ce:	f7fb fbb5 	bl	8014a3c <lwip_htons>
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80192d2:	f8d6 8000 	ldr.w	r8, [r6]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80192d6:	f8aa 0002 	strh.w	r0, [sl, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80192da:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80192de:	f7fb fbb1 	bl	8014a44 <lwip_htonl>
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80192e2:	f8d6 a000 	ldr.w	sl, [r6]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80192e6:	4b6f      	ldr	r3, [pc, #444]	; (80194a4 <tcp_input+0x330>)
 80192e8:	f8c8 0004 	str.w	r0, [r8, #4]
 80192ec:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80192ee:	f8da 0008 	ldr.w	r0, [sl, #8]
 80192f2:	f7fb fba7 	bl	8014a44 <lwip_htonl>
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80192f6:	f8d6 8000 	ldr.w	r8, [r6]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80192fa:	4b6b      	ldr	r3, [pc, #428]	; (80194a8 <tcp_input+0x334>)
 80192fc:	f8ca 0008 	str.w	r0, [sl, #8]
 8019300:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8019302:	f8b8 000e 	ldrh.w	r0, [r8, #14]
 8019306:	f7fb fb99 	bl	8014a3c <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 801930a:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801930c:	f8a8 000e 	strh.w	r0, [r8, #14]
  flags = TCPH_FLAGS(tcphdr);
 8019310:	8998      	ldrh	r0, [r3, #12]
 8019312:	f7fb fb93 	bl	8014a3c <lwip_htons>
 8019316:	4965      	ldr	r1, [pc, #404]	; (80194ac <tcp_input+0x338>)
 8019318:	b2c0      	uxtb	r0, r0
  tcplen = p->tot_len;
 801931a:	892b      	ldrh	r3, [r5, #8]
  flags = TCPH_FLAGS(tcphdr);
 801931c:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8019320:	700a      	strb	r2, [r1, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8019322:	0782      	lsls	r2, r0, #30
 8019324:	f000 8141 	beq.w	80195aa <tcp_input+0x436>
    tcplen++;
 8019328:	1c5a      	adds	r2, r3, #1
 801932a:	4961      	ldr	r1, [pc, #388]	; (80194b0 <tcp_input+0x33c>)
 801932c:	b292      	uxth	r2, r2
 801932e:	9105      	str	r1, [sp, #20]
    if (tcplen < p->tot_len) {
 8019330:	4293      	cmp	r3, r2
    tcplen++;
 8019332:	800a      	strh	r2, [r1, #0]
    if (tcplen < p->tot_len) {
 8019334:	f63f af31 	bhi.w	801919a <tcp_input+0x26>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8019338:	4b5e      	ldr	r3, [pc, #376]	; (80194b4 <tcp_input+0x340>)
 801933a:	f8d3 8000 	ldr.w	r8, [r3]
 801933e:	f1b8 0f00 	cmp.w	r8, #0
 8019342:	f000 80d9 	beq.w	80194f8 <tcp_input+0x384>
  prev = NULL;
 8019346:	f04f 0a00 	mov.w	sl, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801934a:	f8df b140 	ldr.w	fp, [pc, #320]	; 801948c <tcp_input+0x318>
 801934e:	e01c      	b.n	801938a <tcp_input+0x216>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8019350:	2b0a      	cmp	r3, #10
 8019352:	f000 80c8 	beq.w	80194e6 <tcp_input+0x372>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8019356:	2b01      	cmp	r3, #1
 8019358:	f000 80be 	beq.w	80194d8 <tcp_input+0x364>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801935c:	f898 2008 	ldrb.w	r2, [r8, #8]
 8019360:	b132      	cbz	r2, 8019370 <tcp_input+0x1fc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8019362:	687b      	ldr	r3, [r7, #4]
 8019364:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8019368:	3301      	adds	r3, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801936a:	b2db      	uxtb	r3, r3
 801936c:	429a      	cmp	r2, r3
 801936e:	d105      	bne.n	801937c <tcp_input+0x208>
    if (pcb->remote_port == tcphdr->src &&
 8019370:	6833      	ldr	r3, [r6, #0]
 8019372:	f8b8 1018 	ldrh.w	r1, [r8, #24]
 8019376:	881a      	ldrh	r2, [r3, #0]
 8019378:	4291      	cmp	r1, r2
 801937a:	d013      	beq.n	80193a4 <tcp_input+0x230>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801937c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019380:	46c2      	mov	sl, r8
 8019382:	2b00      	cmp	r3, #0
 8019384:	f000 80b8 	beq.w	80194f8 <tcp_input+0x384>
 8019388:	4698      	mov	r8, r3
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801938a:	f898 3014 	ldrb.w	r3, [r8, #20]
 801938e:	2b00      	cmp	r3, #0
 8019390:	d1de      	bne.n	8019350 <tcp_input+0x1dc>
 8019392:	465b      	mov	r3, fp
 8019394:	22fb      	movs	r2, #251	; 0xfb
 8019396:	4948      	ldr	r1, [pc, #288]	; (80194b8 <tcp_input+0x344>)
 8019398:	483e      	ldr	r0, [pc, #248]	; (8019494 <tcp_input+0x320>)
 801939a:	f007 fb15 	bl	80209c8 <iprintf>
 801939e:	f898 3014 	ldrb.w	r3, [r8, #20]
 80193a2:	e7d5      	b.n	8019350 <tcp_input+0x1dc>
    if (pcb->remote_port == tcphdr->src &&
 80193a4:	885b      	ldrh	r3, [r3, #2]
 80193a6:	f8b8 2016 	ldrh.w	r2, [r8, #22]
 80193aa:	429a      	cmp	r2, r3
 80193ac:	d1e6      	bne.n	801937c <tcp_input+0x208>
        pcb->local_port == tcphdr->dest &&
 80193ae:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80193b2:	693b      	ldr	r3, [r7, #16]
 80193b4:	429a      	cmp	r2, r3
 80193b6:	d1e1      	bne.n	801937c <tcp_input+0x208>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80193b8:	f8d8 2000 	ldr.w	r2, [r8]
 80193bc:	697b      	ldr	r3, [r7, #20]
 80193be:	429a      	cmp	r2, r3
 80193c0:	d1dc      	bne.n	801937c <tcp_input+0x208>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80193c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80193c6:	4543      	cmp	r3, r8
 80193c8:	f000 8460 	beq.w	8019c8c <tcp_input+0xb18>
      if (prev != NULL) {
 80193cc:	f1ba 0f00 	cmp.w	sl, #0
 80193d0:	f000 8455 	beq.w	8019c7e <tcp_input+0xb0a>
        pcb->next = tcp_active_pcbs;
 80193d4:	4937      	ldr	r1, [pc, #220]	; (80194b4 <tcp_input+0x340>)
        prev->next = pcb->next;
 80193d6:	f8ca 300c 	str.w	r3, [sl, #12]
        pcb->next = tcp_active_pcbs;
 80193da:	680a      	ldr	r2, [r1, #0]
        tcp_active_pcbs = pcb;
 80193dc:	f8c1 8000 	str.w	r8, [r1]
 80193e0:	4613      	mov	r3, r2
        pcb->next = tcp_active_pcbs;
 80193e2:	f8c8 200c 	str.w	r2, [r8, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80193e6:	4543      	cmp	r3, r8
 80193e8:	f000 8440 	beq.w	8019c6c <tcp_input+0xaf8>
    inseg.next = NULL;
 80193ec:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 80194d0 <tcp_input+0x35c>
 80193f0:	2300      	movs	r3, #0
    inseg.tcphdr = tcphdr;
 80193f2:	6832      	ldr	r2, [r6, #0]
    inseg.len = p->tot_len;
 80193f4:	8929      	ldrh	r1, [r5, #8]
    inseg.tcphdr = tcphdr;
 80193f6:	f8ca 200c 	str.w	r2, [sl, #12]
    if (flags & TCP_PSH) {
 80193fa:	4a2c      	ldr	r2, [pc, #176]	; (80194ac <tcp_input+0x338>)
    recv_data = NULL;
 80193fc:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 80194d4 <tcp_input+0x360>
    recv_flags = 0;
 8019400:	4f2e      	ldr	r7, [pc, #184]	; (80194bc <tcp_input+0x348>)
    inseg.len = p->tot_len;
 8019402:	f8aa 1008 	strh.w	r1, [sl, #8]
    if (flags & TCP_PSH) {
 8019406:	7812      	ldrb	r2, [r2, #0]
    recv_acked = 0;
 8019408:	492d      	ldr	r1, [pc, #180]	; (80194c0 <tcp_input+0x34c>)
    inseg.next = NULL;
 801940a:	f8ca 3000 	str.w	r3, [sl]
    recv_data = NULL;
 801940e:	f8cb 3000 	str.w	r3, [fp]
    recv_flags = 0;
 8019412:	703b      	strb	r3, [r7, #0]
    recv_acked = 0;
 8019414:	800b      	strh	r3, [r1, #0]
    if (flags & TCP_PSH) {
 8019416:	0713      	lsls	r3, r2, #28
    inseg.p = p;
 8019418:	f8ca 5004 	str.w	r5, [sl, #4]
    if (flags & TCP_PSH) {
 801941c:	d503      	bpl.n	8019426 <tcp_input+0x2b2>
      p->flags |= PBUF_FLAG_PUSH;
 801941e:	7b6b      	ldrb	r3, [r5, #13]
 8019420:	f043 0301 	orr.w	r3, r3, #1
 8019424:	736b      	strb	r3, [r5, #13]
    if (pcb->refused_data != NULL) {
 8019426:	f8d8 3078 	ldr.w	r3, [r8, #120]	; 0x78
 801942a:	2b00      	cmp	r3, #0
 801942c:	f000 80c1 	beq.w	80195b2 <tcp_input+0x43e>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8019430:	4640      	mov	r0, r8
 8019432:	f7fe fe9b 	bl	801816c <tcp_process_refused_data>
 8019436:	300d      	adds	r0, #13
 8019438:	d009      	beq.n	801944e <tcp_input+0x2da>
 801943a:	f8d8 3078 	ldr.w	r3, [r8, #120]	; 0x78
 801943e:	2b00      	cmp	r3, #0
 8019440:	f000 80b7 	beq.w	80195b2 <tcp_input+0x43e>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8019444:	9b05      	ldr	r3, [sp, #20]
 8019446:	881b      	ldrh	r3, [r3, #0]
 8019448:	2b00      	cmp	r3, #0
 801944a:	f000 80b2 	beq.w	80195b2 <tcp_input+0x43e>
        if (pcb->rcv_ann_wnd == 0) {
 801944e:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
 8019452:	2b00      	cmp	r3, #0
 8019454:	f000 8331 	beq.w	8019aba <tcp_input+0x946>
        TCP_STATS_INC(tcp.drop);
 8019458:	f8b4 3096 	ldrh.w	r3, [r4, #150]	; 0x96
 801945c:	4d19      	ldr	r5, [pc, #100]	; (80194c4 <tcp_input+0x350>)
 801945e:	3301      	adds	r3, #1
 8019460:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
    tcp_input_pcb = NULL;
 8019464:	2400      	movs	r4, #0
    if (inseg.p != NULL) {
 8019466:	f8da 0004 	ldr.w	r0, [sl, #4]
    tcp_input_pcb = NULL;
 801946a:	602c      	str	r4, [r5, #0]
    recv_data = NULL;
 801946c:	f8cb 4000 	str.w	r4, [fp]
    if (inseg.p != NULL) {
 8019470:	b118      	cbz	r0, 801947a <tcp_input+0x306>
      pbuf_free(inseg.p);
 8019472:	f7fd f951 	bl	8016718 <pbuf_free>
      inseg.p = NULL;
 8019476:	f8ca 4004 	str.w	r4, [sl, #4]
}
 801947a:	b007      	add	sp, #28
 801947c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019480:	20036164 	.word	0x20036164
 8019484:	20022414 	.word	0x20022414
 8019488:	20026a6c 	.word	0x20026a6c
 801948c:	0803e35c 	.word	0x0803e35c
 8019490:	0803e12c 	.word	0x0803e12c
 8019494:	0802697c 	.word	0x0802697c
 8019498:	20022418 	.word	0x20022418
 801949c:	0803e154 	.word	0x0803e154
 80194a0:	0803e160 	.word	0x0803e160
 80194a4:	2002240c 	.word	0x2002240c
 80194a8:	200223e8 	.word	0x200223e8
 80194ac:	200223ec 	.word	0x200223ec
 80194b0:	20022422 	.word	0x20022422
 80194b4:	20036270 	.word	0x20036270
 80194b8:	0803e180 	.word	0x0803e180
 80194bc:	20022408 	.word	0x20022408
 80194c0:	20022400 	.word	0x20022400
 80194c4:	20036284 	.word	0x20036284
 80194c8:	20022420 	.word	0x20022420
 80194cc:	2002241c 	.word	0x2002241c
 80194d0:	200223f0 	.word	0x200223f0
 80194d4:	20022404 	.word	0x20022404
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80194d8:	465b      	mov	r3, fp
 80194da:	22fd      	movs	r2, #253	; 0xfd
 80194dc:	49bd      	ldr	r1, [pc, #756]	; (80197d4 <tcp_input+0x660>)
 80194de:	48be      	ldr	r0, [pc, #760]	; (80197d8 <tcp_input+0x664>)
 80194e0:	f007 fa72 	bl	80209c8 <iprintf>
 80194e4:	e73a      	b.n	801935c <tcp_input+0x1e8>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80194e6:	465b      	mov	r3, fp
 80194e8:	22fc      	movs	r2, #252	; 0xfc
 80194ea:	49bc      	ldr	r1, [pc, #752]	; (80197dc <tcp_input+0x668>)
 80194ec:	48ba      	ldr	r0, [pc, #744]	; (80197d8 <tcp_input+0x664>)
 80194ee:	f007 fa6b 	bl	80209c8 <iprintf>
 80194f2:	f898 3014 	ldrb.w	r3, [r8, #20]
 80194f6:	e72e      	b.n	8019356 <tcp_input+0x1e2>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80194f8:	4bb9      	ldr	r3, [pc, #740]	; (80197e0 <tcp_input+0x66c>)
 80194fa:	f8d3 8000 	ldr.w	r8, [r3]
 80194fe:	f1b8 0f00 	cmp.w	r8, #0
 8019502:	f000 8087 	beq.w	8019614 <tcp_input+0x4a0>
 8019506:	462b      	mov	r3, r5
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8019508:	f8df b2f4 	ldr.w	fp, [pc, #756]	; 8019800 <tcp_input+0x68c>
 801950c:	4645      	mov	r5, r8
 801950e:	f8df a300 	ldr.w	sl, [pc, #768]	; 8019810 <tcp_input+0x69c>
 8019512:	4698      	mov	r8, r3
 8019514:	e002      	b.n	801951c <tcp_input+0x3a8>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8019516:	68ed      	ldr	r5, [r5, #12]
 8019518:	2d00      	cmp	r5, #0
 801951a:	d07a      	beq.n	8019612 <tcp_input+0x49e>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801951c:	7d28      	ldrb	r0, [r5, #20]
 801951e:	465b      	mov	r3, fp
 8019520:	f240 121f 	movw	r2, #287	; 0x11f
 8019524:	4651      	mov	r1, sl
 8019526:	280a      	cmp	r0, #10
 8019528:	48ab      	ldr	r0, [pc, #684]	; (80197d8 <tcp_input+0x664>)
 801952a:	d001      	beq.n	8019530 <tcp_input+0x3bc>
 801952c:	f007 fa4c 	bl	80209c8 <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8019530:	7a2a      	ldrb	r2, [r5, #8]
 8019532:	b132      	cbz	r2, 8019542 <tcp_input+0x3ce>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8019534:	687b      	ldr	r3, [r7, #4]
 8019536:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801953a:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801953c:	b2db      	uxtb	r3, r3
 801953e:	429a      	cmp	r2, r3
 8019540:	d1e9      	bne.n	8019516 <tcp_input+0x3a2>
      if (pcb->remote_port == tcphdr->src &&
 8019542:	6833      	ldr	r3, [r6, #0]
 8019544:	8b2a      	ldrh	r2, [r5, #24]
 8019546:	8819      	ldrh	r1, [r3, #0]
 8019548:	4291      	cmp	r1, r2
 801954a:	d1e4      	bne.n	8019516 <tcp_input+0x3a2>
 801954c:	8858      	ldrh	r0, [r3, #2]
          pcb->local_port == tcphdr->dest &&
 801954e:	8aeb      	ldrh	r3, [r5, #22]
      if (pcb->remote_port == tcphdr->src &&
 8019550:	4298      	cmp	r0, r3
 8019552:	d1e0      	bne.n	8019516 <tcp_input+0x3a2>
          pcb->local_port == tcphdr->dest &&
 8019554:	686a      	ldr	r2, [r5, #4]
 8019556:	693b      	ldr	r3, [r7, #16]
 8019558:	429a      	cmp	r2, r3
 801955a:	d1dc      	bne.n	8019516 <tcp_input+0x3a2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801955c:	682a      	ldr	r2, [r5, #0]
 801955e:	697b      	ldr	r3, [r7, #20]
 8019560:	429a      	cmp	r2, r3
 8019562:	d1d8      	bne.n	8019516 <tcp_input+0x3a2>
 8019564:	4643      	mov	r3, r8
 8019566:	46a8      	mov	r8, r5
 8019568:	461d      	mov	r5, r3
  if (flags & TCP_RST) {
 801956a:	4b9e      	ldr	r3, [pc, #632]	; (80197e4 <tcp_input+0x670>)
 801956c:	781b      	ldrb	r3, [r3, #0]
 801956e:	075f      	lsls	r7, r3, #29
 8019570:	d413      	bmi.n	801959a <tcp_input+0x426>
 8019572:	9a05      	ldr	r2, [sp, #20]
  if (flags & TCP_SYN) {
 8019574:	079e      	lsls	r6, r3, #30
 8019576:	8814      	ldrh	r4, [r2, #0]
 8019578:	f140 8370 	bpl.w	8019c5c <tcp_input+0xae8>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801957c:	4b9a      	ldr	r3, [pc, #616]	; (80197e8 <tcp_input+0x674>)
 801957e:	681a      	ldr	r2, [r3, #0]
 8019580:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8019584:	1ad3      	subs	r3, r2, r3
 8019586:	d405      	bmi.n	8019594 <tcp_input+0x420>
 8019588:	f8b8 6028 	ldrh.w	r6, [r8, #40]	; 0x28
 801958c:	1b9b      	subs	r3, r3, r6
 801958e:	2b00      	cmp	r3, #0
 8019590:	f340 8330 	ble.w	8019bf4 <tcp_input+0xa80>
  if ((tcplen > 0)) {
 8019594:	2c00      	cmp	r4, #0
 8019596:	f040 833b 	bne.w	8019c10 <tcp_input+0xa9c>
        pbuf_free(p);
 801959a:	4628      	mov	r0, r5
 801959c:	e608      	b.n	80191b0 <tcp_input+0x3c>
    tcphdr_opt1len = tcphdr_optlen;
 801959e:	4b93      	ldr	r3, [pc, #588]	; (80197ec <tcp_input+0x678>)
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80195a0:	4628      	mov	r0, r5
    tcphdr_opt1len = tcphdr_optlen;
 80195a2:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80195a4:	f7fd f87c 	bl	80166a0 <pbuf_remove_header>
 80195a8:	e685      	b.n	80192b6 <tcp_input+0x142>
  tcplen = p->tot_len;
 80195aa:	4a91      	ldr	r2, [pc, #580]	; (80197f0 <tcp_input+0x67c>)
 80195ac:	9205      	str	r2, [sp, #20]
 80195ae:	8013      	strh	r3, [r2, #0]
 80195b0:	e6c2      	b.n	8019338 <tcp_input+0x1c4>
  if (flags & TCP_RST) {
 80195b2:	4b8c      	ldr	r3, [pc, #560]	; (80197e4 <tcp_input+0x670>)
    tcp_input_pcb = pcb;
 80195b4:	4d8f      	ldr	r5, [pc, #572]	; (80197f4 <tcp_input+0x680>)
  if (flags & TCP_RST) {
 80195b6:	781a      	ldrb	r2, [r3, #0]
    tcp_input_pcb = pcb;
 80195b8:	f8c5 8000 	str.w	r8, [r5]
  if (flags & TCP_RST) {
 80195bc:	0753      	lsls	r3, r2, #29
 80195be:	f140 80f9 	bpl.w	80197b4 <tcp_input+0x640>
    if (pcb->state == SYN_SENT) {
 80195c2:	f898 1014 	ldrb.w	r1, [r8, #20]
 80195c6:	2902      	cmp	r1, #2
 80195c8:	f000 8265 	beq.w	8019a96 <tcp_input+0x922>
      if (seqno == pcb->rcv_nxt) {
 80195cc:	4b86      	ldr	r3, [pc, #536]	; (80197e8 <tcp_input+0x674>)
 80195ce:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 80195d2:	681b      	ldr	r3, [r3, #0]
 80195d4:	429a      	cmp	r2, r3
 80195d6:	f000 83b0 	beq.w	8019d3a <tcp_input+0xbc6>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80195da:	1a9b      	subs	r3, r3, r2
 80195dc:	d405      	bmi.n	80195ea <tcp_input+0x476>
 80195de:	f8b8 2028 	ldrh.w	r2, [r8, #40]	; 0x28
 80195e2:	1a9b      	subs	r3, r3, r2
 80195e4:	2b00      	cmp	r3, #0
 80195e6:	f340 8302 	ble.w	8019bee <tcp_input+0xa7a>
      if (recv_flags & TF_RESET) {
 80195ea:	783b      	ldrb	r3, [r7, #0]
 80195ec:	0719      	lsls	r1, r3, #28
 80195ee:	f140 8113 	bpl.w	8019818 <tcp_input+0x6a4>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80195f2:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 80195f6:	b123      	cbz	r3, 8019602 <tcp_input+0x48e>
 80195f8:	f06f 010d 	mvn.w	r1, #13
 80195fc:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8019600:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8019602:	4641      	mov	r1, r8
 8019604:	487c      	ldr	r0, [pc, #496]	; (80197f8 <tcp_input+0x684>)
 8019606:	f7fe fa43 	bl	8017a90 <tcp_pcb_remove>
        tcp_free(pcb);
 801960a:	4640      	mov	r0, r8
 801960c:	f7fd fd50 	bl	80170b0 <tcp_free>
 8019610:	e728      	b.n	8019464 <tcp_input+0x2f0>
 8019612:	4645      	mov	r5, r8
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8019614:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8019814 <tcp_input+0x6a0>
 8019618:	6830      	ldr	r0, [r6, #0]
 801961a:	f8db e000 	ldr.w	lr, [fp]
 801961e:	f1be 0f00 	cmp.w	lr, #0
 8019622:	f000 80a4 	beq.w	801976e <tcp_input+0x5fa>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8019626:	f8d7 c004 	ldr.w	ip, [r7, #4]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801962a:	46f2      	mov	sl, lr
 801962c:	f8d7 8014 	ldr.w	r8, [r7, #20]
    prev = NULL;
 8019630:	2100      	movs	r1, #0
 8019632:	e006      	b.n	8019642 <tcp_input+0x4ce>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8019634:	f8da 300c 	ldr.w	r3, [sl, #12]
 8019638:	4651      	mov	r1, sl
 801963a:	469a      	mov	sl, r3
 801963c:	2b00      	cmp	r3, #0
 801963e:	f000 8096 	beq.w	801976e <tcp_input+0x5fa>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8019642:	f89a 2008 	ldrb.w	r2, [sl, #8]
 8019646:	b12a      	cbz	r2, 8019654 <tcp_input+0x4e0>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8019648:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 801964c:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801964e:	b2db      	uxtb	r3, r3
 8019650:	429a      	cmp	r2, r3
 8019652:	d1ef      	bne.n	8019634 <tcp_input+0x4c0>
      if (lpcb->local_port == tcphdr->dest) {
 8019654:	f8ba 2016 	ldrh.w	r2, [sl, #22]
 8019658:	8843      	ldrh	r3, [r0, #2]
 801965a:	429a      	cmp	r2, r3
 801965c:	d1ea      	bne.n	8019634 <tcp_input+0x4c0>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801965e:	f8da 3000 	ldr.w	r3, [sl]
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8019662:	b10b      	cbz	r3, 8019668 <tcp_input+0x4f4>
 8019664:	4543      	cmp	r3, r8
 8019666:	d1e5      	bne.n	8019634 <tcp_input+0x4c0>
      if (prev != NULL) {
 8019668:	2900      	cmp	r1, #0
 801966a:	f000 822a 	beq.w	8019ac2 <tcp_input+0x94e>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801966e:	f8da 300c 	ldr.w	r3, [sl, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8019672:	f8cb a000 	str.w	sl, [fp]
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8019676:	60cb      	str	r3, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8019678:	f8ca e00c 	str.w	lr, [sl, #12]
  if (flags & TCP_RST) {
 801967c:	4b59      	ldr	r3, [pc, #356]	; (80197e4 <tcp_input+0x670>)
 801967e:	781b      	ldrb	r3, [r3, #0]
 8019680:	0759      	lsls	r1, r3, #29
 8019682:	d48a      	bmi.n	801959a <tcp_input+0x426>
  if (flags & TCP_ACK) {
 8019684:	f013 0810 	ands.w	r8, r3, #16
 8019688:	f040 8221 	bne.w	8019ace <tcp_input+0x95a>
  } else if (flags & TCP_SYN) {
 801968c:	079a      	lsls	r2, r3, #30
 801968e:	d584      	bpl.n	801959a <tcp_input+0x426>
    npcb = tcp_alloc(pcb->prio);
 8019690:	f89a 0015 	ldrb.w	r0, [sl, #21]
 8019694:	f7fe fb78 	bl	8017d88 <tcp_alloc>
    if (npcb == NULL) {
 8019698:	4681      	mov	r9, r0
 801969a:	2800      	cmp	r0, #0
 801969c:	f000 82cb 	beq.w	8019c36 <tcp_input+0xac2>
    npcb->remote_port = tcphdr->src;
 80196a0:	6832      	ldr	r2, [r6, #0]
    npcb->state = SYN_RCVD;
 80196a2:	f04f 0c03 	mov.w	ip, #3
    npcb->rcv_nxt = seqno + 1;
 80196a6:	4b50      	ldr	r3, [pc, #320]	; (80197e8 <tcp_input+0x674>)
    npcb->local_port = pcb->local_port;
 80196a8:	f8ba 4016 	ldrh.w	r4, [sl, #22]
    npcb->rcv_nxt = seqno + 1;
 80196ac:	6819      	ldr	r1, [r3, #0]
    npcb->remote_port = tcphdr->src;
 80196ae:	7813      	ldrb	r3, [r2, #0]
 80196b0:	7852      	ldrb	r2, [r2, #1]
    npcb->rcv_nxt = seqno + 1;
 80196b2:	3101      	adds	r1, #1
    npcb->remote_port = tcphdr->src;
 80196b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    npcb->rcv_nxt = seqno + 1;
 80196b8:	6241      	str	r1, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80196ba:	62c1      	str	r1, [r0, #44]	; 0x2c
    npcb->remote_port = tcphdr->src;
 80196bc:	8303      	strh	r3, [r0, #24]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80196be:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    npcb->state = SYN_RCVD;
 80196c2:	f880 c014 	strb.w	ip, [r0, #20]
    npcb->local_port = pcb->local_port;
 80196c6:	82c4      	strh	r4, [r0, #22]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80196c8:	1d04      	adds	r4, r0, #4
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80196ca:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80196cc:	6042      	str	r2, [r0, #4]
    iss = tcp_next_iss(npcb);
 80196ce:	f7fe fdeb 	bl	80182a8 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80196d2:	4b45      	ldr	r3, [pc, #276]	; (80197e8 <tcp_input+0x674>)
    TCP_REG_ACTIVE(npcb);
 80196d4:	4948      	ldr	r1, [pc, #288]	; (80197f8 <tcp_input+0x684>)
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80196d6:	681a      	ldr	r2, [r3, #0]
    npcb->callback_arg = pcb->callback_arg;
 80196d8:	f8da 3010 	ldr.w	r3, [sl, #16]
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80196dc:	3a01      	subs	r2, #1
    npcb->snd_wl2 = iss;
 80196de:	f8c9 0058 	str.w	r0, [r9, #88]	; 0x58
    npcb->lastack = iss;
 80196e2:	f8c9 0044 	str.w	r0, [r9, #68]	; 0x44
    npcb->snd_lbb = iss;
 80196e6:	f8c9 005c 	str.w	r0, [r9, #92]	; 0x5c
    npcb->callback_arg = pcb->callback_arg;
 80196ea:	f8c9 3010 	str.w	r3, [r9, #16]
    npcb->listener = pcb;
 80196ee:	f8c9 a07c 	str.w	sl, [r9, #124]	; 0x7c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80196f2:	e9c9 0214 	strd	r0, r2, [r9, #80]	; 0x50
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80196f6:	f89a 3009 	ldrb.w	r3, [sl, #9]
    TCP_REG_ACTIVE(npcb);
 80196fa:	680a      	ldr	r2, [r1, #0]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80196fc:	f003 030c 	and.w	r3, r3, #12
    TCP_REG_ACTIVE(npcb);
 8019700:	f8c1 9000 	str.w	r9, [r1]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8019704:	f889 3009 	strb.w	r3, [r9, #9]
    npcb->netif_idx = pcb->netif_idx;
 8019708:	f89a 3008 	ldrb.w	r3, [sl, #8]
    TCP_REG_ACTIVE(npcb);
 801970c:	f8c9 200c 	str.w	r2, [r9, #12]
    npcb->netif_idx = pcb->netif_idx;
 8019710:	f889 3008 	strb.w	r3, [r9, #8]
    TCP_REG_ACTIVE(npcb);
 8019714:	f001 ff0a 	bl	801b52c <tcp_timer_needed>
 8019718:	2201      	movs	r2, #1
 801971a:	4b38      	ldr	r3, [pc, #224]	; (80197fc <tcp_input+0x688>)
    tcp_parseopt(npcb);
 801971c:	4648      	mov	r0, r9
    TCP_REG_ACTIVE(npcb);
 801971e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8019720:	f7fe fede 	bl	80184e0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8019724:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8019726:	4620      	mov	r0, r4
 8019728:	f8b9 6032 	ldrh.w	r6, [r9, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 801972c:	89db      	ldrh	r3, [r3, #14]
 801972e:	f8a9 3060 	strh.w	r3, [r9, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8019732:	f8a9 3062 	strh.w	r3, [r9, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8019736:	f004 fcc1 	bl	801e0bc <ip4_route>
 801973a:	4622      	mov	r2, r4
 801973c:	4601      	mov	r1, r0
 801973e:	4630      	mov	r0, r6
 8019740:	f7fe fdce 	bl	80182e0 <tcp_eff_send_mss_netif>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8019744:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8019746:	f8a9 0032 	strh.w	r0, [r9, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801974a:	4648      	mov	r0, r9
 801974c:	f001 f9a0 	bl	801aa90 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 8019750:	2800      	cmp	r0, #0
 8019752:	f040 8269 	bne.w	8019c28 <tcp_input+0xab4>
    tcp_output(npcb);
 8019756:	4648      	mov	r0, r9
 8019758:	f001 fbb4 	bl	801aec4 <tcp_output>
        pbuf_free(p);
 801975c:	4628      	mov	r0, r5
 801975e:	e527      	b.n	80191b0 <tcp_input+0x3c>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8019760:	4b27      	ldr	r3, [pc, #156]	; (8019800 <tcp_input+0x68c>)
 8019762:	22c2      	movs	r2, #194	; 0xc2
 8019764:	4927      	ldr	r1, [pc, #156]	; (8019804 <tcp_input+0x690>)
 8019766:	481c      	ldr	r0, [pc, #112]	; (80197d8 <tcp_input+0x664>)
 8019768:	f007 f92e 	bl	80209c8 <iprintf>
 801976c:	e570      	b.n	8019250 <tcp_input+0xdc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801976e:	8980      	ldrh	r0, [r0, #12]
 8019770:	f7fb f964 	bl	8014a3c <lwip_htons>
 8019774:	f010 0004 	ands.w	r0, r0, #4
 8019778:	f47f af0f 	bne.w	801959a <tcp_input+0x426>
      TCP_STATS_INC(tcp.proterr);
 801977c:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
      TCP_STATS_INC(tcp.drop);
 8019780:	f8b4 3096 	ldrh.w	r3, [r4, #150]	; 0x96
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019784:	6836      	ldr	r6, [r6, #0]
      TCP_STATS_INC(tcp.proterr);
 8019786:	3101      	adds	r1, #1
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019788:	9a05      	ldr	r2, [sp, #20]
      TCP_STATS_INC(tcp.drop);
 801978a:	3301      	adds	r3, #1
      TCP_STATS_INC(tcp.proterr);
 801978c:	f8a4 10a0 	strh.w	r1, [r4, #160]	; 0xa0
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019790:	8817      	ldrh	r7, [r2, #0]
      TCP_STATS_INC(tcp.drop);
 8019792:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019796:	4a14      	ldr	r2, [pc, #80]	; (80197e8 <tcp_input+0x674>)
 8019798:	8833      	ldrh	r3, [r6, #0]
 801979a:	491b      	ldr	r1, [pc, #108]	; (8019808 <tcp_input+0x694>)
 801979c:	6812      	ldr	r2, [r2, #0]
 801979e:	6809      	ldr	r1, [r1, #0]
 80197a0:	9302      	str	r3, [sp, #8]
 80197a2:	443a      	add	r2, r7
 80197a4:	8874      	ldrh	r4, [r6, #2]
 80197a6:	4b19      	ldr	r3, [pc, #100]	; (801980c <tcp_input+0x698>)
 80197a8:	e9cd 9400 	strd	r9, r4, [sp]
 80197ac:	f001 fb0e 	bl	801adcc <tcp_rst>
        pbuf_free(p);
 80197b0:	4628      	mov	r0, r5
 80197b2:	e4fd      	b.n	80191b0 <tcp_input+0x3c>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80197b4:	0794      	lsls	r4, r2, #30
 80197b6:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 80197ba:	f140 8082 	bpl.w	80198c2 <tcp_input+0x74e>
 80197be:	f898 2014 	ldrb.w	r2, [r8, #20]
 80197c2:	3a02      	subs	r2, #2
 80197c4:	2a01      	cmp	r2, #1
 80197c6:	d97c      	bls.n	80198c2 <tcp_input+0x74e>
        tcp_ack_now(pcb);
 80197c8:	f043 0302 	orr.w	r3, r3, #2
 80197cc:	f8a8 301a 	strh.w	r3, [r8, #26]
 80197d0:	e70b      	b.n	80195ea <tcp_input+0x476>
 80197d2:	bf00      	nop
 80197d4:	0803e1d4 	.word	0x0803e1d4
 80197d8:	0802697c 	.word	0x0802697c
 80197dc:	0803e1a8 	.word	0x0803e1a8
 80197e0:	20036280 	.word	0x20036280
 80197e4:	200223ec 	.word	0x200223ec
 80197e8:	2002240c 	.word	0x2002240c
 80197ec:	20022418 	.word	0x20022418
 80197f0:	20022422 	.word	0x20022422
 80197f4:	20036284 	.word	0x20036284
 80197f8:	20036270 	.word	0x20036270
 80197fc:	2003626c 	.word	0x2003626c
 8019800:	0803e35c 	.word	0x0803e35c
 8019804:	0803e144 	.word	0x0803e144
 8019808:	200223e8 	.word	0x200223e8
 801980c:	20026a80 	.word	0x20026a80
 8019810:	0803e254 	.word	0x0803e254
 8019814:	20036278 	.word	0x20036278
        if (recv_acked > 0) {
 8019818:	4bb7      	ldr	r3, [pc, #732]	; (8019af8 <tcp_input+0x984>)
 801981a:	881a      	ldrh	r2, [r3, #0]
 801981c:	b162      	cbz	r2, 8019838 <tcp_input+0x6c4>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801981e:	f8d8 3080 	ldr.w	r3, [r8, #128]	; 0x80
 8019822:	b133      	cbz	r3, 8019832 <tcp_input+0x6be>
 8019824:	4641      	mov	r1, r8
 8019826:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801982a:	4798      	blx	r3
            if (err == ERR_ABRT) {
 801982c:	300d      	adds	r0, #13
 801982e:	f43f ae19 	beq.w	8019464 <tcp_input+0x2f0>
          recv_acked = 0;
 8019832:	2300      	movs	r3, #0
 8019834:	4ab0      	ldr	r2, [pc, #704]	; (8019af8 <tcp_input+0x984>)
 8019836:	8013      	strh	r3, [r2, #0]
        if (tcp_input_delayed_close(pcb)) {
 8019838:	4640      	mov	r0, r8
 801983a:	f7fe ff5f 	bl	80186fc <tcp_input_delayed_close>
 801983e:	2800      	cmp	r0, #0
 8019840:	f47f ae10 	bne.w	8019464 <tcp_input+0x2f0>
        if (recv_data != NULL) {
 8019844:	f8db 3000 	ldr.w	r3, [fp]
 8019848:	b31b      	cbz	r3, 8019892 <tcp_input+0x71e>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801984a:	f8d8 3078 	ldr.w	r3, [r8, #120]	; 0x78
 801984e:	b133      	cbz	r3, 801985e <tcp_input+0x6ea>
 8019850:	4baa      	ldr	r3, [pc, #680]	; (8019afc <tcp_input+0x988>)
 8019852:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8019856:	49aa      	ldr	r1, [pc, #680]	; (8019b00 <tcp_input+0x98c>)
 8019858:	48aa      	ldr	r0, [pc, #680]	; (8019b04 <tcp_input+0x990>)
 801985a:	f007 f8b5 	bl	80209c8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801985e:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 8019862:	f8db 2000 	ldr.w	r2, [fp]
 8019866:	f013 0310 	ands.w	r3, r3, #16
 801986a:	f040 8238 	bne.w	8019cde <tcp_input+0xb6a>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801986e:	f8d8 4084 	ldr.w	r4, [r8, #132]	; 0x84
 8019872:	2c00      	cmp	r4, #0
 8019874:	f000 8215 	beq.w	8019ca2 <tcp_input+0xb2e>
 8019878:	4641      	mov	r1, r8
 801987a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801987e:	47a0      	blx	r4
          if (err == ERR_ABRT) {
 8019880:	f110 0f0d 	cmn.w	r0, #13
 8019884:	f43f adee 	beq.w	8019464 <tcp_input+0x2f0>
          if (err != ERR_OK) {
 8019888:	b118      	cbz	r0, 8019892 <tcp_input+0x71e>
            pcb->refused_data = recv_data;
 801988a:	f8db 3000 	ldr.w	r3, [fp]
 801988e:	f8c8 3078 	str.w	r3, [r8, #120]	; 0x78
        if (recv_flags & TF_GOT_FIN) {
 8019892:	783b      	ldrb	r3, [r7, #0]
 8019894:	069a      	lsls	r2, r3, #26
 8019896:	d508      	bpl.n	80198aa <tcp_input+0x736>
          if (pcb->refused_data != NULL) {
 8019898:	f8d8 3078 	ldr.w	r3, [r8, #120]	; 0x78
 801989c:	2b00      	cmp	r3, #0
 801989e:	f000 8206 	beq.w	8019cae <tcp_input+0xb3a>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80198a2:	7b5a      	ldrb	r2, [r3, #13]
 80198a4:	f042 0220 	orr.w	r2, r2, #32
 80198a8:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 80198aa:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 80198ac:	4640      	mov	r0, r8
        tcp_input_pcb = NULL;
 80198ae:	602b      	str	r3, [r5, #0]
        if (tcp_input_delayed_close(pcb)) {
 80198b0:	f7fe ff24 	bl	80186fc <tcp_input_delayed_close>
 80198b4:	2800      	cmp	r0, #0
 80198b6:	f47f add5 	bne.w	8019464 <tcp_input+0x2f0>
        tcp_output(pcb);
 80198ba:	4640      	mov	r0, r8
 80198bc:	f001 fb02 	bl	801aec4 <tcp_output>
 80198c0:	e5d0      	b.n	8019464 <tcp_input+0x2f0>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80198c2:	06d8      	lsls	r0, r3, #27
 80198c4:	d403      	bmi.n	80198ce <tcp_input+0x75a>
    pcb->tmr = tcp_ticks;
 80198c6:	4b90      	ldr	r3, [pc, #576]	; (8019b08 <tcp_input+0x994>)
 80198c8:	681b      	ldr	r3, [r3, #0]
 80198ca:	f8c8 3020 	str.w	r3, [r8, #32]
  pcb->persist_probe = 0;
 80198ce:	2300      	movs	r3, #0
  tcp_parseopt(pcb);
 80198d0:	4640      	mov	r0, r8
  pcb->persist_probe = 0;
 80198d2:	f8a8 309a 	strh.w	r3, [r8, #154]	; 0x9a
  tcp_parseopt(pcb);
 80198d6:	f7fe fe03 	bl	80184e0 <tcp_parseopt>
  switch (pcb->state) {
 80198da:	f898 3014 	ldrb.w	r3, [r8, #20]
 80198de:	3b02      	subs	r3, #2
 80198e0:	2b07      	cmp	r3, #7
 80198e2:	f63f ae82 	bhi.w	80195ea <tcp_input+0x476>
 80198e6:	e8df f003 	tbb	[pc, r3]
 80198ea:	8eb0      	.short	0x8eb0
 80198ec:	7d42607d 	.word	0x7d42607d
 80198f0:	041d      	.short	0x041d
      tcp_receive(pcb);
 80198f2:	4640      	mov	r0, r8
 80198f4:	f7fe ff94 	bl	8018820 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80198f8:	4b84      	ldr	r3, [pc, #528]	; (8019b0c <tcp_input+0x998>)
 80198fa:	781b      	ldrb	r3, [r3, #0]
 80198fc:	06d8      	lsls	r0, r3, #27
 80198fe:	f57f ae74 	bpl.w	80195ea <tcp_input+0x476>
 8019902:	4b83      	ldr	r3, [pc, #524]	; (8019b10 <tcp_input+0x99c>)
 8019904:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 8019908:	681a      	ldr	r2, [r3, #0]
 801990a:	783b      	ldrb	r3, [r7, #0]
 801990c:	4291      	cmp	r1, r2
 801990e:	f47f ae6c 	bne.w	80195ea <tcp_input+0x476>
 8019912:	f8d8 206c 	ldr.w	r2, [r8, #108]	; 0x6c
 8019916:	2a00      	cmp	r2, #0
 8019918:	f47f ae67 	bne.w	80195ea <tcp_input+0x476>
        recv_flags |= TF_CLOSED;
 801991c:	f043 0310 	orr.w	r3, r3, #16
 8019920:	703b      	strb	r3, [r7, #0]
 8019922:	e662      	b.n	80195ea <tcp_input+0x476>
      tcp_receive(pcb);
 8019924:	4640      	mov	r0, r8
 8019926:	f7fe ff7b 	bl	8018820 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801992a:	4b78      	ldr	r3, [pc, #480]	; (8019b0c <tcp_input+0x998>)
 801992c:	781b      	ldrb	r3, [r3, #0]
 801992e:	06dc      	lsls	r4, r3, #27
 8019930:	f57f ae5b 	bpl.w	80195ea <tcp_input+0x476>
 8019934:	4b76      	ldr	r3, [pc, #472]	; (8019b10 <tcp_input+0x99c>)
 8019936:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
 801993a:	681b      	ldr	r3, [r3, #0]
 801993c:	429a      	cmp	r2, r3
 801993e:	f47f ae54 	bne.w	80195ea <tcp_input+0x476>
 8019942:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 8019946:	2b00      	cmp	r3, #0
 8019948:	f47f ae4f 	bne.w	80195ea <tcp_input+0x476>
        tcp_pcb_purge(pcb);
 801994c:	4640      	mov	r0, r8
 801994e:	f7fd fde9 	bl	8017524 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8019952:	4b70      	ldr	r3, [pc, #448]	; (8019b14 <tcp_input+0x9a0>)
 8019954:	681b      	ldr	r3, [r3, #0]
 8019956:	4543      	cmp	r3, r8
 8019958:	f000 8222 	beq.w	8019da0 <tcp_input+0xc2c>
 801995c:	2b00      	cmp	r3, #0
 801995e:	f000 8223 	beq.w	8019da8 <tcp_input+0xc34>
 8019962:	68da      	ldr	r2, [r3, #12]
 8019964:	4542      	cmp	r2, r8
 8019966:	f000 822e 	beq.w	8019dc6 <tcp_input+0xc52>
 801996a:	4613      	mov	r3, r2
 801996c:	e7f6      	b.n	801995c <tcp_input+0x7e8>
      tcp_receive(pcb);
 801996e:	4640      	mov	r0, r8
 8019970:	f7fe ff56 	bl	8018820 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8019974:	783b      	ldrb	r3, [r7, #0]
 8019976:	069e      	lsls	r6, r3, #26
 8019978:	f57f ae37 	bpl.w	80195ea <tcp_input+0x476>
        tcp_ack_now(pcb);
 801997c:	f8b8 301a 	ldrh.w	r3, [r8, #26]
        tcp_pcb_purge(pcb);
 8019980:	4640      	mov	r0, r8
        tcp_ack_now(pcb);
 8019982:	f043 0302 	orr.w	r3, r3, #2
 8019986:	f8a8 301a 	strh.w	r3, [r8, #26]
        tcp_pcb_purge(pcb);
 801998a:	f7fd fdcb 	bl	8017524 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801998e:	4b61      	ldr	r3, [pc, #388]	; (8019b14 <tcp_input+0x9a0>)
 8019990:	681b      	ldr	r3, [r3, #0]
 8019992:	4543      	cmp	r3, r8
 8019994:	f000 8204 	beq.w	8019da0 <tcp_input+0xc2c>
 8019998:	2b00      	cmp	r3, #0
 801999a:	f000 8205 	beq.w	8019da8 <tcp_input+0xc34>
 801999e:	68da      	ldr	r2, [r3, #12]
 80199a0:	4542      	cmp	r2, r8
 80199a2:	f000 8210 	beq.w	8019dc6 <tcp_input+0xc52>
 80199a6:	4613      	mov	r3, r2
 80199a8:	e7f6      	b.n	8019998 <tcp_input+0x824>
      tcp_receive(pcb);
 80199aa:	4640      	mov	r0, r8
 80199ac:	f7fe ff38 	bl	8018820 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80199b0:	783b      	ldrb	r3, [r7, #0]
 80199b2:	f013 0f20 	tst.w	r3, #32
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80199b6:	4b55      	ldr	r3, [pc, #340]	; (8019b0c <tcp_input+0x998>)
 80199b8:	781b      	ldrb	r3, [r3, #0]
      if (recv_flags & TF_GOT_FIN) {
 80199ba:	f000 81c9 	beq.w	8019d50 <tcp_input+0xbdc>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80199be:	06da      	lsls	r2, r3, #27
 80199c0:	d506      	bpl.n	80199d0 <tcp_input+0x85c>
 80199c2:	4b53      	ldr	r3, [pc, #332]	; (8019b10 <tcp_input+0x99c>)
 80199c4:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
 80199c8:	681b      	ldr	r3, [r3, #0]
 80199ca:	429a      	cmp	r2, r3
 80199cc:	f000 81ff 	beq.w	8019dce <tcp_input+0xc5a>
          tcp_ack_now(pcb);
 80199d0:	f8b8 301a 	ldrh.w	r3, [r8, #26]
          pcb->state = CLOSING;
 80199d4:	2208      	movs	r2, #8
          tcp_ack_now(pcb);
 80199d6:	f043 0302 	orr.w	r3, r3, #2
          pcb->state = CLOSING;
 80199da:	f888 2014 	strb.w	r2, [r8, #20]
          tcp_ack_now(pcb);
 80199de:	f8a8 301a 	strh.w	r3, [r8, #26]
 80199e2:	e602      	b.n	80195ea <tcp_input+0x476>
      tcp_receive(pcb);
 80199e4:	4640      	mov	r0, r8
 80199e6:	f7fe ff1b 	bl	8018820 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80199ea:	783b      	ldrb	r3, [r7, #0]
 80199ec:	0699      	lsls	r1, r3, #26
 80199ee:	f57f adfc 	bpl.w	80195ea <tcp_input+0x476>
        tcp_ack_now(pcb);
 80199f2:	f8b8 301a 	ldrh.w	r3, [r8, #26]
        pcb->state = CLOSE_WAIT;
 80199f6:	2207      	movs	r2, #7
        tcp_ack_now(pcb);
 80199f8:	f043 0302 	orr.w	r3, r3, #2
        pcb->state = CLOSE_WAIT;
 80199fc:	f888 2014 	strb.w	r2, [r8, #20]
        tcp_ack_now(pcb);
 8019a00:	f8a8 301a 	strh.w	r3, [r8, #26]
 8019a04:	e5f1      	b.n	80195ea <tcp_input+0x476>
      if (flags & TCP_ACK) {
 8019a06:	4b41      	ldr	r3, [pc, #260]	; (8019b0c <tcp_input+0x998>)
 8019a08:	781b      	ldrb	r3, [r3, #0]
 8019a0a:	06da      	lsls	r2, r3, #27
 8019a0c:	f140 8186 	bpl.w	8019d1c <tcp_input+0xba8>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019a10:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8019a14:	4a3e      	ldr	r2, [pc, #248]	; (8019b10 <tcp_input+0x99c>)
 8019a16:	43db      	mvns	r3, r3
 8019a18:	6811      	ldr	r1, [r2, #0]
 8019a1a:	42cb      	cmn	r3, r1
 8019a1c:	d405      	bmi.n	8019a2a <tcp_input+0x8b6>
 8019a1e:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
 8019a22:	1acb      	subs	r3, r1, r3
 8019a24:	2b00      	cmp	r3, #0
 8019a26:	f340 81a6 	ble.w	8019d76 <tcp_input+0xc02>
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019a2a:	6833      	ldr	r3, [r6, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019a2c:	4640      	mov	r0, r8
 8019a2e:	9a05      	ldr	r2, [sp, #20]
 8019a30:	881e      	ldrh	r6, [r3, #0]
 8019a32:	8814      	ldrh	r4, [r2, #0]
 8019a34:	4a38      	ldr	r2, [pc, #224]	; (8019b18 <tcp_input+0x9a4>)
 8019a36:	6812      	ldr	r2, [r2, #0]
 8019a38:	9602      	str	r6, [sp, #8]
 8019a3a:	885b      	ldrh	r3, [r3, #2]
 8019a3c:	4422      	add	r2, r4
 8019a3e:	e9cd 9300 	strd	r9, r3, [sp]
 8019a42:	4b36      	ldr	r3, [pc, #216]	; (8019b1c <tcp_input+0x9a8>)
 8019a44:	f001 f9c2 	bl	801adcc <tcp_rst>
 8019a48:	e5cf      	b.n	80195ea <tcp_input+0x476>
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8019a4a:	4b30      	ldr	r3, [pc, #192]	; (8019b0c <tcp_input+0x998>)
 8019a4c:	781b      	ldrb	r3, [r3, #0]
 8019a4e:	f003 0212 	and.w	r2, r3, #18
 8019a52:	2a12      	cmp	r2, #18
 8019a54:	d064      	beq.n	8019b20 <tcp_input+0x9ac>
      else if (flags & TCP_ACK) {
 8019a56:	06d9      	lsls	r1, r3, #27
 8019a58:	f57f adc7 	bpl.w	80195ea <tcp_input+0x476>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019a5c:	9a05      	ldr	r2, [sp, #20]
 8019a5e:	4640      	mov	r0, r8
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019a60:	6833      	ldr	r3, [r6, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019a62:	8811      	ldrh	r1, [r2, #0]
 8019a64:	4a2c      	ldr	r2, [pc, #176]	; (8019b18 <tcp_input+0x9a4>)
 8019a66:	881c      	ldrh	r4, [r3, #0]
 8019a68:	6812      	ldr	r2, [r2, #0]
 8019a6a:	9402      	str	r4, [sp, #8]
 8019a6c:	440a      	add	r2, r1
 8019a6e:	885b      	ldrh	r3, [r3, #2]
 8019a70:	4927      	ldr	r1, [pc, #156]	; (8019b10 <tcp_input+0x99c>)
 8019a72:	6809      	ldr	r1, [r1, #0]
 8019a74:	e9cd 9300 	strd	r9, r3, [sp]
 8019a78:	4b28      	ldr	r3, [pc, #160]	; (8019b1c <tcp_input+0x9a8>)
 8019a7a:	f001 f9a7 	bl	801adcc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8019a7e:	f898 3042 	ldrb.w	r3, [r8, #66]	; 0x42
 8019a82:	2b05      	cmp	r3, #5
 8019a84:	f63f adb1 	bhi.w	80195ea <tcp_input+0x476>
          pcb->rtime = 0;
 8019a88:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 8019a8a:	4640      	mov	r0, r8
          pcb->rtime = 0;
 8019a8c:	f8a8 3030 	strh.w	r3, [r8, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8019a90:	f001 fc2e 	bl	801b2f0 <tcp_rexmit_rto>
 8019a94:	e5a9      	b.n	80195ea <tcp_input+0x476>
      if (ackno == pcb->snd_nxt) {
 8019a96:	4b1e      	ldr	r3, [pc, #120]	; (8019b10 <tcp_input+0x99c>)
 8019a98:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
 8019a9c:	681b      	ldr	r3, [r3, #0]
 8019a9e:	429a      	cmp	r2, r3
 8019aa0:	f47f ada3 	bne.w	80195ea <tcp_input+0x476>
      recv_flags |= TF_RESET;
 8019aa4:	783a      	ldrb	r2, [r7, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8019aa6:	f8b8 301a 	ldrh.w	r3, [r8, #26]
      recv_flags |= TF_RESET;
 8019aaa:	f042 0208 	orr.w	r2, r2, #8
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8019aae:	f023 0301 	bic.w	r3, r3, #1
      recv_flags |= TF_RESET;
 8019ab2:	703a      	strb	r2, [r7, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8019ab4:	f8a8 301a 	strh.w	r3, [r8, #26]
 8019ab8:	e597      	b.n	80195ea <tcp_input+0x476>
          tcp_send_empty_ack(pcb);
 8019aba:	4640      	mov	r0, r8
 8019abc:	f001 f9ce 	bl	801ae5c <tcp_send_empty_ack>
 8019ac0:	e4ca      	b.n	8019458 <tcp_input+0x2e4>
        TCP_STATS_INC(tcp.cachehit);
 8019ac2:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
 8019ac6:	3301      	adds	r3, #1
 8019ac8:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 8019acc:	e5d6      	b.n	801967c <tcp_input+0x508>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019ace:	9a05      	ldr	r2, [sp, #20]
 8019ad0:	4650      	mov	r0, sl
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019ad2:	6833      	ldr	r3, [r6, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019ad4:	8811      	ldrh	r1, [r2, #0]
 8019ad6:	4a10      	ldr	r2, [pc, #64]	; (8019b18 <tcp_input+0x9a4>)
 8019ad8:	881c      	ldrh	r4, [r3, #0]
 8019ada:	6812      	ldr	r2, [r2, #0]
 8019adc:	9402      	str	r4, [sp, #8]
 8019ade:	440a      	add	r2, r1
 8019ae0:	885b      	ldrh	r3, [r3, #2]
 8019ae2:	490b      	ldr	r1, [pc, #44]	; (8019b10 <tcp_input+0x99c>)
 8019ae4:	6809      	ldr	r1, [r1, #0]
 8019ae6:	e9cd 9300 	strd	r9, r3, [sp]
 8019aea:	4b0c      	ldr	r3, [pc, #48]	; (8019b1c <tcp_input+0x9a8>)
 8019aec:	f001 f96e 	bl	801adcc <tcp_rst>
        pbuf_free(p);
 8019af0:	4628      	mov	r0, r5
 8019af2:	f7ff bb5d 	b.w	80191b0 <tcp_input+0x3c>
 8019af6:	bf00      	nop
 8019af8:	20022400 	.word	0x20022400
 8019afc:	0803e35c 	.word	0x0803e35c
 8019b00:	0803e2f0 	.word	0x0803e2f0
 8019b04:	0802697c 	.word	0x0802697c
 8019b08:	20036274 	.word	0x20036274
 8019b0c:	200223ec 	.word	0x200223ec
 8019b10:	200223e8 	.word	0x200223e8
 8019b14:	20036270 	.word	0x20036270
 8019b18:	2002240c 	.word	0x2002240c
 8019b1c:	20026a80 	.word	0x20026a80
          && (ackno == pcb->lastack + 1)) {
 8019b20:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
 8019b24:	49c4      	ldr	r1, [pc, #784]	; (8019e38 <tcp_input+0xcc4>)
 8019b26:	3201      	adds	r2, #1
 8019b28:	6809      	ldr	r1, [r1, #0]
 8019b2a:	428a      	cmp	r2, r1
 8019b2c:	d193      	bne.n	8019a56 <tcp_input+0x8e2>
        pcb->rcv_nxt = seqno + 1;
 8019b2e:	4bc3      	ldr	r3, [pc, #780]	; (8019e3c <tcp_input+0xcc8>)
        pcb->state = ESTABLISHED;
 8019b30:	2104      	movs	r1, #4
        pcb->snd_wnd = tcphdr->wnd;
 8019b32:	6836      	ldr	r6, [r6, #0]
        pcb->rcv_nxt = seqno + 1;
 8019b34:	681b      	ldr	r3, [r3, #0]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8019b36:	eb08 0401 	add.w	r4, r8, r1
        pcb->lastack = ackno;
 8019b3a:	f8c8 2044 	str.w	r2, [r8, #68]	; 0x44
        pcb->rcv_nxt = seqno + 1;
 8019b3e:	1c5a      	adds	r2, r3, #1
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8019b40:	3b01      	subs	r3, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8019b42:	4620      	mov	r0, r4
        pcb->rcv_nxt = seqno + 1;
 8019b44:	f8c8 2024 	str.w	r2, [r8, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8019b48:	f8c8 202c 	str.w	r2, [r8, #44]	; 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 8019b4c:	89f2      	ldrh	r2, [r6, #14]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8019b4e:	f8b8 6032 	ldrh.w	r6, [r8, #50]	; 0x32
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8019b52:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
        pcb->snd_wnd = tcphdr->wnd;
 8019b56:	f8a8 2060 	strh.w	r2, [r8, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8019b5a:	f8a8 2062 	strh.w	r2, [r8, #98]	; 0x62
        pcb->state = ESTABLISHED;
 8019b5e:	f888 1014 	strb.w	r1, [r8, #20]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8019b62:	f004 faab 	bl	801e0bc <ip4_route>
 8019b66:	4622      	mov	r2, r4
 8019b68:	4601      	mov	r1, r0
 8019b6a:	4630      	mov	r0, r6
 8019b6c:	f7fe fbb8 	bl	80182e0 <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8019b70:	f241 131c 	movw	r3, #4380	; 0x111c
 8019b74:	0042      	lsls	r2, r0, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8019b76:	f8a8 0032 	strh.w	r0, [r8, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8019b7a:	0080      	lsls	r0, r0, #2
 8019b7c:	429a      	cmp	r2, r3
 8019b7e:	4611      	mov	r1, r2
 8019b80:	bf38      	it	cc
 8019b82:	4619      	movcc	r1, r3
 8019b84:	4288      	cmp	r0, r1
 8019b86:	f080 80b2 	bcs.w	8019cee <tcp_input+0xb7a>
 8019b8a:	b283      	uxth	r3, r0
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8019b8c:	f8b8 2066 	ldrh.w	r2, [r8, #102]	; 0x66
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8019b90:	f8a8 3048 	strh.w	r3, [r8, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8019b94:	b932      	cbnz	r2, 8019ba4 <tcp_input+0xa30>
 8019b96:	4baa      	ldr	r3, [pc, #680]	; (8019e40 <tcp_input+0xccc>)
 8019b98:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8019b9c:	49a9      	ldr	r1, [pc, #676]	; (8019e44 <tcp_input+0xcd0>)
 8019b9e:	48aa      	ldr	r0, [pc, #680]	; (8019e48 <tcp_input+0xcd4>)
 8019ba0:	f006 ff12 	bl	80209c8 <iprintf>
        --pcb->snd_queuelen;
 8019ba4:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
        rseg = pcb->unacked;
 8019ba8:	f8d8 4070 	ldr.w	r4, [r8, #112]	; 0x70
        --pcb->snd_queuelen;
 8019bac:	3b01      	subs	r3, #1
 8019bae:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
        if (rseg == NULL) {
 8019bb2:	2c00      	cmp	r4, #0
 8019bb4:	f000 80a4 	beq.w	8019d00 <tcp_input+0xb8c>
          pcb->unacked = rseg->next;
 8019bb8:	6823      	ldr	r3, [r4, #0]
 8019bba:	f8c8 3070 	str.w	r3, [r8, #112]	; 0x70
        tcp_seg_free(rseg);
 8019bbe:	4620      	mov	r0, r4
 8019bc0:	f7fd fbde 	bl	8017380 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 8019bc4:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8019bc8:	2b00      	cmp	r3, #0
 8019bca:	f000 8094 	beq.w	8019cf6 <tcp_input+0xb82>
          pcb->rtime = 0;
 8019bce:	2300      	movs	r3, #0
 8019bd0:	f8a8 3030 	strh.w	r3, [r8, #48]	; 0x30
          pcb->nrtx = 0;
 8019bd4:	f888 3042 	strb.w	r3, [r8, #66]	; 0x42
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8019bd8:	f8d8 3088 	ldr.w	r3, [r8, #136]	; 0x88
 8019bdc:	b13b      	cbz	r3, 8019bee <tcp_input+0xa7a>
 8019bde:	2200      	movs	r2, #0
 8019be0:	4641      	mov	r1, r8
 8019be2:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8019be6:	4798      	blx	r3
        if (err == ERR_ABRT) {
 8019be8:	300d      	adds	r0, #13
 8019bea:	f43f ac3b 	beq.w	8019464 <tcp_input+0x2f0>
        tcp_ack_now(pcb);
 8019bee:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 8019bf2:	e5e9      	b.n	80197c8 <tcp_input+0x654>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019bf4:	4b90      	ldr	r3, [pc, #576]	; (8019e38 <tcp_input+0xcc4>)
 8019bf6:	4422      	add	r2, r4
 8019bf8:	9001      	str	r0, [sp, #4]
 8019bfa:	4640      	mov	r0, r8
 8019bfc:	9102      	str	r1, [sp, #8]
 8019bfe:	f8cd 9000 	str.w	r9, [sp]
 8019c02:	6819      	ldr	r1, [r3, #0]
 8019c04:	4b91      	ldr	r3, [pc, #580]	; (8019e4c <tcp_input+0xcd8>)
 8019c06:	f001 f8e1 	bl	801adcc <tcp_rst>
        pbuf_free(p);
 8019c0a:	4628      	mov	r0, r5
 8019c0c:	f7ff bad0 	b.w	80191b0 <tcp_input+0x3c>
    tcp_ack_now(pcb);
 8019c10:	f8b8 301a 	ldrh.w	r3, [r8, #26]
    tcp_output(pcb);
 8019c14:	4640      	mov	r0, r8
    tcp_ack_now(pcb);
 8019c16:	f043 0302 	orr.w	r3, r3, #2
 8019c1a:	f8a8 301a 	strh.w	r3, [r8, #26]
    tcp_output(pcb);
 8019c1e:	f001 f951 	bl	801aec4 <tcp_output>
        pbuf_free(p);
 8019c22:	4628      	mov	r0, r5
 8019c24:	f7ff bac4 	b.w	80191b0 <tcp_input+0x3c>
      tcp_abandon(npcb, 0);
 8019c28:	4648      	mov	r0, r9
 8019c2a:	4641      	mov	r1, r8
 8019c2c:	f7fd ffa4 	bl	8017b78 <tcp_abandon>
        pbuf_free(p);
 8019c30:	4628      	mov	r0, r5
 8019c32:	f7ff babd 	b.w	80191b0 <tcp_input+0x3c>
      TCP_STATS_INC(tcp.memerr);
 8019c36:	f8b4 309c 	ldrh.w	r3, [r4, #156]	; 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8019c3a:	f8da 6018 	ldr.w	r6, [sl, #24]
      TCP_STATS_INC(tcp.memerr);
 8019c3e:	3301      	adds	r3, #1
 8019c40:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8019c44:	2e00      	cmp	r6, #0
 8019c46:	f43f aca8 	beq.w	801959a <tcp_input+0x426>
 8019c4a:	4601      	mov	r1, r0
 8019c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8019c50:	f8da 0010 	ldr.w	r0, [sl, #16]
 8019c54:	47b0      	blx	r6
        pbuf_free(p);
 8019c56:	4628      	mov	r0, r5
 8019c58:	f7ff baaa 	b.w	80191b0 <tcp_input+0x3c>
  } else if (flags & TCP_FIN) {
 8019c5c:	07d8      	lsls	r0, r3, #31
 8019c5e:	f57f ac99 	bpl.w	8019594 <tcp_input+0x420>
    pcb->tmr = tcp_ticks;
 8019c62:	4b7b      	ldr	r3, [pc, #492]	; (8019e50 <tcp_input+0xcdc>)
 8019c64:	681b      	ldr	r3, [r3, #0]
 8019c66:	f8c8 3020 	str.w	r3, [r8, #32]
 8019c6a:	e493      	b.n	8019594 <tcp_input+0x420>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8019c6c:	4b74      	ldr	r3, [pc, #464]	; (8019e40 <tcp_input+0xccc>)
 8019c6e:	f240 1215 	movw	r2, #277	; 0x115
 8019c72:	4978      	ldr	r1, [pc, #480]	; (8019e54 <tcp_input+0xce0>)
 8019c74:	4874      	ldr	r0, [pc, #464]	; (8019e48 <tcp_input+0xcd4>)
 8019c76:	f006 fea7 	bl	80209c8 <iprintf>
 8019c7a:	f7ff bbb7 	b.w	80193ec <tcp_input+0x278>
        TCP_STATS_INC(tcp.cachehit);
 8019c7e:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 8019c82:	3201      	adds	r2, #1
 8019c84:	f8a4 20a6 	strh.w	r2, [r4, #166]	; 0xa6
 8019c88:	f7ff bbad 	b.w	80193e6 <tcp_input+0x272>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8019c8c:	4b6c      	ldr	r3, [pc, #432]	; (8019e40 <tcp_input+0xccc>)
 8019c8e:	f240 120d 	movw	r2, #269	; 0x10d
 8019c92:	4971      	ldr	r1, [pc, #452]	; (8019e58 <tcp_input+0xce4>)
 8019c94:	486c      	ldr	r0, [pc, #432]	; (8019e48 <tcp_input+0xcd4>)
 8019c96:	f006 fe97 	bl	80209c8 <iprintf>
 8019c9a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019c9e:	f7ff bb95 	b.w	80193cc <tcp_input+0x258>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8019ca2:	4623      	mov	r3, r4
 8019ca4:	4620      	mov	r0, r4
 8019ca6:	4641      	mov	r1, r8
 8019ca8:	f7fe fa3a 	bl	8018120 <tcp_recv_null>
 8019cac:	e5e8      	b.n	8019880 <tcp_input+0x70c>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8019cae:	f8b8 3028 	ldrh.w	r3, [r8, #40]	; 0x28
 8019cb2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8019cb6:	d002      	beq.n	8019cbe <tcp_input+0xb4a>
              pcb->rcv_wnd++;
 8019cb8:	3301      	adds	r3, #1
 8019cba:	f8a8 3028 	strh.w	r3, [r8, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 8019cbe:	f8d8 4084 	ldr.w	r4, [r8, #132]	; 0x84
 8019cc2:	2c00      	cmp	r4, #0
 8019cc4:	f43f adf1 	beq.w	80198aa <tcp_input+0x736>
 8019cc8:	2300      	movs	r3, #0
 8019cca:	4641      	mov	r1, r8
 8019ccc:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8019cd0:	461a      	mov	r2, r3
 8019cd2:	47a0      	blx	r4
            if (err == ERR_ABRT) {
 8019cd4:	300d      	adds	r0, #13
 8019cd6:	f47f ade8 	bne.w	80198aa <tcp_input+0x736>
aborted:
 8019cda:	f7ff bbc3 	b.w	8019464 <tcp_input+0x2f0>
            pbuf_free(recv_data);
 8019cde:	4610      	mov	r0, r2
 8019ce0:	f7fc fd1a 	bl	8016718 <pbuf_free>
            tcp_abort(pcb);
 8019ce4:	4640      	mov	r0, r8
 8019ce6:	f7fd ffe7 	bl	8017cb8 <tcp_abort>
            goto aborted;
 8019cea:	f7ff bbbb 	b.w	8019464 <tcp_input+0x2f0>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8019cee:	429a      	cmp	r2, r3
 8019cf0:	bf88      	it	hi
 8019cf2:	b293      	uxthhi	r3, r2
 8019cf4:	e74a      	b.n	8019b8c <tcp_input+0xa18>
          pcb->rtime = -1;
 8019cf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019cfa:	f8a8 3030 	strh.w	r3, [r8, #48]	; 0x30
 8019cfe:	e76b      	b.n	8019bd8 <tcp_input+0xa64>
          rseg = pcb->unsent;
 8019d00:	f8d8 406c 	ldr.w	r4, [r8, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8019d04:	b934      	cbnz	r4, 8019d14 <tcp_input+0xba0>
 8019d06:	4b4e      	ldr	r3, [pc, #312]	; (8019e40 <tcp_input+0xccc>)
 8019d08:	f44f 725d 	mov.w	r2, #884	; 0x374
 8019d0c:	4953      	ldr	r1, [pc, #332]	; (8019e5c <tcp_input+0xce8>)
 8019d0e:	484e      	ldr	r0, [pc, #312]	; (8019e48 <tcp_input+0xcd4>)
 8019d10:	f006 fe5a 	bl	80209c8 <iprintf>
          pcb->unsent = rseg->next;
 8019d14:	6823      	ldr	r3, [r4, #0]
 8019d16:	f8c8 306c 	str.w	r3, [r8, #108]	; 0x6c
 8019d1a:	e750      	b.n	8019bbe <tcp_input+0xa4a>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8019d1c:	0798      	lsls	r0, r3, #30
 8019d1e:	f57f ac64 	bpl.w	80195ea <tcp_input+0x476>
 8019d22:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8019d26:	4a45      	ldr	r2, [pc, #276]	; (8019e3c <tcp_input+0xcc8>)
 8019d28:	3b01      	subs	r3, #1
 8019d2a:	6812      	ldr	r2, [r2, #0]
 8019d2c:	4293      	cmp	r3, r2
 8019d2e:	f47f ac5c 	bne.w	80195ea <tcp_input+0x476>
        tcp_rexmit(pcb);
 8019d32:	4640      	mov	r0, r8
 8019d34:	f000 ffcc 	bl	801acd0 <tcp_rexmit>
 8019d38:	e457      	b.n	80195ea <tcp_input+0x476>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8019d3a:	2900      	cmp	r1, #0
 8019d3c:	f47f aeb2 	bne.w	8019aa4 <tcp_input+0x930>
 8019d40:	4b3f      	ldr	r3, [pc, #252]	; (8019e40 <tcp_input+0xccc>)
 8019d42:	f44f 724e 	mov.w	r2, #824	; 0x338
 8019d46:	4946      	ldr	r1, [pc, #280]	; (8019e60 <tcp_input+0xcec>)
 8019d48:	483f      	ldr	r0, [pc, #252]	; (8019e48 <tcp_input+0xcd4>)
 8019d4a:	f006 fe3d 	bl	80209c8 <iprintf>
 8019d4e:	e6a9      	b.n	8019aa4 <tcp_input+0x930>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8019d50:	06db      	lsls	r3, r3, #27
 8019d52:	f57f ac4a 	bpl.w	80195ea <tcp_input+0x476>
 8019d56:	4b38      	ldr	r3, [pc, #224]	; (8019e38 <tcp_input+0xcc4>)
 8019d58:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
 8019d5c:	681b      	ldr	r3, [r3, #0]
 8019d5e:	429a      	cmp	r2, r3
 8019d60:	f47f ac43 	bne.w	80195ea <tcp_input+0x476>
 8019d64:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 8019d68:	2b00      	cmp	r3, #0
 8019d6a:	f47f ac3e 	bne.w	80195ea <tcp_input+0x476>
        pcb->state = FIN_WAIT_2;
 8019d6e:	2306      	movs	r3, #6
 8019d70:	f888 3014 	strb.w	r3, [r8, #20]
 8019d74:	e439      	b.n	80195ea <tcp_input+0x476>
          pcb->state = ESTABLISHED;
 8019d76:	2204      	movs	r2, #4
          if (pcb->listener == NULL) {
 8019d78:	f8d8 307c 	ldr.w	r3, [r8, #124]	; 0x7c
          pcb->state = ESTABLISHED;
 8019d7c:	f888 2014 	strb.w	r2, [r8, #20]
          if (pcb->listener == NULL) {
 8019d80:	2b00      	cmp	r3, #0
 8019d82:	d0af      	beq.n	8019ce4 <tcp_input+0xb70>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8019d84:	699b      	ldr	r3, [r3, #24]
 8019d86:	2b00      	cmp	r3, #0
 8019d88:	d074      	beq.n	8019e74 <tcp_input+0xd00>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8019d8a:	2200      	movs	r2, #0
 8019d8c:	4641      	mov	r1, r8
 8019d8e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8019d92:	4798      	blx	r3
          if (err != ERR_OK) {
 8019d94:	2800      	cmp	r0, #0
 8019d96:	d033      	beq.n	8019e00 <tcp_input+0xc8c>
            if (err != ERR_ABRT) {
 8019d98:	300d      	adds	r0, #13
 8019d9a:	f43f ab63 	beq.w	8019464 <tcp_input+0x2f0>
 8019d9e:	e7a1      	b.n	8019ce4 <tcp_input+0xb70>
        TCP_RMV_ACTIVE(pcb);
 8019da0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019da4:	4a2f      	ldr	r2, [pc, #188]	; (8019e64 <tcp_input+0xcf0>)
 8019da6:	6013      	str	r3, [r2, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8019da8:	4b2f      	ldr	r3, [pc, #188]	; (8019e68 <tcp_input+0xcf4>)
        pcb->state = TIME_WAIT;
 8019daa:	200a      	movs	r0, #10
        TCP_RMV_ACTIVE(pcb);
 8019dac:	2101      	movs	r1, #1
        TCP_REG(&tcp_tw_pcbs, pcb);
 8019dae:	681a      	ldr	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8019db0:	f888 0014 	strb.w	r0, [r8, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8019db4:	f8c8 200c 	str.w	r2, [r8, #12]
        TCP_RMV_ACTIVE(pcb);
 8019db8:	4a2c      	ldr	r2, [pc, #176]	; (8019e6c <tcp_input+0xcf8>)
        TCP_REG(&tcp_tw_pcbs, pcb);
 8019dba:	f8c3 8000 	str.w	r8, [r3]
        TCP_RMV_ACTIVE(pcb);
 8019dbe:	7011      	strb	r1, [r2, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8019dc0:	f001 fbb4 	bl	801b52c <tcp_timer_needed>
 8019dc4:	e411      	b.n	80195ea <tcp_input+0x476>
        TCP_RMV_ACTIVE(pcb);
 8019dc6:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8019dca:	60da      	str	r2, [r3, #12]
 8019dcc:	e7ec      	b.n	8019da8 <tcp_input+0xc34>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8019dce:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 8019dd2:	2b00      	cmp	r3, #0
 8019dd4:	f47f adfc 	bne.w	80199d0 <tcp_input+0x85c>
          tcp_ack_now(pcb);
 8019dd8:	f8b8 301a 	ldrh.w	r3, [r8, #26]
          tcp_pcb_purge(pcb);
 8019ddc:	4640      	mov	r0, r8
          tcp_ack_now(pcb);
 8019dde:	f043 0302 	orr.w	r3, r3, #2
 8019de2:	f8a8 301a 	strh.w	r3, [r8, #26]
          tcp_pcb_purge(pcb);
 8019de6:	f7fd fb9d 	bl	8017524 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8019dea:	4b1e      	ldr	r3, [pc, #120]	; (8019e64 <tcp_input+0xcf0>)
 8019dec:	681b      	ldr	r3, [r3, #0]
 8019dee:	4543      	cmp	r3, r8
 8019df0:	d0d6      	beq.n	8019da0 <tcp_input+0xc2c>
 8019df2:	2b00      	cmp	r3, #0
 8019df4:	d0d8      	beq.n	8019da8 <tcp_input+0xc34>
 8019df6:	68da      	ldr	r2, [r3, #12]
 8019df8:	4542      	cmp	r2, r8
 8019dfa:	d0e4      	beq.n	8019dc6 <tcp_input+0xc52>
 8019dfc:	4613      	mov	r3, r2
 8019dfe:	e7f8      	b.n	8019df2 <tcp_input+0xc7e>
          tcp_receive(pcb);
 8019e00:	4640      	mov	r0, r8
 8019e02:	f7fe fd0d 	bl	8018820 <tcp_receive>
          if (recv_acked != 0) {
 8019e06:	4a1a      	ldr	r2, [pc, #104]	; (8019e70 <tcp_input+0xcfc>)
 8019e08:	8813      	ldrh	r3, [r2, #0]
 8019e0a:	b10b      	cbz	r3, 8019e10 <tcp_input+0xc9c>
            recv_acked--;
 8019e0c:	3b01      	subs	r3, #1
 8019e0e:	8013      	strh	r3, [r2, #0]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8019e10:	f8b8 2032 	ldrh.w	r2, [r8, #50]	; 0x32
 8019e14:	f241 131c 	movw	r3, #4380	; 0x111c
 8019e18:	0051      	lsls	r1, r2, #1
 8019e1a:	0092      	lsls	r2, r2, #2
 8019e1c:	4299      	cmp	r1, r3
 8019e1e:	4608      	mov	r0, r1
 8019e20:	bf38      	it	cc
 8019e22:	4618      	movcc	r0, r3
 8019e24:	4282      	cmp	r2, r0
 8019e26:	d233      	bcs.n	8019e90 <tcp_input+0xd1c>
 8019e28:	b293      	uxth	r3, r2
          if (recv_flags & TF_GOT_FIN) {
 8019e2a:	783a      	ldrb	r2, [r7, #0]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8019e2c:	f8a8 3048 	strh.w	r3, [r8, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 8019e30:	0694      	lsls	r4, r2, #26
 8019e32:	f57f abda 	bpl.w	80195ea <tcp_input+0x476>
 8019e36:	e5dc      	b.n	80199f2 <tcp_input+0x87e>
 8019e38:	200223e8 	.word	0x200223e8
 8019e3c:	2002240c 	.word	0x2002240c
 8019e40:	0803e35c 	.word	0x0803e35c
 8019e44:	0803e2a4 	.word	0x0803e2a4
 8019e48:	0802697c 	.word	0x0802697c
 8019e4c:	20026a80 	.word	0x20026a80
 8019e50:	20036274 	.word	0x20036274
 8019e54:	0803e228 	.word	0x0803e228
 8019e58:	0803e1fc 	.word	0x0803e1fc
 8019e5c:	0803e2bc 	.word	0x0803e2bc
 8019e60:	0803e284 	.word	0x0803e284
 8019e64:	20036270 	.word	0x20036270
 8019e68:	20036280 	.word	0x20036280
 8019e6c:	2003626c 	.word	0x2003626c
 8019e70:	20022400 	.word	0x20022400
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8019e74:	4b08      	ldr	r3, [pc, #32]	; (8019e98 <tcp_input+0xd24>)
 8019e76:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8019e7a:	4908      	ldr	r1, [pc, #32]	; (8019e9c <tcp_input+0xd28>)
 8019e7c:	4808      	ldr	r0, [pc, #32]	; (8019ea0 <tcp_input+0xd2c>)
 8019e7e:	f006 fda3 	bl	80209c8 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8019e82:	f8d8 307c 	ldr.w	r3, [r8, #124]	; 0x7c
 8019e86:	699b      	ldr	r3, [r3, #24]
 8019e88:	2b00      	cmp	r3, #0
 8019e8a:	f47f af7e 	bne.w	8019d8a <tcp_input+0xc16>
 8019e8e:	e729      	b.n	8019ce4 <tcp_input+0xb70>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8019e90:	4299      	cmp	r1, r3
 8019e92:	bf88      	it	hi
 8019e94:	b28b      	uxthhi	r3, r1
 8019e96:	e7c8      	b.n	8019e2a <tcp_input+0xcb6>
 8019e98:	0803e35c 	.word	0x0803e35c
 8019e9c:	0803e2d0 	.word	0x0803e2d0
 8019ea0:	0802697c 	.word	0x0802697c

08019ea4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 8019ea4:	4a02      	ldr	r2, [pc, #8]	; (8019eb0 <tcp_trigger_input_pcb_close+0xc>)
 8019ea6:	7813      	ldrb	r3, [r2, #0]
 8019ea8:	f043 0310 	orr.w	r3, r3, #16
 8019eac:	7013      	strb	r3, [r2, #0]
}
 8019eae:	4770      	bx	lr
 8019eb0:	20022408 	.word	0x20022408

08019eb4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8019eb4:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8019eb6:	4604      	mov	r4, r0
 8019eb8:	b130      	cbz	r0, 8019ec8 <tcp_output_segment_busy+0x14>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8019eba:	6863      	ldr	r3, [r4, #4]
 8019ebc:	7b98      	ldrb	r0, [r3, #14]
    /* other reference found */
    return 1;
  }
  /* no other references found */
  return 0;
}
 8019ebe:	f110 30ff 	adds.w	r0, r0, #4294967295
 8019ec2:	bf18      	it	ne
 8019ec4:	2001      	movne	r0, #1
 8019ec6:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8019ec8:	4b03      	ldr	r3, [pc, #12]	; (8019ed8 <tcp_output_segment_busy+0x24>)
 8019eca:	f240 529a 	movw	r2, #1434	; 0x59a
 8019ece:	4903      	ldr	r1, [pc, #12]	; (8019edc <tcp_output_segment_busy+0x28>)
 8019ed0:	4803      	ldr	r0, [pc, #12]	; (8019ee0 <tcp_output_segment_busy+0x2c>)
 8019ed2:	f006 fd79 	bl	80209c8 <iprintf>
 8019ed6:	e7f0      	b.n	8019eba <tcp_output_segment_busy+0x6>
 8019ed8:	0803e780 	.word	0x0803e780
 8019edc:	0803e7b4 	.word	0x0803e7b4
 8019ee0:	0802697c 	.word	0x0802697c

08019ee4 <tcp_pbuf_prealloc>:
{
 8019ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019ee8:	9c08      	ldr	r4, [sp, #32]
 8019eea:	4607      	mov	r7, r0
 8019eec:	460d      	mov	r5, r1
 8019eee:	4690      	mov	r8, r2
 8019ef0:	461e      	mov	r6, r3
 8019ef2:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 8019ef6:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8019efa:	2c00      	cmp	r4, #0
 8019efc:	d034      	beq.n	8019f68 <tcp_pbuf_prealloc+0x84>
  if (length < max_length) {
 8019efe:	4545      	cmp	r5, r8
 8019f00:	d20f      	bcs.n	8019f22 <tcp_pbuf_prealloc+0x3e>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8019f02:	f019 0f02 	tst.w	r9, #2
 8019f06:	d009      	beq.n	8019f1c <tcp_pbuf_prealloc+0x38>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8019f08:	f205 211b 	addw	r1, r5, #539	; 0x21b
 8019f0c:	f021 0103 	bic.w	r1, r1, #3
 8019f10:	4541      	cmp	r1, r8
 8019f12:	460a      	mov	r2, r1
 8019f14:	bf28      	it	cs
 8019f16:	4642      	movcs	r2, r8
 8019f18:	b291      	uxth	r1, r2
 8019f1a:	e003      	b.n	8019f24 <tcp_pbuf_prealloc+0x40>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8019f1c:	8b63      	ldrh	r3, [r4, #26]
 8019f1e:	065b      	lsls	r3, r3, #25
 8019f20:	d518      	bpl.n	8019f54 <tcp_pbuf_prealloc+0x70>
 8019f22:	4629      	mov	r1, r5
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8019f24:	4638      	mov	r0, r7
 8019f26:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019f2a:	f7fc fc63 	bl	80167f4 <pbuf_alloc>
  if (p == NULL) {
 8019f2e:	4604      	mov	r4, r0
 8019f30:	b168      	cbz	r0, 8019f4e <tcp_pbuf_prealloc+0x6a>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8019f32:	6803      	ldr	r3, [r0, #0]
 8019f34:	b133      	cbz	r3, 8019f44 <tcp_pbuf_prealloc+0x60>
 8019f36:	4b10      	ldr	r3, [pc, #64]	; (8019f78 <tcp_pbuf_prealloc+0x94>)
 8019f38:	f240 120b 	movw	r2, #267	; 0x10b
 8019f3c:	490f      	ldr	r1, [pc, #60]	; (8019f7c <tcp_pbuf_prealloc+0x98>)
 8019f3e:	4810      	ldr	r0, [pc, #64]	; (8019f80 <tcp_pbuf_prealloc+0x9c>)
 8019f40:	f006 fd42 	bl	80209c8 <iprintf>
  *oversize = p->len - length;
 8019f44:	8963      	ldrh	r3, [r4, #10]
 8019f46:	1b5b      	subs	r3, r3, r5
 8019f48:	8033      	strh	r3, [r6, #0]
  p->len = p->tot_len = length;
 8019f4a:	8125      	strh	r5, [r4, #8]
 8019f4c:	8165      	strh	r5, [r4, #10]
}
 8019f4e:	4620      	mov	r0, r4
 8019f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        (!(pcb->flags & TF_NODELAY) &&
 8019f54:	f1ba 0f00 	cmp.w	sl, #0
 8019f58:	d0d6      	beq.n	8019f08 <tcp_pbuf_prealloc+0x24>
         (!first_seg ||
 8019f5a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8019f5c:	2b00      	cmp	r3, #0
 8019f5e:	d1d3      	bne.n	8019f08 <tcp_pbuf_prealloc+0x24>
          pcb->unsent != NULL ||
 8019f60:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8019f62:	2b00      	cmp	r3, #0
 8019f64:	d1d0      	bne.n	8019f08 <tcp_pbuf_prealloc+0x24>
 8019f66:	e7dc      	b.n	8019f22 <tcp_pbuf_prealloc+0x3e>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8019f68:	4b03      	ldr	r3, [pc, #12]	; (8019f78 <tcp_pbuf_prealloc+0x94>)
 8019f6a:	22e9      	movs	r2, #233	; 0xe9
 8019f6c:	4905      	ldr	r1, [pc, #20]	; (8019f84 <tcp_pbuf_prealloc+0xa0>)
 8019f6e:	4804      	ldr	r0, [pc, #16]	; (8019f80 <tcp_pbuf_prealloc+0x9c>)
 8019f70:	f006 fd2a 	bl	80209c8 <iprintf>
 8019f74:	e7c3      	b.n	8019efe <tcp_pbuf_prealloc+0x1a>
 8019f76:	bf00      	nop
 8019f78:	0803e780 	.word	0x0803e780
 8019f7c:	0803e7fc 	.word	0x0803e7fc
 8019f80:	0802697c 	.word	0x0802697c
 8019f84:	0803e7dc 	.word	0x0803e7dc

08019f88 <tcp_create_segment>:
{
 8019f88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f8c:	460e      	mov	r6, r1
 8019f8e:	4617      	mov	r7, r2
 8019f90:	4699      	mov	r9, r3
 8019f92:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8019f96:	4680      	mov	r8, r0
 8019f98:	2800      	cmp	r0, #0
 8019f9a:	d052      	beq.n	801a042 <tcp_create_segment+0xba>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8019f9c:	2e00      	cmp	r6, #0
 8019f9e:	d058      	beq.n	801a052 <tcp_create_segment+0xca>
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8019fa0:	2004      	movs	r0, #4
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8019fa2:	ea4f 058a 	mov.w	r5, sl, lsl #2
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8019fa6:	22a8      	movs	r2, #168	; 0xa8
 8019fa8:	4935      	ldr	r1, [pc, #212]	; (801a080 <tcp_create_segment+0xf8>)
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8019faa:	4005      	ands	r5, r0
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8019fac:	f7fc f8b6 	bl	801611c <memp_malloc_fn>
 8019fb0:	4604      	mov	r4, r0
 8019fb2:	2800      	cmp	r0, #0
 8019fb4:	d05f      	beq.n	801a076 <tcp_create_segment+0xee>
  seg->flags = optflags;
 8019fb6:	f880 a00a 	strb.w	sl, [r0, #10]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8019fba:	fa1f fa85 	uxth.w	sl, r5
 8019fbe:	8933      	ldrh	r3, [r6, #8]
  seg->next = NULL;
 8019fc0:	2200      	movs	r2, #0
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8019fc2:	4553      	cmp	r3, sl
  seg->next = NULL;
 8019fc4:	e9c0 2600 	strd	r2, r6, [r0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8019fc8:	d333      	bcc.n	801a032 <tcp_create_segment+0xaa>
  seg->len = p->tot_len - optlen;
 8019fca:	eba3 030a 	sub.w	r3, r3, sl
  if (pbuf_add_header(p, TCP_HLEN)) {
 8019fce:	4630      	mov	r0, r6
 8019fd0:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 8019fd2:	8123      	strh	r3, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 8019fd4:	f7fc fb60 	bl	8016698 <pbuf_add_header>
 8019fd8:	4606      	mov	r6, r0
 8019fda:	2800      	cmp	r0, #0
 8019fdc:	d140      	bne.n	801a060 <tcp_create_segment+0xd8>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8019fde:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8019fe0:	08ad      	lsrs	r5, r5, #2
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8019fe2:	f8b8 0016 	ldrh.w	r0, [r8, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8019fe6:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8019fea:	3505      	adds	r5, #5
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8019fec:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8019ff0:	f7fa fd24 	bl	8014a3c <lwip_htons>
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8019ff4:	f8d4 b00c 	ldr.w	fp, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8019ff8:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8019ffc:	f8b8 0018 	ldrh.w	r0, [r8, #24]
 801a000:	f7fa fd1c 	bl	8014a3c <lwip_htons>
 801a004:	f8ab 0002 	strh.w	r0, [fp, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801a008:	4648      	mov	r0, r9
 801a00a:	f8d4 900c 	ldr.w	r9, [r4, #12]
 801a00e:	f7fa fd19 	bl	8014a44 <lwip_htonl>
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801a012:	f8d4 800c 	ldr.w	r8, [r4, #12]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801a016:	f8c9 0004 	str.w	r0, [r9, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801a01a:	ea47 3005 	orr.w	r0, r7, r5, lsl #12
 801a01e:	f7fa fd0d 	bl	8014a3c <lwip_htons>
  seg->tcphdr->urgp = 0;
 801a022:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801a024:	f8a8 000c 	strh.w	r0, [r8, #12]
  seg->tcphdr->urgp = 0;
 801a028:	749e      	strb	r6, [r3, #18]
 801a02a:	74de      	strb	r6, [r3, #19]
}
 801a02c:	4620      	mov	r0, r4
 801a02e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801a032:	4b13      	ldr	r3, [pc, #76]	; (801a080 <tcp_create_segment+0xf8>)
 801a034:	22b0      	movs	r2, #176	; 0xb0
 801a036:	4913      	ldr	r1, [pc, #76]	; (801a084 <tcp_create_segment+0xfc>)
 801a038:	4813      	ldr	r0, [pc, #76]	; (801a088 <tcp_create_segment+0x100>)
 801a03a:	f006 fcc5 	bl	80209c8 <iprintf>
 801a03e:	8933      	ldrh	r3, [r6, #8]
 801a040:	e7c3      	b.n	8019fca <tcp_create_segment+0x42>
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801a042:	4b0f      	ldr	r3, [pc, #60]	; (801a080 <tcp_create_segment+0xf8>)
 801a044:	22a3      	movs	r2, #163	; 0xa3
 801a046:	4911      	ldr	r1, [pc, #68]	; (801a08c <tcp_create_segment+0x104>)
 801a048:	480f      	ldr	r0, [pc, #60]	; (801a088 <tcp_create_segment+0x100>)
 801a04a:	f006 fcbd 	bl	80209c8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801a04e:	2e00      	cmp	r6, #0
 801a050:	d1a6      	bne.n	8019fa0 <tcp_create_segment+0x18>
 801a052:	4b0b      	ldr	r3, [pc, #44]	; (801a080 <tcp_create_segment+0xf8>)
 801a054:	22a4      	movs	r2, #164	; 0xa4
 801a056:	490e      	ldr	r1, [pc, #56]	; (801a090 <tcp_create_segment+0x108>)
 801a058:	480b      	ldr	r0, [pc, #44]	; (801a088 <tcp_create_segment+0x100>)
 801a05a:	f006 fcb5 	bl	80209c8 <iprintf>
 801a05e:	e79f      	b.n	8019fa0 <tcp_create_segment+0x18>
    TCP_STATS_INC(tcp.err);
 801a060:	4a0c      	ldr	r2, [pc, #48]	; (801a094 <tcp_create_segment+0x10c>)
    tcp_seg_free(seg);
 801a062:	4620      	mov	r0, r4
    return NULL;
 801a064:	2400      	movs	r4, #0
    TCP_STATS_INC(tcp.err);
 801a066:	f8b2 30a4 	ldrh.w	r3, [r2, #164]	; 0xa4
 801a06a:	3301      	adds	r3, #1
 801a06c:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
    tcp_seg_free(seg);
 801a070:	f7fd f986 	bl	8017380 <tcp_seg_free>
    return NULL;
 801a074:	e7da      	b.n	801a02c <tcp_create_segment+0xa4>
    pbuf_free(p);
 801a076:	4630      	mov	r0, r6
 801a078:	f7fc fb4e 	bl	8016718 <pbuf_free>
    return NULL;
 801a07c:	e7d6      	b.n	801a02c <tcp_create_segment+0xa4>
 801a07e:	bf00      	nop
 801a080:	0803e780 	.word	0x0803e780
 801a084:	0803e514 	.word	0x0803e514
 801a088:	0802697c 	.word	0x0802697c
 801a08c:	0803e4d0 	.word	0x0803e4d0
 801a090:	0803e4f0 	.word	0x0803e4f0
 801a094:	20036164 	.word	0x20036164

0801a098 <tcp_output_alloc_header_common.constprop.4>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801a098:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 801a09a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801a09e:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 801a0a0:	4680      	mov	r8, r0
 801a0a2:	4691      	mov	r9, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801a0a4:	2022      	movs	r0, #34	; 0x22
 801a0a6:	f44f 7220 	mov.w	r2, #640	; 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 801a0aa:	469b      	mov	fp, r3
 801a0ac:	f8bd a028 	ldrh.w	sl, [sp, #40]	; 0x28
 801a0b0:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 801a0b4:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801a0b8:	f7fc fb9c 	bl	80167f4 <pbuf_alloc>
  if (p != NULL) {
 801a0bc:	4605      	mov	r5, r0
 801a0be:	b1f8      	cbz	r0, 801a100 <tcp_output_alloc_header_common.constprop.4+0x68>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801a0c0:	8943      	ldrh	r3, [r0, #10]
 801a0c2:	2b13      	cmp	r3, #19
 801a0c4:	d91f      	bls.n	801a106 <tcp_output_alloc_header_common.constprop.4+0x6e>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801a0c6:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 801a0c8:	4658      	mov	r0, fp
 801a0ca:	f7fa fcb7 	bl	8014a3c <lwip_htons>
 801a0ce:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801a0d0:	4650      	mov	r0, sl
 801a0d2:	f7fa fcb3 	bl	8014a3c <lwip_htons>
    tcphdr->seqno = seqno_be;
 801a0d6:	f8c4 9004 	str.w	r9, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 801a0da:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 801a0dc:	4640      	mov	r0, r8
 801a0de:	f7fa fcb1 	bl	8014a44 <lwip_htonl>
 801a0e2:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801a0e4:	f447 40a0 	orr.w	r0, r7, #20480	; 0x5000
 801a0e8:	f7fa fca8 	bl	8014a3c <lwip_htons>
 801a0ec:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801a0ee:	4630      	mov	r0, r6
 801a0f0:	f7fa fca4 	bl	8014a3c <lwip_htons>
    tcphdr->chksum = 0;
 801a0f4:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 801a0f6:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 801a0f8:	7423      	strb	r3, [r4, #16]
 801a0fa:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 801a0fc:	74a3      	strb	r3, [r4, #18]
 801a0fe:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 801a100:	4628      	mov	r0, r5
 801a102:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801a106:	4b04      	ldr	r3, [pc, #16]	; (801a118 <tcp_output_alloc_header_common.constprop.4+0x80>)
 801a108:	f240 7224 	movw	r2, #1828	; 0x724
 801a10c:	4903      	ldr	r1, [pc, #12]	; (801a11c <tcp_output_alloc_header_common.constprop.4+0x84>)
 801a10e:	4804      	ldr	r0, [pc, #16]	; (801a120 <tcp_output_alloc_header_common.constprop.4+0x88>)
 801a110:	f006 fc5a 	bl	80209c8 <iprintf>
 801a114:	e7d7      	b.n	801a0c6 <tcp_output_alloc_header_common.constprop.4+0x2e>
 801a116:	bf00      	nop
 801a118:	0803e780 	.word	0x0803e780
 801a11c:	0803e6fc 	.word	0x0803e6fc
 801a120:	0802697c 	.word	0x0802697c

0801a124 <tcp_output_alloc_header.constprop.3>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 801a124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a128:	460f      	mov	r7, r1
 801a12a:	b084      	sub	sp, #16
 801a12c:	4690      	mov	r8, r2
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801a12e:	4604      	mov	r4, r0
 801a130:	b198      	cbz	r0, 801a15a <tcp_output_alloc_header.constprop.3+0x36>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801a132:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
 801a134:	2510      	movs	r5, #16
 801a136:	8ae3      	ldrh	r3, [r4, #22]
 801a138:	4642      	mov	r2, r8
 801a13a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801a13c:	4639      	mov	r1, r7
 801a13e:	e9cd 5601 	strd	r5, r6, [sp, #4]
 801a142:	8b25      	ldrh	r5, [r4, #24]
 801a144:	9500      	str	r5, [sp, #0]
 801a146:	f7ff ffa7 	bl	801a098 <tcp_output_alloc_header_common.constprop.4>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801a14a:	b118      	cbz	r0, 801a154 <tcp_output_alloc_header.constprop.3+0x30>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801a14c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 801a14e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a150:	4413      	add	r3, r2
 801a152:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  return p;
}
 801a154:	b004      	add	sp, #16
 801a156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801a15a:	4b04      	ldr	r3, [pc, #16]	; (801a16c <tcp_output_alloc_header.constprop.3+0x48>)
 801a15c:	f240 7242 	movw	r2, #1858	; 0x742
 801a160:	4903      	ldr	r1, [pc, #12]	; (801a170 <tcp_output_alloc_header.constprop.3+0x4c>)
 801a162:	4804      	ldr	r0, [pc, #16]	; (801a174 <tcp_output_alloc_header.constprop.3+0x50>)
 801a164:	f006 fc30 	bl	80209c8 <iprintf>
 801a168:	e7e3      	b.n	801a132 <tcp_output_alloc_header.constprop.3+0xe>
 801a16a:	bf00      	nop
 801a16c:	0803e780 	.word	0x0803e780
 801a170:	0803e6d4 	.word	0x0803e6d4
 801a174:	0802697c 	.word	0x0802697c

0801a178 <tcp_output_fill_options.isra.0.constprop.5>:
{
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801a178:	b100      	cbz	r0, 801a17c <tcp_output_fill_options.isra.0.constprop.5+0x4>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801a17a:	4770      	bx	lr
  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801a17c:	4b03      	ldr	r3, [pc, #12]	; (801a18c <tcp_output_fill_options.isra.0.constprop.5+0x14>)
 801a17e:	f240 7256 	movw	r2, #1878	; 0x756
 801a182:	4903      	ldr	r1, [pc, #12]	; (801a190 <tcp_output_fill_options.isra.0.constprop.5+0x18>)
 801a184:	4803      	ldr	r0, [pc, #12]	; (801a194 <tcp_output_fill_options.isra.0.constprop.5+0x1c>)
 801a186:	f006 bc1f 	b.w	80209c8 <iprintf>
 801a18a:	bf00      	nop
 801a18c:	0803e780 	.word	0x0803e780
 801a190:	0803e758 	.word	0x0803e758
 801a194:	0802697c 	.word	0x0802697c

0801a198 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801a198:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a19c:	4605      	mov	r5, r0
 801a19e:	b085      	sub	sp, #20
 801a1a0:	4690      	mov	r8, r2
 801a1a2:	461e      	mov	r6, r3
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801a1a4:	460c      	mov	r4, r1
 801a1a6:	2900      	cmp	r1, #0
 801a1a8:	d03d      	beq.n	801a226 <tcp_output_control_segment+0x8e>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801a1aa:	2d00      	cmp	r5, #0
 801a1ac:	d044      	beq.n	801a238 <tcp_output_control_segment+0xa0>
 801a1ae:	7a28      	ldrb	r0, [r5, #8]
 801a1b0:	bb58      	cbnz	r0, 801a20a <tcp_output_control_segment+0x72>
    return ip_route(src, dst);
 801a1b2:	4630      	mov	r0, r6
 801a1b4:	f003 ff82 	bl	801e0bc <ip4_route>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 801a1b8:	4607      	mov	r7, r0
 801a1ba:	b358      	cbz	r0, 801a214 <tcp_output_control_segment+0x7c>
    err = ERR_RTE;
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 801a1bc:	f8d4 9004 	ldr.w	r9, [r4, #4]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801a1c0:	4643      	mov	r3, r8
 801a1c2:	8922      	ldrh	r2, [r4, #8]
 801a1c4:	2106      	movs	r1, #6
 801a1c6:	9600      	str	r6, [sp, #0]
 801a1c8:	4620      	mov	r0, r4
 801a1ca:	f7fb f9f3 	bl	80155b4 <ip_chksum_pseudo>
 801a1ce:	f8a9 0010 	strh.w	r0, [r9, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801a1d2:	7aeb      	ldrb	r3, [r5, #11]
      tos = pcb->tos;
 801a1d4:	7aad      	ldrb	r5, [r5, #10]
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
 801a1d6:	f8df c094 	ldr.w	ip, [pc, #148]	; 801a26c <tcp_output_control_segment+0xd4>
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801a1da:	f04f 0e06 	mov.w	lr, #6
 801a1de:	9500      	str	r5, [sp, #0]
 801a1e0:	4632      	mov	r2, r6
    TCP_STATS_INC(tcp.xmit);
 801a1e2:	f8bc 0090 	ldrh.w	r0, [ip, #144]	; 0x90
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801a1e6:	4641      	mov	r1, r8
 801a1e8:	f8cd e004 	str.w	lr, [sp, #4]
    TCP_STATS_INC(tcp.xmit);
 801a1ec:	1c45      	adds	r5, r0, #1
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801a1ee:	9702      	str	r7, [sp, #8]
 801a1f0:	4620      	mov	r0, r4
    TCP_STATS_INC(tcp.xmit);
 801a1f2:	f8ac 5090 	strh.w	r5, [ip, #144]	; 0x90
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801a1f6:	f004 f979 	bl	801e4ec <ip4_output_if>
 801a1fa:	4605      	mov	r5, r0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801a1fc:	4620      	mov	r0, r4
 801a1fe:	f7fc fa8b 	bl	8016718 <pbuf_free>
  return err;
}
 801a202:	4628      	mov	r0, r5
 801a204:	b005      	add	sp, #20
 801a206:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return netif_get_by_index(pcb->netif_idx);
 801a20a:	f7fc f99f 	bl	801654c <netif_get_by_index>
  if (netif == NULL) {
 801a20e:	4607      	mov	r7, r0
 801a210:	2800      	cmp	r0, #0
 801a212:	d1d3      	bne.n	801a1bc <tcp_output_control_segment+0x24>
    err = ERR_RTE;
 801a214:	f06f 0503 	mvn.w	r5, #3
  pbuf_free(p);
 801a218:	4620      	mov	r0, r4
 801a21a:	f7fc fa7d 	bl	8016718 <pbuf_free>
}
 801a21e:	4628      	mov	r0, r5
 801a220:	b005      	add	sp, #20
 801a222:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801a226:	4b0e      	ldr	r3, [pc, #56]	; (801a260 <tcp_output_control_segment+0xc8>)
 801a228:	f240 7287 	movw	r2, #1927	; 0x787
 801a22c:	490d      	ldr	r1, [pc, #52]	; (801a264 <tcp_output_control_segment+0xcc>)
 801a22e:	480e      	ldr	r0, [pc, #56]	; (801a268 <tcp_output_control_segment+0xd0>)
 801a230:	f006 fbca 	bl	80209c8 <iprintf>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801a234:	2d00      	cmp	r5, #0
 801a236:	d1ba      	bne.n	801a1ae <tcp_output_control_segment+0x16>
    return ip_route(src, dst);
 801a238:	4630      	mov	r0, r6
 801a23a:	f003 ff3f 	bl	801e0bc <ip4_route>
  if (netif == NULL) {
 801a23e:	4607      	mov	r7, r0
 801a240:	2800      	cmp	r0, #0
 801a242:	d0e7      	beq.n	801a214 <tcp_output_control_segment+0x7c>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 801a244:	f8d4 9004 	ldr.w	r9, [r4, #4]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801a248:	4643      	mov	r3, r8
 801a24a:	8922      	ldrh	r2, [r4, #8]
 801a24c:	2106      	movs	r1, #6
 801a24e:	9600      	str	r6, [sp, #0]
 801a250:	4620      	mov	r0, r4
 801a252:	f7fb f9af 	bl	80155b4 <ip_chksum_pseudo>
      ttl = TCP_TTL;
 801a256:	23ff      	movs	r3, #255	; 0xff
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801a258:	f8a9 0010 	strh.w	r0, [r9, #16]
 801a25c:	e7bb      	b.n	801a1d6 <tcp_output_control_segment+0x3e>
 801a25e:	bf00      	nop
 801a260:	0803e780 	.word	0x0803e780
 801a264:	0803e72c 	.word	0x0803e72c
 801a268:	0802697c 	.word	0x0802697c
 801a26c:	20036164 	.word	0x20036164

0801a270 <tcp_write>:
{
 801a270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t oversize = 0;
 801a274:	2400      	movs	r4, #0
{
 801a276:	b091      	sub	sp, #68	; 0x44
 801a278:	9105      	str	r1, [sp, #20]
 801a27a:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t oversize = 0;
 801a27c:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801a280:	2800      	cmp	r0, #0
 801a282:	f000 82f2 	beq.w	801a86a <tcp_write+0x5fa>
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801a286:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 801a28a:	4607      	mov	r7, r0
 801a28c:	f8b0 b032 	ldrh.w	fp, [r0, #50]	; 0x32
 801a290:	085b      	lsrs	r3, r3, #1
 801a292:	455b      	cmp	r3, fp
 801a294:	bf28      	it	cs
 801a296:	465b      	movcs	r3, fp
  mss_local = mss_local ? mss_local : pcb->mss;
 801a298:	2b00      	cmp	r3, #0
 801a29a:	bf18      	it	ne
 801a29c:	469b      	movne	fp, r3
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801a29e:	9b05      	ldr	r3, [sp, #20]
 801a2a0:	2b00      	cmp	r3, #0
 801a2a2:	f000 82ce 	beq.w	801a842 <tcp_write+0x5d2>
  if ((pcb->state != ESTABLISHED) &&
 801a2a6:	7d03      	ldrb	r3, [r0, #20]
 801a2a8:	4692      	mov	sl, r2
      (pcb->state != CLOSE_WAIT) &&
 801a2aa:	1e9a      	subs	r2, r3, #2
      (pcb->state != SYN_SENT) &&
 801a2ac:	2a02      	cmp	r2, #2
 801a2ae:	d902      	bls.n	801a2b6 <tcp_write+0x46>
 801a2b0:	2b07      	cmp	r3, #7
 801a2b2:	f040 8289 	bne.w	801a7c8 <tcp_write+0x558>
  } else if (len == 0) {
 801a2b6:	f1ba 0f00 	cmp.w	sl, #0
 801a2ba:	d078      	beq.n	801a3ae <tcp_write+0x13e>
  if (len > pcb->snd_buf) {
 801a2bc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801a2c0:	4553      	cmp	r3, sl
 801a2c2:	f0c0 82aa 	bcc.w	801a81a <tcp_write+0x5aa>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801a2c6:	f8b7 6066 	ldrh.w	r6, [r7, #102]	; 0x66
 801a2ca:	2e08      	cmp	r6, #8
 801a2cc:	f200 82ac 	bhi.w	801a828 <tcp_write+0x5b8>
 801a2d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
  if (pcb->snd_queuelen != 0) {
 801a2d2:	2e00      	cmp	r6, #0
 801a2d4:	d05e      	beq.n	801a394 <tcp_write+0x124>
 801a2d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801a2d8:	9209      	str	r2, [sp, #36]	; 0x24
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801a2da:	2b00      	cmp	r3, #0
 801a2dc:	d16b      	bne.n	801a3b6 <tcp_write+0x146>
 801a2de:	2a00      	cmp	r2, #0
 801a2e0:	f000 826d 	beq.w	801a7be <tcp_write+0x54e>
 801a2e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a2e6:	e000      	b.n	801a2ea <tcp_write+0x7a>
 801a2e8:	461a      	mov	r2, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a2ea:	6813      	ldr	r3, [r2, #0]
 801a2ec:	2b00      	cmp	r3, #0
 801a2ee:	d1fb      	bne.n	801a2e8 <tcp_write+0x78>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801a2f0:	7a95      	ldrb	r5, [r2, #10]
 801a2f2:	4699      	mov	r9, r3
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801a2f4:	8913      	ldrh	r3, [r2, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801a2f6:	00ad      	lsls	r5, r5, #2
 801a2f8:	9209      	str	r2, [sp, #36]	; 0x24
 801a2fa:	f005 0504 	and.w	r5, r5, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801a2fe:	195a      	adds	r2, r3, r5
 801a300:	4593      	cmp	fp, r2
 801a302:	f2c0 81d3 	blt.w	801a6ac <tcp_write+0x43c>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801a306:	ebab 0403 	sub.w	r4, fp, r3
    oversize = pcb->unsent_oversize;
 801a30a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
    space = mss_local - (last_unsent->len + unsent_optlen);
 801a30e:	1b64      	subs	r4, r4, r5
    oversize = pcb->unsent_oversize;
 801a310:	930b      	str	r3, [sp, #44]	; 0x2c
 801a312:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    space = mss_local - (last_unsent->len + unsent_optlen);
 801a316:	b2a4      	uxth	r4, r4
    if (oversize > 0) {
 801a318:	2b00      	cmp	r3, #0
 801a31a:	f040 8100 	bne.w	801a51e <tcp_write+0x2ae>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801a31e:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801a322:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a324:	459a      	cmp	sl, r3
 801a326:	f240 8153 	bls.w	801a5d0 <tcp_write+0x360>
 801a32a:	2c00      	cmp	r4, #0
 801a32c:	f000 8150 	beq.w	801a5d0 <tcp_write+0x360>
 801a330:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a332:	8912      	ldrh	r2, [r2, #8]
 801a334:	920d      	str	r2, [sp, #52]	; 0x34
 801a336:	2a00      	cmp	r2, #0
 801a338:	f000 81c2 	beq.w	801a6c0 <tcp_write+0x450>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801a33c:	ebaa 0503 	sub.w	r5, sl, r3
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801a340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
      u16_t seglen = LWIP_MIN(space, len - pos);
 801a342:	42a5      	cmp	r5, r4
 801a344:	bfa8      	it	ge
 801a346:	4625      	movge	r5, r4
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801a348:	07db      	lsls	r3, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 801a34a:	fa1f f885 	uxth.w	r8, r5
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801a34e:	f100 823e 	bmi.w	801a7ce <tcp_write+0x55e>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801a352:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a354:	685b      	ldr	r3, [r3, #4]
 801a356:	e000      	b.n	801a35a <tcp_write+0xea>
 801a358:	4613      	mov	r3, r2
 801a35a:	681a      	ldr	r2, [r3, #0]
 801a35c:	2a00      	cmp	r2, #0
 801a35e:	d1fb      	bne.n	801a358 <tcp_write+0xe8>
 801a360:	920c      	str	r2, [sp, #48]	; 0x30
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801a362:	7b1a      	ldrb	r2, [r3, #12]
 801a364:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 801a368:	f040 8104 	bne.w	801a574 <tcp_write+0x304>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801a36c:	895a      	ldrh	r2, [r3, #10]
 801a36e:	685b      	ldr	r3, [r3, #4]
 801a370:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801a372:	9a05      	ldr	r2, [sp, #20]
 801a374:	429a      	cmp	r2, r3
 801a376:	f040 80fd 	bne.w	801a574 <tcp_write+0x304>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801a37a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a37c:	2b00      	cmp	r3, #0
 801a37e:	f040 827e 	bne.w	801a87e <tcp_write+0x60e>
          extendlen = seglen;
 801a382:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
      pos += seglen;
 801a386:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a388:	eb08 0403 	add.w	r4, r8, r3
 801a38c:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 801a390:	b2a4      	uxth	r4, r4
 801a392:	e121      	b.n	801a5d8 <tcp_write+0x368>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801a394:	b923      	cbnz	r3, 801a3a0 <tcp_write+0x130>
 801a396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a398:	9309      	str	r3, [sp, #36]	; 0x24
 801a39a:	2b00      	cmp	r3, #0
 801a39c:	f000 81c1 	beq.w	801a722 <tcp_write+0x4b2>
 801a3a0:	4b97      	ldr	r3, [pc, #604]	; (801a600 <tcp_write+0x390>)
 801a3a2:	f240 1259 	movw	r2, #345	; 0x159
 801a3a6:	4997      	ldr	r1, [pc, #604]	; (801a604 <tcp_write+0x394>)
 801a3a8:	4897      	ldr	r0, [pc, #604]	; (801a608 <tcp_write+0x398>)
 801a3aa:	f006 fb0d 	bl	80209c8 <iprintf>
 801a3ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a3b0:	f8b7 6066 	ldrh.w	r6, [r7, #102]	; 0x66
 801a3b4:	9309      	str	r3, [sp, #36]	; 0x24
  if (pcb->unsent != NULL) {
 801a3b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a3b8:	2b00      	cmp	r3, #0
 801a3ba:	d193      	bne.n	801a2e4 <tcp_write+0x74>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801a3bc:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 801a3c0:	2b00      	cmp	r3, #0
 801a3c2:	f040 80cf 	bne.w	801a564 <tcp_write+0x2f4>
  while (pos < len) {
 801a3c6:	f1ba 0f00 	cmp.w	sl, #0
 801a3ca:	f000 8262 	beq.w	801a892 <tcp_write+0x622>
 801a3ce:	2300      	movs	r3, #0
 801a3d0:	461c      	mov	r4, r3
 801a3d2:	930d      	str	r3, [sp, #52]	; 0x34
 801a3d4:	930b      	str	r3, [sp, #44]	; 0x2c
 801a3d6:	9309      	str	r3, [sp, #36]	; 0x24
 801a3d8:	930c      	str	r3, [sp, #48]	; 0x30
 801a3da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a3dc:	f04f 0900 	mov.w	r9, #0
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801a3e0:	f8cd b018 	str.w	fp, [sp, #24]
 801a3e4:	f003 0301 	and.w	r3, r3, #1
 801a3e8:	46cb      	mov	fp, r9
 801a3ea:	9308      	str	r3, [sp, #32]
 801a3ec:	e042      	b.n	801a474 <tcp_write+0x204>
 801a3ee:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801a3f2:	2b00      	cmp	r3, #0
 801a3f4:	f040 80d4 	bne.w	801a5a0 <tcp_write+0x330>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801a3f8:	2201      	movs	r2, #1
 801a3fa:	4629      	mov	r1, r5
 801a3fc:	2036      	movs	r0, #54	; 0x36
 801a3fe:	f7fc f9f9 	bl	80167f4 <pbuf_alloc>
 801a402:	4603      	mov	r3, r0
 801a404:	2800      	cmp	r0, #0
 801a406:	d067      	beq.n	801a4d8 <tcp_write+0x268>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801a408:	9a05      	ldr	r2, [sp, #20]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801a40a:	2100      	movs	r1, #0
 801a40c:	2036      	movs	r0, #54	; 0x36
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801a40e:	9307      	str	r3, [sp, #28]
 801a410:	eb02 0c04 	add.w	ip, r2, r4
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801a414:	f44f 7220 	mov.w	r2, #640	; 0x280
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801a418:	f8c3 c004 	str.w	ip, [r3, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801a41c:	f7fc f9ea 	bl	80167f4 <pbuf_alloc>
 801a420:	9b07      	ldr	r3, [sp, #28]
 801a422:	4680      	mov	r8, r0
 801a424:	2800      	cmp	r0, #0
 801a426:	f000 814f 	beq.w	801a6c8 <tcp_write+0x458>
      pbuf_cat(p/*header*/, p2/*data*/);
 801a42a:	4619      	mov	r1, r3
 801a42c:	f7fc fafc 	bl	8016a28 <pbuf_cat>
    queuelen += pbuf_clen(p);
 801a430:	4640      	mov	r0, r8
 801a432:	f7fc fad9 	bl	80169e8 <pbuf_clen>
 801a436:	4406      	add	r6, r0
 801a438:	b2b6      	uxth	r6, r6
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801a43a:	2e09      	cmp	r6, #9
 801a43c:	d849      	bhi.n	801a4d2 <tcp_write+0x262>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801a43e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a440:	2200      	movs	r2, #0
 801a442:	4641      	mov	r1, r8
 801a444:	4638      	mov	r0, r7
 801a446:	4423      	add	r3, r4
 801a448:	9200      	str	r2, [sp, #0]
 801a44a:	f7ff fd9d 	bl	8019f88 <tcp_create_segment>
 801a44e:	4680      	mov	r8, r0
 801a450:	2800      	cmp	r0, #0
 801a452:	d041      	beq.n	801a4d8 <tcp_write+0x268>
    if (queue == NULL) {
 801a454:	f1b9 0f00 	cmp.w	r9, #0
 801a458:	f000 80a0 	beq.w	801a59c <tcp_write+0x32c>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801a45c:	f1bb 0f00 	cmp.w	fp, #0
 801a460:	f000 80a6 	beq.w	801a5b0 <tcp_write+0x340>
      prev_seg->next = seg;
 801a464:	f8cb 8000 	str.w	r8, [fp]
    pos += seglen;
 801a468:	442c      	add	r4, r5
 801a46a:	46c3      	mov	fp, r8
 801a46c:	b2a4      	uxth	r4, r4
  while (pos < len) {
 801a46e:	45a2      	cmp	sl, r4
 801a470:	f240 80b5 	bls.w	801a5de <tcp_write+0x36e>
    u16_t left = len - pos;
 801a474:	ebaa 0504 	sub.w	r5, sl, r4
    u16_t seglen = LWIP_MIN(left, max_len);
 801a478:	9b06      	ldr	r3, [sp, #24]
 801a47a:	b2ad      	uxth	r5, r5
 801a47c:	429d      	cmp	r5, r3
 801a47e:	bf28      	it	cs
 801a480:	461d      	movcs	r5, r3
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801a482:	9b08      	ldr	r3, [sp, #32]
    u16_t seglen = LWIP_MIN(left, max_len);
 801a484:	b2ad      	uxth	r5, r5
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801a486:	2b00      	cmp	r3, #0
 801a488:	d0b1      	beq.n	801a3ee <tcp_write+0x17e>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801a48a:	fab9 fc89 	clz	ip, r9
 801a48e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a490:	9a06      	ldr	r2, [sp, #24]
 801a492:	4629      	mov	r1, r5
 801a494:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801a498:	2036      	movs	r0, #54	; 0x36
 801a49a:	e9cd 7300 	strd	r7, r3, [sp]
 801a49e:	f8cd c008 	str.w	ip, [sp, #8]
 801a4a2:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 801a4a6:	f7ff fd1d 	bl	8019ee4 <tcp_pbuf_prealloc>
 801a4aa:	4680      	mov	r8, r0
 801a4ac:	b1a0      	cbz	r0, 801a4d8 <tcp_write+0x268>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801a4ae:	8943      	ldrh	r3, [r0, #10]
 801a4b0:	42ab      	cmp	r3, r5
 801a4b2:	f0c0 8085 	bcc.w	801a5c0 <tcp_write+0x350>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801a4b6:	9b05      	ldr	r3, [sp, #20]
 801a4b8:	462a      	mov	r2, r5
 801a4ba:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801a4be:	1919      	adds	r1, r3, r4
 801a4c0:	f005 fadd 	bl	801fa7e <memcpy>
    queuelen += pbuf_clen(p);
 801a4c4:	4640      	mov	r0, r8
 801a4c6:	f7fc fa8f 	bl	80169e8 <pbuf_clen>
 801a4ca:	4406      	add	r6, r0
 801a4cc:	b2b6      	uxth	r6, r6
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801a4ce:	2e09      	cmp	r6, #9
 801a4d0:	d9b5      	bls.n	801a43e <tcp_write+0x1ce>
      pbuf_free(p);
 801a4d2:	4640      	mov	r0, r8
 801a4d4:	f7fc f920 	bl	8016718 <pbuf_free>
  TCP_STATS_INC(tcp.memerr);
 801a4d8:	494c      	ldr	r1, [pc, #304]	; (801a60c <tcp_write+0x39c>)
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a4da:	8b7a      	ldrh	r2, [r7, #26]
  TCP_STATS_INC(tcp.memerr);
 801a4dc:	f8b1 309c 	ldrh.w	r3, [r1, #156]	; 0x9c
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a4e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  TCP_STATS_INC(tcp.memerr);
 801a4e4:	3301      	adds	r3, #1
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a4e6:	837a      	strh	r2, [r7, #26]
  TCP_STATS_INC(tcp.memerr);
 801a4e8:	f8a1 309c 	strh.w	r3, [r1, #156]	; 0x9c
  if (concat_p != NULL) {
 801a4ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a4ee:	b113      	cbz	r3, 801a4f6 <tcp_write+0x286>
    pbuf_free(concat_p);
 801a4f0:	4618      	mov	r0, r3
 801a4f2:	f7fc f911 	bl	8016718 <pbuf_free>
  if (queue != NULL) {
 801a4f6:	f1b9 0f00 	cmp.w	r9, #0
 801a4fa:	d002      	beq.n	801a502 <tcp_write+0x292>
    tcp_segs_free(queue);
 801a4fc:	4648      	mov	r0, r9
 801a4fe:	f7fc ff4d 	bl	801739c <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 801a502:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801a506:	b12b      	cbz	r3, 801a514 <tcp_write+0x2a4>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801a508:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a50a:	b91b      	cbnz	r3, 801a514 <tcp_write+0x2a4>
 801a50c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a50e:	2b00      	cmp	r3, #0
 801a510:	f000 80de 	beq.w	801a6d0 <tcp_write+0x460>
  return ERR_MEM;
 801a514:	f04f 30ff 	mov.w	r0, #4294967295
}
 801a518:	b011      	add	sp, #68	; 0x44
 801a51a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801a51e:	42a3      	cmp	r3, r4
 801a520:	f200 80e3 	bhi.w	801a6ea <tcp_write+0x47a>
 801a524:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801a526:	4553      	cmp	r3, sl
 801a528:	461a      	mov	r2, r3
 801a52a:	bf28      	it	cs
 801a52c:	4652      	movcs	r2, sl
 801a52e:	42a2      	cmp	r2, r4
 801a530:	bfa8      	it	ge
 801a532:	4622      	movge	r2, r4
 801a534:	b292      	uxth	r2, r2
      oversize -= oversize_used;
 801a536:	1a9b      	subs	r3, r3, r2
      space -= oversize_used;
 801a538:	1aa4      	subs	r4, r4, r2
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801a53a:	920b      	str	r2, [sp, #44]	; 0x2c
      oversize -= oversize_used;
 801a53c:	b29b      	uxth	r3, r3
      space -= oversize_used;
 801a53e:	b2a4      	uxth	r4, r4
      oversize -= oversize_used;
 801a540:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801a544:	2b00      	cmp	r3, #0
 801a546:	f000 80cd 	beq.w	801a6e4 <tcp_write+0x474>
 801a54a:	4592      	cmp	sl, r2
 801a54c:	f000 80ca 	beq.w	801a6e4 <tcp_write+0x474>
 801a550:	4b2b      	ldr	r3, [pc, #172]	; (801a600 <tcp_write+0x390>)
 801a552:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a556:	492e      	ldr	r1, [pc, #184]	; (801a610 <tcp_write+0x3a0>)
 801a558:	482b      	ldr	r0, [pc, #172]	; (801a608 <tcp_write+0x398>)
 801a55a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 801a55e:	f006 fa33 	bl	80209c8 <iprintf>
 801a562:	e6de      	b.n	801a322 <tcp_write+0xb2>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801a564:	4b26      	ldr	r3, [pc, #152]	; (801a600 <tcp_write+0x390>)
 801a566:	f240 224b 	movw	r2, #587	; 0x24b
 801a56a:	492a      	ldr	r1, [pc, #168]	; (801a614 <tcp_write+0x3a4>)
 801a56c:	4826      	ldr	r0, [pc, #152]	; (801a608 <tcp_write+0x398>)
 801a56e:	f006 fa2b 	bl	80209c8 <iprintf>
 801a572:	e728      	b.n	801a3c6 <tcp_write+0x156>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801a574:	2201      	movs	r2, #1
 801a576:	4641      	mov	r1, r8
 801a578:	2000      	movs	r0, #0
 801a57a:	f7fc f93b 	bl	80167f4 <pbuf_alloc>
 801a57e:	900c      	str	r0, [sp, #48]	; 0x30
 801a580:	2800      	cmp	r0, #0
 801a582:	f000 80d8 	beq.w	801a736 <tcp_write+0x4c6>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801a586:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a588:	9b05      	ldr	r3, [sp, #20]
 801a58a:	4413      	add	r3, r2
  u16_t extendlen = 0;
 801a58c:	2200      	movs	r2, #0
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801a58e:	6043      	str	r3, [r0, #4]
  u16_t extendlen = 0;
 801a590:	920d      	str	r2, [sp, #52]	; 0x34
          queuelen += pbuf_clen(concat_p);
 801a592:	f7fc fa29 	bl	80169e8 <pbuf_clen>
 801a596:	4406      	add	r6, r0
 801a598:	b2b6      	uxth	r6, r6
 801a59a:	e6f4      	b.n	801a386 <tcp_write+0x116>
 801a59c:	4681      	mov	r9, r0
 801a59e:	e763      	b.n	801a468 <tcp_write+0x1f8>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801a5a0:	4b17      	ldr	r3, [pc, #92]	; (801a600 <tcp_write+0x390>)
 801a5a2:	f240 2271 	movw	r2, #625	; 0x271
 801a5a6:	491c      	ldr	r1, [pc, #112]	; (801a618 <tcp_write+0x3a8>)
 801a5a8:	4817      	ldr	r0, [pc, #92]	; (801a608 <tcp_write+0x398>)
 801a5aa:	f006 fa0d 	bl	80209c8 <iprintf>
 801a5ae:	e723      	b.n	801a3f8 <tcp_write+0x188>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801a5b0:	4b13      	ldr	r3, [pc, #76]	; (801a600 <tcp_write+0x390>)
 801a5b2:	f240 22ab 	movw	r2, #683	; 0x2ab
 801a5b6:	4919      	ldr	r1, [pc, #100]	; (801a61c <tcp_write+0x3ac>)
 801a5b8:	4813      	ldr	r0, [pc, #76]	; (801a608 <tcp_write+0x398>)
 801a5ba:	f006 fa05 	bl	80209c8 <iprintf>
 801a5be:	e751      	b.n	801a464 <tcp_write+0x1f4>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801a5c0:	4b0f      	ldr	r3, [pc, #60]	; (801a600 <tcp_write+0x390>)
 801a5c2:	f240 2267 	movw	r2, #615	; 0x267
 801a5c6:	4916      	ldr	r1, [pc, #88]	; (801a620 <tcp_write+0x3b0>)
 801a5c8:	480f      	ldr	r0, [pc, #60]	; (801a608 <tcp_write+0x398>)
 801a5ca:	f006 f9fd 	bl	80209c8 <iprintf>
 801a5ce:	e772      	b.n	801a4b6 <tcp_write+0x246>
  u16_t extendlen = 0;
 801a5d0:	2300      	movs	r3, #0
 801a5d2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a5d4:	930d      	str	r3, [sp, #52]	; 0x34
  struct pbuf *concat_p = NULL;
 801a5d6:	930c      	str	r3, [sp, #48]	; 0x30
  while (pos < len) {
 801a5d8:	45a2      	cmp	sl, r4
 801a5da:	f63f aefe 	bhi.w	801a3da <tcp_write+0x16a>
  if (oversize_used > 0) {
 801a5de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a5e0:	2b00      	cmp	r3, #0
 801a5e2:	f000 808c 	beq.w	801a6fe <tcp_write+0x48e>
    for (p = last_unsent->p; p; p = p->next) {
 801a5e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a5e8:	685c      	ldr	r4, [r3, #4]
 801a5ea:	b344      	cbz	r4, 801a63e <tcp_write+0x3ce>
 801a5ec:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 801a5f0:	9d05      	ldr	r5, [sp, #20]
      p->tot_len += oversize_used;
 801a5f2:	8923      	ldrh	r3, [r4, #8]
      if (p->next == NULL) {
 801a5f4:	6822      	ldr	r2, [r4, #0]
      p->tot_len += oversize_used;
 801a5f6:	445b      	add	r3, fp
 801a5f8:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 801a5fa:	b19a      	cbz	r2, 801a624 <tcp_write+0x3b4>
  struct pbuf *concat_p = NULL;
 801a5fc:	4614      	mov	r4, r2
 801a5fe:	e7f8      	b.n	801a5f2 <tcp_write+0x382>
 801a600:	0803e780 	.word	0x0803e780
 801a604:	0803ea10 	.word	0x0803ea10
 801a608:	0802697c 	.word	0x0802697c
 801a60c:	20036164 	.word	0x20036164
 801a610:	0803ea7c 	.word	0x0803ea7c
 801a614:	0803eac8 	.word	0x0803eac8
 801a618:	0803eb38 	.word	0x0803eb38
 801a61c:	0803eb48 	.word	0x0803eb48
 801a620:	0803eaf8 	.word	0x0803eaf8
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801a624:	6863      	ldr	r3, [r4, #4]
 801a626:	465a      	mov	r2, fp
 801a628:	8960      	ldrh	r0, [r4, #10]
 801a62a:	4629      	mov	r1, r5
 801a62c:	4418      	add	r0, r3
 801a62e:	f005 fa26 	bl	801fa7e <memcpy>
        p->len += oversize_used;
 801a632:	8963      	ldrh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801a634:	6822      	ldr	r2, [r4, #0]
        p->len += oversize_used;
 801a636:	445b      	add	r3, fp
 801a638:	8163      	strh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801a63a:	2a00      	cmp	r2, #0
 801a63c:	d1de      	bne.n	801a5fc <tcp_write+0x38c>
    last_unsent->len += oversize_used;
 801a63e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a640:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801a642:	890b      	ldrh	r3, [r1, #8]
  pcb->unsent_oversize = oversize;
 801a644:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
    last_unsent->len += oversize_used;
 801a648:	4418      	add	r0, r3
  if (concat_p != NULL) {
 801a64a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    last_unsent->len += oversize_used;
 801a64c:	8108      	strh	r0, [r1, #8]
  pcb->unsent_oversize = oversize;
 801a64e:	f8a7 2068 	strh.w	r2, [r7, #104]	; 0x68
  if (concat_p != NULL) {
 801a652:	2b00      	cmp	r3, #0
 801a654:	f000 808f 	beq.w	801a776 <tcp_write+0x506>
    pbuf_cat(last_unsent->p, concat_p);
 801a658:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801a65a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a65c:	6860      	ldr	r0, [r4, #4]
 801a65e:	4629      	mov	r1, r5
 801a660:	f7fc f9e2 	bl	8016a28 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801a664:	892a      	ldrh	r2, [r5, #8]
 801a666:	8923      	ldrh	r3, [r4, #8]
 801a668:	4413      	add	r3, r2
 801a66a:	8123      	strh	r3, [r4, #8]
    last_unsent->next = queue;
 801a66c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a66e:	f8c3 9000 	str.w	r9, [r3]
  pcb->snd_lbb += len;
 801a672:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
  pcb->snd_buf -= len;
 801a674:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
  pcb->snd_lbb += len;
 801a678:	4452      	add	r2, sl
  pcb->snd_queuelen = queuelen;
 801a67a:	f8a7 6066 	strh.w	r6, [r7, #102]	; 0x66
  pcb->snd_buf -= len;
 801a67e:	eba3 0a0a 	sub.w	sl, r3, sl
  pcb->snd_lbb += len;
 801a682:	65fa      	str	r2, [r7, #92]	; 0x5c
  pcb->snd_buf -= len;
 801a684:	f8a7 a064 	strh.w	sl, [r7, #100]	; 0x64
  if (pcb->snd_queuelen != 0) {
 801a688:	b116      	cbz	r6, 801a690 <tcp_write+0x420>
    LWIP_ASSERT("tcp_write: valid queue length",
 801a68a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a68c:	2b00      	cmp	r3, #0
 801a68e:	d067      	beq.n	801a760 <tcp_write+0x4f0>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801a690:	f1b8 0f00 	cmp.w	r8, #0
 801a694:	d008      	beq.n	801a6a8 <tcp_write+0x438>
 801a696:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801a69a:	2800      	cmp	r0, #0
 801a69c:	f43f af3c 	beq.w	801a518 <tcp_write+0x2a8>
 801a6a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a6a2:	f013 0402 	ands.w	r4, r3, #2
 801a6a6:	d051      	beq.n	801a74c <tcp_write+0x4dc>
  return ERR_OK;
 801a6a8:	2000      	movs	r0, #0
 801a6aa:	e735      	b.n	801a518 <tcp_write+0x2a8>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801a6ac:	4b7d      	ldr	r3, [pc, #500]	; (801a8a4 <tcp_write+0x634>)
 801a6ae:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801a6b2:	497d      	ldr	r1, [pc, #500]	; (801a8a8 <tcp_write+0x638>)
 801a6b4:	487d      	ldr	r0, [pc, #500]	; (801a8ac <tcp_write+0x63c>)
 801a6b6:	f006 f987 	bl	80209c8 <iprintf>
 801a6ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a6bc:	891b      	ldrh	r3, [r3, #8]
 801a6be:	e622      	b.n	801a306 <tcp_write+0x96>
  struct pbuf *concat_p = NULL;
 801a6c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a6c2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a6c4:	930c      	str	r3, [sp, #48]	; 0x30
 801a6c6:	e787      	b.n	801a5d8 <tcp_write+0x368>
        pbuf_free(p2);
 801a6c8:	4618      	mov	r0, r3
 801a6ca:	f7fc f825 	bl	8016718 <pbuf_free>
        goto memerr;
 801a6ce:	e703      	b.n	801a4d8 <tcp_write+0x268>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801a6d0:	4b74      	ldr	r3, [pc, #464]	; (801a8a4 <tcp_write+0x634>)
 801a6d2:	f44f 724a 	mov.w	r2, #808	; 0x328
 801a6d6:	4976      	ldr	r1, [pc, #472]	; (801a8b0 <tcp_write+0x640>)
 801a6d8:	4874      	ldr	r0, [pc, #464]	; (801a8ac <tcp_write+0x63c>)
 801a6da:	f006 f975 	bl	80209c8 <iprintf>
  return ERR_MEM;
 801a6de:	f04f 30ff 	mov.w	r0, #4294967295
 801a6e2:	e719      	b.n	801a518 <tcp_write+0x2a8>
 801a6e4:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 801a6e8:	e61b      	b.n	801a322 <tcp_write+0xb2>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801a6ea:	4b6e      	ldr	r3, [pc, #440]	; (801a8a4 <tcp_write+0x634>)
 801a6ec:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801a6f0:	4970      	ldr	r1, [pc, #448]	; (801a8b4 <tcp_write+0x644>)
 801a6f2:	486e      	ldr	r0, [pc, #440]	; (801a8ac <tcp_write+0x63c>)
 801a6f4:	f006 f968 	bl	80209c8 <iprintf>
 801a6f8:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801a6fc:	e713      	b.n	801a526 <tcp_write+0x2b6>
  pcb->unsent_oversize = oversize;
 801a6fe:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801a702:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
  if (concat_p != NULL) {
 801a706:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a708:	2b00      	cmp	r3, #0
 801a70a:	d034      	beq.n	801a776 <tcp_write+0x506>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801a70c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a70e:	2b00      	cmp	r3, #0
 801a710:	d1a2      	bne.n	801a658 <tcp_write+0x3e8>
 801a712:	4b64      	ldr	r3, [pc, #400]	; (801a8a4 <tcp_write+0x634>)
 801a714:	f240 22e1 	movw	r2, #737	; 0x2e1
 801a718:	4967      	ldr	r1, [pc, #412]	; (801a8b8 <tcp_write+0x648>)
 801a71a:	4864      	ldr	r0, [pc, #400]	; (801a8ac <tcp_write+0x63c>)
 801a71c:	f006 f954 	bl	80209c8 <iprintf>
 801a720:	e79a      	b.n	801a658 <tcp_write+0x3e8>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801a722:	f8b7 4068 	ldrh.w	r4, [r7, #104]	; 0x68
 801a726:	2c00      	cmp	r4, #0
 801a728:	f47f af1c 	bne.w	801a564 <tcp_write+0x2f4>
 801a72c:	940d      	str	r4, [sp, #52]	; 0x34
  queuelen = pcb->snd_queuelen;
 801a72e:	4626      	mov	r6, r4
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801a730:	940b      	str	r4, [sp, #44]	; 0x2c
 801a732:	940c      	str	r4, [sp, #48]	; 0x30
 801a734:	e651      	b.n	801a3da <tcp_write+0x16a>
  TCP_STATS_INC(tcp.memerr);
 801a736:	4961      	ldr	r1, [pc, #388]	; (801a8bc <tcp_write+0x64c>)
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a738:	8b7a      	ldrh	r2, [r7, #26]
  TCP_STATS_INC(tcp.memerr);
 801a73a:	f8b1 309c 	ldrh.w	r3, [r1, #156]	; 0x9c
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a73e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  TCP_STATS_INC(tcp.memerr);
 801a742:	3301      	adds	r3, #1
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a744:	837a      	strh	r2, [r7, #26]
  TCP_STATS_INC(tcp.memerr);
 801a746:	f8a1 309c 	strh.w	r3, [r1, #156]	; 0x9c
 801a74a:	e6da      	b.n	801a502 <tcp_write+0x292>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801a74c:	8985      	ldrh	r5, [r0, #12]
 801a74e:	2008      	movs	r0, #8
 801a750:	f7fa f974 	bl	8014a3c <lwip_htons>
 801a754:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801a758:	4305      	orrs	r5, r0
  return ERR_OK;
 801a75a:	4620      	mov	r0, r4
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801a75c:	819d      	strh	r5, [r3, #12]
 801a75e:	e6db      	b.n	801a518 <tcp_write+0x2a8>
    LWIP_ASSERT("tcp_write: valid queue length",
 801a760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a762:	2b00      	cmp	r3, #0
 801a764:	d194      	bne.n	801a690 <tcp_write+0x420>
 801a766:	4b4f      	ldr	r3, [pc, #316]	; (801a8a4 <tcp_write+0x634>)
 801a768:	f240 3213 	movw	r2, #787	; 0x313
 801a76c:	4950      	ldr	r1, [pc, #320]	; (801a8b0 <tcp_write+0x640>)
 801a76e:	484f      	ldr	r0, [pc, #316]	; (801a8ac <tcp_write+0x63c>)
 801a770:	f006 f92a 	bl	80209c8 <iprintf>
 801a774:	e78c      	b.n	801a690 <tcp_write+0x420>
  } else if (extendlen > 0) {
 801a776:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a778:	2b00      	cmp	r3, #0
 801a77a:	d047      	beq.n	801a80c <tcp_write+0x59c>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801a77c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a77e:	2b00      	cmp	r3, #0
 801a780:	d069      	beq.n	801a856 <tcp_write+0x5e6>
 801a782:	6859      	ldr	r1, [r3, #4]
 801a784:	2900      	cmp	r1, #0
 801a786:	d066      	beq.n	801a856 <tcp_write+0x5e6>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801a788:	680a      	ldr	r2, [r1, #0]
 801a78a:	2a00      	cmp	r2, #0
 801a78c:	f000 8088 	beq.w	801a8a0 <tcp_write+0x630>
 801a790:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a792:	e000      	b.n	801a796 <tcp_write+0x526>
 801a794:	4602      	mov	r2, r0
      p->tot_len += extendlen;
 801a796:	890b      	ldrh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801a798:	6810      	ldr	r0, [r2, #0]
      p->tot_len += extendlen;
 801a79a:	4423      	add	r3, r4
 801a79c:	810b      	strh	r3, [r1, #8]
 801a79e:	4611      	mov	r1, r2
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801a7a0:	2800      	cmp	r0, #0
 801a7a2:	d1f7      	bne.n	801a794 <tcp_write+0x524>
    p->tot_len += extendlen;
 801a7a4:	8910      	ldrh	r0, [r2, #8]
    p->len += extendlen;
 801a7a6:	8951      	ldrh	r1, [r2, #10]
    p->tot_len += extendlen;
 801a7a8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    last_unsent->len += extendlen;
 801a7aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    p->tot_len += extendlen;
 801a7ac:	4420      	add	r0, r4
    p->len += extendlen;
 801a7ae:	4421      	add	r1, r4
    last_unsent->len += extendlen;
 801a7b0:	891b      	ldrh	r3, [r3, #8]
    p->tot_len += extendlen;
 801a7b2:	8110      	strh	r0, [r2, #8]
    last_unsent->len += extendlen;
 801a7b4:	4423      	add	r3, r4
    p->len += extendlen;
 801a7b6:	8151      	strh	r1, [r2, #10]
    last_unsent->len += extendlen;
 801a7b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a7ba:	8113      	strh	r3, [r2, #8]
 801a7bc:	e756      	b.n	801a66c <tcp_write+0x3fc>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801a7be:	4b39      	ldr	r3, [pc, #228]	; (801a8a4 <tcp_write+0x634>)
 801a7c0:	f44f 72ab 	mov.w	r2, #342	; 0x156
 801a7c4:	493e      	ldr	r1, [pc, #248]	; (801a8c0 <tcp_write+0x650>)
 801a7c6:	e5ef      	b.n	801a3a8 <tcp_write+0x138>
    return ERR_CONN;
 801a7c8:	f06f 000a 	mvn.w	r0, #10
 801a7cc:	e6a4      	b.n	801a518 <tcp_write+0x2a8>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801a7ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a7d0:	2301      	movs	r3, #1
 801a7d2:	4641      	mov	r1, r8
 801a7d4:	2000      	movs	r0, #0
 801a7d6:	9302      	str	r3, [sp, #8]
 801a7d8:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 801a7dc:	e9cd 7200 	strd	r7, r2, [sp]
 801a7e0:	4622      	mov	r2, r4
 801a7e2:	f7ff fb7f 	bl	8019ee4 <tcp_pbuf_prealloc>
 801a7e6:	4604      	mov	r4, r0
 801a7e8:	900c      	str	r0, [sp, #48]	; 0x30
 801a7ea:	2800      	cmp	r0, #0
 801a7ec:	d0a3      	beq.n	801a736 <tcp_write+0x4c6>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801a7ee:	9b05      	ldr	r3, [sp, #20]
 801a7f0:	4642      	mov	r2, r8
 801a7f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a7f4:	6840      	ldr	r0, [r0, #4]
 801a7f6:	1859      	adds	r1, r3, r1
  u16_t extendlen = 0;
 801a7f8:	2300      	movs	r3, #0
 801a7fa:	930d      	str	r3, [sp, #52]	; 0x34
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801a7fc:	f005 f93f 	bl	801fa7e <memcpy>
        queuelen += pbuf_clen(concat_p);
 801a800:	4620      	mov	r0, r4
 801a802:	f7fc f8f1 	bl	80169e8 <pbuf_clen>
 801a806:	4406      	add	r6, r0
 801a808:	b2b6      	uxth	r6, r6
 801a80a:	e5bc      	b.n	801a386 <tcp_write+0x116>
  if (last_unsent == NULL) {
 801a80c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a80e:	2b00      	cmp	r3, #0
 801a810:	f47f af2c 	bne.w	801a66c <tcp_write+0x3fc>
    pcb->unsent = queue;
 801a814:	f8c7 906c 	str.w	r9, [r7, #108]	; 0x6c
 801a818:	e72b      	b.n	801a672 <tcp_write+0x402>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a81a:	8b7b      	ldrh	r3, [r7, #26]
    return ERR_MEM;
 801a81c:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a824:	837b      	strh	r3, [r7, #26]
 801a826:	e677      	b.n	801a518 <tcp_write+0x2a8>
    TCP_STATS_INC(tcp.memerr);
 801a828:	4924      	ldr	r1, [pc, #144]	; (801a8bc <tcp_write+0x64c>)
    return ERR_MEM;
 801a82a:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a82e:	8b7b      	ldrh	r3, [r7, #26]
    TCP_STATS_INC(tcp.memerr);
 801a830:	f8b1 209c 	ldrh.w	r2, [r1, #156]	; 0x9c
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    TCP_STATS_INC(tcp.memerr);
 801a838:	3201      	adds	r2, #1
 801a83a:	f8a1 209c 	strh.w	r2, [r1, #156]	; 0x9c
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a83e:	837b      	strh	r3, [r7, #26]
 801a840:	e66a      	b.n	801a518 <tcp_write+0x2a8>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801a842:	4b18      	ldr	r3, [pc, #96]	; (801a8a4 <tcp_write+0x634>)
 801a844:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 801a848:	491e      	ldr	r1, [pc, #120]	; (801a8c4 <tcp_write+0x654>)
 801a84a:	4818      	ldr	r0, [pc, #96]	; (801a8ac <tcp_write+0x63c>)
 801a84c:	f006 f8bc 	bl	80209c8 <iprintf>
 801a850:	f06f 000f 	mvn.w	r0, #15
 801a854:	e660      	b.n	801a518 <tcp_write+0x2a8>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801a856:	4b13      	ldr	r3, [pc, #76]	; (801a8a4 <tcp_write+0x634>)
 801a858:	f240 22e7 	movw	r2, #743	; 0x2e7
 801a85c:	491a      	ldr	r1, [pc, #104]	; (801a8c8 <tcp_write+0x658>)
 801a85e:	4813      	ldr	r0, [pc, #76]	; (801a8ac <tcp_write+0x63c>)
 801a860:	f006 f8b2 	bl	80209c8 <iprintf>
 801a864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a866:	6859      	ldr	r1, [r3, #4]
 801a868:	e78e      	b.n	801a788 <tcp_write+0x518>
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801a86a:	4b0e      	ldr	r3, [pc, #56]	; (801a8a4 <tcp_write+0x634>)
 801a86c:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801a870:	4916      	ldr	r1, [pc, #88]	; (801a8cc <tcp_write+0x65c>)
 801a872:	480e      	ldr	r0, [pc, #56]	; (801a8ac <tcp_write+0x63c>)
 801a874:	f006 f8a8 	bl	80209c8 <iprintf>
 801a878:	f06f 000f 	mvn.w	r0, #15
 801a87c:	e64c      	b.n	801a518 <tcp_write+0x2a8>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801a87e:	4b09      	ldr	r3, [pc, #36]	; (801a8a4 <tcp_write+0x634>)
 801a880:	f240 2231 	movw	r2, #561	; 0x231
 801a884:	4912      	ldr	r1, [pc, #72]	; (801a8d0 <tcp_write+0x660>)
 801a886:	4809      	ldr	r0, [pc, #36]	; (801a8ac <tcp_write+0x63c>)
          extendlen = seglen;
 801a888:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801a88c:	f006 f89c 	bl	80209c8 <iprintf>
 801a890:	e579      	b.n	801a386 <tcp_write+0x116>
  pcb->unsent_oversize = oversize;
 801a892:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801a896:	46d0      	mov	r8, sl
 801a898:	46d1      	mov	r9, sl
 801a89a:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 801a89e:	e7b9      	b.n	801a814 <tcp_write+0x5a4>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801a8a0:	460a      	mov	r2, r1
 801a8a2:	e77f      	b.n	801a7a4 <tcp_write+0x534>
 801a8a4:	0803e780 	.word	0x0803e780
 801a8a8:	0803ea44 	.word	0x0803ea44
 801a8ac:	0802697c 	.word	0x0802697c
 801a8b0:	0803ebcc 	.word	0x0803ebcc
 801a8b4:	0803ea5c 	.word	0x0803ea5c
 801a8b8:	0803eb5c 	.word	0x0803eb5c
 801a8bc:	20036164 	.word	0x20036164
 801a8c0:	0803e9d4 	.word	0x0803e9d4
 801a8c4:	0803e9a0 	.word	0x0803e9a0
 801a8c8:	0803eb94 	.word	0x0803eb94
 801a8cc:	0803e988 	.word	0x0803e988
 801a8d0:	0803ea9c 	.word	0x0803ea9c

0801a8d4 <tcp_split_unsent_seg>:
{
 801a8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8d8:	460e      	mov	r6, r1
 801a8da:	b083      	sub	sp, #12
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801a8dc:	4607      	mov	r7, r0
 801a8de:	2800      	cmp	r0, #0
 801a8e0:	d05d      	beq.n	801a99e <tcp_split_unsent_seg+0xca>
  useg = pcb->unsent;
 801a8e2:	6efd      	ldr	r5, [r7, #108]	; 0x6c
  if (useg == NULL) {
 801a8e4:	b39d      	cbz	r5, 801a94e <tcp_split_unsent_seg+0x7a>
  if (split == 0) {
 801a8e6:	2e00      	cmp	r6, #0
 801a8e8:	f000 80b9 	beq.w	801aa5e <tcp_split_unsent_seg+0x18a>
  if (useg->len <= split) {
 801a8ec:	892c      	ldrh	r4, [r5, #8]
 801a8ee:	42b4      	cmp	r4, r6
 801a8f0:	d93d      	bls.n	801a96e <tcp_split_unsent_seg+0x9a>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801a8f2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801a8f4:	42b3      	cmp	r3, r6
 801a8f6:	d347      	bcc.n	801a988 <tcp_split_unsent_seg+0xb4>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801a8f8:	2c00      	cmp	r4, #0
 801a8fa:	d03c      	beq.n	801a976 <tcp_split_unsent_seg+0xa2>
  optflags = useg->flags;
 801a8fc:	f895 900a 	ldrb.w	r9, [r5, #10]
  remainder = useg->len - split;
 801a900:	1ba4      	subs	r4, r4, r6
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801a902:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a906:	2036      	movs	r0, #54	; 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801a908:	ea4f 0889 	mov.w	r8, r9, lsl #2
  remainder = useg->len - split;
 801a90c:	b2a4      	uxth	r4, r4
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801a90e:	f008 0804 	and.w	r8, r8, #4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801a912:	eb04 0108 	add.w	r1, r4, r8
 801a916:	b289      	uxth	r1, r1
 801a918:	f7fb ff6c 	bl	80167f4 <pbuf_alloc>
  if (p == NULL) {
 801a91c:	4682      	mov	sl, r0
 801a91e:	b1d8      	cbz	r0, 801a958 <tcp_split_unsent_seg+0x84>
  offset = useg->p->tot_len - useg->len + split;
 801a920:	6868      	ldr	r0, [r5, #4]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801a922:	4622      	mov	r2, r4
  offset = useg->p->tot_len - useg->len + split;
 801a924:	8929      	ldrh	r1, [r5, #8]
 801a926:	8903      	ldrh	r3, [r0, #8]
 801a928:	1a5b      	subs	r3, r3, r1
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801a92a:	f8da 1004 	ldr.w	r1, [sl, #4]
  offset = useg->p->tot_len - useg->len + split;
 801a92e:	4433      	add	r3, r6
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801a930:	4441      	add	r1, r8
 801a932:	b29b      	uxth	r3, r3
 801a934:	f7fc f980 	bl	8016c38 <pbuf_copy_partial>
 801a938:	42a0      	cmp	r0, r4
 801a93a:	d038      	beq.n	801a9ae <tcp_split_unsent_seg+0xda>
  TCP_STATS_INC(tcp.memerr);
 801a93c:	4a4d      	ldr	r2, [pc, #308]	; (801aa74 <tcp_split_unsent_seg+0x1a0>)
    pbuf_free(p);
 801a93e:	4650      	mov	r0, sl
  TCP_STATS_INC(tcp.memerr);
 801a940:	f8b2 309c 	ldrh.w	r3, [r2, #156]	; 0x9c
 801a944:	3301      	adds	r3, #1
 801a946:	f8a2 309c 	strh.w	r3, [r2, #156]	; 0x9c
    pbuf_free(p);
 801a94a:	f7fb fee5 	bl	8016718 <pbuf_free>
  return ERR_MEM;
 801a94e:	f04f 30ff 	mov.w	r0, #4294967295
}
 801a952:	b003      	add	sp, #12
 801a954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TCP_STATS_INC(tcp.memerr);
 801a958:	4a46      	ldr	r2, [pc, #280]	; (801aa74 <tcp_split_unsent_seg+0x1a0>)
  return ERR_MEM;
 801a95a:	f04f 30ff 	mov.w	r0, #4294967295
  TCP_STATS_INC(tcp.memerr);
 801a95e:	f8b2 309c 	ldrh.w	r3, [r2, #156]	; 0x9c
 801a962:	3301      	adds	r3, #1
 801a964:	f8a2 309c 	strh.w	r3, [r2, #156]	; 0x9c
}
 801a968:	b003      	add	sp, #12
 801a96a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return ERR_OK;
 801a96e:	2000      	movs	r0, #0
}
 801a970:	b003      	add	sp, #12
 801a972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801a976:	4b40      	ldr	r3, [pc, #256]	; (801aa78 <tcp_split_unsent_seg+0x1a4>)
 801a978:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801a97c:	493f      	ldr	r1, [pc, #252]	; (801aa7c <tcp_split_unsent_seg+0x1a8>)
 801a97e:	4840      	ldr	r0, [pc, #256]	; (801aa80 <tcp_split_unsent_seg+0x1ac>)
 801a980:	f006 f822 	bl	80209c8 <iprintf>
 801a984:	892c      	ldrh	r4, [r5, #8]
 801a986:	e7b9      	b.n	801a8fc <tcp_split_unsent_seg+0x28>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801a988:	4b3b      	ldr	r3, [pc, #236]	; (801aa78 <tcp_split_unsent_seg+0x1a4>)
 801a98a:	f240 325b 	movw	r2, #859	; 0x35b
 801a98e:	493d      	ldr	r1, [pc, #244]	; (801aa84 <tcp_split_unsent_seg+0x1b0>)
 801a990:	483b      	ldr	r0, [pc, #236]	; (801aa80 <tcp_split_unsent_seg+0x1ac>)
 801a992:	f006 f819 	bl	80209c8 <iprintf>
 801a996:	892c      	ldrh	r4, [r5, #8]
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801a998:	2c00      	cmp	r4, #0
 801a99a:	d1af      	bne.n	801a8fc <tcp_split_unsent_seg+0x28>
 801a99c:	e7eb      	b.n	801a976 <tcp_split_unsent_seg+0xa2>
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801a99e:	4b36      	ldr	r3, [pc, #216]	; (801aa78 <tcp_split_unsent_seg+0x1a4>)
 801a9a0:	f240 324b 	movw	r2, #843	; 0x34b
 801a9a4:	4938      	ldr	r1, [pc, #224]	; (801aa88 <tcp_split_unsent_seg+0x1b4>)
 801a9a6:	4836      	ldr	r0, [pc, #216]	; (801aa80 <tcp_split_unsent_seg+0x1ac>)
 801a9a8:	f006 f80e 	bl	80209c8 <iprintf>
 801a9ac:	e799      	b.n	801a8e2 <tcp_split_unsent_seg+0xe>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801a9ae:	68eb      	ldr	r3, [r5, #12]
 801a9b0:	8998      	ldrh	r0, [r3, #12]
 801a9b2:	f7fa f843 	bl	8014a3c <lwip_htons>
 801a9b6:	b2c0      	uxtb	r0, r0
  if (split_flags & TCP_PSH) {
 801a9b8:	f010 0b08 	ands.w	fp, r0, #8
 801a9bc:	d14a      	bne.n	801aa54 <tcp_split_unsent_seg+0x180>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801a9be:	f000 083f 	and.w	r8, r0, #63	; 0x3f
  if (split_flags & TCP_FIN) {
 801a9c2:	f018 0f01 	tst.w	r8, #1
 801a9c6:	d003      	beq.n	801a9d0 <tcp_split_unsent_seg+0xfc>
    split_flags &= ~TCP_FIN;
 801a9c8:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
    remainder_flags |= TCP_FIN;
 801a9cc:	f04b 0b01 	orr.w	fp, fp, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801a9d0:	68eb      	ldr	r3, [r5, #12]
 801a9d2:	6858      	ldr	r0, [r3, #4]
 801a9d4:	f7fa f836 	bl	8014a44 <lwip_htonl>
 801a9d8:	f8cd 9000 	str.w	r9, [sp]
 801a9dc:	1833      	adds	r3, r6, r0
 801a9de:	465a      	mov	r2, fp
 801a9e0:	4651      	mov	r1, sl
 801a9e2:	4638      	mov	r0, r7
 801a9e4:	f7ff fad0 	bl	8019f88 <tcp_create_segment>
  if (seg == NULL) {
 801a9e8:	4606      	mov	r6, r0
 801a9ea:	2800      	cmp	r0, #0
 801a9ec:	d0a6      	beq.n	801a93c <tcp_split_unsent_seg+0x68>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801a9ee:	6868      	ldr	r0, [r5, #4]
 801a9f0:	f7fb fffa 	bl	80169e8 <pbuf_clen>
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801a9f4:	686a      	ldr	r2, [r5, #4]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801a9f6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801a9fa:	8911      	ldrh	r1, [r2, #8]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801a9fc:	1a1b      	subs	r3, r3, r0
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801a9fe:	4610      	mov	r0, r2
 801aa00:	1b09      	subs	r1, r1, r4
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801aa02:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801aa06:	b289      	uxth	r1, r1
 801aa08:	f7fb ff92 	bl	8016930 <pbuf_realloc>
  useg->len -= remainder;
 801aa0c:	892a      	ldrh	r2, [r5, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801aa0e:	68eb      	ldr	r3, [r5, #12]
 801aa10:	4640      	mov	r0, r8
  useg->len -= remainder;
 801aa12:	1b14      	subs	r4, r2, r4
 801aa14:	812c      	strh	r4, [r5, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801aa16:	899c      	ldrh	r4, [r3, #12]
 801aa18:	f7fa f810 	bl	8014a3c <lwip_htons>
 801aa1c:	68eb      	ldr	r3, [r5, #12]
 801aa1e:	4304      	orrs	r4, r0
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801aa20:	6868      	ldr	r0, [r5, #4]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801aa22:	819c      	strh	r4, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801aa24:	f7fb ffe0 	bl	80169e8 <pbuf_clen>
 801aa28:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801aa2c:	4403      	add	r3, r0
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801aa2e:	6870      	ldr	r0, [r6, #4]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801aa30:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801aa34:	f7fb ffd8 	bl	80169e8 <pbuf_clen>
 801aa38:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
  seg->next = useg->next;
 801aa3c:	682a      	ldr	r2, [r5, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801aa3e:	4418      	add	r0, r3
 801aa40:	f8a7 0066 	strh.w	r0, [r7, #102]	; 0x66
  seg->next = useg->next;
 801aa44:	6032      	str	r2, [r6, #0]
  useg->next = seg;
 801aa46:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 801aa48:	6830      	ldr	r0, [r6, #0]
 801aa4a:	2800      	cmp	r0, #0
 801aa4c:	d18f      	bne.n	801a96e <tcp_split_unsent_seg+0x9a>
    pcb->unsent_oversize = 0;
 801aa4e:	f8a7 0068 	strh.w	r0, [r7, #104]	; 0x68
 801aa52:	e77e      	b.n	801a952 <tcp_split_unsent_seg+0x7e>
    split_flags &= ~TCP_PSH;
 801aa54:	f000 0837 	and.w	r8, r0, #55	; 0x37
    remainder_flags |= TCP_PSH;
 801aa58:	f04f 0b08 	mov.w	fp, #8
 801aa5c:	e7b1      	b.n	801a9c2 <tcp_split_unsent_seg+0xee>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801aa5e:	4b06      	ldr	r3, [pc, #24]	; (801aa78 <tcp_split_unsent_seg+0x1a4>)
 801aa60:	f240 3253 	movw	r2, #851	; 0x353
 801aa64:	4909      	ldr	r1, [pc, #36]	; (801aa8c <tcp_split_unsent_seg+0x1b8>)
 801aa66:	4806      	ldr	r0, [pc, #24]	; (801aa80 <tcp_split_unsent_seg+0x1ac>)
 801aa68:	f005 ffae 	bl	80209c8 <iprintf>
    return ERR_VAL;
 801aa6c:	f06f 0005 	mvn.w	r0, #5
 801aa70:	e76f      	b.n	801a952 <tcp_split_unsent_seg+0x7e>
 801aa72:	bf00      	nop
 801aa74:	20036164 	.word	0x20036164
 801aa78:	0803e780 	.word	0x0803e780
 801aa7c:	0803e978 	.word	0x0803e978
 801aa80:	0802697c 	.word	0x0802697c
 801aa84:	0803e968 	.word	0x0803e968
 801aa88:	0803e920 	.word	0x0803e920
 801aa8c:	0803e944 	.word	0x0803e944

0801aa90 <tcp_enqueue_flags>:
{
 801aa90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801aa94:	f011 0803 	ands.w	r8, r1, #3
{
 801aa98:	b083      	sub	sp, #12
 801aa9a:	460d      	mov	r5, r1
 801aa9c:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801aa9e:	d04a      	beq.n	801ab36 <tcp_enqueue_flags+0xa6>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801aaa0:	2c00      	cmp	r4, #0
 801aaa2:	d051      	beq.n	801ab48 <tcp_enqueue_flags+0xb8>
  if (flags & TCP_SYN) {
 801aaa4:	f3c5 0740 	ubfx	r7, r5, #1, #1
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801aaa8:	f44f 7220 	mov.w	r2, #640	; 0x280
 801aaac:	2036      	movs	r0, #54	; 0x36
 801aaae:	ea4f 0987 	mov.w	r9, r7, lsl #2
 801aab2:	4649      	mov	r1, r9
 801aab4:	f7fb fe9e 	bl	80167f4 <pbuf_alloc>
 801aab8:	4606      	mov	r6, r0
 801aaba:	2800      	cmp	r0, #0
 801aabc:	d074      	beq.n	801aba8 <tcp_enqueue_flags+0x118>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801aabe:	8943      	ldrh	r3, [r0, #10]
 801aac0:	454b      	cmp	r3, r9
 801aac2:	d349      	bcc.n	801ab58 <tcp_enqueue_flags+0xc8>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801aac4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801aac6:	4631      	mov	r1, r6
 801aac8:	9700      	str	r7, [sp, #0]
 801aaca:	462a      	mov	r2, r5
 801aacc:	4620      	mov	r0, r4
 801aace:	f7ff fa5b 	bl	8019f88 <tcp_create_segment>
 801aad2:	4606      	mov	r6, r0
 801aad4:	2800      	cmp	r0, #0
 801aad6:	d067      	beq.n	801aba8 <tcp_enqueue_flags+0x118>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801aad8:	68c3      	ldr	r3, [r0, #12]
 801aada:	079a      	lsls	r2, r3, #30
 801aadc:	d150      	bne.n	801ab80 <tcp_enqueue_flags+0xf0>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801aade:	8933      	ldrh	r3, [r6, #8]
 801aae0:	2b00      	cmp	r3, #0
 801aae2:	d141      	bne.n	801ab68 <tcp_enqueue_flags+0xd8>
  if (pcb->unsent == NULL) {
 801aae4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 801aae6:	b90a      	cbnz	r2, 801aaec <tcp_enqueue_flags+0x5c>
 801aae8:	e048      	b.n	801ab7c <tcp_enqueue_flags+0xec>
 801aaea:	461a      	mov	r2, r3
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801aaec:	6813      	ldr	r3, [r2, #0]
 801aaee:	2b00      	cmp	r3, #0
 801aaf0:	d1fb      	bne.n	801aaea <tcp_enqueue_flags+0x5a>
    useg->next = seg;
 801aaf2:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 801aaf4:	2300      	movs	r3, #0
 801aaf6:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801aafa:	f1b8 0f00 	cmp.w	r8, #0
 801aafe:	d002      	beq.n	801ab06 <tcp_enqueue_flags+0x76>
    pcb->snd_lbb++;
 801ab00:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801ab02:	3301      	adds	r3, #1
 801ab04:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 801ab06:	07eb      	lsls	r3, r5, #31
 801ab08:	d410      	bmi.n	801ab2c <tcp_enqueue_flags+0x9c>
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801ab0a:	6870      	ldr	r0, [r6, #4]
 801ab0c:	f7fb ff6c 	bl	80169e8 <pbuf_clen>
 801ab10:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 801ab14:	4418      	add	r0, r3
 801ab16:	b280      	uxth	r0, r0
 801ab18:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 801ab1c:	b118      	cbz	r0, 801ab26 <tcp_enqueue_flags+0x96>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801ab1e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 801ab20:	2800      	cmp	r0, #0
 801ab22:	d035      	beq.n	801ab90 <tcp_enqueue_flags+0x100>
  return ERR_OK;
 801ab24:	2000      	movs	r0, #0
}
 801ab26:	b003      	add	sp, #12
 801ab28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tcp_set_flags(pcb, TF_FIN);
 801ab2c:	8b63      	ldrh	r3, [r4, #26]
 801ab2e:	f043 0320 	orr.w	r3, r3, #32
 801ab32:	8363      	strh	r3, [r4, #26]
 801ab34:	e7e9      	b.n	801ab0a <tcp_enqueue_flags+0x7a>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801ab36:	4b23      	ldr	r3, [pc, #140]	; (801abc4 <tcp_enqueue_flags+0x134>)
 801ab38:	f240 4212 	movw	r2, #1042	; 0x412
 801ab3c:	4922      	ldr	r1, [pc, #136]	; (801abc8 <tcp_enqueue_flags+0x138>)
 801ab3e:	4823      	ldr	r0, [pc, #140]	; (801abcc <tcp_enqueue_flags+0x13c>)
 801ab40:	f005 ff42 	bl	80209c8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801ab44:	2c00      	cmp	r4, #0
 801ab46:	d1ad      	bne.n	801aaa4 <tcp_enqueue_flags+0x14>
 801ab48:	4b1e      	ldr	r3, [pc, #120]	; (801abc4 <tcp_enqueue_flags+0x134>)
 801ab4a:	f240 4213 	movw	r2, #1043	; 0x413
 801ab4e:	4920      	ldr	r1, [pc, #128]	; (801abd0 <tcp_enqueue_flags+0x140>)
 801ab50:	481e      	ldr	r0, [pc, #120]	; (801abcc <tcp_enqueue_flags+0x13c>)
 801ab52:	f005 ff39 	bl	80209c8 <iprintf>
 801ab56:	e7a5      	b.n	801aaa4 <tcp_enqueue_flags+0x14>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801ab58:	4b1a      	ldr	r3, [pc, #104]	; (801abc4 <tcp_enqueue_flags+0x134>)
 801ab5a:	f240 423a 	movw	r2, #1082	; 0x43a
 801ab5e:	491d      	ldr	r1, [pc, #116]	; (801abd4 <tcp_enqueue_flags+0x144>)
 801ab60:	481a      	ldr	r0, [pc, #104]	; (801abcc <tcp_enqueue_flags+0x13c>)
 801ab62:	f005 ff31 	bl	80209c8 <iprintf>
 801ab66:	e7ad      	b.n	801aac4 <tcp_enqueue_flags+0x34>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801ab68:	f240 4243 	movw	r2, #1091	; 0x443
 801ab6c:	4b15      	ldr	r3, [pc, #84]	; (801abc4 <tcp_enqueue_flags+0x134>)
 801ab6e:	491a      	ldr	r1, [pc, #104]	; (801abd8 <tcp_enqueue_flags+0x148>)
 801ab70:	4816      	ldr	r0, [pc, #88]	; (801abcc <tcp_enqueue_flags+0x13c>)
 801ab72:	f005 ff29 	bl	80209c8 <iprintf>
  if (pcb->unsent == NULL) {
 801ab76:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 801ab78:	2a00      	cmp	r2, #0
 801ab7a:	d1b7      	bne.n	801aaec <tcp_enqueue_flags+0x5c>
    pcb->unsent = seg;
 801ab7c:	66e6      	str	r6, [r4, #108]	; 0x6c
 801ab7e:	e7b9      	b.n	801aaf4 <tcp_enqueue_flags+0x64>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801ab80:	4b10      	ldr	r3, [pc, #64]	; (801abc4 <tcp_enqueue_flags+0x134>)
 801ab82:	f240 4242 	movw	r2, #1090	; 0x442
 801ab86:	4915      	ldr	r1, [pc, #84]	; (801abdc <tcp_enqueue_flags+0x14c>)
 801ab88:	4810      	ldr	r0, [pc, #64]	; (801abcc <tcp_enqueue_flags+0x13c>)
 801ab8a:	f005 ff1d 	bl	80209c8 <iprintf>
 801ab8e:	e7a6      	b.n	801aade <tcp_enqueue_flags+0x4e>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801ab90:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
 801ab92:	2c00      	cmp	r4, #0
 801ab94:	d1c7      	bne.n	801ab26 <tcp_enqueue_flags+0x96>
 801ab96:	4b0b      	ldr	r3, [pc, #44]	; (801abc4 <tcp_enqueue_flags+0x134>)
 801ab98:	f240 4266 	movw	r2, #1126	; 0x466
 801ab9c:	4910      	ldr	r1, [pc, #64]	; (801abe0 <tcp_enqueue_flags+0x150>)
 801ab9e:	480b      	ldr	r0, [pc, #44]	; (801abcc <tcp_enqueue_flags+0x13c>)
 801aba0:	f005 ff12 	bl	80209c8 <iprintf>
  return ERR_OK;
 801aba4:	4620      	mov	r0, r4
 801aba6:	e7be      	b.n	801ab26 <tcp_enqueue_flags+0x96>
    TCP_STATS_INC(tcp.memerr);
 801aba8:	490e      	ldr	r1, [pc, #56]	; (801abe4 <tcp_enqueue_flags+0x154>)
    return ERR_MEM;
 801abaa:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801abae:	8b62      	ldrh	r2, [r4, #26]
    TCP_STATS_INC(tcp.memerr);
 801abb0:	f8b1 309c 	ldrh.w	r3, [r1, #156]	; 0x9c
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801abb4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    TCP_STATS_INC(tcp.memerr);
 801abb8:	3301      	adds	r3, #1
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801abba:	8362      	strh	r2, [r4, #26]
    TCP_STATS_INC(tcp.memerr);
 801abbc:	f8a1 309c 	strh.w	r3, [r1, #156]	; 0x9c
    return ERR_MEM;
 801abc0:	e7b1      	b.n	801ab26 <tcp_enqueue_flags+0x96>
 801abc2:	bf00      	nop
 801abc4:	0803e780 	.word	0x0803e780
 801abc8:	0803e52c 	.word	0x0803e52c
 801abcc:	0802697c 	.word	0x0802697c
 801abd0:	0803e584 	.word	0x0803e584
 801abd4:	0803e5a4 	.word	0x0803e5a4
 801abd8:	0803e5f8 	.word	0x0803e5f8
 801abdc:	0803e5e0 	.word	0x0803e5e0
 801abe0:	0803e624 	.word	0x0803e624
 801abe4:	20036164 	.word	0x20036164

0801abe8 <tcp_send_fin>:
{
 801abe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801abea:	4605      	mov	r5, r0
 801abec:	b308      	cbz	r0, 801ac32 <tcp_send_fin+0x4a>
  if (pcb->unsent != NULL) {
 801abee:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 801abf0:	b90c      	cbnz	r4, 801abf6 <tcp_send_fin+0xe>
 801abf2:	e00a      	b.n	801ac0a <tcp_send_fin+0x22>
 801abf4:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801abf6:	6823      	ldr	r3, [r4, #0]
 801abf8:	2b00      	cmp	r3, #0
 801abfa:	d1fb      	bne.n	801abf4 <tcp_send_fin+0xc>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801abfc:	68e3      	ldr	r3, [r4, #12]
 801abfe:	8998      	ldrh	r0, [r3, #12]
 801ac00:	f7f9 ff1c 	bl	8014a3c <lwip_htons>
 801ac04:	f010 0607 	ands.w	r6, r0, #7
 801ac08:	d005      	beq.n	801ac16 <tcp_send_fin+0x2e>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801ac0a:	4628      	mov	r0, r5
 801ac0c:	2101      	movs	r1, #1
}
 801ac0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801ac12:	f7ff bf3d 	b.w	801aa90 <tcp_enqueue_flags>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801ac16:	68e3      	ldr	r3, [r4, #12]
 801ac18:	2001      	movs	r0, #1
 801ac1a:	899f      	ldrh	r7, [r3, #12]
 801ac1c:	f7f9 ff0e 	bl	8014a3c <lwip_htons>
      tcp_set_flags(pcb, TF_FIN);
 801ac20:	8b6b      	ldrh	r3, [r5, #26]
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801ac22:	4338      	orrs	r0, r7
 801ac24:	68e2      	ldr	r2, [r4, #12]
      tcp_set_flags(pcb, TF_FIN);
 801ac26:	f043 0320 	orr.w	r3, r3, #32
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801ac2a:	8190      	strh	r0, [r2, #12]
}
 801ac2c:	4630      	mov	r0, r6
      tcp_set_flags(pcb, TF_FIN);
 801ac2e:	836b      	strh	r3, [r5, #26]
}
 801ac30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801ac32:	4b04      	ldr	r3, [pc, #16]	; (801ac44 <tcp_send_fin+0x5c>)
 801ac34:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801ac38:	4903      	ldr	r1, [pc, #12]	; (801ac48 <tcp_send_fin+0x60>)
 801ac3a:	4804      	ldr	r0, [pc, #16]	; (801ac4c <tcp_send_fin+0x64>)
 801ac3c:	f005 fec4 	bl	80209c8 <iprintf>
 801ac40:	e7d5      	b.n	801abee <tcp_send_fin+0x6>
 801ac42:	bf00      	nop
 801ac44:	0803e780 	.word	0x0803e780
 801ac48:	0803e904 	.word	0x0803e904
 801ac4c:	0802697c 	.word	0x0802697c

0801ac50 <tcp_rexmit_rto_prepare>:
{
 801ac50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801ac52:	4605      	mov	r5, r0
 801ac54:	b370      	cbz	r0, 801acb4 <tcp_rexmit_rto_prepare+0x64>
  if (pcb->unacked == NULL) {
 801ac56:	6f2c      	ldr	r4, [r5, #112]	; 0x70
 801ac58:	b924      	cbnz	r4, 801ac64 <tcp_rexmit_rto_prepare+0x14>
 801ac5a:	e028      	b.n	801acae <tcp_rexmit_rto_prepare+0x5e>
    if (tcp_output_segment_busy(seg)) {
 801ac5c:	f7ff f92a 	bl	8019eb4 <tcp_output_segment_busy>
 801ac60:	bb28      	cbnz	r0, 801acae <tcp_rexmit_rto_prepare+0x5e>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801ac62:	6824      	ldr	r4, [r4, #0]
 801ac64:	6823      	ldr	r3, [r4, #0]
    if (tcp_output_segment_busy(seg)) {
 801ac66:	4620      	mov	r0, r4
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801ac68:	2b00      	cmp	r3, #0
 801ac6a:	d1f7      	bne.n	801ac5c <tcp_rexmit_rto_prepare+0xc>
  if (tcp_output_segment_busy(seg)) {
 801ac6c:	f7ff f922 	bl	8019eb4 <tcp_output_segment_busy>
 801ac70:	4606      	mov	r6, r0
 801ac72:	b9e0      	cbnz	r0, 801acae <tcp_rexmit_rto_prepare+0x5e>
  tcp_set_flags(pcb, TF_RTO);
 801ac74:	8b6b      	ldrh	r3, [r5, #26]
  seg->next = pcb->unsent;
 801ac76:	6eea      	ldr	r2, [r5, #108]	; 0x6c
  pcb->unsent = pcb->unacked;
 801ac78:	6f29      	ldr	r1, [r5, #112]	; 0x70
  tcp_set_flags(pcb, TF_RTO);
 801ac7a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  seg->next = pcb->unsent;
 801ac7e:	6022      	str	r2, [r4, #0]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801ac80:	68e2      	ldr	r2, [r4, #12]
  tcp_set_flags(pcb, TF_RTO);
 801ac82:	836b      	strh	r3, [r5, #26]
  pcb->unacked = NULL;
 801ac84:	e9c5 101b 	strd	r1, r0, [r5, #108]	; 0x6c
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801ac88:	6850      	ldr	r0, [r2, #4]
 801ac8a:	f7f9 fedb 	bl	8014a44 <lwip_htonl>
 801ac8e:	68e3      	ldr	r3, [r4, #12]
 801ac90:	4607      	mov	r7, r0
 801ac92:	8924      	ldrh	r4, [r4, #8]
 801ac94:	8998      	ldrh	r0, [r3, #12]
 801ac96:	f7f9 fed1 	bl	8014a3c <lwip_htons>
 801ac9a:	f010 0303 	ands.w	r3, r0, #3
 801ac9e:	4427      	add	r7, r4
  return ERR_OK;
 801aca0:	4630      	mov	r0, r6
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801aca2:	bf18      	it	ne
 801aca4:	2301      	movne	r3, #1
  pcb->rttest = 0;
 801aca6:	636e      	str	r6, [r5, #52]	; 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801aca8:	443b      	add	r3, r7
 801acaa:	64eb      	str	r3, [r5, #76]	; 0x4c
}
 801acac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_VAL;
 801acae:	f06f 0005 	mvn.w	r0, #5
}
 801acb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801acb4:	4b03      	ldr	r3, [pc, #12]	; (801acc4 <tcp_rexmit_rto_prepare+0x74>)
 801acb6:	f240 6263 	movw	r2, #1635	; 0x663
 801acba:	4903      	ldr	r1, [pc, #12]	; (801acc8 <tcp_rexmit_rto_prepare+0x78>)
 801acbc:	4803      	ldr	r0, [pc, #12]	; (801accc <tcp_rexmit_rto_prepare+0x7c>)
 801acbe:	f005 fe83 	bl	80209c8 <iprintf>
 801acc2:	e7c8      	b.n	801ac56 <tcp_rexmit_rto_prepare+0x6>
 801acc4:	0803e780 	.word	0x0803e780
 801acc8:	0803e888 	.word	0x0803e888
 801accc:	0802697c 	.word	0x0802697c

0801acd0 <tcp_rexmit>:
{
 801acd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801acd2:	4607      	mov	r7, r0
 801acd4:	b378      	cbz	r0, 801ad36 <tcp_rexmit+0x66>
  if (pcb->unacked == NULL) {
 801acd6:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 801acd8:	2e00      	cmp	r6, #0
 801acda:	d034      	beq.n	801ad46 <tcp_rexmit+0x76>
  if (tcp_output_segment_busy(seg)) {
 801acdc:	4630      	mov	r0, r6
 801acde:	f7ff f8e9 	bl	8019eb4 <tcp_output_segment_busy>
 801ace2:	bb80      	cbnz	r0, 801ad46 <tcp_rexmit+0x76>
  pcb->unacked = seg->next;
 801ace4:	6832      	ldr	r2, [r6, #0]
  cur_seg = &(pcb->unsent);
 801ace6:	f107 056c 	add.w	r5, r7, #108	; 0x6c
  while (*cur_seg &&
 801acea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  pcb->unacked = seg->next;
 801acec:	673a      	str	r2, [r7, #112]	; 0x70
  while (*cur_seg &&
 801acee:	b91b      	cbnz	r3, 801acf8 <tcp_rexmit+0x28>
 801acf0:	e00f      	b.n	801ad12 <tcp_rexmit+0x42>
    cur_seg = &((*cur_seg)->next );
 801acf2:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 801acf4:	682b      	ldr	r3, [r5, #0]
 801acf6:	b163      	cbz	r3, 801ad12 <tcp_rexmit+0x42>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801acf8:	68db      	ldr	r3, [r3, #12]
 801acfa:	6858      	ldr	r0, [r3, #4]
 801acfc:	f7f9 fea2 	bl	8014a44 <lwip_htonl>
 801ad00:	68f3      	ldr	r3, [r6, #12]
 801ad02:	4604      	mov	r4, r0
 801ad04:	6858      	ldr	r0, [r3, #4]
 801ad06:	f7f9 fe9d 	bl	8014a44 <lwip_htonl>
 801ad0a:	1a20      	subs	r0, r4, r0
  while (*cur_seg &&
 801ad0c:	2800      	cmp	r0, #0
 801ad0e:	dbf0      	blt.n	801acf2 <tcp_rexmit+0x22>
 801ad10:	682b      	ldr	r3, [r5, #0]
  seg->next = *cur_seg;
 801ad12:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 801ad14:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 801ad16:	6833      	ldr	r3, [r6, #0]
 801ad18:	b153      	cbz	r3, 801ad30 <tcp_rexmit+0x60>
  if (pcb->nrtx < 0xFF) {
 801ad1a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 801ad1e:	2bff      	cmp	r3, #255	; 0xff
 801ad20:	d002      	beq.n	801ad28 <tcp_rexmit+0x58>
    ++pcb->nrtx;
 801ad22:	3301      	adds	r3, #1
 801ad24:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  pcb->rttest = 0;
 801ad28:	2300      	movs	r3, #0
  return ERR_OK;
 801ad2a:	4618      	mov	r0, r3
  pcb->rttest = 0;
 801ad2c:	637b      	str	r3, [r7, #52]	; 0x34
}
 801ad2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 801ad30:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 801ad34:	e7f1      	b.n	801ad1a <tcp_rexmit+0x4a>
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801ad36:	4b05      	ldr	r3, [pc, #20]	; (801ad4c <tcp_rexmit+0x7c>)
 801ad38:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801ad3c:	4904      	ldr	r1, [pc, #16]	; (801ad50 <tcp_rexmit+0x80>)
 801ad3e:	4805      	ldr	r0, [pc, #20]	; (801ad54 <tcp_rexmit+0x84>)
 801ad40:	f005 fe42 	bl	80209c8 <iprintf>
 801ad44:	e7c7      	b.n	801acd6 <tcp_rexmit+0x6>
    return ERR_VAL;
 801ad46:	f06f 0005 	mvn.w	r0, #5
}
 801ad4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ad4c:	0803e780 	.word	0x0803e780
 801ad50:	0803e810 	.word	0x0803e810
 801ad54:	0802697c 	.word	0x0802697c

0801ad58 <tcp_rexmit_fast>:
{
 801ad58:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801ad5a:	4604      	mov	r4, r0
 801ad5c:	b338      	cbz	r0, 801adae <tcp_rexmit_fast+0x56>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801ad5e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801ad60:	b113      	cbz	r3, 801ad68 <tcp_rexmit_fast+0x10>
 801ad62:	8b63      	ldrh	r3, [r4, #26]
 801ad64:	075b      	lsls	r3, r3, #29
 801ad66:	d500      	bpl.n	801ad6a <tcp_rexmit_fast+0x12>
}
 801ad68:	bd10      	pop	{r4, pc}
    if (tcp_rexmit(pcb) == ERR_OK) {
 801ad6a:	4620      	mov	r0, r4
 801ad6c:	f7ff ffb0 	bl	801acd0 <tcp_rexmit>
 801ad70:	2800      	cmp	r0, #0
 801ad72:	d1f9      	bne.n	801ad68 <tcp_rexmit_fast+0x10>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801ad74:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 801ad78:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 801ad7c:	429a      	cmp	r2, r3
 801ad7e:	bf38      	it	cc
 801ad80:	0853      	lsrcc	r3, r2, #1
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801ad82:	8e62      	ldrh	r2, [r4, #50]	; 0x32
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801ad84:	bf28      	it	cs
 801ad86:	085b      	lsrcs	r3, r3, #1
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801ad88:	0051      	lsls	r1, r2, #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801ad8a:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801ad8e:	428b      	cmp	r3, r1
 801ad90:	d202      	bcs.n	801ad98 <tcp_rexmit_fast+0x40>
        pcb->ssthresh = 2 * pcb->mss;
 801ad92:	b28b      	uxth	r3, r1
 801ad94:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801ad98:	440a      	add	r2, r1
      tcp_set_flags(pcb, TF_INFR);
 801ad9a:	8b61      	ldrh	r1, [r4, #26]
      pcb->rtime = 0;
 801ad9c:	2000      	movs	r0, #0
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801ad9e:	4413      	add	r3, r2
      tcp_set_flags(pcb, TF_INFR);
 801ada0:	f041 0204 	orr.w	r2, r1, #4
      pcb->rtime = 0;
 801ada4:	8620      	strh	r0, [r4, #48]	; 0x30
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801ada6:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801adaa:	8362      	strh	r2, [r4, #26]
}
 801adac:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801adae:	4b04      	ldr	r3, [pc, #16]	; (801adc0 <tcp_rexmit_fast+0x68>)
 801adb0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801adb4:	4903      	ldr	r1, [pc, #12]	; (801adc4 <tcp_rexmit_fast+0x6c>)
 801adb6:	4804      	ldr	r0, [pc, #16]	; (801adc8 <tcp_rexmit_fast+0x70>)
 801adb8:	f005 fe06 	bl	80209c8 <iprintf>
 801adbc:	e7cf      	b.n	801ad5e <tcp_rexmit_fast+0x6>
 801adbe:	bf00      	nop
 801adc0:	0803e780 	.word	0x0803e780
 801adc4:	0803e828 	.word	0x0803e828
 801adc8:	0802697c 	.word	0x0802697c

0801adcc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801adcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801add0:	b084      	sub	sp, #16
 801add2:	4682      	mov	sl, r0
 801add4:	460e      	mov	r6, r1
 801add6:	4617      	mov	r7, r2
 801add8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801adda:	461c      	mov	r4, r3
{
 801addc:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
 801ade0:	f8bd 9038 	ldrh.w	r9, [sp, #56]	; 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801ade4:	b303      	cbz	r3, 801ae28 <tcp_rst+0x5c>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801ade6:	b345      	cbz	r5, 801ae3a <tcp_rst+0x6e>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801ade8:	4630      	mov	r0, r6
 801adea:	f246 0608 	movw	r6, #24584	; 0x6008
 801adee:	f7f9 fe29 	bl	8014a44 <lwip_htonl>
 801adf2:	2114      	movs	r1, #20
 801adf4:	4602      	mov	r2, r0
 801adf6:	f8cd 9000 	str.w	r9, [sp]
 801adfa:	4643      	mov	r3, r8
 801adfc:	4638      	mov	r0, r7
 801adfe:	e9cd 1601 	strd	r1, r6, [sp, #4]
 801ae02:	2100      	movs	r1, #0
 801ae04:	f7ff f948 	bl	801a098 <tcp_output_alloc_header_common.constprop.4>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801ae08:	4606      	mov	r6, r0
 801ae0a:	b150      	cbz	r0, 801ae22 <tcp_rst+0x56>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801ae0c:	f7ff f9b4 	bl	801a178 <tcp_output_fill_options.isra.0.constprop.5>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801ae10:	462b      	mov	r3, r5
 801ae12:	4622      	mov	r2, r4
 801ae14:	4631      	mov	r1, r6
 801ae16:	4650      	mov	r0, sl
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801ae18:	b004      	add	sp, #16
 801ae1a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801ae1e:	f7ff b9bb 	b.w	801a198 <tcp_output_control_segment>
}
 801ae22:	b004      	add	sp, #16
 801ae24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801ae28:	4b08      	ldr	r3, [pc, #32]	; (801ae4c <tcp_rst+0x80>)
 801ae2a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801ae2e:	4908      	ldr	r1, [pc, #32]	; (801ae50 <tcp_rst+0x84>)
 801ae30:	4808      	ldr	r0, [pc, #32]	; (801ae54 <tcp_rst+0x88>)
 801ae32:	f005 fdc9 	bl	80209c8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801ae36:	2d00      	cmp	r5, #0
 801ae38:	d1d6      	bne.n	801ade8 <tcp_rst+0x1c>
 801ae3a:	4b04      	ldr	r3, [pc, #16]	; (801ae4c <tcp_rst+0x80>)
 801ae3c:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801ae40:	4905      	ldr	r1, [pc, #20]	; (801ae58 <tcp_rst+0x8c>)
 801ae42:	4804      	ldr	r0, [pc, #16]	; (801ae54 <tcp_rst+0x88>)
 801ae44:	f005 fdc0 	bl	80209c8 <iprintf>
 801ae48:	e7ce      	b.n	801ade8 <tcp_rst+0x1c>
 801ae4a:	bf00      	nop
 801ae4c:	0803e780 	.word	0x0803e780
 801ae50:	0803e8ac 	.word	0x0803e8ac
 801ae54:	0802697c 	.word	0x0802697c
 801ae58:	0803e8c8 	.word	0x0803e8c8

0801ae5c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801ae5c:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801ae5e:	4604      	mov	r4, r0
 801ae60:	b1d8      	cbz	r0, 801ae9a <tcp_send_empty_ack+0x3e>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801ae62:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801ae64:	f7f9 fdee 	bl	8014a44 <lwip_htonl>
 801ae68:	2100      	movs	r1, #0
 801ae6a:	4602      	mov	r2, r0
 801ae6c:	4620      	mov	r0, r4
 801ae6e:	f7ff f959 	bl	801a124 <tcp_output_alloc_header.constprop.3>
  if (p == NULL) {
 801ae72:	4605      	mov	r5, r0
 801ae74:	b1c8      	cbz	r0, 801aeaa <tcp_send_empty_ack+0x4e>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801ae76:	f7ff f97f 	bl	801a178 <tcp_output_fill_options.isra.0.constprop.5>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801ae7a:	1d23      	adds	r3, r4, #4
 801ae7c:	4629      	mov	r1, r5
 801ae7e:	4622      	mov	r2, r4
 801ae80:	4620      	mov	r0, r4
 801ae82:	f7ff f989 	bl	801a198 <tcp_output_control_segment>
  if (err != ERR_OK) {
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801ae86:	8b63      	ldrh	r3, [r4, #26]
  if (err != ERR_OK) {
 801ae88:	b918      	cbnz	r0, 801ae92 <tcp_send_empty_ack+0x36>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801ae8a:	f023 0303 	bic.w	r3, r3, #3
 801ae8e:	8363      	strh	r3, [r4, #26]
  }

  return err;
}
 801ae90:	bd38      	pop	{r3, r4, r5, pc}
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801ae92:	f043 0303 	orr.w	r3, r3, #3
 801ae96:	8363      	strh	r3, [r4, #26]
}
 801ae98:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801ae9a:	4b07      	ldr	r3, [pc, #28]	; (801aeb8 <tcp_send_empty_ack+0x5c>)
 801ae9c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801aea0:	4906      	ldr	r1, [pc, #24]	; (801aebc <tcp_send_empty_ack+0x60>)
 801aea2:	4807      	ldr	r0, [pc, #28]	; (801aec0 <tcp_send_empty_ack+0x64>)
 801aea4:	f005 fd90 	bl	80209c8 <iprintf>
 801aea8:	e7db      	b.n	801ae62 <tcp_send_empty_ack+0x6>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801aeaa:	8b63      	ldrh	r3, [r4, #26]
    return ERR_BUF;
 801aeac:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801aeb0:	f043 0303 	orr.w	r3, r3, #3
 801aeb4:	8363      	strh	r3, [r4, #26]
}
 801aeb6:	bd38      	pop	{r3, r4, r5, pc}
 801aeb8:	0803e780 	.word	0x0803e780
 801aebc:	0803e8e4 	.word	0x0803e8e4
 801aec0:	0802697c 	.word	0x0802697c

0801aec4 <tcp_output>:
{
 801aec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801aec8:	4604      	mov	r4, r0
{
 801aeca:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801aecc:	2800      	cmp	r0, #0
 801aece:	f000 81b3 	beq.w	801b238 <tcp_output+0x374>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801aed2:	7d23      	ldrb	r3, [r4, #20]
 801aed4:	2b01      	cmp	r3, #1
 801aed6:	f000 8137 	beq.w	801b148 <tcp_output+0x284>
  if (tcp_input_pcb == pcb) {
 801aeda:	4bc2      	ldr	r3, [pc, #776]	; (801b1e4 <tcp_output+0x320>)
 801aedc:	681b      	ldr	r3, [r3, #0]
 801aede:	42a3      	cmp	r3, r4
 801aee0:	f000 812e 	beq.w	801b140 <tcp_output+0x27c>
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801aee4:	f8b4 7060 	ldrh.w	r7, [r4, #96]	; 0x60
 801aee8:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
  seg = pcb->unsent;
 801aeec:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801aeee:	429f      	cmp	r7, r3
 801aef0:	bf28      	it	cs
 801aef2:	461f      	movcs	r7, r3
  if (seg == NULL) {
 801aef4:	b955      	cbnz	r5, 801af0c <tcp_output+0x48>
    if (pcb->flags & TF_ACK_NOW) {
 801aef6:	8b63      	ldrh	r3, [r4, #26]
 801aef8:	0799      	lsls	r1, r3, #30
 801aefa:	f100 8142 	bmi.w	801b182 <tcp_output+0x2be>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801aefe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  return ERR_OK;
 801af02:	2000      	movs	r0, #0
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801af04:	8363      	strh	r3, [r4, #26]
}
 801af06:	b005      	add	sp, #20
 801af08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801af0c:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801af0e:	f104 0904 	add.w	r9, r4, #4
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801af12:	2800      	cmp	r0, #0
 801af14:	f040 81b5 	bne.w	801b282 <tcp_output+0x3be>
    return ip_route(src, dst);
 801af18:	4648      	mov	r0, r9
 801af1a:	f003 f8cf 	bl	801e0bc <ip4_route>
 801af1e:	4682      	mov	sl, r0
  if (netif == NULL) {
 801af20:	f1ba 0f00 	cmp.w	sl, #0
 801af24:	f000 81ba 	beq.w	801b29c <tcp_output+0x3d8>
  if (ip_addr_isany(&pcb->local_ip)) {
 801af28:	6823      	ldr	r3, [r4, #0]
 801af2a:	b913      	cbnz	r3, 801af32 <tcp_output+0x6e>
    ip_addr_copy(pcb->local_ip, *local_ip);
 801af2c:	f8da 3004 	ldr.w	r3, [sl, #4]
 801af30:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801af32:	68eb      	ldr	r3, [r5, #12]
 801af34:	6858      	ldr	r0, [r3, #4]
 801af36:	f7f9 fd85 	bl	8014a44 <lwip_htonl>
 801af3a:	892b      	ldrh	r3, [r5, #8]
 801af3c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 801af3e:	1a9b      	subs	r3, r3, r2
 801af40:	4418      	add	r0, r3
 801af42:	42b8      	cmp	r0, r7
 801af44:	f200 8108 	bhi.w	801b158 <tcp_output+0x294>
  pcb->persist_backoff = 0;
 801af48:	2300      	movs	r3, #0
  useg = pcb->unacked;
 801af4a:	f8d4 8070 	ldr.w	r8, [r4, #112]	; 0x70
  pcb->persist_backoff = 0;
 801af4e:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
  if (useg != NULL) {
 801af52:	f1b8 0f00 	cmp.w	r8, #0
 801af56:	d101      	bne.n	801af5c <tcp_output+0x98>
 801af58:	e004      	b.n	801af64 <tcp_output+0xa0>
 801af5a:	4698      	mov	r8, r3
    for (; useg->next != NULL; useg = useg->next);
 801af5c:	f8d8 3000 	ldr.w	r3, [r8]
 801af60:	2b00      	cmp	r3, #0
 801af62:	d1fa      	bne.n	801af5a <tcp_output+0x96>
    LWIP_ASSERT("RST not expected here!",
 801af64:	464e      	mov	r6, r9
 801af66:	e048      	b.n	801affa <tcp_output+0x136>
    if (pcb->state != SYN_SENT) {
 801af68:	7d23      	ldrb	r3, [r4, #20]
    pcb->unsent = seg->next;
 801af6a:	682a      	ldr	r2, [r5, #0]
    if (pcb->state != SYN_SENT) {
 801af6c:	2b02      	cmp	r3, #2
    pcb->unsent = seg->next;
 801af6e:	66e2      	str	r2, [r4, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801af70:	d003      	beq.n	801af7a <tcp_output+0xb6>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801af72:	8b63      	ldrh	r3, [r4, #26]
 801af74:	f023 0303 	bic.w	r3, r3, #3
 801af78:	8363      	strh	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801af7a:	68eb      	ldr	r3, [r5, #12]
 801af7c:	6858      	ldr	r0, [r3, #4]
 801af7e:	f7f9 fd61 	bl	8014a44 <lwip_htonl>
 801af82:	68eb      	ldr	r3, [r5, #12]
 801af84:	4681      	mov	r9, r0
 801af86:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 801af8a:	8998      	ldrh	r0, [r3, #12]
 801af8c:	f7f9 fd56 	bl	8014a3c <lwip_htons>
 801af90:	f010 0003 	ands.w	r0, r0, #3
 801af94:	44d9      	add	r9, fp
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801af96:	6d23      	ldr	r3, [r4, #80]	; 0x50
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801af98:	bf18      	it	ne
 801af9a:	2001      	movne	r0, #1
 801af9c:	4448      	add	r0, r9
    if (TCP_TCPLEN(seg) > 0) {
 801af9e:	f8b5 9008 	ldrh.w	r9, [r5, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801afa2:	1a1b      	subs	r3, r3, r0
 801afa4:	2b00      	cmp	r3, #0
    if (TCP_TCPLEN(seg) > 0) {
 801afa6:	68eb      	ldr	r3, [r5, #12]
      pcb->snd_nxt = snd_nxt;
 801afa8:	bfb8      	it	lt
 801afaa:	6520      	strlt	r0, [r4, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 801afac:	8998      	ldrh	r0, [r3, #12]
 801afae:	f7f9 fd45 	bl	8014a3c <lwip_htons>
 801afb2:	f010 0003 	ands.w	r0, r0, #3
 801afb6:	bf18      	it	ne
 801afb8:	2001      	movne	r0, #1
 801afba:	eb10 0f09 	cmn.w	r0, r9
 801afbe:	f000 80ee 	beq.w	801b19e <tcp_output+0x2da>
      seg->next = NULL;
 801afc2:	2200      	movs	r2, #0
      if (pcb->unacked == NULL) {
 801afc4:	6f23      	ldr	r3, [r4, #112]	; 0x70
      seg->next = NULL;
 801afc6:	602a      	str	r2, [r5, #0]
      if (pcb->unacked == NULL) {
 801afc8:	2b00      	cmp	r3, #0
 801afca:	f000 80ec 	beq.w	801b1a6 <tcp_output+0x2e2>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801afce:	68eb      	ldr	r3, [r5, #12]
 801afd0:	6858      	ldr	r0, [r3, #4]
 801afd2:	f7f9 fd37 	bl	8014a44 <lwip_htonl>
 801afd6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801afda:	4681      	mov	r9, r0
 801afdc:	6858      	ldr	r0, [r3, #4]
 801afde:	f7f9 fd31 	bl	8014a44 <lwip_htonl>
 801afe2:	eba9 0000 	sub.w	r0, r9, r0
 801afe6:	2800      	cmp	r0, #0
 801afe8:	f2c0 812e 	blt.w	801b248 <tcp_output+0x384>
          useg->next = seg;
 801afec:	f8c8 5000 	str.w	r5, [r8]
 801aff0:	46a8      	mov	r8, r5
    seg = pcb->unsent;
 801aff2:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  while (seg != NULL &&
 801aff4:	2d00      	cmp	r5, #0
 801aff6:	f000 8148 	beq.w	801b28a <tcp_output+0x3c6>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801affa:	68eb      	ldr	r3, [r5, #12]
 801affc:	6858      	ldr	r0, [r3, #4]
 801affe:	f7f9 fd21 	bl	8014a44 <lwip_htonl>
 801b002:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801b004:	892a      	ldrh	r2, [r5, #8]
 801b006:	1ac0      	subs	r0, r0, r3
 801b008:	4410      	add	r0, r2
  while (seg != NULL &&
 801b00a:	42b8      	cmp	r0, r7
 801b00c:	f200 813f 	bhi.w	801b28e <tcp_output+0x3ca>
    LWIP_ASSERT("RST not expected here!",
 801b010:	68eb      	ldr	r3, [r5, #12]
 801b012:	8998      	ldrh	r0, [r3, #12]
 801b014:	f7f9 fd12 	bl	8014a3c <lwip_htons>
 801b018:	0742      	lsls	r2, r0, #29
 801b01a:	f100 80b8 	bmi.w	801b18e <tcp_output+0x2ca>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801b01e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801b020:	b163      	cbz	r3, 801b03c <tcp_output+0x178>
 801b022:	8b62      	ldrh	r2, [r4, #26]
 801b024:	f012 0f44 	tst.w	r2, #68	; 0x44
 801b028:	4613      	mov	r3, r2
 801b02a:	d107      	bne.n	801b03c <tcp_output+0x178>
 801b02c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801b02e:	2900      	cmp	r1, #0
 801b030:	f000 80c2 	beq.w	801b1b8 <tcp_output+0x2f4>
 801b034:	6808      	ldr	r0, [r1, #0]
 801b036:	2800      	cmp	r0, #0
 801b038:	f000 80b8 	beq.w	801b1ac <tcp_output+0x2e8>
    if (pcb->state != SYN_SENT) {
 801b03c:	7d23      	ldrb	r3, [r4, #20]
 801b03e:	2b02      	cmp	r3, #2
 801b040:	d009      	beq.n	801b056 <tcp_output+0x192>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801b042:	68eb      	ldr	r3, [r5, #12]
 801b044:	2010      	movs	r0, #16
 801b046:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 801b04a:	f7f9 fcf7 	bl	8014a3c <lwip_htons>
 801b04e:	68eb      	ldr	r3, [r5, #12]
 801b050:	ea49 0000 	orr.w	r0, r9, r0
 801b054:	8198      	strh	r0, [r3, #12]
  if (tcp_output_segment_busy(seg)) {
 801b056:	4628      	mov	r0, r5
 801b058:	f7fe ff2c 	bl	8019eb4 <tcp_output_segment_busy>
 801b05c:	2800      	cmp	r0, #0
 801b05e:	d183      	bne.n	801af68 <tcp_output+0xa4>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801b060:	f8d5 900c 	ldr.w	r9, [r5, #12]
 801b064:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801b066:	f7f9 fced 	bl	8014a44 <lwip_htonl>
 801b06a:	f8c9 0008 	str.w	r0, [r9, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801b06e:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 801b070:	f8d5 900c 	ldr.w	r9, [r5, #12]
 801b074:	f7f9 fce2 	bl	8014a3c <lwip_htons>
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801b078:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 801b07a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801b07c:	f8a9 000e 	strh.w	r0, [r9, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801b080:	4413      	add	r3, r2
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801b082:	f8d5 900c 	ldr.w	r9, [r5, #12]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801b086:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801b088:	7aab      	ldrb	r3, [r5, #10]
 801b08a:	07db      	lsls	r3, r3, #31
 801b08c:	f100 80c3 	bmi.w	801b216 <tcp_output+0x352>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801b090:	f109 0b14 	add.w	fp, r9, #20
  if (pcb->rtime < 0) {
 801b094:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 801b098:	2b00      	cmp	r3, #0
 801b09a:	da01      	bge.n	801b0a0 <tcp_output+0x1dc>
    pcb->rtime = 0;
 801b09c:	2300      	movs	r3, #0
 801b09e:	8623      	strh	r3, [r4, #48]	; 0x30
  if (pcb->rttest == 0) {
 801b0a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b0a2:	2b00      	cmp	r3, #0
 801b0a4:	f000 80ac 	beq.w	801b200 <tcp_output+0x33c>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801b0a8:	6868      	ldr	r0, [r5, #4]
  seg->tcphdr->chksum = 0;
 801b0aa:	2100      	movs	r1, #0
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801b0ac:	6843      	ldr	r3, [r0, #4]
  seg->p->tot_len -= len;
 801b0ae:	8902      	ldrh	r2, [r0, #8]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801b0b0:	eba9 0303 	sub.w	r3, r9, r3
  seg->p->len -= len;
 801b0b4:	f8b0 c00a 	ldrh.w	ip, [r0, #10]
  seg->p->payload = seg->tcphdr;
 801b0b8:	f8c0 9004 	str.w	r9, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801b0bc:	b29b      	uxth	r3, r3
  seg->p->tot_len -= len;
 801b0be:	1ad2      	subs	r2, r2, r3
  seg->p->len -= len;
 801b0c0:	ebac 0303 	sub.w	r3, ip, r3
  seg->p->tot_len -= len;
 801b0c4:	b292      	uxth	r2, r2
  seg->p->len -= len;
 801b0c6:	8143      	strh	r3, [r0, #10]
  seg->p->tot_len -= len;
 801b0c8:	8102      	strh	r2, [r0, #8]
  seg->tcphdr->chksum = 0;
 801b0ca:	f889 1010 	strb.w	r1, [r9, #16]
 801b0ce:	f889 1011 	strb.w	r1, [r9, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801b0d2:	7aab      	ldrb	r3, [r5, #10]
 801b0d4:	009b      	lsls	r3, r3, #2
 801b0d6:	f003 0304 	and.w	r3, r3, #4
 801b0da:	3314      	adds	r3, #20
 801b0dc:	444b      	add	r3, r9
 801b0de:	459b      	cmp	fp, r3
 801b0e0:	d00a      	beq.n	801b0f8 <tcp_output+0x234>
 801b0e2:	f240 621c 	movw	r2, #1564	; 0x61c
 801b0e6:	4b40      	ldr	r3, [pc, #256]	; (801b1e8 <tcp_output+0x324>)
 801b0e8:	4940      	ldr	r1, [pc, #256]	; (801b1ec <tcp_output+0x328>)
 801b0ea:	4841      	ldr	r0, [pc, #260]	; (801b1f0 <tcp_output+0x32c>)
 801b0ec:	f005 fc6c 	bl	80209c8 <iprintf>
 801b0f0:	6868      	ldr	r0, [r5, #4]
 801b0f2:	f8d5 900c 	ldr.w	r9, [r5, #12]
 801b0f6:	8902      	ldrh	r2, [r0, #8]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 801b0f8:	4623      	mov	r3, r4
 801b0fa:	2106      	movs	r1, #6
 801b0fc:	9600      	str	r6, [sp, #0]
 801b0fe:	f7fa fa59 	bl	80155b4 <ip_chksum_pseudo>
  TCP_STATS_INC(tcp.xmit);
 801b102:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 801b1fc <tcp_output+0x338>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801b106:	f04f 0e06 	mov.w	lr, #6
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 801b10a:	f8a9 0010 	strh.w	r0, [r9, #16]
  TCP_STATS_INC(tcp.xmit);
 801b10e:	f8bc 3090 	ldrh.w	r3, [ip, #144]	; 0x90
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801b112:	4632      	mov	r2, r6
 801b114:	6868      	ldr	r0, [r5, #4]
 801b116:	4621      	mov	r1, r4
  TCP_STATS_INC(tcp.xmit);
 801b118:	3301      	adds	r3, #1
 801b11a:	f8ac 3090 	strh.w	r3, [ip, #144]	; 0x90
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801b11e:	7ae3      	ldrb	r3, [r4, #11]
 801b120:	e9cd ea01 	strd	lr, sl, [sp, #4]
 801b124:	f894 c00a 	ldrb.w	ip, [r4, #10]
 801b128:	f8cd c000 	str.w	ip, [sp]
 801b12c:	f003 f9de 	bl	801e4ec <ip4_output_if>
    if (err != ERR_OK) {
 801b130:	2800      	cmp	r0, #0
 801b132:	f43f af19 	beq.w	801af68 <tcp_output+0xa4>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b136:	8b63      	ldrh	r3, [r4, #26]
 801b138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b13c:	8363      	strh	r3, [r4, #26]
      return err;
 801b13e:	e6e2      	b.n	801af06 <tcp_output+0x42>
    return ERR_OK;
 801b140:	2000      	movs	r0, #0
}
 801b142:	b005      	add	sp, #20
 801b144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801b148:	4b27      	ldr	r3, [pc, #156]	; (801b1e8 <tcp_output+0x324>)
 801b14a:	f240 42e4 	movw	r2, #1252	; 0x4e4
 801b14e:	4929      	ldr	r1, [pc, #164]	; (801b1f4 <tcp_output+0x330>)
 801b150:	4827      	ldr	r0, [pc, #156]	; (801b1f0 <tcp_output+0x32c>)
 801b152:	f005 fc39 	bl	80209c8 <iprintf>
 801b156:	e6c0      	b.n	801aeda <tcp_output+0x16>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801b158:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 801b15c:	42bb      	cmp	r3, r7
 801b15e:	f47f aeca 	bne.w	801aef6 <tcp_output+0x32>
 801b162:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801b164:	2b00      	cmp	r3, #0
 801b166:	f47f aec6 	bne.w	801aef6 <tcp_output+0x32>
 801b16a:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 801b16e:	2b00      	cmp	r3, #0
 801b170:	f47f aec1 	bne.w	801aef6 <tcp_output+0x32>
      pcb->persist_cnt = 0;
 801b174:	f44f 7280 	mov.w	r2, #256	; 0x100
      pcb->persist_backoff = 1;
 801b178:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
      pcb->persist_cnt = 0;
 801b17c:	f8a4 2098 	strh.w	r2, [r4, #152]	; 0x98
 801b180:	e6b9      	b.n	801aef6 <tcp_output+0x32>
      return tcp_send_empty_ack(pcb);
 801b182:	4620      	mov	r0, r4
}
 801b184:	b005      	add	sp, #20
 801b186:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 801b18a:	f7ff be67 	b.w	801ae5c <tcp_send_empty_ack>
    LWIP_ASSERT("RST not expected here!",
 801b18e:	4b16      	ldr	r3, [pc, #88]	; (801b1e8 <tcp_output+0x324>)
 801b190:	f240 5237 	movw	r2, #1335	; 0x537
 801b194:	4918      	ldr	r1, [pc, #96]	; (801b1f8 <tcp_output+0x334>)
 801b196:	4816      	ldr	r0, [pc, #88]	; (801b1f0 <tcp_output+0x32c>)
 801b198:	f005 fc16 	bl	80209c8 <iprintf>
 801b19c:	e73f      	b.n	801b01e <tcp_output+0x15a>
      tcp_seg_free(seg);
 801b19e:	4628      	mov	r0, r5
 801b1a0:	f7fc f8ee 	bl	8017380 <tcp_seg_free>
 801b1a4:	e725      	b.n	801aff2 <tcp_output+0x12e>
        pcb->unacked = seg;
 801b1a6:	6725      	str	r5, [r4, #112]	; 0x70
 801b1a8:	46a8      	mov	r8, r5
 801b1aa:	e722      	b.n	801aff2 <tcp_output+0x12e>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801b1ac:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801b1b0:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 801b1b2:	4584      	cmp	ip, r0
 801b1b4:	f4bf af42 	bcs.w	801b03c <tcp_output+0x178>
 801b1b8:	f8b4 0064 	ldrh.w	r0, [r4, #100]	; 0x64
 801b1bc:	2800      	cmp	r0, #0
 801b1be:	f43f af3d 	beq.w	801b03c <tcp_output+0x178>
 801b1c2:	f8b4 0066 	ldrh.w	r0, [r4, #102]	; 0x66
 801b1c6:	2808      	cmp	r0, #8
 801b1c8:	f63f af38 	bhi.w	801b03c <tcp_output+0x178>
 801b1cc:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 801b1d0:	f47f af34 	bne.w	801b03c <tcp_output+0x178>
  if (pcb->unsent == NULL) {
 801b1d4:	2900      	cmp	r1, #0
 801b1d6:	f47f ae92 	bne.w	801aefe <tcp_output+0x3a>
    pcb->unsent_oversize = 0;
 801b1da:	2100      	movs	r1, #0
 801b1dc:	4613      	mov	r3, r2
 801b1de:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68
 801b1e2:	e68c      	b.n	801aefe <tcp_output+0x3a>
 801b1e4:	20036284 	.word	0x20036284
 801b1e8:	0803e780 	.word	0x0803e780
 801b1ec:	0803e6c0 	.word	0x0803e6c0
 801b1f0:	0802697c 	.word	0x0802697c
 801b1f4:	0803e680 	.word	0x0803e680
 801b1f8:	0803e6a8 	.word	0x0803e6a8
 801b1fc:	20036164 	.word	0x20036164
    pcb->rttest = tcp_ticks;
 801b200:	4b28      	ldr	r3, [pc, #160]	; (801b2a4 <tcp_output+0x3e0>)
 801b202:	681b      	ldr	r3, [r3, #0]
 801b204:	6363      	str	r3, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801b206:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801b20a:	f7f9 fc1b 	bl	8014a44 <lwip_htonl>
 801b20e:	f8d5 900c 	ldr.w	r9, [r5, #12]
 801b212:	63a0      	str	r0, [r4, #56]	; 0x38
 801b214:	e748      	b.n	801b0a8 <tcp_output+0x1e4>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801b216:	4632      	mov	r2, r6
 801b218:	4651      	mov	r1, sl
 801b21a:	f44f 7006 	mov.w	r0, #536	; 0x218
    opts += 1;
 801b21e:	f109 0b18 	add.w	fp, r9, #24
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801b222:	f7fd f85d 	bl	80182e0 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801b226:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 801b22a:	f7f9 fc0b 	bl	8014a44 <lwip_htonl>
 801b22e:	f8c9 0014 	str.w	r0, [r9, #20]
 801b232:	f8d5 900c 	ldr.w	r9, [r5, #12]
 801b236:	e72d      	b.n	801b094 <tcp_output+0x1d0>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801b238:	4b1b      	ldr	r3, [pc, #108]	; (801b2a8 <tcp_output+0x3e4>)
 801b23a:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801b23e:	491b      	ldr	r1, [pc, #108]	; (801b2ac <tcp_output+0x3e8>)
 801b240:	481b      	ldr	r0, [pc, #108]	; (801b2b0 <tcp_output+0x3ec>)
 801b242:	f005 fbc1 	bl	80209c8 <iprintf>
 801b246:	e644      	b.n	801aed2 <tcp_output+0xe>
          while (*cur_seg &&
 801b248:	6f23      	ldr	r3, [r4, #112]	; 0x70
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801b24a:	f104 0b70 	add.w	fp, r4, #112	; 0x70
          while (*cur_seg &&
 801b24e:	b92b      	cbnz	r3, 801b25c <tcp_output+0x398>
 801b250:	e013      	b.n	801b27a <tcp_output+0x3b6>
            cur_seg = &((*cur_seg)->next );
 801b252:	f8db b000 	ldr.w	fp, [fp]
          while (*cur_seg &&
 801b256:	f8db 3000 	ldr.w	r3, [fp]
 801b25a:	b173      	cbz	r3, 801b27a <tcp_output+0x3b6>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801b25c:	68db      	ldr	r3, [r3, #12]
 801b25e:	6858      	ldr	r0, [r3, #4]
 801b260:	f7f9 fbf0 	bl	8014a44 <lwip_htonl>
 801b264:	68eb      	ldr	r3, [r5, #12]
 801b266:	4681      	mov	r9, r0
 801b268:	6858      	ldr	r0, [r3, #4]
 801b26a:	f7f9 fbeb 	bl	8014a44 <lwip_htonl>
 801b26e:	eba9 0000 	sub.w	r0, r9, r0
          while (*cur_seg &&
 801b272:	2800      	cmp	r0, #0
 801b274:	dbed      	blt.n	801b252 <tcp_output+0x38e>
 801b276:	f8db 3000 	ldr.w	r3, [fp]
          seg->next = (*cur_seg);
 801b27a:	602b      	str	r3, [r5, #0]
          (*cur_seg) = seg;
 801b27c:	f8cb 5000 	str.w	r5, [fp]
 801b280:	e6b7      	b.n	801aff2 <tcp_output+0x12e>
    return netif_get_by_index(pcb->netif_idx);
 801b282:	f7fb f963 	bl	801654c <netif_get_by_index>
 801b286:	4682      	mov	sl, r0
 801b288:	e64a      	b.n	801af20 <tcp_output+0x5c>
 801b28a:	8b62      	ldrh	r2, [r4, #26]
 801b28c:	e7a5      	b.n	801b1da <tcp_output+0x316>
 801b28e:	8b62      	ldrh	r2, [r4, #26]
 801b290:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801b292:	4613      	mov	r3, r2
  if (pcb->unsent == NULL) {
 801b294:	2900      	cmp	r1, #0
 801b296:	f47f ae32 	bne.w	801aefe <tcp_output+0x3a>
 801b29a:	e79e      	b.n	801b1da <tcp_output+0x316>
    return ERR_RTE;
 801b29c:	f06f 0003 	mvn.w	r0, #3
 801b2a0:	e631      	b.n	801af06 <tcp_output+0x42>
 801b2a2:	bf00      	nop
 801b2a4:	20036274 	.word	0x20036274
 801b2a8:	0803e780 	.word	0x0803e780
 801b2ac:	0803e668 	.word	0x0803e668
 801b2b0:	0802697c 	.word	0x0802697c

0801b2b4 <tcp_rexmit_rto_commit>:
{
 801b2b4:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801b2b6:	4604      	mov	r4, r0
 801b2b8:	b158      	cbz	r0, 801b2d2 <tcp_rexmit_rto_commit+0x1e>
  if (pcb->nrtx < 0xFF) {
 801b2ba:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 801b2be:	2bff      	cmp	r3, #255	; 0xff
 801b2c0:	d002      	beq.n	801b2c8 <tcp_rexmit_rto_commit+0x14>
    ++pcb->nrtx;
 801b2c2:	3301      	adds	r3, #1
 801b2c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 801b2c8:	4620      	mov	r0, r4
}
 801b2ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 801b2ce:	f7ff bdf9 	b.w	801aec4 <tcp_output>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801b2d2:	4b04      	ldr	r3, [pc, #16]	; (801b2e4 <tcp_rexmit_rto_commit+0x30>)
 801b2d4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801b2d8:	4903      	ldr	r1, [pc, #12]	; (801b2e8 <tcp_rexmit_rto_commit+0x34>)
 801b2da:	4804      	ldr	r0, [pc, #16]	; (801b2ec <tcp_rexmit_rto_commit+0x38>)
 801b2dc:	f005 fb74 	bl	80209c8 <iprintf>
 801b2e0:	e7eb      	b.n	801b2ba <tcp_rexmit_rto_commit+0x6>
 801b2e2:	bf00      	nop
 801b2e4:	0803e780 	.word	0x0803e780
 801b2e8:	0803e864 	.word	0x0803e864
 801b2ec:	0802697c 	.word	0x0802697c

0801b2f0 <tcp_rexmit_rto>:
{
 801b2f0:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801b2f2:	4604      	mov	r4, r0
 801b2f4:	b148      	cbz	r0, 801b30a <tcp_rexmit_rto+0x1a>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801b2f6:	4620      	mov	r0, r4
 801b2f8:	f7ff fcaa 	bl	801ac50 <tcp_rexmit_rto_prepare>
 801b2fc:	b100      	cbz	r0, 801b300 <tcp_rexmit_rto+0x10>
}
 801b2fe:	bd10      	pop	{r4, pc}
    tcp_rexmit_rto_commit(pcb);
 801b300:	4620      	mov	r0, r4
}
 801b302:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tcp_rexmit_rto_commit(pcb);
 801b306:	f7ff bfd5 	b.w	801b2b4 <tcp_rexmit_rto_commit>
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801b30a:	4b04      	ldr	r3, [pc, #16]	; (801b31c <tcp_rexmit_rto+0x2c>)
 801b30c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801b310:	4903      	ldr	r1, [pc, #12]	; (801b320 <tcp_rexmit_rto+0x30>)
 801b312:	4804      	ldr	r0, [pc, #16]	; (801b324 <tcp_rexmit_rto+0x34>)
 801b314:	f005 fb58 	bl	80209c8 <iprintf>
 801b318:	e7ed      	b.n	801b2f6 <tcp_rexmit_rto+0x6>
 801b31a:	bf00      	nop
 801b31c:	0803e780 	.word	0x0803e780
 801b320:	0803e848 	.word	0x0803e848
 801b324:	0802697c 	.word	0x0802697c

0801b328 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801b328:	b570      	push	{r4, r5, r6, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801b32a:	4604      	mov	r4, r0
 801b32c:	b1a0      	cbz	r0, 801b358 <tcp_keepalive+0x30>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801b32e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801b330:	3801      	subs	r0, #1
 801b332:	f7f9 fb87 	bl	8014a44 <lwip_htonl>
 801b336:	2100      	movs	r1, #0
 801b338:	4602      	mov	r2, r0
 801b33a:	4620      	mov	r0, r4
 801b33c:	f7fe fef2 	bl	801a124 <tcp_output_alloc_header.constprop.3>
  if (p == NULL) {
 801b340:	4605      	mov	r5, r0
 801b342:	b188      	cbz	r0, 801b368 <tcp_keepalive+0x40>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b344:	f7fe ff18 	bl	801a178 <tcp_output_fill_options.isra.0.constprop.5>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b348:	4629      	mov	r1, r5
 801b34a:	1d23      	adds	r3, r4, #4
 801b34c:	4622      	mov	r2, r4
 801b34e:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 801b350:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b354:	f7fe bf20 	b.w	801a198 <tcp_output_control_segment>
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801b358:	4b05      	ldr	r3, [pc, #20]	; (801b370 <tcp_keepalive+0x48>)
 801b35a:	f640 0224 	movw	r2, #2084	; 0x824
 801b35e:	4905      	ldr	r1, [pc, #20]	; (801b374 <tcp_keepalive+0x4c>)
 801b360:	4805      	ldr	r0, [pc, #20]	; (801b378 <tcp_keepalive+0x50>)
 801b362:	f005 fb31 	bl	80209c8 <iprintf>
 801b366:	e7e2      	b.n	801b32e <tcp_keepalive+0x6>
}
 801b368:	f04f 30ff 	mov.w	r0, #4294967295
 801b36c:	bd70      	pop	{r4, r5, r6, pc}
 801b36e:	bf00      	nop
 801b370:	0803e780 	.word	0x0803e780
 801b374:	0803e64c 	.word	0x0803e64c
 801b378:	0802697c 	.word	0x0802697c

0801b37c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801b37c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801b380:	4604      	mov	r4, r0
 801b382:	2800      	cmp	r0, #0
 801b384:	d054      	beq.n	801b430 <tcp_zero_window_probe+0xb4>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801b386:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 801b388:	2d00      	cmp	r5, #0
 801b38a:	d04a      	beq.n	801b422 <tcp_zero_window_probe+0xa6>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801b38c:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 801b390:	2bff      	cmp	r3, #255	; 0xff
 801b392:	d002      	beq.n	801b39a <tcp_zero_window_probe+0x1e>
    ++pcb->persist_probe;
 801b394:	3301      	adds	r3, #1
 801b396:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801b39a:	68eb      	ldr	r3, [r5, #12]
 801b39c:	8998      	ldrh	r0, [r3, #12]
 801b39e:	f7f9 fb4d 	bl	8014a3c <lwip_htons>
 801b3a2:	07c2      	lsls	r2, r0, #31
 801b3a4:	68eb      	ldr	r3, [r5, #12]
 801b3a6:	d426      	bmi.n	801b3f6 <tcp_zero_window_probe+0x7a>
 801b3a8:	685a      	ldr	r2, [r3, #4]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801b3aa:	2101      	movs	r1, #1
 801b3ac:	4620      	mov	r0, r4
 801b3ae:	f7fe feb9 	bl	801a124 <tcp_output_alloc_header.constprop.3>
  if (p == NULL) {
 801b3b2:	4606      	mov	r6, r0
 801b3b4:	2800      	cmp	r0, #0
 801b3b6:	d037      	beq.n	801b428 <tcp_zero_window_probe+0xac>
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801b3b8:	6868      	ldr	r0, [r5, #4]
 801b3ba:	2201      	movs	r2, #1
 801b3bc:	892f      	ldrh	r7, [r5, #8]
 801b3be:	8903      	ldrh	r3, [r0, #8]
    char *d = ((char *)p->payload + TCP_HLEN);
 801b3c0:	6871      	ldr	r1, [r6, #4]
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801b3c2:	1bdb      	subs	r3, r3, r7
 801b3c4:	3114      	adds	r1, #20
 801b3c6:	b29b      	uxth	r3, r3
 801b3c8:	f7fb fc36 	bl	8016c38 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801b3cc:	68eb      	ldr	r3, [r5, #12]
 801b3ce:	6858      	ldr	r0, [r3, #4]
 801b3d0:	f7f9 fb38 	bl	8014a44 <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801b3d4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801b3d6:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801b3d8:	1a1b      	subs	r3, r3, r0
 801b3da:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 801b3dc:	bfb8      	it	lt
 801b3de:	6520      	strlt	r0, [r4, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b3e0:	4630      	mov	r0, r6
 801b3e2:	f7fe fec9 	bl	801a178 <tcp_output_fill_options.isra.0.constprop.5>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b3e6:	4631      	mov	r1, r6
 801b3e8:	1d23      	adds	r3, r4, #4
 801b3ea:	4622      	mov	r2, r4
 801b3ec:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 801b3ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b3f2:	f7fe bed1 	b.w	801a198 <tcp_output_control_segment>
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801b3f6:	8929      	ldrh	r1, [r5, #8]
 801b3f8:	685a      	ldr	r2, [r3, #4]
 801b3fa:	2900      	cmp	r1, #0
 801b3fc:	d1d5      	bne.n	801b3aa <tcp_zero_window_probe+0x2e>
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801b3fe:	4620      	mov	r0, r4
 801b400:	f7fe fe90 	bl	801a124 <tcp_output_alloc_header.constprop.3>
  if (p == NULL) {
 801b404:	4606      	mov	r6, r0
 801b406:	b178      	cbz	r0, 801b428 <tcp_zero_window_probe+0xac>
  tcphdr = (struct tcp_hdr *)p->payload;
 801b408:	f8d6 8004 	ldr.w	r8, [r6, #4]
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801b40c:	2011      	movs	r0, #17
 801b40e:	f9b8 700c 	ldrsh.w	r7, [r8, #12]
 801b412:	f7f9 fb13 	bl	8014a3c <lwip_htons>
 801b416:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 801b41a:	4338      	orrs	r0, r7
 801b41c:	f8a8 000c 	strh.w	r0, [r8, #12]
 801b420:	e7d4      	b.n	801b3cc <tcp_zero_window_probe+0x50>
    return ERR_OK;
 801b422:	4628      	mov	r0, r5
}
 801b424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_MEM;
 801b428:	f04f 30ff 	mov.w	r0, #4294967295
}
 801b42c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801b430:	4b03      	ldr	r3, [pc, #12]	; (801b440 <tcp_zero_window_probe+0xc4>)
 801b432:	f640 024f 	movw	r2, #2127	; 0x84f
 801b436:	4903      	ldr	r1, [pc, #12]	; (801b444 <tcp_zero_window_probe+0xc8>)
 801b438:	4803      	ldr	r0, [pc, #12]	; (801b448 <tcp_zero_window_probe+0xcc>)
 801b43a:	f005 fac5 	bl	80209c8 <iprintf>
 801b43e:	e7a2      	b.n	801b386 <tcp_zero_window_probe+0xa>
 801b440:	0803e780 	.word	0x0803e780
 801b444:	0803ebec 	.word	0x0803ebec
 801b448:	0802697c 	.word	0x0802697c

0801b44c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801b44c:	b570      	push	{r4, r5, r6, lr}
 801b44e:	4604      	mov	r4, r0
 801b450:	460e      	mov	r6, r1
 801b452:	4615      	mov	r5, r2
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801b454:	4913      	ldr	r1, [pc, #76]	; (801b4a4 <sys_timeout_abs+0x58>)
 801b456:	22bc      	movs	r2, #188	; 0xbc
 801b458:	200c      	movs	r0, #12
 801b45a:	f7fa fe5f 	bl	801611c <memp_malloc_fn>
  if (timeout == NULL) {
 801b45e:	b1c8      	cbz	r0, 801b494 <sys_timeout_abs+0x48>
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801b460:	4a11      	ldr	r2, [pc, #68]	; (801b4a8 <sys_timeout_abs+0x5c>)
  timeout->next = NULL;
 801b462:	2300      	movs	r3, #0
  timeout->h = handler;
 801b464:	6086      	str	r6, [r0, #8]
  if (next_timeout == NULL) {
 801b466:	6811      	ldr	r1, [r2, #0]
  timeout->arg = arg;
 801b468:	60c5      	str	r5, [r0, #12]
  timeout->next = NULL;
 801b46a:	e9c0 3400 	strd	r3, r4, [r0]
  if (next_timeout == NULL) {
 801b46e:	b121      	cbz	r1, 801b47a <sys_timeout_abs+0x2e>
    next_timeout = timeout;
    return;
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801b470:	684b      	ldr	r3, [r1, #4]
 801b472:	1ae3      	subs	r3, r4, r3
 801b474:	2b00      	cmp	r3, #0
 801b476:	da07      	bge.n	801b488 <sys_timeout_abs+0x3c>
    timeout->next = next_timeout;
 801b478:	6001      	str	r1, [r0, #0]
    next_timeout = timeout;
 801b47a:	6010      	str	r0, [r2, #0]
        t->next = timeout;
        break;
      }
    }
  }
}
 801b47c:	bd70      	pop	{r4, r5, r6, pc}
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801b47e:	685a      	ldr	r2, [r3, #4]
 801b480:	1aa2      	subs	r2, r4, r2
 801b482:	2a00      	cmp	r2, #0
 801b484:	db03      	blt.n	801b48e <sys_timeout_abs+0x42>
 801b486:	4619      	mov	r1, r3
 801b488:	680b      	ldr	r3, [r1, #0]
 801b48a:	2b00      	cmp	r3, #0
 801b48c:	d1f7      	bne.n	801b47e <sys_timeout_abs+0x32>
        timeout->next = t->next;
 801b48e:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 801b490:	6008      	str	r0, [r1, #0]
}
 801b492:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801b494:	4b03      	ldr	r3, [pc, #12]	; (801b4a4 <sys_timeout_abs+0x58>)
 801b496:	22be      	movs	r2, #190	; 0xbe
 801b498:	4904      	ldr	r1, [pc, #16]	; (801b4ac <sys_timeout_abs+0x60>)
 801b49a:	4805      	ldr	r0, [pc, #20]	; (801b4b0 <sys_timeout_abs+0x64>)
}
 801b49c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801b4a0:	f005 ba92 	b.w	80209c8 <iprintf>
 801b4a4:	0803ec78 	.word	0x0803ec78
 801b4a8:	20022428 	.word	0x20022428
 801b4ac:	0803ecac 	.word	0x0803ecac
 801b4b0:	0802697c 	.word	0x0802697c

0801b4b4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801b4b4:	b510      	push	{r4, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801b4b6:	6843      	ldr	r3, [r0, #4]
{
 801b4b8:	4604      	mov	r4, r0
  cyclic->handler();
 801b4ba:	4798      	blx	r3

  now = sys_now();
 801b4bc:	f7f4 fdfa 	bl	80100b4 <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801b4c0:	4b09      	ldr	r3, [pc, #36]	; (801b4e8 <lwip_cyclic_timer+0x34>)
 801b4c2:	6821      	ldr	r1, [r4, #0]
 801b4c4:	681b      	ldr	r3, [r3, #0]
 801b4c6:	440b      	add	r3, r1
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801b4c8:	1a1a      	subs	r2, r3, r0
 801b4ca:	2a00      	cmp	r2, #0
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801b4cc:	4622      	mov	r2, r4
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801b4ce:	db05      	blt.n	801b4dc <lwip_cyclic_timer+0x28>
  } else {
    /* correct cyclic interval with handler execution delay and sys_check_timeouts jitter */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801b4d0:	4618      	mov	r0, r3
 801b4d2:	4906      	ldr	r1, [pc, #24]	; (801b4ec <lwip_cyclic_timer+0x38>)
#endif
  }
}
 801b4d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801b4d8:	f7ff bfb8 	b.w	801b44c <sys_timeout_abs>
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801b4dc:	4408      	add	r0, r1
 801b4de:	4903      	ldr	r1, [pc, #12]	; (801b4ec <lwip_cyclic_timer+0x38>)
}
 801b4e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801b4e4:	f7ff bfb2 	b.w	801b44c <sys_timeout_abs>
 801b4e8:	20022424 	.word	0x20022424
 801b4ec:	0801b4b5 	.word	0x0801b4b5

0801b4f0 <tcpip_tcp_timer>:
{
 801b4f0:	b508      	push	{r3, lr}
  tcp_tmr();
 801b4f2:	f7fc fec7 	bl	8018284 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801b4f6:	4b09      	ldr	r3, [pc, #36]	; (801b51c <tcpip_tcp_timer+0x2c>)
 801b4f8:	681b      	ldr	r3, [r3, #0]
 801b4fa:	b913      	cbnz	r3, 801b502 <tcpip_tcp_timer+0x12>
 801b4fc:	4b08      	ldr	r3, [pc, #32]	; (801b520 <tcpip_tcp_timer+0x30>)
 801b4fe:	681b      	ldr	r3, [r3, #0]
 801b500:	b143      	cbz	r3, 801b514 <tcpip_tcp_timer+0x24>

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801b502:	f7f4 fdd7 	bl	80100b4 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801b506:	2200      	movs	r2, #0
 801b508:	30fa      	adds	r0, #250	; 0xfa
 801b50a:	4906      	ldr	r1, [pc, #24]	; (801b524 <tcpip_tcp_timer+0x34>)
}
 801b50c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 801b510:	f7ff bf9c 	b.w	801b44c <sys_timeout_abs>
    tcpip_tcp_timer_active = 0;
 801b514:	4a04      	ldr	r2, [pc, #16]	; (801b528 <tcpip_tcp_timer+0x38>)
 801b516:	6013      	str	r3, [r2, #0]
}
 801b518:	bd08      	pop	{r3, pc}
 801b51a:	bf00      	nop
 801b51c:	20036270 	.word	0x20036270
 801b520:	20036280 	.word	0x20036280
 801b524:	0801b4f1 	.word	0x0801b4f1
 801b528:	2002242c 	.word	0x2002242c

0801b52c <tcp_timer_needed>:
{
 801b52c:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801b52e:	4b0b      	ldr	r3, [pc, #44]	; (801b55c <tcp_timer_needed+0x30>)
 801b530:	681a      	ldr	r2, [r3, #0]
 801b532:	b98a      	cbnz	r2, 801b558 <tcp_timer_needed+0x2c>
 801b534:	4a0a      	ldr	r2, [pc, #40]	; (801b560 <tcp_timer_needed+0x34>)
 801b536:	6812      	ldr	r2, [r2, #0]
 801b538:	b152      	cbz	r2, 801b550 <tcp_timer_needed+0x24>
    tcpip_tcp_timer_active = 1;
 801b53a:	2201      	movs	r2, #1
 801b53c:	601a      	str	r2, [r3, #0]
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801b53e:	f7f4 fdb9 	bl	80100b4 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 801b542:	2200      	movs	r2, #0
 801b544:	30fa      	adds	r0, #250	; 0xfa
 801b546:	4907      	ldr	r1, [pc, #28]	; (801b564 <tcp_timer_needed+0x38>)
}
 801b548:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 801b54c:	f7ff bf7e 	b.w	801b44c <sys_timeout_abs>
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801b550:	4a05      	ldr	r2, [pc, #20]	; (801b568 <tcp_timer_needed+0x3c>)
 801b552:	6812      	ldr	r2, [r2, #0]
 801b554:	2a00      	cmp	r2, #0
 801b556:	d1f0      	bne.n	801b53a <tcp_timer_needed+0xe>
}
 801b558:	bd08      	pop	{r3, pc}
 801b55a:	bf00      	nop
 801b55c:	2002242c 	.word	0x2002242c
 801b560:	20036270 	.word	0x20036270
 801b564:	0801b4f1 	.word	0x0801b4f1
 801b568:	20036280 	.word	0x20036280

0801b56c <sys_timeout>:
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801b56c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 801b570:	b570      	push	{r4, r5, r6, lr}
 801b572:	4604      	mov	r4, r0
 801b574:	460d      	mov	r5, r1
 801b576:	4616      	mov	r6, r2
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801b578:	d306      	bcc.n	801b588 <sys_timeout+0x1c>
 801b57a:	4b08      	ldr	r3, [pc, #32]	; (801b59c <sys_timeout+0x30>)
 801b57c:	f240 1229 	movw	r2, #297	; 0x129
 801b580:	4907      	ldr	r1, [pc, #28]	; (801b5a0 <sys_timeout+0x34>)
 801b582:	4808      	ldr	r0, [pc, #32]	; (801b5a4 <sys_timeout+0x38>)
 801b584:	f005 fa20 	bl	80209c8 <iprintf>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801b588:	f7f4 fd94 	bl	80100b4 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 801b58c:	4632      	mov	r2, r6
 801b58e:	4629      	mov	r1, r5
 801b590:	4420      	add	r0, r4
#endif
}
 801b592:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 801b596:	f7ff bf59 	b.w	801b44c <sys_timeout_abs>
 801b59a:	bf00      	nop
 801b59c:	0803ec78 	.word	0x0803ec78
 801b5a0:	0803ec40 	.word	0x0803ec40
 801b5a4:	0802697c 	.word	0x0802697c

0801b5a8 <sys_timeouts_init>:
{
 801b5a8:	b570      	push	{r4, r5, r6, lr}
 801b5aa:	4c0a      	ldr	r4, [pc, #40]	; (801b5d4 <sys_timeouts_init+0x2c>)
 801b5ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801b5b0:	4e09      	ldr	r6, [pc, #36]	; (801b5d8 <sys_timeouts_init+0x30>)
 801b5b2:	f104 0520 	add.w	r5, r4, #32
 801b5b6:	4622      	mov	r2, r4
 801b5b8:	4631      	mov	r1, r6
 801b5ba:	f7ff ffd7 	bl	801b56c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801b5be:	42ac      	cmp	r4, r5
 801b5c0:	d007      	beq.n	801b5d2 <sys_timeouts_init+0x2a>
 801b5c2:	f854 0f08 	ldr.w	r0, [r4, #8]!
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801b5c6:	4631      	mov	r1, r6
 801b5c8:	4622      	mov	r2, r4
 801b5ca:	f7ff ffcf 	bl	801b56c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801b5ce:	42ac      	cmp	r4, r5
 801b5d0:	d1f7      	bne.n	801b5c2 <sys_timeouts_init+0x1a>
}
 801b5d2:	bd70      	pop	{r4, r5, r6, pc}
 801b5d4:	0803ec18 	.word	0x0803ec18
 801b5d8:	0801b4b5 	.word	0x0801b4b5

0801b5dc <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 801b5dc:	b430      	push	{r4, r5}
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801b5de:	4d0d      	ldr	r5, [pc, #52]	; (801b614 <sys_untimeout+0x38>)
 801b5e0:	682b      	ldr	r3, [r5, #0]
 801b5e2:	b19b      	cbz	r3, 801b60c <sys_untimeout+0x30>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 801b5e4:	2400      	movs	r4, #0
 801b5e6:	e003      	b.n	801b5f0 <sys_untimeout+0x14>
 801b5e8:	681a      	ldr	r2, [r3, #0]
 801b5ea:	461c      	mov	r4, r3
 801b5ec:	4613      	mov	r3, r2
 801b5ee:	b16a      	cbz	r2, 801b60c <sys_untimeout+0x30>
    if ((t->h == handler) && (t->arg == arg)) {
 801b5f0:	689a      	ldr	r2, [r3, #8]
 801b5f2:	4282      	cmp	r2, r0
 801b5f4:	d1f8      	bne.n	801b5e8 <sys_untimeout+0xc>
 801b5f6:	68da      	ldr	r2, [r3, #12]
 801b5f8:	428a      	cmp	r2, r1
 801b5fa:	d1f5      	bne.n	801b5e8 <sys_untimeout+0xc>
 801b5fc:	681a      	ldr	r2, [r3, #0]
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 801b5fe:	b13c      	cbz	r4, 801b610 <sys_untimeout+0x34>
        next_timeout = t->next;
      } else {
        prev_t->next = t->next;
 801b600:	6022      	str	r2, [r4, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 801b602:	4619      	mov	r1, r3
 801b604:	200c      	movs	r0, #12
      return;
    }
  }
  return;
}
 801b606:	bc30      	pop	{r4, r5}
      memp_free(MEMP_SYS_TIMEOUT, t);
 801b608:	f7fa bdac 	b.w	8016164 <memp_free>
}
 801b60c:	bc30      	pop	{r4, r5}
 801b60e:	4770      	bx	lr
        next_timeout = t->next;
 801b610:	602a      	str	r2, [r5, #0]
 801b612:	e7f6      	b.n	801b602 <sys_untimeout+0x26>
 801b614:	20022428 	.word	0x20022428

0801b618 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801b618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801b61c:	f7f4 fd4a 	bl	80100b4 <sys_now>
 801b620:	4c0d      	ldr	r4, [pc, #52]	; (801b658 <sys_check_timeouts+0x40>)
 801b622:	4607      	mov	r7, r0

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 801b624:	f8df 8034 	ldr.w	r8, [pc, #52]	; 801b65c <sys_check_timeouts+0x44>
 801b628:	e00c      	b.n	801b644 <sys_check_timeouts+0x2c>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801b62a:	685a      	ldr	r2, [r3, #4]
 801b62c:	1abd      	subs	r5, r7, r2
 801b62e:	2d00      	cmp	r5, #0
 801b630:	db0d      	blt.n	801b64e <sys_check_timeouts+0x36>
    next_timeout = tmptimeout->next;
 801b632:	681e      	ldr	r6, [r3, #0]
    handler = tmptimeout->h;
 801b634:	689d      	ldr	r5, [r3, #8]
    next_timeout = tmptimeout->next;
 801b636:	6026      	str	r6, [r4, #0]
    current_timeout_due_time = tmptimeout->time;
 801b638:	f8c8 2000 	str.w	r2, [r8]
    arg = tmptimeout->arg;
 801b63c:	68de      	ldr	r6, [r3, #12]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801b63e:	f7fa fd91 	bl	8016164 <memp_free>
    if (handler != NULL) {
 801b642:	b935      	cbnz	r5, 801b652 <sys_check_timeouts+0x3a>
    tmptimeout = next_timeout;
 801b644:	6823      	ldr	r3, [r4, #0]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801b646:	200c      	movs	r0, #12
 801b648:	4619      	mov	r1, r3
    if (tmptimeout == NULL) {
 801b64a:	2b00      	cmp	r3, #0
 801b64c:	d1ed      	bne.n	801b62a <sys_check_timeouts+0x12>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801b64e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      handler(arg);
 801b652:	4630      	mov	r0, r6
 801b654:	47a8      	blx	r5
 801b656:	e7f5      	b.n	801b644 <sys_check_timeouts+0x2c>
 801b658:	20022428 	.word	0x20022428
 801b65c:	20022424 	.word	0x20022424

0801b660 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801b660:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801b662:	4c07      	ldr	r4, [pc, #28]	; (801b680 <sys_timeouts_sleeptime+0x20>)
 801b664:	6823      	ldr	r3, [r4, #0]
 801b666:	b13b      	cbz	r3, 801b678 <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 801b668:	f7f4 fd24 	bl	80100b4 <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801b66c:	6823      	ldr	r3, [r4, #0]
 801b66e:	685b      	ldr	r3, [r3, #4]
 801b670:	1a18      	subs	r0, r3, r0
    return 0;
 801b672:	bf48      	it	mi
 801b674:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 801b676:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801b678:	f04f 30ff 	mov.w	r0, #4294967295
}
 801b67c:	bd10      	pop	{r4, pc}
 801b67e:	bf00      	nop
 801b680:	20022428 	.word	0x20022428

0801b684 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801b684:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801b686:	f005 fa2f 	bl	8020ae8 <rand>
 801b68a:	4b02      	ldr	r3, [pc, #8]	; (801b694 <udp_init+0x10>)
 801b68c:	4a02      	ldr	r2, [pc, #8]	; (801b698 <udp_init+0x14>)
 801b68e:	4303      	orrs	r3, r0
 801b690:	8013      	strh	r3, [r2, #0]
#endif /* LWIP_RAND */
}
 801b692:	bd08      	pop	{r3, pc}
 801b694:	ffffc000 	.word	0xffffc000
 801b698:	200003da 	.word	0x200003da

0801b69c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801b69c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6a0:	4689      	mov	r9, r1
 801b6a2:	b085      	sub	sp, #20

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801b6a4:	4680      	mov	r8, r0
 801b6a6:	2800      	cmp	r0, #0
 801b6a8:	f000 80d8 	beq.w	801b85c <udp_input+0x1c0>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801b6ac:	f1b9 0f00 	cmp.w	r9, #0
 801b6b0:	f000 80de 	beq.w	801b870 <udp_input+0x1d4>

  PERF_START;

  UDP_STATS_INC(udp.recv);
 801b6b4:	4f80      	ldr	r7, [pc, #512]	; (801b8b8 <udp_input+0x21c>)

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801b6b6:	f8b8 200a 	ldrh.w	r2, [r8, #10]
  UDP_STATS_INC(udp.recv);
 801b6ba:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
  if (p->len < UDP_HLEN) {
 801b6be:	2a07      	cmp	r2, #7
  UDP_STATS_INC(udp.recv);
 801b6c0:	f103 0301 	add.w	r3, r3, #1
 801b6c4:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
  if (p->len < UDP_HLEN) {
 801b6c8:	f240 80b1 	bls.w	801b82e <udp_input+0x192>
  }

  udphdr = (struct udp_hdr *)p->payload;

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801b6cc:	f8df a20c 	ldr.w	sl, [pc, #524]	; 801b8dc <udp_input+0x240>
  udphdr = (struct udp_hdr *)p->payload;
 801b6d0:	f8d8 4004 	ldr.w	r4, [r8, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801b6d4:	f8da 1000 	ldr.w	r1, [sl]
 801b6d8:	f8da 0014 	ldr.w	r0, [sl, #20]
 801b6dc:	f002 ff18 	bl	801e510 <ip4_addr_isbroadcast_u32>
 801b6e0:	9002      	str	r0, [sp, #8]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801b6e2:	8820      	ldrh	r0, [r4, #0]
 801b6e4:	f7f9 f9aa 	bl	8014a3c <lwip_htons>
 801b6e8:	9003      	str	r0, [sp, #12]
  dest = lwip_ntohs(udphdr->dest);
 801b6ea:	8860      	ldrh	r0, [r4, #2]
 801b6ec:	f7f9 f9a6 	bl	8014a3c <lwip_htons>
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b6f0:	4b72      	ldr	r3, [pc, #456]	; (801b8bc <udp_input+0x220>)
  dest = lwip_ntohs(udphdr->dest);
 801b6f2:	4605      	mov	r5, r0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b6f4:	681c      	ldr	r4, [r3, #0]
 801b6f6:	2c00      	cmp	r4, #0
 801b6f8:	d070      	beq.n	801b7dc <udp_input+0x140>
  uncon_pcb = NULL;
 801b6fa:	f04f 0b00 	mov.w	fp, #0
  prev = NULL;
 801b6fe:	465e      	mov	r6, fp
 801b700:	e004      	b.n	801b70c <udp_input+0x70>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b702:	68e3      	ldr	r3, [r4, #12]
 801b704:	4626      	mov	r6, r4
 801b706:	2b00      	cmp	r3, #0
 801b708:	d065      	beq.n	801b7d6 <udp_input+0x13a>
 801b70a:	461c      	mov	r4, r3
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801b70c:	8a63      	ldrh	r3, [r4, #18]
 801b70e:	42ab      	cmp	r3, r5
 801b710:	d1f7      	bne.n	801b702 <udp_input+0x66>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801b712:	f1b9 0f00 	cmp.w	r9, #0
 801b716:	f000 809a 	beq.w	801b84e <udp_input+0x1b2>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b71a:	7a22      	ldrb	r2, [r4, #8]
 801b71c:	b13a      	cbz	r2, 801b72e <udp_input+0x92>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801b71e:	f8da 3004 	ldr.w	r3, [sl, #4]
 801b722:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801b726:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b728:	b2db      	uxtb	r3, r3
 801b72a:	429a      	cmp	r2, r3
 801b72c:	d1e9      	bne.n	801b702 <udp_input+0x66>
    if (broadcast != 0) {
 801b72e:	9a02      	ldr	r2, [sp, #8]
 801b730:	6823      	ldr	r3, [r4, #0]
 801b732:	2a00      	cmp	r2, #0
 801b734:	d045      	beq.n	801b7c2 <udp_input+0x126>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b736:	b143      	cbz	r3, 801b74a <udp_input+0xae>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801b738:	f8da 2014 	ldr.w	r2, [sl, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b73c:	1c51      	adds	r1, r2, #1
 801b73e:	d004      	beq.n	801b74a <udp_input+0xae>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801b740:	405a      	eors	r2, r3
 801b742:	f8d9 1008 	ldr.w	r1, [r9, #8]
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801b746:	420a      	tst	r2, r1
 801b748:	d1db      	bne.n	801b702 <udp_input+0x66>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801b74a:	7c22      	ldrb	r2, [r4, #16]
 801b74c:	0752      	lsls	r2, r2, #29
 801b74e:	d412      	bmi.n	801b776 <udp_input+0xda>
        if (uncon_pcb == NULL) {
 801b750:	f1bb 0f00 	cmp.w	fp, #0
 801b754:	f000 8095 	beq.w	801b882 <udp_input+0x1e6>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801b758:	9a02      	ldr	r2, [sp, #8]
 801b75a:	b162      	cbz	r2, 801b776 <udp_input+0xda>
 801b75c:	f8da 2014 	ldr.w	r2, [sl, #20]
 801b760:	3201      	adds	r2, #1
 801b762:	d108      	bne.n	801b776 <udp_input+0xda>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801b764:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801b768:	f8db 1000 	ldr.w	r1, [fp]
 801b76c:	4291      	cmp	r1, r2
 801b76e:	d002      	beq.n	801b776 <udp_input+0xda>
 801b770:	429a      	cmp	r2, r3
 801b772:	bf08      	it	eq
 801b774:	46a3      	moveq	fp, r4
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801b776:	8aa3      	ldrh	r3, [r4, #20]
 801b778:	9a03      	ldr	r2, [sp, #12]
 801b77a:	4293      	cmp	r3, r2
 801b77c:	d1c1      	bne.n	801b702 <udp_input+0x66>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801b77e:	6863      	ldr	r3, [r4, #4]
      if ((pcb->remote_port == src) &&
 801b780:	b11b      	cbz	r3, 801b78a <udp_input+0xee>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801b782:	f8da 2010 	ldr.w	r2, [sl, #16]
 801b786:	4293      	cmp	r3, r2
 801b788:	d1bb      	bne.n	801b702 <udp_input+0x66>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
        /* the first fully matching PCB */
        if (prev != NULL) {
 801b78a:	2e00      	cmp	r6, #0
 801b78c:	f000 808c 	beq.w	801b8a8 <udp_input+0x20c>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
          pcb->next = udp_pcbs;
 801b790:	494a      	ldr	r1, [pc, #296]	; (801b8bc <udp_input+0x220>)
          prev->next = pcb->next;
 801b792:	68e2      	ldr	r2, [r4, #12]
          pcb->next = udp_pcbs;
 801b794:	680b      	ldr	r3, [r1, #0]
          prev->next = pcb->next;
 801b796:	60f2      	str	r2, [r6, #12]
          udp_pcbs = pcb;
 801b798:	600c      	str	r4, [r1, #0]
          pcb->next = udp_pcbs;
 801b79a:	60e3      	str	r3, [r4, #12]
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801b79c:	2108      	movs	r1, #8
 801b79e:	4640      	mov	r0, r8
 801b7a0:	f7fa ff7e 	bl	80166a0 <pbuf_remove_header>
 801b7a4:	2800      	cmp	r0, #0
 801b7a6:	d173      	bne.n	801b890 <udp_input+0x1f4>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801b7a8:	69a5      	ldr	r5, [r4, #24]
 801b7aa:	2d00      	cmp	r5, #0
 801b7ac:	d067      	beq.n	801b87e <udp_input+0x1e2>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801b7ae:	9b03      	ldr	r3, [sp, #12]
 801b7b0:	4642      	mov	r2, r8
 801b7b2:	69e0      	ldr	r0, [r4, #28]
 801b7b4:	4621      	mov	r1, r4
 801b7b6:	9300      	str	r3, [sp, #0]
 801b7b8:	4b41      	ldr	r3, [pc, #260]	; (801b8c0 <udp_input+0x224>)
 801b7ba:	47a8      	blx	r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801b7bc:	b005      	add	sp, #20
 801b7be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801b7c2:	2b00      	cmp	r3, #0
 801b7c4:	d0c1      	beq.n	801b74a <udp_input+0xae>
 801b7c6:	f8da 2014 	ldr.w	r2, [sl, #20]
 801b7ca:	429a      	cmp	r2, r3
 801b7cc:	d0bd      	beq.n	801b74a <udp_input+0xae>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b7ce:	68e3      	ldr	r3, [r4, #12]
 801b7d0:	4626      	mov	r6, r4
 801b7d2:	2b00      	cmp	r3, #0
 801b7d4:	d199      	bne.n	801b70a <udp_input+0x6e>
  if (pcb != NULL) {
 801b7d6:	f1bb 0f00 	cmp.w	fp, #0
 801b7da:	d16b      	bne.n	801b8b4 <udp_input+0x218>
  if (for_us) {
 801b7dc:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801b7e0:	f8da 3014 	ldr.w	r3, [sl, #20]
 801b7e4:	429a      	cmp	r2, r3
 801b7e6:	d14a      	bne.n	801b87e <udp_input+0x1e2>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801b7e8:	2108      	movs	r1, #8
 801b7ea:	4640      	mov	r0, r8
 801b7ec:	f7fa ff58 	bl	80166a0 <pbuf_remove_header>
 801b7f0:	2800      	cmp	r0, #0
 801b7f2:	d14d      	bne.n	801b890 <udp_input+0x1f4>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801b7f4:	9b02      	ldr	r3, [sp, #8]
 801b7f6:	b983      	cbnz	r3, 801b81a <udp_input+0x17e>
 801b7f8:	f8da 3014 	ldr.w	r3, [sl, #20]
 801b7fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801b800:	2be0      	cmp	r3, #224	; 0xe0
 801b802:	d00a      	beq.n	801b81a <udp_input+0x17e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801b804:	f8ba 100c 	ldrh.w	r1, [sl, #12]
 801b808:	4640      	mov	r0, r8
 801b80a:	3108      	adds	r1, #8
 801b80c:	b209      	sxth	r1, r1
 801b80e:	f7fa ff7b 	bl	8016708 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801b812:	2103      	movs	r1, #3
 801b814:	4640      	mov	r0, r8
 801b816:	f002 fc2f 	bl	801e078 <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
 801b81a:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
      pbuf_free(p);
 801b81e:	4640      	mov	r0, r8
      UDP_STATS_INC(udp.drop);
 801b820:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
      UDP_STATS_INC(udp.proterr);
 801b824:	3201      	adds	r2, #1
      UDP_STATS_INC(udp.drop);
 801b826:	3301      	adds	r3, #1
      UDP_STATS_INC(udp.proterr);
 801b828:	f8a7 2088 	strh.w	r2, [r7, #136]	; 0x88
 801b82c:	e008      	b.n	801b840 <udp_input+0x1a4>
    UDP_STATS_INC(udp.lenerr);
 801b82e:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
    pbuf_free(p);
 801b832:	4640      	mov	r0, r8
    UDP_STATS_INC(udp.drop);
 801b834:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
    UDP_STATS_INC(udp.lenerr);
 801b838:	3201      	adds	r2, #1
    UDP_STATS_INC(udp.drop);
 801b83a:	3301      	adds	r3, #1
    UDP_STATS_INC(udp.lenerr);
 801b83c:	f8a7 2082 	strh.w	r2, [r7, #130]	; 0x82
      UDP_STATS_INC(udp.drop);
 801b840:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
}
 801b844:	b005      	add	sp, #20
 801b846:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 801b84a:	f7fa bf65 	b.w	8016718 <pbuf_free>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801b84e:	4b1d      	ldr	r3, [pc, #116]	; (801b8c4 <udp_input+0x228>)
 801b850:	2288      	movs	r2, #136	; 0x88
 801b852:	491d      	ldr	r1, [pc, #116]	; (801b8c8 <udp_input+0x22c>)
 801b854:	481d      	ldr	r0, [pc, #116]	; (801b8cc <udp_input+0x230>)
 801b856:	f005 f8b7 	bl	80209c8 <iprintf>
 801b85a:	e75e      	b.n	801b71a <udp_input+0x7e>
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801b85c:	4b19      	ldr	r3, [pc, #100]	; (801b8c4 <udp_input+0x228>)
 801b85e:	22cf      	movs	r2, #207	; 0xcf
 801b860:	491b      	ldr	r1, [pc, #108]	; (801b8d0 <udp_input+0x234>)
 801b862:	481a      	ldr	r0, [pc, #104]	; (801b8cc <udp_input+0x230>)
 801b864:	f005 f8b0 	bl	80209c8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801b868:	f1b9 0f00 	cmp.w	r9, #0
 801b86c:	f47f af22 	bne.w	801b6b4 <udp_input+0x18>
 801b870:	4b14      	ldr	r3, [pc, #80]	; (801b8c4 <udp_input+0x228>)
 801b872:	22d0      	movs	r2, #208	; 0xd0
 801b874:	4917      	ldr	r1, [pc, #92]	; (801b8d4 <udp_input+0x238>)
 801b876:	4815      	ldr	r0, [pc, #84]	; (801b8cc <udp_input+0x230>)
 801b878:	f005 f8a6 	bl	80209c8 <iprintf>
 801b87c:	e71a      	b.n	801b6b4 <udp_input+0x18>
        pbuf_free(p);
 801b87e:	4640      	mov	r0, r8
 801b880:	e7e0      	b.n	801b844 <udp_input+0x1a8>
      if ((pcb->remote_port == src) &&
 801b882:	8aa3      	ldrh	r3, [r4, #20]
 801b884:	46a3      	mov	fp, r4
 801b886:	9a03      	ldr	r2, [sp, #12]
 801b888:	4293      	cmp	r3, r2
 801b88a:	f47f af3a 	bne.w	801b702 <udp_input+0x66>
 801b88e:	e776      	b.n	801b77e <udp_input+0xe2>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801b890:	4b0c      	ldr	r3, [pc, #48]	; (801b8c4 <udp_input+0x228>)
 801b892:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801b896:	4910      	ldr	r1, [pc, #64]	; (801b8d8 <udp_input+0x23c>)
 801b898:	480c      	ldr	r0, [pc, #48]	; (801b8cc <udp_input+0x230>)
 801b89a:	f005 f895 	bl	80209c8 <iprintf>
      UDP_STATS_INC(udp.drop);
 801b89e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
      pbuf_free(p);
 801b8a2:	4640      	mov	r0, r8
      UDP_STATS_INC(udp.drop);
 801b8a4:	3301      	adds	r3, #1
 801b8a6:	e7cb      	b.n	801b840 <udp_input+0x1a4>
          UDP_STATS_INC(udp.cachehit);
 801b8a8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 801b8ac:	3301      	adds	r3, #1
 801b8ae:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 801b8b2:	e773      	b.n	801b79c <udp_input+0x100>
 801b8b4:	465c      	mov	r4, fp
 801b8b6:	e771      	b.n	801b79c <udp_input+0x100>
 801b8b8:	20036164 	.word	0x20036164
 801b8bc:	20036288 	.word	0x20036288
 801b8c0:	20026a7c 	.word	0x20026a7c
 801b8c4:	0803ed3c 	.word	0x0803ed3c
 801b8c8:	0803eda0 	.word	0x0803eda0
 801b8cc:	0802697c 	.word	0x0802697c
 801b8d0:	0803ed6c 	.word	0x0803ed6c
 801b8d4:	0803ed84 	.word	0x0803ed84
 801b8d8:	0803edc8 	.word	0x0803edc8
 801b8dc:	20026a6c 	.word	0x20026a6c

0801b8e0 <udp_bind>:
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 801b8e0:	4b39      	ldr	r3, [pc, #228]	; (801b9c8 <udp_bind+0xe8>)
{
 801b8e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ipaddr = IP4_ADDR_ANY;
 801b8e6:	2900      	cmp	r1, #0
 801b8e8:	bf08      	it	eq
 801b8ea:	4619      	moveq	r1, r3
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801b8ec:	2800      	cmp	r0, #0
 801b8ee:	d060      	beq.n	801b9b2 <udp_bind+0xd2>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b8f0:	4f36      	ldr	r7, [pc, #216]	; (801b9cc <udp_bind+0xec>)
 801b8f2:	683e      	ldr	r6, [r7, #0]
 801b8f4:	b1fe      	cbz	r6, 801b936 <udp_bind+0x56>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801b8f6:	42b0      	cmp	r0, r6
 801b8f8:	d048      	beq.n	801b98c <udp_bind+0xac>
 801b8fa:	4634      	mov	r4, r6
 801b8fc:	e001      	b.n	801b902 <udp_bind+0x22>
 801b8fe:	42a0      	cmp	r0, r4
 801b900:	d044      	beq.n	801b98c <udp_bind+0xac>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b902:	68e4      	ldr	r4, [r4, #12]
 801b904:	2c00      	cmp	r4, #0
 801b906:	d1fa      	bne.n	801b8fe <udp_bind+0x1e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801b908:	b1c2      	cbz	r2, 801b93c <udp_bind+0x5c>
 801b90a:	680d      	ldr	r5, [r1, #0]
 801b90c:	4633      	mov	r3, r6
 801b90e:	e001      	b.n	801b914 <udp_bind+0x34>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b910:	68db      	ldr	r3, [r3, #12]
 801b912:	b373      	cbz	r3, 801b972 <udp_bind+0x92>
      if (pcb != ipcb) {
 801b914:	4298      	cmp	r0, r3
 801b916:	d0fb      	beq.n	801b910 <udp_bind+0x30>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801b918:	8a59      	ldrh	r1, [r3, #18]
 801b91a:	4291      	cmp	r1, r2
 801b91c:	d1f8      	bne.n	801b910 <udp_bind+0x30>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801b91e:	6819      	ldr	r1, [r3, #0]
              ip_addr_isany(&ipcb->local_ip))) {
 801b920:	42a9      	cmp	r1, r5
 801b922:	bf18      	it	ne
 801b924:	2900      	cmpne	r1, #0
 801b926:	d001      	beq.n	801b92c <udp_bind+0x4c>
 801b928:	2d00      	cmp	r5, #0
 801b92a:	d1f1      	bne.n	801b910 <udp_bind+0x30>
      return ERR_USE;
 801b92c:	f06f 0307 	mvn.w	r3, #7
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
}
 801b930:	4618      	mov	r0, r3
 801b932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (port == 0) {
 801b936:	2a00      	cmp	r2, #0
 801b938:	d137      	bne.n	801b9aa <udp_bind+0xca>
  rebind = 0;
 801b93a:	4634      	mov	r4, r6
 801b93c:	f8df 809c 	ldr.w	r8, [pc, #156]	; 801b9dc <udp_bind+0xfc>
again:
 801b940:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801b944:	f64f 7eff 	movw	lr, #65535	; 0xffff
 801b948:	f8b8 2000 	ldrh.w	r2, [r8]
 801b94c:	4572      	cmp	r2, lr
 801b94e:	d029      	beq.n	801b9a4 <udp_bind+0xc4>
 801b950:	3201      	adds	r2, #1
 801b952:	b292      	uxth	r2, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b954:	b156      	cbz	r6, 801b96c <udp_bind+0x8c>
    if (pcb->local_port == udp_port) {
 801b956:	8a73      	ldrh	r3, [r6, #18]
 801b958:	4293      	cmp	r3, r2
 801b95a:	d019      	beq.n	801b990 <udp_bind+0xb0>
 801b95c:	4633      	mov	r3, r6
 801b95e:	e002      	b.n	801b966 <udp_bind+0x86>
 801b960:	8a5d      	ldrh	r5, [r3, #18]
 801b962:	4295      	cmp	r5, r2
 801b964:	d014      	beq.n	801b990 <udp_bind+0xb0>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b966:	68db      	ldr	r3, [r3, #12]
 801b968:	2b00      	cmp	r3, #0
 801b96a:	d1f9      	bne.n	801b960 <udp_bind+0x80>
 801b96c:	680d      	ldr	r5, [r1, #0]
 801b96e:	f8a8 2000 	strh.w	r2, [r8]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801b972:	6005      	str	r5, [r0, #0]
  pcb->local_port = port;
 801b974:	8242      	strh	r2, [r0, #18]
  if (rebind == 0) {
 801b976:	b92c      	cbnz	r4, 801b984 <udp_bind+0xa4>
  return ERR_OK;
 801b978:	2300      	movs	r3, #0
    pcb->next = udp_pcbs;
 801b97a:	60c6      	str	r6, [r0, #12]
    udp_pcbs = pcb;
 801b97c:	6038      	str	r0, [r7, #0]
}
 801b97e:	4618      	mov	r0, r3
 801b980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ERR_OK;
 801b984:	2300      	movs	r3, #0
}
 801b986:	4618      	mov	r0, r3
 801b988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      rebind = 1;
 801b98c:	2401      	movs	r4, #1
 801b98e:	e7bb      	b.n	801b908 <udp_bind+0x28>
 801b990:	f10c 3cff 	add.w	ip, ip, #4294967295
 801b994:	fa1f fc8c 	uxth.w	ip, ip
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801b998:	f1bc 0f00 	cmp.w	ip, #0
 801b99c:	d1d6      	bne.n	801b94c <udp_bind+0x6c>
 801b99e:	f8a8 2000 	strh.w	r2, [r8]
 801b9a2:	e7c3      	b.n	801b92c <udp_bind+0x4c>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801b9a4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801b9a8:	e7d4      	b.n	801b954 <udp_bind+0x74>
 801b9aa:	680b      	ldr	r3, [r1, #0]
  pcb->local_port = port;
 801b9ac:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801b9ae:	6003      	str	r3, [r0, #0]
 801b9b0:	e7e2      	b.n	801b978 <udp_bind+0x98>
  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801b9b2:	4b07      	ldr	r3, [pc, #28]	; (801b9d0 <udp_bind+0xf0>)
 801b9b4:	f240 32b7 	movw	r2, #951	; 0x3b7
 801b9b8:	4906      	ldr	r1, [pc, #24]	; (801b9d4 <udp_bind+0xf4>)
 801b9ba:	4807      	ldr	r0, [pc, #28]	; (801b9d8 <udp_bind+0xf8>)
 801b9bc:	f005 f804 	bl	80209c8 <iprintf>
 801b9c0:	f06f 030f 	mvn.w	r3, #15
 801b9c4:	e7db      	b.n	801b97e <udp_bind+0x9e>
 801b9c6:	bf00      	nop
 801b9c8:	0803f66c 	.word	0x0803f66c
 801b9cc:	20036288 	.word	0x20036288
 801b9d0:	0803ed3c 	.word	0x0803ed3c
 801b9d4:	0803ecec 	.word	0x0803ecec
 801b9d8:	0802697c 	.word	0x0802697c
 801b9dc:	200003da 	.word	0x200003da

0801b9e0 <udp_sendto_if_src>:
{
 801b9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9e4:	b085      	sub	sp, #20
 801b9e6:	e9dd a90e 	ldrd	sl, r9, [sp, #56]	; 0x38
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801b9ea:	2800      	cmp	r0, #0
 801b9ec:	d07e      	beq.n	801baec <udp_sendto_if_src+0x10c>
 801b9ee:	460c      	mov	r4, r1
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801b9f0:	2900      	cmp	r1, #0
 801b9f2:	d071      	beq.n	801bad8 <udp_sendto_if_src+0xf8>
 801b9f4:	4690      	mov	r8, r2
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801b9f6:	2a00      	cmp	r2, #0
 801b9f8:	f000 8082 	beq.w	801bb00 <udp_sendto_if_src+0x120>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801b9fc:	f1b9 0f00 	cmp.w	r9, #0
 801ba00:	f000 8092 	beq.w	801bb28 <udp_sendto_if_src+0x148>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801ba04:	f1ba 0f00 	cmp.w	sl, #0
 801ba08:	f000 8084 	beq.w	801bb14 <udp_sendto_if_src+0x134>
  if (pcb->local_port == 0) {
 801ba0c:	8a42      	ldrh	r2, [r0, #18]
 801ba0e:	469b      	mov	fp, r3
 801ba10:	4607      	mov	r7, r0
 801ba12:	2a00      	cmp	r2, #0
 801ba14:	d03c      	beq.n	801ba90 <udp_sendto_if_src+0xb0>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801ba16:	8922      	ldrh	r2, [r4, #8]
 801ba18:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 801ba1c:	429a      	cmp	r2, r3
 801ba1e:	d858      	bhi.n	801bad2 <udp_sendto_if_src+0xf2>
  if (pbuf_add_header(p, UDP_HLEN)) {
 801ba20:	2108      	movs	r1, #8
 801ba22:	4620      	mov	r0, r4
 801ba24:	f7fa fe38 	bl	8016698 <pbuf_add_header>
 801ba28:	2800      	cmp	r0, #0
 801ba2a:	d13b      	bne.n	801baa4 <udp_sendto_if_src+0xc4>
 801ba2c:	4625      	mov	r5, r4
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801ba2e:	896b      	ldrh	r3, [r5, #10]
 801ba30:	2b07      	cmp	r3, #7
 801ba32:	d946      	bls.n	801bac2 <udp_sendto_if_src+0xe2>
  udphdr = (struct udp_hdr *)q->payload;
 801ba34:	686e      	ldr	r6, [r5, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 801ba36:	8a78      	ldrh	r0, [r7, #18]
 801ba38:	f7f9 f800 	bl	8014a3c <lwip_htons>
 801ba3c:	8030      	strh	r0, [r6, #0]
  udphdr->dest = lwip_htons(dst_port);
 801ba3e:	4658      	mov	r0, fp
 801ba40:	f7f8 fffc 	bl	8014a3c <lwip_htons>
  udphdr->chksum = 0x0000;
 801ba44:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 801ba46:	8070      	strh	r0, [r6, #2]
  udphdr->chksum = 0x0000;
 801ba48:	71b3      	strb	r3, [r6, #6]
 801ba4a:	71f3      	strb	r3, [r6, #7]
    udphdr->len = lwip_htons(q->tot_len);
 801ba4c:	8928      	ldrh	r0, [r5, #8]
 801ba4e:	f7f8 fff5 	bl	8014a3c <lwip_htons>
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801ba52:	f04f 0c11 	mov.w	ip, #17
    udphdr->len = lwip_htons(q->tot_len);
 801ba56:	80b0      	strh	r0, [r6, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801ba58:	4642      	mov	r2, r8
 801ba5a:	7afb      	ldrb	r3, [r7, #11]
 801ba5c:	4649      	mov	r1, r9
 801ba5e:	f8cd a008 	str.w	sl, [sp, #8]
 801ba62:	4628      	mov	r0, r5
 801ba64:	f8cd c004 	str.w	ip, [sp, #4]
 801ba68:	7abe      	ldrb	r6, [r7, #10]
 801ba6a:	9600      	str	r6, [sp, #0]
 801ba6c:	f002 fc90 	bl	801e390 <ip4_output_if_src>
  if (q != p) {
 801ba70:	42a5      	cmp	r5, r4
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801ba72:	4606      	mov	r6, r0
  if (q != p) {
 801ba74:	d002      	beq.n	801ba7c <udp_sendto_if_src+0x9c>
    pbuf_free(q);
 801ba76:	4628      	mov	r0, r5
 801ba78:	f7fa fe4e 	bl	8016718 <pbuf_free>
  UDP_STATS_INC(udp.xmit);
 801ba7c:	4a2f      	ldr	r2, [pc, #188]	; (801bb3c <udp_sendto_if_src+0x15c>)
 801ba7e:	f8b2 3078 	ldrh.w	r3, [r2, #120]	; 0x78
 801ba82:	3301      	adds	r3, #1
 801ba84:	f8a2 3078 	strh.w	r3, [r2, #120]	; 0x78
}
 801ba88:	4630      	mov	r0, r6
 801ba8a:	b005      	add	sp, #20
 801ba8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801ba90:	4601      	mov	r1, r0
 801ba92:	f7ff ff25 	bl	801b8e0 <udp_bind>
    if (err != ERR_OK) {
 801ba96:	4606      	mov	r6, r0
 801ba98:	2800      	cmp	r0, #0
 801ba9a:	d0bc      	beq.n	801ba16 <udp_sendto_if_src+0x36>
}
 801ba9c:	4630      	mov	r0, r6
 801ba9e:	b005      	add	sp, #20
 801baa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801baa4:	f44f 7220 	mov.w	r2, #640	; 0x280
 801baa8:	2108      	movs	r1, #8
 801baaa:	2022      	movs	r0, #34	; 0x22
 801baac:	f7fa fea2 	bl	80167f4 <pbuf_alloc>
    if (q == NULL) {
 801bab0:	4605      	mov	r5, r0
 801bab2:	b170      	cbz	r0, 801bad2 <udp_sendto_if_src+0xf2>
    if (p->tot_len != 0) {
 801bab4:	8923      	ldrh	r3, [r4, #8]
 801bab6:	2b00      	cmp	r3, #0
 801bab8:	d0b9      	beq.n	801ba2e <udp_sendto_if_src+0x4e>
      pbuf_chain(q, p);
 801baba:	4621      	mov	r1, r4
 801babc:	f7fa fff8 	bl	8016ab0 <pbuf_chain>
 801bac0:	e7b5      	b.n	801ba2e <udp_sendto_if_src+0x4e>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801bac2:	4b1f      	ldr	r3, [pc, #124]	; (801bb40 <udp_sendto_if_src+0x160>)
 801bac4:	f240 320e 	movw	r2, #782	; 0x30e
 801bac8:	491e      	ldr	r1, [pc, #120]	; (801bb44 <udp_sendto_if_src+0x164>)
 801baca:	481f      	ldr	r0, [pc, #124]	; (801bb48 <udp_sendto_if_src+0x168>)
 801bacc:	f004 ff7c 	bl	80209c8 <iprintf>
 801bad0:	e7b0      	b.n	801ba34 <udp_sendto_if_src+0x54>
    return ERR_MEM;
 801bad2:	f04f 36ff 	mov.w	r6, #4294967295
 801bad6:	e7d7      	b.n	801ba88 <udp_sendto_if_src+0xa8>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801bad8:	4b19      	ldr	r3, [pc, #100]	; (801bb40 <udp_sendto_if_src+0x160>)
 801bada:	f240 22d2 	movw	r2, #722	; 0x2d2
 801bade:	491b      	ldr	r1, [pc, #108]	; (801bb4c <udp_sendto_if_src+0x16c>)
 801bae0:	f06f 060f 	mvn.w	r6, #15
 801bae4:	4818      	ldr	r0, [pc, #96]	; (801bb48 <udp_sendto_if_src+0x168>)
 801bae6:	f004 ff6f 	bl	80209c8 <iprintf>
 801baea:	e7cd      	b.n	801ba88 <udp_sendto_if_src+0xa8>
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801baec:	4b14      	ldr	r3, [pc, #80]	; (801bb40 <udp_sendto_if_src+0x160>)
 801baee:	f240 22d1 	movw	r2, #721	; 0x2d1
 801baf2:	4917      	ldr	r1, [pc, #92]	; (801bb50 <udp_sendto_if_src+0x170>)
 801baf4:	f06f 060f 	mvn.w	r6, #15
 801baf8:	4813      	ldr	r0, [pc, #76]	; (801bb48 <udp_sendto_if_src+0x168>)
 801bafa:	f004 ff65 	bl	80209c8 <iprintf>
 801bafe:	e7c3      	b.n	801ba88 <udp_sendto_if_src+0xa8>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801bb00:	4b0f      	ldr	r3, [pc, #60]	; (801bb40 <udp_sendto_if_src+0x160>)
 801bb02:	f240 22d3 	movw	r2, #723	; 0x2d3
 801bb06:	4913      	ldr	r1, [pc, #76]	; (801bb54 <udp_sendto_if_src+0x174>)
 801bb08:	f06f 060f 	mvn.w	r6, #15
 801bb0c:	480e      	ldr	r0, [pc, #56]	; (801bb48 <udp_sendto_if_src+0x168>)
 801bb0e:	f004 ff5b 	bl	80209c8 <iprintf>
 801bb12:	e7b9      	b.n	801ba88 <udp_sendto_if_src+0xa8>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801bb14:	4b0a      	ldr	r3, [pc, #40]	; (801bb40 <udp_sendto_if_src+0x160>)
 801bb16:	f240 22d5 	movw	r2, #725	; 0x2d5
 801bb1a:	490f      	ldr	r1, [pc, #60]	; (801bb58 <udp_sendto_if_src+0x178>)
 801bb1c:	f06f 060f 	mvn.w	r6, #15
 801bb20:	4809      	ldr	r0, [pc, #36]	; (801bb48 <udp_sendto_if_src+0x168>)
 801bb22:	f004 ff51 	bl	80209c8 <iprintf>
 801bb26:	e7af      	b.n	801ba88 <udp_sendto_if_src+0xa8>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801bb28:	4b05      	ldr	r3, [pc, #20]	; (801bb40 <udp_sendto_if_src+0x160>)
 801bb2a:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801bb2e:	490b      	ldr	r1, [pc, #44]	; (801bb5c <udp_sendto_if_src+0x17c>)
 801bb30:	f06f 060f 	mvn.w	r6, #15
 801bb34:	4804      	ldr	r0, [pc, #16]	; (801bb48 <udp_sendto_if_src+0x168>)
 801bb36:	f004 ff47 	bl	80209c8 <iprintf>
 801bb3a:	e7a5      	b.n	801ba88 <udp_sendto_if_src+0xa8>
 801bb3c:	20036164 	.word	0x20036164
 801bb40:	0803ed3c 	.word	0x0803ed3c
 801bb44:	0803ef88 	.word	0x0803ef88
 801bb48:	0802697c 	.word	0x0802697c
 801bb4c:	0803eefc 	.word	0x0803eefc
 801bb50:	0803eedc 	.word	0x0803eedc
 801bb54:	0803ef1c 	.word	0x0803ef1c
 801bb58:	0803ef64 	.word	0x0803ef64
 801bb5c:	0803ef40 	.word	0x0803ef40

0801bb60 <udp_sendto_if>:
{
 801bb60:	b570      	push	{r4, r5, r6, lr}
 801bb62:	b082      	sub	sp, #8
 801bb64:	9c06      	ldr	r4, [sp, #24]
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801bb66:	b358      	cbz	r0, 801bbc0 <udp_sendto_if+0x60>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801bb68:	b301      	cbz	r1, 801bbac <udp_sendto_if+0x4c>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801bb6a:	b1aa      	cbz	r2, 801bb98 <udp_sendto_if+0x38>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801bb6c:	b394      	cbz	r4, 801bbd4 <udp_sendto_if+0x74>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801bb6e:	6805      	ldr	r5, [r0, #0]
 801bb70:	b935      	cbnz	r5, 801bb80 <udp_sendto_if+0x20>
      src_ip = netif_ip_addr4(netif);
 801bb72:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801bb74:	e9cd 4500 	strd	r4, r5, [sp]
 801bb78:	f7ff ff32 	bl	801b9e0 <udp_sendto_if_src>
}
 801bb7c:	b002      	add	sp, #8
 801bb7e:	bd70      	pop	{r4, r5, r6, pc}
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801bb80:	f005 06f0 	and.w	r6, r5, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801bb84:	2ee0      	cmp	r6, #224	; 0xe0
 801bb86:	d0f4      	beq.n	801bb72 <udp_sendto_if+0x12>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801bb88:	6866      	ldr	r6, [r4, #4]
 801bb8a:	42b5      	cmp	r5, r6
 801bb8c:	d101      	bne.n	801bb92 <udp_sendto_if+0x32>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801bb8e:	4605      	mov	r5, r0
 801bb90:	e7f0      	b.n	801bb74 <udp_sendto_if+0x14>
        return ERR_RTE;
 801bb92:	f06f 0003 	mvn.w	r0, #3
 801bb96:	e7f1      	b.n	801bb7c <udp_sendto_if+0x1c>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801bb98:	4b13      	ldr	r3, [pc, #76]	; (801bbe8 <udp_sendto_if+0x88>)
 801bb9a:	f240 2282 	movw	r2, #642	; 0x282
 801bb9e:	4913      	ldr	r1, [pc, #76]	; (801bbec <udp_sendto_if+0x8c>)
 801bba0:	4813      	ldr	r0, [pc, #76]	; (801bbf0 <udp_sendto_if+0x90>)
 801bba2:	f004 ff11 	bl	80209c8 <iprintf>
 801bba6:	f06f 000f 	mvn.w	r0, #15
 801bbaa:	e7e7      	b.n	801bb7c <udp_sendto_if+0x1c>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801bbac:	4b0e      	ldr	r3, [pc, #56]	; (801bbe8 <udp_sendto_if+0x88>)
 801bbae:	f240 2281 	movw	r2, #641	; 0x281
 801bbb2:	4910      	ldr	r1, [pc, #64]	; (801bbf4 <udp_sendto_if+0x94>)
 801bbb4:	480e      	ldr	r0, [pc, #56]	; (801bbf0 <udp_sendto_if+0x90>)
 801bbb6:	f004 ff07 	bl	80209c8 <iprintf>
 801bbba:	f06f 000f 	mvn.w	r0, #15
 801bbbe:	e7dd      	b.n	801bb7c <udp_sendto_if+0x1c>
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801bbc0:	4b09      	ldr	r3, [pc, #36]	; (801bbe8 <udp_sendto_if+0x88>)
 801bbc2:	f44f 7220 	mov.w	r2, #640	; 0x280
 801bbc6:	490c      	ldr	r1, [pc, #48]	; (801bbf8 <udp_sendto_if+0x98>)
 801bbc8:	4809      	ldr	r0, [pc, #36]	; (801bbf0 <udp_sendto_if+0x90>)
 801bbca:	f004 fefd 	bl	80209c8 <iprintf>
 801bbce:	f06f 000f 	mvn.w	r0, #15
 801bbd2:	e7d3      	b.n	801bb7c <udp_sendto_if+0x1c>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801bbd4:	4b04      	ldr	r3, [pc, #16]	; (801bbe8 <udp_sendto_if+0x88>)
 801bbd6:	f240 2283 	movw	r2, #643	; 0x283
 801bbda:	4908      	ldr	r1, [pc, #32]	; (801bbfc <udp_sendto_if+0x9c>)
 801bbdc:	4804      	ldr	r0, [pc, #16]	; (801bbf0 <udp_sendto_if+0x90>)
 801bbde:	f004 fef3 	bl	80209c8 <iprintf>
 801bbe2:	f06f 000f 	mvn.w	r0, #15
 801bbe6:	e7c9      	b.n	801bb7c <udp_sendto_if+0x1c>
 801bbe8:	0803ed3c 	.word	0x0803ed3c
 801bbec:	0803ee9c 	.word	0x0803ee9c
 801bbf0:	0802697c 	.word	0x0802697c
 801bbf4:	0803ee80 	.word	0x0803ee80
 801bbf8:	0803ee64 	.word	0x0803ee64
 801bbfc:	0803eebc 	.word	0x0803eebc

0801bc00 <udp_sendto>:
{
 801bc00:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bc02:	b083      	sub	sp, #12
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801bc04:	b3a0      	cbz	r0, 801bc70 <udp_sendto+0x70>
 801bc06:	460e      	mov	r6, r1
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801bc08:	b341      	cbz	r1, 801bc5c <udp_sendto+0x5c>
 801bc0a:	4615      	mov	r5, r2
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801bc0c:	b1e2      	cbz	r2, 801bc48 <udp_sendto+0x48>
 801bc0e:	4604      	mov	r4, r0
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801bc10:	7a00      	ldrb	r0, [r0, #8]
 801bc12:	461f      	mov	r7, r3
 801bc14:	b158      	cbz	r0, 801bc2e <udp_sendto+0x2e>
    netif = netif_get_by_index(pcb->netif_idx);
 801bc16:	f7fa fc99 	bl	801654c <netif_get_by_index>
  if (netif == NULL) {
 801bc1a:	b160      	cbz	r0, 801bc36 <udp_sendto+0x36>
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801bc1c:	9000      	str	r0, [sp, #0]
 801bc1e:	463b      	mov	r3, r7
 801bc20:	462a      	mov	r2, r5
 801bc22:	4631      	mov	r1, r6
 801bc24:	4620      	mov	r0, r4
 801bc26:	f7ff ff9b 	bl	801bb60 <udp_sendto_if>
}
 801bc2a:	b003      	add	sp, #12
 801bc2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      netif = ip_route(&pcb->local_ip, dst_ip);
 801bc2e:	4610      	mov	r0, r2
 801bc30:	f002 fa44 	bl	801e0bc <ip4_route>
 801bc34:	e7f1      	b.n	801bc1a <udp_sendto+0x1a>
    UDP_STATS_INC(udp.rterr);
 801bc36:	4a13      	ldr	r2, [pc, #76]	; (801bc84 <udp_sendto+0x84>)
    return ERR_RTE;
 801bc38:	f06f 0003 	mvn.w	r0, #3
    UDP_STATS_INC(udp.rterr);
 801bc3c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 801bc40:	3301      	adds	r3, #1
 801bc42:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
    return ERR_RTE;
 801bc46:	e7f0      	b.n	801bc2a <udp_sendto+0x2a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801bc48:	4b0f      	ldr	r3, [pc, #60]	; (801bc88 <udp_sendto+0x88>)
 801bc4a:	f240 221a 	movw	r2, #538	; 0x21a
 801bc4e:	490f      	ldr	r1, [pc, #60]	; (801bc8c <udp_sendto+0x8c>)
 801bc50:	480f      	ldr	r0, [pc, #60]	; (801bc90 <udp_sendto+0x90>)
 801bc52:	f004 feb9 	bl	80209c8 <iprintf>
 801bc56:	f06f 000f 	mvn.w	r0, #15
 801bc5a:	e7e6      	b.n	801bc2a <udp_sendto+0x2a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801bc5c:	4b0a      	ldr	r3, [pc, #40]	; (801bc88 <udp_sendto+0x88>)
 801bc5e:	f240 2219 	movw	r2, #537	; 0x219
 801bc62:	490c      	ldr	r1, [pc, #48]	; (801bc94 <udp_sendto+0x94>)
 801bc64:	480a      	ldr	r0, [pc, #40]	; (801bc90 <udp_sendto+0x90>)
 801bc66:	f004 feaf 	bl	80209c8 <iprintf>
 801bc6a:	f06f 000f 	mvn.w	r0, #15
 801bc6e:	e7dc      	b.n	801bc2a <udp_sendto+0x2a>
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801bc70:	4b05      	ldr	r3, [pc, #20]	; (801bc88 <udp_sendto+0x88>)
 801bc72:	f44f 7206 	mov.w	r2, #536	; 0x218
 801bc76:	4908      	ldr	r1, [pc, #32]	; (801bc98 <udp_sendto+0x98>)
 801bc78:	4805      	ldr	r0, [pc, #20]	; (801bc90 <udp_sendto+0x90>)
 801bc7a:	f004 fea5 	bl	80209c8 <iprintf>
 801bc7e:	f06f 000f 	mvn.w	r0, #15
 801bc82:	e7d2      	b.n	801bc2a <udp_sendto+0x2a>
 801bc84:	20036164 	.word	0x20036164
 801bc88:	0803ed3c 	.word	0x0803ed3c
 801bc8c:	0803ee48 	.word	0x0803ee48
 801bc90:	0802697c 	.word	0x0802697c
 801bc94:	0803ee2c 	.word	0x0803ee2c
 801bc98:	0803ee14 	.word	0x0803ee14

0801bc9c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801bc9c:	b570      	push	{r4, r5, r6, lr}
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801bc9e:	b320      	cbz	r0, 801bcea <udp_connect+0x4e>
 801bca0:	460d      	mov	r5, r1
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801bca2:	b361      	cbz	r1, 801bcfe <udp_connect+0x62>
 801bca4:	4616      	mov	r6, r2

  if (pcb->local_port == 0) {
 801bca6:	8a42      	ldrh	r2, [r0, #18]
 801bca8:	4604      	mov	r4, r0
 801bcaa:	b1c2      	cbz	r2, 801bcde <udp_connect+0x42>
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801bcac:	7c23      	ldrb	r3, [r4, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801bcae:	4919      	ldr	r1, [pc, #100]	; (801bd14 <udp_connect+0x78>)
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801bcb0:	6828      	ldr	r0, [r5, #0]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801bcb2:	f043 0304 	orr.w	r3, r3, #4
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801bcb6:	680a      	ldr	r2, [r1, #0]
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801bcb8:	6060      	str	r0, [r4, #4]
  pcb->remote_port = port;
 801bcba:	82a6      	strh	r6, [r4, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801bcbc:	7423      	strb	r3, [r4, #16]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801bcbe:	b142      	cbz	r2, 801bcd2 <udp_connect+0x36>
    if (pcb == ipcb) {
 801bcc0:	4294      	cmp	r4, r2
 801bcc2:	d00a      	beq.n	801bcda <udp_connect+0x3e>
 801bcc4:	4613      	mov	r3, r2
 801bcc6:	e001      	b.n	801bccc <udp_connect+0x30>
 801bcc8:	429c      	cmp	r4, r3
 801bcca:	d006      	beq.n	801bcda <udp_connect+0x3e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801bccc:	68db      	ldr	r3, [r3, #12]
 801bcce:	2b00      	cmp	r3, #0
 801bcd0:	d1fa      	bne.n	801bcc8 <udp_connect+0x2c>
      /* already on the list, just return */
      return ERR_OK;
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801bcd2:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
  return ERR_OK;
 801bcd4:	2000      	movs	r0, #0
  udp_pcbs = pcb;
 801bcd6:	600c      	str	r4, [r1, #0]
}
 801bcd8:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_OK;
 801bcda:	2000      	movs	r0, #0
}
 801bcdc:	bd70      	pop	{r4, r5, r6, pc}
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801bcde:	4601      	mov	r1, r0
 801bce0:	f7ff fdfe 	bl	801b8e0 <udp_bind>
    if (err != ERR_OK) {
 801bce4:	2800      	cmp	r0, #0
 801bce6:	d0e1      	beq.n	801bcac <udp_connect+0x10>
}
 801bce8:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801bcea:	4b0b      	ldr	r3, [pc, #44]	; (801bd18 <udp_connect+0x7c>)
 801bcec:	f240 4235 	movw	r2, #1077	; 0x435
 801bcf0:	490a      	ldr	r1, [pc, #40]	; (801bd1c <udp_connect+0x80>)
 801bcf2:	480b      	ldr	r0, [pc, #44]	; (801bd20 <udp_connect+0x84>)
 801bcf4:	f004 fe68 	bl	80209c8 <iprintf>
 801bcf8:	f06f 000f 	mvn.w	r0, #15
}
 801bcfc:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801bcfe:	4b06      	ldr	r3, [pc, #24]	; (801bd18 <udp_connect+0x7c>)
 801bd00:	f240 4236 	movw	r2, #1078	; 0x436
 801bd04:	4907      	ldr	r1, [pc, #28]	; (801bd24 <udp_connect+0x88>)
 801bd06:	4806      	ldr	r0, [pc, #24]	; (801bd20 <udp_connect+0x84>)
 801bd08:	f004 fe5e 	bl	80209c8 <iprintf>
 801bd0c:	f06f 000f 	mvn.w	r0, #15
}
 801bd10:	bd70      	pop	{r4, r5, r6, pc}
 801bd12:	bf00      	nop
 801bd14:	20036288 	.word	0x20036288
 801bd18:	0803ed3c 	.word	0x0803ed3c
 801bd1c:	0803ed04 	.word	0x0803ed04
 801bd20:	0802697c 	.word	0x0802697c
 801bd24:	0803ed20 	.word	0x0803ed20

0801bd28 <udp_recv>:
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801bd28:	b110      	cbz	r0, 801bd30 <udp_recv+0x8>

  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 801bd2a:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
 801bd2e:	4770      	bx	lr
  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801bd30:	4b03      	ldr	r3, [pc, #12]	; (801bd40 <udp_recv+0x18>)
 801bd32:	f240 428a 	movw	r2, #1162	; 0x48a
 801bd36:	4903      	ldr	r1, [pc, #12]	; (801bd44 <udp_recv+0x1c>)
 801bd38:	4803      	ldr	r0, [pc, #12]	; (801bd48 <udp_recv+0x20>)
 801bd3a:	f004 be45 	b.w	80209c8 <iprintf>
 801bd3e:	bf00      	nop
 801bd40:	0803ed3c 	.word	0x0803ed3c
 801bd44:	0803ede4 	.word	0x0803ede4
 801bd48:	0802697c 	.word	0x0802697c

0801bd4c <udp_remove>:
{
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801bd4c:	b1d8      	cbz	r0, 801bd86 <udp_remove+0x3a>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801bd4e:	4b11      	ldr	r3, [pc, #68]	; (801bd94 <udp_remove+0x48>)
 801bd50:	681a      	ldr	r2, [r3, #0]
 801bd52:	4282      	cmp	r2, r0
 801bd54:	d00b      	beq.n	801bd6e <udp_remove+0x22>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801bd56:	b132      	cbz	r2, 801bd66 <udp_remove+0x1a>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801bd58:	68d3      	ldr	r3, [r2, #12]
 801bd5a:	b123      	cbz	r3, 801bd66 <udp_remove+0x1a>
 801bd5c:	4298      	cmp	r0, r3
 801bd5e:	d00c      	beq.n	801bd7a <udp_remove+0x2e>
 801bd60:	461a      	mov	r2, r3
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801bd62:	2a00      	cmp	r2, #0
 801bd64:	d1f8      	bne.n	801bd58 <udp_remove+0xc>
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801bd66:	4601      	mov	r1, r0
 801bd68:	2001      	movs	r0, #1
 801bd6a:	f7fa b9fb 	b.w	8016164 <memp_free>
    udp_pcbs = udp_pcbs->next;
 801bd6e:	68c2      	ldr	r2, [r0, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 801bd70:	4601      	mov	r1, r0
 801bd72:	2001      	movs	r0, #1
    udp_pcbs = udp_pcbs->next;
 801bd74:	601a      	str	r2, [r3, #0]
  memp_free(MEMP_UDP_PCB, pcb);
 801bd76:	f7fa b9f5 	b.w	8016164 <memp_free>
        pcb2->next = pcb->next;
 801bd7a:	68c3      	ldr	r3, [r0, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 801bd7c:	4601      	mov	r1, r0
 801bd7e:	2001      	movs	r0, #1
        pcb2->next = pcb->next;
 801bd80:	60d3      	str	r3, [r2, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 801bd82:	f7fa b9ef 	b.w	8016164 <memp_free>
  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801bd86:	4b04      	ldr	r3, [pc, #16]	; (801bd98 <udp_remove+0x4c>)
 801bd88:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801bd8c:	4903      	ldr	r1, [pc, #12]	; (801bd9c <udp_remove+0x50>)
 801bd8e:	4804      	ldr	r0, [pc, #16]	; (801bda0 <udp_remove+0x54>)
 801bd90:	f004 be1a 	b.w	80209c8 <iprintf>
 801bd94:	20036288 	.word	0x20036288
 801bd98:	0803ed3c 	.word	0x0803ed3c
 801bd9c:	0803edfc 	.word	0x0803edfc
 801bda0:	0802697c 	.word	0x0802697c

0801bda4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801bda4:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801bda6:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 801bdaa:	4907      	ldr	r1, [pc, #28]	; (801bdc8 <udp_new+0x24>)
 801bdac:	2001      	movs	r0, #1
 801bdae:	f7fa f9b5 	bl	801611c <memp_malloc_fn>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801bdb2:	4604      	mov	r4, r0
 801bdb4:	b128      	cbz	r0, 801bdc2 <udp_new+0x1e>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801bdb6:	2220      	movs	r2, #32
 801bdb8:	2100      	movs	r1, #0
 801bdba:	f003 fe84 	bl	801fac6 <memset>
    pcb->ttl = UDP_TTL;
 801bdbe:	23ff      	movs	r3, #255	; 0xff
 801bdc0:	72e3      	strb	r3, [r4, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 801bdc2:	4620      	mov	r0, r4
 801bdc4:	bd10      	pop	{r4, pc}
 801bdc6:	bf00      	nop
 801bdc8:	0803ed3c 	.word	0x0803ed3c

0801bdcc <udp_new_ip_type>:
{
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801bdcc:	f7ff bfea 	b.w	801bda4 <udp_new>

0801bdd0 <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801bdd0:	b1a8      	cbz	r0, 801bdfe <udp_netif_ip_addr_changed+0x2e>
 801bdd2:	6802      	ldr	r2, [r0, #0]
 801bdd4:	b199      	cbz	r1, 801bdfe <udp_netif_ip_addr_changed+0x2e>
 801bdd6:	b192      	cbz	r2, 801bdfe <udp_netif_ip_addr_changed+0x2e>
 801bdd8:	680b      	ldr	r3, [r1, #0]
 801bdda:	b183      	cbz	r3, 801bdfe <udp_netif_ip_addr_changed+0x2e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801bddc:	4b08      	ldr	r3, [pc, #32]	; (801be00 <udp_netif_ip_addr_changed+0x30>)
 801bdde:	681b      	ldr	r3, [r3, #0]
 801bde0:	b16b      	cbz	r3, 801bdfe <udp_netif_ip_addr_changed+0x2e>
{
 801bde2:	b410      	push	{r4}
 801bde4:	e000      	b.n	801bde8 <udp_netif_ip_addr_changed+0x18>
 801bde6:	6802      	ldr	r2, [r0, #0]
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801bde8:	681c      	ldr	r4, [r3, #0]
 801bdea:	4294      	cmp	r4, r2
 801bdec:	d101      	bne.n	801bdf2 <udp_netif_ip_addr_changed+0x22>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801bdee:	680a      	ldr	r2, [r1, #0]
 801bdf0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801bdf2:	68db      	ldr	r3, [r3, #12]
 801bdf4:	2b00      	cmp	r3, #0
 801bdf6:	d1f6      	bne.n	801bde6 <udp_netif_ip_addr_changed+0x16>
      }
    }
  }
}
 801bdf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bdfc:	4770      	bx	lr
 801bdfe:	4770      	bx	lr
 801be00:	20036288 	.word	0x20036288

0801be04 <dhcp_option_short>:
  return options_out_len;
}

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 801be04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801be06:	1c87      	adds	r7, r0, #2
{
 801be08:	4604      	mov	r4, r0
 801be0a:	460d      	mov	r5, r1
 801be0c:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801be0e:	2f44      	cmp	r7, #68	; 0x44
 801be10:	d906      	bls.n	801be20 <dhcp_option_short+0x1c>
 801be12:	4b07      	ldr	r3, [pc, #28]	; (801be30 <dhcp_option_short+0x2c>)
 801be14:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801be18:	4906      	ldr	r1, [pc, #24]	; (801be34 <dhcp_option_short+0x30>)
 801be1a:	4807      	ldr	r0, [pc, #28]	; (801be38 <dhcp_option_short+0x34>)
 801be1c:	f004 fdd4 	bl	80209c8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801be20:	1c63      	adds	r3, r4, #1
 801be22:	0a32      	lsrs	r2, r6, #8
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
  return options_out_len;
}
 801be24:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801be26:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801be28:	552a      	strb	r2, [r5, r4]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801be2a:	54ee      	strb	r6, [r5, r3]
}
 801be2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801be2e:	bf00      	nop
 801be30:	0803f150 	.word	0x0803f150
 801be34:	0803f188 	.word	0x0803f188
 801be38:	0802697c 	.word	0x0802697c

0801be3c <dhcp_option>:
{
 801be3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801be3e:	461e      	mov	r6, r3
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801be40:	3302      	adds	r3, #2
{
 801be42:	4604      	mov	r4, r0
 801be44:	460d      	mov	r5, r1
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801be46:	4403      	add	r3, r0
{
 801be48:	4617      	mov	r7, r2
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801be4a:	2b44      	cmp	r3, #68	; 0x44
 801be4c:	d906      	bls.n	801be5c <dhcp_option+0x20>
 801be4e:	4b07      	ldr	r3, [pc, #28]	; (801be6c <dhcp_option+0x30>)
 801be50:	f240 529a 	movw	r2, #1434	; 0x59a
 801be54:	4906      	ldr	r1, [pc, #24]	; (801be70 <dhcp_option+0x34>)
 801be56:	4807      	ldr	r0, [pc, #28]	; (801be74 <dhcp_option+0x38>)
 801be58:	f004 fdb6 	bl	80209c8 <iprintf>
  options[options_out_len++] = option_type;
 801be5c:	1c63      	adds	r3, r4, #1
  options[options_out_len++] = option_len;
 801be5e:	1ca0      	adds	r0, r4, #2
  options[options_out_len++] = option_type;
 801be60:	552f      	strb	r7, [r5, r4]
  options[options_out_len++] = option_len;
 801be62:	b29b      	uxth	r3, r3
}
 801be64:	b280      	uxth	r0, r0
  options[options_out_len++] = option_len;
 801be66:	54ee      	strb	r6, [r5, r3]
}
 801be68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801be6a:	bf00      	nop
 801be6c:	0803f150 	.word	0x0803f150
 801be70:	0803f0d0 	.word	0x0803f0d0
 801be74:	0802697c 	.word	0x0802697c

0801be78 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801be78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801be7a:	1d07      	adds	r7, r0, #4
{
 801be7c:	4604      	mov	r4, r0
 801be7e:	460d      	mov	r5, r1
 801be80:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801be82:	2f44      	cmp	r7, #68	; 0x44
 801be84:	d906      	bls.n	801be94 <dhcp_option_long+0x1c>
 801be86:	4b0b      	ldr	r3, [pc, #44]	; (801beb4 <dhcp_option_long+0x3c>)
 801be88:	f240 52b7 	movw	r2, #1463	; 0x5b7
 801be8c:	490a      	ldr	r1, [pc, #40]	; (801beb8 <dhcp_option_long+0x40>)
 801be8e:	480b      	ldr	r0, [pc, #44]	; (801bebc <dhcp_option_long+0x44>)
 801be90:	f004 fd9a 	bl	80209c8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801be94:	0e30      	lsrs	r0, r6, #24
 801be96:	1c61      	adds	r1, r4, #1
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801be98:	1ca2      	adds	r2, r4, #2
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801be9a:	1ce3      	adds	r3, r4, #3
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801be9c:	5528      	strb	r0, [r5, r4]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801be9e:	b289      	uxth	r1, r1
 801bea0:	0c34      	lsrs	r4, r6, #16
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801bea2:	b292      	uxth	r2, r2
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801bea4:	546c      	strb	r4, [r5, r1]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801bea6:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801bea8:	0a31      	lsrs	r1, r6, #8
  return options_out_len;
}
 801beaa:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801beac:	54a9      	strb	r1, [r5, r2]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801beae:	54ee      	strb	r6, [r5, r3]
}
 801beb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801beb2:	bf00      	nop
 801beb4:	0803f150 	.word	0x0803f150
 801beb8:	0803f114 	.word	0x0803f114
 801bebc:	0802697c 	.word	0x0802697c

0801bec0 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801bec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801bec4:	4680      	mov	r8, r0
 801bec6:	2800      	cmp	r0, #0
 801bec8:	f000 8092 	beq.w	801bff0 <dhcp_create_msg+0x130>
 801becc:	4689      	mov	r9, r1
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801bece:	2900      	cmp	r1, #0
 801bed0:	f000 8085 	beq.w	801bfde <dhcp_create_msg+0x11e>
 801bed4:	4616      	mov	r6, r2
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801bed6:	f44f 719a 	mov.w	r1, #308	; 0x134
 801beda:	f44f 7220 	mov.w	r2, #640	; 0x280
 801bede:	2036      	movs	r0, #54	; 0x36
 801bee0:	461f      	mov	r7, r3
 801bee2:	f7fa fc87 	bl	80167f4 <pbuf_alloc>
  if (p_out == NULL) {
 801bee6:	4605      	mov	r5, r0
 801bee8:	2800      	cmp	r0, #0
 801beea:	d046      	beq.n	801bf7a <dhcp_create_msg+0xba>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801beec:	8943      	ldrh	r3, [r0, #10]
 801beee:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801bef2:	d366      	bcc.n	801bfc2 <dhcp_create_msg+0x102>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801bef4:	2e03      	cmp	r6, #3
 801bef6:	d048      	beq.n	801bf8a <dhcp_create_msg+0xca>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801bef8:	f899 3006 	ldrb.w	r3, [r9, #6]
 801befc:	2b00      	cmp	r3, #0
 801befe:	d03f      	beq.n	801bf80 <dhcp_create_msg+0xc0>
 801bf00:	4b40      	ldr	r3, [pc, #256]	; (801c004 <dhcp_create_msg+0x144>)
 801bf02:	6818      	ldr	r0, [r3, #0]
    dhcp->xid = xid;
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801bf04:	686c      	ldr	r4, [r5, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801bf06:	f44f 729a 	mov.w	r2, #308	; 0x134
    dhcp->xid = xid;
 801bf0a:	f8c9 0000 	str.w	r0, [r9]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801bf0e:	2100      	movs	r1, #0
 801bf10:	4620      	mov	r0, r4
 801bf12:	f003 fdd8 	bl	801fac6 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801bf16:	2301      	movs	r3, #1
 801bf18:	7023      	strb	r3, [r4, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801bf1a:	7063      	strb	r3, [r4, #1]
  msg_out->hlen = netif->hwaddr_len;
 801bf1c:	f898 3034 	ldrb.w	r3, [r8, #52]	; 0x34
 801bf20:	70a3      	strb	r3, [r4, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801bf22:	f8d9 0000 	ldr.w	r0, [r9]
 801bf26:	f7f8 fd8d 	bl	8014a44 <lwip_htonl>
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801bf2a:	2e04      	cmp	r6, #4
  msg_out->xid = lwip_htonl(dhcp->xid);
 801bf2c:	6060      	str	r0, [r4, #4]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801bf2e:	d150      	bne.n	801bfd2 <dhcp_create_msg+0x112>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801bf30:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801bf34:	60e3      	str	r3, [r4, #12]
 801bf36:	f108 032e 	add.w	r3, r8, #46	; 0x2e
 801bf3a:	f108 0034 	add.w	r0, r8, #52	; 0x34
 801bf3e:	f104 021c 	add.w	r2, r4, #28
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801bf42:	f813 1b01 	ldrb.w	r1, [r3], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801bf46:	4283      	cmp	r3, r0
    msg_out->chaddr[i] = netif->hwaddr[i];
 801bf48:	f802 1b01 	strb.w	r1, [r2], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801bf4c:	d1f9      	bne.n	801bf42 <dhcp_create_msg+0x82>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801bf4e:	2363      	movs	r3, #99	; 0x63
 801bf50:	f06f 0c7d 	mvn.w	ip, #125	; 0x7d
 801bf54:	2053      	movs	r0, #83	; 0x53
  options[options_out_len++] = option_type;
 801bf56:	2135      	movs	r1, #53	; 0x35
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801bf58:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
  options[options_out_len++] = option_len;
 801bf5c:	2201      	movs	r2, #1
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801bf5e:	f884 30ef 	strb.w	r3, [r4, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
  if (options_out_len) {
    *options_out_len = options_out_len_loc;
 801bf62:	2303      	movs	r3, #3
  options[options_out_len++] = value;
 801bf64:	f884 60f2 	strb.w	r6, [r4, #242]	; 0xf2
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801bf68:	f884 c0ed 	strb.w	ip, [r4, #237]	; 0xed
 801bf6c:	f884 00ee 	strb.w	r0, [r4, #238]	; 0xee
  options[options_out_len++] = option_type;
 801bf70:	f884 10f0 	strb.w	r1, [r4, #240]	; 0xf0
  options[options_out_len++] = option_len;
 801bf74:	f884 20f1 	strb.w	r2, [r4, #241]	; 0xf1
    *options_out_len = options_out_len_loc;
 801bf78:	803b      	strh	r3, [r7, #0]
  }
  return p_out;
}
 801bf7a:	4628      	mov	r0, r5
 801bf7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      xid = LWIP_RAND();
 801bf80:	f004 fdb2 	bl	8020ae8 <rand>
 801bf84:	4b1f      	ldr	r3, [pc, #124]	; (801c004 <dhcp_create_msg+0x144>)
 801bf86:	6018      	str	r0, [r3, #0]
 801bf88:	e7bc      	b.n	801bf04 <dhcp_create_msg+0x44>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801bf8a:	f899 3005 	ldrb.w	r3, [r9, #5]
 801bf8e:	2b03      	cmp	r3, #3
 801bf90:	d0b2      	beq.n	801bef8 <dhcp_create_msg+0x38>
  msg_out = (struct dhcp_msg *)p_out->payload;
 801bf92:	686c      	ldr	r4, [r5, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801bf94:	f44f 729a 	mov.w	r2, #308	; 0x134
 801bf98:	2100      	movs	r1, #0
 801bf9a:	4620      	mov	r0, r4
 801bf9c:	f003 fd93 	bl	801fac6 <memset>
  msg_out->op = DHCP_BOOTREQUEST;
 801bfa0:	2301      	movs	r3, #1
 801bfa2:	7023      	strb	r3, [r4, #0]
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801bfa4:	7063      	strb	r3, [r4, #1]
  msg_out->hlen = netif->hwaddr_len;
 801bfa6:	f898 3034 	ldrb.w	r3, [r8, #52]	; 0x34
 801bfaa:	70a3      	strb	r3, [r4, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801bfac:	f8d9 0000 	ldr.w	r0, [r9]
 801bfb0:	f7f8 fd48 	bl	8014a44 <lwip_htonl>
 801bfb4:	6060      	str	r0, [r4, #4]
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801bfb6:	f899 3005 	ldrb.w	r3, [r9, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801bfba:	3b04      	subs	r3, #4
 801bfbc:	2b01      	cmp	r3, #1
 801bfbe:	d8ba      	bhi.n	801bf36 <dhcp_create_msg+0x76>
 801bfc0:	e7b6      	b.n	801bf30 <dhcp_create_msg+0x70>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801bfc2:	4b11      	ldr	r3, [pc, #68]	; (801c008 <dhcp_create_msg+0x148>)
 801bfc4:	f240 7272 	movw	r2, #1906	; 0x772
 801bfc8:	4910      	ldr	r1, [pc, #64]	; (801c00c <dhcp_create_msg+0x14c>)
 801bfca:	4811      	ldr	r0, [pc, #68]	; (801c010 <dhcp_create_msg+0x150>)
 801bfcc:	f004 fcfc 	bl	80209c8 <iprintf>
 801bfd0:	e790      	b.n	801bef4 <dhcp_create_msg+0x34>
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801bfd2:	1ff3      	subs	r3, r6, #7
 801bfd4:	2b01      	cmp	r3, #1
 801bfd6:	d9ab      	bls.n	801bf30 <dhcp_create_msg+0x70>
 801bfd8:	2e03      	cmp	r6, #3
 801bfda:	d1ac      	bne.n	801bf36 <dhcp_create_msg+0x76>
 801bfdc:	e7eb      	b.n	801bfb6 <dhcp_create_msg+0xf6>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801bfde:	4b0a      	ldr	r3, [pc, #40]	; (801c008 <dhcp_create_msg+0x148>)
 801bfe0:	f240 726a 	movw	r2, #1898	; 0x76a
 801bfe4:	490b      	ldr	r1, [pc, #44]	; (801c014 <dhcp_create_msg+0x154>)
 801bfe6:	464d      	mov	r5, r9
 801bfe8:	4809      	ldr	r0, [pc, #36]	; (801c010 <dhcp_create_msg+0x150>)
 801bfea:	f004 fced 	bl	80209c8 <iprintf>
 801bfee:	e7c4      	b.n	801bf7a <dhcp_create_msg+0xba>
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801bff0:	4605      	mov	r5, r0
 801bff2:	4b05      	ldr	r3, [pc, #20]	; (801c008 <dhcp_create_msg+0x148>)
 801bff4:	f240 7269 	movw	r2, #1897	; 0x769
 801bff8:	4907      	ldr	r1, [pc, #28]	; (801c018 <dhcp_create_msg+0x158>)
 801bffa:	4805      	ldr	r0, [pc, #20]	; (801c010 <dhcp_create_msg+0x150>)
 801bffc:	f004 fce4 	bl	80209c8 <iprintf>
 801c000:	e7bb      	b.n	801bf7a <dhcp_create_msg+0xba>
 801c002:	bf00      	nop
 801c004:	20022438 	.word	0x20022438
 801c008:	0803f150 	.word	0x0803f150
 801c00c:	0803f02c 	.word	0x0803f02c
 801c010:	0802697c 	.word	0x0802697c
 801c014:	0803f00c 	.word	0x0803f00c
 801c018:	0803efec 	.word	0x0803efec

0801c01c <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801c01c:	b470      	push	{r4, r5, r6}
  options[options_out_len++] = DHCP_OPTION_END;
 801c01e:	1c45      	adds	r5, r0, #1
 801c020:	23ff      	movs	r3, #255	; 0xff
 801c022:	b2ae      	uxth	r6, r5
 801c024:	540b      	strb	r3, [r1, r0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801c026:	2e43      	cmp	r6, #67	; 0x43
 801c028:	d80c      	bhi.n	801c044 <dhcp_option_trailer+0x28>
 801c02a:	f1c0 0542 	rsb	r5, r0, #66	; 0x42
 801c02e:	1e73      	subs	r3, r6, #1
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801c030:	2400      	movs	r4, #0
 801c032:	fa16 f585 	uxtah	r5, r6, r5
 801c036:	440b      	add	r3, r1
 801c038:	4429      	add	r1, r5
 801c03a:	f803 4f01 	strb.w	r4, [r3, #1]!
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801c03e:	428b      	cmp	r3, r1
 801c040:	d1fb      	bne.n	801c03a <dhcp_option_trailer+0x1e>
    options[options_out_len++] = 0;
 801c042:	2644      	movs	r6, #68	; 0x44
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801c044:	f106 01f0 	add.w	r1, r6, #240	; 0xf0
 801c048:	4610      	mov	r0, r2
 801c04a:	b289      	uxth	r1, r1
}
 801c04c:	bc70      	pop	{r4, r5, r6}
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801c04e:	f7fa bc6f 	b.w	8016930 <pbuf_realloc>
 801c052:	bf00      	nop

0801c054 <dhcp_reboot>:
{
 801c054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c058:	6a86      	ldr	r6, [r0, #40]	; 0x28
{
 801c05a:	b085      	sub	sp, #20
 801c05c:	4683      	mov	fp, r0
  if (new_state != dhcp->state) {
 801c05e:	7973      	ldrb	r3, [r6, #5]
 801c060:	2b03      	cmp	r3, #3
 801c062:	d004      	beq.n	801c06e <dhcp_reboot+0x1a>
    dhcp->tries = 0;
 801c064:	2300      	movs	r3, #0
    dhcp->state = new_state;
 801c066:	2203      	movs	r2, #3
    dhcp->tries = 0;
 801c068:	71b3      	strb	r3, [r6, #6]
    dhcp->state = new_state;
 801c06a:	7172      	strb	r2, [r6, #5]
    dhcp->request_timeout = 0;
 801c06c:	8133      	strh	r3, [r6, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801c06e:	f10d 030e 	add.w	r3, sp, #14
 801c072:	2203      	movs	r2, #3
 801c074:	4631      	mov	r1, r6
 801c076:	4658      	mov	r0, fp
 801c078:	f7ff ff22 	bl	801bec0 <dhcp_create_msg>
  if (p_out != NULL) {
 801c07c:	4682      	mov	sl, r0
 801c07e:	2800      	cmp	r0, #0
 801c080:	d078      	beq.n	801c174 <dhcp_reboot+0x120>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801c082:	6845      	ldr	r5, [r0, #4]
 801c084:	2302      	movs	r3, #2
 801c086:	2239      	movs	r2, #57	; 0x39
 801c088:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 801c08c:	35f0      	adds	r5, #240	; 0xf0
 801c08e:	f8df 9104 	ldr.w	r9, [pc, #260]	; 801c194 <dhcp_reboot+0x140>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801c092:	f04f 0801 	mov.w	r8, #1
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801c096:	4629      	mov	r1, r5
 801c098:	f7ff fed0 	bl	801be3c <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801c09c:	4629      	mov	r1, r5
 801c09e:	f44f 7210 	mov.w	r2, #576	; 0x240
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801c0a2:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801c0a6:	f7ff fead 	bl	801be04 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801c0aa:	2304      	movs	r3, #4
 801c0ac:	4629      	mov	r1, r5
 801c0ae:	2232      	movs	r2, #50	; 0x32
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801c0b0:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801c0b4:	f7ff fec2 	bl	801be3c <dhcp_option>
 801c0b8:	4604      	mov	r4, r0
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801c0ba:	69f0      	ldr	r0, [r6, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801c0bc:	f8ad 400e 	strh.w	r4, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801c0c0:	f7f8 fcc0 	bl	8014a44 <lwip_htonl>
 801c0c4:	4629      	mov	r1, r5
 801c0c6:	4602      	mov	r2, r0
 801c0c8:	4620      	mov	r0, r4
 801c0ca:	f7ff fed5 	bl	801be78 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801c0ce:	4629      	mov	r1, r5
 801c0d0:	2304      	movs	r3, #4
 801c0d2:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801c0d4:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801c0d8:	f7ff feb0 	bl	801be3c <dhcp_option>
 801c0dc:	4604      	mov	r4, r0
 801c0de:	1d07      	adds	r7, r0, #4
 801c0e0:	f8ad 000e 	strh.w	r0, [sp, #14]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801c0e4:	2c43      	cmp	r4, #67	; 0x43
 801c0e6:	b2bf      	uxth	r7, r7
 801c0e8:	d80b      	bhi.n	801c102 <dhcp_reboot+0xae>
  options[options_out_len++] = value;
 801c0ea:	1c63      	adds	r3, r4, #1
 801c0ec:	f805 8004 	strb.w	r8, [r5, r4]
 801c0f0:	b29c      	uxth	r4, r3
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c0f2:	42bc      	cmp	r4, r7
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801c0f4:	f8ad 400e 	strh.w	r4, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c0f8:	d00b      	beq.n	801c112 <dhcp_reboot+0xbe>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801c0fa:	2c43      	cmp	r4, #67	; 0x43
 801c0fc:	f819 8b01 	ldrb.w	r8, [r9], #1
 801c100:	d9f3      	bls.n	801c0ea <dhcp_reboot+0x96>
 801c102:	4b1e      	ldr	r3, [pc, #120]	; (801c17c <dhcp_reboot+0x128>)
 801c104:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801c108:	491d      	ldr	r1, [pc, #116]	; (801c180 <dhcp_reboot+0x12c>)
 801c10a:	481e      	ldr	r0, [pc, #120]	; (801c184 <dhcp_reboot+0x130>)
 801c10c:	f004 fc5c 	bl	80209c8 <iprintf>
 801c110:	e7eb      	b.n	801c0ea <dhcp_reboot+0x96>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801c112:	4629      	mov	r1, r5
 801c114:	4638      	mov	r0, r7
 801c116:	4652      	mov	r2, sl
 801c118:	f7ff ff80 	bl	801c01c <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801c11c:	4a1a      	ldr	r2, [pc, #104]	; (801c188 <dhcp_reboot+0x134>)
 801c11e:	f8cd b000 	str.w	fp, [sp]
 801c122:	2343      	movs	r3, #67	; 0x43
 801c124:	6810      	ldr	r0, [r2, #0]
 801c126:	4651      	mov	r1, sl
 801c128:	4a18      	ldr	r2, [pc, #96]	; (801c18c <dhcp_reboot+0x138>)
 801c12a:	f7ff fd19 	bl	801bb60 <udp_sendto_if>
 801c12e:	4604      	mov	r4, r0
    pbuf_free(p_out);
 801c130:	4650      	mov	r0, sl
 801c132:	f7fa faf1 	bl	8016718 <pbuf_free>
  if (dhcp->tries < 255) {
 801c136:	79b3      	ldrb	r3, [r6, #6]
 801c138:	2bff      	cmp	r3, #255	; 0xff
 801c13a:	d015      	beq.n	801c168 <dhcp_reboot+0x114>
    dhcp->tries++;
 801c13c:	3301      	adds	r3, #1
 801c13e:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801c140:	2b09      	cmp	r3, #9
    dhcp->tries++;
 801c142:	71b3      	strb	r3, [r6, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801c144:	d810      	bhi.n	801c168 <dhcp_reboot+0x114>
 801c146:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
 801c14a:	4a11      	ldr	r2, [pc, #68]	; (801c190 <dhcp_reboot+0x13c>)
}
 801c14c:	4620      	mov	r0, r4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801c14e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801c152:	00db      	lsls	r3, r3, #3
 801c154:	b29b      	uxth	r3, r3
 801c156:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801c15a:	fba2 2303 	umull	r2, r3, r2, r3
 801c15e:	095b      	lsrs	r3, r3, #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801c160:	8133      	strh	r3, [r6, #8]
}
 801c162:	b005      	add	sp, #20
 801c164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    result = ERR_MEM;
 801c168:	2314      	movs	r3, #20
}
 801c16a:	4620      	mov	r0, r4
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801c16c:	8133      	strh	r3, [r6, #8]
}
 801c16e:	b005      	add	sp, #20
 801c170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    result = ERR_MEM;
 801c174:	f04f 34ff 	mov.w	r4, #4294967295
 801c178:	e7dd      	b.n	801c136 <dhcp_reboot+0xe2>
 801c17a:	bf00      	nop
 801c17c:	0803f150 	.word	0x0803f150
 801c180:	0803f1c4 	.word	0x0803f1c4
 801c184:	0802697c 	.word	0x0802697c
 801c188:	20022430 	.word	0x20022430
 801c18c:	0803f670 	.word	0x0803f670
 801c190:	10624dd3 	.word	0x10624dd3
 801c194:	0803f091 	.word	0x0803f091

0801c198 <dhcp_select>:
{
 801c198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c19c:	b085      	sub	sp, #20
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 801c19e:	2800      	cmp	r0, #0
 801c1a0:	f000 80ac 	beq.w	801c2fc <dhcp_select+0x164>
  dhcp = netif_dhcp_data(netif);
 801c1a4:	6a85      	ldr	r5, [r0, #40]	; 0x28
 801c1a6:	4607      	mov	r7, r0
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801c1a8:	2d00      	cmp	r5, #0
 801c1aa:	f000 809d 	beq.w	801c2e8 <dhcp_select+0x150>
  if (new_state != dhcp->state) {
 801c1ae:	796b      	ldrb	r3, [r5, #5]
 801c1b0:	2b01      	cmp	r3, #1
 801c1b2:	d004      	beq.n	801c1be <dhcp_select+0x26>
    dhcp->tries = 0;
 801c1b4:	2300      	movs	r3, #0
    dhcp->state = new_state;
 801c1b6:	2201      	movs	r2, #1
    dhcp->tries = 0;
 801c1b8:	71ab      	strb	r3, [r5, #6]
    dhcp->state = new_state;
 801c1ba:	716a      	strb	r2, [r5, #5]
    dhcp->request_timeout = 0;
 801c1bc:	812b      	strh	r3, [r5, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801c1be:	f10d 030e 	add.w	r3, sp, #14
 801c1c2:	2203      	movs	r2, #3
 801c1c4:	4629      	mov	r1, r5
 801c1c6:	4638      	mov	r0, r7
 801c1c8:	f7ff fe7a 	bl	801bec0 <dhcp_create_msg>
  if (p_out != NULL) {
 801c1cc:	4682      	mov	sl, r0
 801c1ce:	2800      	cmp	r0, #0
 801c1d0:	f000 8087 	beq.w	801c2e2 <dhcp_select+0x14a>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801c1d4:	6846      	ldr	r6, [r0, #4]
 801c1d6:	2302      	movs	r3, #2
 801c1d8:	2239      	movs	r2, #57	; 0x39
 801c1da:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 801c1de:	36f0      	adds	r6, #240	; 0xf0
 801c1e0:	f8df b150 	ldr.w	fp, [pc, #336]	; 801c334 <dhcp_select+0x19c>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801c1e4:	f04f 0901 	mov.w	r9, #1
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801c1e8:	4631      	mov	r1, r6
 801c1ea:	f7ff fe27 	bl	801be3c <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801c1ee:	4631      	mov	r1, r6
 801c1f0:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801c1f2:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801c1f6:	f7ff fe05 	bl	801be04 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801c1fa:	2304      	movs	r3, #4
 801c1fc:	4631      	mov	r1, r6
 801c1fe:	2232      	movs	r2, #50	; 0x32
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801c200:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801c204:	f7ff fe1a 	bl	801be3c <dhcp_option>
 801c208:	4604      	mov	r4, r0
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801c20a:	69e8      	ldr	r0, [r5, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801c20c:	f8ad 400e 	strh.w	r4, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801c210:	f7f8 fc18 	bl	8014a44 <lwip_htonl>
 801c214:	4631      	mov	r1, r6
 801c216:	4602      	mov	r2, r0
 801c218:	4620      	mov	r0, r4
 801c21a:	f7ff fe2d 	bl	801be78 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801c21e:	2304      	movs	r3, #4
 801c220:	4631      	mov	r1, r6
 801c222:	2236      	movs	r2, #54	; 0x36
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801c224:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801c228:	f7ff fe08 	bl	801be3c <dhcp_option>
 801c22c:	4604      	mov	r4, r0
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801c22e:	69a8      	ldr	r0, [r5, #24]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801c230:	f8ad 400e 	strh.w	r4, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801c234:	f7f8 fc06 	bl	8014a44 <lwip_htonl>
 801c238:	4631      	mov	r1, r6
 801c23a:	4602      	mov	r2, r0
 801c23c:	4620      	mov	r0, r4
 801c23e:	f7ff fe1b 	bl	801be78 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801c242:	4631      	mov	r1, r6
 801c244:	2304      	movs	r3, #4
 801c246:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801c248:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801c24c:	f7ff fdf6 	bl	801be3c <dhcp_option>
 801c250:	4604      	mov	r4, r0
 801c252:	f100 0804 	add.w	r8, r0, #4
 801c256:	f8ad 000e 	strh.w	r0, [sp, #14]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801c25a:	2c43      	cmp	r4, #67	; 0x43
 801c25c:	fa1f f888 	uxth.w	r8, r8
 801c260:	d80b      	bhi.n	801c27a <dhcp_select+0xe2>
  options[options_out_len++] = value;
 801c262:	1c63      	adds	r3, r4, #1
 801c264:	f806 9004 	strb.w	r9, [r6, r4]
 801c268:	b29c      	uxth	r4, r3
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c26a:	4544      	cmp	r4, r8
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801c26c:	f8ad 400e 	strh.w	r4, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c270:	d00b      	beq.n	801c28a <dhcp_select+0xf2>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801c272:	2c43      	cmp	r4, #67	; 0x43
 801c274:	f81b 9b01 	ldrb.w	r9, [fp], #1
 801c278:	d9f3      	bls.n	801c262 <dhcp_select+0xca>
 801c27a:	4b25      	ldr	r3, [pc, #148]	; (801c310 <dhcp_select+0x178>)
 801c27c:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801c280:	4924      	ldr	r1, [pc, #144]	; (801c314 <dhcp_select+0x17c>)
 801c282:	4825      	ldr	r0, [pc, #148]	; (801c318 <dhcp_select+0x180>)
 801c284:	f004 fba0 	bl	80209c8 <iprintf>
 801c288:	e7eb      	b.n	801c262 <dhcp_select+0xca>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801c28a:	4631      	mov	r1, r6
 801c28c:	4640      	mov	r0, r8
 801c28e:	4652      	mov	r2, sl
 801c290:	f7ff fec4 	bl	801c01c <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801c294:	4921      	ldr	r1, [pc, #132]	; (801c31c <dhcp_select+0x184>)
 801c296:	4a22      	ldr	r2, [pc, #136]	; (801c320 <dhcp_select+0x188>)
 801c298:	2343      	movs	r3, #67	; 0x43
 801c29a:	6808      	ldr	r0, [r1, #0]
 801c29c:	4651      	mov	r1, sl
 801c29e:	e9cd 7200 	strd	r7, r2, [sp]
 801c2a2:	4a20      	ldr	r2, [pc, #128]	; (801c324 <dhcp_select+0x18c>)
 801c2a4:	f7ff fb9c 	bl	801b9e0 <udp_sendto_if_src>
 801c2a8:	4604      	mov	r4, r0
    pbuf_free(p_out);
 801c2aa:	4650      	mov	r0, sl
 801c2ac:	f7fa fa34 	bl	8016718 <pbuf_free>
  if (dhcp->tries < 255) {
 801c2b0:	79ab      	ldrb	r3, [r5, #6]
 801c2b2:	2bff      	cmp	r3, #255	; 0xff
 801c2b4:	d013      	beq.n	801c2de <dhcp_select+0x146>
    dhcp->tries++;
 801c2b6:	3301      	adds	r3, #1
 801c2b8:	b2da      	uxtb	r2, r3
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801c2ba:	2a05      	cmp	r2, #5
    dhcp->tries++;
 801c2bc:	71aa      	strb	r2, [r5, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801c2be:	d80e      	bhi.n	801c2de <dhcp_select+0x146>
 801c2c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801c2c4:	4918      	ldr	r1, [pc, #96]	; (801c328 <dhcp_select+0x190>)
 801c2c6:	4093      	lsls	r3, r2
 801c2c8:	b29b      	uxth	r3, r3
 801c2ca:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801c2ce:	fba1 2303 	umull	r2, r3, r1, r3
 801c2d2:	095b      	lsrs	r3, r3, #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801c2d4:	812b      	strh	r3, [r5, #8]
}
 801c2d6:	4620      	mov	r0, r4
 801c2d8:	b005      	add	sp, #20
 801c2da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    result = ERR_MEM;
 801c2de:	2378      	movs	r3, #120	; 0x78
 801c2e0:	e7f8      	b.n	801c2d4 <dhcp_select+0x13c>
 801c2e2:	f04f 34ff 	mov.w	r4, #4294967295
 801c2e6:	e7e3      	b.n	801c2b0 <dhcp_select+0x118>
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801c2e8:	4b09      	ldr	r3, [pc, #36]	; (801c310 <dhcp_select+0x178>)
 801c2ea:	f240 1279 	movw	r2, #377	; 0x179
 801c2ee:	490f      	ldr	r1, [pc, #60]	; (801c32c <dhcp_select+0x194>)
 801c2f0:	f06f 0405 	mvn.w	r4, #5
 801c2f4:	4808      	ldr	r0, [pc, #32]	; (801c318 <dhcp_select+0x180>)
 801c2f6:	f004 fb67 	bl	80209c8 <iprintf>
 801c2fa:	e7ec      	b.n	801c2d6 <dhcp_select+0x13e>
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 801c2fc:	4b04      	ldr	r3, [pc, #16]	; (801c310 <dhcp_select+0x178>)
 801c2fe:	f240 1277 	movw	r2, #375	; 0x177
 801c302:	490b      	ldr	r1, [pc, #44]	; (801c330 <dhcp_select+0x198>)
 801c304:	f06f 040f 	mvn.w	r4, #15
 801c308:	4803      	ldr	r0, [pc, #12]	; (801c318 <dhcp_select+0x180>)
 801c30a:	f004 fb5d 	bl	80209c8 <iprintf>
 801c30e:	e7e2      	b.n	801c2d6 <dhcp_select+0x13e>
 801c310:	0803f150 	.word	0x0803f150
 801c314:	0803f1c4 	.word	0x0803f1c4
 801c318:	0802697c 	.word	0x0802697c
 801c31c:	20022430 	.word	0x20022430
 801c320:	0803f66c 	.word	0x0803f66c
 801c324:	0803f670 	.word	0x0803f670
 801c328:	10624dd3 	.word	0x10624dd3
 801c32c:	0803f2c0 	.word	0x0803f2c0
 801c330:	0803f2a4 	.word	0x0803f2a4
 801c334:	0803f091 	.word	0x0803f091

0801c338 <dhcp_discover>:
{
 801c338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c33c:	6a85      	ldr	r5, [r0, #40]	; 0x28
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801c33e:	2300      	movs	r3, #0
{
 801c340:	b085      	sub	sp, #20
 801c342:	4682      	mov	sl, r0
  if (new_state != dhcp->state) {
 801c344:	796a      	ldrb	r2, [r5, #5]
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801c346:	61eb      	str	r3, [r5, #28]
  if (new_state != dhcp->state) {
 801c348:	2a06      	cmp	r2, #6
 801c34a:	d003      	beq.n	801c354 <dhcp_discover+0x1c>
    dhcp->state = new_state;
 801c34c:	2206      	movs	r2, #6
    dhcp->tries = 0;
 801c34e:	71ab      	strb	r3, [r5, #6]
    dhcp->request_timeout = 0;
 801c350:	812b      	strh	r3, [r5, #8]
    dhcp->state = new_state;
 801c352:	716a      	strb	r2, [r5, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 801c354:	f10d 030e 	add.w	r3, sp, #14
 801c358:	2201      	movs	r2, #1
 801c35a:	4629      	mov	r1, r5
 801c35c:	4650      	mov	r0, sl
 801c35e:	f7ff fdaf 	bl	801bec0 <dhcp_create_msg>
  if (p_out != NULL) {
 801c362:	4681      	mov	r9, r0
 801c364:	2800      	cmp	r0, #0
 801c366:	d047      	beq.n	801c3f8 <dhcp_discover+0xc0>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801c368:	6846      	ldr	r6, [r0, #4]
 801c36a:	2302      	movs	r3, #2
 801c36c:	2239      	movs	r2, #57	; 0x39
 801c36e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 801c372:	36f0      	adds	r6, #240	; 0xf0
 801c374:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 801c450 <dhcp_discover+0x118>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801c378:	f04f 0801 	mov.w	r8, #1
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801c37c:	4631      	mov	r1, r6
 801c37e:	f7ff fd5d 	bl	801be3c <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801c382:	4631      	mov	r1, r6
 801c384:	f8ba 202c 	ldrh.w	r2, [sl, #44]	; 0x2c
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801c388:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801c38c:	f7ff fd3a 	bl	801be04 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801c390:	4631      	mov	r1, r6
 801c392:	2304      	movs	r3, #4
 801c394:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801c396:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801c39a:	f7ff fd4f 	bl	801be3c <dhcp_option>
 801c39e:	4604      	mov	r4, r0
 801c3a0:	1d07      	adds	r7, r0, #4
 801c3a2:	f8ad 000e 	strh.w	r0, [sp, #14]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801c3a6:	2c43      	cmp	r4, #67	; 0x43
 801c3a8:	b2bf      	uxth	r7, r7
 801c3aa:	d80b      	bhi.n	801c3c4 <dhcp_discover+0x8c>
  options[options_out_len++] = value;
 801c3ac:	1c63      	adds	r3, r4, #1
 801c3ae:	f806 8004 	strb.w	r8, [r6, r4]
 801c3b2:	b29c      	uxth	r4, r3
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c3b4:	42bc      	cmp	r4, r7
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801c3b6:	f8ad 400e 	strh.w	r4, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c3ba:	d00b      	beq.n	801c3d4 <dhcp_discover+0x9c>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801c3bc:	2c43      	cmp	r4, #67	; 0x43
 801c3be:	f81b 8b01 	ldrb.w	r8, [fp], #1
 801c3c2:	d9f3      	bls.n	801c3ac <dhcp_discover+0x74>
 801c3c4:	4b1b      	ldr	r3, [pc, #108]	; (801c434 <dhcp_discover+0xfc>)
 801c3c6:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801c3ca:	491b      	ldr	r1, [pc, #108]	; (801c438 <dhcp_discover+0x100>)
 801c3cc:	481b      	ldr	r0, [pc, #108]	; (801c43c <dhcp_discover+0x104>)
 801c3ce:	f004 fafb 	bl	80209c8 <iprintf>
 801c3d2:	e7eb      	b.n	801c3ac <dhcp_discover+0x74>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801c3d4:	4631      	mov	r1, r6
 801c3d6:	4638      	mov	r0, r7
 801c3d8:	464a      	mov	r2, r9
 801c3da:	f7ff fe1f 	bl	801c01c <dhcp_option_trailer>
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801c3de:	4918      	ldr	r1, [pc, #96]	; (801c440 <dhcp_discover+0x108>)
 801c3e0:	4a18      	ldr	r2, [pc, #96]	; (801c444 <dhcp_discover+0x10c>)
 801c3e2:	2343      	movs	r3, #67	; 0x43
 801c3e4:	6808      	ldr	r0, [r1, #0]
 801c3e6:	4649      	mov	r1, r9
 801c3e8:	e9cd a200 	strd	sl, r2, [sp]
 801c3ec:	4a16      	ldr	r2, [pc, #88]	; (801c448 <dhcp_discover+0x110>)
 801c3ee:	f7ff faf7 	bl	801b9e0 <udp_sendto_if_src>
    pbuf_free(p_out);
 801c3f2:	4648      	mov	r0, r9
 801c3f4:	f7fa f990 	bl	8016718 <pbuf_free>
  if (dhcp->tries < 255) {
 801c3f8:	79ab      	ldrb	r3, [r5, #6]
 801c3fa:	2bff      	cmp	r3, #255	; 0xff
 801c3fc:	d013      	beq.n	801c426 <dhcp_discover+0xee>
    dhcp->tries++;
 801c3fe:	3301      	adds	r3, #1
 801c400:	b2da      	uxtb	r2, r3
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801c402:	2a05      	cmp	r2, #5
    dhcp->tries++;
 801c404:	71aa      	strb	r2, [r5, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801c406:	d80e      	bhi.n	801c426 <dhcp_discover+0xee>
 801c408:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801c40c:	490f      	ldr	r1, [pc, #60]	; (801c44c <dhcp_discover+0x114>)
}
 801c40e:	2000      	movs	r0, #0
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801c410:	4093      	lsls	r3, r2
 801c412:	b29b      	uxth	r3, r3
 801c414:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801c418:	fba1 2303 	umull	r2, r3, r1, r3
 801c41c:	095b      	lsrs	r3, r3, #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801c41e:	812b      	strh	r3, [r5, #8]
}
 801c420:	b005      	add	sp, #20
 801c422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801c426:	2378      	movs	r3, #120	; 0x78
}
 801c428:	2000      	movs	r0, #0
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801c42a:	812b      	strh	r3, [r5, #8]
}
 801c42c:	b005      	add	sp, #20
 801c42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c432:	bf00      	nop
 801c434:	0803f150 	.word	0x0803f150
 801c438:	0803f1c4 	.word	0x0803f1c4
 801c43c:	0802697c 	.word	0x0802697c
 801c440:	20022430 	.word	0x20022430
 801c444:	0803f66c 	.word	0x0803f66c
 801c448:	0803f670 	.word	0x0803f670
 801c44c:	10624dd3 	.word	0x10624dd3
 801c450:	0803f091 	.word	0x0803f091

0801c454 <dhcp_check>:
{
 801c454:	b510      	push	{r4, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c456:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (new_state != dhcp->state) {
 801c458:	7963      	ldrb	r3, [r4, #5]
 801c45a:	2b08      	cmp	r3, #8
 801c45c:	d004      	beq.n	801c468 <dhcp_check+0x14>
    dhcp->tries = 0;
 801c45e:	2300      	movs	r3, #0
    dhcp->state = new_state;
 801c460:	2208      	movs	r2, #8
    dhcp->tries = 0;
 801c462:	71a3      	strb	r3, [r4, #6]
    dhcp->state = new_state;
 801c464:	7162      	strb	r2, [r4, #5]
    dhcp->request_timeout = 0;
 801c466:	8123      	strh	r3, [r4, #8]
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801c468:	2200      	movs	r2, #0
 801c46a:	f104 011c 	add.w	r1, r4, #28
 801c46e:	f001 fad3 	bl	801da18 <etharp_query>
  if (dhcp->tries < 255) {
 801c472:	79a3      	ldrb	r3, [r4, #6]
 801c474:	2bff      	cmp	r3, #255	; 0xff
 801c476:	d001      	beq.n	801c47c <dhcp_check+0x28>
    dhcp->tries++;
 801c478:	3301      	adds	r3, #1
 801c47a:	71a3      	strb	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801c47c:	2301      	movs	r3, #1
 801c47e:	8123      	strh	r3, [r4, #8]
}
 801c480:	bd10      	pop	{r4, pc}
 801c482:	bf00      	nop

0801c484 <dhcp_bind>:
{
 801c484:	b510      	push	{r4, lr}
 801c486:	b082      	sub	sp, #8
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801c488:	2800      	cmp	r0, #0
 801c48a:	d075      	beq.n	801c578 <dhcp_bind+0xf4>
  dhcp = netif_dhcp_data(netif);
 801c48c:	6a81      	ldr	r1, [r0, #40]	; 0x28
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801c48e:	2900      	cmp	r1, #0
 801c490:	d07b      	beq.n	801c58a <dhcp_bind+0x106>
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801c492:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  dhcp->lease_used = 0;
 801c494:	2200      	movs	r2, #0
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801c496:	1c5c      	adds	r4, r3, #1
  dhcp->lease_used = 0;
 801c498:	824a      	strh	r2, [r1, #18]
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801c49a:	d00b      	beq.n	801c4b4 <dhcp_bind+0x30>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801c49c:	331e      	adds	r3, #30
 801c49e:	f1a2 3277 	sub.w	r2, r2, #2004318071	; 0x77777777
 801c4a2:	fba2 2303 	umull	r2, r3, r2, r3
 801c4a6:	095b      	lsrs	r3, r3, #5
    if (timeout > 0xffff) {
 801c4a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c4ac:	d259      	bcs.n	801c562 <dhcp_bind+0xde>
    if (dhcp->t0_timeout == 0) {
 801c4ae:	b903      	cbnz	r3, 801c4b2 <dhcp_bind+0x2e>
      dhcp->t0_timeout = 1;
 801c4b0:	2301      	movs	r3, #1
 801c4b2:	828b      	strh	r3, [r1, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801c4b4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801c4b6:	1c53      	adds	r3, r2, #1
 801c4b8:	d040      	beq.n	801c53c <dhcp_bind+0xb8>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801c4ba:	321e      	adds	r2, #30
 801c4bc:	4b3e      	ldr	r3, [pc, #248]	; (801c5b8 <dhcp_bind+0x134>)
 801c4be:	fba3 3202 	umull	r3, r2, r3, r2
 801c4c2:	0952      	lsrs	r2, r2, #5
    if (timeout > 0xffff) {
 801c4c4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 801c4c8:	d247      	bcs.n	801c55a <dhcp_bind+0xd6>
    if (dhcp->t1_timeout == 0) {
 801c4ca:	2a00      	cmp	r2, #0
 801c4cc:	d171      	bne.n	801c5b2 <dhcp_bind+0x12e>
      dhcp->t1_timeout = 1;
 801c4ce:	2301      	movs	r3, #1
 801c4d0:	461a      	mov	r2, r3
 801c4d2:	814b      	strh	r3, [r1, #10]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801c4d4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801c4d6:	81ca      	strh	r2, [r1, #14]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801c4d8:	1c5c      	adds	r4, r3, #1
 801c4da:	d033      	beq.n	801c544 <dhcp_bind+0xc0>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801c4dc:	331e      	adds	r3, #30
 801c4de:	4c36      	ldr	r4, [pc, #216]	; (801c5b8 <dhcp_bind+0x134>)
 801c4e0:	fba4 4303 	umull	r4, r3, r4, r3
 801c4e4:	095b      	lsrs	r3, r3, #5
    if (timeout > 0xffff) {
 801c4e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c4ea:	d241      	bcs.n	801c570 <dhcp_bind+0xec>
    if (dhcp->t2_timeout == 0) {
 801c4ec:	2b00      	cmp	r3, #0
 801c4ee:	d15d      	bne.n	801c5ac <dhcp_bind+0x128>
      dhcp->t2_timeout = 1;
 801c4f0:	2401      	movs	r4, #1
 801c4f2:	4623      	mov	r3, r4
 801c4f4:	818c      	strh	r4, [r1, #12]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801c4f6:	2401      	movs	r4, #1
 801c4f8:	820b      	strh	r3, [r1, #16]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801c4fa:	4293      	cmp	r3, r2
 801c4fc:	d802      	bhi.n	801c504 <dhcp_bind+0x80>
 801c4fe:	b10c      	cbz	r4, 801c504 <dhcp_bind+0x80>
    dhcp->t1_timeout = 0;
 801c500:	2300      	movs	r3, #0
 801c502:	814b      	strh	r3, [r1, #10]
  if (dhcp->subnet_mask_given) {
 801c504:	79cb      	ldrb	r3, [r1, #7]
 801c506:	b313      	cbz	r3, 801c54e <dhcp_bind+0xca>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801c508:	6a0b      	ldr	r3, [r1, #32]
 801c50a:	9300      	str	r3, [sp, #0]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801c50c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 801c50e:	9301      	str	r3, [sp, #4]
  if (ip4_addr_isany_val(gw_addr)) {
 801c510:	b92b      	cbnz	r3, 801c51e <dhcp_bind+0x9a>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801c512:	69cb      	ldr	r3, [r1, #28]
 801c514:	9a00      	ldr	r2, [sp, #0]
 801c516:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801c518:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801c51c:	9301      	str	r3, [sp, #4]
  if (new_state != dhcp->state) {
 801c51e:	794b      	ldrb	r3, [r1, #5]
 801c520:	2b0a      	cmp	r3, #10
 801c522:	d004      	beq.n	801c52e <dhcp_bind+0xaa>
    dhcp->tries = 0;
 801c524:	2300      	movs	r3, #0
    dhcp->state = new_state;
 801c526:	220a      	movs	r2, #10
    dhcp->tries = 0;
 801c528:	718b      	strb	r3, [r1, #6]
    dhcp->state = new_state;
 801c52a:	714a      	strb	r2, [r1, #5]
    dhcp->request_timeout = 0;
 801c52c:	810b      	strh	r3, [r1, #8]
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801c52e:	311c      	adds	r1, #28
 801c530:	ab01      	add	r3, sp, #4
 801c532:	466a      	mov	r2, sp
 801c534:	f7f9 fe9e 	bl	8016274 <netif_set_addr>
}
 801c538:	b002      	add	sp, #8
 801c53a:	bd10      	pop	{r4, pc}
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801c53c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 801c53e:	894a      	ldrh	r2, [r1, #10]
 801c540:	1c5c      	adds	r4, r3, #1
 801c542:	d1cb      	bne.n	801c4dc <dhcp_bind+0x58>
 801c544:	898b      	ldrh	r3, [r1, #12]
 801c546:	1c1c      	adds	r4, r3, #0
 801c548:	bf18      	it	ne
 801c54a:	2401      	movne	r4, #1
 801c54c:	e7d5      	b.n	801c4fa <dhcp_bind+0x76>
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801c54e:	7f0b      	ldrb	r3, [r1, #28]
    if (first_octet <= 127) {
 801c550:	061a      	lsls	r2, r3, #24
 801c552:	d423      	bmi.n	801c59c <dhcp_bind+0x118>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801c554:	23ff      	movs	r3, #255	; 0xff
 801c556:	9300      	str	r3, [sp, #0]
 801c558:	e7d8      	b.n	801c50c <dhcp_bind+0x88>
    dhcp->t1_timeout = (u16_t)timeout;
 801c55a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c55e:	814a      	strh	r2, [r1, #10]
 801c560:	e7b8      	b.n	801c4d4 <dhcp_bind+0x50>
    dhcp->t0_timeout = (u16_t)timeout;
 801c562:	f64f 73ff 	movw	r3, #65535	; 0xffff
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801c566:	6aca      	ldr	r2, [r1, #44]	; 0x2c
    dhcp->t0_timeout = (u16_t)timeout;
 801c568:	828b      	strh	r3, [r1, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801c56a:	1c53      	adds	r3, r2, #1
 801c56c:	d1a5      	bne.n	801c4ba <dhcp_bind+0x36>
 801c56e:	e7e5      	b.n	801c53c <dhcp_bind+0xb8>
    dhcp->t2_timeout = (u16_t)timeout;
 801c570:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c574:	818b      	strh	r3, [r1, #12]
 801c576:	e7be      	b.n	801c4f6 <dhcp_bind+0x72>
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801c578:	4b10      	ldr	r3, [pc, #64]	; (801c5bc <dhcp_bind+0x138>)
 801c57a:	f240 4215 	movw	r2, #1045	; 0x415
 801c57e:	4910      	ldr	r1, [pc, #64]	; (801c5c0 <dhcp_bind+0x13c>)
 801c580:	4810      	ldr	r0, [pc, #64]	; (801c5c4 <dhcp_bind+0x140>)
 801c582:	f004 fa21 	bl	80209c8 <iprintf>
}
 801c586:	b002      	add	sp, #8
 801c588:	bd10      	pop	{r4, pc}
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801c58a:	4b0c      	ldr	r3, [pc, #48]	; (801c5bc <dhcp_bind+0x138>)
 801c58c:	f240 4217 	movw	r2, #1047	; 0x417
 801c590:	490d      	ldr	r1, [pc, #52]	; (801c5c8 <dhcp_bind+0x144>)
 801c592:	480c      	ldr	r0, [pc, #48]	; (801c5c4 <dhcp_bind+0x140>)
 801c594:	f004 fa18 	bl	80209c8 <iprintf>
}
 801c598:	b002      	add	sp, #8
 801c59a:	bd10      	pop	{r4, pc}
    } else if (first_octet >= 192) {
 801c59c:	2bbf      	cmp	r3, #191	; 0xbf
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801c59e:	bf8c      	ite	hi
 801c5a0:	f06f 437f 	mvnhi.w	r3, #4278190080	; 0xff000000
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801c5a4:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 801c5a8:	9300      	str	r3, [sp, #0]
 801c5aa:	e7af      	b.n	801c50c <dhcp_bind+0x88>
    dhcp->t2_timeout = (u16_t)timeout;
 801c5ac:	b29b      	uxth	r3, r3
 801c5ae:	818b      	strh	r3, [r1, #12]
 801c5b0:	e7a1      	b.n	801c4f6 <dhcp_bind+0x72>
    dhcp->t1_timeout = (u16_t)timeout;
 801c5b2:	b292      	uxth	r2, r2
 801c5b4:	814a      	strh	r2, [r1, #10]
 801c5b6:	e78d      	b.n	801c4d4 <dhcp_bind+0x50>
 801c5b8:	88888889 	.word	0x88888889
 801c5bc:	0803f150 	.word	0x0803f150
 801c5c0:	0803efb8 	.word	0x0803efb8
 801c5c4:	0802697c 	.word	0x0802697c
 801c5c8:	0803efd4 	.word	0x0803efd4

0801c5cc <dhcp_inc_pcb_refcount>:
{
 801c5cc:	b570      	push	{r4, r5, r6, lr}
  if (dhcp_pcb_refcount == 0) {
 801c5ce:	4c15      	ldr	r4, [pc, #84]	; (801c624 <dhcp_inc_pcb_refcount+0x58>)
 801c5d0:	7823      	ldrb	r3, [r4, #0]
 801c5d2:	b9fb      	cbnz	r3, 801c614 <dhcp_inc_pcb_refcount+0x48>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 801c5d4:	4d14      	ldr	r5, [pc, #80]	; (801c628 <dhcp_inc_pcb_refcount+0x5c>)
 801c5d6:	682b      	ldr	r3, [r5, #0]
 801c5d8:	b12b      	cbz	r3, 801c5e6 <dhcp_inc_pcb_refcount+0x1a>
 801c5da:	4b14      	ldr	r3, [pc, #80]	; (801c62c <dhcp_inc_pcb_refcount+0x60>)
 801c5dc:	22e5      	movs	r2, #229	; 0xe5
 801c5de:	4914      	ldr	r1, [pc, #80]	; (801c630 <dhcp_inc_pcb_refcount+0x64>)
 801c5e0:	4814      	ldr	r0, [pc, #80]	; (801c634 <dhcp_inc_pcb_refcount+0x68>)
 801c5e2:	f004 f9f1 	bl	80209c8 <iprintf>
    dhcp_pcb = udp_new();
 801c5e6:	f7ff fbdd 	bl	801bda4 <udp_new>
 801c5ea:	6028      	str	r0, [r5, #0]
    if (dhcp_pcb == NULL) {
 801c5ec:	b1b0      	cbz	r0, 801c61c <dhcp_inc_pcb_refcount+0x50>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801c5ee:	7a46      	ldrb	r6, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801c5f0:	2244      	movs	r2, #68	; 0x44
 801c5f2:	4911      	ldr	r1, [pc, #68]	; (801c638 <dhcp_inc_pcb_refcount+0x6c>)
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801c5f4:	f046 0620 	orr.w	r6, r6, #32
 801c5f8:	7246      	strb	r6, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801c5fa:	f7ff f971 	bl	801b8e0 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 801c5fe:	2243      	movs	r2, #67	; 0x43
 801c600:	490d      	ldr	r1, [pc, #52]	; (801c638 <dhcp_inc_pcb_refcount+0x6c>)
 801c602:	6828      	ldr	r0, [r5, #0]
 801c604:	f7ff fb4a 	bl	801bc9c <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801c608:	6828      	ldr	r0, [r5, #0]
 801c60a:	2200      	movs	r2, #0
 801c60c:	490b      	ldr	r1, [pc, #44]	; (801c63c <dhcp_inc_pcb_refcount+0x70>)
 801c60e:	f7ff fb8b 	bl	801bd28 <udp_recv>
 801c612:	7823      	ldrb	r3, [r4, #0]
  dhcp_pcb_refcount++;
 801c614:	3301      	adds	r3, #1
  return ERR_OK;
 801c616:	2000      	movs	r0, #0
  dhcp_pcb_refcount++;
 801c618:	7023      	strb	r3, [r4, #0]
}
 801c61a:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_MEM;
 801c61c:	f04f 30ff 	mov.w	r0, #4294967295
}
 801c620:	bd70      	pop	{r4, r5, r6, pc}
 801c622:	bf00      	nop
 801c624:	20022434 	.word	0x20022434
 801c628:	20022430 	.word	0x20022430
 801c62c:	0803f150 	.word	0x0803f150
 801c630:	0803f094 	.word	0x0803f094
 801c634:	0802697c 	.word	0x0802697c
 801c638:	0803f66c 	.word	0x0803f66c
 801c63c:	0801c729 	.word	0x0801c729

0801c640 <dhcp_dec_pcb_refcount>:
{
 801c640:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801c642:	4d0b      	ldr	r5, [pc, #44]	; (801c670 <dhcp_dec_pcb_refcount+0x30>)
 801c644:	782c      	ldrb	r4, [r5, #0]
 801c646:	b154      	cbz	r4, 801c65e <dhcp_dec_pcb_refcount+0x1e>
  dhcp_pcb_refcount--;
 801c648:	3c01      	subs	r4, #1
 801c64a:	b2e4      	uxtb	r4, r4
 801c64c:	702c      	strb	r4, [r5, #0]
  if (dhcp_pcb_refcount == 0) {
 801c64e:	b104      	cbz	r4, 801c652 <dhcp_dec_pcb_refcount+0x12>
}
 801c650:	bd38      	pop	{r3, r4, r5, pc}
    udp_remove(dhcp_pcb);
 801c652:	4d08      	ldr	r5, [pc, #32]	; (801c674 <dhcp_dec_pcb_refcount+0x34>)
 801c654:	6828      	ldr	r0, [r5, #0]
 801c656:	f7ff fb79 	bl	801bd4c <udp_remove>
    dhcp_pcb = NULL;
 801c65a:	602c      	str	r4, [r5, #0]
}
 801c65c:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801c65e:	4b06      	ldr	r3, [pc, #24]	; (801c678 <dhcp_dec_pcb_refcount+0x38>)
 801c660:	22ff      	movs	r2, #255	; 0xff
 801c662:	4906      	ldr	r1, [pc, #24]	; (801c67c <dhcp_dec_pcb_refcount+0x3c>)
 801c664:	4806      	ldr	r0, [pc, #24]	; (801c680 <dhcp_dec_pcb_refcount+0x40>)
 801c666:	f004 f9af 	bl	80209c8 <iprintf>
 801c66a:	782c      	ldrb	r4, [r5, #0]
 801c66c:	e7ec      	b.n	801c648 <dhcp_dec_pcb_refcount+0x8>
 801c66e:	bf00      	nop
 801c670:	20022434 	.word	0x20022434
 801c674:	20022430 	.word	0x20022430
 801c678:	0803f150 	.word	0x0803f150
 801c67c:	0803f06c 	.word	0x0803f06c
 801c680:	0802697c 	.word	0x0802697c

0801c684 <dhcp_handle_ack.isra.2>:
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 801c684:	b570      	push	{r4, r5, r6, lr}
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801c686:	4d26      	ldr	r5, [pc, #152]	; (801c720 <dhcp_handle_ack.isra.2+0x9c>)
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801c688:	2300      	movs	r3, #0
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 801c68a:	b082      	sub	sp, #8
 801c68c:	4604      	mov	r4, r0
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801c68e:	78ea      	ldrb	r2, [r5, #3]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801c690:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801c694:	b112      	cbz	r2, 801c69c <dhcp_handle_ack.isra.2+0x18>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801c696:	4b23      	ldr	r3, [pc, #140]	; (801c724 <dhcp_handle_ack.isra.2+0xa0>)
 801c698:	68db      	ldr	r3, [r3, #12]
 801c69a:	6283      	str	r3, [r0, #40]	; 0x28
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801c69c:	792b      	ldrb	r3, [r5, #4]
 801c69e:	b11b      	cbz	r3, 801c6a8 <dhcp_handle_ack.isra.2+0x24>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801c6a0:	4b20      	ldr	r3, [pc, #128]	; (801c724 <dhcp_handle_ack.isra.2+0xa0>)
 801c6a2:	691b      	ldr	r3, [r3, #16]
 801c6a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c6a6:	e002      	b.n	801c6ae <dhcp_handle_ack.isra.2+0x2a>
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801c6a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801c6aa:	085b      	lsrs	r3, r3, #1
 801c6ac:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801c6ae:	796b      	ldrb	r3, [r5, #5]
 801c6b0:	b11b      	cbz	r3, 801c6ba <dhcp_handle_ack.isra.2+0x36>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801c6b2:	4b1c      	ldr	r3, [pc, #112]	; (801c724 <dhcp_handle_ack.isra.2+0xa0>)
 801c6b4:	695b      	ldr	r3, [r3, #20]
 801c6b6:	6323      	str	r3, [r4, #48]	; 0x30
 801c6b8:	e004      	b.n	801c6c4 <dhcp_handle_ack.isra.2+0x40>
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801c6ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801c6bc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801c6c0:	08db      	lsrs	r3, r3, #3
 801c6c2:	6323      	str	r3, [r4, #48]	; 0x30
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801c6c4:	690a      	ldr	r2, [r1, #16]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801c6c6:	79ab      	ldrb	r3, [r5, #6]
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801c6c8:	61e2      	str	r2, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801c6ca:	b13b      	cbz	r3, 801c6dc <dhcp_handle_ack.isra.2+0x58>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801c6cc:	4b15      	ldr	r3, [pc, #84]	; (801c724 <dhcp_handle_ack.isra.2+0xa0>)
 801c6ce:	6998      	ldr	r0, [r3, #24]
 801c6d0:	f7f8 f9b8 	bl	8014a44 <lwip_htonl>
    dhcp->subnet_mask_given = 1;
 801c6d4:	2301      	movs	r3, #1
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801c6d6:	6220      	str	r0, [r4, #32]
    dhcp->subnet_mask_given = 1;
 801c6d8:	71e3      	strb	r3, [r4, #7]
 801c6da:	e000      	b.n	801c6de <dhcp_handle_ack.isra.2+0x5a>
    dhcp->subnet_mask_given = 0;
 801c6dc:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801c6de:	79eb      	ldrb	r3, [r5, #7]
 801c6e0:	b123      	cbz	r3, 801c6ec <dhcp_handle_ack.isra.2+0x68>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801c6e2:	4b10      	ldr	r3, [pc, #64]	; (801c724 <dhcp_handle_ack.isra.2+0xa0>)
 801c6e4:	69d8      	ldr	r0, [r3, #28]
 801c6e6:	f7f8 f9ad 	bl	8014a44 <lwip_htonl>
 801c6ea:	6260      	str	r0, [r4, #36]	; 0x24
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 801c6ec:	7a2b      	ldrb	r3, [r5, #8]
 801c6ee:	b1a3      	cbz	r3, 801c71a <dhcp_handle_ack.isra.2+0x96>
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 801c6f0:	4e0c      	ldr	r6, [pc, #48]	; (801c724 <dhcp_handle_ack.isra.2+0xa0>)
 801c6f2:	ac02      	add	r4, sp, #8
 801c6f4:	6a30      	ldr	r0, [r6, #32]
 801c6f6:	f7f8 f9a5 	bl	8014a44 <lwip_htonl>
 801c6fa:	f844 0d04 	str.w	r0, [r4, #-4]!
    dns_setserver(n, &dns_addr);
 801c6fe:	2000      	movs	r0, #0
 801c700:	4621      	mov	r1, r4
 801c702:	f7f8 fd59 	bl	80151b8 <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 801c706:	7a6b      	ldrb	r3, [r5, #9]
 801c708:	b13b      	cbz	r3, 801c71a <dhcp_handle_ack.isra.2+0x96>
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 801c70a:	6a70      	ldr	r0, [r6, #36]	; 0x24
 801c70c:	f7f8 f99a 	bl	8014a44 <lwip_htonl>
    dns_setserver(n, &dns_addr);
 801c710:	4621      	mov	r1, r4
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 801c712:	9001      	str	r0, [sp, #4]
    dns_setserver(n, &dns_addr);
 801c714:	2001      	movs	r0, #1
 801c716:	f7f8 fd4f 	bl	80151b8 <dns_setserver>
}
 801c71a:	b002      	add	sp, #8
 801c71c:	bd70      	pop	{r4, r5, r6, pc}
 801c71e:	bf00      	nop
 801c720:	2003628c 	.word	0x2003628c
 801c724:	20036298 	.word	0x20036298

0801c728 <dhcp_recv>:
  struct netif *netif = ip_current_input_netif();
 801c728:	4bae      	ldr	r3, [pc, #696]	; (801c9e4 <dhcp_recv+0x2bc>)
{
 801c72a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct netif *netif = ip_current_input_netif();
 801c72e:	f8d3 a004 	ldr.w	sl, [r3, #4]
{
 801c732:	b08b      	sub	sp, #44	; 0x2c
 801c734:	4693      	mov	fp, r2
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c736:	f8da 9028 	ldr.w	r9, [sl, #40]	; 0x28
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801c73a:	f1b9 0f00 	cmp.w	r9, #0
 801c73e:	d009      	beq.n	801c754 <dhcp_recv+0x2c>
 801c740:	f899 3004 	ldrb.w	r3, [r9, #4]
 801c744:	b133      	cbz	r3, 801c754 <dhcp_recv+0x2c>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 801c746:	8953      	ldrh	r3, [r2, #10]
 801c748:	2b2b      	cmp	r3, #43	; 0x2b
 801c74a:	d903      	bls.n	801c754 <dhcp_recv+0x2c>
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801c74c:	6851      	ldr	r1, [r2, #4]
  if (reply_msg->op != DHCP_BOOTREPLY) {
 801c74e:	780b      	ldrb	r3, [r1, #0]
 801c750:	2b02      	cmp	r3, #2
 801c752:	d005      	beq.n	801c760 <dhcp_recv+0x38>
  pbuf_free(p);
 801c754:	4658      	mov	r0, fp
 801c756:	f7f9 ffdf 	bl	8016718 <pbuf_free>
}
 801c75a:	b00b      	add	sp, #44	; 0x2c
 801c75c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801c760:	f89a 6034 	ldrb.w	r6, [sl, #52]	; 0x34
 801c764:	b1b6      	cbz	r6, 801c794 <dhcp_recv+0x6c>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801c766:	7f0a      	ldrb	r2, [r1, #28]
 801c768:	f89a 302e 	ldrb.w	r3, [sl, #46]	; 0x2e
 801c76c:	429a      	cmp	r2, r3
 801c76e:	d1f1      	bne.n	801c754 <dhcp_recv+0x2c>
 801c770:	f10a 042f 	add.w	r4, sl, #47	; 0x2f
 801c774:	f101 001d 	add.w	r0, r1, #29
 801c778:	2301      	movs	r3, #1
 801c77a:	b2da      	uxtb	r2, r3
 801c77c:	3301      	adds	r3, #1
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801c77e:	2a05      	cmp	r2, #5
 801c780:	d808      	bhi.n	801c794 <dhcp_recv+0x6c>
 801c782:	42b2      	cmp	r2, r6
 801c784:	d206      	bcs.n	801c794 <dhcp_recv+0x6c>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801c786:	f814 5b01 	ldrb.w	r5, [r4], #1
 801c78a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c78e:	4295      	cmp	r5, r2
 801c790:	d0f3      	beq.n	801c77a <dhcp_recv+0x52>
free_pbuf_and_return:
 801c792:	e7df      	b.n	801c754 <dhcp_recv+0x2c>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801c794:	6848      	ldr	r0, [r1, #4]
 801c796:	f7f8 f955 	bl	8014a44 <lwip_htonl>
 801c79a:	f8d9 3000 	ldr.w	r3, [r9]
 801c79e:	4298      	cmp	r0, r3
 801c7a0:	d1d8      	bne.n	801c754 <dhcp_recv+0x2c>
  dhcp_clear_all_options(dhcp);
 801c7a2:	2200      	movs	r2, #0
 801c7a4:	4990      	ldr	r1, [pc, #576]	; (801c9e8 <dhcp_recv+0x2c0>)
 801c7a6:	604a      	str	r2, [r1, #4]
 801c7a8:	810a      	strh	r2, [r1, #8]
  if (p->len < DHCP_SNAME_OFS) {
 801c7aa:	f8bb 300a 	ldrh.w	r3, [fp, #10]
  dhcp_clear_all_options(dhcp);
 801c7ae:	600a      	str	r2, [r1, #0]
  if (p->len < DHCP_SNAME_OFS) {
 801c7b0:	2b2b      	cmp	r3, #43	; 0x2b
 801c7b2:	d9cf      	bls.n	801c754 <dhcp_recv+0x2c>
  int parse_sname_as_options = 0;
 801c7b4:	9204      	str	r2, [sp, #16]
  options_idx = DHCP_OPTIONS_OFS;
 801c7b6:	21f0      	movs	r1, #240	; 0xf0
  options_idx_max = p->tot_len;
 801c7b8:	f8bb 2008 	ldrh.w	r2, [fp, #8]
  options_idx = DHCP_OPTIONS_OFS;
 801c7bc:	9103      	str	r1, [sp, #12]
 801c7be:	4690      	mov	r8, r2
 801c7c0:	f8cd b008 	str.w	fp, [sp, #8]
 801c7c4:	e9cd a906 	strd	sl, r9, [sp, #24]
 801c7c8:	e9dd 7b02 	ldrd	r7, fp, [sp, #8]
 801c7cc:	e000      	b.n	801c7d0 <dhcp_recv+0xa8>
 801c7ce:	897b      	ldrh	r3, [r7, #10]
  while ((q != NULL) && (options_idx >= q->len)) {
 801c7d0:	455b      	cmp	r3, fp
    options_idx = (u16_t)(options_idx - q->len);
 801c7d2:	ebab 0203 	sub.w	r2, fp, r3
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801c7d6:	eba8 0303 	sub.w	r3, r8, r3
  while ((q != NULL) && (options_idx >= q->len)) {
 801c7da:	d809      	bhi.n	801c7f0 <dhcp_recv+0xc8>
    q = q->next;
 801c7dc:	683f      	ldr	r7, [r7, #0]
    options_idx = (u16_t)(options_idx - q->len);
 801c7de:	fa1f fb82 	uxth.w	fp, r2
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801c7e2:	fa1f f883 	uxth.w	r8, r3
  while ((q != NULL) && (options_idx >= q->len)) {
 801c7e6:	2f00      	cmp	r7, #0
 801c7e8:	d1f1      	bne.n	801c7ce <dhcp_recv+0xa6>
 801c7ea:	f8dd b008 	ldr.w	fp, [sp, #8]
 801c7ee:	e7b1      	b.n	801c754 <dhcp_recv+0x2c>
  options = (u8_t *)q->payload;
 801c7f0:	687b      	ldr	r3, [r7, #4]
 801c7f2:	465c      	mov	r4, fp
 801c7f4:	f8cd b00c 	str.w	fp, [sp, #12]
 801c7f8:	9301      	str	r3, [sp, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801c7fa:	4544      	cmp	r4, r8
 801c7fc:	f080 8219 	bcs.w	801cc32 <dhcp_recv+0x50a>
 801c800:	9b01      	ldr	r3, [sp, #4]
 801c802:	5d1a      	ldrb	r2, [r3, r4]
 801c804:	2aff      	cmp	r2, #255	; 0xff
 801c806:	f000 8214 	beq.w	801cc32 <dhcp_recv+0x50a>
    u16_t val_offset = (u16_t)(offset + 2);
 801c80a:	1ca6      	adds	r6, r4, #2
 801c80c:	b2b6      	uxth	r6, r6
    if (val_offset < offset) {
 801c80e:	42b4      	cmp	r4, r6
 801c810:	d8eb      	bhi.n	801c7ea <dhcp_recv+0xc2>
    if ((offset + 1) < q->len) {
 801c812:	1c61      	adds	r1, r4, #1
 801c814:	897b      	ldrh	r3, [r7, #10]
 801c816:	4299      	cmp	r1, r3
 801c818:	f280 8132 	bge.w	801ca80 <dhcp_recv+0x358>
      len = options[offset + 1];
 801c81c:	9801      	ldr	r0, [sp, #4]
 801c81e:	4420      	add	r0, r4
 801c820:	7845      	ldrb	r5, [r0, #1]
    switch (op) {
 801c822:	2a3b      	cmp	r2, #59	; 0x3b
 801c824:	f200 8123 	bhi.w	801ca6e <dhcp_recv+0x346>
 801c828:	e8df f012 	tbh	[pc, r2, lsl #1]
 801c82c:	003c0088 	.word	0x003c0088
 801c830:	01050121 	.word	0x01050121
 801c834:	01210121 	.word	0x01210121
 801c838:	012100aa 	.word	0x012100aa
 801c83c:	01210121 	.word	0x01210121
 801c840:	01210121 	.word	0x01210121
 801c844:	01210121 	.word	0x01210121
 801c848:	01210121 	.word	0x01210121
 801c84c:	01210121 	.word	0x01210121
 801c850:	01210121 	.word	0x01210121
 801c854:	01210121 	.word	0x01210121
 801c858:	01210121 	.word	0x01210121
 801c85c:	01210121 	.word	0x01210121
 801c860:	01210121 	.word	0x01210121
 801c864:	01210121 	.word	0x01210121
 801c868:	01210121 	.word	0x01210121
 801c86c:	01210121 	.word	0x01210121
 801c870:	01210121 	.word	0x01210121
 801c874:	01210121 	.word	0x01210121
 801c878:	01210121 	.word	0x01210121
 801c87c:	01210121 	.word	0x01210121
 801c880:	01210121 	.word	0x01210121
 801c884:	01210121 	.word	0x01210121
 801c888:	01210121 	.word	0x01210121
 801c88c:	01210121 	.word	0x01210121
 801c890:	01140121 	.word	0x01140121
 801c894:	00d000f4 	.word	0x00d000f4
 801c898:	012100c3 	.word	0x012100c3
 801c89c:	01210121 	.word	0x01210121
 801c8a0:	009c00e8 	.word	0x009c00e8
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801c8a4:	2d04      	cmp	r5, #4
 801c8a6:	f040 81ba 	bne.w	801cc1e <dhcp_recv+0x4f6>
      if (offset + len + 2 > 0xFFFF) {
 801c8aa:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 801c8ae:	429c      	cmp	r4, r3
 801c8b0:	d89b      	bhi.n	801c7ea <dhcp_recv+0xc2>
      offset = (u16_t)(offset + len + 2);
 801c8b2:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801c8b4:	f04f 0a06 	mov.w	sl, #6
      offset = (u16_t)(offset + len + 2);
 801c8b8:	b2a4      	uxth	r4, r4
        u32_t value = 0;
 801c8ba:	2300      	movs	r3, #0
 801c8bc:	4a4a      	ldr	r2, [pc, #296]	; (801c9e8 <dhcp_recv+0x2c0>)
 801c8be:	9405      	str	r4, [sp, #20]
 801c8c0:	eb02 0b0a 	add.w	fp, r2, sl
 801c8c4:	9309      	str	r3, [sp, #36]	; 0x24
 801c8c6:	e02e      	b.n	801c926 <dhcp_recv+0x1fe>
          copy_len = LWIP_MIN(decode_len, 4);
 801c8c8:	2d04      	cmp	r5, #4
 801c8ca:	46a9      	mov	r9, r5
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801c8cc:	f89b 4000 	ldrb.w	r4, [fp]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801c8d0:	4633      	mov	r3, r6
          copy_len = LWIP_MIN(decode_len, 4);
 801c8d2:	bf28      	it	cs
 801c8d4:	f04f 0904 	movcs.w	r9, #4
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801c8d8:	a909      	add	r1, sp, #36	; 0x24
 801c8da:	4638      	mov	r0, r7
          copy_len = LWIP_MIN(decode_len, 4);
 801c8dc:	fa5f f989 	uxtb.w	r9, r9
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801c8e0:	464a      	mov	r2, r9
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801c8e2:	2c00      	cmp	r4, #0
 801c8e4:	f040 81bf 	bne.w	801cc66 <dhcp_recv+0x53e>
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801c8e8:	f7fa f9a6 	bl	8016c38 <pbuf_copy_partial>
 801c8ec:	4581      	cmp	r9, r0
            dhcp_got_option(dhcp, decode_idx);
 801c8ee:	f04f 0301 	mov.w	r3, #1
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801c8f2:	f47f af7a 	bne.w	801c7ea <dhcp_recv+0xc2>
          if (decode_len > 4) {
 801c8f6:	2d04      	cmp	r5, #4
 801c8f8:	f240 81b8 	bls.w	801cc6c <dhcp_recv+0x544>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801c8fc:	07aa      	lsls	r2, r5, #30
 801c8fe:	f040 81c4 	bne.w	801cc8a <dhcp_recv+0x562>
            dhcp_got_option(dhcp, decode_idx);
 801c902:	f80b 3b01 	strb.w	r3, [fp], #1
            decode_len = (u8_t)(decode_len - 4);
 801c906:	3d04      	subs	r5, #4
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801c908:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c90a:	f7f8 f89b 	bl	8014a44 <lwip_htonl>
            next_val_offset = (u16_t)(val_offset + 4);
 801c90e:	1d33      	adds	r3, r6, #4
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801c910:	4a36      	ldr	r2, [pc, #216]	; (801c9ec <dhcp_recv+0x2c4>)
            decode_len = (u8_t)(decode_len - 4);
 801c912:	b2ed      	uxtb	r5, r5
            next_val_offset = (u16_t)(val_offset + 4);
 801c914:	b29b      	uxth	r3, r3
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801c916:	f842 002a 	str.w	r0, [r2, sl, lsl #2]
            decode_idx++;
 801c91a:	f10a 0a01 	add.w	sl, sl, #1
            if (next_val_offset < val_offset) {
 801c91e:	429e      	cmp	r6, r3
 801c920:	461e      	mov	r6, r3
 801c922:	f63f af62 	bhi.w	801c7ea <dhcp_recv+0xc2>
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801c926:	f1ba 0f09 	cmp.w	sl, #9
 801c92a:	d9cd      	bls.n	801c8c8 <dhcp_recv+0x1a0>
 801c92c:	4b30      	ldr	r3, [pc, #192]	; (801c9f0 <dhcp_recv+0x2c8>)
 801c92e:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 801c932:	4930      	ldr	r1, [pc, #192]	; (801c9f4 <dhcp_recv+0x2cc>)
 801c934:	4830      	ldr	r0, [pc, #192]	; (801c9f8 <dhcp_recv+0x2d0>)
 801c936:	f004 f847 	bl	80209c8 <iprintf>
 801c93a:	e7c5      	b.n	801c8c8 <dhcp_recv+0x1a0>
      offset++;
 801c93c:	b28c      	uxth	r4, r1
    if (offset >= q->len) {
 801c93e:	429c      	cmp	r4, r3
 801c940:	f4ff af5b 	bcc.w	801c7fa <dhcp_recv+0xd2>
      offset = (u16_t)(offset - q->len);
 801c944:	1ae4      	subs	r4, r4, r3
      offset_max = (u16_t)(offset_max - q->len);
 801c946:	eba8 0803 	sub.w	r8, r8, r3
      offset = (u16_t)(offset - q->len);
 801c94a:	b2a4      	uxth	r4, r4
      offset_max = (u16_t)(offset_max - q->len);
 801c94c:	fa1f f888 	uxth.w	r8, r8
      if (offset < offset_max) {
 801c950:	4544      	cmp	r4, r8
 801c952:	f4bf af4a 	bcs.w	801c7ea <dhcp_recv+0xc2>
        q = q->next;
 801c956:	683f      	ldr	r7, [r7, #0]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801c958:	2f00      	cmp	r7, #0
 801c95a:	f000 81a7 	beq.w	801ccac <dhcp_recv+0x584>
        options = (u8_t *)q->payload;
 801c95e:	687b      	ldr	r3, [r7, #4]
 801c960:	9301      	str	r3, [sp, #4]
 801c962:	e74a      	b.n	801c7fa <dhcp_recv+0xd2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801c964:	2d04      	cmp	r5, #4
 801c966:	f040 810f 	bne.w	801cb88 <dhcp_recv+0x460>
      if (offset + len + 2 > 0xFFFF) {
 801c96a:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 801c96e:	429c      	cmp	r4, r3
 801c970:	f63f af3b 	bhi.w	801c7ea <dhcp_recv+0xc2>
      offset = (u16_t)(offset + len + 2);
 801c974:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_T2;
 801c976:	f04f 0a05 	mov.w	sl, #5
      offset = (u16_t)(offset + len + 2);
 801c97a:	b2a4      	uxth	r4, r4
 801c97c:	e79d      	b.n	801c8ba <dhcp_recv+0x192>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801c97e:	2500      	movs	r5, #0
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 801c980:	07a9      	lsls	r1, r5, #30
 801c982:	f040 81b5 	bne.w	801ccf0 <dhcp_recv+0x5c8>
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 801c986:	2d08      	cmp	r5, #8
 801c988:	462a      	mov	r2, r5
 801c98a:	bf28      	it	cs
 801c98c:	2208      	movcs	r2, #8
 801c98e:	b2d2      	uxtb	r2, r2
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801c990:	42aa      	cmp	r2, r5
 801c992:	f200 81a3 	bhi.w	801ccdc <dhcp_recv+0x5b4>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 801c996:	f04f 0a08 	mov.w	sl, #8
      if (offset + len + 2 > 0xFFFF) {
 801c99a:	442c      	add	r4, r5
 801c99c:	f64f 71fd 	movw	r1, #65533	; 0xfffd
 801c9a0:	428c      	cmp	r4, r1
 801c9a2:	f73f af22 	bgt.w	801c7ea <dhcp_recv+0xc2>
      offset = (u16_t)(offset + len + 2);
 801c9a6:	1974      	adds	r4, r6, r5
 801c9a8:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 801c9aa:	2a00      	cmp	r2, #0
 801c9ac:	d0c7      	beq.n	801c93e <dhcp_recv+0x216>
 801c9ae:	4615      	mov	r5, r2
 801c9b0:	e783      	b.n	801c8ba <dhcp_recv+0x192>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801c9b2:	2d04      	cmp	r5, #4
 801c9b4:	f040 80fc 	bne.w	801cbb0 <dhcp_recv+0x488>
      if (offset + len + 2 > 0xFFFF) {
 801c9b8:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 801c9bc:	429c      	cmp	r4, r3
 801c9be:	f63f af14 	bhi.w	801c7ea <dhcp_recv+0xc2>
      offset = (u16_t)(offset + len + 2);
 801c9c2:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801c9c4:	f04f 0a02 	mov.w	sl, #2
      offset = (u16_t)(offset + len + 2);
 801c9c8:	b2a4      	uxth	r4, r4
 801c9ca:	e776      	b.n	801c8ba <dhcp_recv+0x192>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801c9cc:	2d01      	cmp	r5, #1
 801c9ce:	f040 80f9 	bne.w	801cbc4 <dhcp_recv+0x49c>
      if (offset + len + 2 > 0xFFFF) {
 801c9d2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 801c9d6:	4299      	cmp	r1, r3
 801c9d8:	f43f af07 	beq.w	801c7ea <dhcp_recv+0xc2>
      offset = (u16_t)(offset + len + 2);
 801c9dc:	3403      	adds	r4, #3
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801c9de:	46aa      	mov	sl, r5
      offset = (u16_t)(offset + len + 2);
 801c9e0:	b2a4      	uxth	r4, r4
 801c9e2:	e76a      	b.n	801c8ba <dhcp_recv+0x192>
 801c9e4:	20026a6c 	.word	0x20026a6c
 801c9e8:	2003628c 	.word	0x2003628c
 801c9ec:	20036298 	.word	0x20036298
 801c9f0:	0803f150 	.word	0x0803f150
 801c9f4:	0803f250 	.word	0x0803f250
 801c9f8:	0802697c 	.word	0x0802697c
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801c9fc:	2d04      	cmp	r5, #4
 801c9fe:	f040 80cd 	bne.w	801cb9c <dhcp_recv+0x474>
      if (offset + len + 2 > 0xFFFF) {
 801ca02:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 801ca06:	429c      	cmp	r4, r3
 801ca08:	f63f aeef 	bhi.w	801c7ea <dhcp_recv+0xc2>
      offset = (u16_t)(offset + len + 2);
 801ca0c:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_T1;
 801ca0e:	46aa      	mov	sl, r5
      offset = (u16_t)(offset + len + 2);
 801ca10:	b2a4      	uxth	r4, r4
 801ca12:	e752      	b.n	801c8ba <dhcp_recv+0x192>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801ca14:	2d01      	cmp	r5, #1
 801ca16:	f040 80df 	bne.w	801cbd8 <dhcp_recv+0x4b0>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801ca1a:	9b03      	ldr	r3, [sp, #12]
 801ca1c:	2bf0      	cmp	r3, #240	; 0xf0
 801ca1e:	f040 8153 	bne.w	801ccc8 <dhcp_recv+0x5a0>
      if (offset + len + 2 > 0xFFFF) {
 801ca22:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 801ca26:	4299      	cmp	r1, r3
 801ca28:	f43f aedf 	beq.w	801c7ea <dhcp_recv+0xc2>
      offset = (u16_t)(offset + len + 2);
 801ca2c:	3403      	adds	r4, #3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801ca2e:	f04f 0a00 	mov.w	sl, #0
      offset = (u16_t)(offset + len + 2);
 801ca32:	b2a4      	uxth	r4, r4
 801ca34:	e741      	b.n	801c8ba <dhcp_recv+0x192>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801ca36:	2d03      	cmp	r5, #3
 801ca38:	f240 80e2 	bls.w	801cc00 <dhcp_recv+0x4d8>
      if (offset + len + 2 > 0xFFFF) {
 801ca3c:	442c      	add	r4, r5
 801ca3e:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801ca42:	429c      	cmp	r4, r3
 801ca44:	f73f aed1 	bgt.w	801c7ea <dhcp_recv+0xc2>
      offset = (u16_t)(offset + len + 2);
 801ca48:	1974      	adds	r4, r6, r5
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801ca4a:	f04f 0a07 	mov.w	sl, #7
        decode_len = 4; /* only copy the first given router */
 801ca4e:	2504      	movs	r5, #4
      offset = (u16_t)(offset + len + 2);
 801ca50:	b2a4      	uxth	r4, r4
 801ca52:	e732      	b.n	801c8ba <dhcp_recv+0x192>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801ca54:	2d04      	cmp	r5, #4
 801ca56:	f040 80c9 	bne.w	801cbec <dhcp_recv+0x4c4>
      if (offset + len + 2 > 0xFFFF) {
 801ca5a:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 801ca5e:	429c      	cmp	r4, r3
 801ca60:	f63f aec3 	bhi.w	801c7ea <dhcp_recv+0xc2>
      offset = (u16_t)(offset + len + 2);
 801ca64:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801ca66:	f04f 0a03 	mov.w	sl, #3
      offset = (u16_t)(offset + len + 2);
 801ca6a:	b2a4      	uxth	r4, r4
 801ca6c:	e725      	b.n	801c8ba <dhcp_recv+0x192>
      if (offset + len + 2 > 0xFFFF) {
 801ca6e:	442c      	add	r4, r5
 801ca70:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801ca74:	4294      	cmp	r4, r2
 801ca76:	f73f aeb8 	bgt.w	801c7ea <dhcp_recv+0xc2>
      offset = (u16_t)(offset + len + 2);
 801ca7a:	1974      	adds	r4, r6, r5
 801ca7c:	b2a4      	uxth	r4, r4
 801ca7e:	e75e      	b.n	801c93e <dhcp_recv+0x216>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801ca80:	6838      	ldr	r0, [r7, #0]
 801ca82:	b110      	cbz	r0, 801ca8a <dhcp_recv+0x362>
 801ca84:	6840      	ldr	r0, [r0, #4]
 801ca86:	7805      	ldrb	r5, [r0, #0]
 801ca88:	e6cb      	b.n	801c822 <dhcp_recv+0xfa>
    switch (op) {
 801ca8a:	2a3b      	cmp	r2, #59	; 0x3b
 801ca8c:	f200 80c2 	bhi.w	801cc14 <dhcp_recv+0x4ec>
 801ca90:	a001      	add	r0, pc, #4	; (adr r0, 801ca98 <dhcp_recv+0x370>)
 801ca92:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 801ca96:	bf00      	nop
 801ca98:	0801c93d 	.word	0x0801c93d
 801ca9c:	0801cc1f 	.word	0x0801cc1f
 801caa0:	0801cc15 	.word	0x0801cc15
 801caa4:	0801cc01 	.word	0x0801cc01
 801caa8:	0801cc15 	.word	0x0801cc15
 801caac:	0801cc15 	.word	0x0801cc15
 801cab0:	0801c97f 	.word	0x0801c97f
 801cab4:	0801cc15 	.word	0x0801cc15
 801cab8:	0801cc15 	.word	0x0801cc15
 801cabc:	0801cc15 	.word	0x0801cc15
 801cac0:	0801cc15 	.word	0x0801cc15
 801cac4:	0801cc15 	.word	0x0801cc15
 801cac8:	0801cc15 	.word	0x0801cc15
 801cacc:	0801cc15 	.word	0x0801cc15
 801cad0:	0801cc15 	.word	0x0801cc15
 801cad4:	0801cc15 	.word	0x0801cc15
 801cad8:	0801cc15 	.word	0x0801cc15
 801cadc:	0801cc15 	.word	0x0801cc15
 801cae0:	0801cc15 	.word	0x0801cc15
 801cae4:	0801cc15 	.word	0x0801cc15
 801cae8:	0801cc15 	.word	0x0801cc15
 801caec:	0801cc15 	.word	0x0801cc15
 801caf0:	0801cc15 	.word	0x0801cc15
 801caf4:	0801cc15 	.word	0x0801cc15
 801caf8:	0801cc15 	.word	0x0801cc15
 801cafc:	0801cc15 	.word	0x0801cc15
 801cb00:	0801cc15 	.word	0x0801cc15
 801cb04:	0801cc15 	.word	0x0801cc15
 801cb08:	0801cc15 	.word	0x0801cc15
 801cb0c:	0801cc15 	.word	0x0801cc15
 801cb10:	0801cc15 	.word	0x0801cc15
 801cb14:	0801cc15 	.word	0x0801cc15
 801cb18:	0801cc15 	.word	0x0801cc15
 801cb1c:	0801cc15 	.word	0x0801cc15
 801cb20:	0801cc15 	.word	0x0801cc15
 801cb24:	0801cc15 	.word	0x0801cc15
 801cb28:	0801cc15 	.word	0x0801cc15
 801cb2c:	0801cc15 	.word	0x0801cc15
 801cb30:	0801cc15 	.word	0x0801cc15
 801cb34:	0801cc15 	.word	0x0801cc15
 801cb38:	0801cc15 	.word	0x0801cc15
 801cb3c:	0801cc15 	.word	0x0801cc15
 801cb40:	0801cc15 	.word	0x0801cc15
 801cb44:	0801cc15 	.word	0x0801cc15
 801cb48:	0801cc15 	.word	0x0801cc15
 801cb4c:	0801cc15 	.word	0x0801cc15
 801cb50:	0801cc15 	.word	0x0801cc15
 801cb54:	0801cc15 	.word	0x0801cc15
 801cb58:	0801cc15 	.word	0x0801cc15
 801cb5c:	0801cc15 	.word	0x0801cc15
 801cb60:	0801cc15 	.word	0x0801cc15
 801cb64:	0801cbed 	.word	0x0801cbed
 801cb68:	0801cbd9 	.word	0x0801cbd9
 801cb6c:	0801cbc5 	.word	0x0801cbc5
 801cb70:	0801cbb1 	.word	0x0801cbb1
 801cb74:	0801cc15 	.word	0x0801cc15
 801cb78:	0801cc15 	.word	0x0801cc15
 801cb7c:	0801cc15 	.word	0x0801cc15
 801cb80:	0801cb9d 	.word	0x0801cb9d
 801cb84:	0801cb89 	.word	0x0801cb89
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801cb88:	4b96      	ldr	r3, [pc, #600]	; (801cde4 <dhcp_recv+0x6bc>)
 801cb8a:	f240 6261 	movw	r2, #1633	; 0x661
 801cb8e:	4996      	ldr	r1, [pc, #600]	; (801cde8 <dhcp_recv+0x6c0>)
 801cb90:	4896      	ldr	r0, [pc, #600]	; (801cdec <dhcp_recv+0x6c4>)
 801cb92:	f8dd b008 	ldr.w	fp, [sp, #8]
 801cb96:	f003 ff17 	bl	80209c8 <iprintf>
 801cb9a:	e5db      	b.n	801c754 <dhcp_recv+0x2c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801cb9c:	4b91      	ldr	r3, [pc, #580]	; (801cde4 <dhcp_recv+0x6bc>)
 801cb9e:	f240 625d 	movw	r2, #1629	; 0x65d
 801cba2:	4991      	ldr	r1, [pc, #580]	; (801cde8 <dhcp_recv+0x6c0>)
 801cba4:	4891      	ldr	r0, [pc, #580]	; (801cdec <dhcp_recv+0x6c4>)
 801cba6:	f8dd b008 	ldr.w	fp, [sp, #8]
 801cbaa:	f003 ff0d 	bl	80209c8 <iprintf>
 801cbae:	e5d1      	b.n	801c754 <dhcp_recv+0x2c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801cbb0:	4b8c      	ldr	r3, [pc, #560]	; (801cde4 <dhcp_recv+0x6bc>)
 801cbb2:	f240 6259 	movw	r2, #1625	; 0x659
 801cbb6:	498c      	ldr	r1, [pc, #560]	; (801cde8 <dhcp_recv+0x6c0>)
 801cbb8:	488c      	ldr	r0, [pc, #560]	; (801cdec <dhcp_recv+0x6c4>)
 801cbba:	f8dd b008 	ldr.w	fp, [sp, #8]
 801cbbe:	f003 ff03 	bl	80209c8 <iprintf>
 801cbc2:	e5c7      	b.n	801c754 <dhcp_recv+0x2c>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801cbc4:	4b87      	ldr	r3, [pc, #540]	; (801cde4 <dhcp_recv+0x6bc>)
 801cbc6:	f240 6255 	movw	r2, #1621	; 0x655
 801cbca:	4989      	ldr	r1, [pc, #548]	; (801cdf0 <dhcp_recv+0x6c8>)
 801cbcc:	4887      	ldr	r0, [pc, #540]	; (801cdec <dhcp_recv+0x6c4>)
 801cbce:	f8dd b008 	ldr.w	fp, [sp, #8]
 801cbd2:	f003 fef9 	bl	80209c8 <iprintf>
 801cbd6:	e5bd      	b.n	801c754 <dhcp_recv+0x2c>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801cbd8:	4b82      	ldr	r3, [pc, #520]	; (801cde4 <dhcp_recv+0x6bc>)
 801cbda:	f240 624f 	movw	r2, #1615	; 0x64f
 801cbde:	4984      	ldr	r1, [pc, #528]	; (801cdf0 <dhcp_recv+0x6c8>)
 801cbe0:	4882      	ldr	r0, [pc, #520]	; (801cdec <dhcp_recv+0x6c4>)
 801cbe2:	f8dd b008 	ldr.w	fp, [sp, #8]
 801cbe6:	f003 feef 	bl	80209c8 <iprintf>
 801cbea:	e5b3      	b.n	801c754 <dhcp_recv+0x2c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801cbec:	4b7d      	ldr	r3, [pc, #500]	; (801cde4 <dhcp_recv+0x6bc>)
 801cbee:	f240 6241 	movw	r2, #1601	; 0x641
 801cbf2:	497d      	ldr	r1, [pc, #500]	; (801cde8 <dhcp_recv+0x6c0>)
 801cbf4:	487d      	ldr	r0, [pc, #500]	; (801cdec <dhcp_recv+0x6c4>)
 801cbf6:	f8dd b008 	ldr.w	fp, [sp, #8]
 801cbfa:	f003 fee5 	bl	80209c8 <iprintf>
 801cbfe:	e5a9      	b.n	801c754 <dhcp_recv+0x2c>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801cc00:	4b78      	ldr	r3, [pc, #480]	; (801cde4 <dhcp_recv+0x6bc>)
 801cc02:	f240 6233 	movw	r2, #1587	; 0x633
 801cc06:	497b      	ldr	r1, [pc, #492]	; (801cdf4 <dhcp_recv+0x6cc>)
 801cc08:	4878      	ldr	r0, [pc, #480]	; (801cdec <dhcp_recv+0x6c4>)
 801cc0a:	f8dd b008 	ldr.w	fp, [sp, #8]
 801cc0e:	f003 fedb 	bl	80209c8 <iprintf>
 801cc12:	e59f      	b.n	801c754 <dhcp_recv+0x2c>
        decode_len = 0;
 801cc14:	2200      	movs	r2, #0
    int decode_idx = -1;
 801cc16:	f04f 3aff 	mov.w	sl, #4294967295
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801cc1a:	4615      	mov	r5, r2
 801cc1c:	e6bd      	b.n	801c99a <dhcp_recv+0x272>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801cc1e:	4b71      	ldr	r3, [pc, #452]	; (801cde4 <dhcp_recv+0x6bc>)
 801cc20:	f240 622e 	movw	r2, #1582	; 0x62e
 801cc24:	4970      	ldr	r1, [pc, #448]	; (801cde8 <dhcp_recv+0x6c0>)
 801cc26:	4871      	ldr	r0, [pc, #452]	; (801cdec <dhcp_recv+0x6c4>)
 801cc28:	f8dd b008 	ldr.w	fp, [sp, #8]
 801cc2c:	f003 fecc 	bl	80209c8 <iprintf>
 801cc30:	e590      	b.n	801c754 <dhcp_recv+0x2c>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801cc32:	4b71      	ldr	r3, [pc, #452]	; (801cdf8 <dhcp_recv+0x6d0>)
 801cc34:	781b      	ldrb	r3, [r3, #0]
 801cc36:	b153      	cbz	r3, 801cc4e <dhcp_recv+0x526>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801cc38:	4b70      	ldr	r3, [pc, #448]	; (801cdfc <dhcp_recv+0x6d4>)
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801cc3a:	2200      	movs	r2, #0
 801cc3c:	496e      	ldr	r1, [pc, #440]	; (801cdf8 <dhcp_recv+0x6d0>)
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801cc3e:	681b      	ldr	r3, [r3, #0]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801cc40:	700a      	strb	r2, [r1, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801cc42:	2b01      	cmp	r3, #1
 801cc44:	d02d      	beq.n	801cca2 <dhcp_recv+0x57a>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801cc46:	2b02      	cmp	r3, #2
 801cc48:	d004      	beq.n	801cc54 <dhcp_recv+0x52c>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801cc4a:	2b03      	cmp	r3, #3
 801cc4c:	d027      	beq.n	801cc9e <dhcp_recv+0x576>
  } else if (parse_sname_as_options) {
 801cc4e:	9b04      	ldr	r3, [sp, #16]
 801cc50:	2b00      	cmp	r3, #0
 801cc52:	d057      	beq.n	801cd04 <dhcp_recv+0x5dc>
    parse_sname_as_options = 0;
 801cc54:	2300      	movs	r3, #0
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801cc56:	f04f 086c 	mov.w	r8, #108	; 0x6c
    parse_sname_as_options = 0;
 801cc5a:	9304      	str	r3, [sp, #16]
    options_idx = DHCP_SNAME_OFS;
 801cc5c:	232c      	movs	r3, #44	; 0x2c
 801cc5e:	9303      	str	r3, [sp, #12]
 801cc60:	9b02      	ldr	r3, [sp, #8]
 801cc62:	895b      	ldrh	r3, [r3, #10]
 801cc64:	e5b0      	b.n	801c7c8 <dhcp_recv+0xa0>
 801cc66:	9c05      	ldr	r4, [sp, #20]
 801cc68:	897b      	ldrh	r3, [r7, #10]
 801cc6a:	e668      	b.n	801c93e <dhcp_recv+0x216>
 801cc6c:	9c05      	ldr	r4, [sp, #20]
          } else if (decode_len == 4) {
 801cc6e:	d027      	beq.n	801ccc0 <dhcp_recv+0x598>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801cc70:	2d01      	cmp	r5, #1
 801cc72:	f040 80ad 	bne.w	801cdd0 <dhcp_recv+0x6a8>
            value = ((u8_t *)&value)[0];
 801cc76:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
          dhcp_set_option_value(dhcp, decode_idx, value);
 801cc7a:	4a60      	ldr	r2, [pc, #384]	; (801cdfc <dhcp_recv+0x6d4>)
          dhcp_got_option(dhcp, decode_idx);
 801cc7c:	2301      	movs	r3, #1
          dhcp_set_option_value(dhcp, decode_idx, value);
 801cc7e:	f842 002a 	str.w	r0, [r2, sl, lsl #2]
          dhcp_got_option(dhcp, decode_idx);
 801cc82:	4a5d      	ldr	r2, [pc, #372]	; (801cdf8 <dhcp_recv+0x6d0>)
 801cc84:	f802 300a 	strb.w	r3, [r2, sl]
 801cc88:	e7ee      	b.n	801cc68 <dhcp_recv+0x540>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801cc8a:	4b56      	ldr	r3, [pc, #344]	; (801cde4 <dhcp_recv+0x6bc>)
 801cc8c:	f240 6281 	movw	r2, #1665	; 0x681
 801cc90:	495b      	ldr	r1, [pc, #364]	; (801ce00 <dhcp_recv+0x6d8>)
 801cc92:	4856      	ldr	r0, [pc, #344]	; (801cdec <dhcp_recv+0x6c4>)
 801cc94:	f8dd b008 	ldr.w	fp, [sp, #8]
 801cc98:	f003 fe96 	bl	80209c8 <iprintf>
 801cc9c:	e55a      	b.n	801c754 <dhcp_recv+0x2c>
      parse_sname_as_options = 1;
 801cc9e:	2301      	movs	r3, #1
 801cca0:	9304      	str	r3, [sp, #16]
    options_idx = DHCP_FILE_OFS;
 801cca2:	236c      	movs	r3, #108	; 0x6c
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801cca4:	f04f 08ec 	mov.w	r8, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 801cca8:	9303      	str	r3, [sp, #12]
 801ccaa:	e7d9      	b.n	801cc60 <dhcp_recv+0x538>
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801ccac:	4b4d      	ldr	r3, [pc, #308]	; (801cde4 <dhcp_recv+0x6bc>)
 801ccae:	f240 629d 	movw	r2, #1693	; 0x69d
 801ccb2:	4954      	ldr	r1, [pc, #336]	; (801ce04 <dhcp_recv+0x6dc>)
 801ccb4:	484d      	ldr	r0, [pc, #308]	; (801cdec <dhcp_recv+0x6c4>)
 801ccb6:	f8dd b008 	ldr.w	fp, [sp, #8]
 801ccba:	f003 fe85 	bl	80209c8 <iprintf>
 801ccbe:	e549      	b.n	801c754 <dhcp_recv+0x2c>
            value = lwip_ntohl(value);
 801ccc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ccc2:	f7f7 febf 	bl	8014a44 <lwip_htonl>
 801ccc6:	e7d8      	b.n	801cc7a <dhcp_recv+0x552>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801ccc8:	4b46      	ldr	r3, [pc, #280]	; (801cde4 <dhcp_recv+0x6bc>)
 801ccca:	f240 6251 	movw	r2, #1617	; 0x651
 801ccce:	494e      	ldr	r1, [pc, #312]	; (801ce08 <dhcp_recv+0x6e0>)
 801ccd0:	4846      	ldr	r0, [pc, #280]	; (801cdec <dhcp_recv+0x6c4>)
 801ccd2:	f8dd b008 	ldr.w	fp, [sp, #8]
 801ccd6:	f003 fe77 	bl	80209c8 <iprintf>
 801ccda:	e53b      	b.n	801c754 <dhcp_recv+0x2c>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801ccdc:	4b41      	ldr	r3, [pc, #260]	; (801cde4 <dhcp_recv+0x6bc>)
 801ccde:	f240 623c 	movw	r2, #1596	; 0x63c
 801cce2:	4944      	ldr	r1, [pc, #272]	; (801cdf4 <dhcp_recv+0x6cc>)
 801cce4:	4841      	ldr	r0, [pc, #260]	; (801cdec <dhcp_recv+0x6c4>)
 801cce6:	f8dd b008 	ldr.w	fp, [sp, #8]
 801ccea:	f003 fe6d 	bl	80209c8 <iprintf>
 801ccee:	e531      	b.n	801c754 <dhcp_recv+0x2c>
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 801ccf0:	4b3c      	ldr	r3, [pc, #240]	; (801cde4 <dhcp_recv+0x6bc>)
 801ccf2:	f240 6239 	movw	r2, #1593	; 0x639
 801ccf6:	4945      	ldr	r1, [pc, #276]	; (801ce0c <dhcp_recv+0x6e4>)
 801ccf8:	483c      	ldr	r0, [pc, #240]	; (801cdec <dhcp_recv+0x6c4>)
 801ccfa:	f8dd b008 	ldr.w	fp, [sp, #8]
 801ccfe:	f003 fe63 	bl	80209c8 <iprintf>
 801cd02:	e527      	b.n	801c754 <dhcp_recv+0x2c>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801cd04:	4b3c      	ldr	r3, [pc, #240]	; (801cdf8 <dhcp_recv+0x6d0>)
 801cd06:	f8dd b008 	ldr.w	fp, [sp, #8]
 801cd0a:	785b      	ldrb	r3, [r3, #1]
 801cd0c:	e9dd a906 	ldrd	sl, r9, [sp, #24]
 801cd10:	2b00      	cmp	r3, #0
 801cd12:	f43f ad1f 	beq.w	801c754 <dhcp_recv+0x2c>
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801cd16:	4a39      	ldr	r2, [pc, #228]	; (801cdfc <dhcp_recv+0x6d4>)
  msg_in = (struct dhcp_msg *)p->payload;
 801cd18:	f8db 4004 	ldr.w	r4, [fp, #4]
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801cd1c:	7913      	ldrb	r3, [r2, #4]
  if (msg_type == DHCP_ACK) {
 801cd1e:	2b05      	cmp	r3, #5
 801cd20:	d01c      	beq.n	801cd5c <dhcp_recv+0x634>
  else if ((msg_type == DHCP_NAK) &&
 801cd22:	2b06      	cmp	r3, #6
 801cd24:	d02b      	beq.n	801cd7e <dhcp_recv+0x656>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801cd26:	2b02      	cmp	r3, #2
 801cd28:	f47f ad14 	bne.w	801c754 <dhcp_recv+0x2c>
 801cd2c:	f899 3005 	ldrb.w	r3, [r9, #5]
 801cd30:	2b06      	cmp	r3, #6
 801cd32:	f47f ad0f 	bne.w	801c754 <dhcp_recv+0x2c>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801cd36:	4b30      	ldr	r3, [pc, #192]	; (801cdf8 <dhcp_recv+0x6d0>)
 801cd38:	789b      	ldrb	r3, [r3, #2]
 801cd3a:	2b00      	cmp	r3, #0
 801cd3c:	f43f ad0a 	beq.w	801c754 <dhcp_recv+0x2c>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801cd40:	f8da 5028 	ldr.w	r5, [sl, #40]	; 0x28
    dhcp->request_timeout = 0; /* stop timer */
 801cd44:	9b04      	ldr	r3, [sp, #16]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801cd46:	6890      	ldr	r0, [r2, #8]
    dhcp->request_timeout = 0; /* stop timer */
 801cd48:	812b      	strh	r3, [r5, #8]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801cd4a:	f7f7 fe7b 	bl	8014a44 <lwip_htonl>
 801cd4e:	61a8      	str	r0, [r5, #24]
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801cd50:	6923      	ldr	r3, [r4, #16]
    dhcp_select(netif);
 801cd52:	4650      	mov	r0, sl
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801cd54:	61eb      	str	r3, [r5, #28]
    dhcp_select(netif);
 801cd56:	f7ff fa1f 	bl	801c198 <dhcp_select>
 801cd5a:	e4fb      	b.n	801c754 <dhcp_recv+0x2c>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801cd5c:	f899 3005 	ldrb.w	r3, [r9, #5]
 801cd60:	2b01      	cmp	r3, #1
 801cd62:	d028      	beq.n	801cdb6 <dhcp_recv+0x68e>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801cd64:	3b03      	subs	r3, #3
 801cd66:	2b02      	cmp	r3, #2
 801cd68:	f63f acf4 	bhi.w	801c754 <dhcp_recv+0x2c>
      dhcp_handle_ack(netif, msg_in);
 801cd6c:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 801cd70:	4621      	mov	r1, r4
 801cd72:	f7ff fc87 	bl	801c684 <dhcp_handle_ack.isra.2>
      dhcp_bind(netif);
 801cd76:	4650      	mov	r0, sl
 801cd78:	f7ff fb84 	bl	801c484 <dhcp_bind>
 801cd7c:	e4ea      	b.n	801c754 <dhcp_recv+0x2c>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801cd7e:	f899 3005 	ldrb.w	r3, [r9, #5]
 801cd82:	1eda      	subs	r2, r3, #3
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801cd84:	2a02      	cmp	r2, #2
 801cd86:	d902      	bls.n	801cd8e <dhcp_recv+0x666>
 801cd88:	2b01      	cmp	r3, #1
 801cd8a:	f47f ace3 	bne.w	801c754 <dhcp_recv+0x2c>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801cd8e:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
  if (new_state != dhcp->state) {
 801cd92:	795a      	ldrb	r2, [r3, #5]
 801cd94:	2a0c      	cmp	r2, #12
 801cd96:	d004      	beq.n	801cda2 <dhcp_recv+0x67a>
    dhcp->tries = 0;
 801cd98:	2200      	movs	r2, #0
    dhcp->state = new_state;
 801cd9a:	210c      	movs	r1, #12
    dhcp->tries = 0;
 801cd9c:	719a      	strb	r2, [r3, #6]
    dhcp->state = new_state;
 801cd9e:	7159      	strb	r1, [r3, #5]
    dhcp->request_timeout = 0;
 801cda0:	811a      	strh	r2, [r3, #8]
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801cda2:	4b1b      	ldr	r3, [pc, #108]	; (801ce10 <dhcp_recv+0x6e8>)
 801cda4:	4650      	mov	r0, sl
 801cda6:	461a      	mov	r2, r3
 801cda8:	4619      	mov	r1, r3
 801cdaa:	f7f9 fa63 	bl	8016274 <netif_set_addr>
  dhcp_discover(netif);
 801cdae:	4650      	mov	r0, sl
 801cdb0:	f7ff fac2 	bl	801c338 <dhcp_discover>
 801cdb4:	e4ce      	b.n	801c754 <dhcp_recv+0x2c>
      dhcp_handle_ack(netif, msg_in);
 801cdb6:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 801cdba:	4621      	mov	r1, r4
 801cdbc:	f7ff fc62 	bl	801c684 <dhcp_handle_ack.isra.2>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801cdc0:	f89a 3035 	ldrb.w	r3, [sl, #53]	; 0x35
        dhcp_check(netif);
 801cdc4:	4650      	mov	r0, sl
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801cdc6:	071b      	lsls	r3, r3, #28
 801cdc8:	d5d6      	bpl.n	801cd78 <dhcp_recv+0x650>
        dhcp_check(netif);
 801cdca:	f7ff fb43 	bl	801c454 <dhcp_check>
 801cdce:	e4c1      	b.n	801c754 <dhcp_recv+0x2c>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801cdd0:	4b04      	ldr	r3, [pc, #16]	; (801cde4 <dhcp_recv+0x6bc>)
 801cdd2:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 801cdd6:	490f      	ldr	r1, [pc, #60]	; (801ce14 <dhcp_recv+0x6ec>)
 801cdd8:	4804      	ldr	r0, [pc, #16]	; (801cdec <dhcp_recv+0x6c4>)
 801cdda:	f8dd b008 	ldr.w	fp, [sp, #8]
 801cdde:	f003 fdf3 	bl	80209c8 <iprintf>
 801cde2:	e4b7      	b.n	801c754 <dhcp_recv+0x2c>
 801cde4:	0803f150 	.word	0x0803f150
 801cde8:	0803f1fc 	.word	0x0803f1fc
 801cdec:	0802697c 	.word	0x0802697c
 801cdf0:	0803f22c 	.word	0x0803f22c
 801cdf4:	0803f208 	.word	0x0803f208
 801cdf8:	2003628c 	.word	0x2003628c
 801cdfc:	20036298 	.word	0x20036298
 801ce00:	0803f264 	.word	0x0803f264
 801ce04:	0803f290 	.word	0x0803f290
 801ce08:	0803f238 	.word	0x0803f238
 801ce0c:	0803f21c 	.word	0x0803f21c
 801ce10:	0803f66c 	.word	0x0803f66c
 801ce14:	0803f27c 	.word	0x0803f27c

0801ce18 <dhcp_network_changed>:
{
 801ce18:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801ce1a:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (!dhcp) {
 801ce1c:	b154      	cbz	r4, 801ce34 <dhcp_network_changed+0x1c>
  switch (dhcp->state) {
 801ce1e:	7963      	ldrb	r3, [r4, #5]
 801ce20:	2b0a      	cmp	r3, #10
 801ce22:	d80e      	bhi.n	801ce42 <dhcp_network_changed+0x2a>
 801ce24:	e8df f003 	tbb	[pc, r3]
 801ce28:	070d0d06 	.word	0x070d0d06
 801ce2c:	0d0d0707 	.word	0x0d0d0707
 801ce30:	0d0d      	.short	0x0d0d
 801ce32:	07          	.byte	0x07
 801ce33:	00          	.byte	0x00
}
 801ce34:	bd38      	pop	{r3, r4, r5, pc}
      dhcp->tries = 0;
 801ce36:	2300      	movs	r3, #0
 801ce38:	71a3      	strb	r3, [r4, #6]
}
 801ce3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      dhcp_reboot(netif);
 801ce3e:	f7ff b909 	b.w	801c054 <dhcp_reboot>
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 801ce42:	2b0c      	cmp	r3, #12
 801ce44:	4605      	mov	r5, r0
 801ce46:	d806      	bhi.n	801ce56 <dhcp_network_changed+0x3e>
      dhcp->tries = 0;
 801ce48:	2300      	movs	r3, #0
      dhcp_discover(netif);
 801ce4a:	4628      	mov	r0, r5
      dhcp->tries = 0;
 801ce4c:	71a3      	strb	r3, [r4, #6]
}
 801ce4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      dhcp_discover(netif);
 801ce52:	f7ff ba71 	b.w	801c338 <dhcp_discover>
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 801ce56:	4b04      	ldr	r3, [pc, #16]	; (801ce68 <dhcp_network_changed+0x50>)
 801ce58:	f240 326d 	movw	r2, #877	; 0x36d
 801ce5c:	4903      	ldr	r1, [pc, #12]	; (801ce6c <dhcp_network_changed+0x54>)
 801ce5e:	4804      	ldr	r0, [pc, #16]	; (801ce70 <dhcp_network_changed+0x58>)
 801ce60:	f003 fdb2 	bl	80209c8 <iprintf>
 801ce64:	e7f0      	b.n	801ce48 <dhcp_network_changed+0x30>
 801ce66:	bf00      	nop
 801ce68:	0803f150 	.word	0x0803f150
 801ce6c:	0803f0bc 	.word	0x0803f0bc
 801ce70:	0802697c 	.word	0x0802697c

0801ce74 <dhcp_arp_reply>:
{
 801ce74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ce78:	b084      	sub	sp, #16
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801ce7a:	2800      	cmp	r0, #0
 801ce7c:	d048      	beq.n	801cf10 <dhcp_arp_reply+0x9c>
  dhcp = netif_dhcp_data(netif);
 801ce7e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801ce80:	4605      	mov	r5, r0
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801ce82:	b114      	cbz	r4, 801ce8a <dhcp_arp_reply+0x16>
 801ce84:	7963      	ldrb	r3, [r4, #5]
 801ce86:	2b08      	cmp	r3, #8
 801ce88:	d002      	beq.n	801ce90 <dhcp_arp_reply+0x1c>
}
 801ce8a:	b004      	add	sp, #16
 801ce8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801ce90:	680a      	ldr	r2, [r1, #0]
 801ce92:	69e3      	ldr	r3, [r4, #28]
 801ce94:	429a      	cmp	r2, r3
 801ce96:	d1f8      	bne.n	801ce8a <dhcp_arp_reply+0x16>
    dhcp->tries = 0;
 801ce98:	2600      	movs	r6, #0
    dhcp->state = new_state;
 801ce9a:	210c      	movs	r1, #12
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801ce9c:	f10d 030e 	add.w	r3, sp, #14
 801cea0:	2204      	movs	r2, #4
    dhcp->state = new_state;
 801cea2:	7161      	strb	r1, [r4, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801cea4:	4621      	mov	r1, r4
    dhcp->tries = 0;
 801cea6:	71a6      	strb	r6, [r4, #6]
    dhcp->request_timeout = 0;
 801cea8:	8126      	strh	r6, [r4, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801ceaa:	f7ff f809 	bl	801bec0 <dhcp_create_msg>
  if (p_out != NULL) {
 801ceae:	4606      	mov	r6, r0
 801ceb0:	b330      	cbz	r0, 801cf00 <dhcp_arp_reply+0x8c>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801ceb2:	6847      	ldr	r7, [r0, #4]
 801ceb4:	2304      	movs	r3, #4
 801ceb6:	2232      	movs	r2, #50	; 0x32
 801ceb8:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 801cebc:	37f0      	adds	r7, #240	; 0xf0
 801cebe:	4639      	mov	r1, r7
 801cec0:	f7fe ffbc 	bl	801be3c <dhcp_option>
 801cec4:	4680      	mov	r8, r0
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801cec6:	69e0      	ldr	r0, [r4, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801cec8:	f8ad 800e 	strh.w	r8, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801cecc:	f7f7 fdba 	bl	8014a44 <lwip_htonl>
 801ced0:	4639      	mov	r1, r7
 801ced2:	4602      	mov	r2, r0
 801ced4:	4640      	mov	r0, r8
 801ced6:	f7fe ffcf 	bl	801be78 <dhcp_option_long>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801ceda:	4639      	mov	r1, r7
 801cedc:	4632      	mov	r2, r6
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801cede:	f8ad 000e 	strh.w	r0, [sp, #14]
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801cee2:	f7ff f89b 	bl	801c01c <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801cee6:	490f      	ldr	r1, [pc, #60]	; (801cf24 <dhcp_arp_reply+0xb0>)
 801cee8:	4a0f      	ldr	r2, [pc, #60]	; (801cf28 <dhcp_arp_reply+0xb4>)
 801ceea:	2343      	movs	r3, #67	; 0x43
 801ceec:	6808      	ldr	r0, [r1, #0]
 801ceee:	4631      	mov	r1, r6
 801cef0:	e9cd 5200 	strd	r5, r2, [sp]
 801cef4:	4a0d      	ldr	r2, [pc, #52]	; (801cf2c <dhcp_arp_reply+0xb8>)
 801cef6:	f7fe fd73 	bl	801b9e0 <udp_sendto_if_src>
    pbuf_free(p_out);
 801cefa:	4630      	mov	r0, r6
 801cefc:	f7f9 fc0c 	bl	8016718 <pbuf_free>
  if (dhcp->tries < 255) {
 801cf00:	79a3      	ldrb	r3, [r4, #6]
 801cf02:	2bff      	cmp	r3, #255	; 0xff
 801cf04:	d001      	beq.n	801cf0a <dhcp_arp_reply+0x96>
    dhcp->tries++;
 801cf06:	3301      	adds	r3, #1
 801cf08:	71a3      	strb	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801cf0a:	2314      	movs	r3, #20
 801cf0c:	8123      	strh	r3, [r4, #8]
 801cf0e:	e7bc      	b.n	801ce8a <dhcp_arp_reply+0x16>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801cf10:	4b07      	ldr	r3, [pc, #28]	; (801cf30 <dhcp_arp_reply+0xbc>)
 801cf12:	f240 328b 	movw	r2, #907	; 0x38b
 801cf16:	4907      	ldr	r1, [pc, #28]	; (801cf34 <dhcp_arp_reply+0xc0>)
 801cf18:	4807      	ldr	r0, [pc, #28]	; (801cf38 <dhcp_arp_reply+0xc4>)
 801cf1a:	f003 fd55 	bl	80209c8 <iprintf>
}
 801cf1e:	b004      	add	sp, #16
 801cf20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cf24:	20022430 	.word	0x20022430
 801cf28:	0803f66c 	.word	0x0803f66c
 801cf2c:	0803f670 	.word	0x0803f670
 801cf30:	0803f150 	.word	0x0803f150
 801cf34:	0802696c 	.word	0x0802696c
 801cf38:	0802697c 	.word	0x0802697c

0801cf3c <dhcp_renew>:
{
 801cf3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801cf40:	6a86      	ldr	r6, [r0, #40]	; 0x28
{
 801cf42:	b085      	sub	sp, #20
 801cf44:	4683      	mov	fp, r0
  if (new_state != dhcp->state) {
 801cf46:	7973      	ldrb	r3, [r6, #5]
 801cf48:	2b05      	cmp	r3, #5
 801cf4a:	d004      	beq.n	801cf56 <dhcp_renew+0x1a>
    dhcp->tries = 0;
 801cf4c:	2300      	movs	r3, #0
    dhcp->state = new_state;
 801cf4e:	2205      	movs	r2, #5
    dhcp->tries = 0;
 801cf50:	71b3      	strb	r3, [r6, #6]
    dhcp->state = new_state;
 801cf52:	7172      	strb	r2, [r6, #5]
    dhcp->request_timeout = 0;
 801cf54:	8133      	strh	r3, [r6, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801cf56:	f10d 030e 	add.w	r3, sp, #14
 801cf5a:	2203      	movs	r2, #3
 801cf5c:	4631      	mov	r1, r6
 801cf5e:	4658      	mov	r0, fp
 801cf60:	f7fe ffae 	bl	801bec0 <dhcp_create_msg>
  if (p_out != NULL) {
 801cf64:	4682      	mov	sl, r0
 801cf66:	2800      	cmp	r0, #0
 801cf68:	d067      	beq.n	801d03a <dhcp_renew+0xfe>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801cf6a:	6845      	ldr	r5, [r0, #4]
 801cf6c:	2302      	movs	r3, #2
 801cf6e:	2239      	movs	r2, #57	; 0x39
 801cf70:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 801cf74:	35f0      	adds	r5, #240	; 0xf0
 801cf76:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 801d054 <dhcp_renew+0x118>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801cf7a:	f04f 0801 	mov.w	r8, #1
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801cf7e:	4629      	mov	r1, r5
 801cf80:	f7fe ff5c 	bl	801be3c <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801cf84:	4629      	mov	r1, r5
 801cf86:	f8bb 202c 	ldrh.w	r2, [fp, #44]	; 0x2c
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801cf8a:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801cf8e:	f7fe ff39 	bl	801be04 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801cf92:	4629      	mov	r1, r5
 801cf94:	2304      	movs	r3, #4
 801cf96:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801cf98:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801cf9c:	f7fe ff4e 	bl	801be3c <dhcp_option>
 801cfa0:	4604      	mov	r4, r0
 801cfa2:	1d07      	adds	r7, r0, #4
 801cfa4:	f8ad 000e 	strh.w	r0, [sp, #14]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801cfa8:	2c43      	cmp	r4, #67	; 0x43
 801cfaa:	b2bf      	uxth	r7, r7
 801cfac:	d80b      	bhi.n	801cfc6 <dhcp_renew+0x8a>
  options[options_out_len++] = value;
 801cfae:	1c63      	adds	r3, r4, #1
 801cfb0:	f805 8004 	strb.w	r8, [r5, r4]
 801cfb4:	b29c      	uxth	r4, r3
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801cfb6:	42bc      	cmp	r4, r7
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801cfb8:	f8ad 400e 	strh.w	r4, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801cfbc:	d00b      	beq.n	801cfd6 <dhcp_renew+0x9a>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801cfbe:	2c43      	cmp	r4, #67	; 0x43
 801cfc0:	f819 8b01 	ldrb.w	r8, [r9], #1
 801cfc4:	d9f3      	bls.n	801cfae <dhcp_renew+0x72>
 801cfc6:	4b1e      	ldr	r3, [pc, #120]	; (801d040 <dhcp_renew+0x104>)
 801cfc8:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801cfcc:	491d      	ldr	r1, [pc, #116]	; (801d044 <dhcp_renew+0x108>)
 801cfce:	481e      	ldr	r0, [pc, #120]	; (801d048 <dhcp_renew+0x10c>)
 801cfd0:	f003 fcfa 	bl	80209c8 <iprintf>
 801cfd4:	e7eb      	b.n	801cfae <dhcp_renew+0x72>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801cfd6:	4629      	mov	r1, r5
 801cfd8:	4638      	mov	r0, r7
 801cfda:	4652      	mov	r2, sl
 801cfdc:	f7ff f81e 	bl	801c01c <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801cfe0:	4a1a      	ldr	r2, [pc, #104]	; (801d04c <dhcp_renew+0x110>)
 801cfe2:	f8cd b000 	str.w	fp, [sp]
 801cfe6:	2343      	movs	r3, #67	; 0x43
 801cfe8:	6810      	ldr	r0, [r2, #0]
 801cfea:	4651      	mov	r1, sl
 801cfec:	f106 0218 	add.w	r2, r6, #24
 801cff0:	f7fe fdb6 	bl	801bb60 <udp_sendto_if>
 801cff4:	4604      	mov	r4, r0
    pbuf_free(p_out);
 801cff6:	4650      	mov	r0, sl
 801cff8:	f7f9 fb8e 	bl	8016718 <pbuf_free>
  if (dhcp->tries < 255) {
 801cffc:	79b3      	ldrb	r3, [r6, #6]
 801cffe:	2bff      	cmp	r3, #255	; 0xff
 801d000:	d015      	beq.n	801d02e <dhcp_renew+0xf2>
    dhcp->tries++;
 801d002:	3301      	adds	r3, #1
 801d004:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801d006:	2b09      	cmp	r3, #9
    dhcp->tries++;
 801d008:	71b3      	strb	r3, [r6, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801d00a:	d810      	bhi.n	801d02e <dhcp_renew+0xf2>
 801d00c:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
 801d010:	4a0f      	ldr	r2, [pc, #60]	; (801d050 <dhcp_renew+0x114>)
}
 801d012:	4620      	mov	r0, r4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801d014:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801d018:	011b      	lsls	r3, r3, #4
 801d01a:	b29b      	uxth	r3, r3
 801d01c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801d020:	fba2 2303 	umull	r2, r3, r2, r3
 801d024:	095b      	lsrs	r3, r3, #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801d026:	8133      	strh	r3, [r6, #8]
}
 801d028:	b005      	add	sp, #20
 801d02a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    result = ERR_MEM;
 801d02e:	2328      	movs	r3, #40	; 0x28
}
 801d030:	4620      	mov	r0, r4
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801d032:	8133      	strh	r3, [r6, #8]
}
 801d034:	b005      	add	sp, #20
 801d036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    result = ERR_MEM;
 801d03a:	f04f 34ff 	mov.w	r4, #4294967295
 801d03e:	e7dd      	b.n	801cffc <dhcp_renew+0xc0>
 801d040:	0803f150 	.word	0x0803f150
 801d044:	0803f1c4 	.word	0x0803f1c4
 801d048:	0802697c 	.word	0x0802697c
 801d04c:	20022430 	.word	0x20022430
 801d050:	10624dd3 	.word	0x10624dd3
 801d054:	0803f091 	.word	0x0803f091

0801d058 <dhcp_release_and_stop>:
{
 801d058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d05c:	6a84      	ldr	r4, [r0, #40]	; 0x28
{
 801d05e:	b084      	sub	sp, #16
  if (dhcp == NULL) {
 801d060:	2c00      	cmp	r4, #0
 801d062:	d052      	beq.n	801d10a <dhcp_release_and_stop+0xb2>
  if (dhcp->state == DHCP_STATE_OFF) {
 801d064:	7962      	ldrb	r2, [r4, #5]
 801d066:	2a00      	cmp	r2, #0
 801d068:	d04f      	beq.n	801d10a <dhcp_release_and_stop+0xb2>
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
    struct dhcp *dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801d06a:	1f11      	subs	r1, r2, #4
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801d06c:	2300      	movs	r3, #0
 801d06e:	4605      	mov	r5, r0
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801d070:	69a0      	ldr	r0, [r4, #24]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801d072:	2901      	cmp	r1, #1
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801d074:	62a3      	str	r3, [r4, #40]	; 0x28
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801d076:	9003      	str	r0, [sp, #12]
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 801d078:	82a3      	strh	r3, [r4, #20]
 801d07a:	8263      	strh	r3, [r4, #18]
 801d07c:	8223      	strh	r3, [r4, #16]
 801d07e:	81e3      	strh	r3, [r4, #14]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 801d080:	e9c4 3306 	strd	r3, r3, [r4, #24]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801d084:	e9c4 3308 	strd	r3, r3, [r4, #32]
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801d088:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801d08c:	d901      	bls.n	801d092 <dhcp_release_and_stop+0x3a>
 801d08e:	2a0a      	cmp	r2, #10
 801d090:	d12d      	bne.n	801d0ee <dhcp_release_and_stop+0x96>
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801d092:	f10d 030a 	add.w	r3, sp, #10
 801d096:	2207      	movs	r2, #7
 801d098:	4621      	mov	r1, r4
 801d09a:	4628      	mov	r0, r5
 801d09c:	f7fe ff10 	bl	801bec0 <dhcp_create_msg>
    if (p_out != NULL) {
 801d0a0:	4606      	mov	r6, r0
 801d0a2:	b320      	cbz	r0, 801d0ee <dhcp_release_and_stop+0x96>
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801d0a4:	6877      	ldr	r7, [r6, #4]
 801d0a6:	2304      	movs	r3, #4
 801d0a8:	2236      	movs	r2, #54	; 0x36
 801d0aa:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 801d0ae:	37f0      	adds	r7, #240	; 0xf0
 801d0b0:	4639      	mov	r1, r7
 801d0b2:	f7fe fec3 	bl	801be3c <dhcp_option>
 801d0b6:	4680      	mov	r8, r0
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801d0b8:	9803      	ldr	r0, [sp, #12]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801d0ba:	f8ad 800a 	strh.w	r8, [sp, #10]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801d0be:	f7f7 fcc1 	bl	8014a44 <lwip_htonl>
 801d0c2:	4639      	mov	r1, r7
 801d0c4:	4602      	mov	r2, r0
 801d0c6:	4640      	mov	r0, r8
 801d0c8:	f7fe fed6 	bl	801be78 <dhcp_option_long>
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801d0cc:	4639      	mov	r1, r7
 801d0ce:	4632      	mov	r2, r6
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801d0d0:	f8ad 000a 	strh.w	r0, [sp, #10]
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801d0d4:	f7fe ffa2 	bl	801c01c <dhcp_option_trailer>
      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801d0d8:	4a11      	ldr	r2, [pc, #68]	; (801d120 <dhcp_release_and_stop+0xc8>)
 801d0da:	9500      	str	r5, [sp, #0]
 801d0dc:	2343      	movs	r3, #67	; 0x43
 801d0de:	6810      	ldr	r0, [r2, #0]
 801d0e0:	4631      	mov	r1, r6
 801d0e2:	aa03      	add	r2, sp, #12
 801d0e4:	f7fe fd3c 	bl	801bb60 <udp_sendto_if>
      pbuf_free(p_out);
 801d0e8:	4630      	mov	r0, r6
 801d0ea:	f7f9 fb15 	bl	8016718 <pbuf_free>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801d0ee:	4b0d      	ldr	r3, [pc, #52]	; (801d124 <dhcp_release_and_stop+0xcc>)
 801d0f0:	4628      	mov	r0, r5
 801d0f2:	461a      	mov	r2, r3
 801d0f4:	4619      	mov	r1, r3
 801d0f6:	f7f9 f8bd 	bl	8016274 <netif_set_addr>
  if (new_state != dhcp->state) {
 801d0fa:	7963      	ldrb	r3, [r4, #5]
 801d0fc:	b11b      	cbz	r3, 801d106 <dhcp_release_and_stop+0xae>
    dhcp->state = new_state;
 801d0fe:	2300      	movs	r3, #0
 801d100:	7163      	strb	r3, [r4, #5]
    dhcp->tries = 0;
 801d102:	71a3      	strb	r3, [r4, #6]
    dhcp->request_timeout = 0;
 801d104:	8123      	strh	r3, [r4, #8]
  if (dhcp->pcb_allocated != 0) {
 801d106:	7923      	ldrb	r3, [r4, #4]
 801d108:	b913      	cbnz	r3, 801d110 <dhcp_release_and_stop+0xb8>
}
 801d10a:	b004      	add	sp, #16
 801d10c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801d110:	f7ff fa96 	bl	801c640 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801d114:	2300      	movs	r3, #0
 801d116:	7123      	strb	r3, [r4, #4]
}
 801d118:	b004      	add	sp, #16
 801d11a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d11e:	bf00      	nop
 801d120:	20022430 	.word	0x20022430
 801d124:	0803f66c 	.word	0x0803f66c

0801d128 <dhcp_start>:
{
 801d128:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801d12a:	2800      	cmp	r0, #0
 801d12c:	d046      	beq.n	801d1bc <dhcp_start+0x94>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801d12e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 801d132:	4605      	mov	r5, r0
 801d134:	07da      	lsls	r2, r3, #31
 801d136:	d537      	bpl.n	801d1a8 <dhcp_start+0x80>
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801d138:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
  dhcp = netif_dhcp_data(netif);
 801d13a:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801d13c:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801d140:	d32f      	bcc.n	801d1a2 <dhcp_start+0x7a>
  if (dhcp == NULL) {
 801d142:	b33c      	cbz	r4, 801d194 <dhcp_start+0x6c>
    if (dhcp->pcb_allocated != 0) {
 801d144:	7923      	ldrb	r3, [r4, #4]
 801d146:	bb13      	cbnz	r3, 801d18e <dhcp_start+0x66>
  memset(dhcp, 0, sizeof(struct dhcp));
 801d148:	2234      	movs	r2, #52	; 0x34
 801d14a:	2100      	movs	r1, #0
 801d14c:	4620      	mov	r0, r4
 801d14e:	f002 fcba 	bl	801fac6 <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801d152:	f7ff fa3b 	bl	801c5cc <dhcp_inc_pcb_refcount>
 801d156:	4606      	mov	r6, r0
 801d158:	bb18      	cbnz	r0, 801d1a2 <dhcp_start+0x7a>
  dhcp->pcb_allocated = 1;
 801d15a:	2301      	movs	r3, #1
 801d15c:	7123      	strb	r3, [r4, #4]
  if (!netif_is_link_up(netif)) {
 801d15e:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 801d162:	075b      	lsls	r3, r3, #29
 801d164:	d408      	bmi.n	801d178 <dhcp_start+0x50>
  if (new_state != dhcp->state) {
 801d166:	7963      	ldrb	r3, [r4, #5]
 801d168:	2b02      	cmp	r3, #2
 801d16a:	d003      	beq.n	801d174 <dhcp_start+0x4c>
    dhcp->state = new_state;
 801d16c:	2302      	movs	r3, #2
    dhcp->tries = 0;
 801d16e:	71a0      	strb	r0, [r4, #6]
    dhcp->request_timeout = 0;
 801d170:	8120      	strh	r0, [r4, #8]
    dhcp->state = new_state;
 801d172:	7163      	strb	r3, [r4, #5]
}
 801d174:	4630      	mov	r0, r6
 801d176:	bd70      	pop	{r4, r5, r6, pc}
  result = dhcp_discover(netif);
 801d178:	4628      	mov	r0, r5
 801d17a:	f7ff f8dd 	bl	801c338 <dhcp_discover>
  if (result != ERR_OK) {
 801d17e:	2800      	cmp	r0, #0
 801d180:	d0f8      	beq.n	801d174 <dhcp_start+0x4c>
    dhcp_release_and_stop(netif);
 801d182:	4628      	mov	r0, r5
    return ERR_MEM;
 801d184:	f04f 36ff 	mov.w	r6, #4294967295
    dhcp_release_and_stop(netif);
 801d188:	f7ff ff66 	bl	801d058 <dhcp_release_and_stop>
    return ERR_MEM;
 801d18c:	e7f2      	b.n	801d174 <dhcp_start+0x4c>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801d18e:	f7ff fa57 	bl	801c640 <dhcp_dec_pcb_refcount>
 801d192:	e7d9      	b.n	801d148 <dhcp_start+0x20>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801d194:	2034      	movs	r0, #52	; 0x34
 801d196:	f7f8 fdcf 	bl	8015d38 <mem_malloc>
    if (dhcp == NULL) {
 801d19a:	4604      	mov	r4, r0
 801d19c:	b108      	cbz	r0, 801d1a2 <dhcp_start+0x7a>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801d19e:	62a8      	str	r0, [r5, #40]	; 0x28
 801d1a0:	e7d2      	b.n	801d148 <dhcp_start+0x20>
    return ERR_MEM;
 801d1a2:	f04f 36ff 	mov.w	r6, #4294967295
 801d1a6:	e7e5      	b.n	801d174 <dhcp_start+0x4c>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801d1a8:	4b09      	ldr	r3, [pc, #36]	; (801d1d0 <dhcp_start+0xa8>)
 801d1aa:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801d1ae:	4909      	ldr	r1, [pc, #36]	; (801d1d4 <dhcp_start+0xac>)
 801d1b0:	f06f 060f 	mvn.w	r6, #15
 801d1b4:	4808      	ldr	r0, [pc, #32]	; (801d1d8 <dhcp_start+0xb0>)
 801d1b6:	f003 fc07 	bl	80209c8 <iprintf>
 801d1ba:	e7db      	b.n	801d174 <dhcp_start+0x4c>
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801d1bc:	4b04      	ldr	r3, [pc, #16]	; (801d1d0 <dhcp_start+0xa8>)
 801d1be:	f240 22e7 	movw	r2, #743	; 0x2e7
 801d1c2:	4906      	ldr	r1, [pc, #24]	; (801d1dc <dhcp_start+0xb4>)
 801d1c4:	f06f 060f 	mvn.w	r6, #15
 801d1c8:	4803      	ldr	r0, [pc, #12]	; (801d1d8 <dhcp_start+0xb0>)
 801d1ca:	f003 fbfd 	bl	80209c8 <iprintf>
 801d1ce:	e7d1      	b.n	801d174 <dhcp_start+0x4c>
 801d1d0:	0803f150 	.word	0x0803f150
 801d1d4:	0803f310 	.word	0x0803f310
 801d1d8:	0802697c 	.word	0x0802697c
 801d1dc:	0802696c 	.word	0x0802696c

0801d1e0 <dhcp_coarse_tmr>:
  NETIF_FOREACH(netif) {
 801d1e0:	4b5e      	ldr	r3, [pc, #376]	; (801d35c <dhcp_coarse_tmr+0x17c>)
{
 801d1e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  NETIF_FOREACH(netif) {
 801d1e6:	681d      	ldr	r5, [r3, #0]
{
 801d1e8:	b085      	sub	sp, #20
  NETIF_FOREACH(netif) {
 801d1ea:	b1d5      	cbz	r5, 801d222 <dhcp_coarse_tmr+0x42>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801d1ec:	6aac      	ldr	r4, [r5, #40]	; 0x28
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801d1ee:	b1ac      	cbz	r4, 801d21c <dhcp_coarse_tmr+0x3c>
 801d1f0:	7963      	ldrb	r3, [r4, #5]
 801d1f2:	b19b      	cbz	r3, 801d21c <dhcp_coarse_tmr+0x3c>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801d1f4:	8aa1      	ldrh	r1, [r4, #20]
 801d1f6:	b129      	cbz	r1, 801d204 <dhcp_coarse_tmr+0x24>
 801d1f8:	8a62      	ldrh	r2, [r4, #18]
 801d1fa:	3201      	adds	r2, #1
 801d1fc:	b292      	uxth	r2, r2
 801d1fe:	4291      	cmp	r1, r2
 801d200:	8262      	strh	r2, [r4, #18]
 801d202:	d011      	beq.n	801d228 <dhcp_coarse_tmr+0x48>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 801d204:	8a22      	ldrh	r2, [r4, #16]
 801d206:	b11a      	cbz	r2, 801d210 <dhcp_coarse_tmr+0x30>
 801d208:	1e51      	subs	r1, r2, #1
 801d20a:	2a01      	cmp	r2, #1
 801d20c:	8221      	strh	r1, [r4, #16]
 801d20e:	d012      	beq.n	801d236 <dhcp_coarse_tmr+0x56>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 801d210:	89e2      	ldrh	r2, [r4, #14]
 801d212:	b11a      	cbz	r2, 801d21c <dhcp_coarse_tmr+0x3c>
 801d214:	1e51      	subs	r1, r2, #1
 801d216:	2a01      	cmp	r2, #1
 801d218:	81e1      	strh	r1, [r4, #14]
 801d21a:	d05e      	beq.n	801d2da <dhcp_coarse_tmr+0xfa>
  NETIF_FOREACH(netif) {
 801d21c:	682d      	ldr	r5, [r5, #0]
 801d21e:	2d00      	cmp	r5, #0
 801d220:	d1e4      	bne.n	801d1ec <dhcp_coarse_tmr+0xc>
}
 801d222:	b005      	add	sp, #20
 801d224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        dhcp_release_and_stop(netif);
 801d228:	4628      	mov	r0, r5
 801d22a:	f7ff ff15 	bl	801d058 <dhcp_release_and_stop>
        dhcp_start(netif);
 801d22e:	4628      	mov	r0, r5
 801d230:	f7ff ff7a 	bl	801d128 <dhcp_start>
 801d234:	e7f2      	b.n	801d21c <dhcp_coarse_tmr+0x3c>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801d236:	1e5a      	subs	r2, r3, #1
 801d238:	b2d1      	uxtb	r1, r2
 801d23a:	2909      	cmp	r1, #9
 801d23c:	d8ee      	bhi.n	801d21c <dhcp_coarse_tmr+0x3c>
 801d23e:	f240 2219 	movw	r2, #537	; 0x219
 801d242:	40ca      	lsrs	r2, r1
 801d244:	43d2      	mvns	r2, r2
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801d246:	f012 0201 	ands.w	r2, r2, #1
 801d24a:	d1e7      	bne.n	801d21c <dhcp_coarse_tmr+0x3c>
  if (new_state != dhcp->state) {
 801d24c:	2b04      	cmp	r3, #4
 801d24e:	d003      	beq.n	801d258 <dhcp_coarse_tmr+0x78>
    dhcp->state = new_state;
 801d250:	2304      	movs	r3, #4
    dhcp->tries = 0;
 801d252:	71a2      	strb	r2, [r4, #6]
    dhcp->request_timeout = 0;
 801d254:	8122      	strh	r2, [r4, #8]
    dhcp->state = new_state;
 801d256:	7163      	strb	r3, [r4, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801d258:	f10d 030e 	add.w	r3, sp, #14
 801d25c:	2203      	movs	r2, #3
 801d25e:	4621      	mov	r1, r4
 801d260:	4628      	mov	r0, r5
 801d262:	f7fe fe2d 	bl	801bec0 <dhcp_create_msg>
  if (p_out != NULL) {
 801d266:	4683      	mov	fp, r0
 801d268:	2800      	cmp	r0, #0
 801d26a:	d057      	beq.n	801d31c <dhcp_coarse_tmr+0x13c>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801d26c:	6847      	ldr	r7, [r0, #4]
 801d26e:	2302      	movs	r3, #2
 801d270:	2239      	movs	r2, #57	; 0x39
 801d272:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 801d276:	37f0      	adds	r7, #240	; 0xf0
 801d278:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 801d378 <dhcp_coarse_tmr+0x198>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801d27c:	f04f 0901 	mov.w	r9, #1
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801d280:	4639      	mov	r1, r7
 801d282:	f7fe fddb 	bl	801be3c <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801d286:	4639      	mov	r1, r7
 801d288:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801d28a:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801d28e:	f7fe fdb9 	bl	801be04 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801d292:	4639      	mov	r1, r7
 801d294:	2304      	movs	r3, #4
 801d296:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801d298:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801d29c:	f7fe fdce 	bl	801be3c <dhcp_option>
 801d2a0:	4606      	mov	r6, r0
 801d2a2:	f100 0804 	add.w	r8, r0, #4
 801d2a6:	f8ad 000e 	strh.w	r0, [sp, #14]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801d2aa:	2e43      	cmp	r6, #67	; 0x43
 801d2ac:	fa1f f888 	uxth.w	r8, r8
 801d2b0:	d80b      	bhi.n	801d2ca <dhcp_coarse_tmr+0xea>
  options[options_out_len++] = value;
 801d2b2:	1c73      	adds	r3, r6, #1
 801d2b4:	f807 9006 	strb.w	r9, [r7, r6]
 801d2b8:	b29e      	uxth	r6, r3
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d2ba:	4546      	cmp	r6, r8
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801d2bc:	f8ad 600e 	strh.w	r6, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d2c0:	d01c      	beq.n	801d2fc <dhcp_coarse_tmr+0x11c>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801d2c2:	2e43      	cmp	r6, #67	; 0x43
 801d2c4:	f81a 9b01 	ldrb.w	r9, [sl], #1
 801d2c8:	d9f3      	bls.n	801d2b2 <dhcp_coarse_tmr+0xd2>
 801d2ca:	4b25      	ldr	r3, [pc, #148]	; (801d360 <dhcp_coarse_tmr+0x180>)
 801d2cc:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801d2d0:	4924      	ldr	r1, [pc, #144]	; (801d364 <dhcp_coarse_tmr+0x184>)
 801d2d2:	4825      	ldr	r0, [pc, #148]	; (801d368 <dhcp_coarse_tmr+0x188>)
 801d2d4:	f003 fb78 	bl	80209c8 <iprintf>
 801d2d8:	e7eb      	b.n	801d2b2 <dhcp_coarse_tmr+0xd2>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801d2da:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 801d2de:	2a01      	cmp	r2, #1
 801d2e0:	d001      	beq.n	801d2e6 <dhcp_coarse_tmr+0x106>
 801d2e2:	2b0a      	cmp	r3, #10
 801d2e4:	d19a      	bne.n	801d21c <dhcp_coarse_tmr+0x3c>
    dhcp_renew(netif);
 801d2e6:	4628      	mov	r0, r5
 801d2e8:	f7ff fe28 	bl	801cf3c <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801d2ec:	89a3      	ldrh	r3, [r4, #12]
 801d2ee:	8a62      	ldrh	r2, [r4, #18]
 801d2f0:	1a9b      	subs	r3, r3, r2
 801d2f2:	2b01      	cmp	r3, #1
 801d2f4:	dd92      	ble.n	801d21c <dhcp_coarse_tmr+0x3c>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801d2f6:	105b      	asrs	r3, r3, #1
 801d2f8:	81e3      	strh	r3, [r4, #14]
 801d2fa:	e78f      	b.n	801d21c <dhcp_coarse_tmr+0x3c>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801d2fc:	4639      	mov	r1, r7
 801d2fe:	4640      	mov	r0, r8
 801d300:	465a      	mov	r2, fp
 801d302:	f7fe fe8b 	bl	801c01c <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801d306:	4a19      	ldr	r2, [pc, #100]	; (801d36c <dhcp_coarse_tmr+0x18c>)
 801d308:	9500      	str	r5, [sp, #0]
 801d30a:	2343      	movs	r3, #67	; 0x43
 801d30c:	6810      	ldr	r0, [r2, #0]
 801d30e:	4659      	mov	r1, fp
 801d310:	4a17      	ldr	r2, [pc, #92]	; (801d370 <dhcp_coarse_tmr+0x190>)
 801d312:	f7fe fc25 	bl	801bb60 <udp_sendto_if>
    pbuf_free(p_out);
 801d316:	4658      	mov	r0, fp
 801d318:	f7f9 f9fe 	bl	8016718 <pbuf_free>
  if (dhcp->tries < 255) {
 801d31c:	79a3      	ldrb	r3, [r4, #6]
 801d31e:	2bff      	cmp	r3, #255	; 0xff
 801d320:	d01a      	beq.n	801d358 <dhcp_coarse_tmr+0x178>
    dhcp->tries++;
 801d322:	3301      	adds	r3, #1
 801d324:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801d326:	2b09      	cmp	r3, #9
    dhcp->tries++;
 801d328:	71a3      	strb	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801d32a:	d815      	bhi.n	801d358 <dhcp_coarse_tmr+0x178>
 801d32c:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 801d330:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801d334:	4a0f      	ldr	r2, [pc, #60]	; (801d374 <dhcp_coarse_tmr+0x194>)
 801d336:	00db      	lsls	r3, r3, #3
 801d338:	b29b      	uxth	r3, r3
 801d33a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801d33e:	fba2 2303 	umull	r2, r3, r2, r3
 801d342:	095b      	lsrs	r3, r3, #5
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801d344:	8aa2      	ldrh	r2, [r4, #20]
 801d346:	8a61      	ldrh	r1, [r4, #18]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801d348:	8123      	strh	r3, [r4, #8]
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801d34a:	1a53      	subs	r3, r2, r1
 801d34c:	2b01      	cmp	r3, #1
 801d34e:	f77f af65 	ble.w	801d21c <dhcp_coarse_tmr+0x3c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801d352:	105b      	asrs	r3, r3, #1
 801d354:	8223      	strh	r3, [r4, #16]
 801d356:	e761      	b.n	801d21c <dhcp_coarse_tmr+0x3c>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801d358:	2314      	movs	r3, #20
 801d35a:	e7f3      	b.n	801d344 <dhcp_coarse_tmr+0x164>
 801d35c:	20036158 	.word	0x20036158
 801d360:	0803f150 	.word	0x0803f150
 801d364:	0803f1c4 	.word	0x0803f1c4
 801d368:	0802697c 	.word	0x0802697c
 801d36c:	20022430 	.word	0x20022430
 801d370:	0803f670 	.word	0x0803f670
 801d374:	10624dd3 	.word	0x10624dd3
 801d378:	0803f091 	.word	0x0803f091

0801d37c <dhcp_fine_tmr>:
{
 801d37c:	b538      	push	{r3, r4, r5, lr}
  NETIF_FOREACH(netif) {
 801d37e:	4b21      	ldr	r3, [pc, #132]	; (801d404 <dhcp_fine_tmr+0x88>)
 801d380:	681c      	ldr	r4, [r3, #0]
 801d382:	b1fc      	cbz	r4, 801d3c4 <dhcp_fine_tmr+0x48>
        dhcp->request_timeout--;
 801d384:	2500      	movs	r5, #0
 801d386:	e003      	b.n	801d390 <dhcp_fine_tmr+0x14>
        dhcp->request_timeout--;
 801d388:	3a01      	subs	r2, #1
 801d38a:	811a      	strh	r2, [r3, #8]
  NETIF_FOREACH(netif) {
 801d38c:	6824      	ldr	r4, [r4, #0]
 801d38e:	b1cc      	cbz	r4, 801d3c4 <dhcp_fine_tmr+0x48>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801d390:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (dhcp != NULL) {
 801d392:	2b00      	cmp	r3, #0
 801d394:	d0fa      	beq.n	801d38c <dhcp_fine_tmr+0x10>
      if (dhcp->request_timeout > 1) {
 801d396:	891a      	ldrh	r2, [r3, #8]
 801d398:	2a01      	cmp	r2, #1
 801d39a:	d8f5      	bhi.n	801d388 <dhcp_fine_tmr+0xc>
      } else if (dhcp->request_timeout == 1) {
 801d39c:	d1f6      	bne.n	801d38c <dhcp_fine_tmr+0x10>
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801d39e:	795a      	ldrb	r2, [r3, #5]
        dhcp->request_timeout--;
 801d3a0:	811d      	strh	r5, [r3, #8]
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801d3a2:	2a0c      	cmp	r2, #12
 801d3a4:	d016      	beq.n	801d3d4 <dhcp_fine_tmr+0x58>
 801d3a6:	2a06      	cmp	r2, #6
 801d3a8:	d014      	beq.n	801d3d4 <dhcp_fine_tmr+0x58>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801d3aa:	2a01      	cmp	r2, #1
 801d3ac:	d00b      	beq.n	801d3c6 <dhcp_fine_tmr+0x4a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801d3ae:	2a08      	cmp	r2, #8
 801d3b0:	d01a      	beq.n	801d3e8 <dhcp_fine_tmr+0x6c>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 801d3b2:	2a03      	cmp	r2, #3
 801d3b4:	d1ea      	bne.n	801d38c <dhcp_fine_tmr+0x10>
    if (dhcp->tries < REBOOT_TRIES) {
 801d3b6:	799b      	ldrb	r3, [r3, #6]
      dhcp_reboot(netif);
 801d3b8:	4620      	mov	r0, r4
    if (dhcp->tries < REBOOT_TRIES) {
 801d3ba:	2b01      	cmp	r3, #1
 801d3bc:	d91e      	bls.n	801d3fc <dhcp_fine_tmr+0x80>
      dhcp_discover(netif);
 801d3be:	f7fe ffbb 	bl	801c338 <dhcp_discover>
 801d3c2:	e7e3      	b.n	801d38c <dhcp_fine_tmr+0x10>
}
 801d3c4:	bd38      	pop	{r3, r4, r5, pc}
    if (dhcp->tries <= 5) {
 801d3c6:	799b      	ldrb	r3, [r3, #6]
      dhcp_select(netif);
 801d3c8:	4620      	mov	r0, r4
    if (dhcp->tries <= 5) {
 801d3ca:	2b05      	cmp	r3, #5
 801d3cc:	d806      	bhi.n	801d3dc <dhcp_fine_tmr+0x60>
      dhcp_select(netif);
 801d3ce:	f7fe fee3 	bl	801c198 <dhcp_select>
 801d3d2:	e7db      	b.n	801d38c <dhcp_fine_tmr+0x10>
    dhcp_discover(netif);
 801d3d4:	4620      	mov	r0, r4
 801d3d6:	f7fe ffaf 	bl	801c338 <dhcp_discover>
 801d3da:	e7d7      	b.n	801d38c <dhcp_fine_tmr+0x10>
      dhcp_release_and_stop(netif);
 801d3dc:	f7ff fe3c 	bl	801d058 <dhcp_release_and_stop>
      dhcp_start(netif);
 801d3e0:	4620      	mov	r0, r4
 801d3e2:	f7ff fea1 	bl	801d128 <dhcp_start>
 801d3e6:	e7d1      	b.n	801d38c <dhcp_fine_tmr+0x10>
    if (dhcp->tries <= 1) {
 801d3e8:	799b      	ldrb	r3, [r3, #6]
      dhcp_check(netif);
 801d3ea:	4620      	mov	r0, r4
    if (dhcp->tries <= 1) {
 801d3ec:	2b01      	cmp	r3, #1
 801d3ee:	d902      	bls.n	801d3f6 <dhcp_fine_tmr+0x7a>
      dhcp_bind(netif);
 801d3f0:	f7ff f848 	bl	801c484 <dhcp_bind>
 801d3f4:	e7ca      	b.n	801d38c <dhcp_fine_tmr+0x10>
      dhcp_check(netif);
 801d3f6:	f7ff f82d 	bl	801c454 <dhcp_check>
 801d3fa:	e7c7      	b.n	801d38c <dhcp_fine_tmr+0x10>
      dhcp_reboot(netif);
 801d3fc:	f7fe fe2a 	bl	801c054 <dhcp_reboot>
 801d400:	e7c4      	b.n	801d38c <dhcp_fine_tmr+0x10>
 801d402:	bf00      	nop
 801d404:	20036158 	.word	0x20036158

0801d408 <free_etharp_q>:
 */
static void
free_etharp_q(struct etharp_q_entry *q)
{
  struct etharp_q_entry *r;
  LWIP_ASSERT("q != NULL", q != NULL);
 801d408:	b1e8      	cbz	r0, 801d446 <free_etharp_q+0x3e>
{
 801d40a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d40e:	4604      	mov	r4, r0
  while (q) {
    r = q;
    q = q->next;
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 801d410:	f8df 8048 	ldr.w	r8, [pc, #72]	; 801d45c <free_etharp_q+0x54>
 801d414:	4f0f      	ldr	r7, [pc, #60]	; (801d454 <free_etharp_q+0x4c>)
 801d416:	4e10      	ldr	r6, [pc, #64]	; (801d458 <free_etharp_q+0x50>)
 801d418:	e007      	b.n	801d42a <free_etharp_q+0x22>
    pbuf_free(r->p);
 801d41a:	f7f9 f97d 	bl	8016718 <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
 801d41e:	4621      	mov	r1, r4
 801d420:	200b      	movs	r0, #11
 801d422:	462c      	mov	r4, r5
 801d424:	f7f8 fe9e 	bl	8016164 <memp_free>
  while (q) {
 801d428:	b15d      	cbz	r5, 801d442 <free_etharp_q+0x3a>
    q = q->next;
 801d42a:	e9d4 5000 	ldrd	r5, r0, [r4]
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 801d42e:	2800      	cmp	r0, #0
 801d430:	d1f3      	bne.n	801d41a <free_etharp_q+0x12>
 801d432:	4643      	mov	r3, r8
 801d434:	229a      	movs	r2, #154	; 0x9a
 801d436:	4639      	mov	r1, r7
 801d438:	4630      	mov	r0, r6
 801d43a:	f003 fac5 	bl	80209c8 <iprintf>
 801d43e:	6860      	ldr	r0, [r4, #4]
 801d440:	e7eb      	b.n	801d41a <free_etharp_q+0x12>
  }
}
 801d442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("q != NULL", q != NULL);
 801d446:	4b05      	ldr	r3, [pc, #20]	; (801d45c <free_etharp_q+0x54>)
 801d448:	2296      	movs	r2, #150	; 0x96
 801d44a:	4905      	ldr	r1, [pc, #20]	; (801d460 <free_etharp_q+0x58>)
 801d44c:	4802      	ldr	r0, [pc, #8]	; (801d458 <free_etharp_q+0x50>)
 801d44e:	f003 babb 	b.w	80209c8 <iprintf>
 801d452:	bf00      	nop
 801d454:	0803f4d4 	.word	0x0803f4d4
 801d458:	0802697c 	.word	0x0802697c
 801d45c:	0803f490 	.word	0x0803f490
 801d460:	0803f4c8 	.word	0x0803f4c8

0801d464 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801d464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d468:	2300      	movs	r3, #0
 801d46a:	b085      	sub	sp, #20
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801d46c:	f04f 0c20 	mov.w	ip, #32
 801d470:	f8df 814c 	ldr.w	r8, [pc, #332]	; 801d5c0 <etharp_find_entry+0x15c>
{
 801d474:	9103      	str	r1, [sp, #12]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801d476:	469e      	mov	lr, r3
 801d478:	4641      	mov	r1, r8
 801d47a:	9302      	str	r3, [sp, #8]
 801d47c:	469b      	mov	fp, r3
  s16_t empty = ARP_TABLE_SIZE;
 801d47e:	4664      	mov	r4, ip
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801d480:	46e1      	mov	r9, ip
 801d482:	46e2      	mov	sl, ip
 801d484:	9201      	str	r2, [sp, #4]
 801d486:	e005      	b.n	801d494 <etharp_find_entry+0x30>
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801d488:	b946      	cbnz	r6, 801d49c <etharp_find_entry+0x38>
 801d48a:	462c      	mov	r4, r5
 801d48c:	3301      	adds	r3, #1
 801d48e:	3118      	adds	r1, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d490:	2b20      	cmp	r3, #32
 801d492:	d015      	beq.n	801d4c0 <etharp_find_entry+0x5c>
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801d494:	2c20      	cmp	r4, #32
 801d496:	b21d      	sxth	r5, r3
    u8_t state = arp_table[i].state;
 801d498:	7d0e      	ldrb	r6, [r1, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801d49a:	d0f5      	beq.n	801d488 <etharp_find_entry+0x24>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
 801d49c:	2e00      	cmp	r6, #0
 801d49e:	d0f5      	beq.n	801d48c <etharp_find_entry+0x28>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801d4a0:	b118      	cbz	r0, 801d4aa <etharp_find_entry+0x46>
 801d4a2:	6802      	ldr	r2, [r0, #0]
 801d4a4:	684f      	ldr	r7, [r1, #4]
 801d4a6:	42ba      	cmp	r2, r7
 801d4a8:	d03a      	beq.n	801d520 <etharp_find_entry+0xbc>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801d4aa:	2e01      	cmp	r6, #1
 801d4ac:	8a4f      	ldrh	r7, [r1, #18]
 801d4ae:	d030      	beq.n	801d512 <etharp_find_entry+0xae>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801d4b0:	4577      	cmp	r7, lr
 801d4b2:	d3eb      	bcc.n	801d48c <etharp_find_entry+0x28>
 801d4b4:	3301      	adds	r3, #1
 801d4b6:	46be      	mov	lr, r7
 801d4b8:	46a9      	mov	r9, r5
 801d4ba:	3118      	adds	r1, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d4bc:	2b20      	cmp	r3, #32
 801d4be:	d1e9      	bne.n	801d494 <etharp_find_entry+0x30>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801d4c0:	9b03      	ldr	r3, [sp, #12]
 801d4c2:	9a01      	ldr	r2, [sp, #4]
 801d4c4:	2b01      	cmp	r3, #1
 801d4c6:	d170      	bne.n	801d5aa <etharp_find_entry+0x146>
 801d4c8:	2c20      	cmp	r4, #32
 801d4ca:	4616      	mov	r6, r2
 801d4cc:	4607      	mov	r7, r0
 801d4ce:	d037      	beq.n	801d540 <etharp_find_entry+0xdc>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801d4d0:	0065      	lsls	r5, r4, #1
 801d4d2:	46a1      	mov	r9, r4
 801d4d4:	192b      	adds	r3, r5, r4
 801d4d6:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801d4da:	7d1b      	ldrb	r3, [r3, #20]
 801d4dc:	b133      	cbz	r3, 801d4ec <etharp_find_entry+0x88>
 801d4de:	4b34      	ldr	r3, [pc, #208]	; (801d5b0 <etharp_find_entry+0x14c>)
 801d4e0:	f240 1285 	movw	r2, #389	; 0x185
 801d4e4:	4933      	ldr	r1, [pc, #204]	; (801d5b4 <etharp_find_entry+0x150>)
 801d4e6:	4834      	ldr	r0, [pc, #208]	; (801d5b8 <etharp_find_entry+0x154>)
 801d4e8:	f003 fa6e 	bl	80209c8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801d4ec:	b12f      	cbz	r7, 801d4fa <etharp_find_entry+0x96>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801d4ee:	eb05 0309 	add.w	r3, r5, r9
 801d4f2:	683a      	ldr	r2, [r7, #0]
 801d4f4:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801d4f8:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 801d4fa:	444d      	add	r5, r9
 801d4fc:	2300      	movs	r3, #0
 801d4fe:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801d502:	f8c8 6008 	str.w	r6, [r8, #8]
  arp_table[i].ctime = 0;
 801d506:	f8a8 3012 	strh.w	r3, [r8, #18]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 801d50a:	4620      	mov	r0, r4
 801d50c:	b005      	add	sp, #20
 801d50e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (arp_table[i].q != NULL) {
 801d512:	680e      	ldr	r6, [r1, #0]
 801d514:	b176      	cbz	r6, 801d534 <etharp_find_entry+0xd0>
          if (arp_table[i].ctime >= age_queue) {
 801d516:	455f      	cmp	r7, fp
 801d518:	d3b8      	bcc.n	801d48c <etharp_find_entry+0x28>
 801d51a:	46bb      	mov	fp, r7
 801d51c:	46ac      	mov	ip, r5
 801d51e:	e7b5      	b.n	801d48c <etharp_find_entry+0x28>
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801d520:	9a01      	ldr	r2, [sp, #4]
 801d522:	b112      	cbz	r2, 801d52a <etharp_find_entry+0xc6>
 801d524:	688f      	ldr	r7, [r1, #8]
 801d526:	4297      	cmp	r7, r2
 801d528:	d1bf      	bne.n	801d4aa <etharp_find_entry+0x46>
 801d52a:	462c      	mov	r4, r5
}
 801d52c:	4620      	mov	r0, r4
 801d52e:	b005      	add	sp, #20
 801d530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 801d534:	9e02      	ldr	r6, [sp, #8]
 801d536:	42b7      	cmp	r7, r6
 801d538:	d3a8      	bcc.n	801d48c <etharp_find_entry+0x28>
 801d53a:	9702      	str	r7, [sp, #8]
 801d53c:	46aa      	mov	sl, r5
 801d53e:	e7a5      	b.n	801d48c <etharp_find_entry+0x28>
    if (old_stable < ARP_TABLE_SIZE) {
 801d540:	f1b9 0f20 	cmp.w	r9, #32
 801d544:	d023      	beq.n	801d58e <etharp_find_entry+0x12a>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801d546:	ea4f 0549 	mov.w	r5, r9, lsl #1
 801d54a:	eb05 0309 	add.w	r3, r5, r9
 801d54e:	f858 3033 	ldr.w	r3, [r8, r3, lsl #3]
 801d552:	b343      	cbz	r3, 801d5a6 <etharp_find_entry+0x142>
 801d554:	4b16      	ldr	r3, [pc, #88]	; (801d5b0 <etharp_find_entry+0x14c>)
 801d556:	f240 126d 	movw	r2, #365	; 0x16d
 801d55a:	4918      	ldr	r1, [pc, #96]	; (801d5bc <etharp_find_entry+0x158>)
 801d55c:	464c      	mov	r4, r9
 801d55e:	4816      	ldr	r0, [pc, #88]	; (801d5b8 <etharp_find_entry+0x154>)
 801d560:	f003 fa32 	bl	80209c8 <iprintf>
  if (arp_table[i].q != NULL) {
 801d564:	ea4f 0549 	mov.w	r5, r9, lsl #1
 801d568:	eb05 0a09 	add.w	sl, r5, r9
 801d56c:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 801d570:	f858 000a 	ldr.w	r0, [r8, sl]
 801d574:	b120      	cbz	r0, 801d580 <etharp_find_entry+0x11c>
    free_etharp_q(arp_table[i].q);
 801d576:	f7ff ff47 	bl	801d408 <free_etharp_q>
    arp_table[i].q = NULL;
 801d57a:	2300      	movs	r3, #0
 801d57c:	f848 300a 	str.w	r3, [r8, sl]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801d580:	eb05 0309 	add.w	r3, r5, r9
 801d584:	2200      	movs	r2, #0
 801d586:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801d58a:	751a      	strb	r2, [r3, #20]
 801d58c:	e7ae      	b.n	801d4ec <etharp_find_entry+0x88>
    } else if (old_pending < ARP_TABLE_SIZE) {
 801d58e:	f1ba 0f20 	cmp.w	sl, #32
 801d592:	d105      	bne.n	801d5a0 <etharp_find_entry+0x13c>
    } else if (old_queue < ARP_TABLE_SIZE) {
 801d594:	f1bc 0f20 	cmp.w	ip, #32
 801d598:	d007      	beq.n	801d5aa <etharp_find_entry+0x146>
 801d59a:	4664      	mov	r4, ip
 801d59c:	46e1      	mov	r9, ip
 801d59e:	e7e1      	b.n	801d564 <etharp_find_entry+0x100>
 801d5a0:	4654      	mov	r4, sl
    } else if (old_pending < ARP_TABLE_SIZE) {
 801d5a2:	46d1      	mov	r9, sl
 801d5a4:	e7de      	b.n	801d564 <etharp_find_entry+0x100>
 801d5a6:	464c      	mov	r4, r9
 801d5a8:	e7ea      	b.n	801d580 <etharp_find_entry+0x11c>
    return (s16_t)ERR_MEM;
 801d5aa:	f04f 34ff 	mov.w	r4, #4294967295
 801d5ae:	e7ac      	b.n	801d50a <etharp_find_entry+0xa6>
 801d5b0:	0803f490 	.word	0x0803f490
 801d5b4:	0803f34c 	.word	0x0803f34c
 801d5b8:	0802697c 	.word	0x0802697c
 801d5bc:	0803f334 	.word	0x0803f334
 801d5c0:	2002243c 	.word	0x2002243c

0801d5c4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801d5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5c8:	b083      	sub	sp, #12
 801d5ca:	4689      	mov	r9, r1
 801d5cc:	4692      	mov	sl, r2
 801d5ce:	4698      	mov	r8, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801d5d0:	4606      	mov	r6, r0
{
 801d5d2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801d5d4:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801d5d8:	2800      	cmp	r0, #0
 801d5da:	d05a      	beq.n	801d692 <etharp_raw+0xce>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801d5dc:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d5e0:	211c      	movs	r1, #28
 801d5e2:	200e      	movs	r0, #14
 801d5e4:	f7f9 f906 	bl	80167f4 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801d5e8:	4605      	mov	r5, r0
 801d5ea:	2800      	cmp	r0, #0
 801d5ec:	d059      	beq.n	801d6a2 <etharp_raw+0xde>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801d5ee:	8943      	ldrh	r3, [r0, #10]
 801d5f0:	2b1b      	cmp	r3, #27
 801d5f2:	d946      	bls.n	801d682 <etharp_raw+0xbe>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801d5f4:	686c      	ldr	r4, [r5, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801d5f6:	4658      	mov	r0, fp
 801d5f8:	f7f7 fa20 	bl	8014a3c <lwip_htons>
 801d5fc:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801d5fe:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 801d602:	2b06      	cmp	r3, #6
 801d604:	d006      	beq.n	801d614 <etharp_raw+0x50>
 801d606:	4b2a      	ldr	r3, [pc, #168]	; (801d6b0 <etharp_raw+0xec>)
 801d608:	f240 426a 	movw	r2, #1130	; 0x46a
 801d60c:	4929      	ldr	r1, [pc, #164]	; (801d6b4 <etharp_raw+0xf0>)
 801d60e:	482a      	ldr	r0, [pc, #168]	; (801d6b8 <etharp_raw+0xf4>)
 801d610:	f003 f9da 	bl	80209c8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801d614:	f8d8 1000 	ldr.w	r1, [r8]
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801d618:	f04f 0e08 	mov.w	lr, #8
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
  hdr->protolen = sizeof(ip4_addr_t);
 801d61c:	f04f 0c04 	mov.w	ip, #4
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801d620:	4630      	mov	r0, r6
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801d622:	60a1      	str	r1, [r4, #8]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801d624:	2600      	movs	r6, #0
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801d626:	f8b8 1004 	ldrh.w	r1, [r8, #4]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801d62a:	f04f 0801 	mov.w	r8, #1
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801d62e:	4653      	mov	r3, sl
 801d630:	464a      	mov	r2, r9
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801d632:	81a1      	strh	r1, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801d634:	6839      	ldr	r1, [r7, #0]
 801d636:	f8c4 1012 	str.w	r1, [r4, #18]
  hdr->hwlen = ETH_HWADDR_LEN;
 801d63a:	2106      	movs	r1, #6
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801d63c:	88bf      	ldrh	r7, [r7, #4]
 801d63e:	82e7      	strh	r7, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801d640:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801d642:	683f      	ldr	r7, [r7, #0]
 801d644:	f8c4 700e 	str.w	r7, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801d648:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801d64a:	683f      	ldr	r7, [r7, #0]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801d64c:	f884 e002 	strb.w	lr, [r4, #2]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801d650:	61a7      	str	r7, [r4, #24]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801d652:	f640 0706 	movw	r7, #2054	; 0x806
  hdr->hwlen = ETH_HWADDR_LEN;
 801d656:	7121      	strb	r1, [r4, #4]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801d658:	4629      	mov	r1, r5
  hdr->protolen = sizeof(ip4_addr_t);
 801d65a:	f884 c005 	strb.w	ip, [r4, #5]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801d65e:	7026      	strb	r6, [r4, #0]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801d660:	70e6      	strb	r6, [r4, #3]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801d662:	f884 8001 	strb.w	r8, [r4, #1]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801d666:	9700      	str	r7, [sp, #0]
 801d668:	f001 fd2c 	bl	801f0c4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
 801d66c:	4a13      	ldr	r2, [pc, #76]	; (801d6bc <etharp_raw+0xf8>)
  /* free ARP query packet */
  pbuf_free(p);
 801d66e:	4628      	mov	r0, r5
  ETHARP_STATS_INC(etharp.xmit);
 801d670:	8b13      	ldrh	r3, [r2, #24]
 801d672:	4443      	add	r3, r8
 801d674:	8313      	strh	r3, [r2, #24]
  pbuf_free(p);
 801d676:	f7f9 f84f 	bl	8016718 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 801d67a:	4630      	mov	r0, r6
}
 801d67c:	b003      	add	sp, #12
 801d67e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801d682:	4b0b      	ldr	r3, [pc, #44]	; (801d6b0 <etharp_raw+0xec>)
 801d684:	f240 4263 	movw	r2, #1123	; 0x463
 801d688:	490d      	ldr	r1, [pc, #52]	; (801d6c0 <etharp_raw+0xfc>)
 801d68a:	480b      	ldr	r0, [pc, #44]	; (801d6b8 <etharp_raw+0xf4>)
 801d68c:	f003 f99c 	bl	80209c8 <iprintf>
 801d690:	e7b0      	b.n	801d5f4 <etharp_raw+0x30>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801d692:	4b07      	ldr	r3, [pc, #28]	; (801d6b0 <etharp_raw+0xec>)
 801d694:	f240 4257 	movw	r2, #1111	; 0x457
 801d698:	490a      	ldr	r1, [pc, #40]	; (801d6c4 <etharp_raw+0x100>)
 801d69a:	4807      	ldr	r0, [pc, #28]	; (801d6b8 <etharp_raw+0xf4>)
 801d69c:	f003 f994 	bl	80209c8 <iprintf>
 801d6a0:	e79c      	b.n	801d5dc <etharp_raw+0x18>
    ETHARP_STATS_INC(etharp.memerr);
 801d6a2:	4a06      	ldr	r2, [pc, #24]	; (801d6bc <etharp_raw+0xf8>)
    return ERR_MEM;
 801d6a4:	f04f 30ff 	mov.w	r0, #4294967295
    ETHARP_STATS_INC(etharp.memerr);
 801d6a8:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 801d6aa:	3301      	adds	r3, #1
 801d6ac:	8493      	strh	r3, [r2, #36]	; 0x24
    return ERR_MEM;
 801d6ae:	e7e5      	b.n	801d67c <etharp_raw+0xb8>
 801d6b0:	0803f490 	.word	0x0803f490
 801d6b4:	0803f44c 	.word	0x0803f44c
 801d6b8:	0802697c 	.word	0x0802697c
 801d6bc:	20036164 	.word	0x20036164
 801d6c0:	0803f418 	.word	0x0803f418
 801d6c4:	0802696c 	.word	0x0802696c

0801d6c8 <etharp_output_to_arp_index>:
{
 801d6c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801d6cc:	0055      	lsls	r5, r2, #1
 801d6ce:	4e2f      	ldr	r6, [pc, #188]	; (801d78c <etharp_output_to_arp_index+0xc4>)
{
 801d6d0:	b084      	sub	sp, #16
 801d6d2:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801d6d4:	eb05 0802 	add.w	r8, r5, r2
{
 801d6d8:	4607      	mov	r7, r0
 801d6da:	4689      	mov	r9, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801d6dc:	eb06 08c8 	add.w	r8, r6, r8, lsl #3
 801d6e0:	f898 3014 	ldrb.w	r3, [r8, #20]
 801d6e4:	2b01      	cmp	r3, #1
 801d6e6:	d934      	bls.n	801d752 <etharp_output_to_arp_index+0x8a>
 801d6e8:	eb04 0144 	add.w	r1, r4, r4, lsl #1
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801d6ec:	2b02      	cmp	r3, #2
 801d6ee:	f107 082e 	add.w	r8, r7, #46	; 0x2e
 801d6f2:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 801d6f6:	f101 0a0c 	add.w	sl, r1, #12
 801d6fa:	44b2      	add	sl, r6
 801d6fc:	d00b      	beq.n	801d716 <etharp_output_to_arp_index+0x4e>
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801d6fe:	f44f 6400 	mov.w	r4, #2048	; 0x800
 801d702:	4653      	mov	r3, sl
 801d704:	4642      	mov	r2, r8
 801d706:	4649      	mov	r1, r9
 801d708:	4638      	mov	r0, r7
 801d70a:	9400      	str	r4, [sp, #0]
 801d70c:	f001 fcda 	bl	801f0c4 <ethernet_output>
}
 801d710:	b004      	add	sp, #16
 801d712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801d716:	442c      	add	r4, r5
 801d718:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 801d71c:	8a63      	ldrh	r3, [r4, #18]
 801d71e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801d722:	d820      	bhi.n	801d766 <etharp_output_to_arp_index+0x9e>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801d724:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801d728:	d3e9      	bcc.n	801d6fe <etharp_output_to_arp_index+0x36>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801d72a:	3104      	adds	r1, #4
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d72c:	2201      	movs	r2, #1
 801d72e:	4b18      	ldr	r3, [pc, #96]	; (801d790 <etharp_output_to_arp_index+0xc8>)
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801d730:	1d38      	adds	r0, r7, #4
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801d732:	4431      	add	r1, r6
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d734:	9203      	str	r2, [sp, #12]
 801d736:	9301      	str	r3, [sp, #4]
 801d738:	4652      	mov	r2, sl
 801d73a:	9102      	str	r1, [sp, #8]
 801d73c:	4643      	mov	r3, r8
 801d73e:	9000      	str	r0, [sp, #0]
 801d740:	4641      	mov	r1, r8
 801d742:	4638      	mov	r0, r7
 801d744:	f7ff ff3e 	bl	801d5c4 <etharp_raw>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801d748:	2800      	cmp	r0, #0
 801d74a:	d1d8      	bne.n	801d6fe <etharp_output_to_arp_index+0x36>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801d74c:	2303      	movs	r3, #3
 801d74e:	7523      	strb	r3, [r4, #20]
 801d750:	e7d5      	b.n	801d6fe <etharp_output_to_arp_index+0x36>
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801d752:	4b10      	ldr	r3, [pc, #64]	; (801d794 <etharp_output_to_arp_index+0xcc>)
 801d754:	f240 22ef 	movw	r2, #751	; 0x2ef
 801d758:	490f      	ldr	r1, [pc, #60]	; (801d798 <etharp_output_to_arp_index+0xd0>)
 801d75a:	4810      	ldr	r0, [pc, #64]	; (801d79c <etharp_output_to_arp_index+0xd4>)
 801d75c:	f003 f934 	bl	80209c8 <iprintf>
 801d760:	f898 3014 	ldrb.w	r3, [r8, #20]
 801d764:	e7c0      	b.n	801d6e8 <etharp_output_to_arp_index+0x20>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801d766:	3104      	adds	r1, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d768:	2001      	movs	r0, #1
 801d76a:	4b09      	ldr	r3, [pc, #36]	; (801d790 <etharp_output_to_arp_index+0xc8>)
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801d76c:	1d3a      	adds	r2, r7, #4
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801d76e:	440e      	add	r6, r1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d770:	9003      	str	r0, [sp, #12]
 801d772:	9301      	str	r3, [sp, #4]
 801d774:	4641      	mov	r1, r8
 801d776:	9200      	str	r2, [sp, #0]
 801d778:	4643      	mov	r3, r8
 801d77a:	9602      	str	r6, [sp, #8]
 801d77c:	4638      	mov	r0, r7
 801d77e:	4a08      	ldr	r2, [pc, #32]	; (801d7a0 <etharp_output_to_arp_index+0xd8>)
 801d780:	f7ff ff20 	bl	801d5c4 <etharp_raw>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801d784:	2800      	cmp	r0, #0
 801d786:	d1ba      	bne.n	801d6fe <etharp_output_to_arp_index+0x36>
 801d788:	e7e0      	b.n	801d74c <etharp_output_to_arp_index+0x84>
 801d78a:	bf00      	nop
 801d78c:	2002243c 	.word	0x2002243c
 801d790:	0803f88c 	.word	0x0803f88c
 801d794:	0803f490 	.word	0x0803f490
 801d798:	0803f3bc 	.word	0x0803f3bc
 801d79c:	0802697c 	.word	0x0802697c
 801d7a0:	0803f818 	.word	0x0803f818

0801d7a4 <etharp_tmr>:
{
 801d7a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d7a8:	4c1f      	ldr	r4, [pc, #124]	; (801d828 <etharp_tmr+0x84>)
 801d7aa:	b084      	sub	sp, #16
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801d7ac:	2600      	movs	r6, #0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d7ae:	f8df 8080 	ldr.w	r8, [pc, #128]	; 801d830 <etharp_tmr+0x8c>
 801d7b2:	f504 7540 	add.w	r5, r4, #768	; 0x300
 801d7b6:	4f1d      	ldr	r7, [pc, #116]	; (801d82c <etharp_tmr+0x88>)
 801d7b8:	e00a      	b.n	801d7d0 <etharp_tmr+0x2c>
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801d7ba:	2901      	cmp	r1, #1
 801d7bc:	d020      	beq.n	801d800 <etharp_tmr+0x5c>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801d7be:	2903      	cmp	r1, #3
 801d7c0:	d02f      	beq.n	801d822 <etharp_tmr+0x7e>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801d7c2:	2904      	cmp	r1, #4
 801d7c4:	d101      	bne.n	801d7ca <etharp_tmr+0x26>
        arp_table[i].state = ETHARP_STATE_STABLE;
 801d7c6:	2302      	movs	r3, #2
 801d7c8:	7423      	strb	r3, [r4, #16]
 801d7ca:	3418      	adds	r4, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d7cc:	42ac      	cmp	r4, r5
 801d7ce:	d014      	beq.n	801d7fa <etharp_tmr+0x56>
    u8_t state = arp_table[i].state;
 801d7d0:	7c21      	ldrb	r1, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 801d7d2:	2900      	cmp	r1, #0
 801d7d4:	d0f9      	beq.n	801d7ca <etharp_tmr+0x26>
      arp_table[i].ctime++;
 801d7d6:	89e3      	ldrh	r3, [r4, #14]
 801d7d8:	3301      	adds	r3, #1
 801d7da:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801d7dc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 801d7e0:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801d7e2:	d3ea      	bcc.n	801d7ba <etharp_tmr+0x16>
  if (arp_table[i].q != NULL) {
 801d7e4:	f854 0c04 	ldr.w	r0, [r4, #-4]
 801d7e8:	b118      	cbz	r0, 801d7f2 <etharp_tmr+0x4e>
    free_etharp_q(arp_table[i].q);
 801d7ea:	f7ff fe0d 	bl	801d408 <free_etharp_q>
    arp_table[i].q = NULL;
 801d7ee:	f844 6c04 	str.w	r6, [r4, #-4]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801d7f2:	7426      	strb	r6, [r4, #16]
 801d7f4:	3418      	adds	r4, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d7f6:	42ac      	cmp	r4, r5
 801d7f8:	d1ea      	bne.n	801d7d0 <etharp_tmr+0x2c>
}
 801d7fa:	b004      	add	sp, #16
 801d7fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801d800:	2b04      	cmp	r3, #4
 801d802:	d8ef      	bhi.n	801d7e4 <etharp_tmr+0x40>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801d804:	6860      	ldr	r0, [r4, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d806:	463a      	mov	r2, r7
 801d808:	9103      	str	r1, [sp, #12]
 801d80a:	f100 032e 	add.w	r3, r0, #46	; 0x2e
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801d80e:	f100 0c04 	add.w	ip, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d812:	e9cd 8401 	strd	r8, r4, [sp, #4]
 801d816:	4619      	mov	r1, r3
 801d818:	f8cd c000 	str.w	ip, [sp]
 801d81c:	f7ff fed2 	bl	801d5c4 <etharp_raw>
 801d820:	e7d3      	b.n	801d7ca <etharp_tmr+0x26>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801d822:	2304      	movs	r3, #4
 801d824:	7423      	strb	r3, [r4, #16]
 801d826:	e7d0      	b.n	801d7ca <etharp_tmr+0x26>
 801d828:	20022440 	.word	0x20022440
 801d82c:	0803f818 	.word	0x0803f818
 801d830:	0803f88c 	.word	0x0803f88c

0801d834 <etharp_cleanup_netif>:
{
 801d834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d836:	4c0d      	ldr	r4, [pc, #52]	; (801d86c <etharp_cleanup_netif+0x38>)
 801d838:	4606      	mov	r6, r0
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801d83a:	2700      	movs	r7, #0
 801d83c:	f504 7540 	add.w	r5, r4, #768	; 0x300
 801d840:	e002      	b.n	801d848 <etharp_cleanup_netif+0x14>
 801d842:	3418      	adds	r4, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d844:	42ac      	cmp	r4, r5
 801d846:	d00f      	beq.n	801d868 <etharp_cleanup_netif+0x34>
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801d848:	7d23      	ldrb	r3, [r4, #20]
 801d84a:	2b00      	cmp	r3, #0
 801d84c:	d0f9      	beq.n	801d842 <etharp_cleanup_netif+0xe>
 801d84e:	68a3      	ldr	r3, [r4, #8]
 801d850:	42b3      	cmp	r3, r6
 801d852:	d1f6      	bne.n	801d842 <etharp_cleanup_netif+0xe>
  if (arp_table[i].q != NULL) {
 801d854:	6823      	ldr	r3, [r4, #0]
    free_etharp_q(arp_table[i].q);
 801d856:	4618      	mov	r0, r3
  if (arp_table[i].q != NULL) {
 801d858:	b113      	cbz	r3, 801d860 <etharp_cleanup_netif+0x2c>
    free_etharp_q(arp_table[i].q);
 801d85a:	f7ff fdd5 	bl	801d408 <free_etharp_q>
    arp_table[i].q = NULL;
 801d85e:	6027      	str	r7, [r4, #0]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801d860:	7527      	strb	r7, [r4, #20]
 801d862:	3418      	adds	r4, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d864:	42ac      	cmp	r4, r5
 801d866:	d1ef      	bne.n	801d848 <etharp_cleanup_netif+0x14>
}
 801d868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d86a:	bf00      	nop
 801d86c:	2002243c 	.word	0x2002243c

0801d870 <etharp_input>:
{
 801d870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d874:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801d876:	2900      	cmp	r1, #0
 801d878:	f000 8097 	beq.w	801d9aa <etharp_input+0x13a>
  hdr = (struct etharp_hdr *)p->payload;
 801d87c:	6845      	ldr	r5, [r0, #4]
 801d87e:	4604      	mov	r4, r0
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801d880:	882b      	ldrh	r3, [r5, #0]
 801d882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d886:	d102      	bne.n	801d88e <etharp_input+0x1e>
 801d888:	792b      	ldrb	r3, [r5, #4]
 801d88a:	2b06      	cmp	r3, #6
 801d88c:	d00c      	beq.n	801d8a8 <etharp_input+0x38>
    ETHARP_STATS_INC(etharp.proterr);
 801d88e:	4b5c      	ldr	r3, [pc, #368]	; (801da00 <etharp_input+0x190>)
    pbuf_free(p);
 801d890:	4620      	mov	r0, r4
    ETHARP_STATS_INC(etharp.proterr);
 801d892:	8d19      	ldrh	r1, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 801d894:	8bda      	ldrh	r2, [r3, #30]
    ETHARP_STATS_INC(etharp.proterr);
 801d896:	3101      	adds	r1, #1
    ETHARP_STATS_INC(etharp.drop);
 801d898:	3201      	adds	r2, #1
    ETHARP_STATS_INC(etharp.proterr);
 801d89a:	8519      	strh	r1, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 801d89c:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
 801d89e:	f7f8 ff3b 	bl	8016718 <pbuf_free>
}
 801d8a2:	b009      	add	sp, #36	; 0x24
 801d8a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801d8a8:	796b      	ldrb	r3, [r5, #5]
 801d8aa:	2b04      	cmp	r3, #4
 801d8ac:	d1ef      	bne.n	801d88e <etharp_input+0x1e>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801d8ae:	886b      	ldrh	r3, [r5, #2]
 801d8b0:	2b08      	cmp	r3, #8
 801d8b2:	d1ec      	bne.n	801d88e <etharp_input+0x1e>
  ETHARP_STATS_INC(etharp.recv);
 801d8b4:	f8df a148 	ldr.w	sl, [pc, #328]	; 801da00 <etharp_input+0x190>
 801d8b8:	460e      	mov	r6, r1
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801d8ba:	684a      	ldr	r2, [r1, #4]
 801d8bc:	f105 0908 	add.w	r9, r5, #8
  ETHARP_STATS_INC(etharp.recv);
 801d8c0:	f8ba 301a 	ldrh.w	r3, [sl, #26]
 801d8c4:	3301      	adds	r3, #1
 801d8c6:	f8aa 301a 	strh.w	r3, [sl, #26]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801d8ca:	f8d5 000e 	ldr.w	r0, [r5, #14]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801d8ce:	69ab      	ldr	r3, [r5, #24]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801d8d0:	9007      	str	r0, [sp, #28]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801d8d2:	2a00      	cmp	r2, #0
 801d8d4:	d073      	beq.n	801d9be <etharp_input+0x14e>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801d8d6:	429a      	cmp	r2, r3
 801d8d8:	f000 808d 	beq.w	801d9f6 <etharp_input+0x186>
    for_us = 0;
 801d8dc:	2300      	movs	r3, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801d8de:	2702      	movs	r7, #2
    for_us = 0;
 801d8e0:	9305      	str	r3, [sp, #20]
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801d8e2:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 801d8e6:	2b06      	cmp	r3, #6
 801d8e8:	d007      	beq.n	801d8fa <etharp_input+0x8a>
 801d8ea:	4b46      	ldr	r3, [pc, #280]	; (801da04 <etharp_input+0x194>)
 801d8ec:	f240 12a9 	movw	r2, #425	; 0x1a9
 801d8f0:	4945      	ldr	r1, [pc, #276]	; (801da08 <etharp_input+0x198>)
 801d8f2:	4846      	ldr	r0, [pc, #280]	; (801da0c <etharp_input+0x19c>)
 801d8f4:	f003 f868 	bl	80209c8 <iprintf>
 801d8f8:	9807      	ldr	r0, [sp, #28]
  if (ip4_addr_isany(ipaddr) ||
 801d8fa:	2800      	cmp	r0, #0
 801d8fc:	d046      	beq.n	801d98c <etharp_input+0x11c>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801d8fe:	4631      	mov	r1, r6
 801d900:	f000 fe06 	bl	801e510 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 801d904:	4683      	mov	fp, r0
 801d906:	2800      	cmp	r0, #0
 801d908:	d140      	bne.n	801d98c <etharp_input+0x11c>
      ip4_addr_ismulticast(ipaddr)) {
 801d90a:	9b07      	ldr	r3, [sp, #28]
 801d90c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801d910:	2be0      	cmp	r3, #224	; 0xe0
 801d912:	d03b      	beq.n	801d98c <etharp_input+0x11c>
  i = etharp_find_entry(ipaddr, flags, netif);
 801d914:	4639      	mov	r1, r7
 801d916:	4632      	mov	r2, r6
 801d918:	a807      	add	r0, sp, #28
 801d91a:	f7ff fda3 	bl	801d464 <etharp_find_entry>
  if (i < 0) {
 801d91e:	2800      	cmp	r0, #0
 801d920:	db34      	blt.n	801d98c <etharp_input+0x11c>
    arp_table[i].state = ETHARP_STATE_STABLE;
 801d922:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 801d926:	493a      	ldr	r1, [pc, #232]	; (801da10 <etharp_input+0x1a0>)
 801d928:	2702      	movs	r7, #2
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801d92a:	f04f 0c18 	mov.w	ip, #24
    arp_table[i].state = ETHARP_STATE_STABLE;
 801d92e:	00d2      	lsls	r2, r2, #3
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801d930:	230c      	movs	r3, #12
 801d932:	fb10 330c 	smlabb	r3, r0, ip, r3
    arp_table[i].state = ETHARP_STATE_STABLE;
 801d936:	eb01 0802 	add.w	r8, r1, r2
 801d93a:	f888 7014 	strb.w	r7, [r8, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801d93e:	18cf      	adds	r7, r1, r3
  arp_table[i].netif = netif;
 801d940:	f8c8 6008 	str.w	r6, [r8, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801d944:	f8d9 0000 	ldr.w	r0, [r9]
 801d948:	50c8      	str	r0, [r1, r3]
 801d94a:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 801d94e:	80bb      	strh	r3, [r7, #4]
  while (arp_table[i].q != NULL) {
 801d950:	588b      	ldr	r3, [r1, r2]
  arp_table[i].ctime = 0;
 801d952:	f8a8 b012 	strh.w	fp, [r8, #18]
  while (arp_table[i].q != NULL) {
 801d956:	b1cb      	cbz	r3, 801d98c <etharp_input+0x11c>
 801d958:	f106 0b2e 	add.w	fp, r6, #46	; 0x2e
    arp_table[i].q = q->next;
 801d95c:	681a      	ldr	r2, [r3, #0]
    memp_free(MEMP_ARP_QUEUE, q);
 801d95e:	4619      	mov	r1, r3
    p = q->p;
 801d960:	685f      	ldr	r7, [r3, #4]
    memp_free(MEMP_ARP_QUEUE, q);
 801d962:	200b      	movs	r0, #11
    arp_table[i].q = q->next;
 801d964:	f8c8 2000 	str.w	r2, [r8]
    memp_free(MEMP_ARP_QUEUE, q);
 801d968:	f7f8 fbfc 	bl	8016164 <memp_free>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801d96c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801d970:	464b      	mov	r3, r9
 801d972:	4639      	mov	r1, r7
 801d974:	465a      	mov	r2, fp
 801d976:	9000      	str	r0, [sp, #0]
 801d978:	4630      	mov	r0, r6
 801d97a:	f001 fba3 	bl	801f0c4 <ethernet_output>
    pbuf_free(p);
 801d97e:	4638      	mov	r0, r7
 801d980:	f7f8 feca 	bl	8016718 <pbuf_free>
  while (arp_table[i].q != NULL) {
 801d984:	f8d8 3000 	ldr.w	r3, [r8]
 801d988:	2b00      	cmp	r3, #0
 801d98a:	d1e7      	bne.n	801d95c <etharp_input+0xec>
  switch (hdr->opcode) {
 801d98c:	88eb      	ldrh	r3, [r5, #6]
 801d98e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d992:	d01d      	beq.n	801d9d0 <etharp_input+0x160>
 801d994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d998:	d114      	bne.n	801d9c4 <etharp_input+0x154>
      dhcp_arp_reply(netif, &sipaddr);
 801d99a:	4630      	mov	r0, r6
 801d99c:	a907      	add	r1, sp, #28
 801d99e:	f7ff fa69 	bl	801ce74 <dhcp_arp_reply>
  pbuf_free(p);
 801d9a2:	4620      	mov	r0, r4
 801d9a4:	f7f8 feb8 	bl	8016718 <pbuf_free>
 801d9a8:	e77b      	b.n	801d8a2 <etharp_input+0x32>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801d9aa:	4b16      	ldr	r3, [pc, #88]	; (801da04 <etharp_input+0x194>)
 801d9ac:	f240 228a 	movw	r2, #650	; 0x28a
 801d9b0:	4918      	ldr	r1, [pc, #96]	; (801da14 <etharp_input+0x1a4>)
 801d9b2:	4816      	ldr	r0, [pc, #88]	; (801da0c <etharp_input+0x19c>)
 801d9b4:	f003 f808 	bl	80209c8 <iprintf>
}
 801d9b8:	b009      	add	sp, #36	; 0x24
 801d9ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for_us = 0;
 801d9be:	9205      	str	r2, [sp, #20]
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801d9c0:	2702      	movs	r7, #2
 801d9c2:	e78e      	b.n	801d8e2 <etharp_input+0x72>
      ETHARP_STATS_INC(etharp.err);
 801d9c4:	f8ba 302c 	ldrh.w	r3, [sl, #44]	; 0x2c
 801d9c8:	3301      	adds	r3, #1
 801d9ca:	f8aa 302c 	strh.w	r3, [sl, #44]	; 0x2c
      break;
 801d9ce:	e7e8      	b.n	801d9a2 <etharp_input+0x132>
      if (for_us) {
 801d9d0:	9b05      	ldr	r3, [sp, #20]
 801d9d2:	2b00      	cmp	r3, #0
 801d9d4:	d0e5      	beq.n	801d9a2 <etharp_input+0x132>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801d9d6:	f106 032e 	add.w	r3, r6, #46	; 0x2e
        etharp_raw(netif,
 801d9da:	2002      	movs	r0, #2
 801d9dc:	af07      	add	r7, sp, #28
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801d9de:	1d35      	adds	r5, r6, #4
        etharp_raw(netif,
 801d9e0:	9003      	str	r0, [sp, #12]
 801d9e2:	464a      	mov	r2, r9
 801d9e4:	f8cd 9004 	str.w	r9, [sp, #4]
 801d9e8:	4619      	mov	r1, r3
 801d9ea:	4630      	mov	r0, r6
 801d9ec:	9702      	str	r7, [sp, #8]
 801d9ee:	9500      	str	r5, [sp, #0]
 801d9f0:	f7ff fde8 	bl	801d5c4 <etharp_raw>
 801d9f4:	e7d5      	b.n	801d9a2 <etharp_input+0x132>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801d9f6:	2301      	movs	r3, #1
 801d9f8:	9305      	str	r3, [sp, #20]
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801d9fa:	461f      	mov	r7, r3
 801d9fc:	e771      	b.n	801d8e2 <etharp_input+0x72>
 801d9fe:	bf00      	nop
 801da00:	20036164 	.word	0x20036164
 801da04:	0803f490 	.word	0x0803f490
 801da08:	0803f398 	.word	0x0803f398
 801da0c:	0802697c 	.word	0x0802697c
 801da10:	2002243c 	.word	0x2002243c
 801da14:	0802696c 	.word	0x0802696c

0801da18 <etharp_query>:
{
 801da18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da1c:	460f      	mov	r7, r1
 801da1e:	b085      	sub	sp, #20
 801da20:	4604      	mov	r4, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801da22:	4601      	mov	r1, r0
 801da24:	6838      	ldr	r0, [r7, #0]
{
 801da26:	4616      	mov	r6, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801da28:	f000 fd72 	bl	801e510 <ip4_addr_isbroadcast_u32>
 801da2c:	2800      	cmp	r0, #0
 801da2e:	f040 80b3 	bne.w	801db98 <etharp_query+0x180>
      ip4_addr_ismulticast(ipaddr) ||
 801da32:	683b      	ldr	r3, [r7, #0]
 801da34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
      ip4_addr_isany(ipaddr)) {
 801da38:	2ae0      	cmp	r2, #224	; 0xe0
 801da3a:	f000 80ad 	beq.w	801db98 <etharp_query+0x180>
 801da3e:	2b00      	cmp	r3, #0
 801da40:	f000 80aa 	beq.w	801db98 <etharp_query+0x180>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801da44:	4622      	mov	r2, r4
 801da46:	2101      	movs	r1, #1
 801da48:	4638      	mov	r0, r7
 801da4a:	f7ff fd0b 	bl	801d464 <etharp_find_entry>
  if (i_err < 0) {
 801da4e:	1e05      	subs	r5, r0, #0
 801da50:	db4c      	blt.n	801daec <etharp_query+0xd4>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801da52:	2d7e      	cmp	r5, #126	; 0x7e
 801da54:	dc53      	bgt.n	801dafe <etharp_query+0xe6>
  i = (netif_addr_idx_t)i_err;
 801da56:	b2ed      	uxtb	r5, r5
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801da58:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 801dc20 <etharp_query+0x208>
 801da5c:	ea4f 0945 	mov.w	r9, r5, lsl #1
 801da60:	eb09 0205 	add.w	r2, r9, r5
 801da64:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
 801da68:	7d13      	ldrb	r3, [r2, #20]
 801da6a:	b18b      	cbz	r3, 801da90 <etharp_query+0x78>
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801da6c:	f104 0a2e 	add.w	sl, r4, #46	; 0x2e
  if (is_new_entry || (q == NULL)) {
 801da70:	2e00      	cmp	r6, #0
 801da72:	f000 80a5 	beq.w	801dbc0 <etharp_query+0x1a8>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801da76:	eb09 0305 	add.w	r3, r9, r5
  err_t result = ERR_MEM;
 801da7a:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801da7e:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801da82:	7d1b      	ldrb	r3, [r3, #20]
 801da84:	2b01      	cmp	r3, #1
 801da86:	d820      	bhi.n	801daca <etharp_query+0xb2>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801da88:	d041      	beq.n	801db0e <etharp_query+0xf6>
}
 801da8a:	b005      	add	sp, #20
 801da8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    arp_table[i].state = ETHARP_STATE_PENDING;
 801da90:	f04f 0c01 	mov.w	ip, #1
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801da94:	f104 0a2e 	add.w	sl, r4, #46	; 0x2e
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801da98:	495a      	ldr	r1, [pc, #360]	; (801dc04 <etharp_query+0x1ec>)
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801da9a:	1d20      	adds	r0, r4, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801da9c:	9702      	str	r7, [sp, #8]
 801da9e:	4653      	mov	r3, sl
 801daa0:	9101      	str	r1, [sp, #4]
 801daa2:	4651      	mov	r1, sl
 801daa4:	9000      	str	r0, [sp, #0]
 801daa6:	4620      	mov	r0, r4
 801daa8:	f8cd c00c 	str.w	ip, [sp, #12]
    arp_table[i].netif = netif;
 801daac:	6094      	str	r4, [r2, #8]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801daae:	f882 c014 	strb.w	ip, [r2, #20]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801dab2:	4a55      	ldr	r2, [pc, #340]	; (801dc08 <etharp_query+0x1f0>)
 801dab4:	f7ff fd86 	bl	801d5c4 <etharp_raw>
    if (q == NULL) {
 801dab8:	2e00      	cmp	r6, #0
 801daba:	d0e6      	beq.n	801da8a <etharp_query+0x72>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801dabc:	eb09 0305 	add.w	r3, r9, r5
 801dac0:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801dac4:	7d1b      	ldrb	r3, [r3, #20]
 801dac6:	2b01      	cmp	r3, #1
 801dac8:	d9de      	bls.n	801da88 <etharp_query+0x70>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801daca:	2318      	movs	r3, #24
 801dacc:	4631      	mov	r1, r6
 801dace:	f44f 6700 	mov.w	r7, #2048	; 0x800
    ETHARP_SET_ADDRHINT(netif, i);
 801dad2:	4e4e      	ldr	r6, [pc, #312]	; (801dc0c <etharp_query+0x1f4>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801dad4:	fb03 8305 	mla	r3, r3, r5, r8
 801dad8:	4652      	mov	r2, sl
 801dada:	9700      	str	r7, [sp, #0]
 801dadc:	4620      	mov	r0, r4
 801dade:	330c      	adds	r3, #12
    ETHARP_SET_ADDRHINT(netif, i);
 801dae0:	7035      	strb	r5, [r6, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801dae2:	f001 faef 	bl	801f0c4 <ethernet_output>
}
 801dae6:	b005      	add	sp, #20
 801dae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (q) {
 801daec:	b11e      	cbz	r6, 801daf6 <etharp_query+0xde>
      ETHARP_STATS_INC(etharp.memerr);
 801daee:	4a48      	ldr	r2, [pc, #288]	; (801dc10 <etharp_query+0x1f8>)
 801daf0:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 801daf2:	3301      	adds	r3, #1
 801daf4:	8493      	strh	r3, [r2, #36]	; 0x24
    return (err_t)i_err;
 801daf6:	b268      	sxtb	r0, r5
}
 801daf8:	b005      	add	sp, #20
 801dafa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801dafe:	4b45      	ldr	r3, [pc, #276]	; (801dc14 <etharp_query+0x1fc>)
 801db00:	f240 32c1 	movw	r2, #961	; 0x3c1
 801db04:	4944      	ldr	r1, [pc, #272]	; (801dc18 <etharp_query+0x200>)
 801db06:	4845      	ldr	r0, [pc, #276]	; (801dc1c <etharp_query+0x204>)
 801db08:	f002 ff5e 	bl	80209c8 <iprintf>
 801db0c:	e7a3      	b.n	801da56 <etharp_query+0x3e>
 801db0e:	4634      	mov	r4, r6
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801db10:	f8df b100 	ldr.w	fp, [pc, #256]	; 801dc14 <etharp_query+0x1fc>
 801db14:	f8df a10c 	ldr.w	sl, [pc, #268]	; 801dc24 <etharp_query+0x20c>
 801db18:	e005      	b.n	801db26 <etharp_query+0x10e>
      if (PBUF_NEEDS_COPY(p)) {
 801db1a:	7b23      	ldrb	r3, [r4, #12]
 801db1c:	065a      	lsls	r2, r3, #25
 801db1e:	d413      	bmi.n	801db48 <etharp_query+0x130>
      p = p->next;
 801db20:	6824      	ldr	r4, [r4, #0]
    while (p) {
 801db22:	2c00      	cmp	r4, #0
 801db24:	d03b      	beq.n	801db9e <etharp_query+0x186>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801db26:	8962      	ldrh	r2, [r4, #10]
 801db28:	8923      	ldrh	r3, [r4, #8]
 801db2a:	429a      	cmp	r2, r3
 801db2c:	d1f5      	bne.n	801db1a <etharp_query+0x102>
 801db2e:	6827      	ldr	r7, [r4, #0]
 801db30:	465b      	mov	r3, fp
 801db32:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801db36:	4651      	mov	r1, sl
 801db38:	4838      	ldr	r0, [pc, #224]	; (801dc1c <etharp_query+0x204>)
 801db3a:	b117      	cbz	r7, 801db42 <etharp_query+0x12a>
 801db3c:	f002 ff44 	bl	80209c8 <iprintf>
 801db40:	e7eb      	b.n	801db1a <etharp_query+0x102>
      if (PBUF_NEEDS_COPY(p)) {
 801db42:	7b23      	ldrb	r3, [r4, #12]
 801db44:	065b      	lsls	r3, r3, #25
 801db46:	d52a      	bpl.n	801db9e <etharp_query+0x186>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801db48:	4632      	mov	r2, r6
 801db4a:	f44f 7120 	mov.w	r1, #640	; 0x280
 801db4e:	200e      	movs	r0, #14
 801db50:	f7f9 f964 	bl	8016e1c <pbuf_clone>
    if (p != NULL) {
 801db54:	4606      	mov	r6, r0
 801db56:	2800      	cmp	r0, #0
 801db58:	d047      	beq.n	801dbea <etharp_query+0x1d2>
      new_entry = (struct etharp_q_entry *)memp_malloc(MEMP_ARP_QUEUE);
 801db5a:	f240 4206 	movw	r2, #1030	; 0x406
 801db5e:	492d      	ldr	r1, [pc, #180]	; (801dc14 <etharp_query+0x1fc>)
 801db60:	200b      	movs	r0, #11
 801db62:	f7f8 fadb 	bl	801611c <memp_malloc_fn>
      if (new_entry != NULL) {
 801db66:	2800      	cmp	r0, #0
 801db68:	d046      	beq.n	801dbf8 <etharp_query+0x1e0>
        if (arp_table[i].q != NULL) {
 801db6a:	eb09 0305 	add.w	r3, r9, r5
        new_entry->next = 0;
 801db6e:	2200      	movs	r2, #0
        new_entry->p = p;
 801db70:	6046      	str	r6, [r0, #4]
        if (arp_table[i].q != NULL) {
 801db72:	00db      	lsls	r3, r3, #3
        new_entry->next = 0;
 801db74:	6002      	str	r2, [r0, #0]
        if (arp_table[i].q != NULL) {
 801db76:	f858 6003 	ldr.w	r6, [r8, r3]
 801db7a:	b37e      	cbz	r6, 801dbdc <etharp_query+0x1c4>
          while (r->next != NULL) {
 801db7c:	6833      	ldr	r3, [r6, #0]
 801db7e:	b38b      	cbz	r3, 801dbe4 <etharp_query+0x1cc>
          qlen++;
 801db80:	2201      	movs	r2, #1
 801db82:	e000      	b.n	801db86 <etharp_query+0x16e>
 801db84:	4623      	mov	r3, r4
          while (r->next != NULL) {
 801db86:	681c      	ldr	r4, [r3, #0]
            qlen++;
 801db88:	3201      	adds	r2, #1
          while (r->next != NULL) {
 801db8a:	2c00      	cmp	r4, #0
 801db8c:	d1fa      	bne.n	801db84 <etharp_query+0x16c>
        if (qlen >= ARP_QUEUE_LEN) {
 801db8e:	2a1f      	cmp	r2, #31
          r->next = new_entry;
 801db90:	6018      	str	r0, [r3, #0]
        if (qlen >= ARP_QUEUE_LEN) {
 801db92:	d808      	bhi.n	801dba6 <etharp_query+0x18e>
        result = ERR_OK;
 801db94:	4620      	mov	r0, r4
 801db96:	e778      	b.n	801da8a <etharp_query+0x72>
    return ERR_ARG;
 801db98:	f06f 000f 	mvn.w	r0, #15
 801db9c:	e775      	b.n	801da8a <etharp_query+0x72>
      pbuf_ref(p);
 801db9e:	4630      	mov	r0, r6
 801dba0:	f7f8 ff2e 	bl	8016a00 <pbuf_ref>
 801dba4:	e7d9      	b.n	801db5a <etharp_query+0x142>
          pbuf_free(old->p);
 801dba6:	e9d6 3000 	ldrd	r3, r0, [r6]
          arp_table[i].q = arp_table[i].q->next;
 801dbaa:	444d      	add	r5, r9
 801dbac:	f848 3035 	str.w	r3, [r8, r5, lsl #3]
          pbuf_free(old->p);
 801dbb0:	f7f8 fdb2 	bl	8016718 <pbuf_free>
          memp_free(MEMP_ARP_QUEUE, old);
 801dbb4:	200b      	movs	r0, #11
 801dbb6:	4631      	mov	r1, r6
 801dbb8:	f7f8 fad4 	bl	8016164 <memp_free>
        result = ERR_OK;
 801dbbc:	4620      	mov	r0, r4
 801dbbe:	e764      	b.n	801da8a <etharp_query+0x72>
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801dbc0:	1d22      	adds	r2, r4, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801dbc2:	2101      	movs	r1, #1
 801dbc4:	4b0f      	ldr	r3, [pc, #60]	; (801dc04 <etharp_query+0x1ec>)
 801dbc6:	4620      	mov	r0, r4
 801dbc8:	9200      	str	r2, [sp, #0]
 801dbca:	9301      	str	r3, [sp, #4]
 801dbcc:	4653      	mov	r3, sl
 801dbce:	4a0e      	ldr	r2, [pc, #56]	; (801dc08 <etharp_query+0x1f0>)
 801dbd0:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801dbd4:	4651      	mov	r1, sl
 801dbd6:	f7ff fcf5 	bl	801d5c4 <etharp_raw>
 801dbda:	e756      	b.n	801da8a <etharp_query+0x72>
          arp_table[i].q = new_entry;
 801dbdc:	f848 0003 	str.w	r0, [r8, r3]
        result = ERR_OK;
 801dbe0:	4630      	mov	r0, r6
 801dbe2:	e752      	b.n	801da8a <etharp_query+0x72>
          r->next = new_entry;
 801dbe4:	6030      	str	r0, [r6, #0]
        result = ERR_OK;
 801dbe6:	4618      	mov	r0, r3
 801dbe8:	e74f      	b.n	801da8a <etharp_query+0x72>
      ETHARP_STATS_INC(etharp.memerr);
 801dbea:	4a09      	ldr	r2, [pc, #36]	; (801dc10 <etharp_query+0x1f8>)
      result = ERR_MEM;
 801dbec:	f04f 30ff 	mov.w	r0, #4294967295
      ETHARP_STATS_INC(etharp.memerr);
 801dbf0:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 801dbf2:	3301      	adds	r3, #1
 801dbf4:	8493      	strh	r3, [r2, #36]	; 0x24
 801dbf6:	e748      	b.n	801da8a <etharp_query+0x72>
        pbuf_free(p);
 801dbf8:	4630      	mov	r0, r6
 801dbfa:	f7f8 fd8d 	bl	8016718 <pbuf_free>
        result = ERR_MEM;
 801dbfe:	f04f 30ff 	mov.w	r0, #4294967295
 801dc02:	e742      	b.n	801da8a <etharp_query+0x72>
 801dc04:	0803f88c 	.word	0x0803f88c
 801dc08:	0803f818 	.word	0x0803f818
 801dc0c:	2002273c 	.word	0x2002273c
 801dc10:	20036164 	.word	0x20036164
 801dc14:	0803f490 	.word	0x0803f490
 801dc18:	0803f3ec 	.word	0x0803f3ec
 801dc1c:	0802697c 	.word	0x0802697c
 801dc20:	2002243c 	.word	0x2002243c
 801dc24:	0803f3fc 	.word	0x0803f3fc

0801dc28 <etharp_output>:
{
 801dc28:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dc2a:	460f      	mov	r7, r1
 801dc2c:	b085      	sub	sp, #20
 801dc2e:	4616      	mov	r6, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801dc30:	4604      	mov	r4, r0
 801dc32:	2800      	cmp	r0, #0
 801dc34:	d07f      	beq.n	801dd36 <etharp_output+0x10e>
  LWIP_ASSERT("q != NULL", q != NULL);
 801dc36:	2f00      	cmp	r7, #0
 801dc38:	d06c      	beq.n	801dd14 <etharp_output+0xec>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801dc3a:	2e00      	cmp	r6, #0
 801dc3c:	d073      	beq.n	801dd26 <etharp_output+0xfe>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801dc3e:	4621      	mov	r1, r4
 801dc40:	6830      	ldr	r0, [r6, #0]
 801dc42:	f000 fc65 	bl	801e510 <ip4_addr_isbroadcast_u32>
 801dc46:	2800      	cmp	r0, #0
 801dc48:	d15b      	bne.n	801dd02 <etharp_output+0xda>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801dc4a:	6833      	ldr	r3, [r6, #0]
 801dc4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 801dc50:	2ae0      	cmp	r2, #224	; 0xe0
 801dc52:	d039      	beq.n	801dcc8 <etharp_output+0xa0>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801dc54:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 801dc58:	405a      	eors	r2, r3
 801dc5a:	420a      	tst	r2, r1
 801dc5c:	d009      	beq.n	801dc72 <etharp_output+0x4a>
        !ip4_addr_islinklocal(ipaddr)) {
 801dc5e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801dc60:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801dc64:	4293      	cmp	r3, r2
 801dc66:	d004      	beq.n	801dc72 <etharp_output+0x4a>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801dc68:	68e3      	ldr	r3, [r4, #12]
 801dc6a:	2b00      	cmp	r3, #0
 801dc6c:	d07b      	beq.n	801dd66 <etharp_output+0x13e>
            dst_addr = netif_ip4_gw(netif);
 801dc6e:	f104 060c 	add.w	r6, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801dc72:	f8df c118 	ldr.w	ip, [pc, #280]	; 801dd8c <etharp_output+0x164>
 801dc76:	4b3d      	ldr	r3, [pc, #244]	; (801dd6c <etharp_output+0x144>)
 801dc78:	f89c 2000 	ldrb.w	r2, [ip]
 801dc7c:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801dc80:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801dc84:	7d19      	ldrb	r1, [r3, #20]
 801dc86:	2901      	cmp	r1, #1
 801dc88:	d902      	bls.n	801dc90 <etharp_output+0x68>
 801dc8a:	6899      	ldr	r1, [r3, #8]
 801dc8c:	42a1      	cmp	r1, r4
 801dc8e:	d05d      	beq.n	801dd4c <etharp_output+0x124>
 801dc90:	4a36      	ldr	r2, [pc, #216]	; (801dd6c <etharp_output+0x144>)
{
 801dc92:	2300      	movs	r3, #0
 801dc94:	e003      	b.n	801dc9e <etharp_output+0x76>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801dc96:	2b20      	cmp	r3, #32
 801dc98:	f102 0218 	add.w	r2, r2, #24
 801dc9c:	d033      	beq.n	801dd06 <etharp_output+0xde>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801dc9e:	7d11      	ldrb	r1, [r2, #20]
 801dca0:	b2dd      	uxtb	r5, r3
 801dca2:	3301      	adds	r3, #1
 801dca4:	2901      	cmp	r1, #1
 801dca6:	d9f6      	bls.n	801dc96 <etharp_output+0x6e>
          (arp_table[i].netif == netif) &&
 801dca8:	6891      	ldr	r1, [r2, #8]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801dcaa:	42a1      	cmp	r1, r4
 801dcac:	d1f3      	bne.n	801dc96 <etharp_output+0x6e>
          (arp_table[i].netif == netif) &&
 801dcae:	6830      	ldr	r0, [r6, #0]
 801dcb0:	6851      	ldr	r1, [r2, #4]
 801dcb2:	4288      	cmp	r0, r1
 801dcb4:	d1ef      	bne.n	801dc96 <etharp_output+0x6e>
        return etharp_output_to_arp_index(netif, q, i);
 801dcb6:	4639      	mov	r1, r7
 801dcb8:	462a      	mov	r2, r5
 801dcba:	4620      	mov	r0, r4
        ETHARP_SET_ADDRHINT(netif, i);
 801dcbc:	f88c 5000 	strb.w	r5, [ip]
        return etharp_output_to_arp_index(netif, q, i);
 801dcc0:	f7ff fd02 	bl	801d6c8 <etharp_output_to_arp_index>
}
 801dcc4:	b005      	add	sp, #20
 801dcc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801dcc8:	7873      	ldrb	r3, [r6, #1]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801dcca:	2501      	movs	r5, #1
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801dccc:	205e      	movs	r0, #94	; 0x5e
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801dcce:	78b1      	ldrb	r1, [r6, #2]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801dcd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801dcd4:	78f2      	ldrb	r2, [r6, #3]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801dcd6:	f8ad 5008 	strh.w	r5, [sp, #8]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801dcda:	f88d 300b 	strb.w	r3, [sp, #11]
    dest = &mcastaddr;
 801dcde:	ab02      	add	r3, sp, #8
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801dce0:	f88d 000a 	strb.w	r0, [sp, #10]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801dce4:	f88d 100c 	strb.w	r1, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801dce8:	f88d 200d 	strb.w	r2, [sp, #13]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801dcec:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801dcf0:	4639      	mov	r1, r7
 801dcf2:	f104 022e 	add.w	r2, r4, #46	; 0x2e
 801dcf6:	9000      	str	r0, [sp, #0]
 801dcf8:	4620      	mov	r0, r4
 801dcfa:	f001 f9e3 	bl	801f0c4 <ethernet_output>
}
 801dcfe:	b005      	add	sp, #20
 801dd00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dest = (const struct eth_addr *)&ethbroadcast;
 801dd02:	4b1b      	ldr	r3, [pc, #108]	; (801dd70 <etharp_output+0x148>)
 801dd04:	e7f2      	b.n	801dcec <etharp_output+0xc4>
    return etharp_query(netif, dst_addr, q);
 801dd06:	463a      	mov	r2, r7
 801dd08:	4631      	mov	r1, r6
 801dd0a:	4620      	mov	r0, r4
 801dd0c:	f7ff fe84 	bl	801da18 <etharp_query>
}
 801dd10:	b005      	add	sp, #20
 801dd12:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("q != NULL", q != NULL);
 801dd14:	4b17      	ldr	r3, [pc, #92]	; (801dd74 <etharp_output+0x14c>)
 801dd16:	f240 321f 	movw	r2, #799	; 0x31f
 801dd1a:	4917      	ldr	r1, [pc, #92]	; (801dd78 <etharp_output+0x150>)
 801dd1c:	4817      	ldr	r0, [pc, #92]	; (801dd7c <etharp_output+0x154>)
 801dd1e:	f002 fe53 	bl	80209c8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801dd22:	2e00      	cmp	r6, #0
 801dd24:	d18b      	bne.n	801dc3e <etharp_output+0x16>
 801dd26:	4b13      	ldr	r3, [pc, #76]	; (801dd74 <etharp_output+0x14c>)
 801dd28:	f44f 7248 	mov.w	r2, #800	; 0x320
 801dd2c:	4914      	ldr	r1, [pc, #80]	; (801dd80 <etharp_output+0x158>)
 801dd2e:	4813      	ldr	r0, [pc, #76]	; (801dd7c <etharp_output+0x154>)
 801dd30:	f002 fe4a 	bl	80209c8 <iprintf>
 801dd34:	e783      	b.n	801dc3e <etharp_output+0x16>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801dd36:	4b0f      	ldr	r3, [pc, #60]	; (801dd74 <etharp_output+0x14c>)
 801dd38:	f240 321e 	movw	r2, #798	; 0x31e
 801dd3c:	4911      	ldr	r1, [pc, #68]	; (801dd84 <etharp_output+0x15c>)
 801dd3e:	480f      	ldr	r0, [pc, #60]	; (801dd7c <etharp_output+0x154>)
 801dd40:	f002 fe42 	bl	80209c8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801dd44:	2f00      	cmp	r7, #0
 801dd46:	f47f af78 	bne.w	801dc3a <etharp_output+0x12>
 801dd4a:	e7e3      	b.n	801dd14 <etharp_output+0xec>
            (arp_table[etharp_cached_entry].netif == netif) &&
 801dd4c:	685b      	ldr	r3, [r3, #4]
 801dd4e:	6831      	ldr	r1, [r6, #0]
 801dd50:	4299      	cmp	r1, r3
 801dd52:	d19d      	bne.n	801dc90 <etharp_output+0x68>
          ETHARP_STATS_INC(etharp.cachehit);
 801dd54:	4d0c      	ldr	r5, [pc, #48]	; (801dd88 <etharp_output+0x160>)
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801dd56:	4639      	mov	r1, r7
 801dd58:	4620      	mov	r0, r4
          ETHARP_STATS_INC(etharp.cachehit);
 801dd5a:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
 801dd5c:	3301      	adds	r3, #1
 801dd5e:	85eb      	strh	r3, [r5, #46]	; 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801dd60:	f7ff fcb2 	bl	801d6c8 <etharp_output_to_arp_index>
 801dd64:	e7cb      	b.n	801dcfe <etharp_output+0xd6>
            return ERR_RTE;
 801dd66:	f06f 0003 	mvn.w	r0, #3
 801dd6a:	e7c8      	b.n	801dcfe <etharp_output+0xd6>
 801dd6c:	2002243c 	.word	0x2002243c
 801dd70:	0803f818 	.word	0x0803f818
 801dd74:	0803f490 	.word	0x0803f490
 801dd78:	0803f4c8 	.word	0x0803f4c8
 801dd7c:	0802697c 	.word	0x0802697c
 801dd80:	0803f378 	.word	0x0803f378
 801dd84:	0802696c 	.word	0x0802696c
 801dd88:	20036164 	.word	0x20036164
 801dd8c:	2002273c 	.word	0x2002273c

0801dd90 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801dd90:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801dd92:	f100 032e 	add.w	r3, r0, #46	; 0x2e
{
 801dd96:	b530      	push	{r4, r5, lr}
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801dd98:	3204      	adds	r2, #4
{
 801dd9a:	b085      	sub	sp, #20
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801dd9c:	2501      	movs	r5, #1
 801dd9e:	4c05      	ldr	r4, [pc, #20]	; (801ddb4 <etharp_request+0x24>)
 801dda0:	9102      	str	r1, [sp, #8]
 801dda2:	4619      	mov	r1, r3
 801dda4:	9200      	str	r2, [sp, #0]
 801dda6:	4a04      	ldr	r2, [pc, #16]	; (801ddb8 <etharp_request+0x28>)
 801dda8:	9503      	str	r5, [sp, #12]
 801ddaa:	9401      	str	r4, [sp, #4]
 801ddac:	f7ff fc0a 	bl	801d5c4 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 801ddb0:	b005      	add	sp, #20
 801ddb2:	bd30      	pop	{r4, r5, pc}
 801ddb4:	0803f88c 	.word	0x0803f88c
 801ddb8:	0803f818 	.word	0x0803f818

0801ddbc <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 801ddbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ddc0:	4604      	mov	r4, r0
 801ddc2:	b087      	sub	sp, #28
 801ddc4:	4689      	mov	r9, r1
 801ddc6:	4690      	mov	r8, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801ddc8:	2124      	movs	r1, #36	; 0x24
 801ddca:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ddce:	2022      	movs	r0, #34	; 0x22
 801ddd0:	f7f8 fd10 	bl	80167f4 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 801ddd4:	2800      	cmp	r0, #0
 801ddd6:	d047      	beq.n	801de68 <icmp_send_response.isra.0+0xac>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801ddd8:	8943      	ldrh	r3, [r0, #10]
 801ddda:	4606      	mov	r6, r0
 801dddc:	2b23      	cmp	r3, #35	; 0x23
 801ddde:	d946      	bls.n	801de6e <icmp_send_response.isra.0+0xb2>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801dde0:	6823      	ldr	r3, [r4, #0]
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 801dde2:	2500      	movs	r5, #0
  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801dde4:	6874      	ldr	r4, [r6, #4]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801dde6:	af06      	add	r7, sp, #24
  icmphdr->code = code;
 801dde8:	f884 8001 	strb.w	r8, [r4, #1]
  icmphdr->type = type;
 801ddec:	f884 9000 	strb.w	r9, [r4]
  icmphdr->id = 0;
 801ddf0:	7125      	strb	r5, [r4, #4]
 801ddf2:	7165      	strb	r5, [r4, #5]
  icmphdr->seqno = 0;
 801ddf4:	71a5      	strb	r5, [r4, #6]
 801ddf6:	71e5      	strb	r5, [r4, #7]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801ddf8:	f8d3 c000 	ldr.w	ip, [r3]
 801ddfc:	6858      	ldr	r0, [r3, #4]
 801ddfe:	689a      	ldr	r2, [r3, #8]
 801de00:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 801de04:	f8c4 c008 	str.w	ip, [r4, #8]
 801de08:	60e0      	str	r0, [r4, #12]
 801de0a:	6122      	str	r2, [r4, #16]
 801de0c:	f8c4 e014 	str.w	lr, [r4, #20]
 801de10:	6958      	ldr	r0, [r3, #20]
 801de12:	f8d3 c010 	ldr.w	ip, [r3, #16]
 801de16:	699a      	ldr	r2, [r3, #24]
 801de18:	61e0      	str	r0, [r4, #28]
 801de1a:	f8c4 c018 	str.w	ip, [r4, #24]
 801de1e:	6222      	str	r2, [r4, #32]
  ip4_addr_copy(iphdr_src, iphdr->src);
 801de20:	68db      	ldr	r3, [r3, #12]
 801de22:	f847 3d04 	str.w	r3, [r7, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801de26:	4638      	mov	r0, r7
 801de28:	f000 f948 	bl	801e0bc <ip4_route>
#endif
  if (netif != NULL) {
 801de2c:	4680      	mov	r8, r0
 801de2e:	b1c0      	cbz	r0, 801de62 <icmp_send_response.isra.0+0xa6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801de30:	70a5      	strb	r5, [r4, #2]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801de32:	4620      	mov	r0, r4
    icmphdr->chksum = 0;
 801de34:	70e5      	strb	r5, [r4, #3]
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801de36:	8971      	ldrh	r1, [r6, #10]
 801de38:	f7f7 fbbe 	bl	80155b8 <inet_chksum>
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
 801de3c:	f8df c04c 	ldr.w	ip, [pc, #76]	; 801de8c <icmp_send_response.isra.0+0xd0>
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801de40:	8060      	strh	r0, [r4, #2]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801de42:	2301      	movs	r3, #1
    ICMP_STATS_INC(icmp.xmit);
 801de44:	f8bc 4060 	ldrh.w	r4, [ip, #96]	; 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801de48:	463a      	mov	r2, r7
 801de4a:	f8cd 8008 	str.w	r8, [sp, #8]
 801de4e:	4629      	mov	r1, r5
    ICMP_STATS_INC(icmp.xmit);
 801de50:	441c      	add	r4, r3
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801de52:	4630      	mov	r0, r6
 801de54:	e9cd 5300 	strd	r5, r3, [sp]
 801de58:	23ff      	movs	r3, #255	; 0xff
    ICMP_STATS_INC(icmp.xmit);
 801de5a:	f8ac 4060 	strh.w	r4, [ip, #96]	; 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801de5e:	f000 fb45 	bl	801e4ec <ip4_output_if>
  }
  pbuf_free(q);
 801de62:	4630      	mov	r0, r6
 801de64:	f7f8 fc58 	bl	8016718 <pbuf_free>
}
 801de68:	b007      	add	sp, #28
 801de6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801de6e:	4b04      	ldr	r3, [pc, #16]	; (801de80 <icmp_send_response.isra.0+0xc4>)
 801de70:	f240 1269 	movw	r2, #361	; 0x169
 801de74:	4903      	ldr	r1, [pc, #12]	; (801de84 <icmp_send_response.isra.0+0xc8>)
 801de76:	4804      	ldr	r0, [pc, #16]	; (801de88 <icmp_send_response.isra.0+0xcc>)
 801de78:	f002 fda6 	bl	80209c8 <iprintf>
 801de7c:	e7b0      	b.n	801dde0 <icmp_send_response.isra.0+0x24>
 801de7e:	bf00      	nop
 801de80:	0803f550 	.word	0x0803f550
 801de84:	0803f588 	.word	0x0803f588
 801de88:	0802697c 	.word	0x0802697c
 801de8c:	20036164 	.word	0x20036164

0801de90 <icmp_input>:
{
 801de90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ICMP_STATS_INC(icmp.recv);
 801de94:	4d71      	ldr	r5, [pc, #452]	; (801e05c <icmp_input+0x1cc>)
{
 801de96:	b085      	sub	sp, #20
  iphdr_in = ip4_current_header();
 801de98:	4f71      	ldr	r7, [pc, #452]	; (801e060 <icmp_input+0x1d0>)
{
 801de9a:	4606      	mov	r6, r0
  ICMP_STATS_INC(icmp.recv);
 801de9c:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
  iphdr_in = ip4_current_header();
 801dea0:	f8d7 9008 	ldr.w	r9, [r7, #8]
  ICMP_STATS_INC(icmp.recv);
 801dea4:	3301      	adds	r3, #1
 801dea6:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
  hlen = IPH_HL_BYTES(iphdr_in);
 801deaa:	f899 4000 	ldrb.w	r4, [r9]
 801deae:	f004 040f 	and.w	r4, r4, #15
 801deb2:	00a4      	lsls	r4, r4, #2
  if (hlen < IP_HLEN) {
 801deb4:	2c13      	cmp	r4, #19
 801deb6:	d958      	bls.n	801df6a <icmp_input+0xda>
  if (p->len < sizeof(u16_t) * 2) {
 801deb8:	8943      	ldrh	r3, [r0, #10]
 801deba:	2b03      	cmp	r3, #3
 801debc:	d955      	bls.n	801df6a <icmp_input+0xda>
  type = *((u8_t *)p->payload);
 801debe:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 801dec0:	781b      	ldrb	r3, [r3, #0]
 801dec2:	2b00      	cmp	r3, #0
 801dec4:	f000 8096 	beq.w	801dff4 <icmp_input+0x164>
 801dec8:	2b08      	cmp	r3, #8
 801deca:	f040 8099 	bne.w	801e000 <icmp_input+0x170>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801dece:	6978      	ldr	r0, [r7, #20]
 801ded0:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 801ded4:	2be0      	cmp	r3, #224	; 0xe0
 801ded6:	d03f      	beq.n	801df58 <icmp_input+0xc8>
 801ded8:	4688      	mov	r8, r1
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801deda:	6839      	ldr	r1, [r7, #0]
 801dedc:	f000 fb18 	bl	801e510 <ip4_addr_isbroadcast_u32>
 801dee0:	2800      	cmp	r0, #0
 801dee2:	d139      	bne.n	801df58 <icmp_input+0xc8>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801dee4:	8933      	ldrh	r3, [r6, #8]
 801dee6:	2b07      	cmp	r3, #7
 801dee8:	d93f      	bls.n	801df6a <icmp_input+0xda>
        if (inet_chksum_pbuf(p) != 0) {
 801deea:	4630      	mov	r0, r6
 801deec:	f7f7 fb6a 	bl	80155c4 <inet_chksum_pbuf>
 801def0:	2800      	cmp	r0, #0
 801def2:	f040 8095 	bne.w	801e020 <icmp_input+0x190>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801def6:	f104 0b0e 	add.w	fp, r4, #14
 801defa:	4630      	mov	r0, r6
  hlen = IPH_HL_BYTES(iphdr_in);
 801defc:	fa1f fa84 	uxth.w	sl, r4
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801df00:	4659      	mov	r1, fp
 801df02:	f7f8 fbc9 	bl	8016698 <pbuf_add_header>
 801df06:	2800      	cmp	r0, #0
 801df08:	d03a      	beq.n	801df80 <icmp_input+0xf0>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801df0a:	8933      	ldrh	r3, [r6, #8]
 801df0c:	eb03 010a 	add.w	r1, r3, sl
 801df10:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 801df12:	428b      	cmp	r3, r1
 801df14:	d820      	bhi.n	801df58 <icmp_input+0xc8>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801df16:	f44f 7220 	mov.w	r2, #640	; 0x280
 801df1a:	200e      	movs	r0, #14
 801df1c:	f7f8 fc6a 	bl	80167f4 <pbuf_alloc>
        if (r == NULL) {
 801df20:	4683      	mov	fp, r0
 801df22:	b1c8      	cbz	r0, 801df58 <icmp_input+0xc8>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801df24:	8942      	ldrh	r2, [r0, #10]
 801df26:	f104 0308 	add.w	r3, r4, #8
 801df2a:	429a      	cmp	r2, r3
 801df2c:	f0c0 808e 	bcc.w	801e04c <icmp_input+0x1bc>
        MEMCPY(r->payload, iphdr_in, hlen);
 801df30:	4649      	mov	r1, r9
 801df32:	4622      	mov	r2, r4
 801df34:	6840      	ldr	r0, [r0, #4]
 801df36:	f001 fda2 	bl	801fa7e <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 801df3a:	4621      	mov	r1, r4
 801df3c:	4658      	mov	r0, fp
 801df3e:	f7f8 fbaf 	bl	80166a0 <pbuf_remove_header>
 801df42:	2800      	cmp	r0, #0
 801df44:	d07c      	beq.n	801e040 <icmp_input+0x1b0>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801df46:	4b47      	ldr	r3, [pc, #284]	; (801e064 <icmp_input+0x1d4>)
 801df48:	22b6      	movs	r2, #182	; 0xb6
 801df4a:	4947      	ldr	r1, [pc, #284]	; (801e068 <icmp_input+0x1d8>)
 801df4c:	4847      	ldr	r0, [pc, #284]	; (801e06c <icmp_input+0x1dc>)
 801df4e:	f002 fd3b 	bl	80209c8 <iprintf>
          pbuf_free(r);
 801df52:	4658      	mov	r0, fp
 801df54:	f7f8 fbe0 	bl	8016718 <pbuf_free>
  pbuf_free(p);
 801df58:	4630      	mov	r0, r6
 801df5a:	f7f8 fbdd 	bl	8016718 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 801df5e:	f8b5 3074 	ldrh.w	r3, [r5, #116]	; 0x74
 801df62:	3301      	adds	r3, #1
 801df64:	f8a5 3074 	strh.w	r3, [r5, #116]	; 0x74
  return;
 801df68:	e007      	b.n	801df7a <icmp_input+0xea>
  pbuf_free(p);
 801df6a:	4630      	mov	r0, r6
 801df6c:	f7f8 fbd4 	bl	8016718 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 801df70:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
 801df74:	3301      	adds	r3, #1
 801df76:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
}
 801df7a:	b005      	add	sp, #20
 801df7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801df80:	4659      	mov	r1, fp
 801df82:	4630      	mov	r0, r6
 801df84:	f7f8 fb8c 	bl	80166a0 <pbuf_remove_header>
 801df88:	2800      	cmp	r0, #0
 801df8a:	d152      	bne.n	801e032 <icmp_input+0x1a2>
      if (pbuf_add_header(p, hlen)) {
 801df8c:	4621      	mov	r1, r4
 801df8e:	4630      	mov	r0, r6
      iecho = (struct icmp_echo_hdr *)p->payload;
 801df90:	f8d6 9004 	ldr.w	r9, [r6, #4]
      if (pbuf_add_header(p, hlen)) {
 801df94:	f7f8 fb80 	bl	8016698 <pbuf_add_header>
 801df98:	bb60      	cbnz	r0, 801dff4 <icmp_input+0x164>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801df9a:	6874      	ldr	r4, [r6, #4]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 801df9c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801dfa0:	e9d7 3104 	ldrd	r3, r1, [r7, #16]
        IPH_CHKSUM_SET(iphdr, 0);
 801dfa4:	2700      	movs	r7, #0
        ip4_addr_copy(iphdr->src, *src);
 801dfa6:	60e1      	str	r1, [r4, #12]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 801dfa8:	4651      	mov	r1, sl
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801dfaa:	6123      	str	r3, [r4, #16]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 801dfac:	f8b9 3002 	ldrh.w	r3, [r9, #2]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801dfb0:	f889 0000 	strb.w	r0, [r9]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 801dfb4:	4620      	mov	r0, r4
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 801dfb6:	4293      	cmp	r3, r2
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 801dfb8:	bf8c      	ite	hi
 801dfba:	3309      	addhi	r3, #9
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 801dfbc:	3308      	addls	r3, #8
 801dfbe:	f8a9 3002 	strh.w	r3, [r9, #2]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801dfc2:	f04f 09ff 	mov.w	r9, #255	; 0xff
        IPH_CHKSUM_SET(iphdr, 0);
 801dfc6:	72a7      	strb	r7, [r4, #10]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801dfc8:	f884 9008 	strb.w	r9, [r4, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801dfcc:	72e7      	strb	r7, [r4, #11]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 801dfce:	f7f7 faf3 	bl	80155b8 <inet_chksum>
        ICMP_STATS_INC(icmp.xmit);
 801dfd2:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801dfd6:	2101      	movs	r1, #1
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 801dfd8:	8160      	strh	r0, [r4, #10]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801dfda:	464b      	mov	r3, r9
 801dfdc:	9700      	str	r7, [sp, #0]
        ICMP_STATS_INC(icmp.xmit);
 801dfde:	1854      	adds	r4, r2, r1
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801dfe0:	9101      	str	r1, [sp, #4]
 801dfe2:	463a      	mov	r2, r7
 801dfe4:	f8cd 8008 	str.w	r8, [sp, #8]
 801dfe8:	4630      	mov	r0, r6
 801dfea:	4921      	ldr	r1, [pc, #132]	; (801e070 <icmp_input+0x1e0>)
        ICMP_STATS_INC(icmp.xmit);
 801dfec:	f8a5 4060 	strh.w	r4, [r5, #96]	; 0x60
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801dff0:	f000 fa7c 	bl	801e4ec <ip4_output_if>
  pbuf_free(p);
 801dff4:	4630      	mov	r0, r6
}
 801dff6:	b005      	add	sp, #20
 801dff8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 801dffc:	f7f8 bb8c 	b.w	8016718 <pbuf_free>
      ICMP_STATS_INC(icmp.proterr);
 801e000:	f8b5 2070 	ldrh.w	r2, [r5, #112]	; 0x70
  pbuf_free(p);
 801e004:	4630      	mov	r0, r6
      ICMP_STATS_INC(icmp.drop);
 801e006:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
      ICMP_STATS_INC(icmp.proterr);
 801e00a:	3201      	adds	r2, #1
      ICMP_STATS_INC(icmp.drop);
 801e00c:	3301      	adds	r3, #1
      ICMP_STATS_INC(icmp.proterr);
 801e00e:	f8a5 2070 	strh.w	r2, [r5, #112]	; 0x70
      ICMP_STATS_INC(icmp.drop);
 801e012:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
}
 801e016:	b005      	add	sp, #20
 801e018:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 801e01c:	f7f8 bb7c 	b.w	8016718 <pbuf_free>
          pbuf_free(p);
 801e020:	4630      	mov	r0, r6
 801e022:	f7f8 fb79 	bl	8016718 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
 801e026:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 801e02a:	3301      	adds	r3, #1
 801e02c:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
          return;
 801e030:	e7a3      	b.n	801df7a <icmp_input+0xea>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801e032:	4b0c      	ldr	r3, [pc, #48]	; (801e064 <icmp_input+0x1d4>)
 801e034:	22c7      	movs	r2, #199	; 0xc7
 801e036:	490f      	ldr	r1, [pc, #60]	; (801e074 <icmp_input+0x1e4>)
 801e038:	480c      	ldr	r0, [pc, #48]	; (801e06c <icmp_input+0x1dc>)
 801e03a:	f002 fcc5 	bl	80209c8 <iprintf>
          goto icmperr;
 801e03e:	e78b      	b.n	801df58 <icmp_input+0xc8>
        if (pbuf_copy(r, p) != ERR_OK) {
 801e040:	4631      	mov	r1, r6
 801e042:	4658      	mov	r0, fp
 801e044:	f7f8 fd4e 	bl	8016ae4 <pbuf_copy>
 801e048:	b118      	cbz	r0, 801e052 <icmp_input+0x1c2>
          pbuf_free(r);
 801e04a:	4658      	mov	r0, fp
 801e04c:	f7f8 fb64 	bl	8016718 <pbuf_free>
          goto icmperr;
 801e050:	e782      	b.n	801df58 <icmp_input+0xc8>
        pbuf_free(p);
 801e052:	4630      	mov	r0, r6
 801e054:	465e      	mov	r6, fp
 801e056:	f7f8 fb5f 	bl	8016718 <pbuf_free>
 801e05a:	e797      	b.n	801df8c <icmp_input+0xfc>
 801e05c:	20036164 	.word	0x20036164
 801e060:	20026a6c 	.word	0x20026a6c
 801e064:	0803f550 	.word	0x0803f550
 801e068:	0803f4e4 	.word	0x0803f4e4
 801e06c:	0802697c 	.word	0x0802697c
 801e070:	20026a80 	.word	0x20026a80
 801e074:	0803f51c 	.word	0x0803f51c

0801e078 <icmp_dest_unreach>:
  icmp_send_response(p, ICMP_DUR, t);
 801e078:	460a      	mov	r2, r1
 801e07a:	3004      	adds	r0, #4
 801e07c:	2103      	movs	r1, #3
 801e07e:	f7ff be9d 	b.w	801ddbc <icmp_send_response.isra.0>
 801e082:	bf00      	nop

0801e084 <icmp_time_exceeded>:
  icmp_send_response(p, ICMP_TE, t);
 801e084:	460a      	mov	r2, r1
 801e086:	3004      	adds	r0, #4
 801e088:	210b      	movs	r1, #11
 801e08a:	f7ff be97 	b.w	801ddbc <icmp_send_response.isra.0>
 801e08e:	bf00      	nop

0801e090 <ip4_input_accept.part.0>:
}
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
 801e090:	b508      	push	{r3, lr}
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801e092:	6843      	ldr	r3, [r0, #4]
 801e094:	b16b      	cbz	r3, 801e0b2 <ip4_input_accept.part.0+0x22>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801e096:	4a08      	ldr	r2, [pc, #32]	; (801e0b8 <ip4_input_accept.part.0+0x28>)
 801e098:	6952      	ldr	r2, [r2, #20]
 801e09a:	4293      	cmp	r3, r2
 801e09c:	d007      	beq.n	801e0ae <ip4_input_accept.part.0+0x1e>
 801e09e:	4601      	mov	r1, r0
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801e0a0:	4610      	mov	r0, r2
 801e0a2:	f000 fa35 	bl	801e510 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801e0a6:	3000      	adds	r0, #0
 801e0a8:	bf18      	it	ne
 801e0aa:	2001      	movne	r0, #1
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
}
 801e0ac:	bd08      	pop	{r3, pc}
      return 1;
 801e0ae:	2001      	movs	r0, #1
}
 801e0b0:	bd08      	pop	{r3, pc}
  return 0;
 801e0b2:	4618      	mov	r0, r3
}
 801e0b4:	bd08      	pop	{r3, pc}
 801e0b6:	bf00      	nop
 801e0b8:	20026a6c 	.word	0x20026a6c

0801e0bc <ip4_route>:
  NETIF_FOREACH(netif) {
 801e0bc:	4b18      	ldr	r3, [pc, #96]	; (801e120 <ip4_route+0x64>)
{
 801e0be:	b430      	push	{r4, r5}
  NETIF_FOREACH(netif) {
 801e0c0:	681b      	ldr	r3, [r3, #0]
 801e0c2:	b1ab      	cbz	r3, 801e0f0 <ip4_route+0x34>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801e0c4:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 801e0c8:	07d4      	lsls	r4, r2, #31
 801e0ca:	d5f9      	bpl.n	801e0c0 <ip4_route+0x4>
 801e0cc:	0751      	lsls	r1, r2, #29
 801e0ce:	d5f7      	bpl.n	801e0c0 <ip4_route+0x4>
 801e0d0:	6859      	ldr	r1, [r3, #4]
 801e0d2:	2900      	cmp	r1, #0
 801e0d4:	d0f4      	beq.n	801e0c0 <ip4_route+0x4>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801e0d6:	6804      	ldr	r4, [r0, #0]
 801e0d8:	689d      	ldr	r5, [r3, #8]
 801e0da:	4061      	eors	r1, r4
 801e0dc:	4229      	tst	r1, r5
 801e0de:	d004      	beq.n	801e0ea <ip4_route+0x2e>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801e0e0:	0792      	lsls	r2, r2, #30
 801e0e2:	d4ed      	bmi.n	801e0c0 <ip4_route+0x4>
 801e0e4:	68da      	ldr	r2, [r3, #12]
 801e0e6:	4294      	cmp	r4, r2
 801e0e8:	d1ea      	bne.n	801e0c0 <ip4_route+0x4>
}
 801e0ea:	4618      	mov	r0, r3
 801e0ec:	bc30      	pop	{r4, r5}
 801e0ee:	4770      	bx	lr
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801e0f0:	4b0c      	ldr	r3, [pc, #48]	; (801e124 <ip4_route+0x68>)
 801e0f2:	681b      	ldr	r3, [r3, #0]
 801e0f4:	b153      	cbz	r3, 801e10c <ip4_route+0x50>
 801e0f6:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 801e0fa:	f002 0205 	and.w	r2, r2, #5
 801e0fe:	2a05      	cmp	r2, #5
 801e100:	d104      	bne.n	801e10c <ip4_route+0x50>
 801e102:	685a      	ldr	r2, [r3, #4]
 801e104:	b112      	cbz	r2, 801e10c <ip4_route+0x50>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801e106:	7802      	ldrb	r2, [r0, #0]
 801e108:	2a7f      	cmp	r2, #127	; 0x7f
 801e10a:	d1ee      	bne.n	801e0ea <ip4_route+0x2e>
    IP_STATS_INC(ip.rterr);
 801e10c:	4906      	ldr	r1, [pc, #24]	; (801e128 <ip4_route+0x6c>)
    return NULL;
 801e10e:	2300      	movs	r3, #0
    IP_STATS_INC(ip.rterr);
 801e110:	f8b1 2056 	ldrh.w	r2, [r1, #86]	; 0x56
}
 801e114:	4618      	mov	r0, r3
    IP_STATS_INC(ip.rterr);
 801e116:	3201      	adds	r2, #1
}
 801e118:	bc30      	pop	{r4, r5}
    IP_STATS_INC(ip.rterr);
 801e11a:	f8a1 2056 	strh.w	r2, [r1, #86]	; 0x56
}
 801e11e:	4770      	bx	lr
 801e120:	20036158 	.word	0x20036158
 801e124:	2003615c 	.word	0x2003615c
 801e128:	20036164 	.word	0x20036164

0801e12c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801e12c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();

  IP_STATS_INC(ip.recv);
 801e130:	4c94      	ldr	r4, [pc, #592]	; (801e384 <ip4_input+0x258>)
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801e132:	6847      	ldr	r7, [r0, #4]
  IP_STATS_INC(ip.recv);
 801e134:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 801e138:	3301      	adds	r3, #1
 801e13a:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
  if (IPH_V(iphdr) != 4) {
 801e13e:	783b      	ldrb	r3, [r7, #0]
 801e140:	091a      	lsrs	r2, r3, #4
 801e142:	2a04      	cmp	r2, #4
 801e144:	d00e      	beq.n	801e164 <ip4_input+0x38>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801e146:	f7f8 fae7 	bl	8016718 <pbuf_free>
    IP_STATS_INC(ip.err);
 801e14a:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
    IP_STATS_INC(ip.drop);
 801e14e:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
    IP_STATS_INC(ip.err);
 801e152:	3201      	adds	r2, #1
    IP_STATS_INC(ip.drop);
 801e154:	3301      	adds	r3, #1
    IP_STATS_INC(ip.err);
 801e156:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    IP_STATS_INC(ip.drop);
 801e15a:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 801e15e:	2000      	movs	r0, #0
 801e160:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801e164:	f003 030f 	and.w	r3, r3, #15
 801e168:	4606      	mov	r6, r0
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801e16a:	8878      	ldrh	r0, [r7, #2]
 801e16c:	4688      	mov	r8, r1
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801e16e:	009d      	lsls	r5, r3, #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801e170:	f7f6 fc64 	bl	8014a3c <lwip_htons>
  if (iphdr_len < p->tot_len) {
 801e174:	8933      	ldrh	r3, [r6, #8]
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801e176:	4681      	mov	r9, r0
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801e178:	fa1f fa85 	uxth.w	sl, r5
  if (iphdr_len < p->tot_len) {
 801e17c:	4283      	cmp	r3, r0
 801e17e:	f200 80aa 	bhi.w	801e2d6 <ip4_input+0x1aa>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801e182:	8973      	ldrh	r3, [r6, #10]
 801e184:	4553      	cmp	r3, sl
 801e186:	f0c0 8096 	bcc.w	801e2b6 <ip4_input+0x18a>
 801e18a:	8933      	ldrh	r3, [r6, #8]
 801e18c:	454b      	cmp	r3, r9
 801e18e:	f0c0 8092 	bcc.w	801e2b6 <ip4_input+0x18a>
 801e192:	f1ba 0f13 	cmp.w	sl, #19
 801e196:	f240 808e 	bls.w	801e2b6 <ip4_input+0x18a>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801e19a:	693b      	ldr	r3, [r7, #16]
 801e19c:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 801e38c <ip4_input+0x260>
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801e1a0:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 801e1a4:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801e1a8:	f8ca 3014 	str.w	r3, [sl, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801e1ac:	29e0      	cmp	r1, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801e1ae:	68f8      	ldr	r0, [r7, #12]
 801e1b0:	f002 0201 	and.w	r2, r2, #1
 801e1b4:	f8ca 0010 	str.w	r0, [sl, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801e1b8:	f000 80b9 	beq.w	801e32e <ip4_input+0x202>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801e1bc:	2a00      	cmp	r2, #0
 801e1be:	f040 808f 	bne.w	801e2e0 <ip4_input+0x1b4>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801e1c2:	b2db      	uxtb	r3, r3
 801e1c4:	2b7f      	cmp	r3, #127	; 0x7f
 801e1c6:	f000 8093 	beq.w	801e2f0 <ip4_input+0x1c4>
        NETIF_FOREACH(netif) {
 801e1ca:	4b6f      	ldr	r3, [pc, #444]	; (801e388 <ip4_input+0x25c>)
 801e1cc:	f8d3 9000 	ldr.w	r9, [r3]
 801e1d0:	f1b9 0f00 	cmp.w	r9, #0
 801e1d4:	d106      	bne.n	801e1e4 <ip4_input+0xb8>
 801e1d6:	e08b      	b.n	801e2f0 <ip4_input+0x1c4>
 801e1d8:	f8d9 9000 	ldr.w	r9, [r9]
 801e1dc:	f1b9 0f00 	cmp.w	r9, #0
 801e1e0:	f000 8086 	beq.w	801e2f0 <ip4_input+0x1c4>
          if (netif == inp) {
 801e1e4:	45c8      	cmp	r8, r9
 801e1e6:	d0f7      	beq.n	801e1d8 <ip4_input+0xac>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801e1e8:	f899 3035 	ldrb.w	r3, [r9, #53]	; 0x35
 801e1ec:	07db      	lsls	r3, r3, #31
 801e1ee:	d5f3      	bpl.n	801e1d8 <ip4_input+0xac>
 801e1f0:	4648      	mov	r0, r9
 801e1f2:	f7ff ff4d 	bl	801e090 <ip4_input_accept.part.0>
          if (ip4_input_accept(netif)) {
 801e1f6:	2800      	cmp	r0, #0
 801e1f8:	d0ee      	beq.n	801e1d8 <ip4_input+0xac>
 801e1fa:	f8da 0010 	ldr.w	r0, [sl, #16]
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801e1fe:	2800      	cmp	r0, #0
 801e200:	d17e      	bne.n	801e300 <ip4_input+0x1d4>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801e202:	88fb      	ldrh	r3, [r7, #6]
 801e204:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801e208:	b133      	cbz	r3, 801e218 <ip4_input+0xec>
    p = ip4_reass(p);
 801e20a:	4630      	mov	r0, r6
 801e20c:	f000 fb96 	bl	801e93c <ip4_reass>
    if (p == NULL) {
 801e210:	4606      	mov	r6, r0
 801e212:	2800      	cmp	r0, #0
 801e214:	d0a3      	beq.n	801e15e <ip4_input+0x32>
    iphdr = (const struct ip_hdr *)p->payload;
 801e216:	6847      	ldr	r7, [r0, #4]
  ip_data.current_netif = netif;
 801e218:	f8ca 9000 	str.w	r9, [sl]
  raw_status = raw_input(p, inp);
 801e21c:	4641      	mov	r1, r8
  ip_data.current_input_netif = inp;
 801e21e:	f8ca 8004 	str.w	r8, [sl, #4]
  raw_status = raw_input(p, inp);
 801e222:	4630      	mov	r0, r6
  ip_data.current_ip4_header = iphdr;
 801e224:	f8ca 7008 	str.w	r7, [sl, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801e228:	783b      	ldrb	r3, [r7, #0]
 801e22a:	f003 030f 	and.w	r3, r3, #15
 801e22e:	009b      	lsls	r3, r3, #2
 801e230:	f8aa 300c 	strh.w	r3, [sl, #12]
  raw_status = raw_input(p, inp);
 801e234:	f7f8 fe34 	bl	8016ea0 <raw_input>
  if (raw_status != RAW_INPUT_EATEN)
 801e238:	2801      	cmp	r0, #1
  raw_status = raw_input(p, inp);
 801e23a:	4683      	mov	fp, r0
  if (raw_status != RAW_INPUT_EATEN)
 801e23c:	d031      	beq.n	801e2a2 <ip4_input+0x176>
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801e23e:	4629      	mov	r1, r5
 801e240:	4630      	mov	r0, r6
 801e242:	f7f8 fa2d 	bl	80166a0 <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 801e246:	7a7b      	ldrb	r3, [r7, #9]
 801e248:	2b06      	cmp	r3, #6
 801e24a:	f000 808b 	beq.w	801e364 <ip4_input+0x238>
 801e24e:	2b11      	cmp	r3, #17
 801e250:	f000 8092 	beq.w	801e378 <ip4_input+0x24c>
 801e254:	2b01      	cmp	r3, #1
 801e256:	f000 808a 	beq.w	801e36e <ip4_input+0x242>
        if (raw_status == RAW_INPUT_DELIVERED) {
 801e25a:	f1bb 0f02 	cmp.w	fp, #2
 801e25e:	d01d      	beq.n	801e29c <ip4_input+0x170>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801e260:	4649      	mov	r1, r9
 801e262:	f8da 0014 	ldr.w	r0, [sl, #20]
 801e266:	f000 f953 	bl	801e510 <ip4_addr_isbroadcast_u32>
 801e26a:	b968      	cbnz	r0, 801e288 <ip4_input+0x15c>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801e26c:	f8da 3014 	ldr.w	r3, [sl, #20]
 801e270:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801e274:	2be0      	cmp	r3, #224	; 0xe0
 801e276:	d007      	beq.n	801e288 <ip4_input+0x15c>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801e278:	4629      	mov	r1, r5
 801e27a:	4630      	mov	r0, r6
 801e27c:	f7f8 fa44 	bl	8016708 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801e280:	2102      	movs	r1, #2
 801e282:	4630      	mov	r0, r6
 801e284:	f7ff fef8 	bl	801e078 <icmp_dest_unreach>
          IP_STATS_INC(ip.proterr);
 801e288:	f8b4 2058 	ldrh.w	r2, [r4, #88]	; 0x58
          IP_STATS_INC(ip.drop);
 801e28c:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
          IP_STATS_INC(ip.proterr);
 801e290:	3201      	adds	r2, #1
          IP_STATS_INC(ip.drop);
 801e292:	3301      	adds	r3, #1
          IP_STATS_INC(ip.proterr);
 801e294:	f8a4 2058 	strh.w	r2, [r4, #88]	; 0x58
          IP_STATS_INC(ip.drop);
 801e298:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
        pbuf_free(p);
 801e29c:	4630      	mov	r0, r6
 801e29e:	f7f8 fa3b 	bl	8016718 <pbuf_free>
  ip_data.current_netif = NULL;
 801e2a2:	2300      	movs	r3, #0
  ip_data.current_input_netif = NULL;
 801e2a4:	e9ca 3300 	strd	r3, r3, [sl]
  ip_data.current_ip4_header = NULL;
 801e2a8:	f8ca 3008 	str.w	r3, [sl, #8]
  ip_data.current_ip_header_tot_len = 0;
 801e2ac:	f8aa 300c 	strh.w	r3, [sl, #12]
  ip4_addr_set_any(ip4_current_dest_addr());
 801e2b0:	e9ca 3304 	strd	r3, r3, [sl, #16]
  return ERR_OK;
 801e2b4:	e753      	b.n	801e15e <ip4_input+0x32>
    pbuf_free(p);
 801e2b6:	4630      	mov	r0, r6
 801e2b8:	f7f8 fa2e 	bl	8016718 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 801e2bc:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
    IP_STATS_INC(ip.drop);
 801e2c0:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
}
 801e2c4:	2000      	movs	r0, #0
    IP_STATS_INC(ip.lenerr);
 801e2c6:	3201      	adds	r2, #1
    IP_STATS_INC(ip.drop);
 801e2c8:	3301      	adds	r3, #1
    IP_STATS_INC(ip.lenerr);
 801e2ca:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    IP_STATS_INC(ip.drop);
 801e2ce:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
}
 801e2d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pbuf_realloc(p, iphdr_len);
 801e2d6:	4601      	mov	r1, r0
 801e2d8:	4630      	mov	r0, r6
 801e2da:	f7f8 fb29 	bl	8016930 <pbuf_realloc>
 801e2de:	e750      	b.n	801e182 <ip4_input+0x56>
 801e2e0:	4640      	mov	r0, r8
 801e2e2:	f7ff fed5 	bl	801e090 <ip4_input_accept.part.0>
    if (ip4_input_accept(inp)) {
 801e2e6:	b3d0      	cbz	r0, 801e35e <ip4_input+0x232>
 801e2e8:	f8da 0010 	ldr.w	r0, [sl, #16]
 801e2ec:	46c1      	mov	r9, r8
 801e2ee:	e786      	b.n	801e1fe <ip4_input+0xd2>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801e2f0:	7a7b      	ldrb	r3, [r7, #9]
 801e2f2:	2b11      	cmp	r3, #17
 801e2f4:	d023      	beq.n	801e33e <ip4_input+0x212>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801e2f6:	f8da 0010 	ldr.w	r0, [sl, #16]
 801e2fa:	b178      	cbz	r0, 801e31c <ip4_input+0x1f0>
 801e2fc:	f04f 0900 	mov.w	r9, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801e300:	4641      	mov	r1, r8
 801e302:	f000 f905 	bl	801e510 <ip4_addr_isbroadcast_u32>
 801e306:	bb08      	cbnz	r0, 801e34c <ip4_input+0x220>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801e308:	f8da 3010 	ldr.w	r3, [sl, #16]
 801e30c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801e310:	2be0      	cmp	r3, #224	; 0xe0
 801e312:	d01b      	beq.n	801e34c <ip4_input+0x220>
  if (netif == NULL) {
 801e314:	f1b9 0f00 	cmp.w	r9, #0
 801e318:	f47f af73 	bne.w	801e202 <ip4_input+0xd6>
      IP_STATS_INC(ip.drop);
 801e31c:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
    pbuf_free(p);
 801e320:	4630      	mov	r0, r6
      IP_STATS_INC(ip.drop);
 801e322:	3301      	adds	r3, #1
 801e324:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
    pbuf_free(p);
 801e328:	f7f8 f9f6 	bl	8016718 <pbuf_free>
    return ERR_OK;
 801e32c:	e717      	b.n	801e15e <ip4_input+0x32>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801e32e:	2a00      	cmp	r2, #0
 801e330:	d0de      	beq.n	801e2f0 <ip4_input+0x1c4>
 801e332:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801e336:	2b00      	cmp	r3, #0
 801e338:	d0da      	beq.n	801e2f0 <ip4_input+0x1c4>
 801e33a:	46c1      	mov	r9, r8
 801e33c:	e75f      	b.n	801e1fe <ip4_input+0xd2>
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801e33e:	197b      	adds	r3, r7, r5
 801e340:	885b      	ldrh	r3, [r3, #2]
 801e342:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801e346:	d1d6      	bne.n	801e2f6 <ip4_input+0x1ca>
 801e348:	46c1      	mov	r9, r8
 801e34a:	e75a      	b.n	801e202 <ip4_input+0xd6>
      pbuf_free(p);
 801e34c:	4630      	mov	r0, r6
 801e34e:	f7f8 f9e3 	bl	8016718 <pbuf_free>
      IP_STATS_INC(ip.drop);
 801e352:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 801e356:	3301      	adds	r3, #1
 801e358:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
      return ERR_OK;
 801e35c:	e6ff      	b.n	801e15e <ip4_input+0x32>
 801e35e:	f8da 3014 	ldr.w	r3, [sl, #20]
 801e362:	e72e      	b.n	801e1c2 <ip4_input+0x96>
        tcp_input(p, inp);
 801e364:	4641      	mov	r1, r8
 801e366:	4630      	mov	r0, r6
 801e368:	f7fa ff04 	bl	8019174 <tcp_input>
        break;
 801e36c:	e799      	b.n	801e2a2 <ip4_input+0x176>
        icmp_input(p, inp);
 801e36e:	4641      	mov	r1, r8
 801e370:	4630      	mov	r0, r6
 801e372:	f7ff fd8d 	bl	801de90 <icmp_input>
        break;
 801e376:	e794      	b.n	801e2a2 <ip4_input+0x176>
        udp_input(p, inp);
 801e378:	4641      	mov	r1, r8
 801e37a:	4630      	mov	r0, r6
 801e37c:	f7fd f98e 	bl	801b69c <udp_input>
        break;
 801e380:	e78f      	b.n	801e2a2 <ip4_input+0x176>
 801e382:	bf00      	nop
 801e384:	20036164 	.word	0x20036164
 801e388:	20036158 	.word	0x20036158
 801e38c:	20026a6c 	.word	0x20026a6c

0801e390 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801e390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e394:	461c      	mov	r4, r3
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801e396:	7b83      	ldrb	r3, [r0, #14]
{
 801e398:	b085      	sub	sp, #20
 801e39a:	4606      	mov	r6, r0
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801e39c:	2b01      	cmp	r3, #1
{
 801e39e:	468a      	mov	sl, r1
 801e3a0:	4617      	mov	r7, r2
 801e3a2:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
 801e3a6:	f89d b03c 	ldrb.w	fp, [sp, #60]	; 0x3c
 801e3aa:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801e3ae:	d15f      	bne.n	801e470 <ip4_output_if_src+0xe0>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801e3b0:	2f00      	cmp	r7, #0
 801e3b2:	d066      	beq.n	801e482 <ip4_output_if_src+0xf2>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801e3b4:	2114      	movs	r1, #20
 801e3b6:	4630      	mov	r0, r6
 801e3b8:	f7f8 f96e 	bl	8016698 <pbuf_add_header>
 801e3bc:	2800      	cmp	r0, #0
 801e3be:	d17d      	bne.n	801e4bc <ip4_output_if_src+0x12c>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801e3c0:	8973      	ldrh	r3, [r6, #10]
    iphdr = (struct ip_hdr *)p->payload;
 801e3c2:	6875      	ldr	r5, [r6, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801e3c4:	2b13      	cmp	r3, #19
 801e3c6:	d965      	bls.n	801e494 <ip4_output_if_src+0x104>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801e3c8:	722c      	strb	r4, [r5, #8]
    IPH_PROTO_SET(iphdr, proto);
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 801e3ca:	ea4b 2404 	orr.w	r4, fp, r4, lsl #8
    IPH_PROTO_SET(iphdr, proto);
 801e3ce:	f885 b009 	strb.w	fp, [r5, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801e3d2:	f04f 0c45 	mov.w	ip, #69	; 0x45
    ip4_addr_copy(iphdr->dest, *dest);
 801e3d6:	683b      	ldr	r3, [r7, #0]
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 801e3d8:	1221      	asrs	r1, r4, #8
    IPH_TOS_SET(iphdr, tos);
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 801e3da:	ea4f 2209 	mov.w	r2, r9, lsl #8
    IPH_TOS_SET(iphdr, tos);
 801e3de:	f885 9001 	strb.w	r9, [r5, #1]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 801e3e2:	0c18      	lsrs	r0, r3, #16
    ip4_addr_copy(iphdr->dest, *dest);
 801e3e4:	612b      	str	r3, [r5, #16]
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 801e3e6:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 801e3ea:	ea42 020c 	orr.w	r2, r2, ip
 801e3ee:	fa10 f383 	uxtah	r3, r0, r3
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801e3f2:	f885 c000 	strb.w	ip, [r5]
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 801e3f6:	b2a1      	uxth	r1, r4
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801e3f8:	8930      	ldrh	r0, [r6, #8]
 801e3fa:	eb02 0903 	add.w	r9, r2, r3
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801e3fe:	4c34      	ldr	r4, [pc, #208]	; (801e4d0 <ip4_output_if_src+0x140>)
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 801e400:	9101      	str	r1, [sp, #4]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801e402:	f7f6 fb1b 	bl	8014a3c <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 801e406:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801e408:	4683      	mov	fp, r0
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801e40a:	8820      	ldrh	r0, [r4, #0]
    IPH_OFFSET_SET(iphdr, 0);
 801e40c:	71ab      	strb	r3, [r5, #6]
 801e40e:	71eb      	strb	r3, [r5, #7]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801e410:	f8a5 b002 	strh.w	fp, [r5, #2]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801e414:	f7f6 fb12 	bl	8014a3c <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801e418:	8823      	ldrh	r3, [r4, #0]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801e41a:	80a8      	strh	r0, [r5, #4]
    ++ip_id;
 801e41c:	3301      	adds	r3, #1

    if (src == NULL) {
 801e41e:	9901      	ldr	r1, [sp, #4]
    ++ip_id;
 801e420:	8023      	strh	r3, [r4, #0]
    if (src == NULL) {
 801e422:	f1ba 0f00 	cmp.w	sl, #0
 801e426:	d03d      	beq.n	801e4a4 <ip4_output_if_src+0x114>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801e428:	f8da 3000 	ldr.w	r3, [sl]
 801e42c:	60eb      	str	r3, [r5, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 801e42e:	eb01 0409 	add.w	r4, r1, r9
 801e432:	445c      	add	r4, fp
 801e434:	4420      	add	r0, r4
 801e436:	fa10 f083 	uxtah	r0, r0, r3
 801e43a:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 801e43e:	b283      	uxth	r3, r0
 801e440:	eb03 4010 	add.w	r0, r3, r0, lsr #16
    chk_sum = (chk_sum >> 16) + chk_sum;
 801e444:	eb00 4010 	add.w	r0, r0, r0, lsr #16
    chk_sum = ~chk_sum;
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 801e448:	43c0      	mvns	r0, r0
 801e44a:	8168      	strh	r0, [r5, #10]
    iphdr = (struct ip_hdr *)p->payload;
    ip4_addr_copy(dest_addr, iphdr->dest);
    dest = &dest_addr;
  }

  IP_STATS_INC(ip.xmit);
 801e44c:	4a21      	ldr	r2, [pc, #132]	; (801e4d4 <ip4_output_if_src+0x144>)
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801e44e:	f8b8 102c 	ldrh.w	r1, [r8, #44]	; 0x2c
  IP_STATS_INC(ip.xmit);
 801e452:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
 801e456:	3301      	adds	r3, #1
 801e458:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
    return ip4_frag(p, netif, dest);
 801e45c:	463a      	mov	r2, r7
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801e45e:	bb29      	cbnz	r1, 801e4ac <ip4_output_if_src+0x11c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801e460:	4631      	mov	r1, r6
 801e462:	f8d8 3014 	ldr.w	r3, [r8, #20]
 801e466:	4640      	mov	r0, r8
 801e468:	4798      	blx	r3
}
 801e46a:	b005      	add	sp, #20
 801e46c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801e470:	4b19      	ldr	r3, [pc, #100]	; (801e4d8 <ip4_output_if_src+0x148>)
 801e472:	f44f 7255 	mov.w	r2, #852	; 0x354
 801e476:	4919      	ldr	r1, [pc, #100]	; (801e4dc <ip4_output_if_src+0x14c>)
 801e478:	4819      	ldr	r0, [pc, #100]	; (801e4e0 <ip4_output_if_src+0x150>)
 801e47a:	f002 faa5 	bl	80209c8 <iprintf>
  if (dest != LWIP_IP_HDRINCL) {
 801e47e:	2f00      	cmp	r7, #0
 801e480:	d198      	bne.n	801e3b4 <ip4_output_if_src+0x24>
    if (p->len < IP_HLEN) {
 801e482:	8973      	ldrh	r3, [r6, #10]
 801e484:	2b13      	cmp	r3, #19
 801e486:	d919      	bls.n	801e4bc <ip4_output_if_src+0x12c>
    ip4_addr_copy(dest_addr, iphdr->dest);
 801e488:	6873      	ldr	r3, [r6, #4]
 801e48a:	af04      	add	r7, sp, #16
 801e48c:	691b      	ldr	r3, [r3, #16]
 801e48e:	f847 3d04 	str.w	r3, [r7, #-4]!
 801e492:	e7db      	b.n	801e44c <ip4_output_if_src+0xbc>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801e494:	4b10      	ldr	r3, [pc, #64]	; (801e4d8 <ip4_output_if_src+0x148>)
 801e496:	f240 3289 	movw	r2, #905	; 0x389
 801e49a:	4912      	ldr	r1, [pc, #72]	; (801e4e4 <ip4_output_if_src+0x154>)
 801e49c:	4810      	ldr	r0, [pc, #64]	; (801e4e0 <ip4_output_if_src+0x150>)
 801e49e:	f002 fa93 	bl	80209c8 <iprintf>
 801e4a2:	e791      	b.n	801e3c8 <ip4_output_if_src+0x38>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801e4a4:	4b10      	ldr	r3, [pc, #64]	; (801e4e8 <ip4_output_if_src+0x158>)
 801e4a6:	681b      	ldr	r3, [r3, #0]
 801e4a8:	60eb      	str	r3, [r5, #12]
 801e4aa:	e7c0      	b.n	801e42e <ip4_output_if_src+0x9e>
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801e4ac:	8933      	ldrh	r3, [r6, #8]
 801e4ae:	428b      	cmp	r3, r1
 801e4b0:	d9d6      	bls.n	801e460 <ip4_output_if_src+0xd0>
    return ip4_frag(p, netif, dest);
 801e4b2:	4641      	mov	r1, r8
 801e4b4:	4630      	mov	r0, r6
 801e4b6:	f000 fc91 	bl	801eddc <ip4_frag>
 801e4ba:	e7d6      	b.n	801e46a <ip4_output_if_src+0xda>
      IP_STATS_INC(ip.err);
 801e4bc:	4a05      	ldr	r2, [pc, #20]	; (801e4d4 <ip4_output_if_src+0x144>)
      return ERR_BUF;
 801e4be:	f06f 0001 	mvn.w	r0, #1
      IP_STATS_INC(ip.err);
 801e4c2:	f8b2 305c 	ldrh.w	r3, [r2, #92]	; 0x5c
 801e4c6:	3301      	adds	r3, #1
 801e4c8:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
      return ERR_BUF;
 801e4cc:	e7cd      	b.n	801e46a <ip4_output_if_src+0xda>
 801e4ce:	bf00      	nop
 801e4d0:	2002273e 	.word	0x2002273e
 801e4d4:	20036164 	.word	0x20036164
 801e4d8:	0803f5b4 	.word	0x0803f5b4
 801e4dc:	0803f5e8 	.word	0x0803f5e8
 801e4e0:	0802697c 	.word	0x0802697c
 801e4e4:	0803f5f4 	.word	0x0803f5f4
 801e4e8:	0803f66c 	.word	0x0803f66c

0801e4ec <ip4_output_if>:
{
 801e4ec:	b4f0      	push	{r4, r5, r6, r7}
 801e4ee:	9c06      	ldr	r4, [sp, #24]
 801e4f0:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801e4f4:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801e4f8:	b11a      	cbz	r2, 801e502 <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 801e4fa:	b109      	cbz	r1, 801e500 <ip4_output_if+0x14>
 801e4fc:	680f      	ldr	r7, [r1, #0]
 801e4fe:	b907      	cbnz	r7, 801e502 <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 801e500:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801e502:	9504      	str	r5, [sp, #16]
 801e504:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
 801e508:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801e50a:	f7ff bf41 	b.w	801e390 <ip4_output_if_src>
 801e50e:	bf00      	nop

0801e510 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801e510:	1e43      	subs	r3, r0, #1
 801e512:	3303      	adds	r3, #3
 801e514:	d814      	bhi.n	801e540 <ip4_addr_isbroadcast_u32+0x30>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801e516:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
 801e51a:	f013 0302 	ands.w	r3, r3, #2
 801e51e:	d00d      	beq.n	801e53c <ip4_addr_isbroadcast_u32+0x2c>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801e520:	684b      	ldr	r3, [r1, #4]
 801e522:	4283      	cmp	r3, r0
 801e524:	d00a      	beq.n	801e53c <ip4_addr_isbroadcast_u32+0x2c>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801e526:	688a      	ldr	r2, [r1, #8]
 801e528:	4043      	eors	r3, r0
 801e52a:	4213      	tst	r3, r2
 801e52c:	d106      	bne.n	801e53c <ip4_addr_isbroadcast_u32+0x2c>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801e52e:	43d2      	mvns	r2, r2
 801e530:	ea32 0300 	bics.w	r3, r2, r0
    return 1;
 801e534:	bf0c      	ite	eq
 801e536:	2001      	moveq	r0, #1
 801e538:	2000      	movne	r0, #0
 801e53a:	4770      	bx	lr
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 801e53c:	2000      	movs	r0, #0
  }
}
 801e53e:	4770      	bx	lr
    return 1;
 801e540:	2001      	movs	r0, #1
 801e542:	4770      	bx	lr

0801e544 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 801e544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e548:	b087      	sub	sp, #28
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;

  c = *cp;
 801e54a:	f890 b000 	ldrb.w	fp, [r0]
{
 801e54e:	4604      	mov	r4, r0
 801e550:	9101      	str	r1, [sp, #4]
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 801e552:	f001 fa55 	bl	801fa00 <__locale_ctype_ptr>
 801e556:	4458      	add	r0, fp
  u32_t *pp = parts;
 801e558:	f10d 0a08 	add.w	sl, sp, #8
    if (!lwip_isdigit(c)) {
 801e55c:	7842      	ldrb	r2, [r0, #1]
 801e55e:	0751      	lsls	r1, r2, #29
 801e560:	d542      	bpl.n	801e5e8 <ip4addr_aton+0xa4>
      return 0;
    }
    val = 0;
    base = 10;
    if (c == '0') {
 801e562:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 801e566:	d044      	beq.n	801e5f2 <ip4addr_aton+0xae>
    base = 10;
 801e568:	f04f 080a 	mov.w	r8, #10
 801e56c:	4625      	mov	r5, r4
      c = *++cp;
      if (c == 'x' || c == 'X') {
        base = 16;
        c = *++cp;
      } else {
        base = 8;
 801e56e:	2400      	movs	r4, #0
 801e570:	e004      	b.n	801e57c <ip4addr_aton+0x38>
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
        val = (val * base) + (u32_t)(c - '0');
 801e572:	f1a1 0430 	sub.w	r4, r1, #48	; 0x30
        c = *++cp;
 801e576:	f895 b001 	ldrb.w	fp, [r5, #1]
 801e57a:	3501      	adds	r5, #1
      if (lwip_isdigit(c)) {
 801e57c:	f10b 0601 	add.w	r6, fp, #1
 801e580:	f001 fa3e 	bl	801fa00 <__locale_ctype_ptr>
      } else if (base == 16 && lwip_isxdigit(c)) {
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 801e584:	f10b 070a 	add.w	r7, fp, #10
        val = (val * base) + (u32_t)(c - '0');
 801e588:	fb04 b108 	mla	r1, r4, r8, fp
      if (lwip_isdigit(c)) {
 801e58c:	5d82      	ldrb	r2, [r0, r6]
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 801e58e:	ea4f 1904 	mov.w	r9, r4, lsl #4
      if (lwip_isdigit(c)) {
 801e592:	0752      	lsls	r2, r2, #29
 801e594:	d4ed      	bmi.n	801e572 <ip4addr_aton+0x2e>
      } else if (base == 16 && lwip_isxdigit(c)) {
 801e596:	f1b8 0f10 	cmp.w	r8, #16
 801e59a:	d114      	bne.n	801e5c6 <ip4addr_aton+0x82>
 801e59c:	f001 fa30 	bl	801fa00 <__locale_ctype_ptr>
 801e5a0:	5d82      	ldrb	r2, [r0, r6]
 801e5a2:	f012 0f44 	tst.w	r2, #68	; 0x44
 801e5a6:	d00e      	beq.n	801e5c6 <ip4addr_aton+0x82>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 801e5a8:	f001 fa2a 	bl	801fa00 <__locale_ctype_ptr>
 801e5ac:	5d82      	ldrb	r2, [r0, r6]
        c = *++cp;
 801e5ae:	f895 b001 	ldrb.w	fp, [r5, #1]
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 801e5b2:	f002 0203 	and.w	r2, r2, #3
 801e5b6:	2a02      	cmp	r2, #2
 801e5b8:	bf0c      	ite	eq
 801e5ba:	2461      	moveq	r4, #97	; 0x61
 801e5bc:	2441      	movne	r4, #65	; 0x41
 801e5be:	1b3c      	subs	r4, r7, r4
 801e5c0:	ea44 0409 	orr.w	r4, r4, r9
 801e5c4:	e7d9      	b.n	801e57a <ip4addr_aton+0x36>
      } else {
        break;
      }
    }
    if (c == '.') {
 801e5c6:	f1bb 0f2e 	cmp.w	fp, #46	; 0x2e
 801e5ca:	d122      	bne.n	801e612 <ip4addr_aton+0xce>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 801e5cc:	ab05      	add	r3, sp, #20
 801e5ce:	459a      	cmp	sl, r3
 801e5d0:	d00a      	beq.n	801e5e8 <ip4addr_aton+0xa4>
        return 0;
      }
      *pp++ = val;
      c = *++cp;
 801e5d2:	f895 b001 	ldrb.w	fp, [r5, #1]
      *pp++ = val;
 801e5d6:	f84a 4b04 	str.w	r4, [sl], #4
    if (!lwip_isdigit(c)) {
 801e5da:	f001 fa11 	bl	801fa00 <__locale_ctype_ptr>
 801e5de:	4458      	add	r0, fp
      c = *++cp;
 801e5e0:	1c6c      	adds	r4, r5, #1
    if (!lwip_isdigit(c)) {
 801e5e2:	7842      	ldrb	r2, [r0, #1]
 801e5e4:	0751      	lsls	r1, r2, #29
 801e5e6:	d4bc      	bmi.n	801e562 <ip4addr_aton+0x1e>
      return 0;
 801e5e8:	2300      	movs	r3, #0
  }
  if (addr) {
    ip4_addr_set_u32(addr, lwip_htonl(val));
  }
  return 1;
}
 801e5ea:	4618      	mov	r0, r3
 801e5ec:	b007      	add	sp, #28
 801e5ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      c = *++cp;
 801e5f2:	f894 b001 	ldrb.w	fp, [r4, #1]
      if (c == 'x' || c == 'X') {
 801e5f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801e5fa:	2a58      	cmp	r2, #88	; 0x58
 801e5fc:	d003      	beq.n	801e606 <ip4addr_aton+0xc2>
      c = *++cp;
 801e5fe:	3401      	adds	r4, #1
        base = 8;
 801e600:	f04f 0808 	mov.w	r8, #8
 801e604:	e7b2      	b.n	801e56c <ip4addr_aton+0x28>
        c = *++cp;
 801e606:	f894 b002 	ldrb.w	fp, [r4, #2]
        base = 16;
 801e60a:	f04f 0810 	mov.w	r8, #16
        c = *++cp;
 801e60e:	3402      	adds	r4, #2
 801e610:	e7ac      	b.n	801e56c <ip4addr_aton+0x28>
  if (c != '\0' && !lwip_isspace(c)) {
 801e612:	f1bb 0f00 	cmp.w	fp, #0
 801e616:	d12c      	bne.n	801e672 <ip4addr_aton+0x12e>
  switch (pp - parts + 1) {
 801e618:	ab02      	add	r3, sp, #8
 801e61a:	ebaa 0303 	sub.w	r3, sl, r3
 801e61e:	109b      	asrs	r3, r3, #2
 801e620:	3301      	adds	r3, #1
 801e622:	2b04      	cmp	r3, #4
 801e624:	d844      	bhi.n	801e6b0 <ip4addr_aton+0x16c>
 801e626:	a201      	add	r2, pc, #4	; (adr r2, 801e62c <ip4addr_aton+0xe8>)
 801e628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e62c:	0801e5eb 	.word	0x0801e5eb
 801e630:	0801e663 	.word	0x0801e663
 801e634:	0801e69f 	.word	0x0801e69f
 801e638:	0801e683 	.word	0x0801e683
 801e63c:	0801e641 	.word	0x0801e641
      if (val > 0xff) {
 801e640:	2cff      	cmp	r4, #255	; 0xff
 801e642:	d8d1      	bhi.n	801e5e8 <ip4addr_aton+0xa4>
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 801e644:	9902      	ldr	r1, [sp, #8]
 801e646:	29ff      	cmp	r1, #255	; 0xff
 801e648:	d8ce      	bhi.n	801e5e8 <ip4addr_aton+0xa4>
 801e64a:	9b03      	ldr	r3, [sp, #12]
 801e64c:	2bff      	cmp	r3, #255	; 0xff
 801e64e:	d8cb      	bhi.n	801e5e8 <ip4addr_aton+0xa4>
 801e650:	9a04      	ldr	r2, [sp, #16]
 801e652:	2aff      	cmp	r2, #255	; 0xff
 801e654:	d8c8      	bhi.n	801e5e8 <ip4addr_aton+0xa4>
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 801e656:	041b      	lsls	r3, r3, #16
 801e658:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 801e65c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801e660:	431c      	orrs	r4, r3
  if (addr) {
 801e662:	9d01      	ldr	r5, [sp, #4]
 801e664:	b15d      	cbz	r5, 801e67e <ip4addr_aton+0x13a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801e666:	4620      	mov	r0, r4
 801e668:	f7f6 f9ec 	bl	8014a44 <lwip_htonl>
  return 1;
 801e66c:	2301      	movs	r3, #1
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801e66e:	6028      	str	r0, [r5, #0]
 801e670:	e7bb      	b.n	801e5ea <ip4addr_aton+0xa6>
  if (c != '\0' && !lwip_isspace(c)) {
 801e672:	f001 f9c5 	bl	801fa00 <__locale_ctype_ptr>
 801e676:	5d83      	ldrb	r3, [r0, r6]
 801e678:	071b      	lsls	r3, r3, #28
 801e67a:	d4cd      	bmi.n	801e618 <ip4addr_aton+0xd4>
 801e67c:	e7b4      	b.n	801e5e8 <ip4addr_aton+0xa4>
  return 1;
 801e67e:	2301      	movs	r3, #1
 801e680:	e7b3      	b.n	801e5ea <ip4addr_aton+0xa6>
      if (val > 0xffff) {
 801e682:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 801e686:	d2af      	bcs.n	801e5e8 <ip4addr_aton+0xa4>
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 801e688:	9a02      	ldr	r2, [sp, #8]
 801e68a:	2aff      	cmp	r2, #255	; 0xff
 801e68c:	d8ac      	bhi.n	801e5e8 <ip4addr_aton+0xa4>
 801e68e:	9b03      	ldr	r3, [sp, #12]
 801e690:	2bff      	cmp	r3, #255	; 0xff
 801e692:	d8a9      	bhi.n	801e5e8 <ip4addr_aton+0xa4>
      val |= (parts[0] << 24) | (parts[1] << 16);
 801e694:	041b      	lsls	r3, r3, #16
 801e696:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801e69a:	431c      	orrs	r4, r3
      break;
 801e69c:	e7e1      	b.n	801e662 <ip4addr_aton+0x11e>
      if (val > 0xffffffUL) {
 801e69e:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
 801e6a2:	d2a1      	bcs.n	801e5e8 <ip4addr_aton+0xa4>
      if (parts[0] > 0xff) {
 801e6a4:	9b02      	ldr	r3, [sp, #8]
 801e6a6:	2bff      	cmp	r3, #255	; 0xff
 801e6a8:	d89e      	bhi.n	801e5e8 <ip4addr_aton+0xa4>
      val |= parts[0] << 24;
 801e6aa:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
      break;
 801e6ae:	e7d8      	b.n	801e662 <ip4addr_aton+0x11e>
      LWIP_ASSERT("unhandled", 0);
 801e6b0:	4b03      	ldr	r3, [pc, #12]	; (801e6c0 <ip4addr_aton+0x17c>)
 801e6b2:	22f9      	movs	r2, #249	; 0xf9
 801e6b4:	4903      	ldr	r1, [pc, #12]	; (801e6c4 <ip4addr_aton+0x180>)
 801e6b6:	4804      	ldr	r0, [pc, #16]	; (801e6c8 <ip4addr_aton+0x184>)
 801e6b8:	f002 f986 	bl	80209c8 <iprintf>
      break;
 801e6bc:	e7d1      	b.n	801e662 <ip4addr_aton+0x11e>
 801e6be:	bf00      	nop
 801e6c0:	0803f624 	.word	0x0803f624
 801e6c4:	0803f660 	.word	0x0803f660
 801e6c8:	0802697c 	.word	0x0802697c

0801e6cc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801e6cc:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801e6ce:	4b0f      	ldr	r3, [pc, #60]	; (801e70c <ip_reass_dequeue_datagram+0x40>)
{
 801e6d0:	4604      	mov	r4, r0
  if (reassdatagrams == ipr) {
 801e6d2:	681a      	ldr	r2, [r3, #0]
 801e6d4:	4282      	cmp	r2, r0
 801e6d6:	d009      	beq.n	801e6ec <ip_reass_dequeue_datagram+0x20>
 801e6d8:	460d      	mov	r5, r1
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801e6da:	b179      	cbz	r1, 801e6fc <ip_reass_dequeue_datagram+0x30>
    prev->next = ipr->next;
 801e6dc:	6823      	ldr	r3, [r4, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801e6de:	4621      	mov	r1, r4
 801e6e0:	2005      	movs	r0, #5
    prev->next = ipr->next;
 801e6e2:	602b      	str	r3, [r5, #0]
}
 801e6e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 801e6e8:	f7f7 bd3c 	b.w	8016164 <memp_free>
    reassdatagrams = ipr->next;
 801e6ec:	6802      	ldr	r2, [r0, #0]
  memp_free(MEMP_REASSDATA, ipr);
 801e6ee:	4621      	mov	r1, r4
 801e6f0:	2005      	movs	r0, #5
    reassdatagrams = ipr->next;
 801e6f2:	601a      	str	r2, [r3, #0]
}
 801e6f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 801e6f8:	f7f7 bd34 	b.w	8016164 <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801e6fc:	4b04      	ldr	r3, [pc, #16]	; (801e710 <ip_reass_dequeue_datagram+0x44>)
 801e6fe:	f240 1245 	movw	r2, #325	; 0x145
 801e702:	4904      	ldr	r1, [pc, #16]	; (801e714 <ip_reass_dequeue_datagram+0x48>)
 801e704:	4804      	ldr	r0, [pc, #16]	; (801e718 <ip_reass_dequeue_datagram+0x4c>)
 801e706:	f002 f95f 	bl	80209c8 <iprintf>
 801e70a:	e7e7      	b.n	801e6dc <ip_reass_dequeue_datagram+0x10>
 801e70c:	20022744 	.word	0x20022744
 801e710:	0803f750 	.word	0x0803f750
 801e714:	0803f78c 	.word	0x0803f78c
 801e718:	0802697c 	.word	0x0802697c

0801e71c <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 801e71c:	4281      	cmp	r1, r0
{
 801e71e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e722:	4606      	mov	r6, r0
 801e724:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 801e726:	d06b      	beq.n	801e800 <ip_reass_free_complete_datagram+0xe4>
  if (prev != NULL) {
 801e728:	b147      	cbz	r7, 801e73c <ip_reass_free_complete_datagram+0x20>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801e72a:	683b      	ldr	r3, [r7, #0]
 801e72c:	42b3      	cmp	r3, r6
 801e72e:	d005      	beq.n	801e73c <ip_reass_free_complete_datagram+0x20>
 801e730:	4b37      	ldr	r3, [pc, #220]	; (801e810 <ip_reass_free_complete_datagram+0xf4>)
 801e732:	22ad      	movs	r2, #173	; 0xad
 801e734:	4937      	ldr	r1, [pc, #220]	; (801e814 <ip_reass_free_complete_datagram+0xf8>)
 801e736:	4838      	ldr	r0, [pc, #224]	; (801e818 <ip_reass_free_complete_datagram+0xfc>)
 801e738:	f002 f946 	bl	80209c8 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801e73c:	6874      	ldr	r4, [r6, #4]
 801e73e:	6863      	ldr	r3, [r4, #4]
  if (iprh->start == 0) {
 801e740:	889a      	ldrh	r2, [r3, #4]
 801e742:	2a00      	cmp	r2, #0
 801e744:	d039      	beq.n	801e7ba <ip_reass_free_complete_datagram+0x9e>
  u16_t pbufs_freed = 0;
 801e746:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801e74a:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801e810 <ip_reass_free_complete_datagram+0xf4>
 801e74e:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 801e828 <ip_reass_free_complete_datagram+0x10c>
 801e752:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 801e818 <ip_reass_free_complete_datagram+0xfc>
 801e756:	e004      	b.n	801e762 <ip_reass_free_complete_datagram+0x46>
    pbuf_free(pcur);
 801e758:	4620      	mov	r0, r4
  while (p != NULL) {
 801e75a:	462c      	mov	r4, r5
    pbuf_free(pcur);
 801e75c:	f7f7 ffdc 	bl	8016718 <pbuf_free>
  while (p != NULL) {
 801e760:	b1b5      	cbz	r5, 801e790 <ip_reass_free_complete_datagram+0x74>
    iprh = (struct ip_reass_helper *)p->payload;
 801e762:	6863      	ldr	r3, [r4, #4]
    clen = pbuf_clen(pcur);
 801e764:	4620      	mov	r0, r4
    p = iprh->next_pbuf;
 801e766:	681d      	ldr	r5, [r3, #0]
    clen = pbuf_clen(pcur);
 801e768:	f7f8 f93e 	bl	80169e8 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801e76c:	4483      	add	fp, r0
 801e76e:	f5bb 3f80 	cmp.w	fp, #65536	; 0x10000
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801e772:	fa1f fb8b 	uxth.w	fp, fp
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801e776:	dbef      	blt.n	801e758 <ip_reass_free_complete_datagram+0x3c>
 801e778:	4653      	mov	r3, sl
 801e77a:	22cc      	movs	r2, #204	; 0xcc
 801e77c:	4649      	mov	r1, r9
 801e77e:	4640      	mov	r0, r8
 801e780:	f002 f922 	bl	80209c8 <iprintf>
    pbuf_free(pcur);
 801e784:	4620      	mov	r0, r4
  while (p != NULL) {
 801e786:	462c      	mov	r4, r5
    pbuf_free(pcur);
 801e788:	f7f7 ffc6 	bl	8016718 <pbuf_free>
  while (p != NULL) {
 801e78c:	2d00      	cmp	r5, #0
 801e78e:	d1e8      	bne.n	801e762 <ip_reass_free_complete_datagram+0x46>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801e790:	4c22      	ldr	r4, [pc, #136]	; (801e81c <ip_reass_free_complete_datagram+0x100>)
  ip_reass_dequeue_datagram(ipr, prev);
 801e792:	4639      	mov	r1, r7
 801e794:	4630      	mov	r0, r6
 801e796:	f7ff ff99 	bl	801e6cc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801e79a:	8823      	ldrh	r3, [r4, #0]
 801e79c:	455b      	cmp	r3, fp
 801e79e:	d206      	bcs.n	801e7ae <ip_reass_free_complete_datagram+0x92>
 801e7a0:	4b1b      	ldr	r3, [pc, #108]	; (801e810 <ip_reass_free_complete_datagram+0xf4>)
 801e7a2:	22d2      	movs	r2, #210	; 0xd2
 801e7a4:	491e      	ldr	r1, [pc, #120]	; (801e820 <ip_reass_free_complete_datagram+0x104>)
 801e7a6:	481c      	ldr	r0, [pc, #112]	; (801e818 <ip_reass_free_complete_datagram+0xfc>)
 801e7a8:	f002 f90e 	bl	80209c8 <iprintf>
 801e7ac:	8823      	ldrh	r3, [r4, #0]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801e7ae:	eba3 030b 	sub.w	r3, r3, fp
}
 801e7b2:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801e7b4:	8023      	strh	r3, [r4, #0]
}
 801e7b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801e7ba:	4632      	mov	r2, r6
    ipr->p = iprh->next_pbuf;
 801e7bc:	6818      	ldr	r0, [r3, #0]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801e7be:	2101      	movs	r1, #1
    ipr->p = iprh->next_pbuf;
 801e7c0:	6070      	str	r0, [r6, #4]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801e7c2:	4620      	mov	r0, r4
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801e7c4:	f852 5f08 	ldr.w	r5, [r2, #8]!
 801e7c8:	f8d2 8004 	ldr.w	r8, [r2, #4]
 801e7cc:	f8d2 e008 	ldr.w	lr, [r2, #8]
 801e7d0:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 801e7d4:	601d      	str	r5, [r3, #0]
 801e7d6:	f8c3 8004 	str.w	r8, [r3, #4]
 801e7da:	f8c3 e008 	str.w	lr, [r3, #8]
 801e7de:	f8c3 c00c 	str.w	ip, [r3, #12]
 801e7e2:	6915      	ldr	r5, [r2, #16]
 801e7e4:	611d      	str	r5, [r3, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801e7e6:	f7ff fc4d 	bl	801e084 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801e7ea:	4620      	mov	r0, r4
 801e7ec:	f7f8 f8fc 	bl	80169e8 <pbuf_clen>
 801e7f0:	4683      	mov	fp, r0
    pbuf_free(p);
 801e7f2:	4620      	mov	r0, r4
 801e7f4:	f7f7 ff90 	bl	8016718 <pbuf_free>
 801e7f8:	6874      	ldr	r4, [r6, #4]
  while (p != NULL) {
 801e7fa:	2c00      	cmp	r4, #0
 801e7fc:	d1a5      	bne.n	801e74a <ip_reass_free_complete_datagram+0x2e>
 801e7fe:	e7c7      	b.n	801e790 <ip_reass_free_complete_datagram+0x74>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 801e800:	4b03      	ldr	r3, [pc, #12]	; (801e810 <ip_reass_free_complete_datagram+0xf4>)
 801e802:	22ab      	movs	r2, #171	; 0xab
 801e804:	4907      	ldr	r1, [pc, #28]	; (801e824 <ip_reass_free_complete_datagram+0x108>)
 801e806:	4804      	ldr	r0, [pc, #16]	; (801e818 <ip_reass_free_complete_datagram+0xfc>)
 801e808:	f002 f8de 	bl	80209c8 <iprintf>
 801e80c:	e78c      	b.n	801e728 <ip_reass_free_complete_datagram+0xc>
 801e80e:	bf00      	nop
 801e810:	0803f750 	.word	0x0803f750
 801e814:	0803f7b4 	.word	0x0803f7b4
 801e818:	0802697c 	.word	0x0802697c
 801e81c:	20022740 	.word	0x20022740
 801e820:	0803f7e8 	.word	0x0803f7e8
 801e824:	0803f7a8 	.word	0x0803f7a8
 801e828:	0803f7c8 	.word	0x0803f7c8

0801e82c <ip_reass_remove_oldest_datagram>:
{
 801e82c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e830:	4605      	mov	r5, r0
 801e832:	460e      	mov	r6, r1
  int pbufs_freed = 0, pbufs_freed_current;
 801e834:	2700      	movs	r7, #0
 801e836:	f8df 8064 	ldr.w	r8, [pc, #100]	; 801e89c <ip_reass_remove_oldest_datagram+0x70>
    r = reassdatagrams;
 801e83a:	f8d8 3000 	ldr.w	r3, [r8]
    while (r != NULL) {
 801e83e:	b1f3      	cbz	r3, 801e87e <ip_reass_remove_oldest_datagram+0x52>
    other_datagrams = 0;
 801e840:	2400      	movs	r4, #0
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801e842:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    oldest_prev = NULL;
 801e846:	4621      	mov	r1, r4
    prev = NULL;
 801e848:	46a4      	mov	ip, r4
    oldest = NULL;
 801e84a:	4620      	mov	r0, r4
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801e84c:	695a      	ldr	r2, [r3, #20]
 801e84e:	4572      	cmp	r2, lr
 801e850:	d018      	beq.n	801e884 <ip_reass_remove_oldest_datagram+0x58>
        other_datagrams++;
 801e852:	3401      	adds	r4, #1
        if (oldest == NULL) {
 801e854:	b120      	cbz	r0, 801e860 <ip_reass_remove_oldest_datagram+0x34>
        } else if (r->timer <= oldest->timer) {
 801e856:	f893 901f 	ldrb.w	r9, [r3, #31]
 801e85a:	7fc2      	ldrb	r2, [r0, #31]
 801e85c:	4591      	cmp	r9, r2
 801e85e:	d801      	bhi.n	801e864 <ip_reass_remove_oldest_datagram+0x38>
 801e860:	4661      	mov	r1, ip
 801e862:	4618      	mov	r0, r3
      if (r->next != NULL) {
 801e864:	681a      	ldr	r2, [r3, #0]
 801e866:	469c      	mov	ip, r3
 801e868:	4613      	mov	r3, r2
 801e86a:	2a00      	cmp	r2, #0
 801e86c:	d1ee      	bne.n	801e84c <ip_reass_remove_oldest_datagram+0x20>
    if (oldest != NULL) {
 801e86e:	b110      	cbz	r0, 801e876 <ip_reass_remove_oldest_datagram+0x4a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801e870:	f7ff ff54 	bl	801e71c <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 801e874:	4407      	add	r7, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801e876:	42b7      	cmp	r7, r6
 801e878:	da01      	bge.n	801e87e <ip_reass_remove_oldest_datagram+0x52>
 801e87a:	2c01      	cmp	r4, #1
 801e87c:	dcdd      	bgt.n	801e83a <ip_reass_remove_oldest_datagram+0xe>
}
 801e87e:	4638      	mov	r0, r7
 801e880:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801e884:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801e888:	699a      	ldr	r2, [r3, #24]
 801e88a:	454a      	cmp	r2, r9
 801e88c:	d1e1      	bne.n	801e852 <ip_reass_remove_oldest_datagram+0x26>
 801e88e:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 801e892:	88aa      	ldrh	r2, [r5, #4]
 801e894:	4591      	cmp	r9, r2
 801e896:	d1dc      	bne.n	801e852 <ip_reass_remove_oldest_datagram+0x26>
 801e898:	e7e4      	b.n	801e864 <ip_reass_remove_oldest_datagram+0x38>
 801e89a:	bf00      	nop
 801e89c:	20022744 	.word	0x20022744

0801e8a0 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801e8a0:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 801e8a2:	4604      	mov	r4, r0
 801e8a4:	b128      	cbz	r0, 801e8b2 <ip_frag_free_pbuf_custom_ref+0x12>
  memp_free(MEMP_FRAG_PBUF, p);
 801e8a6:	4621      	mov	r1, r4
 801e8a8:	2006      	movs	r0, #6
}
 801e8aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 801e8ae:	f7f7 bc59 	b.w	8016164 <memp_free>
  LWIP_ASSERT("p != NULL", p != NULL);
 801e8b2:	4906      	ldr	r1, [pc, #24]	; (801e8cc <ip_frag_free_pbuf_custom_ref+0x2c>)
 801e8b4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801e8b8:	4b05      	ldr	r3, [pc, #20]	; (801e8d0 <ip_frag_free_pbuf_custom_ref+0x30>)
 801e8ba:	4806      	ldr	r0, [pc, #24]	; (801e8d4 <ip_frag_free_pbuf_custom_ref+0x34>)
 801e8bc:	f002 f884 	bl	80209c8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801e8c0:	4621      	mov	r1, r4
 801e8c2:	2006      	movs	r0, #6
}
 801e8c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 801e8c8:	f7f7 bc4c 	b.w	8016164 <memp_free>
 801e8cc:	0803f020 	.word	0x0803f020
 801e8d0:	0803f750 	.word	0x0803f750
 801e8d4:	0802697c 	.word	0x0802697c

0801e8d8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801e8d8:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801e8da:	4604      	mov	r4, r0
 801e8dc:	b140      	cbz	r0, 801e8f0 <ipfrag_free_pbuf_custom+0x18>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 801e8de:	6960      	ldr	r0, [r4, #20]
 801e8e0:	b108      	cbz	r0, 801e8e6 <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 801e8e2:	f7f7 ff19 	bl	8016718 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801e8e6:	4620      	mov	r0, r4
}
 801e8e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 801e8ec:	f7ff bfd8 	b.w	801e8a0 <ip_frag_free_pbuf_custom_ref>
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801e8f0:	4b03      	ldr	r3, [pc, #12]	; (801e900 <ipfrag_free_pbuf_custom+0x28>)
 801e8f2:	f240 22ce 	movw	r2, #718	; 0x2ce
 801e8f6:	4903      	ldr	r1, [pc, #12]	; (801e904 <ipfrag_free_pbuf_custom+0x2c>)
 801e8f8:	4803      	ldr	r0, [pc, #12]	; (801e908 <ipfrag_free_pbuf_custom+0x30>)
 801e8fa:	f002 f865 	bl	80209c8 <iprintf>
 801e8fe:	e7ee      	b.n	801e8de <ipfrag_free_pbuf_custom+0x6>
 801e900:	0803f750 	.word	0x0803f750
 801e904:	0803f80c 	.word	0x0803f80c
 801e908:	0802697c 	.word	0x0802697c

0801e90c <ip_reass_tmr>:
{
 801e90c:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 801e90e:	4b0a      	ldr	r3, [pc, #40]	; (801e938 <ip_reass_tmr+0x2c>)
 801e910:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 801e912:	b180      	cbz	r0, 801e936 <ip_reass_tmr+0x2a>
  struct ip_reassdata *r, *prev = NULL;
 801e914:	2500      	movs	r5, #0
 801e916:	e003      	b.n	801e920 <ip_reass_tmr+0x14>
 801e918:	4605      	mov	r5, r0
      r->timer--;
 801e91a:	77c2      	strb	r2, [r0, #31]
  while (r != NULL) {
 801e91c:	4620      	mov	r0, r4
 801e91e:	b154      	cbz	r4, 801e936 <ip_reass_tmr+0x2a>
    if (r->timer > 0) {
 801e920:	7fc3      	ldrb	r3, [r0, #31]
 801e922:	6804      	ldr	r4, [r0, #0]
      r->timer--;
 801e924:	1e5a      	subs	r2, r3, #1
    if (r->timer > 0) {
 801e926:	2b00      	cmp	r3, #0
 801e928:	d1f6      	bne.n	801e918 <ip_reass_tmr+0xc>
      ip_reass_free_complete_datagram(tmp, prev);
 801e92a:	4629      	mov	r1, r5
 801e92c:	f7ff fef6 	bl	801e71c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801e930:	4620      	mov	r0, r4
 801e932:	2c00      	cmp	r4, #0
 801e934:	d1f4      	bne.n	801e920 <ip_reass_tmr+0x14>
}
 801e936:	bd38      	pop	{r3, r4, r5, pc}
 801e938:	20022744 	.word	0x20022744

0801e93c <ip4_reass>:
{
 801e93c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  IPFRAG_STATS_INC(ip_frag.recv);
 801e940:	4eb7      	ldr	r6, [pc, #732]	; (801ec20 <ip4_reass+0x2e4>)
{
 801e942:	b085      	sub	sp, #20
  fraghdr = (struct ip_hdr *)p->payload;
 801e944:	6845      	ldr	r5, [r0, #4]
{
 801e946:	4680      	mov	r8, r0
  IPFRAG_STATS_INC(ip_frag.recv);
 801e948:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 801e94a:	3301      	adds	r3, #1
 801e94c:	8673      	strh	r3, [r6, #50]	; 0x32
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801e94e:	782b      	ldrb	r3, [r5, #0]
 801e950:	f003 030f 	and.w	r3, r3, #15
 801e954:	2b05      	cmp	r3, #5
 801e956:	f040 80f8 	bne.w	801eb4a <ip4_reass+0x20e>
  offset = IPH_OFFSET_BYTES(fraghdr);
 801e95a:	88e8      	ldrh	r0, [r5, #6]
 801e95c:	f7f6 f86e 	bl	8014a3c <lwip_htons>
 801e960:	f3c0 030c 	ubfx	r3, r0, #0, #13
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801e964:	8868      	ldrh	r0, [r5, #2]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801e966:	00db      	lsls	r3, r3, #3
 801e968:	9301      	str	r3, [sp, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801e96a:	f7f6 f867 	bl	8014a3c <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 801e96e:	782b      	ldrb	r3, [r5, #0]
 801e970:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 801e974:	009b      	lsls	r3, r3, #2
 801e976:	4283      	cmp	r3, r0
 801e978:	f200 80dc 	bhi.w	801eb34 <ip4_reass+0x1f8>
  len = (u16_t)(len - hlen);
 801e97c:	1ac3      	subs	r3, r0, r3
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801e97e:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 801ec34 <ip4_reass+0x2f8>
  clen = pbuf_clen(p);
 801e982:	4640      	mov	r0, r8
  len = (u16_t)(len - hlen);
 801e984:	b29b      	uxth	r3, r3
 801e986:	9302      	str	r3, [sp, #8]
  clen = pbuf_clen(p);
 801e988:	f7f8 f82e 	bl	80169e8 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801e98c:	f8ba 3000 	ldrh.w	r3, [sl]
  clen = pbuf_clen(p);
 801e990:	4683      	mov	fp, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801e992:	4403      	add	r3, r0
 801e994:	2b0a      	cmp	r3, #10
 801e996:	f300 80de 	bgt.w	801eb56 <ip4_reass+0x21a>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801e99a:	4ba2      	ldr	r3, [pc, #648]	; (801ec24 <ip4_reass+0x2e8>)
 801e99c:	681c      	ldr	r4, [r3, #0]
 801e99e:	2c00      	cmp	r4, #0
 801e9a0:	f000 8094 	beq.w	801eacc <ip4_reass+0x190>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801e9a4:	68ea      	ldr	r2, [r5, #12]
 801e9a6:	e003      	b.n	801e9b0 <ip4_reass+0x74>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801e9a8:	6824      	ldr	r4, [r4, #0]
 801e9aa:	2c00      	cmp	r4, #0
 801e9ac:	f000 808e 	beq.w	801eacc <ip4_reass+0x190>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801e9b0:	6963      	ldr	r3, [r4, #20]
 801e9b2:	4293      	cmp	r3, r2
 801e9b4:	d1f8      	bne.n	801e9a8 <ip4_reass+0x6c>
 801e9b6:	692b      	ldr	r3, [r5, #16]
 801e9b8:	69a1      	ldr	r1, [r4, #24]
 801e9ba:	4299      	cmp	r1, r3
 801e9bc:	d1f4      	bne.n	801e9a8 <ip4_reass+0x6c>
 801e9be:	89a1      	ldrh	r1, [r4, #12]
 801e9c0:	88ab      	ldrh	r3, [r5, #4]
 801e9c2:	4299      	cmp	r1, r3
 801e9c4:	d1f0      	bne.n	801e9a8 <ip4_reass+0x6c>
      IPFRAG_STATS_INC(ip_frag.cachehit);
 801e9c6:	f8b6 3046 	ldrh.w	r3, [r6, #70]	; 0x46
 801e9ca:	3301      	adds	r3, #1
 801e9cc:	f8a6 3046 	strh.w	r3, [r6, #70]	; 0x46
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801e9d0:	88e8      	ldrh	r0, [r5, #6]
 801e9d2:	f7f6 f833 	bl	8014a3c <lwip_htons>
 801e9d6:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801e9da:	2800      	cmp	r0, #0
 801e9dc:	f000 810d 	beq.w	801ebfa <ip4_reass+0x2be>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801e9e0:	88eb      	ldrh	r3, [r5, #6]
  if (is_last) {
 801e9e2:	f013 0320 	ands.w	r3, r3, #32
 801e9e6:	9303      	str	r3, [sp, #12]
 801e9e8:	d10b      	bne.n	801ea02 <ip4_reass+0xc6>
    u16_t datagram_len = (u16_t)(offset + len);
 801e9ea:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801e9ee:	18d3      	adds	r3, r2, r3
 801e9f0:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801e9f2:	429a      	cmp	r2, r3
 801e9f4:	f200 808d 	bhi.w	801eb12 <ip4_reass+0x1d6>
 801e9f8:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801e9fc:	4293      	cmp	r3, r2
 801e9fe:	f200 8088 	bhi.w	801eb12 <ip4_reass+0x1d6>
  fraghdr = (struct ip_hdr *)new_p->payload;
 801ea02:	f8d8 5004 	ldr.w	r5, [r8, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801ea06:	8868      	ldrh	r0, [r5, #2]
 801ea08:	f7f6 f818 	bl	8014a3c <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 801ea0c:	782b      	ldrb	r3, [r5, #0]
 801ea0e:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 801ea12:	009b      	lsls	r3, r3, #2
 801ea14:	4298      	cmp	r0, r3
 801ea16:	d37c      	bcc.n	801eb12 <ip4_reass+0x1d6>
  len = (u16_t)(len - hlen);
 801ea18:	1ac3      	subs	r3, r0, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 801ea1a:	88e8      	ldrh	r0, [r5, #6]
  len = (u16_t)(len - hlen);
 801ea1c:	b29d      	uxth	r5, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 801ea1e:	f7f6 f80d 	bl	8014a3c <lwip_htons>
 801ea22:	f3c0 000c 	ubfx	r0, r0, #0, #13
  iprh = (struct ip_reass_helper *)new_p->payload;
 801ea26:	f8d8 9004 	ldr.w	r9, [r8, #4]
  iprh->next_pbuf = NULL;
 801ea2a:	2200      	movs	r2, #0
  offset = IPH_OFFSET_BYTES(fraghdr);
 801ea2c:	00c0      	lsls	r0, r0, #3
  iprh->next_pbuf = NULL;
 801ea2e:	f889 2000 	strb.w	r2, [r9]
  iprh->end = (u16_t)(offset + len);
 801ea32:	eb05 0c00 	add.w	ip, r5, r0
  iprh->next_pbuf = NULL;
 801ea36:	f889 2001 	strb.w	r2, [r9, #1]
 801ea3a:	f889 2002 	strb.w	r2, [r9, #2]
  iprh->end = (u16_t)(offset + len);
 801ea3e:	fa1f fc8c 	uxth.w	ip, ip
  iprh->next_pbuf = NULL;
 801ea42:	f889 2003 	strb.w	r2, [r9, #3]
  iprh->start = offset;
 801ea46:	f8a9 0004 	strh.w	r0, [r9, #4]
  if (iprh->end < offset) {
 801ea4a:	4560      	cmp	r0, ip
  iprh->end = (u16_t)(offset + len);
 801ea4c:	f8a9 c006 	strh.w	ip, [r9, #6]
 801ea50:	6863      	ldr	r3, [r4, #4]
  if (iprh->end < offset) {
 801ea52:	d85f      	bhi.n	801eb14 <ip4_reass+0x1d8>
  for (q = ipr->p; q != NULL;) {
 801ea54:	2b00      	cmp	r3, #0
 801ea56:	f000 818c 	beq.w	801ed72 <ip4_reass+0x436>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801ea5a:	685d      	ldr	r5, [r3, #4]
    if (iprh->start < iprh_tmp->start) {
 801ea5c:	88aa      	ldrh	r2, [r5, #4]
 801ea5e:	4290      	cmp	r0, r2
 801ea60:	f0c0 80b9 	bcc.w	801ebd6 <ip4_reass+0x29a>
    } else if (iprh->start == iprh_tmp->start) {
 801ea64:	d066      	beq.n	801eb34 <ip4_reass+0x1f8>
    } else if (iprh->start < iprh_tmp->end) {
 801ea66:	88eb      	ldrh	r3, [r5, #6]
 801ea68:	4283      	cmp	r3, r0
 801ea6a:	d863      	bhi.n	801eb34 <ip4_reass+0x1f8>
    q = iprh_tmp->next_pbuf;
 801ea6c:	682a      	ldr	r2, [r5, #0]
  int valid = 1;
 801ea6e:	2701      	movs	r7, #1
  for (q = ipr->p; q != NULL;) {
 801ea70:	b182      	cbz	r2, 801ea94 <ip4_reass+0x158>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801ea72:	6853      	ldr	r3, [r2, #4]
    if (iprh->start < iprh_tmp->start) {
 801ea74:	8899      	ldrh	r1, [r3, #4]
 801ea76:	4288      	cmp	r0, r1
 801ea78:	f0c0 808c 	bcc.w	801eb94 <ip4_reass+0x258>
    } else if (iprh->start == iprh_tmp->start) {
 801ea7c:	d05a      	beq.n	801eb34 <ip4_reass+0x1f8>
    } else if (iprh->start < iprh_tmp->end) {
 801ea7e:	88da      	ldrh	r2, [r3, #6]
 801ea80:	4282      	cmp	r2, r0
 801ea82:	d857      	bhi.n	801eb34 <ip4_reass+0x1f8>
        if (iprh_prev->end != iprh_tmp->start) {
 801ea84:	88ea      	ldrh	r2, [r5, #6]
          valid = 0;
 801ea86:	461d      	mov	r5, r3
 801ea88:	428a      	cmp	r2, r1
 801ea8a:	bf18      	it	ne
 801ea8c:	2700      	movne	r7, #0
    q = iprh_tmp->next_pbuf;
 801ea8e:	682a      	ldr	r2, [r5, #0]
  for (q = ipr->p; q != NULL;) {
 801ea90:	2a00      	cmp	r2, #0
 801ea92:	d1ee      	bne.n	801ea72 <ip4_reass+0x136>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801ea94:	88eb      	ldrh	r3, [r5, #6]
 801ea96:	4298      	cmp	r0, r3
 801ea98:	f0c0 8179 	bcc.w	801ed8e <ip4_reass+0x452>
      if (iprh_prev->end != iprh->start) {
 801ea9c:	4298      	cmp	r0, r3
      iprh_prev->next_pbuf = new_p;
 801ea9e:	f8c5 8000 	str.w	r8, [r5]
      if (iprh_prev->end != iprh->start) {
 801eaa2:	f000 8082 	beq.w	801ebaa <ip4_reass+0x26e>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801eaa6:	9b03      	ldr	r3, [sp, #12]
 801eaa8:	2b00      	cmp	r3, #0
 801eaaa:	f040 813a 	bne.w	801ed22 <ip4_reass+0x3e6>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801eaae:	f8ba 3000 	ldrh.w	r3, [sl]
 801eab2:	449b      	add	fp, r3
 801eab4:	f8aa b000 	strh.w	fp, [sl]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801eab8:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 801eaba:	e9dd 2101 	ldrd	r2, r1, [sp, #4]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801eabe:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 801eac2:	440a      	add	r2, r1
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801eac4:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 801eac6:	83a2      	strh	r2, [r4, #28]
  return NULL;
 801eac8:	2700      	movs	r7, #0
 801eaca:	e03a      	b.n	801eb42 <ip4_reass+0x206>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801eacc:	f44f 728f 	mov.w	r2, #286	; 0x11e
 801ead0:	4955      	ldr	r1, [pc, #340]	; (801ec28 <ip4_reass+0x2ec>)
 801ead2:	2005      	movs	r0, #5
 801ead4:	f7f7 fb22 	bl	801611c <memp_malloc_fn>
  if (ipr == NULL) {
 801ead8:	4604      	mov	r4, r0
 801eada:	2800      	cmp	r0, #0
 801eadc:	d04a      	beq.n	801eb74 <ip4_reass+0x238>
  ipr->next = reassdatagrams;
 801eade:	4951      	ldr	r1, [pc, #324]	; (801ec24 <ip4_reass+0x2e8>)
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801eae0:	2200      	movs	r2, #0
  ipr->timer = IP_REASS_MAXAGE;
 801eae2:	270f      	movs	r7, #15
  ipr->next = reassdatagrams;
 801eae4:	6809      	ldr	r1, [r1, #0]
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801eae6:	60a2      	str	r2, [r4, #8]
 801eae8:	60e2      	str	r2, [r4, #12]
 801eaea:	6122      	str	r2, [r4, #16]
 801eaec:	6162      	str	r2, [r4, #20]
 801eaee:	61a2      	str	r2, [r4, #24]
 801eaf0:	61e2      	str	r2, [r4, #28]
 801eaf2:	6062      	str	r2, [r4, #4]
  ipr->timer = IP_REASS_MAXAGE;
 801eaf4:	77e7      	strb	r7, [r4, #31]
  ipr->next = reassdatagrams;
 801eaf6:	6021      	str	r1, [r4, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801eaf8:	682b      	ldr	r3, [r5, #0]
 801eafa:	68a9      	ldr	r1, [r5, #8]
 801eafc:	686f      	ldr	r7, [r5, #4]
 801eafe:	68ea      	ldr	r2, [r5, #12]
 801eb00:	6121      	str	r1, [r4, #16]
 801eb02:	60a3      	str	r3, [r4, #8]
 801eb04:	60e7      	str	r7, [r4, #12]
 801eb06:	6162      	str	r2, [r4, #20]
  reassdatagrams = ipr;
 801eb08:	4946      	ldr	r1, [pc, #280]	; (801ec24 <ip4_reass+0x2e8>)
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801eb0a:	692b      	ldr	r3, [r5, #16]
  reassdatagrams = ipr;
 801eb0c:	600c      	str	r4, [r1, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801eb0e:	61a3      	str	r3, [r4, #24]
 801eb10:	e766      	b.n	801e9e0 <ip4_reass+0xa4>
 801eb12:	6863      	ldr	r3, [r4, #4]
  if (ipr->p == NULL) {
 801eb14:	b973      	cbnz	r3, 801eb34 <ip4_reass+0x1f8>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801eb16:	4b43      	ldr	r3, [pc, #268]	; (801ec24 <ip4_reass+0x2e8>)
 801eb18:	681b      	ldr	r3, [r3, #0]
 801eb1a:	42a3      	cmp	r3, r4
 801eb1c:	d006      	beq.n	801eb2c <ip4_reass+0x1f0>
 801eb1e:	4b42      	ldr	r3, [pc, #264]	; (801ec28 <ip4_reass+0x2ec>)
 801eb20:	f240 22ab 	movw	r2, #683	; 0x2ab
 801eb24:	4941      	ldr	r1, [pc, #260]	; (801ec2c <ip4_reass+0x2f0>)
 801eb26:	4842      	ldr	r0, [pc, #264]	; (801ec30 <ip4_reass+0x2f4>)
 801eb28:	f001 ff4e 	bl	80209c8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801eb2c:	4620      	mov	r0, r4
 801eb2e:	2100      	movs	r1, #0
 801eb30:	f7ff fdcc 	bl	801e6cc <ip_reass_dequeue_datagram>
  IPFRAG_STATS_INC(ip_frag.drop);
 801eb34:	8ef3      	ldrh	r3, [r6, #54]	; 0x36
  pbuf_free(p);
 801eb36:	4640      	mov	r0, r8
  return NULL;
 801eb38:	2700      	movs	r7, #0
  IPFRAG_STATS_INC(ip_frag.drop);
 801eb3a:	3301      	adds	r3, #1
 801eb3c:	86f3      	strh	r3, [r6, #54]	; 0x36
  pbuf_free(p);
 801eb3e:	f7f7 fdeb 	bl	8016718 <pbuf_free>
}
 801eb42:	4638      	mov	r0, r7
 801eb44:	b005      	add	sp, #20
 801eb46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    IPFRAG_STATS_INC(ip_frag.err);
 801eb4a:	f8b6 3044 	ldrh.w	r3, [r6, #68]	; 0x44
 801eb4e:	3301      	adds	r3, #1
 801eb50:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
    goto nullreturn;
 801eb54:	e7ee      	b.n	801eb34 <ip4_reass+0x1f8>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801eb56:	4601      	mov	r1, r0
 801eb58:	4628      	mov	r0, r5
 801eb5a:	f7ff fe67 	bl	801e82c <ip_reass_remove_oldest_datagram>
 801eb5e:	b128      	cbz	r0, 801eb6c <ip4_reass+0x230>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801eb60:	f8ba 3000 	ldrh.w	r3, [sl]
 801eb64:	445b      	add	r3, fp
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801eb66:	2b0a      	cmp	r3, #10
 801eb68:	f77f af17 	ble.w	801e99a <ip4_reass+0x5e>
      IPFRAG_STATS_INC(ip_frag.memerr);
 801eb6c:	8fb3      	ldrh	r3, [r6, #60]	; 0x3c
 801eb6e:	3301      	adds	r3, #1
 801eb70:	87b3      	strh	r3, [r6, #60]	; 0x3c
 801eb72:	e7df      	b.n	801eb34 <ip4_reass+0x1f8>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801eb74:	4659      	mov	r1, fp
 801eb76:	4628      	mov	r0, r5
 801eb78:	f7ff fe58 	bl	801e82c <ip_reass_remove_oldest_datagram>
 801eb7c:	4583      	cmp	fp, r0
 801eb7e:	dcf5      	bgt.n	801eb6c <ip4_reass+0x230>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801eb80:	f44f 7291 	mov.w	r2, #290	; 0x122
 801eb84:	4928      	ldr	r1, [pc, #160]	; (801ec28 <ip4_reass+0x2ec>)
 801eb86:	2005      	movs	r0, #5
 801eb88:	f7f7 fac8 	bl	801611c <memp_malloc_fn>
    if (ipr == NULL)
 801eb8c:	4604      	mov	r4, r0
 801eb8e:	2800      	cmp	r0, #0
 801eb90:	d1a5      	bne.n	801eade <ip4_reass+0x1a2>
 801eb92:	e7eb      	b.n	801eb6c <ip4_reass+0x230>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801eb94:	458c      	cmp	ip, r1
      iprh->next_pbuf = q;
 801eb96:	f8c9 2000 	str.w	r2, [r9]
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801eb9a:	88eb      	ldrh	r3, [r5, #6]
 801eb9c:	d8ca      	bhi.n	801eb34 <ip4_reass+0x1f8>
 801eb9e:	4298      	cmp	r0, r3
 801eba0:	d3c8      	bcc.n	801eb34 <ip4_reass+0x1f8>
        iprh_prev->next_pbuf = new_p;
 801eba2:	f8c5 8000 	str.w	r8, [r5]
        if (iprh_prev->end != iprh->start) {
 801eba6:	f47f af7e 	bne.w	801eaa6 <ip4_reass+0x16a>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801ebaa:	9b03      	ldr	r3, [sp, #12]
 801ebac:	2b00      	cmp	r3, #0
 801ebae:	d043      	beq.n	801ec38 <ip4_reass+0x2fc>
 801ebb0:	7fa3      	ldrb	r3, [r4, #30]
 801ebb2:	07d9      	lsls	r1, r3, #31
 801ebb4:	d51a      	bpl.n	801ebec <ip4_reass+0x2b0>
    if (valid) {
 801ebb6:	2f00      	cmp	r7, #0
 801ebb8:	f000 80b7 	beq.w	801ed2a <ip4_reass+0x3ee>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801ebbc:	6863      	ldr	r3, [r4, #4]
 801ebbe:	2b00      	cmp	r3, #0
 801ebc0:	d141      	bne.n	801ec46 <ip4_reass+0x30a>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801ebc2:	f8ba 3000 	ldrh.w	r3, [sl]
 801ebc6:	449b      	add	fp, r3
  if (is_last) {
 801ebc8:	9b03      	ldr	r3, [sp, #12]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801ebca:	f8aa b000 	strh.w	fp, [sl]
  if (is_last) {
 801ebce:	2b00      	cmp	r3, #0
 801ebd0:	f43f af72 	beq.w	801eab8 <ip4_reass+0x17c>
 801ebd4:	e778      	b.n	801eac8 <ip4_reass+0x18c>
        if (iprh->end > iprh_tmp->start) {
 801ebd6:	4594      	cmp	ip, r2
      iprh->next_pbuf = q;
 801ebd8:	f8c9 3000 	str.w	r3, [r9]
        if (iprh->end > iprh_tmp->start) {
 801ebdc:	d8aa      	bhi.n	801eb34 <ip4_reass+0x1f8>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801ebde:	9b03      	ldr	r3, [sp, #12]
        ipr->p = new_p;
 801ebe0:	f8c4 8004 	str.w	r8, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801ebe4:	b35b      	cbz	r3, 801ec3e <ip4_reass+0x302>
 801ebe6:	7fa3      	ldrb	r3, [r4, #30]
 801ebe8:	07db      	lsls	r3, r3, #31
 801ebea:	d4e7      	bmi.n	801ebbc <ip4_reass+0x280>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801ebec:	f8ba 3000 	ldrh.w	r3, [sl]
  return NULL;
 801ebf0:	2700      	movs	r7, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801ebf2:	449b      	add	fp, r3
 801ebf4:	f8aa b000 	strh.w	fp, [sl]
 801ebf8:	e7a3      	b.n	801eb42 <ip4_reass+0x206>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801ebfa:	89e0      	ldrh	r0, [r4, #14]
 801ebfc:	f7f5 ff1e 	bl	8014a3c <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801ec00:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801ec04:	2800      	cmp	r0, #0
 801ec06:	f43f aeeb 	beq.w	801e9e0 <ip4_reass+0xa4>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801ec0a:	682a      	ldr	r2, [r5, #0]
 801ec0c:	686f      	ldr	r7, [r5, #4]
 801ec0e:	68a8      	ldr	r0, [r5, #8]
 801ec10:	68e9      	ldr	r1, [r5, #12]
 801ec12:	60a2      	str	r2, [r4, #8]
 801ec14:	60e7      	str	r7, [r4, #12]
 801ec16:	6120      	str	r0, [r4, #16]
 801ec18:	6161      	str	r1, [r4, #20]
 801ec1a:	692a      	ldr	r2, [r5, #16]
 801ec1c:	61a2      	str	r2, [r4, #24]
 801ec1e:	e6df      	b.n	801e9e0 <ip4_reass+0xa4>
 801ec20:	20036164 	.word	0x20036164
 801ec24:	20022744 	.word	0x20022744
 801ec28:	0803f750 	.word	0x0803f750
 801ec2c:	0803f730 	.word	0x0803f730
 801ec30:	0802697c 	.word	0x0802697c
 801ec34:	20022740 	.word	0x20022740
    if (valid) {
 801ec38:	2f00      	cmp	r7, #0
 801ec3a:	f43f af38 	beq.w	801eaae <ip4_reass+0x172>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801ec3e:	6863      	ldr	r3, [r4, #4]
 801ec40:	2b00      	cmp	r3, #0
 801ec42:	f43f af34 	beq.w	801eaae <ip4_reass+0x172>
 801ec46:	6858      	ldr	r0, [r3, #4]
 801ec48:	8883      	ldrh	r3, [r0, #4]
 801ec4a:	2b00      	cmp	r3, #0
 801ec4c:	d1b9      	bne.n	801ebc2 <ip4_reass+0x286>
        q = iprh->next_pbuf;
 801ec4e:	f8d9 3000 	ldr.w	r3, [r9]
        while (q != NULL) {
 801ec52:	2b00      	cmp	r3, #0
 801ec54:	f000 80a6 	beq.w	801eda4 <ip4_reass+0x468>
          iprh = (struct ip_reass_helper *)q->payload;
 801ec58:	685d      	ldr	r5, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 801ec5a:	f8b9 3006 	ldrh.w	r3, [r9, #6]
 801ec5e:	88aa      	ldrh	r2, [r5, #4]
 801ec60:	429a      	cmp	r2, r3
 801ec62:	d006      	beq.n	801ec72 <ip4_reass+0x336>
 801ec64:	e7ad      	b.n	801ebc2 <ip4_reass+0x286>
          iprh = (struct ip_reass_helper *)q->payload;
 801ec66:	685b      	ldr	r3, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 801ec68:	88e9      	ldrh	r1, [r5, #6]
 801ec6a:	889a      	ldrh	r2, [r3, #4]
 801ec6c:	461d      	mov	r5, r3
 801ec6e:	4291      	cmp	r1, r2
 801ec70:	d1a7      	bne.n	801ebc2 <ip4_reass+0x286>
          q = iprh->next_pbuf;
 801ec72:	682b      	ldr	r3, [r5, #0]
        while (q != NULL) {
 801ec74:	2b00      	cmp	r3, #0
 801ec76:	d1f6      	bne.n	801ec66 <ip4_reass+0x32a>
          LWIP_ASSERT("sanity check",
 801ec78:	4285      	cmp	r5, r0
 801ec7a:	d10f      	bne.n	801ec9c <ip4_reass+0x360>
 801ec7c:	4b50      	ldr	r3, [pc, #320]	; (801edc0 <ip4_reass+0x484>)
 801ec7e:	f240 12e1 	movw	r2, #481	; 0x1e1
 801ec82:	4950      	ldr	r1, [pc, #320]	; (801edc4 <ip4_reass+0x488>)
 801ec84:	4850      	ldr	r0, [pc, #320]	; (801edc8 <ip4_reass+0x48c>)
 801ec86:	f001 fe9f 	bl	80209c8 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801ec8a:	682b      	ldr	r3, [r5, #0]
 801ec8c:	b133      	cbz	r3, 801ec9c <ip4_reass+0x360>
 801ec8e:	4b4c      	ldr	r3, [pc, #304]	; (801edc0 <ip4_reass+0x484>)
 801ec90:	f240 12e3 	movw	r2, #483	; 0x1e3
 801ec94:	494d      	ldr	r1, [pc, #308]	; (801edcc <ip4_reass+0x490>)
 801ec96:	484c      	ldr	r0, [pc, #304]	; (801edc8 <ip4_reass+0x48c>)
 801ec98:	f001 fe96 	bl	80209c8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801ec9c:	f8ba 3000 	ldrh.w	r3, [sl]
 801eca0:	449b      	add	fp, r3
  if (is_last) {
 801eca2:	9b03      	ldr	r3, [sp, #12]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801eca4:	f8aa b000 	strh.w	fp, [sl]
  if (is_last) {
 801eca8:	2b00      	cmp	r3, #0
 801ecaa:	d07d      	beq.n	801eda8 <ip4_reass+0x46c>
 801ecac:	8ba0      	ldrh	r0, [r4, #28]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801ecae:	4623      	mov	r3, r4
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801ecb0:	6861      	ldr	r1, [r4, #4]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801ecb2:	3014      	adds	r0, #20
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801ecb4:	f853 2f08 	ldr.w	r2, [r3, #8]!
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801ecb8:	684e      	ldr	r6, [r1, #4]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801ecba:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801ecbc:	685f      	ldr	r7, [r3, #4]
 801ecbe:	689d      	ldr	r5, [r3, #8]
 801ecc0:	68d9      	ldr	r1, [r3, #12]
 801ecc2:	6077      	str	r7, [r6, #4]
 801ecc4:	60b5      	str	r5, [r6, #8]
 801ecc6:	60f1      	str	r1, [r6, #12]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801ecc8:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801ecca:	6032      	str	r2, [r6, #0]
 801eccc:	691a      	ldr	r2, [r3, #16]
 801ecce:	6132      	str	r2, [r6, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801ecd0:	f7f5 feb4 	bl	8014a3c <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 801ecd4:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801ecd6:	8070      	strh	r0, [r6, #2]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 801ecd8:	2114      	movs	r1, #20
    IPH_OFFSET_SET(fraghdr, 0);
 801ecda:	71b3      	strb	r3, [r6, #6]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 801ecdc:	4630      	mov	r0, r6
    IPH_OFFSET_SET(fraghdr, 0);
 801ecde:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801ece0:	72b3      	strb	r3, [r6, #10]
 801ece2:	72f3      	strb	r3, [r6, #11]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 801ece4:	f7f6 fc68 	bl	80155b8 <inet_chksum>
    p = ipr->p;
 801ece8:	6867      	ldr	r7, [r4, #4]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 801ecea:	8170      	strh	r0, [r6, #10]
    while (r != NULL) {
 801ecec:	b15d      	cbz	r5, 801ed06 <ip4_reass+0x3ca>
      iprh = (struct ip_reass_helper *)r->payload;
 801ecee:	686e      	ldr	r6, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 801ecf0:	2114      	movs	r1, #20
 801ecf2:	4628      	mov	r0, r5
 801ecf4:	f7f7 fcd4 	bl	80166a0 <pbuf_remove_header>
      pbuf_cat(p, r);
 801ecf8:	4629      	mov	r1, r5
 801ecfa:	4638      	mov	r0, r7
 801ecfc:	f7f7 fe94 	bl	8016a28 <pbuf_cat>
      r = iprh->next_pbuf;
 801ed00:	6835      	ldr	r5, [r6, #0]
    while (r != NULL) {
 801ed02:	2d00      	cmp	r5, #0
 801ed04:	d1f3      	bne.n	801ecee <ip4_reass+0x3b2>
    if (ipr == reassdatagrams) {
 801ed06:	4b32      	ldr	r3, [pc, #200]	; (801edd0 <ip4_reass+0x494>)
 801ed08:	681b      	ldr	r3, [r3, #0]
 801ed0a:	42a3      	cmp	r3, r4
 801ed0c:	d02f      	beq.n	801ed6e <ip4_reass+0x432>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801ed0e:	b193      	cbz	r3, 801ed36 <ip4_reass+0x3fa>
        if (ipr_prev->next == ipr) {
 801ed10:	6819      	ldr	r1, [r3, #0]
 801ed12:	428c      	cmp	r4, r1
 801ed14:	d00f      	beq.n	801ed36 <ip4_reass+0x3fa>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801ed16:	b179      	cbz	r1, 801ed38 <ip4_reass+0x3fc>
        if (ipr_prev->next == ipr) {
 801ed18:	680b      	ldr	r3, [r1, #0]
 801ed1a:	42a3      	cmp	r3, r4
 801ed1c:	d00c      	beq.n	801ed38 <ip4_reass+0x3fc>
 801ed1e:	4619      	mov	r1, r3
 801ed20:	e7f9      	b.n	801ed16 <ip4_reass+0x3da>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801ed22:	7fa3      	ldrb	r3, [r4, #30]
 801ed24:	07da      	lsls	r2, r3, #31
 801ed26:	f57f af61 	bpl.w	801ebec <ip4_reass+0x2b0>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801ed2a:	f8ba 3000 	ldrh.w	r3, [sl]
 801ed2e:	449b      	add	fp, r3
 801ed30:	f8aa b000 	strh.w	fp, [sl]
 801ed34:	e6c8      	b.n	801eac8 <ip4_reass+0x18c>
        if (ipr_prev->next == ipr) {
 801ed36:	4619      	mov	r1, r3
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801ed38:	4620      	mov	r0, r4
 801ed3a:	f7ff fcc7 	bl	801e6cc <ip_reass_dequeue_datagram>
    clen = pbuf_clen(p);
 801ed3e:	4638      	mov	r0, r7
 801ed40:	f7f7 fe52 	bl	80169e8 <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801ed44:	f8ba 3000 	ldrh.w	r3, [sl]
    clen = pbuf_clen(p);
 801ed48:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801ed4a:	4283      	cmp	r3, r0
 801ed4c:	d208      	bcs.n	801ed60 <ip4_reass+0x424>
 801ed4e:	4b1c      	ldr	r3, [pc, #112]	; (801edc0 <ip4_reass+0x484>)
 801ed50:	f240 229b 	movw	r2, #667	; 0x29b
 801ed54:	491f      	ldr	r1, [pc, #124]	; (801edd4 <ip4_reass+0x498>)
 801ed56:	481c      	ldr	r0, [pc, #112]	; (801edc8 <ip4_reass+0x48c>)
 801ed58:	f001 fe36 	bl	80209c8 <iprintf>
 801ed5c:	f8ba 3000 	ldrh.w	r3, [sl]
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801ed60:	1b1b      	subs	r3, r3, r4
}
 801ed62:	4638      	mov	r0, r7
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801ed64:	f8aa 3000 	strh.w	r3, [sl]
}
 801ed68:	b005      	add	sp, #20
 801ed6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ipr_prev = NULL;
 801ed6e:	2100      	movs	r1, #0
 801ed70:	e7e2      	b.n	801ed38 <ip4_reass+0x3fc>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801ed72:	9b03      	ldr	r3, [sp, #12]
      ipr->p = new_p;
 801ed74:	f8c4 8004 	str.w	r8, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801ed78:	2b00      	cmp	r3, #0
 801ed7a:	f43f af60 	beq.w	801ec3e <ip4_reass+0x302>
 801ed7e:	7fa3      	ldrb	r3, [r4, #30]
 801ed80:	07d8      	lsls	r0, r3, #31
 801ed82:	f57f af33 	bpl.w	801ebec <ip4_reass+0x2b0>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801ed86:	4643      	mov	r3, r8
 801ed88:	2b00      	cmp	r3, #0
 801ed8a:	d0ce      	beq.n	801ed2a <ip4_reass+0x3ee>
 801ed8c:	e75b      	b.n	801ec46 <ip4_reass+0x30a>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801ed8e:	4b0c      	ldr	r3, [pc, #48]	; (801edc0 <ip4_reass+0x484>)
 801ed90:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801ed94:	4910      	ldr	r1, [pc, #64]	; (801edd8 <ip4_reass+0x49c>)
 801ed96:	480c      	ldr	r0, [pc, #48]	; (801edc8 <ip4_reass+0x48c>)
 801ed98:	f001 fe16 	bl	80209c8 <iprintf>
 801ed9c:	88eb      	ldrh	r3, [r5, #6]
 801ed9e:	f8b9 0004 	ldrh.w	r0, [r9, #4]
 801eda2:	e67b      	b.n	801ea9c <ip4_reass+0x160>
        while (q != NULL) {
 801eda4:	464d      	mov	r5, r9
 801eda6:	e767      	b.n	801ec78 <ip4_reass+0x33c>
    u16_t datagram_len = (u16_t)(offset + len);
 801eda8:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 801edac:	4413      	add	r3, r2
 801edae:	4618      	mov	r0, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801edb0:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 801edb2:	b280      	uxth	r0, r0
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801edb4:	f043 0301 	orr.w	r3, r3, #1
    ipr->datagram_len = datagram_len;
 801edb8:	83a0      	strh	r0, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801edba:	77a3      	strb	r3, [r4, #30]
 801edbc:	e777      	b.n	801ecae <ip4_reass+0x372>
 801edbe:	bf00      	nop
 801edc0:	0803f750 	.word	0x0803f750
 801edc4:	0803f6e0 	.word	0x0803f6e0
 801edc8:	0802697c 	.word	0x0802697c
 801edcc:	0803f6f0 	.word	0x0803f6f0
 801edd0:	20022744 	.word	0x20022744
 801edd4:	0803f714 	.word	0x0803f714
 801edd8:	0803f6c0 	.word	0x0803f6c0

0801eddc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801eddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801ede0:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
{
 801ede2:	b08d      	sub	sp, #52	; 0x34
 801ede4:	4605      	mov	r5, r0
 801ede6:	920a      	str	r2, [sp, #40]	; 0x28
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801ede8:	f1b3 0214 	subs.w	r2, r3, #20
{
 801edec:	9105      	str	r1, [sp, #20]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801edee:	bf48      	it	mi
 801edf0:	f1a3 020d 	submi.w	r2, r3, #13
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801edf4:	6843      	ldr	r3, [r0, #4]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801edf6:	781c      	ldrb	r4, [r3, #0]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801edf8:	f3c2 02cf 	ubfx	r2, r2, #3, #16
  original_iphdr = (struct ip_hdr *)p->payload;
 801edfc:	9304      	str	r3, [sp, #16]
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801edfe:	f004 040f 	and.w	r4, r4, #15
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801ee02:	9207      	str	r2, [sp, #28]
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801ee04:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 801ee08:	f1ba 0f14 	cmp.w	sl, #20
 801ee0c:	f040 80dc 	bne.w	801efc8 <ip4_frag+0x1ec>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801ee10:	8943      	ldrh	r3, [r0, #10]
 801ee12:	2b13      	cmp	r3, #19
 801ee14:	f240 80db 	bls.w	801efce <ip4_frag+0x1f2>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801ee18:	9b04      	ldr	r3, [sp, #16]
 801ee1a:	88d8      	ldrh	r0, [r3, #6]
 801ee1c:	f7f5 fe0e 	bl	8014a3c <lwip_htons>
  ofo = tmp & IP_OFFMASK;
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 801ee20:	f8b5 9008 	ldrh.w	r9, [r5, #8]
  ofo = tmp & IP_OFFMASK;
 801ee24:	f3c0 030c 	ubfx	r3, r0, #0, #13
  left = (u16_t)(p->tot_len - IP_HLEN);
 801ee28:	f1a9 0914 	sub.w	r9, r9, #20
  ofo = tmp & IP_OFFMASK;
 801ee2c:	9306      	str	r3, [sp, #24]
 801ee2e:	f400 5300 	and.w	r3, r0, #8192	; 0x2000
 801ee32:	930b      	str	r3, [sp, #44]	; 0x2c
  left = (u16_t)(p->tot_len - IP_HLEN);
 801ee34:	fa1f f389 	uxth.w	r3, r9
 801ee38:	9303      	str	r3, [sp, #12]

  while (left) {
 801ee3a:	2b00      	cmp	r3, #0
 801ee3c:	f000 809b 	beq.w	801ef76 <ip4_frag+0x19a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801ee40:	9b07      	ldr	r3, [sp, #28]
  u16_t newpbuflen = 0;
 801ee42:	2400      	movs	r4, #0
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
    if (rambuf == NULL) {
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801ee44:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 801eff8 <ip4_frag+0x21c>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801ee48:	00db      	lsls	r3, r3, #3
 801ee4a:	b29b      	uxth	r3, r3
 801ee4c:	9308      	str	r3, [sp, #32]
 801ee4e:	9b08      	ldr	r3, [sp, #32]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801ee50:	f44f 7220 	mov.w	r2, #640	; 0x280
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801ee54:	9e03      	ldr	r6, [sp, #12]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801ee56:	2114      	movs	r1, #20
 801ee58:	200e      	movs	r0, #14
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801ee5a:	42b3      	cmp	r3, r6
 801ee5c:	bf28      	it	cs
 801ee5e:	4633      	movcs	r3, r6
 801ee60:	9302      	str	r3, [sp, #8]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801ee62:	f7f7 fcc7 	bl	80167f4 <pbuf_alloc>
    if (rambuf == NULL) {
 801ee66:	4681      	mov	r9, r0
 801ee68:	2800      	cmp	r0, #0
 801ee6a:	f000 809d 	beq.w	801efa8 <ip4_frag+0x1cc>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801ee6e:	8943      	ldrh	r3, [r0, #10]
 801ee70:	2b13      	cmp	r3, #19
 801ee72:	f240 809e 	bls.w	801efb2 <ip4_frag+0x1d6>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801ee76:	9f04      	ldr	r7, [sp, #16]
 801ee78:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801ee7c:	683a      	ldr	r2, [r7, #0]
 801ee7e:	687e      	ldr	r6, [r7, #4]
 801ee80:	68b8      	ldr	r0, [r7, #8]
 801ee82:	68f9      	ldr	r1, [r7, #12]
 801ee84:	601a      	str	r2, [r3, #0]
 801ee86:	605e      	str	r6, [r3, #4]
 801ee88:	6098      	str	r0, [r3, #8]
 801ee8a:	60d9      	str	r1, [r3, #12]
 801ee8c:	693a      	ldr	r2, [r7, #16]
 801ee8e:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 801ee90:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801ee94:	9309      	str	r3, [sp, #36]	; 0x24

    left_to_copy = fragsize;
    while (left_to_copy) {
 801ee96:	9b02      	ldr	r3, [sp, #8]
 801ee98:	2b00      	cmp	r3, #0
 801ee9a:	d031      	beq.n	801ef00 <ip4_frag+0x124>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801ee9c:	896b      	ldrh	r3, [r5, #10]
    while (left_to_copy) {
 801ee9e:	9f02      	ldr	r7, [sp, #8]
      u16_t plen = (u16_t)(p->len - poff);
 801eea0:	eba3 040a 	sub.w	r4, r3, sl
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801eea4:	4553      	cmp	r3, sl
      u16_t plen = (u16_t)(p->len - poff);
 801eea6:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801eea8:	d370      	bcc.n	801ef8c <ip4_frag+0x1b0>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801eeaa:	42bc      	cmp	r4, r7
 801eeac:	bf28      	it	cs
 801eeae:	463c      	movcs	r4, r7
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801eeb0:	2c00      	cmp	r4, #0
 801eeb2:	d062      	beq.n	801ef7a <ip4_frag+0x19e>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801eeb4:	f240 22bd 	movw	r2, #701	; 0x2bd
 801eeb8:	4659      	mov	r1, fp
 801eeba:	2006      	movs	r0, #6
 801eebc:	f7f7 f92e 	bl	801611c <memp_malloc_fn>
      if (pcr == NULL) {
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801eec0:	2241      	movs	r2, #65	; 0x41
      if (pcr == NULL) {
 801eec2:	4680      	mov	r8, r0
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801eec4:	4621      	mov	r1, r4
 801eec6:	4603      	mov	r3, r0
      if (pcr == NULL) {
 801eec8:	2800      	cmp	r0, #0
 801eeca:	d06a      	beq.n	801efa2 <ip4_frag+0x1c6>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801eecc:	9401      	str	r4, [sp, #4]
 801eece:	2000      	movs	r0, #0
 801eed0:	686e      	ldr	r6, [r5, #4]
 801eed2:	4456      	add	r6, sl
 801eed4:	9600      	str	r6, [sp, #0]
 801eed6:	f7f7 fbc3 	bl	8016660 <pbuf_alloced_custom>
                                    (u8_t *)p->payload + poff, newpbuflen);
      if (newpbuf == NULL) {
 801eeda:	4606      	mov	r6, r0
 801eedc:	2800      	cmp	r0, #0
 801eede:	d05d      	beq.n	801ef9c <ip4_frag+0x1c0>
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 801eee0:	4628      	mov	r0, r5

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801eee2:	1b3f      	subs	r7, r7, r4
      pbuf_ref(p);
 801eee4:	f7f7 fd8c 	bl	8016a00 <pbuf_ref>
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801eee8:	4b3e      	ldr	r3, [pc, #248]	; (801efe4 <ip4_frag+0x208>)
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801eeea:	b2bf      	uxth	r7, r7
      pcr->original = p;
 801eeec:	f8c8 5014 	str.w	r5, [r8, #20]
      pbuf_cat(rambuf, newpbuf);
 801eef0:	4631      	mov	r1, r6
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801eef2:	f8c8 3010 	str.w	r3, [r8, #16]
      pbuf_cat(rambuf, newpbuf);
 801eef6:	4648      	mov	r0, r9
 801eef8:	f7f7 fd96 	bl	8016a28 <pbuf_cat>
      if (left_to_copy) {
 801eefc:	2f00      	cmp	r7, #0
 801eefe:	d13c      	bne.n	801ef7a <ip4_frag+0x19e>
    }
    poff = (u16_t)(poff + newpbuflen);
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801ef00:	9b05      	ldr	r3, [sp, #20]
    poff = (u16_t)(poff + newpbuflen);
 801ef02:	44a2      	add	sl, r4

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801ef04:	9a06      	ldr	r2, [sp, #24]
    last = (left <= netif->mtu - IP_HLEN);
 801ef06:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    poff = (u16_t)(poff + newpbuflen);
 801ef08:	fa1f fa8a 	uxth.w	sl, sl
    tmp = (IP_OFFMASK & (ofo));
 801ef0c:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last || mf_set) {
 801ef10:	9a03      	ldr	r2, [sp, #12]
    last = (left <= netif->mtu - IP_HLEN);
 801ef12:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 801ef14:	4293      	cmp	r3, r2
 801ef16:	dd54      	ble.n	801efc2 <ip4_frag+0x1e6>
 801ef18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ef1a:	2b00      	cmp	r3, #0
 801ef1c:	d151      	bne.n	801efc2 <ip4_frag+0x1e6>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801ef1e:	f7f5 fd8d 	bl	8014a3c <lwip_htons>
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801ef22:	9f02      	ldr	r7, [sp, #8]
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801ef24:	9e09      	ldr	r6, [sp, #36]	; 0x24
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801ef26:	463b      	mov	r3, r7
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801ef28:	80f0      	strh	r0, [r6, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801ef2a:	3314      	adds	r3, #20
 801ef2c:	b298      	uxth	r0, r3
 801ef2e:	f7f5 fd85 	bl	8014a3c <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 801ef32:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801ef34:	8070      	strh	r0, [r6, #2]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 801ef36:	2114      	movs	r1, #20
    IPH_CHKSUM_SET(iphdr, 0);
 801ef38:	72b3      	strb	r3, [r6, #10]
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 801ef3a:	4630      	mov	r0, r6
    IPH_CHKSUM_SET(iphdr, 0);
 801ef3c:	72f3      	strb	r3, [r6, #11]
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 801ef3e:	f7f6 fb3b 	bl	80155b8 <inet_chksum>
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801ef42:	9b05      	ldr	r3, [sp, #20]
 801ef44:	4649      	mov	r1, r9
 801ef46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ef48:	695b      	ldr	r3, [r3, #20]
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 801ef4a:	8170      	strh	r0, [r6, #10]
    netif->output(netif, rambuf, dest);
 801ef4c:	9805      	ldr	r0, [sp, #20]
 801ef4e:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
 801ef50:	4a25      	ldr	r2, [pc, #148]	; (801efe8 <ip4_frag+0x20c>)
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801ef52:	4648      	mov	r0, r9
    IPFRAG_STATS_INC(ip_frag.xmit);
 801ef54:	8e13      	ldrh	r3, [r2, #48]	; 0x30
 801ef56:	3301      	adds	r3, #1
 801ef58:	8613      	strh	r3, [r2, #48]	; 0x30
    pbuf_free(rambuf);
 801ef5a:	f7f7 fbdd 	bl	8016718 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801ef5e:	9b03      	ldr	r3, [sp, #12]
    ofo = (u16_t)(ofo + nfb);
 801ef60:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
    left = (u16_t)(left - fragsize);
 801ef64:	1bdb      	subs	r3, r3, r7
    ofo = (u16_t)(ofo + nfb);
 801ef66:	440a      	add	r2, r1
    left = (u16_t)(left - fragsize);
 801ef68:	b29b      	uxth	r3, r3
    ofo = (u16_t)(ofo + nfb);
 801ef6a:	b292      	uxth	r2, r2
    left = (u16_t)(left - fragsize);
 801ef6c:	9303      	str	r3, [sp, #12]
    ofo = (u16_t)(ofo + nfb);
 801ef6e:	9206      	str	r2, [sp, #24]
  while (left) {
 801ef70:	2b00      	cmp	r3, #0
 801ef72:	f47f af6c 	bne.w	801ee4e <ip4_frag+0x72>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801ef76:	2000      	movs	r0, #0
 801ef78:	e018      	b.n	801efac <ip4_frag+0x1d0>
        p = p->next;
 801ef7a:	682d      	ldr	r5, [r5, #0]
 801ef7c:	f04f 0a00 	mov.w	sl, #0
      u16_t plen = (u16_t)(p->len - poff);
 801ef80:	896b      	ldrh	r3, [r5, #10]
 801ef82:	eba3 040a 	sub.w	r4, r3, sl
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801ef86:	4553      	cmp	r3, sl
      u16_t plen = (u16_t)(p->len - poff);
 801ef88:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801ef8a:	d28e      	bcs.n	801eeaa <ip4_frag+0xce>
 801ef8c:	465b      	mov	r3, fp
 801ef8e:	f240 322d 	movw	r2, #813	; 0x32d
 801ef92:	4916      	ldr	r1, [pc, #88]	; (801efec <ip4_frag+0x210>)
 801ef94:	4816      	ldr	r0, [pc, #88]	; (801eff0 <ip4_frag+0x214>)
 801ef96:	f001 fd17 	bl	80209c8 <iprintf>
 801ef9a:	e786      	b.n	801eeaa <ip4_frag+0xce>
        ip_frag_free_pbuf_custom_ref(pcr);
 801ef9c:	4640      	mov	r0, r8
 801ef9e:	f7ff fc7f 	bl	801e8a0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801efa2:	4648      	mov	r0, r9
 801efa4:	f7f7 fbb8 	bl	8016718 <pbuf_free>
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801efa8:	f04f 30ff 	mov.w	r0, #4294967295
}
 801efac:	b00d      	add	sp, #52	; 0x34
 801efae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801efb2:	465b      	mov	r3, fp
 801efb4:	f240 3225 	movw	r2, #805	; 0x325
 801efb8:	490e      	ldr	r1, [pc, #56]	; (801eff4 <ip4_frag+0x218>)
 801efba:	480d      	ldr	r0, [pc, #52]	; (801eff0 <ip4_frag+0x214>)
 801efbc:	f001 fd04 	bl	80209c8 <iprintf>
 801efc0:	e759      	b.n	801ee76 <ip4_frag+0x9a>
      tmp = tmp | IP_MF;
 801efc2:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 801efc6:	e7aa      	b.n	801ef1e <ip4_frag+0x142>
    return ERR_VAL;
 801efc8:	f06f 0005 	mvn.w	r0, #5
 801efcc:	e7ee      	b.n	801efac <ip4_frag+0x1d0>
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801efce:	4b0a      	ldr	r3, [pc, #40]	; (801eff8 <ip4_frag+0x21c>)
 801efd0:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801efd4:	4909      	ldr	r1, [pc, #36]	; (801effc <ip4_frag+0x220>)
 801efd6:	4806      	ldr	r0, [pc, #24]	; (801eff0 <ip4_frag+0x214>)
 801efd8:	f001 fcf6 	bl	80209c8 <iprintf>
 801efdc:	f06f 0005 	mvn.w	r0, #5
 801efe0:	e7e4      	b.n	801efac <ip4_frag+0x1d0>
 801efe2:	bf00      	nop
 801efe4:	0801e8d9 	.word	0x0801e8d9
 801efe8:	20036164 	.word	0x20036164
 801efec:	0803f6b0 	.word	0x0803f6b0
 801eff0:	0802697c 	.word	0x0802697c
 801eff4:	0803f690 	.word	0x0803f690
 801eff8:	0803f750 	.word	0x0803f750
 801effc:	0803f674 	.word	0x0803f674

0801f000 <ethernet_input>:
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801f000:	8943      	ldrh	r3, [r0, #10]
 801f002:	2b0e      	cmp	r3, #14
{
 801f004:	b570      	push	{r4, r5, r6, lr}
 801f006:	4604      	mov	r4, r0
  if (p->len <= SIZEOF_ETH_HDR) {
 801f008:	d91b      	bls.n	801f042 <ethernet_input+0x42>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801f00a:	7bc3      	ldrb	r3, [r0, #15]
 801f00c:	460d      	mov	r5, r1
 801f00e:	b91b      	cbnz	r3, 801f018 <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 801f010:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 801f014:	3301      	adds	r3, #1
 801f016:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801f018:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801f01a:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 801f01c:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 801f01e:	07d9      	lsls	r1, r3, #31
 801f020:	d50a      	bpl.n	801f038 <ethernet_input+0x38>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801f022:	2b01      	cmp	r3, #1
 801f024:	d039      	beq.n	801f09a <ethernet_input+0x9a>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801f026:	2206      	movs	r2, #6
 801f028:	4924      	ldr	r1, [pc, #144]	; (801f0bc <ethernet_input+0xbc>)
 801f02a:	f000 fd19 	bl	801fa60 <memcmp>
 801f02e:	b918      	cbnz	r0, 801f038 <ethernet_input+0x38>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801f030:	7b63      	ldrb	r3, [r4, #13]
 801f032:	f043 0308 	orr.w	r3, r3, #8
 801f036:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 801f038:	2e08      	cmp	r6, #8
 801f03a:	d01f      	beq.n	801f07c <ethernet_input+0x7c>
 801f03c:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 801f040:	d00b      	beq.n	801f05a <ethernet_input+0x5a>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if (LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
 801f042:	4b1f      	ldr	r3, [pc, #124]	; (801f0c0 <ethernet_input+0xc0>)
 801f044:	8d19      	ldrh	r1, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
 801f046:	8bda      	ldrh	r2, [r3, #30]
      ETHARP_STATS_INC(etharp.proterr);
 801f048:	3101      	adds	r1, #1
      ETHARP_STATS_INC(etharp.drop);
 801f04a:	3201      	adds	r2, #1
      ETHARP_STATS_INC(etharp.proterr);
 801f04c:	8519      	strh	r1, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
 801f04e:	83da      	strh	r2, [r3, #30]
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 801f050:	4620      	mov	r0, r4
 801f052:	f7f7 fb61 	bl	8016718 <pbuf_free>
  return ERR_OK;
}
 801f056:	2000      	movs	r0, #0
 801f058:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801f05a:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 801f05e:	071b      	lsls	r3, r3, #28
 801f060:	d5f6      	bpl.n	801f050 <ethernet_input+0x50>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801f062:	210e      	movs	r1, #14
 801f064:	4620      	mov	r0, r4
 801f066:	f7f7 fb1b 	bl	80166a0 <pbuf_remove_header>
 801f06a:	b308      	cbz	r0, 801f0b0 <ethernet_input+0xb0>
        ETHARP_STATS_INC(etharp.lenerr);
 801f06c:	4b14      	ldr	r3, [pc, #80]	; (801f0c0 <ethernet_input+0xc0>)
 801f06e:	8c59      	ldrh	r1, [r3, #34]	; 0x22
        ETHARP_STATS_INC(etharp.drop);
 801f070:	8bda      	ldrh	r2, [r3, #30]
        ETHARP_STATS_INC(etharp.lenerr);
 801f072:	3101      	adds	r1, #1
        ETHARP_STATS_INC(etharp.drop);
 801f074:	3201      	adds	r2, #1
        ETHARP_STATS_INC(etharp.lenerr);
 801f076:	8459      	strh	r1, [r3, #34]	; 0x22
        ETHARP_STATS_INC(etharp.drop);
 801f078:	83da      	strh	r2, [r3, #30]
        goto free_and_return;
 801f07a:	e7e9      	b.n	801f050 <ethernet_input+0x50>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801f07c:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 801f080:	071a      	lsls	r2, r3, #28
 801f082:	d5e5      	bpl.n	801f050 <ethernet_input+0x50>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801f084:	210e      	movs	r1, #14
 801f086:	4620      	mov	r0, r4
 801f088:	f7f7 fb0a 	bl	80166a0 <pbuf_remove_header>
 801f08c:	2800      	cmp	r0, #0
 801f08e:	d1df      	bne.n	801f050 <ethernet_input+0x50>
        ip4_input(p, netif);
 801f090:	4629      	mov	r1, r5
 801f092:	4620      	mov	r0, r4
 801f094:	f7ff f84a 	bl	801e12c <ip4_input>
      break;
 801f098:	e7dd      	b.n	801f056 <ethernet_input+0x56>
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801f09a:	7843      	ldrb	r3, [r0, #1]
 801f09c:	2b00      	cmp	r3, #0
 801f09e:	d1cb      	bne.n	801f038 <ethernet_input+0x38>
 801f0a0:	7883      	ldrb	r3, [r0, #2]
 801f0a2:	2b5e      	cmp	r3, #94	; 0x5e
 801f0a4:	d1c8      	bne.n	801f038 <ethernet_input+0x38>
        p->flags |= PBUF_FLAG_LLMCAST;
 801f0a6:	7b63      	ldrb	r3, [r4, #13]
 801f0a8:	f043 0310 	orr.w	r3, r3, #16
 801f0ac:	7363      	strb	r3, [r4, #13]
 801f0ae:	e7c3      	b.n	801f038 <ethernet_input+0x38>
        etharp_input(p, netif);
 801f0b0:	4629      	mov	r1, r5
 801f0b2:	4620      	mov	r0, r4
 801f0b4:	f7fe fbdc 	bl	801d870 <etharp_input>
      break;
 801f0b8:	e7cd      	b.n	801f056 <ethernet_input+0x56>
 801f0ba:	bf00      	nop
 801f0bc:	0803f818 	.word	0x0803f818
 801f0c0:	20036164 	.word	0x20036164

0801f0c4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801f0c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f0c8:	460c      	mov	r4, r1
 801f0ca:	4605      	mov	r5, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801f0cc:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 801f0d0:	4616      	mov	r6, r2
 801f0d2:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 801f0d4:	f7f5 fcb2 	bl	8014a3c <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801f0d8:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 801f0da:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801f0dc:	4620      	mov	r0, r4
 801f0de:	f7f7 fadb 	bl	8016698 <pbuf_add_header>
 801f0e2:	b9e0      	cbnz	r0, 801f11e <ethernet_output+0x5a>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801f0e4:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 801f0e6:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801f0ea:	683b      	ldr	r3, [r7, #0]
 801f0ec:	600b      	str	r3, [r1, #0]
 801f0ee:	88bb      	ldrh	r3, [r7, #4]
 801f0f0:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801f0f2:	6833      	ldr	r3, [r6, #0]
 801f0f4:	f8c1 3006 	str.w	r3, [r1, #6]
 801f0f8:	88b3      	ldrh	r3, [r6, #4]
 801f0fa:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801f0fc:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 801f100:	2b06      	cmp	r3, #6
 801f102:	d006      	beq.n	801f112 <ethernet_output+0x4e>
 801f104:	4b0a      	ldr	r3, [pc, #40]	; (801f130 <ethernet_output+0x6c>)
 801f106:	f240 1233 	movw	r2, #307	; 0x133
 801f10a:	490a      	ldr	r1, [pc, #40]	; (801f134 <ethernet_output+0x70>)
 801f10c:	480a      	ldr	r0, [pc, #40]	; (801f138 <ethernet_output+0x74>)
 801f10e:	f001 fc5b 	bl	80209c8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801f112:	4621      	mov	r1, r4
 801f114:	69ab      	ldr	r3, [r5, #24]
 801f116:	4628      	mov	r0, r5
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 801f118:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 801f11c:	4718      	bx	r3
  LINK_STATS_INC(link.lenerr);
 801f11e:	4a07      	ldr	r2, [pc, #28]	; (801f13c <ethernet_output+0x78>)
}
 801f120:	f06f 0001 	mvn.w	r0, #1
  LINK_STATS_INC(link.lenerr);
 801f124:	8953      	ldrh	r3, [r2, #10]
 801f126:	3301      	adds	r3, #1
 801f128:	8153      	strh	r3, [r2, #10]
}
 801f12a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f12e:	bf00      	nop
 801f130:	0803f820 	.word	0x0803f820
 801f134:	0803f858 	.word	0x0803f858
 801f138:	0802697c 	.word	0x0802697c
 801f13c:	20036164 	.word	0x20036164

0801f140 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801f140:	b510      	push	{r4, lr}
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801f142:	2300      	movs	r3, #0
{
 801f144:	b084      	sub	sp, #16
  osMessageQDef(QUEUE, size, void *);
 801f146:	2204      	movs	r2, #4
{
 801f148:	4604      	mov	r4, r0
  osMessageQDef(QUEUE, size, void *);
 801f14a:	9100      	str	r1, [sp, #0]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801f14c:	4668      	mov	r0, sp
 801f14e:	4619      	mov	r1, r3
  osMessageQDef(QUEUE, size, void *);
 801f150:	9201      	str	r2, [sp, #4]
 801f152:	e9cd 3302 	strd	r3, r3, [sp, #8]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801f156:	f7f1 ffa1 	bl	801109c <osMessageCreate>
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
#endif
#if SYS_STATS
  ++lwip_stats.sys.mbox.used;
 801f15a:	4a0a      	ldr	r2, [pc, #40]	; (801f184 <sys_mbox_new+0x44>)
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801f15c:	6020      	str	r0, [r4, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801f15e:	fab0 f080 	clz	r0, r0
  ++lwip_stats.sys.mbox.used;
 801f162:	f8b2 3100 	ldrh.w	r3, [r2, #256]	; 0x100
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
 801f166:	f8b2 1102 	ldrh.w	r1, [r2, #258]	; 0x102
  if(*mbox == NULL)
 801f16a:	0940      	lsrs	r0, r0, #5
  ++lwip_stats.sys.mbox.used;
 801f16c:	3301      	adds	r3, #1
    return ERR_MEM;

  return ERR_OK;
}
 801f16e:	4240      	negs	r0, r0
  ++lwip_stats.sys.mbox.used;
 801f170:	b29b      	uxth	r3, r3
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
 801f172:	4299      	cmp	r1, r3
  ++lwip_stats.sys.mbox.used;
 801f174:	f8a2 3100 	strh.w	r3, [r2, #256]	; 0x100
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
 801f178:	bf38      	it	cc
 801f17a:	f8a2 3102 	strhcc.w	r3, [r2, #258]	; 0x102
}
 801f17e:	b004      	add	sp, #16
 801f180:	bd10      	pop	{r4, pc}
 801f182:	bf00      	nop
 801f184:	20036164 	.word	0x20036164

0801f188 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801f188:	b508      	push	{r3, lr}
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801f18a:	6800      	ldr	r0, [r0, #0]
 801f18c:	2200      	movs	r2, #0
 801f18e:	f7f1 ff9b 	bl	80110c8 <osMessagePut>
 801f192:	b900      	cbnz	r0, 801f196 <sys_mbox_trypost+0xe>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 801f194:	bd08      	pop	{r3, pc}
    lwip_stats.sys.mbox.err++;
 801f196:	4a04      	ldr	r2, [pc, #16]	; (801f1a8 <sys_mbox_trypost+0x20>)
 801f198:	f04f 30ff 	mov.w	r0, #4294967295
 801f19c:	f8b2 3104 	ldrh.w	r3, [r2, #260]	; 0x104
 801f1a0:	3301      	adds	r3, #1
 801f1a2:	f8a2 3104 	strh.w	r3, [r2, #260]	; 0x104
}
 801f1a6:	bd08      	pop	{r3, pc}
 801f1a8:	20036164 	.word	0x20036164

0801f1ac <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801f1ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f1ae:	4615      	mov	r5, r2
 801f1b0:	b085      	sub	sp, #20
 801f1b2:	4606      	mov	r6, r0
 801f1b4:	460f      	mov	r7, r1
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801f1b6:	f7f1 fe65 	bl	8010e84 <osKernelSysTick>
 801f1ba:	4604      	mov	r4, r0
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801f1bc:	b15d      	cbz	r5, 801f1d6 <sys_arch_mbox_fetch+0x2a>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801f1be:	462a      	mov	r2, r5
 801f1c0:	6831      	ldr	r1, [r6, #0]
 801f1c2:	a801      	add	r0, sp, #4
 801f1c4:	f7f1 ffac 	bl	8011120 <osMessageGet>

    if(event.status == osEventMessage)
 801f1c8:	9b01      	ldr	r3, [sp, #4]
 801f1ca:	2b10      	cmp	r3, #16
 801f1cc:	d009      	beq.n	801f1e2 <sys_arch_mbox_fetch+0x36>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801f1ce:	f04f 30ff 	mov.w	r0, #4294967295
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801f1d2:	b005      	add	sp, #20
 801f1d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 801f1d6:	6831      	ldr	r1, [r6, #0]
 801f1d8:	f04f 32ff 	mov.w	r2, #4294967295
 801f1dc:	a801      	add	r0, sp, #4
 801f1de:	f7f1 ff9f 	bl	8011120 <osMessageGet>
    *msg = (void *)event.value.v;
 801f1e2:	9b02      	ldr	r3, [sp, #8]
 801f1e4:	603b      	str	r3, [r7, #0]
    return (osKernelSysTick() - starttime);
 801f1e6:	f7f1 fe4d 	bl	8010e84 <osKernelSysTick>
 801f1ea:	1b00      	subs	r0, r0, r4
}
 801f1ec:	b005      	add	sp, #20
 801f1ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801f1f0 <sys_mbox_valid>:
 801f1f0:	6800      	ldr	r0, [r0, #0]
 801f1f2:	3000      	adds	r0, #0
 801f1f4:	bf18      	it	ne
 801f1f6:	2001      	movne	r0, #1
 801f1f8:	4770      	bx	lr
 801f1fa:	bf00      	nop

0801f1fc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801f1fc:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801f1fe:	4803      	ldr	r0, [pc, #12]	; (801f20c <sys_init+0x10>)
 801f200:	f7f1 fe98 	bl	8010f34 <osMutexCreate>
 801f204:	4b02      	ldr	r3, [pc, #8]	; (801f210 <sys_init+0x14>)
 801f206:	6018      	str	r0, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801f208:	bd08      	pop	{r3, pc}
 801f20a:	bf00      	nop
 801f20c:	0803f894 	.word	0x0803f894
 801f210:	200362c4 	.word	0x200362c4

0801f214 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801f214:	b530      	push	{r4, r5, lr}
 801f216:	b083      	sub	sp, #12
 801f218:	4605      	mov	r5, r0

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801f21a:	2400      	movs	r4, #0
  *mutex = osMutexCreate(osMutex(MUTEX));
 801f21c:	4668      	mov	r0, sp
  osMutexDef(MUTEX);
 801f21e:	e9cd 4400 	strd	r4, r4, [sp]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801f222:	f7f1 fe87 	bl	8010f34 <osMutexCreate>
#endif

  if(*mutex == NULL)
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
 801f226:	4a0d      	ldr	r2, [pc, #52]	; (801f25c <sys_mutex_new+0x48>)
  *mutex = osMutexCreate(osMutex(MUTEX));
 801f228:	6028      	str	r0, [r5, #0]
  if(*mutex == NULL)
 801f22a:	b170      	cbz	r0, 801f24a <sys_mutex_new+0x36>
#endif /* SYS_STATS */
    return ERR_MEM;
  }

#if SYS_STATS
  ++lwip_stats.sys.mutex.used;
 801f22c:	f8b2 30fa 	ldrh.w	r3, [r2, #250]	; 0xfa
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801f230:	4620      	mov	r0, r4
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
 801f232:	f8b2 10fc 	ldrh.w	r1, [r2, #252]	; 0xfc
  ++lwip_stats.sys.mutex.used;
 801f236:	3301      	adds	r3, #1
 801f238:	b29b      	uxth	r3, r3
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
 801f23a:	4299      	cmp	r1, r3
  ++lwip_stats.sys.mutex.used;
 801f23c:	f8a2 30fa 	strh.w	r3, [r2, #250]	; 0xfa
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
 801f240:	bf38      	it	cc
 801f242:	f8a2 30fc 	strhcc.w	r3, [r2, #252]	; 0xfc
}
 801f246:	b003      	add	sp, #12
 801f248:	bd30      	pop	{r4, r5, pc}
    ++lwip_stats.sys.mutex.err;
 801f24a:	f8b2 30fe 	ldrh.w	r3, [r2, #254]	; 0xfe
    return ERR_MEM;
 801f24e:	f04f 30ff 	mov.w	r0, #4294967295
    ++lwip_stats.sys.mutex.err;
 801f252:	3301      	adds	r3, #1
 801f254:	f8a2 30fe 	strh.w	r3, [r2, #254]	; 0xfe
    return ERR_MEM;
 801f258:	e7f5      	b.n	801f246 <sys_mutex_new+0x32>
 801f25a:	bf00      	nop
 801f25c:	20036164 	.word	0x20036164

0801f260 <sys_mutex_lock>:
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801f260:	6800      	ldr	r0, [r0, #0]
 801f262:	f04f 31ff 	mov.w	r1, #4294967295
 801f266:	f7f1 be6d 	b.w	8010f44 <osMutexWait>
 801f26a:	bf00      	nop

0801f26c <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 801f26c:	6800      	ldr	r0, [r0, #0]
 801f26e:	f7f1 be95 	b.w	8010f9c <osMutexRelease>
 801f272:	bf00      	nop

0801f274 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801f274:	b510      	push	{r4, lr}
 801f276:	b088      	sub	sp, #32
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801f278:	2400      	movs	r4, #0
 801f27a:	9102      	str	r1, [sp, #8]
  return osThreadCreate(&os_thread_def, arg);
 801f27c:	4611      	mov	r1, r2
{
 801f27e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801f280:	9001      	str	r0, [sp, #4]
  return osThreadCreate(&os_thread_def, arg);
 801f282:	a801      	add	r0, sp, #4
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801f284:	f8cd 4012 	str.w	r4, [sp, #18]
 801f288:	f8cd 4016 	str.w	r4, [sp, #22]
 801f28c:	f8cd 400e 	str.w	r4, [sp, #14]
 801f290:	f8cd 401a 	str.w	r4, [sp, #26]
 801f294:	f8ad 401e 	strh.w	r4, [sp, #30]
 801f298:	9305      	str	r3, [sp, #20]
 801f29a:	f8ad 200c 	strh.w	r2, [sp, #12]
  return osThreadCreate(&os_thread_def, arg);
 801f29e:	f7f1 fdf9 	bl	8010e94 <osThreadCreate>
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801f2a2:	b008      	add	sp, #32
 801f2a4:	bd10      	pop	{r4, pc}
 801f2a6:	bf00      	nop

0801f2a8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801f2a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801f2aa:	2200      	movs	r2, #0
 801f2ac:	4910      	ldr	r1, [pc, #64]	; (801f2f0 <MX_USB_DEVICE_Init+0x48>)
 801f2ae:	4811      	ldr	r0, [pc, #68]	; (801f2f4 <MX_USB_DEVICE_Init+0x4c>)
 801f2b0:	f7f1 f940 	bl	8010534 <USBD_Init>
 801f2b4:	b9c0      	cbnz	r0, 801f2e8 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801f2b6:	4910      	ldr	r1, [pc, #64]	; (801f2f8 <MX_USB_DEVICE_Init+0x50>)
 801f2b8:	480e      	ldr	r0, [pc, #56]	; (801f2f4 <MX_USB_DEVICE_Init+0x4c>)
 801f2ba:	f7f1 f955 	bl	8010568 <USBD_RegisterClass>
 801f2be:	b980      	cbnz	r0, 801f2e2 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801f2c0:	490e      	ldr	r1, [pc, #56]	; (801f2fc <MX_USB_DEVICE_Init+0x54>)
 801f2c2:	480c      	ldr	r0, [pc, #48]	; (801f2f4 <MX_USB_DEVICE_Init+0x4c>)
 801f2c4:	f7f1 f908 	bl	80104d8 <USBD_CDC_RegisterInterface>
 801f2c8:	b940      	cbnz	r0, 801f2dc <MX_USB_DEVICE_Init+0x34>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801f2ca:	480a      	ldr	r0, [pc, #40]	; (801f2f4 <MX_USB_DEVICE_Init+0x4c>)
 801f2cc:	f7f1 f960 	bl	8010590 <USBD_Start>
 801f2d0:	b900      	cbnz	r0, 801f2d4 <MX_USB_DEVICE_Init+0x2c>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801f2d2:	bd08      	pop	{r3, pc}
 801f2d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 801f2d8:	f7e2 bdc2 	b.w	8001e60 <Error_Handler>
    Error_Handler();
 801f2dc:	f7e2 fdc0 	bl	8001e60 <Error_Handler>
 801f2e0:	e7f3      	b.n	801f2ca <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 801f2e2:	f7e2 fdbd 	bl	8001e60 <Error_Handler>
 801f2e6:	e7eb      	b.n	801f2c0 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 801f2e8:	f7e2 fdba 	bl	8001e60 <Error_Handler>
 801f2ec:	e7e3      	b.n	801f2b6 <MX_USB_DEVICE_Init+0xe>
 801f2ee:	bf00      	nop
 801f2f0:	200003f0 	.word	0x200003f0
 801f2f4:	200362c8 	.word	0x200362c8
 801f2f8:	200002c0 	.word	0x200002c0
 801f2fc:	200003dc 	.word	0x200003dc

0801f300 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 801f300:	2000      	movs	r0, #0
 801f302:	4770      	bx	lr

0801f304 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 801f304:	2000      	movs	r0, #0
 801f306:	4770      	bx	lr

0801f308 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 801f308:	2000      	movs	r0, #0
 801f30a:	4770      	bx	lr

0801f30c <CDC_Receive_FS>:
{
 801f30c:	b510      	push	{r4, lr}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801f30e:	4c05      	ldr	r4, [pc, #20]	; (801f324 <CDC_Receive_FS+0x18>)
 801f310:	4601      	mov	r1, r0
 801f312:	4620      	mov	r0, r4
 801f314:	f7f1 f8f0 	bl	80104f8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801f318:	4620      	mov	r0, r4
 801f31a:	f7f1 f8f3 	bl	8010504 <USBD_CDC_ReceivePacket>
}
 801f31e:	2000      	movs	r0, #0
 801f320:	bd10      	pop	{r4, pc}
 801f322:	bf00      	nop
 801f324:	200362c8 	.word	0x200362c8

0801f328 <CDC_Init_FS>:
{
 801f328:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801f32a:	4c06      	ldr	r4, [pc, #24]	; (801f344 <CDC_Init_FS+0x1c>)
 801f32c:	2200      	movs	r2, #0
 801f32e:	4906      	ldr	r1, [pc, #24]	; (801f348 <CDC_Init_FS+0x20>)
 801f330:	4620      	mov	r0, r4
 801f332:	f7f1 f8d9 	bl	80104e8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801f336:	4620      	mov	r0, r4
 801f338:	4904      	ldr	r1, [pc, #16]	; (801f34c <CDC_Init_FS+0x24>)
 801f33a:	f7f1 f8dd 	bl	80104f8 <USBD_CDC_SetRxBuffer>
}
 801f33e:	2000      	movs	r0, #0
 801f340:	bd10      	pop	{r4, pc}
 801f342:	bf00      	nop
 801f344:	200362c8 	.word	0x200362c8
 801f348:	20036d98 	.word	0x20036d98
 801f34c:	20036598 	.word	0x20036598

0801f350 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801f350:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 801f352:	4801      	ldr	r0, [pc, #4]	; (801f358 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 801f354:	800b      	strh	r3, [r1, #0]
}
 801f356:	4770      	bx	lr
 801f358:	2000041c 	.word	0x2000041c

0801f35c <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801f35c:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 801f35e:	4801      	ldr	r0, [pc, #4]	; (801f364 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 801f360:	800b      	strh	r3, [r1, #0]
}
 801f362:	4770      	bx	lr
 801f364:	20000430 	.word	0x20000430

0801f368 <USBD_FS_USR_BOSDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 801f368:	230c      	movs	r3, #12
  return (uint8_t*)USBD_FS_BOSDesc;
}
 801f36a:	4801      	ldr	r0, [pc, #4]	; (801f370 <USBD_FS_USR_BOSDescriptor+0x8>)
  *length = sizeof(USBD_FS_BOSDesc);
 801f36c:	800b      	strh	r3, [r1, #0]
}
 801f36e:	4770      	bx	lr
 801f370:	20000410 	.word	0x20000410

0801f374 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801f374:	3a01      	subs	r2, #1
 801f376:	b430      	push	{r4, r5}
 801f378:	b2d2      	uxtb	r2, r2
 801f37a:	1c8c      	adds	r4, r1, #2
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 801f37c:	2500      	movs	r5, #0
 801f37e:	eb04 0442 	add.w	r4, r4, r2, lsl #1
    if (((value >> 28)) < 0xA)
 801f382:	0f02      	lsrs	r2, r0, #28
    pbuf[2 * idx + 1] = 0;
 801f384:	704d      	strb	r5, [r1, #1]
 801f386:	3102      	adds	r1, #2
    value = value << 4;
 801f388:	0100      	lsls	r0, r0, #4
 801f38a:	b2d3      	uxtb	r3, r2
    if (((value >> 28)) < 0xA)
 801f38c:	2a09      	cmp	r2, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 801f38e:	f103 0230 	add.w	r2, r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801f392:	f103 0337 	add.w	r3, r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 801f396:	bf94      	ite	ls
 801f398:	f801 2c02 	strbls.w	r2, [r1, #-2]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801f39c:	f801 3c02 	strbhi.w	r3, [r1, #-2]
  for (idx = 0; idx < len; idx++)
 801f3a0:	428c      	cmp	r4, r1
 801f3a2:	d1ee      	bne.n	801f382 <IntToUnicode+0xe>
  }
}
 801f3a4:	bc30      	pop	{r4, r5}
 801f3a6:	4770      	bx	lr

0801f3a8 <USBD_FS_SerialStrDescriptor>:
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801f3a8:	480b      	ldr	r0, [pc, #44]	; (801f3d8 <USBD_FS_SerialStrDescriptor+0x30>)
  *length = USB_SIZ_STRING_SERIAL;
 801f3aa:	221a      	movs	r2, #26
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801f3ac:	4b0b      	ldr	r3, [pc, #44]	; (801f3dc <USBD_FS_SerialStrDescriptor+0x34>)
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801f3ae:	6800      	ldr	r0, [r0, #0]
  deviceserial0 += deviceserial2;
 801f3b0:	681b      	ldr	r3, [r3, #0]
  *length = USB_SIZ_STRING_SERIAL;
 801f3b2:	800a      	strh	r2, [r1, #0]
  if (deviceserial0 != 0)
 801f3b4:	18c0      	adds	r0, r0, r3
 801f3b6:	d101      	bne.n	801f3bc <USBD_FS_SerialStrDescriptor+0x14>
}
 801f3b8:	4809      	ldr	r0, [pc, #36]	; (801f3e0 <USBD_FS_SerialStrDescriptor+0x38>)
 801f3ba:	4770      	bx	lr
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801f3bc:	4b09      	ldr	r3, [pc, #36]	; (801f3e4 <USBD_FS_SerialStrDescriptor+0x3c>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801f3be:	2208      	movs	r2, #8
 801f3c0:	4909      	ldr	r1, [pc, #36]	; (801f3e8 <USBD_FS_SerialStrDescriptor+0x40>)
{
 801f3c2:	b510      	push	{r4, lr}
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801f3c4:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801f3c6:	f7ff ffd5 	bl	801f374 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801f3ca:	2204      	movs	r2, #4
 801f3cc:	4907      	ldr	r1, [pc, #28]	; (801f3ec <USBD_FS_SerialStrDescriptor+0x44>)
 801f3ce:	4620      	mov	r0, r4
 801f3d0:	f7ff ffd0 	bl	801f374 <IntToUnicode>
}
 801f3d4:	4802      	ldr	r0, [pc, #8]	; (801f3e0 <USBD_FS_SerialStrDescriptor+0x38>)
 801f3d6:	bd10      	pop	{r4, pc}
 801f3d8:	1ff0f420 	.word	0x1ff0f420
 801f3dc:	1ff0f428 	.word	0x1ff0f428
 801f3e0:	20000434 	.word	0x20000434
 801f3e4:	1ff0f424 	.word	0x1ff0f424
 801f3e8:	20000436 	.word	0x20000436
 801f3ec:	20000446 	.word	0x20000446

0801f3f0 <USBD_FS_ManufacturerStrDescriptor>:
{
 801f3f0:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801f3f2:	4c04      	ldr	r4, [pc, #16]	; (801f404 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 801f3f4:	460a      	mov	r2, r1
 801f3f6:	4804      	ldr	r0, [pc, #16]	; (801f408 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 801f3f8:	4621      	mov	r1, r4
 801f3fa:	f7f1 fcab 	bl	8010d54 <USBD_GetString>
}
 801f3fe:	4620      	mov	r0, r4
 801f400:	bd10      	pop	{r4, pc}
 801f402:	bf00      	nop
 801f404:	20037598 	.word	0x20037598
 801f408:	0803f8b8 	.word	0x0803f8b8

0801f40c <USBD_FS_ProductStrDescriptor>:
{
 801f40c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801f40e:	4c04      	ldr	r4, [pc, #16]	; (801f420 <USBD_FS_ProductStrDescriptor+0x14>)
 801f410:	460a      	mov	r2, r1
 801f412:	4804      	ldr	r0, [pc, #16]	; (801f424 <USBD_FS_ProductStrDescriptor+0x18>)
 801f414:	4621      	mov	r1, r4
 801f416:	f7f1 fc9d 	bl	8010d54 <USBD_GetString>
}
 801f41a:	4620      	mov	r0, r4
 801f41c:	bd10      	pop	{r4, pc}
 801f41e:	bf00      	nop
 801f420:	20037598 	.word	0x20037598
 801f424:	0803f8cc 	.word	0x0803f8cc

0801f428 <USBD_FS_ConfigStrDescriptor>:
{
 801f428:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801f42a:	4c04      	ldr	r4, [pc, #16]	; (801f43c <USBD_FS_ConfigStrDescriptor+0x14>)
 801f42c:	460a      	mov	r2, r1
 801f42e:	4804      	ldr	r0, [pc, #16]	; (801f440 <USBD_FS_ConfigStrDescriptor+0x18>)
 801f430:	4621      	mov	r1, r4
 801f432:	f7f1 fc8f 	bl	8010d54 <USBD_GetString>
}
 801f436:	4620      	mov	r0, r4
 801f438:	bd10      	pop	{r4, pc}
 801f43a:	bf00      	nop
 801f43c:	20037598 	.word	0x20037598
 801f440:	0803f89c 	.word	0x0803f89c

0801f444 <USBD_FS_InterfaceStrDescriptor>:
{
 801f444:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801f446:	4c04      	ldr	r4, [pc, #16]	; (801f458 <USBD_FS_InterfaceStrDescriptor+0x14>)
 801f448:	460a      	mov	r2, r1
 801f44a:	4804      	ldr	r0, [pc, #16]	; (801f45c <USBD_FS_InterfaceStrDescriptor+0x18>)
 801f44c:	4621      	mov	r1, r4
 801f44e:	f7f1 fc81 	bl	8010d54 <USBD_GetString>
}
 801f452:	4620      	mov	r0, r4
 801f454:	bd10      	pop	{r4, pc}
 801f456:	bf00      	nop
 801f458:	20037598 	.word	0x20037598
 801f45c:	0803f8a8 	.word	0x0803f8a8

0801f460 <HAL_PCD_MspInit>:
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(pcdHandle->Instance==USB_OTG_FS)
 801f460:	6803      	ldr	r3, [r0, #0]
{
 801f462:	b530      	push	{r4, r5, lr}
  if(pcdHandle->Instance==USB_OTG_FS)
 801f464:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 801f468:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801f46a:	f04f 0400 	mov.w	r4, #0
 801f46e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 801f472:	e9cd 4405 	strd	r4, r4, [sp, #20]
 801f476:	9407      	str	r4, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 801f478:	d001      	beq.n	801f47e <HAL_PCD_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801f47a:	b009      	add	sp, #36	; 0x24
 801f47c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801f47e:	4d1e      	ldr	r5, [pc, #120]	; (801f4f8 <HAL_PCD_MspInit+0x98>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801f480:	2202      	movs	r2, #2
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 801f482:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801f486:	2103      	movs	r1, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801f488:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801f48a:	f043 0301 	orr.w	r3, r3, #1
 801f48e:	632b      	str	r3, [r5, #48]	; 0x30
 801f490:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801f492:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801f494:	220a      	movs	r2, #10
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801f496:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 801f49a:	9003      	str	r0, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801f49c:	9106      	str	r1, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801f49e:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801f4a0:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801f4a2:	4816      	ldr	r0, [pc, #88]	; (801f4fc <HAL_PCD_MspInit+0x9c>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801f4a4:	9207      	str	r2, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801f4a6:	9b00      	ldr	r3, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801f4a8:	f7e8 ff26 	bl	80082f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 801f4ac:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 801f4b0:	a903      	add	r1, sp, #12
 801f4b2:	4812      	ldr	r0, [pc, #72]	; (801f4fc <HAL_PCD_MspInit+0x9c>)
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 801f4b4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801f4b6:	e9cd 4404 	strd	r4, r4, [sp, #16]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 801f4ba:	f7e8 ff1d 	bl	80082f8 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801f4be:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 801f4c0:	4622      	mov	r2, r4
 801f4c2:	2106      	movs	r1, #6
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801f4c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 801f4c8:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801f4ca:	636b      	str	r3, [r5, #52]	; 0x34
 801f4cc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801f4ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f4d2:	9301      	str	r3, [sp, #4]
 801f4d4:	9b01      	ldr	r3, [sp, #4]
 801f4d6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 801f4d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801f4dc:	646b      	str	r3, [r5, #68]	; 0x44
 801f4de:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 801f4e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801f4e4:	9302      	str	r3, [sp, #8]
 801f4e6:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 801f4e8:	f7e6 fca2 	bl	8005e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801f4ec:	2043      	movs	r0, #67	; 0x43
 801f4ee:	f7e6 fce5 	bl	8005ebc <HAL_NVIC_EnableIRQ>
}
 801f4f2:	b009      	add	sp, #36	; 0x24
 801f4f4:	bd30      	pop	{r4, r5, pc}
 801f4f6:	bf00      	nop
 801f4f8:	40023800 	.word	0x40023800
 801f4fc:	40020000 	.word	0x40020000

0801f500 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801f500:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 801f504:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 801f508:	f7f1 b854 	b.w	80105b4 <USBD_LL_SetupStage>

0801f50c <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801f50c:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 801f510:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801f514:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 801f518:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 801f51c:	f7f1 b87a 	b.w	8010614 <USBD_LL_DataOutStage>

0801f520 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801f520:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 801f524:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801f528:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 801f52c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801f52e:	f7f1 b8a7 	b.w	8010680 <USBD_LL_DataInStage>
 801f532:	bf00      	nop

0801f534 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801f534:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 801f538:	f7f1 b942 	b.w	80107c0 <USBD_LL_SOF>

0801f53c <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801f53c:	68c1      	ldr	r1, [r0, #12]
{
 801f53e:	b510      	push	{r4, lr}
 801f540:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801f542:	b121      	cbz	r1, 801f54e <HAL_PCD_ResetCallback+0x12>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801f544:	2902      	cmp	r1, #2
 801f546:	d00c      	beq.n	801f562 <HAL_PCD_ResetCallback+0x26>
  {
    speed = USBD_SPEED_FULL;
  }
  else
  {
    Error_Handler();
 801f548:	f7e2 fc8a 	bl	8001e60 <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801f54c:	2101      	movs	r1, #1
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801f54e:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
 801f552:	f7f1 f91d 	bl	8010790 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801f556:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
}
 801f55a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801f55e:	f7f1 b8ef 	b.w	8010740 <USBD_LL_Reset>
    speed = USBD_SPEED_FULL;
 801f562:	2101      	movs	r1, #1
 801f564:	e7f3      	b.n	801f54e <HAL_PCD_ResetCallback+0x12>
 801f566:	bf00      	nop

0801f568 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f568:	b510      	push	{r4, lr}
 801f56a:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801f56c:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 801f570:	f7f1 f912 	bl	8010798 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801f574:	6822      	ldr	r2, [r4, #0]
 801f576:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 801f57a:	f043 0301 	orr.w	r3, r3, #1
 801f57e:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801f582:	6a23      	ldr	r3, [r4, #32]
 801f584:	b123      	cbz	r3, 801f590 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801f586:	4a03      	ldr	r2, [pc, #12]	; (801f594 <HAL_PCD_SuspendCallback+0x2c>)
 801f588:	6913      	ldr	r3, [r2, #16]
 801f58a:	f043 0306 	orr.w	r3, r3, #6
 801f58e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801f590:	bd10      	pop	{r4, pc}
 801f592:	bf00      	nop
 801f594:	e000ed00 	.word	0xe000ed00

0801f598 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801f598:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 801f59c:	f7f1 b906 	b.w	80107ac <USBD_LL_Resume>

0801f5a0 <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801f5a0:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 801f5a4:	f7f1 b91c 	b.w	80107e0 <USBD_LL_IsoOUTIncomplete>

0801f5a8 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801f5a8:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 801f5ac:	f7f1 b916 	b.w	80107dc <USBD_LL_IsoINIncomplete>

0801f5b0 <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801f5b0:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 801f5b4:	f7f1 b916 	b.w	80107e4 <USBD_LL_DevConnected>

0801f5b8 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801f5b8:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 801f5bc:	f7f1 b914 	b.w	80107e8 <USBD_LL_DevDisconnected>

0801f5c0 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801f5c0:	7802      	ldrb	r2, [r0, #0]
 801f5c2:	b10a      	cbz	r2, 801f5c8 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 801f5c4:	2000      	movs	r0, #0
 801f5c6:	4770      	bx	lr
  hpcd_USB_OTG_FS.pData = pdev;
 801f5c8:	4b15      	ldr	r3, [pc, #84]	; (801f620 <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 801f5ca:	2101      	movs	r1, #1
{
 801f5cc:	b570      	push	{r4, r5, r6, lr}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801f5ce:	2402      	movs	r4, #2
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801f5d0:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 801f5d4:	2506      	movs	r5, #6
  hpcd_USB_OTG_FS.pData = pdev;
 801f5d6:	f8c3 0400 	str.w	r0, [r3, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 801f5da:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801f5de:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801f5e0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801f5e2:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801f5e4:	60dc      	str	r4, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 801f5e6:	62d9      	str	r1, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801f5e8:	e9c3 2208 	strd	r2, r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 801f5ec:	e9c3 6500 	strd	r6, r5, [r3]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 801f5f0:	e9c3 4106 	strd	r4, r1, [r3, #24]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801f5f4:	f7e9 fe7e 	bl	80092f4 <HAL_PCD_Init>
 801f5f8:	b978      	cbnz	r0, 801f61a <USBD_LL_Init+0x5a>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801f5fa:	2180      	movs	r1, #128	; 0x80
 801f5fc:	4808      	ldr	r0, [pc, #32]	; (801f620 <USBD_LL_Init+0x60>)
 801f5fe:	f7ea fbed 	bl	8009ddc <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801f602:	2240      	movs	r2, #64	; 0x40
 801f604:	2100      	movs	r1, #0
 801f606:	4806      	ldr	r0, [pc, #24]	; (801f620 <USBD_LL_Init+0x60>)
 801f608:	f7ea fbc4 	bl	8009d94 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801f60c:	2280      	movs	r2, #128	; 0x80
 801f60e:	2101      	movs	r1, #1
 801f610:	4803      	ldr	r0, [pc, #12]	; (801f620 <USBD_LL_Init+0x60>)
 801f612:	f7ea fbbf 	bl	8009d94 <HAL_PCDEx_SetTxFiFo>
}
 801f616:	2000      	movs	r0, #0
 801f618:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler( );
 801f61a:	f7e2 fc21 	bl	8001e60 <Error_Handler>
 801f61e:	e7ec      	b.n	801f5fa <USBD_LL_Init+0x3a>
 801f620:	20037798 	.word	0x20037798

0801f624 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801f624:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 801f626:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 801f62a:	f7e9 ff0d 	bl	8009448 <HAL_PCD_Start>
 801f62e:	2803      	cmp	r0, #3
 801f630:	d802      	bhi.n	801f638 <USBD_LL_Start+0x14>
 801f632:	4b02      	ldr	r3, [pc, #8]	; (801f63c <USBD_LL_Start+0x18>)
 801f634:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 801f636:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_Start(pdev->pData);
 801f638:	2003      	movs	r0, #3
}
 801f63a:	bd08      	pop	{r3, pc}
 801f63c:	0803f8e4 	.word	0x0803f8e4

0801f640 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801f640:	b510      	push	{r4, lr}
 801f642:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801f644:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 801f648:	4613      	mov	r3, r2
 801f64a:	4622      	mov	r2, r4
 801f64c:	f7ea fa5e 	bl	8009b0c <HAL_PCD_EP_Open>
 801f650:	2803      	cmp	r0, #3
 801f652:	d802      	bhi.n	801f65a <USBD_LL_OpenEP+0x1a>
 801f654:	4b02      	ldr	r3, [pc, #8]	; (801f660 <USBD_LL_OpenEP+0x20>)
 801f656:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 801f658:	bd10      	pop	{r4, pc}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801f65a:	2003      	movs	r0, #3
}
 801f65c:	bd10      	pop	{r4, pc}
 801f65e:	bf00      	nop
 801f660:	0803f8e4 	.word	0x0803f8e4

0801f664 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801f664:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801f666:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 801f66a:	f7ea fa89 	bl	8009b80 <HAL_PCD_EP_Close>
 801f66e:	2803      	cmp	r0, #3
 801f670:	d802      	bhi.n	801f678 <USBD_LL_CloseEP+0x14>
 801f672:	4b02      	ldr	r3, [pc, #8]	; (801f67c <USBD_LL_CloseEP+0x18>)
 801f674:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 801f676:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801f678:	2003      	movs	r0, #3
}
 801f67a:	bd08      	pop	{r3, pc}
 801f67c:	0803f8e4 	.word	0x0803f8e4

0801f680 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801f680:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801f682:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 801f686:	f7ea fb05 	bl	8009c94 <HAL_PCD_EP_SetStall>
 801f68a:	2803      	cmp	r0, #3
 801f68c:	d802      	bhi.n	801f694 <USBD_LL_StallEP+0x14>
 801f68e:	4b02      	ldr	r3, [pc, #8]	; (801f698 <USBD_LL_StallEP+0x18>)
 801f690:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 801f692:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801f694:	2003      	movs	r0, #3
}
 801f696:	bd08      	pop	{r3, pc}
 801f698:	0803f8e4 	.word	0x0803f8e4

0801f69c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801f69c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801f69e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 801f6a2:	f7ea fb3b 	bl	8009d1c <HAL_PCD_EP_ClrStall>
 801f6a6:	2803      	cmp	r0, #3
 801f6a8:	d802      	bhi.n	801f6b0 <USBD_LL_ClearStallEP+0x14>
 801f6aa:	4b02      	ldr	r3, [pc, #8]	; (801f6b4 <USBD_LL_ClearStallEP+0x18>)
 801f6ac:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 801f6ae:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801f6b0:	2003      	movs	r0, #3
}
 801f6b2:	bd08      	pop	{r3, pc}
 801f6b4:	0803f8e4 	.word	0x0803f8e4

0801f6b8 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;

  if((ep_addr & 0x80) == 0x80)
 801f6b8:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801f6ba:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 801f6be:	d406      	bmi.n	801f6ce <USBD_LL_IsStallEP+0x16>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801f6c0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 801f6c4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801f6c8:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
  }
}
 801f6cc:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801f6ce:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 801f6d2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 801f6d6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801f6da:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 801f6de:	4770      	bx	lr

0801f6e0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801f6e0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801f6e2:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 801f6e6:	f7ea f9fd 	bl	8009ae4 <HAL_PCD_SetAddress>
 801f6ea:	2803      	cmp	r0, #3
 801f6ec:	d802      	bhi.n	801f6f4 <USBD_LL_SetUSBAddress+0x14>
 801f6ee:	4b02      	ldr	r3, [pc, #8]	; (801f6f8 <USBD_LL_SetUSBAddress+0x18>)
 801f6f0:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 801f6f2:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801f6f4:	2003      	movs	r0, #3
}
 801f6f6:	bd08      	pop	{r3, pc}
 801f6f8:	0803f8e4 	.word	0x0803f8e4

0801f6fc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801f6fc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801f6fe:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 801f702:	f7ea faa3 	bl	8009c4c <HAL_PCD_EP_Transmit>
 801f706:	2803      	cmp	r0, #3
 801f708:	d802      	bhi.n	801f710 <USBD_LL_Transmit+0x14>
 801f70a:	4b02      	ldr	r3, [pc, #8]	; (801f714 <USBD_LL_Transmit+0x18>)
 801f70c:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 801f70e:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801f710:	2003      	movs	r0, #3
}
 801f712:	bd08      	pop	{r3, pc}
 801f714:	0803f8e4 	.word	0x0803f8e4

0801f718 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801f718:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801f71a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 801f71e:	f7ea fa63 	bl	8009be8 <HAL_PCD_EP_Receive>
 801f722:	2803      	cmp	r0, #3
 801f724:	d802      	bhi.n	801f72c <USBD_LL_PrepareReceive+0x14>
 801f726:	4b02      	ldr	r3, [pc, #8]	; (801f730 <USBD_LL_PrepareReceive+0x18>)
 801f728:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 801f72a:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801f72c:	2003      	movs	r0, #3
}
 801f72e:	bd08      	pop	{r3, pc}
 801f730:	0803f8e4 	.word	0x0803f8e4

0801f734 <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801f734:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 801f738:	f7ea ba7e 	b.w	8009c38 <HAL_PCD_EP_GetRxCount>

0801f73c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801f73c:	b510      	push	{r4, lr}
 801f73e:	4604      	mov	r4, r0
  switch (msg)
 801f740:	b1a1      	cbz	r1, 801f76c <HAL_PCDEx_LPM_Callback+0x30>
 801f742:	2901      	cmp	r1, #1
 801f744:	d111      	bne.n	801f76a <HAL_PCDEx_LPM_Callback+0x2e>
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
    USBD_LL_Resume(hpcd->pData);
    break;

  case PCD_LPM_L1_ACTIVE:
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801f746:	6802      	ldr	r2, [r0, #0]
    USBD_LL_Suspend(hpcd->pData);
 801f748:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801f74c:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 801f750:	f043 0301 	orr.w	r3, r3, #1
 801f754:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 801f758:	f7f1 f81e 	bl	8010798 <USBD_LL_Suspend>

    /* Enter in STOP mode. */
    if (hpcd->Init.low_power_enable)
 801f75c:	6a23      	ldr	r3, [r4, #32]
 801f75e:	b123      	cbz	r3, 801f76a <HAL_PCDEx_LPM_Callback+0x2e>
    {
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801f760:	4a0d      	ldr	r2, [pc, #52]	; (801f798 <HAL_PCDEx_LPM_Callback+0x5c>)
 801f762:	6913      	ldr	r3, [r2, #16]
 801f764:	f043 0306 	orr.w	r3, r3, #6
 801f768:	6113      	str	r3, [r2, #16]
    }
    break;
  }
}
 801f76a:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 801f76c:	6a03      	ldr	r3, [r0, #32]
 801f76e:	b133      	cbz	r3, 801f77e <HAL_PCDEx_LPM_Callback+0x42>
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 801f770:	f7e2 fb7e 	bl	8001e70 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801f774:	4a08      	ldr	r2, [pc, #32]	; (801f798 <HAL_PCDEx_LPM_Callback+0x5c>)
 801f776:	6913      	ldr	r3, [r2, #16]
 801f778:	f023 0306 	bic.w	r3, r3, #6
 801f77c:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801f77e:	6822      	ldr	r2, [r4, #0]
    USBD_LL_Resume(hpcd->pData);
 801f780:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801f784:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 801f788:	f023 0301 	bic.w	r3, r3, #1
}
 801f78c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801f790:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Resume(hpcd->pData);
 801f794:	f7f1 b80a 	b.w	80107ac <USBD_LL_Resume>
 801f798:	e000ed00 	.word	0xe000ed00

0801f79c <atoi>:
 801f79c:	220a      	movs	r2, #10
 801f79e:	2100      	movs	r1, #0
 801f7a0:	f002 b942 	b.w	8021a28 <strtol>

0801f7a4 <ctime>:
 801f7a4:	b508      	push	{r3, lr}
 801f7a6:	f000 f829 	bl	801f7fc <localtime>
 801f7aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801f7ae:	f002 bd05 	b.w	80221bc <asctime>
	...

0801f7b4 <__libc_init_array>:
 801f7b4:	b570      	push	{r4, r5, r6, lr}
 801f7b6:	4e0d      	ldr	r6, [pc, #52]	; (801f7ec <__libc_init_array+0x38>)
 801f7b8:	4c0d      	ldr	r4, [pc, #52]	; (801f7f0 <__libc_init_array+0x3c>)
 801f7ba:	1ba4      	subs	r4, r4, r6
 801f7bc:	10a4      	asrs	r4, r4, #2
 801f7be:	2500      	movs	r5, #0
 801f7c0:	42a5      	cmp	r5, r4
 801f7c2:	d109      	bne.n	801f7d8 <__libc_init_array+0x24>
 801f7c4:	4e0b      	ldr	r6, [pc, #44]	; (801f7f4 <__libc_init_array+0x40>)
 801f7c6:	4c0c      	ldr	r4, [pc, #48]	; (801f7f8 <__libc_init_array+0x44>)
 801f7c8:	f004 ffb0 	bl	802472c <_init>
 801f7cc:	1ba4      	subs	r4, r4, r6
 801f7ce:	10a4      	asrs	r4, r4, #2
 801f7d0:	2500      	movs	r5, #0
 801f7d2:	42a5      	cmp	r5, r4
 801f7d4:	d105      	bne.n	801f7e2 <__libc_init_array+0x2e>
 801f7d6:	bd70      	pop	{r4, r5, r6, pc}
 801f7d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801f7dc:	4798      	blx	r3
 801f7de:	3501      	adds	r5, #1
 801f7e0:	e7ee      	b.n	801f7c0 <__libc_init_array+0xc>
 801f7e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801f7e6:	4798      	blx	r3
 801f7e8:	3501      	adds	r5, #1
 801f7ea:	e7f2      	b.n	801f7d2 <__libc_init_array+0x1e>
 801f7ec:	0803ffa0 	.word	0x0803ffa0
 801f7f0:	0803ffa0 	.word	0x0803ffa0
 801f7f4:	0803ffa0 	.word	0x0803ffa0
 801f7f8:	0803ffa4 	.word	0x0803ffa4

0801f7fc <localtime>:
 801f7fc:	b538      	push	{r3, r4, r5, lr}
 801f7fe:	4b07      	ldr	r3, [pc, #28]	; (801f81c <localtime+0x20>)
 801f800:	681c      	ldr	r4, [r3, #0]
 801f802:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801f804:	4605      	mov	r5, r0
 801f806:	b91b      	cbnz	r3, 801f810 <localtime+0x14>
 801f808:	2024      	movs	r0, #36	; 0x24
 801f80a:	f000 f907 	bl	801fa1c <malloc>
 801f80e:	63e0      	str	r0, [r4, #60]	; 0x3c
 801f810:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801f812:	4628      	mov	r0, r5
 801f814:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f818:	f000 b802 	b.w	801f820 <localtime_r>
 801f81c:	20000450 	.word	0x20000450

0801f820 <localtime_r>:
 801f820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f824:	460c      	mov	r4, r1
 801f826:	4680      	mov	r8, r0
 801f828:	f003 fcc0 	bl	80231ac <__gettzinfo>
 801f82c:	4621      	mov	r1, r4
 801f82e:	4607      	mov	r7, r0
 801f830:	4640      	mov	r0, r8
 801f832:	f003 fcbf 	bl	80231b4 <gmtime_r>
 801f836:	6946      	ldr	r6, [r0, #20]
 801f838:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 801f83c:	07b2      	lsls	r2, r6, #30
 801f83e:	4604      	mov	r4, r0
 801f840:	d105      	bne.n	801f84e <localtime_r+0x2e>
 801f842:	2264      	movs	r2, #100	; 0x64
 801f844:	fb96 f3f2 	sdiv	r3, r6, r2
 801f848:	fb02 6313 	mls	r3, r2, r3, r6
 801f84c:	bb13      	cbnz	r3, 801f894 <localtime_r+0x74>
 801f84e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801f852:	fb96 f5f3 	sdiv	r5, r6, r3
 801f856:	fb03 6515 	mls	r5, r3, r5, r6
 801f85a:	fab5 f585 	clz	r5, r5
 801f85e:	096d      	lsrs	r5, r5, #5
 801f860:	4b63      	ldr	r3, [pc, #396]	; (801f9f0 <localtime_r+0x1d0>)
 801f862:	2230      	movs	r2, #48	; 0x30
 801f864:	fb02 3505 	mla	r5, r2, r5, r3
 801f868:	f002 fa3e 	bl	8021ce8 <__tz_lock>
 801f86c:	f002 fa3e 	bl	8021cec <_tzset_unlocked>
 801f870:	4b60      	ldr	r3, [pc, #384]	; (801f9f4 <localtime_r+0x1d4>)
 801f872:	681b      	ldr	r3, [r3, #0]
 801f874:	b323      	cbz	r3, 801f8c0 <localtime_r+0xa0>
 801f876:	687b      	ldr	r3, [r7, #4]
 801f878:	42b3      	cmp	r3, r6
 801f87a:	d10d      	bne.n	801f898 <localtime_r+0x78>
 801f87c:	683e      	ldr	r6, [r7, #0]
 801f87e:	e9d8 0100 	ldrd	r0, r1, [r8]
 801f882:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801f886:	b97e      	cbnz	r6, 801f8a8 <localtime_r+0x88>
 801f888:	4290      	cmp	r0, r2
 801f88a:	eb71 0303 	sbcs.w	r3, r1, r3
 801f88e:	db0f      	blt.n	801f8b0 <localtime_r+0x90>
 801f890:	2301      	movs	r3, #1
 801f892:	e015      	b.n	801f8c0 <localtime_r+0xa0>
 801f894:	2501      	movs	r5, #1
 801f896:	e7e3      	b.n	801f860 <localtime_r+0x40>
 801f898:	4630      	mov	r0, r6
 801f89a:	f002 f97d 	bl	8021b98 <__tzcalc_limits>
 801f89e:	2800      	cmp	r0, #0
 801f8a0:	d1ec      	bne.n	801f87c <localtime_r+0x5c>
 801f8a2:	f04f 33ff 	mov.w	r3, #4294967295
 801f8a6:	e00b      	b.n	801f8c0 <localtime_r+0xa0>
 801f8a8:	4290      	cmp	r0, r2
 801f8aa:	eb71 0303 	sbcs.w	r3, r1, r3
 801f8ae:	db58      	blt.n	801f962 <localtime_r+0x142>
 801f8b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801f8b4:	4290      	cmp	r0, r2
 801f8b6:	eb71 0303 	sbcs.w	r3, r1, r3
 801f8ba:	bfb4      	ite	lt
 801f8bc:	2301      	movlt	r3, #1
 801f8be:	2300      	movge	r3, #0
 801f8c0:	6223      	str	r3, [r4, #32]
 801f8c2:	6a23      	ldr	r3, [r4, #32]
 801f8c4:	2b01      	cmp	r3, #1
 801f8c6:	bf0c      	ite	eq
 801f8c8:	6d39      	ldreq	r1, [r7, #80]	; 0x50
 801f8ca:	6ab9      	ldrne	r1, [r7, #40]	; 0x28
 801f8cc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801f8d0:	203c      	movs	r0, #60	; 0x3c
 801f8d2:	fb91 f6f3 	sdiv	r6, r1, r3
 801f8d6:	fb03 1316 	mls	r3, r3, r6, r1
 801f8da:	6861      	ldr	r1, [r4, #4]
 801f8dc:	fb93 f2f0 	sdiv	r2, r3, r0
 801f8e0:	fb00 3012 	mls	r0, r0, r2, r3
 801f8e4:	6823      	ldr	r3, [r4, #0]
 801f8e6:	1a89      	subs	r1, r1, r2
 801f8e8:	68a2      	ldr	r2, [r4, #8]
 801f8ea:	6061      	str	r1, [r4, #4]
 801f8ec:	1a1b      	subs	r3, r3, r0
 801f8ee:	1b92      	subs	r2, r2, r6
 801f8f0:	2b3b      	cmp	r3, #59	; 0x3b
 801f8f2:	6023      	str	r3, [r4, #0]
 801f8f4:	60a2      	str	r2, [r4, #8]
 801f8f6:	dd36      	ble.n	801f966 <localtime_r+0x146>
 801f8f8:	3101      	adds	r1, #1
 801f8fa:	6061      	str	r1, [r4, #4]
 801f8fc:	3b3c      	subs	r3, #60	; 0x3c
 801f8fe:	6023      	str	r3, [r4, #0]
 801f900:	6863      	ldr	r3, [r4, #4]
 801f902:	2b3b      	cmp	r3, #59	; 0x3b
 801f904:	dd35      	ble.n	801f972 <localtime_r+0x152>
 801f906:	3201      	adds	r2, #1
 801f908:	60a2      	str	r2, [r4, #8]
 801f90a:	3b3c      	subs	r3, #60	; 0x3c
 801f90c:	6063      	str	r3, [r4, #4]
 801f90e:	68a3      	ldr	r3, [r4, #8]
 801f910:	2b17      	cmp	r3, #23
 801f912:	dd34      	ble.n	801f97e <localtime_r+0x15e>
 801f914:	69e2      	ldr	r2, [r4, #28]
 801f916:	3201      	adds	r2, #1
 801f918:	61e2      	str	r2, [r4, #28]
 801f91a:	69a2      	ldr	r2, [r4, #24]
 801f91c:	3201      	adds	r2, #1
 801f91e:	2a06      	cmp	r2, #6
 801f920:	bfc8      	it	gt
 801f922:	2200      	movgt	r2, #0
 801f924:	61a2      	str	r2, [r4, #24]
 801f926:	68e2      	ldr	r2, [r4, #12]
 801f928:	3b18      	subs	r3, #24
 801f92a:	3201      	adds	r2, #1
 801f92c:	60a3      	str	r3, [r4, #8]
 801f92e:	6923      	ldr	r3, [r4, #16]
 801f930:	60e2      	str	r2, [r4, #12]
 801f932:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 801f936:	428a      	cmp	r2, r1
 801f938:	dd0e      	ble.n	801f958 <localtime_r+0x138>
 801f93a:	3301      	adds	r3, #1
 801f93c:	2b0c      	cmp	r3, #12
 801f93e:	bf0c      	ite	eq
 801f940:	6963      	ldreq	r3, [r4, #20]
 801f942:	6123      	strne	r3, [r4, #16]
 801f944:	eba2 0201 	sub.w	r2, r2, r1
 801f948:	60e2      	str	r2, [r4, #12]
 801f94a:	bf01      	itttt	eq
 801f94c:	3301      	addeq	r3, #1
 801f94e:	2200      	moveq	r2, #0
 801f950:	6122      	streq	r2, [r4, #16]
 801f952:	6163      	streq	r3, [r4, #20]
 801f954:	bf08      	it	eq
 801f956:	61e2      	streq	r2, [r4, #28]
 801f958:	f002 f9c7 	bl	8021cea <__tz_unlock>
 801f95c:	4620      	mov	r0, r4
 801f95e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f962:	2300      	movs	r3, #0
 801f964:	e7ac      	b.n	801f8c0 <localtime_r+0xa0>
 801f966:	2b00      	cmp	r3, #0
 801f968:	daca      	bge.n	801f900 <localtime_r+0xe0>
 801f96a:	3901      	subs	r1, #1
 801f96c:	6061      	str	r1, [r4, #4]
 801f96e:	333c      	adds	r3, #60	; 0x3c
 801f970:	e7c5      	b.n	801f8fe <localtime_r+0xde>
 801f972:	2b00      	cmp	r3, #0
 801f974:	dacb      	bge.n	801f90e <localtime_r+0xee>
 801f976:	3a01      	subs	r2, #1
 801f978:	60a2      	str	r2, [r4, #8]
 801f97a:	333c      	adds	r3, #60	; 0x3c
 801f97c:	e7c6      	b.n	801f90c <localtime_r+0xec>
 801f97e:	2b00      	cmp	r3, #0
 801f980:	daea      	bge.n	801f958 <localtime_r+0x138>
 801f982:	69e2      	ldr	r2, [r4, #28]
 801f984:	3a01      	subs	r2, #1
 801f986:	61e2      	str	r2, [r4, #28]
 801f988:	69a2      	ldr	r2, [r4, #24]
 801f98a:	3a01      	subs	r2, #1
 801f98c:	bf48      	it	mi
 801f98e:	2206      	movmi	r2, #6
 801f990:	61a2      	str	r2, [r4, #24]
 801f992:	68e2      	ldr	r2, [r4, #12]
 801f994:	3318      	adds	r3, #24
 801f996:	3a01      	subs	r2, #1
 801f998:	60e2      	str	r2, [r4, #12]
 801f99a:	60a3      	str	r3, [r4, #8]
 801f99c:	2a00      	cmp	r2, #0
 801f99e:	d1db      	bne.n	801f958 <localtime_r+0x138>
 801f9a0:	6923      	ldr	r3, [r4, #16]
 801f9a2:	3b01      	subs	r3, #1
 801f9a4:	d405      	bmi.n	801f9b2 <localtime_r+0x192>
 801f9a6:	6123      	str	r3, [r4, #16]
 801f9a8:	6923      	ldr	r3, [r4, #16]
 801f9aa:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801f9ae:	60e3      	str	r3, [r4, #12]
 801f9b0:	e7d2      	b.n	801f958 <localtime_r+0x138>
 801f9b2:	6962      	ldr	r2, [r4, #20]
 801f9b4:	230b      	movs	r3, #11
 801f9b6:	1e51      	subs	r1, r2, #1
 801f9b8:	6123      	str	r3, [r4, #16]
 801f9ba:	078b      	lsls	r3, r1, #30
 801f9bc:	6161      	str	r1, [r4, #20]
 801f9be:	f202 726b 	addw	r2, r2, #1899	; 0x76b
 801f9c2:	d105      	bne.n	801f9d0 <localtime_r+0x1b0>
 801f9c4:	2164      	movs	r1, #100	; 0x64
 801f9c6:	fb92 f3f1 	sdiv	r3, r2, r1
 801f9ca:	fb01 2313 	mls	r3, r1, r3, r2
 801f9ce:	b963      	cbnz	r3, 801f9ea <localtime_r+0x1ca>
 801f9d0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801f9d4:	fb92 f3f1 	sdiv	r3, r2, r1
 801f9d8:	fb01 2313 	mls	r3, r1, r3, r2
 801f9dc:	fab3 f383 	clz	r3, r3
 801f9e0:	095b      	lsrs	r3, r3, #5
 801f9e2:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 801f9e6:	61e3      	str	r3, [r4, #28]
 801f9e8:	e7de      	b.n	801f9a8 <localtime_r+0x188>
 801f9ea:	2301      	movs	r3, #1
 801f9ec:	e7f9      	b.n	801f9e2 <localtime_r+0x1c2>
 801f9ee:	bf00      	nop
 801f9f0:	0803f958 	.word	0x0803f958
 801f9f4:	2002276c 	.word	0x2002276c

0801f9f8 <__locale_ctype_ptr_l>:
 801f9f8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801f9fc:	4770      	bx	lr
	...

0801fa00 <__locale_ctype_ptr>:
 801fa00:	4b04      	ldr	r3, [pc, #16]	; (801fa14 <__locale_ctype_ptr+0x14>)
 801fa02:	4a05      	ldr	r2, [pc, #20]	; (801fa18 <__locale_ctype_ptr+0x18>)
 801fa04:	681b      	ldr	r3, [r3, #0]
 801fa06:	6a1b      	ldr	r3, [r3, #32]
 801fa08:	2b00      	cmp	r3, #0
 801fa0a:	bf08      	it	eq
 801fa0c:	4613      	moveq	r3, r2
 801fa0e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801fa12:	4770      	bx	lr
 801fa14:	20000450 	.word	0x20000450
 801fa18:	200004b4 	.word	0x200004b4

0801fa1c <malloc>:
 801fa1c:	4b02      	ldr	r3, [pc, #8]	; (801fa28 <malloc+0xc>)
 801fa1e:	4601      	mov	r1, r0
 801fa20:	6818      	ldr	r0, [r3, #0]
 801fa22:	f000 bb3b 	b.w	802009c <_malloc_r>
 801fa26:	bf00      	nop
 801fa28:	20000450 	.word	0x20000450

0801fa2c <free>:
 801fa2c:	4b02      	ldr	r3, [pc, #8]	; (801fa38 <free+0xc>)
 801fa2e:	4601      	mov	r1, r0
 801fa30:	6818      	ldr	r0, [r3, #0]
 801fa32:	f000 bae5 	b.w	8020000 <_free_r>
 801fa36:	bf00      	nop
 801fa38:	20000450 	.word	0x20000450

0801fa3c <__ascii_mbtowc>:
 801fa3c:	b082      	sub	sp, #8
 801fa3e:	b901      	cbnz	r1, 801fa42 <__ascii_mbtowc+0x6>
 801fa40:	a901      	add	r1, sp, #4
 801fa42:	b142      	cbz	r2, 801fa56 <__ascii_mbtowc+0x1a>
 801fa44:	b14b      	cbz	r3, 801fa5a <__ascii_mbtowc+0x1e>
 801fa46:	7813      	ldrb	r3, [r2, #0]
 801fa48:	600b      	str	r3, [r1, #0]
 801fa4a:	7812      	ldrb	r2, [r2, #0]
 801fa4c:	1c10      	adds	r0, r2, #0
 801fa4e:	bf18      	it	ne
 801fa50:	2001      	movne	r0, #1
 801fa52:	b002      	add	sp, #8
 801fa54:	4770      	bx	lr
 801fa56:	4610      	mov	r0, r2
 801fa58:	e7fb      	b.n	801fa52 <__ascii_mbtowc+0x16>
 801fa5a:	f06f 0001 	mvn.w	r0, #1
 801fa5e:	e7f8      	b.n	801fa52 <__ascii_mbtowc+0x16>

0801fa60 <memcmp>:
 801fa60:	b530      	push	{r4, r5, lr}
 801fa62:	2400      	movs	r4, #0
 801fa64:	42a2      	cmp	r2, r4
 801fa66:	d101      	bne.n	801fa6c <memcmp+0xc>
 801fa68:	2000      	movs	r0, #0
 801fa6a:	e007      	b.n	801fa7c <memcmp+0x1c>
 801fa6c:	5d03      	ldrb	r3, [r0, r4]
 801fa6e:	3401      	adds	r4, #1
 801fa70:	190d      	adds	r5, r1, r4
 801fa72:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801fa76:	42ab      	cmp	r3, r5
 801fa78:	d0f4      	beq.n	801fa64 <memcmp+0x4>
 801fa7a:	1b58      	subs	r0, r3, r5
 801fa7c:	bd30      	pop	{r4, r5, pc}

0801fa7e <memcpy>:
 801fa7e:	b510      	push	{r4, lr}
 801fa80:	1e43      	subs	r3, r0, #1
 801fa82:	440a      	add	r2, r1
 801fa84:	4291      	cmp	r1, r2
 801fa86:	d100      	bne.n	801fa8a <memcpy+0xc>
 801fa88:	bd10      	pop	{r4, pc}
 801fa8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801fa8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801fa92:	e7f7      	b.n	801fa84 <memcpy+0x6>

0801fa94 <memmove>:
 801fa94:	4288      	cmp	r0, r1
 801fa96:	b510      	push	{r4, lr}
 801fa98:	eb01 0302 	add.w	r3, r1, r2
 801fa9c:	d807      	bhi.n	801faae <memmove+0x1a>
 801fa9e:	1e42      	subs	r2, r0, #1
 801faa0:	4299      	cmp	r1, r3
 801faa2:	d00a      	beq.n	801faba <memmove+0x26>
 801faa4:	f811 4b01 	ldrb.w	r4, [r1], #1
 801faa8:	f802 4f01 	strb.w	r4, [r2, #1]!
 801faac:	e7f8      	b.n	801faa0 <memmove+0xc>
 801faae:	4283      	cmp	r3, r0
 801fab0:	d9f5      	bls.n	801fa9e <memmove+0xa>
 801fab2:	1881      	adds	r1, r0, r2
 801fab4:	1ad2      	subs	r2, r2, r3
 801fab6:	42d3      	cmn	r3, r2
 801fab8:	d100      	bne.n	801fabc <memmove+0x28>
 801faba:	bd10      	pop	{r4, pc}
 801fabc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801fac0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801fac4:	e7f7      	b.n	801fab6 <memmove+0x22>

0801fac6 <memset>:
 801fac6:	4402      	add	r2, r0
 801fac8:	4603      	mov	r3, r0
 801faca:	4293      	cmp	r3, r2
 801facc:	d100      	bne.n	801fad0 <memset+0xa>
 801face:	4770      	bx	lr
 801fad0:	f803 1b01 	strb.w	r1, [r3], #1
 801fad4:	e7f9      	b.n	801faca <memset+0x4>
	...

0801fad8 <validate_structure>:
 801fad8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801fada:	6801      	ldr	r1, [r0, #0]
 801fadc:	293b      	cmp	r1, #59	; 0x3b
 801fade:	4604      	mov	r4, r0
 801fae0:	d911      	bls.n	801fb06 <validate_structure+0x2e>
 801fae2:	223c      	movs	r2, #60	; 0x3c
 801fae4:	4668      	mov	r0, sp
 801fae6:	f002 fbb5 	bl	8022254 <div>
 801faea:	9a01      	ldr	r2, [sp, #4]
 801faec:	6863      	ldr	r3, [r4, #4]
 801faee:	9900      	ldr	r1, [sp, #0]
 801faf0:	2a00      	cmp	r2, #0
 801faf2:	440b      	add	r3, r1
 801faf4:	6063      	str	r3, [r4, #4]
 801faf6:	bfbb      	ittet	lt
 801faf8:	323c      	addlt	r2, #60	; 0x3c
 801fafa:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801fafe:	6022      	strge	r2, [r4, #0]
 801fb00:	6022      	strlt	r2, [r4, #0]
 801fb02:	bfb8      	it	lt
 801fb04:	6063      	strlt	r3, [r4, #4]
 801fb06:	6861      	ldr	r1, [r4, #4]
 801fb08:	293b      	cmp	r1, #59	; 0x3b
 801fb0a:	d911      	bls.n	801fb30 <validate_structure+0x58>
 801fb0c:	223c      	movs	r2, #60	; 0x3c
 801fb0e:	4668      	mov	r0, sp
 801fb10:	f002 fba0 	bl	8022254 <div>
 801fb14:	9a01      	ldr	r2, [sp, #4]
 801fb16:	68a3      	ldr	r3, [r4, #8]
 801fb18:	9900      	ldr	r1, [sp, #0]
 801fb1a:	2a00      	cmp	r2, #0
 801fb1c:	440b      	add	r3, r1
 801fb1e:	60a3      	str	r3, [r4, #8]
 801fb20:	bfbb      	ittet	lt
 801fb22:	323c      	addlt	r2, #60	; 0x3c
 801fb24:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801fb28:	6062      	strge	r2, [r4, #4]
 801fb2a:	6062      	strlt	r2, [r4, #4]
 801fb2c:	bfb8      	it	lt
 801fb2e:	60a3      	strlt	r3, [r4, #8]
 801fb30:	68a1      	ldr	r1, [r4, #8]
 801fb32:	2917      	cmp	r1, #23
 801fb34:	d911      	bls.n	801fb5a <validate_structure+0x82>
 801fb36:	2218      	movs	r2, #24
 801fb38:	4668      	mov	r0, sp
 801fb3a:	f002 fb8b 	bl	8022254 <div>
 801fb3e:	9a01      	ldr	r2, [sp, #4]
 801fb40:	68e3      	ldr	r3, [r4, #12]
 801fb42:	9900      	ldr	r1, [sp, #0]
 801fb44:	2a00      	cmp	r2, #0
 801fb46:	440b      	add	r3, r1
 801fb48:	60e3      	str	r3, [r4, #12]
 801fb4a:	bfbb      	ittet	lt
 801fb4c:	3218      	addlt	r2, #24
 801fb4e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801fb52:	60a2      	strge	r2, [r4, #8]
 801fb54:	60a2      	strlt	r2, [r4, #8]
 801fb56:	bfb8      	it	lt
 801fb58:	60e3      	strlt	r3, [r4, #12]
 801fb5a:	6921      	ldr	r1, [r4, #16]
 801fb5c:	290b      	cmp	r1, #11
 801fb5e:	d911      	bls.n	801fb84 <validate_structure+0xac>
 801fb60:	220c      	movs	r2, #12
 801fb62:	4668      	mov	r0, sp
 801fb64:	f002 fb76 	bl	8022254 <div>
 801fb68:	9a01      	ldr	r2, [sp, #4]
 801fb6a:	6963      	ldr	r3, [r4, #20]
 801fb6c:	9900      	ldr	r1, [sp, #0]
 801fb6e:	2a00      	cmp	r2, #0
 801fb70:	440b      	add	r3, r1
 801fb72:	6163      	str	r3, [r4, #20]
 801fb74:	bfbb      	ittet	lt
 801fb76:	320c      	addlt	r2, #12
 801fb78:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801fb7c:	6122      	strge	r2, [r4, #16]
 801fb7e:	6122      	strlt	r2, [r4, #16]
 801fb80:	bfb8      	it	lt
 801fb82:	6163      	strlt	r3, [r4, #20]
 801fb84:	6963      	ldr	r3, [r4, #20]
 801fb86:	0799      	lsls	r1, r3, #30
 801fb88:	d120      	bne.n	801fbcc <validate_structure+0xf4>
 801fb8a:	2164      	movs	r1, #100	; 0x64
 801fb8c:	fb93 f2f1 	sdiv	r2, r3, r1
 801fb90:	fb01 3212 	mls	r2, r1, r2, r3
 801fb94:	b9e2      	cbnz	r2, 801fbd0 <validate_structure+0xf8>
 801fb96:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 801fb9a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801fb9e:	fb93 f2f1 	sdiv	r2, r3, r1
 801fba2:	fb01 3312 	mls	r3, r1, r2, r3
 801fba6:	2b00      	cmp	r3, #0
 801fba8:	bf14      	ite	ne
 801fbaa:	231c      	movne	r3, #28
 801fbac:	231d      	moveq	r3, #29
 801fbae:	68e2      	ldr	r2, [r4, #12]
 801fbb0:	2a00      	cmp	r2, #0
 801fbb2:	dc0f      	bgt.n	801fbd4 <validate_structure+0xfc>
 801fbb4:	4f34      	ldr	r7, [pc, #208]	; (801fc88 <validate_structure+0x1b0>)
 801fbb6:	260b      	movs	r6, #11
 801fbb8:	2064      	movs	r0, #100	; 0x64
 801fbba:	f44f 75c8 	mov.w	r5, #400	; 0x190
 801fbbe:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801fbc2:	f1bc 0f00 	cmp.w	ip, #0
 801fbc6:	dd14      	ble.n	801fbf2 <validate_structure+0x11a>
 801fbc8:	b003      	add	sp, #12
 801fbca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fbcc:	231c      	movs	r3, #28
 801fbce:	e7ee      	b.n	801fbae <validate_structure+0xd6>
 801fbd0:	231d      	movs	r3, #29
 801fbd2:	e7ec      	b.n	801fbae <validate_structure+0xd6>
 801fbd4:	4f2c      	ldr	r7, [pc, #176]	; (801fc88 <validate_structure+0x1b0>)
 801fbd6:	f04f 0c00 	mov.w	ip, #0
 801fbda:	2564      	movs	r5, #100	; 0x64
 801fbdc:	f44f 76c8 	mov.w	r6, #400	; 0x190
 801fbe0:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 801fbe4:	2a01      	cmp	r2, #1
 801fbe6:	d02f      	beq.n	801fc48 <validate_structure+0x170>
 801fbe8:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
 801fbec:	4281      	cmp	r1, r0
 801fbee:	dc2e      	bgt.n	801fc4e <validate_structure+0x176>
 801fbf0:	e7ea      	b.n	801fbc8 <validate_structure+0xf0>
 801fbf2:	6921      	ldr	r1, [r4, #16]
 801fbf4:	3901      	subs	r1, #1
 801fbf6:	6121      	str	r1, [r4, #16]
 801fbf8:	3101      	adds	r1, #1
 801fbfa:	d114      	bne.n	801fc26 <validate_structure+0x14e>
 801fbfc:	6963      	ldr	r3, [r4, #20]
 801fbfe:	1e59      	subs	r1, r3, #1
 801fc00:	078a      	lsls	r2, r1, #30
 801fc02:	e9c4 6104 	strd	r6, r1, [r4, #16]
 801fc06:	d117      	bne.n	801fc38 <validate_structure+0x160>
 801fc08:	fb91 f2f0 	sdiv	r2, r1, r0
 801fc0c:	fb00 1112 	mls	r1, r0, r2, r1
 801fc10:	b9a1      	cbnz	r1, 801fc3c <validate_structure+0x164>
 801fc12:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 801fc16:	fb93 f2f5 	sdiv	r2, r3, r5
 801fc1a:	fb05 3312 	mls	r3, r5, r2, r3
 801fc1e:	2b00      	cmp	r3, #0
 801fc20:	bf14      	ite	ne
 801fc22:	231c      	movne	r3, #28
 801fc24:	231d      	moveq	r3, #29
 801fc26:	6922      	ldr	r2, [r4, #16]
 801fc28:	2a01      	cmp	r2, #1
 801fc2a:	bf14      	ite	ne
 801fc2c:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 801fc30:	461a      	moveq	r2, r3
 801fc32:	4462      	add	r2, ip
 801fc34:	60e2      	str	r2, [r4, #12]
 801fc36:	e7c2      	b.n	801fbbe <validate_structure+0xe6>
 801fc38:	231c      	movs	r3, #28
 801fc3a:	e7f4      	b.n	801fc26 <validate_structure+0x14e>
 801fc3c:	231d      	movs	r3, #29
 801fc3e:	e7f2      	b.n	801fc26 <validate_structure+0x14e>
 801fc40:	231c      	movs	r3, #28
 801fc42:	e7cd      	b.n	801fbe0 <validate_structure+0x108>
 801fc44:	231d      	movs	r3, #29
 801fc46:	e7cb      	b.n	801fbe0 <validate_structure+0x108>
 801fc48:	428b      	cmp	r3, r1
 801fc4a:	dabd      	bge.n	801fbc8 <validate_structure+0xf0>
 801fc4c:	4618      	mov	r0, r3
 801fc4e:	3201      	adds	r2, #1
 801fc50:	1a09      	subs	r1, r1, r0
 801fc52:	2a0c      	cmp	r2, #12
 801fc54:	60e1      	str	r1, [r4, #12]
 801fc56:	6122      	str	r2, [r4, #16]
 801fc58:	d1c2      	bne.n	801fbe0 <validate_structure+0x108>
 801fc5a:	6963      	ldr	r3, [r4, #20]
 801fc5c:	1c5a      	adds	r2, r3, #1
 801fc5e:	0791      	lsls	r1, r2, #30
 801fc60:	e9c4 c204 	strd	ip, r2, [r4, #16]
 801fc64:	d1ec      	bne.n	801fc40 <validate_structure+0x168>
 801fc66:	fb92 f1f5 	sdiv	r1, r2, r5
 801fc6a:	fb05 2211 	mls	r2, r5, r1, r2
 801fc6e:	2a00      	cmp	r2, #0
 801fc70:	d1e8      	bne.n	801fc44 <validate_structure+0x16c>
 801fc72:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 801fc76:	fb93 f2f6 	sdiv	r2, r3, r6
 801fc7a:	fb06 3312 	mls	r3, r6, r2, r3
 801fc7e:	2b00      	cmp	r3, #0
 801fc80:	bf14      	ite	ne
 801fc82:	231c      	movne	r3, #28
 801fc84:	231d      	moveq	r3, #29
 801fc86:	e7ab      	b.n	801fbe0 <validate_structure+0x108>
 801fc88:	0803f8f8 	.word	0x0803f8f8

0801fc8c <mktime>:
 801fc8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc90:	b089      	sub	sp, #36	; 0x24
 801fc92:	4606      	mov	r6, r0
 801fc94:	f003 fa8a 	bl	80231ac <__gettzinfo>
 801fc98:	4680      	mov	r8, r0
 801fc9a:	4630      	mov	r0, r6
 801fc9c:	f7ff ff1c 	bl	801fad8 <validate_structure>
 801fca0:	e9d6 3000 	ldrd	r3, r0, [r6]
 801fca4:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 801fca8:	fb0a 3a00 	mla	sl, sl, r0, r3
 801fcac:	68b0      	ldr	r0, [r6, #8]
 801fcae:	4abe      	ldr	r2, [pc, #760]	; (801ffa8 <mktime+0x31c>)
 801fcb0:	6975      	ldr	r5, [r6, #20]
 801fcb2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801fcb6:	fb03 aa00 	mla	sl, r3, r0, sl
 801fcba:	e9d6 4303 	ldrd	r4, r3, [r6, #12]
 801fcbe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801fcc2:	3c01      	subs	r4, #1
 801fcc4:	2b01      	cmp	r3, #1
 801fcc6:	ea4f 7bea 	mov.w	fp, sl, asr #31
 801fcca:	4414      	add	r4, r2
 801fccc:	dd11      	ble.n	801fcf2 <mktime+0x66>
 801fcce:	07a9      	lsls	r1, r5, #30
 801fcd0:	d10f      	bne.n	801fcf2 <mktime+0x66>
 801fcd2:	2264      	movs	r2, #100	; 0x64
 801fcd4:	fb95 f3f2 	sdiv	r3, r5, r2
 801fcd8:	fb02 5313 	mls	r3, r2, r3, r5
 801fcdc:	b943      	cbnz	r3, 801fcf0 <mktime+0x64>
 801fcde:	f205 716c 	addw	r1, r5, #1900	; 0x76c
 801fce2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801fce6:	fb91 f3f2 	sdiv	r3, r1, r2
 801fcea:	fb02 1313 	mls	r3, r2, r3, r1
 801fcee:	b903      	cbnz	r3, 801fcf2 <mktime+0x66>
 801fcf0:	3401      	adds	r4, #1
 801fcf2:	f505 531c 	add.w	r3, r5, #9984	; 0x2700
 801fcf6:	3310      	adds	r3, #16
 801fcf8:	f644 6220 	movw	r2, #20000	; 0x4e20
 801fcfc:	4293      	cmp	r3, r2
 801fcfe:	61f4      	str	r4, [r6, #28]
 801fd00:	f200 8179 	bhi.w	801fff6 <mktime+0x36a>
 801fd04:	2d46      	cmp	r5, #70	; 0x46
 801fd06:	f340 8084 	ble.w	801fe12 <mktime+0x186>
 801fd0a:	2346      	movs	r3, #70	; 0x46
 801fd0c:	f240 176d 	movw	r7, #365	; 0x16d
 801fd10:	2164      	movs	r1, #100	; 0x64
 801fd12:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801fd16:	079a      	lsls	r2, r3, #30
 801fd18:	d175      	bne.n	801fe06 <mktime+0x17a>
 801fd1a:	fb93 f2f1 	sdiv	r2, r3, r1
 801fd1e:	fb01 3212 	mls	r2, r1, r2, r3
 801fd22:	2a00      	cmp	r2, #0
 801fd24:	d172      	bne.n	801fe0c <mktime+0x180>
 801fd26:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 801fd2a:	fb9c f2f0 	sdiv	r2, ip, r0
 801fd2e:	fb00 c212 	mls	r2, r0, r2, ip
 801fd32:	2a00      	cmp	r2, #0
 801fd34:	bf14      	ite	ne
 801fd36:	463a      	movne	r2, r7
 801fd38:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801fd3c:	3301      	adds	r3, #1
 801fd3e:	429d      	cmp	r5, r3
 801fd40:	4414      	add	r4, r2
 801fd42:	d1e8      	bne.n	801fd16 <mktime+0x8a>
 801fd44:	4b99      	ldr	r3, [pc, #612]	; (801ffac <mktime+0x320>)
 801fd46:	4363      	muls	r3, r4
 801fd48:	eb1a 0103 	adds.w	r1, sl, r3
 801fd4c:	eb4b 72e3 	adc.w	r2, fp, r3, asr #31
 801fd50:	e9cd 1200 	strd	r1, r2, [sp]
 801fd54:	f001 ffc8 	bl	8021ce8 <__tz_lock>
 801fd58:	f001 ffc8 	bl	8021cec <_tzset_unlocked>
 801fd5c:	4b94      	ldr	r3, [pc, #592]	; (801ffb0 <mktime+0x324>)
 801fd5e:	f8d3 9000 	ldr.w	r9, [r3]
 801fd62:	f1b9 0f00 	cmp.w	r9, #0
 801fd66:	d045      	beq.n	801fdf4 <mktime+0x168>
 801fd68:	f8d6 9020 	ldr.w	r9, [r6, #32]
 801fd6c:	6970      	ldr	r0, [r6, #20]
 801fd6e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801fd72:	464f      	mov	r7, r9
 801fd74:	2f01      	cmp	r7, #1
 801fd76:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801fd7a:	bfa8      	it	ge
 801fd7c:	2701      	movge	r7, #1
 801fd7e:	4283      	cmp	r3, r0
 801fd80:	f040 8089 	bne.w	801fe96 <mktime+0x20a>
 801fd84:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 801fd88:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
 801fd8c:	460a      	mov	r2, r1
 801fd8e:	17cb      	asrs	r3, r1, #31
 801fd90:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801fd94:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801fd98:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801fd9c:	1a12      	subs	r2, r2, r0
 801fd9e:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
 801fda2:	4692      	mov	sl, r2
 801fda4:	469b      	mov	fp, r3
 801fda6:	e9dd 2300 	ldrd	r2, r3, [sp]
 801fdaa:	4552      	cmp	r2, sl
 801fdac:	eb73 0c0b 	sbcs.w	ip, r3, fp
 801fdb0:	e9cd ab02 	strd	sl, fp, [sp, #8]
 801fdb4:	da76      	bge.n	801fea4 <mktime+0x218>
 801fdb6:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 801fdba:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801fdbe:	ebb2 0a0a 	subs.w	sl, r2, sl
 801fdc2:	eb63 0b0b 	sbc.w	fp, r3, fp
 801fdc6:	f8d8 3000 	ldr.w	r3, [r8]
 801fdca:	2b00      	cmp	r3, #0
 801fdcc:	d079      	beq.n	801fec2 <mktime+0x236>
 801fdce:	e9dd 2300 	ldrd	r2, r3, [sp]
 801fdd2:	4552      	cmp	r2, sl
 801fdd4:	eb73 030b 	sbcs.w	r3, r3, fp
 801fdd8:	db07      	blt.n	801fdea <mktime+0x15e>
 801fdda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801fdde:	e9dd ab00 	ldrd	sl, fp, [sp]
 801fde2:	4592      	cmp	sl, r2
 801fde4:	eb7b 0303 	sbcs.w	r3, fp, r3
 801fde8:	db71      	blt.n	801fece <mktime+0x242>
 801fdea:	f1b9 0f00 	cmp.w	r9, #0
 801fdee:	f04f 0900 	mov.w	r9, #0
 801fdf2:	da71      	bge.n	801fed8 <mktime+0x24c>
 801fdf4:	e9dd ab00 	ldrd	sl, fp, [sp]
 801fdf8:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 801fdfc:	eb1a 0a03 	adds.w	sl, sl, r3
 801fe00:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801fe04:	e0b4      	b.n	801ff70 <mktime+0x2e4>
 801fe06:	f240 126d 	movw	r2, #365	; 0x16d
 801fe0a:	e797      	b.n	801fd3c <mktime+0xb0>
 801fe0c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801fe10:	e794      	b.n	801fd3c <mktime+0xb0>
 801fe12:	d097      	beq.n	801fd44 <mktime+0xb8>
 801fe14:	2345      	movs	r3, #69	; 0x45
 801fe16:	f240 176d 	movw	r7, #365	; 0x16d
 801fe1a:	2164      	movs	r1, #100	; 0x64
 801fe1c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801fe20:	e012      	b.n	801fe48 <mktime+0x1bc>
 801fe22:	bb62      	cbnz	r2, 801fe7e <mktime+0x1f2>
 801fe24:	fb93 f2f1 	sdiv	r2, r3, r1
 801fe28:	fb01 3212 	mls	r2, r1, r2, r3
 801fe2c:	bb52      	cbnz	r2, 801fe84 <mktime+0x1f8>
 801fe2e:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 801fe32:	fb9c f2f0 	sdiv	r2, ip, r0
 801fe36:	fb00 c212 	mls	r2, r0, r2, ip
 801fe3a:	2a00      	cmp	r2, #0
 801fe3c:	bf14      	ite	ne
 801fe3e:	463a      	movne	r2, r7
 801fe40:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801fe44:	1aa4      	subs	r4, r4, r2
 801fe46:	3b01      	subs	r3, #1
 801fe48:	429d      	cmp	r5, r3
 801fe4a:	f003 0203 	and.w	r2, r3, #3
 801fe4e:	dbe8      	blt.n	801fe22 <mktime+0x196>
 801fe50:	b9da      	cbnz	r2, 801fe8a <mktime+0x1fe>
 801fe52:	2264      	movs	r2, #100	; 0x64
 801fe54:	fb95 f3f2 	sdiv	r3, r5, r2
 801fe58:	fb02 5313 	mls	r3, r2, r3, r5
 801fe5c:	b9c3      	cbnz	r3, 801fe90 <mktime+0x204>
 801fe5e:	f205 716c 	addw	r1, r5, #1900	; 0x76c
 801fe62:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801fe66:	fb91 f3f2 	sdiv	r3, r1, r2
 801fe6a:	fb02 1313 	mls	r3, r2, r3, r1
 801fe6e:	2b00      	cmp	r3, #0
 801fe70:	f240 136d 	movw	r3, #365	; 0x16d
 801fe74:	bf08      	it	eq
 801fe76:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 801fe7a:	1ae4      	subs	r4, r4, r3
 801fe7c:	e762      	b.n	801fd44 <mktime+0xb8>
 801fe7e:	f240 126d 	movw	r2, #365	; 0x16d
 801fe82:	e7df      	b.n	801fe44 <mktime+0x1b8>
 801fe84:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801fe88:	e7dc      	b.n	801fe44 <mktime+0x1b8>
 801fe8a:	f240 136d 	movw	r3, #365	; 0x16d
 801fe8e:	e7f4      	b.n	801fe7a <mktime+0x1ee>
 801fe90:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 801fe94:	e7f1      	b.n	801fe7a <mktime+0x1ee>
 801fe96:	f001 fe7f 	bl	8021b98 <__tzcalc_limits>
 801fe9a:	2800      	cmp	r0, #0
 801fe9c:	f47f af72 	bne.w	801fd84 <mktime+0xf8>
 801fea0:	46b9      	mov	r9, r7
 801fea2:	e057      	b.n	801ff54 <mktime+0x2c8>
 801fea4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801fea8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801feac:	ebb2 020a 	subs.w	r2, r2, sl
 801feb0:	eb63 030b 	sbc.w	r3, r3, fp
 801feb4:	e9dd ab00 	ldrd	sl, fp, [sp]
 801feb8:	4592      	cmp	sl, r2
 801feba:	eb7b 0303 	sbcs.w	r3, fp, r3
 801febe:	dbef      	blt.n	801fea0 <mktime+0x214>
 801fec0:	e779      	b.n	801fdb6 <mktime+0x12a>
 801fec2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801fec6:	4552      	cmp	r2, sl
 801fec8:	eb73 030b 	sbcs.w	r3, r3, fp
 801fecc:	db85      	blt.n	801fdda <mktime+0x14e>
 801fece:	f1b9 0f00 	cmp.w	r9, #0
 801fed2:	db43      	blt.n	801ff5c <mktime+0x2d0>
 801fed4:	f04f 0901 	mov.w	r9, #1
 801fed8:	ea87 0709 	eor.w	r7, r7, r9
 801fedc:	2f01      	cmp	r7, #1
 801fede:	d139      	bne.n	801ff54 <mktime+0x2c8>
 801fee0:	1a40      	subs	r0, r0, r1
 801fee2:	f1b9 0f00 	cmp.w	r9, #0
 801fee6:	d100      	bne.n	801feea <mktime+0x25e>
 801fee8:	4240      	negs	r0, r0
 801feea:	6833      	ldr	r3, [r6, #0]
 801feec:	4403      	add	r3, r0
 801feee:	6033      	str	r3, [r6, #0]
 801fef0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801fef4:	1812      	adds	r2, r2, r0
 801fef6:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
 801fefa:	e9cd 2300 	strd	r2, r3, [sp]
 801fefe:	4630      	mov	r0, r6
 801ff00:	68f2      	ldr	r2, [r6, #12]
 801ff02:	9202      	str	r2, [sp, #8]
 801ff04:	f7ff fde8 	bl	801fad8 <validate_structure>
 801ff08:	68f3      	ldr	r3, [r6, #12]
 801ff0a:	9a02      	ldr	r2, [sp, #8]
 801ff0c:	1a9b      	subs	r3, r3, r2
 801ff0e:	d021      	beq.n	801ff54 <mktime+0x2c8>
 801ff10:	2b01      	cmp	r3, #1
 801ff12:	dc40      	bgt.n	801ff96 <mktime+0x30a>
 801ff14:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ff18:	bfa8      	it	ge
 801ff1a:	461f      	movge	r7, r3
 801ff1c:	69f3      	ldr	r3, [r6, #28]
 801ff1e:	443c      	add	r4, r7
 801ff20:	18ff      	adds	r7, r7, r3
 801ff22:	d547      	bpl.n	801ffb4 <mktime+0x328>
 801ff24:	1e6a      	subs	r2, r5, #1
 801ff26:	0791      	lsls	r1, r2, #30
 801ff28:	d138      	bne.n	801ff9c <mktime+0x310>
 801ff2a:	2164      	movs	r1, #100	; 0x64
 801ff2c:	fb92 f3f1 	sdiv	r3, r2, r1
 801ff30:	fb01 2313 	mls	r3, r1, r3, r2
 801ff34:	bbab      	cbnz	r3, 801ffa2 <mktime+0x316>
 801ff36:	f205 756b 	addw	r5, r5, #1899	; 0x76b
 801ff3a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801ff3e:	fb95 f3f2 	sdiv	r3, r5, r2
 801ff42:	fb02 5513 	mls	r5, r2, r3, r5
 801ff46:	2d00      	cmp	r5, #0
 801ff48:	f240 136d 	movw	r3, #365	; 0x16d
 801ff4c:	bf18      	it	ne
 801ff4e:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 801ff52:	61f3      	str	r3, [r6, #28]
 801ff54:	f1b9 0f01 	cmp.w	r9, #1
 801ff58:	f47f af4c 	bne.w	801fdf4 <mktime+0x168>
 801ff5c:	e9dd ab00 	ldrd	sl, fp, [sp]
 801ff60:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
 801ff64:	eb1a 0a03 	adds.w	sl, sl, r3
 801ff68:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801ff6c:	f04f 0901 	mov.w	r9, #1
 801ff70:	f001 febb 	bl	8021cea <__tz_unlock>
 801ff74:	3404      	adds	r4, #4
 801ff76:	2307      	movs	r3, #7
 801ff78:	fb94 f3f3 	sdiv	r3, r4, r3
 801ff7c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801ff80:	1ae4      	subs	r4, r4, r3
 801ff82:	bf48      	it	mi
 801ff84:	3407      	addmi	r4, #7
 801ff86:	f8c6 9020 	str.w	r9, [r6, #32]
 801ff8a:	61b4      	str	r4, [r6, #24]
 801ff8c:	4650      	mov	r0, sl
 801ff8e:	4659      	mov	r1, fp
 801ff90:	b009      	add	sp, #36	; 0x24
 801ff92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff96:	f04f 37ff 	mov.w	r7, #4294967295
 801ff9a:	e7bf      	b.n	801ff1c <mktime+0x290>
 801ff9c:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 801ffa0:	e7d7      	b.n	801ff52 <mktime+0x2c6>
 801ffa2:	f240 136d 	movw	r3, #365	; 0x16d
 801ffa6:	e7d4      	b.n	801ff52 <mktime+0x2c6>
 801ffa8:	0803f928 	.word	0x0803f928
 801ffac:	00015180 	.word	0x00015180
 801ffb0:	2002276c 	.word	0x2002276c
 801ffb4:	07ab      	lsls	r3, r5, #30
 801ffb6:	d118      	bne.n	801ffea <mktime+0x35e>
 801ffb8:	2264      	movs	r2, #100	; 0x64
 801ffba:	fb95 f3f2 	sdiv	r3, r5, r2
 801ffbe:	fb02 5313 	mls	r3, r2, r3, r5
 801ffc2:	b9ab      	cbnz	r3, 801fff0 <mktime+0x364>
 801ffc4:	f205 756c 	addw	r5, r5, #1900	; 0x76c
 801ffc8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801ffcc:	fb95 f3f2 	sdiv	r3, r5, r2
 801ffd0:	fb02 5513 	mls	r5, r2, r3, r5
 801ffd4:	2d00      	cmp	r5, #0
 801ffd6:	f240 136d 	movw	r3, #365	; 0x16d
 801ffda:	bf08      	it	eq
 801ffdc:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 801ffe0:	429f      	cmp	r7, r3
 801ffe2:	bfa8      	it	ge
 801ffe4:	1aff      	subge	r7, r7, r3
 801ffe6:	61f7      	str	r7, [r6, #28]
 801ffe8:	e7b4      	b.n	801ff54 <mktime+0x2c8>
 801ffea:	f240 136d 	movw	r3, #365	; 0x16d
 801ffee:	e7f7      	b.n	801ffe0 <mktime+0x354>
 801fff0:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 801fff4:	e7f4      	b.n	801ffe0 <mktime+0x354>
 801fff6:	f04f 3aff 	mov.w	sl, #4294967295
 801fffa:	f04f 3bff 	mov.w	fp, #4294967295
 801fffe:	e7c5      	b.n	801ff8c <mktime+0x300>

08020000 <_free_r>:
 8020000:	b538      	push	{r3, r4, r5, lr}
 8020002:	4605      	mov	r5, r0
 8020004:	2900      	cmp	r1, #0
 8020006:	d045      	beq.n	8020094 <_free_r+0x94>
 8020008:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802000c:	1f0c      	subs	r4, r1, #4
 802000e:	2b00      	cmp	r3, #0
 8020010:	bfb8      	it	lt
 8020012:	18e4      	addlt	r4, r4, r3
 8020014:	f003 fa04 	bl	8023420 <__malloc_lock>
 8020018:	4a1f      	ldr	r2, [pc, #124]	; (8020098 <_free_r+0x98>)
 802001a:	6813      	ldr	r3, [r2, #0]
 802001c:	4610      	mov	r0, r2
 802001e:	b933      	cbnz	r3, 802002e <_free_r+0x2e>
 8020020:	6063      	str	r3, [r4, #4]
 8020022:	6014      	str	r4, [r2, #0]
 8020024:	4628      	mov	r0, r5
 8020026:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802002a:	f003 b9fa 	b.w	8023422 <__malloc_unlock>
 802002e:	42a3      	cmp	r3, r4
 8020030:	d90c      	bls.n	802004c <_free_r+0x4c>
 8020032:	6821      	ldr	r1, [r4, #0]
 8020034:	1862      	adds	r2, r4, r1
 8020036:	4293      	cmp	r3, r2
 8020038:	bf04      	itt	eq
 802003a:	681a      	ldreq	r2, [r3, #0]
 802003c:	685b      	ldreq	r3, [r3, #4]
 802003e:	6063      	str	r3, [r4, #4]
 8020040:	bf04      	itt	eq
 8020042:	1852      	addeq	r2, r2, r1
 8020044:	6022      	streq	r2, [r4, #0]
 8020046:	6004      	str	r4, [r0, #0]
 8020048:	e7ec      	b.n	8020024 <_free_r+0x24>
 802004a:	4613      	mov	r3, r2
 802004c:	685a      	ldr	r2, [r3, #4]
 802004e:	b10a      	cbz	r2, 8020054 <_free_r+0x54>
 8020050:	42a2      	cmp	r2, r4
 8020052:	d9fa      	bls.n	802004a <_free_r+0x4a>
 8020054:	6819      	ldr	r1, [r3, #0]
 8020056:	1858      	adds	r0, r3, r1
 8020058:	42a0      	cmp	r0, r4
 802005a:	d10b      	bne.n	8020074 <_free_r+0x74>
 802005c:	6820      	ldr	r0, [r4, #0]
 802005e:	4401      	add	r1, r0
 8020060:	1858      	adds	r0, r3, r1
 8020062:	4282      	cmp	r2, r0
 8020064:	6019      	str	r1, [r3, #0]
 8020066:	d1dd      	bne.n	8020024 <_free_r+0x24>
 8020068:	6810      	ldr	r0, [r2, #0]
 802006a:	6852      	ldr	r2, [r2, #4]
 802006c:	605a      	str	r2, [r3, #4]
 802006e:	4401      	add	r1, r0
 8020070:	6019      	str	r1, [r3, #0]
 8020072:	e7d7      	b.n	8020024 <_free_r+0x24>
 8020074:	d902      	bls.n	802007c <_free_r+0x7c>
 8020076:	230c      	movs	r3, #12
 8020078:	602b      	str	r3, [r5, #0]
 802007a:	e7d3      	b.n	8020024 <_free_r+0x24>
 802007c:	6820      	ldr	r0, [r4, #0]
 802007e:	1821      	adds	r1, r4, r0
 8020080:	428a      	cmp	r2, r1
 8020082:	bf04      	itt	eq
 8020084:	6811      	ldreq	r1, [r2, #0]
 8020086:	6852      	ldreq	r2, [r2, #4]
 8020088:	6062      	str	r2, [r4, #4]
 802008a:	bf04      	itt	eq
 802008c:	1809      	addeq	r1, r1, r0
 802008e:	6021      	streq	r1, [r4, #0]
 8020090:	605c      	str	r4, [r3, #4]
 8020092:	e7c7      	b.n	8020024 <_free_r+0x24>
 8020094:	bd38      	pop	{r3, r4, r5, pc}
 8020096:	bf00      	nop
 8020098:	20022748 	.word	0x20022748

0802009c <_malloc_r>:
 802009c:	b570      	push	{r4, r5, r6, lr}
 802009e:	1ccd      	adds	r5, r1, #3
 80200a0:	f025 0503 	bic.w	r5, r5, #3
 80200a4:	3508      	adds	r5, #8
 80200a6:	2d0c      	cmp	r5, #12
 80200a8:	bf38      	it	cc
 80200aa:	250c      	movcc	r5, #12
 80200ac:	2d00      	cmp	r5, #0
 80200ae:	4606      	mov	r6, r0
 80200b0:	db01      	blt.n	80200b6 <_malloc_r+0x1a>
 80200b2:	42a9      	cmp	r1, r5
 80200b4:	d903      	bls.n	80200be <_malloc_r+0x22>
 80200b6:	230c      	movs	r3, #12
 80200b8:	6033      	str	r3, [r6, #0]
 80200ba:	2000      	movs	r0, #0
 80200bc:	bd70      	pop	{r4, r5, r6, pc}
 80200be:	f003 f9af 	bl	8023420 <__malloc_lock>
 80200c2:	4a21      	ldr	r2, [pc, #132]	; (8020148 <_malloc_r+0xac>)
 80200c4:	6814      	ldr	r4, [r2, #0]
 80200c6:	4621      	mov	r1, r4
 80200c8:	b991      	cbnz	r1, 80200f0 <_malloc_r+0x54>
 80200ca:	4c20      	ldr	r4, [pc, #128]	; (802014c <_malloc_r+0xb0>)
 80200cc:	6823      	ldr	r3, [r4, #0]
 80200ce:	b91b      	cbnz	r3, 80200d8 <_malloc_r+0x3c>
 80200d0:	4630      	mov	r0, r6
 80200d2:	f000 fd8d 	bl	8020bf0 <_sbrk_r>
 80200d6:	6020      	str	r0, [r4, #0]
 80200d8:	4629      	mov	r1, r5
 80200da:	4630      	mov	r0, r6
 80200dc:	f000 fd88 	bl	8020bf0 <_sbrk_r>
 80200e0:	1c43      	adds	r3, r0, #1
 80200e2:	d124      	bne.n	802012e <_malloc_r+0x92>
 80200e4:	230c      	movs	r3, #12
 80200e6:	6033      	str	r3, [r6, #0]
 80200e8:	4630      	mov	r0, r6
 80200ea:	f003 f99a 	bl	8023422 <__malloc_unlock>
 80200ee:	e7e4      	b.n	80200ba <_malloc_r+0x1e>
 80200f0:	680b      	ldr	r3, [r1, #0]
 80200f2:	1b5b      	subs	r3, r3, r5
 80200f4:	d418      	bmi.n	8020128 <_malloc_r+0x8c>
 80200f6:	2b0b      	cmp	r3, #11
 80200f8:	d90f      	bls.n	802011a <_malloc_r+0x7e>
 80200fa:	600b      	str	r3, [r1, #0]
 80200fc:	50cd      	str	r5, [r1, r3]
 80200fe:	18cc      	adds	r4, r1, r3
 8020100:	4630      	mov	r0, r6
 8020102:	f003 f98e 	bl	8023422 <__malloc_unlock>
 8020106:	f104 000b 	add.w	r0, r4, #11
 802010a:	1d23      	adds	r3, r4, #4
 802010c:	f020 0007 	bic.w	r0, r0, #7
 8020110:	1ac3      	subs	r3, r0, r3
 8020112:	d0d3      	beq.n	80200bc <_malloc_r+0x20>
 8020114:	425a      	negs	r2, r3
 8020116:	50e2      	str	r2, [r4, r3]
 8020118:	e7d0      	b.n	80200bc <_malloc_r+0x20>
 802011a:	428c      	cmp	r4, r1
 802011c:	684b      	ldr	r3, [r1, #4]
 802011e:	bf16      	itet	ne
 8020120:	6063      	strne	r3, [r4, #4]
 8020122:	6013      	streq	r3, [r2, #0]
 8020124:	460c      	movne	r4, r1
 8020126:	e7eb      	b.n	8020100 <_malloc_r+0x64>
 8020128:	460c      	mov	r4, r1
 802012a:	6849      	ldr	r1, [r1, #4]
 802012c:	e7cc      	b.n	80200c8 <_malloc_r+0x2c>
 802012e:	1cc4      	adds	r4, r0, #3
 8020130:	f024 0403 	bic.w	r4, r4, #3
 8020134:	42a0      	cmp	r0, r4
 8020136:	d005      	beq.n	8020144 <_malloc_r+0xa8>
 8020138:	1a21      	subs	r1, r4, r0
 802013a:	4630      	mov	r0, r6
 802013c:	f000 fd58 	bl	8020bf0 <_sbrk_r>
 8020140:	3001      	adds	r0, #1
 8020142:	d0cf      	beq.n	80200e4 <_malloc_r+0x48>
 8020144:	6025      	str	r5, [r4, #0]
 8020146:	e7db      	b.n	8020100 <_malloc_r+0x64>
 8020148:	20022748 	.word	0x20022748
 802014c:	2002274c 	.word	0x2002274c

08020150 <__cvt>:
 8020150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020152:	ed2d 8b02 	vpush	{d8}
 8020156:	eeb0 8b40 	vmov.f64	d8, d0
 802015a:	b085      	sub	sp, #20
 802015c:	4617      	mov	r7, r2
 802015e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8020160:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8020162:	ee18 2a90 	vmov	r2, s17
 8020166:	f025 0520 	bic.w	r5, r5, #32
 802016a:	2a00      	cmp	r2, #0
 802016c:	bfb6      	itet	lt
 802016e:	222d      	movlt	r2, #45	; 0x2d
 8020170:	2200      	movge	r2, #0
 8020172:	eeb1 8b40 	vneglt.f64	d8, d0
 8020176:	2d46      	cmp	r5, #70	; 0x46
 8020178:	460c      	mov	r4, r1
 802017a:	701a      	strb	r2, [r3, #0]
 802017c:	d004      	beq.n	8020188 <__cvt+0x38>
 802017e:	2d45      	cmp	r5, #69	; 0x45
 8020180:	d100      	bne.n	8020184 <__cvt+0x34>
 8020182:	3401      	adds	r4, #1
 8020184:	2102      	movs	r1, #2
 8020186:	e000      	b.n	802018a <__cvt+0x3a>
 8020188:	2103      	movs	r1, #3
 802018a:	ab03      	add	r3, sp, #12
 802018c:	9301      	str	r3, [sp, #4]
 802018e:	ab02      	add	r3, sp, #8
 8020190:	9300      	str	r3, [sp, #0]
 8020192:	4622      	mov	r2, r4
 8020194:	4633      	mov	r3, r6
 8020196:	eeb0 0b48 	vmov.f64	d0, d8
 802019a:	f002 f8fd 	bl	8022398 <_dtoa_r>
 802019e:	2d47      	cmp	r5, #71	; 0x47
 80201a0:	d101      	bne.n	80201a6 <__cvt+0x56>
 80201a2:	07fb      	lsls	r3, r7, #31
 80201a4:	d51e      	bpl.n	80201e4 <__cvt+0x94>
 80201a6:	2d46      	cmp	r5, #70	; 0x46
 80201a8:	eb00 0304 	add.w	r3, r0, r4
 80201ac:	d10c      	bne.n	80201c8 <__cvt+0x78>
 80201ae:	7802      	ldrb	r2, [r0, #0]
 80201b0:	2a30      	cmp	r2, #48	; 0x30
 80201b2:	d107      	bne.n	80201c4 <__cvt+0x74>
 80201b4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80201b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80201bc:	bf1c      	itt	ne
 80201be:	f1c4 0401 	rsbne	r4, r4, #1
 80201c2:	6034      	strne	r4, [r6, #0]
 80201c4:	6832      	ldr	r2, [r6, #0]
 80201c6:	4413      	add	r3, r2
 80201c8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80201cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80201d0:	d007      	beq.n	80201e2 <__cvt+0x92>
 80201d2:	2130      	movs	r1, #48	; 0x30
 80201d4:	9a03      	ldr	r2, [sp, #12]
 80201d6:	429a      	cmp	r2, r3
 80201d8:	d204      	bcs.n	80201e4 <__cvt+0x94>
 80201da:	1c54      	adds	r4, r2, #1
 80201dc:	9403      	str	r4, [sp, #12]
 80201de:	7011      	strb	r1, [r2, #0]
 80201e0:	e7f8      	b.n	80201d4 <__cvt+0x84>
 80201e2:	9303      	str	r3, [sp, #12]
 80201e4:	9b03      	ldr	r3, [sp, #12]
 80201e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80201e8:	1a1b      	subs	r3, r3, r0
 80201ea:	6013      	str	r3, [r2, #0]
 80201ec:	b005      	add	sp, #20
 80201ee:	ecbd 8b02 	vpop	{d8}
 80201f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080201f4 <__exponent>:
 80201f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80201f6:	2900      	cmp	r1, #0
 80201f8:	4604      	mov	r4, r0
 80201fa:	bfba      	itte	lt
 80201fc:	4249      	neglt	r1, r1
 80201fe:	232d      	movlt	r3, #45	; 0x2d
 8020200:	232b      	movge	r3, #43	; 0x2b
 8020202:	2909      	cmp	r1, #9
 8020204:	f804 2b02 	strb.w	r2, [r4], #2
 8020208:	7043      	strb	r3, [r0, #1]
 802020a:	dd20      	ble.n	802024e <__exponent+0x5a>
 802020c:	f10d 0307 	add.w	r3, sp, #7
 8020210:	461f      	mov	r7, r3
 8020212:	260a      	movs	r6, #10
 8020214:	fb91 f5f6 	sdiv	r5, r1, r6
 8020218:	fb06 1115 	mls	r1, r6, r5, r1
 802021c:	3130      	adds	r1, #48	; 0x30
 802021e:	2d09      	cmp	r5, #9
 8020220:	f803 1c01 	strb.w	r1, [r3, #-1]
 8020224:	f103 32ff 	add.w	r2, r3, #4294967295
 8020228:	4629      	mov	r1, r5
 802022a:	dc09      	bgt.n	8020240 <__exponent+0x4c>
 802022c:	3130      	adds	r1, #48	; 0x30
 802022e:	3b02      	subs	r3, #2
 8020230:	f802 1c01 	strb.w	r1, [r2, #-1]
 8020234:	42bb      	cmp	r3, r7
 8020236:	4622      	mov	r2, r4
 8020238:	d304      	bcc.n	8020244 <__exponent+0x50>
 802023a:	1a10      	subs	r0, r2, r0
 802023c:	b003      	add	sp, #12
 802023e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020240:	4613      	mov	r3, r2
 8020242:	e7e7      	b.n	8020214 <__exponent+0x20>
 8020244:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020248:	f804 2b01 	strb.w	r2, [r4], #1
 802024c:	e7f2      	b.n	8020234 <__exponent+0x40>
 802024e:	2330      	movs	r3, #48	; 0x30
 8020250:	4419      	add	r1, r3
 8020252:	7083      	strb	r3, [r0, #2]
 8020254:	1d02      	adds	r2, r0, #4
 8020256:	70c1      	strb	r1, [r0, #3]
 8020258:	e7ef      	b.n	802023a <__exponent+0x46>
 802025a:	0000      	movs	r0, r0
 802025c:	0000      	movs	r0, r0
	...

08020260 <_printf_float>:
 8020260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020264:	b08d      	sub	sp, #52	; 0x34
 8020266:	460c      	mov	r4, r1
 8020268:	4616      	mov	r6, r2
 802026a:	461f      	mov	r7, r3
 802026c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8020270:	4605      	mov	r5, r0
 8020272:	f003 f851 	bl	8023318 <_localeconv_r>
 8020276:	f8d0 b000 	ldr.w	fp, [r0]
 802027a:	4658      	mov	r0, fp
 802027c:	f7df ffea 	bl	8000254 <strlen>
 8020280:	2300      	movs	r3, #0
 8020282:	930a      	str	r3, [sp, #40]	; 0x28
 8020284:	f8d8 3000 	ldr.w	r3, [r8]
 8020288:	9005      	str	r0, [sp, #20]
 802028a:	3307      	adds	r3, #7
 802028c:	f023 0307 	bic.w	r3, r3, #7
 8020290:	f103 0108 	add.w	r1, r3, #8
 8020294:	f894 9018 	ldrb.w	r9, [r4, #24]
 8020298:	6822      	ldr	r2, [r4, #0]
 802029a:	f8c8 1000 	str.w	r1, [r8]
 802029e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80202a2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80202a6:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8020530 <_printf_float+0x2d0>
 80202aa:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80202ae:	eeb0 6bc0 	vabs.f64	d6, d0
 80202b2:	eeb4 6b47 	vcmp.f64	d6, d7
 80202b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80202ba:	dd24      	ble.n	8020306 <_printf_float+0xa6>
 80202bc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80202c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80202c4:	d502      	bpl.n	80202cc <_printf_float+0x6c>
 80202c6:	232d      	movs	r3, #45	; 0x2d
 80202c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80202cc:	499a      	ldr	r1, [pc, #616]	; (8020538 <_printf_float+0x2d8>)
 80202ce:	4b9b      	ldr	r3, [pc, #620]	; (802053c <_printf_float+0x2dc>)
 80202d0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80202d4:	bf8c      	ite	hi
 80202d6:	4688      	movhi	r8, r1
 80202d8:	4698      	movls	r8, r3
 80202da:	f022 0204 	bic.w	r2, r2, #4
 80202de:	2303      	movs	r3, #3
 80202e0:	6123      	str	r3, [r4, #16]
 80202e2:	6022      	str	r2, [r4, #0]
 80202e4:	f04f 0a00 	mov.w	sl, #0
 80202e8:	9700      	str	r7, [sp, #0]
 80202ea:	4633      	mov	r3, r6
 80202ec:	aa0b      	add	r2, sp, #44	; 0x2c
 80202ee:	4621      	mov	r1, r4
 80202f0:	4628      	mov	r0, r5
 80202f2:	f000 f9e1 	bl	80206b8 <_printf_common>
 80202f6:	3001      	adds	r0, #1
 80202f8:	f040 8089 	bne.w	802040e <_printf_float+0x1ae>
 80202fc:	f04f 30ff 	mov.w	r0, #4294967295
 8020300:	b00d      	add	sp, #52	; 0x34
 8020302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020306:	eeb4 0b40 	vcmp.f64	d0, d0
 802030a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802030e:	d702      	bvc.n	8020316 <_printf_float+0xb6>
 8020310:	498b      	ldr	r1, [pc, #556]	; (8020540 <_printf_float+0x2e0>)
 8020312:	4b8c      	ldr	r3, [pc, #560]	; (8020544 <_printf_float+0x2e4>)
 8020314:	e7dc      	b.n	80202d0 <_printf_float+0x70>
 8020316:	6861      	ldr	r1, [r4, #4]
 8020318:	1c4b      	adds	r3, r1, #1
 802031a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 802031e:	ab0a      	add	r3, sp, #40	; 0x28
 8020320:	a809      	add	r0, sp, #36	; 0x24
 8020322:	d13b      	bne.n	802039c <_printf_float+0x13c>
 8020324:	2106      	movs	r1, #6
 8020326:	6061      	str	r1, [r4, #4]
 8020328:	f04f 0c00 	mov.w	ip, #0
 802032c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8020330:	e9cd 0900 	strd	r0, r9, [sp]
 8020334:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8020338:	6022      	str	r2, [r4, #0]
 802033a:	6861      	ldr	r1, [r4, #4]
 802033c:	4628      	mov	r0, r5
 802033e:	f7ff ff07 	bl	8020150 <__cvt>
 8020342:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 8020346:	2b47      	cmp	r3, #71	; 0x47
 8020348:	4680      	mov	r8, r0
 802034a:	d109      	bne.n	8020360 <_printf_float+0x100>
 802034c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802034e:	1cd8      	adds	r0, r3, #3
 8020350:	db02      	blt.n	8020358 <_printf_float+0xf8>
 8020352:	6862      	ldr	r2, [r4, #4]
 8020354:	4293      	cmp	r3, r2
 8020356:	dd47      	ble.n	80203e8 <_printf_float+0x188>
 8020358:	f1a9 0902 	sub.w	r9, r9, #2
 802035c:	fa5f f989 	uxtb.w	r9, r9
 8020360:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8020364:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020366:	d824      	bhi.n	80203b2 <_printf_float+0x152>
 8020368:	3901      	subs	r1, #1
 802036a:	464a      	mov	r2, r9
 802036c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8020370:	9109      	str	r1, [sp, #36]	; 0x24
 8020372:	f7ff ff3f 	bl	80201f4 <__exponent>
 8020376:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020378:	1813      	adds	r3, r2, r0
 802037a:	2a01      	cmp	r2, #1
 802037c:	4682      	mov	sl, r0
 802037e:	6123      	str	r3, [r4, #16]
 8020380:	dc02      	bgt.n	8020388 <_printf_float+0x128>
 8020382:	6822      	ldr	r2, [r4, #0]
 8020384:	07d1      	lsls	r1, r2, #31
 8020386:	d501      	bpl.n	802038c <_printf_float+0x12c>
 8020388:	3301      	adds	r3, #1
 802038a:	6123      	str	r3, [r4, #16]
 802038c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8020390:	2b00      	cmp	r3, #0
 8020392:	d0a9      	beq.n	80202e8 <_printf_float+0x88>
 8020394:	232d      	movs	r3, #45	; 0x2d
 8020396:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802039a:	e7a5      	b.n	80202e8 <_printf_float+0x88>
 802039c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 80203a0:	f000 8178 	beq.w	8020694 <_printf_float+0x434>
 80203a4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80203a8:	d1be      	bne.n	8020328 <_printf_float+0xc8>
 80203aa:	2900      	cmp	r1, #0
 80203ac:	d1bc      	bne.n	8020328 <_printf_float+0xc8>
 80203ae:	2101      	movs	r1, #1
 80203b0:	e7b9      	b.n	8020326 <_printf_float+0xc6>
 80203b2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80203b6:	d119      	bne.n	80203ec <_printf_float+0x18c>
 80203b8:	2900      	cmp	r1, #0
 80203ba:	6863      	ldr	r3, [r4, #4]
 80203bc:	dd0c      	ble.n	80203d8 <_printf_float+0x178>
 80203be:	6121      	str	r1, [r4, #16]
 80203c0:	b913      	cbnz	r3, 80203c8 <_printf_float+0x168>
 80203c2:	6822      	ldr	r2, [r4, #0]
 80203c4:	07d2      	lsls	r2, r2, #31
 80203c6:	d502      	bpl.n	80203ce <_printf_float+0x16e>
 80203c8:	3301      	adds	r3, #1
 80203ca:	440b      	add	r3, r1
 80203cc:	6123      	str	r3, [r4, #16]
 80203ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80203d0:	65a3      	str	r3, [r4, #88]	; 0x58
 80203d2:	f04f 0a00 	mov.w	sl, #0
 80203d6:	e7d9      	b.n	802038c <_printf_float+0x12c>
 80203d8:	b913      	cbnz	r3, 80203e0 <_printf_float+0x180>
 80203da:	6822      	ldr	r2, [r4, #0]
 80203dc:	07d0      	lsls	r0, r2, #31
 80203de:	d501      	bpl.n	80203e4 <_printf_float+0x184>
 80203e0:	3302      	adds	r3, #2
 80203e2:	e7f3      	b.n	80203cc <_printf_float+0x16c>
 80203e4:	2301      	movs	r3, #1
 80203e6:	e7f1      	b.n	80203cc <_printf_float+0x16c>
 80203e8:	f04f 0967 	mov.w	r9, #103	; 0x67
 80203ec:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80203f0:	4293      	cmp	r3, r2
 80203f2:	db05      	blt.n	8020400 <_printf_float+0x1a0>
 80203f4:	6822      	ldr	r2, [r4, #0]
 80203f6:	6123      	str	r3, [r4, #16]
 80203f8:	07d1      	lsls	r1, r2, #31
 80203fa:	d5e8      	bpl.n	80203ce <_printf_float+0x16e>
 80203fc:	3301      	adds	r3, #1
 80203fe:	e7e5      	b.n	80203cc <_printf_float+0x16c>
 8020400:	2b00      	cmp	r3, #0
 8020402:	bfd4      	ite	le
 8020404:	f1c3 0302 	rsble	r3, r3, #2
 8020408:	2301      	movgt	r3, #1
 802040a:	4413      	add	r3, r2
 802040c:	e7de      	b.n	80203cc <_printf_float+0x16c>
 802040e:	6823      	ldr	r3, [r4, #0]
 8020410:	055a      	lsls	r2, r3, #21
 8020412:	d407      	bmi.n	8020424 <_printf_float+0x1c4>
 8020414:	6923      	ldr	r3, [r4, #16]
 8020416:	4642      	mov	r2, r8
 8020418:	4631      	mov	r1, r6
 802041a:	4628      	mov	r0, r5
 802041c:	47b8      	blx	r7
 802041e:	3001      	adds	r0, #1
 8020420:	d12a      	bne.n	8020478 <_printf_float+0x218>
 8020422:	e76b      	b.n	80202fc <_printf_float+0x9c>
 8020424:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8020428:	f240 80de 	bls.w	80205e8 <_printf_float+0x388>
 802042c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8020430:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8020434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020438:	d133      	bne.n	80204a2 <_printf_float+0x242>
 802043a:	2301      	movs	r3, #1
 802043c:	4a42      	ldr	r2, [pc, #264]	; (8020548 <_printf_float+0x2e8>)
 802043e:	4631      	mov	r1, r6
 8020440:	4628      	mov	r0, r5
 8020442:	47b8      	blx	r7
 8020444:	3001      	adds	r0, #1
 8020446:	f43f af59 	beq.w	80202fc <_printf_float+0x9c>
 802044a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802044e:	429a      	cmp	r2, r3
 8020450:	db02      	blt.n	8020458 <_printf_float+0x1f8>
 8020452:	6823      	ldr	r3, [r4, #0]
 8020454:	07d8      	lsls	r0, r3, #31
 8020456:	d50f      	bpl.n	8020478 <_printf_float+0x218>
 8020458:	9b05      	ldr	r3, [sp, #20]
 802045a:	465a      	mov	r2, fp
 802045c:	4631      	mov	r1, r6
 802045e:	4628      	mov	r0, r5
 8020460:	47b8      	blx	r7
 8020462:	3001      	adds	r0, #1
 8020464:	f43f af4a 	beq.w	80202fc <_printf_float+0x9c>
 8020468:	f04f 0800 	mov.w	r8, #0
 802046c:	f104 091a 	add.w	r9, r4, #26
 8020470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020472:	3b01      	subs	r3, #1
 8020474:	4543      	cmp	r3, r8
 8020476:	dc09      	bgt.n	802048c <_printf_float+0x22c>
 8020478:	6823      	ldr	r3, [r4, #0]
 802047a:	079b      	lsls	r3, r3, #30
 802047c:	f100 8105 	bmi.w	802068a <_printf_float+0x42a>
 8020480:	68e0      	ldr	r0, [r4, #12]
 8020482:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020484:	4298      	cmp	r0, r3
 8020486:	bfb8      	it	lt
 8020488:	4618      	movlt	r0, r3
 802048a:	e739      	b.n	8020300 <_printf_float+0xa0>
 802048c:	2301      	movs	r3, #1
 802048e:	464a      	mov	r2, r9
 8020490:	4631      	mov	r1, r6
 8020492:	4628      	mov	r0, r5
 8020494:	47b8      	blx	r7
 8020496:	3001      	adds	r0, #1
 8020498:	f43f af30 	beq.w	80202fc <_printf_float+0x9c>
 802049c:	f108 0801 	add.w	r8, r8, #1
 80204a0:	e7e6      	b.n	8020470 <_printf_float+0x210>
 80204a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80204a4:	2b00      	cmp	r3, #0
 80204a6:	dc2b      	bgt.n	8020500 <_printf_float+0x2a0>
 80204a8:	2301      	movs	r3, #1
 80204aa:	4a27      	ldr	r2, [pc, #156]	; (8020548 <_printf_float+0x2e8>)
 80204ac:	4631      	mov	r1, r6
 80204ae:	4628      	mov	r0, r5
 80204b0:	47b8      	blx	r7
 80204b2:	3001      	adds	r0, #1
 80204b4:	f43f af22 	beq.w	80202fc <_printf_float+0x9c>
 80204b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80204ba:	b923      	cbnz	r3, 80204c6 <_printf_float+0x266>
 80204bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80204be:	b913      	cbnz	r3, 80204c6 <_printf_float+0x266>
 80204c0:	6823      	ldr	r3, [r4, #0]
 80204c2:	07d9      	lsls	r1, r3, #31
 80204c4:	d5d8      	bpl.n	8020478 <_printf_float+0x218>
 80204c6:	9b05      	ldr	r3, [sp, #20]
 80204c8:	465a      	mov	r2, fp
 80204ca:	4631      	mov	r1, r6
 80204cc:	4628      	mov	r0, r5
 80204ce:	47b8      	blx	r7
 80204d0:	3001      	adds	r0, #1
 80204d2:	f43f af13 	beq.w	80202fc <_printf_float+0x9c>
 80204d6:	f04f 0900 	mov.w	r9, #0
 80204da:	f104 0a1a 	add.w	sl, r4, #26
 80204de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80204e0:	425b      	negs	r3, r3
 80204e2:	454b      	cmp	r3, r9
 80204e4:	dc01      	bgt.n	80204ea <_printf_float+0x28a>
 80204e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80204e8:	e795      	b.n	8020416 <_printf_float+0x1b6>
 80204ea:	2301      	movs	r3, #1
 80204ec:	4652      	mov	r2, sl
 80204ee:	4631      	mov	r1, r6
 80204f0:	4628      	mov	r0, r5
 80204f2:	47b8      	blx	r7
 80204f4:	3001      	adds	r0, #1
 80204f6:	f43f af01 	beq.w	80202fc <_printf_float+0x9c>
 80204fa:	f109 0901 	add.w	r9, r9, #1
 80204fe:	e7ee      	b.n	80204de <_printf_float+0x27e>
 8020500:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020502:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8020504:	429a      	cmp	r2, r3
 8020506:	bfa8      	it	ge
 8020508:	461a      	movge	r2, r3
 802050a:	2a00      	cmp	r2, #0
 802050c:	4691      	mov	r9, r2
 802050e:	dd07      	ble.n	8020520 <_printf_float+0x2c0>
 8020510:	4613      	mov	r3, r2
 8020512:	4631      	mov	r1, r6
 8020514:	4642      	mov	r2, r8
 8020516:	4628      	mov	r0, r5
 8020518:	47b8      	blx	r7
 802051a:	3001      	adds	r0, #1
 802051c:	f43f aeee 	beq.w	80202fc <_printf_float+0x9c>
 8020520:	f104 031a 	add.w	r3, r4, #26
 8020524:	f04f 0a00 	mov.w	sl, #0
 8020528:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802052c:	9307      	str	r3, [sp, #28]
 802052e:	e017      	b.n	8020560 <_printf_float+0x300>
 8020530:	ffffffff 	.word	0xffffffff
 8020534:	7fefffff 	.word	0x7fefffff
 8020538:	0803f9bc 	.word	0x0803f9bc
 802053c:	0803f9b8 	.word	0x0803f9b8
 8020540:	0803f9c4 	.word	0x0803f9c4
 8020544:	0803f9c0 	.word	0x0803f9c0
 8020548:	0803ff93 	.word	0x0803ff93
 802054c:	2301      	movs	r3, #1
 802054e:	9a07      	ldr	r2, [sp, #28]
 8020550:	4631      	mov	r1, r6
 8020552:	4628      	mov	r0, r5
 8020554:	47b8      	blx	r7
 8020556:	3001      	adds	r0, #1
 8020558:	f43f aed0 	beq.w	80202fc <_printf_float+0x9c>
 802055c:	f10a 0a01 	add.w	sl, sl, #1
 8020560:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8020562:	9306      	str	r3, [sp, #24]
 8020564:	eba3 0309 	sub.w	r3, r3, r9
 8020568:	4553      	cmp	r3, sl
 802056a:	dcef      	bgt.n	802054c <_printf_float+0x2ec>
 802056c:	9b06      	ldr	r3, [sp, #24]
 802056e:	4498      	add	r8, r3
 8020570:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8020574:	429a      	cmp	r2, r3
 8020576:	db15      	blt.n	80205a4 <_printf_float+0x344>
 8020578:	6823      	ldr	r3, [r4, #0]
 802057a:	07da      	lsls	r2, r3, #31
 802057c:	d412      	bmi.n	80205a4 <_printf_float+0x344>
 802057e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020580:	9a06      	ldr	r2, [sp, #24]
 8020582:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020584:	1a9a      	subs	r2, r3, r2
 8020586:	eba3 0a01 	sub.w	sl, r3, r1
 802058a:	4592      	cmp	sl, r2
 802058c:	bfa8      	it	ge
 802058e:	4692      	movge	sl, r2
 8020590:	f1ba 0f00 	cmp.w	sl, #0
 8020594:	dc0e      	bgt.n	80205b4 <_printf_float+0x354>
 8020596:	f04f 0800 	mov.w	r8, #0
 802059a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802059e:	f104 091a 	add.w	r9, r4, #26
 80205a2:	e019      	b.n	80205d8 <_printf_float+0x378>
 80205a4:	9b05      	ldr	r3, [sp, #20]
 80205a6:	465a      	mov	r2, fp
 80205a8:	4631      	mov	r1, r6
 80205aa:	4628      	mov	r0, r5
 80205ac:	47b8      	blx	r7
 80205ae:	3001      	adds	r0, #1
 80205b0:	d1e5      	bne.n	802057e <_printf_float+0x31e>
 80205b2:	e6a3      	b.n	80202fc <_printf_float+0x9c>
 80205b4:	4653      	mov	r3, sl
 80205b6:	4642      	mov	r2, r8
 80205b8:	4631      	mov	r1, r6
 80205ba:	4628      	mov	r0, r5
 80205bc:	47b8      	blx	r7
 80205be:	3001      	adds	r0, #1
 80205c0:	d1e9      	bne.n	8020596 <_printf_float+0x336>
 80205c2:	e69b      	b.n	80202fc <_printf_float+0x9c>
 80205c4:	2301      	movs	r3, #1
 80205c6:	464a      	mov	r2, r9
 80205c8:	4631      	mov	r1, r6
 80205ca:	4628      	mov	r0, r5
 80205cc:	47b8      	blx	r7
 80205ce:	3001      	adds	r0, #1
 80205d0:	f43f ae94 	beq.w	80202fc <_printf_float+0x9c>
 80205d4:	f108 0801 	add.w	r8, r8, #1
 80205d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80205dc:	1a9b      	subs	r3, r3, r2
 80205de:	eba3 030a 	sub.w	r3, r3, sl
 80205e2:	4543      	cmp	r3, r8
 80205e4:	dcee      	bgt.n	80205c4 <_printf_float+0x364>
 80205e6:	e747      	b.n	8020478 <_printf_float+0x218>
 80205e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80205ea:	2a01      	cmp	r2, #1
 80205ec:	dc01      	bgt.n	80205f2 <_printf_float+0x392>
 80205ee:	07db      	lsls	r3, r3, #31
 80205f0:	d539      	bpl.n	8020666 <_printf_float+0x406>
 80205f2:	2301      	movs	r3, #1
 80205f4:	4642      	mov	r2, r8
 80205f6:	4631      	mov	r1, r6
 80205f8:	4628      	mov	r0, r5
 80205fa:	47b8      	blx	r7
 80205fc:	3001      	adds	r0, #1
 80205fe:	f43f ae7d 	beq.w	80202fc <_printf_float+0x9c>
 8020602:	9b05      	ldr	r3, [sp, #20]
 8020604:	465a      	mov	r2, fp
 8020606:	4631      	mov	r1, r6
 8020608:	4628      	mov	r0, r5
 802060a:	47b8      	blx	r7
 802060c:	3001      	adds	r0, #1
 802060e:	f108 0801 	add.w	r8, r8, #1
 8020612:	f43f ae73 	beq.w	80202fc <_printf_float+0x9c>
 8020616:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 802061a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802061c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8020620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020624:	f103 33ff 	add.w	r3, r3, #4294967295
 8020628:	d018      	beq.n	802065c <_printf_float+0x3fc>
 802062a:	4642      	mov	r2, r8
 802062c:	4631      	mov	r1, r6
 802062e:	4628      	mov	r0, r5
 8020630:	47b8      	blx	r7
 8020632:	3001      	adds	r0, #1
 8020634:	d10e      	bne.n	8020654 <_printf_float+0x3f4>
 8020636:	e661      	b.n	80202fc <_printf_float+0x9c>
 8020638:	2301      	movs	r3, #1
 802063a:	464a      	mov	r2, r9
 802063c:	4631      	mov	r1, r6
 802063e:	4628      	mov	r0, r5
 8020640:	47b8      	blx	r7
 8020642:	3001      	adds	r0, #1
 8020644:	f43f ae5a 	beq.w	80202fc <_printf_float+0x9c>
 8020648:	f108 0801 	add.w	r8, r8, #1
 802064c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802064e:	3b01      	subs	r3, #1
 8020650:	4543      	cmp	r3, r8
 8020652:	dcf1      	bgt.n	8020638 <_printf_float+0x3d8>
 8020654:	4653      	mov	r3, sl
 8020656:	f104 0250 	add.w	r2, r4, #80	; 0x50
 802065a:	e6dd      	b.n	8020418 <_printf_float+0x1b8>
 802065c:	f04f 0800 	mov.w	r8, #0
 8020660:	f104 091a 	add.w	r9, r4, #26
 8020664:	e7f2      	b.n	802064c <_printf_float+0x3ec>
 8020666:	2301      	movs	r3, #1
 8020668:	e7df      	b.n	802062a <_printf_float+0x3ca>
 802066a:	2301      	movs	r3, #1
 802066c:	464a      	mov	r2, r9
 802066e:	4631      	mov	r1, r6
 8020670:	4628      	mov	r0, r5
 8020672:	47b8      	blx	r7
 8020674:	3001      	adds	r0, #1
 8020676:	f43f ae41 	beq.w	80202fc <_printf_float+0x9c>
 802067a:	f108 0801 	add.w	r8, r8, #1
 802067e:	68e3      	ldr	r3, [r4, #12]
 8020680:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020682:	1a9b      	subs	r3, r3, r2
 8020684:	4543      	cmp	r3, r8
 8020686:	dcf0      	bgt.n	802066a <_printf_float+0x40a>
 8020688:	e6fa      	b.n	8020480 <_printf_float+0x220>
 802068a:	f04f 0800 	mov.w	r8, #0
 802068e:	f104 0919 	add.w	r9, r4, #25
 8020692:	e7f4      	b.n	802067e <_printf_float+0x41e>
 8020694:	2900      	cmp	r1, #0
 8020696:	f43f ae8a 	beq.w	80203ae <_printf_float+0x14e>
 802069a:	f04f 0c00 	mov.w	ip, #0
 802069e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80206a2:	e9cd 0900 	strd	r0, r9, [sp]
 80206a6:	6022      	str	r2, [r4, #0]
 80206a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80206ac:	4628      	mov	r0, r5
 80206ae:	f7ff fd4f 	bl	8020150 <__cvt>
 80206b2:	4680      	mov	r8, r0
 80206b4:	e64a      	b.n	802034c <_printf_float+0xec>
 80206b6:	bf00      	nop

080206b8 <_printf_common>:
 80206b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80206bc:	4691      	mov	r9, r2
 80206be:	461f      	mov	r7, r3
 80206c0:	688a      	ldr	r2, [r1, #8]
 80206c2:	690b      	ldr	r3, [r1, #16]
 80206c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80206c8:	4293      	cmp	r3, r2
 80206ca:	bfb8      	it	lt
 80206cc:	4613      	movlt	r3, r2
 80206ce:	f8c9 3000 	str.w	r3, [r9]
 80206d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80206d6:	4606      	mov	r6, r0
 80206d8:	460c      	mov	r4, r1
 80206da:	b112      	cbz	r2, 80206e2 <_printf_common+0x2a>
 80206dc:	3301      	adds	r3, #1
 80206de:	f8c9 3000 	str.w	r3, [r9]
 80206e2:	6823      	ldr	r3, [r4, #0]
 80206e4:	0699      	lsls	r1, r3, #26
 80206e6:	bf42      	ittt	mi
 80206e8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80206ec:	3302      	addmi	r3, #2
 80206ee:	f8c9 3000 	strmi.w	r3, [r9]
 80206f2:	6825      	ldr	r5, [r4, #0]
 80206f4:	f015 0506 	ands.w	r5, r5, #6
 80206f8:	d107      	bne.n	802070a <_printf_common+0x52>
 80206fa:	f104 0a19 	add.w	sl, r4, #25
 80206fe:	68e3      	ldr	r3, [r4, #12]
 8020700:	f8d9 2000 	ldr.w	r2, [r9]
 8020704:	1a9b      	subs	r3, r3, r2
 8020706:	42ab      	cmp	r3, r5
 8020708:	dc28      	bgt.n	802075c <_printf_common+0xa4>
 802070a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 802070e:	6822      	ldr	r2, [r4, #0]
 8020710:	3300      	adds	r3, #0
 8020712:	bf18      	it	ne
 8020714:	2301      	movne	r3, #1
 8020716:	0692      	lsls	r2, r2, #26
 8020718:	d42d      	bmi.n	8020776 <_printf_common+0xbe>
 802071a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802071e:	4639      	mov	r1, r7
 8020720:	4630      	mov	r0, r6
 8020722:	47c0      	blx	r8
 8020724:	3001      	adds	r0, #1
 8020726:	d020      	beq.n	802076a <_printf_common+0xb2>
 8020728:	6823      	ldr	r3, [r4, #0]
 802072a:	68e5      	ldr	r5, [r4, #12]
 802072c:	f8d9 2000 	ldr.w	r2, [r9]
 8020730:	f003 0306 	and.w	r3, r3, #6
 8020734:	2b04      	cmp	r3, #4
 8020736:	bf08      	it	eq
 8020738:	1aad      	subeq	r5, r5, r2
 802073a:	68a3      	ldr	r3, [r4, #8]
 802073c:	6922      	ldr	r2, [r4, #16]
 802073e:	bf0c      	ite	eq
 8020740:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020744:	2500      	movne	r5, #0
 8020746:	4293      	cmp	r3, r2
 8020748:	bfc4      	itt	gt
 802074a:	1a9b      	subgt	r3, r3, r2
 802074c:	18ed      	addgt	r5, r5, r3
 802074e:	f04f 0900 	mov.w	r9, #0
 8020752:	341a      	adds	r4, #26
 8020754:	454d      	cmp	r5, r9
 8020756:	d11a      	bne.n	802078e <_printf_common+0xd6>
 8020758:	2000      	movs	r0, #0
 802075a:	e008      	b.n	802076e <_printf_common+0xb6>
 802075c:	2301      	movs	r3, #1
 802075e:	4652      	mov	r2, sl
 8020760:	4639      	mov	r1, r7
 8020762:	4630      	mov	r0, r6
 8020764:	47c0      	blx	r8
 8020766:	3001      	adds	r0, #1
 8020768:	d103      	bne.n	8020772 <_printf_common+0xba>
 802076a:	f04f 30ff 	mov.w	r0, #4294967295
 802076e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020772:	3501      	adds	r5, #1
 8020774:	e7c3      	b.n	80206fe <_printf_common+0x46>
 8020776:	18e1      	adds	r1, r4, r3
 8020778:	1c5a      	adds	r2, r3, #1
 802077a:	2030      	movs	r0, #48	; 0x30
 802077c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8020780:	4422      	add	r2, r4
 8020782:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8020786:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802078a:	3302      	adds	r3, #2
 802078c:	e7c5      	b.n	802071a <_printf_common+0x62>
 802078e:	2301      	movs	r3, #1
 8020790:	4622      	mov	r2, r4
 8020792:	4639      	mov	r1, r7
 8020794:	4630      	mov	r0, r6
 8020796:	47c0      	blx	r8
 8020798:	3001      	adds	r0, #1
 802079a:	d0e6      	beq.n	802076a <_printf_common+0xb2>
 802079c:	f109 0901 	add.w	r9, r9, #1
 80207a0:	e7d8      	b.n	8020754 <_printf_common+0x9c>
	...

080207a4 <_printf_i>:
 80207a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80207a8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80207ac:	460c      	mov	r4, r1
 80207ae:	7e09      	ldrb	r1, [r1, #24]
 80207b0:	b085      	sub	sp, #20
 80207b2:	296e      	cmp	r1, #110	; 0x6e
 80207b4:	4617      	mov	r7, r2
 80207b6:	4606      	mov	r6, r0
 80207b8:	4698      	mov	r8, r3
 80207ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80207bc:	f000 80b3 	beq.w	8020926 <_printf_i+0x182>
 80207c0:	d822      	bhi.n	8020808 <_printf_i+0x64>
 80207c2:	2963      	cmp	r1, #99	; 0x63
 80207c4:	d036      	beq.n	8020834 <_printf_i+0x90>
 80207c6:	d80a      	bhi.n	80207de <_printf_i+0x3a>
 80207c8:	2900      	cmp	r1, #0
 80207ca:	f000 80b9 	beq.w	8020940 <_printf_i+0x19c>
 80207ce:	2958      	cmp	r1, #88	; 0x58
 80207d0:	f000 8083 	beq.w	80208da <_printf_i+0x136>
 80207d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80207d8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80207dc:	e032      	b.n	8020844 <_printf_i+0xa0>
 80207de:	2964      	cmp	r1, #100	; 0x64
 80207e0:	d001      	beq.n	80207e6 <_printf_i+0x42>
 80207e2:	2969      	cmp	r1, #105	; 0x69
 80207e4:	d1f6      	bne.n	80207d4 <_printf_i+0x30>
 80207e6:	6820      	ldr	r0, [r4, #0]
 80207e8:	6813      	ldr	r3, [r2, #0]
 80207ea:	0605      	lsls	r5, r0, #24
 80207ec:	f103 0104 	add.w	r1, r3, #4
 80207f0:	d52a      	bpl.n	8020848 <_printf_i+0xa4>
 80207f2:	681b      	ldr	r3, [r3, #0]
 80207f4:	6011      	str	r1, [r2, #0]
 80207f6:	2b00      	cmp	r3, #0
 80207f8:	da03      	bge.n	8020802 <_printf_i+0x5e>
 80207fa:	222d      	movs	r2, #45	; 0x2d
 80207fc:	425b      	negs	r3, r3
 80207fe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8020802:	486f      	ldr	r0, [pc, #444]	; (80209c0 <_printf_i+0x21c>)
 8020804:	220a      	movs	r2, #10
 8020806:	e039      	b.n	802087c <_printf_i+0xd8>
 8020808:	2973      	cmp	r1, #115	; 0x73
 802080a:	f000 809d 	beq.w	8020948 <_printf_i+0x1a4>
 802080e:	d808      	bhi.n	8020822 <_printf_i+0x7e>
 8020810:	296f      	cmp	r1, #111	; 0x6f
 8020812:	d020      	beq.n	8020856 <_printf_i+0xb2>
 8020814:	2970      	cmp	r1, #112	; 0x70
 8020816:	d1dd      	bne.n	80207d4 <_printf_i+0x30>
 8020818:	6823      	ldr	r3, [r4, #0]
 802081a:	f043 0320 	orr.w	r3, r3, #32
 802081e:	6023      	str	r3, [r4, #0]
 8020820:	e003      	b.n	802082a <_printf_i+0x86>
 8020822:	2975      	cmp	r1, #117	; 0x75
 8020824:	d017      	beq.n	8020856 <_printf_i+0xb2>
 8020826:	2978      	cmp	r1, #120	; 0x78
 8020828:	d1d4      	bne.n	80207d4 <_printf_i+0x30>
 802082a:	2378      	movs	r3, #120	; 0x78
 802082c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8020830:	4864      	ldr	r0, [pc, #400]	; (80209c4 <_printf_i+0x220>)
 8020832:	e055      	b.n	80208e0 <_printf_i+0x13c>
 8020834:	6813      	ldr	r3, [r2, #0]
 8020836:	1d19      	adds	r1, r3, #4
 8020838:	681b      	ldr	r3, [r3, #0]
 802083a:	6011      	str	r1, [r2, #0]
 802083c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020840:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8020844:	2301      	movs	r3, #1
 8020846:	e08c      	b.n	8020962 <_printf_i+0x1be>
 8020848:	681b      	ldr	r3, [r3, #0]
 802084a:	6011      	str	r1, [r2, #0]
 802084c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8020850:	bf18      	it	ne
 8020852:	b21b      	sxthne	r3, r3
 8020854:	e7cf      	b.n	80207f6 <_printf_i+0x52>
 8020856:	6813      	ldr	r3, [r2, #0]
 8020858:	6825      	ldr	r5, [r4, #0]
 802085a:	1d18      	adds	r0, r3, #4
 802085c:	6010      	str	r0, [r2, #0]
 802085e:	0628      	lsls	r0, r5, #24
 8020860:	d501      	bpl.n	8020866 <_printf_i+0xc2>
 8020862:	681b      	ldr	r3, [r3, #0]
 8020864:	e002      	b.n	802086c <_printf_i+0xc8>
 8020866:	0668      	lsls	r0, r5, #25
 8020868:	d5fb      	bpl.n	8020862 <_printf_i+0xbe>
 802086a:	881b      	ldrh	r3, [r3, #0]
 802086c:	4854      	ldr	r0, [pc, #336]	; (80209c0 <_printf_i+0x21c>)
 802086e:	296f      	cmp	r1, #111	; 0x6f
 8020870:	bf14      	ite	ne
 8020872:	220a      	movne	r2, #10
 8020874:	2208      	moveq	r2, #8
 8020876:	2100      	movs	r1, #0
 8020878:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802087c:	6865      	ldr	r5, [r4, #4]
 802087e:	60a5      	str	r5, [r4, #8]
 8020880:	2d00      	cmp	r5, #0
 8020882:	f2c0 8095 	blt.w	80209b0 <_printf_i+0x20c>
 8020886:	6821      	ldr	r1, [r4, #0]
 8020888:	f021 0104 	bic.w	r1, r1, #4
 802088c:	6021      	str	r1, [r4, #0]
 802088e:	2b00      	cmp	r3, #0
 8020890:	d13d      	bne.n	802090e <_printf_i+0x16a>
 8020892:	2d00      	cmp	r5, #0
 8020894:	f040 808e 	bne.w	80209b4 <_printf_i+0x210>
 8020898:	4665      	mov	r5, ip
 802089a:	2a08      	cmp	r2, #8
 802089c:	d10b      	bne.n	80208b6 <_printf_i+0x112>
 802089e:	6823      	ldr	r3, [r4, #0]
 80208a0:	07db      	lsls	r3, r3, #31
 80208a2:	d508      	bpl.n	80208b6 <_printf_i+0x112>
 80208a4:	6923      	ldr	r3, [r4, #16]
 80208a6:	6862      	ldr	r2, [r4, #4]
 80208a8:	429a      	cmp	r2, r3
 80208aa:	bfde      	ittt	le
 80208ac:	2330      	movle	r3, #48	; 0x30
 80208ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 80208b2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80208b6:	ebac 0305 	sub.w	r3, ip, r5
 80208ba:	6123      	str	r3, [r4, #16]
 80208bc:	f8cd 8000 	str.w	r8, [sp]
 80208c0:	463b      	mov	r3, r7
 80208c2:	aa03      	add	r2, sp, #12
 80208c4:	4621      	mov	r1, r4
 80208c6:	4630      	mov	r0, r6
 80208c8:	f7ff fef6 	bl	80206b8 <_printf_common>
 80208cc:	3001      	adds	r0, #1
 80208ce:	d14d      	bne.n	802096c <_printf_i+0x1c8>
 80208d0:	f04f 30ff 	mov.w	r0, #4294967295
 80208d4:	b005      	add	sp, #20
 80208d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80208da:	4839      	ldr	r0, [pc, #228]	; (80209c0 <_printf_i+0x21c>)
 80208dc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80208e0:	6813      	ldr	r3, [r2, #0]
 80208e2:	6821      	ldr	r1, [r4, #0]
 80208e4:	1d1d      	adds	r5, r3, #4
 80208e6:	681b      	ldr	r3, [r3, #0]
 80208e8:	6015      	str	r5, [r2, #0]
 80208ea:	060a      	lsls	r2, r1, #24
 80208ec:	d50b      	bpl.n	8020906 <_printf_i+0x162>
 80208ee:	07ca      	lsls	r2, r1, #31
 80208f0:	bf44      	itt	mi
 80208f2:	f041 0120 	orrmi.w	r1, r1, #32
 80208f6:	6021      	strmi	r1, [r4, #0]
 80208f8:	b91b      	cbnz	r3, 8020902 <_printf_i+0x15e>
 80208fa:	6822      	ldr	r2, [r4, #0]
 80208fc:	f022 0220 	bic.w	r2, r2, #32
 8020900:	6022      	str	r2, [r4, #0]
 8020902:	2210      	movs	r2, #16
 8020904:	e7b7      	b.n	8020876 <_printf_i+0xd2>
 8020906:	064d      	lsls	r5, r1, #25
 8020908:	bf48      	it	mi
 802090a:	b29b      	uxthmi	r3, r3
 802090c:	e7ef      	b.n	80208ee <_printf_i+0x14a>
 802090e:	4665      	mov	r5, ip
 8020910:	fbb3 f1f2 	udiv	r1, r3, r2
 8020914:	fb02 3311 	mls	r3, r2, r1, r3
 8020918:	5cc3      	ldrb	r3, [r0, r3]
 802091a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 802091e:	460b      	mov	r3, r1
 8020920:	2900      	cmp	r1, #0
 8020922:	d1f5      	bne.n	8020910 <_printf_i+0x16c>
 8020924:	e7b9      	b.n	802089a <_printf_i+0xf6>
 8020926:	6813      	ldr	r3, [r2, #0]
 8020928:	6825      	ldr	r5, [r4, #0]
 802092a:	6961      	ldr	r1, [r4, #20]
 802092c:	1d18      	adds	r0, r3, #4
 802092e:	6010      	str	r0, [r2, #0]
 8020930:	0628      	lsls	r0, r5, #24
 8020932:	681b      	ldr	r3, [r3, #0]
 8020934:	d501      	bpl.n	802093a <_printf_i+0x196>
 8020936:	6019      	str	r1, [r3, #0]
 8020938:	e002      	b.n	8020940 <_printf_i+0x19c>
 802093a:	066a      	lsls	r2, r5, #25
 802093c:	d5fb      	bpl.n	8020936 <_printf_i+0x192>
 802093e:	8019      	strh	r1, [r3, #0]
 8020940:	2300      	movs	r3, #0
 8020942:	6123      	str	r3, [r4, #16]
 8020944:	4665      	mov	r5, ip
 8020946:	e7b9      	b.n	80208bc <_printf_i+0x118>
 8020948:	6813      	ldr	r3, [r2, #0]
 802094a:	1d19      	adds	r1, r3, #4
 802094c:	6011      	str	r1, [r2, #0]
 802094e:	681d      	ldr	r5, [r3, #0]
 8020950:	6862      	ldr	r2, [r4, #4]
 8020952:	2100      	movs	r1, #0
 8020954:	4628      	mov	r0, r5
 8020956:	f7df fc8b 	bl	8000270 <memchr>
 802095a:	b108      	cbz	r0, 8020960 <_printf_i+0x1bc>
 802095c:	1b40      	subs	r0, r0, r5
 802095e:	6060      	str	r0, [r4, #4]
 8020960:	6863      	ldr	r3, [r4, #4]
 8020962:	6123      	str	r3, [r4, #16]
 8020964:	2300      	movs	r3, #0
 8020966:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802096a:	e7a7      	b.n	80208bc <_printf_i+0x118>
 802096c:	6923      	ldr	r3, [r4, #16]
 802096e:	462a      	mov	r2, r5
 8020970:	4639      	mov	r1, r7
 8020972:	4630      	mov	r0, r6
 8020974:	47c0      	blx	r8
 8020976:	3001      	adds	r0, #1
 8020978:	d0aa      	beq.n	80208d0 <_printf_i+0x12c>
 802097a:	6823      	ldr	r3, [r4, #0]
 802097c:	079b      	lsls	r3, r3, #30
 802097e:	d413      	bmi.n	80209a8 <_printf_i+0x204>
 8020980:	68e0      	ldr	r0, [r4, #12]
 8020982:	9b03      	ldr	r3, [sp, #12]
 8020984:	4298      	cmp	r0, r3
 8020986:	bfb8      	it	lt
 8020988:	4618      	movlt	r0, r3
 802098a:	e7a3      	b.n	80208d4 <_printf_i+0x130>
 802098c:	2301      	movs	r3, #1
 802098e:	464a      	mov	r2, r9
 8020990:	4639      	mov	r1, r7
 8020992:	4630      	mov	r0, r6
 8020994:	47c0      	blx	r8
 8020996:	3001      	adds	r0, #1
 8020998:	d09a      	beq.n	80208d0 <_printf_i+0x12c>
 802099a:	3501      	adds	r5, #1
 802099c:	68e3      	ldr	r3, [r4, #12]
 802099e:	9a03      	ldr	r2, [sp, #12]
 80209a0:	1a9b      	subs	r3, r3, r2
 80209a2:	42ab      	cmp	r3, r5
 80209a4:	dcf2      	bgt.n	802098c <_printf_i+0x1e8>
 80209a6:	e7eb      	b.n	8020980 <_printf_i+0x1dc>
 80209a8:	2500      	movs	r5, #0
 80209aa:	f104 0919 	add.w	r9, r4, #25
 80209ae:	e7f5      	b.n	802099c <_printf_i+0x1f8>
 80209b0:	2b00      	cmp	r3, #0
 80209b2:	d1ac      	bne.n	802090e <_printf_i+0x16a>
 80209b4:	7803      	ldrb	r3, [r0, #0]
 80209b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80209ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80209be:	e76c      	b.n	802089a <_printf_i+0xf6>
 80209c0:	0803f9c8 	.word	0x0803f9c8
 80209c4:	0803f9d9 	.word	0x0803f9d9

080209c8 <iprintf>:
 80209c8:	b40f      	push	{r0, r1, r2, r3}
 80209ca:	4b0a      	ldr	r3, [pc, #40]	; (80209f4 <iprintf+0x2c>)
 80209cc:	b513      	push	{r0, r1, r4, lr}
 80209ce:	681c      	ldr	r4, [r3, #0]
 80209d0:	b124      	cbz	r4, 80209dc <iprintf+0x14>
 80209d2:	69a3      	ldr	r3, [r4, #24]
 80209d4:	b913      	cbnz	r3, 80209dc <iprintf+0x14>
 80209d6:	4620      	mov	r0, r4
 80209d8:	f002 fb1a 	bl	8023010 <__sinit>
 80209dc:	ab05      	add	r3, sp, #20
 80209de:	9a04      	ldr	r2, [sp, #16]
 80209e0:	68a1      	ldr	r1, [r4, #8]
 80209e2:	9301      	str	r3, [sp, #4]
 80209e4:	4620      	mov	r0, r4
 80209e6:	f003 fb53 	bl	8024090 <_vfiprintf_r>
 80209ea:	b002      	add	sp, #8
 80209ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80209f0:	b004      	add	sp, #16
 80209f2:	4770      	bx	lr
 80209f4:	20000450 	.word	0x20000450

080209f8 <putchar>:
 80209f8:	b538      	push	{r3, r4, r5, lr}
 80209fa:	4b08      	ldr	r3, [pc, #32]	; (8020a1c <putchar+0x24>)
 80209fc:	681c      	ldr	r4, [r3, #0]
 80209fe:	4605      	mov	r5, r0
 8020a00:	b124      	cbz	r4, 8020a0c <putchar+0x14>
 8020a02:	69a3      	ldr	r3, [r4, #24]
 8020a04:	b913      	cbnz	r3, 8020a0c <putchar+0x14>
 8020a06:	4620      	mov	r0, r4
 8020a08:	f002 fb02 	bl	8023010 <__sinit>
 8020a0c:	68a2      	ldr	r2, [r4, #8]
 8020a0e:	4629      	mov	r1, r5
 8020a10:	4620      	mov	r0, r4
 8020a12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020a16:	f003 bda9 	b.w	802456c <_putc_r>
 8020a1a:	bf00      	nop
 8020a1c:	20000450 	.word	0x20000450

08020a20 <_puts_r>:
 8020a20:	b570      	push	{r4, r5, r6, lr}
 8020a22:	460e      	mov	r6, r1
 8020a24:	4605      	mov	r5, r0
 8020a26:	b118      	cbz	r0, 8020a30 <_puts_r+0x10>
 8020a28:	6983      	ldr	r3, [r0, #24]
 8020a2a:	b90b      	cbnz	r3, 8020a30 <_puts_r+0x10>
 8020a2c:	f002 faf0 	bl	8023010 <__sinit>
 8020a30:	69ab      	ldr	r3, [r5, #24]
 8020a32:	68ac      	ldr	r4, [r5, #8]
 8020a34:	b913      	cbnz	r3, 8020a3c <_puts_r+0x1c>
 8020a36:	4628      	mov	r0, r5
 8020a38:	f002 faea 	bl	8023010 <__sinit>
 8020a3c:	4b23      	ldr	r3, [pc, #140]	; (8020acc <_puts_r+0xac>)
 8020a3e:	429c      	cmp	r4, r3
 8020a40:	d117      	bne.n	8020a72 <_puts_r+0x52>
 8020a42:	686c      	ldr	r4, [r5, #4]
 8020a44:	89a3      	ldrh	r3, [r4, #12]
 8020a46:	071b      	lsls	r3, r3, #28
 8020a48:	d51d      	bpl.n	8020a86 <_puts_r+0x66>
 8020a4a:	6923      	ldr	r3, [r4, #16]
 8020a4c:	b1db      	cbz	r3, 8020a86 <_puts_r+0x66>
 8020a4e:	3e01      	subs	r6, #1
 8020a50:	68a3      	ldr	r3, [r4, #8]
 8020a52:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8020a56:	3b01      	subs	r3, #1
 8020a58:	60a3      	str	r3, [r4, #8]
 8020a5a:	b9e9      	cbnz	r1, 8020a98 <_puts_r+0x78>
 8020a5c:	2b00      	cmp	r3, #0
 8020a5e:	da2e      	bge.n	8020abe <_puts_r+0x9e>
 8020a60:	4622      	mov	r2, r4
 8020a62:	210a      	movs	r1, #10
 8020a64:	4628      	mov	r0, r5
 8020a66:	f001 fac5 	bl	8021ff4 <__swbuf_r>
 8020a6a:	3001      	adds	r0, #1
 8020a6c:	d011      	beq.n	8020a92 <_puts_r+0x72>
 8020a6e:	200a      	movs	r0, #10
 8020a70:	e011      	b.n	8020a96 <_puts_r+0x76>
 8020a72:	4b17      	ldr	r3, [pc, #92]	; (8020ad0 <_puts_r+0xb0>)
 8020a74:	429c      	cmp	r4, r3
 8020a76:	d101      	bne.n	8020a7c <_puts_r+0x5c>
 8020a78:	68ac      	ldr	r4, [r5, #8]
 8020a7a:	e7e3      	b.n	8020a44 <_puts_r+0x24>
 8020a7c:	4b15      	ldr	r3, [pc, #84]	; (8020ad4 <_puts_r+0xb4>)
 8020a7e:	429c      	cmp	r4, r3
 8020a80:	bf08      	it	eq
 8020a82:	68ec      	ldreq	r4, [r5, #12]
 8020a84:	e7de      	b.n	8020a44 <_puts_r+0x24>
 8020a86:	4621      	mov	r1, r4
 8020a88:	4628      	mov	r0, r5
 8020a8a:	f001 fb25 	bl	80220d8 <__swsetup_r>
 8020a8e:	2800      	cmp	r0, #0
 8020a90:	d0dd      	beq.n	8020a4e <_puts_r+0x2e>
 8020a92:	f04f 30ff 	mov.w	r0, #4294967295
 8020a96:	bd70      	pop	{r4, r5, r6, pc}
 8020a98:	2b00      	cmp	r3, #0
 8020a9a:	da04      	bge.n	8020aa6 <_puts_r+0x86>
 8020a9c:	69a2      	ldr	r2, [r4, #24]
 8020a9e:	429a      	cmp	r2, r3
 8020aa0:	dc06      	bgt.n	8020ab0 <_puts_r+0x90>
 8020aa2:	290a      	cmp	r1, #10
 8020aa4:	d004      	beq.n	8020ab0 <_puts_r+0x90>
 8020aa6:	6823      	ldr	r3, [r4, #0]
 8020aa8:	1c5a      	adds	r2, r3, #1
 8020aaa:	6022      	str	r2, [r4, #0]
 8020aac:	7019      	strb	r1, [r3, #0]
 8020aae:	e7cf      	b.n	8020a50 <_puts_r+0x30>
 8020ab0:	4622      	mov	r2, r4
 8020ab2:	4628      	mov	r0, r5
 8020ab4:	f001 fa9e 	bl	8021ff4 <__swbuf_r>
 8020ab8:	3001      	adds	r0, #1
 8020aba:	d1c9      	bne.n	8020a50 <_puts_r+0x30>
 8020abc:	e7e9      	b.n	8020a92 <_puts_r+0x72>
 8020abe:	6823      	ldr	r3, [r4, #0]
 8020ac0:	200a      	movs	r0, #10
 8020ac2:	1c5a      	adds	r2, r3, #1
 8020ac4:	6022      	str	r2, [r4, #0]
 8020ac6:	7018      	strb	r0, [r3, #0]
 8020ac8:	e7e5      	b.n	8020a96 <_puts_r+0x76>
 8020aca:	bf00      	nop
 8020acc:	0803fe30 	.word	0x0803fe30
 8020ad0:	0803fe50 	.word	0x0803fe50
 8020ad4:	0803fe10 	.word	0x0803fe10

08020ad8 <puts>:
 8020ad8:	4b02      	ldr	r3, [pc, #8]	; (8020ae4 <puts+0xc>)
 8020ada:	4601      	mov	r1, r0
 8020adc:	6818      	ldr	r0, [r3, #0]
 8020ade:	f7ff bf9f 	b.w	8020a20 <_puts_r>
 8020ae2:	bf00      	nop
 8020ae4:	20000450 	.word	0x20000450

08020ae8 <rand>:
 8020ae8:	b538      	push	{r3, r4, r5, lr}
 8020aea:	4b13      	ldr	r3, [pc, #76]	; (8020b38 <rand+0x50>)
 8020aec:	681c      	ldr	r4, [r3, #0]
 8020aee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8020af0:	b97b      	cbnz	r3, 8020b12 <rand+0x2a>
 8020af2:	2018      	movs	r0, #24
 8020af4:	f7fe ff92 	bl	801fa1c <malloc>
 8020af8:	4a10      	ldr	r2, [pc, #64]	; (8020b3c <rand+0x54>)
 8020afa:	4b11      	ldr	r3, [pc, #68]	; (8020b40 <rand+0x58>)
 8020afc:	63a0      	str	r0, [r4, #56]	; 0x38
 8020afe:	e9c0 2300 	strd	r2, r3, [r0]
 8020b02:	4b10      	ldr	r3, [pc, #64]	; (8020b44 <rand+0x5c>)
 8020b04:	6083      	str	r3, [r0, #8]
 8020b06:	230b      	movs	r3, #11
 8020b08:	8183      	strh	r3, [r0, #12]
 8020b0a:	2201      	movs	r2, #1
 8020b0c:	2300      	movs	r3, #0
 8020b0e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8020b12:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8020b14:	480c      	ldr	r0, [pc, #48]	; (8020b48 <rand+0x60>)
 8020b16:	690a      	ldr	r2, [r1, #16]
 8020b18:	694b      	ldr	r3, [r1, #20]
 8020b1a:	4c0c      	ldr	r4, [pc, #48]	; (8020b4c <rand+0x64>)
 8020b1c:	4350      	muls	r0, r2
 8020b1e:	fb04 0003 	mla	r0, r4, r3, r0
 8020b22:	fba2 2304 	umull	r2, r3, r2, r4
 8020b26:	4403      	add	r3, r0
 8020b28:	1c54      	adds	r4, r2, #1
 8020b2a:	f143 0500 	adc.w	r5, r3, #0
 8020b2e:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8020b32:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8020b36:	bd38      	pop	{r3, r4, r5, pc}
 8020b38:	20000450 	.word	0x20000450
 8020b3c:	abcd330e 	.word	0xabcd330e
 8020b40:	e66d1234 	.word	0xe66d1234
 8020b44:	0005deec 	.word	0x0005deec
 8020b48:	5851f42d 	.word	0x5851f42d
 8020b4c:	4c957f2d 	.word	0x4c957f2d

08020b50 <realloc>:
 8020b50:	4b02      	ldr	r3, [pc, #8]	; (8020b5c <realloc+0xc>)
 8020b52:	460a      	mov	r2, r1
 8020b54:	4601      	mov	r1, r0
 8020b56:	6818      	ldr	r0, [r3, #0]
 8020b58:	f002 bf4e 	b.w	80239f8 <_realloc_r>
 8020b5c:	20000450 	.word	0x20000450

08020b60 <modf>:
 8020b60:	ee10 1a90 	vmov	r1, s1
 8020b64:	b570      	push	{r4, r5, r6, lr}
 8020b66:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8020b6a:	f2a5 33ff 	subw	r3, r5, #1023	; 0x3ff
 8020b6e:	2b13      	cmp	r3, #19
 8020b70:	ee10 4a10 	vmov	r4, s0
 8020b74:	dc1f      	bgt.n	8020bb6 <modf+0x56>
 8020b76:	2b00      	cmp	r3, #0
 8020b78:	da05      	bge.n	8020b86 <modf+0x26>
 8020b7a:	2200      	movs	r2, #0
 8020b7c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8020b80:	e9c0 2300 	strd	r2, r3, [r0]
 8020b84:	bd70      	pop	{r4, r5, r6, pc}
 8020b86:	4d19      	ldr	r5, [pc, #100]	; (8020bec <modf+0x8c>)
 8020b88:	411d      	asrs	r5, r3
 8020b8a:	ea01 0305 	and.w	r3, r1, r5
 8020b8e:	431c      	orrs	r4, r3
 8020b90:	d107      	bne.n	8020ba2 <modf+0x42>
 8020b92:	ed80 0b00 	vstr	d0, [r0]
 8020b96:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8020b9a:	4622      	mov	r2, r4
 8020b9c:	ec43 2b10 	vmov	d0, r2, r3
 8020ba0:	e7f0      	b.n	8020b84 <modf+0x24>
 8020ba2:	2200      	movs	r2, #0
 8020ba4:	ea21 0305 	bic.w	r3, r1, r5
 8020ba8:	ec43 2b17 	vmov	d7, r2, r3
 8020bac:	e9c0 2300 	strd	r2, r3, [r0]
 8020bb0:	ee30 0b47 	vsub.f64	d0, d0, d7
 8020bb4:	e7e6      	b.n	8020b84 <modf+0x24>
 8020bb6:	2b33      	cmp	r3, #51	; 0x33
 8020bb8:	dd05      	ble.n	8020bc6 <modf+0x66>
 8020bba:	ed80 0b00 	vstr	d0, [r0]
 8020bbe:	2200      	movs	r2, #0
 8020bc0:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8020bc4:	e7ea      	b.n	8020b9c <modf+0x3c>
 8020bc6:	f2a5 4313 	subw	r3, r5, #1043	; 0x413
 8020bca:	f04f 35ff 	mov.w	r5, #4294967295
 8020bce:	40dd      	lsrs	r5, r3
 8020bd0:	ea15 0604 	ands.w	r6, r5, r4
 8020bd4:	d105      	bne.n	8020be2 <modf+0x82>
 8020bd6:	ed80 0b00 	vstr	d0, [r0]
 8020bda:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8020bde:	4632      	mov	r2, r6
 8020be0:	e7dc      	b.n	8020b9c <modf+0x3c>
 8020be2:	ee10 3a90 	vmov	r3, s1
 8020be6:	ea24 0205 	bic.w	r2, r4, r5
 8020bea:	e7dd      	b.n	8020ba8 <modf+0x48>
 8020bec:	000fffff 	.word	0x000fffff

08020bf0 <_sbrk_r>:
 8020bf0:	b538      	push	{r3, r4, r5, lr}
 8020bf2:	4c06      	ldr	r4, [pc, #24]	; (8020c0c <_sbrk_r+0x1c>)
 8020bf4:	2300      	movs	r3, #0
 8020bf6:	4605      	mov	r5, r0
 8020bf8:	4608      	mov	r0, r1
 8020bfa:	6023      	str	r3, [r4, #0]
 8020bfc:	f7e3 feba 	bl	8004974 <_sbrk>
 8020c00:	1c43      	adds	r3, r0, #1
 8020c02:	d102      	bne.n	8020c0a <_sbrk_r+0x1a>
 8020c04:	6823      	ldr	r3, [r4, #0]
 8020c06:	b103      	cbz	r3, 8020c0a <_sbrk_r+0x1a>
 8020c08:	602b      	str	r3, [r5, #0]
 8020c0a:	bd38      	pop	{r3, r4, r5, pc}
 8020c0c:	200362c0 	.word	0x200362c0

08020c10 <sniprintf>:
 8020c10:	b40c      	push	{r2, r3}
 8020c12:	b530      	push	{r4, r5, lr}
 8020c14:	4b17      	ldr	r3, [pc, #92]	; (8020c74 <sniprintf+0x64>)
 8020c16:	1e0c      	subs	r4, r1, #0
 8020c18:	b09d      	sub	sp, #116	; 0x74
 8020c1a:	681d      	ldr	r5, [r3, #0]
 8020c1c:	da08      	bge.n	8020c30 <sniprintf+0x20>
 8020c1e:	238b      	movs	r3, #139	; 0x8b
 8020c20:	602b      	str	r3, [r5, #0]
 8020c22:	f04f 30ff 	mov.w	r0, #4294967295
 8020c26:	b01d      	add	sp, #116	; 0x74
 8020c28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020c2c:	b002      	add	sp, #8
 8020c2e:	4770      	bx	lr
 8020c30:	f44f 7302 	mov.w	r3, #520	; 0x208
 8020c34:	f8ad 3014 	strh.w	r3, [sp, #20]
 8020c38:	bf14      	ite	ne
 8020c3a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8020c3e:	4623      	moveq	r3, r4
 8020c40:	9304      	str	r3, [sp, #16]
 8020c42:	9307      	str	r3, [sp, #28]
 8020c44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020c48:	9002      	str	r0, [sp, #8]
 8020c4a:	9006      	str	r0, [sp, #24]
 8020c4c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8020c50:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8020c52:	ab21      	add	r3, sp, #132	; 0x84
 8020c54:	a902      	add	r1, sp, #8
 8020c56:	4628      	mov	r0, r5
 8020c58:	9301      	str	r3, [sp, #4]
 8020c5a:	f002 ff4d 	bl	8023af8 <_svfiprintf_r>
 8020c5e:	1c43      	adds	r3, r0, #1
 8020c60:	bfbc      	itt	lt
 8020c62:	238b      	movlt	r3, #139	; 0x8b
 8020c64:	602b      	strlt	r3, [r5, #0]
 8020c66:	2c00      	cmp	r4, #0
 8020c68:	d0dd      	beq.n	8020c26 <sniprintf+0x16>
 8020c6a:	9b02      	ldr	r3, [sp, #8]
 8020c6c:	2200      	movs	r2, #0
 8020c6e:	701a      	strb	r2, [r3, #0]
 8020c70:	e7d9      	b.n	8020c26 <sniprintf+0x16>
 8020c72:	bf00      	nop
 8020c74:	20000450 	.word	0x20000450

08020c78 <siprintf>:
 8020c78:	b40e      	push	{r1, r2, r3}
 8020c7a:	b500      	push	{lr}
 8020c7c:	b09c      	sub	sp, #112	; 0x70
 8020c7e:	ab1d      	add	r3, sp, #116	; 0x74
 8020c80:	9002      	str	r0, [sp, #8]
 8020c82:	9006      	str	r0, [sp, #24]
 8020c84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8020c88:	4809      	ldr	r0, [pc, #36]	; (8020cb0 <siprintf+0x38>)
 8020c8a:	9107      	str	r1, [sp, #28]
 8020c8c:	9104      	str	r1, [sp, #16]
 8020c8e:	4909      	ldr	r1, [pc, #36]	; (8020cb4 <siprintf+0x3c>)
 8020c90:	f853 2b04 	ldr.w	r2, [r3], #4
 8020c94:	9105      	str	r1, [sp, #20]
 8020c96:	6800      	ldr	r0, [r0, #0]
 8020c98:	9301      	str	r3, [sp, #4]
 8020c9a:	a902      	add	r1, sp, #8
 8020c9c:	f002 ff2c 	bl	8023af8 <_svfiprintf_r>
 8020ca0:	9b02      	ldr	r3, [sp, #8]
 8020ca2:	2200      	movs	r2, #0
 8020ca4:	701a      	strb	r2, [r3, #0]
 8020ca6:	b01c      	add	sp, #112	; 0x70
 8020ca8:	f85d eb04 	ldr.w	lr, [sp], #4
 8020cac:	b003      	add	sp, #12
 8020cae:	4770      	bx	lr
 8020cb0:	20000450 	.word	0x20000450
 8020cb4:	ffff0208 	.word	0xffff0208

08020cb8 <siscanf>:
 8020cb8:	b40e      	push	{r1, r2, r3}
 8020cba:	b530      	push	{r4, r5, lr}
 8020cbc:	b09c      	sub	sp, #112	; 0x70
 8020cbe:	ac1f      	add	r4, sp, #124	; 0x7c
 8020cc0:	f44f 7201 	mov.w	r2, #516	; 0x204
 8020cc4:	f854 5b04 	ldr.w	r5, [r4], #4
 8020cc8:	f8ad 2014 	strh.w	r2, [sp, #20]
 8020ccc:	9002      	str	r0, [sp, #8]
 8020cce:	9006      	str	r0, [sp, #24]
 8020cd0:	f7df fac0 	bl	8000254 <strlen>
 8020cd4:	4b0b      	ldr	r3, [pc, #44]	; (8020d04 <siscanf+0x4c>)
 8020cd6:	9003      	str	r0, [sp, #12]
 8020cd8:	9007      	str	r0, [sp, #28]
 8020cda:	930b      	str	r3, [sp, #44]	; 0x2c
 8020cdc:	480a      	ldr	r0, [pc, #40]	; (8020d08 <siscanf+0x50>)
 8020cde:	9401      	str	r4, [sp, #4]
 8020ce0:	2300      	movs	r3, #0
 8020ce2:	930f      	str	r3, [sp, #60]	; 0x3c
 8020ce4:	9314      	str	r3, [sp, #80]	; 0x50
 8020ce6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020cea:	f8ad 3016 	strh.w	r3, [sp, #22]
 8020cee:	462a      	mov	r2, r5
 8020cf0:	4623      	mov	r3, r4
 8020cf2:	a902      	add	r1, sp, #8
 8020cf4:	6800      	ldr	r0, [r0, #0]
 8020cf6:	f003 f851 	bl	8023d9c <__ssvfiscanf_r>
 8020cfa:	b01c      	add	sp, #112	; 0x70
 8020cfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020d00:	b003      	add	sp, #12
 8020d02:	4770      	bx	lr
 8020d04:	08020d2f 	.word	0x08020d2f
 8020d08:	20000450 	.word	0x20000450

08020d0c <__sread>:
 8020d0c:	b510      	push	{r4, lr}
 8020d0e:	460c      	mov	r4, r1
 8020d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020d14:	f003 fc60 	bl	80245d8 <_read_r>
 8020d18:	2800      	cmp	r0, #0
 8020d1a:	bfab      	itete	ge
 8020d1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8020d1e:	89a3      	ldrhlt	r3, [r4, #12]
 8020d20:	181b      	addge	r3, r3, r0
 8020d22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8020d26:	bfac      	ite	ge
 8020d28:	6563      	strge	r3, [r4, #84]	; 0x54
 8020d2a:	81a3      	strhlt	r3, [r4, #12]
 8020d2c:	bd10      	pop	{r4, pc}

08020d2e <__seofread>:
 8020d2e:	2000      	movs	r0, #0
 8020d30:	4770      	bx	lr

08020d32 <__swrite>:
 8020d32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020d36:	461f      	mov	r7, r3
 8020d38:	898b      	ldrh	r3, [r1, #12]
 8020d3a:	05db      	lsls	r3, r3, #23
 8020d3c:	4605      	mov	r5, r0
 8020d3e:	460c      	mov	r4, r1
 8020d40:	4616      	mov	r6, r2
 8020d42:	d505      	bpl.n	8020d50 <__swrite+0x1e>
 8020d44:	2302      	movs	r3, #2
 8020d46:	2200      	movs	r2, #0
 8020d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020d4c:	f002 faf2 	bl	8023334 <_lseek_r>
 8020d50:	89a3      	ldrh	r3, [r4, #12]
 8020d52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020d56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8020d5a:	81a3      	strh	r3, [r4, #12]
 8020d5c:	4632      	mov	r2, r6
 8020d5e:	463b      	mov	r3, r7
 8020d60:	4628      	mov	r0, r5
 8020d62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020d66:	f001 b9a5 	b.w	80220b4 <_write_r>

08020d6a <__sseek>:
 8020d6a:	b510      	push	{r4, lr}
 8020d6c:	460c      	mov	r4, r1
 8020d6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020d72:	f002 fadf 	bl	8023334 <_lseek_r>
 8020d76:	1c43      	adds	r3, r0, #1
 8020d78:	89a3      	ldrh	r3, [r4, #12]
 8020d7a:	bf15      	itete	ne
 8020d7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8020d7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8020d82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8020d86:	81a3      	strheq	r3, [r4, #12]
 8020d88:	bf18      	it	ne
 8020d8a:	81a3      	strhne	r3, [r4, #12]
 8020d8c:	bd10      	pop	{r4, pc}

08020d8e <__sclose>:
 8020d8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020d92:	f001 ba4f 	b.w	8022234 <_close_r>

08020d96 <stpcpy>:
 8020d96:	4603      	mov	r3, r0
 8020d98:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020d9c:	4618      	mov	r0, r3
 8020d9e:	f803 2b01 	strb.w	r2, [r3], #1
 8020da2:	2a00      	cmp	r2, #0
 8020da4:	d1f8      	bne.n	8020d98 <stpcpy+0x2>
 8020da6:	4770      	bx	lr

08020da8 <strchr>:
 8020da8:	b2c9      	uxtb	r1, r1
 8020daa:	4603      	mov	r3, r0
 8020dac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020db0:	b11a      	cbz	r2, 8020dba <strchr+0x12>
 8020db2:	428a      	cmp	r2, r1
 8020db4:	d1f9      	bne.n	8020daa <strchr+0x2>
 8020db6:	4618      	mov	r0, r3
 8020db8:	4770      	bx	lr
 8020dba:	2900      	cmp	r1, #0
 8020dbc:	bf18      	it	ne
 8020dbe:	2300      	movne	r3, #0
 8020dc0:	e7f9      	b.n	8020db6 <strchr+0xe>

08020dc2 <strcpy>:
 8020dc2:	4603      	mov	r3, r0
 8020dc4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020dc8:	f803 2b01 	strb.w	r2, [r3], #1
 8020dcc:	2a00      	cmp	r2, #0
 8020dce:	d1f9      	bne.n	8020dc4 <strcpy+0x2>
 8020dd0:	4770      	bx	lr

08020dd2 <iso_year_adjust>:
 8020dd2:	6942      	ldr	r2, [r0, #20]
 8020dd4:	2a00      	cmp	r2, #0
 8020dd6:	f240 736c 	movw	r3, #1900	; 0x76c
 8020dda:	bfa8      	it	ge
 8020ddc:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 8020de0:	441a      	add	r2, r3
 8020de2:	0793      	lsls	r3, r2, #30
 8020de4:	d105      	bne.n	8020df2 <iso_year_adjust+0x20>
 8020de6:	2164      	movs	r1, #100	; 0x64
 8020de8:	fb92 f3f1 	sdiv	r3, r2, r1
 8020dec:	fb01 2313 	mls	r3, r1, r3, r2
 8020df0:	b9d3      	cbnz	r3, 8020e28 <iso_year_adjust+0x56>
 8020df2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8020df6:	fb92 f3f1 	sdiv	r3, r2, r1
 8020dfa:	fb01 2313 	mls	r3, r1, r3, r2
 8020dfe:	fab3 f283 	clz	r2, r3
 8020e02:	0952      	lsrs	r2, r2, #5
 8020e04:	e9d0 3106 	ldrd	r3, r1, [r0, #24]
 8020e08:	005b      	lsls	r3, r3, #1
 8020e0a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8020e0e:	4413      	add	r3, r2
 8020e10:	2b21      	cmp	r3, #33	; 0x21
 8020e12:	dc11      	bgt.n	8020e38 <iso_year_adjust+0x66>
 8020e14:	2b20      	cmp	r3, #32
 8020e16:	da30      	bge.n	8020e7a <iso_year_adjust+0xa8>
 8020e18:	2b0d      	cmp	r3, #13
 8020e1a:	dc07      	bgt.n	8020e2c <iso_year_adjust+0x5a>
 8020e1c:	2b0a      	cmp	r3, #10
 8020e1e:	da2c      	bge.n	8020e7a <iso_year_adjust+0xa8>
 8020e20:	2b01      	cmp	r3, #1
 8020e22:	d92a      	bls.n	8020e7a <iso_year_adjust+0xa8>
 8020e24:	2000      	movs	r0, #0
 8020e26:	4770      	bx	lr
 8020e28:	2201      	movs	r2, #1
 8020e2a:	e7eb      	b.n	8020e04 <iso_year_adjust+0x32>
 8020e2c:	2b10      	cmp	r3, #16
 8020e2e:	dbf9      	blt.n	8020e24 <iso_year_adjust+0x52>
 8020e30:	2b11      	cmp	r3, #17
 8020e32:	dd22      	ble.n	8020e7a <iso_year_adjust+0xa8>
 8020e34:	3b1c      	subs	r3, #28
 8020e36:	e7f3      	b.n	8020e20 <iso_year_adjust+0x4e>
 8020e38:	f241 62c6 	movw	r2, #5830	; 0x16c6
 8020e3c:	4293      	cmp	r3, r2
 8020e3e:	dc0f      	bgt.n	8020e60 <iso_year_adjust+0x8e>
 8020e40:	f241 62c2 	movw	r2, #5826	; 0x16c2
 8020e44:	4293      	cmp	r3, r2
 8020e46:	da09      	bge.n	8020e5c <iso_year_adjust+0x8a>
 8020e48:	f241 62a2 	movw	r2, #5794	; 0x16a2
 8020e4c:	4293      	cmp	r3, r2
 8020e4e:	d005      	beq.n	8020e5c <iso_year_adjust+0x8a>
 8020e50:	dbe8      	blt.n	8020e24 <iso_year_adjust+0x52>
 8020e52:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
 8020e56:	3b12      	subs	r3, #18
 8020e58:	2b02      	cmp	r3, #2
 8020e5a:	d8e3      	bhi.n	8020e24 <iso_year_adjust+0x52>
 8020e5c:	2001      	movs	r0, #1
 8020e5e:	4770      	bx	lr
 8020e60:	f241 62d5 	movw	r2, #5845	; 0x16d5
 8020e64:	4293      	cmp	r3, r2
 8020e66:	d0f9      	beq.n	8020e5c <iso_year_adjust+0x8a>
 8020e68:	f241 62d7 	movw	r2, #5847	; 0x16d7
 8020e6c:	4293      	cmp	r3, r2
 8020e6e:	d0f5      	beq.n	8020e5c <iso_year_adjust+0x8a>
 8020e70:	f241 62d3 	movw	r2, #5843	; 0x16d3
 8020e74:	4293      	cmp	r3, r2
 8020e76:	d1d5      	bne.n	8020e24 <iso_year_adjust+0x52>
 8020e78:	e7f0      	b.n	8020e5c <iso_year_adjust+0x8a>
 8020e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8020e7e:	4770      	bx	lr

08020e80 <__strftime>:
 8020e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e84:	b091      	sub	sp, #68	; 0x44
 8020e86:	461d      	mov	r5, r3
 8020e88:	2300      	movs	r3, #0
 8020e8a:	4607      	mov	r7, r0
 8020e8c:	460e      	mov	r6, r1
 8020e8e:	9303      	str	r3, [sp, #12]
 8020e90:	461c      	mov	r4, r3
 8020e92:	f101 3bff 	add.w	fp, r1, #4294967295
 8020e96:	7813      	ldrb	r3, [r2, #0]
 8020e98:	2b00      	cmp	r3, #0
 8020e9a:	f000 84e3 	beq.w	8021864 <__strftime+0x9e4>
 8020e9e:	2b25      	cmp	r3, #37	; 0x25
 8020ea0:	d11f      	bne.n	8020ee2 <__strftime+0x62>
 8020ea2:	f892 a001 	ldrb.w	sl, [r2, #1]
 8020ea6:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 8020eaa:	d023      	beq.n	8020ef4 <__strftime+0x74>
 8020eac:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 8020eb0:	d020      	beq.n	8020ef4 <__strftime+0x74>
 8020eb2:	f102 0801 	add.w	r8, r2, #1
 8020eb6:	f04f 0a00 	mov.w	sl, #0
 8020eba:	f898 3000 	ldrb.w	r3, [r8]
 8020ebe:	3b31      	subs	r3, #49	; 0x31
 8020ec0:	2b08      	cmp	r3, #8
 8020ec2:	d81a      	bhi.n	8020efa <__strftime+0x7a>
 8020ec4:	4640      	mov	r0, r8
 8020ec6:	220a      	movs	r2, #10
 8020ec8:	a908      	add	r1, sp, #32
 8020eca:	f000 fe4f 	bl	8021b6c <strtoul>
 8020ece:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8020ed2:	4681      	mov	r9, r0
 8020ed4:	f898 3000 	ldrb.w	r3, [r8]
 8020ed8:	2b45      	cmp	r3, #69	; 0x45
 8020eda:	d111      	bne.n	8020f00 <__strftime+0x80>
 8020edc:	f108 0801 	add.w	r8, r8, #1
 8020ee0:	e010      	b.n	8020f04 <__strftime+0x84>
 8020ee2:	45a3      	cmp	fp, r4
 8020ee4:	d802      	bhi.n	8020eec <__strftime+0x6c>
 8020ee6:	2400      	movs	r4, #0
 8020ee8:	f000 bcbf 	b.w	802186a <__strftime+0x9ea>
 8020eec:	553b      	strb	r3, [r7, r4]
 8020eee:	3201      	adds	r2, #1
 8020ef0:	3401      	adds	r4, #1
 8020ef2:	e7d0      	b.n	8020e96 <__strftime+0x16>
 8020ef4:	f102 0802 	add.w	r8, r2, #2
 8020ef8:	e7df      	b.n	8020eba <__strftime+0x3a>
 8020efa:	f04f 0900 	mov.w	r9, #0
 8020efe:	e7e9      	b.n	8020ed4 <__strftime+0x54>
 8020f00:	2b4f      	cmp	r3, #79	; 0x4f
 8020f02:	d0eb      	beq.n	8020edc <__strftime+0x5c>
 8020f04:	f898 1000 	ldrb.w	r1, [r8]
 8020f08:	f1a1 0325 	sub.w	r3, r1, #37	; 0x25
 8020f0c:	2b55      	cmp	r3, #85	; 0x55
 8020f0e:	d8ea      	bhi.n	8020ee6 <__strftime+0x66>
 8020f10:	a201      	add	r2, pc, #4	; (adr r2, 8020f18 <__strftime+0x98>)
 8020f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020f16:	bf00      	nop
 8020f18:	0802185b 	.word	0x0802185b
 8020f1c:	08020ee7 	.word	0x08020ee7
 8020f20:	08020ee7 	.word	0x08020ee7
 8020f24:	08020ee7 	.word	0x08020ee7
 8020f28:	08020ee7 	.word	0x08020ee7
 8020f2c:	08020ee7 	.word	0x08020ee7
 8020f30:	08020ee7 	.word	0x08020ee7
 8020f34:	08020ee7 	.word	0x08020ee7
 8020f38:	08020ee7 	.word	0x08020ee7
 8020f3c:	08020ee7 	.word	0x08020ee7
 8020f40:	08020ee7 	.word	0x08020ee7
 8020f44:	08020ee7 	.word	0x08020ee7
 8020f48:	08020ee7 	.word	0x08020ee7
 8020f4c:	08020ee7 	.word	0x08020ee7
 8020f50:	08020ee7 	.word	0x08020ee7
 8020f54:	08020ee7 	.word	0x08020ee7
 8020f58:	08020ee7 	.word	0x08020ee7
 8020f5c:	08020ee7 	.word	0x08020ee7
 8020f60:	08020ee7 	.word	0x08020ee7
 8020f64:	08020ee7 	.word	0x08020ee7
 8020f68:	08020ee7 	.word	0x08020ee7
 8020f6c:	08020ee7 	.word	0x08020ee7
 8020f70:	08020ee7 	.word	0x08020ee7
 8020f74:	08020ee7 	.word	0x08020ee7
 8020f78:	08020ee7 	.word	0x08020ee7
 8020f7c:	08020ee7 	.word	0x08020ee7
 8020f80:	08020ee7 	.word	0x08020ee7
 8020f84:	08020ee7 	.word	0x08020ee7
 8020f88:	080210ad 	.word	0x080210ad
 8020f8c:	08021101 	.word	0x08021101
 8020f90:	08021171 	.word	0x08021171
 8020f94:	0802120b 	.word	0x0802120b
 8020f98:	08020ee7 	.word	0x08020ee7
 8020f9c:	08021259 	.word	0x08021259
 8020fa0:	08021349 	.word	0x08021349
 8020fa4:	08021461 	.word	0x08021461
 8020fa8:	0802146f 	.word	0x0802146f
 8020fac:	08020ee7 	.word	0x08020ee7
 8020fb0:	08020ee7 	.word	0x08020ee7
 8020fb4:	08020ee7 	.word	0x08020ee7
 8020fb8:	0802149f 	.word	0x0802149f
 8020fbc:	08020ee7 	.word	0x08020ee7
 8020fc0:	08020ee7 	.word	0x08020ee7
 8020fc4:	080214b1 	.word	0x080214b1
 8020fc8:	08020ee7 	.word	0x08020ee7
 8020fcc:	0802150f 	.word	0x0802150f
 8020fd0:	08021627 	.word	0x08021627
 8020fd4:	08021635 	.word	0x08021635
 8020fd8:	08021685 	.word	0x08021685
 8020fdc:	08021695 	.word	0x08021695
 8020fe0:	08021707 	.word	0x08021707
 8020fe4:	08021169 	.word	0x08021169
 8020fe8:	08021741 	.word	0x08021741
 8020fec:	08021807 	.word	0x08021807
 8020ff0:	08020ee7 	.word	0x08020ee7
 8020ff4:	08020ee7 	.word	0x08020ee7
 8020ff8:	08020ee7 	.word	0x08020ee7
 8020ffc:	08020ee7 	.word	0x08020ee7
 8021000:	08020ee7 	.word	0x08020ee7
 8021004:	08020ee7 	.word	0x08020ee7
 8021008:	08021071 	.word	0x08021071
 802100c:	080210d9 	.word	0x080210d9
 8021010:	0802112b 	.word	0x0802112b
 8021014:	080211e7 	.word	0x080211e7
 8021018:	080211e7 	.word	0x080211e7
 802101c:	08020ee7 	.word	0x08020ee7
 8021020:	080212b1 	.word	0x080212b1
 8021024:	080210d9 	.word	0x080210d9
 8021028:	08020ee7 	.word	0x08020ee7
 802102c:	08021491 	.word	0x08021491
 8021030:	08021461 	.word	0x08021461
 8021034:	0802146f 	.word	0x0802146f
 8021038:	08021499 	.word	0x08021499
 802103c:	080214a3 	.word	0x080214a3
 8021040:	08020ee7 	.word	0x08020ee7
 8021044:	080214b1 	.word	0x080214b1
 8021048:	08020ee7 	.word	0x08020ee7
 802104c:	08021159 	.word	0x08021159
 8021050:	08021521 	.word	0x08021521
 8021054:	0802162b 	.word	0x0802162b
 8021058:	0802166d 	.word	0x0802166d
 802105c:	08020ee7 	.word	0x08020ee7
 8021060:	080216fb 	.word	0x080216fb
 8021064:	08021161 	.word	0x08021161
 8021068:	0802171f 	.word	0x0802171f
 802106c:	08021795 	.word	0x08021795
 8021070:	69ab      	ldr	r3, [r5, #24]
 8021072:	4aa8      	ldr	r2, [pc, #672]	; (8021314 <__strftime+0x494>)
 8021074:	3318      	adds	r3, #24
 8021076:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 802107a:	4648      	mov	r0, r9
 802107c:	f7df f8ea 	bl	8000254 <strlen>
 8021080:	eba9 0904 	sub.w	r9, r9, r4
 8021084:	4420      	add	r0, r4
 8021086:	42a0      	cmp	r0, r4
 8021088:	d108      	bne.n	802109c <__strftime+0x21c>
 802108a:	4604      	mov	r4, r0
 802108c:	f898 3000 	ldrb.w	r3, [r8]
 8021090:	2b00      	cmp	r3, #0
 8021092:	f000 83e7 	beq.w	8021864 <__strftime+0x9e4>
 8021096:	f108 0201 	add.w	r2, r8, #1
 802109a:	e6fc      	b.n	8020e96 <__strftime+0x16>
 802109c:	45a3      	cmp	fp, r4
 802109e:	f67f af22 	bls.w	8020ee6 <__strftime+0x66>
 80210a2:	f819 3004 	ldrb.w	r3, [r9, r4]
 80210a6:	553b      	strb	r3, [r7, r4]
 80210a8:	3401      	adds	r4, #1
 80210aa:	e7ec      	b.n	8021086 <__strftime+0x206>
 80210ac:	69aa      	ldr	r2, [r5, #24]
 80210ae:	4b99      	ldr	r3, [pc, #612]	; (8021314 <__strftime+0x494>)
 80210b0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80210b4:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 80210b8:	4648      	mov	r0, r9
 80210ba:	f7df f8cb 	bl	8000254 <strlen>
 80210be:	eba9 0904 	sub.w	r9, r9, r4
 80210c2:	4420      	add	r0, r4
 80210c4:	42a0      	cmp	r0, r4
 80210c6:	d0e0      	beq.n	802108a <__strftime+0x20a>
 80210c8:	45a3      	cmp	fp, r4
 80210ca:	f67f af0c 	bls.w	8020ee6 <__strftime+0x66>
 80210ce:	f819 3004 	ldrb.w	r3, [r9, r4]
 80210d2:	553b      	strb	r3, [r7, r4]
 80210d4:	3401      	adds	r4, #1
 80210d6:	e7f5      	b.n	80210c4 <__strftime+0x244>
 80210d8:	692a      	ldr	r2, [r5, #16]
 80210da:	4b8e      	ldr	r3, [pc, #568]	; (8021314 <__strftime+0x494>)
 80210dc:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 80210e0:	4648      	mov	r0, r9
 80210e2:	f7df f8b7 	bl	8000254 <strlen>
 80210e6:	eba9 0904 	sub.w	r9, r9, r4
 80210ea:	4420      	add	r0, r4
 80210ec:	42a0      	cmp	r0, r4
 80210ee:	d0cc      	beq.n	802108a <__strftime+0x20a>
 80210f0:	45a3      	cmp	fp, r4
 80210f2:	f67f aef8 	bls.w	8020ee6 <__strftime+0x66>
 80210f6:	f819 3004 	ldrb.w	r3, [r9, r4]
 80210fa:	553b      	strb	r3, [r7, r4]
 80210fc:	3401      	adds	r4, #1
 80210fe:	e7f5      	b.n	80210ec <__strftime+0x26c>
 8021100:	692b      	ldr	r3, [r5, #16]
 8021102:	4a84      	ldr	r2, [pc, #528]	; (8021314 <__strftime+0x494>)
 8021104:	330c      	adds	r3, #12
 8021106:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 802110a:	4648      	mov	r0, r9
 802110c:	f7df f8a2 	bl	8000254 <strlen>
 8021110:	eba9 0904 	sub.w	r9, r9, r4
 8021114:	4420      	add	r0, r4
 8021116:	42a0      	cmp	r0, r4
 8021118:	d0b7      	beq.n	802108a <__strftime+0x20a>
 802111a:	45a3      	cmp	fp, r4
 802111c:	f67f aee3 	bls.w	8020ee6 <__strftime+0x66>
 8021120:	f819 3004 	ldrb.w	r3, [r9, r4]
 8021124:	553b      	strb	r3, [r7, r4]
 8021126:	3401      	adds	r4, #1
 8021128:	e7f5      	b.n	8021116 <__strftime+0x296>
 802112a:	4b7a      	ldr	r3, [pc, #488]	; (8021314 <__strftime+0x494>)
 802112c:	f8d3 90a0 	ldr.w	r9, [r3, #160]	; 0xa0
 8021130:	4648      	mov	r0, r9
 8021132:	f7df f88f 	bl	8000254 <strlen>
 8021136:	f899 3000 	ldrb.w	r3, [r9]
 802113a:	2b00      	cmp	r3, #0
 802113c:	d0a6      	beq.n	802108c <__strftime+0x20c>
 802113e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8021140:	9300      	str	r3, [sp, #0]
 8021142:	464a      	mov	r2, r9
 8021144:	462b      	mov	r3, r5
 8021146:	1b31      	subs	r1, r6, r4
 8021148:	1938      	adds	r0, r7, r4
 802114a:	f7ff fe99 	bl	8020e80 <__strftime>
 802114e:	2800      	cmp	r0, #0
 8021150:	f77f aec9 	ble.w	8020ee6 <__strftime+0x66>
 8021154:	4404      	add	r4, r0
 8021156:	e799      	b.n	802108c <__strftime+0x20c>
 8021158:	4b6e      	ldr	r3, [pc, #440]	; (8021314 <__strftime+0x494>)
 802115a:	f8d3 90e4 	ldr.w	r9, [r3, #228]	; 0xe4
 802115e:	e7e7      	b.n	8021130 <__strftime+0x2b0>
 8021160:	4b6c      	ldr	r3, [pc, #432]	; (8021314 <__strftime+0x494>)
 8021162:	f8d3 909c 	ldr.w	r9, [r3, #156]	; 0x9c
 8021166:	e7e3      	b.n	8021130 <__strftime+0x2b0>
 8021168:	4b6a      	ldr	r3, [pc, #424]	; (8021314 <__strftime+0x494>)
 802116a:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 802116e:	e7df      	b.n	8021130 <__strftime+0x2b0>
 8021170:	4b69      	ldr	r3, [pc, #420]	; (8021318 <__strftime+0x498>)
 8021172:	6969      	ldr	r1, [r5, #20]
 8021174:	4299      	cmp	r1, r3
 8021176:	bfac      	ite	ge
 8021178:	2300      	movge	r3, #0
 802117a:	2301      	movlt	r3, #1
 802117c:	2900      	cmp	r1, #0
 802117e:	9304      	str	r3, [sp, #16]
 8021180:	db10      	blt.n	80211a4 <__strftime+0x324>
 8021182:	2064      	movs	r0, #100	; 0x64
 8021184:	fb91 f0f0 	sdiv	r0, r1, r0
 8021188:	3013      	adds	r0, #19
 802118a:	f1ba 0f00 	cmp.w	sl, #0
 802118e:	d013      	beq.n	80211b8 <__strftime+0x338>
 8021190:	2863      	cmp	r0, #99	; 0x63
 8021192:	dd26      	ble.n	80211e2 <__strftime+0x362>
 8021194:	4a61      	ldr	r2, [pc, #388]	; (802131c <__strftime+0x49c>)
 8021196:	4b62      	ldr	r3, [pc, #392]	; (8021320 <__strftime+0x4a0>)
 8021198:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 802119c:	bf18      	it	ne
 802119e:	4613      	movne	r3, r2
 80211a0:	4a60      	ldr	r2, [pc, #384]	; (8021324 <__strftime+0x4a4>)
 80211a2:	e00b      	b.n	80211bc <__strftime+0x33c>
 80211a4:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 80211a8:	9105      	str	r1, [sp, #20]
 80211aa:	f001 f803 	bl	80221b4 <abs>
 80211ae:	2364      	movs	r3, #100	; 0x64
 80211b0:	9905      	ldr	r1, [sp, #20]
 80211b2:	fb90 f0f3 	sdiv	r0, r0, r3
 80211b6:	e7e8      	b.n	802118a <__strftime+0x30a>
 80211b8:	4b58      	ldr	r3, [pc, #352]	; (802131c <__strftime+0x49c>)
 80211ba:	4a5b      	ldr	r2, [pc, #364]	; (8021328 <__strftime+0x4a8>)
 80211bc:	9001      	str	r0, [sp, #4]
 80211be:	9804      	ldr	r0, [sp, #16]
 80211c0:	f8df c154 	ldr.w	ip, [pc, #340]	; 8021318 <__strftime+0x498>
 80211c4:	f1b9 0f02 	cmp.w	r9, #2
 80211c8:	bf2c      	ite	cs
 80211ca:	ebc0 0009 	rsbcs	r0, r0, r9
 80211ce:	f1c0 0002 	rsbcc	r0, r0, #2
 80211d2:	9000      	str	r0, [sp, #0]
 80211d4:	4855      	ldr	r0, [pc, #340]	; (802132c <__strftime+0x4ac>)
 80211d6:	4561      	cmp	r1, ip
 80211d8:	bfb8      	it	lt
 80211da:	4603      	movlt	r3, r0
 80211dc:	1b31      	subs	r1, r6, r4
 80211de:	1938      	adds	r0, r7, r4
 80211e0:	e029      	b.n	8021236 <__strftime+0x3b6>
 80211e2:	4b4e      	ldr	r3, [pc, #312]	; (802131c <__strftime+0x49c>)
 80211e4:	e7dc      	b.n	80211a0 <__strftime+0x320>
 80211e6:	4852      	ldr	r0, [pc, #328]	; (8021330 <__strftime+0x4b0>)
 80211e8:	4a52      	ldr	r2, [pc, #328]	; (8021334 <__strftime+0x4b4>)
 80211ea:	68eb      	ldr	r3, [r5, #12]
 80211ec:	2964      	cmp	r1, #100	; 0x64
 80211ee:	bf18      	it	ne
 80211f0:	4602      	movne	r2, r0
 80211f2:	1b31      	subs	r1, r6, r4
 80211f4:	1938      	adds	r0, r7, r4
 80211f6:	f7ff fd0b 	bl	8020c10 <sniprintf>
 80211fa:	2800      	cmp	r0, #0
 80211fc:	f6ff ae73 	blt.w	8020ee6 <__strftime+0x66>
 8021200:	4404      	add	r4, r0
 8021202:	42a6      	cmp	r6, r4
 8021204:	f63f af42 	bhi.w	802108c <__strftime+0x20c>
 8021208:	e66d      	b.n	8020ee6 <__strftime+0x66>
 802120a:	6968      	ldr	r0, [r5, #20]
 802120c:	692b      	ldr	r3, [r5, #16]
 802120e:	68ea      	ldr	r2, [r5, #12]
 8021210:	2800      	cmp	r0, #0
 8021212:	eb07 0904 	add.w	r9, r7, r4
 8021216:	eba6 0a04 	sub.w	sl, r6, r4
 802121a:	f103 0301 	add.w	r3, r3, #1
 802121e:	db0d      	blt.n	802123c <__strftime+0x3bc>
 8021220:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8021224:	fb90 f1fc 	sdiv	r1, r0, ip
 8021228:	fb0c 0011 	mls	r0, ip, r1, r0
 802122c:	e9cd 2000 	strd	r2, r0, [sp]
 8021230:	4a41      	ldr	r2, [pc, #260]	; (8021338 <__strftime+0x4b8>)
 8021232:	4651      	mov	r1, sl
 8021234:	4648      	mov	r0, r9
 8021236:	f7ff fceb 	bl	8020c10 <sniprintf>
 802123a:	e7de      	b.n	80211fa <__strftime+0x37a>
 802123c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8021240:	e9cd 3204 	strd	r3, r2, [sp, #16]
 8021244:	f000 ffb6 	bl	80221b4 <abs>
 8021248:	2164      	movs	r1, #100	; 0x64
 802124a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 802124e:	fb90 fcf1 	sdiv	ip, r0, r1
 8021252:	fb0c 0011 	mls	r0, ip, r1, r0
 8021256:	e7e9      	b.n	802122c <__strftime+0x3ac>
 8021258:	2325      	movs	r3, #37	; 0x25
 802125a:	f88d 3020 	strb.w	r3, [sp, #32]
 802125e:	f1ba 0f00 	cmp.w	sl, #0
 8021262:	d013      	beq.n	802128c <__strftime+0x40c>
 8021264:	f1b9 0f06 	cmp.w	r9, #6
 8021268:	f88d a021 	strb.w	sl, [sp, #33]	; 0x21
 802126c:	bf38      	it	cc
 802126e:	f04f 0906 	movcc.w	r9, #6
 8021272:	f1b9 0306 	subs.w	r3, r9, #6
 8021276:	d10f      	bne.n	8021298 <__strftime+0x418>
 8021278:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 802127c:	492f      	ldr	r1, [pc, #188]	; (802133c <__strftime+0x4bc>)
 802127e:	f7ff fda0 	bl	8020dc2 <strcpy>
 8021282:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8021284:	9300      	str	r3, [sp, #0]
 8021286:	aa08      	add	r2, sp, #32
 8021288:	462b      	mov	r3, r5
 802128a:	e75c      	b.n	8021146 <__strftime+0x2c6>
 802128c:	232b      	movs	r3, #43	; 0x2b
 802128e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8021292:	f04f 090a 	mov.w	r9, #10
 8021296:	e7ec      	b.n	8021272 <__strftime+0x3f2>
 8021298:	4a29      	ldr	r2, [pc, #164]	; (8021340 <__strftime+0x4c0>)
 802129a:	211e      	movs	r1, #30
 802129c:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 80212a0:	f7ff fcb6 	bl	8020c10 <sniprintf>
 80212a4:	2800      	cmp	r0, #0
 80212a6:	dde7      	ble.n	8021278 <__strftime+0x3f8>
 80212a8:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 80212ac:	4418      	add	r0, r3
 80212ae:	e7e5      	b.n	802127c <__strftime+0x3fc>
 80212b0:	4628      	mov	r0, r5
 80212b2:	f7ff fd8e 	bl	8020dd2 <iso_year_adjust>
 80212b6:	4681      	mov	r9, r0
 80212b8:	6968      	ldr	r0, [r5, #20]
 80212ba:	2800      	cmp	r0, #0
 80212bc:	db1a      	blt.n	80212f4 <__strftime+0x474>
 80212be:	2264      	movs	r2, #100	; 0x64
 80212c0:	fb90 f3f2 	sdiv	r3, r0, r2
 80212c4:	f1b9 0f00 	cmp.w	r9, #0
 80212c8:	fb02 0013 	mls	r0, r2, r3, r0
 80212cc:	da1a      	bge.n	8021304 <__strftime+0x484>
 80212ce:	696a      	ldr	r2, [r5, #20]
 80212d0:	4b1c      	ldr	r3, [pc, #112]	; (8021344 <__strftime+0x4c4>)
 80212d2:	429a      	cmp	r2, r3
 80212d4:	bfb8      	it	lt
 80212d6:	f04f 0901 	movlt.w	r9, #1
 80212da:	2364      	movs	r3, #100	; 0x64
 80212dc:	4481      	add	r9, r0
 80212de:	fb99 f0f3 	sdiv	r0, r9, r3
 80212e2:	fb03 9910 	mls	r9, r3, r0, r9
 80212e6:	4499      	add	r9, r3
 80212e8:	fb99 f2f3 	sdiv	r2, r9, r3
 80212ec:	fb03 9312 	mls	r3, r3, r2, r9
 80212f0:	4a10      	ldr	r2, [pc, #64]	; (8021334 <__strftime+0x4b4>)
 80212f2:	e77e      	b.n	80211f2 <__strftime+0x372>
 80212f4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80212f8:	f000 ff5c 	bl	80221b4 <abs>
 80212fc:	2364      	movs	r3, #100	; 0x64
 80212fe:	fb90 f2f3 	sdiv	r2, r0, r3
 8021302:	e7df      	b.n	80212c4 <__strftime+0x444>
 8021304:	d0e9      	beq.n	80212da <__strftime+0x45a>
 8021306:	696a      	ldr	r2, [r5, #20]
 8021308:	4b03      	ldr	r3, [pc, #12]	; (8021318 <__strftime+0x498>)
 802130a:	429a      	cmp	r2, r3
 802130c:	bfb8      	it	lt
 802130e:	f04f 39ff 	movlt.w	r9, #4294967295
 8021312:	e7e2      	b.n	80212da <__strftime+0x45a>
 8021314:	0803fa44 	.word	0x0803fa44
 8021318:	fffff894 	.word	0xfffff894
 802131c:	0803fcc6 	.word	0x0803fcc6
 8021320:	0803f9f9 	.word	0x0803f9f9
 8021324:	0803f9f1 	.word	0x0803f9f1
 8021328:	0803f9ea 	.word	0x0803f9ea
 802132c:	0803ff90 	.word	0x0803ff90
 8021330:	0803f9fb 	.word	0x0803f9fb
 8021334:	0803fa09 	.word	0x0803fa09
 8021338:	0803f9ff 	.word	0x0803f9ff
 802133c:	0803fa12 	.word	0x0803fa12
 8021340:	0803fa0e 	.word	0x0803fa0e
 8021344:	fffff895 	.word	0xfffff895
 8021348:	696b      	ldr	r3, [r5, #20]
 802134a:	9304      	str	r3, [sp, #16]
 802134c:	9a04      	ldr	r2, [sp, #16]
 802134e:	4bbd      	ldr	r3, [pc, #756]	; (8021644 <__strftime+0x7c4>)
 8021350:	429a      	cmp	r2, r3
 8021352:	bfac      	ite	ge
 8021354:	2300      	movge	r3, #0
 8021356:	2301      	movlt	r3, #1
 8021358:	4628      	mov	r0, r5
 802135a:	9305      	str	r3, [sp, #20]
 802135c:	f7ff fd39 	bl	8020dd2 <iso_year_adjust>
 8021360:	9a04      	ldr	r2, [sp, #16]
 8021362:	2a00      	cmp	r2, #0
 8021364:	4603      	mov	r3, r0
 8021366:	db3a      	blt.n	80213de <__strftime+0x55e>
 8021368:	2264      	movs	r2, #100	; 0x64
 802136a:	9904      	ldr	r1, [sp, #16]
 802136c:	fb91 f2f2 	sdiv	r2, r1, r2
 8021370:	3213      	adds	r2, #19
 8021372:	6968      	ldr	r0, [r5, #20]
 8021374:	2800      	cmp	r0, #0
 8021376:	db3d      	blt.n	80213f4 <__strftime+0x574>
 8021378:	f04f 0c64 	mov.w	ip, #100	; 0x64
 802137c:	fb90 fefc 	sdiv	lr, r0, ip
 8021380:	fb0c 001e 	mls	r0, ip, lr, r0
 8021384:	2b00      	cmp	r3, #0
 8021386:	da44      	bge.n	8021412 <__strftime+0x592>
 8021388:	f8df c2dc 	ldr.w	ip, [pc, #732]	; 8021668 <__strftime+0x7e8>
 802138c:	6969      	ldr	r1, [r5, #20]
 802138e:	4561      	cmp	r1, ip
 8021390:	da01      	bge.n	8021396 <__strftime+0x516>
 8021392:	2301      	movs	r3, #1
 8021394:	9305      	str	r3, [sp, #20]
 8021396:	4403      	add	r3, r0
 8021398:	1c59      	adds	r1, r3, #1
 802139a:	d146      	bne.n	802142a <__strftime+0x5aa>
 802139c:	3a01      	subs	r2, #1
 802139e:	2363      	movs	r3, #99	; 0x63
 80213a0:	2064      	movs	r0, #100	; 0x64
 80213a2:	fb00 3202 	mla	r2, r0, r2, r3
 80213a6:	9b05      	ldr	r3, [sp, #20]
 80213a8:	2b00      	cmp	r3, #0
 80213aa:	d043      	beq.n	8021434 <__strftime+0x5b4>
 80213ac:	232d      	movs	r3, #45	; 0x2d
 80213ae:	f88d 3020 	strb.w	r3, [sp, #32]
 80213b2:	f1b9 0f00 	cmp.w	r9, #0
 80213b6:	d001      	beq.n	80213bc <__strftime+0x53c>
 80213b8:	f109 39ff 	add.w	r9, r9, #4294967295
 80213bc:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 80213c0:	2125      	movs	r1, #37	; 0x25
 80213c2:	7019      	strb	r1, [r3, #0]
 80213c4:	f1ba 0f00 	cmp.w	sl, #0
 80213c8:	d144      	bne.n	8021454 <__strftime+0x5d4>
 80213ca:	1c58      	adds	r0, r3, #1
 80213cc:	499e      	ldr	r1, [pc, #632]	; (8021648 <__strftime+0x7c8>)
 80213ce:	9204      	str	r2, [sp, #16]
 80213d0:	f7ff fcf7 	bl	8020dc2 <strcpy>
 80213d4:	9a04      	ldr	r2, [sp, #16]
 80213d6:	9200      	str	r2, [sp, #0]
 80213d8:	464b      	mov	r3, r9
 80213da:	aa08      	add	r2, sp, #32
 80213dc:	e09b      	b.n	8021516 <__strftime+0x696>
 80213de:	9b04      	ldr	r3, [sp, #16]
 80213e0:	9006      	str	r0, [sp, #24]
 80213e2:	f203 706c 	addw	r0, r3, #1900	; 0x76c
 80213e6:	f000 fee5 	bl	80221b4 <abs>
 80213ea:	2264      	movs	r2, #100	; 0x64
 80213ec:	9b06      	ldr	r3, [sp, #24]
 80213ee:	fb90 f2f2 	sdiv	r2, r0, r2
 80213f2:	e7be      	b.n	8021372 <__strftime+0x4f2>
 80213f4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80213f8:	e9cd 3206 	strd	r3, r2, [sp, #24]
 80213fc:	f000 feda 	bl	80221b4 <abs>
 8021400:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8021404:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8021408:	fb90 fefc 	sdiv	lr, r0, ip
 802140c:	fb0e 001c 	mls	r0, lr, ip, r0
 8021410:	e7b8      	b.n	8021384 <__strftime+0x504>
 8021412:	d0c0      	beq.n	8021396 <__strftime+0x516>
 8021414:	9904      	ldr	r1, [sp, #16]
 8021416:	f8df c22c 	ldr.w	ip, [pc, #556]	; 8021644 <__strftime+0x7c4>
 802141a:	4561      	cmp	r1, ip
 802141c:	bfae      	itee	ge
 802141e:	2100      	movge	r1, #0
 8021420:	2101      	movlt	r1, #1
 8021422:	f04f 33ff 	movlt.w	r3, #4294967295
 8021426:	9105      	str	r1, [sp, #20]
 8021428:	e7b5      	b.n	8021396 <__strftime+0x516>
 802142a:	2b64      	cmp	r3, #100	; 0x64
 802142c:	bf04      	itt	eq
 802142e:	3201      	addeq	r2, #1
 8021430:	2300      	moveq	r3, #0
 8021432:	e7b5      	b.n	80213a0 <__strftime+0x520>
 8021434:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 8021438:	d110      	bne.n	802145c <__strftime+0x5dc>
 802143a:	f242 730f 	movw	r3, #9999	; 0x270f
 802143e:	429a      	cmp	r2, r3
 8021440:	d90c      	bls.n	802145c <__strftime+0x5dc>
 8021442:	f88d a020 	strb.w	sl, [sp, #32]
 8021446:	f1b9 0f00 	cmp.w	r9, #0
 802144a:	d1b5      	bne.n	80213b8 <__strftime+0x538>
 802144c:	ab10      	add	r3, sp, #64	; 0x40
 802144e:	2125      	movs	r1, #37	; 0x25
 8021450:	f803 1d1f 	strb.w	r1, [r3, #-31]!
 8021454:	2130      	movs	r1, #48	; 0x30
 8021456:	1c98      	adds	r0, r3, #2
 8021458:	7059      	strb	r1, [r3, #1]
 802145a:	e7b7      	b.n	80213cc <__strftime+0x54c>
 802145c:	ab08      	add	r3, sp, #32
 802145e:	e7af      	b.n	80213c0 <__strftime+0x540>
 8021460:	487a      	ldr	r0, [pc, #488]	; (802164c <__strftime+0x7cc>)
 8021462:	4a7b      	ldr	r2, [pc, #492]	; (8021650 <__strftime+0x7d0>)
 8021464:	68ab      	ldr	r3, [r5, #8]
 8021466:	296b      	cmp	r1, #107	; 0x6b
 8021468:	bf18      	it	ne
 802146a:	4602      	movne	r2, r0
 802146c:	e6c1      	b.n	80211f2 <__strftime+0x372>
 802146e:	68ab      	ldr	r3, [r5, #8]
 8021470:	220c      	movs	r2, #12
 8021472:	b15b      	cbz	r3, 802148c <__strftime+0x60c>
 8021474:	4293      	cmp	r3, r2
 8021476:	d003      	beq.n	8021480 <__strftime+0x600>
 8021478:	fb93 f0f2 	sdiv	r0, r3, r2
 802147c:	fb02 3310 	mls	r3, r2, r0, r3
 8021480:	4873      	ldr	r0, [pc, #460]	; (8021650 <__strftime+0x7d0>)
 8021482:	4a72      	ldr	r2, [pc, #456]	; (802164c <__strftime+0x7cc>)
 8021484:	2949      	cmp	r1, #73	; 0x49
 8021486:	bf18      	it	ne
 8021488:	4602      	movne	r2, r0
 802148a:	e6b2      	b.n	80211f2 <__strftime+0x372>
 802148c:	4613      	mov	r3, r2
 802148e:	e7f7      	b.n	8021480 <__strftime+0x600>
 8021490:	69eb      	ldr	r3, [r5, #28]
 8021492:	4a70      	ldr	r2, [pc, #448]	; (8021654 <__strftime+0x7d4>)
 8021494:	3301      	adds	r3, #1
 8021496:	e6ac      	b.n	80211f2 <__strftime+0x372>
 8021498:	692b      	ldr	r3, [r5, #16]
 802149a:	3301      	adds	r3, #1
 802149c:	e728      	b.n	80212f0 <__strftime+0x470>
 802149e:	686b      	ldr	r3, [r5, #4]
 80214a0:	e726      	b.n	80212f0 <__strftime+0x470>
 80214a2:	45a3      	cmp	fp, r4
 80214a4:	f67f ad1f 	bls.w	8020ee6 <__strftime+0x66>
 80214a8:	230a      	movs	r3, #10
 80214aa:	553b      	strb	r3, [r7, r4]
 80214ac:	3401      	adds	r4, #1
 80214ae:	e5ed      	b.n	802108c <__strftime+0x20c>
 80214b0:	68ab      	ldr	r3, [r5, #8]
 80214b2:	2b0b      	cmp	r3, #11
 80214b4:	bfcc      	ite	gt
 80214b6:	22a4      	movgt	r2, #164	; 0xa4
 80214b8:	22a0      	movle	r2, #160	; 0xa0
 80214ba:	4b67      	ldr	r3, [pc, #412]	; (8021658 <__strftime+0x7d8>)
 80214bc:	4413      	add	r3, r2
 80214be:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80214c2:	4648      	mov	r0, r9
 80214c4:	f7de fec6 	bl	8000254 <strlen>
 80214c8:	eba9 0304 	sub.w	r3, r9, r4
 80214cc:	eb04 0a00 	add.w	sl, r4, r0
 80214d0:	45a2      	cmp	sl, r4
 80214d2:	d101      	bne.n	80214d8 <__strftime+0x658>
 80214d4:	4654      	mov	r4, sl
 80214d6:	e5d9      	b.n	802108c <__strftime+0x20c>
 80214d8:	45a3      	cmp	fp, r4
 80214da:	f67f ad04 	bls.w	8020ee6 <__strftime+0x66>
 80214de:	f898 2000 	ldrb.w	r2, [r8]
 80214e2:	f813 9004 	ldrb.w	r9, [r3, r4]
 80214e6:	2a50      	cmp	r2, #80	; 0x50
 80214e8:	d10d      	bne.n	8021506 <__strftime+0x686>
 80214ea:	9304      	str	r3, [sp, #16]
 80214ec:	f7fe fa88 	bl	801fa00 <__locale_ctype_ptr>
 80214f0:	4448      	add	r0, r9
 80214f2:	9b04      	ldr	r3, [sp, #16]
 80214f4:	7842      	ldrb	r2, [r0, #1]
 80214f6:	f002 0203 	and.w	r2, r2, #3
 80214fa:	2a01      	cmp	r2, #1
 80214fc:	bf08      	it	eq
 80214fe:	f109 0920 	addeq.w	r9, r9, #32
 8021502:	fa5f f989 	uxtb.w	r9, r9
 8021506:	f807 9004 	strb.w	r9, [r7, r4]
 802150a:	3401      	adds	r4, #1
 802150c:	e7e0      	b.n	80214d0 <__strftime+0x650>
 802150e:	686b      	ldr	r3, [r5, #4]
 8021510:	9300      	str	r3, [sp, #0]
 8021512:	4a52      	ldr	r2, [pc, #328]	; (802165c <__strftime+0x7dc>)
 8021514:	68ab      	ldr	r3, [r5, #8]
 8021516:	1b31      	subs	r1, r6, r4
 8021518:	1938      	adds	r0, r7, r4
 802151a:	f7ff fb79 	bl	8020c10 <sniprintf>
 802151e:	e66c      	b.n	80211fa <__strftime+0x37a>
 8021520:	6a2b      	ldr	r3, [r5, #32]
 8021522:	2b00      	cmp	r3, #0
 8021524:	db7c      	blt.n	8021620 <__strftime+0x7a0>
 8021526:	f000 fbdf 	bl	8021ce8 <__tz_lock>
 802152a:	9b03      	ldr	r3, [sp, #12]
 802152c:	b90b      	cbnz	r3, 8021532 <__strftime+0x6b2>
 802152e:	f000 fbdd 	bl	8021cec <_tzset_unlocked>
 8021532:	f001 fe3b 	bl	80231ac <__gettzinfo>
 8021536:	6a2b      	ldr	r3, [r5, #32]
 8021538:	2b00      	cmp	r3, #0
 802153a:	bfcc      	ite	gt
 802153c:	2350      	movgt	r3, #80	; 0x50
 802153e:	2328      	movle	r3, #40	; 0x28
 8021540:	58c3      	ldr	r3, [r0, r3]
 8021542:	425b      	negs	r3, r3
 8021544:	9304      	str	r3, [sp, #16]
 8021546:	f000 fbd0 	bl	8021cea <__tz_unlock>
 802154a:	2301      	movs	r3, #1
 802154c:	9303      	str	r3, [sp, #12]
 802154e:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8021552:	193b      	adds	r3, r7, r4
 8021554:	4662      	mov	r2, ip
 8021556:	f1bc 0045 	subs.w	r0, ip, #69	; 0x45
 802155a:	9305      	str	r3, [sp, #20]
 802155c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8021560:	f143 31ff 	adc.w	r1, r3, #4294967295
 8021564:	2800      	cmp	r0, #0
 8021566:	f171 0e00 	sbcs.w	lr, r1, #0
 802156a:	da03      	bge.n	8021574 <__strftime+0x6f4>
 802156c:	f1bc 0042 	subs.w	r0, ip, #66	; 0x42
 8021570:	f143 31ff 	adc.w	r1, r3, #4294967295
 8021574:	0883      	lsrs	r3, r0, #2
 8021576:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
 802157a:	4699      	mov	r9, r3
 802157c:	f10c 30ff 	add.w	r0, ip, #4294967295
 8021580:	108b      	asrs	r3, r1, #2
 8021582:	2164      	movs	r1, #100	; 0x64
 8021584:	fb90 f1f1 	sdiv	r1, r0, r1
 8021588:	ebb9 0201 	subs.w	r2, r9, r1
 802158c:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
 8021590:	f20c 102b 	addw	r0, ip, #299	; 0x12b
 8021594:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8021598:	fb90 f1f1 	sdiv	r1, r0, r1
 802159c:	eb12 0901 	adds.w	r9, r2, r1
 80215a0:	eb43 7ae1 	adc.w	sl, r3, r1, asr #31
 80215a4:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 80215a8:	f240 116d 	movw	r1, #365	; 0x16d
 80215ac:	fb01 fc0c 	mul.w	ip, r1, ip
 80215b0:	69e9      	ldr	r1, [r5, #28]
 80215b2:	eb19 020c 	adds.w	r2, r9, ip
 80215b6:	eb4a 73ec 	adc.w	r3, sl, ip, asr #31
 80215ba:	eb12 0901 	adds.w	r9, r2, r1
 80215be:	f04f 0c18 	mov.w	ip, #24
 80215c2:	eb43 7ae1 	adc.w	sl, r3, r1, asr #31
 80215c6:	fba9 230c 	umull	r2, r3, r9, ip
 80215ca:	4619      	mov	r1, r3
 80215cc:	fb0c 130a 	mla	r3, ip, sl, r1
 80215d0:	4619      	mov	r1, r3
 80215d2:	68ab      	ldr	r3, [r5, #8]
 80215d4:	4610      	mov	r0, r2
 80215d6:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 80215da:	18c0      	adds	r0, r0, r3
 80215dc:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 80215e0:	fba0 230c 	umull	r2, r3, r0, ip
 80215e4:	fb0c 3301 	mla	r3, ip, r1, r3
 80215e8:	6869      	ldr	r1, [r5, #4]
 80215ea:	4691      	mov	r9, r2
 80215ec:	eb19 0201 	adds.w	r2, r9, r1
 80215f0:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 80215f4:	fba2 010c 	umull	r0, r1, r2, ip
 80215f8:	fb0c 1103 	mla	r1, ip, r3, r1
 80215fc:	682b      	ldr	r3, [r5, #0]
 80215fe:	4a18      	ldr	r2, [pc, #96]	; (8021660 <__strftime+0x7e0>)
 8021600:	eb10 0903 	adds.w	r9, r0, r3
 8021604:	eb41 7ae3 	adc.w	sl, r1, r3, asr #31
 8021608:	9b04      	ldr	r3, [sp, #16]
 802160a:	ebb9 0003 	subs.w	r0, r9, r3
 802160e:	eb6a 71e3 	sbc.w	r1, sl, r3, asr #31
 8021612:	e9cd 0100 	strd	r0, r1, [sp]
 8021616:	1b31      	subs	r1, r6, r4
 8021618:	1938      	adds	r0, r7, r4
 802161a:	f7ff faf9 	bl	8020c10 <sniprintf>
 802161e:	e5ec      	b.n	80211fa <__strftime+0x37a>
 8021620:	2300      	movs	r3, #0
 8021622:	9304      	str	r3, [sp, #16]
 8021624:	e793      	b.n	802154e <__strftime+0x6ce>
 8021626:	682b      	ldr	r3, [r5, #0]
 8021628:	e662      	b.n	80212f0 <__strftime+0x470>
 802162a:	45a3      	cmp	fp, r4
 802162c:	f67f ac5b 	bls.w	8020ee6 <__strftime+0x66>
 8021630:	2309      	movs	r3, #9
 8021632:	e73a      	b.n	80214aa <__strftime+0x62a>
 8021634:	682b      	ldr	r3, [r5, #0]
 8021636:	9301      	str	r3, [sp, #4]
 8021638:	686b      	ldr	r3, [r5, #4]
 802163a:	9300      	str	r3, [sp, #0]
 802163c:	4a09      	ldr	r2, [pc, #36]	; (8021664 <__strftime+0x7e4>)
 802163e:	68ab      	ldr	r3, [r5, #8]
 8021640:	e5cc      	b.n	80211dc <__strftime+0x35c>
 8021642:	bf00      	nop
 8021644:	fffff894 	.word	0xfffff894
 8021648:	0803fa1a 	.word	0x0803fa1a
 802164c:	0803fa09 	.word	0x0803fa09
 8021650:	0803f9fb 	.word	0x0803f9fb
 8021654:	0803fa1e 	.word	0x0803fa1e
 8021658:	0803fa44 	.word	0x0803fa44
 802165c:	0803fa2d 	.word	0x0803fa2d
 8021660:	0803fa23 	.word	0x0803fa23
 8021664:	0803fa28 	.word	0x0803fa28
 8021668:	fffff895 	.word	0xfffff895
 802166c:	45a3      	cmp	fp, r4
 802166e:	f67f ac3a 	bls.w	8020ee6 <__strftime+0x66>
 8021672:	69ab      	ldr	r3, [r5, #24]
 8021674:	193a      	adds	r2, r7, r4
 8021676:	3401      	adds	r4, #1
 8021678:	b913      	cbnz	r3, 8021680 <__strftime+0x800>
 802167a:	2337      	movs	r3, #55	; 0x37
 802167c:	7013      	strb	r3, [r2, #0]
 802167e:	e505      	b.n	802108c <__strftime+0x20c>
 8021680:	3330      	adds	r3, #48	; 0x30
 8021682:	e7fb      	b.n	802167c <__strftime+0x7fc>
 8021684:	69eb      	ldr	r3, [r5, #28]
 8021686:	69aa      	ldr	r2, [r5, #24]
 8021688:	3307      	adds	r3, #7
 802168a:	1a9b      	subs	r3, r3, r2
 802168c:	2207      	movs	r2, #7
 802168e:	fb93 f3f2 	sdiv	r3, r3, r2
 8021692:	e62d      	b.n	80212f0 <__strftime+0x470>
 8021694:	4628      	mov	r0, r5
 8021696:	f7ff fb9c 	bl	8020dd2 <iso_year_adjust>
 802169a:	69aa      	ldr	r2, [r5, #24]
 802169c:	b132      	cbz	r2, 80216ac <__strftime+0x82c>
 802169e:	3a01      	subs	r2, #1
 80216a0:	2800      	cmp	r0, #0
 80216a2:	dc28      	bgt.n	80216f6 <__strftime+0x876>
 80216a4:	69eb      	ldr	r3, [r5, #28]
 80216a6:	d103      	bne.n	80216b0 <__strftime+0x830>
 80216a8:	330a      	adds	r3, #10
 80216aa:	e7ee      	b.n	802168a <__strftime+0x80a>
 80216ac:	2206      	movs	r2, #6
 80216ae:	e7f7      	b.n	80216a0 <__strftime+0x820>
 80216b0:	6968      	ldr	r0, [r5, #20]
 80216b2:	2800      	cmp	r0, #0
 80216b4:	eba2 0303 	sub.w	r3, r2, r3
 80216b8:	f240 726b 	movw	r2, #1899	; 0x76b
 80216bc:	bfa8      	it	ge
 80216be:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 80216c2:	4410      	add	r0, r2
 80216c4:	0782      	lsls	r2, r0, #30
 80216c6:	d105      	bne.n	80216d4 <__strftime+0x854>
 80216c8:	2264      	movs	r2, #100	; 0x64
 80216ca:	fb90 f1f2 	sdiv	r1, r0, r2
 80216ce:	fb02 0111 	mls	r1, r2, r1, r0
 80216d2:	b971      	cbnz	r1, 80216f2 <__strftime+0x872>
 80216d4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80216d8:	fb90 f2f1 	sdiv	r2, r0, r1
 80216dc:	fb01 0212 	mls	r2, r1, r2, r0
 80216e0:	fab2 f282 	clz	r2, r2
 80216e4:	0952      	lsrs	r2, r2, #5
 80216e6:	1a9a      	subs	r2, r3, r2
 80216e8:	2a04      	cmp	r2, #4
 80216ea:	bfcc      	ite	gt
 80216ec:	2334      	movgt	r3, #52	; 0x34
 80216ee:	2335      	movle	r3, #53	; 0x35
 80216f0:	e5fe      	b.n	80212f0 <__strftime+0x470>
 80216f2:	2201      	movs	r2, #1
 80216f4:	e7f7      	b.n	80216e6 <__strftime+0x866>
 80216f6:	2301      	movs	r3, #1
 80216f8:	e5fa      	b.n	80212f0 <__strftime+0x470>
 80216fa:	45a3      	cmp	fp, r4
 80216fc:	f67f abf3 	bls.w	8020ee6 <__strftime+0x66>
 8021700:	69ab      	ldr	r3, [r5, #24]
 8021702:	3330      	adds	r3, #48	; 0x30
 8021704:	e6d1      	b.n	80214aa <__strftime+0x62a>
 8021706:	69ab      	ldr	r3, [r5, #24]
 8021708:	b13b      	cbz	r3, 802171a <__strftime+0x89a>
 802170a:	3b01      	subs	r3, #1
 802170c:	69ea      	ldr	r2, [r5, #28]
 802170e:	3207      	adds	r2, #7
 8021710:	1ad2      	subs	r2, r2, r3
 8021712:	2307      	movs	r3, #7
 8021714:	fb92 f3f3 	sdiv	r3, r2, r3
 8021718:	e5ea      	b.n	80212f0 <__strftime+0x470>
 802171a:	2306      	movs	r3, #6
 802171c:	e7f6      	b.n	802170c <__strftime+0x88c>
 802171e:	6968      	ldr	r0, [r5, #20]
 8021720:	2800      	cmp	r0, #0
 8021722:	db05      	blt.n	8021730 <__strftime+0x8b0>
 8021724:	2264      	movs	r2, #100	; 0x64
 8021726:	fb90 f3f2 	sdiv	r3, r0, r2
 802172a:	fb02 0313 	mls	r3, r2, r3, r0
 802172e:	e5df      	b.n	80212f0 <__strftime+0x470>
 8021730:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8021734:	f000 fd3e 	bl	80221b4 <abs>
 8021738:	2364      	movs	r3, #100	; 0x64
 802173a:	fb90 f2f3 	sdiv	r2, r0, r3
 802173e:	e7f4      	b.n	802172a <__strftime+0x8aa>
 8021740:	696b      	ldr	r3, [r5, #20]
 8021742:	4a52      	ldr	r2, [pc, #328]	; (802188c <__strftime+0xa0c>)
 8021744:	4293      	cmp	r3, r2
 8021746:	da18      	bge.n	802177a <__strftime+0x8fa>
 8021748:	212d      	movs	r1, #45	; 0x2d
 802174a:	f88d 1020 	strb.w	r1, [sp, #32]
 802174e:	1ad3      	subs	r3, r2, r3
 8021750:	f1b9 0f00 	cmp.w	r9, #0
 8021754:	d001      	beq.n	802175a <__strftime+0x8da>
 8021756:	f109 39ff 	add.w	r9, r9, #4294967295
 802175a:	f10d 0221 	add.w	r2, sp, #33	; 0x21
 802175e:	2125      	movs	r1, #37	; 0x25
 8021760:	7011      	strb	r1, [r2, #0]
 8021762:	f1ba 0f00 	cmp.w	sl, #0
 8021766:	f040 8088 	bne.w	802187a <__strftime+0x9fa>
 802176a:	1c50      	adds	r0, r2, #1
 802176c:	4948      	ldr	r1, [pc, #288]	; (8021890 <__strftime+0xa10>)
 802176e:	9304      	str	r3, [sp, #16]
 8021770:	f7ff fb27 	bl	8020dc2 <strcpy>
 8021774:	9b04      	ldr	r3, [sp, #16]
 8021776:	9300      	str	r3, [sp, #0]
 8021778:	e62e      	b.n	80213d8 <__strftime+0x558>
 802177a:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 802177e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8021782:	f040 8081 	bne.w	8021888 <__strftime+0xa08>
 8021786:	f242 720f 	movw	r2, #9999	; 0x270f
 802178a:	4293      	cmp	r3, r2
 802178c:	d979      	bls.n	8021882 <__strftime+0xa02>
 802178e:	f88d a020 	strb.w	sl, [sp, #32]
 8021792:	e7dd      	b.n	8021750 <__strftime+0x8d0>
 8021794:	6a2b      	ldr	r3, [r5, #32]
 8021796:	2b00      	cmp	r3, #0
 8021798:	f6ff ac78 	blt.w	802108c <__strftime+0x20c>
 802179c:	f000 faa4 	bl	8021ce8 <__tz_lock>
 80217a0:	9b03      	ldr	r3, [sp, #12]
 80217a2:	b90b      	cbnz	r3, 80217a8 <__strftime+0x928>
 80217a4:	f000 faa2 	bl	8021cec <_tzset_unlocked>
 80217a8:	f001 fd00 	bl	80231ac <__gettzinfo>
 80217ac:	6a2b      	ldr	r3, [r5, #32]
 80217ae:	2b00      	cmp	r3, #0
 80217b0:	bfcc      	ite	gt
 80217b2:	2350      	movgt	r3, #80	; 0x50
 80217b4:	2328      	movle	r3, #40	; 0x28
 80217b6:	eb07 0a04 	add.w	sl, r7, r4
 80217ba:	58c3      	ldr	r3, [r0, r3]
 80217bc:	f1c3 0900 	rsb	r9, r3, #0
 80217c0:	f000 fa93 	bl	8021cea <__tz_unlock>
 80217c4:	233c      	movs	r3, #60	; 0x3c
 80217c6:	1b31      	subs	r1, r6, r4
 80217c8:	fb99 f0f3 	sdiv	r0, r9, r3
 80217cc:	9104      	str	r1, [sp, #16]
 80217ce:	9303      	str	r3, [sp, #12]
 80217d0:	f001 fd9e 	bl	8023310 <labs>
 80217d4:	9b03      	ldr	r3, [sp, #12]
 80217d6:	fb90 f2f3 	sdiv	r2, r0, r3
 80217da:	fb02 0013 	mls	r0, r2, r3, r0
 80217de:	9000      	str	r0, [sp, #0]
 80217e0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80217e4:	4a2b      	ldr	r2, [pc, #172]	; (8021894 <__strftime+0xa14>)
 80217e6:	fb99 f3f3 	sdiv	r3, r9, r3
 80217ea:	9904      	ldr	r1, [sp, #16]
 80217ec:	4650      	mov	r0, sl
 80217ee:	f7ff fa0f 	bl	8020c10 <sniprintf>
 80217f2:	2800      	cmp	r0, #0
 80217f4:	f6ff ab77 	blt.w	8020ee6 <__strftime+0x66>
 80217f8:	4404      	add	r4, r0
 80217fa:	42a6      	cmp	r6, r4
 80217fc:	f67f ab73 	bls.w	8020ee6 <__strftime+0x66>
 8021800:	2301      	movs	r3, #1
 8021802:	9303      	str	r3, [sp, #12]
 8021804:	e442      	b.n	802108c <__strftime+0x20c>
 8021806:	6a2b      	ldr	r3, [r5, #32]
 8021808:	2b00      	cmp	r3, #0
 802180a:	f6ff ac3f 	blt.w	802108c <__strftime+0x20c>
 802180e:	f000 fa6b 	bl	8021ce8 <__tz_lock>
 8021812:	9b03      	ldr	r3, [sp, #12]
 8021814:	b90b      	cbnz	r3, 802181a <__strftime+0x99a>
 8021816:	f000 fa69 	bl	8021cec <_tzset_unlocked>
 802181a:	6a2b      	ldr	r3, [r5, #32]
 802181c:	4a1e      	ldr	r2, [pc, #120]	; (8021898 <__strftime+0xa18>)
 802181e:	2b00      	cmp	r3, #0
 8021820:	bfd4      	ite	le
 8021822:	2300      	movle	r3, #0
 8021824:	2301      	movgt	r3, #1
 8021826:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 802182a:	4648      	mov	r0, r9
 802182c:	f7de fd12 	bl	8000254 <strlen>
 8021830:	eba9 0904 	sub.w	r9, r9, r4
 8021834:	eb04 0a00 	add.w	sl, r4, r0
 8021838:	45a2      	cmp	sl, r4
 802183a:	d103      	bne.n	8021844 <__strftime+0x9c4>
 802183c:	f000 fa55 	bl	8021cea <__tz_unlock>
 8021840:	4654      	mov	r4, sl
 8021842:	e7dd      	b.n	8021800 <__strftime+0x980>
 8021844:	45a3      	cmp	fp, r4
 8021846:	d904      	bls.n	8021852 <__strftime+0x9d2>
 8021848:	f819 3004 	ldrb.w	r3, [r9, r4]
 802184c:	553b      	strb	r3, [r7, r4]
 802184e:	3401      	adds	r4, #1
 8021850:	e7f2      	b.n	8021838 <__strftime+0x9b8>
 8021852:	f000 fa4a 	bl	8021cea <__tz_unlock>
 8021856:	f7ff bb46 	b.w	8020ee6 <__strftime+0x66>
 802185a:	45a3      	cmp	fp, r4
 802185c:	f67f ab43 	bls.w	8020ee6 <__strftime+0x66>
 8021860:	2325      	movs	r3, #37	; 0x25
 8021862:	e622      	b.n	80214aa <__strftime+0x62a>
 8021864:	b10e      	cbz	r6, 802186a <__strftime+0x9ea>
 8021866:	2300      	movs	r3, #0
 8021868:	553b      	strb	r3, [r7, r4]
 802186a:	4620      	mov	r0, r4
 802186c:	b011      	add	sp, #68	; 0x44
 802186e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021872:	2225      	movs	r2, #37	; 0x25
 8021874:	f88d 2020 	strb.w	r2, [sp, #32]
 8021878:	aa08      	add	r2, sp, #32
 802187a:	2130      	movs	r1, #48	; 0x30
 802187c:	1c90      	adds	r0, r2, #2
 802187e:	7051      	strb	r1, [r2, #1]
 8021880:	e774      	b.n	802176c <__strftime+0x8ec>
 8021882:	f1b9 0f00 	cmp.w	r9, #0
 8021886:	d1f4      	bne.n	8021872 <__strftime+0x9f2>
 8021888:	aa08      	add	r2, sp, #32
 802188a:	e768      	b.n	802175e <__strftime+0x8de>
 802188c:	fffff894 	.word	0xfffff894
 8021890:	0803fa1a 	.word	0x0803fa1a
 8021894:	0803fa37 	.word	0x0803fa37
 8021898:	20000620 	.word	0x20000620

0802189c <strftime>:
 802189c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802189e:	4c06      	ldr	r4, [pc, #24]	; (80218b8 <strftime+0x1c>)
 80218a0:	4d06      	ldr	r5, [pc, #24]	; (80218bc <strftime+0x20>)
 80218a2:	6824      	ldr	r4, [r4, #0]
 80218a4:	6a24      	ldr	r4, [r4, #32]
 80218a6:	2c00      	cmp	r4, #0
 80218a8:	bf08      	it	eq
 80218aa:	462c      	moveq	r4, r5
 80218ac:	9400      	str	r4, [sp, #0]
 80218ae:	f7ff fae7 	bl	8020e80 <__strftime>
 80218b2:	b003      	add	sp, #12
 80218b4:	bd30      	pop	{r4, r5, pc}
 80218b6:	bf00      	nop
 80218b8:	20000450 	.word	0x20000450
 80218bc:	200004b4 	.word	0x200004b4

080218c0 <strncmp>:
 80218c0:	b510      	push	{r4, lr}
 80218c2:	b16a      	cbz	r2, 80218e0 <strncmp+0x20>
 80218c4:	3901      	subs	r1, #1
 80218c6:	1884      	adds	r4, r0, r2
 80218c8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80218cc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80218d0:	4293      	cmp	r3, r2
 80218d2:	d103      	bne.n	80218dc <strncmp+0x1c>
 80218d4:	42a0      	cmp	r0, r4
 80218d6:	d001      	beq.n	80218dc <strncmp+0x1c>
 80218d8:	2b00      	cmp	r3, #0
 80218da:	d1f5      	bne.n	80218c8 <strncmp+0x8>
 80218dc:	1a98      	subs	r0, r3, r2
 80218de:	bd10      	pop	{r4, pc}
 80218e0:	4610      	mov	r0, r2
 80218e2:	e7fc      	b.n	80218de <strncmp+0x1e>

080218e4 <strncpy>:
 80218e4:	b570      	push	{r4, r5, r6, lr}
 80218e6:	3901      	subs	r1, #1
 80218e8:	4604      	mov	r4, r0
 80218ea:	b902      	cbnz	r2, 80218ee <strncpy+0xa>
 80218ec:	bd70      	pop	{r4, r5, r6, pc}
 80218ee:	4623      	mov	r3, r4
 80218f0:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80218f4:	f803 5b01 	strb.w	r5, [r3], #1
 80218f8:	1e56      	subs	r6, r2, #1
 80218fa:	b92d      	cbnz	r5, 8021908 <strncpy+0x24>
 80218fc:	4414      	add	r4, r2
 80218fe:	42a3      	cmp	r3, r4
 8021900:	d0f4      	beq.n	80218ec <strncpy+0x8>
 8021902:	f803 5b01 	strb.w	r5, [r3], #1
 8021906:	e7fa      	b.n	80218fe <strncpy+0x1a>
 8021908:	461c      	mov	r4, r3
 802190a:	4632      	mov	r2, r6
 802190c:	e7ed      	b.n	80218ea <strncpy+0x6>

0802190e <_strtol_l.isra.0>:
 802190e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021912:	4680      	mov	r8, r0
 8021914:	4689      	mov	r9, r1
 8021916:	4692      	mov	sl, r2
 8021918:	461e      	mov	r6, r3
 802191a:	460f      	mov	r7, r1
 802191c:	463d      	mov	r5, r7
 802191e:	9808      	ldr	r0, [sp, #32]
 8021920:	f815 4b01 	ldrb.w	r4, [r5], #1
 8021924:	f7fe f868 	bl	801f9f8 <__locale_ctype_ptr_l>
 8021928:	4420      	add	r0, r4
 802192a:	7843      	ldrb	r3, [r0, #1]
 802192c:	f013 0308 	ands.w	r3, r3, #8
 8021930:	d132      	bne.n	8021998 <_strtol_l.isra.0+0x8a>
 8021932:	2c2d      	cmp	r4, #45	; 0x2d
 8021934:	d132      	bne.n	802199c <_strtol_l.isra.0+0x8e>
 8021936:	787c      	ldrb	r4, [r7, #1]
 8021938:	1cbd      	adds	r5, r7, #2
 802193a:	2201      	movs	r2, #1
 802193c:	2e00      	cmp	r6, #0
 802193e:	d05d      	beq.n	80219fc <_strtol_l.isra.0+0xee>
 8021940:	2e10      	cmp	r6, #16
 8021942:	d109      	bne.n	8021958 <_strtol_l.isra.0+0x4a>
 8021944:	2c30      	cmp	r4, #48	; 0x30
 8021946:	d107      	bne.n	8021958 <_strtol_l.isra.0+0x4a>
 8021948:	782b      	ldrb	r3, [r5, #0]
 802194a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 802194e:	2b58      	cmp	r3, #88	; 0x58
 8021950:	d14f      	bne.n	80219f2 <_strtol_l.isra.0+0xe4>
 8021952:	786c      	ldrb	r4, [r5, #1]
 8021954:	2610      	movs	r6, #16
 8021956:	3502      	adds	r5, #2
 8021958:	2a00      	cmp	r2, #0
 802195a:	bf14      	ite	ne
 802195c:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8021960:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8021964:	2700      	movs	r7, #0
 8021966:	fbb1 fcf6 	udiv	ip, r1, r6
 802196a:	4638      	mov	r0, r7
 802196c:	fb06 1e1c 	mls	lr, r6, ip, r1
 8021970:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8021974:	2b09      	cmp	r3, #9
 8021976:	d817      	bhi.n	80219a8 <_strtol_l.isra.0+0x9a>
 8021978:	461c      	mov	r4, r3
 802197a:	42a6      	cmp	r6, r4
 802197c:	dd23      	ble.n	80219c6 <_strtol_l.isra.0+0xb8>
 802197e:	1c7b      	adds	r3, r7, #1
 8021980:	d007      	beq.n	8021992 <_strtol_l.isra.0+0x84>
 8021982:	4584      	cmp	ip, r0
 8021984:	d31c      	bcc.n	80219c0 <_strtol_l.isra.0+0xb2>
 8021986:	d101      	bne.n	802198c <_strtol_l.isra.0+0x7e>
 8021988:	45a6      	cmp	lr, r4
 802198a:	db19      	blt.n	80219c0 <_strtol_l.isra.0+0xb2>
 802198c:	fb00 4006 	mla	r0, r0, r6, r4
 8021990:	2701      	movs	r7, #1
 8021992:	f815 4b01 	ldrb.w	r4, [r5], #1
 8021996:	e7eb      	b.n	8021970 <_strtol_l.isra.0+0x62>
 8021998:	462f      	mov	r7, r5
 802199a:	e7bf      	b.n	802191c <_strtol_l.isra.0+0xe>
 802199c:	2c2b      	cmp	r4, #43	; 0x2b
 802199e:	bf04      	itt	eq
 80219a0:	1cbd      	addeq	r5, r7, #2
 80219a2:	787c      	ldrbeq	r4, [r7, #1]
 80219a4:	461a      	mov	r2, r3
 80219a6:	e7c9      	b.n	802193c <_strtol_l.isra.0+0x2e>
 80219a8:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80219ac:	2b19      	cmp	r3, #25
 80219ae:	d801      	bhi.n	80219b4 <_strtol_l.isra.0+0xa6>
 80219b0:	3c37      	subs	r4, #55	; 0x37
 80219b2:	e7e2      	b.n	802197a <_strtol_l.isra.0+0x6c>
 80219b4:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80219b8:	2b19      	cmp	r3, #25
 80219ba:	d804      	bhi.n	80219c6 <_strtol_l.isra.0+0xb8>
 80219bc:	3c57      	subs	r4, #87	; 0x57
 80219be:	e7dc      	b.n	802197a <_strtol_l.isra.0+0x6c>
 80219c0:	f04f 37ff 	mov.w	r7, #4294967295
 80219c4:	e7e5      	b.n	8021992 <_strtol_l.isra.0+0x84>
 80219c6:	1c7b      	adds	r3, r7, #1
 80219c8:	d108      	bne.n	80219dc <_strtol_l.isra.0+0xce>
 80219ca:	2322      	movs	r3, #34	; 0x22
 80219cc:	f8c8 3000 	str.w	r3, [r8]
 80219d0:	4608      	mov	r0, r1
 80219d2:	f1ba 0f00 	cmp.w	sl, #0
 80219d6:	d107      	bne.n	80219e8 <_strtol_l.isra.0+0xda>
 80219d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80219dc:	b102      	cbz	r2, 80219e0 <_strtol_l.isra.0+0xd2>
 80219de:	4240      	negs	r0, r0
 80219e0:	f1ba 0f00 	cmp.w	sl, #0
 80219e4:	d0f8      	beq.n	80219d8 <_strtol_l.isra.0+0xca>
 80219e6:	b10f      	cbz	r7, 80219ec <_strtol_l.isra.0+0xde>
 80219e8:	f105 39ff 	add.w	r9, r5, #4294967295
 80219ec:	f8ca 9000 	str.w	r9, [sl]
 80219f0:	e7f2      	b.n	80219d8 <_strtol_l.isra.0+0xca>
 80219f2:	2430      	movs	r4, #48	; 0x30
 80219f4:	2e00      	cmp	r6, #0
 80219f6:	d1af      	bne.n	8021958 <_strtol_l.isra.0+0x4a>
 80219f8:	2608      	movs	r6, #8
 80219fa:	e7ad      	b.n	8021958 <_strtol_l.isra.0+0x4a>
 80219fc:	2c30      	cmp	r4, #48	; 0x30
 80219fe:	d0a3      	beq.n	8021948 <_strtol_l.isra.0+0x3a>
 8021a00:	260a      	movs	r6, #10
 8021a02:	e7a9      	b.n	8021958 <_strtol_l.isra.0+0x4a>

08021a04 <_strtol_r>:
 8021a04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021a06:	4c06      	ldr	r4, [pc, #24]	; (8021a20 <_strtol_r+0x1c>)
 8021a08:	4d06      	ldr	r5, [pc, #24]	; (8021a24 <_strtol_r+0x20>)
 8021a0a:	6824      	ldr	r4, [r4, #0]
 8021a0c:	6a24      	ldr	r4, [r4, #32]
 8021a0e:	2c00      	cmp	r4, #0
 8021a10:	bf08      	it	eq
 8021a12:	462c      	moveq	r4, r5
 8021a14:	9400      	str	r4, [sp, #0]
 8021a16:	f7ff ff7a 	bl	802190e <_strtol_l.isra.0>
 8021a1a:	b003      	add	sp, #12
 8021a1c:	bd30      	pop	{r4, r5, pc}
 8021a1e:	bf00      	nop
 8021a20:	20000450 	.word	0x20000450
 8021a24:	200004b4 	.word	0x200004b4

08021a28 <strtol>:
 8021a28:	4b08      	ldr	r3, [pc, #32]	; (8021a4c <strtol+0x24>)
 8021a2a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021a2c:	681c      	ldr	r4, [r3, #0]
 8021a2e:	4d08      	ldr	r5, [pc, #32]	; (8021a50 <strtol+0x28>)
 8021a30:	6a23      	ldr	r3, [r4, #32]
 8021a32:	2b00      	cmp	r3, #0
 8021a34:	bf08      	it	eq
 8021a36:	462b      	moveq	r3, r5
 8021a38:	9300      	str	r3, [sp, #0]
 8021a3a:	4613      	mov	r3, r2
 8021a3c:	460a      	mov	r2, r1
 8021a3e:	4601      	mov	r1, r0
 8021a40:	4620      	mov	r0, r4
 8021a42:	f7ff ff64 	bl	802190e <_strtol_l.isra.0>
 8021a46:	b003      	add	sp, #12
 8021a48:	bd30      	pop	{r4, r5, pc}
 8021a4a:	bf00      	nop
 8021a4c:	20000450 	.word	0x20000450
 8021a50:	200004b4 	.word	0x200004b4

08021a54 <_strtoul_l.isra.0>:
 8021a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021a58:	4680      	mov	r8, r0
 8021a5a:	4689      	mov	r9, r1
 8021a5c:	4692      	mov	sl, r2
 8021a5e:	461e      	mov	r6, r3
 8021a60:	460f      	mov	r7, r1
 8021a62:	463d      	mov	r5, r7
 8021a64:	9808      	ldr	r0, [sp, #32]
 8021a66:	f815 4b01 	ldrb.w	r4, [r5], #1
 8021a6a:	f7fd ffc5 	bl	801f9f8 <__locale_ctype_ptr_l>
 8021a6e:	4420      	add	r0, r4
 8021a70:	7843      	ldrb	r3, [r0, #1]
 8021a72:	f013 0308 	ands.w	r3, r3, #8
 8021a76:	d130      	bne.n	8021ada <_strtoul_l.isra.0+0x86>
 8021a78:	2c2d      	cmp	r4, #45	; 0x2d
 8021a7a:	d130      	bne.n	8021ade <_strtoul_l.isra.0+0x8a>
 8021a7c:	787c      	ldrb	r4, [r7, #1]
 8021a7e:	1cbd      	adds	r5, r7, #2
 8021a80:	2101      	movs	r1, #1
 8021a82:	2e00      	cmp	r6, #0
 8021a84:	d05c      	beq.n	8021b40 <_strtoul_l.isra.0+0xec>
 8021a86:	2e10      	cmp	r6, #16
 8021a88:	d109      	bne.n	8021a9e <_strtoul_l.isra.0+0x4a>
 8021a8a:	2c30      	cmp	r4, #48	; 0x30
 8021a8c:	d107      	bne.n	8021a9e <_strtoul_l.isra.0+0x4a>
 8021a8e:	782b      	ldrb	r3, [r5, #0]
 8021a90:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8021a94:	2b58      	cmp	r3, #88	; 0x58
 8021a96:	d14e      	bne.n	8021b36 <_strtoul_l.isra.0+0xe2>
 8021a98:	786c      	ldrb	r4, [r5, #1]
 8021a9a:	2610      	movs	r6, #16
 8021a9c:	3502      	adds	r5, #2
 8021a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8021aa2:	2300      	movs	r3, #0
 8021aa4:	fbb2 f2f6 	udiv	r2, r2, r6
 8021aa8:	fb06 fc02 	mul.w	ip, r6, r2
 8021aac:	ea6f 0c0c 	mvn.w	ip, ip
 8021ab0:	4618      	mov	r0, r3
 8021ab2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8021ab6:	2f09      	cmp	r7, #9
 8021ab8:	d817      	bhi.n	8021aea <_strtoul_l.isra.0+0x96>
 8021aba:	463c      	mov	r4, r7
 8021abc:	42a6      	cmp	r6, r4
 8021abe:	dd23      	ble.n	8021b08 <_strtoul_l.isra.0+0xb4>
 8021ac0:	2b00      	cmp	r3, #0
 8021ac2:	db1e      	blt.n	8021b02 <_strtoul_l.isra.0+0xae>
 8021ac4:	4282      	cmp	r2, r0
 8021ac6:	d31c      	bcc.n	8021b02 <_strtoul_l.isra.0+0xae>
 8021ac8:	d101      	bne.n	8021ace <_strtoul_l.isra.0+0x7a>
 8021aca:	45a4      	cmp	ip, r4
 8021acc:	db19      	blt.n	8021b02 <_strtoul_l.isra.0+0xae>
 8021ace:	fb00 4006 	mla	r0, r0, r6, r4
 8021ad2:	2301      	movs	r3, #1
 8021ad4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8021ad8:	e7eb      	b.n	8021ab2 <_strtoul_l.isra.0+0x5e>
 8021ada:	462f      	mov	r7, r5
 8021adc:	e7c1      	b.n	8021a62 <_strtoul_l.isra.0+0xe>
 8021ade:	2c2b      	cmp	r4, #43	; 0x2b
 8021ae0:	bf04      	itt	eq
 8021ae2:	1cbd      	addeq	r5, r7, #2
 8021ae4:	787c      	ldrbeq	r4, [r7, #1]
 8021ae6:	4619      	mov	r1, r3
 8021ae8:	e7cb      	b.n	8021a82 <_strtoul_l.isra.0+0x2e>
 8021aea:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8021aee:	2f19      	cmp	r7, #25
 8021af0:	d801      	bhi.n	8021af6 <_strtoul_l.isra.0+0xa2>
 8021af2:	3c37      	subs	r4, #55	; 0x37
 8021af4:	e7e2      	b.n	8021abc <_strtoul_l.isra.0+0x68>
 8021af6:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8021afa:	2f19      	cmp	r7, #25
 8021afc:	d804      	bhi.n	8021b08 <_strtoul_l.isra.0+0xb4>
 8021afe:	3c57      	subs	r4, #87	; 0x57
 8021b00:	e7dc      	b.n	8021abc <_strtoul_l.isra.0+0x68>
 8021b02:	f04f 33ff 	mov.w	r3, #4294967295
 8021b06:	e7e5      	b.n	8021ad4 <_strtoul_l.isra.0+0x80>
 8021b08:	2b00      	cmp	r3, #0
 8021b0a:	da09      	bge.n	8021b20 <_strtoul_l.isra.0+0xcc>
 8021b0c:	2322      	movs	r3, #34	; 0x22
 8021b0e:	f8c8 3000 	str.w	r3, [r8]
 8021b12:	f04f 30ff 	mov.w	r0, #4294967295
 8021b16:	f1ba 0f00 	cmp.w	sl, #0
 8021b1a:	d107      	bne.n	8021b2c <_strtoul_l.isra.0+0xd8>
 8021b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021b20:	b101      	cbz	r1, 8021b24 <_strtoul_l.isra.0+0xd0>
 8021b22:	4240      	negs	r0, r0
 8021b24:	f1ba 0f00 	cmp.w	sl, #0
 8021b28:	d0f8      	beq.n	8021b1c <_strtoul_l.isra.0+0xc8>
 8021b2a:	b10b      	cbz	r3, 8021b30 <_strtoul_l.isra.0+0xdc>
 8021b2c:	f105 39ff 	add.w	r9, r5, #4294967295
 8021b30:	f8ca 9000 	str.w	r9, [sl]
 8021b34:	e7f2      	b.n	8021b1c <_strtoul_l.isra.0+0xc8>
 8021b36:	2430      	movs	r4, #48	; 0x30
 8021b38:	2e00      	cmp	r6, #0
 8021b3a:	d1b0      	bne.n	8021a9e <_strtoul_l.isra.0+0x4a>
 8021b3c:	2608      	movs	r6, #8
 8021b3e:	e7ae      	b.n	8021a9e <_strtoul_l.isra.0+0x4a>
 8021b40:	2c30      	cmp	r4, #48	; 0x30
 8021b42:	d0a4      	beq.n	8021a8e <_strtoul_l.isra.0+0x3a>
 8021b44:	260a      	movs	r6, #10
 8021b46:	e7aa      	b.n	8021a9e <_strtoul_l.isra.0+0x4a>

08021b48 <_strtoul_r>:
 8021b48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021b4a:	4c06      	ldr	r4, [pc, #24]	; (8021b64 <_strtoul_r+0x1c>)
 8021b4c:	4d06      	ldr	r5, [pc, #24]	; (8021b68 <_strtoul_r+0x20>)
 8021b4e:	6824      	ldr	r4, [r4, #0]
 8021b50:	6a24      	ldr	r4, [r4, #32]
 8021b52:	2c00      	cmp	r4, #0
 8021b54:	bf08      	it	eq
 8021b56:	462c      	moveq	r4, r5
 8021b58:	9400      	str	r4, [sp, #0]
 8021b5a:	f7ff ff7b 	bl	8021a54 <_strtoul_l.isra.0>
 8021b5e:	b003      	add	sp, #12
 8021b60:	bd30      	pop	{r4, r5, pc}
 8021b62:	bf00      	nop
 8021b64:	20000450 	.word	0x20000450
 8021b68:	200004b4 	.word	0x200004b4

08021b6c <strtoul>:
 8021b6c:	4b08      	ldr	r3, [pc, #32]	; (8021b90 <strtoul+0x24>)
 8021b6e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021b70:	681c      	ldr	r4, [r3, #0]
 8021b72:	4d08      	ldr	r5, [pc, #32]	; (8021b94 <strtoul+0x28>)
 8021b74:	6a23      	ldr	r3, [r4, #32]
 8021b76:	2b00      	cmp	r3, #0
 8021b78:	bf08      	it	eq
 8021b7a:	462b      	moveq	r3, r5
 8021b7c:	9300      	str	r3, [sp, #0]
 8021b7e:	4613      	mov	r3, r2
 8021b80:	460a      	mov	r2, r1
 8021b82:	4601      	mov	r1, r0
 8021b84:	4620      	mov	r0, r4
 8021b86:	f7ff ff65 	bl	8021a54 <_strtoul_l.isra.0>
 8021b8a:	b003      	add	sp, #12
 8021b8c:	bd30      	pop	{r4, r5, pc}
 8021b8e:	bf00      	nop
 8021b90:	20000450 	.word	0x20000450
 8021b94:	200004b4 	.word	0x200004b4

08021b98 <__tzcalc_limits>:
 8021b98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b9c:	4680      	mov	r8, r0
 8021b9e:	f001 fb05 	bl	80231ac <__gettzinfo>
 8021ba2:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8021ba6:	4598      	cmp	r8, r3
 8021ba8:	f340 8098 	ble.w	8021cdc <__tzcalc_limits+0x144>
 8021bac:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8021bb0:	4443      	add	r3, r8
 8021bb2:	109b      	asrs	r3, r3, #2
 8021bb4:	f240 126d 	movw	r2, #365	; 0x16d
 8021bb8:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8021bbc:	fb02 3505 	mla	r5, r2, r5, r3
 8021bc0:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8021bc4:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8021bc8:	fb93 f3f2 	sdiv	r3, r3, r2
 8021bcc:	441d      	add	r5, r3
 8021bce:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8021bd2:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8021bd6:	fb98 f7f3 	sdiv	r7, r8, r3
 8021bda:	fb03 8717 	mls	r7, r3, r7, r8
 8021bde:	4442      	add	r2, r8
 8021be0:	fab7 fc87 	clz	ip, r7
 8021be4:	fb92 f2f3 	sdiv	r2, r2, r3
 8021be8:	f008 0303 	and.w	r3, r8, #3
 8021bec:	4415      	add	r5, r2
 8021bee:	2264      	movs	r2, #100	; 0x64
 8021bf0:	f8c0 8004 	str.w	r8, [r0, #4]
 8021bf4:	fb98 f6f2 	sdiv	r6, r8, r2
 8021bf8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8021bfc:	fb02 8616 	mls	r6, r2, r6, r8
 8021c00:	4604      	mov	r4, r0
 8021c02:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8021c06:	9300      	str	r3, [sp, #0]
 8021c08:	f04f 0e07 	mov.w	lr, #7
 8021c0c:	7a22      	ldrb	r2, [r4, #8]
 8021c0e:	6963      	ldr	r3, [r4, #20]
 8021c10:	2a4a      	cmp	r2, #74	; 0x4a
 8021c12:	d128      	bne.n	8021c66 <__tzcalc_limits+0xce>
 8021c14:	9900      	ldr	r1, [sp, #0]
 8021c16:	18ea      	adds	r2, r5, r3
 8021c18:	b901      	cbnz	r1, 8021c1c <__tzcalc_limits+0x84>
 8021c1a:	b906      	cbnz	r6, 8021c1e <__tzcalc_limits+0x86>
 8021c1c:	bb0f      	cbnz	r7, 8021c62 <__tzcalc_limits+0xca>
 8021c1e:	2b3b      	cmp	r3, #59	; 0x3b
 8021c20:	bfd4      	ite	le
 8021c22:	2300      	movle	r3, #0
 8021c24:	2301      	movgt	r3, #1
 8021c26:	4413      	add	r3, r2
 8021c28:	1e5a      	subs	r2, r3, #1
 8021c2a:	69a3      	ldr	r3, [r4, #24]
 8021c2c:	492c      	ldr	r1, [pc, #176]	; (8021ce0 <__tzcalc_limits+0x148>)
 8021c2e:	fb01 3202 	mla	r2, r1, r2, r3
 8021c32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8021c34:	4413      	add	r3, r2
 8021c36:	461a      	mov	r2, r3
 8021c38:	17db      	asrs	r3, r3, #31
 8021c3a:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8021c3e:	3428      	adds	r4, #40	; 0x28
 8021c40:	45a3      	cmp	fp, r4
 8021c42:	d1e3      	bne.n	8021c0c <__tzcalc_limits+0x74>
 8021c44:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8021c48:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8021c4c:	4294      	cmp	r4, r2
 8021c4e:	eb75 0303 	sbcs.w	r3, r5, r3
 8021c52:	bfb4      	ite	lt
 8021c54:	2301      	movlt	r3, #1
 8021c56:	2300      	movge	r3, #0
 8021c58:	6003      	str	r3, [r0, #0]
 8021c5a:	2001      	movs	r0, #1
 8021c5c:	b003      	add	sp, #12
 8021c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c62:	2300      	movs	r3, #0
 8021c64:	e7df      	b.n	8021c26 <__tzcalc_limits+0x8e>
 8021c66:	2a44      	cmp	r2, #68	; 0x44
 8021c68:	d101      	bne.n	8021c6e <__tzcalc_limits+0xd6>
 8021c6a:	18ea      	adds	r2, r5, r3
 8021c6c:	e7dd      	b.n	8021c2a <__tzcalc_limits+0x92>
 8021c6e:	9a00      	ldr	r2, [sp, #0]
 8021c70:	bb72      	cbnz	r2, 8021cd0 <__tzcalc_limits+0x138>
 8021c72:	2e00      	cmp	r6, #0
 8021c74:	bf0c      	ite	eq
 8021c76:	46e1      	moveq	r9, ip
 8021c78:	f04f 0901 	movne.w	r9, #1
 8021c7c:	2230      	movs	r2, #48	; 0x30
 8021c7e:	fb02 f909 	mul.w	r9, r2, r9
 8021c82:	68e2      	ldr	r2, [r4, #12]
 8021c84:	9201      	str	r2, [sp, #4]
 8021c86:	f04f 0800 	mov.w	r8, #0
 8021c8a:	462a      	mov	r2, r5
 8021c8c:	f108 0801 	add.w	r8, r8, #1
 8021c90:	4914      	ldr	r1, [pc, #80]	; (8021ce4 <__tzcalc_limits+0x14c>)
 8021c92:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
 8021c96:	448a      	add	sl, r1
 8021c98:	9901      	ldr	r1, [sp, #4]
 8021c9a:	f85a ac04 	ldr.w	sl, [sl, #-4]
 8021c9e:	4541      	cmp	r1, r8
 8021ca0:	dc18      	bgt.n	8021cd4 <__tzcalc_limits+0x13c>
 8021ca2:	f102 0804 	add.w	r8, r2, #4
 8021ca6:	fb98 f9fe 	sdiv	r9, r8, lr
 8021caa:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 8021cae:	eba8 0909 	sub.w	r9, r8, r9
 8021cb2:	ebb3 0909 	subs.w	r9, r3, r9
 8021cb6:	6923      	ldr	r3, [r4, #16]
 8021cb8:	f103 33ff 	add.w	r3, r3, #4294967295
 8021cbc:	bf48      	it	mi
 8021cbe:	f109 0907 	addmi.w	r9, r9, #7
 8021cc2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8021cc6:	444b      	add	r3, r9
 8021cc8:	4553      	cmp	r3, sl
 8021cca:	da05      	bge.n	8021cd8 <__tzcalc_limits+0x140>
 8021ccc:	441a      	add	r2, r3
 8021cce:	e7ac      	b.n	8021c2a <__tzcalc_limits+0x92>
 8021cd0:	46e1      	mov	r9, ip
 8021cd2:	e7d3      	b.n	8021c7c <__tzcalc_limits+0xe4>
 8021cd4:	4452      	add	r2, sl
 8021cd6:	e7d9      	b.n	8021c8c <__tzcalc_limits+0xf4>
 8021cd8:	3b07      	subs	r3, #7
 8021cda:	e7f5      	b.n	8021cc8 <__tzcalc_limits+0x130>
 8021cdc:	2000      	movs	r0, #0
 8021cde:	e7bd      	b.n	8021c5c <__tzcalc_limits+0xc4>
 8021ce0:	00015180 	.word	0x00015180
 8021ce4:	0803f958 	.word	0x0803f958

08021ce8 <__tz_lock>:
 8021ce8:	4770      	bx	lr

08021cea <__tz_unlock>:
 8021cea:	4770      	bx	lr

08021cec <_tzset_unlocked>:
 8021cec:	4b01      	ldr	r3, [pc, #4]	; (8021cf4 <_tzset_unlocked+0x8>)
 8021cee:	6818      	ldr	r0, [r3, #0]
 8021cf0:	f000 b802 	b.w	8021cf8 <_tzset_unlocked_r>
 8021cf4:	20000450 	.word	0x20000450

08021cf8 <_tzset_unlocked_r>:
 8021cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021cfc:	b08d      	sub	sp, #52	; 0x34
 8021cfe:	4607      	mov	r7, r0
 8021d00:	f001 fa54 	bl	80231ac <__gettzinfo>
 8021d04:	49af      	ldr	r1, [pc, #700]	; (8021fc4 <_tzset_unlocked_r+0x2cc>)
 8021d06:	4eb0      	ldr	r6, [pc, #704]	; (8021fc8 <_tzset_unlocked_r+0x2d0>)
 8021d08:	4605      	mov	r5, r0
 8021d0a:	4638      	mov	r0, r7
 8021d0c:	f001 fa46 	bl	802319c <_getenv_r>
 8021d10:	4604      	mov	r4, r0
 8021d12:	b970      	cbnz	r0, 8021d32 <_tzset_unlocked_r+0x3a>
 8021d14:	4bad      	ldr	r3, [pc, #692]	; (8021fcc <_tzset_unlocked_r+0x2d4>)
 8021d16:	4aae      	ldr	r2, [pc, #696]	; (8021fd0 <_tzset_unlocked_r+0x2d8>)
 8021d18:	6018      	str	r0, [r3, #0]
 8021d1a:	4bae      	ldr	r3, [pc, #696]	; (8021fd4 <_tzset_unlocked_r+0x2dc>)
 8021d1c:	6018      	str	r0, [r3, #0]
 8021d1e:	4bae      	ldr	r3, [pc, #696]	; (8021fd8 <_tzset_unlocked_r+0x2e0>)
 8021d20:	6830      	ldr	r0, [r6, #0]
 8021d22:	e9c3 2200 	strd	r2, r2, [r3]
 8021d26:	f7fd fe81 	bl	801fa2c <free>
 8021d2a:	6034      	str	r4, [r6, #0]
 8021d2c:	b00d      	add	sp, #52	; 0x34
 8021d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d32:	6831      	ldr	r1, [r6, #0]
 8021d34:	2900      	cmp	r1, #0
 8021d36:	d15f      	bne.n	8021df8 <_tzset_unlocked_r+0x100>
 8021d38:	6830      	ldr	r0, [r6, #0]
 8021d3a:	f7fd fe77 	bl	801fa2c <free>
 8021d3e:	4620      	mov	r0, r4
 8021d40:	f7de fa88 	bl	8000254 <strlen>
 8021d44:	1c41      	adds	r1, r0, #1
 8021d46:	4638      	mov	r0, r7
 8021d48:	f7fe f9a8 	bl	802009c <_malloc_r>
 8021d4c:	6030      	str	r0, [r6, #0]
 8021d4e:	2800      	cmp	r0, #0
 8021d50:	d157      	bne.n	8021e02 <_tzset_unlocked_r+0x10a>
 8021d52:	7823      	ldrb	r3, [r4, #0]
 8021d54:	4aa1      	ldr	r2, [pc, #644]	; (8021fdc <_tzset_unlocked_r+0x2e4>)
 8021d56:	49a2      	ldr	r1, [pc, #648]	; (8021fe0 <_tzset_unlocked_r+0x2e8>)
 8021d58:	2b3a      	cmp	r3, #58	; 0x3a
 8021d5a:	bf08      	it	eq
 8021d5c:	3401      	addeq	r4, #1
 8021d5e:	ae0a      	add	r6, sp, #40	; 0x28
 8021d60:	4633      	mov	r3, r6
 8021d62:	4620      	mov	r0, r4
 8021d64:	f7fe ffa8 	bl	8020cb8 <siscanf>
 8021d68:	2800      	cmp	r0, #0
 8021d6a:	dddf      	ble.n	8021d2c <_tzset_unlocked_r+0x34>
 8021d6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021d6e:	18e7      	adds	r7, r4, r3
 8021d70:	5ce3      	ldrb	r3, [r4, r3]
 8021d72:	2b2d      	cmp	r3, #45	; 0x2d
 8021d74:	d149      	bne.n	8021e0a <_tzset_unlocked_r+0x112>
 8021d76:	3701      	adds	r7, #1
 8021d78:	f04f 34ff 	mov.w	r4, #4294967295
 8021d7c:	f10d 0a20 	add.w	sl, sp, #32
 8021d80:	f10d 0b1e 	add.w	fp, sp, #30
 8021d84:	f04f 0800 	mov.w	r8, #0
 8021d88:	9603      	str	r6, [sp, #12]
 8021d8a:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8021d8e:	f8cd b000 	str.w	fp, [sp]
 8021d92:	4633      	mov	r3, r6
 8021d94:	aa07      	add	r2, sp, #28
 8021d96:	4993      	ldr	r1, [pc, #588]	; (8021fe4 <_tzset_unlocked_r+0x2ec>)
 8021d98:	f8ad 801e 	strh.w	r8, [sp, #30]
 8021d9c:	4638      	mov	r0, r7
 8021d9e:	f8ad 8020 	strh.w	r8, [sp, #32]
 8021da2:	f7fe ff89 	bl	8020cb8 <siscanf>
 8021da6:	4540      	cmp	r0, r8
 8021da8:	ddc0      	ble.n	8021d2c <_tzset_unlocked_r+0x34>
 8021daa:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8021dae:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8021db2:	f8df 923c 	ldr.w	r9, [pc, #572]	; 8021ff0 <_tzset_unlocked_r+0x2f8>
 8021db6:	213c      	movs	r1, #60	; 0x3c
 8021db8:	fb01 2203 	mla	r2, r1, r3, r2
 8021dbc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8021dc0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8021dc4:	fb01 2303 	mla	r3, r1, r3, r2
 8021dc8:	435c      	muls	r4, r3
 8021dca:	62ac      	str	r4, [r5, #40]	; 0x28
 8021dcc:	4c82      	ldr	r4, [pc, #520]	; (8021fd8 <_tzset_unlocked_r+0x2e0>)
 8021dce:	4b83      	ldr	r3, [pc, #524]	; (8021fdc <_tzset_unlocked_r+0x2e4>)
 8021dd0:	6023      	str	r3, [r4, #0]
 8021dd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021dd4:	4982      	ldr	r1, [pc, #520]	; (8021fe0 <_tzset_unlocked_r+0x2e8>)
 8021dd6:	441f      	add	r7, r3
 8021dd8:	464a      	mov	r2, r9
 8021dda:	4633      	mov	r3, r6
 8021ddc:	4638      	mov	r0, r7
 8021dde:	f7fe ff6b 	bl	8020cb8 <siscanf>
 8021de2:	4540      	cmp	r0, r8
 8021de4:	dc16      	bgt.n	8021e14 <_tzset_unlocked_r+0x11c>
 8021de6:	6823      	ldr	r3, [r4, #0]
 8021de8:	6063      	str	r3, [r4, #4]
 8021dea:	4b78      	ldr	r3, [pc, #480]	; (8021fcc <_tzset_unlocked_r+0x2d4>)
 8021dec:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8021dee:	601a      	str	r2, [r3, #0]
 8021df0:	4b78      	ldr	r3, [pc, #480]	; (8021fd4 <_tzset_unlocked_r+0x2dc>)
 8021df2:	f8c3 8000 	str.w	r8, [r3]
 8021df6:	e799      	b.n	8021d2c <_tzset_unlocked_r+0x34>
 8021df8:	f7de fa22 	bl	8000240 <strcmp>
 8021dfc:	2800      	cmp	r0, #0
 8021dfe:	d095      	beq.n	8021d2c <_tzset_unlocked_r+0x34>
 8021e00:	e79a      	b.n	8021d38 <_tzset_unlocked_r+0x40>
 8021e02:	4621      	mov	r1, r4
 8021e04:	f7fe ffdd 	bl	8020dc2 <strcpy>
 8021e08:	e7a3      	b.n	8021d52 <_tzset_unlocked_r+0x5a>
 8021e0a:	2b2b      	cmp	r3, #43	; 0x2b
 8021e0c:	bf08      	it	eq
 8021e0e:	3701      	addeq	r7, #1
 8021e10:	2401      	movs	r4, #1
 8021e12:	e7b3      	b.n	8021d7c <_tzset_unlocked_r+0x84>
 8021e14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021e16:	f8c4 9004 	str.w	r9, [r4, #4]
 8021e1a:	18fc      	adds	r4, r7, r3
 8021e1c:	5cfb      	ldrb	r3, [r7, r3]
 8021e1e:	2b2d      	cmp	r3, #45	; 0x2d
 8021e20:	f040 808b 	bne.w	8021f3a <_tzset_unlocked_r+0x242>
 8021e24:	3401      	adds	r4, #1
 8021e26:	f04f 37ff 	mov.w	r7, #4294967295
 8021e2a:	2300      	movs	r3, #0
 8021e2c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021e30:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021e34:	f8ad 3020 	strh.w	r3, [sp, #32]
 8021e38:	930a      	str	r3, [sp, #40]	; 0x28
 8021e3a:	e9cd a602 	strd	sl, r6, [sp, #8]
 8021e3e:	e9cd b600 	strd	fp, r6, [sp]
 8021e42:	4633      	mov	r3, r6
 8021e44:	aa07      	add	r2, sp, #28
 8021e46:	4967      	ldr	r1, [pc, #412]	; (8021fe4 <_tzset_unlocked_r+0x2ec>)
 8021e48:	4620      	mov	r0, r4
 8021e4a:	f7fe ff35 	bl	8020cb8 <siscanf>
 8021e4e:	2800      	cmp	r0, #0
 8021e50:	dc78      	bgt.n	8021f44 <_tzset_unlocked_r+0x24c>
 8021e52:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8021e54:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8021e58:	652b      	str	r3, [r5, #80]	; 0x50
 8021e5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021e5c:	462f      	mov	r7, r5
 8021e5e:	441c      	add	r4, r3
 8021e60:	f04f 0900 	mov.w	r9, #0
 8021e64:	7823      	ldrb	r3, [r4, #0]
 8021e66:	2b2c      	cmp	r3, #44	; 0x2c
 8021e68:	bf08      	it	eq
 8021e6a:	3401      	addeq	r4, #1
 8021e6c:	f894 8000 	ldrb.w	r8, [r4]
 8021e70:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8021e74:	d179      	bne.n	8021f6a <_tzset_unlocked_r+0x272>
 8021e76:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8021e7a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8021e7e:	ab09      	add	r3, sp, #36	; 0x24
 8021e80:	9300      	str	r3, [sp, #0]
 8021e82:	9603      	str	r6, [sp, #12]
 8021e84:	4633      	mov	r3, r6
 8021e86:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8021e8a:	4957      	ldr	r1, [pc, #348]	; (8021fe8 <_tzset_unlocked_r+0x2f0>)
 8021e8c:	4620      	mov	r0, r4
 8021e8e:	f7fe ff13 	bl	8020cb8 <siscanf>
 8021e92:	2803      	cmp	r0, #3
 8021e94:	f47f af4a 	bne.w	8021d2c <_tzset_unlocked_r+0x34>
 8021e98:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8021e9c:	1e4b      	subs	r3, r1, #1
 8021e9e:	2b0b      	cmp	r3, #11
 8021ea0:	f63f af44 	bhi.w	8021d2c <_tzset_unlocked_r+0x34>
 8021ea4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8021ea8:	1e53      	subs	r3, r2, #1
 8021eaa:	2b04      	cmp	r3, #4
 8021eac:	f63f af3e 	bhi.w	8021d2c <_tzset_unlocked_r+0x34>
 8021eb0:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8021eb4:	2b06      	cmp	r3, #6
 8021eb6:	f63f af39 	bhi.w	8021d2c <_tzset_unlocked_r+0x34>
 8021eba:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8021ebe:	f887 8008 	strb.w	r8, [r7, #8]
 8021ec2:	617b      	str	r3, [r7, #20]
 8021ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021ec6:	eb04 0803 	add.w	r8, r4, r3
 8021eca:	2302      	movs	r3, #2
 8021ecc:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021ed0:	2300      	movs	r3, #0
 8021ed2:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021ed6:	f8ad 3020 	strh.w	r3, [sp, #32]
 8021eda:	930a      	str	r3, [sp, #40]	; 0x28
 8021edc:	f898 3000 	ldrb.w	r3, [r8]
 8021ee0:	2b2f      	cmp	r3, #47	; 0x2f
 8021ee2:	d109      	bne.n	8021ef8 <_tzset_unlocked_r+0x200>
 8021ee4:	e9cd a602 	strd	sl, r6, [sp, #8]
 8021ee8:	e9cd b600 	strd	fp, r6, [sp]
 8021eec:	4633      	mov	r3, r6
 8021eee:	aa07      	add	r2, sp, #28
 8021ef0:	493e      	ldr	r1, [pc, #248]	; (8021fec <_tzset_unlocked_r+0x2f4>)
 8021ef2:	4640      	mov	r0, r8
 8021ef4:	f7fe fee0 	bl	8020cb8 <siscanf>
 8021ef8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8021efc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8021f00:	213c      	movs	r1, #60	; 0x3c
 8021f02:	fb01 2203 	mla	r2, r1, r3, r2
 8021f06:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8021f0a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8021f0e:	fb01 2303 	mla	r3, r1, r3, r2
 8021f12:	61bb      	str	r3, [r7, #24]
 8021f14:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021f16:	3728      	adds	r7, #40	; 0x28
 8021f18:	4444      	add	r4, r8
 8021f1a:	f1b9 0f00 	cmp.w	r9, #0
 8021f1e:	d021      	beq.n	8021f64 <_tzset_unlocked_r+0x26c>
 8021f20:	6868      	ldr	r0, [r5, #4]
 8021f22:	f7ff fe39 	bl	8021b98 <__tzcalc_limits>
 8021f26:	4b29      	ldr	r3, [pc, #164]	; (8021fcc <_tzset_unlocked_r+0x2d4>)
 8021f28:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8021f2a:	601a      	str	r2, [r3, #0]
 8021f2c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8021f2e:	1a9b      	subs	r3, r3, r2
 8021f30:	4a28      	ldr	r2, [pc, #160]	; (8021fd4 <_tzset_unlocked_r+0x2dc>)
 8021f32:	bf18      	it	ne
 8021f34:	2301      	movne	r3, #1
 8021f36:	6013      	str	r3, [r2, #0]
 8021f38:	e6f8      	b.n	8021d2c <_tzset_unlocked_r+0x34>
 8021f3a:	2b2b      	cmp	r3, #43	; 0x2b
 8021f3c:	bf08      	it	eq
 8021f3e:	3401      	addeq	r4, #1
 8021f40:	2701      	movs	r7, #1
 8021f42:	e772      	b.n	8021e2a <_tzset_unlocked_r+0x132>
 8021f44:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8021f48:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8021f4c:	213c      	movs	r1, #60	; 0x3c
 8021f4e:	fb01 2203 	mla	r2, r1, r3, r2
 8021f52:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8021f56:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8021f5a:	fb01 2303 	mla	r3, r1, r3, r2
 8021f5e:	435f      	muls	r7, r3
 8021f60:	652f      	str	r7, [r5, #80]	; 0x50
 8021f62:	e77a      	b.n	8021e5a <_tzset_unlocked_r+0x162>
 8021f64:	f04f 0901 	mov.w	r9, #1
 8021f68:	e77c      	b.n	8021e64 <_tzset_unlocked_r+0x16c>
 8021f6a:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8021f6e:	bf06      	itte	eq
 8021f70:	3401      	addeq	r4, #1
 8021f72:	4643      	moveq	r3, r8
 8021f74:	2344      	movne	r3, #68	; 0x44
 8021f76:	220a      	movs	r2, #10
 8021f78:	a90b      	add	r1, sp, #44	; 0x2c
 8021f7a:	4620      	mov	r0, r4
 8021f7c:	9305      	str	r3, [sp, #20]
 8021f7e:	f7ff fdf5 	bl	8021b6c <strtoul>
 8021f82:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8021f86:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8021f8a:	45a0      	cmp	r8, r4
 8021f8c:	9b05      	ldr	r3, [sp, #20]
 8021f8e:	d114      	bne.n	8021fba <_tzset_unlocked_r+0x2c2>
 8021f90:	234d      	movs	r3, #77	; 0x4d
 8021f92:	f1b9 0f00 	cmp.w	r9, #0
 8021f96:	d107      	bne.n	8021fa8 <_tzset_unlocked_r+0x2b0>
 8021f98:	722b      	strb	r3, [r5, #8]
 8021f9a:	2103      	movs	r1, #3
 8021f9c:	2302      	movs	r3, #2
 8021f9e:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8021fa2:	f8c5 9014 	str.w	r9, [r5, #20]
 8021fa6:	e790      	b.n	8021eca <_tzset_unlocked_r+0x1d2>
 8021fa8:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8021fac:	220b      	movs	r2, #11
 8021fae:	2301      	movs	r3, #1
 8021fb0:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8021fb4:	2300      	movs	r3, #0
 8021fb6:	63eb      	str	r3, [r5, #60]	; 0x3c
 8021fb8:	e787      	b.n	8021eca <_tzset_unlocked_r+0x1d2>
 8021fba:	b280      	uxth	r0, r0
 8021fbc:	723b      	strb	r3, [r7, #8]
 8021fbe:	6178      	str	r0, [r7, #20]
 8021fc0:	e783      	b.n	8021eca <_tzset_unlocked_r+0x1d2>
 8021fc2:	bf00      	nop
 8021fc4:	0803fc6b 	.word	0x0803fc6b
 8021fc8:	20022768 	.word	0x20022768
 8021fcc:	20022770 	.word	0x20022770
 8021fd0:	0803fc6e 	.word	0x0803fc6e
 8021fd4:	2002276c 	.word	0x2002276c
 8021fd8:	20000620 	.word	0x20000620
 8021fdc:	2002275b 	.word	0x2002275b
 8021fe0:	0803fc72 	.word	0x0803fc72
 8021fe4:	0803fc95 	.word	0x0803fc95
 8021fe8:	0803fc81 	.word	0x0803fc81
 8021fec:	0803fc94 	.word	0x0803fc94
 8021ff0:	20022750 	.word	0x20022750

08021ff4 <__swbuf_r>:
 8021ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021ff6:	460e      	mov	r6, r1
 8021ff8:	4614      	mov	r4, r2
 8021ffa:	4605      	mov	r5, r0
 8021ffc:	b118      	cbz	r0, 8022006 <__swbuf_r+0x12>
 8021ffe:	6983      	ldr	r3, [r0, #24]
 8022000:	b90b      	cbnz	r3, 8022006 <__swbuf_r+0x12>
 8022002:	f001 f805 	bl	8023010 <__sinit>
 8022006:	4b21      	ldr	r3, [pc, #132]	; (802208c <__swbuf_r+0x98>)
 8022008:	429c      	cmp	r4, r3
 802200a:	d12a      	bne.n	8022062 <__swbuf_r+0x6e>
 802200c:	686c      	ldr	r4, [r5, #4]
 802200e:	69a3      	ldr	r3, [r4, #24]
 8022010:	60a3      	str	r3, [r4, #8]
 8022012:	89a3      	ldrh	r3, [r4, #12]
 8022014:	071a      	lsls	r2, r3, #28
 8022016:	d52e      	bpl.n	8022076 <__swbuf_r+0x82>
 8022018:	6923      	ldr	r3, [r4, #16]
 802201a:	b363      	cbz	r3, 8022076 <__swbuf_r+0x82>
 802201c:	6923      	ldr	r3, [r4, #16]
 802201e:	6820      	ldr	r0, [r4, #0]
 8022020:	1ac0      	subs	r0, r0, r3
 8022022:	6963      	ldr	r3, [r4, #20]
 8022024:	b2f6      	uxtb	r6, r6
 8022026:	4283      	cmp	r3, r0
 8022028:	4637      	mov	r7, r6
 802202a:	dc04      	bgt.n	8022036 <__swbuf_r+0x42>
 802202c:	4621      	mov	r1, r4
 802202e:	4628      	mov	r0, r5
 8022030:	f000 ff84 	bl	8022f3c <_fflush_r>
 8022034:	bb28      	cbnz	r0, 8022082 <__swbuf_r+0x8e>
 8022036:	68a3      	ldr	r3, [r4, #8]
 8022038:	3b01      	subs	r3, #1
 802203a:	60a3      	str	r3, [r4, #8]
 802203c:	6823      	ldr	r3, [r4, #0]
 802203e:	1c5a      	adds	r2, r3, #1
 8022040:	6022      	str	r2, [r4, #0]
 8022042:	701e      	strb	r6, [r3, #0]
 8022044:	6963      	ldr	r3, [r4, #20]
 8022046:	3001      	adds	r0, #1
 8022048:	4283      	cmp	r3, r0
 802204a:	d004      	beq.n	8022056 <__swbuf_r+0x62>
 802204c:	89a3      	ldrh	r3, [r4, #12]
 802204e:	07db      	lsls	r3, r3, #31
 8022050:	d519      	bpl.n	8022086 <__swbuf_r+0x92>
 8022052:	2e0a      	cmp	r6, #10
 8022054:	d117      	bne.n	8022086 <__swbuf_r+0x92>
 8022056:	4621      	mov	r1, r4
 8022058:	4628      	mov	r0, r5
 802205a:	f000 ff6f 	bl	8022f3c <_fflush_r>
 802205e:	b190      	cbz	r0, 8022086 <__swbuf_r+0x92>
 8022060:	e00f      	b.n	8022082 <__swbuf_r+0x8e>
 8022062:	4b0b      	ldr	r3, [pc, #44]	; (8022090 <__swbuf_r+0x9c>)
 8022064:	429c      	cmp	r4, r3
 8022066:	d101      	bne.n	802206c <__swbuf_r+0x78>
 8022068:	68ac      	ldr	r4, [r5, #8]
 802206a:	e7d0      	b.n	802200e <__swbuf_r+0x1a>
 802206c:	4b09      	ldr	r3, [pc, #36]	; (8022094 <__swbuf_r+0xa0>)
 802206e:	429c      	cmp	r4, r3
 8022070:	bf08      	it	eq
 8022072:	68ec      	ldreq	r4, [r5, #12]
 8022074:	e7cb      	b.n	802200e <__swbuf_r+0x1a>
 8022076:	4621      	mov	r1, r4
 8022078:	4628      	mov	r0, r5
 802207a:	f000 f82d 	bl	80220d8 <__swsetup_r>
 802207e:	2800      	cmp	r0, #0
 8022080:	d0cc      	beq.n	802201c <__swbuf_r+0x28>
 8022082:	f04f 37ff 	mov.w	r7, #4294967295
 8022086:	4638      	mov	r0, r7
 8022088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802208a:	bf00      	nop
 802208c:	0803fe30 	.word	0x0803fe30
 8022090:	0803fe50 	.word	0x0803fe50
 8022094:	0803fe10 	.word	0x0803fe10

08022098 <__ascii_wctomb>:
 8022098:	b149      	cbz	r1, 80220ae <__ascii_wctomb+0x16>
 802209a:	2aff      	cmp	r2, #255	; 0xff
 802209c:	bf85      	ittet	hi
 802209e:	238a      	movhi	r3, #138	; 0x8a
 80220a0:	6003      	strhi	r3, [r0, #0]
 80220a2:	700a      	strbls	r2, [r1, #0]
 80220a4:	f04f 30ff 	movhi.w	r0, #4294967295
 80220a8:	bf98      	it	ls
 80220aa:	2001      	movls	r0, #1
 80220ac:	4770      	bx	lr
 80220ae:	4608      	mov	r0, r1
 80220b0:	4770      	bx	lr
	...

080220b4 <_write_r>:
 80220b4:	b538      	push	{r3, r4, r5, lr}
 80220b6:	4c07      	ldr	r4, [pc, #28]	; (80220d4 <_write_r+0x20>)
 80220b8:	4605      	mov	r5, r0
 80220ba:	4608      	mov	r0, r1
 80220bc:	4611      	mov	r1, r2
 80220be:	2200      	movs	r2, #0
 80220c0:	6022      	str	r2, [r4, #0]
 80220c2:	461a      	mov	r2, r3
 80220c4:	f7df fdc2 	bl	8001c4c <_write>
 80220c8:	1c43      	adds	r3, r0, #1
 80220ca:	d102      	bne.n	80220d2 <_write_r+0x1e>
 80220cc:	6823      	ldr	r3, [r4, #0]
 80220ce:	b103      	cbz	r3, 80220d2 <_write_r+0x1e>
 80220d0:	602b      	str	r3, [r5, #0]
 80220d2:	bd38      	pop	{r3, r4, r5, pc}
 80220d4:	200362c0 	.word	0x200362c0

080220d8 <__swsetup_r>:
 80220d8:	4b32      	ldr	r3, [pc, #200]	; (80221a4 <__swsetup_r+0xcc>)
 80220da:	b570      	push	{r4, r5, r6, lr}
 80220dc:	681d      	ldr	r5, [r3, #0]
 80220de:	4606      	mov	r6, r0
 80220e0:	460c      	mov	r4, r1
 80220e2:	b125      	cbz	r5, 80220ee <__swsetup_r+0x16>
 80220e4:	69ab      	ldr	r3, [r5, #24]
 80220e6:	b913      	cbnz	r3, 80220ee <__swsetup_r+0x16>
 80220e8:	4628      	mov	r0, r5
 80220ea:	f000 ff91 	bl	8023010 <__sinit>
 80220ee:	4b2e      	ldr	r3, [pc, #184]	; (80221a8 <__swsetup_r+0xd0>)
 80220f0:	429c      	cmp	r4, r3
 80220f2:	d10f      	bne.n	8022114 <__swsetup_r+0x3c>
 80220f4:	686c      	ldr	r4, [r5, #4]
 80220f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80220fa:	b29a      	uxth	r2, r3
 80220fc:	0715      	lsls	r5, r2, #28
 80220fe:	d42c      	bmi.n	802215a <__swsetup_r+0x82>
 8022100:	06d0      	lsls	r0, r2, #27
 8022102:	d411      	bmi.n	8022128 <__swsetup_r+0x50>
 8022104:	2209      	movs	r2, #9
 8022106:	6032      	str	r2, [r6, #0]
 8022108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802210c:	81a3      	strh	r3, [r4, #12]
 802210e:	f04f 30ff 	mov.w	r0, #4294967295
 8022112:	e03e      	b.n	8022192 <__swsetup_r+0xba>
 8022114:	4b25      	ldr	r3, [pc, #148]	; (80221ac <__swsetup_r+0xd4>)
 8022116:	429c      	cmp	r4, r3
 8022118:	d101      	bne.n	802211e <__swsetup_r+0x46>
 802211a:	68ac      	ldr	r4, [r5, #8]
 802211c:	e7eb      	b.n	80220f6 <__swsetup_r+0x1e>
 802211e:	4b24      	ldr	r3, [pc, #144]	; (80221b0 <__swsetup_r+0xd8>)
 8022120:	429c      	cmp	r4, r3
 8022122:	bf08      	it	eq
 8022124:	68ec      	ldreq	r4, [r5, #12]
 8022126:	e7e6      	b.n	80220f6 <__swsetup_r+0x1e>
 8022128:	0751      	lsls	r1, r2, #29
 802212a:	d512      	bpl.n	8022152 <__swsetup_r+0x7a>
 802212c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802212e:	b141      	cbz	r1, 8022142 <__swsetup_r+0x6a>
 8022130:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022134:	4299      	cmp	r1, r3
 8022136:	d002      	beq.n	802213e <__swsetup_r+0x66>
 8022138:	4630      	mov	r0, r6
 802213a:	f7fd ff61 	bl	8020000 <_free_r>
 802213e:	2300      	movs	r3, #0
 8022140:	6363      	str	r3, [r4, #52]	; 0x34
 8022142:	89a3      	ldrh	r3, [r4, #12]
 8022144:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8022148:	81a3      	strh	r3, [r4, #12]
 802214a:	2300      	movs	r3, #0
 802214c:	6063      	str	r3, [r4, #4]
 802214e:	6923      	ldr	r3, [r4, #16]
 8022150:	6023      	str	r3, [r4, #0]
 8022152:	89a3      	ldrh	r3, [r4, #12]
 8022154:	f043 0308 	orr.w	r3, r3, #8
 8022158:	81a3      	strh	r3, [r4, #12]
 802215a:	6923      	ldr	r3, [r4, #16]
 802215c:	b94b      	cbnz	r3, 8022172 <__swsetup_r+0x9a>
 802215e:	89a3      	ldrh	r3, [r4, #12]
 8022160:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8022164:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022168:	d003      	beq.n	8022172 <__swsetup_r+0x9a>
 802216a:	4621      	mov	r1, r4
 802216c:	4630      	mov	r0, r6
 802216e:	f001 f917 	bl	80233a0 <__smakebuf_r>
 8022172:	89a2      	ldrh	r2, [r4, #12]
 8022174:	f012 0301 	ands.w	r3, r2, #1
 8022178:	d00c      	beq.n	8022194 <__swsetup_r+0xbc>
 802217a:	2300      	movs	r3, #0
 802217c:	60a3      	str	r3, [r4, #8]
 802217e:	6963      	ldr	r3, [r4, #20]
 8022180:	425b      	negs	r3, r3
 8022182:	61a3      	str	r3, [r4, #24]
 8022184:	6923      	ldr	r3, [r4, #16]
 8022186:	b953      	cbnz	r3, 802219e <__swsetup_r+0xc6>
 8022188:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802218c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8022190:	d1ba      	bne.n	8022108 <__swsetup_r+0x30>
 8022192:	bd70      	pop	{r4, r5, r6, pc}
 8022194:	0792      	lsls	r2, r2, #30
 8022196:	bf58      	it	pl
 8022198:	6963      	ldrpl	r3, [r4, #20]
 802219a:	60a3      	str	r3, [r4, #8]
 802219c:	e7f2      	b.n	8022184 <__swsetup_r+0xac>
 802219e:	2000      	movs	r0, #0
 80221a0:	e7f7      	b.n	8022192 <__swsetup_r+0xba>
 80221a2:	bf00      	nop
 80221a4:	20000450 	.word	0x20000450
 80221a8:	0803fe30 	.word	0x0803fe30
 80221ac:	0803fe50 	.word	0x0803fe50
 80221b0:	0803fe10 	.word	0x0803fe10

080221b4 <abs>:
 80221b4:	2800      	cmp	r0, #0
 80221b6:	bfb8      	it	lt
 80221b8:	4240      	neglt	r0, r0
 80221ba:	4770      	bx	lr

080221bc <asctime>:
 80221bc:	4b09      	ldr	r3, [pc, #36]	; (80221e4 <asctime+0x28>)
 80221be:	b570      	push	{r4, r5, r6, lr}
 80221c0:	681c      	ldr	r4, [r3, #0]
 80221c2:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80221c4:	4606      	mov	r6, r0
 80221c6:	b93d      	cbnz	r5, 80221d8 <asctime+0x1c>
 80221c8:	201a      	movs	r0, #26
 80221ca:	f7fd fc27 	bl	801fa1c <malloc>
 80221ce:	221a      	movs	r2, #26
 80221d0:	6420      	str	r0, [r4, #64]	; 0x40
 80221d2:	4629      	mov	r1, r5
 80221d4:	f7fd fc77 	bl	801fac6 <memset>
 80221d8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80221da:	4630      	mov	r0, r6
 80221dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80221e0:	f000 b802 	b.w	80221e8 <asctime_r>
 80221e4:	20000450 	.word	0x20000450

080221e8 <asctime_r>:
 80221e8:	b510      	push	{r4, lr}
 80221ea:	460c      	mov	r4, r1
 80221ec:	6941      	ldr	r1, [r0, #20]
 80221ee:	6903      	ldr	r3, [r0, #16]
 80221f0:	6982      	ldr	r2, [r0, #24]
 80221f2:	b086      	sub	sp, #24
 80221f4:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 80221f8:	9104      	str	r1, [sp, #16]
 80221fa:	6801      	ldr	r1, [r0, #0]
 80221fc:	9103      	str	r1, [sp, #12]
 80221fe:	6841      	ldr	r1, [r0, #4]
 8022200:	9102      	str	r1, [sp, #8]
 8022202:	6881      	ldr	r1, [r0, #8]
 8022204:	9101      	str	r1, [sp, #4]
 8022206:	68c1      	ldr	r1, [r0, #12]
 8022208:	9100      	str	r1, [sp, #0]
 802220a:	4907      	ldr	r1, [pc, #28]	; (8022228 <asctime_r+0x40>)
 802220c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022210:	440b      	add	r3, r1
 8022212:	4906      	ldr	r1, [pc, #24]	; (802222c <asctime_r+0x44>)
 8022214:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022218:	440a      	add	r2, r1
 802221a:	4620      	mov	r0, r4
 802221c:	4904      	ldr	r1, [pc, #16]	; (8022230 <asctime_r+0x48>)
 802221e:	f7fe fd2b 	bl	8020c78 <siprintf>
 8022222:	4620      	mov	r0, r4
 8022224:	b006      	add	sp, #24
 8022226:	bd10      	pop	{r4, pc}
 8022228:	0803fcdc 	.word	0x0803fcdc
 802222c:	0803fcc7 	.word	0x0803fcc7
 8022230:	0803fca7 	.word	0x0803fca7

08022234 <_close_r>:
 8022234:	b538      	push	{r3, r4, r5, lr}
 8022236:	4c06      	ldr	r4, [pc, #24]	; (8022250 <_close_r+0x1c>)
 8022238:	2300      	movs	r3, #0
 802223a:	4605      	mov	r5, r0
 802223c:	4608      	mov	r0, r1
 802223e:	6023      	str	r3, [r4, #0]
 8022240:	f7e2 fb8a 	bl	8004958 <_close>
 8022244:	1c43      	adds	r3, r0, #1
 8022246:	d102      	bne.n	802224e <_close_r+0x1a>
 8022248:	6823      	ldr	r3, [r4, #0]
 802224a:	b103      	cbz	r3, 802224e <_close_r+0x1a>
 802224c:	602b      	str	r3, [r5, #0]
 802224e:	bd38      	pop	{r3, r4, r5, pc}
 8022250:	200362c0 	.word	0x200362c0

08022254 <div>:
 8022254:	2900      	cmp	r1, #0
 8022256:	b510      	push	{r4, lr}
 8022258:	fb91 f4f2 	sdiv	r4, r1, r2
 802225c:	fb02 1314 	mls	r3, r2, r4, r1
 8022260:	db06      	blt.n	8022270 <div+0x1c>
 8022262:	2b00      	cmp	r3, #0
 8022264:	da01      	bge.n	802226a <div+0x16>
 8022266:	3401      	adds	r4, #1
 8022268:	1a9b      	subs	r3, r3, r2
 802226a:	e9c0 4300 	strd	r4, r3, [r0]
 802226e:	bd10      	pop	{r4, pc}
 8022270:	2b00      	cmp	r3, #0
 8022272:	bfc4      	itt	gt
 8022274:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8022278:	189b      	addgt	r3, r3, r2
 802227a:	e7f6      	b.n	802226a <div+0x16>

0802227c <quorem>:
 802227c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022280:	6903      	ldr	r3, [r0, #16]
 8022282:	690c      	ldr	r4, [r1, #16]
 8022284:	42a3      	cmp	r3, r4
 8022286:	4680      	mov	r8, r0
 8022288:	f2c0 8082 	blt.w	8022390 <quorem+0x114>
 802228c:	3c01      	subs	r4, #1
 802228e:	f101 0714 	add.w	r7, r1, #20
 8022292:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8022296:	f100 0614 	add.w	r6, r0, #20
 802229a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 802229e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80222a2:	eb06 030c 	add.w	r3, r6, ip
 80222a6:	3501      	adds	r5, #1
 80222a8:	eb07 090c 	add.w	r9, r7, ip
 80222ac:	9301      	str	r3, [sp, #4]
 80222ae:	fbb0 f5f5 	udiv	r5, r0, r5
 80222b2:	b395      	cbz	r5, 802231a <quorem+0x9e>
 80222b4:	f04f 0a00 	mov.w	sl, #0
 80222b8:	4638      	mov	r0, r7
 80222ba:	46b6      	mov	lr, r6
 80222bc:	46d3      	mov	fp, sl
 80222be:	f850 2b04 	ldr.w	r2, [r0], #4
 80222c2:	b293      	uxth	r3, r2
 80222c4:	fb05 a303 	mla	r3, r5, r3, sl
 80222c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80222cc:	b29b      	uxth	r3, r3
 80222ce:	ebab 0303 	sub.w	r3, fp, r3
 80222d2:	0c12      	lsrs	r2, r2, #16
 80222d4:	f8de b000 	ldr.w	fp, [lr]
 80222d8:	fb05 a202 	mla	r2, r5, r2, sl
 80222dc:	fa13 f38b 	uxtah	r3, r3, fp
 80222e0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80222e4:	fa1f fb82 	uxth.w	fp, r2
 80222e8:	f8de 2000 	ldr.w	r2, [lr]
 80222ec:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80222f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80222f4:	b29b      	uxth	r3, r3
 80222f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80222fa:	4581      	cmp	r9, r0
 80222fc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8022300:	f84e 3b04 	str.w	r3, [lr], #4
 8022304:	d2db      	bcs.n	80222be <quorem+0x42>
 8022306:	f856 300c 	ldr.w	r3, [r6, ip]
 802230a:	b933      	cbnz	r3, 802231a <quorem+0x9e>
 802230c:	9b01      	ldr	r3, [sp, #4]
 802230e:	3b04      	subs	r3, #4
 8022310:	429e      	cmp	r6, r3
 8022312:	461a      	mov	r2, r3
 8022314:	d330      	bcc.n	8022378 <quorem+0xfc>
 8022316:	f8c8 4010 	str.w	r4, [r8, #16]
 802231a:	4640      	mov	r0, r8
 802231c:	f001 fa98 	bl	8023850 <__mcmp>
 8022320:	2800      	cmp	r0, #0
 8022322:	db25      	blt.n	8022370 <quorem+0xf4>
 8022324:	3501      	adds	r5, #1
 8022326:	4630      	mov	r0, r6
 8022328:	f04f 0c00 	mov.w	ip, #0
 802232c:	f857 2b04 	ldr.w	r2, [r7], #4
 8022330:	f8d0 e000 	ldr.w	lr, [r0]
 8022334:	b293      	uxth	r3, r2
 8022336:	ebac 0303 	sub.w	r3, ip, r3
 802233a:	0c12      	lsrs	r2, r2, #16
 802233c:	fa13 f38e 	uxtah	r3, r3, lr
 8022340:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8022344:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8022348:	b29b      	uxth	r3, r3
 802234a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802234e:	45b9      	cmp	r9, r7
 8022350:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8022354:	f840 3b04 	str.w	r3, [r0], #4
 8022358:	d2e8      	bcs.n	802232c <quorem+0xb0>
 802235a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 802235e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8022362:	b92a      	cbnz	r2, 8022370 <quorem+0xf4>
 8022364:	3b04      	subs	r3, #4
 8022366:	429e      	cmp	r6, r3
 8022368:	461a      	mov	r2, r3
 802236a:	d30b      	bcc.n	8022384 <quorem+0x108>
 802236c:	f8c8 4010 	str.w	r4, [r8, #16]
 8022370:	4628      	mov	r0, r5
 8022372:	b003      	add	sp, #12
 8022374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022378:	6812      	ldr	r2, [r2, #0]
 802237a:	3b04      	subs	r3, #4
 802237c:	2a00      	cmp	r2, #0
 802237e:	d1ca      	bne.n	8022316 <quorem+0x9a>
 8022380:	3c01      	subs	r4, #1
 8022382:	e7c5      	b.n	8022310 <quorem+0x94>
 8022384:	6812      	ldr	r2, [r2, #0]
 8022386:	3b04      	subs	r3, #4
 8022388:	2a00      	cmp	r2, #0
 802238a:	d1ef      	bne.n	802236c <quorem+0xf0>
 802238c:	3c01      	subs	r4, #1
 802238e:	e7ea      	b.n	8022366 <quorem+0xea>
 8022390:	2000      	movs	r0, #0
 8022392:	e7ee      	b.n	8022372 <quorem+0xf6>
 8022394:	0000      	movs	r0, r0
	...

08022398 <_dtoa_r>:
 8022398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802239c:	ec57 6b10 	vmov	r6, r7, d0
 80223a0:	b095      	sub	sp, #84	; 0x54
 80223a2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80223a4:	9108      	str	r1, [sp, #32]
 80223a6:	4604      	mov	r4, r0
 80223a8:	920a      	str	r2, [sp, #40]	; 0x28
 80223aa:	9311      	str	r3, [sp, #68]	; 0x44
 80223ac:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80223b0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80223b4:	b93d      	cbnz	r5, 80223c6 <_dtoa_r+0x2e>
 80223b6:	2010      	movs	r0, #16
 80223b8:	f7fd fb30 	bl	801fa1c <malloc>
 80223bc:	6260      	str	r0, [r4, #36]	; 0x24
 80223be:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80223c2:	6005      	str	r5, [r0, #0]
 80223c4:	60c5      	str	r5, [r0, #12]
 80223c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80223c8:	6819      	ldr	r1, [r3, #0]
 80223ca:	b151      	cbz	r1, 80223e2 <_dtoa_r+0x4a>
 80223cc:	685a      	ldr	r2, [r3, #4]
 80223ce:	604a      	str	r2, [r1, #4]
 80223d0:	2301      	movs	r3, #1
 80223d2:	4093      	lsls	r3, r2
 80223d4:	608b      	str	r3, [r1, #8]
 80223d6:	4620      	mov	r0, r4
 80223d8:	f001 f858 	bl	802348c <_Bfree>
 80223dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80223de:	2200      	movs	r2, #0
 80223e0:	601a      	str	r2, [r3, #0]
 80223e2:	1e3b      	subs	r3, r7, #0
 80223e4:	bfb9      	ittee	lt
 80223e6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80223ea:	9303      	strlt	r3, [sp, #12]
 80223ec:	2300      	movge	r3, #0
 80223ee:	f8c8 3000 	strge.w	r3, [r8]
 80223f2:	9d03      	ldr	r5, [sp, #12]
 80223f4:	4bac      	ldr	r3, [pc, #688]	; (80226a8 <_dtoa_r+0x310>)
 80223f6:	bfbc      	itt	lt
 80223f8:	2201      	movlt	r2, #1
 80223fa:	f8c8 2000 	strlt.w	r2, [r8]
 80223fe:	43ab      	bics	r3, r5
 8022400:	d11b      	bne.n	802243a <_dtoa_r+0xa2>
 8022402:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022404:	f242 730f 	movw	r3, #9999	; 0x270f
 8022408:	6013      	str	r3, [r2, #0]
 802240a:	9b02      	ldr	r3, [sp, #8]
 802240c:	b923      	cbnz	r3, 8022418 <_dtoa_r+0x80>
 802240e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8022412:	2d00      	cmp	r5, #0
 8022414:	f000 84dd 	beq.w	8022dd2 <_dtoa_r+0xa3a>
 8022418:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802241a:	b953      	cbnz	r3, 8022432 <_dtoa_r+0x9a>
 802241c:	4ba3      	ldr	r3, [pc, #652]	; (80226ac <_dtoa_r+0x314>)
 802241e:	e020      	b.n	8022462 <_dtoa_r+0xca>
 8022420:	4ba3      	ldr	r3, [pc, #652]	; (80226b0 <_dtoa_r+0x318>)
 8022422:	9304      	str	r3, [sp, #16]
 8022424:	3308      	adds	r3, #8
 8022426:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8022428:	6013      	str	r3, [r2, #0]
 802242a:	9804      	ldr	r0, [sp, #16]
 802242c:	b015      	add	sp, #84	; 0x54
 802242e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022432:	4b9e      	ldr	r3, [pc, #632]	; (80226ac <_dtoa_r+0x314>)
 8022434:	9304      	str	r3, [sp, #16]
 8022436:	3303      	adds	r3, #3
 8022438:	e7f5      	b.n	8022426 <_dtoa_r+0x8e>
 802243a:	ed9d 7b02 	vldr	d7, [sp, #8]
 802243e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8022442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022446:	ed8d 7b04 	vstr	d7, [sp, #16]
 802244a:	d10c      	bne.n	8022466 <_dtoa_r+0xce>
 802244c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802244e:	2301      	movs	r3, #1
 8022450:	6013      	str	r3, [r2, #0]
 8022452:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022454:	2b00      	cmp	r3, #0
 8022456:	f000 84b9 	beq.w	8022dcc <_dtoa_r+0xa34>
 802245a:	4b96      	ldr	r3, [pc, #600]	; (80226b4 <_dtoa_r+0x31c>)
 802245c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 802245e:	6013      	str	r3, [r2, #0]
 8022460:	3b01      	subs	r3, #1
 8022462:	9304      	str	r3, [sp, #16]
 8022464:	e7e1      	b.n	802242a <_dtoa_r+0x92>
 8022466:	a913      	add	r1, sp, #76	; 0x4c
 8022468:	aa12      	add	r2, sp, #72	; 0x48
 802246a:	ed9d 0b04 	vldr	d0, [sp, #16]
 802246e:	4620      	mov	r0, r4
 8022470:	f001 fa65 	bl	802393e <__d2b>
 8022474:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8022478:	9001      	str	r0, [sp, #4]
 802247a:	9912      	ldr	r1, [sp, #72]	; 0x48
 802247c:	2e00      	cmp	r6, #0
 802247e:	d046      	beq.n	802250e <_dtoa_r+0x176>
 8022480:	9805      	ldr	r0, [sp, #20]
 8022482:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8022486:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802248a:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 802248e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8022492:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 8022496:	2700      	movs	r7, #0
 8022498:	ee07 aa90 	vmov	s15, sl
 802249c:	ec43 2b16 	vmov	d6, r2, r3
 80224a0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80224a4:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8022690 <_dtoa_r+0x2f8>
 80224a8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80224ac:	ee36 7b47 	vsub.f64	d7, d6, d7
 80224b0:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8022698 <_dtoa_r+0x300>
 80224b4:	eea7 6b04 	vfma.f64	d6, d7, d4
 80224b8:	eeb0 7b46 	vmov.f64	d7, d6
 80224bc:	ed9f 6b78 	vldr	d6, [pc, #480]	; 80226a0 <_dtoa_r+0x308>
 80224c0:	eea5 7b06 	vfma.f64	d7, d5, d6
 80224c4:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80224c8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80224cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80224d0:	ee16 ba90 	vmov	fp, s13
 80224d4:	d508      	bpl.n	80224e8 <_dtoa_r+0x150>
 80224d6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80224da:	eeb4 6b47 	vcmp.f64	d6, d7
 80224de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80224e2:	bf18      	it	ne
 80224e4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80224e8:	f1bb 0f16 	cmp.w	fp, #22
 80224ec:	d834      	bhi.n	8022558 <_dtoa_r+0x1c0>
 80224ee:	4b72      	ldr	r3, [pc, #456]	; (80226b8 <_dtoa_r+0x320>)
 80224f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80224f4:	ed93 7b00 	vldr	d7, [r3]
 80224f8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80224fc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8022500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022504:	dd01      	ble.n	802250a <_dtoa_r+0x172>
 8022506:	f10b 3bff 	add.w	fp, fp, #4294967295
 802250a:	2300      	movs	r3, #0
 802250c:	e025      	b.n	802255a <_dtoa_r+0x1c2>
 802250e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022510:	eb01 0a03 	add.w	sl, r1, r3
 8022514:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8022518:	2b20      	cmp	r3, #32
 802251a:	dd17      	ble.n	802254c <_dtoa_r+0x1b4>
 802251c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8022520:	9a02      	ldr	r2, [sp, #8]
 8022522:	409d      	lsls	r5, r3
 8022524:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8022528:	fa22 f303 	lsr.w	r3, r2, r3
 802252c:	432b      	orrs	r3, r5
 802252e:	ee07 3a90 	vmov	s15, r3
 8022532:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8022536:	f10a 3aff 	add.w	sl, sl, #4294967295
 802253a:	ed8d 7b04 	vstr	d7, [sp, #16]
 802253e:	9805      	ldr	r0, [sp, #20]
 8022540:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8022544:	2701      	movs	r7, #1
 8022546:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 802254a:	e7a5      	b.n	8022498 <_dtoa_r+0x100>
 802254c:	9a02      	ldr	r2, [sp, #8]
 802254e:	f1c3 0320 	rsb	r3, r3, #32
 8022552:	fa02 f303 	lsl.w	r3, r2, r3
 8022556:	e7ea      	b.n	802252e <_dtoa_r+0x196>
 8022558:	2301      	movs	r3, #1
 802255a:	eba1 0a0a 	sub.w	sl, r1, sl
 802255e:	9310      	str	r3, [sp, #64]	; 0x40
 8022560:	f1ba 0301 	subs.w	r3, sl, #1
 8022564:	9307      	str	r3, [sp, #28]
 8022566:	bf43      	ittte	mi
 8022568:	2300      	movmi	r3, #0
 802256a:	f1ca 0a01 	rsbmi	sl, sl, #1
 802256e:	9307      	strmi	r3, [sp, #28]
 8022570:	f04f 0a00 	movpl.w	sl, #0
 8022574:	f1bb 0f00 	cmp.w	fp, #0
 8022578:	db19      	blt.n	80225ae <_dtoa_r+0x216>
 802257a:	9b07      	ldr	r3, [sp, #28]
 802257c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8022580:	445b      	add	r3, fp
 8022582:	9307      	str	r3, [sp, #28]
 8022584:	f04f 0800 	mov.w	r8, #0
 8022588:	9b08      	ldr	r3, [sp, #32]
 802258a:	2b09      	cmp	r3, #9
 802258c:	d866      	bhi.n	802265c <_dtoa_r+0x2c4>
 802258e:	2b05      	cmp	r3, #5
 8022590:	bfc4      	itt	gt
 8022592:	3b04      	subgt	r3, #4
 8022594:	9308      	strgt	r3, [sp, #32]
 8022596:	9b08      	ldr	r3, [sp, #32]
 8022598:	f1a3 0302 	sub.w	r3, r3, #2
 802259c:	bfcc      	ite	gt
 802259e:	2500      	movgt	r5, #0
 80225a0:	2501      	movle	r5, #1
 80225a2:	2b03      	cmp	r3, #3
 80225a4:	d866      	bhi.n	8022674 <_dtoa_r+0x2dc>
 80225a6:	e8df f003 	tbb	[pc, r3]
 80225aa:	5755      	.short	0x5755
 80225ac:	4909      	.short	0x4909
 80225ae:	2300      	movs	r3, #0
 80225b0:	ebaa 0a0b 	sub.w	sl, sl, fp
 80225b4:	f1cb 0800 	rsb	r8, fp, #0
 80225b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80225ba:	e7e5      	b.n	8022588 <_dtoa_r+0x1f0>
 80225bc:	2301      	movs	r3, #1
 80225be:	9309      	str	r3, [sp, #36]	; 0x24
 80225c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80225c2:	2b00      	cmp	r3, #0
 80225c4:	dd59      	ble.n	802267a <_dtoa_r+0x2e2>
 80225c6:	9306      	str	r3, [sp, #24]
 80225c8:	4699      	mov	r9, r3
 80225ca:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80225cc:	2200      	movs	r2, #0
 80225ce:	6072      	str	r2, [r6, #4]
 80225d0:	2204      	movs	r2, #4
 80225d2:	f102 0014 	add.w	r0, r2, #20
 80225d6:	4298      	cmp	r0, r3
 80225d8:	6871      	ldr	r1, [r6, #4]
 80225da:	d953      	bls.n	8022684 <_dtoa_r+0x2ec>
 80225dc:	4620      	mov	r0, r4
 80225de:	f000 ff21 	bl	8023424 <_Balloc>
 80225e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80225e4:	6030      	str	r0, [r6, #0]
 80225e6:	681b      	ldr	r3, [r3, #0]
 80225e8:	9304      	str	r3, [sp, #16]
 80225ea:	f1b9 0f0e 	cmp.w	r9, #14
 80225ee:	f200 80c2 	bhi.w	8022776 <_dtoa_r+0x3de>
 80225f2:	2d00      	cmp	r5, #0
 80225f4:	f000 80bf 	beq.w	8022776 <_dtoa_r+0x3de>
 80225f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80225fc:	f1bb 0f00 	cmp.w	fp, #0
 8022600:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8022604:	f340 80e6 	ble.w	80227d4 <_dtoa_r+0x43c>
 8022608:	4a2b      	ldr	r2, [pc, #172]	; (80226b8 <_dtoa_r+0x320>)
 802260a:	f00b 030f 	and.w	r3, fp, #15
 802260e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8022612:	ed93 7b00 	vldr	d7, [r3]
 8022616:	ea4f 132b 	mov.w	r3, fp, asr #4
 802261a:	06da      	lsls	r2, r3, #27
 802261c:	f140 80d8 	bpl.w	80227d0 <_dtoa_r+0x438>
 8022620:	4a26      	ldr	r2, [pc, #152]	; (80226bc <_dtoa_r+0x324>)
 8022622:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 8022626:	ed92 6b08 	vldr	d6, [r2, #32]
 802262a:	ee85 6b06 	vdiv.f64	d6, d5, d6
 802262e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8022632:	f003 030f 	and.w	r3, r3, #15
 8022636:	2203      	movs	r2, #3
 8022638:	4920      	ldr	r1, [pc, #128]	; (80226bc <_dtoa_r+0x324>)
 802263a:	e04a      	b.n	80226d2 <_dtoa_r+0x33a>
 802263c:	2301      	movs	r3, #1
 802263e:	9309      	str	r3, [sp, #36]	; 0x24
 8022640:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022642:	445b      	add	r3, fp
 8022644:	f103 0901 	add.w	r9, r3, #1
 8022648:	9306      	str	r3, [sp, #24]
 802264a:	464b      	mov	r3, r9
 802264c:	2b01      	cmp	r3, #1
 802264e:	bfb8      	it	lt
 8022650:	2301      	movlt	r3, #1
 8022652:	e7ba      	b.n	80225ca <_dtoa_r+0x232>
 8022654:	2300      	movs	r3, #0
 8022656:	e7b2      	b.n	80225be <_dtoa_r+0x226>
 8022658:	2300      	movs	r3, #0
 802265a:	e7f0      	b.n	802263e <_dtoa_r+0x2a6>
 802265c:	2501      	movs	r5, #1
 802265e:	2300      	movs	r3, #0
 8022660:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8022664:	f04f 33ff 	mov.w	r3, #4294967295
 8022668:	9306      	str	r3, [sp, #24]
 802266a:	4699      	mov	r9, r3
 802266c:	2200      	movs	r2, #0
 802266e:	2312      	movs	r3, #18
 8022670:	920a      	str	r2, [sp, #40]	; 0x28
 8022672:	e7aa      	b.n	80225ca <_dtoa_r+0x232>
 8022674:	2301      	movs	r3, #1
 8022676:	9309      	str	r3, [sp, #36]	; 0x24
 8022678:	e7f4      	b.n	8022664 <_dtoa_r+0x2cc>
 802267a:	2301      	movs	r3, #1
 802267c:	9306      	str	r3, [sp, #24]
 802267e:	4699      	mov	r9, r3
 8022680:	461a      	mov	r2, r3
 8022682:	e7f5      	b.n	8022670 <_dtoa_r+0x2d8>
 8022684:	3101      	adds	r1, #1
 8022686:	6071      	str	r1, [r6, #4]
 8022688:	0052      	lsls	r2, r2, #1
 802268a:	e7a2      	b.n	80225d2 <_dtoa_r+0x23a>
 802268c:	f3af 8000 	nop.w
 8022690:	636f4361 	.word	0x636f4361
 8022694:	3fd287a7 	.word	0x3fd287a7
 8022698:	8b60c8b3 	.word	0x8b60c8b3
 802269c:	3fc68a28 	.word	0x3fc68a28
 80226a0:	509f79fb 	.word	0x509f79fb
 80226a4:	3fd34413 	.word	0x3fd34413
 80226a8:	7ff00000 	.word	0x7ff00000
 80226ac:	0803fe0a 	.word	0x0803fe0a
 80226b0:	0803fe01 	.word	0x0803fe01
 80226b4:	0803ff94 	.word	0x0803ff94
 80226b8:	0803fe98 	.word	0x0803fe98
 80226bc:	0803fe70 	.word	0x0803fe70
 80226c0:	07de      	lsls	r6, r3, #31
 80226c2:	d504      	bpl.n	80226ce <_dtoa_r+0x336>
 80226c4:	ed91 6b00 	vldr	d6, [r1]
 80226c8:	3201      	adds	r2, #1
 80226ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 80226ce:	105b      	asrs	r3, r3, #1
 80226d0:	3108      	adds	r1, #8
 80226d2:	2b00      	cmp	r3, #0
 80226d4:	d1f4      	bne.n	80226c0 <_dtoa_r+0x328>
 80226d6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80226da:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80226de:	ed8d 7b02 	vstr	d7, [sp, #8]
 80226e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80226e4:	2b00      	cmp	r3, #0
 80226e6:	f000 80a7 	beq.w	8022838 <_dtoa_r+0x4a0>
 80226ea:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80226ee:	ed9d 7b02 	vldr	d7, [sp, #8]
 80226f2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80226f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80226fa:	f140 809d 	bpl.w	8022838 <_dtoa_r+0x4a0>
 80226fe:	f1b9 0f00 	cmp.w	r9, #0
 8022702:	f000 8099 	beq.w	8022838 <_dtoa_r+0x4a0>
 8022706:	9b06      	ldr	r3, [sp, #24]
 8022708:	2b00      	cmp	r3, #0
 802270a:	dd30      	ble.n	802276e <_dtoa_r+0x3d6>
 802270c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8022710:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022714:	ed8d 7b02 	vstr	d7, [sp, #8]
 8022718:	9d06      	ldr	r5, [sp, #24]
 802271a:	f10b 33ff 	add.w	r3, fp, #4294967295
 802271e:	3201      	adds	r2, #1
 8022720:	ed9d 6b02 	vldr	d6, [sp, #8]
 8022724:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8022728:	ee07 2a90 	vmov	s15, r2
 802272c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8022730:	eea7 5b06 	vfma.f64	d5, d7, d6
 8022734:	ed8d 5b02 	vstr	d5, [sp, #8]
 8022738:	9a03      	ldr	r2, [sp, #12]
 802273a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802273e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 8022742:	2d00      	cmp	r5, #0
 8022744:	d17b      	bne.n	802283e <_dtoa_r+0x4a6>
 8022746:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 802274a:	ee36 6b47 	vsub.f64	d6, d6, d7
 802274e:	ec41 0b17 	vmov	d7, r0, r1
 8022752:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8022756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802275a:	f300 8253 	bgt.w	8022c04 <_dtoa_r+0x86c>
 802275e:	eeb1 7b47 	vneg.f64	d7, d7
 8022762:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8022766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802276a:	f100 8249 	bmi.w	8022c00 <_dtoa_r+0x868>
 802276e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8022772:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8022776:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022778:	2b00      	cmp	r3, #0
 802277a:	f2c0 8119 	blt.w	80229b0 <_dtoa_r+0x618>
 802277e:	f1bb 0f0e 	cmp.w	fp, #14
 8022782:	f300 8115 	bgt.w	80229b0 <_dtoa_r+0x618>
 8022786:	4bc3      	ldr	r3, [pc, #780]	; (8022a94 <_dtoa_r+0x6fc>)
 8022788:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 802278c:	ed93 6b00 	vldr	d6, [r3]
 8022790:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022792:	2b00      	cmp	r3, #0
 8022794:	f280 80ba 	bge.w	802290c <_dtoa_r+0x574>
 8022798:	f1b9 0f00 	cmp.w	r9, #0
 802279c:	f300 80b6 	bgt.w	802290c <_dtoa_r+0x574>
 80227a0:	f040 822d 	bne.w	8022bfe <_dtoa_r+0x866>
 80227a4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80227a8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80227ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 80227b0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80227b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80227b8:	464d      	mov	r5, r9
 80227ba:	464f      	mov	r7, r9
 80227bc:	f280 8204 	bge.w	8022bc8 <_dtoa_r+0x830>
 80227c0:	9b04      	ldr	r3, [sp, #16]
 80227c2:	9a04      	ldr	r2, [sp, #16]
 80227c4:	1c5e      	adds	r6, r3, #1
 80227c6:	2331      	movs	r3, #49	; 0x31
 80227c8:	7013      	strb	r3, [r2, #0]
 80227ca:	f10b 0b01 	add.w	fp, fp, #1
 80227ce:	e1ff      	b.n	8022bd0 <_dtoa_r+0x838>
 80227d0:	2202      	movs	r2, #2
 80227d2:	e731      	b.n	8022638 <_dtoa_r+0x2a0>
 80227d4:	d02e      	beq.n	8022834 <_dtoa_r+0x49c>
 80227d6:	f1cb 0300 	rsb	r3, fp, #0
 80227da:	4aae      	ldr	r2, [pc, #696]	; (8022a94 <_dtoa_r+0x6fc>)
 80227dc:	f003 010f 	and.w	r1, r3, #15
 80227e0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80227e4:	ed92 7b00 	vldr	d7, [r2]
 80227e8:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 80227ec:	ee26 7b07 	vmul.f64	d7, d6, d7
 80227f0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80227f4:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 80227f8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80227fc:	49a6      	ldr	r1, [pc, #664]	; (8022a98 <_dtoa_r+0x700>)
 80227fe:	111b      	asrs	r3, r3, #4
 8022800:	2000      	movs	r0, #0
 8022802:	2202      	movs	r2, #2
 8022804:	b93b      	cbnz	r3, 8022816 <_dtoa_r+0x47e>
 8022806:	2800      	cmp	r0, #0
 8022808:	f43f af6b 	beq.w	80226e2 <_dtoa_r+0x34a>
 802280c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8022810:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022814:	e765      	b.n	80226e2 <_dtoa_r+0x34a>
 8022816:	07dd      	lsls	r5, r3, #31
 8022818:	d509      	bpl.n	802282e <_dtoa_r+0x496>
 802281a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 802281e:	ed91 7b00 	vldr	d7, [r1]
 8022822:	ee26 7b07 	vmul.f64	d7, d6, d7
 8022826:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 802282a:	3201      	adds	r2, #1
 802282c:	2001      	movs	r0, #1
 802282e:	105b      	asrs	r3, r3, #1
 8022830:	3108      	adds	r1, #8
 8022832:	e7e7      	b.n	8022804 <_dtoa_r+0x46c>
 8022834:	2202      	movs	r2, #2
 8022836:	e754      	b.n	80226e2 <_dtoa_r+0x34a>
 8022838:	465b      	mov	r3, fp
 802283a:	464d      	mov	r5, r9
 802283c:	e770      	b.n	8022720 <_dtoa_r+0x388>
 802283e:	4a95      	ldr	r2, [pc, #596]	; (8022a94 <_dtoa_r+0x6fc>)
 8022840:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8022844:	ed12 4b02 	vldr	d4, [r2, #-8]
 8022848:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802284a:	ec41 0b17 	vmov	d7, r0, r1
 802284e:	b35a      	cbz	r2, 80228a8 <_dtoa_r+0x510>
 8022850:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8022854:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8022858:	9e04      	ldr	r6, [sp, #16]
 802285a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 802285e:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8022862:	ee35 7b47 	vsub.f64	d7, d5, d7
 8022866:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 802286a:	ee14 2a90 	vmov	r2, s9
 802286e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8022872:	3230      	adds	r2, #48	; 0x30
 8022874:	ee36 6b45 	vsub.f64	d6, d6, d5
 8022878:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802287c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022880:	f806 2b01 	strb.w	r2, [r6], #1
 8022884:	d43b      	bmi.n	80228fe <_dtoa_r+0x566>
 8022886:	ee32 5b46 	vsub.f64	d5, d2, d6
 802288a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 802288e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022892:	d472      	bmi.n	802297a <_dtoa_r+0x5e2>
 8022894:	9a04      	ldr	r2, [sp, #16]
 8022896:	1ab2      	subs	r2, r6, r2
 8022898:	4295      	cmp	r5, r2
 802289a:	f77f af68 	ble.w	802276e <_dtoa_r+0x3d6>
 802289e:	ee27 7b03 	vmul.f64	d7, d7, d3
 80228a2:	ee26 6b03 	vmul.f64	d6, d6, d3
 80228a6:	e7de      	b.n	8022866 <_dtoa_r+0x4ce>
 80228a8:	9a04      	ldr	r2, [sp, #16]
 80228aa:	ee24 7b07 	vmul.f64	d7, d4, d7
 80228ae:	1956      	adds	r6, r2, r5
 80228b0:	4611      	mov	r1, r2
 80228b2:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80228b6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80228ba:	ee14 2a90 	vmov	r2, s9
 80228be:	3230      	adds	r2, #48	; 0x30
 80228c0:	f801 2b01 	strb.w	r2, [r1], #1
 80228c4:	42b1      	cmp	r1, r6
 80228c6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80228ca:	ee36 6b45 	vsub.f64	d6, d6, d5
 80228ce:	d11a      	bne.n	8022906 <_dtoa_r+0x56e>
 80228d0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80228d4:	ee37 4b05 	vadd.f64	d4, d7, d5
 80228d8:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80228dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80228e0:	dc4b      	bgt.n	802297a <_dtoa_r+0x5e2>
 80228e2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80228e6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80228ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80228ee:	f57f af3e 	bpl.w	802276e <_dtoa_r+0x3d6>
 80228f2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80228f6:	2a30      	cmp	r2, #48	; 0x30
 80228f8:	f106 31ff 	add.w	r1, r6, #4294967295
 80228fc:	d001      	beq.n	8022902 <_dtoa_r+0x56a>
 80228fe:	469b      	mov	fp, r3
 8022900:	e02a      	b.n	8022958 <_dtoa_r+0x5c0>
 8022902:	460e      	mov	r6, r1
 8022904:	e7f5      	b.n	80228f2 <_dtoa_r+0x55a>
 8022906:	ee26 6b03 	vmul.f64	d6, d6, d3
 802290a:	e7d4      	b.n	80228b6 <_dtoa_r+0x51e>
 802290c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8022910:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8022914:	9e04      	ldr	r6, [sp, #16]
 8022916:	ee87 5b06 	vdiv.f64	d5, d7, d6
 802291a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 802291e:	ee15 3a10 	vmov	r3, s10
 8022922:	3330      	adds	r3, #48	; 0x30
 8022924:	f806 3b01 	strb.w	r3, [r6], #1
 8022928:	9b04      	ldr	r3, [sp, #16]
 802292a:	1af3      	subs	r3, r6, r3
 802292c:	4599      	cmp	r9, r3
 802292e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8022932:	eea3 7b46 	vfms.f64	d7, d3, d6
 8022936:	d133      	bne.n	80229a0 <_dtoa_r+0x608>
 8022938:	ee37 7b07 	vadd.f64	d7, d7, d7
 802293c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8022940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022944:	dc18      	bgt.n	8022978 <_dtoa_r+0x5e0>
 8022946:	eeb4 7b46 	vcmp.f64	d7, d6
 802294a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802294e:	d103      	bne.n	8022958 <_dtoa_r+0x5c0>
 8022950:	ee15 3a10 	vmov	r3, s10
 8022954:	07db      	lsls	r3, r3, #31
 8022956:	d40f      	bmi.n	8022978 <_dtoa_r+0x5e0>
 8022958:	9901      	ldr	r1, [sp, #4]
 802295a:	4620      	mov	r0, r4
 802295c:	f000 fd96 	bl	802348c <_Bfree>
 8022960:	2300      	movs	r3, #0
 8022962:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022964:	7033      	strb	r3, [r6, #0]
 8022966:	f10b 0301 	add.w	r3, fp, #1
 802296a:	6013      	str	r3, [r2, #0]
 802296c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802296e:	2b00      	cmp	r3, #0
 8022970:	f43f ad5b 	beq.w	802242a <_dtoa_r+0x92>
 8022974:	601e      	str	r6, [r3, #0]
 8022976:	e558      	b.n	802242a <_dtoa_r+0x92>
 8022978:	465b      	mov	r3, fp
 802297a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 802297e:	2939      	cmp	r1, #57	; 0x39
 8022980:	f106 32ff 	add.w	r2, r6, #4294967295
 8022984:	d106      	bne.n	8022994 <_dtoa_r+0x5fc>
 8022986:	9904      	ldr	r1, [sp, #16]
 8022988:	4291      	cmp	r1, r2
 802298a:	d107      	bne.n	802299c <_dtoa_r+0x604>
 802298c:	2230      	movs	r2, #48	; 0x30
 802298e:	700a      	strb	r2, [r1, #0]
 8022990:	3301      	adds	r3, #1
 8022992:	460a      	mov	r2, r1
 8022994:	7811      	ldrb	r1, [r2, #0]
 8022996:	3101      	adds	r1, #1
 8022998:	7011      	strb	r1, [r2, #0]
 802299a:	e7b0      	b.n	80228fe <_dtoa_r+0x566>
 802299c:	4616      	mov	r6, r2
 802299e:	e7ec      	b.n	802297a <_dtoa_r+0x5e2>
 80229a0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80229a4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80229a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80229ac:	d1b3      	bne.n	8022916 <_dtoa_r+0x57e>
 80229ae:	e7d3      	b.n	8022958 <_dtoa_r+0x5c0>
 80229b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80229b2:	2a00      	cmp	r2, #0
 80229b4:	f000 808d 	beq.w	8022ad2 <_dtoa_r+0x73a>
 80229b8:	9a08      	ldr	r2, [sp, #32]
 80229ba:	2a01      	cmp	r2, #1
 80229bc:	dc72      	bgt.n	8022aa4 <_dtoa_r+0x70c>
 80229be:	2f00      	cmp	r7, #0
 80229c0:	d06c      	beq.n	8022a9c <_dtoa_r+0x704>
 80229c2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80229c6:	4645      	mov	r5, r8
 80229c8:	4656      	mov	r6, sl
 80229ca:	9a07      	ldr	r2, [sp, #28]
 80229cc:	2101      	movs	r1, #1
 80229ce:	441a      	add	r2, r3
 80229d0:	4620      	mov	r0, r4
 80229d2:	449a      	add	sl, r3
 80229d4:	9207      	str	r2, [sp, #28]
 80229d6:	f000 fdf9 	bl	80235cc <__i2b>
 80229da:	4607      	mov	r7, r0
 80229dc:	2e00      	cmp	r6, #0
 80229de:	dd0b      	ble.n	80229f8 <_dtoa_r+0x660>
 80229e0:	9b07      	ldr	r3, [sp, #28]
 80229e2:	2b00      	cmp	r3, #0
 80229e4:	dd08      	ble.n	80229f8 <_dtoa_r+0x660>
 80229e6:	42b3      	cmp	r3, r6
 80229e8:	9a07      	ldr	r2, [sp, #28]
 80229ea:	bfa8      	it	ge
 80229ec:	4633      	movge	r3, r6
 80229ee:	ebaa 0a03 	sub.w	sl, sl, r3
 80229f2:	1af6      	subs	r6, r6, r3
 80229f4:	1ad3      	subs	r3, r2, r3
 80229f6:	9307      	str	r3, [sp, #28]
 80229f8:	f1b8 0f00 	cmp.w	r8, #0
 80229fc:	d01d      	beq.n	8022a3a <_dtoa_r+0x6a2>
 80229fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022a00:	2b00      	cmp	r3, #0
 8022a02:	d06a      	beq.n	8022ada <_dtoa_r+0x742>
 8022a04:	b18d      	cbz	r5, 8022a2a <_dtoa_r+0x692>
 8022a06:	4639      	mov	r1, r7
 8022a08:	462a      	mov	r2, r5
 8022a0a:	4620      	mov	r0, r4
 8022a0c:	f000 fe7e 	bl	802370c <__pow5mult>
 8022a10:	9a01      	ldr	r2, [sp, #4]
 8022a12:	4601      	mov	r1, r0
 8022a14:	4607      	mov	r7, r0
 8022a16:	4620      	mov	r0, r4
 8022a18:	f000 fde1 	bl	80235de <__multiply>
 8022a1c:	9901      	ldr	r1, [sp, #4]
 8022a1e:	900c      	str	r0, [sp, #48]	; 0x30
 8022a20:	4620      	mov	r0, r4
 8022a22:	f000 fd33 	bl	802348c <_Bfree>
 8022a26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022a28:	9301      	str	r3, [sp, #4]
 8022a2a:	ebb8 0205 	subs.w	r2, r8, r5
 8022a2e:	d004      	beq.n	8022a3a <_dtoa_r+0x6a2>
 8022a30:	9901      	ldr	r1, [sp, #4]
 8022a32:	4620      	mov	r0, r4
 8022a34:	f000 fe6a 	bl	802370c <__pow5mult>
 8022a38:	9001      	str	r0, [sp, #4]
 8022a3a:	2101      	movs	r1, #1
 8022a3c:	4620      	mov	r0, r4
 8022a3e:	f000 fdc5 	bl	80235cc <__i2b>
 8022a42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022a44:	4605      	mov	r5, r0
 8022a46:	2b00      	cmp	r3, #0
 8022a48:	f000 81ca 	beq.w	8022de0 <_dtoa_r+0xa48>
 8022a4c:	461a      	mov	r2, r3
 8022a4e:	4601      	mov	r1, r0
 8022a50:	4620      	mov	r0, r4
 8022a52:	f000 fe5b 	bl	802370c <__pow5mult>
 8022a56:	9b08      	ldr	r3, [sp, #32]
 8022a58:	2b01      	cmp	r3, #1
 8022a5a:	4605      	mov	r5, r0
 8022a5c:	dc44      	bgt.n	8022ae8 <_dtoa_r+0x750>
 8022a5e:	9b02      	ldr	r3, [sp, #8]
 8022a60:	2b00      	cmp	r3, #0
 8022a62:	d13c      	bne.n	8022ade <_dtoa_r+0x746>
 8022a64:	9b03      	ldr	r3, [sp, #12]
 8022a66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8022a6a:	2b00      	cmp	r3, #0
 8022a6c:	d137      	bne.n	8022ade <_dtoa_r+0x746>
 8022a6e:	9b03      	ldr	r3, [sp, #12]
 8022a70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8022a74:	0d1b      	lsrs	r3, r3, #20
 8022a76:	051b      	lsls	r3, r3, #20
 8022a78:	2b00      	cmp	r3, #0
 8022a7a:	d033      	beq.n	8022ae4 <_dtoa_r+0x74c>
 8022a7c:	9b07      	ldr	r3, [sp, #28]
 8022a7e:	3301      	adds	r3, #1
 8022a80:	f10a 0a01 	add.w	sl, sl, #1
 8022a84:	9307      	str	r3, [sp, #28]
 8022a86:	f04f 0801 	mov.w	r8, #1
 8022a8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022a8c:	bb73      	cbnz	r3, 8022aec <_dtoa_r+0x754>
 8022a8e:	2001      	movs	r0, #1
 8022a90:	e034      	b.n	8022afc <_dtoa_r+0x764>
 8022a92:	bf00      	nop
 8022a94:	0803fe98 	.word	0x0803fe98
 8022a98:	0803fe70 	.word	0x0803fe70
 8022a9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022a9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8022aa2:	e790      	b.n	80229c6 <_dtoa_r+0x62e>
 8022aa4:	f109 35ff 	add.w	r5, r9, #4294967295
 8022aa8:	45a8      	cmp	r8, r5
 8022aaa:	bfbf      	itttt	lt
 8022aac:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8022aae:	eba5 0808 	sublt.w	r8, r5, r8
 8022ab2:	4443      	addlt	r3, r8
 8022ab4:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8022ab6:	bfb6      	itet	lt
 8022ab8:	46a8      	movlt	r8, r5
 8022aba:	eba8 0505 	subge.w	r5, r8, r5
 8022abe:	2500      	movlt	r5, #0
 8022ac0:	f1b9 0f00 	cmp.w	r9, #0
 8022ac4:	bfb9      	ittee	lt
 8022ac6:	ebaa 0609 	sublt.w	r6, sl, r9
 8022aca:	2300      	movlt	r3, #0
 8022acc:	4656      	movge	r6, sl
 8022ace:	464b      	movge	r3, r9
 8022ad0:	e77b      	b.n	80229ca <_dtoa_r+0x632>
 8022ad2:	4645      	mov	r5, r8
 8022ad4:	4656      	mov	r6, sl
 8022ad6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022ad8:	e780      	b.n	80229dc <_dtoa_r+0x644>
 8022ada:	4642      	mov	r2, r8
 8022adc:	e7a8      	b.n	8022a30 <_dtoa_r+0x698>
 8022ade:	f04f 0800 	mov.w	r8, #0
 8022ae2:	e7d2      	b.n	8022a8a <_dtoa_r+0x6f2>
 8022ae4:	4698      	mov	r8, r3
 8022ae6:	e7d0      	b.n	8022a8a <_dtoa_r+0x6f2>
 8022ae8:	f04f 0800 	mov.w	r8, #0
 8022aec:	692b      	ldr	r3, [r5, #16]
 8022aee:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8022af2:	6918      	ldr	r0, [r3, #16]
 8022af4:	f000 fd1c 	bl	8023530 <__hi0bits>
 8022af8:	f1c0 0020 	rsb	r0, r0, #32
 8022afc:	9b07      	ldr	r3, [sp, #28]
 8022afe:	4418      	add	r0, r3
 8022b00:	f010 001f 	ands.w	r0, r0, #31
 8022b04:	d047      	beq.n	8022b96 <_dtoa_r+0x7fe>
 8022b06:	f1c0 0320 	rsb	r3, r0, #32
 8022b0a:	2b04      	cmp	r3, #4
 8022b0c:	dd3b      	ble.n	8022b86 <_dtoa_r+0x7ee>
 8022b0e:	9b07      	ldr	r3, [sp, #28]
 8022b10:	f1c0 001c 	rsb	r0, r0, #28
 8022b14:	4482      	add	sl, r0
 8022b16:	4406      	add	r6, r0
 8022b18:	4403      	add	r3, r0
 8022b1a:	9307      	str	r3, [sp, #28]
 8022b1c:	f1ba 0f00 	cmp.w	sl, #0
 8022b20:	dd05      	ble.n	8022b2e <_dtoa_r+0x796>
 8022b22:	4652      	mov	r2, sl
 8022b24:	9901      	ldr	r1, [sp, #4]
 8022b26:	4620      	mov	r0, r4
 8022b28:	f000 fe3e 	bl	80237a8 <__lshift>
 8022b2c:	9001      	str	r0, [sp, #4]
 8022b2e:	9b07      	ldr	r3, [sp, #28]
 8022b30:	2b00      	cmp	r3, #0
 8022b32:	dd05      	ble.n	8022b40 <_dtoa_r+0x7a8>
 8022b34:	4629      	mov	r1, r5
 8022b36:	461a      	mov	r2, r3
 8022b38:	4620      	mov	r0, r4
 8022b3a:	f000 fe35 	bl	80237a8 <__lshift>
 8022b3e:	4605      	mov	r5, r0
 8022b40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022b42:	b353      	cbz	r3, 8022b9a <_dtoa_r+0x802>
 8022b44:	4629      	mov	r1, r5
 8022b46:	9801      	ldr	r0, [sp, #4]
 8022b48:	f000 fe82 	bl	8023850 <__mcmp>
 8022b4c:	2800      	cmp	r0, #0
 8022b4e:	da24      	bge.n	8022b9a <_dtoa_r+0x802>
 8022b50:	2300      	movs	r3, #0
 8022b52:	220a      	movs	r2, #10
 8022b54:	9901      	ldr	r1, [sp, #4]
 8022b56:	4620      	mov	r0, r4
 8022b58:	f000 fcaf 	bl	80234ba <__multadd>
 8022b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022b5e:	9001      	str	r0, [sp, #4]
 8022b60:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022b64:	2b00      	cmp	r3, #0
 8022b66:	f000 8142 	beq.w	8022dee <_dtoa_r+0xa56>
 8022b6a:	2300      	movs	r3, #0
 8022b6c:	4639      	mov	r1, r7
 8022b6e:	220a      	movs	r2, #10
 8022b70:	4620      	mov	r0, r4
 8022b72:	f000 fca2 	bl	80234ba <__multadd>
 8022b76:	9b06      	ldr	r3, [sp, #24]
 8022b78:	2b00      	cmp	r3, #0
 8022b7a:	4607      	mov	r7, r0
 8022b7c:	dc4b      	bgt.n	8022c16 <_dtoa_r+0x87e>
 8022b7e:	9b08      	ldr	r3, [sp, #32]
 8022b80:	2b02      	cmp	r3, #2
 8022b82:	dd48      	ble.n	8022c16 <_dtoa_r+0x87e>
 8022b84:	e011      	b.n	8022baa <_dtoa_r+0x812>
 8022b86:	d0c9      	beq.n	8022b1c <_dtoa_r+0x784>
 8022b88:	9a07      	ldr	r2, [sp, #28]
 8022b8a:	331c      	adds	r3, #28
 8022b8c:	441a      	add	r2, r3
 8022b8e:	449a      	add	sl, r3
 8022b90:	441e      	add	r6, r3
 8022b92:	4613      	mov	r3, r2
 8022b94:	e7c1      	b.n	8022b1a <_dtoa_r+0x782>
 8022b96:	4603      	mov	r3, r0
 8022b98:	e7f6      	b.n	8022b88 <_dtoa_r+0x7f0>
 8022b9a:	f1b9 0f00 	cmp.w	r9, #0
 8022b9e:	dc34      	bgt.n	8022c0a <_dtoa_r+0x872>
 8022ba0:	9b08      	ldr	r3, [sp, #32]
 8022ba2:	2b02      	cmp	r3, #2
 8022ba4:	dd31      	ble.n	8022c0a <_dtoa_r+0x872>
 8022ba6:	f8cd 9018 	str.w	r9, [sp, #24]
 8022baa:	9b06      	ldr	r3, [sp, #24]
 8022bac:	b963      	cbnz	r3, 8022bc8 <_dtoa_r+0x830>
 8022bae:	4629      	mov	r1, r5
 8022bb0:	2205      	movs	r2, #5
 8022bb2:	4620      	mov	r0, r4
 8022bb4:	f000 fc81 	bl	80234ba <__multadd>
 8022bb8:	4601      	mov	r1, r0
 8022bba:	4605      	mov	r5, r0
 8022bbc:	9801      	ldr	r0, [sp, #4]
 8022bbe:	f000 fe47 	bl	8023850 <__mcmp>
 8022bc2:	2800      	cmp	r0, #0
 8022bc4:	f73f adfc 	bgt.w	80227c0 <_dtoa_r+0x428>
 8022bc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022bca:	9e04      	ldr	r6, [sp, #16]
 8022bcc:	ea6f 0b03 	mvn.w	fp, r3
 8022bd0:	f04f 0900 	mov.w	r9, #0
 8022bd4:	4629      	mov	r1, r5
 8022bd6:	4620      	mov	r0, r4
 8022bd8:	f000 fc58 	bl	802348c <_Bfree>
 8022bdc:	2f00      	cmp	r7, #0
 8022bde:	f43f aebb 	beq.w	8022958 <_dtoa_r+0x5c0>
 8022be2:	f1b9 0f00 	cmp.w	r9, #0
 8022be6:	d005      	beq.n	8022bf4 <_dtoa_r+0x85c>
 8022be8:	45b9      	cmp	r9, r7
 8022bea:	d003      	beq.n	8022bf4 <_dtoa_r+0x85c>
 8022bec:	4649      	mov	r1, r9
 8022bee:	4620      	mov	r0, r4
 8022bf0:	f000 fc4c 	bl	802348c <_Bfree>
 8022bf4:	4639      	mov	r1, r7
 8022bf6:	4620      	mov	r0, r4
 8022bf8:	f000 fc48 	bl	802348c <_Bfree>
 8022bfc:	e6ac      	b.n	8022958 <_dtoa_r+0x5c0>
 8022bfe:	2500      	movs	r5, #0
 8022c00:	462f      	mov	r7, r5
 8022c02:	e7e1      	b.n	8022bc8 <_dtoa_r+0x830>
 8022c04:	469b      	mov	fp, r3
 8022c06:	462f      	mov	r7, r5
 8022c08:	e5da      	b.n	80227c0 <_dtoa_r+0x428>
 8022c0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022c0c:	f8cd 9018 	str.w	r9, [sp, #24]
 8022c10:	2b00      	cmp	r3, #0
 8022c12:	f000 80f3 	beq.w	8022dfc <_dtoa_r+0xa64>
 8022c16:	2e00      	cmp	r6, #0
 8022c18:	dd05      	ble.n	8022c26 <_dtoa_r+0x88e>
 8022c1a:	4639      	mov	r1, r7
 8022c1c:	4632      	mov	r2, r6
 8022c1e:	4620      	mov	r0, r4
 8022c20:	f000 fdc2 	bl	80237a8 <__lshift>
 8022c24:	4607      	mov	r7, r0
 8022c26:	f1b8 0f00 	cmp.w	r8, #0
 8022c2a:	d04c      	beq.n	8022cc6 <_dtoa_r+0x92e>
 8022c2c:	6879      	ldr	r1, [r7, #4]
 8022c2e:	4620      	mov	r0, r4
 8022c30:	f000 fbf8 	bl	8023424 <_Balloc>
 8022c34:	693a      	ldr	r2, [r7, #16]
 8022c36:	3202      	adds	r2, #2
 8022c38:	4606      	mov	r6, r0
 8022c3a:	0092      	lsls	r2, r2, #2
 8022c3c:	f107 010c 	add.w	r1, r7, #12
 8022c40:	300c      	adds	r0, #12
 8022c42:	f7fc ff1c 	bl	801fa7e <memcpy>
 8022c46:	2201      	movs	r2, #1
 8022c48:	4631      	mov	r1, r6
 8022c4a:	4620      	mov	r0, r4
 8022c4c:	f000 fdac 	bl	80237a8 <__lshift>
 8022c50:	9b02      	ldr	r3, [sp, #8]
 8022c52:	f8dd a010 	ldr.w	sl, [sp, #16]
 8022c56:	f003 0301 	and.w	r3, r3, #1
 8022c5a:	46b9      	mov	r9, r7
 8022c5c:	9307      	str	r3, [sp, #28]
 8022c5e:	4607      	mov	r7, r0
 8022c60:	4629      	mov	r1, r5
 8022c62:	9801      	ldr	r0, [sp, #4]
 8022c64:	f7ff fb0a 	bl	802227c <quorem>
 8022c68:	4649      	mov	r1, r9
 8022c6a:	4606      	mov	r6, r0
 8022c6c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8022c70:	9801      	ldr	r0, [sp, #4]
 8022c72:	f000 fded 	bl	8023850 <__mcmp>
 8022c76:	463a      	mov	r2, r7
 8022c78:	9002      	str	r0, [sp, #8]
 8022c7a:	4629      	mov	r1, r5
 8022c7c:	4620      	mov	r0, r4
 8022c7e:	f000 fe01 	bl	8023884 <__mdiff>
 8022c82:	68c3      	ldr	r3, [r0, #12]
 8022c84:	4602      	mov	r2, r0
 8022c86:	bb03      	cbnz	r3, 8022cca <_dtoa_r+0x932>
 8022c88:	4601      	mov	r1, r0
 8022c8a:	9009      	str	r0, [sp, #36]	; 0x24
 8022c8c:	9801      	ldr	r0, [sp, #4]
 8022c8e:	f000 fddf 	bl	8023850 <__mcmp>
 8022c92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022c94:	4603      	mov	r3, r0
 8022c96:	4611      	mov	r1, r2
 8022c98:	4620      	mov	r0, r4
 8022c9a:	9309      	str	r3, [sp, #36]	; 0x24
 8022c9c:	f000 fbf6 	bl	802348c <_Bfree>
 8022ca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022ca2:	b9a3      	cbnz	r3, 8022cce <_dtoa_r+0x936>
 8022ca4:	9a08      	ldr	r2, [sp, #32]
 8022ca6:	b992      	cbnz	r2, 8022cce <_dtoa_r+0x936>
 8022ca8:	9a07      	ldr	r2, [sp, #28]
 8022caa:	b982      	cbnz	r2, 8022cce <_dtoa_r+0x936>
 8022cac:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8022cb0:	d029      	beq.n	8022d06 <_dtoa_r+0x96e>
 8022cb2:	9b02      	ldr	r3, [sp, #8]
 8022cb4:	2b00      	cmp	r3, #0
 8022cb6:	dd01      	ble.n	8022cbc <_dtoa_r+0x924>
 8022cb8:	f106 0831 	add.w	r8, r6, #49	; 0x31
 8022cbc:	f10a 0601 	add.w	r6, sl, #1
 8022cc0:	f88a 8000 	strb.w	r8, [sl]
 8022cc4:	e786      	b.n	8022bd4 <_dtoa_r+0x83c>
 8022cc6:	4638      	mov	r0, r7
 8022cc8:	e7c2      	b.n	8022c50 <_dtoa_r+0x8b8>
 8022cca:	2301      	movs	r3, #1
 8022ccc:	e7e3      	b.n	8022c96 <_dtoa_r+0x8fe>
 8022cce:	9a02      	ldr	r2, [sp, #8]
 8022cd0:	2a00      	cmp	r2, #0
 8022cd2:	db04      	blt.n	8022cde <_dtoa_r+0x946>
 8022cd4:	d124      	bne.n	8022d20 <_dtoa_r+0x988>
 8022cd6:	9a08      	ldr	r2, [sp, #32]
 8022cd8:	bb12      	cbnz	r2, 8022d20 <_dtoa_r+0x988>
 8022cda:	9a07      	ldr	r2, [sp, #28]
 8022cdc:	bb02      	cbnz	r2, 8022d20 <_dtoa_r+0x988>
 8022cde:	2b00      	cmp	r3, #0
 8022ce0:	ddec      	ble.n	8022cbc <_dtoa_r+0x924>
 8022ce2:	2201      	movs	r2, #1
 8022ce4:	9901      	ldr	r1, [sp, #4]
 8022ce6:	4620      	mov	r0, r4
 8022ce8:	f000 fd5e 	bl	80237a8 <__lshift>
 8022cec:	4629      	mov	r1, r5
 8022cee:	9001      	str	r0, [sp, #4]
 8022cf0:	f000 fdae 	bl	8023850 <__mcmp>
 8022cf4:	2800      	cmp	r0, #0
 8022cf6:	dc03      	bgt.n	8022d00 <_dtoa_r+0x968>
 8022cf8:	d1e0      	bne.n	8022cbc <_dtoa_r+0x924>
 8022cfa:	f018 0f01 	tst.w	r8, #1
 8022cfe:	d0dd      	beq.n	8022cbc <_dtoa_r+0x924>
 8022d00:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8022d04:	d1d8      	bne.n	8022cb8 <_dtoa_r+0x920>
 8022d06:	2339      	movs	r3, #57	; 0x39
 8022d08:	f10a 0601 	add.w	r6, sl, #1
 8022d0c:	f88a 3000 	strb.w	r3, [sl]
 8022d10:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8022d14:	2b39      	cmp	r3, #57	; 0x39
 8022d16:	f106 32ff 	add.w	r2, r6, #4294967295
 8022d1a:	d04c      	beq.n	8022db6 <_dtoa_r+0xa1e>
 8022d1c:	3301      	adds	r3, #1
 8022d1e:	e051      	b.n	8022dc4 <_dtoa_r+0xa2c>
 8022d20:	2b00      	cmp	r3, #0
 8022d22:	f10a 0601 	add.w	r6, sl, #1
 8022d26:	dd05      	ble.n	8022d34 <_dtoa_r+0x99c>
 8022d28:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8022d2c:	d0eb      	beq.n	8022d06 <_dtoa_r+0x96e>
 8022d2e:	f108 0801 	add.w	r8, r8, #1
 8022d32:	e7c5      	b.n	8022cc0 <_dtoa_r+0x928>
 8022d34:	9b04      	ldr	r3, [sp, #16]
 8022d36:	9a06      	ldr	r2, [sp, #24]
 8022d38:	f806 8c01 	strb.w	r8, [r6, #-1]
 8022d3c:	1af3      	subs	r3, r6, r3
 8022d3e:	4293      	cmp	r3, r2
 8022d40:	d021      	beq.n	8022d86 <_dtoa_r+0x9ee>
 8022d42:	2300      	movs	r3, #0
 8022d44:	220a      	movs	r2, #10
 8022d46:	9901      	ldr	r1, [sp, #4]
 8022d48:	4620      	mov	r0, r4
 8022d4a:	f000 fbb6 	bl	80234ba <__multadd>
 8022d4e:	45b9      	cmp	r9, r7
 8022d50:	9001      	str	r0, [sp, #4]
 8022d52:	f04f 0300 	mov.w	r3, #0
 8022d56:	f04f 020a 	mov.w	r2, #10
 8022d5a:	4649      	mov	r1, r9
 8022d5c:	4620      	mov	r0, r4
 8022d5e:	d105      	bne.n	8022d6c <_dtoa_r+0x9d4>
 8022d60:	f000 fbab 	bl	80234ba <__multadd>
 8022d64:	4681      	mov	r9, r0
 8022d66:	4607      	mov	r7, r0
 8022d68:	46b2      	mov	sl, r6
 8022d6a:	e779      	b.n	8022c60 <_dtoa_r+0x8c8>
 8022d6c:	f000 fba5 	bl	80234ba <__multadd>
 8022d70:	4639      	mov	r1, r7
 8022d72:	4681      	mov	r9, r0
 8022d74:	2300      	movs	r3, #0
 8022d76:	220a      	movs	r2, #10
 8022d78:	4620      	mov	r0, r4
 8022d7a:	f000 fb9e 	bl	80234ba <__multadd>
 8022d7e:	4607      	mov	r7, r0
 8022d80:	e7f2      	b.n	8022d68 <_dtoa_r+0x9d0>
 8022d82:	f04f 0900 	mov.w	r9, #0
 8022d86:	2201      	movs	r2, #1
 8022d88:	9901      	ldr	r1, [sp, #4]
 8022d8a:	4620      	mov	r0, r4
 8022d8c:	f000 fd0c 	bl	80237a8 <__lshift>
 8022d90:	4629      	mov	r1, r5
 8022d92:	9001      	str	r0, [sp, #4]
 8022d94:	f000 fd5c 	bl	8023850 <__mcmp>
 8022d98:	2800      	cmp	r0, #0
 8022d9a:	dcb9      	bgt.n	8022d10 <_dtoa_r+0x978>
 8022d9c:	d102      	bne.n	8022da4 <_dtoa_r+0xa0c>
 8022d9e:	f018 0f01 	tst.w	r8, #1
 8022da2:	d1b5      	bne.n	8022d10 <_dtoa_r+0x978>
 8022da4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8022da8:	2b30      	cmp	r3, #48	; 0x30
 8022daa:	f106 32ff 	add.w	r2, r6, #4294967295
 8022dae:	f47f af11 	bne.w	8022bd4 <_dtoa_r+0x83c>
 8022db2:	4616      	mov	r6, r2
 8022db4:	e7f6      	b.n	8022da4 <_dtoa_r+0xa0c>
 8022db6:	9b04      	ldr	r3, [sp, #16]
 8022db8:	4293      	cmp	r3, r2
 8022dba:	d105      	bne.n	8022dc8 <_dtoa_r+0xa30>
 8022dbc:	9a04      	ldr	r2, [sp, #16]
 8022dbe:	f10b 0b01 	add.w	fp, fp, #1
 8022dc2:	2331      	movs	r3, #49	; 0x31
 8022dc4:	7013      	strb	r3, [r2, #0]
 8022dc6:	e705      	b.n	8022bd4 <_dtoa_r+0x83c>
 8022dc8:	4616      	mov	r6, r2
 8022dca:	e7a1      	b.n	8022d10 <_dtoa_r+0x978>
 8022dcc:	4b16      	ldr	r3, [pc, #88]	; (8022e28 <_dtoa_r+0xa90>)
 8022dce:	f7ff bb48 	b.w	8022462 <_dtoa_r+0xca>
 8022dd2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022dd4:	2b00      	cmp	r3, #0
 8022dd6:	f47f ab23 	bne.w	8022420 <_dtoa_r+0x88>
 8022dda:	4b14      	ldr	r3, [pc, #80]	; (8022e2c <_dtoa_r+0xa94>)
 8022ddc:	f7ff bb41 	b.w	8022462 <_dtoa_r+0xca>
 8022de0:	9b08      	ldr	r3, [sp, #32]
 8022de2:	2b01      	cmp	r3, #1
 8022de4:	f77f ae3b 	ble.w	8022a5e <_dtoa_r+0x6c6>
 8022de8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8022dec:	e64f      	b.n	8022a8e <_dtoa_r+0x6f6>
 8022dee:	9b06      	ldr	r3, [sp, #24]
 8022df0:	2b00      	cmp	r3, #0
 8022df2:	dc03      	bgt.n	8022dfc <_dtoa_r+0xa64>
 8022df4:	9b08      	ldr	r3, [sp, #32]
 8022df6:	2b02      	cmp	r3, #2
 8022df8:	f73f aed7 	bgt.w	8022baa <_dtoa_r+0x812>
 8022dfc:	9e04      	ldr	r6, [sp, #16]
 8022dfe:	9801      	ldr	r0, [sp, #4]
 8022e00:	4629      	mov	r1, r5
 8022e02:	f7ff fa3b 	bl	802227c <quorem>
 8022e06:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8022e0a:	f806 8b01 	strb.w	r8, [r6], #1
 8022e0e:	9b04      	ldr	r3, [sp, #16]
 8022e10:	9a06      	ldr	r2, [sp, #24]
 8022e12:	1af3      	subs	r3, r6, r3
 8022e14:	429a      	cmp	r2, r3
 8022e16:	ddb4      	ble.n	8022d82 <_dtoa_r+0x9ea>
 8022e18:	2300      	movs	r3, #0
 8022e1a:	220a      	movs	r2, #10
 8022e1c:	9901      	ldr	r1, [sp, #4]
 8022e1e:	4620      	mov	r0, r4
 8022e20:	f000 fb4b 	bl	80234ba <__multadd>
 8022e24:	9001      	str	r0, [sp, #4]
 8022e26:	e7ea      	b.n	8022dfe <_dtoa_r+0xa66>
 8022e28:	0803ff93 	.word	0x0803ff93
 8022e2c:	0803fe01 	.word	0x0803fe01

08022e30 <__sflush_r>:
 8022e30:	898a      	ldrh	r2, [r1, #12]
 8022e32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022e36:	4605      	mov	r5, r0
 8022e38:	0710      	lsls	r0, r2, #28
 8022e3a:	460c      	mov	r4, r1
 8022e3c:	d458      	bmi.n	8022ef0 <__sflush_r+0xc0>
 8022e3e:	684b      	ldr	r3, [r1, #4]
 8022e40:	2b00      	cmp	r3, #0
 8022e42:	dc05      	bgt.n	8022e50 <__sflush_r+0x20>
 8022e44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8022e46:	2b00      	cmp	r3, #0
 8022e48:	dc02      	bgt.n	8022e50 <__sflush_r+0x20>
 8022e4a:	2000      	movs	r0, #0
 8022e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022e50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022e52:	2e00      	cmp	r6, #0
 8022e54:	d0f9      	beq.n	8022e4a <__sflush_r+0x1a>
 8022e56:	2300      	movs	r3, #0
 8022e58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8022e5c:	682f      	ldr	r7, [r5, #0]
 8022e5e:	6a21      	ldr	r1, [r4, #32]
 8022e60:	602b      	str	r3, [r5, #0]
 8022e62:	d032      	beq.n	8022eca <__sflush_r+0x9a>
 8022e64:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8022e66:	89a3      	ldrh	r3, [r4, #12]
 8022e68:	075a      	lsls	r2, r3, #29
 8022e6a:	d505      	bpl.n	8022e78 <__sflush_r+0x48>
 8022e6c:	6863      	ldr	r3, [r4, #4]
 8022e6e:	1ac0      	subs	r0, r0, r3
 8022e70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022e72:	b10b      	cbz	r3, 8022e78 <__sflush_r+0x48>
 8022e74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022e76:	1ac0      	subs	r0, r0, r3
 8022e78:	2300      	movs	r3, #0
 8022e7a:	4602      	mov	r2, r0
 8022e7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022e7e:	6a21      	ldr	r1, [r4, #32]
 8022e80:	4628      	mov	r0, r5
 8022e82:	47b0      	blx	r6
 8022e84:	1c43      	adds	r3, r0, #1
 8022e86:	89a3      	ldrh	r3, [r4, #12]
 8022e88:	d106      	bne.n	8022e98 <__sflush_r+0x68>
 8022e8a:	6829      	ldr	r1, [r5, #0]
 8022e8c:	291d      	cmp	r1, #29
 8022e8e:	d848      	bhi.n	8022f22 <__sflush_r+0xf2>
 8022e90:	4a29      	ldr	r2, [pc, #164]	; (8022f38 <__sflush_r+0x108>)
 8022e92:	40ca      	lsrs	r2, r1
 8022e94:	07d6      	lsls	r6, r2, #31
 8022e96:	d544      	bpl.n	8022f22 <__sflush_r+0xf2>
 8022e98:	2200      	movs	r2, #0
 8022e9a:	6062      	str	r2, [r4, #4]
 8022e9c:	04d9      	lsls	r1, r3, #19
 8022e9e:	6922      	ldr	r2, [r4, #16]
 8022ea0:	6022      	str	r2, [r4, #0]
 8022ea2:	d504      	bpl.n	8022eae <__sflush_r+0x7e>
 8022ea4:	1c42      	adds	r2, r0, #1
 8022ea6:	d101      	bne.n	8022eac <__sflush_r+0x7c>
 8022ea8:	682b      	ldr	r3, [r5, #0]
 8022eaa:	b903      	cbnz	r3, 8022eae <__sflush_r+0x7e>
 8022eac:	6560      	str	r0, [r4, #84]	; 0x54
 8022eae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022eb0:	602f      	str	r7, [r5, #0]
 8022eb2:	2900      	cmp	r1, #0
 8022eb4:	d0c9      	beq.n	8022e4a <__sflush_r+0x1a>
 8022eb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022eba:	4299      	cmp	r1, r3
 8022ebc:	d002      	beq.n	8022ec4 <__sflush_r+0x94>
 8022ebe:	4628      	mov	r0, r5
 8022ec0:	f7fd f89e 	bl	8020000 <_free_r>
 8022ec4:	2000      	movs	r0, #0
 8022ec6:	6360      	str	r0, [r4, #52]	; 0x34
 8022ec8:	e7c0      	b.n	8022e4c <__sflush_r+0x1c>
 8022eca:	2301      	movs	r3, #1
 8022ecc:	4628      	mov	r0, r5
 8022ece:	47b0      	blx	r6
 8022ed0:	1c41      	adds	r1, r0, #1
 8022ed2:	d1c8      	bne.n	8022e66 <__sflush_r+0x36>
 8022ed4:	682b      	ldr	r3, [r5, #0]
 8022ed6:	2b00      	cmp	r3, #0
 8022ed8:	d0c5      	beq.n	8022e66 <__sflush_r+0x36>
 8022eda:	2b1d      	cmp	r3, #29
 8022edc:	d001      	beq.n	8022ee2 <__sflush_r+0xb2>
 8022ede:	2b16      	cmp	r3, #22
 8022ee0:	d101      	bne.n	8022ee6 <__sflush_r+0xb6>
 8022ee2:	602f      	str	r7, [r5, #0]
 8022ee4:	e7b1      	b.n	8022e4a <__sflush_r+0x1a>
 8022ee6:	89a3      	ldrh	r3, [r4, #12]
 8022ee8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022eec:	81a3      	strh	r3, [r4, #12]
 8022eee:	e7ad      	b.n	8022e4c <__sflush_r+0x1c>
 8022ef0:	690f      	ldr	r7, [r1, #16]
 8022ef2:	2f00      	cmp	r7, #0
 8022ef4:	d0a9      	beq.n	8022e4a <__sflush_r+0x1a>
 8022ef6:	0793      	lsls	r3, r2, #30
 8022ef8:	680e      	ldr	r6, [r1, #0]
 8022efa:	bf08      	it	eq
 8022efc:	694b      	ldreq	r3, [r1, #20]
 8022efe:	600f      	str	r7, [r1, #0]
 8022f00:	bf18      	it	ne
 8022f02:	2300      	movne	r3, #0
 8022f04:	eba6 0807 	sub.w	r8, r6, r7
 8022f08:	608b      	str	r3, [r1, #8]
 8022f0a:	f1b8 0f00 	cmp.w	r8, #0
 8022f0e:	dd9c      	ble.n	8022e4a <__sflush_r+0x1a>
 8022f10:	4643      	mov	r3, r8
 8022f12:	463a      	mov	r2, r7
 8022f14:	6a21      	ldr	r1, [r4, #32]
 8022f16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8022f18:	4628      	mov	r0, r5
 8022f1a:	47b0      	blx	r6
 8022f1c:	2800      	cmp	r0, #0
 8022f1e:	dc06      	bgt.n	8022f2e <__sflush_r+0xfe>
 8022f20:	89a3      	ldrh	r3, [r4, #12]
 8022f22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022f26:	81a3      	strh	r3, [r4, #12]
 8022f28:	f04f 30ff 	mov.w	r0, #4294967295
 8022f2c:	e78e      	b.n	8022e4c <__sflush_r+0x1c>
 8022f2e:	4407      	add	r7, r0
 8022f30:	eba8 0800 	sub.w	r8, r8, r0
 8022f34:	e7e9      	b.n	8022f0a <__sflush_r+0xda>
 8022f36:	bf00      	nop
 8022f38:	20400001 	.word	0x20400001

08022f3c <_fflush_r>:
 8022f3c:	b538      	push	{r3, r4, r5, lr}
 8022f3e:	690b      	ldr	r3, [r1, #16]
 8022f40:	4605      	mov	r5, r0
 8022f42:	460c      	mov	r4, r1
 8022f44:	b1db      	cbz	r3, 8022f7e <_fflush_r+0x42>
 8022f46:	b118      	cbz	r0, 8022f50 <_fflush_r+0x14>
 8022f48:	6983      	ldr	r3, [r0, #24]
 8022f4a:	b90b      	cbnz	r3, 8022f50 <_fflush_r+0x14>
 8022f4c:	f000 f860 	bl	8023010 <__sinit>
 8022f50:	4b0c      	ldr	r3, [pc, #48]	; (8022f84 <_fflush_r+0x48>)
 8022f52:	429c      	cmp	r4, r3
 8022f54:	d109      	bne.n	8022f6a <_fflush_r+0x2e>
 8022f56:	686c      	ldr	r4, [r5, #4]
 8022f58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022f5c:	b17b      	cbz	r3, 8022f7e <_fflush_r+0x42>
 8022f5e:	4621      	mov	r1, r4
 8022f60:	4628      	mov	r0, r5
 8022f62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022f66:	f7ff bf63 	b.w	8022e30 <__sflush_r>
 8022f6a:	4b07      	ldr	r3, [pc, #28]	; (8022f88 <_fflush_r+0x4c>)
 8022f6c:	429c      	cmp	r4, r3
 8022f6e:	d101      	bne.n	8022f74 <_fflush_r+0x38>
 8022f70:	68ac      	ldr	r4, [r5, #8]
 8022f72:	e7f1      	b.n	8022f58 <_fflush_r+0x1c>
 8022f74:	4b05      	ldr	r3, [pc, #20]	; (8022f8c <_fflush_r+0x50>)
 8022f76:	429c      	cmp	r4, r3
 8022f78:	bf08      	it	eq
 8022f7a:	68ec      	ldreq	r4, [r5, #12]
 8022f7c:	e7ec      	b.n	8022f58 <_fflush_r+0x1c>
 8022f7e:	2000      	movs	r0, #0
 8022f80:	bd38      	pop	{r3, r4, r5, pc}
 8022f82:	bf00      	nop
 8022f84:	0803fe30 	.word	0x0803fe30
 8022f88:	0803fe50 	.word	0x0803fe50
 8022f8c:	0803fe10 	.word	0x0803fe10

08022f90 <std>:
 8022f90:	2300      	movs	r3, #0
 8022f92:	b510      	push	{r4, lr}
 8022f94:	4604      	mov	r4, r0
 8022f96:	e9c0 3300 	strd	r3, r3, [r0]
 8022f9a:	6083      	str	r3, [r0, #8]
 8022f9c:	8181      	strh	r1, [r0, #12]
 8022f9e:	6643      	str	r3, [r0, #100]	; 0x64
 8022fa0:	81c2      	strh	r2, [r0, #14]
 8022fa2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8022fa6:	6183      	str	r3, [r0, #24]
 8022fa8:	4619      	mov	r1, r3
 8022faa:	2208      	movs	r2, #8
 8022fac:	305c      	adds	r0, #92	; 0x5c
 8022fae:	f7fc fd8a 	bl	801fac6 <memset>
 8022fb2:	4b05      	ldr	r3, [pc, #20]	; (8022fc8 <std+0x38>)
 8022fb4:	6263      	str	r3, [r4, #36]	; 0x24
 8022fb6:	4b05      	ldr	r3, [pc, #20]	; (8022fcc <std+0x3c>)
 8022fb8:	62a3      	str	r3, [r4, #40]	; 0x28
 8022fba:	4b05      	ldr	r3, [pc, #20]	; (8022fd0 <std+0x40>)
 8022fbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8022fbe:	4b05      	ldr	r3, [pc, #20]	; (8022fd4 <std+0x44>)
 8022fc0:	6224      	str	r4, [r4, #32]
 8022fc2:	6323      	str	r3, [r4, #48]	; 0x30
 8022fc4:	bd10      	pop	{r4, pc}
 8022fc6:	bf00      	nop
 8022fc8:	08020d0d 	.word	0x08020d0d
 8022fcc:	08020d33 	.word	0x08020d33
 8022fd0:	08020d6b 	.word	0x08020d6b
 8022fd4:	08020d8f 	.word	0x08020d8f

08022fd8 <_cleanup_r>:
 8022fd8:	4901      	ldr	r1, [pc, #4]	; (8022fe0 <_cleanup_r+0x8>)
 8022fda:	f000 b885 	b.w	80230e8 <_fwalk_reent>
 8022fde:	bf00      	nop
 8022fe0:	08022f3d 	.word	0x08022f3d

08022fe4 <__sfmoreglue>:
 8022fe4:	b570      	push	{r4, r5, r6, lr}
 8022fe6:	1e4a      	subs	r2, r1, #1
 8022fe8:	2568      	movs	r5, #104	; 0x68
 8022fea:	4355      	muls	r5, r2
 8022fec:	460e      	mov	r6, r1
 8022fee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8022ff2:	f7fd f853 	bl	802009c <_malloc_r>
 8022ff6:	4604      	mov	r4, r0
 8022ff8:	b140      	cbz	r0, 802300c <__sfmoreglue+0x28>
 8022ffa:	2100      	movs	r1, #0
 8022ffc:	e9c0 1600 	strd	r1, r6, [r0]
 8023000:	300c      	adds	r0, #12
 8023002:	60a0      	str	r0, [r4, #8]
 8023004:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8023008:	f7fc fd5d 	bl	801fac6 <memset>
 802300c:	4620      	mov	r0, r4
 802300e:	bd70      	pop	{r4, r5, r6, pc}

08023010 <__sinit>:
 8023010:	6983      	ldr	r3, [r0, #24]
 8023012:	b510      	push	{r4, lr}
 8023014:	4604      	mov	r4, r0
 8023016:	bb33      	cbnz	r3, 8023066 <__sinit+0x56>
 8023018:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 802301c:	6503      	str	r3, [r0, #80]	; 0x50
 802301e:	4b12      	ldr	r3, [pc, #72]	; (8023068 <__sinit+0x58>)
 8023020:	4a12      	ldr	r2, [pc, #72]	; (802306c <__sinit+0x5c>)
 8023022:	681b      	ldr	r3, [r3, #0]
 8023024:	6282      	str	r2, [r0, #40]	; 0x28
 8023026:	4298      	cmp	r0, r3
 8023028:	bf04      	itt	eq
 802302a:	2301      	moveq	r3, #1
 802302c:	6183      	streq	r3, [r0, #24]
 802302e:	f000 f81f 	bl	8023070 <__sfp>
 8023032:	6060      	str	r0, [r4, #4]
 8023034:	4620      	mov	r0, r4
 8023036:	f000 f81b 	bl	8023070 <__sfp>
 802303a:	60a0      	str	r0, [r4, #8]
 802303c:	4620      	mov	r0, r4
 802303e:	f000 f817 	bl	8023070 <__sfp>
 8023042:	2200      	movs	r2, #0
 8023044:	60e0      	str	r0, [r4, #12]
 8023046:	2104      	movs	r1, #4
 8023048:	6860      	ldr	r0, [r4, #4]
 802304a:	f7ff ffa1 	bl	8022f90 <std>
 802304e:	2201      	movs	r2, #1
 8023050:	2109      	movs	r1, #9
 8023052:	68a0      	ldr	r0, [r4, #8]
 8023054:	f7ff ff9c 	bl	8022f90 <std>
 8023058:	2202      	movs	r2, #2
 802305a:	2112      	movs	r1, #18
 802305c:	68e0      	ldr	r0, [r4, #12]
 802305e:	f7ff ff97 	bl	8022f90 <std>
 8023062:	2301      	movs	r3, #1
 8023064:	61a3      	str	r3, [r4, #24]
 8023066:	bd10      	pop	{r4, pc}
 8023068:	0803f8e8 	.word	0x0803f8e8
 802306c:	08022fd9 	.word	0x08022fd9

08023070 <__sfp>:
 8023070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023072:	4b1b      	ldr	r3, [pc, #108]	; (80230e0 <__sfp+0x70>)
 8023074:	681e      	ldr	r6, [r3, #0]
 8023076:	69b3      	ldr	r3, [r6, #24]
 8023078:	4607      	mov	r7, r0
 802307a:	b913      	cbnz	r3, 8023082 <__sfp+0x12>
 802307c:	4630      	mov	r0, r6
 802307e:	f7ff ffc7 	bl	8023010 <__sinit>
 8023082:	3648      	adds	r6, #72	; 0x48
 8023084:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8023088:	3b01      	subs	r3, #1
 802308a:	d503      	bpl.n	8023094 <__sfp+0x24>
 802308c:	6833      	ldr	r3, [r6, #0]
 802308e:	b133      	cbz	r3, 802309e <__sfp+0x2e>
 8023090:	6836      	ldr	r6, [r6, #0]
 8023092:	e7f7      	b.n	8023084 <__sfp+0x14>
 8023094:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8023098:	b16d      	cbz	r5, 80230b6 <__sfp+0x46>
 802309a:	3468      	adds	r4, #104	; 0x68
 802309c:	e7f4      	b.n	8023088 <__sfp+0x18>
 802309e:	2104      	movs	r1, #4
 80230a0:	4638      	mov	r0, r7
 80230a2:	f7ff ff9f 	bl	8022fe4 <__sfmoreglue>
 80230a6:	6030      	str	r0, [r6, #0]
 80230a8:	2800      	cmp	r0, #0
 80230aa:	d1f1      	bne.n	8023090 <__sfp+0x20>
 80230ac:	230c      	movs	r3, #12
 80230ae:	603b      	str	r3, [r7, #0]
 80230b0:	4604      	mov	r4, r0
 80230b2:	4620      	mov	r0, r4
 80230b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80230b6:	4b0b      	ldr	r3, [pc, #44]	; (80230e4 <__sfp+0x74>)
 80230b8:	6665      	str	r5, [r4, #100]	; 0x64
 80230ba:	e9c4 5500 	strd	r5, r5, [r4]
 80230be:	60a5      	str	r5, [r4, #8]
 80230c0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80230c4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80230c8:	2208      	movs	r2, #8
 80230ca:	4629      	mov	r1, r5
 80230cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80230d0:	f7fc fcf9 	bl	801fac6 <memset>
 80230d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80230d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80230dc:	e7e9      	b.n	80230b2 <__sfp+0x42>
 80230de:	bf00      	nop
 80230e0:	0803f8e8 	.word	0x0803f8e8
 80230e4:	ffff0001 	.word	0xffff0001

080230e8 <_fwalk_reent>:
 80230e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80230ec:	4680      	mov	r8, r0
 80230ee:	4689      	mov	r9, r1
 80230f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80230f4:	2600      	movs	r6, #0
 80230f6:	b914      	cbnz	r4, 80230fe <_fwalk_reent+0x16>
 80230f8:	4630      	mov	r0, r6
 80230fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80230fe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8023102:	3f01      	subs	r7, #1
 8023104:	d501      	bpl.n	802310a <_fwalk_reent+0x22>
 8023106:	6824      	ldr	r4, [r4, #0]
 8023108:	e7f5      	b.n	80230f6 <_fwalk_reent+0xe>
 802310a:	89ab      	ldrh	r3, [r5, #12]
 802310c:	2b01      	cmp	r3, #1
 802310e:	d907      	bls.n	8023120 <_fwalk_reent+0x38>
 8023110:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8023114:	3301      	adds	r3, #1
 8023116:	d003      	beq.n	8023120 <_fwalk_reent+0x38>
 8023118:	4629      	mov	r1, r5
 802311a:	4640      	mov	r0, r8
 802311c:	47c8      	blx	r9
 802311e:	4306      	orrs	r6, r0
 8023120:	3568      	adds	r5, #104	; 0x68
 8023122:	e7ee      	b.n	8023102 <_fwalk_reent+0x1a>

08023124 <_findenv_r>:
 8023124:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023128:	4607      	mov	r7, r0
 802312a:	468b      	mov	fp, r1
 802312c:	4690      	mov	r8, r2
 802312e:	f001 fad1 	bl	80246d4 <__env_lock>
 8023132:	4b19      	ldr	r3, [pc, #100]	; (8023198 <_findenv_r+0x74>)
 8023134:	681d      	ldr	r5, [r3, #0]
 8023136:	469a      	mov	sl, r3
 8023138:	b13d      	cbz	r5, 802314a <_findenv_r+0x26>
 802313a:	465c      	mov	r4, fp
 802313c:	4623      	mov	r3, r4
 802313e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023142:	b32a      	cbz	r2, 8023190 <_findenv_r+0x6c>
 8023144:	2a3d      	cmp	r2, #61	; 0x3d
 8023146:	461c      	mov	r4, r3
 8023148:	d1f8      	bne.n	802313c <_findenv_r+0x18>
 802314a:	4638      	mov	r0, r7
 802314c:	f001 fac3 	bl	80246d6 <__env_unlock>
 8023150:	2000      	movs	r0, #0
 8023152:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023156:	464d      	mov	r5, r9
 8023158:	46a9      	mov	r9, r5
 802315a:	f859 0b04 	ldr.w	r0, [r9], #4
 802315e:	2800      	cmp	r0, #0
 8023160:	d0f3      	beq.n	802314a <_findenv_r+0x26>
 8023162:	4622      	mov	r2, r4
 8023164:	4659      	mov	r1, fp
 8023166:	f7fe fbab 	bl	80218c0 <strncmp>
 802316a:	2800      	cmp	r0, #0
 802316c:	d1f3      	bne.n	8023156 <_findenv_r+0x32>
 802316e:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8023172:	191e      	adds	r6, r3, r4
 8023174:	5d1b      	ldrb	r3, [r3, r4]
 8023176:	2b3d      	cmp	r3, #61	; 0x3d
 8023178:	d1ed      	bne.n	8023156 <_findenv_r+0x32>
 802317a:	f8da 3000 	ldr.w	r3, [sl]
 802317e:	1aed      	subs	r5, r5, r3
 8023180:	10ad      	asrs	r5, r5, #2
 8023182:	4638      	mov	r0, r7
 8023184:	f8c8 5000 	str.w	r5, [r8]
 8023188:	f001 faa5 	bl	80246d6 <__env_unlock>
 802318c:	1c70      	adds	r0, r6, #1
 802318e:	e7e0      	b.n	8023152 <_findenv_r+0x2e>
 8023190:	eba4 040b 	sub.w	r4, r4, fp
 8023194:	e7e0      	b.n	8023158 <_findenv_r+0x34>
 8023196:	bf00      	nop
 8023198:	20000240 	.word	0x20000240

0802319c <_getenv_r>:
 802319c:	b507      	push	{r0, r1, r2, lr}
 802319e:	aa01      	add	r2, sp, #4
 80231a0:	f7ff ffc0 	bl	8023124 <_findenv_r>
 80231a4:	b003      	add	sp, #12
 80231a6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080231ac <__gettzinfo>:
 80231ac:	4800      	ldr	r0, [pc, #0]	; (80231b0 <__gettzinfo+0x4>)
 80231ae:	4770      	bx	lr
 80231b0:	20000628 	.word	0x20000628

080231b4 <gmtime_r>:
 80231b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80231b8:	e9d0 8900 	ldrd	r8, r9, [r0]
 80231bc:	460c      	mov	r4, r1
 80231be:	4a50      	ldr	r2, [pc, #320]	; (8023300 <gmtime_r+0x14c>)
 80231c0:	2300      	movs	r3, #0
 80231c2:	4640      	mov	r0, r8
 80231c4:	4649      	mov	r1, r9
 80231c6:	f7dd f8a3 	bl	8000310 <__aeabi_ldivmod>
 80231ca:	4a4d      	ldr	r2, [pc, #308]	; (8023300 <gmtime_r+0x14c>)
 80231cc:	f500 262f 	add.w	r6, r0, #716800	; 0xaf000
 80231d0:	2300      	movs	r3, #0
 80231d2:	4640      	mov	r0, r8
 80231d4:	4649      	mov	r1, r9
 80231d6:	f7dd f89b 	bl	8000310 <__aeabi_ldivmod>
 80231da:	2a00      	cmp	r2, #0
 80231dc:	bfbc      	itt	lt
 80231de:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80231e2:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80231e6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80231ea:	fb92 f3f1 	sdiv	r3, r2, r1
 80231ee:	fb01 2213 	mls	r2, r1, r3, r2
 80231f2:	f04f 013c 	mov.w	r1, #60	; 0x3c
 80231f6:	f606 256c 	addw	r5, r6, #2668	; 0xa6c
 80231fa:	60a3      	str	r3, [r4, #8]
 80231fc:	bfb8      	it	lt
 80231fe:	f606 256b 	addwlt	r5, r6, #2667	; 0xa6b
 8023202:	fb92 f3f1 	sdiv	r3, r2, r1
 8023206:	fb01 2213 	mls	r2, r1, r3, r2
 802320a:	6063      	str	r3, [r4, #4]
 802320c:	6022      	str	r2, [r4, #0]
 802320e:	1ceb      	adds	r3, r5, #3
 8023210:	2207      	movs	r2, #7
 8023212:	fb93 f2f2 	sdiv	r2, r3, r2
 8023216:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 802321a:	1a9b      	subs	r3, r3, r2
 802321c:	bf48      	it	mi
 802321e:	3307      	addmi	r3, #7
 8023220:	2d00      	cmp	r5, #0
 8023222:	61a3      	str	r3, [r4, #24]
 8023224:	bfb8      	it	lt
 8023226:	f5a5 330e 	sublt.w	r3, r5, #145408	; 0x23800
 802322a:	4836      	ldr	r0, [pc, #216]	; (8023304 <gmtime_r+0x150>)
 802322c:	bfae      	itee	ge
 802322e:	fb95 f0f0 	sdivge	r0, r5, r0
 8023232:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8023236:	fb93 f0f0 	sdivlt	r0, r3, r0
 802323a:	4b33      	ldr	r3, [pc, #204]	; (8023308 <gmtime_r+0x154>)
 802323c:	fb03 5300 	mla	r3, r3, r0, r5
 8023240:	f648 61ac 	movw	r1, #36524	; 0x8eac
 8023244:	fbb3 f1f1 	udiv	r1, r3, r1
 8023248:	4419      	add	r1, r3
 802324a:	f240 57b4 	movw	r7, #1460	; 0x5b4
 802324e:	fbb3 f2f7 	udiv	r2, r3, r7
 8023252:	1a89      	subs	r1, r1, r2
 8023254:	4a2d      	ldr	r2, [pc, #180]	; (802330c <gmtime_r+0x158>)
 8023256:	fbb3 f2f2 	udiv	r2, r3, r2
 802325a:	1a8a      	subs	r2, r1, r2
 802325c:	f648 6194 	movw	r1, #36500	; 0x8e94
 8023260:	fbb2 f1f1 	udiv	r1, r2, r1
 8023264:	440b      	add	r3, r1
 8023266:	f240 166d 	movw	r6, #365	; 0x16d
 802326a:	fbb2 f5f6 	udiv	r5, r2, r6
 802326e:	fbb2 f2f7 	udiv	r2, r2, r7
 8023272:	1a9a      	subs	r2, r3, r2
 8023274:	fb06 2315 	mls	r3, r6, r5, r2
 8023278:	2199      	movs	r1, #153	; 0x99
 802327a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 802327e:	1c5e      	adds	r6, r3, #1
 8023280:	3202      	adds	r2, #2
 8023282:	fbb2 f2f1 	udiv	r2, r2, r1
 8023286:	2a0a      	cmp	r2, #10
 8023288:	fb01 f102 	mul.w	r1, r1, r2
 802328c:	f101 0102 	add.w	r1, r1, #2
 8023290:	f04f 0705 	mov.w	r7, #5
 8023294:	fbb1 f1f7 	udiv	r1, r1, r7
 8023298:	eba6 0101 	sub.w	r1, r6, r1
 802329c:	bf34      	ite	cc
 802329e:	2602      	movcc	r6, #2
 80232a0:	f06f 0609 	mvncs.w	r6, #9
 80232a4:	4416      	add	r6, r2
 80232a6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80232aa:	fb02 5000 	mla	r0, r2, r0, r5
 80232ae:	2e01      	cmp	r6, #1
 80232b0:	bf98      	it	ls
 80232b2:	3001      	addls	r0, #1
 80232b4:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80232b8:	d30c      	bcc.n	80232d4 <gmtime_r+0x120>
 80232ba:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80232be:	61e3      	str	r3, [r4, #28]
 80232c0:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
 80232c4:	2300      	movs	r3, #0
 80232c6:	e9c4 6004 	strd	r6, r0, [r4, #16]
 80232ca:	60e1      	str	r1, [r4, #12]
 80232cc:	6223      	str	r3, [r4, #32]
 80232ce:	4620      	mov	r0, r4
 80232d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80232d4:	07aa      	lsls	r2, r5, #30
 80232d6:	d105      	bne.n	80232e4 <gmtime_r+0x130>
 80232d8:	2764      	movs	r7, #100	; 0x64
 80232da:	fbb5 f2f7 	udiv	r2, r5, r7
 80232de:	fb07 5212 	mls	r2, r7, r2, r5
 80232e2:	b95a      	cbnz	r2, 80232fc <gmtime_r+0x148>
 80232e4:	f44f 77c8 	mov.w	r7, #400	; 0x190
 80232e8:	fbb5 f2f7 	udiv	r2, r5, r7
 80232ec:	fb07 5212 	mls	r2, r7, r2, r5
 80232f0:	fab2 f282 	clz	r2, r2
 80232f4:	0952      	lsrs	r2, r2, #5
 80232f6:	333b      	adds	r3, #59	; 0x3b
 80232f8:	4413      	add	r3, r2
 80232fa:	e7e0      	b.n	80232be <gmtime_r+0x10a>
 80232fc:	2201      	movs	r2, #1
 80232fe:	e7fa      	b.n	80232f6 <gmtime_r+0x142>
 8023300:	00015180 	.word	0x00015180
 8023304:	00023ab1 	.word	0x00023ab1
 8023308:	fffdc54f 	.word	0xfffdc54f
 802330c:	00023ab0 	.word	0x00023ab0

08023310 <labs>:
 8023310:	2800      	cmp	r0, #0
 8023312:	bfb8      	it	lt
 8023314:	4240      	neglt	r0, r0
 8023316:	4770      	bx	lr

08023318 <_localeconv_r>:
 8023318:	4b04      	ldr	r3, [pc, #16]	; (802332c <_localeconv_r+0x14>)
 802331a:	681b      	ldr	r3, [r3, #0]
 802331c:	6a18      	ldr	r0, [r3, #32]
 802331e:	4b04      	ldr	r3, [pc, #16]	; (8023330 <_localeconv_r+0x18>)
 8023320:	2800      	cmp	r0, #0
 8023322:	bf08      	it	eq
 8023324:	4618      	moveq	r0, r3
 8023326:	30f0      	adds	r0, #240	; 0xf0
 8023328:	4770      	bx	lr
 802332a:	bf00      	nop
 802332c:	20000450 	.word	0x20000450
 8023330:	200004b4 	.word	0x200004b4

08023334 <_lseek_r>:
 8023334:	b538      	push	{r3, r4, r5, lr}
 8023336:	4c07      	ldr	r4, [pc, #28]	; (8023354 <_lseek_r+0x20>)
 8023338:	4605      	mov	r5, r0
 802333a:	4608      	mov	r0, r1
 802333c:	4611      	mov	r1, r2
 802333e:	2200      	movs	r2, #0
 8023340:	6022      	str	r2, [r4, #0]
 8023342:	461a      	mov	r2, r3
 8023344:	f7e1 fb14 	bl	8004970 <_lseek>
 8023348:	1c43      	adds	r3, r0, #1
 802334a:	d102      	bne.n	8023352 <_lseek_r+0x1e>
 802334c:	6823      	ldr	r3, [r4, #0]
 802334e:	b103      	cbz	r3, 8023352 <_lseek_r+0x1e>
 8023350:	602b      	str	r3, [r5, #0]
 8023352:	bd38      	pop	{r3, r4, r5, pc}
 8023354:	200362c0 	.word	0x200362c0

08023358 <__swhatbuf_r>:
 8023358:	b570      	push	{r4, r5, r6, lr}
 802335a:	460e      	mov	r6, r1
 802335c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023360:	2900      	cmp	r1, #0
 8023362:	b096      	sub	sp, #88	; 0x58
 8023364:	4614      	mov	r4, r2
 8023366:	461d      	mov	r5, r3
 8023368:	da07      	bge.n	802337a <__swhatbuf_r+0x22>
 802336a:	2300      	movs	r3, #0
 802336c:	602b      	str	r3, [r5, #0]
 802336e:	89b3      	ldrh	r3, [r6, #12]
 8023370:	061a      	lsls	r2, r3, #24
 8023372:	d410      	bmi.n	8023396 <__swhatbuf_r+0x3e>
 8023374:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8023378:	e00e      	b.n	8023398 <__swhatbuf_r+0x40>
 802337a:	466a      	mov	r2, sp
 802337c:	f001 f9ac 	bl	80246d8 <_fstat_r>
 8023380:	2800      	cmp	r0, #0
 8023382:	dbf2      	blt.n	802336a <__swhatbuf_r+0x12>
 8023384:	9a01      	ldr	r2, [sp, #4]
 8023386:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802338a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802338e:	425a      	negs	r2, r3
 8023390:	415a      	adcs	r2, r3
 8023392:	602a      	str	r2, [r5, #0]
 8023394:	e7ee      	b.n	8023374 <__swhatbuf_r+0x1c>
 8023396:	2340      	movs	r3, #64	; 0x40
 8023398:	2000      	movs	r0, #0
 802339a:	6023      	str	r3, [r4, #0]
 802339c:	b016      	add	sp, #88	; 0x58
 802339e:	bd70      	pop	{r4, r5, r6, pc}

080233a0 <__smakebuf_r>:
 80233a0:	898b      	ldrh	r3, [r1, #12]
 80233a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80233a4:	079d      	lsls	r5, r3, #30
 80233a6:	4606      	mov	r6, r0
 80233a8:	460c      	mov	r4, r1
 80233aa:	d507      	bpl.n	80233bc <__smakebuf_r+0x1c>
 80233ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80233b0:	6023      	str	r3, [r4, #0]
 80233b2:	6123      	str	r3, [r4, #16]
 80233b4:	2301      	movs	r3, #1
 80233b6:	6163      	str	r3, [r4, #20]
 80233b8:	b002      	add	sp, #8
 80233ba:	bd70      	pop	{r4, r5, r6, pc}
 80233bc:	ab01      	add	r3, sp, #4
 80233be:	466a      	mov	r2, sp
 80233c0:	f7ff ffca 	bl	8023358 <__swhatbuf_r>
 80233c4:	9900      	ldr	r1, [sp, #0]
 80233c6:	4605      	mov	r5, r0
 80233c8:	4630      	mov	r0, r6
 80233ca:	f7fc fe67 	bl	802009c <_malloc_r>
 80233ce:	b948      	cbnz	r0, 80233e4 <__smakebuf_r+0x44>
 80233d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80233d4:	059a      	lsls	r2, r3, #22
 80233d6:	d4ef      	bmi.n	80233b8 <__smakebuf_r+0x18>
 80233d8:	f023 0303 	bic.w	r3, r3, #3
 80233dc:	f043 0302 	orr.w	r3, r3, #2
 80233e0:	81a3      	strh	r3, [r4, #12]
 80233e2:	e7e3      	b.n	80233ac <__smakebuf_r+0xc>
 80233e4:	4b0d      	ldr	r3, [pc, #52]	; (802341c <__smakebuf_r+0x7c>)
 80233e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80233e8:	89a3      	ldrh	r3, [r4, #12]
 80233ea:	6020      	str	r0, [r4, #0]
 80233ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80233f0:	81a3      	strh	r3, [r4, #12]
 80233f2:	9b00      	ldr	r3, [sp, #0]
 80233f4:	6163      	str	r3, [r4, #20]
 80233f6:	9b01      	ldr	r3, [sp, #4]
 80233f8:	6120      	str	r0, [r4, #16]
 80233fa:	b15b      	cbz	r3, 8023414 <__smakebuf_r+0x74>
 80233fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023400:	4630      	mov	r0, r6
 8023402:	f001 f97b 	bl	80246fc <_isatty_r>
 8023406:	b128      	cbz	r0, 8023414 <__smakebuf_r+0x74>
 8023408:	89a3      	ldrh	r3, [r4, #12]
 802340a:	f023 0303 	bic.w	r3, r3, #3
 802340e:	f043 0301 	orr.w	r3, r3, #1
 8023412:	81a3      	strh	r3, [r4, #12]
 8023414:	89a3      	ldrh	r3, [r4, #12]
 8023416:	431d      	orrs	r5, r3
 8023418:	81a5      	strh	r5, [r4, #12]
 802341a:	e7cd      	b.n	80233b8 <__smakebuf_r+0x18>
 802341c:	08022fd9 	.word	0x08022fd9

08023420 <__malloc_lock>:
 8023420:	4770      	bx	lr

08023422 <__malloc_unlock>:
 8023422:	4770      	bx	lr

08023424 <_Balloc>:
 8023424:	b570      	push	{r4, r5, r6, lr}
 8023426:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8023428:	4604      	mov	r4, r0
 802342a:	460e      	mov	r6, r1
 802342c:	b93d      	cbnz	r5, 802343e <_Balloc+0x1a>
 802342e:	2010      	movs	r0, #16
 8023430:	f7fc faf4 	bl	801fa1c <malloc>
 8023434:	6260      	str	r0, [r4, #36]	; 0x24
 8023436:	e9c0 5501 	strd	r5, r5, [r0, #4]
 802343a:	6005      	str	r5, [r0, #0]
 802343c:	60c5      	str	r5, [r0, #12]
 802343e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8023440:	68eb      	ldr	r3, [r5, #12]
 8023442:	b183      	cbz	r3, 8023466 <_Balloc+0x42>
 8023444:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023446:	68db      	ldr	r3, [r3, #12]
 8023448:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 802344c:	b9b8      	cbnz	r0, 802347e <_Balloc+0x5a>
 802344e:	2101      	movs	r1, #1
 8023450:	fa01 f506 	lsl.w	r5, r1, r6
 8023454:	1d6a      	adds	r2, r5, #5
 8023456:	0092      	lsls	r2, r2, #2
 8023458:	4620      	mov	r0, r4
 802345a:	f000 fabf 	bl	80239dc <_calloc_r>
 802345e:	b160      	cbz	r0, 802347a <_Balloc+0x56>
 8023460:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8023464:	e00e      	b.n	8023484 <_Balloc+0x60>
 8023466:	2221      	movs	r2, #33	; 0x21
 8023468:	2104      	movs	r1, #4
 802346a:	4620      	mov	r0, r4
 802346c:	f000 fab6 	bl	80239dc <_calloc_r>
 8023470:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023472:	60e8      	str	r0, [r5, #12]
 8023474:	68db      	ldr	r3, [r3, #12]
 8023476:	2b00      	cmp	r3, #0
 8023478:	d1e4      	bne.n	8023444 <_Balloc+0x20>
 802347a:	2000      	movs	r0, #0
 802347c:	bd70      	pop	{r4, r5, r6, pc}
 802347e:	6802      	ldr	r2, [r0, #0]
 8023480:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8023484:	2300      	movs	r3, #0
 8023486:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802348a:	e7f7      	b.n	802347c <_Balloc+0x58>

0802348c <_Bfree>:
 802348c:	b570      	push	{r4, r5, r6, lr}
 802348e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8023490:	4606      	mov	r6, r0
 8023492:	460d      	mov	r5, r1
 8023494:	b93c      	cbnz	r4, 80234a6 <_Bfree+0x1a>
 8023496:	2010      	movs	r0, #16
 8023498:	f7fc fac0 	bl	801fa1c <malloc>
 802349c:	6270      	str	r0, [r6, #36]	; 0x24
 802349e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80234a2:	6004      	str	r4, [r0, #0]
 80234a4:	60c4      	str	r4, [r0, #12]
 80234a6:	b13d      	cbz	r5, 80234b8 <_Bfree+0x2c>
 80234a8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80234aa:	686a      	ldr	r2, [r5, #4]
 80234ac:	68db      	ldr	r3, [r3, #12]
 80234ae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80234b2:	6029      	str	r1, [r5, #0]
 80234b4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80234b8:	bd70      	pop	{r4, r5, r6, pc}

080234ba <__multadd>:
 80234ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80234be:	690d      	ldr	r5, [r1, #16]
 80234c0:	461f      	mov	r7, r3
 80234c2:	4606      	mov	r6, r0
 80234c4:	460c      	mov	r4, r1
 80234c6:	f101 0c14 	add.w	ip, r1, #20
 80234ca:	2300      	movs	r3, #0
 80234cc:	f8dc 0000 	ldr.w	r0, [ip]
 80234d0:	b281      	uxth	r1, r0
 80234d2:	fb02 7101 	mla	r1, r2, r1, r7
 80234d6:	0c0f      	lsrs	r7, r1, #16
 80234d8:	0c00      	lsrs	r0, r0, #16
 80234da:	fb02 7000 	mla	r0, r2, r0, r7
 80234de:	b289      	uxth	r1, r1
 80234e0:	3301      	adds	r3, #1
 80234e2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80234e6:	429d      	cmp	r5, r3
 80234e8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80234ec:	f84c 1b04 	str.w	r1, [ip], #4
 80234f0:	dcec      	bgt.n	80234cc <__multadd+0x12>
 80234f2:	b1d7      	cbz	r7, 802352a <__multadd+0x70>
 80234f4:	68a3      	ldr	r3, [r4, #8]
 80234f6:	42ab      	cmp	r3, r5
 80234f8:	dc12      	bgt.n	8023520 <__multadd+0x66>
 80234fa:	6861      	ldr	r1, [r4, #4]
 80234fc:	4630      	mov	r0, r6
 80234fe:	3101      	adds	r1, #1
 8023500:	f7ff ff90 	bl	8023424 <_Balloc>
 8023504:	6922      	ldr	r2, [r4, #16]
 8023506:	3202      	adds	r2, #2
 8023508:	f104 010c 	add.w	r1, r4, #12
 802350c:	4680      	mov	r8, r0
 802350e:	0092      	lsls	r2, r2, #2
 8023510:	300c      	adds	r0, #12
 8023512:	f7fc fab4 	bl	801fa7e <memcpy>
 8023516:	4621      	mov	r1, r4
 8023518:	4630      	mov	r0, r6
 802351a:	f7ff ffb7 	bl	802348c <_Bfree>
 802351e:	4644      	mov	r4, r8
 8023520:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8023524:	3501      	adds	r5, #1
 8023526:	615f      	str	r7, [r3, #20]
 8023528:	6125      	str	r5, [r4, #16]
 802352a:	4620      	mov	r0, r4
 802352c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08023530 <__hi0bits>:
 8023530:	0c02      	lsrs	r2, r0, #16
 8023532:	0412      	lsls	r2, r2, #16
 8023534:	4603      	mov	r3, r0
 8023536:	b9b2      	cbnz	r2, 8023566 <__hi0bits+0x36>
 8023538:	0403      	lsls	r3, r0, #16
 802353a:	2010      	movs	r0, #16
 802353c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8023540:	bf04      	itt	eq
 8023542:	021b      	lsleq	r3, r3, #8
 8023544:	3008      	addeq	r0, #8
 8023546:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 802354a:	bf04      	itt	eq
 802354c:	011b      	lsleq	r3, r3, #4
 802354e:	3004      	addeq	r0, #4
 8023550:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8023554:	bf04      	itt	eq
 8023556:	009b      	lsleq	r3, r3, #2
 8023558:	3002      	addeq	r0, #2
 802355a:	2b00      	cmp	r3, #0
 802355c:	db06      	blt.n	802356c <__hi0bits+0x3c>
 802355e:	005b      	lsls	r3, r3, #1
 8023560:	d503      	bpl.n	802356a <__hi0bits+0x3a>
 8023562:	3001      	adds	r0, #1
 8023564:	4770      	bx	lr
 8023566:	2000      	movs	r0, #0
 8023568:	e7e8      	b.n	802353c <__hi0bits+0xc>
 802356a:	2020      	movs	r0, #32
 802356c:	4770      	bx	lr

0802356e <__lo0bits>:
 802356e:	6803      	ldr	r3, [r0, #0]
 8023570:	f013 0207 	ands.w	r2, r3, #7
 8023574:	4601      	mov	r1, r0
 8023576:	d00b      	beq.n	8023590 <__lo0bits+0x22>
 8023578:	07da      	lsls	r2, r3, #31
 802357a:	d423      	bmi.n	80235c4 <__lo0bits+0x56>
 802357c:	0798      	lsls	r0, r3, #30
 802357e:	bf49      	itett	mi
 8023580:	085b      	lsrmi	r3, r3, #1
 8023582:	089b      	lsrpl	r3, r3, #2
 8023584:	2001      	movmi	r0, #1
 8023586:	600b      	strmi	r3, [r1, #0]
 8023588:	bf5c      	itt	pl
 802358a:	600b      	strpl	r3, [r1, #0]
 802358c:	2002      	movpl	r0, #2
 802358e:	4770      	bx	lr
 8023590:	b298      	uxth	r0, r3
 8023592:	b9a8      	cbnz	r0, 80235c0 <__lo0bits+0x52>
 8023594:	0c1b      	lsrs	r3, r3, #16
 8023596:	2010      	movs	r0, #16
 8023598:	f013 0fff 	tst.w	r3, #255	; 0xff
 802359c:	bf04      	itt	eq
 802359e:	0a1b      	lsreq	r3, r3, #8
 80235a0:	3008      	addeq	r0, #8
 80235a2:	071a      	lsls	r2, r3, #28
 80235a4:	bf04      	itt	eq
 80235a6:	091b      	lsreq	r3, r3, #4
 80235a8:	3004      	addeq	r0, #4
 80235aa:	079a      	lsls	r2, r3, #30
 80235ac:	bf04      	itt	eq
 80235ae:	089b      	lsreq	r3, r3, #2
 80235b0:	3002      	addeq	r0, #2
 80235b2:	07da      	lsls	r2, r3, #31
 80235b4:	d402      	bmi.n	80235bc <__lo0bits+0x4e>
 80235b6:	085b      	lsrs	r3, r3, #1
 80235b8:	d006      	beq.n	80235c8 <__lo0bits+0x5a>
 80235ba:	3001      	adds	r0, #1
 80235bc:	600b      	str	r3, [r1, #0]
 80235be:	4770      	bx	lr
 80235c0:	4610      	mov	r0, r2
 80235c2:	e7e9      	b.n	8023598 <__lo0bits+0x2a>
 80235c4:	2000      	movs	r0, #0
 80235c6:	4770      	bx	lr
 80235c8:	2020      	movs	r0, #32
 80235ca:	4770      	bx	lr

080235cc <__i2b>:
 80235cc:	b510      	push	{r4, lr}
 80235ce:	460c      	mov	r4, r1
 80235d0:	2101      	movs	r1, #1
 80235d2:	f7ff ff27 	bl	8023424 <_Balloc>
 80235d6:	2201      	movs	r2, #1
 80235d8:	6144      	str	r4, [r0, #20]
 80235da:	6102      	str	r2, [r0, #16]
 80235dc:	bd10      	pop	{r4, pc}

080235de <__multiply>:
 80235de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80235e2:	4614      	mov	r4, r2
 80235e4:	690a      	ldr	r2, [r1, #16]
 80235e6:	6923      	ldr	r3, [r4, #16]
 80235e8:	429a      	cmp	r2, r3
 80235ea:	bfb8      	it	lt
 80235ec:	460b      	movlt	r3, r1
 80235ee:	4688      	mov	r8, r1
 80235f0:	bfbc      	itt	lt
 80235f2:	46a0      	movlt	r8, r4
 80235f4:	461c      	movlt	r4, r3
 80235f6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80235fa:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80235fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8023602:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8023606:	eb07 0609 	add.w	r6, r7, r9
 802360a:	42b3      	cmp	r3, r6
 802360c:	bfb8      	it	lt
 802360e:	3101      	addlt	r1, #1
 8023610:	f7ff ff08 	bl	8023424 <_Balloc>
 8023614:	f100 0514 	add.w	r5, r0, #20
 8023618:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 802361c:	462b      	mov	r3, r5
 802361e:	2200      	movs	r2, #0
 8023620:	4573      	cmp	r3, lr
 8023622:	d316      	bcc.n	8023652 <__multiply+0x74>
 8023624:	f104 0214 	add.w	r2, r4, #20
 8023628:	f108 0114 	add.w	r1, r8, #20
 802362c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8023630:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8023634:	9300      	str	r3, [sp, #0]
 8023636:	9b00      	ldr	r3, [sp, #0]
 8023638:	9201      	str	r2, [sp, #4]
 802363a:	4293      	cmp	r3, r2
 802363c:	d80c      	bhi.n	8023658 <__multiply+0x7a>
 802363e:	2e00      	cmp	r6, #0
 8023640:	dd03      	ble.n	802364a <__multiply+0x6c>
 8023642:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8023646:	2b00      	cmp	r3, #0
 8023648:	d05d      	beq.n	8023706 <__multiply+0x128>
 802364a:	6106      	str	r6, [r0, #16]
 802364c:	b003      	add	sp, #12
 802364e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023652:	f843 2b04 	str.w	r2, [r3], #4
 8023656:	e7e3      	b.n	8023620 <__multiply+0x42>
 8023658:	f8b2 b000 	ldrh.w	fp, [r2]
 802365c:	f1bb 0f00 	cmp.w	fp, #0
 8023660:	d023      	beq.n	80236aa <__multiply+0xcc>
 8023662:	4689      	mov	r9, r1
 8023664:	46ac      	mov	ip, r5
 8023666:	f04f 0800 	mov.w	r8, #0
 802366a:	f859 4b04 	ldr.w	r4, [r9], #4
 802366e:	f8dc a000 	ldr.w	sl, [ip]
 8023672:	b2a3      	uxth	r3, r4
 8023674:	fa1f fa8a 	uxth.w	sl, sl
 8023678:	fb0b a303 	mla	r3, fp, r3, sl
 802367c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8023680:	f8dc 4000 	ldr.w	r4, [ip]
 8023684:	4443      	add	r3, r8
 8023686:	ea4f 4814 	mov.w	r8, r4, lsr #16
 802368a:	fb0b 840a 	mla	r4, fp, sl, r8
 802368e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8023692:	46e2      	mov	sl, ip
 8023694:	b29b      	uxth	r3, r3
 8023696:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 802369a:	454f      	cmp	r7, r9
 802369c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80236a0:	f84a 3b04 	str.w	r3, [sl], #4
 80236a4:	d82b      	bhi.n	80236fe <__multiply+0x120>
 80236a6:	f8cc 8004 	str.w	r8, [ip, #4]
 80236aa:	9b01      	ldr	r3, [sp, #4]
 80236ac:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80236b0:	3204      	adds	r2, #4
 80236b2:	f1ba 0f00 	cmp.w	sl, #0
 80236b6:	d020      	beq.n	80236fa <__multiply+0x11c>
 80236b8:	682b      	ldr	r3, [r5, #0]
 80236ba:	4689      	mov	r9, r1
 80236bc:	46a8      	mov	r8, r5
 80236be:	f04f 0b00 	mov.w	fp, #0
 80236c2:	f8b9 c000 	ldrh.w	ip, [r9]
 80236c6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80236ca:	fb0a 440c 	mla	r4, sl, ip, r4
 80236ce:	445c      	add	r4, fp
 80236d0:	46c4      	mov	ip, r8
 80236d2:	b29b      	uxth	r3, r3
 80236d4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80236d8:	f84c 3b04 	str.w	r3, [ip], #4
 80236dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80236e0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80236e4:	0c1b      	lsrs	r3, r3, #16
 80236e6:	fb0a b303 	mla	r3, sl, r3, fp
 80236ea:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80236ee:	454f      	cmp	r7, r9
 80236f0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80236f4:	d805      	bhi.n	8023702 <__multiply+0x124>
 80236f6:	f8c8 3004 	str.w	r3, [r8, #4]
 80236fa:	3504      	adds	r5, #4
 80236fc:	e79b      	b.n	8023636 <__multiply+0x58>
 80236fe:	46d4      	mov	ip, sl
 8023700:	e7b3      	b.n	802366a <__multiply+0x8c>
 8023702:	46e0      	mov	r8, ip
 8023704:	e7dd      	b.n	80236c2 <__multiply+0xe4>
 8023706:	3e01      	subs	r6, #1
 8023708:	e799      	b.n	802363e <__multiply+0x60>
	...

0802370c <__pow5mult>:
 802370c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023710:	4615      	mov	r5, r2
 8023712:	f012 0203 	ands.w	r2, r2, #3
 8023716:	4606      	mov	r6, r0
 8023718:	460f      	mov	r7, r1
 802371a:	d007      	beq.n	802372c <__pow5mult+0x20>
 802371c:	3a01      	subs	r2, #1
 802371e:	4c21      	ldr	r4, [pc, #132]	; (80237a4 <__pow5mult+0x98>)
 8023720:	2300      	movs	r3, #0
 8023722:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8023726:	f7ff fec8 	bl	80234ba <__multadd>
 802372a:	4607      	mov	r7, r0
 802372c:	10ad      	asrs	r5, r5, #2
 802372e:	d035      	beq.n	802379c <__pow5mult+0x90>
 8023730:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8023732:	b93c      	cbnz	r4, 8023744 <__pow5mult+0x38>
 8023734:	2010      	movs	r0, #16
 8023736:	f7fc f971 	bl	801fa1c <malloc>
 802373a:	6270      	str	r0, [r6, #36]	; 0x24
 802373c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8023740:	6004      	str	r4, [r0, #0]
 8023742:	60c4      	str	r4, [r0, #12]
 8023744:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8023748:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802374c:	b94c      	cbnz	r4, 8023762 <__pow5mult+0x56>
 802374e:	f240 2171 	movw	r1, #625	; 0x271
 8023752:	4630      	mov	r0, r6
 8023754:	f7ff ff3a 	bl	80235cc <__i2b>
 8023758:	2300      	movs	r3, #0
 802375a:	f8c8 0008 	str.w	r0, [r8, #8]
 802375e:	4604      	mov	r4, r0
 8023760:	6003      	str	r3, [r0, #0]
 8023762:	f04f 0800 	mov.w	r8, #0
 8023766:	07eb      	lsls	r3, r5, #31
 8023768:	d50a      	bpl.n	8023780 <__pow5mult+0x74>
 802376a:	4639      	mov	r1, r7
 802376c:	4622      	mov	r2, r4
 802376e:	4630      	mov	r0, r6
 8023770:	f7ff ff35 	bl	80235de <__multiply>
 8023774:	4639      	mov	r1, r7
 8023776:	4681      	mov	r9, r0
 8023778:	4630      	mov	r0, r6
 802377a:	f7ff fe87 	bl	802348c <_Bfree>
 802377e:	464f      	mov	r7, r9
 8023780:	106d      	asrs	r5, r5, #1
 8023782:	d00b      	beq.n	802379c <__pow5mult+0x90>
 8023784:	6820      	ldr	r0, [r4, #0]
 8023786:	b938      	cbnz	r0, 8023798 <__pow5mult+0x8c>
 8023788:	4622      	mov	r2, r4
 802378a:	4621      	mov	r1, r4
 802378c:	4630      	mov	r0, r6
 802378e:	f7ff ff26 	bl	80235de <__multiply>
 8023792:	6020      	str	r0, [r4, #0]
 8023794:	f8c0 8000 	str.w	r8, [r0]
 8023798:	4604      	mov	r4, r0
 802379a:	e7e4      	b.n	8023766 <__pow5mult+0x5a>
 802379c:	4638      	mov	r0, r7
 802379e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80237a2:	bf00      	nop
 80237a4:	0803ff60 	.word	0x0803ff60

080237a8 <__lshift>:
 80237a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80237ac:	460c      	mov	r4, r1
 80237ae:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80237b2:	6923      	ldr	r3, [r4, #16]
 80237b4:	6849      	ldr	r1, [r1, #4]
 80237b6:	eb0a 0903 	add.w	r9, sl, r3
 80237ba:	68a3      	ldr	r3, [r4, #8]
 80237bc:	4607      	mov	r7, r0
 80237be:	4616      	mov	r6, r2
 80237c0:	f109 0501 	add.w	r5, r9, #1
 80237c4:	42ab      	cmp	r3, r5
 80237c6:	db32      	blt.n	802382e <__lshift+0x86>
 80237c8:	4638      	mov	r0, r7
 80237ca:	f7ff fe2b 	bl	8023424 <_Balloc>
 80237ce:	2300      	movs	r3, #0
 80237d0:	4680      	mov	r8, r0
 80237d2:	f100 0114 	add.w	r1, r0, #20
 80237d6:	461a      	mov	r2, r3
 80237d8:	4553      	cmp	r3, sl
 80237da:	db2b      	blt.n	8023834 <__lshift+0x8c>
 80237dc:	6920      	ldr	r0, [r4, #16]
 80237de:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80237e2:	f104 0314 	add.w	r3, r4, #20
 80237e6:	f016 021f 	ands.w	r2, r6, #31
 80237ea:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80237ee:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80237f2:	d025      	beq.n	8023840 <__lshift+0x98>
 80237f4:	f1c2 0e20 	rsb	lr, r2, #32
 80237f8:	2000      	movs	r0, #0
 80237fa:	681e      	ldr	r6, [r3, #0]
 80237fc:	468a      	mov	sl, r1
 80237fe:	4096      	lsls	r6, r2
 8023800:	4330      	orrs	r0, r6
 8023802:	f84a 0b04 	str.w	r0, [sl], #4
 8023806:	f853 0b04 	ldr.w	r0, [r3], #4
 802380a:	459c      	cmp	ip, r3
 802380c:	fa20 f00e 	lsr.w	r0, r0, lr
 8023810:	d814      	bhi.n	802383c <__lshift+0x94>
 8023812:	6048      	str	r0, [r1, #4]
 8023814:	b108      	cbz	r0, 802381a <__lshift+0x72>
 8023816:	f109 0502 	add.w	r5, r9, #2
 802381a:	3d01      	subs	r5, #1
 802381c:	4638      	mov	r0, r7
 802381e:	f8c8 5010 	str.w	r5, [r8, #16]
 8023822:	4621      	mov	r1, r4
 8023824:	f7ff fe32 	bl	802348c <_Bfree>
 8023828:	4640      	mov	r0, r8
 802382a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802382e:	3101      	adds	r1, #1
 8023830:	005b      	lsls	r3, r3, #1
 8023832:	e7c7      	b.n	80237c4 <__lshift+0x1c>
 8023834:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8023838:	3301      	adds	r3, #1
 802383a:	e7cd      	b.n	80237d8 <__lshift+0x30>
 802383c:	4651      	mov	r1, sl
 802383e:	e7dc      	b.n	80237fa <__lshift+0x52>
 8023840:	3904      	subs	r1, #4
 8023842:	f853 2b04 	ldr.w	r2, [r3], #4
 8023846:	f841 2f04 	str.w	r2, [r1, #4]!
 802384a:	459c      	cmp	ip, r3
 802384c:	d8f9      	bhi.n	8023842 <__lshift+0x9a>
 802384e:	e7e4      	b.n	802381a <__lshift+0x72>

08023850 <__mcmp>:
 8023850:	6903      	ldr	r3, [r0, #16]
 8023852:	690a      	ldr	r2, [r1, #16]
 8023854:	1a9b      	subs	r3, r3, r2
 8023856:	b530      	push	{r4, r5, lr}
 8023858:	d10c      	bne.n	8023874 <__mcmp+0x24>
 802385a:	0092      	lsls	r2, r2, #2
 802385c:	3014      	adds	r0, #20
 802385e:	3114      	adds	r1, #20
 8023860:	1884      	adds	r4, r0, r2
 8023862:	4411      	add	r1, r2
 8023864:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8023868:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 802386c:	4295      	cmp	r5, r2
 802386e:	d003      	beq.n	8023878 <__mcmp+0x28>
 8023870:	d305      	bcc.n	802387e <__mcmp+0x2e>
 8023872:	2301      	movs	r3, #1
 8023874:	4618      	mov	r0, r3
 8023876:	bd30      	pop	{r4, r5, pc}
 8023878:	42a0      	cmp	r0, r4
 802387a:	d3f3      	bcc.n	8023864 <__mcmp+0x14>
 802387c:	e7fa      	b.n	8023874 <__mcmp+0x24>
 802387e:	f04f 33ff 	mov.w	r3, #4294967295
 8023882:	e7f7      	b.n	8023874 <__mcmp+0x24>

08023884 <__mdiff>:
 8023884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023888:	460d      	mov	r5, r1
 802388a:	4607      	mov	r7, r0
 802388c:	4611      	mov	r1, r2
 802388e:	4628      	mov	r0, r5
 8023890:	4614      	mov	r4, r2
 8023892:	f7ff ffdd 	bl	8023850 <__mcmp>
 8023896:	1e06      	subs	r6, r0, #0
 8023898:	d108      	bne.n	80238ac <__mdiff+0x28>
 802389a:	4631      	mov	r1, r6
 802389c:	4638      	mov	r0, r7
 802389e:	f7ff fdc1 	bl	8023424 <_Balloc>
 80238a2:	2301      	movs	r3, #1
 80238a4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80238a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80238ac:	bfa4      	itt	ge
 80238ae:	4623      	movge	r3, r4
 80238b0:	462c      	movge	r4, r5
 80238b2:	4638      	mov	r0, r7
 80238b4:	6861      	ldr	r1, [r4, #4]
 80238b6:	bfa6      	itte	ge
 80238b8:	461d      	movge	r5, r3
 80238ba:	2600      	movge	r6, #0
 80238bc:	2601      	movlt	r6, #1
 80238be:	f7ff fdb1 	bl	8023424 <_Balloc>
 80238c2:	692b      	ldr	r3, [r5, #16]
 80238c4:	60c6      	str	r6, [r0, #12]
 80238c6:	6926      	ldr	r6, [r4, #16]
 80238c8:	f105 0914 	add.w	r9, r5, #20
 80238cc:	f104 0214 	add.w	r2, r4, #20
 80238d0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80238d4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80238d8:	f100 0514 	add.w	r5, r0, #20
 80238dc:	f04f 0e00 	mov.w	lr, #0
 80238e0:	f852 ab04 	ldr.w	sl, [r2], #4
 80238e4:	f859 4b04 	ldr.w	r4, [r9], #4
 80238e8:	fa1e f18a 	uxtah	r1, lr, sl
 80238ec:	b2a3      	uxth	r3, r4
 80238ee:	1ac9      	subs	r1, r1, r3
 80238f0:	0c23      	lsrs	r3, r4, #16
 80238f2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80238f6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80238fa:	b289      	uxth	r1, r1
 80238fc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8023900:	45c8      	cmp	r8, r9
 8023902:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8023906:	4694      	mov	ip, r2
 8023908:	f845 3b04 	str.w	r3, [r5], #4
 802390c:	d8e8      	bhi.n	80238e0 <__mdiff+0x5c>
 802390e:	45bc      	cmp	ip, r7
 8023910:	d304      	bcc.n	802391c <__mdiff+0x98>
 8023912:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8023916:	b183      	cbz	r3, 802393a <__mdiff+0xb6>
 8023918:	6106      	str	r6, [r0, #16]
 802391a:	e7c5      	b.n	80238a8 <__mdiff+0x24>
 802391c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8023920:	fa1e f381 	uxtah	r3, lr, r1
 8023924:	141a      	asrs	r2, r3, #16
 8023926:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 802392a:	b29b      	uxth	r3, r3
 802392c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8023930:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8023934:	f845 3b04 	str.w	r3, [r5], #4
 8023938:	e7e9      	b.n	802390e <__mdiff+0x8a>
 802393a:	3e01      	subs	r6, #1
 802393c:	e7e9      	b.n	8023912 <__mdiff+0x8e>

0802393e <__d2b>:
 802393e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8023942:	460e      	mov	r6, r1
 8023944:	2101      	movs	r1, #1
 8023946:	ec59 8b10 	vmov	r8, r9, d0
 802394a:	4615      	mov	r5, r2
 802394c:	f7ff fd6a 	bl	8023424 <_Balloc>
 8023950:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8023954:	4607      	mov	r7, r0
 8023956:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802395a:	bb34      	cbnz	r4, 80239aa <__d2b+0x6c>
 802395c:	9301      	str	r3, [sp, #4]
 802395e:	f1b8 0300 	subs.w	r3, r8, #0
 8023962:	d027      	beq.n	80239b4 <__d2b+0x76>
 8023964:	a802      	add	r0, sp, #8
 8023966:	f840 3d08 	str.w	r3, [r0, #-8]!
 802396a:	f7ff fe00 	bl	802356e <__lo0bits>
 802396e:	9900      	ldr	r1, [sp, #0]
 8023970:	b1f0      	cbz	r0, 80239b0 <__d2b+0x72>
 8023972:	9a01      	ldr	r2, [sp, #4]
 8023974:	f1c0 0320 	rsb	r3, r0, #32
 8023978:	fa02 f303 	lsl.w	r3, r2, r3
 802397c:	430b      	orrs	r3, r1
 802397e:	40c2      	lsrs	r2, r0
 8023980:	617b      	str	r3, [r7, #20]
 8023982:	9201      	str	r2, [sp, #4]
 8023984:	9b01      	ldr	r3, [sp, #4]
 8023986:	61bb      	str	r3, [r7, #24]
 8023988:	2b00      	cmp	r3, #0
 802398a:	bf14      	ite	ne
 802398c:	2102      	movne	r1, #2
 802398e:	2101      	moveq	r1, #1
 8023990:	6139      	str	r1, [r7, #16]
 8023992:	b1c4      	cbz	r4, 80239c6 <__d2b+0x88>
 8023994:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8023998:	4404      	add	r4, r0
 802399a:	6034      	str	r4, [r6, #0]
 802399c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80239a0:	6028      	str	r0, [r5, #0]
 80239a2:	4638      	mov	r0, r7
 80239a4:	b003      	add	sp, #12
 80239a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80239aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80239ae:	e7d5      	b.n	802395c <__d2b+0x1e>
 80239b0:	6179      	str	r1, [r7, #20]
 80239b2:	e7e7      	b.n	8023984 <__d2b+0x46>
 80239b4:	a801      	add	r0, sp, #4
 80239b6:	f7ff fdda 	bl	802356e <__lo0bits>
 80239ba:	9b01      	ldr	r3, [sp, #4]
 80239bc:	617b      	str	r3, [r7, #20]
 80239be:	2101      	movs	r1, #1
 80239c0:	6139      	str	r1, [r7, #16]
 80239c2:	3020      	adds	r0, #32
 80239c4:	e7e5      	b.n	8023992 <__d2b+0x54>
 80239c6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80239ca:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80239ce:	6030      	str	r0, [r6, #0]
 80239d0:	6918      	ldr	r0, [r3, #16]
 80239d2:	f7ff fdad 	bl	8023530 <__hi0bits>
 80239d6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80239da:	e7e1      	b.n	80239a0 <__d2b+0x62>

080239dc <_calloc_r>:
 80239dc:	b538      	push	{r3, r4, r5, lr}
 80239de:	fb02 f401 	mul.w	r4, r2, r1
 80239e2:	4621      	mov	r1, r4
 80239e4:	f7fc fb5a 	bl	802009c <_malloc_r>
 80239e8:	4605      	mov	r5, r0
 80239ea:	b118      	cbz	r0, 80239f4 <_calloc_r+0x18>
 80239ec:	4622      	mov	r2, r4
 80239ee:	2100      	movs	r1, #0
 80239f0:	f7fc f869 	bl	801fac6 <memset>
 80239f4:	4628      	mov	r0, r5
 80239f6:	bd38      	pop	{r3, r4, r5, pc}

080239f8 <_realloc_r>:
 80239f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80239fa:	4607      	mov	r7, r0
 80239fc:	4614      	mov	r4, r2
 80239fe:	460e      	mov	r6, r1
 8023a00:	b921      	cbnz	r1, 8023a0c <_realloc_r+0x14>
 8023a02:	4611      	mov	r1, r2
 8023a04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8023a08:	f7fc bb48 	b.w	802009c <_malloc_r>
 8023a0c:	b922      	cbnz	r2, 8023a18 <_realloc_r+0x20>
 8023a0e:	f7fc faf7 	bl	8020000 <_free_r>
 8023a12:	4625      	mov	r5, r4
 8023a14:	4628      	mov	r0, r5
 8023a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023a18:	f000 fe80 	bl	802471c <_malloc_usable_size_r>
 8023a1c:	42a0      	cmp	r0, r4
 8023a1e:	d20f      	bcs.n	8023a40 <_realloc_r+0x48>
 8023a20:	4621      	mov	r1, r4
 8023a22:	4638      	mov	r0, r7
 8023a24:	f7fc fb3a 	bl	802009c <_malloc_r>
 8023a28:	4605      	mov	r5, r0
 8023a2a:	2800      	cmp	r0, #0
 8023a2c:	d0f2      	beq.n	8023a14 <_realloc_r+0x1c>
 8023a2e:	4631      	mov	r1, r6
 8023a30:	4622      	mov	r2, r4
 8023a32:	f7fc f824 	bl	801fa7e <memcpy>
 8023a36:	4631      	mov	r1, r6
 8023a38:	4638      	mov	r0, r7
 8023a3a:	f7fc fae1 	bl	8020000 <_free_r>
 8023a3e:	e7e9      	b.n	8023a14 <_realloc_r+0x1c>
 8023a40:	4635      	mov	r5, r6
 8023a42:	e7e7      	b.n	8023a14 <_realloc_r+0x1c>

08023a44 <__ssputs_r>:
 8023a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023a48:	688e      	ldr	r6, [r1, #8]
 8023a4a:	429e      	cmp	r6, r3
 8023a4c:	4682      	mov	sl, r0
 8023a4e:	460c      	mov	r4, r1
 8023a50:	4690      	mov	r8, r2
 8023a52:	4699      	mov	r9, r3
 8023a54:	d837      	bhi.n	8023ac6 <__ssputs_r+0x82>
 8023a56:	898a      	ldrh	r2, [r1, #12]
 8023a58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8023a5c:	d031      	beq.n	8023ac2 <__ssputs_r+0x7e>
 8023a5e:	6825      	ldr	r5, [r4, #0]
 8023a60:	6909      	ldr	r1, [r1, #16]
 8023a62:	1a6f      	subs	r7, r5, r1
 8023a64:	6965      	ldr	r5, [r4, #20]
 8023a66:	2302      	movs	r3, #2
 8023a68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023a6c:	fb95 f5f3 	sdiv	r5, r5, r3
 8023a70:	f109 0301 	add.w	r3, r9, #1
 8023a74:	443b      	add	r3, r7
 8023a76:	429d      	cmp	r5, r3
 8023a78:	bf38      	it	cc
 8023a7a:	461d      	movcc	r5, r3
 8023a7c:	0553      	lsls	r3, r2, #21
 8023a7e:	d530      	bpl.n	8023ae2 <__ssputs_r+0x9e>
 8023a80:	4629      	mov	r1, r5
 8023a82:	f7fc fb0b 	bl	802009c <_malloc_r>
 8023a86:	4606      	mov	r6, r0
 8023a88:	b950      	cbnz	r0, 8023aa0 <__ssputs_r+0x5c>
 8023a8a:	230c      	movs	r3, #12
 8023a8c:	f8ca 3000 	str.w	r3, [sl]
 8023a90:	89a3      	ldrh	r3, [r4, #12]
 8023a92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023a96:	81a3      	strh	r3, [r4, #12]
 8023a98:	f04f 30ff 	mov.w	r0, #4294967295
 8023a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023aa0:	463a      	mov	r2, r7
 8023aa2:	6921      	ldr	r1, [r4, #16]
 8023aa4:	f7fb ffeb 	bl	801fa7e <memcpy>
 8023aa8:	89a3      	ldrh	r3, [r4, #12]
 8023aaa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8023aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023ab2:	81a3      	strh	r3, [r4, #12]
 8023ab4:	6126      	str	r6, [r4, #16]
 8023ab6:	6165      	str	r5, [r4, #20]
 8023ab8:	443e      	add	r6, r7
 8023aba:	1bed      	subs	r5, r5, r7
 8023abc:	6026      	str	r6, [r4, #0]
 8023abe:	60a5      	str	r5, [r4, #8]
 8023ac0:	464e      	mov	r6, r9
 8023ac2:	454e      	cmp	r6, r9
 8023ac4:	d900      	bls.n	8023ac8 <__ssputs_r+0x84>
 8023ac6:	464e      	mov	r6, r9
 8023ac8:	4632      	mov	r2, r6
 8023aca:	4641      	mov	r1, r8
 8023acc:	6820      	ldr	r0, [r4, #0]
 8023ace:	f7fb ffe1 	bl	801fa94 <memmove>
 8023ad2:	68a3      	ldr	r3, [r4, #8]
 8023ad4:	1b9b      	subs	r3, r3, r6
 8023ad6:	60a3      	str	r3, [r4, #8]
 8023ad8:	6823      	ldr	r3, [r4, #0]
 8023ada:	441e      	add	r6, r3
 8023adc:	6026      	str	r6, [r4, #0]
 8023ade:	2000      	movs	r0, #0
 8023ae0:	e7dc      	b.n	8023a9c <__ssputs_r+0x58>
 8023ae2:	462a      	mov	r2, r5
 8023ae4:	f7ff ff88 	bl	80239f8 <_realloc_r>
 8023ae8:	4606      	mov	r6, r0
 8023aea:	2800      	cmp	r0, #0
 8023aec:	d1e2      	bne.n	8023ab4 <__ssputs_r+0x70>
 8023aee:	6921      	ldr	r1, [r4, #16]
 8023af0:	4650      	mov	r0, sl
 8023af2:	f7fc fa85 	bl	8020000 <_free_r>
 8023af6:	e7c8      	b.n	8023a8a <__ssputs_r+0x46>

08023af8 <_svfiprintf_r>:
 8023af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023afc:	461d      	mov	r5, r3
 8023afe:	898b      	ldrh	r3, [r1, #12]
 8023b00:	061f      	lsls	r7, r3, #24
 8023b02:	b09d      	sub	sp, #116	; 0x74
 8023b04:	4680      	mov	r8, r0
 8023b06:	460c      	mov	r4, r1
 8023b08:	4616      	mov	r6, r2
 8023b0a:	d50f      	bpl.n	8023b2c <_svfiprintf_r+0x34>
 8023b0c:	690b      	ldr	r3, [r1, #16]
 8023b0e:	b96b      	cbnz	r3, 8023b2c <_svfiprintf_r+0x34>
 8023b10:	2140      	movs	r1, #64	; 0x40
 8023b12:	f7fc fac3 	bl	802009c <_malloc_r>
 8023b16:	6020      	str	r0, [r4, #0]
 8023b18:	6120      	str	r0, [r4, #16]
 8023b1a:	b928      	cbnz	r0, 8023b28 <_svfiprintf_r+0x30>
 8023b1c:	230c      	movs	r3, #12
 8023b1e:	f8c8 3000 	str.w	r3, [r8]
 8023b22:	f04f 30ff 	mov.w	r0, #4294967295
 8023b26:	e0c8      	b.n	8023cba <_svfiprintf_r+0x1c2>
 8023b28:	2340      	movs	r3, #64	; 0x40
 8023b2a:	6163      	str	r3, [r4, #20]
 8023b2c:	2300      	movs	r3, #0
 8023b2e:	9309      	str	r3, [sp, #36]	; 0x24
 8023b30:	2320      	movs	r3, #32
 8023b32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8023b36:	2330      	movs	r3, #48	; 0x30
 8023b38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023b3c:	9503      	str	r5, [sp, #12]
 8023b3e:	f04f 0b01 	mov.w	fp, #1
 8023b42:	4637      	mov	r7, r6
 8023b44:	463d      	mov	r5, r7
 8023b46:	f815 3b01 	ldrb.w	r3, [r5], #1
 8023b4a:	b10b      	cbz	r3, 8023b50 <_svfiprintf_r+0x58>
 8023b4c:	2b25      	cmp	r3, #37	; 0x25
 8023b4e:	d13e      	bne.n	8023bce <_svfiprintf_r+0xd6>
 8023b50:	ebb7 0a06 	subs.w	sl, r7, r6
 8023b54:	d00b      	beq.n	8023b6e <_svfiprintf_r+0x76>
 8023b56:	4653      	mov	r3, sl
 8023b58:	4632      	mov	r2, r6
 8023b5a:	4621      	mov	r1, r4
 8023b5c:	4640      	mov	r0, r8
 8023b5e:	f7ff ff71 	bl	8023a44 <__ssputs_r>
 8023b62:	3001      	adds	r0, #1
 8023b64:	f000 80a4 	beq.w	8023cb0 <_svfiprintf_r+0x1b8>
 8023b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023b6a:	4453      	add	r3, sl
 8023b6c:	9309      	str	r3, [sp, #36]	; 0x24
 8023b6e:	783b      	ldrb	r3, [r7, #0]
 8023b70:	2b00      	cmp	r3, #0
 8023b72:	f000 809d 	beq.w	8023cb0 <_svfiprintf_r+0x1b8>
 8023b76:	2300      	movs	r3, #0
 8023b78:	f04f 32ff 	mov.w	r2, #4294967295
 8023b7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023b80:	9304      	str	r3, [sp, #16]
 8023b82:	9307      	str	r3, [sp, #28]
 8023b84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8023b88:	931a      	str	r3, [sp, #104]	; 0x68
 8023b8a:	462f      	mov	r7, r5
 8023b8c:	2205      	movs	r2, #5
 8023b8e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8023b92:	4850      	ldr	r0, [pc, #320]	; (8023cd4 <_svfiprintf_r+0x1dc>)
 8023b94:	f7dc fb6c 	bl	8000270 <memchr>
 8023b98:	9b04      	ldr	r3, [sp, #16]
 8023b9a:	b9d0      	cbnz	r0, 8023bd2 <_svfiprintf_r+0xda>
 8023b9c:	06d9      	lsls	r1, r3, #27
 8023b9e:	bf44      	itt	mi
 8023ba0:	2220      	movmi	r2, #32
 8023ba2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8023ba6:	071a      	lsls	r2, r3, #28
 8023ba8:	bf44      	itt	mi
 8023baa:	222b      	movmi	r2, #43	; 0x2b
 8023bac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8023bb0:	782a      	ldrb	r2, [r5, #0]
 8023bb2:	2a2a      	cmp	r2, #42	; 0x2a
 8023bb4:	d015      	beq.n	8023be2 <_svfiprintf_r+0xea>
 8023bb6:	9a07      	ldr	r2, [sp, #28]
 8023bb8:	462f      	mov	r7, r5
 8023bba:	2000      	movs	r0, #0
 8023bbc:	250a      	movs	r5, #10
 8023bbe:	4639      	mov	r1, r7
 8023bc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023bc4:	3b30      	subs	r3, #48	; 0x30
 8023bc6:	2b09      	cmp	r3, #9
 8023bc8:	d94d      	bls.n	8023c66 <_svfiprintf_r+0x16e>
 8023bca:	b1b8      	cbz	r0, 8023bfc <_svfiprintf_r+0x104>
 8023bcc:	e00f      	b.n	8023bee <_svfiprintf_r+0xf6>
 8023bce:	462f      	mov	r7, r5
 8023bd0:	e7b8      	b.n	8023b44 <_svfiprintf_r+0x4c>
 8023bd2:	4a40      	ldr	r2, [pc, #256]	; (8023cd4 <_svfiprintf_r+0x1dc>)
 8023bd4:	1a80      	subs	r0, r0, r2
 8023bd6:	fa0b f000 	lsl.w	r0, fp, r0
 8023bda:	4318      	orrs	r0, r3
 8023bdc:	9004      	str	r0, [sp, #16]
 8023bde:	463d      	mov	r5, r7
 8023be0:	e7d3      	b.n	8023b8a <_svfiprintf_r+0x92>
 8023be2:	9a03      	ldr	r2, [sp, #12]
 8023be4:	1d11      	adds	r1, r2, #4
 8023be6:	6812      	ldr	r2, [r2, #0]
 8023be8:	9103      	str	r1, [sp, #12]
 8023bea:	2a00      	cmp	r2, #0
 8023bec:	db01      	blt.n	8023bf2 <_svfiprintf_r+0xfa>
 8023bee:	9207      	str	r2, [sp, #28]
 8023bf0:	e004      	b.n	8023bfc <_svfiprintf_r+0x104>
 8023bf2:	4252      	negs	r2, r2
 8023bf4:	f043 0302 	orr.w	r3, r3, #2
 8023bf8:	9207      	str	r2, [sp, #28]
 8023bfa:	9304      	str	r3, [sp, #16]
 8023bfc:	783b      	ldrb	r3, [r7, #0]
 8023bfe:	2b2e      	cmp	r3, #46	; 0x2e
 8023c00:	d10c      	bne.n	8023c1c <_svfiprintf_r+0x124>
 8023c02:	787b      	ldrb	r3, [r7, #1]
 8023c04:	2b2a      	cmp	r3, #42	; 0x2a
 8023c06:	d133      	bne.n	8023c70 <_svfiprintf_r+0x178>
 8023c08:	9b03      	ldr	r3, [sp, #12]
 8023c0a:	1d1a      	adds	r2, r3, #4
 8023c0c:	681b      	ldr	r3, [r3, #0]
 8023c0e:	9203      	str	r2, [sp, #12]
 8023c10:	2b00      	cmp	r3, #0
 8023c12:	bfb8      	it	lt
 8023c14:	f04f 33ff 	movlt.w	r3, #4294967295
 8023c18:	3702      	adds	r7, #2
 8023c1a:	9305      	str	r3, [sp, #20]
 8023c1c:	4d2e      	ldr	r5, [pc, #184]	; (8023cd8 <_svfiprintf_r+0x1e0>)
 8023c1e:	7839      	ldrb	r1, [r7, #0]
 8023c20:	2203      	movs	r2, #3
 8023c22:	4628      	mov	r0, r5
 8023c24:	f7dc fb24 	bl	8000270 <memchr>
 8023c28:	b138      	cbz	r0, 8023c3a <_svfiprintf_r+0x142>
 8023c2a:	2340      	movs	r3, #64	; 0x40
 8023c2c:	1b40      	subs	r0, r0, r5
 8023c2e:	fa03 f000 	lsl.w	r0, r3, r0
 8023c32:	9b04      	ldr	r3, [sp, #16]
 8023c34:	4303      	orrs	r3, r0
 8023c36:	3701      	adds	r7, #1
 8023c38:	9304      	str	r3, [sp, #16]
 8023c3a:	7839      	ldrb	r1, [r7, #0]
 8023c3c:	4827      	ldr	r0, [pc, #156]	; (8023cdc <_svfiprintf_r+0x1e4>)
 8023c3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023c42:	2206      	movs	r2, #6
 8023c44:	1c7e      	adds	r6, r7, #1
 8023c46:	f7dc fb13 	bl	8000270 <memchr>
 8023c4a:	2800      	cmp	r0, #0
 8023c4c:	d038      	beq.n	8023cc0 <_svfiprintf_r+0x1c8>
 8023c4e:	4b24      	ldr	r3, [pc, #144]	; (8023ce0 <_svfiprintf_r+0x1e8>)
 8023c50:	bb13      	cbnz	r3, 8023c98 <_svfiprintf_r+0x1a0>
 8023c52:	9b03      	ldr	r3, [sp, #12]
 8023c54:	3307      	adds	r3, #7
 8023c56:	f023 0307 	bic.w	r3, r3, #7
 8023c5a:	3308      	adds	r3, #8
 8023c5c:	9303      	str	r3, [sp, #12]
 8023c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023c60:	444b      	add	r3, r9
 8023c62:	9309      	str	r3, [sp, #36]	; 0x24
 8023c64:	e76d      	b.n	8023b42 <_svfiprintf_r+0x4a>
 8023c66:	fb05 3202 	mla	r2, r5, r2, r3
 8023c6a:	2001      	movs	r0, #1
 8023c6c:	460f      	mov	r7, r1
 8023c6e:	e7a6      	b.n	8023bbe <_svfiprintf_r+0xc6>
 8023c70:	2300      	movs	r3, #0
 8023c72:	3701      	adds	r7, #1
 8023c74:	9305      	str	r3, [sp, #20]
 8023c76:	4619      	mov	r1, r3
 8023c78:	250a      	movs	r5, #10
 8023c7a:	4638      	mov	r0, r7
 8023c7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023c80:	3a30      	subs	r2, #48	; 0x30
 8023c82:	2a09      	cmp	r2, #9
 8023c84:	d903      	bls.n	8023c8e <_svfiprintf_r+0x196>
 8023c86:	2b00      	cmp	r3, #0
 8023c88:	d0c8      	beq.n	8023c1c <_svfiprintf_r+0x124>
 8023c8a:	9105      	str	r1, [sp, #20]
 8023c8c:	e7c6      	b.n	8023c1c <_svfiprintf_r+0x124>
 8023c8e:	fb05 2101 	mla	r1, r5, r1, r2
 8023c92:	2301      	movs	r3, #1
 8023c94:	4607      	mov	r7, r0
 8023c96:	e7f0      	b.n	8023c7a <_svfiprintf_r+0x182>
 8023c98:	ab03      	add	r3, sp, #12
 8023c9a:	9300      	str	r3, [sp, #0]
 8023c9c:	4622      	mov	r2, r4
 8023c9e:	4b11      	ldr	r3, [pc, #68]	; (8023ce4 <_svfiprintf_r+0x1ec>)
 8023ca0:	a904      	add	r1, sp, #16
 8023ca2:	4640      	mov	r0, r8
 8023ca4:	f7fc fadc 	bl	8020260 <_printf_float>
 8023ca8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8023cac:	4681      	mov	r9, r0
 8023cae:	d1d6      	bne.n	8023c5e <_svfiprintf_r+0x166>
 8023cb0:	89a3      	ldrh	r3, [r4, #12]
 8023cb2:	065b      	lsls	r3, r3, #25
 8023cb4:	f53f af35 	bmi.w	8023b22 <_svfiprintf_r+0x2a>
 8023cb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023cba:	b01d      	add	sp, #116	; 0x74
 8023cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023cc0:	ab03      	add	r3, sp, #12
 8023cc2:	9300      	str	r3, [sp, #0]
 8023cc4:	4622      	mov	r2, r4
 8023cc6:	4b07      	ldr	r3, [pc, #28]	; (8023ce4 <_svfiprintf_r+0x1ec>)
 8023cc8:	a904      	add	r1, sp, #16
 8023cca:	4640      	mov	r0, r8
 8023ccc:	f7fc fd6a 	bl	80207a4 <_printf_i>
 8023cd0:	e7ea      	b.n	8023ca8 <_svfiprintf_r+0x1b0>
 8023cd2:	bf00      	nop
 8023cd4:	0803ff6c 	.word	0x0803ff6c
 8023cd8:	0803ff72 	.word	0x0803ff72
 8023cdc:	0803ff76 	.word	0x0803ff76
 8023ce0:	08020261 	.word	0x08020261
 8023ce4:	08023a45 	.word	0x08023a45

08023ce8 <_sungetc_r>:
 8023ce8:	b538      	push	{r3, r4, r5, lr}
 8023cea:	1c4b      	adds	r3, r1, #1
 8023cec:	4614      	mov	r4, r2
 8023cee:	d103      	bne.n	8023cf8 <_sungetc_r+0x10>
 8023cf0:	f04f 35ff 	mov.w	r5, #4294967295
 8023cf4:	4628      	mov	r0, r5
 8023cf6:	bd38      	pop	{r3, r4, r5, pc}
 8023cf8:	8993      	ldrh	r3, [r2, #12]
 8023cfa:	f023 0320 	bic.w	r3, r3, #32
 8023cfe:	8193      	strh	r3, [r2, #12]
 8023d00:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8023d02:	6852      	ldr	r2, [r2, #4]
 8023d04:	b2cd      	uxtb	r5, r1
 8023d06:	b18b      	cbz	r3, 8023d2c <_sungetc_r+0x44>
 8023d08:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8023d0a:	4293      	cmp	r3, r2
 8023d0c:	dd08      	ble.n	8023d20 <_sungetc_r+0x38>
 8023d0e:	6823      	ldr	r3, [r4, #0]
 8023d10:	1e5a      	subs	r2, r3, #1
 8023d12:	6022      	str	r2, [r4, #0]
 8023d14:	f803 5c01 	strb.w	r5, [r3, #-1]
 8023d18:	6863      	ldr	r3, [r4, #4]
 8023d1a:	3301      	adds	r3, #1
 8023d1c:	6063      	str	r3, [r4, #4]
 8023d1e:	e7e9      	b.n	8023cf4 <_sungetc_r+0xc>
 8023d20:	4621      	mov	r1, r4
 8023d22:	f000 fc9d 	bl	8024660 <__submore>
 8023d26:	2800      	cmp	r0, #0
 8023d28:	d0f1      	beq.n	8023d0e <_sungetc_r+0x26>
 8023d2a:	e7e1      	b.n	8023cf0 <_sungetc_r+0x8>
 8023d2c:	6921      	ldr	r1, [r4, #16]
 8023d2e:	6823      	ldr	r3, [r4, #0]
 8023d30:	b151      	cbz	r1, 8023d48 <_sungetc_r+0x60>
 8023d32:	4299      	cmp	r1, r3
 8023d34:	d208      	bcs.n	8023d48 <_sungetc_r+0x60>
 8023d36:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8023d3a:	42a9      	cmp	r1, r5
 8023d3c:	d104      	bne.n	8023d48 <_sungetc_r+0x60>
 8023d3e:	3b01      	subs	r3, #1
 8023d40:	3201      	adds	r2, #1
 8023d42:	6023      	str	r3, [r4, #0]
 8023d44:	6062      	str	r2, [r4, #4]
 8023d46:	e7d5      	b.n	8023cf4 <_sungetc_r+0xc>
 8023d48:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8023d4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023d50:	6363      	str	r3, [r4, #52]	; 0x34
 8023d52:	2303      	movs	r3, #3
 8023d54:	63a3      	str	r3, [r4, #56]	; 0x38
 8023d56:	4623      	mov	r3, r4
 8023d58:	f803 5f46 	strb.w	r5, [r3, #70]!
 8023d5c:	6023      	str	r3, [r4, #0]
 8023d5e:	2301      	movs	r3, #1
 8023d60:	e7dc      	b.n	8023d1c <_sungetc_r+0x34>

08023d62 <__ssrefill_r>:
 8023d62:	b510      	push	{r4, lr}
 8023d64:	460c      	mov	r4, r1
 8023d66:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8023d68:	b169      	cbz	r1, 8023d86 <__ssrefill_r+0x24>
 8023d6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023d6e:	4299      	cmp	r1, r3
 8023d70:	d001      	beq.n	8023d76 <__ssrefill_r+0x14>
 8023d72:	f7fc f945 	bl	8020000 <_free_r>
 8023d76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023d78:	6063      	str	r3, [r4, #4]
 8023d7a:	2000      	movs	r0, #0
 8023d7c:	6360      	str	r0, [r4, #52]	; 0x34
 8023d7e:	b113      	cbz	r3, 8023d86 <__ssrefill_r+0x24>
 8023d80:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8023d82:	6023      	str	r3, [r4, #0]
 8023d84:	bd10      	pop	{r4, pc}
 8023d86:	6923      	ldr	r3, [r4, #16]
 8023d88:	6023      	str	r3, [r4, #0]
 8023d8a:	2300      	movs	r3, #0
 8023d8c:	6063      	str	r3, [r4, #4]
 8023d8e:	89a3      	ldrh	r3, [r4, #12]
 8023d90:	f043 0320 	orr.w	r3, r3, #32
 8023d94:	81a3      	strh	r3, [r4, #12]
 8023d96:	f04f 30ff 	mov.w	r0, #4294967295
 8023d9a:	e7f3      	b.n	8023d84 <__ssrefill_r+0x22>

08023d9c <__ssvfiscanf_r>:
 8023d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023da0:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8023da4:	460c      	mov	r4, r1
 8023da6:	2100      	movs	r1, #0
 8023da8:	9144      	str	r1, [sp, #272]	; 0x110
 8023daa:	9145      	str	r1, [sp, #276]	; 0x114
 8023dac:	499f      	ldr	r1, [pc, #636]	; (802402c <__ssvfiscanf_r+0x290>)
 8023dae:	91a0      	str	r1, [sp, #640]	; 0x280
 8023db0:	f10d 0804 	add.w	r8, sp, #4
 8023db4:	499e      	ldr	r1, [pc, #632]	; (8024030 <__ssvfiscanf_r+0x294>)
 8023db6:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8024034 <__ssvfiscanf_r+0x298>
 8023dba:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8023dbe:	4606      	mov	r6, r0
 8023dc0:	4692      	mov	sl, r2
 8023dc2:	91a1      	str	r1, [sp, #644]	; 0x284
 8023dc4:	9300      	str	r3, [sp, #0]
 8023dc6:	270a      	movs	r7, #10
 8023dc8:	f89a 3000 	ldrb.w	r3, [sl]
 8023dcc:	2b00      	cmp	r3, #0
 8023dce:	f000 812a 	beq.w	8024026 <__ssvfiscanf_r+0x28a>
 8023dd2:	4655      	mov	r5, sl
 8023dd4:	f7fb fe14 	bl	801fa00 <__locale_ctype_ptr>
 8023dd8:	f815 bb01 	ldrb.w	fp, [r5], #1
 8023ddc:	4458      	add	r0, fp
 8023dde:	7843      	ldrb	r3, [r0, #1]
 8023de0:	f013 0308 	ands.w	r3, r3, #8
 8023de4:	d01c      	beq.n	8023e20 <__ssvfiscanf_r+0x84>
 8023de6:	6863      	ldr	r3, [r4, #4]
 8023de8:	2b00      	cmp	r3, #0
 8023dea:	dd12      	ble.n	8023e12 <__ssvfiscanf_r+0x76>
 8023dec:	f7fb fe08 	bl	801fa00 <__locale_ctype_ptr>
 8023df0:	6823      	ldr	r3, [r4, #0]
 8023df2:	781a      	ldrb	r2, [r3, #0]
 8023df4:	4410      	add	r0, r2
 8023df6:	7842      	ldrb	r2, [r0, #1]
 8023df8:	0712      	lsls	r2, r2, #28
 8023dfa:	d401      	bmi.n	8023e00 <__ssvfiscanf_r+0x64>
 8023dfc:	46aa      	mov	sl, r5
 8023dfe:	e7e3      	b.n	8023dc8 <__ssvfiscanf_r+0x2c>
 8023e00:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8023e02:	3201      	adds	r2, #1
 8023e04:	9245      	str	r2, [sp, #276]	; 0x114
 8023e06:	6862      	ldr	r2, [r4, #4]
 8023e08:	3301      	adds	r3, #1
 8023e0a:	3a01      	subs	r2, #1
 8023e0c:	6062      	str	r2, [r4, #4]
 8023e0e:	6023      	str	r3, [r4, #0]
 8023e10:	e7e9      	b.n	8023de6 <__ssvfiscanf_r+0x4a>
 8023e12:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8023e14:	4621      	mov	r1, r4
 8023e16:	4630      	mov	r0, r6
 8023e18:	4798      	blx	r3
 8023e1a:	2800      	cmp	r0, #0
 8023e1c:	d0e6      	beq.n	8023dec <__ssvfiscanf_r+0x50>
 8023e1e:	e7ed      	b.n	8023dfc <__ssvfiscanf_r+0x60>
 8023e20:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8023e24:	f040 8082 	bne.w	8023f2c <__ssvfiscanf_r+0x190>
 8023e28:	9343      	str	r3, [sp, #268]	; 0x10c
 8023e2a:	9341      	str	r3, [sp, #260]	; 0x104
 8023e2c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8023e30:	2b2a      	cmp	r3, #42	; 0x2a
 8023e32:	d103      	bne.n	8023e3c <__ssvfiscanf_r+0xa0>
 8023e34:	2310      	movs	r3, #16
 8023e36:	9341      	str	r3, [sp, #260]	; 0x104
 8023e38:	f10a 0502 	add.w	r5, sl, #2
 8023e3c:	46aa      	mov	sl, r5
 8023e3e:	f815 1b01 	ldrb.w	r1, [r5], #1
 8023e42:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8023e46:	2a09      	cmp	r2, #9
 8023e48:	d922      	bls.n	8023e90 <__ssvfiscanf_r+0xf4>
 8023e4a:	2203      	movs	r2, #3
 8023e4c:	4879      	ldr	r0, [pc, #484]	; (8024034 <__ssvfiscanf_r+0x298>)
 8023e4e:	f7dc fa0f 	bl	8000270 <memchr>
 8023e52:	b138      	cbz	r0, 8023e64 <__ssvfiscanf_r+0xc8>
 8023e54:	eba0 0309 	sub.w	r3, r0, r9
 8023e58:	2001      	movs	r0, #1
 8023e5a:	4098      	lsls	r0, r3
 8023e5c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8023e5e:	4318      	orrs	r0, r3
 8023e60:	9041      	str	r0, [sp, #260]	; 0x104
 8023e62:	46aa      	mov	sl, r5
 8023e64:	f89a 3000 	ldrb.w	r3, [sl]
 8023e68:	2b67      	cmp	r3, #103	; 0x67
 8023e6a:	f10a 0501 	add.w	r5, sl, #1
 8023e6e:	d82b      	bhi.n	8023ec8 <__ssvfiscanf_r+0x12c>
 8023e70:	2b65      	cmp	r3, #101	; 0x65
 8023e72:	f080 809f 	bcs.w	8023fb4 <__ssvfiscanf_r+0x218>
 8023e76:	2b47      	cmp	r3, #71	; 0x47
 8023e78:	d810      	bhi.n	8023e9c <__ssvfiscanf_r+0x100>
 8023e7a:	2b45      	cmp	r3, #69	; 0x45
 8023e7c:	f080 809a 	bcs.w	8023fb4 <__ssvfiscanf_r+0x218>
 8023e80:	2b00      	cmp	r3, #0
 8023e82:	d06c      	beq.n	8023f5e <__ssvfiscanf_r+0x1c2>
 8023e84:	2b25      	cmp	r3, #37	; 0x25
 8023e86:	d051      	beq.n	8023f2c <__ssvfiscanf_r+0x190>
 8023e88:	2303      	movs	r3, #3
 8023e8a:	9347      	str	r3, [sp, #284]	; 0x11c
 8023e8c:	9742      	str	r7, [sp, #264]	; 0x108
 8023e8e:	e027      	b.n	8023ee0 <__ssvfiscanf_r+0x144>
 8023e90:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8023e92:	fb07 1303 	mla	r3, r7, r3, r1
 8023e96:	3b30      	subs	r3, #48	; 0x30
 8023e98:	9343      	str	r3, [sp, #268]	; 0x10c
 8023e9a:	e7cf      	b.n	8023e3c <__ssvfiscanf_r+0xa0>
 8023e9c:	2b5b      	cmp	r3, #91	; 0x5b
 8023e9e:	d06a      	beq.n	8023f76 <__ssvfiscanf_r+0x1da>
 8023ea0:	d80c      	bhi.n	8023ebc <__ssvfiscanf_r+0x120>
 8023ea2:	2b58      	cmp	r3, #88	; 0x58
 8023ea4:	d1f0      	bne.n	8023e88 <__ssvfiscanf_r+0xec>
 8023ea6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8023ea8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8023eac:	9241      	str	r2, [sp, #260]	; 0x104
 8023eae:	2210      	movs	r2, #16
 8023eb0:	9242      	str	r2, [sp, #264]	; 0x108
 8023eb2:	2b6e      	cmp	r3, #110	; 0x6e
 8023eb4:	bf8c      	ite	hi
 8023eb6:	2304      	movhi	r3, #4
 8023eb8:	2303      	movls	r3, #3
 8023eba:	e010      	b.n	8023ede <__ssvfiscanf_r+0x142>
 8023ebc:	2b63      	cmp	r3, #99	; 0x63
 8023ebe:	d065      	beq.n	8023f8c <__ssvfiscanf_r+0x1f0>
 8023ec0:	2b64      	cmp	r3, #100	; 0x64
 8023ec2:	d1e1      	bne.n	8023e88 <__ssvfiscanf_r+0xec>
 8023ec4:	9742      	str	r7, [sp, #264]	; 0x108
 8023ec6:	e7f4      	b.n	8023eb2 <__ssvfiscanf_r+0x116>
 8023ec8:	2b70      	cmp	r3, #112	; 0x70
 8023eca:	d04b      	beq.n	8023f64 <__ssvfiscanf_r+0x1c8>
 8023ecc:	d826      	bhi.n	8023f1c <__ssvfiscanf_r+0x180>
 8023ece:	2b6e      	cmp	r3, #110	; 0x6e
 8023ed0:	d062      	beq.n	8023f98 <__ssvfiscanf_r+0x1fc>
 8023ed2:	d84c      	bhi.n	8023f6e <__ssvfiscanf_r+0x1d2>
 8023ed4:	2b69      	cmp	r3, #105	; 0x69
 8023ed6:	d1d7      	bne.n	8023e88 <__ssvfiscanf_r+0xec>
 8023ed8:	2300      	movs	r3, #0
 8023eda:	9342      	str	r3, [sp, #264]	; 0x108
 8023edc:	2303      	movs	r3, #3
 8023ede:	9347      	str	r3, [sp, #284]	; 0x11c
 8023ee0:	6863      	ldr	r3, [r4, #4]
 8023ee2:	2b00      	cmp	r3, #0
 8023ee4:	dd68      	ble.n	8023fb8 <__ssvfiscanf_r+0x21c>
 8023ee6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8023ee8:	0659      	lsls	r1, r3, #25
 8023eea:	d407      	bmi.n	8023efc <__ssvfiscanf_r+0x160>
 8023eec:	f7fb fd88 	bl	801fa00 <__locale_ctype_ptr>
 8023ef0:	6823      	ldr	r3, [r4, #0]
 8023ef2:	781a      	ldrb	r2, [r3, #0]
 8023ef4:	4410      	add	r0, r2
 8023ef6:	7842      	ldrb	r2, [r0, #1]
 8023ef8:	0712      	lsls	r2, r2, #28
 8023efa:	d464      	bmi.n	8023fc6 <__ssvfiscanf_r+0x22a>
 8023efc:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8023efe:	2b02      	cmp	r3, #2
 8023f00:	dc73      	bgt.n	8023fea <__ssvfiscanf_r+0x24e>
 8023f02:	466b      	mov	r3, sp
 8023f04:	4622      	mov	r2, r4
 8023f06:	a941      	add	r1, sp, #260	; 0x104
 8023f08:	4630      	mov	r0, r6
 8023f0a:	f000 f9d7 	bl	80242bc <_scanf_chars>
 8023f0e:	2801      	cmp	r0, #1
 8023f10:	f000 8089 	beq.w	8024026 <__ssvfiscanf_r+0x28a>
 8023f14:	2802      	cmp	r0, #2
 8023f16:	f47f af71 	bne.w	8023dfc <__ssvfiscanf_r+0x60>
 8023f1a:	e01d      	b.n	8023f58 <__ssvfiscanf_r+0x1bc>
 8023f1c:	2b75      	cmp	r3, #117	; 0x75
 8023f1e:	d0d1      	beq.n	8023ec4 <__ssvfiscanf_r+0x128>
 8023f20:	2b78      	cmp	r3, #120	; 0x78
 8023f22:	d0c0      	beq.n	8023ea6 <__ssvfiscanf_r+0x10a>
 8023f24:	2b73      	cmp	r3, #115	; 0x73
 8023f26:	d1af      	bne.n	8023e88 <__ssvfiscanf_r+0xec>
 8023f28:	2302      	movs	r3, #2
 8023f2a:	e7d8      	b.n	8023ede <__ssvfiscanf_r+0x142>
 8023f2c:	6863      	ldr	r3, [r4, #4]
 8023f2e:	2b00      	cmp	r3, #0
 8023f30:	dd0c      	ble.n	8023f4c <__ssvfiscanf_r+0x1b0>
 8023f32:	6823      	ldr	r3, [r4, #0]
 8023f34:	781a      	ldrb	r2, [r3, #0]
 8023f36:	455a      	cmp	r2, fp
 8023f38:	d175      	bne.n	8024026 <__ssvfiscanf_r+0x28a>
 8023f3a:	3301      	adds	r3, #1
 8023f3c:	6862      	ldr	r2, [r4, #4]
 8023f3e:	6023      	str	r3, [r4, #0]
 8023f40:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8023f42:	3a01      	subs	r2, #1
 8023f44:	3301      	adds	r3, #1
 8023f46:	6062      	str	r2, [r4, #4]
 8023f48:	9345      	str	r3, [sp, #276]	; 0x114
 8023f4a:	e757      	b.n	8023dfc <__ssvfiscanf_r+0x60>
 8023f4c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8023f4e:	4621      	mov	r1, r4
 8023f50:	4630      	mov	r0, r6
 8023f52:	4798      	blx	r3
 8023f54:	2800      	cmp	r0, #0
 8023f56:	d0ec      	beq.n	8023f32 <__ssvfiscanf_r+0x196>
 8023f58:	9844      	ldr	r0, [sp, #272]	; 0x110
 8023f5a:	2800      	cmp	r0, #0
 8023f5c:	d159      	bne.n	8024012 <__ssvfiscanf_r+0x276>
 8023f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8023f62:	e05c      	b.n	802401e <__ssvfiscanf_r+0x282>
 8023f64:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8023f66:	f042 0220 	orr.w	r2, r2, #32
 8023f6a:	9241      	str	r2, [sp, #260]	; 0x104
 8023f6c:	e79b      	b.n	8023ea6 <__ssvfiscanf_r+0x10a>
 8023f6e:	2308      	movs	r3, #8
 8023f70:	9342      	str	r3, [sp, #264]	; 0x108
 8023f72:	2304      	movs	r3, #4
 8023f74:	e7b3      	b.n	8023ede <__ssvfiscanf_r+0x142>
 8023f76:	4629      	mov	r1, r5
 8023f78:	4640      	mov	r0, r8
 8023f7a:	f000 fb3f 	bl	80245fc <__sccl>
 8023f7e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8023f80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023f84:	9341      	str	r3, [sp, #260]	; 0x104
 8023f86:	4605      	mov	r5, r0
 8023f88:	2301      	movs	r3, #1
 8023f8a:	e7a8      	b.n	8023ede <__ssvfiscanf_r+0x142>
 8023f8c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8023f8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023f92:	9341      	str	r3, [sp, #260]	; 0x104
 8023f94:	2300      	movs	r3, #0
 8023f96:	e7a2      	b.n	8023ede <__ssvfiscanf_r+0x142>
 8023f98:	9841      	ldr	r0, [sp, #260]	; 0x104
 8023f9a:	06c3      	lsls	r3, r0, #27
 8023f9c:	f53f af2e 	bmi.w	8023dfc <__ssvfiscanf_r+0x60>
 8023fa0:	9b00      	ldr	r3, [sp, #0]
 8023fa2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8023fa4:	1d19      	adds	r1, r3, #4
 8023fa6:	9100      	str	r1, [sp, #0]
 8023fa8:	681b      	ldr	r3, [r3, #0]
 8023faa:	07c0      	lsls	r0, r0, #31
 8023fac:	bf4c      	ite	mi
 8023fae:	801a      	strhmi	r2, [r3, #0]
 8023fb0:	601a      	strpl	r2, [r3, #0]
 8023fb2:	e723      	b.n	8023dfc <__ssvfiscanf_r+0x60>
 8023fb4:	2305      	movs	r3, #5
 8023fb6:	e792      	b.n	8023ede <__ssvfiscanf_r+0x142>
 8023fb8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8023fba:	4621      	mov	r1, r4
 8023fbc:	4630      	mov	r0, r6
 8023fbe:	4798      	blx	r3
 8023fc0:	2800      	cmp	r0, #0
 8023fc2:	d090      	beq.n	8023ee6 <__ssvfiscanf_r+0x14a>
 8023fc4:	e7c8      	b.n	8023f58 <__ssvfiscanf_r+0x1bc>
 8023fc6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8023fc8:	3201      	adds	r2, #1
 8023fca:	9245      	str	r2, [sp, #276]	; 0x114
 8023fcc:	6862      	ldr	r2, [r4, #4]
 8023fce:	3a01      	subs	r2, #1
 8023fd0:	2a00      	cmp	r2, #0
 8023fd2:	6062      	str	r2, [r4, #4]
 8023fd4:	dd02      	ble.n	8023fdc <__ssvfiscanf_r+0x240>
 8023fd6:	3301      	adds	r3, #1
 8023fd8:	6023      	str	r3, [r4, #0]
 8023fda:	e787      	b.n	8023eec <__ssvfiscanf_r+0x150>
 8023fdc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8023fde:	4621      	mov	r1, r4
 8023fe0:	4630      	mov	r0, r6
 8023fe2:	4798      	blx	r3
 8023fe4:	2800      	cmp	r0, #0
 8023fe6:	d081      	beq.n	8023eec <__ssvfiscanf_r+0x150>
 8023fe8:	e7b6      	b.n	8023f58 <__ssvfiscanf_r+0x1bc>
 8023fea:	2b04      	cmp	r3, #4
 8023fec:	dc06      	bgt.n	8023ffc <__ssvfiscanf_r+0x260>
 8023fee:	466b      	mov	r3, sp
 8023ff0:	4622      	mov	r2, r4
 8023ff2:	a941      	add	r1, sp, #260	; 0x104
 8023ff4:	4630      	mov	r0, r6
 8023ff6:	f000 f9c5 	bl	8024384 <_scanf_i>
 8023ffa:	e788      	b.n	8023f0e <__ssvfiscanf_r+0x172>
 8023ffc:	4b0e      	ldr	r3, [pc, #56]	; (8024038 <__ssvfiscanf_r+0x29c>)
 8023ffe:	2b00      	cmp	r3, #0
 8024000:	f43f aefc 	beq.w	8023dfc <__ssvfiscanf_r+0x60>
 8024004:	466b      	mov	r3, sp
 8024006:	4622      	mov	r2, r4
 8024008:	a941      	add	r1, sp, #260	; 0x104
 802400a:	4630      	mov	r0, r6
 802400c:	f3af 8000 	nop.w
 8024010:	e77d      	b.n	8023f0e <__ssvfiscanf_r+0x172>
 8024012:	89a3      	ldrh	r3, [r4, #12]
 8024014:	f013 0f40 	tst.w	r3, #64	; 0x40
 8024018:	bf18      	it	ne
 802401a:	f04f 30ff 	movne.w	r0, #4294967295
 802401e:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8024022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024026:	9844      	ldr	r0, [sp, #272]	; 0x110
 8024028:	e7f9      	b.n	802401e <__ssvfiscanf_r+0x282>
 802402a:	bf00      	nop
 802402c:	08023ce9 	.word	0x08023ce9
 8024030:	08023d63 	.word	0x08023d63
 8024034:	0803ff72 	.word	0x0803ff72
 8024038:	00000000 	.word	0x00000000

0802403c <__sfputc_r>:
 802403c:	6893      	ldr	r3, [r2, #8]
 802403e:	3b01      	subs	r3, #1
 8024040:	2b00      	cmp	r3, #0
 8024042:	b410      	push	{r4}
 8024044:	6093      	str	r3, [r2, #8]
 8024046:	da08      	bge.n	802405a <__sfputc_r+0x1e>
 8024048:	6994      	ldr	r4, [r2, #24]
 802404a:	42a3      	cmp	r3, r4
 802404c:	db01      	blt.n	8024052 <__sfputc_r+0x16>
 802404e:	290a      	cmp	r1, #10
 8024050:	d103      	bne.n	802405a <__sfputc_r+0x1e>
 8024052:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024056:	f7fd bfcd 	b.w	8021ff4 <__swbuf_r>
 802405a:	6813      	ldr	r3, [r2, #0]
 802405c:	1c58      	adds	r0, r3, #1
 802405e:	6010      	str	r0, [r2, #0]
 8024060:	7019      	strb	r1, [r3, #0]
 8024062:	4608      	mov	r0, r1
 8024064:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024068:	4770      	bx	lr

0802406a <__sfputs_r>:
 802406a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802406c:	4606      	mov	r6, r0
 802406e:	460f      	mov	r7, r1
 8024070:	4614      	mov	r4, r2
 8024072:	18d5      	adds	r5, r2, r3
 8024074:	42ac      	cmp	r4, r5
 8024076:	d101      	bne.n	802407c <__sfputs_r+0x12>
 8024078:	2000      	movs	r0, #0
 802407a:	e007      	b.n	802408c <__sfputs_r+0x22>
 802407c:	463a      	mov	r2, r7
 802407e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024082:	4630      	mov	r0, r6
 8024084:	f7ff ffda 	bl	802403c <__sfputc_r>
 8024088:	1c43      	adds	r3, r0, #1
 802408a:	d1f3      	bne.n	8024074 <__sfputs_r+0xa>
 802408c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08024090 <_vfiprintf_r>:
 8024090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024094:	460c      	mov	r4, r1
 8024096:	b09d      	sub	sp, #116	; 0x74
 8024098:	4617      	mov	r7, r2
 802409a:	461d      	mov	r5, r3
 802409c:	4606      	mov	r6, r0
 802409e:	b118      	cbz	r0, 80240a8 <_vfiprintf_r+0x18>
 80240a0:	6983      	ldr	r3, [r0, #24]
 80240a2:	b90b      	cbnz	r3, 80240a8 <_vfiprintf_r+0x18>
 80240a4:	f7fe ffb4 	bl	8023010 <__sinit>
 80240a8:	4b7c      	ldr	r3, [pc, #496]	; (802429c <_vfiprintf_r+0x20c>)
 80240aa:	429c      	cmp	r4, r3
 80240ac:	d158      	bne.n	8024160 <_vfiprintf_r+0xd0>
 80240ae:	6874      	ldr	r4, [r6, #4]
 80240b0:	89a3      	ldrh	r3, [r4, #12]
 80240b2:	0718      	lsls	r0, r3, #28
 80240b4:	d55e      	bpl.n	8024174 <_vfiprintf_r+0xe4>
 80240b6:	6923      	ldr	r3, [r4, #16]
 80240b8:	2b00      	cmp	r3, #0
 80240ba:	d05b      	beq.n	8024174 <_vfiprintf_r+0xe4>
 80240bc:	2300      	movs	r3, #0
 80240be:	9309      	str	r3, [sp, #36]	; 0x24
 80240c0:	2320      	movs	r3, #32
 80240c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80240c6:	2330      	movs	r3, #48	; 0x30
 80240c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80240cc:	9503      	str	r5, [sp, #12]
 80240ce:	f04f 0b01 	mov.w	fp, #1
 80240d2:	46b8      	mov	r8, r7
 80240d4:	4645      	mov	r5, r8
 80240d6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80240da:	b10b      	cbz	r3, 80240e0 <_vfiprintf_r+0x50>
 80240dc:	2b25      	cmp	r3, #37	; 0x25
 80240de:	d154      	bne.n	802418a <_vfiprintf_r+0xfa>
 80240e0:	ebb8 0a07 	subs.w	sl, r8, r7
 80240e4:	d00b      	beq.n	80240fe <_vfiprintf_r+0x6e>
 80240e6:	4653      	mov	r3, sl
 80240e8:	463a      	mov	r2, r7
 80240ea:	4621      	mov	r1, r4
 80240ec:	4630      	mov	r0, r6
 80240ee:	f7ff ffbc 	bl	802406a <__sfputs_r>
 80240f2:	3001      	adds	r0, #1
 80240f4:	f000 80c2 	beq.w	802427c <_vfiprintf_r+0x1ec>
 80240f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80240fa:	4453      	add	r3, sl
 80240fc:	9309      	str	r3, [sp, #36]	; 0x24
 80240fe:	f898 3000 	ldrb.w	r3, [r8]
 8024102:	2b00      	cmp	r3, #0
 8024104:	f000 80ba 	beq.w	802427c <_vfiprintf_r+0x1ec>
 8024108:	2300      	movs	r3, #0
 802410a:	f04f 32ff 	mov.w	r2, #4294967295
 802410e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8024112:	9304      	str	r3, [sp, #16]
 8024114:	9307      	str	r3, [sp, #28]
 8024116:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802411a:	931a      	str	r3, [sp, #104]	; 0x68
 802411c:	46a8      	mov	r8, r5
 802411e:	2205      	movs	r2, #5
 8024120:	f818 1b01 	ldrb.w	r1, [r8], #1
 8024124:	485e      	ldr	r0, [pc, #376]	; (80242a0 <_vfiprintf_r+0x210>)
 8024126:	f7dc f8a3 	bl	8000270 <memchr>
 802412a:	9b04      	ldr	r3, [sp, #16]
 802412c:	bb78      	cbnz	r0, 802418e <_vfiprintf_r+0xfe>
 802412e:	06d9      	lsls	r1, r3, #27
 8024130:	bf44      	itt	mi
 8024132:	2220      	movmi	r2, #32
 8024134:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8024138:	071a      	lsls	r2, r3, #28
 802413a:	bf44      	itt	mi
 802413c:	222b      	movmi	r2, #43	; 0x2b
 802413e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8024142:	782a      	ldrb	r2, [r5, #0]
 8024144:	2a2a      	cmp	r2, #42	; 0x2a
 8024146:	d02a      	beq.n	802419e <_vfiprintf_r+0x10e>
 8024148:	9a07      	ldr	r2, [sp, #28]
 802414a:	46a8      	mov	r8, r5
 802414c:	2000      	movs	r0, #0
 802414e:	250a      	movs	r5, #10
 8024150:	4641      	mov	r1, r8
 8024152:	f811 3b01 	ldrb.w	r3, [r1], #1
 8024156:	3b30      	subs	r3, #48	; 0x30
 8024158:	2b09      	cmp	r3, #9
 802415a:	d969      	bls.n	8024230 <_vfiprintf_r+0x1a0>
 802415c:	b360      	cbz	r0, 80241b8 <_vfiprintf_r+0x128>
 802415e:	e024      	b.n	80241aa <_vfiprintf_r+0x11a>
 8024160:	4b50      	ldr	r3, [pc, #320]	; (80242a4 <_vfiprintf_r+0x214>)
 8024162:	429c      	cmp	r4, r3
 8024164:	d101      	bne.n	802416a <_vfiprintf_r+0xda>
 8024166:	68b4      	ldr	r4, [r6, #8]
 8024168:	e7a2      	b.n	80240b0 <_vfiprintf_r+0x20>
 802416a:	4b4f      	ldr	r3, [pc, #316]	; (80242a8 <_vfiprintf_r+0x218>)
 802416c:	429c      	cmp	r4, r3
 802416e:	bf08      	it	eq
 8024170:	68f4      	ldreq	r4, [r6, #12]
 8024172:	e79d      	b.n	80240b0 <_vfiprintf_r+0x20>
 8024174:	4621      	mov	r1, r4
 8024176:	4630      	mov	r0, r6
 8024178:	f7fd ffae 	bl	80220d8 <__swsetup_r>
 802417c:	2800      	cmp	r0, #0
 802417e:	d09d      	beq.n	80240bc <_vfiprintf_r+0x2c>
 8024180:	f04f 30ff 	mov.w	r0, #4294967295
 8024184:	b01d      	add	sp, #116	; 0x74
 8024186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802418a:	46a8      	mov	r8, r5
 802418c:	e7a2      	b.n	80240d4 <_vfiprintf_r+0x44>
 802418e:	4a44      	ldr	r2, [pc, #272]	; (80242a0 <_vfiprintf_r+0x210>)
 8024190:	1a80      	subs	r0, r0, r2
 8024192:	fa0b f000 	lsl.w	r0, fp, r0
 8024196:	4318      	orrs	r0, r3
 8024198:	9004      	str	r0, [sp, #16]
 802419a:	4645      	mov	r5, r8
 802419c:	e7be      	b.n	802411c <_vfiprintf_r+0x8c>
 802419e:	9a03      	ldr	r2, [sp, #12]
 80241a0:	1d11      	adds	r1, r2, #4
 80241a2:	6812      	ldr	r2, [r2, #0]
 80241a4:	9103      	str	r1, [sp, #12]
 80241a6:	2a00      	cmp	r2, #0
 80241a8:	db01      	blt.n	80241ae <_vfiprintf_r+0x11e>
 80241aa:	9207      	str	r2, [sp, #28]
 80241ac:	e004      	b.n	80241b8 <_vfiprintf_r+0x128>
 80241ae:	4252      	negs	r2, r2
 80241b0:	f043 0302 	orr.w	r3, r3, #2
 80241b4:	9207      	str	r2, [sp, #28]
 80241b6:	9304      	str	r3, [sp, #16]
 80241b8:	f898 3000 	ldrb.w	r3, [r8]
 80241bc:	2b2e      	cmp	r3, #46	; 0x2e
 80241be:	d10e      	bne.n	80241de <_vfiprintf_r+0x14e>
 80241c0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80241c4:	2b2a      	cmp	r3, #42	; 0x2a
 80241c6:	d138      	bne.n	802423a <_vfiprintf_r+0x1aa>
 80241c8:	9b03      	ldr	r3, [sp, #12]
 80241ca:	1d1a      	adds	r2, r3, #4
 80241cc:	681b      	ldr	r3, [r3, #0]
 80241ce:	9203      	str	r2, [sp, #12]
 80241d0:	2b00      	cmp	r3, #0
 80241d2:	bfb8      	it	lt
 80241d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80241d8:	f108 0802 	add.w	r8, r8, #2
 80241dc:	9305      	str	r3, [sp, #20]
 80241de:	4d33      	ldr	r5, [pc, #204]	; (80242ac <_vfiprintf_r+0x21c>)
 80241e0:	f898 1000 	ldrb.w	r1, [r8]
 80241e4:	2203      	movs	r2, #3
 80241e6:	4628      	mov	r0, r5
 80241e8:	f7dc f842 	bl	8000270 <memchr>
 80241ec:	b140      	cbz	r0, 8024200 <_vfiprintf_r+0x170>
 80241ee:	2340      	movs	r3, #64	; 0x40
 80241f0:	1b40      	subs	r0, r0, r5
 80241f2:	fa03 f000 	lsl.w	r0, r3, r0
 80241f6:	9b04      	ldr	r3, [sp, #16]
 80241f8:	4303      	orrs	r3, r0
 80241fa:	f108 0801 	add.w	r8, r8, #1
 80241fe:	9304      	str	r3, [sp, #16]
 8024200:	f898 1000 	ldrb.w	r1, [r8]
 8024204:	482a      	ldr	r0, [pc, #168]	; (80242b0 <_vfiprintf_r+0x220>)
 8024206:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802420a:	2206      	movs	r2, #6
 802420c:	f108 0701 	add.w	r7, r8, #1
 8024210:	f7dc f82e 	bl	8000270 <memchr>
 8024214:	2800      	cmp	r0, #0
 8024216:	d037      	beq.n	8024288 <_vfiprintf_r+0x1f8>
 8024218:	4b26      	ldr	r3, [pc, #152]	; (80242b4 <_vfiprintf_r+0x224>)
 802421a:	bb1b      	cbnz	r3, 8024264 <_vfiprintf_r+0x1d4>
 802421c:	9b03      	ldr	r3, [sp, #12]
 802421e:	3307      	adds	r3, #7
 8024220:	f023 0307 	bic.w	r3, r3, #7
 8024224:	3308      	adds	r3, #8
 8024226:	9303      	str	r3, [sp, #12]
 8024228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802422a:	444b      	add	r3, r9
 802422c:	9309      	str	r3, [sp, #36]	; 0x24
 802422e:	e750      	b.n	80240d2 <_vfiprintf_r+0x42>
 8024230:	fb05 3202 	mla	r2, r5, r2, r3
 8024234:	2001      	movs	r0, #1
 8024236:	4688      	mov	r8, r1
 8024238:	e78a      	b.n	8024150 <_vfiprintf_r+0xc0>
 802423a:	2300      	movs	r3, #0
 802423c:	f108 0801 	add.w	r8, r8, #1
 8024240:	9305      	str	r3, [sp, #20]
 8024242:	4619      	mov	r1, r3
 8024244:	250a      	movs	r5, #10
 8024246:	4640      	mov	r0, r8
 8024248:	f810 2b01 	ldrb.w	r2, [r0], #1
 802424c:	3a30      	subs	r2, #48	; 0x30
 802424e:	2a09      	cmp	r2, #9
 8024250:	d903      	bls.n	802425a <_vfiprintf_r+0x1ca>
 8024252:	2b00      	cmp	r3, #0
 8024254:	d0c3      	beq.n	80241de <_vfiprintf_r+0x14e>
 8024256:	9105      	str	r1, [sp, #20]
 8024258:	e7c1      	b.n	80241de <_vfiprintf_r+0x14e>
 802425a:	fb05 2101 	mla	r1, r5, r1, r2
 802425e:	2301      	movs	r3, #1
 8024260:	4680      	mov	r8, r0
 8024262:	e7f0      	b.n	8024246 <_vfiprintf_r+0x1b6>
 8024264:	ab03      	add	r3, sp, #12
 8024266:	9300      	str	r3, [sp, #0]
 8024268:	4622      	mov	r2, r4
 802426a:	4b13      	ldr	r3, [pc, #76]	; (80242b8 <_vfiprintf_r+0x228>)
 802426c:	a904      	add	r1, sp, #16
 802426e:	4630      	mov	r0, r6
 8024270:	f7fb fff6 	bl	8020260 <_printf_float>
 8024274:	f1b0 3fff 	cmp.w	r0, #4294967295
 8024278:	4681      	mov	r9, r0
 802427a:	d1d5      	bne.n	8024228 <_vfiprintf_r+0x198>
 802427c:	89a3      	ldrh	r3, [r4, #12]
 802427e:	065b      	lsls	r3, r3, #25
 8024280:	f53f af7e 	bmi.w	8024180 <_vfiprintf_r+0xf0>
 8024284:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024286:	e77d      	b.n	8024184 <_vfiprintf_r+0xf4>
 8024288:	ab03      	add	r3, sp, #12
 802428a:	9300      	str	r3, [sp, #0]
 802428c:	4622      	mov	r2, r4
 802428e:	4b0a      	ldr	r3, [pc, #40]	; (80242b8 <_vfiprintf_r+0x228>)
 8024290:	a904      	add	r1, sp, #16
 8024292:	4630      	mov	r0, r6
 8024294:	f7fc fa86 	bl	80207a4 <_printf_i>
 8024298:	e7ec      	b.n	8024274 <_vfiprintf_r+0x1e4>
 802429a:	bf00      	nop
 802429c:	0803fe30 	.word	0x0803fe30
 80242a0:	0803ff6c 	.word	0x0803ff6c
 80242a4:	0803fe50 	.word	0x0803fe50
 80242a8:	0803fe10 	.word	0x0803fe10
 80242ac:	0803ff72 	.word	0x0803ff72
 80242b0:	0803ff76 	.word	0x0803ff76
 80242b4:	08020261 	.word	0x08020261
 80242b8:	0802406b 	.word	0x0802406b

080242bc <_scanf_chars>:
 80242bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80242c0:	4615      	mov	r5, r2
 80242c2:	688a      	ldr	r2, [r1, #8]
 80242c4:	4680      	mov	r8, r0
 80242c6:	460c      	mov	r4, r1
 80242c8:	b932      	cbnz	r2, 80242d8 <_scanf_chars+0x1c>
 80242ca:	698a      	ldr	r2, [r1, #24]
 80242cc:	2a00      	cmp	r2, #0
 80242ce:	bf14      	ite	ne
 80242d0:	f04f 32ff 	movne.w	r2, #4294967295
 80242d4:	2201      	moveq	r2, #1
 80242d6:	608a      	str	r2, [r1, #8]
 80242d8:	6822      	ldr	r2, [r4, #0]
 80242da:	06d1      	lsls	r1, r2, #27
 80242dc:	bf5f      	itttt	pl
 80242de:	681a      	ldrpl	r2, [r3, #0]
 80242e0:	1d11      	addpl	r1, r2, #4
 80242e2:	6019      	strpl	r1, [r3, #0]
 80242e4:	6817      	ldrpl	r7, [r2, #0]
 80242e6:	2600      	movs	r6, #0
 80242e8:	69a3      	ldr	r3, [r4, #24]
 80242ea:	b1db      	cbz	r3, 8024324 <_scanf_chars+0x68>
 80242ec:	2b01      	cmp	r3, #1
 80242ee:	d107      	bne.n	8024300 <_scanf_chars+0x44>
 80242f0:	682b      	ldr	r3, [r5, #0]
 80242f2:	6962      	ldr	r2, [r4, #20]
 80242f4:	781b      	ldrb	r3, [r3, #0]
 80242f6:	5cd3      	ldrb	r3, [r2, r3]
 80242f8:	b9a3      	cbnz	r3, 8024324 <_scanf_chars+0x68>
 80242fa:	2e00      	cmp	r6, #0
 80242fc:	d132      	bne.n	8024364 <_scanf_chars+0xa8>
 80242fe:	e006      	b.n	802430e <_scanf_chars+0x52>
 8024300:	2b02      	cmp	r3, #2
 8024302:	d007      	beq.n	8024314 <_scanf_chars+0x58>
 8024304:	2e00      	cmp	r6, #0
 8024306:	d12d      	bne.n	8024364 <_scanf_chars+0xa8>
 8024308:	69a3      	ldr	r3, [r4, #24]
 802430a:	2b01      	cmp	r3, #1
 802430c:	d12a      	bne.n	8024364 <_scanf_chars+0xa8>
 802430e:	2001      	movs	r0, #1
 8024310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024314:	f7fb fb74 	bl	801fa00 <__locale_ctype_ptr>
 8024318:	682b      	ldr	r3, [r5, #0]
 802431a:	781b      	ldrb	r3, [r3, #0]
 802431c:	4418      	add	r0, r3
 802431e:	7843      	ldrb	r3, [r0, #1]
 8024320:	071b      	lsls	r3, r3, #28
 8024322:	d4ef      	bmi.n	8024304 <_scanf_chars+0x48>
 8024324:	6823      	ldr	r3, [r4, #0]
 8024326:	06da      	lsls	r2, r3, #27
 8024328:	bf5e      	ittt	pl
 802432a:	682b      	ldrpl	r3, [r5, #0]
 802432c:	781b      	ldrbpl	r3, [r3, #0]
 802432e:	703b      	strbpl	r3, [r7, #0]
 8024330:	682a      	ldr	r2, [r5, #0]
 8024332:	686b      	ldr	r3, [r5, #4]
 8024334:	f102 0201 	add.w	r2, r2, #1
 8024338:	602a      	str	r2, [r5, #0]
 802433a:	68a2      	ldr	r2, [r4, #8]
 802433c:	f103 33ff 	add.w	r3, r3, #4294967295
 8024340:	f102 32ff 	add.w	r2, r2, #4294967295
 8024344:	606b      	str	r3, [r5, #4]
 8024346:	f106 0601 	add.w	r6, r6, #1
 802434a:	bf58      	it	pl
 802434c:	3701      	addpl	r7, #1
 802434e:	60a2      	str	r2, [r4, #8]
 8024350:	b142      	cbz	r2, 8024364 <_scanf_chars+0xa8>
 8024352:	2b00      	cmp	r3, #0
 8024354:	dcc8      	bgt.n	80242e8 <_scanf_chars+0x2c>
 8024356:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802435a:	4629      	mov	r1, r5
 802435c:	4640      	mov	r0, r8
 802435e:	4798      	blx	r3
 8024360:	2800      	cmp	r0, #0
 8024362:	d0c1      	beq.n	80242e8 <_scanf_chars+0x2c>
 8024364:	6823      	ldr	r3, [r4, #0]
 8024366:	f013 0310 	ands.w	r3, r3, #16
 802436a:	d105      	bne.n	8024378 <_scanf_chars+0xbc>
 802436c:	68e2      	ldr	r2, [r4, #12]
 802436e:	3201      	adds	r2, #1
 8024370:	60e2      	str	r2, [r4, #12]
 8024372:	69a2      	ldr	r2, [r4, #24]
 8024374:	b102      	cbz	r2, 8024378 <_scanf_chars+0xbc>
 8024376:	703b      	strb	r3, [r7, #0]
 8024378:	6923      	ldr	r3, [r4, #16]
 802437a:	441e      	add	r6, r3
 802437c:	6126      	str	r6, [r4, #16]
 802437e:	2000      	movs	r0, #0
 8024380:	e7c6      	b.n	8024310 <_scanf_chars+0x54>
	...

08024384 <_scanf_i>:
 8024384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024388:	469a      	mov	sl, r3
 802438a:	4b74      	ldr	r3, [pc, #464]	; (802455c <_scanf_i+0x1d8>)
 802438c:	460c      	mov	r4, r1
 802438e:	4683      	mov	fp, r0
 8024390:	4616      	mov	r6, r2
 8024392:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8024396:	b087      	sub	sp, #28
 8024398:	ab03      	add	r3, sp, #12
 802439a:	68a7      	ldr	r7, [r4, #8]
 802439c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80243a0:	4b6f      	ldr	r3, [pc, #444]	; (8024560 <_scanf_i+0x1dc>)
 80243a2:	69a1      	ldr	r1, [r4, #24]
 80243a4:	4a6f      	ldr	r2, [pc, #444]	; (8024564 <_scanf_i+0x1e0>)
 80243a6:	2903      	cmp	r1, #3
 80243a8:	bf08      	it	eq
 80243aa:	461a      	moveq	r2, r3
 80243ac:	1e7b      	subs	r3, r7, #1
 80243ae:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80243b2:	bf84      	itt	hi
 80243b4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80243b8:	60a3      	strhi	r3, [r4, #8]
 80243ba:	6823      	ldr	r3, [r4, #0]
 80243bc:	9200      	str	r2, [sp, #0]
 80243be:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80243c2:	bf88      	it	hi
 80243c4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80243c8:	f104 091c 	add.w	r9, r4, #28
 80243cc:	6023      	str	r3, [r4, #0]
 80243ce:	bf8c      	ite	hi
 80243d0:	197f      	addhi	r7, r7, r5
 80243d2:	2700      	movls	r7, #0
 80243d4:	464b      	mov	r3, r9
 80243d6:	f04f 0800 	mov.w	r8, #0
 80243da:	9301      	str	r3, [sp, #4]
 80243dc:	6831      	ldr	r1, [r6, #0]
 80243de:	ab03      	add	r3, sp, #12
 80243e0:	2202      	movs	r2, #2
 80243e2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80243e6:	7809      	ldrb	r1, [r1, #0]
 80243e8:	f7db ff42 	bl	8000270 <memchr>
 80243ec:	9b01      	ldr	r3, [sp, #4]
 80243ee:	b330      	cbz	r0, 802443e <_scanf_i+0xba>
 80243f0:	f1b8 0f01 	cmp.w	r8, #1
 80243f4:	d15a      	bne.n	80244ac <_scanf_i+0x128>
 80243f6:	6862      	ldr	r2, [r4, #4]
 80243f8:	b92a      	cbnz	r2, 8024406 <_scanf_i+0x82>
 80243fa:	6822      	ldr	r2, [r4, #0]
 80243fc:	2108      	movs	r1, #8
 80243fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8024402:	6061      	str	r1, [r4, #4]
 8024404:	6022      	str	r2, [r4, #0]
 8024406:	6822      	ldr	r2, [r4, #0]
 8024408:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 802440c:	6022      	str	r2, [r4, #0]
 802440e:	68a2      	ldr	r2, [r4, #8]
 8024410:	1e51      	subs	r1, r2, #1
 8024412:	60a1      	str	r1, [r4, #8]
 8024414:	b19a      	cbz	r2, 802443e <_scanf_i+0xba>
 8024416:	6832      	ldr	r2, [r6, #0]
 8024418:	1c51      	adds	r1, r2, #1
 802441a:	6031      	str	r1, [r6, #0]
 802441c:	7812      	ldrb	r2, [r2, #0]
 802441e:	701a      	strb	r2, [r3, #0]
 8024420:	1c5d      	adds	r5, r3, #1
 8024422:	6873      	ldr	r3, [r6, #4]
 8024424:	3b01      	subs	r3, #1
 8024426:	2b00      	cmp	r3, #0
 8024428:	6073      	str	r3, [r6, #4]
 802442a:	dc07      	bgt.n	802443c <_scanf_i+0xb8>
 802442c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8024430:	4631      	mov	r1, r6
 8024432:	4658      	mov	r0, fp
 8024434:	4798      	blx	r3
 8024436:	2800      	cmp	r0, #0
 8024438:	f040 8086 	bne.w	8024548 <_scanf_i+0x1c4>
 802443c:	462b      	mov	r3, r5
 802443e:	f108 0801 	add.w	r8, r8, #1
 8024442:	f1b8 0f03 	cmp.w	r8, #3
 8024446:	d1c8      	bne.n	80243da <_scanf_i+0x56>
 8024448:	6862      	ldr	r2, [r4, #4]
 802444a:	b90a      	cbnz	r2, 8024450 <_scanf_i+0xcc>
 802444c:	220a      	movs	r2, #10
 802444e:	6062      	str	r2, [r4, #4]
 8024450:	6862      	ldr	r2, [r4, #4]
 8024452:	4945      	ldr	r1, [pc, #276]	; (8024568 <_scanf_i+0x1e4>)
 8024454:	6960      	ldr	r0, [r4, #20]
 8024456:	9301      	str	r3, [sp, #4]
 8024458:	1a89      	subs	r1, r1, r2
 802445a:	f000 f8cf 	bl	80245fc <__sccl>
 802445e:	9b01      	ldr	r3, [sp, #4]
 8024460:	f04f 0800 	mov.w	r8, #0
 8024464:	461d      	mov	r5, r3
 8024466:	68a3      	ldr	r3, [r4, #8]
 8024468:	6822      	ldr	r2, [r4, #0]
 802446a:	2b00      	cmp	r3, #0
 802446c:	d03a      	beq.n	80244e4 <_scanf_i+0x160>
 802446e:	6831      	ldr	r1, [r6, #0]
 8024470:	6960      	ldr	r0, [r4, #20]
 8024472:	f891 c000 	ldrb.w	ip, [r1]
 8024476:	f810 000c 	ldrb.w	r0, [r0, ip]
 802447a:	2800      	cmp	r0, #0
 802447c:	d032      	beq.n	80244e4 <_scanf_i+0x160>
 802447e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8024482:	d121      	bne.n	80244c8 <_scanf_i+0x144>
 8024484:	0510      	lsls	r0, r2, #20
 8024486:	d51f      	bpl.n	80244c8 <_scanf_i+0x144>
 8024488:	f108 0801 	add.w	r8, r8, #1
 802448c:	b117      	cbz	r7, 8024494 <_scanf_i+0x110>
 802448e:	3301      	adds	r3, #1
 8024490:	3f01      	subs	r7, #1
 8024492:	60a3      	str	r3, [r4, #8]
 8024494:	6873      	ldr	r3, [r6, #4]
 8024496:	3b01      	subs	r3, #1
 8024498:	2b00      	cmp	r3, #0
 802449a:	6073      	str	r3, [r6, #4]
 802449c:	dd1b      	ble.n	80244d6 <_scanf_i+0x152>
 802449e:	6833      	ldr	r3, [r6, #0]
 80244a0:	3301      	adds	r3, #1
 80244a2:	6033      	str	r3, [r6, #0]
 80244a4:	68a3      	ldr	r3, [r4, #8]
 80244a6:	3b01      	subs	r3, #1
 80244a8:	60a3      	str	r3, [r4, #8]
 80244aa:	e7dc      	b.n	8024466 <_scanf_i+0xe2>
 80244ac:	f1b8 0f02 	cmp.w	r8, #2
 80244b0:	d1ad      	bne.n	802440e <_scanf_i+0x8a>
 80244b2:	6822      	ldr	r2, [r4, #0]
 80244b4:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80244b8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80244bc:	d1bf      	bne.n	802443e <_scanf_i+0xba>
 80244be:	2110      	movs	r1, #16
 80244c0:	6061      	str	r1, [r4, #4]
 80244c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80244c6:	e7a1      	b.n	802440c <_scanf_i+0x88>
 80244c8:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80244cc:	6022      	str	r2, [r4, #0]
 80244ce:	780b      	ldrb	r3, [r1, #0]
 80244d0:	702b      	strb	r3, [r5, #0]
 80244d2:	3501      	adds	r5, #1
 80244d4:	e7de      	b.n	8024494 <_scanf_i+0x110>
 80244d6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80244da:	4631      	mov	r1, r6
 80244dc:	4658      	mov	r0, fp
 80244de:	4798      	blx	r3
 80244e0:	2800      	cmp	r0, #0
 80244e2:	d0df      	beq.n	80244a4 <_scanf_i+0x120>
 80244e4:	6823      	ldr	r3, [r4, #0]
 80244e6:	05d9      	lsls	r1, r3, #23
 80244e8:	d50c      	bpl.n	8024504 <_scanf_i+0x180>
 80244ea:	454d      	cmp	r5, r9
 80244ec:	d908      	bls.n	8024500 <_scanf_i+0x17c>
 80244ee:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80244f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80244f6:	4632      	mov	r2, r6
 80244f8:	4658      	mov	r0, fp
 80244fa:	4798      	blx	r3
 80244fc:	1e6f      	subs	r7, r5, #1
 80244fe:	463d      	mov	r5, r7
 8024500:	454d      	cmp	r5, r9
 8024502:	d029      	beq.n	8024558 <_scanf_i+0x1d4>
 8024504:	6822      	ldr	r2, [r4, #0]
 8024506:	f012 0210 	ands.w	r2, r2, #16
 802450a:	d113      	bne.n	8024534 <_scanf_i+0x1b0>
 802450c:	702a      	strb	r2, [r5, #0]
 802450e:	6863      	ldr	r3, [r4, #4]
 8024510:	9e00      	ldr	r6, [sp, #0]
 8024512:	4649      	mov	r1, r9
 8024514:	4658      	mov	r0, fp
 8024516:	47b0      	blx	r6
 8024518:	f8da 3000 	ldr.w	r3, [sl]
 802451c:	6821      	ldr	r1, [r4, #0]
 802451e:	1d1a      	adds	r2, r3, #4
 8024520:	f8ca 2000 	str.w	r2, [sl]
 8024524:	f011 0f20 	tst.w	r1, #32
 8024528:	681b      	ldr	r3, [r3, #0]
 802452a:	d010      	beq.n	802454e <_scanf_i+0x1ca>
 802452c:	6018      	str	r0, [r3, #0]
 802452e:	68e3      	ldr	r3, [r4, #12]
 8024530:	3301      	adds	r3, #1
 8024532:	60e3      	str	r3, [r4, #12]
 8024534:	eba5 0509 	sub.w	r5, r5, r9
 8024538:	44a8      	add	r8, r5
 802453a:	6925      	ldr	r5, [r4, #16]
 802453c:	4445      	add	r5, r8
 802453e:	6125      	str	r5, [r4, #16]
 8024540:	2000      	movs	r0, #0
 8024542:	b007      	add	sp, #28
 8024544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024548:	f04f 0800 	mov.w	r8, #0
 802454c:	e7ca      	b.n	80244e4 <_scanf_i+0x160>
 802454e:	07ca      	lsls	r2, r1, #31
 8024550:	bf4c      	ite	mi
 8024552:	8018      	strhmi	r0, [r3, #0]
 8024554:	6018      	strpl	r0, [r3, #0]
 8024556:	e7ea      	b.n	802452e <_scanf_i+0x1aa>
 8024558:	2001      	movs	r0, #1
 802455a:	e7f2      	b.n	8024542 <_scanf_i+0x1be>
 802455c:	080248ec 	.word	0x080248ec
 8024560:	08021a05 	.word	0x08021a05
 8024564:	08021b49 	.word	0x08021b49
 8024568:	0803ff8d 	.word	0x0803ff8d

0802456c <_putc_r>:
 802456c:	b570      	push	{r4, r5, r6, lr}
 802456e:	460d      	mov	r5, r1
 8024570:	4614      	mov	r4, r2
 8024572:	4606      	mov	r6, r0
 8024574:	b118      	cbz	r0, 802457e <_putc_r+0x12>
 8024576:	6983      	ldr	r3, [r0, #24]
 8024578:	b90b      	cbnz	r3, 802457e <_putc_r+0x12>
 802457a:	f7fe fd49 	bl	8023010 <__sinit>
 802457e:	4b13      	ldr	r3, [pc, #76]	; (80245cc <_putc_r+0x60>)
 8024580:	429c      	cmp	r4, r3
 8024582:	d112      	bne.n	80245aa <_putc_r+0x3e>
 8024584:	6874      	ldr	r4, [r6, #4]
 8024586:	68a3      	ldr	r3, [r4, #8]
 8024588:	3b01      	subs	r3, #1
 802458a:	2b00      	cmp	r3, #0
 802458c:	60a3      	str	r3, [r4, #8]
 802458e:	da16      	bge.n	80245be <_putc_r+0x52>
 8024590:	69a2      	ldr	r2, [r4, #24]
 8024592:	4293      	cmp	r3, r2
 8024594:	db02      	blt.n	802459c <_putc_r+0x30>
 8024596:	b2eb      	uxtb	r3, r5
 8024598:	2b0a      	cmp	r3, #10
 802459a:	d110      	bne.n	80245be <_putc_r+0x52>
 802459c:	4622      	mov	r2, r4
 802459e:	4629      	mov	r1, r5
 80245a0:	4630      	mov	r0, r6
 80245a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80245a6:	f7fd bd25 	b.w	8021ff4 <__swbuf_r>
 80245aa:	4b09      	ldr	r3, [pc, #36]	; (80245d0 <_putc_r+0x64>)
 80245ac:	429c      	cmp	r4, r3
 80245ae:	d101      	bne.n	80245b4 <_putc_r+0x48>
 80245b0:	68b4      	ldr	r4, [r6, #8]
 80245b2:	e7e8      	b.n	8024586 <_putc_r+0x1a>
 80245b4:	4b07      	ldr	r3, [pc, #28]	; (80245d4 <_putc_r+0x68>)
 80245b6:	429c      	cmp	r4, r3
 80245b8:	bf08      	it	eq
 80245ba:	68f4      	ldreq	r4, [r6, #12]
 80245bc:	e7e3      	b.n	8024586 <_putc_r+0x1a>
 80245be:	6823      	ldr	r3, [r4, #0]
 80245c0:	1c5a      	adds	r2, r3, #1
 80245c2:	6022      	str	r2, [r4, #0]
 80245c4:	701d      	strb	r5, [r3, #0]
 80245c6:	b2e8      	uxtb	r0, r5
 80245c8:	bd70      	pop	{r4, r5, r6, pc}
 80245ca:	bf00      	nop
 80245cc:	0803fe30 	.word	0x0803fe30
 80245d0:	0803fe50 	.word	0x0803fe50
 80245d4:	0803fe10 	.word	0x0803fe10

080245d8 <_read_r>:
 80245d8:	b538      	push	{r3, r4, r5, lr}
 80245da:	4c07      	ldr	r4, [pc, #28]	; (80245f8 <_read_r+0x20>)
 80245dc:	4605      	mov	r5, r0
 80245de:	4608      	mov	r0, r1
 80245e0:	4611      	mov	r1, r2
 80245e2:	2200      	movs	r2, #0
 80245e4:	6022      	str	r2, [r4, #0]
 80245e6:	461a      	mov	r2, r3
 80245e8:	f7e0 f9a8 	bl	800493c <_read>
 80245ec:	1c43      	adds	r3, r0, #1
 80245ee:	d102      	bne.n	80245f6 <_read_r+0x1e>
 80245f0:	6823      	ldr	r3, [r4, #0]
 80245f2:	b103      	cbz	r3, 80245f6 <_read_r+0x1e>
 80245f4:	602b      	str	r3, [r5, #0]
 80245f6:	bd38      	pop	{r3, r4, r5, pc}
 80245f8:	200362c0 	.word	0x200362c0

080245fc <__sccl>:
 80245fc:	b570      	push	{r4, r5, r6, lr}
 80245fe:	780b      	ldrb	r3, [r1, #0]
 8024600:	2b5e      	cmp	r3, #94	; 0x5e
 8024602:	bf13      	iteet	ne
 8024604:	1c4a      	addne	r2, r1, #1
 8024606:	1c8a      	addeq	r2, r1, #2
 8024608:	784b      	ldrbeq	r3, [r1, #1]
 802460a:	2100      	movne	r1, #0
 802460c:	bf08      	it	eq
 802460e:	2101      	moveq	r1, #1
 8024610:	1e44      	subs	r4, r0, #1
 8024612:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8024616:	f804 1f01 	strb.w	r1, [r4, #1]!
 802461a:	42ac      	cmp	r4, r5
 802461c:	d1fb      	bne.n	8024616 <__sccl+0x1a>
 802461e:	b913      	cbnz	r3, 8024626 <__sccl+0x2a>
 8024620:	3a01      	subs	r2, #1
 8024622:	4610      	mov	r0, r2
 8024624:	bd70      	pop	{r4, r5, r6, pc}
 8024626:	f081 0401 	eor.w	r4, r1, #1
 802462a:	54c4      	strb	r4, [r0, r3]
 802462c:	1c51      	adds	r1, r2, #1
 802462e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8024632:	2d2d      	cmp	r5, #45	; 0x2d
 8024634:	f101 36ff 	add.w	r6, r1, #4294967295
 8024638:	460a      	mov	r2, r1
 802463a:	d006      	beq.n	802464a <__sccl+0x4e>
 802463c:	2d5d      	cmp	r5, #93	; 0x5d
 802463e:	d0f0      	beq.n	8024622 <__sccl+0x26>
 8024640:	b90d      	cbnz	r5, 8024646 <__sccl+0x4a>
 8024642:	4632      	mov	r2, r6
 8024644:	e7ed      	b.n	8024622 <__sccl+0x26>
 8024646:	462b      	mov	r3, r5
 8024648:	e7ef      	b.n	802462a <__sccl+0x2e>
 802464a:	780e      	ldrb	r6, [r1, #0]
 802464c:	2e5d      	cmp	r6, #93	; 0x5d
 802464e:	d0fa      	beq.n	8024646 <__sccl+0x4a>
 8024650:	42b3      	cmp	r3, r6
 8024652:	dcf8      	bgt.n	8024646 <__sccl+0x4a>
 8024654:	3301      	adds	r3, #1
 8024656:	429e      	cmp	r6, r3
 8024658:	54c4      	strb	r4, [r0, r3]
 802465a:	dcfb      	bgt.n	8024654 <__sccl+0x58>
 802465c:	3102      	adds	r1, #2
 802465e:	e7e6      	b.n	802462e <__sccl+0x32>

08024660 <__submore>:
 8024660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024664:	460c      	mov	r4, r1
 8024666:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8024668:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802466c:	4299      	cmp	r1, r3
 802466e:	d11d      	bne.n	80246ac <__submore+0x4c>
 8024670:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8024674:	f7fb fd12 	bl	802009c <_malloc_r>
 8024678:	b918      	cbnz	r0, 8024682 <__submore+0x22>
 802467a:	f04f 30ff 	mov.w	r0, #4294967295
 802467e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024682:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8024686:	63a3      	str	r3, [r4, #56]	; 0x38
 8024688:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 802468c:	6360      	str	r0, [r4, #52]	; 0x34
 802468e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8024692:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8024696:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 802469a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 802469e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80246a2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80246a6:	6020      	str	r0, [r4, #0]
 80246a8:	2000      	movs	r0, #0
 80246aa:	e7e8      	b.n	802467e <__submore+0x1e>
 80246ac:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80246ae:	0077      	lsls	r7, r6, #1
 80246b0:	463a      	mov	r2, r7
 80246b2:	f7ff f9a1 	bl	80239f8 <_realloc_r>
 80246b6:	4605      	mov	r5, r0
 80246b8:	2800      	cmp	r0, #0
 80246ba:	d0de      	beq.n	802467a <__submore+0x1a>
 80246bc:	eb00 0806 	add.w	r8, r0, r6
 80246c0:	4601      	mov	r1, r0
 80246c2:	4632      	mov	r2, r6
 80246c4:	4640      	mov	r0, r8
 80246c6:	f7fb f9da 	bl	801fa7e <memcpy>
 80246ca:	f8c4 8000 	str.w	r8, [r4]
 80246ce:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80246d2:	e7e9      	b.n	80246a8 <__submore+0x48>

080246d4 <__env_lock>:
 80246d4:	4770      	bx	lr

080246d6 <__env_unlock>:
 80246d6:	4770      	bx	lr

080246d8 <_fstat_r>:
 80246d8:	b538      	push	{r3, r4, r5, lr}
 80246da:	4c07      	ldr	r4, [pc, #28]	; (80246f8 <_fstat_r+0x20>)
 80246dc:	2300      	movs	r3, #0
 80246de:	4605      	mov	r5, r0
 80246e0:	4608      	mov	r0, r1
 80246e2:	4611      	mov	r1, r2
 80246e4:	6023      	str	r3, [r4, #0]
 80246e6:	f7e0 f93b 	bl	8004960 <_fstat>
 80246ea:	1c43      	adds	r3, r0, #1
 80246ec:	d102      	bne.n	80246f4 <_fstat_r+0x1c>
 80246ee:	6823      	ldr	r3, [r4, #0]
 80246f0:	b103      	cbz	r3, 80246f4 <_fstat_r+0x1c>
 80246f2:	602b      	str	r3, [r5, #0]
 80246f4:	bd38      	pop	{r3, r4, r5, pc}
 80246f6:	bf00      	nop
 80246f8:	200362c0 	.word	0x200362c0

080246fc <_isatty_r>:
 80246fc:	b538      	push	{r3, r4, r5, lr}
 80246fe:	4c06      	ldr	r4, [pc, #24]	; (8024718 <_isatty_r+0x1c>)
 8024700:	2300      	movs	r3, #0
 8024702:	4605      	mov	r5, r0
 8024704:	4608      	mov	r0, r1
 8024706:	6023      	str	r3, [r4, #0]
 8024708:	f7e0 f930 	bl	800496c <_isatty>
 802470c:	1c43      	adds	r3, r0, #1
 802470e:	d102      	bne.n	8024716 <_isatty_r+0x1a>
 8024710:	6823      	ldr	r3, [r4, #0]
 8024712:	b103      	cbz	r3, 8024716 <_isatty_r+0x1a>
 8024714:	602b      	str	r3, [r5, #0]
 8024716:	bd38      	pop	{r3, r4, r5, pc}
 8024718:	200362c0 	.word	0x200362c0

0802471c <_malloc_usable_size_r>:
 802471c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8024720:	1f18      	subs	r0, r3, #4
 8024722:	2b00      	cmp	r3, #0
 8024724:	bfbc      	itt	lt
 8024726:	580b      	ldrlt	r3, [r1, r0]
 8024728:	18c0      	addlt	r0, r0, r3
 802472a:	4770      	bx	lr

0802472c <_init>:
 802472c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802472e:	bf00      	nop
 8024730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024732:	bc08      	pop	{r3}
 8024734:	469e      	mov	lr, r3
 8024736:	4770      	bx	lr

08024738 <_fini>:
 8024738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802473a:	bf00      	nop
 802473c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802473e:	bc08      	pop	{r3}
 8024740:	469e      	mov	lr, r3
 8024742:	4770      	bx	lr
